{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'prefer-as-const',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Enforce the use of `as const` over literal type',\n      recommended: 'error'\n    },\n    fixable: 'code',\n    hasSuggestions: true,\n    messages: {\n      preferConstAssertion: 'Expected a `const` instead of a literal type assertion.',\n      variableConstAssertion: 'Expected a `const` assertion instead of a literal type annotation.',\n      variableSuggest: 'You should use `as const` instead of type annotation.'\n    },\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    function compareTypes(valueNode, typeNode, canFix) {\n      if (valueNode.type === utils_1.AST_NODE_TYPES.Literal && typeNode.type === utils_1.AST_NODE_TYPES.TSLiteralType && 'raw' in typeNode.literal && valueNode.raw === typeNode.literal.raw) {\n        if (canFix) {\n          context.report({\n            node: typeNode,\n            messageId: 'preferConstAssertion',\n            fix: fixer => fixer.replaceText(typeNode, 'const')\n          });\n        } else {\n          context.report({\n            node: typeNode,\n            messageId: 'variableConstAssertion',\n            suggest: [{\n              messageId: 'variableSuggest',\n              fix: fixer => [fixer.remove(typeNode.parent), fixer.insertTextAfter(valueNode, ' as const')]\n            }]\n          });\n        }\n      }\n    }\n\n    return {\n      TSAsExpression(node) {\n        compareTypes(node.expression, node.typeAnnotation, true);\n      },\n\n      TSTypeAssertion(node) {\n        compareTypes(node.expression, node.typeAnnotation, true);\n      },\n\n      PropertyDefinition(node) {\n        if (node.value && node.typeAnnotation) {\n          compareTypes(node.value, node.typeAnnotation.typeAnnotation, false);\n        }\n      },\n\n      VariableDeclarator(node) {\n        if (node.init && node.id.typeAnnotation) {\n          compareTypes(node.init, node.id.typeAnnotation.typeAnnotation, false);\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AAEAA,kBAAeC,IAAI,CAACC,UAAL,CAAgB;EAC7BC,IAAI,EAAE,iBADuB;EAE7BC,IAAI,EAAE;IACJC,IAAI,EAAE,YADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EAAE,iDADT;MAEJC,WAAW,EAAE;IAFT,CAFF;IAMJC,OAAO,EAAE,MANL;IAOJC,cAAc,EAAE,IAPZ;IAQJC,QAAQ,EAAE;MACRC,oBAAoB,EAClB,yDAFM;MAGRC,sBAAsB,EACpB,oEAJM;MAKRC,eAAe,EAAE;IALT,CARN;IAeJC,MAAM,EAAE;EAfJ,CAFuB;EAmB7BC,cAAc,EAAE,EAnBa;;EAoB7BC,MAAM,CAACC,OAAD,EAAQ;IACZ,SAASC,YAAT,CACEC,SADF,EAEEC,QAFF,EAGEC,MAHF,EAGiB;MAEf,IACEF,SAAS,CAACf,IAAV,KAAmBkB,uBAAeC,OAAlC,IACAH,QAAQ,CAAChB,IAAT,KAAkBkB,uBAAeE,aADjC,IAEA,SAASJ,QAAQ,CAACK,OAFlB,IAGAN,SAAS,CAACO,GAAV,KAAkBN,QAAQ,CAACK,OAAT,CAAiBC,GAJrC,EAKE;QACA,IAAIL,MAAJ,EAAY;UACVJ,OAAO,CAACU,MAAR,CAAe;YACbC,IAAI,EAAER,QADO;YAEbS,SAAS,EAAE,sBAFE;YAGbC,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACC,WAAN,CAAkBZ,QAAlB,EAA4B,OAA5B;UAHD,CAAf;QAKD,CAND,MAMO;UACLH,OAAO,CAACU,MAAR,CAAe;YACbC,IAAI,EAAER,QADO;YAEbS,SAAS,EAAE,wBAFE;YAGbI,OAAO,EAAE,CACP;cACEJ,SAAS,EAAE,iBADb;cAEEC,GAAG,EAAGC,KAAD,IAA+B,CAClCA,KAAK,CAACG,MAAN,CAAad,QAAQ,CAACe,MAAtB,CADkC,EAElCJ,KAAK,CAACK,eAAN,CAAsBjB,SAAtB,EAAiC,WAAjC,CAFkC;YAFtC,CADO;UAHI,CAAf;QAaD;MACF;IACF;;IAED,OAAO;MACLkB,cAAc,CAACT,IAAD,EAAK;QACjBV,YAAY,CAACU,IAAI,CAACU,UAAN,EAAkBV,IAAI,CAACW,cAAvB,EAAuC,IAAvC,CAAZ;MACD,CAHI;;MAILC,eAAe,CAACZ,IAAD,EAAK;QAClBV,YAAY,CAACU,IAAI,CAACU,UAAN,EAAkBV,IAAI,CAACW,cAAvB,EAAuC,IAAvC,CAAZ;MACD,CANI;;MAOLE,kBAAkB,CAACb,IAAD,EAAK;QACrB,IAAIA,IAAI,CAACc,KAAL,IAAcd,IAAI,CAACW,cAAvB,EAAuC;UACrCrB,YAAY,CAACU,IAAI,CAACc,KAAN,EAAad,IAAI,CAACW,cAAL,CAAoBA,cAAjC,EAAiD,KAAjD,CAAZ;QACD;MACF,CAXI;;MAYLI,kBAAkB,CAACf,IAAD,EAAK;QACrB,IAAIA,IAAI,CAACgB,IAAL,IAAahB,IAAI,CAACiB,EAAL,CAAQN,cAAzB,EAAyC;UACvCrB,YAAY,CAACU,IAAI,CAACgB,IAAN,EAAYhB,IAAI,CAACiB,EAAL,CAAQN,cAAR,CAAuBA,cAAnC,EAAmD,KAAnD,CAAZ;QACD;MACF;;IAhBI,CAAP;EAkBD;;AA1E4B,CAAhB,CAAf","names":["exports","util","createRule","name","meta","type","docs","description","recommended","fixable","hasSuggestions","messages","preferConstAssertion","variableConstAssertion","variableSuggest","schema","defaultOptions","create","context","compareTypes","valueNode","typeNode","canFix","utils_1","Literal","TSLiteralType","literal","raw","report","node","messageId","fix","fixer","replaceText","suggest","remove","parent","insertTextAfter","TSAsExpression","expression","typeAnnotation","TSTypeAssertion","PropertyDefinition","value","VariableDeclarator","init","id"],"sources":["../../src/rules/prefer-as-const.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}