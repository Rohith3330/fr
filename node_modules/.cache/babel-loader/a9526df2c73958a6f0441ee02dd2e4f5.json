{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst isJestFnCall = node => {\n  var _getNodeName;\n\n  if ((0, _utils.isDescribeCall)(node) || (0, _utils.isTestCaseCall)(node) || (0, _utils.isHook)(node)) {\n    return true;\n  }\n\n  return !!((_getNodeName = (0, _utils.getNodeName)(node)) !== null && _getNodeName !== void 0 && _getNodeName.startsWith('jest.'));\n};\n\nconst isNullOrUndefined = node => {\n  return node.type === _experimentalUtils.AST_NODE_TYPES.Literal && node.value === null || (0, _utils.isIdentifier)(node, 'undefined');\n};\n\nconst shouldBeInHook = function (node) {\n  let allowedFunctionCalls = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  switch (node.type) {\n    case _experimentalUtils.AST_NODE_TYPES.ExpressionStatement:\n      return shouldBeInHook(node.expression, allowedFunctionCalls);\n\n    case _experimentalUtils.AST_NODE_TYPES.CallExpression:\n      return !(isJestFnCall(node) || allowedFunctionCalls.includes((0, _utils.getNodeName)(node)));\n\n    case _experimentalUtils.AST_NODE_TYPES.VariableDeclaration:\n      {\n        if (node.kind === 'const') {\n          return false;\n        }\n\n        return node.declarations.some(_ref => {\n          let {\n            init\n          } = _ref;\n          return init !== null && !isNullOrUndefined(init);\n        });\n      }\n\n    default:\n      return false;\n  }\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Require setup and teardown code to be within a hook',\n      recommended: false\n    },\n    messages: {\n      useHook: 'This should be done within a hook'\n    },\n    type: 'suggestion',\n    schema: [{\n      type: 'object',\n      properties: {\n        allowedFunctionCalls: {\n          type: 'array',\n          items: {\n            type: 'string'\n          }\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{\n    allowedFunctionCalls: []\n  }],\n\n  create(context) {\n    var _context$options$;\n\n    const {\n      allowedFunctionCalls\n    } = (_context$options$ = context.options[0]) !== null && _context$options$ !== void 0 ? _context$options$ : {};\n\n    const checkBlockBody = body => {\n      for (const statement of body) {\n        if (shouldBeInHook(statement, allowedFunctionCalls)) {\n          context.report({\n            node: statement,\n            messageId: 'useHook'\n          });\n        }\n      }\n    };\n\n    return {\n      Program(program) {\n        checkBlockBody(program.body);\n      },\n\n      CallExpression(node) {\n        if (!(0, _utils.isDescribeCall)(node) || node.arguments.length < 2) {\n          return;\n        }\n\n        const [, testFn] = node.arguments;\n\n        if (!(0, _utils.isFunction)(testFn) || testFn.body.type !== _experimentalUtils.AST_NODE_TYPES.BlockStatement) {\n          return;\n        }\n\n        checkBlockBody(testFn.body.body);\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","isJestFnCall","node","_getNodeName","isDescribeCall","isTestCaseCall","isHook","getNodeName","startsWith","isNullOrUndefined","type","AST_NODE_TYPES","Literal","isIdentifier","shouldBeInHook","allowedFunctionCalls","ExpressionStatement","expression","CallExpression","includes","VariableDeclaration","kind","declarations","some","init","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","useHook","schema","properties","items","additionalProperties","defaultOptions","create","context","_context$options$","options","checkBlockBody","body","statement","report","messageId","Program","program","arguments","length","testFn","isFunction","BlockStatement"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/require-hook.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst isJestFnCall = node => {\n  var _getNodeName;\n\n  if ((0, _utils.isDescribeCall)(node) || (0, _utils.isTestCaseCall)(node) || (0, _utils.isHook)(node)) {\n    return true;\n  }\n\n  return !!((_getNodeName = (0, _utils.getNodeName)(node)) !== null && _getNodeName !== void 0 && _getNodeName.startsWith('jest.'));\n};\n\nconst isNullOrUndefined = node => {\n  return node.type === _experimentalUtils.AST_NODE_TYPES.Literal && node.value === null || (0, _utils.isIdentifier)(node, 'undefined');\n};\n\nconst shouldBeInHook = (node, allowedFunctionCalls = []) => {\n  switch (node.type) {\n    case _experimentalUtils.AST_NODE_TYPES.ExpressionStatement:\n      return shouldBeInHook(node.expression, allowedFunctionCalls);\n\n    case _experimentalUtils.AST_NODE_TYPES.CallExpression:\n      return !(isJestFnCall(node) || allowedFunctionCalls.includes((0, _utils.getNodeName)(node)));\n\n    case _experimentalUtils.AST_NODE_TYPES.VariableDeclaration:\n      {\n        if (node.kind === 'const') {\n          return false;\n        }\n\n        return node.declarations.some(({\n          init\n        }) => init !== null && !isNullOrUndefined(init));\n      }\n\n    default:\n      return false;\n  }\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Require setup and teardown code to be within a hook',\n      recommended: false\n    },\n    messages: {\n      useHook: 'This should be done within a hook'\n    },\n    type: 'suggestion',\n    schema: [{\n      type: 'object',\n      properties: {\n        allowedFunctionCalls: {\n          type: 'array',\n          items: {\n            type: 'string'\n          }\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{\n    allowedFunctionCalls: []\n  }],\n\n  create(context) {\n    var _context$options$;\n\n    const {\n      allowedFunctionCalls\n    } = (_context$options$ = context.options[0]) !== null && _context$options$ !== void 0 ? _context$options$ : {};\n\n    const checkBlockBody = body => {\n      for (const statement of body) {\n        if (shouldBeInHook(statement, allowedFunctionCalls)) {\n          context.report({\n            node: statement,\n            messageId: 'useHook'\n          });\n        }\n      }\n    };\n\n    return {\n      Program(program) {\n        checkBlockBody(program.body);\n      },\n\n      CallExpression(node) {\n        if (!(0, _utils.isDescribeCall)(node) || node.arguments.length < 2) {\n          return;\n        }\n\n        const [, testFn] = node.arguments;\n\n        if (!(0, _utils.isFunction)(testFn) || testFn.body.type !== _experimentalUtils.AST_NODE_TYPES.BlockStatement) {\n          return;\n        }\n\n        checkBlockBody(testFn.body.body);\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,uCAAD,CAAhC;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,MAAME,YAAY,GAAGC,IAAI,IAAI;EAC3B,IAAIC,YAAJ;;EAEA,IAAI,CAAC,GAAGH,MAAM,CAACI,cAAX,EAA2BF,IAA3B,KAAoC,CAAC,GAAGF,MAAM,CAACK,cAAX,EAA2BH,IAA3B,CAApC,IAAwE,CAAC,GAAGF,MAAM,CAACM,MAAX,EAAmBJ,IAAnB,CAA5E,EAAsG;IACpG,OAAO,IAAP;EACD;;EAED,OAAO,CAAC,EAAE,CAACC,YAAY,GAAG,CAAC,GAAGH,MAAM,CAACO,WAAX,EAAwBL,IAAxB,CAAhB,MAAmD,IAAnD,IAA2DC,YAAY,KAAK,KAAK,CAAjF,IAAsFA,YAAY,CAACK,UAAb,CAAwB,OAAxB,CAAxF,CAAR;AACD,CARD;;AAUA,MAAMC,iBAAiB,GAAGP,IAAI,IAAI;EAChC,OAAOA,IAAI,CAACQ,IAAL,KAAcZ,kBAAkB,CAACa,cAAnB,CAAkCC,OAAhD,IAA2DV,IAAI,CAACN,KAAL,KAAe,IAA1E,IAAkF,CAAC,GAAGI,MAAM,CAACa,YAAX,EAAyBX,IAAzB,EAA+B,WAA/B,CAAzF;AACD,CAFD;;AAIA,MAAMY,cAAc,GAAG,UAACZ,IAAD,EAAqC;EAAA,IAA9Ba,oBAA8B,uEAAP,EAAO;;EAC1D,QAAQb,IAAI,CAACQ,IAAb;IACE,KAAKZ,kBAAkB,CAACa,cAAnB,CAAkCK,mBAAvC;MACE,OAAOF,cAAc,CAACZ,IAAI,CAACe,UAAN,EAAkBF,oBAAlB,CAArB;;IAEF,KAAKjB,kBAAkB,CAACa,cAAnB,CAAkCO,cAAvC;MACE,OAAO,EAAEjB,YAAY,CAACC,IAAD,CAAZ,IAAsBa,oBAAoB,CAACI,QAArB,CAA8B,CAAC,GAAGnB,MAAM,CAACO,WAAX,EAAwBL,IAAxB,CAA9B,CAAxB,CAAP;;IAEF,KAAKJ,kBAAkB,CAACa,cAAnB,CAAkCS,mBAAvC;MACE;QACE,IAAIlB,IAAI,CAACmB,IAAL,KAAc,OAAlB,EAA2B;UACzB,OAAO,KAAP;QACD;;QAED,OAAOnB,IAAI,CAACoB,YAAL,CAAkBC,IAAlB,CAAuB;UAAA,IAAC;YAC7BC;UAD6B,CAAD;UAAA,OAExBA,IAAI,KAAK,IAAT,IAAiB,CAACf,iBAAiB,CAACe,IAAD,CAFX;QAAA,CAAvB,CAAP;MAGD;;IAEH;MACE,OAAO,KAAP;EAnBJ;AAqBD,CAtBD;;AAwBA,IAAIC,QAAQ,GAAG,CAAC,GAAGzB,MAAM,CAAC0B,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,qDAFT;MAGJC,WAAW,EAAE;IAHT,CADF;IAMJC,QAAQ,EAAE;MACRC,OAAO,EAAE;IADD,CANN;IASJzB,IAAI,EAAE,YATF;IAUJ0B,MAAM,EAAE,CAAC;MACP1B,IAAI,EAAE,QADC;MAEP2B,UAAU,EAAE;QACVtB,oBAAoB,EAAE;UACpBL,IAAI,EAAE,OADc;UAEpB4B,KAAK,EAAE;YACL5B,IAAI,EAAE;UADD;QAFa;MADZ,CAFL;MAUP6B,oBAAoB,EAAE;IAVf,CAAD;EAVJ,CAF8B;EAyBpCC,cAAc,EAAE,CAAC;IACfzB,oBAAoB,EAAE;EADP,CAAD,CAzBoB;;EA6BpC0B,MAAM,CAACC,OAAD,EAAU;IACd,IAAIC,iBAAJ;;IAEA,MAAM;MACJ5B;IADI,IAEF,CAAC4B,iBAAiB,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAArB,MAA6C,IAA7C,IAAqDD,iBAAiB,KAAK,KAAK,CAAhF,GAAoFA,iBAApF,GAAwG,EAF5G;;IAIA,MAAME,cAAc,GAAGC,IAAI,IAAI;MAC7B,KAAK,MAAMC,SAAX,IAAwBD,IAAxB,EAA8B;QAC5B,IAAIhC,cAAc,CAACiC,SAAD,EAAYhC,oBAAZ,CAAlB,EAAqD;UACnD2B,OAAO,CAACM,MAAR,CAAe;YACb9C,IAAI,EAAE6C,SADO;YAEbE,SAAS,EAAE;UAFE,CAAf;QAID;MACF;IACF,CATD;;IAWA,OAAO;MACLC,OAAO,CAACC,OAAD,EAAU;QACfN,cAAc,CAACM,OAAO,CAACL,IAAT,CAAd;MACD,CAHI;;MAKL5B,cAAc,CAAChB,IAAD,EAAO;QACnB,IAAI,CAAC,CAAC,GAAGF,MAAM,CAACI,cAAX,EAA2BF,IAA3B,CAAD,IAAqCA,IAAI,CAACkD,SAAL,CAAeC,MAAf,GAAwB,CAAjE,EAAoE;UAClE;QACD;;QAED,MAAM,GAAGC,MAAH,IAAapD,IAAI,CAACkD,SAAxB;;QAEA,IAAI,CAAC,CAAC,GAAGpD,MAAM,CAACuD,UAAX,EAAuBD,MAAvB,CAAD,IAAmCA,MAAM,CAACR,IAAP,CAAYpC,IAAZ,KAAqBZ,kBAAkB,CAACa,cAAnB,CAAkC6C,cAA9F,EAA8G;UAC5G;QACD;;QAEDX,cAAc,CAACS,MAAM,CAACR,IAAP,CAAYA,IAAb,CAAd;MACD;;IAjBI,CAAP;EAoBD;;AAnEmC,CAAvB,CAAf;;AAuEAnD,OAAO,CAACE,OAAR,GAAkB4B,QAAlB"},"metadata":{},"sourceType":"script"}