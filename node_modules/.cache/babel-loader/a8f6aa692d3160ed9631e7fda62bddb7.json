{"ast":null,"code":"/**\n * @fileoverview Comma spacing - validates spacing before and after comma\n * @author Vignesh Anand aka vegetableman.\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"Enforce consistent spacing before and after commas\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/comma-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        before: {\n          type: \"boolean\",\n          default: false\n        },\n        after: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missing: \"A space is required {{loc}} ','.\",\n      unexpected: \"There should be no space {{loc}} ','.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const tokensAndComments = sourceCode.tokensAndComments;\n    const options = {\n      before: context.options[0] ? context.options[0].before : false,\n      after: context.options[0] ? context.options[0].after : true\n    }; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n    // list of comma tokens to ignore for the check of leading whitespace\n\n    const commaTokensToIgnore = [];\n    /**\n     * Reports a spacing error with an appropriate message.\n     * @param {ASTNode} node The binary expression node to report.\n     * @param {string} loc Is the error \"before\" or \"after\" the comma?\n     * @param {ASTNode} otherNode The node at the left or right of `node`\n     * @returns {void}\n     * @private\n     */\n\n    function report(node, loc, otherNode) {\n      context.report({\n        node,\n\n        fix(fixer) {\n          if (options[loc]) {\n            if (loc === \"before\") {\n              return fixer.insertTextBefore(node, \" \");\n            }\n\n            return fixer.insertTextAfter(node, \" \");\n          }\n\n          let start, end;\n          const newText = \"\";\n\n          if (loc === \"before\") {\n            start = otherNode.range[1];\n            end = node.range[0];\n          } else {\n            start = node.range[1];\n            end = otherNode.range[0];\n          }\n\n          return fixer.replaceTextRange([start, end], newText);\n        },\n\n        messageId: options[loc] ? \"missing\" : \"unexpected\",\n        data: {\n          loc\n        }\n      });\n    }\n    /**\n     * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.\n     * @param {ASTNode} node An ArrayExpression or ArrayPattern node.\n     * @returns {void}\n     */\n\n\n    function addNullElementsToIgnoreList(node) {\n      let previousToken = sourceCode.getFirstToken(node);\n      node.elements.forEach(element => {\n        let token;\n\n        if (element === null) {\n          token = sourceCode.getTokenAfter(previousToken);\n\n          if (astUtils.isCommaToken(token)) {\n            commaTokensToIgnore.push(token);\n          }\n        } else {\n          token = sourceCode.getTokenAfter(element);\n        }\n\n        previousToken = token;\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      \"Program:exit\"() {\n        tokensAndComments.forEach((token, i) => {\n          if (!astUtils.isCommaToken(token)) {\n            return;\n          }\n\n          const previousToken = tokensAndComments[i - 1];\n          const nextToken = tokensAndComments[i + 1];\n\n          if (previousToken && !astUtils.isCommaToken(previousToken) && // ignore spacing between two commas\n\n          /*\n           * `commaTokensToIgnore` are ending commas of `null` elements (array holes/elisions).\n           * In addition to spacing between two commas, this can also ignore:\n           *\n           *   - Spacing after `[` (controlled by array-bracket-spacing)\n           *       Example: [ , ]\n           *                 ^\n           *   - Spacing after a comment (for backwards compatibility, this was possibly unintentional)\n           *       Example: [a, /* * / ,]\n           *                          ^\n           */\n          !commaTokensToIgnore.includes(token) && astUtils.isTokenOnSameLine(previousToken, token) && options.before !== sourceCode.isSpaceBetweenTokens(previousToken, token)) {\n            report(token, \"before\", previousToken);\n          }\n\n          if (nextToken && !astUtils.isCommaToken(nextToken) && // ignore spacing between two commas\n          !astUtils.isClosingParenToken(nextToken) && // controlled by space-in-parens\n          !astUtils.isClosingBracketToken(nextToken) && // controlled by array-bracket-spacing\n          !astUtils.isClosingBraceToken(nextToken) && // controlled by object-curly-spacing\n          !(!options.after && nextToken.type === \"Line\") && // special case, allow space before line comment\n          astUtils.isTokenOnSameLine(token, nextToken) && options.after !== sourceCode.isSpaceBetweenTokens(token, nextToken)) {\n            report(token, \"after\", nextToken);\n          }\n        });\n      },\n\n      ArrayExpression: addNullElementsToIgnoreList,\n      ArrayPattern: addNullElementsToIgnoreList\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","fixable","schema","properties","before","default","after","additionalProperties","messages","missing","unexpected","create","context","sourceCode","getSourceCode","tokensAndComments","options","commaTokensToIgnore","report","node","loc","otherNode","fix","fixer","insertTextBefore","insertTextAfter","start","end","newText","range","replaceTextRange","messageId","data","addNullElementsToIgnoreList","previousToken","getFirstToken","elements","forEach","element","token","getTokenAfter","isCommaToken","push","i","nextToken","includes","isTokenOnSameLine","isSpaceBetweenTokens","isClosingParenToken","isClosingBracketToken","isClosingBraceToken","ArrayExpression","ArrayPattern"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/comma-spacing.js"],"sourcesContent":["/**\n * @fileoverview Comma spacing - validates spacing before and after comma\n * @author Vignesh Anand aka vegetableman.\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"Enforce consistent spacing before and after commas\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/comma-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    before: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    after: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            missing: \"A space is required {{loc}} ','.\",\n            unexpected: \"There should be no space {{loc}} ','.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.getSourceCode();\n        const tokensAndComments = sourceCode.tokensAndComments;\n\n        const options = {\n            before: context.options[0] ? context.options[0].before : false,\n            after: context.options[0] ? context.options[0].after : true\n        };\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // list of comma tokens to ignore for the check of leading whitespace\n        const commaTokensToIgnore = [];\n\n        /**\n         * Reports a spacing error with an appropriate message.\n         * @param {ASTNode} node The binary expression node to report.\n         * @param {string} loc Is the error \"before\" or \"after\" the comma?\n         * @param {ASTNode} otherNode The node at the left or right of `node`\n         * @returns {void}\n         * @private\n         */\n        function report(node, loc, otherNode) {\n            context.report({\n                node,\n                fix(fixer) {\n                    if (options[loc]) {\n                        if (loc === \"before\") {\n                            return fixer.insertTextBefore(node, \" \");\n                        }\n                        return fixer.insertTextAfter(node, \" \");\n\n                    }\n                    let start, end;\n                    const newText = \"\";\n\n                    if (loc === \"before\") {\n                        start = otherNode.range[1];\n                        end = node.range[0];\n                    } else {\n                        start = node.range[1];\n                        end = otherNode.range[0];\n                    }\n\n                    return fixer.replaceTextRange([start, end], newText);\n\n                },\n                messageId: options[loc] ? \"missing\" : \"unexpected\",\n                data: {\n                    loc\n                }\n            });\n        }\n\n        /**\n         * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.\n         * @param {ASTNode} node An ArrayExpression or ArrayPattern node.\n         * @returns {void}\n         */\n        function addNullElementsToIgnoreList(node) {\n            let previousToken = sourceCode.getFirstToken(node);\n\n            node.elements.forEach(element => {\n                let token;\n\n                if (element === null) {\n                    token = sourceCode.getTokenAfter(previousToken);\n\n                    if (astUtils.isCommaToken(token)) {\n                        commaTokensToIgnore.push(token);\n                    }\n                } else {\n                    token = sourceCode.getTokenAfter(element);\n                }\n\n                previousToken = token;\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            \"Program:exit\"() {\n                tokensAndComments.forEach((token, i) => {\n\n                    if (!astUtils.isCommaToken(token)) {\n                        return;\n                    }\n\n                    const previousToken = tokensAndComments[i - 1];\n                    const nextToken = tokensAndComments[i + 1];\n\n                    if (\n                        previousToken &&\n                        !astUtils.isCommaToken(previousToken) && // ignore spacing between two commas\n\n                        /*\n                         * `commaTokensToIgnore` are ending commas of `null` elements (array holes/elisions).\n                         * In addition to spacing between two commas, this can also ignore:\n                         *\n                         *   - Spacing after `[` (controlled by array-bracket-spacing)\n                         *       Example: [ , ]\n                         *                 ^\n                         *   - Spacing after a comment (for backwards compatibility, this was possibly unintentional)\n                         *       Example: [a, /* * / ,]\n                         *                          ^\n                         */\n                        !commaTokensToIgnore.includes(token) &&\n\n                        astUtils.isTokenOnSameLine(previousToken, token) &&\n                        options.before !== sourceCode.isSpaceBetweenTokens(previousToken, token)\n                    ) {\n                        report(token, \"before\", previousToken);\n                    }\n\n                    if (\n                        nextToken &&\n                        !astUtils.isCommaToken(nextToken) && // ignore spacing between two commas\n                        !astUtils.isClosingParenToken(nextToken) && // controlled by space-in-parens\n                        !astUtils.isClosingBracketToken(nextToken) && // controlled by array-bracket-spacing\n                        !astUtils.isClosingBraceToken(nextToken) && // controlled by object-curly-spacing\n                        !(!options.after && nextToken.type === \"Line\") && // special case, allow space before line comment\n                        astUtils.isTokenOnSameLine(token, nextToken) &&\n                        options.after !== sourceCode.isSpaceBetweenTokens(token, nextToken)\n                    ) {\n                        report(token, \"after\", nextToken);\n                    }\n                });\n            },\n            ArrayExpression: addNullElementsToIgnoreList,\n            ArrayPattern: addNullElementsToIgnoreList\n\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}