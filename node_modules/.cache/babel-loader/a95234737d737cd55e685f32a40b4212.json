{"ast":null,"code":"/* eslint-disable no-console */\n\"use strict\";\n\nvar assert = require(\"@sinonjs/referee-sinon\").assert;\n\nvar sinon = require(\"@sinonjs/referee-sinon\").sinon;\n\nvar deprecated = require(\"./deprecated\");\n\nvar msg = \"test\";\ndescribe(\"deprecated\", function () {\n  describe(\"defaultMsg\", function () {\n    it(\"should return a string\", function () {\n      assert.equals(deprecated.defaultMsg(\"sinon\", \"someFunc\"), \"sinon.someFunc is deprecated and will be removed from the public API in a future version of sinon.\");\n    });\n  });\n  describe(\"printWarning\", function () {\n    beforeEach(function () {\n      sinon.replace(process, \"emitWarning\", sinon.fake());\n    });\n    afterEach(sinon.restore);\n    describe(\"when `process.emitWarning` is defined\", function () {\n      it(\"should call process.emitWarning with a msg\", function () {\n        deprecated.printWarning(msg);\n        assert.calledOnceWith(process.emitWarning, msg);\n      });\n    });\n    describe(\"when `process.emitWarning` is undefined\", function () {\n      beforeEach(function () {\n        sinon.replace(console, \"info\", sinon.fake());\n        sinon.replace(console, \"log\", sinon.fake());\n        process.emitWarning = undefined;\n      });\n      afterEach(sinon.restore);\n      describe(\"when `console.info` is defined\", function () {\n        it(\"should call `console.info` with a message\", function () {\n          deprecated.printWarning(msg);\n          assert.calledOnceWith(console.info, msg);\n        });\n      });\n      describe(\"when `console.info` is undefined\", function () {\n        it(\"should call `console.log` with a message\", function () {\n          console.info = undefined;\n          deprecated.printWarning(msg);\n          assert.calledOnceWith(console.log, msg);\n        });\n      });\n    });\n  });\n  describe(\"wrap\", function () {\n    var method = sinon.fake();\n    var wrapped;\n    beforeEach(function () {\n      wrapped = deprecated.wrap(method, msg);\n    });\n    it(\"should return a wrapper function\", function () {\n      assert.match(wrapped, sinon.match.func);\n    });\n    it(\"should assign the prototype of the passed method\", function () {\n      assert.equals(method.prototype, wrapped.prototype);\n    });\n    context(\"when the passed method has falsy prototype\", function () {\n      it(\"should not be assigned to the wrapped method\", function () {\n        method.prototype = null;\n        wrapped = deprecated.wrap(method, msg);\n        assert.match(wrapped.prototype, sinon.match.object);\n      });\n    });\n    context(\"when invoking the wrapped function\", function () {\n      before(function () {\n        sinon.replace(deprecated, \"printWarning\", sinon.fake());\n        wrapped({});\n      });\n      it(\"should call `printWarning` before invoking\", function () {\n        assert.calledOnceWith(deprecated.printWarning, msg);\n      });\n      it(\"should invoke the passed method with the given arguments\", function () {\n        assert.calledOnceWith(method, {});\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","sinon","deprecated","msg","describe","it","equals","defaultMsg","beforeEach","replace","process","fake","afterEach","restore","printWarning","calledOnceWith","emitWarning","console","undefined","info","log","method","wrapped","wrap","match","func","prototype","context","object","before"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@sinonjs/commons/lib/deprecated.test.js"],"sourcesContent":["/* eslint-disable no-console */\n\"use strict\";\n\nvar assert = require(\"@sinonjs/referee-sinon\").assert;\nvar sinon = require(\"@sinonjs/referee-sinon\").sinon;\n\nvar deprecated = require(\"./deprecated\");\n\nvar msg = \"test\";\n\ndescribe(\"deprecated\", function() {\n    describe(\"defaultMsg\", function() {\n        it(\"should return a string\", function() {\n            assert.equals(\n                deprecated.defaultMsg(\"sinon\", \"someFunc\"),\n                \"sinon.someFunc is deprecated and will be removed from the public API in a future version of sinon.\"\n            );\n        });\n    });\n\n    describe(\"printWarning\", function() {\n        beforeEach(function() {\n            sinon.replace(process, \"emitWarning\", sinon.fake());\n        });\n\n        afterEach(sinon.restore);\n\n        describe(\"when `process.emitWarning` is defined\", function() {\n            it(\"should call process.emitWarning with a msg\", function() {\n                deprecated.printWarning(msg);\n                assert.calledOnceWith(process.emitWarning, msg);\n            });\n        });\n\n        describe(\"when `process.emitWarning` is undefined\", function() {\n            beforeEach(function() {\n                sinon.replace(console, \"info\", sinon.fake());\n                sinon.replace(console, \"log\", sinon.fake());\n                process.emitWarning = undefined;\n            });\n\n            afterEach(sinon.restore);\n\n            describe(\"when `console.info` is defined\", function() {\n                it(\"should call `console.info` with a message\", function() {\n                    deprecated.printWarning(msg);\n                    assert.calledOnceWith(console.info, msg);\n                });\n            });\n\n            describe(\"when `console.info` is undefined\", function() {\n                it(\"should call `console.log` with a message\", function() {\n                    console.info = undefined;\n                    deprecated.printWarning(msg);\n                    assert.calledOnceWith(console.log, msg);\n                });\n            });\n        });\n    });\n\n    describe(\"wrap\", function() {\n        var method = sinon.fake();\n        var wrapped;\n\n        beforeEach(function() {\n            wrapped = deprecated.wrap(method, msg);\n        });\n\n        it(\"should return a wrapper function\", function() {\n            assert.match(wrapped, sinon.match.func);\n        });\n\n        it(\"should assign the prototype of the passed method\", function() {\n            assert.equals(method.prototype, wrapped.prototype);\n        });\n\n        context(\"when the passed method has falsy prototype\", function() {\n            it(\"should not be assigned to the wrapped method\", function() {\n                method.prototype = null;\n                wrapped = deprecated.wrap(method, msg);\n                assert.match(wrapped.prototype, sinon.match.object);\n            });\n        });\n\n        context(\"when invoking the wrapped function\", function() {\n            before(function() {\n                sinon.replace(deprecated, \"printWarning\", sinon.fake());\n                wrapped({});\n            });\n\n            it(\"should call `printWarning` before invoking\", function() {\n                assert.calledOnceWith(deprecated.printWarning, msg);\n            });\n\n            it(\"should invoke the passed method with the given arguments\", function() {\n                assert.calledOnceWith(method, {});\n            });\n        });\n    });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}