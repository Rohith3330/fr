{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'space-before-function-paren',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Enforce consistent spacing before function parenthesis',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: 'whitespace',\n    schema: [{\n      oneOf: [{\n        enum: ['always', 'never']\n      }, {\n        type: 'object',\n        properties: {\n          anonymous: {\n            enum: ['always', 'never', 'ignore']\n          },\n          named: {\n            enum: ['always', 'never', 'ignore']\n          },\n          asyncArrow: {\n            enum: ['always', 'never', 'ignore']\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      unexpected: 'Unexpected space before function parentheses.',\n      missing: 'Missing space before function parentheses.'\n    }\n  },\n  defaultOptions: ['always'],\n\n  create(context, _ref) {\n    let [firstOption] = _ref;\n    const sourceCode = context.getSourceCode();\n    const baseConfig = typeof firstOption === 'string' ? firstOption : 'always';\n    const overrideConfig = typeof firstOption === 'object' ? firstOption : {};\n    /**\n     * Determines whether a function has a name.\n     * @param {ASTNode} node The function node.\n     * @returns {boolean} Whether the function has a name.\n     */\n\n    function isNamedFunction(node) {\n      if (node.id != null) {\n        return true;\n      }\n\n      const parent = node.parent;\n      return parent.type === utils_1.AST_NODE_TYPES.MethodDefinition || parent.type === utils_1.AST_NODE_TYPES.TSAbstractMethodDefinition || parent.type === utils_1.AST_NODE_TYPES.Property && (parent.kind === 'get' || parent.kind === 'set' || parent.method);\n    }\n    /**\n     * Gets the config for a given function\n     * @param {ASTNode} node The function node\n     * @returns {string} \"always\", \"never\", or \"ignore\"\n     */\n\n\n    function getConfigForFunction(node) {\n      var _a, _b, _c;\n\n      if (node.type === utils_1.AST_NODE_TYPES.ArrowFunctionExpression) {\n        // Always ignore non-async functions and arrow functions without parens, e.g. async foo => bar\n        if (node.async && util.isOpeningParenToken(sourceCode.getFirstToken(node, {\n          skip: 1\n        }))) {\n          return (_a = overrideConfig.asyncArrow) !== null && _a !== void 0 ? _a : baseConfig;\n        }\n      } else if (isNamedFunction(node)) {\n        return (_b = overrideConfig.named) !== null && _b !== void 0 ? _b : baseConfig; // `generator-star-spacing` should warn anonymous generators. E.g. `function* () {}`\n      } else if (!node.generator) {\n        return (_c = overrideConfig.anonymous) !== null && _c !== void 0 ? _c : baseConfig;\n      }\n\n      return 'ignore';\n    }\n    /**\n     * Checks the parens of a function node\n     * @param {ASTNode} node A function node\n     * @returns {void}\n     */\n\n\n    function checkFunction(node) {\n      const functionConfig = getConfigForFunction(node);\n\n      if (functionConfig === 'ignore') {\n        return;\n      }\n\n      let leftToken, rightToken;\n\n      if (node.typeParameters) {\n        leftToken = sourceCode.getLastToken(node.typeParameters);\n        rightToken = sourceCode.getTokenAfter(leftToken);\n      } else {\n        rightToken = sourceCode.getFirstToken(node, util.isOpeningParenToken);\n        leftToken = sourceCode.getTokenBefore(rightToken);\n      } // eslint-disable-next-line deprecation/deprecation -- TODO - switch once our min ESLint version is 6.7.0\n\n\n      const hasSpacing = sourceCode.isSpaceBetweenTokens(leftToken, rightToken);\n\n      if (hasSpacing && functionConfig === 'never') {\n        context.report({\n          node,\n          loc: {\n            start: leftToken.loc.end,\n            end: rightToken.loc.start\n          },\n          messageId: 'unexpected',\n          fix: fixer => fixer.removeRange([leftToken.range[1], rightToken.range[0]])\n        });\n      } else if (!hasSpacing && functionConfig === 'always' && (!node.typeParameters || node.id)) {\n        context.report({\n          node,\n          loc: rightToken.loc,\n          messageId: 'missing',\n          fix: fixer => fixer.insertTextAfter(leftToken, ' ')\n        });\n      }\n    }\n\n    return {\n      ArrowFunctionExpression: checkFunction,\n      FunctionDeclaration: checkFunction,\n      FunctionExpression: checkFunction,\n      TSEmptyBodyFunctionExpression: checkFunction,\n      TSDeclareFunction: checkFunction\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["exports","util","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","schema","oneOf","enum","properties","anonymous","named","asyncArrow","additionalProperties","messages","unexpected","missing","defaultOptions","create","context","firstOption","sourceCode","getSourceCode","baseConfig","overrideConfig","isNamedFunction","node","id","parent","utils_1","MethodDefinition","TSAbstractMethodDefinition","Property","kind","method","getConfigForFunction","ArrowFunctionExpression","async","isOpeningParenToken","getFirstToken","skip","_a","_b","generator","_c","checkFunction","functionConfig","leftToken","rightToken","typeParameters","getLastToken","getTokenAfter","getTokenBefore","hasSpacing","isSpaceBetweenTokens","report","loc","start","end","messageId","fix","fixer","removeRange","range","insertTextAfter","FunctionDeclaration","FunctionExpression","TSEmptyBodyFunctionExpression","TSDeclareFunction"],"sources":["../../src/rules/space-before-function-paren.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}