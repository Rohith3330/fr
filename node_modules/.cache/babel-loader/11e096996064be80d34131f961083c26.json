{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar $RangeError = GetIntrinsic('%RangeError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Type = require('../Type'); // https://262.ecma-international.org/11.0/#sec-numeric-types-bigint-exponentiate\n\n\nmodule.exports = function BigIntExponentiate(base, exponent) {\n  if (Type(base) !== 'BigInt' || Type(exponent) !== 'BigInt') {\n    throw new $TypeError('Assertion failed: `base` and `exponent` arguments must be BigInts');\n  }\n\n  if (exponent < $BigInt(0)) {\n    throw new $RangeError('Exponent must be positive');\n  }\n\n  if (\n  /* base === $BigInt(0) && */\n  exponent === $BigInt(0)) {\n    return $BigInt(1);\n  }\n\n  var square = base;\n  var remaining = exponent;\n\n  while (remaining > $BigInt(0)) {\n    square += exponent;\n    --remaining; // eslint-disable-line no-plusplus\n  }\n\n  return square;\n};","map":{"version":3,"names":["GetIntrinsic","require","$BigInt","$RangeError","$TypeError","Type","module","exports","BigIntExponentiate","base","exponent","square","remaining"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2021/BigInt/exponentiate.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar $RangeError = GetIntrinsic('%RangeError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Type = require('../Type');\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-bigint-exponentiate\n\nmodule.exports = function BigIntExponentiate(base, exponent) {\n\tif (Type(base) !== 'BigInt' || Type(exponent) !== 'BigInt') {\n\t\tthrow new $TypeError('Assertion failed: `base` and `exponent` arguments must be BigInts');\n\t}\n\tif (exponent < $BigInt(0)) {\n\t\tthrow new $RangeError('Exponent must be positive');\n\t}\n\tif (/* base === $BigInt(0) && */ exponent === $BigInt(0)) {\n\t\treturn $BigInt(1);\n\t}\n\n\tvar square = base;\n\tvar remaining = exponent;\n\twhile (remaining > $BigInt(0)) {\n\t\tsquare += exponent;\n\t\t--remaining; // eslint-disable-line no-plusplus\n\t}\n\treturn square;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,OAAO,GAAGF,YAAY,CAAC,UAAD,EAAa,IAAb,CAA1B;AACA,IAAIG,WAAW,GAAGH,YAAY,CAAC,cAAD,CAA9B;AACA,IAAII,UAAU,GAAGJ,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIK,IAAI,GAAGJ,OAAO,CAAC,SAAD,CAAlB,C,CAEA;;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,QAAlC,EAA4C;EAC5D,IAAIL,IAAI,CAACI,IAAD,CAAJ,KAAe,QAAf,IAA2BJ,IAAI,CAACK,QAAD,CAAJ,KAAmB,QAAlD,EAA4D;IAC3D,MAAM,IAAIN,UAAJ,CAAe,mEAAf,CAAN;EACA;;EACD,IAAIM,QAAQ,GAAGR,OAAO,CAAC,CAAD,CAAtB,EAA2B;IAC1B,MAAM,IAAIC,WAAJ,CAAgB,2BAAhB,CAAN;EACA;;EACD;EAAI;EAA6BO,QAAQ,KAAKR,OAAO,CAAC,CAAD,CAArD,EAA0D;IACzD,OAAOA,OAAO,CAAC,CAAD,CAAd;EACA;;EAED,IAAIS,MAAM,GAAGF,IAAb;EACA,IAAIG,SAAS,GAAGF,QAAhB;;EACA,OAAOE,SAAS,GAAGV,OAAO,CAAC,CAAD,CAA1B,EAA+B;IAC9BS,MAAM,IAAID,QAAV;IACA,EAAEE,SAAF,CAF8B,CAEjB;EACb;;EACD,OAAOD,MAAP;AACA,CAlBD"},"metadata":{},"sourceType":"script"}