{"ast":null,"code":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\"use strict\";\n\nimport { defaults, makePredicate, noop, regexp_source_fix, sort_regexp_flags, return_false, return_true } from \"./utils/index.js\";\nimport { first_in_statement, left_is_object } from \"./utils/first_in_statement.js\";\nimport { AST_Array, AST_Arrow, AST_Assign, AST_Await, AST_BigInt, AST_Binary, AST_BlockStatement, AST_Break, AST_Call, AST_Case, AST_Catch, AST_Chain, AST_Class, AST_ClassExpression, AST_ClassPrivateProperty, AST_ClassProperty, AST_ClassStaticBlock, AST_ConciseMethod, AST_PrivateGetter, AST_PrivateMethod, AST_PrivateSetter, AST_Conditional, AST_Const, AST_Constant, AST_Continue, AST_Debugger, AST_Default, AST_DefaultAssign, AST_Definitions, AST_Defun, AST_Destructuring, AST_Directive, AST_Do, AST_Dot, AST_DotHash, AST_EmptyStatement, AST_Exit, AST_Expansion, AST_Export, AST_Finally, AST_For, AST_ForIn, AST_ForOf, AST_Function, AST_Hole, AST_If, AST_Import, AST_ImportMeta, AST_Jump, AST_LabeledStatement, AST_Lambda, AST_Let, AST_LoopControl, AST_NameMapping, AST_New, AST_NewTarget, AST_Node, AST_Number, AST_Object, AST_ObjectGetter, AST_ObjectKeyVal, AST_ObjectProperty, AST_ObjectSetter, AST_PrefixedTemplateString, AST_PropAccess, AST_RegExp, AST_Return, AST_Scope, AST_Sequence, AST_SimpleStatement, AST_Statement, AST_StatementWithBody, AST_String, AST_Sub, AST_Super, AST_Switch, AST_SwitchBranch, AST_Symbol, AST_SymbolClassProperty, AST_SymbolMethod, AST_SymbolRef, AST_TemplateSegment, AST_TemplateString, AST_This, AST_Throw, AST_Toplevel, AST_Try, AST_Unary, AST_UnaryPostfix, AST_UnaryPrefix, AST_Var, AST_VarDef, AST_While, AST_With, AST_Yield, TreeWalker, walk, walk_abort } from \"./ast.js\";\nimport { get_full_char_code, get_full_char, is_identifier_char, is_basic_identifier_string, is_identifier_string, PRECEDENCE, ALL_RESERVED_WORDS } from \"./parse.js\";\nconst EXPECT_DIRECTIVE = /^$|[;{][\\s\\n]*$/;\nconst CODE_LINE_BREAK = 10;\nconst CODE_SPACE = 32;\nconst r_annotation = /[@#]__(PURE|INLINE|NOINLINE)__/g;\n\nfunction is_some_comments(comment) {\n  // multiline comment\n  return (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@copyright|@lic|@cc_on|^\\**!/i.test(comment.value);\n}\n\nclass Rope {\n  constructor() {\n    this.committed = \"\";\n    this.current = \"\";\n  }\n\n  append(str) {\n    this.current += str;\n  }\n\n  insertAt(char, index) {\n    const {\n      committed,\n      current\n    } = this;\n\n    if (index < committed.length) {\n      this.committed = committed.slice(0, index) + char + committed.slice(index);\n    } else if (index === committed.length) {\n      this.committed += char;\n    } else {\n      index -= committed.length;\n      this.committed += current.slice(0, index) + char;\n      this.current = current.slice(index);\n    }\n  }\n\n  charAt(index) {\n    const {\n      committed\n    } = this;\n    if (index < committed.length) return committed[index];\n    return this.current[index - committed.length];\n  }\n\n  curLength() {\n    return this.current.length;\n  }\n\n  length() {\n    return this.committed.length + this.current.length;\n  }\n\n  toString() {\n    return this.committed + this.current;\n  }\n\n}\n\nfunction OutputStream(options) {\n  var readonly = !options;\n  options = defaults(options, {\n    ascii_only: false,\n    beautify: false,\n    braces: false,\n    comments: \"some\",\n    ecma: 5,\n    ie8: false,\n    indent_level: 4,\n    indent_start: 0,\n    inline_script: true,\n    keep_numbers: false,\n    keep_quoted_props: false,\n    max_line_len: false,\n    preamble: null,\n    preserve_annotations: false,\n    quote_keys: false,\n    quote_style: 0,\n    safari10: false,\n    semicolons: true,\n    shebang: true,\n    shorthand: undefined,\n    source_map: null,\n    webkit: false,\n    width: 80,\n    wrap_iife: false,\n    wrap_func_args: true,\n    _destroy_ast: false\n  }, true);\n  if (options.shorthand === undefined) options.shorthand = options.ecma > 5; // Convert comment option to RegExp if neccessary and set up comments filter\n\n  var comment_filter = return_false; // Default case, throw all comments away\n\n  if (options.comments) {\n    let comments = options.comments;\n\n    if (typeof options.comments === \"string\" && /^\\/.*\\/[a-zA-Z]*$/.test(options.comments)) {\n      var regex_pos = options.comments.lastIndexOf(\"/\");\n      comments = new RegExp(options.comments.substr(1, regex_pos - 1), options.comments.substr(regex_pos + 1));\n    }\n\n    if (comments instanceof RegExp) {\n      comment_filter = function (comment) {\n        return comment.type != \"comment5\" && comments.test(comment.value);\n      };\n    } else if (typeof comments === \"function\") {\n      comment_filter = function (comment) {\n        return comment.type != \"comment5\" && comments(this, comment);\n      };\n    } else if (comments === \"some\") {\n      comment_filter = is_some_comments;\n    } else {\n      // NOTE includes \"all\" option\n      comment_filter = return_true;\n    }\n  }\n\n  var indentation = 0;\n  var current_col = 0;\n  var current_line = 1;\n  var current_pos = 0;\n  var OUTPUT = new Rope();\n  let printed_comments = new Set();\n  var to_utf8 = options.ascii_only ? function (str) {\n    let identifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let regexp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (options.ecma >= 2015 && !options.safari10 && !regexp) {\n      str = str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]/g, function (ch) {\n        var code = get_full_char_code(ch, 0).toString(16);\n        return \"\\\\u{\" + code + \"}\";\n      });\n    }\n\n    return str.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g, function (ch) {\n      var code = ch.charCodeAt(0).toString(16);\n\n      if (code.length <= 2 && !identifier) {\n        while (code.length < 2) code = \"0\" + code;\n\n        return \"\\\\x\" + code;\n      } else {\n        while (code.length < 4) code = \"0\" + code;\n\n        return \"\\\\u\" + code;\n      }\n    });\n  } : function (str) {\n    return str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]|([\\ud800-\\udbff]|[\\udc00-\\udfff])/g, function (match, lone) {\n      if (lone) {\n        return \"\\\\u\" + lone.charCodeAt(0).toString(16);\n      }\n\n      return match;\n    });\n  };\n\n  function make_string(str, quote) {\n    var dq = 0,\n        sq = 0;\n    str = str.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g, function (s, i) {\n      switch (s) {\n        case '\"':\n          ++dq;\n          return '\"';\n\n        case \"'\":\n          ++sq;\n          return \"'\";\n\n        case \"\\\\\":\n          return \"\\\\\\\\\";\n\n        case \"\\n\":\n          return \"\\\\n\";\n\n        case \"\\r\":\n          return \"\\\\r\";\n\n        case \"\\t\":\n          return \"\\\\t\";\n\n        case \"\\b\":\n          return \"\\\\b\";\n\n        case \"\\f\":\n          return \"\\\\f\";\n\n        case \"\\x0B\":\n          return options.ie8 ? \"\\\\x0B\" : \"\\\\v\";\n\n        case \"\\u2028\":\n          return \"\\\\u2028\";\n\n        case \"\\u2029\":\n          return \"\\\\u2029\";\n\n        case \"\\ufeff\":\n          return \"\\\\ufeff\";\n\n        case \"\\0\":\n          return /[0-9]/.test(get_full_char(str, i + 1)) ? \"\\\\x00\" : \"\\\\0\";\n      }\n\n      return s;\n    });\n\n    function quote_single() {\n      return \"'\" + str.replace(/\\x27/g, \"\\\\'\") + \"'\";\n    }\n\n    function quote_double() {\n      return '\"' + str.replace(/\\x22/g, '\\\\\"') + '\"';\n    }\n\n    function quote_template() {\n      return \"`\" + str.replace(/`/g, \"\\\\`\") + \"`\";\n    }\n\n    str = to_utf8(str);\n    if (quote === \"`\") return quote_template();\n\n    switch (options.quote_style) {\n      case 1:\n        return quote_single();\n\n      case 2:\n        return quote_double();\n\n      case 3:\n        return quote == \"'\" ? quote_single() : quote_double();\n\n      default:\n        return dq > sq ? quote_single() : quote_double();\n    }\n  }\n\n  function encode_string(str, quote) {\n    var ret = make_string(str, quote);\n\n    if (options.inline_script) {\n      ret = ret.replace(/<\\x2f(script)([>\\/\\t\\n\\f\\r ])/gi, \"<\\\\/$1$2\");\n      ret = ret.replace(/\\x3c!--/g, \"\\\\x3c!--\");\n      ret = ret.replace(/--\\x3e/g, \"--\\\\x3e\");\n    }\n\n    return ret;\n  }\n\n  function make_name(name) {\n    name = name.toString();\n    name = to_utf8(name, true);\n    return name;\n  }\n\n  function make_indent(back) {\n    return \" \".repeat(options.indent_start + indentation - back * options.indent_level);\n  }\n  /* -----[ beautification/minification ]----- */\n\n\n  var has_parens = false;\n  var might_need_space = false;\n  var might_need_semicolon = false;\n  var might_add_newline = 0;\n  var need_newline_indented = false;\n  var need_space = false;\n  var newline_insert = -1;\n  var last = \"\";\n  var mapping_token,\n      mapping_name,\n      mappings = options.source_map && [];\n  var do_add_mapping = mappings ? function () {\n    mappings.forEach(function (mapping) {\n      try {\n        let {\n          name,\n          token\n        } = mapping;\n\n        if (token.type == \"name\" || token.type === \"privatename\") {\n          name = token.value;\n        } else if (name instanceof AST_Symbol) {\n          name = token.type === \"string\" ? token.value : name.name;\n        }\n\n        options.source_map.add(mapping.token.file, mapping.line, mapping.col, mapping.token.line, mapping.token.col, is_basic_identifier_string(name) ? name : undefined);\n      } catch (ex) {// Ignore bad mapping\n      }\n    });\n    mappings = [];\n  } : noop;\n  var ensure_line_len = options.max_line_len ? function () {\n    if (current_col > options.max_line_len) {\n      if (might_add_newline) {\n        OUTPUT.insertAt(\"\\n\", might_add_newline);\n        const curLength = OUTPUT.curLength();\n\n        if (mappings) {\n          var delta = curLength - current_col;\n          mappings.forEach(function (mapping) {\n            mapping.line++;\n            mapping.col += delta;\n          });\n        }\n\n        current_line++;\n        current_pos++;\n        current_col = curLength;\n      }\n    }\n\n    if (might_add_newline) {\n      might_add_newline = 0;\n      do_add_mapping();\n    }\n  } : noop;\n  var requireSemicolonChars = makePredicate(\"( [ + * / - , . `\");\n\n  function print(str) {\n    str = String(str);\n    var ch = get_full_char(str, 0);\n\n    if (need_newline_indented && ch) {\n      need_newline_indented = false;\n\n      if (ch !== \"\\n\") {\n        print(\"\\n\");\n        indent();\n      }\n    }\n\n    if (need_space && ch) {\n      need_space = false;\n\n      if (!/[\\s;})]/.test(ch)) {\n        space();\n      }\n    }\n\n    newline_insert = -1;\n    var prev = last.charAt(last.length - 1);\n\n    if (might_need_semicolon) {\n      might_need_semicolon = false;\n\n      if (prev === \":\" && ch === \"}\" || (!ch || !\";}\".includes(ch)) && prev !== \";\") {\n        if (options.semicolons || requireSemicolonChars.has(ch)) {\n          OUTPUT.append(\";\");\n          current_col++;\n          current_pos++;\n        } else {\n          ensure_line_len();\n\n          if (current_col > 0) {\n            OUTPUT.append(\"\\n\");\n            current_pos++;\n            current_line++;\n            current_col = 0;\n          }\n\n          if (/^\\s+$/.test(str)) {\n            // reset the semicolon flag, since we didn't print one\n            // now and might still have to later\n            might_need_semicolon = true;\n          }\n        }\n\n        if (!options.beautify) might_need_space = false;\n      }\n    }\n\n    if (might_need_space) {\n      if (is_identifier_char(prev) && (is_identifier_char(ch) || ch == \"\\\\\") || ch == \"/\" && ch == prev || (ch == \"+\" || ch == \"-\") && ch == last) {\n        OUTPUT.append(\" \");\n        current_col++;\n        current_pos++;\n      }\n\n      might_need_space = false;\n    }\n\n    if (mapping_token) {\n      mappings.push({\n        token: mapping_token,\n        name: mapping_name,\n        line: current_line,\n        col: current_col\n      });\n      mapping_token = false;\n      if (!might_add_newline) do_add_mapping();\n    }\n\n    OUTPUT.append(str);\n    has_parens = str[str.length - 1] == \"(\";\n    current_pos += str.length;\n    var a = str.split(/\\r?\\n/),\n        n = a.length - 1;\n    current_line += n;\n    current_col += a[0].length;\n\n    if (n > 0) {\n      ensure_line_len();\n      current_col = a[n].length;\n    }\n\n    last = str;\n  }\n\n  var star = function () {\n    print(\"*\");\n  };\n\n  var space = options.beautify ? function () {\n    print(\" \");\n  } : function () {\n    might_need_space = true;\n  };\n  var indent = options.beautify ? function (half) {\n    if (options.beautify) {\n      print(make_indent(half ? 0.5 : 0));\n    }\n  } : noop;\n  var with_indent = options.beautify ? function (col, cont) {\n    if (col === true) col = next_indent();\n    var save_indentation = indentation;\n    indentation = col;\n    var ret = cont();\n    indentation = save_indentation;\n    return ret;\n  } : function (col, cont) {\n    return cont();\n  };\n  var newline = options.beautify ? function () {\n    if (newline_insert < 0) return print(\"\\n\");\n\n    if (OUTPUT.charAt(newline_insert) != \"\\n\") {\n      OUTPUT.insertAt(\"\\n\", newline_insert);\n      current_pos++;\n      current_line++;\n    }\n\n    newline_insert++;\n  } : options.max_line_len ? function () {\n    ensure_line_len();\n    might_add_newline = OUTPUT.length();\n  } : noop;\n  var semicolon = options.beautify ? function () {\n    print(\";\");\n  } : function () {\n    might_need_semicolon = true;\n  };\n\n  function force_semicolon() {\n    might_need_semicolon = false;\n    print(\";\");\n  }\n\n  function next_indent() {\n    return indentation + options.indent_level;\n  }\n\n  function with_block(cont) {\n    var ret;\n    print(\"{\");\n    newline();\n    with_indent(next_indent(), function () {\n      ret = cont();\n    });\n    indent();\n    print(\"}\");\n    return ret;\n  }\n\n  function with_parens(cont) {\n    print(\"(\"); //XXX: still nice to have that for argument lists\n    //var ret = with_indent(current_col, cont);\n\n    var ret = cont();\n    print(\")\");\n    return ret;\n  }\n\n  function with_square(cont) {\n    print(\"[\"); //var ret = with_indent(current_col, cont);\n\n    var ret = cont();\n    print(\"]\");\n    return ret;\n  }\n\n  function comma() {\n    print(\",\");\n    space();\n  }\n\n  function colon() {\n    print(\":\");\n    space();\n  }\n\n  var add_mapping = mappings ? function (token, name) {\n    mapping_token = token;\n    mapping_name = name;\n  } : noop;\n\n  function get() {\n    if (might_add_newline) {\n      ensure_line_len();\n    }\n\n    return OUTPUT.toString();\n  }\n\n  function has_nlb() {\n    const output = OUTPUT.toString();\n    let n = output.length - 1;\n\n    while (n >= 0) {\n      const code = output.charCodeAt(n);\n\n      if (code === CODE_LINE_BREAK) {\n        return true;\n      }\n\n      if (code !== CODE_SPACE) {\n        return false;\n      }\n\n      n--;\n    }\n\n    return true;\n  }\n\n  function filter_comment(comment) {\n    if (!options.preserve_annotations) {\n      comment = comment.replace(r_annotation, \" \");\n    }\n\n    if (/^\\s*$/.test(comment)) {\n      return \"\";\n    }\n\n    return comment.replace(/(<\\s*\\/\\s*)(script)/i, \"<\\\\/$2\");\n  }\n\n  function prepend_comments(node) {\n    var self = this;\n    var start = node.start;\n    if (!start) return;\n    var printed_comments = self.printed_comments; // There cannot be a newline between return and its value.\n\n    const return_with_value = node instanceof AST_Exit && node.value;\n\n    if (start.comments_before && printed_comments.has(start.comments_before)) {\n      if (return_with_value) {\n        start.comments_before = [];\n      } else {\n        return;\n      }\n    }\n\n    var comments = start.comments_before;\n\n    if (!comments) {\n      comments = start.comments_before = [];\n    }\n\n    printed_comments.add(comments);\n\n    if (return_with_value) {\n      var tw = new TreeWalker(function (node) {\n        var parent = tw.parent();\n\n        if (parent instanceof AST_Exit || parent instanceof AST_Binary && parent.left === node || parent.TYPE == \"Call\" && parent.expression === node || parent instanceof AST_Conditional && parent.condition === node || parent instanceof AST_Dot && parent.expression === node || parent instanceof AST_Sequence && parent.expressions[0] === node || parent instanceof AST_Sub && parent.expression === node || parent instanceof AST_UnaryPostfix) {\n          if (!node.start) return;\n          var text = node.start.comments_before;\n\n          if (text && !printed_comments.has(text)) {\n            printed_comments.add(text);\n            comments = comments.concat(text);\n          }\n        } else {\n          return true;\n        }\n      });\n      tw.push(node);\n      node.value.walk(tw);\n    }\n\n    if (current_pos == 0) {\n      if (comments.length > 0 && options.shebang && comments[0].type === \"comment5\" && !printed_comments.has(comments[0])) {\n        print(\"#!\" + comments.shift().value + \"\\n\");\n        indent();\n      }\n\n      var preamble = options.preamble;\n\n      if (preamble) {\n        print(preamble.replace(/\\r\\n?|[\\n\\u2028\\u2029]|\\s*$/g, \"\\n\"));\n      }\n    }\n\n    comments = comments.filter(comment_filter, node).filter(c => !printed_comments.has(c));\n    if (comments.length == 0) return;\n    var last_nlb = has_nlb();\n    comments.forEach(function (c, i) {\n      printed_comments.add(c);\n\n      if (!last_nlb) {\n        if (c.nlb) {\n          print(\"\\n\");\n          indent();\n          last_nlb = true;\n        } else if (i > 0) {\n          space();\n        }\n      }\n\n      if (/comment[134]/.test(c.type)) {\n        var value = filter_comment(c.value);\n\n        if (value) {\n          print(\"//\" + value + \"\\n\");\n          indent();\n        }\n\n        last_nlb = true;\n      } else if (c.type == \"comment2\") {\n        var value = filter_comment(c.value);\n\n        if (value) {\n          print(\"/*\" + value + \"*/\");\n        }\n\n        last_nlb = false;\n      }\n    });\n\n    if (!last_nlb) {\n      if (start.nlb) {\n        print(\"\\n\");\n        indent();\n      } else {\n        space();\n      }\n    }\n  }\n\n  function append_comments(node, tail) {\n    var self = this;\n    var token = node.end;\n    if (!token) return;\n    var printed_comments = self.printed_comments;\n    var comments = token[tail ? \"comments_before\" : \"comments_after\"];\n    if (!comments || printed_comments.has(comments)) return;\n    if (!(node instanceof AST_Statement || comments.every(c => !/comment[134]/.test(c.type)))) return;\n    printed_comments.add(comments);\n    var insert = OUTPUT.length();\n    comments.filter(comment_filter, node).forEach(function (c, i) {\n      if (printed_comments.has(c)) return;\n      printed_comments.add(c);\n      need_space = false;\n\n      if (need_newline_indented) {\n        print(\"\\n\");\n        indent();\n        need_newline_indented = false;\n      } else if (c.nlb && (i > 0 || !has_nlb())) {\n        print(\"\\n\");\n        indent();\n      } else if (i > 0 || !tail) {\n        space();\n      }\n\n      if (/comment[134]/.test(c.type)) {\n        const value = filter_comment(c.value);\n\n        if (value) {\n          print(\"//\" + value);\n        }\n\n        need_newline_indented = true;\n      } else if (c.type == \"comment2\") {\n        const value = filter_comment(c.value);\n\n        if (value) {\n          print(\"/*\" + value + \"*/\");\n        }\n\n        need_space = true;\n      }\n    });\n    if (OUTPUT.length() > insert) newline_insert = insert;\n  }\n  /**\n   * When output.option(\"_destroy_ast\") is enabled, destroy the function.\n   * Call this after printing it.\n   */\n\n\n  const gc_scope = options[\"_destroy_ast\"] ? function gc_scope(scope) {\n    scope.body.length = 0;\n    scope.argnames.length = 0;\n  } : noop;\n  var stack = [];\n  return {\n    get: get,\n    toString: get,\n    indent: indent,\n    in_directive: false,\n    use_asm: null,\n    active_scope: null,\n    indentation: function () {\n      return indentation;\n    },\n    current_width: function () {\n      return current_col - indentation;\n    },\n    should_break: function () {\n      return options.width && this.current_width() >= options.width;\n    },\n    has_parens: function () {\n      return has_parens;\n    },\n    newline: newline,\n    print: print,\n    star: star,\n    space: space,\n    comma: comma,\n    colon: colon,\n    last: function () {\n      return last;\n    },\n    semicolon: semicolon,\n    force_semicolon: force_semicolon,\n    to_utf8: to_utf8,\n    print_name: function (name) {\n      print(make_name(name));\n    },\n    print_string: function (str, quote, escape_directive) {\n      var encoded = encode_string(str, quote);\n\n      if (escape_directive === true && !encoded.includes(\"\\\\\")) {\n        // Insert semicolons to break directive prologue\n        if (!EXPECT_DIRECTIVE.test(OUTPUT.toString())) {\n          force_semicolon();\n        }\n\n        force_semicolon();\n      }\n\n      print(encoded);\n    },\n    print_template_string_chars: function (str) {\n      var encoded = encode_string(str, \"`\").replace(/\\${/g, \"\\\\${\");\n      return print(encoded.substr(1, encoded.length - 2));\n    },\n    encode_string: encode_string,\n    next_indent: next_indent,\n    with_indent: with_indent,\n    with_block: with_block,\n    with_parens: with_parens,\n    with_square: with_square,\n    add_mapping: add_mapping,\n    option: function (opt) {\n      return options[opt];\n    },\n    gc_scope,\n    printed_comments: printed_comments,\n    prepend_comments: readonly ? noop : prepend_comments,\n    append_comments: readonly || comment_filter === return_false ? noop : append_comments,\n    line: function () {\n      return current_line;\n    },\n    col: function () {\n      return current_col;\n    },\n    pos: function () {\n      return current_pos;\n    },\n    push_node: function (node) {\n      stack.push(node);\n    },\n    pop_node: function () {\n      return stack.pop();\n    },\n    parent: function (n) {\n      return stack[stack.length - 2 - (n || 0)];\n    }\n  };\n}\n/* -----[ code generators ]----- */\n\n\n(function () {\n  /* -----[ utils ]----- */\n  function DEFPRINT(nodetype, generator) {\n    nodetype.DEFMETHOD(\"_codegen\", generator);\n  }\n\n  AST_Node.DEFMETHOD(\"print\", function (output, force_parens) {\n    var self = this,\n        generator = self._codegen;\n\n    if (self instanceof AST_Scope) {\n      output.active_scope = self;\n    } else if (!output.use_asm && self instanceof AST_Directive && self.value == \"use asm\") {\n      output.use_asm = output.active_scope;\n    }\n\n    function doit() {\n      output.prepend_comments(self);\n      self.add_source_map(output);\n      generator(self, output);\n      output.append_comments(self);\n    }\n\n    output.push_node(self);\n\n    if (force_parens || self.needs_parens(output)) {\n      output.with_parens(doit);\n    } else {\n      doit();\n    }\n\n    output.pop_node();\n\n    if (self === output.use_asm) {\n      output.use_asm = null;\n    }\n  });\n  AST_Node.DEFMETHOD(\"_print\", AST_Node.prototype.print);\n  AST_Node.DEFMETHOD(\"print_to_string\", function (options) {\n    var output = OutputStream(options);\n    this.print(output);\n    return output.get();\n  });\n  /* -----[ PARENTHESES ]----- */\n\n  function PARENS(nodetype, func) {\n    if (Array.isArray(nodetype)) {\n      nodetype.forEach(function (nodetype) {\n        PARENS(nodetype, func);\n      });\n    } else {\n      nodetype.DEFMETHOD(\"needs_parens\", func);\n    }\n  }\n\n  PARENS(AST_Node, return_false); // a function expression needs parens around it when it's provably\n  // the first token to appear in a statement.\n\n  PARENS(AST_Function, function (output) {\n    if (!output.has_parens() && first_in_statement(output)) {\n      return true;\n    }\n\n    if (output.option(\"webkit\")) {\n      var p = output.parent();\n\n      if (p instanceof AST_PropAccess && p.expression === this) {\n        return true;\n      }\n    }\n\n    if (output.option(\"wrap_iife\")) {\n      var p = output.parent();\n\n      if (p instanceof AST_Call && p.expression === this) {\n        return true;\n      }\n    }\n\n    if (output.option(\"wrap_func_args\")) {\n      var p = output.parent();\n\n      if (p instanceof AST_Call && p.args.includes(this)) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n  PARENS(AST_Arrow, function (output) {\n    var p = output.parent();\n\n    if (output.option(\"wrap_func_args\") && p instanceof AST_Call && p.args.includes(this)) {\n      return true;\n    }\n\n    return p instanceof AST_PropAccess && p.expression === this;\n  }); // same goes for an object literal (as in AST_Function), because\n  // otherwise {...} would be interpreted as a block of code.\n\n  PARENS(AST_Object, function (output) {\n    return !output.has_parens() && first_in_statement(output);\n  });\n  PARENS(AST_ClassExpression, first_in_statement);\n  PARENS(AST_Unary, function (output) {\n    var p = output.parent();\n    return p instanceof AST_PropAccess && p.expression === this || p instanceof AST_Call && p.expression === this || p instanceof AST_Binary && p.operator === \"**\" && this instanceof AST_UnaryPrefix && p.left === this && this.operator !== \"++\" && this.operator !== \"--\";\n  });\n  PARENS(AST_Await, function (output) {\n    var p = output.parent();\n    return p instanceof AST_PropAccess && p.expression === this || p instanceof AST_Call && p.expression === this || p instanceof AST_Binary && p.operator === \"**\" && p.left === this || output.option(\"safari10\") && p instanceof AST_UnaryPrefix;\n  });\n  PARENS(AST_Sequence, function (output) {\n    var p = output.parent();\n    return p instanceof AST_Call // (foo, bar)() or foo(1, (2, 3), 4)\n    || p instanceof AST_Unary // !(foo, bar, baz)\n    || p instanceof AST_Binary // 1 + (2, 3) + 4 ==> 8\n    || p instanceof AST_VarDef // var a = (1, 2), b = a + a; ==> b == 4\n    || p instanceof AST_PropAccess // (1, {foo:2}).foo or (1, {foo:2})[\"foo\"] ==> 2\n    || p instanceof AST_Array // [ 1, (2, 3), 4 ] ==> [ 1, 3, 4 ]\n    || p instanceof AST_ObjectProperty // { foo: (1, 2) }.foo ==> 2\n    || p instanceof AST_Conditional\n    /* (false, true) ? (a = 10, b = 20) : (c = 30)\n     * ==> 20 (side effect, set a := 10 and b := 20) */\n    || p instanceof AST_Arrow // x => (x, x)\n    || p instanceof AST_DefaultAssign // x => (x = (0, function(){}))\n    || p instanceof AST_Expansion // [...(a, b)]\n    || p instanceof AST_ForOf && this === p.object // for (e of (foo, bar)) {}\n    || p instanceof AST_Yield // yield (foo, bar)\n    || p instanceof AST_Export // export default (foo, bar)\n    ;\n  });\n  PARENS(AST_Binary, function (output) {\n    var p = output.parent(); // (foo && bar)()\n\n    if (p instanceof AST_Call && p.expression === this) return true; // typeof (foo && bar)\n\n    if (p instanceof AST_Unary) return true; // (foo && bar)[\"prop\"], (foo && bar).prop\n\n    if (p instanceof AST_PropAccess && p.expression === this) return true; // this deals with precedence: 3 * (2 + 1)\n\n    if (p instanceof AST_Binary) {\n      const po = p.operator;\n      const so = this.operator;\n\n      if (so === \"??\" && (po === \"||\" || po === \"&&\")) {\n        return true;\n      }\n\n      if (po === \"??\" && (so === \"||\" || so === \"&&\")) {\n        return true;\n      }\n\n      const pp = PRECEDENCE[po];\n      const sp = PRECEDENCE[so];\n\n      if (pp > sp || pp == sp && (this === p.right || po == \"**\")) {\n        return true;\n      }\n    }\n  });\n  PARENS(AST_Yield, function (output) {\n    var p = output.parent(); // (yield 1) + (yield 2)\n    // a = yield 3\n\n    if (p instanceof AST_Binary && p.operator !== \"=\") return true; // (yield 1)()\n    // new (yield 1)()\n\n    if (p instanceof AST_Call && p.expression === this) return true; // (yield 1) ? yield 2 : yield 3\n\n    if (p instanceof AST_Conditional && p.condition === this) return true; // -(yield 4)\n\n    if (p instanceof AST_Unary) return true; // (yield x).foo\n    // (yield x)['foo']\n\n    if (p instanceof AST_PropAccess && p.expression === this) return true;\n  });\n  PARENS(AST_PropAccess, function (output) {\n    var p = output.parent();\n\n    if (p instanceof AST_New && p.expression === this) {\n      // i.e. new (foo.bar().baz)\n      //\n      // if there's one call into this subtree, then we need\n      // parens around it too, otherwise the call will be\n      // interpreted as passing the arguments to the upper New\n      // expression.\n      return walk(this, node => {\n        if (node instanceof AST_Scope) return true;\n\n        if (node instanceof AST_Call) {\n          return walk_abort; // makes walk() return true.\n        }\n      });\n    }\n  });\n  PARENS(AST_Call, function (output) {\n    var p = output.parent(),\n        p1;\n    if (p instanceof AST_New && p.expression === this || p instanceof AST_Export && p.is_default && this.expression instanceof AST_Function) return true; // workaround for Safari bug.\n    // https://bugs.webkit.org/show_bug.cgi?id=123506\n\n    return this.expression instanceof AST_Function && p instanceof AST_PropAccess && p.expression === this && (p1 = output.parent(1)) instanceof AST_Assign && p1.left === p;\n  });\n  PARENS(AST_New, function (output) {\n    var p = output.parent();\n    if (this.args.length === 0 && (p instanceof AST_PropAccess // (new Date).getTime(), (new Date)[\"getTime\"]()\n    || p instanceof AST_Call && p.expression === this || p instanceof AST_PrefixedTemplateString && p.prefix === this)) // (new foo)(bar)\n      return true;\n  });\n  PARENS(AST_Number, function (output) {\n    var p = output.parent();\n\n    if (p instanceof AST_PropAccess && p.expression === this) {\n      var value = this.getValue();\n\n      if (value < 0 || /^0/.test(make_num(value))) {\n        return true;\n      }\n    }\n  });\n  PARENS(AST_BigInt, function (output) {\n    var p = output.parent();\n\n    if (p instanceof AST_PropAccess && p.expression === this) {\n      var value = this.getValue();\n\n      if (value.startsWith(\"-\")) {\n        return true;\n      }\n    }\n  });\n  PARENS([AST_Assign, AST_Conditional], function (output) {\n    var p = output.parent(); // !(a = false) → true\n\n    if (p instanceof AST_Unary) return true; // 1 + (a = 2) + 3 → 6, side effect setting a = 2\n\n    if (p instanceof AST_Binary && !(p instanceof AST_Assign)) return true; // (a = func)() —or— new (a = Object)()\n\n    if (p instanceof AST_Call && p.expression === this) return true; // (a = foo) ? bar : baz\n\n    if (p instanceof AST_Conditional && p.condition === this) return true; // (a = foo)[\"prop\"] —or— (a = foo).prop\n\n    if (p instanceof AST_PropAccess && p.expression === this) return true; // ({a, b} = {a: 1, b: 2}), a destructuring assignment\n\n    if (this instanceof AST_Assign && this.left instanceof AST_Destructuring && this.left.is_array === false) return true;\n  });\n  /* -----[ PRINTERS ]----- */\n\n  DEFPRINT(AST_Directive, function (self, output) {\n    output.print_string(self.value, self.quote);\n    output.semicolon();\n  });\n  DEFPRINT(AST_Expansion, function (self, output) {\n    output.print(\"...\");\n    self.expression.print(output);\n  });\n  DEFPRINT(AST_Destructuring, function (self, output) {\n    output.print(self.is_array ? \"[\" : \"{\");\n    var len = self.names.length;\n    self.names.forEach(function (name, i) {\n      if (i > 0) output.comma();\n      name.print(output); // If the final element is a hole, we need to make sure it\n      // doesn't look like a trailing comma, by inserting an actual\n      // trailing comma.\n\n      if (i == len - 1 && name instanceof AST_Hole) output.comma();\n    });\n    output.print(self.is_array ? \"]\" : \"}\");\n  });\n  DEFPRINT(AST_Debugger, function (self, output) {\n    output.print(\"debugger\");\n    output.semicolon();\n  });\n  /* -----[ statements ]----- */\n\n  function display_body(body, is_toplevel, output, allow_directives) {\n    var last = body.length - 1;\n    output.in_directive = allow_directives;\n    body.forEach(function (stmt, i) {\n      if (output.in_directive === true && !(stmt instanceof AST_Directive || stmt instanceof AST_EmptyStatement || stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String)) {\n        output.in_directive = false;\n      }\n\n      if (!(stmt instanceof AST_EmptyStatement)) {\n        output.indent();\n        stmt.print(output);\n\n        if (!(i == last && is_toplevel)) {\n          output.newline();\n          if (is_toplevel) output.newline();\n        }\n      }\n\n      if (output.in_directive === true && stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String) {\n        output.in_directive = false;\n      }\n    });\n    output.in_directive = false;\n  }\n\n  AST_StatementWithBody.DEFMETHOD(\"_do_print_body\", function (output) {\n    force_statement(this.body, output);\n  });\n  DEFPRINT(AST_Statement, function (self, output) {\n    self.body.print(output);\n    output.semicolon();\n  });\n  DEFPRINT(AST_Toplevel, function (self, output) {\n    display_body(self.body, true, output, true);\n    output.print(\"\");\n  });\n  DEFPRINT(AST_LabeledStatement, function (self, output) {\n    self.label.print(output);\n    output.colon();\n    self.body.print(output);\n  });\n  DEFPRINT(AST_SimpleStatement, function (self, output) {\n    self.body.print(output);\n    output.semicolon();\n  });\n\n  function print_braced_empty(self, output) {\n    output.print(\"{\");\n    output.with_indent(output.next_indent(), function () {\n      output.append_comments(self, true);\n    });\n    output.add_mapping(self.end);\n    output.print(\"}\");\n  }\n\n  function print_braced(self, output, allow_directives) {\n    if (self.body.length > 0) {\n      output.with_block(function () {\n        display_body(self.body, false, output, allow_directives);\n        output.add_mapping(self.end);\n      });\n    } else print_braced_empty(self, output);\n  }\n\n  DEFPRINT(AST_BlockStatement, function (self, output) {\n    print_braced(self, output);\n  });\n  DEFPRINT(AST_EmptyStatement, function (self, output) {\n    output.semicolon();\n  });\n  DEFPRINT(AST_Do, function (self, output) {\n    output.print(\"do\");\n    output.space();\n    make_block(self.body, output);\n    output.space();\n    output.print(\"while\");\n    output.space();\n    output.with_parens(function () {\n      self.condition.print(output);\n    });\n    output.semicolon();\n  });\n  DEFPRINT(AST_While, function (self, output) {\n    output.print(\"while\");\n    output.space();\n    output.with_parens(function () {\n      self.condition.print(output);\n    });\n    output.space();\n\n    self._do_print_body(output);\n  });\n  DEFPRINT(AST_For, function (self, output) {\n    output.print(\"for\");\n    output.space();\n    output.with_parens(function () {\n      if (self.init) {\n        if (self.init instanceof AST_Definitions) {\n          self.init.print(output);\n        } else {\n          parenthesize_for_noin(self.init, output, true);\n        }\n\n        output.print(\";\");\n        output.space();\n      } else {\n        output.print(\";\");\n      }\n\n      if (self.condition) {\n        self.condition.print(output);\n        output.print(\";\");\n        output.space();\n      } else {\n        output.print(\";\");\n      }\n\n      if (self.step) {\n        self.step.print(output);\n      }\n    });\n    output.space();\n\n    self._do_print_body(output);\n  });\n  DEFPRINT(AST_ForIn, function (self, output) {\n    output.print(\"for\");\n\n    if (self.await) {\n      output.space();\n      output.print(\"await\");\n    }\n\n    output.space();\n    output.with_parens(function () {\n      self.init.print(output);\n      output.space();\n      output.print(self instanceof AST_ForOf ? \"of\" : \"in\");\n      output.space();\n      self.object.print(output);\n    });\n    output.space();\n\n    self._do_print_body(output);\n  });\n  DEFPRINT(AST_With, function (self, output) {\n    output.print(\"with\");\n    output.space();\n    output.with_parens(function () {\n      self.expression.print(output);\n    });\n    output.space();\n\n    self._do_print_body(output);\n  });\n  /* -----[ functions ]----- */\n\n  AST_Lambda.DEFMETHOD(\"_do_print\", function (output, nokeyword) {\n    var self = this;\n\n    if (!nokeyword) {\n      if (self.async) {\n        output.print(\"async\");\n        output.space();\n      }\n\n      output.print(\"function\");\n\n      if (self.is_generator) {\n        output.star();\n      }\n\n      if (self.name) {\n        output.space();\n      }\n    }\n\n    if (self.name instanceof AST_Symbol) {\n      self.name.print(output);\n    } else if (nokeyword && self.name instanceof AST_Node) {\n      output.with_square(function () {\n        self.name.print(output); // Computed method name\n      });\n    }\n\n    output.with_parens(function () {\n      self.argnames.forEach(function (arg, i) {\n        if (i) output.comma();\n        arg.print(output);\n      });\n    });\n    output.space();\n    print_braced(self, output, true);\n  });\n  DEFPRINT(AST_Lambda, function (self, output) {\n    self._do_print(output);\n\n    output.gc_scope(self);\n  });\n  DEFPRINT(AST_PrefixedTemplateString, function (self, output) {\n    var tag = self.prefix;\n    var parenthesize_tag = tag instanceof AST_Lambda || tag instanceof AST_Binary || tag instanceof AST_Conditional || tag instanceof AST_Sequence || tag instanceof AST_Unary || tag instanceof AST_Dot && tag.expression instanceof AST_Object;\n    if (parenthesize_tag) output.print(\"(\");\n    self.prefix.print(output);\n    if (parenthesize_tag) output.print(\")\");\n    self.template_string.print(output);\n  });\n  DEFPRINT(AST_TemplateString, function (self, output) {\n    var is_tagged = output.parent() instanceof AST_PrefixedTemplateString;\n    output.print(\"`\");\n\n    for (var i = 0; i < self.segments.length; i++) {\n      if (!(self.segments[i] instanceof AST_TemplateSegment)) {\n        output.print(\"${\");\n        self.segments[i].print(output);\n        output.print(\"}\");\n      } else if (is_tagged) {\n        output.print(self.segments[i].raw);\n      } else {\n        output.print_template_string_chars(self.segments[i].value);\n      }\n    }\n\n    output.print(\"`\");\n  });\n  DEFPRINT(AST_TemplateSegment, function (self, output) {\n    output.print_template_string_chars(self.value);\n  });\n  AST_Arrow.DEFMETHOD(\"_do_print\", function (output) {\n    var self = this;\n    var parent = output.parent();\n    var needs_parens = parent instanceof AST_Binary && !(parent instanceof AST_Assign) || parent instanceof AST_Unary || parent instanceof AST_Call && self === parent.expression;\n\n    if (needs_parens) {\n      output.print(\"(\");\n    }\n\n    if (self.async) {\n      output.print(\"async\");\n      output.space();\n    }\n\n    if (self.argnames.length === 1 && self.argnames[0] instanceof AST_Symbol) {\n      self.argnames[0].print(output);\n    } else {\n      output.with_parens(function () {\n        self.argnames.forEach(function (arg, i) {\n          if (i) output.comma();\n          arg.print(output);\n        });\n      });\n    }\n\n    output.space();\n    output.print(\"=>\");\n    output.space();\n    const first_statement = self.body[0];\n\n    if (self.body.length === 1 && first_statement instanceof AST_Return) {\n      const returned = first_statement.value;\n\n      if (!returned) {\n        output.print(\"{}\");\n      } else if (left_is_object(returned)) {\n        output.print(\"(\");\n        returned.print(output);\n        output.print(\")\");\n      } else {\n        returned.print(output);\n      }\n    } else {\n      print_braced(self, output);\n    }\n\n    if (needs_parens) {\n      output.print(\")\");\n    }\n\n    output.gc_scope(self);\n  });\n  /* -----[ exits ]----- */\n\n  AST_Exit.DEFMETHOD(\"_do_print\", function (output, kind) {\n    output.print(kind);\n\n    if (this.value) {\n      output.space();\n      const comments = this.value.start.comments_before;\n\n      if (comments && comments.length && !output.printed_comments.has(comments)) {\n        output.print(\"(\");\n        this.value.print(output);\n        output.print(\")\");\n      } else {\n        this.value.print(output);\n      }\n    }\n\n    output.semicolon();\n  });\n  DEFPRINT(AST_Return, function (self, output) {\n    self._do_print(output, \"return\");\n  });\n  DEFPRINT(AST_Throw, function (self, output) {\n    self._do_print(output, \"throw\");\n  });\n  /* -----[ yield ]----- */\n\n  DEFPRINT(AST_Yield, function (self, output) {\n    var star = self.is_star ? \"*\" : \"\";\n    output.print(\"yield\" + star);\n\n    if (self.expression) {\n      output.space();\n      self.expression.print(output);\n    }\n  });\n  DEFPRINT(AST_Await, function (self, output) {\n    output.print(\"await\");\n    output.space();\n    var e = self.expression;\n    var parens = !(e instanceof AST_Call || e instanceof AST_SymbolRef || e instanceof AST_PropAccess || e instanceof AST_Unary || e instanceof AST_Constant || e instanceof AST_Await || e instanceof AST_Object);\n    if (parens) output.print(\"(\");\n    self.expression.print(output);\n    if (parens) output.print(\")\");\n  });\n  /* -----[ loop control ]----- */\n\n  AST_LoopControl.DEFMETHOD(\"_do_print\", function (output, kind) {\n    output.print(kind);\n\n    if (this.label) {\n      output.space();\n      this.label.print(output);\n    }\n\n    output.semicolon();\n  });\n  DEFPRINT(AST_Break, function (self, output) {\n    self._do_print(output, \"break\");\n  });\n  DEFPRINT(AST_Continue, function (self, output) {\n    self._do_print(output, \"continue\");\n  });\n  /* -----[ if ]----- */\n\n  function make_then(self, output) {\n    var b = self.body;\n    if (output.option(\"braces\") || output.option(\"ie8\") && b instanceof AST_Do) return make_block(b, output); // The squeezer replaces \"block\"-s that contain only a single\n    // statement with the statement itself; technically, the AST\n    // is correct, but this can create problems when we output an\n    // IF having an ELSE clause where the THEN clause ends in an\n    // IF *without* an ELSE block (then the outer ELSE would refer\n    // to the inner IF).  This function checks for this case and\n    // adds the block braces if needed.\n\n    if (!b) return output.force_semicolon();\n\n    while (true) {\n      if (b instanceof AST_If) {\n        if (!b.alternative) {\n          make_block(self.body, output);\n          return;\n        }\n\n        b = b.alternative;\n      } else if (b instanceof AST_StatementWithBody) {\n        b = b.body;\n      } else break;\n    }\n\n    force_statement(self.body, output);\n  }\n\n  DEFPRINT(AST_If, function (self, output) {\n    output.print(\"if\");\n    output.space();\n    output.with_parens(function () {\n      self.condition.print(output);\n    });\n    output.space();\n\n    if (self.alternative) {\n      make_then(self, output);\n      output.space();\n      output.print(\"else\");\n      output.space();\n      if (self.alternative instanceof AST_If) self.alternative.print(output);else force_statement(self.alternative, output);\n    } else {\n      self._do_print_body(output);\n    }\n  });\n  /* -----[ switch ]----- */\n\n  DEFPRINT(AST_Switch, function (self, output) {\n    output.print(\"switch\");\n    output.space();\n    output.with_parens(function () {\n      self.expression.print(output);\n    });\n    output.space();\n    var last = self.body.length - 1;\n    if (last < 0) print_braced_empty(self, output);else output.with_block(function () {\n      self.body.forEach(function (branch, i) {\n        output.indent(true);\n        branch.print(output);\n        if (i < last && branch.body.length > 0) output.newline();\n      });\n    });\n  });\n  AST_SwitchBranch.DEFMETHOD(\"_do_print_body\", function (output) {\n    output.newline();\n    this.body.forEach(function (stmt) {\n      output.indent();\n      stmt.print(output);\n      output.newline();\n    });\n  });\n  DEFPRINT(AST_Default, function (self, output) {\n    output.print(\"default:\");\n\n    self._do_print_body(output);\n  });\n  DEFPRINT(AST_Case, function (self, output) {\n    output.print(\"case\");\n    output.space();\n    self.expression.print(output);\n    output.print(\":\");\n\n    self._do_print_body(output);\n  });\n  /* -----[ exceptions ]----- */\n\n  DEFPRINT(AST_Try, function (self, output) {\n    output.print(\"try\");\n    output.space();\n    print_braced(self, output);\n\n    if (self.bcatch) {\n      output.space();\n      self.bcatch.print(output);\n    }\n\n    if (self.bfinally) {\n      output.space();\n      self.bfinally.print(output);\n    }\n  });\n  DEFPRINT(AST_Catch, function (self, output) {\n    output.print(\"catch\");\n\n    if (self.argname) {\n      output.space();\n      output.with_parens(function () {\n        self.argname.print(output);\n      });\n    }\n\n    output.space();\n    print_braced(self, output);\n  });\n  DEFPRINT(AST_Finally, function (self, output) {\n    output.print(\"finally\");\n    output.space();\n    print_braced(self, output);\n  });\n  /* -----[ var/const ]----- */\n\n  AST_Definitions.DEFMETHOD(\"_do_print\", function (output, kind) {\n    output.print(kind);\n    output.space();\n    this.definitions.forEach(function (def, i) {\n      if (i) output.comma();\n      def.print(output);\n    });\n    var p = output.parent();\n    var in_for = p instanceof AST_For || p instanceof AST_ForIn;\n    var output_semicolon = !in_for || p && p.init !== this;\n    if (output_semicolon) output.semicolon();\n  });\n  DEFPRINT(AST_Let, function (self, output) {\n    self._do_print(output, \"let\");\n  });\n  DEFPRINT(AST_Var, function (self, output) {\n    self._do_print(output, \"var\");\n  });\n  DEFPRINT(AST_Const, function (self, output) {\n    self._do_print(output, \"const\");\n  });\n  DEFPRINT(AST_Import, function (self, output) {\n    output.print(\"import\");\n    output.space();\n\n    if (self.imported_name) {\n      self.imported_name.print(output);\n    }\n\n    if (self.imported_name && self.imported_names) {\n      output.print(\",\");\n      output.space();\n    }\n\n    if (self.imported_names) {\n      if (self.imported_names.length === 1 && self.imported_names[0].foreign_name.name === \"*\") {\n        self.imported_names[0].print(output);\n      } else {\n        output.print(\"{\");\n        self.imported_names.forEach(function (name_import, i) {\n          output.space();\n          name_import.print(output);\n\n          if (i < self.imported_names.length - 1) {\n            output.print(\",\");\n          }\n        });\n        output.space();\n        output.print(\"}\");\n      }\n    }\n\n    if (self.imported_name || self.imported_names) {\n      output.space();\n      output.print(\"from\");\n      output.space();\n    }\n\n    self.module_name.print(output);\n\n    if (self.assert_clause) {\n      output.print(\"assert\");\n      self.assert_clause.print(output);\n    }\n\n    output.semicolon();\n  });\n  DEFPRINT(AST_ImportMeta, function (self, output) {\n    output.print(\"import.meta\");\n  });\n  DEFPRINT(AST_NameMapping, function (self, output) {\n    var is_import = output.parent() instanceof AST_Import;\n    var definition = self.name.definition();\n    var names_are_different = (definition && definition.mangled_name || self.name.name) !== self.foreign_name.name;\n\n    if (names_are_different) {\n      if (is_import) {\n        output.print(self.foreign_name.name);\n      } else {\n        self.name.print(output);\n      }\n\n      output.space();\n      output.print(\"as\");\n      output.space();\n\n      if (is_import) {\n        self.name.print(output);\n      } else {\n        output.print(self.foreign_name.name);\n      }\n    } else {\n      self.name.print(output);\n    }\n  });\n  DEFPRINT(AST_Export, function (self, output) {\n    output.print(\"export\");\n    output.space();\n\n    if (self.is_default) {\n      output.print(\"default\");\n      output.space();\n    }\n\n    if (self.exported_names) {\n      if (self.exported_names.length === 1 && self.exported_names[0].name.name === \"*\") {\n        self.exported_names[0].print(output);\n      } else {\n        output.print(\"{\");\n        self.exported_names.forEach(function (name_export, i) {\n          output.space();\n          name_export.print(output);\n\n          if (i < self.exported_names.length - 1) {\n            output.print(\",\");\n          }\n        });\n        output.space();\n        output.print(\"}\");\n      }\n    } else if (self.exported_value) {\n      self.exported_value.print(output);\n    } else if (self.exported_definition) {\n      self.exported_definition.print(output);\n      if (self.exported_definition instanceof AST_Definitions) return;\n    }\n\n    if (self.module_name) {\n      output.space();\n      output.print(\"from\");\n      output.space();\n      self.module_name.print(output);\n    }\n\n    if (self.assert_clause) {\n      output.print(\"assert\");\n      self.assert_clause.print(output);\n    }\n\n    if (self.exported_value && !(self.exported_value instanceof AST_Defun || self.exported_value instanceof AST_Function || self.exported_value instanceof AST_Class) || self.module_name || self.exported_names) {\n      output.semicolon();\n    }\n  });\n\n  function parenthesize_for_noin(node, output, noin) {\n    var parens = false; // need to take some precautions here:\n    //    https://github.com/mishoo/UglifyJS2/issues/60\n\n    if (noin) {\n      parens = walk(node, node => {\n        // Don't go into scopes -- except arrow functions:\n        // https://github.com/terser/terser/issues/1019#issuecomment-877642607\n        if (node instanceof AST_Scope && !(node instanceof AST_Arrow)) {\n          return true;\n        }\n\n        if (node instanceof AST_Binary && node.operator == \"in\") {\n          return walk_abort; // makes walk() return true\n        }\n      });\n    }\n\n    node.print(output, parens);\n  }\n\n  DEFPRINT(AST_VarDef, function (self, output) {\n    self.name.print(output);\n\n    if (self.value) {\n      output.space();\n      output.print(\"=\");\n      output.space();\n      var p = output.parent(1);\n      var noin = p instanceof AST_For || p instanceof AST_ForIn;\n      parenthesize_for_noin(self.value, output, noin);\n    }\n  });\n  /* -----[ other expressions ]----- */\n\n  DEFPRINT(AST_Call, function (self, output) {\n    self.expression.print(output);\n    if (self instanceof AST_New && self.args.length === 0) return;\n\n    if (self.expression instanceof AST_Call || self.expression instanceof AST_Lambda) {\n      output.add_mapping(self.start);\n    }\n\n    if (self.optional) output.print(\"?.\");\n    output.with_parens(function () {\n      self.args.forEach(function (expr, i) {\n        if (i) output.comma();\n        expr.print(output);\n      });\n    });\n  });\n  DEFPRINT(AST_New, function (self, output) {\n    output.print(\"new\");\n    output.space();\n\n    AST_Call.prototype._codegen(self, output);\n  });\n  AST_Sequence.DEFMETHOD(\"_do_print\", function (output) {\n    this.expressions.forEach(function (node, index) {\n      if (index > 0) {\n        output.comma();\n\n        if (output.should_break()) {\n          output.newline();\n          output.indent();\n        }\n      }\n\n      node.print(output);\n    });\n  });\n  DEFPRINT(AST_Sequence, function (self, output) {\n    self._do_print(output); // var p = output.parent();\n    // if (p instanceof AST_Statement) {\n    //     output.with_indent(output.next_indent(), function(){\n    //         self._do_print(output);\n    //     });\n    // } else {\n    //     self._do_print(output);\n    // }\n\n  });\n  DEFPRINT(AST_Dot, function (self, output) {\n    var expr = self.expression;\n    expr.print(output);\n    var prop = self.property;\n    var print_computed = ALL_RESERVED_WORDS.has(prop) ? output.option(\"ie8\") : !is_identifier_string(prop, output.option(\"ecma\") >= 2015 || output.option(\"safari10\"));\n    if (self.optional) output.print(\"?.\");\n\n    if (print_computed) {\n      output.print(\"[\");\n      output.add_mapping(self.end);\n      output.print_string(prop);\n      output.print(\"]\");\n    } else {\n      if (expr instanceof AST_Number && expr.getValue() >= 0) {\n        if (!/[xa-f.)]/i.test(output.last())) {\n          output.print(\".\");\n        }\n      }\n\n      if (!self.optional) output.print(\".\"); // the name after dot would be mapped about here.\n\n      output.add_mapping(self.end);\n      output.print_name(prop);\n    }\n  });\n  DEFPRINT(AST_DotHash, function (self, output) {\n    var expr = self.expression;\n    expr.print(output);\n    var prop = self.property;\n    if (self.optional) output.print(\"?\");\n    output.print(\".#\");\n    output.add_mapping(self.end);\n    output.print_name(prop);\n  });\n  DEFPRINT(AST_Sub, function (self, output) {\n    self.expression.print(output);\n    if (self.optional) output.print(\"?.\");\n    output.print(\"[\");\n    self.property.print(output);\n    output.print(\"]\");\n  });\n  DEFPRINT(AST_Chain, function (self, output) {\n    self.expression.print(output);\n  });\n  DEFPRINT(AST_UnaryPrefix, function (self, output) {\n    var op = self.operator;\n    output.print(op);\n\n    if (/^[a-z]/i.test(op) || /[+-]$/.test(op) && self.expression instanceof AST_UnaryPrefix && /^[+-]/.test(self.expression.operator)) {\n      output.space();\n    }\n\n    self.expression.print(output);\n  });\n  DEFPRINT(AST_UnaryPostfix, function (self, output) {\n    self.expression.print(output);\n    output.print(self.operator);\n  });\n  DEFPRINT(AST_Binary, function (self, output) {\n    var op = self.operator;\n    self.left.print(output);\n\n    if (op[0] == \">\"\n    /* \">>\" \">>>\" \">\" \">=\" */\n    && self.left instanceof AST_UnaryPostfix && self.left.operator == \"--\") {\n      // space is mandatory to avoid outputting -->\n      output.print(\" \");\n    } else {\n      // the space is optional depending on \"beautify\"\n      output.space();\n    }\n\n    output.print(op);\n\n    if ((op == \"<\" || op == \"<<\") && self.right instanceof AST_UnaryPrefix && self.right.operator == \"!\" && self.right.expression instanceof AST_UnaryPrefix && self.right.expression.operator == \"--\") {\n      // space is mandatory to avoid outputting <!--\n      output.print(\" \");\n    } else {\n      // the space is optional depending on \"beautify\"\n      output.space();\n    }\n\n    self.right.print(output);\n  });\n  DEFPRINT(AST_Conditional, function (self, output) {\n    self.condition.print(output);\n    output.space();\n    output.print(\"?\");\n    output.space();\n    self.consequent.print(output);\n    output.space();\n    output.colon();\n    self.alternative.print(output);\n  });\n  /* -----[ literals ]----- */\n\n  DEFPRINT(AST_Array, function (self, output) {\n    output.with_square(function () {\n      var a = self.elements,\n          len = a.length;\n      if (len > 0) output.space();\n      a.forEach(function (exp, i) {\n        if (i) output.comma();\n        exp.print(output); // If the final element is a hole, we need to make sure it\n        // doesn't look like a trailing comma, by inserting an actual\n        // trailing comma.\n\n        if (i === len - 1 && exp instanceof AST_Hole) output.comma();\n      });\n      if (len > 0) output.space();\n    });\n  });\n  DEFPRINT(AST_Object, function (self, output) {\n    if (self.properties.length > 0) output.with_block(function () {\n      self.properties.forEach(function (prop, i) {\n        if (i) {\n          output.print(\",\");\n          output.newline();\n        }\n\n        output.indent();\n        prop.print(output);\n      });\n      output.newline();\n    });else print_braced_empty(self, output);\n  });\n  DEFPRINT(AST_Class, function (self, output) {\n    output.print(\"class\");\n    output.space();\n\n    if (self.name) {\n      self.name.print(output);\n      output.space();\n    }\n\n    if (self.extends) {\n      var parens = !(self.extends instanceof AST_SymbolRef) && !(self.extends instanceof AST_PropAccess) && !(self.extends instanceof AST_ClassExpression) && !(self.extends instanceof AST_Function);\n      output.print(\"extends\");\n\n      if (parens) {\n        output.print(\"(\");\n      } else {\n        output.space();\n      }\n\n      self.extends.print(output);\n\n      if (parens) {\n        output.print(\")\");\n      } else {\n        output.space();\n      }\n    }\n\n    if (self.properties.length > 0) output.with_block(function () {\n      self.properties.forEach(function (prop, i) {\n        if (i) {\n          output.newline();\n        }\n\n        output.indent();\n        prop.print(output);\n      });\n      output.newline();\n    });else output.print(\"{}\");\n  });\n  DEFPRINT(AST_NewTarget, function (self, output) {\n    output.print(\"new.target\");\n  });\n\n  function print_property_name(key, quote, output) {\n    if (output.option(\"quote_keys\")) {\n      return output.print_string(key);\n    }\n\n    if (\"\" + +key == key && key >= 0) {\n      if (output.option(\"keep_numbers\")) {\n        return output.print(key);\n      }\n\n      return output.print(make_num(key));\n    }\n\n    var print_string = ALL_RESERVED_WORDS.has(key) ? output.option(\"ie8\") : output.option(\"ecma\") < 2015 || output.option(\"safari10\") ? !is_basic_identifier_string(key) : !is_identifier_string(key, true);\n\n    if (print_string || quote && output.option(\"keep_quoted_props\")) {\n      return output.print_string(key, quote);\n    }\n\n    return output.print_name(key);\n  }\n\n  DEFPRINT(AST_ObjectKeyVal, function (self, output) {\n    function get_name(self) {\n      var def = self.definition();\n      return def ? def.mangled_name || def.name : self.name;\n    }\n\n    var allowShortHand = output.option(\"shorthand\");\n\n    if (allowShortHand && self.value instanceof AST_Symbol && is_identifier_string(self.key, output.option(\"ecma\") >= 2015 || output.option(\"safari10\")) && get_name(self.value) === self.key && !ALL_RESERVED_WORDS.has(self.key)) {\n      print_property_name(self.key, self.quote, output);\n    } else if (allowShortHand && self.value instanceof AST_DefaultAssign && self.value.left instanceof AST_Symbol && is_identifier_string(self.key, output.option(\"ecma\") >= 2015 || output.option(\"safari10\")) && get_name(self.value.left) === self.key) {\n      print_property_name(self.key, self.quote, output);\n      output.space();\n      output.print(\"=\");\n      output.space();\n      self.value.right.print(output);\n    } else {\n      if (!(self.key instanceof AST_Node)) {\n        print_property_name(self.key, self.quote, output);\n      } else {\n        output.with_square(function () {\n          self.key.print(output);\n        });\n      }\n\n      output.colon();\n      self.value.print(output);\n    }\n  });\n  DEFPRINT(AST_ClassPrivateProperty, (self, output) => {\n    if (self.static) {\n      output.print(\"static\");\n      output.space();\n    }\n\n    output.print(\"#\");\n    print_property_name(self.key.name, self.quote, output);\n\n    if (self.value) {\n      output.print(\"=\");\n      self.value.print(output);\n    }\n\n    output.semicolon();\n  });\n  DEFPRINT(AST_ClassProperty, (self, output) => {\n    if (self.static) {\n      output.print(\"static\");\n      output.space();\n    }\n\n    if (self.key instanceof AST_SymbolClassProperty) {\n      print_property_name(self.key.name, self.quote, output);\n    } else {\n      output.print(\"[\");\n      self.key.print(output);\n      output.print(\"]\");\n    }\n\n    if (self.value) {\n      output.print(\"=\");\n      self.value.print(output);\n    }\n\n    output.semicolon();\n  });\n  AST_ObjectProperty.DEFMETHOD(\"_print_getter_setter\", function (type, is_private, output) {\n    var self = this;\n\n    if (self.static) {\n      output.print(\"static\");\n      output.space();\n    }\n\n    if (type) {\n      output.print(type);\n      output.space();\n    }\n\n    if (self.key instanceof AST_SymbolMethod) {\n      if (is_private) output.print(\"#\");\n      print_property_name(self.key.name, self.quote, output);\n    } else {\n      output.with_square(function () {\n        self.key.print(output);\n      });\n    }\n\n    self.value._do_print(output, true);\n  });\n  DEFPRINT(AST_ObjectSetter, function (self, output) {\n    self._print_getter_setter(\"set\", false, output);\n  });\n  DEFPRINT(AST_ObjectGetter, function (self, output) {\n    self._print_getter_setter(\"get\", false, output);\n  });\n  DEFPRINT(AST_PrivateSetter, function (self, output) {\n    self._print_getter_setter(\"set\", true, output);\n  });\n  DEFPRINT(AST_PrivateGetter, function (self, output) {\n    self._print_getter_setter(\"get\", true, output);\n  });\n  DEFPRINT(AST_PrivateMethod, function (self, output) {\n    var type;\n\n    if (self.is_generator && self.async) {\n      type = \"async*\";\n    } else if (self.is_generator) {\n      type = \"*\";\n    } else if (self.async) {\n      type = \"async\";\n    }\n\n    self._print_getter_setter(type, true, output);\n  });\n  DEFPRINT(AST_ConciseMethod, function (self, output) {\n    var type;\n\n    if (self.is_generator && self.async) {\n      type = \"async*\";\n    } else if (self.is_generator) {\n      type = \"*\";\n    } else if (self.async) {\n      type = \"async\";\n    }\n\n    self._print_getter_setter(type, false, output);\n  });\n  DEFPRINT(AST_ClassStaticBlock, function (self, output) {\n    output.print(\"static\");\n    output.space();\n    print_braced(self, output);\n  });\n  AST_Symbol.DEFMETHOD(\"_do_print\", function (output) {\n    var def = this.definition();\n    output.print_name(def ? def.mangled_name || def.name : this.name);\n  });\n  DEFPRINT(AST_Symbol, function (self, output) {\n    self._do_print(output);\n  });\n  DEFPRINT(AST_Hole, noop);\n  DEFPRINT(AST_This, function (self, output) {\n    output.print(\"this\");\n  });\n  DEFPRINT(AST_Super, function (self, output) {\n    output.print(\"super\");\n  });\n  DEFPRINT(AST_Constant, function (self, output) {\n    output.print(self.getValue());\n  });\n  DEFPRINT(AST_String, function (self, output) {\n    output.print_string(self.getValue(), self.quote, output.in_directive);\n  });\n  DEFPRINT(AST_Number, function (self, output) {\n    if ((output.option(\"keep_numbers\") || output.use_asm) && self.raw) {\n      output.print(self.raw);\n    } else {\n      output.print(make_num(self.getValue()));\n    }\n  });\n  DEFPRINT(AST_BigInt, function (self, output) {\n    output.print(self.getValue() + \"n\");\n  });\n  const r_slash_script = /(<\\s*\\/\\s*script)/i;\n\n  const slash_script_replace = (_, $1) => $1.replace(\"/\", \"\\\\/\");\n\n  DEFPRINT(AST_RegExp, function (self, output) {\n    let {\n      source,\n      flags\n    } = self.getValue();\n    source = regexp_source_fix(source);\n    flags = flags ? sort_regexp_flags(flags) : \"\";\n    source = source.replace(r_slash_script, slash_script_replace);\n    output.print(output.to_utf8(`/${source}/${flags}`, false, true));\n    const parent = output.parent();\n\n    if (parent instanceof AST_Binary && /^\\w/.test(parent.operator) && parent.left === self) {\n      output.print(\" \");\n    }\n  });\n\n  function force_statement(stat, output) {\n    if (output.option(\"braces\")) {\n      make_block(stat, output);\n    } else {\n      if (!stat || stat instanceof AST_EmptyStatement) output.force_semicolon();else stat.print(output);\n    }\n  }\n\n  function best_of(a) {\n    var best = a[0],\n        len = best.length;\n\n    for (var i = 1; i < a.length; ++i) {\n      if (a[i].length < len) {\n        best = a[i];\n        len = best.length;\n      }\n    }\n\n    return best;\n  }\n\n  function make_num(num) {\n    var str = num.toString(10).replace(/^0\\./, \".\").replace(\"e+\", \"e\");\n    var candidates = [str];\n\n    if (Math.floor(num) === num) {\n      if (num < 0) {\n        candidates.push(\"-0x\" + (-num).toString(16).toLowerCase());\n      } else {\n        candidates.push(\"0x\" + num.toString(16).toLowerCase());\n      }\n    }\n\n    var match, len, digits;\n\n    if (match = /^\\.0+/.exec(str)) {\n      len = match[0].length;\n      digits = str.slice(len);\n      candidates.push(digits + \"e-\" + (digits.length + len - 1));\n    } else if (match = /0+$/.exec(str)) {\n      len = match[0].length;\n      candidates.push(str.slice(0, -len) + \"e\" + len);\n    } else if (match = /^(\\d)\\.(\\d+)e(-?\\d+)$/.exec(str)) {\n      candidates.push(match[1] + match[2] + \"e\" + (match[3] - match[2].length));\n    }\n\n    return best_of(candidates);\n  }\n\n  function make_block(stmt, output) {\n    if (!stmt || stmt instanceof AST_EmptyStatement) output.print(\"{}\");else if (stmt instanceof AST_BlockStatement) stmt.print(output);else output.with_block(function () {\n      output.indent();\n      stmt.print(output);\n      output.newline();\n    });\n  }\n  /* -----[ source map generators ]----- */\n\n\n  function DEFMAP(nodetype, generator) {\n    nodetype.forEach(function (nodetype) {\n      nodetype.DEFMETHOD(\"add_source_map\", generator);\n    });\n  }\n\n  DEFMAP([// We could easily add info for ALL nodes, but it seems to me that\n  // would be quite wasteful, hence this noop in the base class.\n  AST_Node, // since the label symbol will mark it\n  AST_LabeledStatement, AST_Toplevel], noop); // XXX: I'm not exactly sure if we need it for all of these nodes,\n  // or if we should add even more.\n\n  DEFMAP([AST_Array, AST_BlockStatement, AST_Catch, AST_Class, AST_Constant, AST_Debugger, AST_Definitions, AST_Directive, AST_Finally, AST_Jump, AST_Lambda, AST_New, AST_Object, AST_StatementWithBody, AST_Symbol, AST_Switch, AST_SwitchBranch, AST_TemplateString, AST_TemplateSegment, AST_Try], function (output) {\n    output.add_mapping(this.start);\n  });\n  DEFMAP([AST_ObjectGetter, AST_ObjectSetter, AST_PrivateGetter, AST_PrivateSetter], function (output) {\n    output.add_mapping(this.key.end, this.key.name);\n  });\n  DEFMAP([AST_ObjectProperty], function (output) {\n    output.add_mapping(this.start, this.key);\n  });\n})();\n\nexport { OutputStream };","map":{"version":3,"names":["defaults","makePredicate","noop","regexp_source_fix","sort_regexp_flags","return_false","return_true","first_in_statement","left_is_object","AST_Array","AST_Arrow","AST_Assign","AST_Await","AST_BigInt","AST_Binary","AST_BlockStatement","AST_Break","AST_Call","AST_Case","AST_Catch","AST_Chain","AST_Class","AST_ClassExpression","AST_ClassPrivateProperty","AST_ClassProperty","AST_ClassStaticBlock","AST_ConciseMethod","AST_PrivateGetter","AST_PrivateMethod","AST_PrivateSetter","AST_Conditional","AST_Const","AST_Constant","AST_Continue","AST_Debugger","AST_Default","AST_DefaultAssign","AST_Definitions","AST_Defun","AST_Destructuring","AST_Directive","AST_Do","AST_Dot","AST_DotHash","AST_EmptyStatement","AST_Exit","AST_Expansion","AST_Export","AST_Finally","AST_For","AST_ForIn","AST_ForOf","AST_Function","AST_Hole","AST_If","AST_Import","AST_ImportMeta","AST_Jump","AST_LabeledStatement","AST_Lambda","AST_Let","AST_LoopControl","AST_NameMapping","AST_New","AST_NewTarget","AST_Node","AST_Number","AST_Object","AST_ObjectGetter","AST_ObjectKeyVal","AST_ObjectProperty","AST_ObjectSetter","AST_PrefixedTemplateString","AST_PropAccess","AST_RegExp","AST_Return","AST_Scope","AST_Sequence","AST_SimpleStatement","AST_Statement","AST_StatementWithBody","AST_String","AST_Sub","AST_Super","AST_Switch","AST_SwitchBranch","AST_Symbol","AST_SymbolClassProperty","AST_SymbolMethod","AST_SymbolRef","AST_TemplateSegment","AST_TemplateString","AST_This","AST_Throw","AST_Toplevel","AST_Try","AST_Unary","AST_UnaryPostfix","AST_UnaryPrefix","AST_Var","AST_VarDef","AST_While","AST_With","AST_Yield","TreeWalker","walk","walk_abort","get_full_char_code","get_full_char","is_identifier_char","is_basic_identifier_string","is_identifier_string","PRECEDENCE","ALL_RESERVED_WORDS","EXPECT_DIRECTIVE","CODE_LINE_BREAK","CODE_SPACE","r_annotation","is_some_comments","comment","type","test","value","Rope","constructor","committed","current","append","str","insertAt","char","index","length","slice","charAt","curLength","toString","OutputStream","options","readonly","ascii_only","beautify","braces","comments","ecma","ie8","indent_level","indent_start","inline_script","keep_numbers","keep_quoted_props","max_line_len","preamble","preserve_annotations","quote_keys","quote_style","safari10","semicolons","shebang","shorthand","undefined","source_map","webkit","width","wrap_iife","wrap_func_args","_destroy_ast","comment_filter","regex_pos","lastIndexOf","RegExp","substr","indentation","current_col","current_line","current_pos","OUTPUT","printed_comments","Set","to_utf8","identifier","regexp","replace","ch","code","charCodeAt","match","lone","make_string","quote","dq","sq","s","i","quote_single","quote_double","quote_template","encode_string","ret","make_name","name","make_indent","back","repeat","has_parens","might_need_space","might_need_semicolon","might_add_newline","need_newline_indented","need_space","newline_insert","last","mapping_token","mapping_name","mappings","do_add_mapping","forEach","mapping","token","add","file","line","col","ex","ensure_line_len","delta","requireSemicolonChars","print","String","indent","space","prev","includes","has","push","a","split","n","star","half","with_indent","cont","next_indent","save_indentation","newline","semicolon","force_semicolon","with_block","with_parens","with_square","comma","colon","add_mapping","get","has_nlb","output","filter_comment","prepend_comments","node","self","start","return_with_value","comments_before","tw","parent","left","TYPE","expression","condition","expressions","text","concat","shift","filter","c","last_nlb","nlb","append_comments","tail","end","every","insert","gc_scope","scope","body","argnames","stack","in_directive","use_asm","active_scope","current_width","should_break","print_name","print_string","escape_directive","encoded","print_template_string_chars","option","opt","pos","push_node","pop_node","pop","DEFPRINT","nodetype","generator","DEFMETHOD","force_parens","_codegen","doit","add_source_map","needs_parens","prototype","PARENS","func","Array","isArray","p","args","operator","object","po","so","pp","sp","right","p1","is_default","prefix","getValue","make_num","startsWith","is_array","len","names","display_body","is_toplevel","allow_directives","stmt","force_statement","label","print_braced_empty","print_braced","make_block","_do_print_body","init","parenthesize_for_noin","step","await","nokeyword","async","is_generator","arg","_do_print","tag","parenthesize_tag","template_string","is_tagged","segments","raw","first_statement","returned","kind","is_star","e","parens","make_then","b","alternative","branch","bcatch","bfinally","argname","definitions","def","in_for","output_semicolon","imported_name","imported_names","foreign_name","name_import","module_name","assert_clause","is_import","definition","names_are_different","mangled_name","exported_names","name_export","exported_value","exported_definition","noin","optional","expr","prop","property","print_computed","op","consequent","elements","exp","properties","extends","print_property_name","key","get_name","allowShortHand","static","is_private","_print_getter_setter","r_slash_script","slash_script_replace","_","$1","source","flags","stat","best_of","best","num","candidates","Math","floor","toLowerCase","digits","exec","DEFMAP"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/terser/lib/output.js"],"sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    defaults,\n    makePredicate,\n    noop,\n    regexp_source_fix,\n    sort_regexp_flags,\n    return_false,\n    return_true,\n} from \"./utils/index.js\";\nimport { first_in_statement, left_is_object } from \"./utils/first_in_statement.js\";\nimport {\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_BlockStatement,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Chain,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ClassPrivateProperty,\n    AST_ClassProperty,\n    AST_ClassStaticBlock,\n    AST_ConciseMethod,\n    AST_PrivateGetter,\n    AST_PrivateMethod,\n    AST_PrivateSetter,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DotHash,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_ImportMeta,\n    AST_Jump,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_StatementWithBody,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolClassProperty,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Toplevel,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    TreeWalker,\n    walk,\n    walk_abort\n} from \"./ast.js\";\nimport {\n    get_full_char_code,\n    get_full_char,\n    is_identifier_char,\n    is_basic_identifier_string,\n    is_identifier_string,\n    PRECEDENCE,\n    ALL_RESERVED_WORDS,\n} from \"./parse.js\";\n\nconst EXPECT_DIRECTIVE = /^$|[;{][\\s\\n]*$/;\nconst CODE_LINE_BREAK = 10;\nconst CODE_SPACE = 32;\n\nconst r_annotation = /[@#]__(PURE|INLINE|NOINLINE)__/g;\n\nfunction is_some_comments(comment) {\n    // multiline comment\n    return (\n        (comment.type === \"comment2\" || comment.type === \"comment1\")\n        && /@preserve|@copyright|@lic|@cc_on|^\\**!/i.test(comment.value)\n    );\n}\n\nclass Rope {\n    constructor() {\n        this.committed = \"\";\n        this.current = \"\";\n    }\n\n    append(str) {\n        this.current += str;\n    }\n\n    insertAt(char, index) {\n        const { committed, current } = this;\n        if (index < committed.length) {\n            this.committed = committed.slice(0, index) + char + committed.slice(index);\n        } else if (index === committed.length) {\n            this.committed += char;\n        } else {\n            index -= committed.length;\n            this.committed += current.slice(0, index) + char;\n            this.current = current.slice(index);\n        }\n    }\n\n    charAt(index) {\n        const { committed } = this;\n        if (index < committed.length) return committed[index];\n        return this.current[index - committed.length];\n    }\n\n    curLength() {\n        return this.current.length;\n    }\n\n    length() {\n        return this.committed.length + this.current.length;\n    }\n\n    toString() {\n        return this.committed + this.current;\n    }\n}\n\nfunction OutputStream(options) {\n\n    var readonly = !options;\n    options = defaults(options, {\n        ascii_only           : false,\n        beautify             : false,\n        braces               : false,\n        comments             : \"some\",\n        ecma                 : 5,\n        ie8                  : false,\n        indent_level         : 4,\n        indent_start         : 0,\n        inline_script        : true,\n        keep_numbers         : false,\n        keep_quoted_props    : false,\n        max_line_len         : false,\n        preamble             : null,\n        preserve_annotations : false,\n        quote_keys           : false,\n        quote_style          : 0,\n        safari10             : false,\n        semicolons           : true,\n        shebang              : true,\n        shorthand            : undefined,\n        source_map           : null,\n        webkit               : false,\n        width                : 80,\n        wrap_iife            : false,\n        wrap_func_args       : true,\n\n        _destroy_ast         : false\n    }, true);\n\n    if (options.shorthand === undefined)\n        options.shorthand = options.ecma > 5;\n\n    // Convert comment option to RegExp if neccessary and set up comments filter\n    var comment_filter = return_false; // Default case, throw all comments away\n    if (options.comments) {\n        let comments = options.comments;\n        if (typeof options.comments === \"string\" && /^\\/.*\\/[a-zA-Z]*$/.test(options.comments)) {\n            var regex_pos = options.comments.lastIndexOf(\"/\");\n            comments = new RegExp(\n                options.comments.substr(1, regex_pos - 1),\n                options.comments.substr(regex_pos + 1)\n            );\n        }\n        if (comments instanceof RegExp) {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments.test(comment.value);\n            };\n        } else if (typeof comments === \"function\") {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments(this, comment);\n            };\n        } else if (comments === \"some\") {\n            comment_filter = is_some_comments;\n        } else { // NOTE includes \"all\" option\n            comment_filter = return_true;\n        }\n    }\n\n    var indentation = 0;\n    var current_col = 0;\n    var current_line = 1;\n    var current_pos = 0;\n    var OUTPUT = new Rope();\n    let printed_comments = new Set();\n\n    var to_utf8 = options.ascii_only ? function(str, identifier = false, regexp = false) {\n        if (options.ecma >= 2015 && !options.safari10 && !regexp) {\n            str = str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]/g, function(ch) {\n                var code = get_full_char_code(ch, 0).toString(16);\n                return \"\\\\u{\" + code + \"}\";\n            });\n        }\n        return str.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g, function(ch) {\n            var code = ch.charCodeAt(0).toString(16);\n            if (code.length <= 2 && !identifier) {\n                while (code.length < 2) code = \"0\" + code;\n                return \"\\\\x\" + code;\n            } else {\n                while (code.length < 4) code = \"0\" + code;\n                return \"\\\\u\" + code;\n            }\n        });\n    } : function(str) {\n        return str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]|([\\ud800-\\udbff]|[\\udc00-\\udfff])/g, function(match, lone) {\n            if (lone) {\n                return \"\\\\u\" + lone.charCodeAt(0).toString(16);\n            }\n            return match;\n        });\n    };\n\n    function make_string(str, quote) {\n        var dq = 0, sq = 0;\n        str = str.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g,\n          function(s, i) {\n            switch (s) {\n              case '\"': ++dq; return '\"';\n              case \"'\": ++sq; return \"'\";\n              case \"\\\\\": return \"\\\\\\\\\";\n              case \"\\n\": return \"\\\\n\";\n              case \"\\r\": return \"\\\\r\";\n              case \"\\t\": return \"\\\\t\";\n              case \"\\b\": return \"\\\\b\";\n              case \"\\f\": return \"\\\\f\";\n              case \"\\x0B\": return options.ie8 ? \"\\\\x0B\" : \"\\\\v\";\n              case \"\\u2028\": return \"\\\\u2028\";\n              case \"\\u2029\": return \"\\\\u2029\";\n              case \"\\ufeff\": return \"\\\\ufeff\";\n              case \"\\0\":\n                  return /[0-9]/.test(get_full_char(str, i+1)) ? \"\\\\x00\" : \"\\\\0\";\n            }\n            return s;\n        });\n        function quote_single() {\n            return \"'\" + str.replace(/\\x27/g, \"\\\\'\") + \"'\";\n        }\n        function quote_double() {\n            return '\"' + str.replace(/\\x22/g, '\\\\\"') + '\"';\n        }\n        function quote_template() {\n            return \"`\" + str.replace(/`/g, \"\\\\`\") + \"`\";\n        }\n        str = to_utf8(str);\n        if (quote === \"`\") return quote_template();\n        switch (options.quote_style) {\n          case 1:\n            return quote_single();\n          case 2:\n            return quote_double();\n          case 3:\n            return quote == \"'\" ? quote_single() : quote_double();\n          default:\n            return dq > sq ? quote_single() : quote_double();\n        }\n    }\n\n    function encode_string(str, quote) {\n        var ret = make_string(str, quote);\n        if (options.inline_script) {\n            ret = ret.replace(/<\\x2f(script)([>\\/\\t\\n\\f\\r ])/gi, \"<\\\\/$1$2\");\n            ret = ret.replace(/\\x3c!--/g, \"\\\\x3c!--\");\n            ret = ret.replace(/--\\x3e/g, \"--\\\\x3e\");\n        }\n        return ret;\n    }\n\n    function make_name(name) {\n        name = name.toString();\n        name = to_utf8(name, true);\n        return name;\n    }\n\n    function make_indent(back) {\n        return \" \".repeat(options.indent_start + indentation - back * options.indent_level);\n    }\n\n    /* -----[ beautification/minification ]----- */\n\n    var has_parens = false;\n    var might_need_space = false;\n    var might_need_semicolon = false;\n    var might_add_newline = 0;\n    var need_newline_indented = false;\n    var need_space = false;\n    var newline_insert = -1;\n    var last = \"\";\n    var mapping_token, mapping_name, mappings = options.source_map && [];\n\n    var do_add_mapping = mappings ? function() {\n        mappings.forEach(function(mapping) {\n            try {\n                let { name, token } = mapping;\n                if (token.type == \"name\" || token.type === \"privatename\") {\n                    name = token.value;\n                } else if (name instanceof AST_Symbol) {\n                    name = token.type === \"string\" ? token.value : name.name;\n                }\n                options.source_map.add(\n                    mapping.token.file,\n                    mapping.line, mapping.col,\n                    mapping.token.line, mapping.token.col,\n                    is_basic_identifier_string(name) ? name : undefined\n                );\n            } catch(ex) {\n                // Ignore bad mapping\n            }\n        });\n        mappings = [];\n    } : noop;\n\n    var ensure_line_len = options.max_line_len ? function() {\n        if (current_col > options.max_line_len) {\n            if (might_add_newline) {\n                OUTPUT.insertAt(\"\\n\", might_add_newline);\n                const curLength = OUTPUT.curLength();\n                if (mappings) {\n                    var delta = curLength - current_col;\n                    mappings.forEach(function(mapping) {\n                        mapping.line++;\n                        mapping.col += delta;\n                    });\n                }\n                current_line++;\n                current_pos++;\n                current_col = curLength;\n            }\n        }\n        if (might_add_newline) {\n            might_add_newline = 0;\n            do_add_mapping();\n        }\n    } : noop;\n\n    var requireSemicolonChars = makePredicate(\"( [ + * / - , . `\");\n\n    function print(str) {\n        str = String(str);\n        var ch = get_full_char(str, 0);\n        if (need_newline_indented && ch) {\n            need_newline_indented = false;\n            if (ch !== \"\\n\") {\n                print(\"\\n\");\n                indent();\n            }\n        }\n        if (need_space && ch) {\n            need_space = false;\n            if (!/[\\s;})]/.test(ch)) {\n                space();\n            }\n        }\n        newline_insert = -1;\n        var prev = last.charAt(last.length - 1);\n        if (might_need_semicolon) {\n            might_need_semicolon = false;\n\n            if (prev === \":\" && ch === \"}\" || (!ch || !\";}\".includes(ch)) && prev !== \";\") {\n                if (options.semicolons || requireSemicolonChars.has(ch)) {\n                    OUTPUT.append(\";\");\n                    current_col++;\n                    current_pos++;\n                } else {\n                    ensure_line_len();\n                    if (current_col > 0) {\n                        OUTPUT.append(\"\\n\");\n                        current_pos++;\n                        current_line++;\n                        current_col = 0;\n                    }\n\n                    if (/^\\s+$/.test(str)) {\n                        // reset the semicolon flag, since we didn't print one\n                        // now and might still have to later\n                        might_need_semicolon = true;\n                    }\n                }\n\n                if (!options.beautify)\n                    might_need_space = false;\n            }\n        }\n\n        if (might_need_space) {\n            if ((is_identifier_char(prev)\n                    && (is_identifier_char(ch) || ch == \"\\\\\"))\n                || (ch == \"/\" && ch == prev)\n                || ((ch == \"+\" || ch == \"-\") && ch == last)\n            ) {\n                OUTPUT.append(\" \");\n                current_col++;\n                current_pos++;\n            }\n            might_need_space = false;\n        }\n\n        if (mapping_token) {\n            mappings.push({\n                token: mapping_token,\n                name: mapping_name,\n                line: current_line,\n                col: current_col\n            });\n            mapping_token = false;\n            if (!might_add_newline) do_add_mapping();\n        }\n\n        OUTPUT.append(str);\n        has_parens = str[str.length - 1] == \"(\";\n        current_pos += str.length;\n        var a = str.split(/\\r?\\n/), n = a.length - 1;\n        current_line += n;\n        current_col += a[0].length;\n        if (n > 0) {\n            ensure_line_len();\n            current_col = a[n].length;\n        }\n        last = str;\n    }\n\n    var star = function() {\n        print(\"*\");\n    };\n\n    var space = options.beautify ? function() {\n        print(\" \");\n    } : function() {\n        might_need_space = true;\n    };\n\n    var indent = options.beautify ? function(half) {\n        if (options.beautify) {\n            print(make_indent(half ? 0.5 : 0));\n        }\n    } : noop;\n\n    var with_indent = options.beautify ? function(col, cont) {\n        if (col === true) col = next_indent();\n        var save_indentation = indentation;\n        indentation = col;\n        var ret = cont();\n        indentation = save_indentation;\n        return ret;\n    } : function(col, cont) { return cont(); };\n\n    var newline = options.beautify ? function() {\n        if (newline_insert < 0) return print(\"\\n\");\n        if (OUTPUT.charAt(newline_insert) != \"\\n\") {\n            OUTPUT.insertAt(\"\\n\", newline_insert);\n            current_pos++;\n            current_line++;\n        }\n        newline_insert++;\n    } : options.max_line_len ? function() {\n        ensure_line_len();\n        might_add_newline = OUTPUT.length();\n    } : noop;\n\n    var semicolon = options.beautify ? function() {\n        print(\";\");\n    } : function() {\n        might_need_semicolon = true;\n    };\n\n    function force_semicolon() {\n        might_need_semicolon = false;\n        print(\";\");\n    }\n\n    function next_indent() {\n        return indentation + options.indent_level;\n    }\n\n    function with_block(cont) {\n        var ret;\n        print(\"{\");\n        newline();\n        with_indent(next_indent(), function() {\n            ret = cont();\n        });\n        indent();\n        print(\"}\");\n        return ret;\n    }\n\n    function with_parens(cont) {\n        print(\"(\");\n        //XXX: still nice to have that for argument lists\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\")\");\n        return ret;\n    }\n\n    function with_square(cont) {\n        print(\"[\");\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\"]\");\n        return ret;\n    }\n\n    function comma() {\n        print(\",\");\n        space();\n    }\n\n    function colon() {\n        print(\":\");\n        space();\n    }\n\n    var add_mapping = mappings ? function(token, name) {\n        mapping_token = token;\n        mapping_name = name;\n    } : noop;\n\n    function get() {\n        if (might_add_newline) {\n            ensure_line_len();\n        }\n        return OUTPUT.toString();\n    }\n\n    function has_nlb() {\n        const output = OUTPUT.toString();\n        let n = output.length - 1;\n        while (n >= 0) {\n            const code = output.charCodeAt(n);\n            if (code === CODE_LINE_BREAK) {\n                return true;\n            }\n\n            if (code !== CODE_SPACE) {\n                return false;\n            }\n            n--;\n        }\n        return true;\n    }\n\n    function filter_comment(comment) {\n        if (!options.preserve_annotations) {\n            comment = comment.replace(r_annotation, \" \");\n        }\n        if (/^\\s*$/.test(comment)) {\n            return \"\";\n        }\n        return comment.replace(/(<\\s*\\/\\s*)(script)/i, \"<\\\\/$2\");\n    }\n\n    function prepend_comments(node) {\n        var self = this;\n        var start = node.start;\n        if (!start) return;\n        var printed_comments = self.printed_comments;\n\n        // There cannot be a newline between return and its value.\n        const return_with_value = node instanceof AST_Exit && node.value;\n\n        if (\n            start.comments_before\n            && printed_comments.has(start.comments_before)\n        ) {\n            if (return_with_value) {\n                start.comments_before = [];\n            } else {\n                return;\n            }\n        }\n\n        var comments = start.comments_before;\n        if (!comments) {\n            comments = start.comments_before = [];\n        }\n        printed_comments.add(comments);\n\n        if (return_with_value) {\n            var tw = new TreeWalker(function(node) {\n                var parent = tw.parent();\n                if (parent instanceof AST_Exit\n                    || parent instanceof AST_Binary && parent.left === node\n                    || parent.TYPE == \"Call\" && parent.expression === node\n                    || parent instanceof AST_Conditional && parent.condition === node\n                    || parent instanceof AST_Dot && parent.expression === node\n                    || parent instanceof AST_Sequence && parent.expressions[0] === node\n                    || parent instanceof AST_Sub && parent.expression === node\n                    || parent instanceof AST_UnaryPostfix) {\n                    if (!node.start) return;\n                    var text = node.start.comments_before;\n                    if (text && !printed_comments.has(text)) {\n                        printed_comments.add(text);\n                        comments = comments.concat(text);\n                    }\n                } else {\n                    return true;\n                }\n            });\n            tw.push(node);\n            node.value.walk(tw);\n        }\n\n        if (current_pos == 0) {\n            if (comments.length > 0 && options.shebang && comments[0].type === \"comment5\"\n                && !printed_comments.has(comments[0])) {\n                print(\"#!\" + comments.shift().value + \"\\n\");\n                indent();\n            }\n            var preamble = options.preamble;\n            if (preamble) {\n                print(preamble.replace(/\\r\\n?|[\\n\\u2028\\u2029]|\\s*$/g, \"\\n\"));\n            }\n        }\n\n        comments = comments.filter(comment_filter, node).filter(c => !printed_comments.has(c));\n        if (comments.length == 0) return;\n        var last_nlb = has_nlb();\n        comments.forEach(function(c, i) {\n            printed_comments.add(c);\n            if (!last_nlb) {\n                if (c.nlb) {\n                    print(\"\\n\");\n                    indent();\n                    last_nlb = true;\n                } else if (i > 0) {\n                    space();\n                }\n            }\n\n            if (/comment[134]/.test(c.type)) {\n                var value = filter_comment(c.value);\n                if (value) {\n                    print(\"//\" + value + \"\\n\");\n                    indent();\n                }\n                last_nlb = true;\n            } else if (c.type == \"comment2\") {\n                var value = filter_comment(c.value);\n                if (value) {\n                    print(\"/*\" + value + \"*/\");\n                }\n                last_nlb = false;\n            }\n        });\n        if (!last_nlb) {\n            if (start.nlb) {\n                print(\"\\n\");\n                indent();\n            } else {\n                space();\n            }\n        }\n    }\n\n    function append_comments(node, tail) {\n        var self = this;\n        var token = node.end;\n        if (!token) return;\n        var printed_comments = self.printed_comments;\n        var comments = token[tail ? \"comments_before\" : \"comments_after\"];\n        if (!comments || printed_comments.has(comments)) return;\n        if (!(node instanceof AST_Statement || comments.every((c) =>\n            !/comment[134]/.test(c.type)\n        ))) return;\n        printed_comments.add(comments);\n        var insert = OUTPUT.length();\n        comments.filter(comment_filter, node).forEach(function(c, i) {\n            if (printed_comments.has(c)) return;\n            printed_comments.add(c);\n            need_space = false;\n            if (need_newline_indented) {\n                print(\"\\n\");\n                indent();\n                need_newline_indented = false;\n            } else if (c.nlb && (i > 0 || !has_nlb())) {\n                print(\"\\n\");\n                indent();\n            } else if (i > 0 || !tail) {\n                space();\n            }\n            if (/comment[134]/.test(c.type)) {\n                const value = filter_comment(c.value);\n                if (value) {\n                    print(\"//\" + value);\n                }\n                need_newline_indented = true;\n            } else if (c.type == \"comment2\") {\n                const value = filter_comment(c.value);\n                if (value) {\n                    print(\"/*\" + value + \"*/\");\n                }\n                need_space = true;\n            }\n        });\n        if (OUTPUT.length() > insert) newline_insert = insert;\n    }\n\n    /**\n     * When output.option(\"_destroy_ast\") is enabled, destroy the function.\n     * Call this after printing it.\n     */\n    const gc_scope =\n      options[\"_destroy_ast\"]\n        ? function gc_scope(scope) {\n            scope.body.length = 0;\n            scope.argnames.length = 0;\n        }\n        : noop;\n\n    var stack = [];\n    return {\n        get             : get,\n        toString        : get,\n        indent          : indent,\n        in_directive    : false,\n        use_asm         : null,\n        active_scope    : null,\n        indentation     : function() { return indentation; },\n        current_width   : function() { return current_col - indentation; },\n        should_break    : function() { return options.width && this.current_width() >= options.width; },\n        has_parens      : function() { return has_parens; },\n        newline         : newline,\n        print           : print,\n        star            : star,\n        space           : space,\n        comma           : comma,\n        colon           : colon,\n        last            : function() { return last; },\n        semicolon       : semicolon,\n        force_semicolon : force_semicolon,\n        to_utf8         : to_utf8,\n        print_name      : function(name) { print(make_name(name)); },\n        print_string    : function(str, quote, escape_directive) {\n            var encoded = encode_string(str, quote);\n            if (escape_directive === true && !encoded.includes(\"\\\\\")) {\n                // Insert semicolons to break directive prologue\n                if (!EXPECT_DIRECTIVE.test(OUTPUT.toString())) {\n                    force_semicolon();\n                }\n                force_semicolon();\n            }\n            print(encoded);\n        },\n        print_template_string_chars: function(str) {\n            var encoded = encode_string(str, \"`\").replace(/\\${/g, \"\\\\${\");\n            return print(encoded.substr(1, encoded.length - 2));\n        },\n        encode_string   : encode_string,\n        next_indent     : next_indent,\n        with_indent     : with_indent,\n        with_block      : with_block,\n        with_parens     : with_parens,\n        with_square     : with_square,\n        add_mapping     : add_mapping,\n        option          : function(opt) { return options[opt]; },\n        gc_scope,\n        printed_comments: printed_comments,\n        prepend_comments: readonly ? noop : prepend_comments,\n        append_comments : readonly || comment_filter === return_false ? noop : append_comments,\n        line            : function() { return current_line; },\n        col             : function() { return current_col; },\n        pos             : function() { return current_pos; },\n        push_node       : function(node) { stack.push(node); },\n        pop_node        : function() { return stack.pop(); },\n        parent          : function(n) {\n            return stack[stack.length - 2 - (n || 0)];\n        }\n    };\n\n}\n\n/* -----[ code generators ]----- */\n\n(function() {\n\n    /* -----[ utils ]----- */\n\n    function DEFPRINT(nodetype, generator) {\n        nodetype.DEFMETHOD(\"_codegen\", generator);\n    }\n\n    AST_Node.DEFMETHOD(\"print\", function(output, force_parens) {\n        var self = this, generator = self._codegen;\n        if (self instanceof AST_Scope) {\n            output.active_scope = self;\n        } else if (!output.use_asm && self instanceof AST_Directive && self.value == \"use asm\") {\n            output.use_asm = output.active_scope;\n        }\n        function doit() {\n            output.prepend_comments(self);\n            self.add_source_map(output);\n            generator(self, output);\n            output.append_comments(self);\n        }\n        output.push_node(self);\n        if (force_parens || self.needs_parens(output)) {\n            output.with_parens(doit);\n        } else {\n            doit();\n        }\n        output.pop_node();\n        if (self === output.use_asm) {\n            output.use_asm = null;\n        }\n    });\n    AST_Node.DEFMETHOD(\"_print\", AST_Node.prototype.print);\n\n    AST_Node.DEFMETHOD(\"print_to_string\", function(options) {\n        var output = OutputStream(options);\n        this.print(output);\n        return output.get();\n    });\n\n    /* -----[ PARENTHESES ]----- */\n\n    function PARENS(nodetype, func) {\n        if (Array.isArray(nodetype)) {\n            nodetype.forEach(function(nodetype) {\n                PARENS(nodetype, func);\n            });\n        } else {\n            nodetype.DEFMETHOD(\"needs_parens\", func);\n        }\n    }\n\n    PARENS(AST_Node, return_false);\n\n    // a function expression needs parens around it when it's provably\n    // the first token to appear in a statement.\n    PARENS(AST_Function, function(output) {\n        if (!output.has_parens() && first_in_statement(output)) {\n            return true;\n        }\n\n        if (output.option(\"webkit\")) {\n            var p = output.parent();\n            if (p instanceof AST_PropAccess && p.expression === this) {\n                return true;\n            }\n        }\n\n        if (output.option(\"wrap_iife\")) {\n            var p = output.parent();\n            if (p instanceof AST_Call && p.expression === this) {\n                return true;\n            }\n        }\n\n        if (output.option(\"wrap_func_args\")) {\n            var p = output.parent();\n            if (p instanceof AST_Call && p.args.includes(this)) {\n                return true;\n            }\n        }\n\n        return false;\n    });\n\n    PARENS(AST_Arrow, function(output) {\n        var p = output.parent();\n\n        if (\n            output.option(\"wrap_func_args\")\n            && p instanceof AST_Call\n            && p.args.includes(this)\n        ) {\n            return true;\n        }\n        return p instanceof AST_PropAccess && p.expression === this;\n    });\n\n    // same goes for an object literal (as in AST_Function), because\n    // otherwise {...} would be interpreted as a block of code.\n    PARENS(AST_Object, function(output) {\n        return !output.has_parens() && first_in_statement(output);\n    });\n\n    PARENS(AST_ClassExpression, first_in_statement);\n\n    PARENS(AST_Unary, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this\n            || p instanceof AST_Binary\n                && p.operator === \"**\"\n                && this instanceof AST_UnaryPrefix\n                && p.left === this\n                && this.operator !== \"++\"\n                && this.operator !== \"--\";\n    });\n\n    PARENS(AST_Await, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this\n            || p instanceof AST_Binary && p.operator === \"**\" && p.left === this\n            || output.option(\"safari10\") && p instanceof AST_UnaryPrefix;\n    });\n\n    PARENS(AST_Sequence, function(output) {\n        var p = output.parent();\n        return p instanceof AST_Call                          // (foo, bar)() or foo(1, (2, 3), 4)\n            || p instanceof AST_Unary                         // !(foo, bar, baz)\n            || p instanceof AST_Binary                        // 1 + (2, 3) + 4 ==> 8\n            || p instanceof AST_VarDef                        // var a = (1, 2), b = a + a; ==> b == 4\n            || p instanceof AST_PropAccess                    // (1, {foo:2}).foo or (1, {foo:2})[\"foo\"] ==> 2\n            || p instanceof AST_Array                         // [ 1, (2, 3), 4 ] ==> [ 1, 3, 4 ]\n            || p instanceof AST_ObjectProperty                // { foo: (1, 2) }.foo ==> 2\n            || p instanceof AST_Conditional                   /* (false, true) ? (a = 10, b = 20) : (c = 30)\n                                                               * ==> 20 (side effect, set a := 10 and b := 20) */\n            || p instanceof AST_Arrow                         // x => (x, x)\n            || p instanceof AST_DefaultAssign                 // x => (x = (0, function(){}))\n            || p instanceof AST_Expansion                     // [...(a, b)]\n            || p instanceof AST_ForOf && this === p.object    // for (e of (foo, bar)) {}\n            || p instanceof AST_Yield                         // yield (foo, bar)\n            || p instanceof AST_Export                        // export default (foo, bar)\n        ;\n    });\n\n    PARENS(AST_Binary, function(output) {\n        var p = output.parent();\n        // (foo && bar)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // typeof (foo && bar)\n        if (p instanceof AST_Unary)\n            return true;\n        // (foo && bar)[\"prop\"], (foo && bar).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // this deals with precedence: 3 * (2 + 1)\n        if (p instanceof AST_Binary) {\n            const po = p.operator;\n            const so = this.operator;\n\n            if (so === \"??\" && (po === \"||\" || po === \"&&\")) {\n                return true;\n            }\n\n            if (po === \"??\" && (so === \"||\" || so === \"&&\")) {\n                return true;\n            }\n\n            const pp = PRECEDENCE[po];\n            const sp = PRECEDENCE[so];\n            if (pp > sp\n                || (pp == sp\n                    && (this === p.right || po == \"**\"))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_Yield, function(output) {\n        var p = output.parent();\n        // (yield 1) + (yield 2)\n        // a = yield 3\n        if (p instanceof AST_Binary && p.operator !== \"=\")\n            return true;\n        // (yield 1)()\n        // new (yield 1)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (yield 1) ? yield 2 : yield 3\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // -(yield 4)\n        if (p instanceof AST_Unary)\n            return true;\n        // (yield x).foo\n        // (yield x)['foo']\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n    });\n\n    PARENS(AST_PropAccess, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_New && p.expression === this) {\n            // i.e. new (foo.bar().baz)\n            //\n            // if there's one call into this subtree, then we need\n            // parens around it too, otherwise the call will be\n            // interpreted as passing the arguments to the upper New\n            // expression.\n            return walk(this, node => {\n                if (node instanceof AST_Scope) return true;\n                if (node instanceof AST_Call) {\n                    return walk_abort;  // makes walk() return true.\n                }\n            });\n        }\n    });\n\n    PARENS(AST_Call, function(output) {\n        var p = output.parent(), p1;\n        if (p instanceof AST_New && p.expression === this\n            || p instanceof AST_Export && p.is_default && this.expression instanceof AST_Function)\n            return true;\n\n        // workaround for Safari bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=123506\n        return this.expression instanceof AST_Function\n            && p instanceof AST_PropAccess\n            && p.expression === this\n            && (p1 = output.parent(1)) instanceof AST_Assign\n            && p1.left === p;\n    });\n\n    PARENS(AST_New, function(output) {\n        var p = output.parent();\n        if (this.args.length === 0\n            && (p instanceof AST_PropAccess // (new Date).getTime(), (new Date)[\"getTime\"]()\n                || p instanceof AST_Call && p.expression === this\n                || p instanceof AST_PrefixedTemplateString && p.prefix === this)) // (new foo)(bar)\n            return true;\n    });\n\n    PARENS(AST_Number, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_PropAccess && p.expression === this) {\n            var value = this.getValue();\n            if (value < 0 || /^0/.test(make_num(value))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_BigInt, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_PropAccess && p.expression === this) {\n            var value = this.getValue();\n            if (value.startsWith(\"-\")) {\n                return true;\n            }\n        }\n    });\n\n    PARENS([ AST_Assign, AST_Conditional ], function(output) {\n        var p = output.parent();\n        // !(a = false) → true\n        if (p instanceof AST_Unary)\n            return true;\n        // 1 + (a = 2) + 3 → 6, side effect setting a = 2\n        if (p instanceof AST_Binary && !(p instanceof AST_Assign))\n            return true;\n        // (a = func)() —or— new (a = Object)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (a = foo) ? bar : baz\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // (a = foo)[\"prop\"] —or— (a = foo).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // ({a, b} = {a: 1, b: 2}), a destructuring assignment\n        if (this instanceof AST_Assign && this.left instanceof AST_Destructuring && this.left.is_array === false)\n            return true;\n    });\n\n    /* -----[ PRINTERS ]----- */\n\n    DEFPRINT(AST_Directive, function(self, output) {\n        output.print_string(self.value, self.quote);\n        output.semicolon();\n    });\n\n    DEFPRINT(AST_Expansion, function (self, output) {\n        output.print(\"...\");\n        self.expression.print(output);\n    });\n\n    DEFPRINT(AST_Destructuring, function (self, output) {\n        output.print(self.is_array ? \"[\" : \"{\");\n        var len = self.names.length;\n        self.names.forEach(function (name, i) {\n            if (i > 0) output.comma();\n            name.print(output);\n            // If the final element is a hole, we need to make sure it\n            // doesn't look like a trailing comma, by inserting an actual\n            // trailing comma.\n            if (i == len - 1 && name instanceof AST_Hole) output.comma();\n        });\n        output.print(self.is_array ? \"]\" : \"}\");\n    });\n\n    DEFPRINT(AST_Debugger, function(self, output) {\n        output.print(\"debugger\");\n        output.semicolon();\n    });\n\n    /* -----[ statements ]----- */\n\n    function display_body(body, is_toplevel, output, allow_directives) {\n        var last = body.length - 1;\n        output.in_directive = allow_directives;\n        body.forEach(function(stmt, i) {\n            if (output.in_directive === true && !(stmt instanceof AST_Directive ||\n                stmt instanceof AST_EmptyStatement ||\n                (stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String)\n            )) {\n                output.in_directive = false;\n            }\n            if (!(stmt instanceof AST_EmptyStatement)) {\n                output.indent();\n                stmt.print(output);\n                if (!(i == last && is_toplevel)) {\n                    output.newline();\n                    if (is_toplevel) output.newline();\n                }\n            }\n            if (output.in_directive === true &&\n                stmt instanceof AST_SimpleStatement &&\n                stmt.body instanceof AST_String\n            ) {\n                output.in_directive = false;\n            }\n        });\n        output.in_directive = false;\n    }\n\n    AST_StatementWithBody.DEFMETHOD(\"_do_print_body\", function(output) {\n        force_statement(this.body, output);\n    });\n\n    DEFPRINT(AST_Statement, function(self, output) {\n        self.body.print(output);\n        output.semicolon();\n    });\n    DEFPRINT(AST_Toplevel, function(self, output) {\n        display_body(self.body, true, output, true);\n        output.print(\"\");\n    });\n    DEFPRINT(AST_LabeledStatement, function(self, output) {\n        self.label.print(output);\n        output.colon();\n        self.body.print(output);\n    });\n    DEFPRINT(AST_SimpleStatement, function(self, output) {\n        self.body.print(output);\n        output.semicolon();\n    });\n    function print_braced_empty(self, output) {\n        output.print(\"{\");\n        output.with_indent(output.next_indent(), function() {\n            output.append_comments(self, true);\n        });\n        output.add_mapping(self.end);\n        output.print(\"}\");\n    }\n    function print_braced(self, output, allow_directives) {\n        if (self.body.length > 0) {\n            output.with_block(function() {\n                display_body(self.body, false, output, allow_directives);\n                output.add_mapping(self.end);\n            });\n        } else print_braced_empty(self, output);\n    }\n    DEFPRINT(AST_BlockStatement, function(self, output) {\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_EmptyStatement, function(self, output) {\n        output.semicolon();\n    });\n    DEFPRINT(AST_Do, function(self, output) {\n        output.print(\"do\");\n        output.space();\n        make_block(self.body, output);\n        output.space();\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.semicolon();\n    });\n    DEFPRINT(AST_While, function(self, output) {\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_For, function(self, output) {\n        output.print(\"for\");\n        output.space();\n        output.with_parens(function() {\n            if (self.init) {\n                if (self.init instanceof AST_Definitions) {\n                    self.init.print(output);\n                } else {\n                    parenthesize_for_noin(self.init, output, true);\n                }\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.condition) {\n                self.condition.print(output);\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.step) {\n                self.step.print(output);\n            }\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_ForIn, function(self, output) {\n        output.print(\"for\");\n        if (self.await) {\n            output.space();\n            output.print(\"await\");\n        }\n        output.space();\n        output.with_parens(function() {\n            self.init.print(output);\n            output.space();\n            output.print(self instanceof AST_ForOf ? \"of\" : \"in\");\n            output.space();\n            self.object.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_With, function(self, output) {\n        output.print(\"with\");\n        output.space();\n        output.with_parens(function() {\n            self.expression.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n\n    /* -----[ functions ]----- */\n    AST_Lambda.DEFMETHOD(\"_do_print\", function(output, nokeyword) {\n        var self = this;\n        if (!nokeyword) {\n            if (self.async) {\n                output.print(\"async\");\n                output.space();\n            }\n            output.print(\"function\");\n            if (self.is_generator) {\n                output.star();\n            }\n            if (self.name) {\n                output.space();\n            }\n        }\n        if (self.name instanceof AST_Symbol) {\n            self.name.print(output);\n        } else if (nokeyword && self.name instanceof AST_Node) {\n            output.with_square(function() {\n                self.name.print(output); // Computed method name\n            });\n        }\n        output.with_parens(function() {\n            self.argnames.forEach(function(arg, i) {\n                if (i) output.comma();\n                arg.print(output);\n            });\n        });\n        output.space();\n        print_braced(self, output, true);\n    });\n    DEFPRINT(AST_Lambda, function(self, output) {\n        self._do_print(output);\n        output.gc_scope(self);\n    });\n\n    DEFPRINT(AST_PrefixedTemplateString, function(self, output) {\n        var tag = self.prefix;\n        var parenthesize_tag = tag instanceof AST_Lambda\n            || tag instanceof AST_Binary\n            || tag instanceof AST_Conditional\n            || tag instanceof AST_Sequence\n            || tag instanceof AST_Unary\n            || tag instanceof AST_Dot && tag.expression instanceof AST_Object;\n        if (parenthesize_tag) output.print(\"(\");\n        self.prefix.print(output);\n        if (parenthesize_tag) output.print(\")\");\n        self.template_string.print(output);\n    });\n    DEFPRINT(AST_TemplateString, function(self, output) {\n        var is_tagged = output.parent() instanceof AST_PrefixedTemplateString;\n\n        output.print(\"`\");\n        for (var i = 0; i < self.segments.length; i++) {\n            if (!(self.segments[i] instanceof AST_TemplateSegment)) {\n                output.print(\"${\");\n                self.segments[i].print(output);\n                output.print(\"}\");\n            } else if (is_tagged) {\n                output.print(self.segments[i].raw);\n            } else {\n                output.print_template_string_chars(self.segments[i].value);\n            }\n        }\n        output.print(\"`\");\n    });\n    DEFPRINT(AST_TemplateSegment, function(self, output) {\n        output.print_template_string_chars(self.value);\n    });\n\n    AST_Arrow.DEFMETHOD(\"_do_print\", function(output) {\n        var self = this;\n        var parent = output.parent();\n        var needs_parens = (parent instanceof AST_Binary && !(parent instanceof AST_Assign)) ||\n            parent instanceof AST_Unary ||\n            (parent instanceof AST_Call && self === parent.expression);\n        if (needs_parens) { output.print(\"(\"); }\n        if (self.async) {\n            output.print(\"async\");\n            output.space();\n        }\n        if (self.argnames.length === 1 && self.argnames[0] instanceof AST_Symbol) {\n            self.argnames[0].print(output);\n        } else {\n            output.with_parens(function() {\n                self.argnames.forEach(function(arg, i) {\n                    if (i) output.comma();\n                    arg.print(output);\n                });\n            });\n        }\n        output.space();\n        output.print(\"=>\");\n        output.space();\n        const first_statement = self.body[0];\n        if (\n            self.body.length === 1\n            && first_statement instanceof AST_Return\n        ) {\n            const returned = first_statement.value;\n            if (!returned) {\n                output.print(\"{}\");\n            } else if (left_is_object(returned)) {\n                output.print(\"(\");\n                returned.print(output);\n                output.print(\")\");\n            } else {\n                returned.print(output);\n            }\n        } else {\n            print_braced(self, output);\n        }\n        if (needs_parens) { output.print(\")\"); }\n        output.gc_scope(self);\n    });\n\n    /* -----[ exits ]----- */\n    AST_Exit.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        if (this.value) {\n            output.space();\n            const comments = this.value.start.comments_before;\n            if (comments && comments.length && !output.printed_comments.has(comments)) {\n                output.print(\"(\");\n                this.value.print(output);\n                output.print(\")\");\n            } else {\n                this.value.print(output);\n            }\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Return, function(self, output) {\n        self._do_print(output, \"return\");\n    });\n    DEFPRINT(AST_Throw, function(self, output) {\n        self._do_print(output, \"throw\");\n    });\n\n    /* -----[ yield ]----- */\n\n    DEFPRINT(AST_Yield, function(self, output) {\n        var star = self.is_star ? \"*\" : \"\";\n        output.print(\"yield\" + star);\n        if (self.expression) {\n            output.space();\n            self.expression.print(output);\n        }\n    });\n\n    DEFPRINT(AST_Await, function(self, output) {\n        output.print(\"await\");\n        output.space();\n        var e = self.expression;\n        var parens = !(\n               e instanceof AST_Call\n            || e instanceof AST_SymbolRef\n            || e instanceof AST_PropAccess\n            || e instanceof AST_Unary\n            || e instanceof AST_Constant\n            || e instanceof AST_Await\n            || e instanceof AST_Object\n        );\n        if (parens) output.print(\"(\");\n        self.expression.print(output);\n        if (parens) output.print(\")\");\n    });\n\n    /* -----[ loop control ]----- */\n    AST_LoopControl.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        if (this.label) {\n            output.space();\n            this.label.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Break, function(self, output) {\n        self._do_print(output, \"break\");\n    });\n    DEFPRINT(AST_Continue, function(self, output) {\n        self._do_print(output, \"continue\");\n    });\n\n    /* -----[ if ]----- */\n    function make_then(self, output) {\n        var b = self.body;\n        if (output.option(\"braces\")\n            || output.option(\"ie8\") && b instanceof AST_Do)\n            return make_block(b, output);\n        // The squeezer replaces \"block\"-s that contain only a single\n        // statement with the statement itself; technically, the AST\n        // is correct, but this can create problems when we output an\n        // IF having an ELSE clause where the THEN clause ends in an\n        // IF *without* an ELSE block (then the outer ELSE would refer\n        // to the inner IF).  This function checks for this case and\n        // adds the block braces if needed.\n        if (!b) return output.force_semicolon();\n        while (true) {\n            if (b instanceof AST_If) {\n                if (!b.alternative) {\n                    make_block(self.body, output);\n                    return;\n                }\n                b = b.alternative;\n            } else if (b instanceof AST_StatementWithBody) {\n                b = b.body;\n            } else break;\n        }\n        force_statement(self.body, output);\n    }\n    DEFPRINT(AST_If, function(self, output) {\n        output.print(\"if\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.space();\n        if (self.alternative) {\n            make_then(self, output);\n            output.space();\n            output.print(\"else\");\n            output.space();\n            if (self.alternative instanceof AST_If)\n                self.alternative.print(output);\n            else\n                force_statement(self.alternative, output);\n        } else {\n            self._do_print_body(output);\n        }\n    });\n\n    /* -----[ switch ]----- */\n    DEFPRINT(AST_Switch, function(self, output) {\n        output.print(\"switch\");\n        output.space();\n        output.with_parens(function() {\n            self.expression.print(output);\n        });\n        output.space();\n        var last = self.body.length - 1;\n        if (last < 0) print_braced_empty(self, output);\n        else output.with_block(function() {\n            self.body.forEach(function(branch, i) {\n                output.indent(true);\n                branch.print(output);\n                if (i < last && branch.body.length > 0)\n                    output.newline();\n            });\n        });\n    });\n    AST_SwitchBranch.DEFMETHOD(\"_do_print_body\", function(output) {\n        output.newline();\n        this.body.forEach(function(stmt) {\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    });\n    DEFPRINT(AST_Default, function(self, output) {\n        output.print(\"default:\");\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_Case, function(self, output) {\n        output.print(\"case\");\n        output.space();\n        self.expression.print(output);\n        output.print(\":\");\n        self._do_print_body(output);\n    });\n\n    /* -----[ exceptions ]----- */\n    DEFPRINT(AST_Try, function(self, output) {\n        output.print(\"try\");\n        output.space();\n        print_braced(self, output);\n        if (self.bcatch) {\n            output.space();\n            self.bcatch.print(output);\n        }\n        if (self.bfinally) {\n            output.space();\n            self.bfinally.print(output);\n        }\n    });\n    DEFPRINT(AST_Catch, function(self, output) {\n        output.print(\"catch\");\n        if (self.argname) {\n            output.space();\n            output.with_parens(function() {\n                self.argname.print(output);\n            });\n        }\n        output.space();\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_Finally, function(self, output) {\n        output.print(\"finally\");\n        output.space();\n        print_braced(self, output);\n    });\n\n    /* -----[ var/const ]----- */\n    AST_Definitions.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        output.space();\n        this.definitions.forEach(function(def, i) {\n            if (i) output.comma();\n            def.print(output);\n        });\n        var p = output.parent();\n        var in_for = p instanceof AST_For || p instanceof AST_ForIn;\n        var output_semicolon = !in_for || p && p.init !== this;\n        if (output_semicolon)\n            output.semicolon();\n    });\n    DEFPRINT(AST_Let, function(self, output) {\n        self._do_print(output, \"let\");\n    });\n    DEFPRINT(AST_Var, function(self, output) {\n        self._do_print(output, \"var\");\n    });\n    DEFPRINT(AST_Const, function(self, output) {\n        self._do_print(output, \"const\");\n    });\n    DEFPRINT(AST_Import, function(self, output) {\n        output.print(\"import\");\n        output.space();\n        if (self.imported_name) {\n            self.imported_name.print(output);\n        }\n        if (self.imported_name && self.imported_names) {\n            output.print(\",\");\n            output.space();\n        }\n        if (self.imported_names) {\n            if (self.imported_names.length === 1 && self.imported_names[0].foreign_name.name === \"*\") {\n                self.imported_names[0].print(output);\n            } else {\n                output.print(\"{\");\n                self.imported_names.forEach(function (name_import, i) {\n                    output.space();\n                    name_import.print(output);\n                    if (i < self.imported_names.length - 1) {\n                        output.print(\",\");\n                    }\n                });\n                output.space();\n                output.print(\"}\");\n            }\n        }\n        if (self.imported_name || self.imported_names) {\n            output.space();\n            output.print(\"from\");\n            output.space();\n        }\n        self.module_name.print(output);\n        if (self.assert_clause) {\n            output.print(\"assert\");\n            self.assert_clause.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_ImportMeta, function(self, output) {\n        output.print(\"import.meta\");\n    });\n\n    DEFPRINT(AST_NameMapping, function(self, output) {\n        var is_import = output.parent() instanceof AST_Import;\n        var definition = self.name.definition();\n        var names_are_different =\n            (definition && definition.mangled_name || self.name.name) !==\n            self.foreign_name.name;\n        if (names_are_different) {\n            if (is_import) {\n                output.print(self.foreign_name.name);\n            } else {\n                self.name.print(output);\n            }\n            output.space();\n            output.print(\"as\");\n            output.space();\n            if (is_import) {\n                self.name.print(output);\n            } else {\n                output.print(self.foreign_name.name);\n            }\n        } else {\n            self.name.print(output);\n        }\n    });\n\n    DEFPRINT(AST_Export, function(self, output) {\n        output.print(\"export\");\n        output.space();\n        if (self.is_default) {\n            output.print(\"default\");\n            output.space();\n        }\n        if (self.exported_names) {\n            if (self.exported_names.length === 1 && self.exported_names[0].name.name === \"*\") {\n                self.exported_names[0].print(output);\n            } else {\n                output.print(\"{\");\n                self.exported_names.forEach(function(name_export, i) {\n                    output.space();\n                    name_export.print(output);\n                    if (i < self.exported_names.length - 1) {\n                        output.print(\",\");\n                    }\n                });\n                output.space();\n                output.print(\"}\");\n            }\n        } else if (self.exported_value) {\n            self.exported_value.print(output);\n        } else if (self.exported_definition) {\n            self.exported_definition.print(output);\n            if (self.exported_definition instanceof AST_Definitions) return;\n        }\n        if (self.module_name) {\n            output.space();\n            output.print(\"from\");\n            output.space();\n            self.module_name.print(output);\n        }\n        if (self.assert_clause) {\n            output.print(\"assert\");\n            self.assert_clause.print(output);\n        }\n        if (self.exported_value\n                && !(self.exported_value instanceof AST_Defun ||\n                    self.exported_value instanceof AST_Function ||\n                    self.exported_value instanceof AST_Class)\n            || self.module_name\n            || self.exported_names\n        ) {\n            output.semicolon();\n        }\n    });\n\n    function parenthesize_for_noin(node, output, noin) {\n        var parens = false;\n        // need to take some precautions here:\n        //    https://github.com/mishoo/UglifyJS2/issues/60\n        if (noin) {\n            parens = walk(node, node => {\n                // Don't go into scopes -- except arrow functions:\n                // https://github.com/terser/terser/issues/1019#issuecomment-877642607\n                if (node instanceof AST_Scope && !(node instanceof AST_Arrow)) {\n                    return true;\n                }\n                if (node instanceof AST_Binary && node.operator == \"in\") {\n                    return walk_abort;  // makes walk() return true\n                }\n            });\n        }\n        node.print(output, parens);\n    }\n\n    DEFPRINT(AST_VarDef, function(self, output) {\n        self.name.print(output);\n        if (self.value) {\n            output.space();\n            output.print(\"=\");\n            output.space();\n            var p = output.parent(1);\n            var noin = p instanceof AST_For || p instanceof AST_ForIn;\n            parenthesize_for_noin(self.value, output, noin);\n        }\n    });\n\n    /* -----[ other expressions ]----- */\n    DEFPRINT(AST_Call, function(self, output) {\n        self.expression.print(output);\n        if (self instanceof AST_New && self.args.length === 0)\n            return;\n        if (self.expression instanceof AST_Call || self.expression instanceof AST_Lambda) {\n            output.add_mapping(self.start);\n        }\n        if (self.optional) output.print(\"?.\");\n        output.with_parens(function() {\n            self.args.forEach(function(expr, i) {\n                if (i) output.comma();\n                expr.print(output);\n            });\n        });\n    });\n    DEFPRINT(AST_New, function(self, output) {\n        output.print(\"new\");\n        output.space();\n        AST_Call.prototype._codegen(self, output);\n    });\n\n    AST_Sequence.DEFMETHOD(\"_do_print\", function(output) {\n        this.expressions.forEach(function(node, index) {\n            if (index > 0) {\n                output.comma();\n                if (output.should_break()) {\n                    output.newline();\n                    output.indent();\n                }\n            }\n            node.print(output);\n        });\n    });\n    DEFPRINT(AST_Sequence, function(self, output) {\n        self._do_print(output);\n        // var p = output.parent();\n        // if (p instanceof AST_Statement) {\n        //     output.with_indent(output.next_indent(), function(){\n        //         self._do_print(output);\n        //     });\n        // } else {\n        //     self._do_print(output);\n        // }\n    });\n    DEFPRINT(AST_Dot, function(self, output) {\n        var expr = self.expression;\n        expr.print(output);\n        var prop = self.property;\n        var print_computed = ALL_RESERVED_WORDS.has(prop)\n            ? output.option(\"ie8\")\n            : !is_identifier_string(\n                prop,\n                output.option(\"ecma\") >= 2015 || output.option(\"safari10\")\n            );\n\n        if (self.optional) output.print(\"?.\");\n\n        if (print_computed) {\n            output.print(\"[\");\n            output.add_mapping(self.end);\n            output.print_string(prop);\n            output.print(\"]\");\n        } else {\n            if (expr instanceof AST_Number && expr.getValue() >= 0) {\n                if (!/[xa-f.)]/i.test(output.last())) {\n                    output.print(\".\");\n                }\n            }\n            if (!self.optional) output.print(\".\");\n            // the name after dot would be mapped about here.\n            output.add_mapping(self.end);\n            output.print_name(prop);\n        }\n    });\n    DEFPRINT(AST_DotHash, function(self, output) {\n        var expr = self.expression;\n        expr.print(output);\n        var prop = self.property;\n\n        if (self.optional) output.print(\"?\");\n        output.print(\".#\");\n        output.add_mapping(self.end);\n        output.print_name(prop);\n    });\n    DEFPRINT(AST_Sub, function(self, output) {\n        self.expression.print(output);\n        if (self.optional) output.print(\"?.\");\n        output.print(\"[\");\n        self.property.print(output);\n        output.print(\"]\");\n    });\n    DEFPRINT(AST_Chain, function(self, output) {\n        self.expression.print(output);\n    });\n    DEFPRINT(AST_UnaryPrefix, function(self, output) {\n        var op = self.operator;\n        output.print(op);\n        if (/^[a-z]/i.test(op)\n            || (/[+-]$/.test(op)\n                && self.expression instanceof AST_UnaryPrefix\n                && /^[+-]/.test(self.expression.operator))) {\n            output.space();\n        }\n        self.expression.print(output);\n    });\n    DEFPRINT(AST_UnaryPostfix, function(self, output) {\n        self.expression.print(output);\n        output.print(self.operator);\n    });\n    DEFPRINT(AST_Binary, function(self, output) {\n        var op = self.operator;\n        self.left.print(output);\n        if (op[0] == \">\" /* \">>\" \">>>\" \">\" \">=\" */\n            && self.left instanceof AST_UnaryPostfix\n            && self.left.operator == \"--\") {\n            // space is mandatory to avoid outputting -->\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        output.print(op);\n        if ((op == \"<\" || op == \"<<\")\n            && self.right instanceof AST_UnaryPrefix\n            && self.right.operator == \"!\"\n            && self.right.expression instanceof AST_UnaryPrefix\n            && self.right.expression.operator == \"--\") {\n            // space is mandatory to avoid outputting <!--\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        self.right.print(output);\n    });\n    DEFPRINT(AST_Conditional, function(self, output) {\n        self.condition.print(output);\n        output.space();\n        output.print(\"?\");\n        output.space();\n        self.consequent.print(output);\n        output.space();\n        output.colon();\n        self.alternative.print(output);\n    });\n\n    /* -----[ literals ]----- */\n    DEFPRINT(AST_Array, function(self, output) {\n        output.with_square(function() {\n            var a = self.elements, len = a.length;\n            if (len > 0) output.space();\n            a.forEach(function(exp, i) {\n                if (i) output.comma();\n                exp.print(output);\n                // If the final element is a hole, we need to make sure it\n                // doesn't look like a trailing comma, by inserting an actual\n                // trailing comma.\n                if (i === len - 1 && exp instanceof AST_Hole)\n                  output.comma();\n            });\n            if (len > 0) output.space();\n        });\n    });\n    DEFPRINT(AST_Object, function(self, output) {\n        if (self.properties.length > 0) output.with_block(function() {\n            self.properties.forEach(function(prop, i) {\n                if (i) {\n                    output.print(\",\");\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else print_braced_empty(self, output);\n    });\n    DEFPRINT(AST_Class, function(self, output) {\n        output.print(\"class\");\n        output.space();\n        if (self.name) {\n            self.name.print(output);\n            output.space();\n        }\n        if (self.extends) {\n            var parens = (\n                   !(self.extends instanceof AST_SymbolRef)\n                && !(self.extends instanceof AST_PropAccess)\n                && !(self.extends instanceof AST_ClassExpression)\n                && !(self.extends instanceof AST_Function)\n            );\n            output.print(\"extends\");\n            if (parens) {\n                output.print(\"(\");\n            } else {\n                output.space();\n            }\n            self.extends.print(output);\n            if (parens) {\n                output.print(\")\");\n            } else {\n                output.space();\n            }\n        }\n        if (self.properties.length > 0) output.with_block(function() {\n            self.properties.forEach(function(prop, i) {\n                if (i) {\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else output.print(\"{}\");\n    });\n    DEFPRINT(AST_NewTarget, function(self, output) {\n        output.print(\"new.target\");\n    });\n\n    function print_property_name(key, quote, output) {\n        if (output.option(\"quote_keys\")) {\n            return output.print_string(key);\n        }\n        if (\"\" + +key == key && key >= 0) {\n            if (output.option(\"keep_numbers\")) {\n                return output.print(key);\n            }\n            return output.print(make_num(key));\n        }\n        var print_string = ALL_RESERVED_WORDS.has(key)\n            ? output.option(\"ie8\")\n            : (\n                output.option(\"ecma\") < 2015 || output.option(\"safari10\")\n                    ? !is_basic_identifier_string(key)\n                    : !is_identifier_string(key, true)\n            );\n        if (print_string || (quote && output.option(\"keep_quoted_props\"))) {\n            return output.print_string(key, quote);\n        }\n        return output.print_name(key);\n    }\n\n    DEFPRINT(AST_ObjectKeyVal, function(self, output) {\n        function get_name(self) {\n            var def = self.definition();\n            return def ? def.mangled_name || def.name : self.name;\n        }\n\n        var allowShortHand = output.option(\"shorthand\");\n        if (allowShortHand &&\n            self.value instanceof AST_Symbol &&\n            is_identifier_string(\n                self.key,\n                output.option(\"ecma\") >= 2015 || output.option(\"safari10\")\n            ) &&\n            get_name(self.value) === self.key &&\n            !ALL_RESERVED_WORDS.has(self.key)\n        ) {\n            print_property_name(self.key, self.quote, output);\n\n        } else if (allowShortHand &&\n            self.value instanceof AST_DefaultAssign &&\n            self.value.left instanceof AST_Symbol &&\n            is_identifier_string(\n                self.key,\n                output.option(\"ecma\") >= 2015 || output.option(\"safari10\")\n            ) &&\n            get_name(self.value.left) === self.key\n        ) {\n            print_property_name(self.key, self.quote, output);\n            output.space();\n            output.print(\"=\");\n            output.space();\n            self.value.right.print(output);\n        } else {\n            if (!(self.key instanceof AST_Node)) {\n                print_property_name(self.key, self.quote, output);\n            } else {\n                output.with_square(function() {\n                    self.key.print(output);\n                });\n            }\n            output.colon();\n            self.value.print(output);\n        }\n    });\n    DEFPRINT(AST_ClassPrivateProperty, (self, output) => {\n        if (self.static) {\n            output.print(\"static\");\n            output.space();\n        }\n\n        output.print(\"#\");\n        \n        print_property_name(self.key.name, self.quote, output);\n\n        if (self.value) {\n            output.print(\"=\");\n            self.value.print(output);\n        }\n\n        output.semicolon();\n    });\n    DEFPRINT(AST_ClassProperty, (self, output) => {\n        if (self.static) {\n            output.print(\"static\");\n            output.space();\n        }\n\n        if (self.key instanceof AST_SymbolClassProperty) {\n            print_property_name(self.key.name, self.quote, output);\n        } else {\n            output.print(\"[\");\n            self.key.print(output);\n            output.print(\"]\");\n        }\n\n        if (self.value) {\n            output.print(\"=\");\n            self.value.print(output);\n        }\n\n        output.semicolon();\n    });\n    AST_ObjectProperty.DEFMETHOD(\"_print_getter_setter\", function(type, is_private, output) {\n        var self = this;\n        if (self.static) {\n            output.print(\"static\");\n            output.space();\n        }\n        if (type) {\n            output.print(type);\n            output.space();\n        }\n        if (self.key instanceof AST_SymbolMethod) {\n            if (is_private) output.print(\"#\");\n            print_property_name(self.key.name, self.quote, output);\n        } else {\n            output.with_square(function() {\n                self.key.print(output);\n            });\n        }\n        self.value._do_print(output, true);\n    });\n    DEFPRINT(AST_ObjectSetter, function(self, output) {\n        self._print_getter_setter(\"set\", false, output);\n    });\n    DEFPRINT(AST_ObjectGetter, function(self, output) {\n        self._print_getter_setter(\"get\", false, output);\n    });\n    DEFPRINT(AST_PrivateSetter, function(self, output) {\n        self._print_getter_setter(\"set\", true, output);\n    });\n    DEFPRINT(AST_PrivateGetter, function(self, output) {\n        self._print_getter_setter(\"get\", true, output);\n    });\n    DEFPRINT(AST_PrivateMethod, function(self, output) {\n        var type;\n        if (self.is_generator && self.async) {\n            type = \"async*\";\n        } else if (self.is_generator) {\n            type = \"*\";\n        } else if (self.async) {\n            type = \"async\";\n        }\n        self._print_getter_setter(type, true, output);\n    });\n    DEFPRINT(AST_ConciseMethod, function(self, output) {\n        var type;\n        if (self.is_generator && self.async) {\n            type = \"async*\";\n        } else if (self.is_generator) {\n            type = \"*\";\n        } else if (self.async) {\n            type = \"async\";\n        }\n        self._print_getter_setter(type, false, output);\n    });\n    DEFPRINT(AST_ClassStaticBlock, function (self, output) {\n        output.print(\"static\");\n        output.space();\n        print_braced(self, output);\n    });\n    AST_Symbol.DEFMETHOD(\"_do_print\", function(output) {\n        var def = this.definition();\n        output.print_name(def ? def.mangled_name || def.name : this.name);\n    });\n    DEFPRINT(AST_Symbol, function (self, output) {\n        self._do_print(output);\n    });\n    DEFPRINT(AST_Hole, noop);\n    DEFPRINT(AST_This, function(self, output) {\n        output.print(\"this\");\n    });\n    DEFPRINT(AST_Super, function(self, output) {\n        output.print(\"super\");\n    });\n    DEFPRINT(AST_Constant, function(self, output) {\n        output.print(self.getValue());\n    });\n    DEFPRINT(AST_String, function(self, output) {\n        output.print_string(self.getValue(), self.quote, output.in_directive);\n    });\n    DEFPRINT(AST_Number, function(self, output) {\n        if ((output.option(\"keep_numbers\") || output.use_asm) && self.raw) {\n            output.print(self.raw);\n        } else {\n            output.print(make_num(self.getValue()));\n        }\n    });\n    DEFPRINT(AST_BigInt, function(self, output) {\n        output.print(self.getValue() + \"n\");\n    });\n\n    const r_slash_script = /(<\\s*\\/\\s*script)/i;\n    const slash_script_replace = (_, $1) => $1.replace(\"/\", \"\\\\/\");\n    DEFPRINT(AST_RegExp, function(self, output) {\n        let { source, flags } = self.getValue();\n        source = regexp_source_fix(source);\n        flags = flags ? sort_regexp_flags(flags) : \"\";\n        source = source.replace(r_slash_script, slash_script_replace);\n\n        output.print(output.to_utf8(`/${source}/${flags}`, false, true));\n\n        const parent = output.parent();\n        if (\n            parent instanceof AST_Binary\n            && /^\\w/.test(parent.operator)\n            && parent.left === self\n        ) {\n            output.print(\" \");\n        }\n    });\n\n    function force_statement(stat, output) {\n        if (output.option(\"braces\")) {\n            make_block(stat, output);\n        } else {\n            if (!stat || stat instanceof AST_EmptyStatement)\n                output.force_semicolon();\n            else\n                stat.print(output);\n        }\n    }\n\n    function best_of(a) {\n        var best = a[0], len = best.length;\n        for (var i = 1; i < a.length; ++i) {\n            if (a[i].length < len) {\n                best = a[i];\n                len = best.length;\n            }\n        }\n        return best;\n    }\n\n    function make_num(num) {\n        var str = num.toString(10).replace(/^0\\./, \".\").replace(\"e+\", \"e\");\n        var candidates = [ str ];\n        if (Math.floor(num) === num) {\n            if (num < 0) {\n                candidates.push(\"-0x\" + (-num).toString(16).toLowerCase());\n            } else {\n                candidates.push(\"0x\" + num.toString(16).toLowerCase());\n            }\n        }\n        var match, len, digits;\n        if (match = /^\\.0+/.exec(str)) {\n            len = match[0].length;\n            digits = str.slice(len);\n            candidates.push(digits + \"e-\" + (digits.length + len - 1));\n        } else if (match = /0+$/.exec(str)) {\n            len = match[0].length;\n            candidates.push(str.slice(0, -len) + \"e\" + len);\n        } else if (match = /^(\\d)\\.(\\d+)e(-?\\d+)$/.exec(str)) {\n            candidates.push(match[1] + match[2] + \"e\" + (match[3] - match[2].length));\n        }\n        return best_of(candidates);\n    }\n\n    function make_block(stmt, output) {\n        if (!stmt || stmt instanceof AST_EmptyStatement)\n            output.print(\"{}\");\n        else if (stmt instanceof AST_BlockStatement)\n            stmt.print(output);\n        else output.with_block(function() {\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    }\n\n    /* -----[ source map generators ]----- */\n\n    function DEFMAP(nodetype, generator) {\n        nodetype.forEach(function(nodetype) {\n            nodetype.DEFMETHOD(\"add_source_map\", generator);\n        });\n    }\n\n    DEFMAP([\n        // We could easily add info for ALL nodes, but it seems to me that\n        // would be quite wasteful, hence this noop in the base class.\n        AST_Node,\n        // since the label symbol will mark it\n        AST_LabeledStatement,\n        AST_Toplevel,\n    ], noop);\n\n    // XXX: I'm not exactly sure if we need it for all of these nodes,\n    // or if we should add even more.\n    DEFMAP([\n        AST_Array,\n        AST_BlockStatement,\n        AST_Catch,\n        AST_Class,\n        AST_Constant,\n        AST_Debugger,\n        AST_Definitions,\n        AST_Directive,\n        AST_Finally,\n        AST_Jump,\n        AST_Lambda,\n        AST_New,\n        AST_Object,\n        AST_StatementWithBody,\n        AST_Symbol,\n        AST_Switch,\n        AST_SwitchBranch,\n        AST_TemplateString,\n        AST_TemplateSegment,\n        AST_Try,\n    ], function(output) {\n        output.add_mapping(this.start);\n    });\n\n    DEFMAP([\n        AST_ObjectGetter,\n        AST_ObjectSetter,\n        AST_PrivateGetter,\n        AST_PrivateSetter,\n    ], function(output) {\n        output.add_mapping(this.key.end, this.key.name);\n    });\n\n    DEFMAP([ AST_ObjectProperty ], function(output) {\n        output.add_mapping(this.start, this.key);\n    });\n})();\n\nexport {\n    OutputStream,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}