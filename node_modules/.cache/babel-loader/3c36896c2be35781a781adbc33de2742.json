{"ast":null,"code":"var $ = require('../internals/export');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar toIndexedObject = require('../internals/to-indexed-object');\n\nvar toString = require('../internals/to-string');\n\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar $TypeError = TypeError;\nvar ArrayPrototype = Array.prototype;\nvar push = uncurryThis(ArrayPrototype.push);\nvar join = uncurryThis(ArrayPrototype.join); // `String.cooked` method\n// https://github.com/tc39/proposal-string-cooked\n\n$({\n  target: 'String',\n  stat: true,\n  forced: true\n}, {\n  cooked: function cooked(template\n  /* , ...substitutions */\n  ) {\n    var cookedTemplate = toIndexedObject(template);\n    var literalSegments = lengthOfArrayLike(cookedTemplate);\n    var argumentsLength = arguments.length;\n    var elements = [];\n    var i = 0;\n\n    while (literalSegments > i) {\n      var nextVal = cookedTemplate[i++];\n      if (nextVal === undefined) throw $TypeError('Incorrect template');\n      push(elements, toString(nextVal));\n      if (i === literalSegments) return join(elements, '');\n      if (i < argumentsLength) push(elements, toString(arguments[i]));\n    }\n  }\n});","map":{"version":3,"names":["$","require","uncurryThis","toIndexedObject","toString","lengthOfArrayLike","$TypeError","TypeError","ArrayPrototype","Array","prototype","push","join","target","stat","forced","cooked","template","cookedTemplate","literalSegments","argumentsLength","arguments","length","elements","i","nextVal","undefined"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/core-js/modules/esnext.string.cooked.js"],"sourcesContent":["var $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toString = require('../internals/to-string');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar $TypeError = TypeError;\nvar ArrayPrototype = Array.prototype;\nvar push = uncurryThis(ArrayPrototype.push);\nvar join = uncurryThis(ArrayPrototype.join);\n\n// `String.cooked` method\n// https://github.com/tc39/proposal-string-cooked\n$({ target: 'String', stat: true, forced: true }, {\n  cooked: function cooked(template /* , ...substitutions */) {\n    var cookedTemplate = toIndexedObject(template);\n    var literalSegments = lengthOfArrayLike(cookedTemplate);\n    var argumentsLength = arguments.length;\n    var elements = [];\n    var i = 0;\n    while (literalSegments > i) {\n      var nextVal = cookedTemplate[i++];\n      if (nextVal === undefined) throw $TypeError('Incorrect template');\n      push(elements, toString(nextVal));\n      if (i === literalSegments) return join(elements, '');\n      if (i < argumentsLength) push(elements, toString(arguments[i]));\n    }\n  }\n});\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,oCAAD,CAAzB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,gCAAD,CAA7B;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,mCAAD,CAA/B;;AAEA,IAAIK,UAAU,GAAGC,SAAjB;AACA,IAAIC,cAAc,GAAGC,KAAK,CAACC,SAA3B;AACA,IAAIC,IAAI,GAAGT,WAAW,CAACM,cAAc,CAACG,IAAhB,CAAtB;AACA,IAAIC,IAAI,GAAGV,WAAW,CAACM,cAAc,CAACI,IAAhB,CAAtB,C,CAEA;AACA;;AACAZ,CAAC,CAAC;EAAEa,MAAM,EAAE,QAAV;EAAoBC,IAAI,EAAE,IAA1B;EAAgCC,MAAM,EAAE;AAAxC,CAAD,EAAiD;EAChDC,MAAM,EAAE,SAASA,MAAT,CAAgBC;EAAS;EAAzB,EAAmD;IACzD,IAAIC,cAAc,GAAGf,eAAe,CAACc,QAAD,CAApC;IACA,IAAIE,eAAe,GAAGd,iBAAiB,CAACa,cAAD,CAAvC;IACA,IAAIE,eAAe,GAAGC,SAAS,CAACC,MAAhC;IACA,IAAIC,QAAQ,GAAG,EAAf;IACA,IAAIC,CAAC,GAAG,CAAR;;IACA,OAAOL,eAAe,GAAGK,CAAzB,EAA4B;MAC1B,IAAIC,OAAO,GAAGP,cAAc,CAACM,CAAC,EAAF,CAA5B;MACA,IAAIC,OAAO,KAAKC,SAAhB,EAA2B,MAAMpB,UAAU,CAAC,oBAAD,CAAhB;MAC3BK,IAAI,CAACY,QAAD,EAAWnB,QAAQ,CAACqB,OAAD,CAAnB,CAAJ;MACA,IAAID,CAAC,KAAKL,eAAV,EAA2B,OAAOP,IAAI,CAACW,QAAD,EAAW,EAAX,CAAX;MAC3B,IAAIC,CAAC,GAAGJ,eAAR,EAAyBT,IAAI,CAACY,QAAD,EAAWnB,QAAQ,CAACiB,SAAS,CAACG,CAAD,CAAV,CAAnB,CAAJ;IAC1B;EACF;AAd+C,CAAjD,CAAD"},"metadata":{},"sourceType":"script"}