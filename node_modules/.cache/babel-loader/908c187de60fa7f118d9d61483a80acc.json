{"ast":null,"code":"'use strict';\n\nvar _moduleVisitor = require('eslint-module-utils/moduleVisitor');\n\nvar _moduleVisitor2 = _interopRequireDefault(_moduleVisitor);\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nvar _path = require('path');\n\nvar _resolve = require('eslint-module-utils/resolve');\n\nvar _resolve2 = _interopRequireDefault(_resolve);\n\nvar _importType = require('../core/importType');\n\nvar _importType2 = _interopRequireDefault(_importType);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: (0, _docsUrl2['default'])('no-relative-parent-imports')\n    },\n    schema: [(0, _moduleVisitor.makeOptionsSchema)()]\n  },\n  create: function () {\n    function noRelativePackages(context) {\n      var myPath = context.getPhysicalFilename ? context.getPhysicalFilename() : context.getFilename();\n      if (myPath === '<text>') return {}; // can't check a non-file\n\n      function checkSourceValue(sourceNode) {\n        var depPath = sourceNode.value;\n\n        if ((0, _importType2['default'])(depPath, context) === 'external') {\n          // ignore packages\n          return;\n        }\n\n        var absDepPath = (0, _resolve2['default'])(depPath, context);\n\n        if (!absDepPath) {\n          // unable to resolve path\n          return;\n        }\n\n        var relDepPath = (0, _path.relative)((0, _path.dirname)(myPath), absDepPath);\n\n        if ((0, _importType2['default'])(relDepPath, context) === 'parent') {\n          context.report({\n            node: sourceNode,\n            message: 'Relative imports from parent directories are not allowed. ' + 'Please either pass what you\\'re importing through at runtime ' + ('(dependency injection), move `' + String((0, _path.basename)(myPath)) + '` to same ') + ('directory as `' + String(depPath) + '` or consider making `' + String(depPath) + '` a package.')\n          });\n        }\n      }\n\n      return (0, _moduleVisitor2['default'])(checkSourceValue, context.options[0]);\n    }\n\n    return noRelativePackages;\n  }()\n};","map":{"version":3,"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AAEA;;;;;;;;;;AAEAA,OAAOC,OAAPD,GAAiB;EACfE,MAAM;IACJC,MAAM,YADF;IAEJC,MAAM;MACJC,KAAK,0BAAQ,4BAAR;IADD,CAFF;IAKJC,QAAQ,CAAC,uCAAD;EALJ,CADS;EASfC;IAAQ,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;MAC3C,IAAMC,SAASD,QAAQE,mBAARF,GAA8BA,QAAQE,mBAARF,EAA9BA,GAA8DA,QAAQG,WAARH,EAA7E;MACA,IAAIC,WAAW,QAAf,EAAyB,OAAO,EAAP,CAFkB,CAEP;;MAEpC,SAASG,gBAAT,CAA0BC,UAA1B,EAAsC;QACpC,IAAMC,UAAUD,WAAWE,KAA3B;;QAEA,IAAI,6BAAWD,OAAX,EAAoBN,OAApB,MAAiC,UAArC,EAAiD;UAAE;UACjD;QACD;;QAED,IAAMQ,aAAa,0BAAQF,OAAR,EAAiBN,OAAjB,CAAnB;;QAEA,IAAI,CAACQ,UAAL,EAAiB;UAAE;UACjB;QACD;;QAED,IAAMC,aAAa,oBAAS,mBAAQR,MAAR,CAAT,EAA0BO,UAA1B,CAAnB;;QAEA,IAAI,6BAAWC,UAAX,EAAuBT,OAAvB,MAAoC,QAAxC,EAAkD;UAChDA,QAAQU,MAARV,CAAe;YACbW,MAAMN,UADO;YAEbO,SAAS,4KAE2B,oBAASX,MAAT,CAF3B,+CAGWK,OAHX,sCAG6CA,OAH7C;UAFI,CAAfN;QAOD;MACF;;MAED,OAAO,gCAAcI,gBAAd,EAAgCJ,QAAQa,OAARb,CAAgB,CAAhBA,CAAhC,CAAP;IA9BF;;IAAA,OAAiBD,kBAAjB;EAAA;AATe,CAAjBR","names":["module","exports","meta","type","docs","url","schema","create","noRelativePackages","context","myPath","getPhysicalFilename","getFilename","checkSourceValue","sourceNode","depPath","value","absDepPath","relDepPath","report","node","message","options"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\no-relative-parent-imports.js"],"sourcesContent":["import moduleVisitor, { makeOptionsSchema } from 'eslint-module-utils/moduleVisitor';\nimport docsUrl from '../docsUrl';\nimport { basename, dirname, relative } from 'path';\nimport resolve from 'eslint-module-utils/resolve';\n\nimport importType from '../core/importType';\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: docsUrl('no-relative-parent-imports'),\n    },\n    schema: [makeOptionsSchema()],\n  },\n\n  create: function noRelativePackages(context) {\n    const myPath = context.getPhysicalFilename ? context.getPhysicalFilename() : context.getFilename();\n    if (myPath === '<text>') return {}; // can't check a non-file\n\n    function checkSourceValue(sourceNode) {\n      const depPath = sourceNode.value;\n\n      if (importType(depPath, context) === 'external') { // ignore packages\n        return;\n      }\n\n      const absDepPath = resolve(depPath, context);\n\n      if (!absDepPath) { // unable to resolve path\n        return;\n      }\n\n      const relDepPath = relative(dirname(myPath), absDepPath);\n\n      if (importType(relDepPath, context) === 'parent') {\n        context.report({\n          node: sourceNode,\n          message: 'Relative imports from parent directories are not allowed. ' +\n            `Please either pass what you're importing through at runtime ` +\n            `(dependency injection), move \\`${basename(myPath)}\\` to same ` +\n            `directory as \\`${depPath}\\` or consider making \\`${depPath}\\` a package.`,\n        });\n      }\n    }\n\n    return moduleVisitor(checkSourceValue, context.options[0]);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}