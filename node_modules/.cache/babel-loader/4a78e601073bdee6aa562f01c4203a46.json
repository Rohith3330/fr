{"ast":null,"code":"import defineProvider from '@babel/helper-define-polyfill-provider';\nconst runtimeCompat = \"#__secret_key__@babel/runtime__compatibility\";\nvar index = defineProvider((_ref, options) => {\n  let {\n    debug,\n    targets,\n    babel\n  } = _ref;\n\n  if (!shallowEqual(targets, babel.targets())) {\n    throw new Error(\"This plugin does not use the targets option. Only preset-env's targets\" + \" or top-level targets need to be configured for this plugin to work.\" + \" See https://github.com/babel/babel-polyfills/issues/36 for more\" + \" details.\");\n  }\n\n  const {\n    [runtimeCompat]: {\n      useBabelRuntime\n    } = {\n      useBabelRuntime: \"\"\n    }\n  } = options;\n  const pureName = useBabelRuntime ? `${useBabelRuntime}/regenerator` : \"regenerator-runtime\";\n  return {\n    name: \"regenerator\",\n    polyfills: [\"regenerator-runtime\"],\n\n    usageGlobal(meta, utils) {\n      if (isRegenerator(meta)) {\n        debug(\"regenerator-runtime\");\n        utils.injectGlobalImport(\"regenerator-runtime/runtime.js\");\n      }\n    },\n\n    usagePure(meta, utils, path) {\n      if (isRegenerator(meta)) {\n        path.replaceWith(utils.injectDefaultImport(pureName, \"regenerator-runtime\"));\n      }\n    }\n\n  };\n});\n\nconst isRegenerator = meta => meta.kind === \"global\" && meta.name === \"regeneratorRuntime\";\n\nfunction shallowEqual(obj1, obj2) {\n  return JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\nexport default index;","map":{"version":3,"mappings":";AAEA,MAAMA,aAAa,GAAG,8CAAtB;AAQA,YAAeC,cAAc,CAAU,OAA4BC,OAA5B,KAAwC;EAAA,IAAvC;IAAEC,KAAF;IAASC,OAAT;IAAkBC;EAAlB,CAAuC;;EAC7E,IAAI,CAACC,YAAY,CAACF,OAAD,EAAUC,KAAK,CAACD,OAANC,EAAV,CAAjB,EAA6C;IAC3C,MAAM,IAAIE,KAAJ,CACJ,2EACE,sEADF,GAEE,kEAFF,GAGE,WAJE,CAAN;;;EAQF,MAAM;IAAE,CAACP,aAAD,GAAiB;MAAEQ;IAAF,IAAsB;MAAEA,eAAe,EAAE;IAAnB;EAAzC,IACJN,OADF;EAGA,MAAMO,QAAQ,GAAGD,eAAe,GAC3B,GAAEA,eAAgB,cADS,GAE5B,qBAFJ;EAIA,OAAO;IACLE,IAAI,EAAE,aADD;IAGLC,SAAS,EAAE,CAAC,qBAAD,CAHN;;IAKLC,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAc;MACvB,IAAIC,aAAa,CAACF,IAAD,CAAjB,EAAyB;QACvBV,KAAK,CAAC,qBAAD,CAALA;QACAW,KAAK,CAACE,kBAANF,CAAyB,gCAAzBA;;IARC;;IAWLG,SAAS,CAACJ,IAAD,EAAOC,KAAP,EAAcI,IAAd,EAAoB;MAC3B,IAAIH,aAAa,CAACF,IAAD,CAAjB,EAAyB;QACvBK,IAAI,CAACC,WAALD,CACEJ,KAAK,CAACM,mBAANN,CAA0BL,QAA1BK,EAAoC,qBAApCA,CADFI;;;;EAbC,CAAP;AAjB2B,EAA7B;;AAsCA,MAAMH,aAAa,GAAGF,IAAI,IACxBA,IAAI,CAACQ,IAALR,KAAc,QAAdA,IAA0BA,IAAI,CAACH,IAALG,KAAc,oBAD1C;;AAGA,SAASP,YAAT,CAAsBgB,IAAtB,EAAiCC,IAAjC,EAA4C;EAC1C,OAAOC,IAAI,CAACC,SAALD,CAAeF,IAAfE,MAAyBA,IAAI,CAACC,SAALD,CAAeD,IAAfC,CAAhC;AACD","names":["runtimeCompat","defineProvider","options","debug","targets","babel","shallowEqual","Error","useBabelRuntime","pureName","name","polyfills","usageGlobal","meta","utils","isRegenerator","injectGlobalImport","usagePure","path","replaceWith","injectDefaultImport","kind","obj1","obj2","JSON","stringify"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\babel-plugin-polyfill-regenerator\\src\\index.ts"],"sourcesContent":["import defineProvider from \"@babel/helper-define-polyfill-provider\";\n\nconst runtimeCompat = \"#__secret_key__@babel/runtime__compatibility\";\n\ntype Options = {\n  \"#__secret_key__@babel/runtime__compatibility\": void | {\n    useBabelRuntime: string;\n  };\n};\n\nexport default defineProvider<Options>(({ debug, targets, babel }, options) => {\n  if (!shallowEqual(targets, babel.targets())) {\n    throw new Error(\n      \"This plugin does not use the targets option. Only preset-env's targets\" +\n        \" or top-level targets need to be configured for this plugin to work.\" +\n        \" See https://github.com/babel/babel-polyfills/issues/36 for more\" +\n        \" details.\",\n    );\n  }\n\n  const { [runtimeCompat]: { useBabelRuntime } = { useBabelRuntime: \"\" } } =\n    options;\n\n  const pureName = useBabelRuntime\n    ? `${useBabelRuntime}/regenerator`\n    : \"regenerator-runtime\";\n\n  return {\n    name: \"regenerator\",\n\n    polyfills: [\"regenerator-runtime\"],\n\n    usageGlobal(meta, utils) {\n      if (isRegenerator(meta)) {\n        debug(\"regenerator-runtime\");\n        utils.injectGlobalImport(\"regenerator-runtime/runtime.js\");\n      }\n    },\n    usagePure(meta, utils, path) {\n      if (isRegenerator(meta)) {\n        path.replaceWith(\n          utils.injectDefaultImport(pureName, \"regenerator-runtime\"),\n        );\n      }\n    },\n  };\n});\n\nconst isRegenerator = meta =>\n  meta.kind === \"global\" && meta.name === \"regeneratorRuntime\";\n\nfunction shallowEqual(obj1: any, obj2: any) {\n  return JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n"]},"metadata":{},"sourceType":"module"}