{"ast":null,"code":"/**\n * @fileoverview Rule to flag on declaring variables already declared in the outer scope\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst FUNC_EXPR_NODE_TYPES = new Set([\"ArrowFunctionExpression\", \"FunctionExpression\"]);\nconst CALL_EXPR_NODE_TYPE = new Set([\"CallExpression\"]);\nconst FOR_IN_OF_TYPE = /^For(?:In|Of)Statement$/u;\nconst SENTINEL_TYPE = /^(?:(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|CatchClause|ImportDeclaration|ExportNamedDeclaration)$/u; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow variable declarations from shadowing variables declared in the outer scope\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-shadow\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        builtinGlobals: {\n          type: \"boolean\",\n          default: false\n        },\n        hoist: {\n          enum: [\"all\", \"functions\", \"never\"],\n          default: \"functions\"\n        },\n        allow: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        },\n        ignoreOnInitialization: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      noShadow: \"'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.\",\n      noShadowGlobal: \"'{{name}}' is already a global variable.\"\n    }\n  },\n\n  create(context) {\n    const options = {\n      builtinGlobals: context.options[0] && context.options[0].builtinGlobals,\n      hoist: context.options[0] && context.options[0].hoist || \"functions\",\n      allow: context.options[0] && context.options[0].allow || [],\n      ignoreOnInitialization: context.options[0] && context.options[0].ignoreOnInitialization\n    };\n    /**\n     * Checks whether or not a given location is inside of the range of a given node.\n     * @param {ASTNode} node An node to check.\n     * @param {number} location A location to check.\n     * @returns {boolean} `true` if the location is inside of the range of the node.\n     */\n\n    function isInRange(node, location) {\n      return node && node.range[0] <= location && location <= node.range[1];\n    }\n    /**\n     * Searches from the current node through its ancestry to find a matching node.\n     * @param {ASTNode} node a node to get.\n     * @param {(node: ASTNode) => boolean} match a callback that checks whether or not the node verifies its condition or not.\n     * @returns {ASTNode|null} the matching node.\n     */\n\n\n    function findSelfOrAncestor(node, match) {\n      let currentNode = node;\n\n      while (currentNode && !match(currentNode)) {\n        currentNode = currentNode.parent;\n      }\n\n      return currentNode;\n    }\n    /**\n     * Finds function's outer scope.\n     * @param {Scope} scope Function's own scope.\n     * @returns {Scope} Function's outer scope.\n     */\n\n\n    function getOuterScope(scope) {\n      const upper = scope.upper;\n\n      if (upper.type === \"function-expression-name\") {\n        return upper.upper;\n      }\n\n      return upper;\n    }\n    /**\n     * Checks if a variable and a shadowedVariable have the same init pattern ancestor.\n     * @param {Object} variable a variable to check.\n     * @param {Object} shadowedVariable a shadowedVariable to check.\n     * @returns {boolean} Whether or not the variable and the shadowedVariable have the same init pattern ancestor.\n     */\n\n\n    function isInitPatternNode(variable, shadowedVariable) {\n      const outerDef = shadowedVariable.defs[0];\n\n      if (!outerDef) {\n        return false;\n      }\n\n      const {\n        variableScope\n      } = variable.scope;\n\n      if (!(FUNC_EXPR_NODE_TYPES.has(variableScope.block.type) && getOuterScope(variableScope) === shadowedVariable.scope)) {\n        return false;\n      }\n\n      const fun = variableScope.block;\n      const {\n        parent\n      } = fun;\n      const callExpression = findSelfOrAncestor(parent, node => CALL_EXPR_NODE_TYPE.has(node.type));\n\n      if (!callExpression) {\n        return false;\n      }\n\n      let node = outerDef.name;\n      const location = callExpression.range[1];\n\n      while (node) {\n        if (node.type === \"VariableDeclarator\") {\n          if (isInRange(node.init, location)) {\n            return true;\n          }\n\n          if (FOR_IN_OF_TYPE.test(node.parent.parent.type) && isInRange(node.parent.parent.right, location)) {\n            return true;\n          }\n\n          break;\n        } else if (node.type === \"AssignmentPattern\") {\n          if (isInRange(node.right, location)) {\n            return true;\n          }\n        } else if (SENTINEL_TYPE.test(node.type)) {\n          break;\n        }\n\n        node = node.parent;\n      }\n\n      return false;\n    }\n    /**\n     * Check if variable name is allowed.\n     * @param {ASTNode} variable The variable to check.\n     * @returns {boolean} Whether or not the variable name is allowed.\n     */\n\n\n    function isAllowed(variable) {\n      return options.allow.includes(variable.name);\n    }\n    /**\n     * Checks if a variable of the class name in the class scope of ClassDeclaration.\n     *\n     * ClassDeclaration creates two variables of its name into its outer scope and its class scope.\n     * So we should ignore the variable in the class scope.\n     * @param {Object} variable The variable to check.\n     * @returns {boolean} Whether or not the variable of the class name in the class scope of ClassDeclaration.\n     */\n\n\n    function isDuplicatedClassNameVariable(variable) {\n      const block = variable.scope.block;\n      return block.type === \"ClassDeclaration\" && block.id === variable.identifiers[0];\n    }\n    /**\n     * Checks if a variable is inside the initializer of scopeVar.\n     *\n     * To avoid reporting at declarations such as `var a = function a() {};`.\n     * But it should report `var a = function(a) {};` or `var a = function() { function a() {} };`.\n     * @param {Object} variable The variable to check.\n     * @param {Object} scopeVar The scope variable to look for.\n     * @returns {boolean} Whether or not the variable is inside initializer of scopeVar.\n     */\n\n\n    function isOnInitializer(variable, scopeVar) {\n      const outerScope = scopeVar.scope;\n      const outerDef = scopeVar.defs[0];\n      const outer = outerDef && outerDef.parent && outerDef.parent.range;\n      const innerScope = variable.scope;\n      const innerDef = variable.defs[0];\n      const inner = innerDef && innerDef.name.range;\n      return outer && inner && outer[0] < inner[0] && inner[1] < outer[1] && (innerDef.type === \"FunctionName\" && innerDef.node.type === \"FunctionExpression\" || innerDef.node.type === \"ClassExpression\") && outerScope === innerScope.upper;\n    }\n    /**\n     * Get a range of a variable's identifier node.\n     * @param {Object} variable The variable to get.\n     * @returns {Array|undefined} The range of the variable's identifier node.\n     */\n\n\n    function getNameRange(variable) {\n      const def = variable.defs[0];\n      return def && def.name.range;\n    }\n    /**\n     * Get declared line and column of a variable.\n     * @param {eslint-scope.Variable} variable The variable to get.\n     * @returns {Object} The declared line and column of the variable.\n     */\n\n\n    function getDeclaredLocation(variable) {\n      const identifier = variable.identifiers[0];\n      let obj;\n\n      if (identifier) {\n        obj = {\n          global: false,\n          line: identifier.loc.start.line,\n          column: identifier.loc.start.column + 1\n        };\n      } else {\n        obj = {\n          global: true\n        };\n      }\n\n      return obj;\n    }\n    /**\n     * Checks if a variable is in TDZ of scopeVar.\n     * @param {Object} variable The variable to check.\n     * @param {Object} scopeVar The variable of TDZ.\n     * @returns {boolean} Whether or not the variable is in TDZ of scopeVar.\n     */\n\n\n    function isInTdz(variable, scopeVar) {\n      const outerDef = scopeVar.defs[0];\n      const inner = getNameRange(variable);\n      const outer = getNameRange(scopeVar);\n      return inner && outer && inner[1] < outer[0] && ( // Excepts FunctionDeclaration if is {\"hoist\":\"function\"}.\n      options.hoist !== \"functions\" || !outerDef || outerDef.node.type !== \"FunctionDeclaration\");\n    }\n    /**\n     * Checks the current context for shadowed variables.\n     * @param {Scope} scope Fixme\n     * @returns {void}\n     */\n\n\n    function checkForShadows(scope) {\n      const variables = scope.variables;\n\n      for (let i = 0; i < variables.length; ++i) {\n        const variable = variables[i]; // Skips \"arguments\" or variables of a class name in the class scope of ClassDeclaration.\n\n        if (variable.identifiers.length === 0 || isDuplicatedClassNameVariable(variable) || isAllowed(variable)) {\n          continue;\n        } // Gets shadowed variable.\n\n\n        const shadowed = astUtils.getVariableByName(scope.upper, variable.name);\n\n        if (shadowed && (shadowed.identifiers.length > 0 || options.builtinGlobals && \"writeable\" in shadowed) && !isOnInitializer(variable, shadowed) && !(options.ignoreOnInitialization && isInitPatternNode(variable, shadowed)) && !(options.hoist !== \"all\" && isInTdz(variable, shadowed))) {\n          const location = getDeclaredLocation(shadowed);\n          const messageId = location.global ? \"noShadowGlobal\" : \"noShadow\";\n          const data = {\n            name: variable.name\n          };\n\n          if (!location.global) {\n            data.shadowedLine = location.line;\n            data.shadowedColumn = location.column;\n          }\n\n          context.report({\n            node: variable.identifiers[0],\n            messageId,\n            data\n          });\n        }\n      }\n    }\n\n    return {\n      \"Program:exit\"() {\n        const globalScope = context.getScope();\n        const stack = globalScope.childScopes.slice();\n\n        while (stack.length) {\n          const scope = stack.pop();\n          stack.push(...scope.childScopes);\n          checkForShadows(scope);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","FUNC_EXPR_NODE_TYPES","Set","CALL_EXPR_NODE_TYPE","FOR_IN_OF_TYPE","SENTINEL_TYPE","module","exports","meta","type","docs","description","recommended","url","schema","properties","builtinGlobals","default","hoist","enum","allow","items","ignoreOnInitialization","additionalProperties","messages","noShadow","noShadowGlobal","create","context","options","isInRange","node","location","range","findSelfOrAncestor","match","currentNode","parent","getOuterScope","scope","upper","isInitPatternNode","variable","shadowedVariable","outerDef","defs","variableScope","has","block","fun","callExpression","name","init","test","right","isAllowed","includes","isDuplicatedClassNameVariable","id","identifiers","isOnInitializer","scopeVar","outerScope","outer","innerScope","innerDef","inner","getNameRange","def","getDeclaredLocation","identifier","obj","global","line","loc","start","column","isInTdz","checkForShadows","variables","i","length","shadowed","getVariableByName","messageId","data","shadowedLine","shadowedColumn","report","globalScope","getScope","stack","childScopes","slice","pop","push"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-shadow.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag on declaring variables already declared in the outer scope\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst FUNC_EXPR_NODE_TYPES = new Set([\"ArrowFunctionExpression\", \"FunctionExpression\"]);\nconst CALL_EXPR_NODE_TYPE = new Set([\"CallExpression\"]);\nconst FOR_IN_OF_TYPE = /^For(?:In|Of)Statement$/u;\nconst SENTINEL_TYPE = /^(?:(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|CatchClause|ImportDeclaration|ExportNamedDeclaration)$/u;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow variable declarations from shadowing variables declared in the outer scope\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-shadow\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    builtinGlobals: { type: \"boolean\", default: false },\n                    hoist: { enum: [\"all\", \"functions\", \"never\"], default: \"functions\" },\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        }\n                    },\n                    ignoreOnInitialization: { type: \"boolean\", default: false }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            noShadow: \"'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.\",\n            noShadowGlobal: \"'{{name}}' is already a global variable.\"\n        }\n    },\n\n    create(context) {\n\n        const options = {\n            builtinGlobals: context.options[0] && context.options[0].builtinGlobals,\n            hoist: (context.options[0] && context.options[0].hoist) || \"functions\",\n            allow: (context.options[0] && context.options[0].allow) || [],\n            ignoreOnInitialization: context.options[0] && context.options[0].ignoreOnInitialization\n        };\n\n        /**\n         * Checks whether or not a given location is inside of the range of a given node.\n         * @param {ASTNode} node An node to check.\n         * @param {number} location A location to check.\n         * @returns {boolean} `true` if the location is inside of the range of the node.\n         */\n        function isInRange(node, location) {\n            return node && node.range[0] <= location && location <= node.range[1];\n        }\n\n        /**\n         * Searches from the current node through its ancestry to find a matching node.\n         * @param {ASTNode} node a node to get.\n         * @param {(node: ASTNode) => boolean} match a callback that checks whether or not the node verifies its condition or not.\n         * @returns {ASTNode|null} the matching node.\n         */\n        function findSelfOrAncestor(node, match) {\n            let currentNode = node;\n\n            while (currentNode && !match(currentNode)) {\n                currentNode = currentNode.parent;\n            }\n            return currentNode;\n        }\n\n        /**\n         * Finds function's outer scope.\n         * @param {Scope} scope Function's own scope.\n         * @returns {Scope} Function's outer scope.\n         */\n        function getOuterScope(scope) {\n            const upper = scope.upper;\n\n            if (upper.type === \"function-expression-name\") {\n                return upper.upper;\n            }\n            return upper;\n        }\n\n        /**\n         * Checks if a variable and a shadowedVariable have the same init pattern ancestor.\n         * @param {Object} variable a variable to check.\n         * @param {Object} shadowedVariable a shadowedVariable to check.\n         * @returns {boolean} Whether or not the variable and the shadowedVariable have the same init pattern ancestor.\n         */\n        function isInitPatternNode(variable, shadowedVariable) {\n            const outerDef = shadowedVariable.defs[0];\n\n            if (!outerDef) {\n                return false;\n            }\n\n            const { variableScope } = variable.scope;\n\n\n            if (!(FUNC_EXPR_NODE_TYPES.has(variableScope.block.type) && getOuterScope(variableScope) === shadowedVariable.scope)) {\n                return false;\n            }\n\n            const fun = variableScope.block;\n            const { parent } = fun;\n\n            const callExpression = findSelfOrAncestor(\n                parent,\n                node => CALL_EXPR_NODE_TYPE.has(node.type)\n            );\n\n            if (!callExpression) {\n                return false;\n            }\n\n            let node = outerDef.name;\n            const location = callExpression.range[1];\n\n            while (node) {\n                if (node.type === \"VariableDeclarator\") {\n                    if (isInRange(node.init, location)) {\n                        return true;\n                    }\n                    if (FOR_IN_OF_TYPE.test(node.parent.parent.type) &&\n                        isInRange(node.parent.parent.right, location)\n                    ) {\n                        return true;\n                    }\n                    break;\n                } else if (node.type === \"AssignmentPattern\") {\n                    if (isInRange(node.right, location)) {\n                        return true;\n                    }\n                } else if (SENTINEL_TYPE.test(node.type)) {\n                    break;\n                }\n\n                node = node.parent;\n            }\n\n            return false;\n        }\n\n        /**\n         * Check if variable name is allowed.\n         * @param {ASTNode} variable The variable to check.\n         * @returns {boolean} Whether or not the variable name is allowed.\n         */\n        function isAllowed(variable) {\n            return options.allow.includes(variable.name);\n        }\n\n        /**\n         * Checks if a variable of the class name in the class scope of ClassDeclaration.\n         *\n         * ClassDeclaration creates two variables of its name into its outer scope and its class scope.\n         * So we should ignore the variable in the class scope.\n         * @param {Object} variable The variable to check.\n         * @returns {boolean} Whether or not the variable of the class name in the class scope of ClassDeclaration.\n         */\n        function isDuplicatedClassNameVariable(variable) {\n            const block = variable.scope.block;\n\n            return block.type === \"ClassDeclaration\" && block.id === variable.identifiers[0];\n        }\n\n        /**\n         * Checks if a variable is inside the initializer of scopeVar.\n         *\n         * To avoid reporting at declarations such as `var a = function a() {};`.\n         * But it should report `var a = function(a) {};` or `var a = function() { function a() {} };`.\n         * @param {Object} variable The variable to check.\n         * @param {Object} scopeVar The scope variable to look for.\n         * @returns {boolean} Whether or not the variable is inside initializer of scopeVar.\n         */\n        function isOnInitializer(variable, scopeVar) {\n            const outerScope = scopeVar.scope;\n            const outerDef = scopeVar.defs[0];\n            const outer = outerDef && outerDef.parent && outerDef.parent.range;\n            const innerScope = variable.scope;\n            const innerDef = variable.defs[0];\n            const inner = innerDef && innerDef.name.range;\n\n            return (\n                outer &&\n                 inner &&\n                 outer[0] < inner[0] &&\n                 inner[1] < outer[1] &&\n                 ((innerDef.type === \"FunctionName\" && innerDef.node.type === \"FunctionExpression\") || innerDef.node.type === \"ClassExpression\") &&\n                 outerScope === innerScope.upper\n            );\n        }\n\n        /**\n         * Get a range of a variable's identifier node.\n         * @param {Object} variable The variable to get.\n         * @returns {Array|undefined} The range of the variable's identifier node.\n         */\n        function getNameRange(variable) {\n            const def = variable.defs[0];\n\n            return def && def.name.range;\n        }\n\n        /**\n         * Get declared line and column of a variable.\n         * @param {eslint-scope.Variable} variable The variable to get.\n         * @returns {Object} The declared line and column of the variable.\n         */\n        function getDeclaredLocation(variable) {\n            const identifier = variable.identifiers[0];\n            let obj;\n\n            if (identifier) {\n                obj = {\n                    global: false,\n                    line: identifier.loc.start.line,\n                    column: identifier.loc.start.column + 1\n                };\n            } else {\n                obj = {\n                    global: true\n                };\n            }\n            return obj;\n        }\n\n        /**\n         * Checks if a variable is in TDZ of scopeVar.\n         * @param {Object} variable The variable to check.\n         * @param {Object} scopeVar The variable of TDZ.\n         * @returns {boolean} Whether or not the variable is in TDZ of scopeVar.\n         */\n        function isInTdz(variable, scopeVar) {\n            const outerDef = scopeVar.defs[0];\n            const inner = getNameRange(variable);\n            const outer = getNameRange(scopeVar);\n\n            return (\n                inner &&\n                 outer &&\n                 inner[1] < outer[0] &&\n\n                 // Excepts FunctionDeclaration if is {\"hoist\":\"function\"}.\n                 (options.hoist !== \"functions\" || !outerDef || outerDef.node.type !== \"FunctionDeclaration\")\n            );\n        }\n\n        /**\n         * Checks the current context for shadowed variables.\n         * @param {Scope} scope Fixme\n         * @returns {void}\n         */\n        function checkForShadows(scope) {\n            const variables = scope.variables;\n\n            for (let i = 0; i < variables.length; ++i) {\n                const variable = variables[i];\n\n                // Skips \"arguments\" or variables of a class name in the class scope of ClassDeclaration.\n                if (variable.identifiers.length === 0 ||\n                     isDuplicatedClassNameVariable(variable) ||\n                     isAllowed(variable)\n                ) {\n                    continue;\n                }\n\n                // Gets shadowed variable.\n                const shadowed = astUtils.getVariableByName(scope.upper, variable.name);\n\n                if (shadowed &&\n                      (shadowed.identifiers.length > 0 || (options.builtinGlobals && \"writeable\" in shadowed)) &&\n                      !isOnInitializer(variable, shadowed) &&\n                      !(options.ignoreOnInitialization && isInitPatternNode(variable, shadowed)) &&\n                      !(options.hoist !== \"all\" && isInTdz(variable, shadowed))\n                ) {\n                    const location = getDeclaredLocation(shadowed);\n                    const messageId = location.global ? \"noShadowGlobal\" : \"noShadow\";\n                    const data = { name: variable.name };\n\n                    if (!location.global) {\n                        data.shadowedLine = location.line;\n                        data.shadowedColumn = location.column;\n                    }\n                    context.report({\n                        node: variable.identifiers[0],\n                        messageId,\n                        data\n                    });\n                }\n            }\n        }\n\n        return {\n            \"Program:exit\"() {\n                const globalScope = context.getScope();\n                const stack = globalScope.childScopes.slice();\n\n                while (stack.length) {\n                    const scope = stack.pop();\n\n                    stack.push(...scope.childScopes);\n                    checkForShadows(scope);\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}