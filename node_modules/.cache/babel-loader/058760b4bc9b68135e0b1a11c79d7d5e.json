{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar HasOwnProperty = require('./HasOwnProperty');\n\nvar ToNumeric = require('./ToNumeric');\n\nvar ToPrimitive = require('./ToPrimitive');\n\nvar ToString = require('./ToString');\n\nvar Type = require('./Type');\n\nvar NumberAdd = require('./Number/add');\n\nvar NumberBitwiseAND = require('./Number/bitwiseAND');\n\nvar NumberBitwiseOR = require('./Number/bitwiseOR');\n\nvar NumberBitwiseXOR = require('./Number/bitwiseXOR');\n\nvar NumberDivide = require('./Number/divide');\n\nvar NumberExponentiate = require('./Number/exponentiate');\n\nvar NumberLeftShift = require('./Number/leftShift');\n\nvar NumberMultiply = require('./Number/multiply');\n\nvar NumberRemainder = require('./Number/remainder');\n\nvar NumberSignedRightShift = require('./Number/signedRightShift');\n\nvar NumberSubtract = require('./Number/subtract');\n\nvar NumberUnsignedRightShift = require('./Number/unsignedRightShift');\n\nvar BigIntAdd = require('./BigInt/add');\n\nvar BigIntBitwiseAND = require('./BigInt/bitwiseAND');\n\nvar BigIntBitwiseOR = require('./BigInt/bitwiseOR');\n\nvar BigIntBitwiseXOR = require('./BigInt/bitwiseXOR');\n\nvar BigIntDivide = require('./BigInt/divide');\n\nvar BigIntExponentiate = require('./BigInt/exponentiate');\n\nvar BigIntLeftShift = require('./BigInt/leftShift');\n\nvar BigIntMultiply = require('./BigInt/multiply');\n\nvar BigIntRemainder = require('./BigInt/remainder');\n\nvar BigIntSignedRightShift = require('./BigInt/signedRightShift');\n\nvar BigIntSubtract = require('./BigInt/subtract');\n\nvar BigIntUnsignedRightShift = require('./BigInt/unsignedRightShift'); // https://ecma-international.org/ecma-262/12.0/#sec-applystringornumericbinaryoperator\n// https://ecma-international.org/ecma-262/12.0/#step-applystringornumericbinaryoperator-operations-table\n\n\nvar table = {\n  '**': [NumberExponentiate, BigIntExponentiate],\n  '*': [NumberMultiply, BigIntMultiply],\n  '/': [NumberDivide, BigIntDivide],\n  '%': [NumberRemainder, BigIntRemainder],\n  '+': [NumberAdd, BigIntAdd],\n  '-': [NumberSubtract, BigIntSubtract],\n  '<<': [NumberLeftShift, BigIntLeftShift],\n  '>>': [NumberSignedRightShift, BigIntSignedRightShift],\n  '>>>': [NumberUnsignedRightShift, BigIntUnsignedRightShift],\n  '&': [NumberBitwiseAND, BigIntBitwiseAND],\n  '^': [NumberBitwiseXOR, BigIntBitwiseXOR],\n  '|': [NumberBitwiseOR, BigIntBitwiseOR]\n};\n\nmodule.exports = function ApplyStringOrNumericBinaryOperator(lval, opText, rval) {\n  if (Type(opText) !== 'String' || !HasOwnProperty(table, opText)) {\n    throw new $TypeError('Assertion failed: `opText` must be a valid operation string');\n  }\n\n  if (opText === '+') {\n    var lprim = ToPrimitive(lval);\n    var rprim = ToPrimitive(rval);\n\n    if (Type(lprim) === 'String' || Type(rprim) === 'String') {\n      var lstr = ToString(lprim);\n      var rstr = ToString(rprim);\n      return lstr + rstr;\n    }\n    /* eslint no-param-reassign: 1 */\n\n\n    lval = lprim;\n    rval = rprim;\n  }\n\n  var lnum = ToNumeric(lval);\n  var rnum = ToNumeric(rval);\n  var T = Type(lnum);\n\n  if (T !== Type(rnum)) {\n    throw new $TypeError('types of ' + lnum + ' and ' + rnum + ' differ');\n  }\n\n  var Operation = table[opText][T === 'BigInt' ? 1 : 0];\n  return Operation(lnum, rnum);\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","HasOwnProperty","ToNumeric","ToPrimitive","ToString","Type","NumberAdd","NumberBitwiseAND","NumberBitwiseOR","NumberBitwiseXOR","NumberDivide","NumberExponentiate","NumberLeftShift","NumberMultiply","NumberRemainder","NumberSignedRightShift","NumberSubtract","NumberUnsignedRightShift","BigIntAdd","BigIntBitwiseAND","BigIntBitwiseOR","BigIntBitwiseXOR","BigIntDivide","BigIntExponentiate","BigIntLeftShift","BigIntMultiply","BigIntRemainder","BigIntSignedRightShift","BigIntSubtract","BigIntUnsignedRightShift","table","module","exports","ApplyStringOrNumericBinaryOperator","lval","opText","rval","lprim","rprim","lstr","rstr","lnum","rnum","T","Operation"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2022/ApplyStringOrNumericBinaryOperator.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar HasOwnProperty = require('./HasOwnProperty');\nvar ToNumeric = require('./ToNumeric');\nvar ToPrimitive = require('./ToPrimitive');\nvar ToString = require('./ToString');\nvar Type = require('./Type');\n\nvar NumberAdd = require('./Number/add');\nvar NumberBitwiseAND = require('./Number/bitwiseAND');\nvar NumberBitwiseOR = require('./Number/bitwiseOR');\nvar NumberBitwiseXOR = require('./Number/bitwiseXOR');\nvar NumberDivide = require('./Number/divide');\nvar NumberExponentiate = require('./Number/exponentiate');\nvar NumberLeftShift = require('./Number/leftShift');\nvar NumberMultiply = require('./Number/multiply');\nvar NumberRemainder = require('./Number/remainder');\nvar NumberSignedRightShift = require('./Number/signedRightShift');\nvar NumberSubtract = require('./Number/subtract');\nvar NumberUnsignedRightShift = require('./Number/unsignedRightShift');\nvar BigIntAdd = require('./BigInt/add');\nvar BigIntBitwiseAND = require('./BigInt/bitwiseAND');\nvar BigIntBitwiseOR = require('./BigInt/bitwiseOR');\nvar BigIntBitwiseXOR = require('./BigInt/bitwiseXOR');\nvar BigIntDivide = require('./BigInt/divide');\nvar BigIntExponentiate = require('./BigInt/exponentiate');\nvar BigIntLeftShift = require('./BigInt/leftShift');\nvar BigIntMultiply = require('./BigInt/multiply');\nvar BigIntRemainder = require('./BigInt/remainder');\nvar BigIntSignedRightShift = require('./BigInt/signedRightShift');\nvar BigIntSubtract = require('./BigInt/subtract');\nvar BigIntUnsignedRightShift = require('./BigInt/unsignedRightShift');\n\n// https://ecma-international.org/ecma-262/12.0/#sec-applystringornumericbinaryoperator\n\n// https://ecma-international.org/ecma-262/12.0/#step-applystringornumericbinaryoperator-operations-table\nvar table = {\n\t'**': [NumberExponentiate, BigIntExponentiate],\n\t'*': [NumberMultiply, BigIntMultiply],\n\t'/': [NumberDivide, BigIntDivide],\n\t'%': [NumberRemainder, BigIntRemainder],\n\t'+': [NumberAdd, BigIntAdd],\n\t'-': [NumberSubtract, BigIntSubtract],\n\t'<<': [NumberLeftShift, BigIntLeftShift],\n\t'>>': [NumberSignedRightShift, BigIntSignedRightShift],\n\t'>>>': [NumberUnsignedRightShift, BigIntUnsignedRightShift],\n\t'&': [NumberBitwiseAND, BigIntBitwiseAND],\n\t'^': [NumberBitwiseXOR, BigIntBitwiseXOR],\n\t'|': [NumberBitwiseOR, BigIntBitwiseOR]\n};\n\nmodule.exports = function ApplyStringOrNumericBinaryOperator(lval, opText, rval) {\n\tif (Type(opText) !== 'String' || !HasOwnProperty(table, opText)) {\n\t\tthrow new $TypeError('Assertion failed: `opText` must be a valid operation string');\n\t}\n\tif (opText === '+') {\n\t\tvar lprim = ToPrimitive(lval);\n\t\tvar rprim = ToPrimitive(rval);\n\t\tif (Type(lprim) === 'String' || Type(rprim) === 'String') {\n\t\t\tvar lstr = ToString(lprim);\n\t\t\tvar rstr = ToString(rprim);\n\t\t\treturn lstr + rstr;\n\t\t}\n\t\t/* eslint no-param-reassign: 1 */\n\t\tlval = lprim;\n\t\trval = rprim;\n\t}\n\tvar lnum = ToNumeric(lval);\n\tvar rnum = ToNumeric(rval);\n\tvar T = Type(lnum);\n\tif (T !== Type(rnum)) {\n\t\tthrow new $TypeError('types of ' + lnum + ' and ' + rnum + ' differ');\n\t}\n\tvar Operation = table[opText][T === 'BigInt' ? 1 : 0];\n\treturn Operation(lnum, rnum);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}