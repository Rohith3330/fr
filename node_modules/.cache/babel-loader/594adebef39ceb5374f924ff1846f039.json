{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nconst hasStringAsFirstArgument = node => node.arguments[0] && (0, _utils.isStringNode)(node.arguments[0]);\n\nconst findNodeNameAndArgument = node => {\n  if (!((0, _utils.isTestCaseCall)(node) || (0, _utils.isDescribeCall)(node))) {\n    return null;\n  }\n\n  if (!hasStringAsFirstArgument(node)) {\n    return null;\n  }\n\n  return [(0, _utils.getNodeName)(node).split('.')[0], node.arguments[0]];\n};\n\nconst populateIgnores = ignore => {\n  const ignores = [];\n\n  if (ignore.includes(_utils.DescribeAlias.describe)) {\n    ignores.push(...Object.keys(_utils.DescribeAlias));\n  }\n\n  if (ignore.includes(_utils.TestCaseName.test)) {\n    ignores.push(...Object.keys(_utils.TestCaseName).filter(k => k.endsWith(_utils.TestCaseName.test)));\n  }\n\n  if (ignore.includes(_utils.TestCaseName.it)) {\n    ignores.push(...Object.keys(_utils.TestCaseName).filter(k => k.endsWith(_utils.TestCaseName.it)));\n  }\n\n  return ignores;\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Enforce lowercase test names',\n      category: 'Best Practices',\n      recommended: false\n    },\n    fixable: 'code',\n    messages: {\n      unexpectedLowercase: '`{{ method }}`s should begin with lowercase'\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        ignore: {\n          type: 'array',\n          items: {\n            enum: [_utils.DescribeAlias.describe, _utils.TestCaseName.test, _utils.TestCaseName.it]\n          },\n          additionalItems: false\n        },\n        allowedPrefixes: {\n          type: 'array',\n          items: {\n            type: 'string'\n          },\n          additionalItems: false\n        },\n        ignoreTopLevelDescribe: {\n          type: 'boolean',\n          default: false\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{\n    ignore: [],\n    allowedPrefixes: [],\n    ignoreTopLevelDescribe: false\n  }],\n\n  create(context, _ref) {\n    let [{\n      ignore = [],\n      allowedPrefixes = [],\n      ignoreTopLevelDescribe\n    }] = _ref;\n    const ignores = populateIgnores(ignore);\n    let numberOfDescribeBlocks = 0;\n    return {\n      CallExpression(node) {\n        if ((0, _utils.isDescribeCall)(node)) {\n          numberOfDescribeBlocks++;\n\n          if (ignoreTopLevelDescribe && numberOfDescribeBlocks === 1) {\n            return;\n          }\n        }\n\n        const results = findNodeNameAndArgument(node);\n\n        if (!results) {\n          return;\n        }\n\n        const [name, firstArg] = results;\n        const description = (0, _utils.getStringValue)(firstArg);\n\n        if (allowedPrefixes.some(name => description.startsWith(name))) {\n          return;\n        }\n\n        const firstCharacter = description.charAt(0);\n\n        if (!firstCharacter || firstCharacter === firstCharacter.toLowerCase() || ignores.includes(name)) {\n          return;\n        }\n\n        context.report({\n          messageId: 'unexpectedLowercase',\n          node: node.arguments[0],\n          data: {\n            method: name\n          },\n\n          fix(fixer) {\n            const description = (0, _utils.getStringValue)(firstArg);\n            const rangeIgnoringQuotes = [firstArg.range[0] + 1, firstArg.range[1] - 1];\n            const newDescription = description.substring(0, 1).toLowerCase() + description.substring(1);\n            return [fixer.replaceTextRange(rangeIgnoringQuotes, newDescription)];\n          }\n\n        });\n      },\n\n      'CallExpression:exit'(node) {\n        if ((0, _utils.isDescribeCall)(node)) {\n          numberOfDescribeBlocks--;\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utils","require","hasStringAsFirstArgument","node","arguments","isStringNode","findNodeNameAndArgument","isTestCaseCall","isDescribeCall","getNodeName","split","populateIgnores","ignore","ignores","includes","DescribeAlias","describe","push","keys","TestCaseName","test","filter","k","endsWith","it","_default","createRule","name","__filename","meta","type","docs","description","category","recommended","fixable","messages","unexpectedLowercase","schema","properties","items","enum","additionalItems","allowedPrefixes","ignoreTopLevelDescribe","additionalProperties","defaultOptions","create","context","numberOfDescribeBlocks","CallExpression","results","firstArg","getStringValue","some","startsWith","firstCharacter","charAt","toLowerCase","report","messageId","data","method","fix","fixer","rangeIgnoringQuotes","range","newDescription","substring","replaceTextRange"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/prefer-lowercase-title.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nconst hasStringAsFirstArgument = node => node.arguments[0] && (0, _utils.isStringNode)(node.arguments[0]);\n\nconst findNodeNameAndArgument = node => {\n  if (!((0, _utils.isTestCaseCall)(node) || (0, _utils.isDescribeCall)(node))) {\n    return null;\n  }\n\n  if (!hasStringAsFirstArgument(node)) {\n    return null;\n  }\n\n  return [(0, _utils.getNodeName)(node).split('.')[0], node.arguments[0]];\n};\n\nconst populateIgnores = ignore => {\n  const ignores = [];\n\n  if (ignore.includes(_utils.DescribeAlias.describe)) {\n    ignores.push(...Object.keys(_utils.DescribeAlias));\n  }\n\n  if (ignore.includes(_utils.TestCaseName.test)) {\n    ignores.push(...Object.keys(_utils.TestCaseName).filter(k => k.endsWith(_utils.TestCaseName.test)));\n  }\n\n  if (ignore.includes(_utils.TestCaseName.it)) {\n    ignores.push(...Object.keys(_utils.TestCaseName).filter(k => k.endsWith(_utils.TestCaseName.it)));\n  }\n\n  return ignores;\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Enforce lowercase test names',\n      category: 'Best Practices',\n      recommended: false\n    },\n    fixable: 'code',\n    messages: {\n      unexpectedLowercase: '`{{ method }}`s should begin with lowercase'\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        ignore: {\n          type: 'array',\n          items: {\n            enum: [_utils.DescribeAlias.describe, _utils.TestCaseName.test, _utils.TestCaseName.it]\n          },\n          additionalItems: false\n        },\n        allowedPrefixes: {\n          type: 'array',\n          items: {\n            type: 'string'\n          },\n          additionalItems: false\n        },\n        ignoreTopLevelDescribe: {\n          type: 'boolean',\n          default: false\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{\n    ignore: [],\n    allowedPrefixes: [],\n    ignoreTopLevelDescribe: false\n  }],\n\n  create(context, [{\n    ignore = [],\n    allowedPrefixes = [],\n    ignoreTopLevelDescribe\n  }]) {\n    const ignores = populateIgnores(ignore);\n    let numberOfDescribeBlocks = 0;\n    return {\n      CallExpression(node) {\n        if ((0, _utils.isDescribeCall)(node)) {\n          numberOfDescribeBlocks++;\n\n          if (ignoreTopLevelDescribe && numberOfDescribeBlocks === 1) {\n            return;\n          }\n        }\n\n        const results = findNodeNameAndArgument(node);\n\n        if (!results) {\n          return;\n        }\n\n        const [name, firstArg] = results;\n        const description = (0, _utils.getStringValue)(firstArg);\n\n        if (allowedPrefixes.some(name => description.startsWith(name))) {\n          return;\n        }\n\n        const firstCharacter = description.charAt(0);\n\n        if (!firstCharacter || firstCharacter === firstCharacter.toLowerCase() || ignores.includes(name)) {\n          return;\n        }\n\n        context.report({\n          messageId: 'unexpectedLowercase',\n          node: node.arguments[0],\n          data: {\n            method: name\n          },\n\n          fix(fixer) {\n            const description = (0, _utils.getStringValue)(firstArg);\n            const rangeIgnoringQuotes = [firstArg.range[0] + 1, firstArg.range[1] - 1];\n            const newDescription = description.substring(0, 1).toLowerCase() + description.substring(1);\n            return [fixer.replaceTextRange(rangeIgnoringQuotes, newDescription)];\n          }\n\n        });\n      },\n\n      'CallExpression:exit'(node) {\n        if ((0, _utils.isDescribeCall)(node)) {\n          numberOfDescribeBlocks--;\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}