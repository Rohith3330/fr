{"ast":null,"code":"/**\n * @fileoverview A collection of methods for processing Espree's options.\n * @author Kai Cataldo\n */\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\nconst SUPPORTED_VERSIONS = [3, 5, 6, // 2015\n7, // 2016\n8, // 2017\n9, // 2018\n10, // 2019\n11, // 2020\n12, // 2021\n13, // 2022\n14 // 2023\n];\n/**\n * Get the latest ECMAScript version supported by Espree.\n * @returns {number} The latest ECMAScript version.\n */\n\nexport function getLatestEcmaVersion() {\n  return SUPPORTED_VERSIONS[SUPPORTED_VERSIONS.length - 1];\n}\n/**\n * Get the list of ECMAScript versions supported by Espree.\n * @returns {number[]} An array containing the supported ECMAScript versions.\n */\n\nexport function getSupportedEcmaVersions() {\n  return [...SUPPORTED_VERSIONS];\n}\n/**\n * Normalize ECMAScript version from the initial config\n * @param {(number|\"latest\")} ecmaVersion ECMAScript version from the initial config\n * @throws {Error} throws an error if the ecmaVersion is invalid.\n * @returns {number} normalized ECMAScript version\n */\n\nfunction normalizeEcmaVersion() {\n  let ecmaVersion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n  let version = ecmaVersion === \"latest\" ? getLatestEcmaVersion() : ecmaVersion;\n\n  if (typeof version !== \"number\") {\n    throw new Error(`ecmaVersion must be a number or \"latest\". Received value of type ${typeof ecmaVersion} instead.`);\n  } // Calculate ECMAScript edition number from official year version starting with\n  // ES2015, which corresponds with ES6 (or a difference of 2009).\n\n\n  if (version >= 2015) {\n    version -= 2009;\n  }\n\n  if (!SUPPORTED_VERSIONS.includes(version)) {\n    throw new Error(\"Invalid ecmaVersion.\");\n  }\n\n  return version;\n}\n/**\n * Normalize sourceType from the initial config\n * @param {string} sourceType to normalize\n * @throws {Error} throw an error if sourceType is invalid\n * @returns {string} normalized sourceType\n */\n\n\nfunction normalizeSourceType() {\n  let sourceType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"script\";\n\n  if (sourceType === \"script\" || sourceType === \"module\") {\n    return sourceType;\n  }\n\n  if (sourceType === \"commonjs\") {\n    return \"script\";\n  }\n\n  throw new Error(\"Invalid sourceType.\");\n}\n/**\n * Normalize parserOptions\n * @param {Object} options the parser options to normalize\n * @throws {Error} throw an error if found invalid option.\n * @returns {Object} normalized options\n */\n\n\nexport function normalizeOptions(options) {\n  const ecmaVersion = normalizeEcmaVersion(options.ecmaVersion);\n  const sourceType = normalizeSourceType(options.sourceType);\n  const ranges = options.range === true;\n  const locations = options.loc === true;\n\n  if (ecmaVersion !== 3 && options.allowReserved) {\n    // a value of `false` is intentionally allowed here, so a shared config can overwrite it when needed\n    throw new Error(\"`allowReserved` is only supported when ecmaVersion is 3\");\n  }\n\n  if (typeof options.allowReserved !== \"undefined\" && typeof options.allowReserved !== \"boolean\") {\n    throw new Error(\"`allowReserved`, when present, must be `true` or `false`\");\n  }\n\n  const allowReserved = ecmaVersion === 3 ? options.allowReserved || \"never\" : false;\n  const ecmaFeatures = options.ecmaFeatures || {};\n  const allowReturnOutsideFunction = options.sourceType === \"commonjs\" || Boolean(ecmaFeatures.globalReturn);\n\n  if (sourceType === \"module\" && ecmaVersion < 6) {\n    throw new Error(\"sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.\");\n  }\n\n  return Object.assign({}, options, {\n    ecmaVersion,\n    sourceType,\n    ranges,\n    locations,\n    allowReserved,\n    allowReturnOutsideFunction\n  });\n}","map":{"version":3,"names":["SUPPORTED_VERSIONS","getLatestEcmaVersion","length","getSupportedEcmaVersions","normalizeEcmaVersion","ecmaVersion","version","Error","includes","normalizeSourceType","sourceType","normalizeOptions","options","ranges","range","locations","loc","allowReserved","ecmaFeatures","allowReturnOutsideFunction","Boolean","globalReturn","Object","assign"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/espree/lib/options.js"],"sourcesContent":["/**\n * @fileoverview A collection of methods for processing Espree's options.\n * @author Kai Cataldo\n */\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SUPPORTED_VERSIONS = [\n    3,\n    5,\n    6, // 2015\n    7, // 2016\n    8, // 2017\n    9, // 2018\n    10, // 2019\n    11, // 2020\n    12, // 2021\n    13, // 2022\n    14 // 2023\n];\n\n/**\n * Get the latest ECMAScript version supported by Espree.\n * @returns {number} The latest ECMAScript version.\n */\nexport function getLatestEcmaVersion() {\n    return SUPPORTED_VERSIONS[SUPPORTED_VERSIONS.length - 1];\n}\n\n/**\n * Get the list of ECMAScript versions supported by Espree.\n * @returns {number[]} An array containing the supported ECMAScript versions.\n */\nexport function getSupportedEcmaVersions() {\n    return [...SUPPORTED_VERSIONS];\n}\n\n/**\n * Normalize ECMAScript version from the initial config\n * @param {(number|\"latest\")} ecmaVersion ECMAScript version from the initial config\n * @throws {Error} throws an error if the ecmaVersion is invalid.\n * @returns {number} normalized ECMAScript version\n */\nfunction normalizeEcmaVersion(ecmaVersion = 5) {\n\n    let version = ecmaVersion === \"latest\" ? getLatestEcmaVersion() : ecmaVersion;\n\n    if (typeof version !== \"number\") {\n        throw new Error(`ecmaVersion must be a number or \"latest\". Received value of type ${typeof ecmaVersion} instead.`);\n    }\n\n    // Calculate ECMAScript edition number from official year version starting with\n    // ES2015, which corresponds with ES6 (or a difference of 2009).\n    if (version >= 2015) {\n        version -= 2009;\n    }\n\n    if (!SUPPORTED_VERSIONS.includes(version)) {\n        throw new Error(\"Invalid ecmaVersion.\");\n    }\n\n    return version;\n}\n\n/**\n * Normalize sourceType from the initial config\n * @param {string} sourceType to normalize\n * @throws {Error} throw an error if sourceType is invalid\n * @returns {string} normalized sourceType\n */\nfunction normalizeSourceType(sourceType = \"script\") {\n    if (sourceType === \"script\" || sourceType === \"module\") {\n        return sourceType;\n    }\n\n    if (sourceType === \"commonjs\") {\n        return \"script\";\n    }\n\n    throw new Error(\"Invalid sourceType.\");\n}\n\n/**\n * Normalize parserOptions\n * @param {Object} options the parser options to normalize\n * @throws {Error} throw an error if found invalid option.\n * @returns {Object} normalized options\n */\nexport function normalizeOptions(options) {\n    const ecmaVersion = normalizeEcmaVersion(options.ecmaVersion);\n    const sourceType = normalizeSourceType(options.sourceType);\n    const ranges = options.range === true;\n    const locations = options.loc === true;\n\n    if (ecmaVersion !== 3 && options.allowReserved) {\n\n        // a value of `false` is intentionally allowed here, so a shared config can overwrite it when needed\n        throw new Error(\"`allowReserved` is only supported when ecmaVersion is 3\");\n    }\n    if (typeof options.allowReserved !== \"undefined\" && typeof options.allowReserved !== \"boolean\") {\n        throw new Error(\"`allowReserved`, when present, must be `true` or `false`\");\n    }\n    const allowReserved = ecmaVersion === 3 ? (options.allowReserved || \"never\") : false;\n    const ecmaFeatures = options.ecmaFeatures || {};\n    const allowReturnOutsideFunction = options.sourceType === \"commonjs\" ||\n        Boolean(ecmaFeatures.globalReturn);\n\n    if (sourceType === \"module\" && ecmaVersion < 6) {\n        throw new Error(\"sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.\");\n    }\n\n    return Object.assign({}, options, {\n        ecmaVersion,\n        sourceType,\n        ranges,\n        locations,\n        allowReserved,\n        allowReturnOutsideFunction\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}