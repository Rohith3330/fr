{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, keep, tidy, util } from '@tensorflow/tfjs-core';\nimport { getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName } from '../operations/executors/utils';\nimport { executeOp } from '../operations/operation_executor';\nimport { ExecutionContext } from './execution_context';\nimport { getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow } from './model_analysis';\nexport var GraphExecutor = /*#__PURE__*/function () {\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  function GraphExecutor(graph, parent) {\n    var _this = this;\n    _classCallCheck(this, GraphExecutor);\n    this.graph = graph;\n    this.parent = parent;\n    this.compiledMap = new Map();\n    this._weightMap = {};\n    this.SEPERATOR = ',';\n    this._functions = {};\n    this._functionExecutorMap = {};\n    this.keepIntermediateTensors = false;\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(function (name) {\n        _this._functionExecutorMap[name] = new GraphExecutor(graph.functions[name], _this);\n      });\n    }\n  }\n  _createClass(GraphExecutor, [{\n    key: \"getCompilationKey\",\n    value: function getCompilationKey(inputs, outputs) {\n      var sortedInputs = inputs.map(function (node) {\n        return node.name;\n      }).sort();\n      var sortedOutputs = outputs.map(function (node) {\n        return node.name;\n      }).sort();\n      return sortedInputs.join(this.SEPERATOR) + '--' + sortedOutputs.join(this.SEPERATOR);\n    }\n    /**\n     * Compiles the inference graph and returns the minimal set of nodes that are\n     * required for execution, in the correct execution order.\n     */\n  }, {\n    key: \"compile\",\n    value: function compile(inputs, outputs) {\n      var executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n      var missingInputs = executionInfo.missingInputs,\n        dynamicNode = executionInfo.dynamicNode,\n        syncInputs = executionInfo.syncInputs;\n      if (dynamicNode != null) {\n        throw new Error(\"This execution contains the node '\".concat(dynamicNode.name, \"', which has \") + \"the dynamic op '\".concat(dynamicNode.op, \"'. Please use \") + \"model.executeAsync() instead. Alternatively, to avoid the \" + \"dynamic ops, specify the inputs [\".concat(syncInputs, \"]\"));\n      }\n      if (missingInputs.length > 0) {\n        var outNames = outputs.map(function (n) {\n          return n.name;\n        });\n        var inNames = Object.keys(inputs);\n        throw new Error(\"Cannot compute the outputs [\".concat(outNames, \"] from the provided inputs \") + \"[\".concat(inNames, \"]. Missing the following inputs: [\").concat(missingInputs, \"]\"));\n      }\n      return getNodesInTopologicalOrder(this.graph, this.weightMap, executionInfo);\n    }\n  }, {\n    key: \"cloneAndKeepTensor\",\n    value: function cloneAndKeepTensor(tensor) {\n      if (tensor == null) {\n        return null;\n      }\n      var clone = tensor.clone();\n      // Keep the clone because`model.execute()` may be called within\n      // a `tidy()`, but the user may inspect these tensors after the\n      // tidy.\n      keep(clone);\n      return clone;\n    }\n  }, {\n    key: \"cloneTensorList\",\n    value: function cloneTensorList(tensors) {\n      var _this2 = this;\n      if (!tensors) {\n        return null;\n      }\n      var clonedTensor = tensors.map(function (tensor) {\n        return _this2.cloneAndKeepTensor(tensor);\n      });\n      return clonedTensor;\n    }\n  }, {\n    key: \"cloneTensorMap\",\n    value: function cloneTensorMap(tensorsMap) {\n      var _this3 = this;\n      return Object.fromEntries(Object.entries(tensorsMap).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          name = _ref2[0],\n          tensorsList = _ref2[1];\n        return [name, _this3.cloneTensorList(tensorsList)];\n      }));\n    }\n    /**\n     * Executes the inference for given input tensors.\n     * @param inputs Tensor map for the model inputs, keyed by the input node\n     * names.\n     * @param outputs Optional. output node name from the Tensorflow model, if\n     * no outputs are specified, the default outputs of the model would be used.\n     * You can inspect intermediate nodes of the model by adding them to the\n     * outputs array.\n     */\n  }, {\n    key: \"execute\",\n    value: function execute(inputs, outputs) {\n      var _this4 = this;\n      // Dispose any tensors from a prior run to avoid leaking them.\n      this.disposeIntermediateTensors();\n      inputs = this.mapInputs(inputs);\n      var names = Object.keys(inputs).sort();\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n      var inputNodes = names.map(function (name) {\n        return _this4.graph.nodes[parseNodeName(name)[0]];\n      });\n      var outputNodeNames = outputs.map(function (name) {\n        return parseNodeName(name)[0];\n      });\n      var outputNodes = outputNodeNames.map(function (name) {\n        return _this4.graph.nodes[name];\n      });\n      // If no outputs are specified, then use the default outputs of the model.\n      if (outputNodes.length === 0) {\n        outputNodes = this._outputs;\n      }\n      var compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n      // Do nothing if the compiled graph cache contains the input.\n      var orderedNodes = this.compiledMap.get(compilationKey);\n      if (orderedNodes == null) {\n        orderedNodes = this.compile(inputs, outputNodes);\n        this.compiledMap.set(compilationKey, orderedNodes);\n      }\n      // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.\n      try {\n        this.keepIntermediateTensors = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n      } catch (e) {\n        this.keepIntermediateTensors = false;\n        console.warn(e.message);\n      }\n      var tensorArrayMap = {};\n      var tensorListMap = {};\n      return tidy(function () {\n        var context = new ExecutionContext(_this4.weightMap, tensorArrayMap, tensorListMap, _this4.functionExecutorMap);\n        var tensorsMap = Object.assign({}, _this4.weightMap);\n        if (_this4.keepIntermediateTensors) {\n          _this4.clonedTensorsMap = _this4.cloneTensorMap(_this4.weightMap);\n        }\n        Object.keys(inputs).forEach(function (name) {\n          var _parseNodeName = parseNodeName(name),\n            _parseNodeName2 = _slicedToArray(_parseNodeName, 2),\n            nodeName = _parseNodeName2[0],\n            index = _parseNodeName2[1];\n          var tensors = [];\n          tensors[index] = inputs[name];\n          tensorsMap[nodeName] = tensors;\n          if (_this4.keepIntermediateTensors) {\n            _this4.clonedTensorsMap[nodeName] = _this4.cloneTensorList(tensors);\n          }\n        });\n        var tensorsToKeep = _this4.getFrozenTensorIds(tensorsMap);\n        var intermediateTensorConsumerCount = {};\n        for (var i = 0; i < orderedNodes.length; i++) {\n          var node = orderedNodes[i];\n          if (!tensorsMap[node.name]) {\n            var tensors = executeOp(node, tensorsMap, context, _this4._resourceManager);\n            if (util.isPromise(tensors)) {\n              throw new Error(\"The execution of the op '\".concat(node.op, \"' returned a promise. \") + \"Please use model.executeAsync() instead.\");\n            }\n            tensorsMap[node.name] = tensors;\n            if (_this4.keepIntermediateTensors) {\n              _this4.clonedTensorsMap[node.name] = _this4.cloneTensorList(tensors);\n            }\n            _this4.checkTensorForDisposal(node.name, node, tensorsMap, context, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount);\n          }\n        }\n        // dispose the context for the root executor\n        if (_this4.parent == null) {\n          context.dispose(tensorsToKeep);\n        }\n        return outputs.map(function (name) {\n          return getTensor(name, tensorsMap, context);\n        });\n      });\n    }\n  }, {\n    key: \"getFrozenTensorIds\",\n    value: function getFrozenTensorIds(tensorMap) {\n      var ids = [].concat.apply([], Object.keys(tensorMap).map(function (key) {\n        return tensorMap[key];\n      }).map(function (tensors) {\n        return tensors.map(function (tensor) {\n          return tensor.id;\n        });\n      }));\n      return new Set(ids);\n    }\n  }, {\n    key: \"checkTensorForDisposal\",\n    value: function checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount) {\n      // Skip output nodes and any control flow nodes, since its dependency is\n      // tricky to track correctly.\n      if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n        return;\n      }\n      tensorMap[nodeName].forEach(function (tensor) {\n        if (tensor != null) {\n          intermediateTensorConsumerCount[tensor.id] = (intermediateTensorConsumerCount[tensor.id] || 0) + node.children.length;\n        }\n      });\n      node.inputs.forEach(function (input) {\n        // Skip any control flow nodes, since its dependency is tricky to track\n        // correctly.\n        if (input.category !== 'control') {\n          var tensors = getTensorsForCurrentContenxt(input.name, tensorMap, context);\n          if (tensors != null) {\n            tensors.forEach(function (tensor) {\n              if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n                var count = intermediateTensorConsumerCount[tensor.id];\n                if (count === 1) {\n                  tensor.dispose();\n                  delete intermediateTensorConsumerCount[tensor.id];\n                } else if (count != null) {\n                  // only intermediate nodes has count set, inputs and weights\n                  // are not.\n                  intermediateTensorConsumerCount[tensor.id]--;\n                }\n              }\n            });\n          }\n        }\n      });\n    }\n    /**\n     * Executes the inference for given input tensors in Async fashion.\n     * @param inputs Tensor map for the model inputs, keyed by the input node\n     * names.\n     * @param outputs output node name from the Tensorflow model, if no outputs\n     * are specified, the default outputs of the model would be used. You can\n     * inspect intermediate nodes of the model by adding them to the outputs\n     * array.\n     */\n  }, {\n    key: \"executeAsync\",\n    value: function () {\n      var _executeAsync2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(inputs, outputs) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this._executeAsync(inputs, outputs));\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function executeAsync(_x, _x2) {\n        return _executeAsync2.apply(this, arguments);\n      }\n      return executeAsync;\n    }()\n  }, {\n    key: \"disposeIntermediateTensors\",\n    value: function disposeIntermediateTensors() {\n      if (!this.clonedTensorsMap) {\n        return;\n      }\n      Object.values(this.clonedTensorsMap).forEach(function (tensorsList) {\n        var _iterator = _createForOfIteratorHelper(tensorsList),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var tensor = _step.value;\n            if (tensor && !tensor.isDisposed) {\n              tensor.dispose();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n      this.clonedTensorsMap = null;\n    }\n  }, {\n    key: \"getIntermediateTensors\",\n    value: function getIntermediateTensors() {\n      return this.clonedTensorsMap;\n    }\n    /**\n     * Executes the inference for given input tensors in Async fashion.\n     * @param inputs Tensor map for the model inputs, keyed by the input node\n     * names.\n     * @param outputs Optional. output node name from the Tensorflow model,\n     * if no outputs are specified, the default outputs of the model would be\n     * used. You can inspect intermediate nodes of the model by adding them to\n     * the outputs array.\n     * @param isFunctionExecution Optional. Flag for executing a function.\n     * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n     * function execution.\n     * @param tensorArrayMap Optinal global TensorList map by id. Used for\n     * function execution.\n     */\n  }, {\n    key: \"_executeAsync\",\n    value: function () {\n      var _executeAsync3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(inputs, outputs) {\n        var isFunctionExecution,\n          tensorArrayMap,\n          tensorListMap,\n          context,\n          tensorsMap,\n          results,\n          outputIds,\n          inputIds,\n          keepIds,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                isFunctionExecution = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : false;\n                tensorArrayMap = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};\n                tensorListMap = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : {};\n                // Dispose any tensors from a prior run to avoid leaking them.\n                this.disposeIntermediateTensors();\n                if (!isFunctionExecution) {\n                  inputs = this.mapInputs(inputs);\n                  this.checkInputs(inputs);\n                  this.checkInputShapeAndType(inputs);\n                  outputs = this.mapOutputs(outputs);\n                  this.checkOutputs(outputs);\n                }\n                // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.\n                try {\n                  this.keepIntermediateTensors = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n                } catch (e) {\n                  this.keepIntermediateTensors = false;\n                  console.warn(e.message);\n                }\n                context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);\n                if (this.keepIntermediateTensors) {\n                  this.clonedTensorsMap = this.cloneTensorMap(this.weightMap);\n                }\n                // Graph with control flow op requires runtime evaluation of the execution\n                // order, while without control flow the execution order is pre-determined\n                // in the compile method.\n                _context2.next = 10;\n                return this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);\n              case 10:\n                tensorsMap = _context2.sent;\n                results = outputs.map(function (name) {\n                  return getTensor(name, tensorsMap, context);\n                }); // dispose all the intermediate tensors\n                outputIds = results.map(function (t) {\n                  return t.id;\n                });\n                inputIds = Object.keys(inputs).map(function (name) {\n                  return inputs[name].id;\n                });\n                keepIds = new Set([].concat(_toConsumableArray(outputIds), _toConsumableArray(inputIds), _toConsumableArray(this.weightIds)));\n                Object.values(tensorsMap).forEach(function (tensorsList) {\n                  tensorsList.forEach(function (tensor) {\n                    if (tensor && !tensor.isDisposed && !keepIds.has(tensor.id)) {\n                      tensor.dispose();\n                    }\n                  });\n                });\n                // dispose the context for the root executor\n                if (this.parent == null) {\n                  context.dispose(keepIds);\n                }\n                return _context2.abrupt(\"return\", results);\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function _executeAsync(_x3, _x4) {\n        return _executeAsync3.apply(this, arguments);\n      }\n      return _executeAsync;\n    }()\n  }, {\n    key: \"executeFunctionAsync\",\n    value: function () {\n      var _executeFunctionAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(inputs, tensorArrayMap, tensorListMap) {\n        var _this5 = this;\n        var mappedInputs;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                mappedInputs = inputs.reduce(function (map, tensor, index) {\n                  map[_this5.inputs[index].name] = tensor;\n                  return map;\n                }, {});\n                return _context3.abrupt(\"return\", this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap));\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function executeFunctionAsync(_x5, _x6, _x7) {\n        return _executeFunctionAsync.apply(this, arguments);\n      }\n      return executeFunctionAsync;\n    }()\n    /**\n     * When there are control flow nodes in the graph, the graph execution use\n     * ExecutionContext to keep track of the frames and loop iterators.\n     * @param inputs placeholder tensors for the graph.\n     * @param context the execution context object for current execution.\n     * @param outputNames Optional. output node name from the Tensorflow model,\n     * if no outputs are specified, the default outputs of the model would be\n     * used. You can inspect intermediate nodes of the model by adding them to\n     * the outputs array.\n     * @param isFunctionExecution Flag for executing a function.\n     */\n  }, {\n    key: \"executeWithControlFlow\",\n    value: function () {\n      var _executeWithControlFlow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(inputs, context, outputNames, isFunctionExecution) {\n        var _this6 = this;\n        var names, inputNodes, outputNodeNames, outputNodes, _getExecutionSubgraph, usedNodes, missingInputs, dynamicNode, syncInputs, stack, tensorsMap, intermediateTensorConsumerCount, tensorsToKeep, added, promises, missingOutputs, alternativeMsg;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                names = Object.keys(inputs);\n                inputNodes = names.map(function (name) {\n                  return _this6.graph.nodes[parseNodeName(name)[0]];\n                });\n                outputNodeNames = outputNames.map(function (name) {\n                  return parseNodeName(name)[0];\n                });\n                outputNodes = outputNodeNames.map(function (name) {\n                  return _this6.graph.nodes[name];\n                }); // If no outputs are specified, then use the default outputs of the model.\n                if (outputNodes.length === 0) {\n                  outputNodes = this._outputs;\n                }\n                _getExecutionSubgraph = getExecutionSubgraph(inputs, outputNodes, this.weightMap, this._initNodes), usedNodes = _getExecutionSubgraph.usedNodes, missingInputs = _getExecutionSubgraph.missingInputs, dynamicNode = _getExecutionSubgraph.dynamicNode, syncInputs = _getExecutionSubgraph.syncInputs; // First nodes to execute include inputNodes, weights, and initNodes.\n                stack = [].concat(_toConsumableArray(inputNodes), _toConsumableArray(this.graph.weights), _toConsumableArray(this._initNodes || [])).map(function (node) {\n                  return {\n                    node: node,\n                    contexts: context.currentContext\n                  };\n                });\n                tensorsMap = Object.assign({}, this.weightMap);\n                Object.keys(inputs).forEach(function (name) {\n                  var _parseNodeName3 = parseNodeName(name),\n                    _parseNodeName4 = _slicedToArray(_parseNodeName3, 2),\n                    nodeName = _parseNodeName4[0],\n                    index = _parseNodeName4[1];\n                  var tensors = [];\n                  tensors[index] = inputs[name];\n                  tensorsMap[nodeName] = tensors;\n                });\n                intermediateTensorConsumerCount = {};\n                tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n                added = {};\n              case 12:\n                if (!(stack.length > 0)) {\n                  _context4.next = 18;\n                  break;\n                }\n                promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n                _context4.next = 16;\n                return Promise.all(promises);\n              case 16:\n                _context4.next = 12;\n                break;\n              case 18:\n                if (dynamicNode == null && !isFunctionExecution) {\n                  console.warn(\"This model execution did not contain any nodes with control flow \" + \"or dynamic output shapes. You can use model.execute() instead.\");\n                }\n                missingOutputs = outputNodes.filter(function (node) {\n                  return !isControlFlow(node) && !getTensor(node.name, tensorsMap, context);\n                }).map(function (node) {\n                  return node.name;\n                });\n                if (!(missingOutputs.length > 0)) {\n                  _context4.next = 24;\n                  break;\n                }\n                alternativeMsg = '';\n                if (dynamicNode != null) {\n                  alternativeMsg = \"Alternatively, to avoid the dynamic ops, use model.execute() \" + \"and specify the inputs [\".concat(syncInputs, \"]\");\n                }\n                throw new Error(\"Cannot compute the outputs [\".concat(missingOutputs, \"] from the provided \") + \"inputs [\".concat(names, \"]. Consider providing the following inputs: \") + \"[\".concat(missingInputs, \"]. \").concat(alternativeMsg));\n              case 24:\n                return _context4.abrupt(\"return\", tensorsMap);\n              case 25:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function executeWithControlFlow(_x8, _x9, _x10, _x11) {\n        return _executeWithControlFlow.apply(this, arguments);\n      }\n      return executeWithControlFlow;\n    }()\n  }, {\n    key: \"processStack\",\n    value: function processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes) {\n      var _this7 = this;\n      var promises = [];\n      var _loop = function _loop() {\n        var item = stack.pop();\n        context.currentContext = item.contexts;\n        var nodeName = '';\n        // The tensor of the Enter op with isConstant set should be set\n        // in the parent scope, so it will be available as constant for the\n        // whole loop.\n        if (item.node.op === 'Enter' && getParamValue('isConstant', item.node, tensorMap, context)) {\n          var _getNodeNameAndIndex = getNodeNameAndIndex(item.node.name, context);\n          var _getNodeNameAndIndex2 = _slicedToArray(_getNodeNameAndIndex, 1);\n          nodeName = _getNodeNameAndIndex2[0];\n        }\n        // only process nodes that are not in the tensorMap yet, this include\n        // inputNodes and internal initNodes.\n        if (tensorMap[item.node.name] == null) {\n          var tensors = executeOp(item.node, tensorMap, context, _this7._resourceManager);\n          if (!nodeName) {\n            var _getNodeNameAndIndex3 = getNodeNameAndIndex(item.node.name, context);\n            var _getNodeNameAndIndex4 = _slicedToArray(_getNodeNameAndIndex3, 1);\n            nodeName = _getNodeNameAndIndex4[0];\n          }\n          var currentContext = context.currentContext;\n          if (util.isPromise(tensors)) {\n            promises.push(tensors.then(function (t) {\n              tensorMap[nodeName] = t;\n              if (_this7.keepIntermediateTensors) {\n                _this7.clonedTensorsMap[nodeName] = _this7.cloneTensorList(t);\n              }\n              context.currentContext = currentContext;\n              _this7.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);\n              _this7.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n              return t;\n            }));\n          } else {\n            tensorMap[nodeName] = tensors;\n            if (_this7.keepIntermediateTensors) {\n              _this7.clonedTensorsMap[nodeName] = _this7.cloneTensorList(tensors);\n            }\n            _this7.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);\n            _this7.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n          }\n        } else {\n          _this7.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      };\n      while (stack.length > 0) {\n        _loop();\n      }\n      return promises;\n    }\n  }, {\n    key: \"processChildNodes\",\n    value: function processChildNodes(node, stack, context, tensorMap, added, usedNodes) {\n      node.children.forEach(function (childNode) {\n        var _getNodeNameAndIndex5 = getNodeNameAndIndex(childNode.name, context),\n          _getNodeNameAndIndex6 = _slicedToArray(_getNodeNameAndIndex5, 1),\n          nodeName = _getNodeNameAndIndex6[0];\n        if (added[nodeName] || !usedNodes.has(childNode.name)) {\n          return;\n        }\n        // Merge op can be pushed if any of its inputs has value.\n        if (childNode.op === 'Merge') {\n          if (childNode.inputNames.some(function (name) {\n            return !!getTensor(name, tensorMap, context);\n          })) {\n            added[nodeName] = true;\n            stack.push({\n              contexts: context.currentContext,\n              node: childNode\n            });\n          }\n        } else\n          // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(function (name) {\n            return !!getTensor(name, tensorMap, context);\n          })) {\n            added[nodeName] = true;\n            stack.push({\n              contexts: context.currentContext,\n              node: childNode\n            });\n          }\n      });\n    }\n    /**\n     * Releases the memory used by the weight tensors.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this8 = this;\n      Object.keys(this.weightMap).forEach(function (key) {\n        return _this8.weightMap[key].forEach(function (tensor) {\n          return tensor.dispose();\n        });\n      });\n    }\n  }, {\n    key: \"checkInputShapeAndType\",\n    value: function checkInputShapeAndType(inputs) {\n      var _this9 = this;\n      Object.keys(inputs).forEach(function (name) {\n        var input = inputs[name];\n        var _parseNodeName5 = parseNodeName(name),\n          _parseNodeName6 = _slicedToArray(_parseNodeName5, 1),\n          nodeName = _parseNodeName6[0];\n        var node = _this9.graph.nodes[nodeName];\n        if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n          var shape = node.attrParams['shape'].value;\n          var match = shape.length === input.shape.length && input.shape.every(function (dim, index) {\n            return shape[index] === -1 || shape[index] === dim;\n          });\n          util.assert(match, function () {\n            return \"The shape of dict['\".concat(node.name, \"'] provided in \") + \"model.execute(dict) must be [\".concat(shape, \"], but was \") + \"[\".concat(input.shape, \"]\");\n          });\n        }\n        if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n          util.assert(input.dtype === node.attrParams['dtype'].value, function () {\n            return \"The dtype of dict['\".concat(node.name, \"'] provided in \") + \"model.execute(dict) must be \" + \"\".concat(node.attrParams['dtype'].value, \", but was \").concat(input.dtype);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"mapInputs\",\n    value: function mapInputs(inputs) {\n      var _a, _b;\n      var result = {};\n      for (var inputName in inputs) {\n        var tensor = (_b = (_a = this._signature) === null || _a === void 0 ? void 0 : _a.inputs) === null || _b === void 0 ? void 0 : _b[inputName];\n        if (tensor != null) {\n          result[tensor.name] = inputs[inputName];\n        } else {\n          result[inputName] = inputs[inputName];\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"checkInputs\",\n    value: function checkInputs(inputs) {\n      var _this10 = this;\n      var notInGraph = Object.keys(inputs).filter(function (name) {\n        var _parseNodeName7 = parseNodeName(name),\n          _parseNodeName8 = _slicedToArray(_parseNodeName7, 1),\n          nodeName = _parseNodeName8[0];\n        return _this10.graph.nodes[nodeName] == null;\n      });\n      if (notInGraph.length > 0) {\n        throw new Error(\"The dict provided in model.execute(dict) has \" + \"keys: [\".concat(notInGraph, \"] that are not part of graph\"));\n      }\n    }\n  }, {\n    key: \"mapOutputs\",\n    value: function mapOutputs(outputs) {\n      var _this11 = this;\n      return outputs.map(function (name) {\n        var _a, _b;\n        var tensor = (_b = (_a = _this11._signature) === null || _a === void 0 ? void 0 : _a.outputs) === null || _b === void 0 ? void 0 : _b[name];\n        if (tensor != null) {\n          return tensor.name;\n        }\n        return name;\n      }, {});\n    }\n  }, {\n    key: \"checkOutputs\",\n    value: function checkOutputs(outputs) {\n      var _this12 = this;\n      outputs.forEach(function (name) {\n        var _parseNodeName9 = parseNodeName(name),\n          _parseNodeName10 = _slicedToArray(_parseNodeName9, 1),\n          normalizedName = _parseNodeName10[0];\n        if (!_this12.graph.nodes[normalizedName]) {\n          throw new Error(\"The output '\".concat(name, \"' is not found in the graph\"));\n        }\n      });\n    }\n  }, {\n    key: \"weightIds\",\n    get: function get() {\n      return this.parent ? this.parent.weightIds : this._weightIds;\n    }\n  }, {\n    key: \"functionExecutorMap\",\n    get: function get() {\n      return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;\n    }\n  }, {\n    key: \"weightMap\",\n    get: function get() {\n      return this.parent ? this.parent.weightMap : this._weightMap;\n    },\n    set: function set(weightMap) {\n      var _ref3;\n      var weightIds = Object.keys(weightMap).map(function (key) {\n        return weightMap[key].map(function (tensor) {\n          return tensor.id;\n        });\n      });\n      this._weightIds = (_ref3 = []).concat.apply(_ref3, _toConsumableArray(weightIds));\n      this._weightMap = weightMap;\n    }\n    /**\n     * Set `ResourceManager` shared by executors of a model.\n     * @param resourceManager: `ResourceManager` of the `GraphModel`.\n     */\n  }, {\n    key: \"resourceManager\",\n    set: function set(resourceManager) {\n      this._resourceManager = resourceManager;\n    }\n  }, {\n    key: \"inputs\",\n    get: function get() {\n      return this._inputs.map(function (node) {\n        return {\n          name: node.name,\n          shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,\n          dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined\n        };\n      });\n    }\n  }, {\n    key: \"outputs\",\n    get: function get() {\n      return this._outputs.map(function (node) {\n        return {\n          name: node.name,\n          shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,\n          dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined\n        };\n      });\n    }\n  }, {\n    key: \"inputNodes\",\n    get: function get() {\n      return this._inputs.map(function (node) {\n        return node.signatureKey || node.name;\n      });\n    }\n  }, {\n    key: \"outputNodes\",\n    get: function get() {\n      return this._outputs.map(function (node) {\n        var name = node.signatureKey || node.name;\n        return node.defaultOutput ? \"\".concat(name, \":\").concat(node.defaultOutput) : name;\n      });\n    }\n  }, {\n    key: \"functions\",\n    get: function get() {\n      var _this13 = this;\n      return Object.keys(this._functions).reduce(function (map, key) {\n        map[key] = _this13._functions[key].signature;\n        return map;\n      }, {});\n    }\n  }]);\n  return GraphExecutor;\n}();","map":null,"metadata":{},"sourceType":"module"}