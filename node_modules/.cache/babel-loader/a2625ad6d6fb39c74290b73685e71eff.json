{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"../../compile/util\");\n\nconst def = {\n  keyword: \"not\",\n  schemaType: [\"object\", \"boolean\"],\n  trackErrors: true,\n\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      it\n    } = cxt;\n\n    if ((0, util_1.alwaysValidSchema)(it, schema)) {\n      cxt.fail();\n      return;\n    }\n\n    const valid = gen.name(\"valid\");\n    cxt.subschema({\n      keyword: \"not\",\n      compositeRule: true,\n      createErrors: false,\n      allErrors: false\n    }, valid);\n    cxt.failResult(valid, () => cxt.reset(), () => cxt.error());\n  },\n\n  error: {\n    message: \"must NOT be valid\"\n  }\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAEA;;AAIA,MAAMA,GAAG,GAA0B;EACjCC,OAAO,EAAE,KADwB;EAEjCC,UAAU,EAAE,CAAC,QAAD,EAAW,SAAX,CAFqB;EAGjCC,WAAW,EAAE,IAHoB;;EAIjCC,IAAI,CAACC,GAAD,EAAgB;IAClB,MAAM;MAACC,GAAD;MAAMC,MAAN;MAAcC;IAAd,IAAoBH,GAA1B;;IACA,IAAI,8BAAkBG,EAAlB,EAAsBD,MAAtB,CAAJ,EAAmC;MACjCF,GAAG,CAACI,IAAJ;MACA;IACD;;IAED,MAAMC,KAAK,GAAGJ,GAAG,CAACK,IAAJ,CAAS,OAAT,CAAd;IACAN,GAAG,CAACO,SAAJ,CACE;MACEX,OAAO,EAAE,KADX;MAEEY,aAAa,EAAE,IAFjB;MAGEC,YAAY,EAAE,KAHhB;MAIEC,SAAS,EAAE;IAJb,CADF,EAOEL,KAPF;IAUAL,GAAG,CAACW,UAAJ,CACEN,KADF,EAEE,MAAML,GAAG,CAACY,KAAJ,EAFR,EAGE,MAAMZ,GAAG,CAACa,KAAJ,EAHR;EAKD,CA3BgC;;EA4BjCA,KAAK,EAAE;IAACC,OAAO,EAAE;EAAV;AA5B0B,CAAnC;AA+BAC,kBAAepB,GAAf","names":["def","keyword","schemaType","trackErrors","code","cxt","gen","schema","it","fail","valid","name","subschema","compositeRule","createErrors","allErrors","failResult","reset","error","message","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\mini-css-extract-plugin\\node_modules\\ajv\\lib\\vocabularies\\applicator\\not.ts"],"sourcesContent":["import type {CodeKeywordDefinition, ErrorNoParams, AnySchema} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nexport type NotKeywordError = ErrorNoParams<\"not\", AnySchema>\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"not\",\n  schemaType: [\"object\", \"boolean\"],\n  trackErrors: true,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, it} = cxt\n    if (alwaysValidSchema(it, schema)) {\n      cxt.fail()\n      return\n    }\n\n    const valid = gen.name(\"valid\")\n    cxt.subschema(\n      {\n        keyword: \"not\",\n        compositeRule: true,\n        createErrors: false,\n        allErrors: false,\n      },\n      valid\n    )\n\n    cxt.failResult(\n      valid,\n      () => cxt.reset(),\n      () => cxt.error()\n    )\n  },\n  error: {message: \"must NOT be valid\"},\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}