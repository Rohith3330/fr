{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'no-misused-new',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Enforce valid definition of `new` and `constructor`',\n      recommended: 'error'\n    },\n    schema: [],\n    messages: {\n      errorMessageInterface: 'Interfaces cannot be constructed, only classes.',\n      errorMessageClass: 'Class cannot have method named `new`.'\n    }\n  },\n  defaultOptions: [],\n\n  create(context) {\n    /**\n     * @param node type to be inspected.\n     * @returns name of simple type or null\n     */\n    function getTypeReferenceName(node) {\n      if (node) {\n        switch (node.type) {\n          case utils_1.AST_NODE_TYPES.TSTypeAnnotation:\n            return getTypeReferenceName(node.typeAnnotation);\n\n          case utils_1.AST_NODE_TYPES.TSTypeReference:\n            return getTypeReferenceName(node.typeName);\n\n          case utils_1.AST_NODE_TYPES.Identifier:\n            return node.name;\n\n          default:\n            break;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * @param parent parent node.\n     * @param returnType type to be compared\n     */\n\n\n    function isMatchingParentType(parent, returnType) {\n      if (parent && 'id' in parent && parent.id && parent.id.type === utils_1.AST_NODE_TYPES.Identifier) {\n        return getTypeReferenceName(returnType) === parent.id.name;\n      }\n\n      return false;\n    }\n\n    return {\n      'TSInterfaceBody > TSConstructSignatureDeclaration'(node) {\n        if (isMatchingParentType(node.parent.parent, node.returnType)) {\n          // constructor\n          context.report({\n            node,\n            messageId: 'errorMessageInterface'\n          });\n        }\n      },\n\n      \"TSMethodSignature[key.name='constructor']\"(node) {\n        context.report({\n          node,\n          messageId: 'errorMessageInterface'\n        });\n      },\n\n      \"ClassBody > MethodDefinition[key.name='new']\"(node) {\n        if (node.value.type === utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression) {\n          if (node.parent && isMatchingParentType(node.parent.parent, node.value.returnType)) {\n            context.report({\n              node,\n              messageId: 'errorMessageClass'\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AAEAA,kBAAeC,IAAI,CAACC,UAAL,CAAgB;EAC7BC,IAAI,EAAE,gBADuB;EAE7BC,IAAI,EAAE;IACJC,IAAI,EAAE,SADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EAAE,qDADT;MAEJC,WAAW,EAAE;IAFT,CAFF;IAMJC,MAAM,EAAE,EANJ;IAOJC,QAAQ,EAAE;MACRC,qBAAqB,EAAE,iDADf;MAERC,iBAAiB,EAAE;IAFX;EAPN,CAFuB;EAc7BC,cAAc,EAAE,EAda;;EAe7BC,MAAM,CAACC,OAAD,EAAQ;IACZ;;;;IAIA,SAASC,oBAAT,CACEC,IADF,EAKe;MAEb,IAAIA,IAAJ,EAAU;QACR,QAAQA,IAAI,CAACZ,IAAb;UACE,KAAKa,uBAAeC,gBAApB;YACE,OAAOH,oBAAoB,CAACC,IAAI,CAACG,cAAN,CAA3B;;UACF,KAAKF,uBAAeG,eAApB;YACE,OAAOL,oBAAoB,CAACC,IAAI,CAACK,QAAN,CAA3B;;UACF,KAAKJ,uBAAeK,UAApB;YACE,OAAON,IAAI,CAACd,IAAZ;;UACF;YACE;QARJ;MAUD;;MACD,OAAO,IAAP;IACD;IAED;;;;;;IAIA,SAASqB,oBAAT,CACEC,MADF,EAEEC,UAFF,EAEmD;MAEjD,IACED,MAAM,IACN,QAAQA,MADR,IAEAA,MAAM,CAACE,EAFP,IAGAF,MAAM,CAACE,EAAP,CAAUtB,IAAV,KAAmBa,uBAAeK,UAJpC,EAKE;QACA,OAAOP,oBAAoB,CAACU,UAAD,CAApB,KAAqCD,MAAM,CAACE,EAAP,CAAUxB,IAAtD;MACD;;MACD,OAAO,KAAP;IACD;;IAED,OAAO;MACL,oDACEc,IADF,EACgD;QAE9C,IACEO,oBAAoB,CAClBP,IAAI,CAACQ,MAAL,CAAaA,MADK,EAElBR,IAAI,CAACS,UAFa,CADtB,EAKE;UACA;UACAX,OAAO,CAACa,MAAR,CAAe;YACbX,IADa;YAEbY,SAAS,EAAE;UAFE,CAAf;QAID;MACF,CAhBI;;MAiBL,4CACEZ,IADF,EACkC;QAEhCF,OAAO,CAACa,MAAR,CAAe;UACbX,IADa;UAEbY,SAAS,EAAE;QAFE,CAAf;MAID,CAxBI;;MAyBL,+CACEZ,IADF,EACiC;QAE/B,IAAIA,IAAI,CAACa,KAAL,CAAWzB,IAAX,KAAoBa,uBAAea,6BAAvC,EAAsE;UACpE,IACEd,IAAI,CAACQ,MAAL,IACAD,oBAAoB,CAACP,IAAI,CAACQ,MAAL,CAAYA,MAAb,EAAqBR,IAAI,CAACa,KAAL,CAAWJ,UAAhC,CAFtB,EAGE;YACAX,OAAO,CAACa,MAAR,CAAe;cACbX,IADa;cAEbY,SAAS,EAAE;YAFE,CAAf;UAID;QACF;MACF;;IAvCI,CAAP;EAyCD;;AAtG4B,CAAhB,CAAf","names":["exports","util","createRule","name","meta","type","docs","description","recommended","schema","messages","errorMessageInterface","errorMessageClass","defaultOptions","create","context","getTypeReferenceName","node","utils_1","TSTypeAnnotation","typeAnnotation","TSTypeReference","typeName","Identifier","isMatchingParentType","parent","returnType","id","report","messageId","value","TSEmptyBodyFunctionExpression"],"sources":["../../src/rules/no-misused-new.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}