{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: () => parseAnimationValue\n});\nconst DIRECTIONS = new Set([\"normal\", \"reverse\", \"alternate\", \"alternate-reverse\"]);\nconst PLAY_STATES = new Set([\"running\", \"paused\"]);\nconst FILL_MODES = new Set([\"none\", \"forwards\", \"backwards\", \"both\"]);\nconst ITERATION_COUNTS = new Set([\"infinite\"]);\nconst TIMINGS = new Set([\"linear\", \"ease\", \"ease-in\", \"ease-out\", \"ease-in-out\", \"step-start\", \"step-end\"]);\nconst TIMING_FNS = [\"cubic-bezier\", \"steps\"];\nconst COMMA = /\\,(?![^(]*\\))/g // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.\n;\nconst SPACE = /\\ +(?![^(]*\\))/g // Similar to the one above, but with spaces instead.\n;\nconst TIME = /^(-?[\\d.]+m?s)$/;\nconst DIGIT = /^(\\d+)$/;\n\nfunction parseAnimationValue(input) {\n  let animations = input.split(COMMA);\n  return animations.map(animation => {\n    let value = animation.trim();\n    let result = {\n      value\n    };\n    let parts = value.split(SPACE);\n    let seen = new Set();\n\n    for (let part of parts) {\n      if (!seen.has(\"DIRECTIONS\") && DIRECTIONS.has(part)) {\n        result.direction = part;\n        seen.add(\"DIRECTIONS\");\n      } else if (!seen.has(\"PLAY_STATES\") && PLAY_STATES.has(part)) {\n        result.playState = part;\n        seen.add(\"PLAY_STATES\");\n      } else if (!seen.has(\"FILL_MODES\") && FILL_MODES.has(part)) {\n        result.fillMode = part;\n        seen.add(\"FILL_MODES\");\n      } else if (!seen.has(\"ITERATION_COUNTS\") && (ITERATION_COUNTS.has(part) || DIGIT.test(part))) {\n        result.iterationCount = part;\n        seen.add(\"ITERATION_COUNTS\");\n      } else if (!seen.has(\"TIMING_FUNCTION\") && TIMINGS.has(part)) {\n        result.timingFunction = part;\n        seen.add(\"TIMING_FUNCTION\");\n      } else if (!seen.has(\"TIMING_FUNCTION\") && TIMING_FNS.some(f => part.startsWith(`${f}(`))) {\n        result.timingFunction = part;\n        seen.add(\"TIMING_FUNCTION\");\n      } else if (!seen.has(\"DURATION\") && TIME.test(part)) {\n        result.duration = part;\n        seen.add(\"DURATION\");\n      } else if (!seen.has(\"DELAY\") && TIME.test(part)) {\n        result.delay = part;\n        seen.add(\"DELAY\");\n      } else if (!seen.has(\"NAME\")) {\n        result.name = part;\n        seen.add(\"NAME\");\n      } else {\n        if (!result.unknown) result.unknown = [];\n        result.unknown.push(part);\n      }\n    }\n\n    return result;\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","parseAnimationValue","DIRECTIONS","Set","PLAY_STATES","FILL_MODES","ITERATION_COUNTS","TIMINGS","TIMING_FNS","COMMA","SPACE","TIME","DIGIT","input","animations","split","map","animation","trim","result","parts","seen","part","has","direction","add","playState","fillMode","test","iterationCount","timingFunction","some","f","startsWith","duration","delay","name","unknown","push"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/lib/util/parseAnimationValue.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: ()=>parseAnimationValue\n});\nconst DIRECTIONS = new Set([\n    \"normal\",\n    \"reverse\",\n    \"alternate\",\n    \"alternate-reverse\"\n]);\nconst PLAY_STATES = new Set([\n    \"running\",\n    \"paused\"\n]);\nconst FILL_MODES = new Set([\n    \"none\",\n    \"forwards\",\n    \"backwards\",\n    \"both\"\n]);\nconst ITERATION_COUNTS = new Set([\n    \"infinite\"\n]);\nconst TIMINGS = new Set([\n    \"linear\",\n    \"ease\",\n    \"ease-in\",\n    \"ease-out\",\n    \"ease-in-out\",\n    \"step-start\",\n    \"step-end\", \n]);\nconst TIMING_FNS = [\n    \"cubic-bezier\",\n    \"steps\"\n];\nconst COMMA = /\\,(?![^(]*\\))/g // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.\n;\nconst SPACE = /\\ +(?![^(]*\\))/g // Similar to the one above, but with spaces instead.\n;\nconst TIME = /^(-?[\\d.]+m?s)$/;\nconst DIGIT = /^(\\d+)$/;\nfunction parseAnimationValue(input) {\n    let animations = input.split(COMMA);\n    return animations.map((animation)=>{\n        let value = animation.trim();\n        let result = {\n            value\n        };\n        let parts = value.split(SPACE);\n        let seen = new Set();\n        for (let part of parts){\n            if (!seen.has(\"DIRECTIONS\") && DIRECTIONS.has(part)) {\n                result.direction = part;\n                seen.add(\"DIRECTIONS\");\n            } else if (!seen.has(\"PLAY_STATES\") && PLAY_STATES.has(part)) {\n                result.playState = part;\n                seen.add(\"PLAY_STATES\");\n            } else if (!seen.has(\"FILL_MODES\") && FILL_MODES.has(part)) {\n                result.fillMode = part;\n                seen.add(\"FILL_MODES\");\n            } else if (!seen.has(\"ITERATION_COUNTS\") && (ITERATION_COUNTS.has(part) || DIGIT.test(part))) {\n                result.iterationCount = part;\n                seen.add(\"ITERATION_COUNTS\");\n            } else if (!seen.has(\"TIMING_FUNCTION\") && TIMINGS.has(part)) {\n                result.timingFunction = part;\n                seen.add(\"TIMING_FUNCTION\");\n            } else if (!seen.has(\"TIMING_FUNCTION\") && TIMING_FNS.some((f)=>part.startsWith(`${f}(`))) {\n                result.timingFunction = part;\n                seen.add(\"TIMING_FUNCTION\");\n            } else if (!seen.has(\"DURATION\") && TIME.test(part)) {\n                result.duration = part;\n                seen.add(\"DURATION\");\n            } else if (!seen.has(\"DELAY\") && TIME.test(part)) {\n                result.delay = part;\n                seen.add(\"DELAY\");\n            } else if (!seen.has(\"NAME\")) {\n                result.name = part;\n                seen.add(\"NAME\");\n            } else {\n                if (!result.unknown) result.unknown = [];\n                result.unknown.push(part);\n            }\n        }\n        return result;\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}