{"ast":null,"code":"/**\n * Extractor function for a OptionalCallExpression type value node.\n * A member expression is accessing a property on an object `obj.property` and invoking it.\n *\n * @param - value - AST Value object with type `OptionalCallExpression`\n * @returns - The extracted value converted to correct type\n *  and maintaing `obj.property?.()` convention.\n */\nexport default function extractValueFromOptionalCallExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n\n  return `${getValue(value.callee)}?.(${value.arguments.map(x => getValue(x)).join(', ')})`;\n}","map":{"version":3,"names":["extractValueFromOptionalCallExpression","value","getValue","require","default","callee","arguments","map","x","join"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/src/values/expressions/OptionalCallExpression.js"],"sourcesContent":["/**\n * Extractor function for a OptionalCallExpression type value node.\n * A member expression is accessing a property on an object `obj.property` and invoking it.\n *\n * @param - value - AST Value object with type `OptionalCallExpression`\n * @returns - The extracted value converted to correct type\n *  and maintaing `obj.property?.()` convention.\n */\nexport default function extractValueFromOptionalCallExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n  return `${getValue(value.callee)}?.(${value.arguments.map((x) => getValue(x)).join(', ')})`;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,sCAAT,CAAgDC,KAAhD,EAAuD;EACpE;EACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,GAAD,CAAP,CAAaC,OAA9B;;EACA,OAAQ,GAAEF,QAAQ,CAACD,KAAK,CAACI,MAAP,CAAe,MAAKJ,KAAK,CAACK,SAAN,CAAgBC,GAAhB,CAAqBC,CAAD,IAAON,QAAQ,CAACM,CAAD,CAAnC,EAAwCC,IAAxC,CAA6C,IAA7C,CAAmD,GAAzF;AACD"},"metadata":{},"sourceType":"module"}