{"ast":null,"code":"'use strict';\n\nconst constants = require('constants');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst Q = require('q');\n\nconst shell = require('./shell');\n\nconst escape = shell.escape;\nconst unescape = shell.unescape;\n/**\n * Most of the code adopted from the npm package shell completion code.\n * See https://github.com/isaacs/npm/blob/master/lib/completion.js\n *\n * @returns {COA.CoaObject}\n */\n\nmodule.exports = function completion() {\n  return this.title('Shell completion').helpful().arg().name('raw').title('Completion words').arr().end().act((opts, args) => {\n    if (process.platform === 'win32') {\n      const e = new Error('shell completion not supported on windows');\n      e.code = 'ENOTSUP';\n      e.errno = constants.ENOTSUP;\n      return this.reject(e);\n    } // if the COMP_* isn't in the env, then just dump the script\n\n\n    if (process.env.COMP_CWORD == null || process.env.COMP_LINE == null || process.env.COMP_POINT == null) {\n      return dumpScript(this._cmd._name);\n    }\n\n    console.error('COMP_LINE:  %s', process.env.COMP_LINE);\n    console.error('COMP_CWORD: %s', process.env.COMP_CWORD);\n    console.error('COMP_POINT: %s', process.env.COMP_POINT);\n    console.error('args: %j', args.raw); // completion opts\n\n    opts = getOpts(args.raw); // cmd\n\n    const parsed = this._cmd._parseCmd(opts.partialWords);\n\n    return Q.when(complete(parsed.cmd, parsed.opts), compls => {\n      console.error('filtered: %j', compls);\n      return console.log(compls.map(escape).join('\\n'));\n    });\n  });\n};\n\nfunction dumpScript(name) {\n  const defer = Q.defer();\n  fs.readFile(path.resolve(__dirname, 'completion.sh'), 'utf8', function (err, d) {\n    if (err) return defer.reject(err);\n    d = d.replace(/{{cmd}}/g, path.basename(name)).replace(/^#!.*?\\n/, '');\n    process.stdout.on('error', onError);\n    process.stdout.write(d, () => defer.resolve());\n  });\n  return defer.promise;\n\n  function onError(err) {\n    // Darwin is a real dick sometimes.\n    //\n    // This is necessary because the \"source\" or \".\" program in\n    // bash on OS X closes its file argument before reading\n    // from it, meaning that you get exactly 1 write, which will\n    // work most of the time, and will always raise an EPIPE.\n    //\n    // Really, one should not be tossing away EPIPE errors, or any\n    // errors, so casually. But, without this, `. <(cmd completion)`\n    // can never ever work on OS X.\n    if (err.errno !== constants.EPIPE) return defer.reject(err);\n    process.stdout.removeListener('error', onError);\n    return defer.resolve();\n  }\n}\n\nfunction getOpts(argv) {\n  // get the partial line and partial word, if the point isn't at the end\n  // ie, tabbing at: cmd foo b|ar\n  const line = process.env.COMP_LINE;\n  const w = +process.env.COMP_CWORD;\n  const point = +process.env.COMP_POINT;\n  const words = argv.map(unescape);\n  const word = words[w];\n  const partialLine = line.substr(0, point);\n  const partialWords = words.slice(0, w); // figure out where in that last word the point is\n\n  let partialWord = argv[w] || '';\n  let i = partialWord.length;\n\n  while (partialWord.substr(0, i) !== partialLine.substr(-1 * i) && i > 0) i--;\n\n  partialWord = unescape(partialWord.substr(0, i));\n  partialWord && partialWords.push(partialWord);\n  return {\n    line,\n    w,\n    point,\n    words,\n    word,\n    partialLine,\n    partialWords,\n    partialWord\n  };\n}\n\nfunction complete(cmd, opts) {\n  let optWord,\n      optPrefix,\n      compls = []; // Complete on cmds\n\n  if (opts.partialWord.indexOf('-')) compls = Object.keys(cmd._cmdsByName); // Complete on required opts without '-' in last partial word\n  // (if required not already specified)\n  //\n  // Commented out because of uselessness:\n  // -b, --block suggest results in '-' on cmd line;\n  // next completion suggest all options, because of '-'\n  //.concat Object.keys(cmd._optsByKey).filter (v) -> cmd._optsByKey[v]._req\n  else {\n    // complete on opt values: --opt=| case\n    const m = opts.partialWord.match(/^(--\\w[\\w-_]*)=(.*)$/);\n\n    if (m) {\n      optWord = m[1];\n      optPrefix = optWord + '=';\n    } else // complete on opts\n      // don't complete on opts in case of --opt=val completion\n      // TODO: don't complete on opts in case of unknown arg after commands\n      // TODO: complete only on opts with arr() or not already used\n      // TODO: complete only on full opts?\n      compls = Object.keys(cmd._optsByKey);\n  } // complete on opt values: next arg case\n\n  opts.partialWords[opts.w - 1].indexOf('-') || (optWord = opts.partialWords[opts.w - 1]); // complete on opt values: completion\n\n  let opt;\n  optWord && (opt = cmd._optsByKey[optWord]) && !opt._flag && opt._comp && (compls = Q.join(compls, Q.when(opt._comp(opts), (c, o) => c.concat(o.map(v => (optPrefix || '') + v))))); // TODO: complete on args values (context aware, custom completion?)\n  // custom completion on cmds\n\n  cmd._comp && (compls = Q.join(compls, Q.when(cmd._comp(opts)), (c, o) => c.concat(o))); // TODO: context aware custom completion on cmds, opts and args\n  // (can depend on already entered values, especially options)\n\n  return Q.when(compls, complitions => {\n    console.error('partialWord: %s', opts.partialWord);\n    console.error('compls: %j', complitions);\n    return compls.filter(c => c.indexOf(opts.partialWord) === 0);\n  });\n}","map":{"version":3,"names":["constants","require","fs","path","Q","shell","escape","unescape","module","exports","completion","title","helpful","arg","name","arr","end","act","opts","args","process","platform","e","Error","code","errno","ENOTSUP","reject","env","COMP_CWORD","COMP_LINE","COMP_POINT","dumpScript","_cmd","_name","console","error","raw","getOpts","parsed","_parseCmd","partialWords","when","complete","cmd","compls","log","map","join","defer","readFile","resolve","__dirname","err","d","replace","basename","stdout","on","onError","write","promise","EPIPE","removeListener","argv","line","w","point","words","word","partialLine","substr","slice","partialWord","i","length","push","optWord","optPrefix","indexOf","Object","keys","_cmdsByName","m","match","_optsByKey","opt","_flag","_comp","c","o","concat","v","complitions","filter"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/coa/lib/completion.js"],"sourcesContent":["'use strict';\n\nconst constants = require('constants');\nconst fs = require('fs');\nconst path = require('path');\n\nconst Q = require('q');\n\nconst shell = require('./shell');\nconst escape = shell.escape;\nconst unescape = shell.unescape;\n\n/**\n * Most of the code adopted from the npm package shell completion code.\n * See https://github.com/isaacs/npm/blob/master/lib/completion.js\n *\n * @returns {COA.CoaObject}\n */\nmodule.exports = function completion() {\n    return this\n        .title('Shell completion')\n        .helpful()\n        .arg()\n            .name('raw')\n            .title('Completion words')\n            .arr()\n            .end()\n        .act((opts, args) => {\n            if(process.platform === 'win32') {\n                const e = new Error('shell completion not supported on windows');\n                e.code = 'ENOTSUP';\n                e.errno = constants.ENOTSUP;\n                return this.reject(e);\n            }\n\n            // if the COMP_* isn't in the env, then just dump the script\n            if((process.env.COMP_CWORD == null)\n                || (process.env.COMP_LINE == null)\n                || (process.env.COMP_POINT == null)) {\n                return dumpScript(this._cmd._name);\n            }\n\n            console.error('COMP_LINE:  %s', process.env.COMP_LINE);\n            console.error('COMP_CWORD: %s', process.env.COMP_CWORD);\n            console.error('COMP_POINT: %s', process.env.COMP_POINT);\n            console.error('args: %j', args.raw);\n\n            // completion opts\n            opts = getOpts(args.raw);\n\n            // cmd\n            const parsed = this._cmd._parseCmd(opts.partialWords);\n            return Q.when(complete(parsed.cmd, parsed.opts), compls => {\n                console.error('filtered: %j', compls);\n                return console.log(compls.map(escape).join('\\n'));\n            });\n        });\n};\n\nfunction dumpScript(name) {\n    const defer = Q.defer();\n\n    fs.readFile(path.resolve(__dirname, 'completion.sh'), 'utf8', function(err, d) {\n        if(err) return defer.reject(err);\n        d = d.replace(/{{cmd}}/g, path.basename(name)).replace(/^#!.*?\\n/, '');\n\n        process.stdout.on('error', onError);\n        process.stdout.write(d, () => defer.resolve());\n    });\n\n    return defer.promise;\n\n    function onError(err) {\n        // Darwin is a real dick sometimes.\n        //\n        // This is necessary because the \"source\" or \".\" program in\n        // bash on OS X closes its file argument before reading\n        // from it, meaning that you get exactly 1 write, which will\n        // work most of the time, and will always raise an EPIPE.\n        //\n        // Really, one should not be tossing away EPIPE errors, or any\n        // errors, so casually. But, without this, `. <(cmd completion)`\n        // can never ever work on OS X.\n        if(err.errno !== constants.EPIPE) return defer.reject(err);\n        process.stdout.removeListener('error', onError);\n        return defer.resolve();\n    }\n}\n\nfunction getOpts(argv) {\n    // get the partial line and partial word, if the point isn't at the end\n    // ie, tabbing at: cmd foo b|ar\n    const line = process.env.COMP_LINE;\n    const w = +process.env.COMP_CWORD;\n    const point = +process.env.COMP_POINT;\n    const words = argv.map(unescape);\n    const word = words[w];\n    const partialLine = line.substr(0, point);\n    const partialWords = words.slice(0, w);\n\n    // figure out where in that last word the point is\n    let partialWord = argv[w] || '';\n    let i = partialWord.length;\n    while(partialWord.substr(0, i) !== partialLine.substr(-1 * i) && i > 0) i--;\n\n    partialWord = unescape(partialWord.substr(0, i));\n    partialWord && partialWords.push(partialWord);\n\n    return {\n        line,\n        w,\n        point,\n        words,\n        word,\n        partialLine,\n        partialWords,\n        partialWord\n    };\n}\n\nfunction complete(cmd, opts) {\n    let optWord, optPrefix,\n        compls = [];\n\n    // Complete on cmds\n    if(opts.partialWord.indexOf('-'))\n        compls = Object.keys(cmd._cmdsByName);\n        // Complete on required opts without '-' in last partial word\n        // (if required not already specified)\n        //\n        // Commented out because of uselessness:\n        // -b, --block suggest results in '-' on cmd line;\n        // next completion suggest all options, because of '-'\n        //.concat Object.keys(cmd._optsByKey).filter (v) -> cmd._optsByKey[v]._req\n    else {\n        // complete on opt values: --opt=| case\n        const m = opts.partialWord.match(/^(--\\w[\\w-_]*)=(.*)$/);\n        if(m) {\n            optWord = m[1];\n            optPrefix = optWord + '=';\n        } else\n            // complete on opts\n            // don't complete on opts in case of --opt=val completion\n            // TODO: don't complete on opts in case of unknown arg after commands\n            // TODO: complete only on opts with arr() or not already used\n            // TODO: complete only on full opts?\n            compls = Object.keys(cmd._optsByKey);\n    }\n\n    // complete on opt values: next arg case\n    opts.partialWords[opts.w - 1].indexOf('-') || (optWord = opts.partialWords[opts.w - 1]);\n\n    // complete on opt values: completion\n    let opt;\n    optWord\n        && (opt = cmd._optsByKey[optWord])\n        && !opt._flag\n        && opt._comp\n        && (compls = Q.join(compls,\n            Q.when(opt._comp(opts),\n                (c, o) => c.concat(o.map(v => (optPrefix || '') + v)))));\n\n    // TODO: complete on args values (context aware, custom completion?)\n\n    // custom completion on cmds\n    cmd._comp && (compls = Q.join(compls, Q.when(cmd._comp(opts)), (c, o) => c.concat(o)));\n\n    // TODO: context aware custom completion on cmds, opts and args\n    // (can depend on already entered values, especially options)\n\n    return Q.when(compls, complitions => {\n        console.error('partialWord: %s', opts.partialWord);\n        console.error('compls: %j', complitions);\n        return compls.filter(c => c.indexOf(opts.partialWord) === 0);\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}