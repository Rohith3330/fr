{"ast":null,"code":"/**\n * class HelpFormatter\n *\n * Formatter for generating usage messages and argument help strings. Only the\n * name of this class is considered a public API. All the methods provided by\n * the class are considered an implementation detail.\n *\n * Do not call in your code, use this class only for inherits your own forvatter\n *\n * ToDo add [additonal formatters][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#formatter-class\n **/\n'use strict';\n\nvar sprintf = require('sprintf-js').sprintf; // Constants\n\n\nvar c = require('../const');\n\nvar $$ = require('../utils');\n/*:nodoc:* internal\n * new Support(parent, heding)\n * - parent (object): parent section\n * - heading (string): header string\n *\n **/\n\n\nfunction Section(parent, heading) {\n  this._parent = parent;\n  this._heading = heading;\n  this._items = [];\n}\n/*:nodoc:* internal\n * Section#addItem(callback) -> Void\n * - callback (array): tuple with function and args\n *\n * Add function for single element\n **/\n\n\nSection.prototype.addItem = function (callback) {\n  this._items.push(callback);\n};\n/*:nodoc:* internal\n * Section#formatHelp(formatter) -> string\n * - formatter (HelpFormatter): current formatter\n *\n * Form help section string\n *\n **/\n\n\nSection.prototype.formatHelp = function (formatter) {\n  var itemHelp, heading; // format the indented section\n\n  if (this._parent) {\n    formatter._indent();\n  }\n\n  itemHelp = this._items.map(function (item) {\n    var obj, func, args;\n    obj = formatter;\n    func = item[0];\n    args = item[1];\n    return func.apply(obj, args);\n  });\n  itemHelp = formatter._joinParts(itemHelp);\n\n  if (this._parent) {\n    formatter._dedent();\n  } // return nothing if the section was empty\n\n\n  if (!itemHelp) {\n    return '';\n  } // add the heading if the section was non-empty\n\n\n  heading = '';\n\n  if (this._heading && this._heading !== c.SUPPRESS) {\n    var currentIndent = formatter.currentIndent;\n    heading = $$.repeat(' ', currentIndent) + this._heading + ':' + c.EOL;\n  } // join the section-initialize newline, the heading and the help\n\n\n  return formatter._joinParts([c.EOL, heading, itemHelp, c.EOL]);\n};\n/**\n * new HelpFormatter(options)\n *\n * #### Options:\n * - `prog`: program name\n * - `indentIncriment`: indent step, default value 2\n * - `maxHelpPosition`: max help position, default value = 24\n * - `width`: line width\n *\n **/\n\n\nvar HelpFormatter = module.exports = function HelpFormatter(options) {\n  options = options || {};\n  this._prog = options.prog;\n  this._maxHelpPosition = options.maxHelpPosition || 24;\n  this._width = options.width || (process.env.COLUMNS || 80) - 2;\n  this._currentIndent = 0;\n  this._indentIncriment = options.indentIncriment || 2;\n  this._level = 0;\n  this._actionMaxLength = 0;\n  this._rootSection = new Section(null);\n  this._currentSection = this._rootSection;\n  this._whitespaceMatcher = new RegExp('\\\\s+', 'g');\n  this._longBreakMatcher = new RegExp(c.EOL + c.EOL + c.EOL + '+', 'g');\n};\n\nHelpFormatter.prototype._indent = function () {\n  this._currentIndent += this._indentIncriment;\n  this._level += 1;\n};\n\nHelpFormatter.prototype._dedent = function () {\n  this._currentIndent -= this._indentIncriment;\n  this._level -= 1;\n\n  if (this._currentIndent < 0) {\n    throw new Error('Indent decreased below 0.');\n  }\n};\n\nHelpFormatter.prototype._addItem = function (func, args) {\n  this._currentSection.addItem([func, args]);\n}; //\n// Message building methods\n//\n\n/**\n * HelpFormatter#startSection(heading) -> Void\n * - heading (string): header string\n *\n * Start new help section\n *\n * See alse [code example][1]\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\n\n\nHelpFormatter.prototype.startSection = function (heading) {\n  this._indent();\n\n  var section = new Section(this._currentSection, heading);\n  var func = section.formatHelp.bind(section);\n\n  this._addItem(func, [this]);\n\n  this._currentSection = section;\n};\n/**\n * HelpFormatter#endSection -> Void\n *\n * End help section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n **/\n\n\nHelpFormatter.prototype.endSection = function () {\n  this._currentSection = this._currentSection._parent;\n\n  this._dedent();\n};\n/**\n * HelpFormatter#addText(text) -> Void\n * - text (string): plain text\n *\n * Add plain text into current section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\n\n\nHelpFormatter.prototype.addText = function (text) {\n  if (text && text !== c.SUPPRESS) {\n    this._addItem(this._formatText, [text]);\n  }\n};\n/**\n * HelpFormatter#addUsage(usage, actions, groups, prefix) -> Void\n * - usage (string): usage text\n * - actions (array): actions list\n * - groups (array): groups list\n * - prefix (string): usage prefix\n *\n * Add usage data into current section\n *\n * ##### Example\n *\n *      formatter.addUsage(this.usage, this._actions, []);\n *      return formatter.formatHelp();\n *\n **/\n\n\nHelpFormatter.prototype.addUsage = function (usage, actions, groups, prefix) {\n  if (usage !== c.SUPPRESS) {\n    this._addItem(this._formatUsage, [usage, actions, groups, prefix]);\n  }\n};\n/**\n * HelpFormatter#addArgument(action) -> Void\n * - action (object): action\n *\n * Add argument into current section\n *\n * Single variant of [[HelpFormatter#addArguments]]\n **/\n\n\nHelpFormatter.prototype.addArgument = function (action) {\n  if (action.help !== c.SUPPRESS) {\n    var self = this; // find all invocations\n\n    var invocations = [this._formatActionInvocation(action)];\n    var invocationLength = invocations[0].length;\n    var actionLength;\n\n    if (action._getSubactions) {\n      this._indent();\n\n      action._getSubactions().forEach(function (subaction) {\n        var invocationNew = self._formatActionInvocation(subaction);\n\n        invocations.push(invocationNew);\n        invocationLength = Math.max(invocationLength, invocationNew.length);\n      });\n\n      this._dedent();\n    } // update the maximum item length\n\n\n    actionLength = invocationLength + this._currentIndent;\n    this._actionMaxLength = Math.max(this._actionMaxLength, actionLength); // add the item to the list\n\n    this._addItem(this._formatAction, [action]);\n  }\n};\n/**\n * HelpFormatter#addArguments(actions) -> Void\n * - actions (array): actions list\n *\n * Mass add arguments into current section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\n\n\nHelpFormatter.prototype.addArguments = function (actions) {\n  var self = this;\n  actions.forEach(function (action) {\n    self.addArgument(action);\n  });\n}; //\n// Help-formatting methods\n//\n\n/**\n * HelpFormatter#formatHelp -> string\n *\n * Format help\n *\n * ##### Example\n *\n *      formatter.addText(this.epilog);\n *      return formatter.formatHelp();\n *\n **/\n\n\nHelpFormatter.prototype.formatHelp = function () {\n  var help = this._rootSection.formatHelp(this);\n\n  if (help) {\n    help = help.replace(this._longBreakMatcher, c.EOL + c.EOL);\n    help = $$.trimChars(help, c.EOL) + c.EOL;\n  }\n\n  return help;\n};\n\nHelpFormatter.prototype._joinParts = function (partStrings) {\n  return partStrings.filter(function (part) {\n    return part && part !== c.SUPPRESS;\n  }).join('');\n};\n\nHelpFormatter.prototype._formatUsage = function (usage, actions, groups, prefix) {\n  if (!prefix && typeof prefix !== 'string') {\n    prefix = 'usage: ';\n  }\n\n  actions = actions || [];\n  groups = groups || []; // if usage is specified, use that\n\n  if (usage) {\n    usage = sprintf(usage, {\n      prog: this._prog\n    }); // if no optionals or positionals are available, usage is just prog\n  } else if (!usage && actions.length === 0) {\n    usage = this._prog; // if optionals and positionals are available, calculate usage\n  } else if (!usage) {\n    var prog = this._prog;\n    var optionals = [];\n    var positionals = [];\n    var actionUsage;\n    var textWidth; // split optionals from positionals\n\n    actions.forEach(function (action) {\n      if (action.isOptional()) {\n        optionals.push(action);\n      } else {\n        positionals.push(action);\n      }\n    }); // build full usage string\n\n    actionUsage = this._formatActionsUsage([].concat(optionals, positionals), groups);\n    usage = [prog, actionUsage].join(' '); // wrap the usage parts if it's too long\n\n    textWidth = this._width - this._currentIndent;\n\n    if (prefix.length + usage.length > textWidth) {\n      // break usage into wrappable parts\n      var regexpPart = new RegExp('\\\\(.*?\\\\)+|\\\\[.*?\\\\]+|\\\\S+', 'g');\n\n      var optionalUsage = this._formatActionsUsage(optionals, groups);\n\n      var positionalUsage = this._formatActionsUsage(positionals, groups);\n\n      var optionalParts = optionalUsage.match(regexpPart);\n      var positionalParts = positionalUsage.match(regexpPart) || [];\n\n      if (optionalParts.join(' ') !== optionalUsage) {\n        throw new Error('assert \"optionalParts.join(\\' \\') === optionalUsage\"');\n      }\n\n      if (positionalParts.join(' ') !== positionalUsage) {\n        throw new Error('assert \"positionalParts.join(\\' \\') === positionalUsage\"');\n      } // helper for wrapping lines\n\n      /*eslint-disable func-style*/\n      // node 0.10 compat\n\n\n      var _getLines = function (parts, indent, prefix) {\n        var lines = [];\n        var line = [];\n        var lineLength = prefix ? prefix.length - 1 : indent.length - 1;\n        parts.forEach(function (part) {\n          if (lineLength + 1 + part.length > textWidth) {\n            lines.push(indent + line.join(' '));\n            line = [];\n            lineLength = indent.length - 1;\n          }\n\n          line.push(part);\n          lineLength += part.length + 1;\n        });\n\n        if (line) {\n          lines.push(indent + line.join(' '));\n        }\n\n        if (prefix) {\n          lines[0] = lines[0].substr(indent.length);\n        }\n\n        return lines;\n      };\n\n      var lines, indent, parts; // if prog is short, follow it with optionals or positionals\n\n      if (prefix.length + prog.length <= 0.75 * textWidth) {\n        indent = $$.repeat(' ', prefix.length + prog.length + 1);\n\n        if (optionalParts) {\n          lines = [].concat(_getLines([prog].concat(optionalParts), indent, prefix), _getLines(positionalParts, indent));\n        } else if (positionalParts) {\n          lines = _getLines([prog].concat(positionalParts), indent, prefix);\n        } else {\n          lines = [prog];\n        } // if prog is long, put it on its own line\n\n      } else {\n        indent = $$.repeat(' ', prefix.length);\n        parts = optionalParts.concat(positionalParts);\n        lines = _getLines(parts, indent);\n\n        if (lines.length > 1) {\n          lines = [].concat(_getLines(optionalParts, indent), _getLines(positionalParts, indent));\n        }\n\n        lines = [prog].concat(lines);\n      } // join lines into usage\n\n\n      usage = lines.join(c.EOL);\n    }\n  } // prefix with 'usage:'\n\n\n  return prefix + usage + c.EOL + c.EOL;\n};\n\nHelpFormatter.prototype._formatActionsUsage = function (actions, groups) {\n  // find group indices and identify actions in groups\n  var groupActions = [];\n  var inserts = [];\n  var self = this;\n  groups.forEach(function (group) {\n    var end;\n    var i;\n    var start = actions.indexOf(group._groupActions[0]);\n\n    if (start >= 0) {\n      end = start + group._groupActions.length; //if (actions.slice(start, end) === group._groupActions) {\n\n      if ($$.arrayEqual(actions.slice(start, end), group._groupActions)) {\n        group._groupActions.forEach(function (action) {\n          groupActions.push(action);\n        });\n\n        if (!group.required) {\n          if (inserts[start]) {\n            inserts[start] += ' [';\n          } else {\n            inserts[start] = '[';\n          }\n\n          inserts[end] = ']';\n        } else {\n          if (inserts[start]) {\n            inserts[start] += ' (';\n          } else {\n            inserts[start] = '(';\n          }\n\n          inserts[end] = ')';\n        }\n\n        for (i = start + 1; i < end; i += 1) {\n          inserts[i] = '|';\n        }\n      }\n    }\n  }); // collect all actions format strings\n\n  var parts = [];\n  actions.forEach(function (action, actionIndex) {\n    var part;\n    var optionString;\n    var argsDefault;\n    var argsString; // suppressed arguments are marked with None\n    // remove | separators for suppressed arguments\n\n    if (action.help === c.SUPPRESS) {\n      parts.push(null);\n\n      if (inserts[actionIndex] === '|') {\n        inserts.splice(actionIndex, actionIndex);\n      } else if (inserts[actionIndex + 1] === '|') {\n        inserts.splice(actionIndex + 1, actionIndex + 1);\n      } // produce all arg strings\n\n    } else if (!action.isOptional()) {\n      part = self._formatArgs(action, action.dest); // if it's in a group, strip the outer []\n\n      if (groupActions.indexOf(action) >= 0) {\n        if (part[0] === '[' && part[part.length - 1] === ']') {\n          part = part.slice(1, -1);\n        }\n      } // add the action string to the list\n\n\n      parts.push(part); // produce the first way to invoke the option in brackets\n    } else {\n      optionString = action.optionStrings[0]; // if the Optional doesn't take a value, format is: -s or --long\n\n      if (action.nargs === 0) {\n        part = '' + optionString; // if the Optional takes a value, format is: -s ARGS or --long ARGS\n      } else {\n        argsDefault = action.dest.toUpperCase();\n        argsString = self._formatArgs(action, argsDefault);\n        part = optionString + ' ' + argsString;\n      } // make it look optional if it's not required or in a group\n\n\n      if (!action.required && groupActions.indexOf(action) < 0) {\n        part = '[' + part + ']';\n      } // add the action string to the list\n\n\n      parts.push(part);\n    }\n  }); // insert things at the necessary indices\n\n  for (var i = inserts.length - 1; i >= 0; --i) {\n    if (inserts[i] !== null) {\n      parts.splice(i, 0, inserts[i]);\n    }\n  } // join all the action items with spaces\n\n\n  var text = parts.filter(function (part) {\n    return !!part;\n  }).join(' '); // clean up separators for mutually exclusive groups\n\n  text = text.replace(/([\\[(]) /g, '$1'); // remove spaces\n\n  text = text.replace(/ ([\\])])/g, '$1');\n  text = text.replace(/\\[ *\\]/g, ''); // remove empty groups\n\n  text = text.replace(/\\( *\\)/g, '');\n  text = text.replace(/\\(([^|]*)\\)/g, '$1'); // remove () from single action groups\n\n  text = text.trim(); // return the text\n\n  return text;\n};\n\nHelpFormatter.prototype._formatText = function (text) {\n  text = sprintf(text, {\n    prog: this._prog\n  });\n  var textWidth = this._width - this._currentIndent;\n  var indentIncriment = $$.repeat(' ', this._currentIndent);\n  return this._fillText(text, textWidth, indentIncriment) + c.EOL + c.EOL;\n};\n\nHelpFormatter.prototype._formatAction = function (action) {\n  var self = this;\n  var helpText;\n  var helpLines;\n  var parts;\n  var indentFirst; // determine the required width and the entry label\n\n  var helpPosition = Math.min(this._actionMaxLength + 2, this._maxHelpPosition);\n  var helpWidth = this._width - helpPosition;\n  var actionWidth = helpPosition - this._currentIndent - 2;\n\n  var actionHeader = this._formatActionInvocation(action); // no help; start on same line and add a final newline\n\n\n  if (!action.help) {\n    actionHeader = $$.repeat(' ', this._currentIndent) + actionHeader + c.EOL; // short action name; start on the same line and pad two spaces\n  } else if (actionHeader.length <= actionWidth) {\n    actionHeader = $$.repeat(' ', this._currentIndent) + actionHeader + '  ' + $$.repeat(' ', actionWidth - actionHeader.length);\n    indentFirst = 0; // long action name; start on the next line\n  } else {\n    actionHeader = $$.repeat(' ', this._currentIndent) + actionHeader + c.EOL;\n    indentFirst = helpPosition;\n  } // collect the pieces of the action help\n\n\n  parts = [actionHeader]; // if there was help for the action, add lines of help text\n\n  if (action.help) {\n    helpText = this._expandHelp(action);\n    helpLines = this._splitLines(helpText, helpWidth);\n    parts.push($$.repeat(' ', indentFirst) + helpLines[0] + c.EOL);\n    helpLines.slice(1).forEach(function (line) {\n      parts.push($$.repeat(' ', helpPosition) + line + c.EOL);\n    }); // or add a newline if the description doesn't end with one\n  } else if (actionHeader.charAt(actionHeader.length - 1) !== c.EOL) {\n    parts.push(c.EOL);\n  } // if there are any sub-actions, add their help as well\n\n\n  if (action._getSubactions) {\n    this._indent();\n\n    action._getSubactions().forEach(function (subaction) {\n      parts.push(self._formatAction(subaction));\n    });\n\n    this._dedent();\n  } // return a single string\n\n\n  return this._joinParts(parts);\n};\n\nHelpFormatter.prototype._formatActionInvocation = function (action) {\n  if (!action.isOptional()) {\n    var format_func = this._metavarFormatter(action, action.dest);\n\n    var metavars = format_func(1);\n    return metavars[0];\n  }\n\n  var parts = [];\n  var argsDefault;\n  var argsString; // if the Optional doesn't take a value, format is: -s, --long\n\n  if (action.nargs === 0) {\n    parts = parts.concat(action.optionStrings); // if the Optional takes a value, format is: -s ARGS, --long ARGS\n  } else {\n    argsDefault = action.dest.toUpperCase();\n    argsString = this._formatArgs(action, argsDefault);\n    action.optionStrings.forEach(function (optionString) {\n      parts.push(optionString + ' ' + argsString);\n    });\n  }\n\n  return parts.join(', ');\n};\n\nHelpFormatter.prototype._metavarFormatter = function (action, metavarDefault) {\n  var result;\n\n  if (action.metavar || action.metavar === '') {\n    result = action.metavar;\n  } else if (action.choices) {\n    var choices = action.choices;\n\n    if (typeof choices === 'string') {\n      choices = choices.split('').join(', ');\n    } else if (Array.isArray(choices)) {\n      choices = choices.join(',');\n    } else {\n      choices = Object.keys(choices).join(',');\n    }\n\n    result = '{' + choices + '}';\n  } else {\n    result = metavarDefault;\n  }\n\n  return function (size) {\n    if (Array.isArray(result)) {\n      return result;\n    }\n\n    var metavars = [];\n\n    for (var i = 0; i < size; i += 1) {\n      metavars.push(result);\n    }\n\n    return metavars;\n  };\n};\n\nHelpFormatter.prototype._formatArgs = function (action, metavarDefault) {\n  var result;\n  var metavars;\n\n  var buildMetavar = this._metavarFormatter(action, metavarDefault);\n\n  switch (action.nargs) {\n    /*eslint-disable no-undefined*/\n    case undefined:\n    case null:\n      metavars = buildMetavar(1);\n      result = '' + metavars[0];\n      break;\n\n    case c.OPTIONAL:\n      metavars = buildMetavar(1);\n      result = '[' + metavars[0] + ']';\n      break;\n\n    case c.ZERO_OR_MORE:\n      metavars = buildMetavar(2);\n      result = '[' + metavars[0] + ' [' + metavars[1] + ' ...]]';\n      break;\n\n    case c.ONE_OR_MORE:\n      metavars = buildMetavar(2);\n      result = '' + metavars[0] + ' [' + metavars[1] + ' ...]';\n      break;\n\n    case c.REMAINDER:\n      result = '...';\n      break;\n\n    case c.PARSER:\n      metavars = buildMetavar(1);\n      result = metavars[0] + ' ...';\n      break;\n\n    default:\n      metavars = buildMetavar(action.nargs);\n      result = metavars.join(' ');\n  }\n\n  return result;\n};\n\nHelpFormatter.prototype._expandHelp = function (action) {\n  var params = {\n    prog: this._prog\n  };\n  Object.keys(action).forEach(function (actionProperty) {\n    var actionValue = action[actionProperty];\n\n    if (actionValue !== c.SUPPRESS) {\n      params[actionProperty] = actionValue;\n    }\n  });\n\n  if (params.choices) {\n    if (typeof params.choices === 'string') {\n      params.choices = params.choices.split('').join(', ');\n    } else if (Array.isArray(params.choices)) {\n      params.choices = params.choices.join(', ');\n    } else {\n      params.choices = Object.keys(params.choices).join(', ');\n    }\n  }\n\n  return sprintf(this._getHelpString(action), params);\n};\n\nHelpFormatter.prototype._splitLines = function (text, width) {\n  var lines = [];\n  var delimiters = [' ', '.', ',', '!', '?'];\n  var re = new RegExp('[' + delimiters.join('') + '][^' + delimiters.join('') + ']*$');\n  text = text.replace(/[\\n\\|\\t]/g, ' ');\n  text = text.trim();\n  text = text.replace(this._whitespaceMatcher, ' '); // Wraps the single paragraph in text (a string) so every line\n  // is at most width characters long.\n\n  text.split(c.EOL).forEach(function (line) {\n    if (width >= line.length) {\n      lines.push(line);\n      return;\n    }\n\n    var wrapStart = 0;\n    var wrapEnd = width;\n    var delimiterIndex = 0;\n\n    while (wrapEnd <= line.length) {\n      if (wrapEnd !== line.length && delimiters.indexOf(line[wrapEnd] < -1)) {\n        delimiterIndex = (re.exec(line.substring(wrapStart, wrapEnd)) || {}).index;\n        wrapEnd = wrapStart + delimiterIndex + 1;\n      }\n\n      lines.push(line.substring(wrapStart, wrapEnd));\n      wrapStart = wrapEnd;\n      wrapEnd += width;\n    }\n\n    if (wrapStart < line.length) {\n      lines.push(line.substring(wrapStart, wrapEnd));\n    }\n  });\n  return lines;\n};\n\nHelpFormatter.prototype._fillText = function (text, width, indent) {\n  var lines = this._splitLines(text, width);\n\n  lines = lines.map(function (line) {\n    return indent + line;\n  });\n  return lines.join(c.EOL);\n};\n\nHelpFormatter.prototype._getHelpString = function (action) {\n  return action.help;\n};","map":{"version":3,"names":["sprintf","require","c","$$","Section","parent","heading","_parent","_heading","_items","prototype","addItem","callback","push","formatHelp","formatter","itemHelp","_indent","map","item","obj","func","args","apply","_joinParts","_dedent","SUPPRESS","currentIndent","repeat","EOL","HelpFormatter","module","exports","options","_prog","prog","_maxHelpPosition","maxHelpPosition","_width","width","process","env","COLUMNS","_currentIndent","_indentIncriment","indentIncriment","_level","_actionMaxLength","_rootSection","_currentSection","_whitespaceMatcher","RegExp","_longBreakMatcher","Error","_addItem","startSection","section","bind","endSection","addText","text","_formatText","addUsage","usage","actions","groups","prefix","_formatUsage","addArgument","action","help","self","invocations","_formatActionInvocation","invocationLength","length","actionLength","_getSubactions","forEach","subaction","invocationNew","Math","max","_formatAction","addArguments","replace","trimChars","partStrings","filter","part","join","optionals","positionals","actionUsage","textWidth","isOptional","_formatActionsUsage","concat","regexpPart","optionalUsage","positionalUsage","optionalParts","match","positionalParts","_getLines","parts","indent","lines","line","lineLength","substr","groupActions","inserts","group","end","i","start","indexOf","_groupActions","arrayEqual","slice","required","actionIndex","optionString","argsDefault","argsString","splice","_formatArgs","dest","optionStrings","nargs","toUpperCase","trim","_fillText","helpText","helpLines","indentFirst","helpPosition","min","helpWidth","actionWidth","actionHeader","_expandHelp","_splitLines","charAt","format_func","_metavarFormatter","metavars","metavarDefault","result","metavar","choices","split","Array","isArray","Object","keys","size","buildMetavar","undefined","OPTIONAL","ZERO_OR_MORE","ONE_OR_MORE","REMAINDER","PARSER","params","actionProperty","actionValue","_getHelpString","delimiters","re","wrapStart","wrapEnd","delimiterIndex","exec","substring","index"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/argparse/lib/help/formatter.js"],"sourcesContent":["/**\n * class HelpFormatter\n *\n * Formatter for generating usage messages and argument help strings. Only the\n * name of this class is considered a public API. All the methods provided by\n * the class are considered an implementation detail.\n *\n * Do not call in your code, use this class only for inherits your own forvatter\n *\n * ToDo add [additonal formatters][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#formatter-class\n **/\n'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\n// Constants\nvar c = require('../const');\n\nvar $$ = require('../utils');\n\n\n/*:nodoc:* internal\n * new Support(parent, heding)\n * - parent (object): parent section\n * - heading (string): header string\n *\n **/\nfunction Section(parent, heading) {\n  this._parent = parent;\n  this._heading = heading;\n  this._items = [];\n}\n\n/*:nodoc:* internal\n * Section#addItem(callback) -> Void\n * - callback (array): tuple with function and args\n *\n * Add function for single element\n **/\nSection.prototype.addItem = function (callback) {\n  this._items.push(callback);\n};\n\n/*:nodoc:* internal\n * Section#formatHelp(formatter) -> string\n * - formatter (HelpFormatter): current formatter\n *\n * Form help section string\n *\n **/\nSection.prototype.formatHelp = function (formatter) {\n  var itemHelp, heading;\n\n  // format the indented section\n  if (this._parent) {\n    formatter._indent();\n  }\n\n  itemHelp = this._items.map(function (item) {\n    var obj, func, args;\n\n    obj = formatter;\n    func = item[0];\n    args = item[1];\n    return func.apply(obj, args);\n  });\n  itemHelp = formatter._joinParts(itemHelp);\n\n  if (this._parent) {\n    formatter._dedent();\n  }\n\n  // return nothing if the section was empty\n  if (!itemHelp) {\n    return '';\n  }\n\n  // add the heading if the section was non-empty\n  heading = '';\n  if (this._heading && this._heading !== c.SUPPRESS) {\n    var currentIndent = formatter.currentIndent;\n    heading = $$.repeat(' ', currentIndent) + this._heading + ':' + c.EOL;\n  }\n\n  // join the section-initialize newline, the heading and the help\n  return formatter._joinParts([ c.EOL, heading, itemHelp, c.EOL ]);\n};\n\n/**\n * new HelpFormatter(options)\n *\n * #### Options:\n * - `prog`: program name\n * - `indentIncriment`: indent step, default value 2\n * - `maxHelpPosition`: max help position, default value = 24\n * - `width`: line width\n *\n **/\nvar HelpFormatter = module.exports = function HelpFormatter(options) {\n  options = options || {};\n\n  this._prog = options.prog;\n\n  this._maxHelpPosition = options.maxHelpPosition || 24;\n  this._width = (options.width || ((process.env.COLUMNS || 80) - 2));\n\n  this._currentIndent = 0;\n  this._indentIncriment = options.indentIncriment || 2;\n  this._level = 0;\n  this._actionMaxLength = 0;\n\n  this._rootSection = new Section(null);\n  this._currentSection = this._rootSection;\n\n  this._whitespaceMatcher = new RegExp('\\\\s+', 'g');\n  this._longBreakMatcher = new RegExp(c.EOL + c.EOL + c.EOL + '+', 'g');\n};\n\nHelpFormatter.prototype._indent = function () {\n  this._currentIndent += this._indentIncriment;\n  this._level += 1;\n};\n\nHelpFormatter.prototype._dedent = function () {\n  this._currentIndent -= this._indentIncriment;\n  this._level -= 1;\n  if (this._currentIndent < 0) {\n    throw new Error('Indent decreased below 0.');\n  }\n};\n\nHelpFormatter.prototype._addItem = function (func, args) {\n  this._currentSection.addItem([ func, args ]);\n};\n\n//\n// Message building methods\n//\n\n/**\n * HelpFormatter#startSection(heading) -> Void\n * - heading (string): header string\n *\n * Start new help section\n *\n * See alse [code example][1]\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\nHelpFormatter.prototype.startSection = function (heading) {\n  this._indent();\n  var section = new Section(this._currentSection, heading);\n  var func = section.formatHelp.bind(section);\n  this._addItem(func, [ this ]);\n  this._currentSection = section;\n};\n\n/**\n * HelpFormatter#endSection -> Void\n *\n * End help section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n **/\nHelpFormatter.prototype.endSection = function () {\n  this._currentSection = this._currentSection._parent;\n  this._dedent();\n};\n\n/**\n * HelpFormatter#addText(text) -> Void\n * - text (string): plain text\n *\n * Add plain text into current section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\nHelpFormatter.prototype.addText = function (text) {\n  if (text && text !== c.SUPPRESS) {\n    this._addItem(this._formatText, [ text ]);\n  }\n};\n\n/**\n * HelpFormatter#addUsage(usage, actions, groups, prefix) -> Void\n * - usage (string): usage text\n * - actions (array): actions list\n * - groups (array): groups list\n * - prefix (string): usage prefix\n *\n * Add usage data into current section\n *\n * ##### Example\n *\n *      formatter.addUsage(this.usage, this._actions, []);\n *      return formatter.formatHelp();\n *\n **/\nHelpFormatter.prototype.addUsage = function (usage, actions, groups, prefix) {\n  if (usage !== c.SUPPRESS) {\n    this._addItem(this._formatUsage, [ usage, actions, groups, prefix ]);\n  }\n};\n\n/**\n * HelpFormatter#addArgument(action) -> Void\n * - action (object): action\n *\n * Add argument into current section\n *\n * Single variant of [[HelpFormatter#addArguments]]\n **/\nHelpFormatter.prototype.addArgument = function (action) {\n  if (action.help !== c.SUPPRESS) {\n    var self = this;\n\n    // find all invocations\n    var invocations = [ this._formatActionInvocation(action) ];\n    var invocationLength = invocations[0].length;\n\n    var actionLength;\n\n    if (action._getSubactions) {\n      this._indent();\n      action._getSubactions().forEach(function (subaction) {\n\n        var invocationNew = self._formatActionInvocation(subaction);\n        invocations.push(invocationNew);\n        invocationLength = Math.max(invocationLength, invocationNew.length);\n\n      });\n      this._dedent();\n    }\n\n    // update the maximum item length\n    actionLength = invocationLength + this._currentIndent;\n    this._actionMaxLength = Math.max(this._actionMaxLength, actionLength);\n\n    // add the item to the list\n    this._addItem(this._formatAction, [ action ]);\n  }\n};\n\n/**\n * HelpFormatter#addArguments(actions) -> Void\n * - actions (array): actions list\n *\n * Mass add arguments into current section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\nHelpFormatter.prototype.addArguments = function (actions) {\n  var self = this;\n  actions.forEach(function (action) {\n    self.addArgument(action);\n  });\n};\n\n//\n// Help-formatting methods\n//\n\n/**\n * HelpFormatter#formatHelp -> string\n *\n * Format help\n *\n * ##### Example\n *\n *      formatter.addText(this.epilog);\n *      return formatter.formatHelp();\n *\n **/\nHelpFormatter.prototype.formatHelp = function () {\n  var help = this._rootSection.formatHelp(this);\n  if (help) {\n    help = help.replace(this._longBreakMatcher, c.EOL + c.EOL);\n    help = $$.trimChars(help, c.EOL) + c.EOL;\n  }\n  return help;\n};\n\nHelpFormatter.prototype._joinParts = function (partStrings) {\n  return partStrings.filter(function (part) {\n    return (part && part !== c.SUPPRESS);\n  }).join('');\n};\n\nHelpFormatter.prototype._formatUsage = function (usage, actions, groups, prefix) {\n  if (!prefix && typeof prefix !== 'string') {\n    prefix = 'usage: ';\n  }\n\n  actions = actions || [];\n  groups = groups || [];\n\n\n  // if usage is specified, use that\n  if (usage) {\n    usage = sprintf(usage, { prog: this._prog });\n\n    // if no optionals or positionals are available, usage is just prog\n  } else if (!usage && actions.length === 0) {\n    usage = this._prog;\n\n    // if optionals and positionals are available, calculate usage\n  } else if (!usage) {\n    var prog = this._prog;\n    var optionals = [];\n    var positionals = [];\n    var actionUsage;\n    var textWidth;\n\n    // split optionals from positionals\n    actions.forEach(function (action) {\n      if (action.isOptional()) {\n        optionals.push(action);\n      } else {\n        positionals.push(action);\n      }\n    });\n\n    // build full usage string\n    actionUsage = this._formatActionsUsage([].concat(optionals, positionals), groups);\n    usage = [ prog, actionUsage ].join(' ');\n\n    // wrap the usage parts if it's too long\n    textWidth = this._width - this._currentIndent;\n    if ((prefix.length + usage.length) > textWidth) {\n\n      // break usage into wrappable parts\n      var regexpPart = new RegExp('\\\\(.*?\\\\)+|\\\\[.*?\\\\]+|\\\\S+', 'g');\n      var optionalUsage = this._formatActionsUsage(optionals, groups);\n      var positionalUsage = this._formatActionsUsage(positionals, groups);\n\n\n      var optionalParts = optionalUsage.match(regexpPart);\n      var positionalParts = positionalUsage.match(regexpPart) || [];\n\n      if (optionalParts.join(' ') !== optionalUsage) {\n        throw new Error('assert \"optionalParts.join(\\' \\') === optionalUsage\"');\n      }\n      if (positionalParts.join(' ') !== positionalUsage) {\n        throw new Error('assert \"positionalParts.join(\\' \\') === positionalUsage\"');\n      }\n\n      // helper for wrapping lines\n      /*eslint-disable func-style*/ // node 0.10 compat\n      var _getLines = function (parts, indent, prefix) {\n        var lines = [];\n        var line = [];\n\n        var lineLength = prefix ? prefix.length - 1 : indent.length - 1;\n\n        parts.forEach(function (part) {\n          if (lineLength + 1 + part.length > textWidth) {\n            lines.push(indent + line.join(' '));\n            line = [];\n            lineLength = indent.length - 1;\n          }\n          line.push(part);\n          lineLength += part.length + 1;\n        });\n\n        if (line) {\n          lines.push(indent + line.join(' '));\n        }\n        if (prefix) {\n          lines[0] = lines[0].substr(indent.length);\n        }\n        return lines;\n      };\n\n      var lines, indent, parts;\n      // if prog is short, follow it with optionals or positionals\n      if (prefix.length + prog.length <= 0.75 * textWidth) {\n        indent = $$.repeat(' ', (prefix.length + prog.length + 1));\n        if (optionalParts) {\n          lines = [].concat(\n            _getLines([ prog ].concat(optionalParts), indent, prefix),\n            _getLines(positionalParts, indent)\n          );\n        } else if (positionalParts) {\n          lines = _getLines([ prog ].concat(positionalParts), indent, prefix);\n        } else {\n          lines = [ prog ];\n        }\n\n        // if prog is long, put it on its own line\n      } else {\n        indent = $$.repeat(' ', prefix.length);\n        parts = optionalParts.concat(positionalParts);\n        lines = _getLines(parts, indent);\n        if (lines.length > 1) {\n          lines = [].concat(\n            _getLines(optionalParts, indent),\n            _getLines(positionalParts, indent)\n          );\n        }\n        lines = [ prog ].concat(lines);\n      }\n      // join lines into usage\n      usage = lines.join(c.EOL);\n    }\n  }\n\n  // prefix with 'usage:'\n  return prefix + usage + c.EOL + c.EOL;\n};\n\nHelpFormatter.prototype._formatActionsUsage = function (actions, groups) {\n  // find group indices and identify actions in groups\n  var groupActions = [];\n  var inserts = [];\n  var self = this;\n\n  groups.forEach(function (group) {\n    var end;\n    var i;\n\n    var start = actions.indexOf(group._groupActions[0]);\n    if (start >= 0) {\n      end = start + group._groupActions.length;\n\n      //if (actions.slice(start, end) === group._groupActions) {\n      if ($$.arrayEqual(actions.slice(start, end), group._groupActions)) {\n        group._groupActions.forEach(function (action) {\n          groupActions.push(action);\n        });\n\n        if (!group.required) {\n          if (inserts[start]) {\n            inserts[start] += ' [';\n          } else {\n            inserts[start] = '[';\n          }\n          inserts[end] = ']';\n        } else {\n          if (inserts[start]) {\n            inserts[start] += ' (';\n          } else {\n            inserts[start] = '(';\n          }\n          inserts[end] = ')';\n        }\n        for (i = start + 1; i < end; i += 1) {\n          inserts[i] = '|';\n        }\n      }\n    }\n  });\n\n  // collect all actions format strings\n  var parts = [];\n\n  actions.forEach(function (action, actionIndex) {\n    var part;\n    var optionString;\n    var argsDefault;\n    var argsString;\n\n    // suppressed arguments are marked with None\n    // remove | separators for suppressed arguments\n    if (action.help === c.SUPPRESS) {\n      parts.push(null);\n      if (inserts[actionIndex] === '|') {\n        inserts.splice(actionIndex, actionIndex);\n      } else if (inserts[actionIndex + 1] === '|') {\n        inserts.splice(actionIndex + 1, actionIndex + 1);\n      }\n\n      // produce all arg strings\n    } else if (!action.isOptional()) {\n      part = self._formatArgs(action, action.dest);\n\n      // if it's in a group, strip the outer []\n      if (groupActions.indexOf(action) >= 0) {\n        if (part[0] === '[' && part[part.length - 1] === ']') {\n          part = part.slice(1, -1);\n        }\n      }\n      // add the action string to the list\n      parts.push(part);\n\n    // produce the first way to invoke the option in brackets\n    } else {\n      optionString = action.optionStrings[0];\n\n      // if the Optional doesn't take a value, format is: -s or --long\n      if (action.nargs === 0) {\n        part = '' + optionString;\n\n      // if the Optional takes a value, format is: -s ARGS or --long ARGS\n      } else {\n        argsDefault = action.dest.toUpperCase();\n        argsString = self._formatArgs(action, argsDefault);\n        part = optionString + ' ' + argsString;\n      }\n      // make it look optional if it's not required or in a group\n      if (!action.required && groupActions.indexOf(action) < 0) {\n        part = '[' + part + ']';\n      }\n      // add the action string to the list\n      parts.push(part);\n    }\n  });\n\n  // insert things at the necessary indices\n  for (var i = inserts.length - 1; i >= 0; --i) {\n    if (inserts[i] !== null) {\n      parts.splice(i, 0, inserts[i]);\n    }\n  }\n\n  // join all the action items with spaces\n  var text = parts.filter(function (part) {\n    return !!part;\n  }).join(' ');\n\n  // clean up separators for mutually exclusive groups\n  text = text.replace(/([\\[(]) /g, '$1'); // remove spaces\n  text = text.replace(/ ([\\])])/g, '$1');\n  text = text.replace(/\\[ *\\]/g, ''); // remove empty groups\n  text = text.replace(/\\( *\\)/g, '');\n  text = text.replace(/\\(([^|]*)\\)/g, '$1'); // remove () from single action groups\n\n  text = text.trim();\n\n  // return the text\n  return text;\n};\n\nHelpFormatter.prototype._formatText = function (text) {\n  text = sprintf(text, { prog: this._prog });\n  var textWidth = this._width - this._currentIndent;\n  var indentIncriment = $$.repeat(' ', this._currentIndent);\n  return this._fillText(text, textWidth, indentIncriment) + c.EOL + c.EOL;\n};\n\nHelpFormatter.prototype._formatAction = function (action) {\n  var self = this;\n\n  var helpText;\n  var helpLines;\n  var parts;\n  var indentFirst;\n\n  // determine the required width and the entry label\n  var helpPosition = Math.min(this._actionMaxLength + 2, this._maxHelpPosition);\n  var helpWidth = this._width - helpPosition;\n  var actionWidth = helpPosition - this._currentIndent - 2;\n  var actionHeader = this._formatActionInvocation(action);\n\n  // no help; start on same line and add a final newline\n  if (!action.help) {\n    actionHeader = $$.repeat(' ', this._currentIndent) + actionHeader + c.EOL;\n\n  // short action name; start on the same line and pad two spaces\n  } else if (actionHeader.length <= actionWidth) {\n    actionHeader = $$.repeat(' ', this._currentIndent) +\n        actionHeader +\n        '  ' +\n        $$.repeat(' ', actionWidth - actionHeader.length);\n    indentFirst = 0;\n\n  // long action name; start on the next line\n  } else {\n    actionHeader = $$.repeat(' ', this._currentIndent) + actionHeader + c.EOL;\n    indentFirst = helpPosition;\n  }\n\n  // collect the pieces of the action help\n  parts = [ actionHeader ];\n\n  // if there was help for the action, add lines of help text\n  if (action.help) {\n    helpText = this._expandHelp(action);\n    helpLines = this._splitLines(helpText, helpWidth);\n    parts.push($$.repeat(' ', indentFirst) + helpLines[0] + c.EOL);\n    helpLines.slice(1).forEach(function (line) {\n      parts.push($$.repeat(' ', helpPosition) + line + c.EOL);\n    });\n\n  // or add a newline if the description doesn't end with one\n  } else if (actionHeader.charAt(actionHeader.length - 1) !== c.EOL) {\n    parts.push(c.EOL);\n  }\n  // if there are any sub-actions, add their help as well\n  if (action._getSubactions) {\n    this._indent();\n    action._getSubactions().forEach(function (subaction) {\n      parts.push(self._formatAction(subaction));\n    });\n    this._dedent();\n  }\n  // return a single string\n  return this._joinParts(parts);\n};\n\nHelpFormatter.prototype._formatActionInvocation = function (action) {\n  if (!action.isOptional()) {\n    var format_func = this._metavarFormatter(action, action.dest);\n    var metavars = format_func(1);\n    return metavars[0];\n  }\n\n  var parts = [];\n  var argsDefault;\n  var argsString;\n\n  // if the Optional doesn't take a value, format is: -s, --long\n  if (action.nargs === 0) {\n    parts = parts.concat(action.optionStrings);\n\n  // if the Optional takes a value, format is: -s ARGS, --long ARGS\n  } else {\n    argsDefault = action.dest.toUpperCase();\n    argsString = this._formatArgs(action, argsDefault);\n    action.optionStrings.forEach(function (optionString) {\n      parts.push(optionString + ' ' + argsString);\n    });\n  }\n  return parts.join(', ');\n};\n\nHelpFormatter.prototype._metavarFormatter = function (action, metavarDefault) {\n  var result;\n\n  if (action.metavar || action.metavar === '') {\n    result = action.metavar;\n  } else if (action.choices) {\n    var choices = action.choices;\n\n    if (typeof choices === 'string') {\n      choices = choices.split('').join(', ');\n    } else if (Array.isArray(choices)) {\n      choices = choices.join(',');\n    } else {\n      choices = Object.keys(choices).join(',');\n    }\n    result = '{' + choices + '}';\n  } else {\n    result = metavarDefault;\n  }\n\n  return function (size) {\n    if (Array.isArray(result)) {\n      return result;\n    }\n\n    var metavars = [];\n    for (var i = 0; i < size; i += 1) {\n      metavars.push(result);\n    }\n    return metavars;\n  };\n};\n\nHelpFormatter.prototype._formatArgs = function (action, metavarDefault) {\n  var result;\n  var metavars;\n\n  var buildMetavar = this._metavarFormatter(action, metavarDefault);\n\n  switch (action.nargs) {\n    /*eslint-disable no-undefined*/\n    case undefined:\n    case null:\n      metavars = buildMetavar(1);\n      result = '' + metavars[0];\n      break;\n    case c.OPTIONAL:\n      metavars = buildMetavar(1);\n      result = '[' + metavars[0] + ']';\n      break;\n    case c.ZERO_OR_MORE:\n      metavars = buildMetavar(2);\n      result = '[' + metavars[0] + ' [' + metavars[1] + ' ...]]';\n      break;\n    case c.ONE_OR_MORE:\n      metavars = buildMetavar(2);\n      result = '' + metavars[0] + ' [' + metavars[1] + ' ...]';\n      break;\n    case c.REMAINDER:\n      result = '...';\n      break;\n    case c.PARSER:\n      metavars = buildMetavar(1);\n      result = metavars[0] + ' ...';\n      break;\n    default:\n      metavars = buildMetavar(action.nargs);\n      result = metavars.join(' ');\n  }\n  return result;\n};\n\nHelpFormatter.prototype._expandHelp = function (action) {\n  var params = { prog: this._prog };\n\n  Object.keys(action).forEach(function (actionProperty) {\n    var actionValue = action[actionProperty];\n\n    if (actionValue !== c.SUPPRESS) {\n      params[actionProperty] = actionValue;\n    }\n  });\n\n  if (params.choices) {\n    if (typeof params.choices === 'string') {\n      params.choices = params.choices.split('').join(', ');\n    } else if (Array.isArray(params.choices)) {\n      params.choices = params.choices.join(', ');\n    } else {\n      params.choices = Object.keys(params.choices).join(', ');\n    }\n  }\n\n  return sprintf(this._getHelpString(action), params);\n};\n\nHelpFormatter.prototype._splitLines = function (text, width) {\n  var lines = [];\n  var delimiters = [ ' ', '.', ',', '!', '?' ];\n  var re = new RegExp('[' + delimiters.join('') + '][^' + delimiters.join('') + ']*$');\n\n  text = text.replace(/[\\n\\|\\t]/g, ' ');\n\n  text = text.trim();\n  text = text.replace(this._whitespaceMatcher, ' ');\n\n  // Wraps the single paragraph in text (a string) so every line\n  // is at most width characters long.\n  text.split(c.EOL).forEach(function (line) {\n    if (width >= line.length) {\n      lines.push(line);\n      return;\n    }\n\n    var wrapStart = 0;\n    var wrapEnd = width;\n    var delimiterIndex = 0;\n    while (wrapEnd <= line.length) {\n      if (wrapEnd !== line.length && delimiters.indexOf(line[wrapEnd] < -1)) {\n        delimiterIndex = (re.exec(line.substring(wrapStart, wrapEnd)) || {}).index;\n        wrapEnd = wrapStart + delimiterIndex + 1;\n      }\n      lines.push(line.substring(wrapStart, wrapEnd));\n      wrapStart = wrapEnd;\n      wrapEnd += width;\n    }\n    if (wrapStart < line.length) {\n      lines.push(line.substring(wrapStart, wrapEnd));\n    }\n  });\n\n  return lines;\n};\n\nHelpFormatter.prototype._fillText = function (text, width, indent) {\n  var lines = this._splitLines(text, width);\n  lines = lines.map(function (line) {\n    return indent + line;\n  });\n  return lines.join(c.EOL);\n};\n\nHelpFormatter.prototype._getHelpString = function (action) {\n  return action.help;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}