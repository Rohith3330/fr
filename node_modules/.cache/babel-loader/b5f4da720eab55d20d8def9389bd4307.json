{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _picocolors = _interopRequireDefault(require(\"picocolors\"));\n\nvar _tokenize = _interopRequireDefault(require(\"./tokenize\"));\n\nvar _input = _interopRequireDefault(require(\"./input\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar HIGHLIGHT_THEME = {\n  brackets: _picocolors.default.cyan,\n  'at-word': _picocolors.default.cyan,\n  comment: _picocolors.default.gray,\n  string: _picocolors.default.green,\n  class: _picocolors.default.yellow,\n  call: _picocolors.default.cyan,\n  hash: _picocolors.default.magenta,\n  '(': _picocolors.default.cyan,\n  ')': _picocolors.default.cyan,\n  '{': _picocolors.default.yellow,\n  '}': _picocolors.default.yellow,\n  '[': _picocolors.default.yellow,\n  ']': _picocolors.default.yellow,\n  ':': _picocolors.default.yellow,\n  ';': _picocolors.default.yellow\n};\n\nfunction getTokenType(_ref, processor) {\n  var type = _ref[0],\n      value = _ref[1];\n\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class';\n    }\n\n    if (value[0] === '#') {\n      return 'hash';\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    var next = processor.nextToken();\n    processor.back(next);\n    if (next[0] === 'brackets' || next[0] === '(') return 'call';\n  }\n\n  return type;\n}\n\nfunction terminalHighlight(css) {\n  var processor = (0, _tokenize.default)(new _input.default(css), {\n    ignoreErrors: true\n  });\n  var result = '';\n\n  var _loop = function _loop() {\n    var token = processor.nextToken();\n    var color = HIGHLIGHT_THEME[getTokenType(token, processor)];\n\n    if (color) {\n      result += token[1].split(/\\r?\\n/).map(function (i) {\n        return color(i);\n      }).join('\\n');\n    } else {\n      result += token[1];\n    }\n  };\n\n  while (!processor.endOfFile()) {\n    _loop();\n  }\n\n  return result;\n}\n\nvar _default = terminalHighlight;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"mappings":";;;;;AAAA;;AAEA;;AACA;;;;;;;;AAEA,IAAMA,eAAe,GAAG;EACtBC,QAAQ,EAAEC,oBAAKC,IADO;EAEtB,WAAWD,oBAAKC,IAFM;EAGtBC,OAAO,EAAEF,oBAAKG,IAHQ;EAItBC,MAAM,EAAEJ,oBAAKK,KAJS;EAKtBC,KAAK,EAAEN,oBAAKO,MALU;EAMtBC,IAAI,EAAER,oBAAKC,IANW;EAOtBQ,IAAI,EAAET,oBAAKU,OAPW;EAQtB,KAAKV,oBAAKC,IARY;EAStB,KAAKD,oBAAKC,IATY;EAUtB,KAAKD,oBAAKO,MAVY;EAWtB,KAAKP,oBAAKO,MAXY;EAYtB,KAAKP,oBAAKO,MAZY;EAatB,KAAKP,oBAAKO,MAbY;EActB,KAAKP,oBAAKO,MAdY;EAetB,KAAKP,oBAAKO;AAfY,CAAxB;;AAkBA,SAASI,YAAT,OAAsCC,SAAtC,EAAiD;EAAA,IAAzBC,IAAyB;EAAA,IAAnBC,KAAmB;;EAC/C,IAAID,IAAI,KAAK,MAAb,EAAqB;IACnB,IAAIC,KAAK,CAAC,CAAD,CAALA,KAAa,GAAjB,EAAsB;MACpB,OAAO,OAAP;IACD;;IACD,IAAIA,KAAK,CAAC,CAAD,CAALA,KAAa,GAAjB,EAAsB;MACpB,OAAO,MAAP;IACD;EACF;;EAED,IAAI,CAACF,SAAS,CAACG,SAAVH,EAAL,EAA4B;IAC1B,IAAII,IAAI,GAAGJ,SAAS,CAACK,SAAVL,EAAX;IACAA,SAAS,CAACM,IAAVN,CAAeI,IAAfJ;IACA,IAAII,IAAI,CAAC,CAAD,CAAJA,KAAY,UAAZA,IAA0BA,IAAI,CAAC,CAAD,CAAJA,KAAY,GAA1C,EAA+C,OAAO,MAAP;EAChD;;EAED,OAAOH,IAAP;AACD;;AAED,SAASM,iBAAT,CAA4BC,GAA5B,EAAiC;EAC/B,IAAIR,SAAS,GAAG,uBAAU,IAAIS,cAAJ,CAAUD,GAAV,CAAV,EAA0B;IAAEE,YAAY,EAAE;EAAhB,CAA1B,CAAhB;EACA,IAAIC,MAAM,GAAG,EAAb;;EAF+B;IAI7B,IAAIC,KAAK,GAAGZ,SAAS,CAACK,SAAVL,EAAZ;IACA,IAAIa,KAAK,GAAG3B,eAAe,CAACa,YAAY,CAACa,KAAD,EAAQZ,SAAR,CAAb,CAA3B;;IACA,IAAIa,KAAJ,EAAW;MACTF,MAAM,IAAIC,KAAK,CAAC,CAAD,CAALA,CACPE,KADOF,CACD,OADCA,EAEPG,GAFOH,CAEH,aAAC;QAAA,OAAIC,KAAK,CAACG,CAAD,CAAT;MAFE,GAGPC,IAHOL,CAGF,IAHEA,CAAVD;IADF,OAKO;MACLA,MAAM,IAAIC,KAAK,CAAC,CAAD,CAAfD;IACD;EAb4B;;EAG/B,OAAO,CAACX,SAAS,CAACG,SAAVH,EAAR,EAA+B;IAAAkB;EAW9B;;EACD,OAAOP,MAAP;AACD;;eAEcJ","names":["HIGHLIGHT_THEME","brackets","pico","cyan","comment","gray","string","green","class","yellow","call","hash","magenta","getTokenType","processor","type","value","endOfFile","next","nextToken","back","terminalHighlight","css","Input","ignoreErrors","result","token","color","split","map","i","join","_loop"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\resolve-url-loader\\node_modules\\postcss\\lib\\terminal-highlight.es6"],"sourcesContent":["import pico from 'picocolors'\n\nimport tokenizer from './tokenize'\nimport Input from './input'\n\nconst HIGHLIGHT_THEME = {\n  brackets: pico.cyan,\n  'at-word': pico.cyan,\n  comment: pico.gray,\n  string: pico.green,\n  class: pico.yellow,\n  call: pico.cyan,\n  hash: pico.magenta,\n  '(': pico.cyan,\n  ')': pico.cyan,\n  '{': pico.yellow,\n  '}': pico.yellow,\n  '[': pico.yellow,\n  ']': pico.yellow,\n  ':': pico.yellow,\n  ';': pico.yellow\n}\n\nfunction getTokenType ([type, value], processor) {\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class'\n    }\n    if (value[0] === '#') {\n      return 'hash'\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    let next = processor.nextToken()\n    processor.back(next)\n    if (next[0] === 'brackets' || next[0] === '(') return 'call'\n  }\n\n  return type\n}\n\nfunction terminalHighlight (css) {\n  let processor = tokenizer(new Input(css), { ignoreErrors: true })\n  let result = ''\n  while (!processor.endOfFile()) {\n    let token = processor.nextToken()\n    let color = HIGHLIGHT_THEME[getTokenType(token, processor)]\n    if (color) {\n      result += token[1]\n        .split(/\\r?\\n/)\n        .map(i => color(i))\n        .join('\\n')\n    } else {\n      result += token[1]\n    }\n  }\n  return result\n}\n\nexport default terminalHighlight\n"]},"metadata":{},"sourceType":"script"}