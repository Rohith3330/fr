{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar $pow = GetIntrinsic('%Math.pow%');\n\nvar ToBigInt = require('./ToBigInt');\n\nvar BigIntRemainder = require('./BigInt/remainder');\n\nvar modBigInt = require('../helpers/modBigInt'); // BigInt(2**63), but node v10.4-v10.8 have a bug where you can't `BigInt(x)` anything larger than MAX_SAFE_INTEGER\n\n\nvar twoSixtyThree = $BigInt && BigInt($pow(2, 32)) * BigInt($pow(2, 31)); // BigInt(2**64), but node v10.4-v10.8 have a bug where you can't `BigInt(x)` anything larger than MAX_SAFE_INTEGER\n\nvar twoSixtyFour = $BigInt && BigInt($pow(2, 32)) * BigInt($pow(2, 32)); // https://262.ecma-international.org/11.0/#sec-tobigint64\n\nmodule.exports = function ToBigInt64(argument) {\n  var n = ToBigInt(argument);\n  var int64bit = modBigInt(BigIntRemainder, n, twoSixtyFour);\n  return int64bit >= twoSixtyThree ? int64bit - twoSixtyFour : int64bit;\n};","map":{"version":3,"names":["GetIntrinsic","require","$BigInt","$pow","ToBigInt","BigIntRemainder","modBigInt","twoSixtyThree","BigInt","twoSixtyFour","module","exports","ToBigInt64","argument","n","int64bit"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2021/ToBigInt64.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar $pow = GetIntrinsic('%Math.pow%');\n\nvar ToBigInt = require('./ToBigInt');\nvar BigIntRemainder = require('./BigInt/remainder');\n\nvar modBigInt = require('../helpers/modBigInt');\n\n// BigInt(2**63), but node v10.4-v10.8 have a bug where you can't `BigInt(x)` anything larger than MAX_SAFE_INTEGER\nvar twoSixtyThree = $BigInt && (BigInt($pow(2, 32)) * BigInt($pow(2, 31)));\n\n// BigInt(2**64), but node v10.4-v10.8 have a bug where you can't `BigInt(x)` anything larger than MAX_SAFE_INTEGER\nvar twoSixtyFour = $BigInt && (BigInt($pow(2, 32)) * BigInt($pow(2, 32)));\n\n// https://262.ecma-international.org/11.0/#sec-tobigint64\n\nmodule.exports = function ToBigInt64(argument) {\n\tvar n = ToBigInt(argument);\n\tvar int64bit = modBigInt(BigIntRemainder, n, twoSixtyFour);\n\treturn int64bit >= twoSixtyThree ? int64bit - twoSixtyFour : int64bit;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,OAAO,GAAGF,YAAY,CAAC,UAAD,EAAa,IAAb,CAA1B;AACA,IAAIG,IAAI,GAAGH,YAAY,CAAC,YAAD,CAAvB;;AAEA,IAAII,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAII,eAAe,GAAGJ,OAAO,CAAC,oBAAD,CAA7B;;AAEA,IAAIK,SAAS,GAAGL,OAAO,CAAC,sBAAD,CAAvB,C,CAEA;;;AACA,IAAIM,aAAa,GAAGL,OAAO,IAAKM,MAAM,CAACL,IAAI,CAAC,CAAD,EAAI,EAAJ,CAAL,CAAN,GAAsBK,MAAM,CAACL,IAAI,CAAC,CAAD,EAAI,EAAJ,CAAL,CAA5D,C,CAEA;;AACA,IAAIM,YAAY,GAAGP,OAAO,IAAKM,MAAM,CAACL,IAAI,CAAC,CAAD,EAAI,EAAJ,CAAL,CAAN,GAAsBK,MAAM,CAACL,IAAI,CAAC,CAAD,EAAI,EAAJ,CAAL,CAA3D,C,CAEA;;AAEAO,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,QAApB,EAA8B;EAC9C,IAAIC,CAAC,GAAGV,QAAQ,CAACS,QAAD,CAAhB;EACA,IAAIE,QAAQ,GAAGT,SAAS,CAACD,eAAD,EAAkBS,CAAlB,EAAqBL,YAArB,CAAxB;EACA,OAAOM,QAAQ,IAAIR,aAAZ,GAA4BQ,QAAQ,GAAGN,YAAvC,GAAsDM,QAA7D;AACA,CAJD"},"metadata":{},"sourceType":"script"}