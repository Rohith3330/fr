{"ast":null,"code":"/**\n * @fileoverview Forbid \"button\" element without an explicit \"type\" attribute\n * @author Filipp Riabchun\n */\n'use strict';\n\nconst getProp = require('jsx-ast-utils/getProp');\n\nconst getLiteralPropValue = require('jsx-ast-utils/getLiteralPropValue');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst isCreateElement = require('../util/isCreateElement');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst optionDefaults = {\n  button: true,\n  submit: true,\n  reset: true\n};\nconst messages = {\n  missingType: 'Missing an explicit type attribute for button',\n  complexType: 'The button type attribute must be specified by a static string or a trivial ternary expression',\n  invalidValue: '\"{{value}}\" is an invalid value for button type attribute',\n  forbiddenValue: '\"{{value}}\" is an invalid value for button type attribute'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of `button` elements without an explicit `type` attribute',\n      category: 'Possible Errors',\n      recommended: false,\n      url: docsUrl('button-has-type')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        button: {\n          default: optionDefaults.button,\n          type: 'boolean'\n        },\n        submit: {\n          default: optionDefaults.submit,\n          type: 'boolean'\n        },\n        reset: {\n          default: optionDefaults.reset,\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const configuration = Object.assign({}, optionDefaults, context.options[0]);\n\n    function reportMissing(node) {\n      report(context, messages.missingType, 'missingType', {\n        node\n      });\n    }\n\n    function reportComplex(node) {\n      report(context, messages.complexType, 'complexType', {\n        node\n      });\n    }\n\n    function checkValue(node, value) {\n      if (!(value in configuration)) {\n        report(context, messages.invalidValue, 'invalidValue', {\n          node,\n          data: {\n            value\n          }\n        });\n      } else if (!configuration[value]) {\n        report(context, messages.forbiddenValue, 'forbiddenValue', {\n          node,\n          data: {\n            value\n          }\n        });\n      }\n    }\n\n    function checkExpression(node, expression) {\n      switch (expression.type) {\n        case 'Literal':\n          checkValue(node, expression.value);\n          return;\n\n        case 'TemplateLiteral':\n          if (expression.expressions.length === 0) {\n            checkValue(node, expression.quasis[0].value.raw);\n          } else {\n            reportComplex(expression);\n          }\n\n          return;\n\n        case 'ConditionalExpression':\n          checkExpression(node, expression.consequent);\n          checkExpression(node, expression.alternate);\n          return;\n\n        default:\n          reportComplex(expression);\n      }\n    }\n\n    return {\n      JSXElement(node) {\n        if (node.openingElement.name.name !== 'button') {\n          return;\n        }\n\n        const typeProp = getProp(node.openingElement.attributes, 'type');\n\n        if (!typeProp) {\n          reportMissing(node);\n          return;\n        }\n\n        if (typeProp.value && typeProp.value.type === 'JSXExpressionContainer') {\n          checkExpression(node, typeProp.value.expression);\n          return;\n        }\n\n        const propValue = getLiteralPropValue(typeProp);\n        checkValue(node, propValue);\n      },\n\n      CallExpression(node) {\n        if (!isCreateElement(node, context) || node.arguments.length < 1) {\n          return;\n        }\n\n        if (node.arguments[0].type !== 'Literal' || node.arguments[0].value !== 'button') {\n          return;\n        }\n\n        if (!node.arguments[1] || node.arguments[1].type !== 'ObjectExpression') {\n          reportMissing(node);\n          return;\n        }\n\n        const props = node.arguments[1].properties;\n        const typeProp = props.find(prop => prop.key && prop.key.name === 'type');\n\n        if (!typeProp) {\n          reportMissing(node);\n          return;\n        }\n\n        checkExpression(node, typeProp.value);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["getProp","require","getLiteralPropValue","docsUrl","isCreateElement","report","optionDefaults","button","submit","reset","messages","missingType","complexType","invalidValue","forbiddenValue","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","default","additionalProperties","create","context","configuration","Object","assign","options","reportMissing","node","reportComplex","checkValue","value","data","checkExpression","expression","expressions","length","quasis","raw","consequent","alternate","JSXElement","openingElement","name","typeProp","attributes","propValue","CallExpression","arguments","props","find","prop","key"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/button-has-type.js"],"sourcesContent":["/**\n * @fileoverview Forbid \"button\" element without an explicit \"type\" attribute\n * @author Filipp Riabchun\n */\n\n'use strict';\n\nconst getProp = require('jsx-ast-utils/getProp');\nconst getLiteralPropValue = require('jsx-ast-utils/getLiteralPropValue');\nconst docsUrl = require('../util/docsUrl');\nconst isCreateElement = require('../util/isCreateElement');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst optionDefaults = {\n  button: true,\n  submit: true,\n  reset: true,\n};\n\nconst messages = {\n  missingType: 'Missing an explicit type attribute for button',\n  complexType: 'The button type attribute must be specified by a static string or a trivial ternary expression',\n  invalidValue: '\"{{value}}\" is an invalid value for button type attribute',\n  forbiddenValue: '\"{{value}}\" is an invalid value for button type attribute',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of `button` elements without an explicit `type` attribute',\n      category: 'Possible Errors',\n      recommended: false,\n      url: docsUrl('button-has-type'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        button: {\n          default: optionDefaults.button,\n          type: 'boolean',\n        },\n        submit: {\n          default: optionDefaults.submit,\n          type: 'boolean',\n        },\n        reset: {\n          default: optionDefaults.reset,\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const configuration = Object.assign({}, optionDefaults, context.options[0]);\n\n    function reportMissing(node) {\n      report(context, messages.missingType, 'missingType', {\n        node,\n      });\n    }\n\n    function reportComplex(node) {\n      report(context, messages.complexType, 'complexType', {\n        node,\n      });\n    }\n\n    function checkValue(node, value) {\n      if (!(value in configuration)) {\n        report(context, messages.invalidValue, 'invalidValue', {\n          node,\n          data: {\n            value,\n          },\n        });\n      } else if (!configuration[value]) {\n        report(context, messages.forbiddenValue, 'forbiddenValue', {\n          node,\n          data: {\n            value,\n          },\n        });\n      }\n    }\n\n    function checkExpression(node, expression) {\n      switch (expression.type) {\n        case 'Literal':\n          checkValue(node, expression.value);\n          return;\n        case 'TemplateLiteral':\n          if (expression.expressions.length === 0) {\n            checkValue(node, expression.quasis[0].value.raw);\n          } else {\n            reportComplex(expression);\n          }\n          return;\n        case 'ConditionalExpression':\n          checkExpression(node, expression.consequent);\n          checkExpression(node, expression.alternate);\n          return;\n        default:\n          reportComplex(expression);\n      }\n    }\n\n    return {\n      JSXElement(node) {\n        if (node.openingElement.name.name !== 'button') {\n          return;\n        }\n\n        const typeProp = getProp(node.openingElement.attributes, 'type');\n\n        if (!typeProp) {\n          reportMissing(node);\n          return;\n        }\n\n        if (typeProp.value && typeProp.value.type === 'JSXExpressionContainer') {\n          checkExpression(node, typeProp.value.expression);\n          return;\n        }\n\n        const propValue = getLiteralPropValue(typeProp);\n        checkValue(node, propValue);\n      },\n      CallExpression(node) {\n        if (!isCreateElement(node, context) || node.arguments.length < 1) {\n          return;\n        }\n\n        if (node.arguments[0].type !== 'Literal' || node.arguments[0].value !== 'button') {\n          return;\n        }\n\n        if (!node.arguments[1] || node.arguments[1].type !== 'ObjectExpression') {\n          reportMissing(node);\n          return;\n        }\n\n        const props = node.arguments[1].properties;\n        const typeProp = props.find((prop) => prop.key && prop.key.name === 'type');\n\n        if (!typeProp) {\n          reportMissing(node);\n          return;\n        }\n\n        checkExpression(node, typeProp.value);\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}