{"ast":null,"code":"'use strict';\n/**\n * @param {import('postcss').AnyNode} nodeA\n * @param {import('postcss').AnyNode} nodeB\n * @return {boolean}\n */\n\nfunction checkMatch(nodeA, nodeB) {\n  if (nodeA.type === 'atrule' && nodeB.type === 'atrule') {\n    return nodeA.params === nodeB.params && nodeA.name.toLowerCase() === nodeB.name.toLowerCase();\n  }\n\n  return nodeA.type === nodeB.type;\n}\n/** @typedef {import('postcss').AnyNode & {parent?: Child}} Child */\n\n/**\n * @param {Child} nodeA\n * @param {Child} nodeB\n * @return {boolean}\n */\n\n\nfunction sameParent(nodeA, nodeB) {\n  if (!nodeA.parent) {\n    // A is orphaned, return if B is orphaned as well\n    return !nodeB.parent;\n  }\n\n  if (!nodeB.parent) {\n    // B is orphaned and A is not\n    return false;\n  } // Check if parents match\n\n\n  if (!checkMatch(nodeA.parent, nodeB.parent)) {\n    return false;\n  } // Check parents' parents\n\n\n  return sameParent(nodeA.parent, nodeB.parent);\n}\n\nmodule.exports = sameParent;","map":{"version":3,"names":["checkMatch","nodeA","nodeB","type","params","name","toLowerCase","sameParent","parent","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/cssnano-utils/src/sameParent.js"],"sourcesContent":["'use strict';\n\n/**\n * @param {import('postcss').AnyNode} nodeA\n * @param {import('postcss').AnyNode} nodeB\n * @return {boolean}\n */\nfunction checkMatch(nodeA, nodeB) {\n  if (nodeA.type === 'atrule' && nodeB.type === 'atrule') {\n    return (\n      nodeA.params === nodeB.params &&\n      nodeA.name.toLowerCase() === nodeB.name.toLowerCase()\n    );\n  }\n  return nodeA.type === nodeB.type;\n}\n\n/** @typedef {import('postcss').AnyNode & {parent?: Child}} Child */\n/**\n * @param {Child} nodeA\n * @param {Child} nodeB\n * @return {boolean}\n */\nfunction sameParent(nodeA, nodeB) {\n  if (!nodeA.parent) {\n    // A is orphaned, return if B is orphaned as well\n    return !nodeB.parent;\n  }\n\n  if (!nodeB.parent) {\n    // B is orphaned and A is not\n    return false;\n  }\n\n  // Check if parents match\n  if (!checkMatch(nodeA.parent, nodeB.parent)) {\n    return false;\n  }\n\n  // Check parents' parents\n  return sameParent(nodeA.parent, nodeB.parent);\n}\n\nmodule.exports = sameParent;\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkC;EAChC,IAAID,KAAK,CAACE,IAAN,KAAe,QAAf,IAA2BD,KAAK,CAACC,IAAN,KAAe,QAA9C,EAAwD;IACtD,OACEF,KAAK,CAACG,MAAN,KAAiBF,KAAK,CAACE,MAAvB,IACAH,KAAK,CAACI,IAAN,CAAWC,WAAX,OAA6BJ,KAAK,CAACG,IAAN,CAAWC,WAAX,EAF/B;EAID;;EACD,OAAOL,KAAK,CAACE,IAAN,KAAeD,KAAK,CAACC,IAA5B;AACD;AAED;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,UAAT,CAAoBN,KAApB,EAA2BC,KAA3B,EAAkC;EAChC,IAAI,CAACD,KAAK,CAACO,MAAX,EAAmB;IACjB;IACA,OAAO,CAACN,KAAK,CAACM,MAAd;EACD;;EAED,IAAI,CAACN,KAAK,CAACM,MAAX,EAAmB;IACjB;IACA,OAAO,KAAP;EACD,CAT+B,CAWhC;;;EACA,IAAI,CAACR,UAAU,CAACC,KAAK,CAACO,MAAP,EAAeN,KAAK,CAACM,MAArB,CAAf,EAA6C;IAC3C,OAAO,KAAP;EACD,CAd+B,CAgBhC;;;EACA,OAAOD,UAAU,CAACN,KAAK,CAACO,MAAP,EAAeN,KAAK,CAACM,MAArB,CAAjB;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBH,UAAjB"},"metadata":{},"sourceType":"script"}