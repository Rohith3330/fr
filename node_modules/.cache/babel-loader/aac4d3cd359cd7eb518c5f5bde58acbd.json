{"ast":null,"code":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\nimport { AST_Array, AST_Assign, AST_Block, AST_Call, AST_Catch, AST_Class, AST_ClassExpression, AST_DefaultAssign, AST_DefClass, AST_Defun, AST_Destructuring, AST_EmptyStatement, AST_Expansion, AST_Export, AST_Function, AST_Infinity, AST_IterationStatement, AST_Lambda, AST_NaN, AST_Node, AST_Number, AST_Object, AST_ObjectKeyVal, AST_PropAccess, AST_Return, AST_Scope, AST_SimpleStatement, AST_Statement, AST_SymbolDefun, AST_SymbolFunarg, AST_SymbolLambda, AST_SymbolRef, AST_SymbolVar, AST_This, AST_Toplevel, AST_UnaryPrefix, AST_Undefined, AST_Var, AST_VarDef, AST_With, walk, _INLINE, _NOINLINE, _PURE } from \"../ast.js\";\nimport { make_node, has_annotation } from \"../utils/index.js\";\nimport \"../size.js\";\nimport \"./evaluate.js\";\nimport \"./drop-side-effect-free.js\";\nimport \"./reduce-vars.js\";\nimport { is_undeclared_ref, is_lhs } from \"./inference.js\";\nimport { SQUEEZED, INLINED, UNUSED, has_flag, set_flag } from \"./compressor-flags.js\";\nimport { make_sequence, best_of, make_node_from_constant, identifier_atom, is_empty, is_func_expr, is_iife_call, is_reachable, is_recursive_ref, retain_top_func } from \"./common.js\";\n\nfunction within_array_or_object_literal(compressor) {\n  var node,\n      level = 0;\n\n  while (node = compressor.parent(level++)) {\n    if (node instanceof AST_Statement) return false;\n\n    if (node instanceof AST_Array || node instanceof AST_ObjectKeyVal || node instanceof AST_Object) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction scope_encloses_variables_in_this_scope(scope, pulled_scope) {\n  for (const enclosed of pulled_scope.enclosed) {\n    if (pulled_scope.variables.has(enclosed.name)) {\n      continue;\n    }\n\n    const looked_up = scope.find_variable(enclosed.name);\n\n    if (looked_up) {\n      if (looked_up === enclosed) continue;\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function inline_into_symbolref(self, compressor) {\n  if (!compressor.option(\"ie8\") && is_undeclared_ref(self) && !compressor.find_parent(AST_With)) {\n    switch (self.name) {\n      case \"undefined\":\n        return make_node(AST_Undefined, self).optimize(compressor);\n\n      case \"NaN\":\n        return make_node(AST_NaN, self).optimize(compressor);\n\n      case \"Infinity\":\n        return make_node(AST_Infinity, self).optimize(compressor);\n    }\n  }\n\n  const parent = compressor.parent();\n\n  if (compressor.option(\"reduce_vars\") && is_lhs(self, parent) !== self) {\n    const def = self.definition();\n    const nearest_scope = compressor.find_scope();\n\n    if (compressor.top_retain && def.global && compressor.top_retain(def)) {\n      def.fixed = false;\n      def.single_use = false;\n      return self;\n    }\n\n    let fixed = self.fixed_value();\n    let single_use = def.single_use && !(parent instanceof AST_Call && parent.is_callee_pure(compressor) || has_annotation(parent, _NOINLINE)) && !(parent instanceof AST_Export && fixed instanceof AST_Lambda && fixed.name);\n\n    if (single_use && fixed instanceof AST_Node) {\n      single_use = !fixed.has_side_effects(compressor) && !fixed.may_throw(compressor);\n    }\n\n    if (single_use && (fixed instanceof AST_Lambda || fixed instanceof AST_Class)) {\n      if (retain_top_func(fixed, compressor)) {\n        single_use = false;\n      } else if (def.scope !== self.scope && (def.escaped == 1 || has_flag(fixed, INLINED) || within_array_or_object_literal(compressor) || !compressor.option(\"reduce_funcs\"))) {\n        single_use = false;\n      } else if (is_recursive_ref(compressor, def)) {\n        single_use = false;\n      } else if (def.scope !== self.scope || def.orig[0] instanceof AST_SymbolFunarg) {\n        single_use = fixed.is_constant_expression(self.scope);\n\n        if (single_use == \"f\") {\n          var scope = self.scope;\n\n          do {\n            if (scope instanceof AST_Defun || is_func_expr(scope)) {\n              set_flag(scope, INLINED);\n            }\n          } while (scope = scope.parent_scope);\n        }\n      }\n    }\n\n    if (single_use && fixed instanceof AST_Lambda) {\n      single_use = def.scope === self.scope && !scope_encloses_variables_in_this_scope(nearest_scope, fixed) || parent instanceof AST_Call && parent.expression === self && !scope_encloses_variables_in_this_scope(nearest_scope, fixed) && !(fixed.name && fixed.name.definition().recursive_refs > 0);\n    }\n\n    if (single_use && fixed) {\n      if (fixed instanceof AST_DefClass) {\n        set_flag(fixed, SQUEEZED);\n        fixed = make_node(AST_ClassExpression, fixed, fixed);\n      }\n\n      if (fixed instanceof AST_Defun) {\n        set_flag(fixed, SQUEEZED);\n        fixed = make_node(AST_Function, fixed, fixed);\n      }\n\n      if (def.recursive_refs > 0 && fixed.name instanceof AST_SymbolDefun) {\n        const defun_def = fixed.name.definition();\n        let lambda_def = fixed.variables.get(fixed.name.name);\n        let name = lambda_def && lambda_def.orig[0];\n\n        if (!(name instanceof AST_SymbolLambda)) {\n          name = make_node(AST_SymbolLambda, fixed.name, fixed.name);\n          name.scope = fixed;\n          fixed.name = name;\n          lambda_def = fixed.def_function(name);\n        }\n\n        walk(fixed, node => {\n          if (node instanceof AST_SymbolRef && node.definition() === defun_def) {\n            node.thedef = lambda_def;\n            lambda_def.references.push(node);\n          }\n        });\n      }\n\n      if ((fixed instanceof AST_Lambda || fixed instanceof AST_Class) && fixed.parent_scope !== nearest_scope) {\n        fixed = fixed.clone(true, compressor.get_toplevel());\n        nearest_scope.add_child_scope(fixed);\n      }\n\n      return fixed.optimize(compressor);\n    } // multiple uses\n\n\n    if (fixed) {\n      let replace;\n\n      if (fixed instanceof AST_This) {\n        if (!(def.orig[0] instanceof AST_SymbolFunarg) && def.references.every(ref => def.scope === ref.scope)) {\n          replace = fixed;\n        }\n      } else {\n        var ev = fixed.evaluate(compressor);\n\n        if (ev !== fixed && (compressor.option(\"unsafe_regexp\") || !(ev instanceof RegExp))) {\n          replace = make_node_from_constant(ev, fixed);\n        }\n      }\n\n      if (replace) {\n        const name_length = self.size(compressor);\n        const replace_size = replace.size(compressor);\n        let overhead = 0;\n\n        if (compressor.option(\"unused\") && !compressor.exposed(def)) {\n          overhead = (name_length + 2 + replace_size) / (def.references.length - def.assignments);\n        }\n\n        if (replace_size <= name_length + overhead) {\n          return replace;\n        }\n      }\n    }\n  }\n\n  return self;\n}\nexport function inline_into_call(self, fn, compressor) {\n  var exp = self.expression;\n  var simple_args = self.args.every(arg => !(arg instanceof AST_Expansion));\n\n  if (compressor.option(\"reduce_vars\") && fn instanceof AST_SymbolRef && !has_annotation(self, _NOINLINE)) {\n    const fixed = fn.fixed_value();\n\n    if (!retain_top_func(fixed, compressor)) {\n      fn = fixed;\n    }\n  }\n\n  var is_func = fn instanceof AST_Lambda;\n  var stat = is_func && fn.body[0];\n  var is_regular_func = is_func && !fn.is_generator && !fn.async;\n  var can_inline = is_regular_func && compressor.option(\"inline\") && !self.is_callee_pure(compressor);\n\n  if (can_inline && stat instanceof AST_Return) {\n    let returned = stat.value;\n\n    if (!returned || returned.is_constant_expression()) {\n      if (returned) {\n        returned = returned.clone(true);\n      } else {\n        returned = make_node(AST_Undefined, self);\n      }\n\n      const args = self.args.concat(returned);\n      return make_sequence(self, args).optimize(compressor);\n    } // optimize identity function\n\n\n    if (fn.argnames.length === 1 && fn.argnames[0] instanceof AST_SymbolFunarg && self.args.length < 2 && !(self.args[0] instanceof AST_Expansion) && returned instanceof AST_SymbolRef && returned.name === fn.argnames[0].name) {\n      const replacement = (self.args[0] || make_node(AST_Undefined)).optimize(compressor);\n      let parent;\n\n      if (replacement instanceof AST_PropAccess && (parent = compressor.parent()) instanceof AST_Call && parent.expression === self) {\n        // identity function was being used to remove `this`, like in\n        //\n        // id(bag.no_this)(...)\n        //\n        // Replace with a larger but more effish (0, bag.no_this) wrapper.\n        return make_sequence(self, [make_node(AST_Number, self, {\n          value: 0\n        }), replacement]);\n      } // replace call with first argument or undefined if none passed\n\n\n      return replacement;\n    }\n  }\n\n  if (can_inline) {\n    var scope,\n        in_loop,\n        level = -1;\n    let def;\n    let returned_value;\n    let nearest_scope;\n\n    if (simple_args && !fn.uses_arguments && !(compressor.parent() instanceof AST_Class) && !(fn.name && fn instanceof AST_Function) && (returned_value = can_flatten_body(stat)) && (exp === fn || has_annotation(self, _INLINE) || compressor.option(\"unused\") && (def = exp.definition()).references.length == 1 && !is_recursive_ref(compressor, def) && fn.is_constant_expression(exp.scope)) && !has_annotation(self, _PURE | _NOINLINE) && !fn.contains_this() && can_inject_symbols() && (nearest_scope = compressor.find_scope()) && !scope_encloses_variables_in_this_scope(nearest_scope, fn) && !function in_default_assign() {\n      // Due to the fact function parameters have their own scope\n      // which can't use `var something` in the function body within,\n      // we simply don't inline into DefaultAssign.\n      let i = 0;\n      let p;\n\n      while (p = compressor.parent(i++)) {\n        if (p instanceof AST_DefaultAssign) return true;\n        if (p instanceof AST_Block) break;\n      }\n\n      return false;\n    }() && !(scope instanceof AST_Class)) {\n      set_flag(fn, SQUEEZED);\n      nearest_scope.add_child_scope(fn);\n      return make_sequence(self, flatten_fn(returned_value)).optimize(compressor);\n    }\n  }\n\n  if (can_inline && has_annotation(self, _INLINE)) {\n    set_flag(fn, SQUEEZED);\n    fn = make_node(fn.CTOR === AST_Defun ? AST_Function : fn.CTOR, fn, fn);\n    fn = fn.clone(true);\n    fn.figure_out_scope({}, {\n      parent_scope: compressor.find_scope(),\n      toplevel: compressor.get_toplevel()\n    });\n    return make_node(AST_Call, self, {\n      expression: fn,\n      args: self.args\n    }).optimize(compressor);\n  }\n\n  const can_drop_this_call = is_regular_func && compressor.option(\"side_effects\") && fn.body.every(is_empty);\n\n  if (can_drop_this_call) {\n    var args = self.args.concat(make_node(AST_Undefined, self));\n    return make_sequence(self, args).optimize(compressor);\n  }\n\n  if (compressor.option(\"negate_iife\") && compressor.parent() instanceof AST_SimpleStatement && is_iife_call(self)) {\n    return self.negate(compressor, true);\n  }\n\n  var ev = self.evaluate(compressor);\n\n  if (ev !== self) {\n    ev = make_node_from_constant(ev, self).optimize(compressor);\n    return best_of(compressor, ev, self);\n  }\n\n  return self;\n\n  function return_value(stat) {\n    if (!stat) return make_node(AST_Undefined, self);\n\n    if (stat instanceof AST_Return) {\n      if (!stat.value) return make_node(AST_Undefined, self);\n      return stat.value.clone(true);\n    }\n\n    if (stat instanceof AST_SimpleStatement) {\n      return make_node(AST_UnaryPrefix, stat, {\n        operator: \"void\",\n        expression: stat.body.clone(true)\n      });\n    }\n  }\n\n  function can_flatten_body(stat) {\n    var body = fn.body;\n    var len = body.length;\n\n    if (compressor.option(\"inline\") < 3) {\n      return len == 1 && return_value(stat);\n    }\n\n    stat = null;\n\n    for (var i = 0; i < len; i++) {\n      var line = body[i];\n\n      if (line instanceof AST_Var) {\n        if (stat && !line.definitions.every(var_def => !var_def.value)) {\n          return false;\n        }\n      } else if (stat) {\n        return false;\n      } else if (!(line instanceof AST_EmptyStatement)) {\n        stat = line;\n      }\n    }\n\n    return return_value(stat);\n  }\n\n  function can_inject_args(block_scoped, safe_to_inject) {\n    for (var i = 0, len = fn.argnames.length; i < len; i++) {\n      var arg = fn.argnames[i];\n\n      if (arg instanceof AST_DefaultAssign) {\n        if (has_flag(arg.left, UNUSED)) continue;\n        return false;\n      }\n\n      if (arg instanceof AST_Destructuring) return false;\n\n      if (arg instanceof AST_Expansion) {\n        if (has_flag(arg.expression, UNUSED)) continue;\n        return false;\n      }\n\n      if (has_flag(arg, UNUSED)) continue;\n\n      if (!safe_to_inject || block_scoped.has(arg.name) || identifier_atom.has(arg.name) || scope.conflicting_def(arg.name)) {\n        return false;\n      }\n\n      if (in_loop) in_loop.push(arg.definition());\n    }\n\n    return true;\n  }\n\n  function can_inject_vars(block_scoped, safe_to_inject) {\n    var len = fn.body.length;\n\n    for (var i = 0; i < len; i++) {\n      var stat = fn.body[i];\n      if (!(stat instanceof AST_Var)) continue;\n      if (!safe_to_inject) return false;\n\n      for (var j = stat.definitions.length; --j >= 0;) {\n        var name = stat.definitions[j].name;\n\n        if (name instanceof AST_Destructuring || block_scoped.has(name.name) || identifier_atom.has(name.name) || scope.conflicting_def(name.name)) {\n          return false;\n        }\n\n        if (in_loop) in_loop.push(name.definition());\n      }\n    }\n\n    return true;\n  }\n\n  function can_inject_symbols() {\n    var block_scoped = new Set();\n\n    do {\n      scope = compressor.parent(++level);\n\n      if (scope.is_block_scope() && scope.block_scope) {\n        // TODO this is sometimes undefined during compression.\n        // But it should always have a value!\n        scope.block_scope.variables.forEach(function (variable) {\n          block_scoped.add(variable.name);\n        });\n      }\n\n      if (scope instanceof AST_Catch) {\n        // TODO can we delete? AST_Catch is a block scope.\n        if (scope.argname) {\n          block_scoped.add(scope.argname.name);\n        }\n      } else if (scope instanceof AST_IterationStatement) {\n        in_loop = [];\n      } else if (scope instanceof AST_SymbolRef) {\n        if (scope.fixed_value() instanceof AST_Scope) return false;\n      }\n    } while (!(scope instanceof AST_Scope));\n\n    var safe_to_inject = !(scope instanceof AST_Toplevel) || compressor.toplevel.vars;\n    var inline = compressor.option(\"inline\");\n    if (!can_inject_vars(block_scoped, inline >= 3 && safe_to_inject)) return false;\n    if (!can_inject_args(block_scoped, inline >= 2 && safe_to_inject)) return false;\n    return !in_loop || in_loop.length == 0 || !is_reachable(fn, in_loop);\n  }\n\n  function append_var(decls, expressions, name, value) {\n    var def = name.definition(); // Name already exists, only when a function argument had the same name\n\n    const already_appended = scope.variables.has(name.name);\n\n    if (!already_appended) {\n      scope.variables.set(name.name, def);\n      scope.enclosed.push(def);\n      decls.push(make_node(AST_VarDef, name, {\n        name: name,\n        value: null\n      }));\n    }\n\n    var sym = make_node(AST_SymbolRef, name, name);\n    def.references.push(sym);\n    if (value) expressions.push(make_node(AST_Assign, self, {\n      operator: \"=\",\n      logical: false,\n      left: sym,\n      right: value.clone()\n    }));\n  }\n\n  function flatten_args(decls, expressions) {\n    var len = fn.argnames.length;\n\n    for (var i = self.args.length; --i >= len;) {\n      expressions.push(self.args[i]);\n    }\n\n    for (i = len; --i >= 0;) {\n      var name = fn.argnames[i];\n      var value = self.args[i];\n\n      if (has_flag(name, UNUSED) || !name.name || scope.conflicting_def(name.name)) {\n        if (value) expressions.push(value);\n      } else {\n        var symbol = make_node(AST_SymbolVar, name, name);\n        name.definition().orig.push(symbol);\n        if (!value && in_loop) value = make_node(AST_Undefined, self);\n        append_var(decls, expressions, symbol, value);\n      }\n    }\n\n    decls.reverse();\n    expressions.reverse();\n  }\n\n  function flatten_vars(decls, expressions) {\n    var pos = expressions.length;\n\n    for (var i = 0, lines = fn.body.length; i < lines; i++) {\n      var stat = fn.body[i];\n      if (!(stat instanceof AST_Var)) continue;\n\n      for (var j = 0, defs = stat.definitions.length; j < defs; j++) {\n        var var_def = stat.definitions[j];\n        var name = var_def.name;\n        append_var(decls, expressions, name, var_def.value);\n\n        if (in_loop && fn.argnames.every(argname => argname.name != name.name)) {\n          var def = fn.variables.get(name.name);\n          var sym = make_node(AST_SymbolRef, name, name);\n          def.references.push(sym);\n          expressions.splice(pos++, 0, make_node(AST_Assign, var_def, {\n            operator: \"=\",\n            logical: false,\n            left: sym,\n            right: make_node(AST_Undefined, name)\n          }));\n        }\n      }\n    }\n  }\n\n  function flatten_fn(returned_value) {\n    var decls = [];\n    var expressions = [];\n    flatten_args(decls, expressions);\n    flatten_vars(decls, expressions);\n    expressions.push(returned_value);\n\n    if (decls.length) {\n      const i = scope.body.indexOf(compressor.parent(level - 1)) + 1;\n      scope.body.splice(i, 0, make_node(AST_Var, fn, {\n        definitions: decls\n      }));\n    }\n\n    return expressions.map(exp => exp.clone(true));\n  }\n}","map":{"version":3,"names":["AST_Array","AST_Assign","AST_Block","AST_Call","AST_Catch","AST_Class","AST_ClassExpression","AST_DefaultAssign","AST_DefClass","AST_Defun","AST_Destructuring","AST_EmptyStatement","AST_Expansion","AST_Export","AST_Function","AST_Infinity","AST_IterationStatement","AST_Lambda","AST_NaN","AST_Node","AST_Number","AST_Object","AST_ObjectKeyVal","AST_PropAccess","AST_Return","AST_Scope","AST_SimpleStatement","AST_Statement","AST_SymbolDefun","AST_SymbolFunarg","AST_SymbolLambda","AST_SymbolRef","AST_SymbolVar","AST_This","AST_Toplevel","AST_UnaryPrefix","AST_Undefined","AST_Var","AST_VarDef","AST_With","walk","_INLINE","_NOINLINE","_PURE","make_node","has_annotation","is_undeclared_ref","is_lhs","SQUEEZED","INLINED","UNUSED","has_flag","set_flag","make_sequence","best_of","make_node_from_constant","identifier_atom","is_empty","is_func_expr","is_iife_call","is_reachable","is_recursive_ref","retain_top_func","within_array_or_object_literal","compressor","node","level","parent","scope_encloses_variables_in_this_scope","scope","pulled_scope","enclosed","variables","has","name","looked_up","find_variable","inline_into_symbolref","self","option","find_parent","optimize","def","definition","nearest_scope","find_scope","top_retain","global","fixed","single_use","fixed_value","is_callee_pure","has_side_effects","may_throw","escaped","orig","is_constant_expression","parent_scope","expression","recursive_refs","defun_def","lambda_def","get","def_function","thedef","references","push","clone","get_toplevel","add_child_scope","replace","every","ref","ev","evaluate","RegExp","name_length","size","replace_size","overhead","exposed","length","assignments","inline_into_call","fn","exp","simple_args","args","arg","is_func","stat","body","is_regular_func","is_generator","async","can_inline","returned","value","concat","argnames","replacement","in_loop","returned_value","uses_arguments","can_flatten_body","contains_this","can_inject_symbols","in_default_assign","i","p","flatten_fn","CTOR","figure_out_scope","toplevel","can_drop_this_call","negate","return_value","operator","len","line","definitions","var_def","can_inject_args","block_scoped","safe_to_inject","left","conflicting_def","can_inject_vars","j","Set","is_block_scope","block_scope","forEach","variable","add","argname","vars","inline","append_var","decls","expressions","already_appended","set","sym","logical","right","flatten_args","symbol","reverse","flatten_vars","pos","lines","defs","splice","indexOf","map"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/terser/lib/compress/inline.js"],"sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n    AST_Array,\n    AST_Assign,\n    AST_Block,\n    AST_Call,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Defun,\n    AST_Destructuring,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_Function,\n    AST_Infinity,\n    AST_IterationStatement,\n    AST_Lambda,\n    AST_NaN,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectKeyVal,\n    AST_PropAccess,\n    AST_Return,\n    AST_Scope,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_SymbolDefun,\n    AST_SymbolFunarg,\n    AST_SymbolLambda,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_This,\n    AST_Toplevel,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_With,\n\n    walk,\n\n    _INLINE,\n    _NOINLINE,\n    _PURE\n} from \"../ast.js\";\nimport { make_node, has_annotation } from \"../utils/index.js\";\nimport \"../size.js\";\n\nimport \"./evaluate.js\";\nimport \"./drop-side-effect-free.js\";\nimport \"./reduce-vars.js\";\nimport { is_undeclared_ref, is_lhs } from \"./inference.js\";\nimport {\n    SQUEEZED,\n    INLINED,\n    UNUSED,\n\n    has_flag,\n    set_flag,\n} from \"./compressor-flags.js\";\nimport {\n    make_sequence,\n    best_of,\n    make_node_from_constant,\n    identifier_atom,\n    is_empty,\n    is_func_expr,\n    is_iife_call,\n    is_reachable,\n    is_recursive_ref,\n    retain_top_func,\n} from \"./common.js\";\n\n\nfunction within_array_or_object_literal(compressor) {\n    var node, level = 0;\n    while (node = compressor.parent(level++)) {\n        if (node instanceof AST_Statement) return false;\n        if (node instanceof AST_Array\n            || node instanceof AST_ObjectKeyVal\n            || node instanceof AST_Object) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction scope_encloses_variables_in_this_scope(scope, pulled_scope) {\n    for (const enclosed of pulled_scope.enclosed) {\n        if (pulled_scope.variables.has(enclosed.name)) {\n            continue;\n        }\n        const looked_up = scope.find_variable(enclosed.name);\n        if (looked_up) {\n            if (looked_up === enclosed) continue;\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function inline_into_symbolref(self, compressor) {\n    if (\n        !compressor.option(\"ie8\")\n        && is_undeclared_ref(self)\n        && !compressor.find_parent(AST_With)\n    ) {\n        switch (self.name) {\n          case \"undefined\":\n            return make_node(AST_Undefined, self).optimize(compressor);\n          case \"NaN\":\n            return make_node(AST_NaN, self).optimize(compressor);\n          case \"Infinity\":\n            return make_node(AST_Infinity, self).optimize(compressor);\n        }\n    }\n\n    const parent = compressor.parent();\n    if (compressor.option(\"reduce_vars\") && is_lhs(self, parent) !== self) {\n        const def = self.definition();\n        const nearest_scope = compressor.find_scope();\n        if (compressor.top_retain && def.global && compressor.top_retain(def)) {\n            def.fixed = false;\n            def.single_use = false;\n            return self;\n        }\n\n        let fixed = self.fixed_value();\n        let single_use = def.single_use\n            && !(parent instanceof AST_Call\n                && (parent.is_callee_pure(compressor))\n                    || has_annotation(parent, _NOINLINE))\n            && !(parent instanceof AST_Export\n                && fixed instanceof AST_Lambda\n                && fixed.name);\n\n        if (single_use && fixed instanceof AST_Node) {\n            single_use =\n                !fixed.has_side_effects(compressor)\n                && !fixed.may_throw(compressor);\n        }\n\n        if (single_use && (fixed instanceof AST_Lambda || fixed instanceof AST_Class)) {\n            if (retain_top_func(fixed, compressor)) {\n                single_use = false;\n            } else if (def.scope !== self.scope\n                && (def.escaped == 1\n                    || has_flag(fixed, INLINED)\n                    || within_array_or_object_literal(compressor)\n                    || !compressor.option(\"reduce_funcs\"))) {\n                single_use = false;\n            } else if (is_recursive_ref(compressor, def)) {\n                single_use = false;\n            } else if (def.scope !== self.scope || def.orig[0] instanceof AST_SymbolFunarg) {\n                single_use = fixed.is_constant_expression(self.scope);\n                if (single_use == \"f\") {\n                    var scope = self.scope;\n                    do {\n                        if (scope instanceof AST_Defun || is_func_expr(scope)) {\n                            set_flag(scope, INLINED);\n                        }\n                    } while (scope = scope.parent_scope);\n                }\n            }\n        }\n\n        if (single_use && fixed instanceof AST_Lambda) {\n            single_use =\n                def.scope === self.scope\n                    && !scope_encloses_variables_in_this_scope(nearest_scope, fixed)\n                || parent instanceof AST_Call\n                    && parent.expression === self\n                    && !scope_encloses_variables_in_this_scope(nearest_scope, fixed)\n                    && !(fixed.name && fixed.name.definition().recursive_refs > 0);\n        }\n\n        if (single_use && fixed) {\n            if (fixed instanceof AST_DefClass) {\n                set_flag(fixed, SQUEEZED);\n                fixed = make_node(AST_ClassExpression, fixed, fixed);\n            }\n            if (fixed instanceof AST_Defun) {\n                set_flag(fixed, SQUEEZED);\n                fixed = make_node(AST_Function, fixed, fixed);\n            }\n            if (def.recursive_refs > 0 && fixed.name instanceof AST_SymbolDefun) {\n                const defun_def = fixed.name.definition();\n                let lambda_def = fixed.variables.get(fixed.name.name);\n                let name = lambda_def && lambda_def.orig[0];\n                if (!(name instanceof AST_SymbolLambda)) {\n                    name = make_node(AST_SymbolLambda, fixed.name, fixed.name);\n                    name.scope = fixed;\n                    fixed.name = name;\n                    lambda_def = fixed.def_function(name);\n                }\n                walk(fixed, node => {\n                    if (node instanceof AST_SymbolRef && node.definition() === defun_def) {\n                        node.thedef = lambda_def;\n                        lambda_def.references.push(node);\n                    }\n                });\n            }\n            if (\n                (fixed instanceof AST_Lambda || fixed instanceof AST_Class)\n                && fixed.parent_scope !== nearest_scope\n            ) {\n                fixed = fixed.clone(true, compressor.get_toplevel());\n\n                nearest_scope.add_child_scope(fixed);\n            }\n            return fixed.optimize(compressor);\n        }\n\n        // multiple uses\n        if (fixed) {\n            let replace;\n\n            if (fixed instanceof AST_This) {\n                if (!(def.orig[0] instanceof AST_SymbolFunarg)\n                    && def.references.every((ref) =>\n                        def.scope === ref.scope\n                    )) {\n                    replace = fixed;\n                }\n            } else {\n                var ev = fixed.evaluate(compressor);\n                if (\n                    ev !== fixed\n                    && (compressor.option(\"unsafe_regexp\") || !(ev instanceof RegExp))\n                ) {\n                    replace = make_node_from_constant(ev, fixed);\n                }\n            }\n\n            if (replace) {\n                const name_length = self.size(compressor);\n                const replace_size = replace.size(compressor);\n\n                let overhead = 0;\n                if (compressor.option(\"unused\") && !compressor.exposed(def)) {\n                    overhead =\n                        (name_length + 2 + replace_size) /\n                        (def.references.length - def.assignments);\n                }\n\n                if (replace_size <= name_length + overhead) {\n                    return replace;\n                }\n            }\n        }\n    }\n\n    return self;\n}\n\nexport function inline_into_call(self, fn, compressor) {\n    var exp = self.expression;\n    var simple_args = self.args.every((arg) => !(arg instanceof AST_Expansion));\n\n    if (compressor.option(\"reduce_vars\")\n        && fn instanceof AST_SymbolRef\n        && !has_annotation(self, _NOINLINE)\n    ) {\n        const fixed = fn.fixed_value();\n        if (!retain_top_func(fixed, compressor)) {\n            fn = fixed;\n        }\n    }\n\n    var is_func = fn instanceof AST_Lambda;\n\n    var stat = is_func && fn.body[0];\n    var is_regular_func = is_func && !fn.is_generator && !fn.async;\n    var can_inline = is_regular_func && compressor.option(\"inline\") && !self.is_callee_pure(compressor);\n    if (can_inline && stat instanceof AST_Return) {\n        let returned = stat.value;\n        if (!returned || returned.is_constant_expression()) {\n            if (returned) {\n                returned = returned.clone(true);\n            } else {\n                returned = make_node(AST_Undefined, self);\n            }\n            const args = self.args.concat(returned);\n            return make_sequence(self, args).optimize(compressor);\n        }\n\n        // optimize identity function\n        if (\n            fn.argnames.length === 1\n            && (fn.argnames[0] instanceof AST_SymbolFunarg)\n            && self.args.length < 2\n            && !(self.args[0] instanceof AST_Expansion)\n            && returned instanceof AST_SymbolRef\n            && returned.name === fn.argnames[0].name\n        ) {\n            const replacement =\n                (self.args[0] || make_node(AST_Undefined)).optimize(compressor);\n\n            let parent;\n            if (\n                replacement instanceof AST_PropAccess\n                && (parent = compressor.parent()) instanceof AST_Call\n                && parent.expression === self\n            ) {\n                // identity function was being used to remove `this`, like in\n                //\n                // id(bag.no_this)(...)\n                //\n                // Replace with a larger but more effish (0, bag.no_this) wrapper.\n\n                return make_sequence(self, [\n                    make_node(AST_Number, self, { value: 0 }),\n                    replacement\n                ]);\n            }\n            // replace call with first argument or undefined if none passed\n            return replacement;\n        }\n    }\n\n    if (can_inline) {\n        var scope, in_loop, level = -1;\n        let def;\n        let returned_value;\n        let nearest_scope;\n        if (simple_args\n            && !fn.uses_arguments\n            && !(compressor.parent() instanceof AST_Class)\n            && !(fn.name && fn instanceof AST_Function)\n            && (returned_value = can_flatten_body(stat))\n            && (exp === fn\n                || has_annotation(self, _INLINE)\n                || compressor.option(\"unused\")\n                    && (def = exp.definition()).references.length == 1\n                    && !is_recursive_ref(compressor, def)\n                    && fn.is_constant_expression(exp.scope))\n            && !has_annotation(self, _PURE | _NOINLINE)\n            && !fn.contains_this()\n            && can_inject_symbols()\n            && (nearest_scope = compressor.find_scope())\n            && !scope_encloses_variables_in_this_scope(nearest_scope, fn)\n            && !(function in_default_assign() {\n                    // Due to the fact function parameters have their own scope\n                    // which can't use `var something` in the function body within,\n                    // we simply don't inline into DefaultAssign.\n                    let i = 0;\n                    let p;\n                    while ((p = compressor.parent(i++))) {\n                        if (p instanceof AST_DefaultAssign) return true;\n                        if (p instanceof AST_Block) break;\n                    }\n                    return false;\n                })()\n            && !(scope instanceof AST_Class)\n        ) {\n            set_flag(fn, SQUEEZED);\n            nearest_scope.add_child_scope(fn);\n            return make_sequence(self, flatten_fn(returned_value)).optimize(compressor);\n        }\n    }\n\n    if (can_inline && has_annotation(self, _INLINE)) {\n        set_flag(fn, SQUEEZED);\n        fn = make_node(fn.CTOR === AST_Defun ? AST_Function : fn.CTOR, fn, fn);\n        fn = fn.clone(true);\n        fn.figure_out_scope({}, {\n            parent_scope: compressor.find_scope(),\n            toplevel: compressor.get_toplevel()\n        });\n\n        return make_node(AST_Call, self, {\n            expression: fn,\n            args: self.args,\n        }).optimize(compressor);\n    }\n\n    const can_drop_this_call = is_regular_func && compressor.option(\"side_effects\") && fn.body.every(is_empty);\n    if (can_drop_this_call) {\n        var args = self.args.concat(make_node(AST_Undefined, self));\n        return make_sequence(self, args).optimize(compressor);\n    }\n\n    if (compressor.option(\"negate_iife\")\n        && compressor.parent() instanceof AST_SimpleStatement\n        && is_iife_call(self)) {\n        return self.negate(compressor, true);\n    }\n\n    var ev = self.evaluate(compressor);\n    if (ev !== self) {\n        ev = make_node_from_constant(ev, self).optimize(compressor);\n        return best_of(compressor, ev, self);\n    }\n\n    return self;\n\n    function return_value(stat) {\n        if (!stat) return make_node(AST_Undefined, self);\n        if (stat instanceof AST_Return) {\n            if (!stat.value) return make_node(AST_Undefined, self);\n            return stat.value.clone(true);\n        }\n        if (stat instanceof AST_SimpleStatement) {\n            return make_node(AST_UnaryPrefix, stat, {\n                operator: \"void\",\n                expression: stat.body.clone(true)\n            });\n        }\n    }\n\n    function can_flatten_body(stat) {\n        var body = fn.body;\n        var len = body.length;\n        if (compressor.option(\"inline\") < 3) {\n            return len == 1 && return_value(stat);\n        }\n        stat = null;\n        for (var i = 0; i < len; i++) {\n            var line = body[i];\n            if (line instanceof AST_Var) {\n                if (stat && !line.definitions.every((var_def) =>\n                    !var_def.value\n                )) {\n                    return false;\n                }\n            } else if (stat) {\n                return false;\n            } else if (!(line instanceof AST_EmptyStatement)) {\n                stat = line;\n            }\n        }\n        return return_value(stat);\n    }\n\n    function can_inject_args(block_scoped, safe_to_inject) {\n        for (var i = 0, len = fn.argnames.length; i < len; i++) {\n            var arg = fn.argnames[i];\n            if (arg instanceof AST_DefaultAssign) {\n                if (has_flag(arg.left, UNUSED)) continue;\n                return false;\n            }\n            if (arg instanceof AST_Destructuring) return false;\n            if (arg instanceof AST_Expansion) {\n                if (has_flag(arg.expression, UNUSED)) continue;\n                return false;\n            }\n            if (has_flag(arg, UNUSED)) continue;\n            if (!safe_to_inject\n                || block_scoped.has(arg.name)\n                || identifier_atom.has(arg.name)\n                || scope.conflicting_def(arg.name)) {\n                return false;\n            }\n            if (in_loop) in_loop.push(arg.definition());\n        }\n        return true;\n    }\n\n    function can_inject_vars(block_scoped, safe_to_inject) {\n        var len = fn.body.length;\n        for (var i = 0; i < len; i++) {\n            var stat = fn.body[i];\n            if (!(stat instanceof AST_Var)) continue;\n            if (!safe_to_inject) return false;\n            for (var j = stat.definitions.length; --j >= 0;) {\n                var name = stat.definitions[j].name;\n                if (name instanceof AST_Destructuring\n                    || block_scoped.has(name.name)\n                    || identifier_atom.has(name.name)\n                    || scope.conflicting_def(name.name)) {\n                    return false;\n                }\n                if (in_loop) in_loop.push(name.definition());\n            }\n        }\n        return true;\n    }\n\n    function can_inject_symbols() {\n        var block_scoped = new Set();\n        do {\n            scope = compressor.parent(++level);\n            if (scope.is_block_scope() && scope.block_scope) {\n                // TODO this is sometimes undefined during compression.\n                // But it should always have a value!\n                scope.block_scope.variables.forEach(function (variable) {\n                    block_scoped.add(variable.name);\n                });\n            }\n            if (scope instanceof AST_Catch) {\n                // TODO can we delete? AST_Catch is a block scope.\n                if (scope.argname) {\n                    block_scoped.add(scope.argname.name);\n                }\n            } else if (scope instanceof AST_IterationStatement) {\n                in_loop = [];\n            } else if (scope instanceof AST_SymbolRef) {\n                if (scope.fixed_value() instanceof AST_Scope) return false;\n            }\n        } while (!(scope instanceof AST_Scope));\n\n        var safe_to_inject = !(scope instanceof AST_Toplevel) || compressor.toplevel.vars;\n        var inline = compressor.option(\"inline\");\n        if (!can_inject_vars(block_scoped, inline >= 3 && safe_to_inject)) return false;\n        if (!can_inject_args(block_scoped, inline >= 2 && safe_to_inject)) return false;\n        return !in_loop || in_loop.length == 0 || !is_reachable(fn, in_loop);\n    }\n\n    function append_var(decls, expressions, name, value) {\n        var def = name.definition();\n\n        // Name already exists, only when a function argument had the same name\n        const already_appended = scope.variables.has(name.name);\n        if (!already_appended) {\n            scope.variables.set(name.name, def);\n            scope.enclosed.push(def);\n            decls.push(make_node(AST_VarDef, name, {\n                name: name,\n                value: null\n            }));\n        }\n\n        var sym = make_node(AST_SymbolRef, name, name);\n        def.references.push(sym);\n        if (value) expressions.push(make_node(AST_Assign, self, {\n            operator: \"=\",\n            logical: false,\n            left: sym,\n            right: value.clone()\n        }));\n    }\n\n    function flatten_args(decls, expressions) {\n        var len = fn.argnames.length;\n        for (var i = self.args.length; --i >= len;) {\n            expressions.push(self.args[i]);\n        }\n        for (i = len; --i >= 0;) {\n            var name = fn.argnames[i];\n            var value = self.args[i];\n            if (has_flag(name, UNUSED) || !name.name || scope.conflicting_def(name.name)) {\n                if (value) expressions.push(value);\n            } else {\n                var symbol = make_node(AST_SymbolVar, name, name);\n                name.definition().orig.push(symbol);\n                if (!value && in_loop) value = make_node(AST_Undefined, self);\n                append_var(decls, expressions, symbol, value);\n            }\n        }\n        decls.reverse();\n        expressions.reverse();\n    }\n\n    function flatten_vars(decls, expressions) {\n        var pos = expressions.length;\n        for (var i = 0, lines = fn.body.length; i < lines; i++) {\n            var stat = fn.body[i];\n            if (!(stat instanceof AST_Var)) continue;\n            for (var j = 0, defs = stat.definitions.length; j < defs; j++) {\n                var var_def = stat.definitions[j];\n                var name = var_def.name;\n                append_var(decls, expressions, name, var_def.value);\n                if (in_loop && fn.argnames.every((argname) =>\n                    argname.name != name.name\n                )) {\n                    var def = fn.variables.get(name.name);\n                    var sym = make_node(AST_SymbolRef, name, name);\n                    def.references.push(sym);\n                    expressions.splice(pos++, 0, make_node(AST_Assign, var_def, {\n                        operator: \"=\",\n                        logical: false,\n                        left: sym,\n                        right: make_node(AST_Undefined, name)\n                    }));\n                }\n            }\n        }\n    }\n\n    function flatten_fn(returned_value) {\n        var decls = [];\n        var expressions = [];\n        flatten_args(decls, expressions);\n        flatten_vars(decls, expressions);\n        expressions.push(returned_value);\n\n        if (decls.length) {\n            const i = scope.body.indexOf(compressor.parent(level - 1)) + 1;\n            scope.body.splice(i, 0, make_node(AST_Var, fn, {\n                definitions: decls\n            }));\n        }\n\n        return expressions.map(exp => exp.clone(true));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}