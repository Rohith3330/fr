{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'prefer-readonly-parameter-types',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs',\n      recommended: false,\n      requiresTypeChecking: true\n    },\n    schema: [{\n      type: 'object',\n      additionalProperties: false,\n      properties: Object.assign({\n        checkParameterProperties: {\n          type: 'boolean'\n        },\n        ignoreInferredTypes: {\n          type: 'boolean'\n        }\n      }, util.readonlynessOptionsSchema.properties)\n    }],\n    messages: {\n      shouldBeReadonly: 'Parameter should be a read only type.'\n    }\n  },\n  defaultOptions: [Object.assign({\n    checkParameterProperties: true,\n    ignoreInferredTypes: false\n  }, util.readonlynessOptionsDefaults)],\n\n  create(context, _ref) {\n    let [{\n      checkParameterProperties,\n      ignoreInferredTypes,\n      treatMethodsAsReadonly\n    }] = _ref;\n    const {\n      esTreeNodeToTSNodeMap,\n      program\n    } = util.getParserServices(context);\n    const checker = program.getTypeChecker();\n    return {\n      [[utils_1.AST_NODE_TYPES.ArrowFunctionExpression, utils_1.AST_NODE_TYPES.FunctionDeclaration, utils_1.AST_NODE_TYPES.FunctionExpression, utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration, utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration, utils_1.AST_NODE_TYPES.TSDeclareFunction, utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, utils_1.AST_NODE_TYPES.TSFunctionType, utils_1.AST_NODE_TYPES.TSMethodSignature].join(', ')](node) {\n        for (const param of node.params) {\n          if (!checkParameterProperties && param.type === utils_1.AST_NODE_TYPES.TSParameterProperty) {\n            continue;\n          }\n\n          const actualParam = param.type === utils_1.AST_NODE_TYPES.TSParameterProperty ? param.parameter : param;\n\n          if (ignoreInferredTypes && actualParam.typeAnnotation == null) {\n            continue;\n          }\n\n          const tsNode = esTreeNodeToTSNodeMap.get(actualParam);\n          const type = checker.getTypeAtLocation(tsNode);\n          const isReadOnly = util.isTypeReadonly(checker, type, {\n            treatMethodsAsReadonly: treatMethodsAsReadonly\n          });\n\n          if (!isReadOnly) {\n            context.report({\n              node: actualParam,\n              messageId: 'shouldBeReadonly'\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AAUAA,kBAAeC,IAAI,CAACC,UAAL,CAAqC;EAClDC,IAAI,EAAE,iCAD4C;EAElDC,IAAI,EAAE;IACJC,IAAI,EAAE,YADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EACT,gGAFE;MAGJC,WAAW,EAAE,KAHT;MAIJC,oBAAoB,EAAE;IAJlB,CAFF;IAQJC,MAAM,EAAE,CACN;MACEL,IAAI,EAAE,QADR;MAEEM,oBAAoB,EAAE,KAFxB;MAGEC,UAAU;QACRC,wBAAwB,EAAE;UACxBR,IAAI,EAAE;QADkB,CADlB;QAIRS,mBAAmB,EAAE;UACnBT,IAAI,EAAE;QADa;MAJb,GAOLJ,IAAI,CAACc,yBAAL,CAA+BH,UAP1B;IAHZ,CADM,CARJ;IAuBJI,QAAQ,EAAE;MACRC,gBAAgB,EAAE;IADV;EAvBN,CAF4C;EA6BlDC,cAAc,EAAE;IAEZL,wBAAwB,EAAE;IAC1BC,mBAAmB,EAAE;KAClBb,IAAI,CAACkB,4BAJI,CA7BkC;;EAoClDC,MAAM,CACJC,OADI,QAEuE;IAAA,IAA3E,CAAC;MAAER,wBAAF;MAA4BC,mBAA5B;MAAiDQ;IAAjD,CAAD,CAA2E;IAE3E,MAAM;MAAEC,qBAAF;MAAyBC;IAAzB,IAAqCvB,IAAI,CAACwB,iBAAL,CAAuBJ,OAAvB,CAA3C;IACA,MAAMK,OAAO,GAAGF,OAAO,CAACG,cAAR,EAAhB;IAEA,OAAO;MACL,CAAC,CACCC,uBAAeC,uBADhB,EAECD,uBAAeE,mBAFhB,EAGCF,uBAAeG,kBAHhB,EAICH,uBAAeI,0BAJhB,EAKCJ,uBAAeK,+BALhB,EAMCL,uBAAeM,iBANhB,EAOCN,uBAAeO,6BAPhB,EAQCP,uBAAeQ,cARhB,EASCR,uBAAeS,iBAThB,EAUCC,IAVD,CAUM,IAVN,CAAD,EAWEC,IAXF,EAoBgC;QAE9B,KAAK,MAAMC,KAAX,IAAoBD,IAAI,CAACE,MAAzB,EAAiC;UAC/B,IACE,CAAC5B,wBAAD,IACA2B,KAAK,CAACnC,IAAN,KAAeuB,uBAAec,mBAFhC,EAGE;YACA;UACD;;UAED,MAAMC,WAAW,GACfH,KAAK,CAACnC,IAAN,KAAeuB,uBAAec,mBAA9B,GACIF,KAAK,CAACI,SADV,GAEIJ,KAHN;;UAKA,IAAI1B,mBAAmB,IAAI6B,WAAW,CAACE,cAAZ,IAA8B,IAAzD,EAA+D;YAC7D;UACD;;UAED,MAAMC,MAAM,GAAGvB,qBAAqB,CAACwB,GAAtB,CAA0BJ,WAA1B,CAAf;UACA,MAAMtC,IAAI,GAAGqB,OAAO,CAACsB,iBAAR,CAA0BF,MAA1B,CAAb;UACA,MAAMG,UAAU,GAAGhD,IAAI,CAACiD,cAAL,CAAoBxB,OAApB,EAA6BrB,IAA7B,EAAmC;YACpDiB,sBAAsB,EAAEA;UAD4B,CAAnC,CAAnB;;UAIA,IAAI,CAAC2B,UAAL,EAAiB;YACf5B,OAAO,CAAC8B,MAAR,CAAe;cACbZ,IAAI,EAAEI,WADO;cAEbS,SAAS,EAAE;YAFE,CAAf;UAID;QACF;MACF;;IArDI,CAAP;EAuDD;;AAlGiD,CAArC,CAAf","names":["exports","util","createRule","name","meta","type","docs","description","recommended","requiresTypeChecking","schema","additionalProperties","properties","checkParameterProperties","ignoreInferredTypes","readonlynessOptionsSchema","messages","shouldBeReadonly","defaultOptions","readonlynessOptionsDefaults","create","context","treatMethodsAsReadonly","esTreeNodeToTSNodeMap","program","getParserServices","checker","getTypeChecker","utils_1","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression","TSCallSignatureDeclaration","TSConstructSignatureDeclaration","TSDeclareFunction","TSEmptyBodyFunctionExpression","TSFunctionType","TSMethodSignature","join","node","param","params","TSParameterProperty","actualParam","parameter","typeAnnotation","tsNode","get","getTypeAtLocation","isReadOnly","isTypeReadonly","report","messageId"],"sources":["../../src/rules/prefer-readonly-parameter-types.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}