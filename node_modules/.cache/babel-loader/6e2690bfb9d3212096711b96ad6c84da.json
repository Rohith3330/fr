{"ast":null,"code":"var levenshtien = require(\"./../index\");\n\nvar assert = require(\"assert\");\n\ndescribe(\"Damerau - Levenshtein\", function () {\n  describe(\"Equality\", function () {\n    it(\"returns 0 steps for equal strings\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"test\"), {\n        steps: 0,\n        relative: 0,\n        similarity: 1\n      });\n    });\n  });\n  describe(\"Additions\", function () {\n    it(\"returns 1 step when appending one char\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"tests\"), {\n        steps: 1,\n        relative: 1 / 5,\n        similarity: 1 - 1 / 5\n      });\n    });\n    it(\"returns 1 step when prepending one char\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"stest\"), {\n        steps: 1,\n        relative: 1 / 5,\n        similarity: 1 - 1 / 5\n      });\n    });\n    it(\"returns 2 steps when appending two char\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"mytest\"), {\n        steps: 2,\n        relative: 2 / 6,\n        similarity: 1 - 2 / 6\n      });\n    });\n    it(\"returns 7 steps when appending seven char\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"mycrazytest\"), {\n        steps: 7,\n        relative: 7 / 11,\n        similarity: 1 - 7 / 11\n      });\n    });\n    it(\"returns 9 steps when prepend two chars and append seven chars\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"mytestiscrazy\"), {\n        steps: 9,\n        relative: 9 / 13,\n        similarity: 1 - 9 / 13\n      });\n    });\n  });\n  describe(\"Addition of repeated chars\", function () {\n    it(\"returns 1 step when repeating a character\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"teest\"), {\n        steps: 1,\n        relative: 1 / 5,\n        similarity: 1 - 1 / 5\n      });\n    });\n    it(\"returns 2 step when repeating a character twice\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"teeest\"), {\n        steps: 2,\n        relative: 2 / 6,\n        similarity: 1 - 2 / 6\n      });\n    });\n  });\n  describe(\"#Deletion\", function () {\n    it(\"returns 1 step when removing one char\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"tst\"), {\n        steps: 1,\n        relative: 1 / 4,\n        similarity: 1 - 1 / 4\n      });\n    });\n  });\n  describe(\"Transposition\", function () {\n    it(\"returns 1 step when transposing one char\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"tset\"), {\n        steps: 1,\n        relative: 1 / 4,\n        similarity: 1 - 1 / 4\n      });\n    });\n  });\n  describe(\"Addition with transposition\", function () {\n    it(\"returns 2 step when transposing one char and append another\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"tsets\"), {\n        steps: 2,\n        relative: 2 / 5,\n        similarity: 1 - 2 / 5\n      });\n    });\n    it(\"returns 2 step when transposing a char and repeating it\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"tsset\"), {\n        steps: 2,\n        relative: 2 / 5,\n        similarity: 1 - 2 / 5\n      });\n    });\n  });\n  describe(\"Transposition of multiple chars\", function () {\n    it(\"returns 1 step when transposing two neighbouring characters\", function () {\n      assert.deepEqual(levenshtien(\"banana\", \"banaan\"), {\n        steps: 1,\n        relative: 1 / 6,\n        similarity: 1 - 1 / 6\n      });\n    });\n    it(\"returns 2 step when transposing two neighbouring characters by two places\", function () {\n      assert.deepEqual(levenshtien(\"banana\", \"nabana\"), {\n        steps: 2,\n        relative: 2 / 6,\n        similarity: 1 - 2 / 6\n      });\n    });\n    it(\"returns 2 step when transposing two pairs of characters\", function () {\n      assert.deepEqual(levenshtien(\"banana\", \"abnaan\"), {\n        steps: 2,\n        relative: 2 / 6,\n        similarity: 1 - 2 / 6\n      });\n    });\n  });\n  describe(\"Empty strings\", function () {\n    it(\"returns 0 step and 0 relative when both are empty\", function () {\n      assert.deepEqual(levenshtien(\"\", \"\"), {\n        steps: 0,\n        relative: 0,\n        similarity: 1\n      });\n    });\n    it(\"returns steps equal to first string lenght when second string is empty\", function () {\n      assert.deepEqual(levenshtien(\"test\", \"\"), {\n        steps: 4,\n        relative: 4 / 4,\n        similarity: 0\n      });\n    });\n    it(\"returns steps equal to second string lenght when first string is empty\", function () {\n      assert.deepEqual(levenshtien(\"\", \"test\"), {\n        steps: 4,\n        relative: 1,\n        similarity: 0\n      });\n    });\n  });\n});","map":{"version":3,"names":["levenshtien","require","assert","describe","it","deepEqual","steps","relative","similarity"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/damerau-levenshtein/test/test.js"],"sourcesContent":["var levenshtien = require(\"./../index\");\n\nvar assert = require(\"assert\");\n\ndescribe(\"Damerau - Levenshtein\", function() {\n  describe(\"Equality\", function() {\n    it(\"returns 0 steps for equal strings\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"test\"), {\n        steps: 0,\n        relative: 0,\n        similarity: 1\n      });\n    });\n  });\n\n  describe(\"Additions\", function() {\n    it(\"returns 1 step when appending one char\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"tests\"), {\n        steps: 1,\n        relative: 1 / 5,\n        similarity: 1 - 1 / 5\n      });\n    });\n\n    it(\"returns 1 step when prepending one char\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"stest\"), {\n        steps: 1,\n        relative: 1 / 5,\n        similarity: 1 - 1 / 5\n      });\n    });\n\n    it(\"returns 2 steps when appending two char\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"mytest\"), {\n        steps: 2,\n        relative: 2 / 6,\n        similarity: 1 - 2 / 6\n      });\n    });\n\n    it(\"returns 7 steps when appending seven char\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"mycrazytest\"), {\n        steps: 7,\n        relative: 7 / 11,\n        similarity: 1 - 7 / 11\n      });\n    });\n\n    it(\"returns 9 steps when prepend two chars and append seven chars\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"mytestiscrazy\"), {\n        steps: 9,\n        relative: 9 / 13,\n        similarity: 1 - 9 / 13\n      });\n    });\n  });\n\n\n  describe(\"Addition of repeated chars\", function() {\n    it(\"returns 1 step when repeating a character\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"teest\"), {\n        steps: 1,\n        relative: 1 / 5,\n        similarity: 1 - 1 / 5\n      });\n    });\n\n    it(\"returns 2 step when repeating a character twice\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"teeest\"), {\n        steps: 2,\n        relative: 2 / 6,\n        similarity: 1 - 2 / 6\n      });\n    });\n  });\n\n\n  describe(\"#Deletion\", function() {\n    it(\"returns 1 step when removing one char\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"tst\"), {\n        steps: 1,\n        relative: 1 / 4,\n        similarity: 1 - 1 / 4\n      });\n    });\n  });\n\n\n  describe(\"Transposition\", function() {\n    it(\"returns 1 step when transposing one char\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"tset\"), {\n        steps: 1,\n        relative: 1 / 4,\n        similarity: 1 - 1 / 4\n      });\n    });\n  });\n\n\n  describe(\"Addition with transposition\", function() {\n    it(\"returns 2 step when transposing one char and append another\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"tsets\"), {\n        steps: 2,\n        relative: 2 / 5,\n        similarity: 1 - 2 / 5\n      });\n    });\n    it(\"returns 2 step when transposing a char and repeating it\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"tsset\"), {\n        steps: 2,\n        relative: 2 / 5,\n        similarity: 1 - 2 / 5\n      });\n    });\n  });\n\n  describe(\"Transposition of multiple chars\", function() {\n    it(\"returns 1 step when transposing two neighbouring characters\", function() {\n      assert.deepEqual(levenshtien(\"banana\", \"banaan\"), {\n        steps: 1,\n        relative: 1 / 6,\n        similarity: 1 - 1 / 6\n      });\n    });\n\n    it(\"returns 2 step when transposing two neighbouring characters by two places\", function() {\n      assert.deepEqual(levenshtien(\"banana\", \"nabana\"), {\n        steps: 2,\n        relative: 2 / 6,\n        similarity: 1 - 2 / 6\n      });\n    });\n\n    it(\"returns 2 step when transposing two pairs of characters\", function() {\n      assert.deepEqual(levenshtien(\"banana\", \"abnaan\"), {\n        steps: 2,\n        relative: 2 / 6,\n        similarity: 1 - 2 / 6\n      });\n    });\n  });\n\n  describe(\"Empty strings\", function() {\n    it(\"returns 0 step and 0 relative when both are empty\", function() {\n      assert.deepEqual(levenshtien(\"\", \"\"), {\n        steps: 0,\n        relative: 0,\n        similarity: 1\n      });\n    });\n\n    it(\"returns steps equal to first string lenght when second string is empty\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"\"), {\n        steps: 4,\n        relative: 4 / 4,\n        similarity: 0\n      });\n    });\n\n    it(\"returns steps equal to second string lenght when first string is empty\", function() {\n      assert.deepEqual(levenshtien(\"\", \"test\"), {\n        steps: 4,\n        relative: 1,\n        similarity: 0\n      });\n    });\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}