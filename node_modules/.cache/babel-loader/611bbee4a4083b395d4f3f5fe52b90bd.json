{"ast":null,"code":"'use strict';\n\nconst supportsColor = require('supports-color');\n\nconst hasFlag = require('has-flag');\n\nfunction parseVersion(versionString) {\n  if (/^\\d{3,4}$/.test(versionString)) {\n    // Env var doesn't always use dots. example: 4601 => 46.1.0\n    const m = /(\\d{1,2})(\\d{2})/.exec(versionString);\n    return {\n      major: 0,\n      minor: parseInt(m[1], 10),\n      patch: parseInt(m[2], 10)\n    };\n  }\n\n  const versions = (versionString || '').split('.').map(n => parseInt(n, 10));\n  return {\n    major: versions[0],\n    minor: versions[1],\n    patch: versions[2]\n  };\n}\n\nfunction supportsHyperlink(stream) {\n  const {\n    env\n  } = process;\n\n  if ('FORCE_HYPERLINK' in env) {\n    return !(env.FORCE_HYPERLINK.length > 0 && parseInt(env.FORCE_HYPERLINK, 10) === 0);\n  }\n\n  if (hasFlag('no-hyperlink') || hasFlag('no-hyperlinks') || hasFlag('hyperlink=false') || hasFlag('hyperlink=never')) {\n    return false;\n  }\n\n  if (hasFlag('hyperlink=true') || hasFlag('hyperlink=always')) {\n    return true;\n  } // Netlify does not run a TTY, it does not need `supportsColor` check\n\n\n  if ('NETLIFY' in env) {\n    return true;\n  } // If they specify no colors, they probably don't want hyperlinks.\n\n\n  if (!supportsColor.supportsColor(stream)) {\n    return false;\n  }\n\n  if (stream && !stream.isTTY) {\n    return false;\n  }\n\n  if (process.platform === 'win32') {\n    return false;\n  }\n\n  if ('CI' in env) {\n    return false;\n  }\n\n  if ('TEAMCITY_VERSION' in env) {\n    return false;\n  }\n\n  if ('TERM_PROGRAM' in env) {\n    const version = parseVersion(env.TERM_PROGRAM_VERSION);\n\n    switch (env.TERM_PROGRAM) {\n      case 'iTerm.app':\n        if (version.major === 3) {\n          return version.minor >= 1;\n        }\n\n        return version.major > 3;\n\n      case 'WezTerm':\n        return version.major >= 20200620;\n\n      case 'vscode':\n        return version.major > 1 || version.major === 1 && version.minor >= 72;\n      // No default\n    }\n  }\n\n  if ('VTE_VERSION' in env) {\n    // 0.50.0 was supposed to support hyperlinks, but throws a segfault\n    if (env.VTE_VERSION === '0.50.0') {\n      return false;\n    }\n\n    const version = parseVersion(env.VTE_VERSION);\n    return version.major > 0 || version.minor >= 50;\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  supportsHyperlink,\n  stdout: supportsHyperlink(process.stdout),\n  stderr: supportsHyperlink(process.stderr)\n};","map":{"version":3,"names":["supportsColor","require","hasFlag","parseVersion","versionString","test","m","exec","major","minor","parseInt","patch","versions","split","map","n","supportsHyperlink","stream","env","process","FORCE_HYPERLINK","length","isTTY","platform","version","TERM_PROGRAM_VERSION","TERM_PROGRAM","VTE_VERSION","module","exports","stdout","stderr"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/supports-hyperlinks/index.js"],"sourcesContent":["'use strict';\nconst supportsColor = require('supports-color');\nconst hasFlag = require('has-flag');\n\nfunction parseVersion(versionString) {\n\tif (/^\\d{3,4}$/.test(versionString)) {\n\t\t// Env var doesn't always use dots. example: 4601 => 46.1.0\n\t\tconst m = /(\\d{1,2})(\\d{2})/.exec(versionString);\n\t\treturn {\n\t\t\tmajor: 0,\n\t\t\tminor: parseInt(m[1], 10),\n\t\t\tpatch: parseInt(m[2], 10)\n\t\t};\n\t}\n\n\tconst versions = (versionString || '').split('.').map(n => parseInt(n, 10));\n\treturn {\n\t\tmajor: versions[0],\n\t\tminor: versions[1],\n\t\tpatch: versions[2]\n\t};\n}\n\nfunction supportsHyperlink(stream) {\n\tconst {env} = process;\n\n\tif ('FORCE_HYPERLINK' in env) {\n\t\treturn !(env.FORCE_HYPERLINK.length > 0 && parseInt(env.FORCE_HYPERLINK, 10) === 0);\n\t}\n\n\tif (hasFlag('no-hyperlink') || hasFlag('no-hyperlinks') || hasFlag('hyperlink=false') || hasFlag('hyperlink=never')) {\n\t\treturn false;\n\t}\n\n\tif (hasFlag('hyperlink=true') || hasFlag('hyperlink=always')) {\n\t\treturn true;\n\t}\n\n\t// Netlify does not run a TTY, it does not need `supportsColor` check\n\tif ('NETLIFY' in env) {\n\t\treturn true;\n\t}\n\n\t// If they specify no colors, they probably don't want hyperlinks.\n\tif (!supportsColor.supportsColor(stream)) {\n\t\treturn false;\n\t}\n\n\tif (stream && !stream.isTTY) {\n\t\treturn false;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn false;\n\t}\n\n\tif ('CI' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn false;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseVersion(env.TERM_PROGRAM_VERSION);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\tif (version.major === 3) {\n\t\t\t\t\treturn version.minor >= 1;\n\t\t\t\t}\n\n\t\t\t\treturn version.major > 3;\n\t\t\tcase 'WezTerm':\n\t\t\t\treturn version.major >= 20200620;\n\t\t\tcase 'vscode':\n\t\t\t\treturn version.major > 1 || version.major === 1 && version.minor >= 72;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif ('VTE_VERSION' in env) {\n\t\t// 0.50.0 was supposed to support hyperlinks, but throws a segfault\n\t\tif (env.VTE_VERSION === '0.50.0') {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst version = parseVersion(env.VTE_VERSION);\n\t\treturn version.major > 0 || version.minor >= 50;\n\t}\n\n\treturn false;\n}\n\nmodule.exports = {\n\tsupportsHyperlink,\n\tstdout: supportsHyperlink(process.stdout),\n\tstderr: supportsHyperlink(process.stderr)\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}