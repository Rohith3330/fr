{"ast":null,"code":"var isMergeable = require('./is-mergeable');\n\nvar sortSelectors = require('../level-1/sort-selectors');\n\nvar tidyRules = require('../level-1/tidy-rules');\n\nvar OptimizationLevel = require('../../options/optimization-level').OptimizationLevel;\n\nvar serializeBody = require('../../writer/one-time').body;\n\nvar serializeRules = require('../../writer/one-time').rules;\n\nvar Token = require('../../tokenizer/token');\n\nfunction unsafeSelector(value) {\n  return /\\.|\\*| :/.test(value);\n}\n\nfunction isBemElement(token) {\n  var asString = serializeRules(token[1]);\n  return asString.indexOf('__') > -1 || asString.indexOf('--') > -1;\n}\n\nfunction withoutModifier(selector) {\n  return selector.replace(/--[^ ,>+~:]+/g, '');\n}\n\nfunction removeAnyUnsafeElements(left, candidates) {\n  var leftSelector = withoutModifier(serializeRules(left[1]));\n\n  for (var body in candidates) {\n    var right = candidates[body];\n    var rightSelector = withoutModifier(serializeRules(right[1]));\n\n    if (rightSelector.indexOf(leftSelector) > -1 || leftSelector.indexOf(rightSelector) > -1) {\n      delete candidates[body];\n    }\n  }\n}\n\nfunction mergeNonAdjacentByBody(tokens, context) {\n  var options = context.options;\n  var mergeSemantically = options.level[OptimizationLevel.Two].mergeSemantically;\n  var adjacentSpace = options.compatibility.selectors.adjacentSpace;\n  var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  var candidates = {};\n\n  for (var i = tokens.length - 1; i >= 0; i--) {\n    var token = tokens[i];\n\n    if (token[0] != Token.RULE) {\n      continue;\n    }\n\n    if (token[2].length > 0 && !mergeSemantically && unsafeSelector(serializeRules(token[1]))) {\n      candidates = {};\n    }\n\n    if (token[2].length > 0 && mergeSemantically && isBemElement(token)) {\n      removeAnyUnsafeElements(token, candidates);\n    }\n\n    var candidateBody = serializeBody(token[2]);\n    var oldToken = candidates[candidateBody];\n\n    if (oldToken && isMergeable(serializeRules(token[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) && isMergeable(serializeRules(oldToken[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging)) {\n      if (token[2].length > 0) {\n        token[1] = tidyRules(oldToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);\n        token[1] = token[1].length > 1 ? sortSelectors(token[1], selectorsSortingMethod) : token[1];\n      } else {\n        token[1] = oldToken[1].concat(token[1]);\n      }\n\n      oldToken[2] = [];\n      candidates[candidateBody] = null;\n    }\n\n    candidates[serializeBody(token[2])] = token;\n  }\n}\n\nmodule.exports = mergeNonAdjacentByBody;","map":{"version":3,"names":["isMergeable","require","sortSelectors","tidyRules","OptimizationLevel","serializeBody","body","serializeRules","rules","Token","unsafeSelector","value","test","isBemElement","token","asString","indexOf","withoutModifier","selector","replace","removeAnyUnsafeElements","left","candidates","leftSelector","right","rightSelector","mergeNonAdjacentByBody","tokens","context","options","mergeSemantically","level","Two","adjacentSpace","compatibility","selectors","selectorsSortingMethod","One","mergeablePseudoClasses","mergeablePseudoElements","multiplePseudoMerging","i","length","RULE","candidateBody","oldToken","concat","warnings","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/clean-css/lib/optimizer/level-2/merge-non-adjacent-by-body.js"],"sourcesContent":["var isMergeable = require('./is-mergeable');\n\nvar sortSelectors = require('../level-1/sort-selectors');\nvar tidyRules = require('../level-1/tidy-rules');\n\nvar OptimizationLevel = require('../../options/optimization-level').OptimizationLevel;\n\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\n\nvar Token = require('../../tokenizer/token');\n\nfunction unsafeSelector(value) {\n  return /\\.|\\*| :/.test(value);\n}\n\nfunction isBemElement(token) {\n  var asString = serializeRules(token[1]);\n  return asString.indexOf('__') > -1 || asString.indexOf('--') > -1;\n}\n\nfunction withoutModifier(selector) {\n  return selector.replace(/--[^ ,>+~:]+/g, '');\n}\n\nfunction removeAnyUnsafeElements(left, candidates) {\n  var leftSelector = withoutModifier(serializeRules(left[1]));\n\n  for (var body in candidates) {\n    var right = candidates[body];\n    var rightSelector = withoutModifier(serializeRules(right[1]));\n\n    if (rightSelector.indexOf(leftSelector) > -1 || leftSelector.indexOf(rightSelector) > -1) {\n      delete candidates[body];\n    }\n  }\n}\n\nfunction mergeNonAdjacentByBody(tokens, context) {\n  var options = context.options;\n  var mergeSemantically = options.level[OptimizationLevel.Two].mergeSemantically;\n  var adjacentSpace = options.compatibility.selectors.adjacentSpace;\n  var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  var candidates = {};\n\n  for (var i = tokens.length - 1; i >= 0; i--) {\n    var token = tokens[i];\n    if (token[0] != Token.RULE) { continue; }\n\n    if (token[2].length > 0 && (!mergeSemantically && unsafeSelector(serializeRules(token[1])))) { candidates = {}; }\n\n    if (token[2].length > 0 && mergeSemantically && isBemElement(token)) { removeAnyUnsafeElements(token, candidates); }\n\n    var candidateBody = serializeBody(token[2]);\n    var oldToken = candidates[candidateBody];\n    if (oldToken\n        && isMergeable(\n          serializeRules(token[1]),\n          mergeablePseudoClasses,\n          mergeablePseudoElements,\n          multiplePseudoMerging\n        )\n        && isMergeable(\n          serializeRules(oldToken[1]),\n          mergeablePseudoClasses,\n          mergeablePseudoElements,\n          multiplePseudoMerging\n        )\n    ) {\n      if (token[2].length > 0) {\n        token[1] = tidyRules(oldToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);\n        token[1] = token[1].length > 1 ? sortSelectors(token[1], selectorsSortingMethod) : token[1];\n      } else {\n        token[1] = oldToken[1].concat(token[1]);\n      }\n\n      oldToken[2] = [];\n      candidates[candidateBody] = null;\n    }\n\n    candidates[serializeBody(token[2])] = token;\n  }\n}\n\nmodule.exports = mergeNonAdjacentByBody;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}