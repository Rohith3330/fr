{"ast":null,"code":"/* eslint-env mocha */\n\n/* eslint no-template-curly-in-string: 0 */\nimport assert from 'assert';\nimport { extractProp, changePlugins, describeIfNotBabylon, setParserName } from '../helper';\nimport getPropValue from '../../src/getPropValue';\ndescribe('getPropValue', () => {\n  beforeEach(() => {\n    setParserName('flow');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof getPropValue;\n    assert.equal(actual, expected);\n  });\n  it('should return undefined when not provided with a JSXAttribute', () => {\n    const expected = undefined;\n    const actual = getPropValue(1);\n    assert.equal(actual, expected);\n  });\n  it('should throw not error when trying to get value from unknown node type', () => {\n    const prop = {\n      type: 'JSXAttribute',\n      value: {\n        type: 'JSXExpressionContainer'\n      }\n    };\n    let counter = 0; // eslint-disable-next-line no-console\n\n    const errorOrig = console.error; // eslint-disable-next-line no-console\n\n    console.error = () => {\n      counter += 1;\n    };\n\n    let value;\n    assert.doesNotThrow(() => {\n      value = getPropValue(prop);\n    }, Error);\n    assert.equal(null, value);\n    assert.equal(counter, 1); // eslint-disable-next-line no-console\n\n    console.error = errorOrig;\n  });\n  describe('Null', () => {\n    it('should return true when no value is given', () => {\n      const prop = extractProp('<div foo />');\n      const expected = true;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('Literal', () => {\n    it('should return correct string if value is a string', () => {\n      const prop = extractProp('<div foo=\"bar\" />');\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return correct string if value is a string expression', () => {\n      const prop = extractProp('<div foo={\"bar\"} />');\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return correct integer if value is a integer expression', () => {\n      const prop = extractProp('<div foo={1} />');\n      const expected = 1;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should convert \"true\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"true\" />');\n      const expected = true;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should convert \"false\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"false\" />');\n      const expected = false;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('JSXElement', () => {\n    it('should return correct representation of JSX element as a string', () => {\n      const prop = extractProp('<div foo={<bar />} />');\n      const expected = '<bar />';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('Identifier', () => {\n    it('should return string representation of variable identifier', () => {\n      const prop = extractProp('<div foo={bar} />');\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return undefined when identifier is literally `undefined`', () => {\n      const prop = extractProp('<div foo={undefined} />');\n      const expected = undefined;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return String object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={String} />');\n      const expected = String;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return Array object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={Array} />');\n      const expected = Array;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return Date object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={Date} />');\n      const expected = Date;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return Infinity object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={Infinity} />');\n      const expected = Infinity;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return Math object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={Math} />');\n      const expected = Math;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return Number object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={Number} />');\n      const expected = Number;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return Object object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={Object} />');\n      const expected = Object;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('Template literal', () => {\n    it('should return template literal with vars wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={`bar ${baz}`} />');\n      const expected = 'bar {baz}';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return string \"undefined\" for expressions that evaluate to undefined', () => {\n      const prop = extractProp('<div foo={`bar ${undefined}`} />');\n      const expected = 'bar undefined';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return template literal with expression type wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={`bar ${baz()}`} />');\n      const expected = 'bar {CallExpression}';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should ignore non-expressions in the template literal', () => {\n      const prop = extractProp('<div foo={`bar ${<baz />}`} />');\n      const expected = 'bar ';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('Tagged Template literal', () => {\n    it('should return template literal with vars wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={noop`bar ${baz}`} />');\n      const expected = 'bar {baz}';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return string \"undefined\" for expressions that evaluate to undefined', () => {\n      const prop = extractProp('<div foo={noop`bar ${undefined}`} />');\n      const expected = 'bar undefined';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return template literal with expression type wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={noop`bar ${baz()}`} />');\n      const expected = 'bar {CallExpression}';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should ignore non-expressions in the template literal', () => {\n      const prop = extractProp('<div foo={noop`bar ${<baz />}`} />');\n      const expected = 'bar ';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('Arrow function expression', () => {\n    it('should return a function', () => {\n      const prop = extractProp('<div foo={ () => { return \"bar\"; }} />');\n      const expected = 'function';\n      const actual = getPropValue(prop);\n      assert.equal(expected, typeof actual); // For code coverage ¯\\_(ツ)_/¯\n\n      actual();\n    });\n    it('should handle ArrowFunctionExpression as conditional consequent', () => {\n      const prop = extractProp('<div foo={ (true) ? () => null : () => ({})} />');\n      const expected = 'function';\n      const actual = getPropValue(prop);\n      assert.equal(expected, typeof actual); // For code coverage ¯\\_(ツ)_/¯\n\n      actual();\n    });\n  });\n  describe('Function expression', () => {\n    it('should return a function', () => {\n      const prop = extractProp('<div foo={ function() { return \"bar\"; } } />');\n      const expected = 'function';\n      const actual = getPropValue(prop);\n      assert.equal(expected, typeof actual); // For code coverage ¯\\_(ツ)_/¯\n\n      actual();\n    });\n  });\n  describe('Logical expression', () => {\n    it('should correctly infer result of && logical expression based on derived values', () => {\n      const prop = extractProp('<div foo={bar && baz} />');\n      const expected = 'baz';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return undefined when evaluating `undefined && undefined` ', () => {\n      const prop = extractProp('<div foo={undefined && undefined} />');\n      const expected = undefined;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should correctly infer result of || logical expression based on derived values', () => {\n      const prop = extractProp('<div foo={bar || baz} />');\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should correctly infer result of || logical expression based on derived values', () => {\n      const prop = extractProp('<div foo={undefined || baz} />');\n      const expected = 'baz';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return undefined when evaluating `undefined || undefined` ', () => {\n      const prop = extractProp('<div foo={undefined || undefined} />');\n      const expected = undefined;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('Member expression', () => {\n    it('should return string representation of form `object.property`', () => {\n      const prop = extractProp('<div foo={bar.baz} />');\n      const expected = 'bar.baz';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate to a correct representation of member expression with a nullable member', () => {\n      const prop = extractProp('<div foo={bar?.baz} />');\n      const expected = 'bar?.baz';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('Call expression', () => {\n    it('should return string representation of callee', () => {\n      const prop = extractProp('<div foo={bar()} />');\n      const expected = 'bar()';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return string representation of callee', () => {\n      const prop = extractProp('<div foo={bar.call()} />');\n      const expected = 'bar.call()';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('Unary expression', () => {\n    it('should correctly evaluate an expression that prefixes with -', () => {\n      const prop = extractProp('<div foo={-bar} />'); // -\"bar\" => NaN\n\n      const expected = true;\n      const actual = Number.isNaN(getPropValue(prop));\n      assert.equal(actual, expected);\n    });\n    it('should correctly evaluate an expression that prefixes with -', () => {\n      const prop = extractProp('<div foo={-42} />');\n      const expected = -42;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should correctly evaluate an expression that prefixes with +', () => {\n      const prop = extractProp('<div foo={+bar} />'); // +\"bar\" => NaN\n\n      const expected = true;\n      const actual = Number.isNaN(getPropValue(prop));\n      assert.equal(actual, expected);\n    });\n    it('should correctly evaluate an expression that prefixes with +', () => {\n      const prop = extractProp('<div foo={+42} />');\n      const expected = 42;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should correctly evaluate an expression that prefixes with !', () => {\n      const prop = extractProp('<div foo={!bar} />');\n      const expected = false; // !\"bar\" === false\n\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should correctly evaluate an expression that prefixes with ~', () => {\n      const prop = extractProp('<div foo={~bar} />');\n      const expected = -1; // ~\"bar\" === -1\n\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return true when evaluating `delete foo`', () => {\n      const prop = extractProp('<div foo={delete x} />');\n      const expected = true;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return undefined when evaluating `void foo`', () => {\n      const prop = extractProp('<div foo={void x} />');\n      const expected = undefined;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    }); // TODO: We should fix this to check to see if we can evaluate it.\n\n    it('should return undefined when evaluating `typeof foo`', () => {\n      const prop = extractProp('<div foo={typeof x} />');\n      const expected = undefined;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('Update expression', () => {\n    it('should correctly evaluate an expression that prefixes with ++', () => {\n      const prop = extractProp('<div foo={++bar} />'); // ++\"bar\" => NaN\n\n      const expected = true;\n      const actual = Number.isNaN(getPropValue(prop));\n      assert.equal(actual, expected);\n    });\n    it('should correctly evaluate an expression that prefixes with --', () => {\n      const prop = extractProp('<div foo={--bar} />');\n      const expected = true;\n      const actual = Number.isNaN(getPropValue(prop));\n      assert.equal(actual, expected);\n    });\n    it('should correctly evaluate an expression that suffixes with ++', () => {\n      const prop = extractProp('<div foo={bar++} />'); // \"bar\"++ => NaN\n\n      const expected = true;\n      const actual = Number.isNaN(getPropValue(prop));\n      assert.equal(actual, expected);\n    });\n    it('should correctly evaluate an expression that suffixes with --', () => {\n      const prop = extractProp('<div foo={bar--} />');\n      const expected = true;\n      const actual = Number.isNaN(getPropValue(prop));\n      assert.equal(actual, expected);\n    });\n  });\n  describe('This expression', () => {\n    it('should return string value `this`', () => {\n      const prop = extractProp('<div foo={this} />');\n      const expected = 'this';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('Conditional expression', () => {\n    it('should evaluate the conditional based on the derived values correctly', () => {\n      const prop = extractProp('<div foo={bar ? baz : bam} />');\n      const expected = 'baz';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the conditional based on the derived values correctly', () => {\n      const prop = extractProp('<div foo={undefined ? baz : bam} />');\n      const expected = 'bam';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the conditional based on the derived values correctly', () => {\n      const prop = extractProp('<div foo={(1 > 2) ? baz : bam} />');\n      const expected = 'bam';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('Binary expression', () => {\n    it('should evaluate the `==` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 == \"1\"} />');\n      const falseProp = extractProp('<div foo={1 == bar} />');\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n    it('should evaluate the `!=` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 != \"2\"} />');\n      const falseProp = extractProp('<div foo={1 != \"1\"} />');\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n    it('should evaluate the `===` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 === 1} />');\n      const falseProp = extractProp('<div foo={1 === \"1\"} />');\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n    it('should evaluate the `!==` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 !== \"1\"} />');\n      const falseProp = extractProp('<div foo={1 !== 1} />');\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n    it('should evaluate the `<` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 < 2} />');\n      const falseProp = extractProp('<div foo={1 < 0} />');\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n    it('should evaluate the `>` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 > 0} />');\n      const falseProp = extractProp('<div foo={1 > 2} />');\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n    it('should evaluate the `<=` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 <= 1} />');\n      const falseProp = extractProp('<div foo={1 <= 0} />');\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n    it('should evaluate the `>=` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 >= 1} />');\n      const falseProp = extractProp('<div foo={1 >= 2} />');\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n    it('should evaluate the `<<` operator correctly', () => {\n      const prop = extractProp('<div foo={1 << 2} />');\n      const expected = 4;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `>>` operator correctly', () => {\n      const prop = extractProp('<div foo={1 >> 2} />');\n      const expected = 0;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `>>>` operator correctly', () => {\n      const prop = extractProp('<div foo={2 >>> 1} />');\n      const expected = 1;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `+` operator correctly', () => {\n      const prop = extractProp('<div foo={1 + 1} />');\n      const expected = 2;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `-` operator correctly', () => {\n      const prop = extractProp('<div foo={1 - 1} />');\n      const expected = 0;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `*` operator correctly', () => {\n      const prop = extractProp('<div foo={10 * 10} />');\n      const expected = 100;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `/` operator correctly', () => {\n      const prop = extractProp('<div foo={10 / 2} />');\n      const expected = 5;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `%` operator correctly', () => {\n      const prop = extractProp('<div foo={10 % 3} />');\n      const expected = 1;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `|` operator correctly', () => {\n      const prop = extractProp('<div foo={10 | 1} />');\n      const expected = 11;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `^` operator correctly', () => {\n      const prop = extractProp('<div foo={10 ^ 1} />');\n      const expected = 11;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `&` operator correctly', () => {\n      const prop = extractProp('<div foo={10 & 1} />');\n      const expected = 0;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `in` operator correctly', () => {\n      const prop = extractProp('<div foo={foo in bar} />');\n      const expected = false;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `instanceof` operator correctly', () => {\n      const prop = extractProp('<div foo={{} instanceof Object} />');\n      const expected = true;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should evaluate the `instanceof` operator when right side is not a function', () => {\n      const prop = extractProp('<div foo={\"bar\" instanceof Baz} />');\n      const expected = false;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('Object expression', () => {\n    it('should evaluate to a correct representation of the object in props', () => {\n      const prop = extractProp('<div foo={ { bar: \"baz\" } } />');\n      const expected = {\n        bar: 'baz'\n      };\n      const actual = getPropValue(prop);\n      assert.deepEqual(actual, expected);\n    });\n    it('should evaluate to a correct representation of the object, ignore spread properties', () => {\n      const prop = extractProp('<div foo={{bar: \"baz\", ...{baz: \"bar\", foo: {...{bar: \"meh\"}}}}} />');\n      const expected = {\n        bar: 'baz',\n        baz: 'bar',\n        foo: {\n          bar: 'meh'\n        }\n      };\n      const actual = getPropValue(prop);\n      assert.deepEqual(actual, expected);\n    });\n    it('should evaluate to a correct representation of the object, ignore spread properties', () => {\n      const prop = extractProp('<div foo={{ pathname: manageRoute, state: {...data}}} />');\n      const expected = {\n        pathname: 'manageRoute',\n        state: {}\n      };\n      const actual = getPropValue(prop);\n      assert.deepEqual(actual, expected);\n    });\n  });\n  describe('New expression', () => {\n    it('should return a new empty object', () => {\n      const prop = extractProp('<div foo={new Bar()} />');\n      const expected = {};\n      const actual = getPropValue(prop);\n      assert.deepEqual(actual, expected);\n    });\n  });\n  describe('Sequence array expression', () => {\n    it('should evaluate to correct representation of the the array in props', () => {\n      const prop = extractProp('<div foo={[{\"type\":\"Literal\",\"start\":821,\"end\":827}]} />');\n      const expected = [{\n        type: 'Literal',\n        start: 821,\n        end: 827\n      }];\n      const actual = getPropValue(prop);\n      assert.deepEqual(actual, expected);\n    });\n  });\n  describe('Array expression', () => {\n    it('should evaluate to correct representation of the the array in props', () => {\n      const prop = extractProp('<div foo={[\"bar\", 42, null]} />');\n      const expected = ['bar', 42, null];\n      const actual = getPropValue(prop);\n      assert.deepEqual(actual, expected);\n    });\n    it('should evaluate to a correct representation of an array with spread elements', () => {\n      const prop = extractProp('<div foo={[...this.props.params, bar]} />');\n      const expected = [undefined, 'bar'];\n      const actual = getPropValue(prop);\n      assert.deepEqual(actual, expected);\n    });\n  });\n  it('should return an empty array provided an empty array in props', () => {\n    const prop = extractProp('<div foo={[]} />');\n    const expected = [];\n    const actual = getPropValue(prop);\n    assert.deepEqual(actual, expected);\n  });\n  describe('Bind expression', () => {\n    it('should return string representation of bind function call when object is null', () => {\n      const prop = extractProp('<div foo={::this.handleClick} />');\n      const expected = null;\n      const actual = getPropValue(prop);\n      assert.deepEqual(actual, expected);\n    });\n    it('should return string representation of bind function call when object is not null', () => {\n      const prop = extractProp('<div foo={foo::bar} />');\n      const expected = 'foo';\n      const actual = getPropValue(prop);\n      assert.deepEqual(actual, expected);\n    });\n    it('should return string representation of bind function call when binding to object properties', () => {\n      const prop = extractProp('<div foo={a.b::c} />');\n      const otherProp = extractProp('<div foo={::a.b.c} />');\n      const expected = 'a.b';\n      const actual = getPropValue(prop);\n      const otherExpected = null;\n      const otherActual = getPropValue(otherProp);\n      assert.deepEqual(actual, expected);\n      assert.deepEqual(otherActual, otherExpected);\n    });\n  });\n  describe('Type Cast Expression', () => {\n    it('should return the expression from a type cast', () => {\n      const prop = extractProp('<div foo={(this.handleClick: (event: MouseEvent) => void))} />');\n      const expected = 'this.handleClick';\n      const actual = getPropValue(prop);\n      assert.deepEqual(actual, expected);\n    });\n  });\n  describeIfNotBabylon('Typescript', () => {\n    beforeEach(() => {\n      changePlugins(pls => [...pls, 'typescript']);\n    });\n    it('should return string representation of variable identifier wrapped in a Typescript non-null assertion', () => {\n      const prop = extractProp('<div foo={bar!} />');\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return string representation of variable identifier wrapped in a deep Typescript non-null assertion', () => {\n      const prop = extractProp('<div foo={(bar!)!} />');\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n    it('should return string representation of variable identifier wrapped in a Typescript type coercion', () => {\n      changePlugins(pls => [...pls, 'typescript']);\n      const prop = extractProp('<div foo={bar as any} />');\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n  describe('JSX empty expression', () => {\n    it('should work with an empty expression', () => {\n      const prop = extractProp('<div>\\n{/* Hello there */}\\n</div>', 'children');\n      const expected = undefined;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n});","map":{"version":3,"names":["assert","extractProp","changePlugins","describeIfNotBabylon","setParserName","getPropValue","describe","beforeEach","it","expected","actual","equal","undefined","prop","type","value","counter","errorOrig","console","error","doesNotThrow","Error","String","Array","Date","Infinity","Math","Number","Object","isNaN","trueProp","falseProp","trueVal","falseVal","bar","deepEqual","baz","foo","pathname","state","start","end","otherProp","otherExpected","otherActual","pls"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/__tests__/src/getPropValue-flowparser-test.js"],"sourcesContent":["/* eslint-env mocha */\n/* eslint no-template-curly-in-string: 0 */\nimport assert from 'assert';\nimport {\n  extractProp,\n  changePlugins,\n  describeIfNotBabylon,\n  setParserName,\n} from '../helper';\nimport getPropValue from '../../src/getPropValue';\n\ndescribe('getPropValue', () => {\n  beforeEach(() => {\n    setParserName('flow');\n  });\n\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof getPropValue;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return undefined when not provided with a JSXAttribute', () => {\n    const expected = undefined;\n    const actual = getPropValue(1);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should throw not error when trying to get value from unknown node type', () => {\n    const prop = {\n      type: 'JSXAttribute',\n      value: {\n        type: 'JSXExpressionContainer',\n      },\n    };\n    let counter = 0;\n    // eslint-disable-next-line no-console\n    const errorOrig = console.error;\n    // eslint-disable-next-line no-console\n    console.error = () => {\n      counter += 1;\n    };\n    let value;\n    assert.doesNotThrow(() => {\n      value = getPropValue(prop);\n    }, Error);\n\n    assert.equal(null, value);\n    assert.equal(counter, 1);\n    // eslint-disable-next-line no-console\n    console.error = errorOrig;\n  });\n\n  describe('Null', () => {\n    it('should return true when no value is given', () => {\n      const prop = extractProp('<div foo />');\n\n      const expected = true;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Literal', () => {\n    it('should return correct string if value is a string', () => {\n      const prop = extractProp('<div foo=\"bar\" />');\n\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return correct string if value is a string expression', () => {\n      const prop = extractProp('<div foo={\"bar\"} />');\n\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return correct integer if value is a integer expression', () => {\n      const prop = extractProp('<div foo={1} />');\n\n      const expected = 1;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should convert \"true\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"true\" />');\n\n      const expected = true;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should convert \"false\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"false\" />');\n\n      const expected = false;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('JSXElement', () => {\n    it('should return correct representation of JSX element as a string', () => {\n      const prop = extractProp('<div foo={<bar />} />');\n\n      const expected = '<bar />';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Identifier', () => {\n    it('should return string representation of variable identifier', () => {\n      const prop = extractProp('<div foo={bar} />');\n\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return undefined when identifier is literally `undefined`', () => {\n      const prop = extractProp('<div foo={undefined} />');\n\n      const expected = undefined;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return String object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={String} />');\n\n      const expected = String;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return Array object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={Array} />');\n\n      const expected = Array;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return Date object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={Date} />');\n\n      const expected = Date;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return Infinity object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={Infinity} />');\n\n      const expected = Infinity;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return Math object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={Math} />');\n\n      const expected = Math;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return Number object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={Number} />');\n\n      const expected = Number;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return Object object when using a reserved JavaScript object', () => {\n      const prop = extractProp('<div foo={Object} />');\n\n      const expected = Object;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Template literal', () => {\n    it('should return template literal with vars wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={`bar ${baz}`} />');\n\n      const expected = 'bar {baz}';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return string \"undefined\" for expressions that evaluate to undefined', () => {\n      const prop = extractProp('<div foo={`bar ${undefined}`} />');\n\n      const expected = 'bar undefined';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return template literal with expression type wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={`bar ${baz()}`} />');\n\n      const expected = 'bar {CallExpression}';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should ignore non-expressions in the template literal', () => {\n      const prop = extractProp('<div foo={`bar ${<baz />}`} />');\n\n      const expected = 'bar ';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Tagged Template literal', () => {\n    it('should return template literal with vars wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={noop`bar ${baz}`} />');\n\n      const expected = 'bar {baz}';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return string \"undefined\" for expressions that evaluate to undefined', () => {\n      const prop = extractProp('<div foo={noop`bar ${undefined}`} />');\n\n      const expected = 'bar undefined';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return template literal with expression type wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={noop`bar ${baz()}`} />');\n\n      const expected = 'bar {CallExpression}';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should ignore non-expressions in the template literal', () => {\n      const prop = extractProp('<div foo={noop`bar ${<baz />}`} />');\n\n      const expected = 'bar ';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Arrow function expression', () => {\n    it('should return a function', () => {\n      const prop = extractProp('<div foo={ () => { return \"bar\"; }} />');\n\n      const expected = 'function';\n      const actual = getPropValue(prop);\n\n      assert.equal(expected, typeof actual);\n\n      // For code coverage ¯\\_(ツ)_/¯\n      actual();\n    });\n    it('should handle ArrowFunctionExpression as conditional consequent', () => {\n      const prop = extractProp('<div foo={ (true) ? () => null : () => ({})} />');\n\n      const expected = 'function';\n      const actual = getPropValue(prop);\n\n      assert.equal(expected, typeof actual);\n\n      // For code coverage ¯\\_(ツ)_/¯\n      actual();\n    });\n  });\n\n  describe('Function expression', () => {\n    it('should return a function', () => {\n      const prop = extractProp('<div foo={ function() { return \"bar\"; } } />');\n\n      const expected = 'function';\n      const actual = getPropValue(prop);\n\n      assert.equal(expected, typeof actual);\n\n      // For code coverage ¯\\_(ツ)_/¯\n      actual();\n    });\n  });\n\n  describe('Logical expression', () => {\n    it('should correctly infer result of && logical expression based on derived values', () => {\n      const prop = extractProp('<div foo={bar && baz} />');\n\n      const expected = 'baz';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return undefined when evaluating `undefined && undefined` ', () => {\n      const prop = extractProp('<div foo={undefined && undefined} />');\n\n      const expected = undefined;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly infer result of || logical expression based on derived values', () => {\n      const prop = extractProp('<div foo={bar || baz} />');\n\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly infer result of || logical expression based on derived values', () => {\n      const prop = extractProp('<div foo={undefined || baz} />');\n\n      const expected = 'baz';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return undefined when evaluating `undefined || undefined` ', () => {\n      const prop = extractProp('<div foo={undefined || undefined} />');\n\n      const expected = undefined;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Member expression', () => {\n    it('should return string representation of form `object.property`', () => {\n      const prop = extractProp('<div foo={bar.baz} />');\n\n      const expected = 'bar.baz';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate to a correct representation of member expression with a nullable member', () => {\n      const prop = extractProp('<div foo={bar?.baz} />');\n\n      const expected = 'bar?.baz';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Call expression', () => {\n    it('should return string representation of callee', () => {\n      const prop = extractProp('<div foo={bar()} />');\n\n      const expected = 'bar()';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return string representation of callee', () => {\n      const prop = extractProp('<div foo={bar.call()} />');\n\n      const expected = 'bar.call()';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Unary expression', () => {\n    it('should correctly evaluate an expression that prefixes with -', () => {\n      const prop = extractProp('<div foo={-bar} />');\n\n      // -\"bar\" => NaN\n      const expected = true;\n      const actual = Number.isNaN(getPropValue(prop));\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that prefixes with -', () => {\n      const prop = extractProp('<div foo={-42} />');\n\n      const expected = -42;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that prefixes with +', () => {\n      const prop = extractProp('<div foo={+bar} />');\n\n      // +\"bar\" => NaN\n      const expected = true;\n      const actual = Number.isNaN(getPropValue(prop));\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that prefixes with +', () => {\n      const prop = extractProp('<div foo={+42} />');\n\n      const expected = 42;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that prefixes with !', () => {\n      const prop = extractProp('<div foo={!bar} />');\n\n      const expected = false; // !\"bar\" === false\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that prefixes with ~', () => {\n      const prop = extractProp('<div foo={~bar} />');\n\n      const expected = -1; // ~\"bar\" === -1\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return true when evaluating `delete foo`', () => {\n      const prop = extractProp('<div foo={delete x} />');\n\n      const expected = true;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return undefined when evaluating `void foo`', () => {\n      const prop = extractProp('<div foo={void x} />');\n\n      const expected = undefined;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    // TODO: We should fix this to check to see if we can evaluate it.\n    it('should return undefined when evaluating `typeof foo`', () => {\n      const prop = extractProp('<div foo={typeof x} />');\n\n      const expected = undefined;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Update expression', () => {\n    it('should correctly evaluate an expression that prefixes with ++', () => {\n      const prop = extractProp('<div foo={++bar} />');\n\n      // ++\"bar\" => NaN\n      const expected = true;\n      const actual = Number.isNaN(getPropValue(prop));\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that prefixes with --', () => {\n      const prop = extractProp('<div foo={--bar} />');\n\n      const expected = true;\n      const actual = Number.isNaN(getPropValue(prop));\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that suffixes with ++', () => {\n      const prop = extractProp('<div foo={bar++} />');\n\n      // \"bar\"++ => NaN\n      const expected = true;\n      const actual = Number.isNaN(getPropValue(prop));\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that suffixes with --', () => {\n      const prop = extractProp('<div foo={bar--} />');\n\n      const expected = true;\n      const actual = Number.isNaN(getPropValue(prop));\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('This expression', () => {\n    it('should return string value `this`', () => {\n      const prop = extractProp('<div foo={this} />');\n\n      const expected = 'this';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Conditional expression', () => {\n    it('should evaluate the conditional based on the derived values correctly', () => {\n      const prop = extractProp('<div foo={bar ? baz : bam} />');\n\n      const expected = 'baz';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the conditional based on the derived values correctly', () => {\n      const prop = extractProp('<div foo={undefined ? baz : bam} />');\n\n      const expected = 'bam';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the conditional based on the derived values correctly', () => {\n      const prop = extractProp('<div foo={(1 > 2) ? baz : bam} />');\n\n      const expected = 'bam';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Binary expression', () => {\n    it('should evaluate the `==` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 == \"1\"} />');\n      const falseProp = extractProp('<div foo={1 == bar} />');\n\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n\n    it('should evaluate the `!=` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 != \"2\"} />');\n      const falseProp = extractProp('<div foo={1 != \"1\"} />');\n\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n\n    it('should evaluate the `===` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 === 1} />');\n      const falseProp = extractProp('<div foo={1 === \"1\"} />');\n\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n\n    it('should evaluate the `!==` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 !== \"1\"} />');\n      const falseProp = extractProp('<div foo={1 !== 1} />');\n\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n\n    it('should evaluate the `<` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 < 2} />');\n      const falseProp = extractProp('<div foo={1 < 0} />');\n\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n\n    it('should evaluate the `>` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 > 0} />');\n      const falseProp = extractProp('<div foo={1 > 2} />');\n\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n\n    it('should evaluate the `<=` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 <= 1} />');\n      const falseProp = extractProp('<div foo={1 <= 0} />');\n\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n\n    it('should evaluate the `>=` operator correctly', () => {\n      const trueProp = extractProp('<div foo={1 >= 1} />');\n      const falseProp = extractProp('<div foo={1 >= 2} />');\n\n      const trueVal = getPropValue(trueProp);\n      const falseVal = getPropValue(falseProp);\n\n      assert.equal(true, trueVal);\n      assert.equal(false, falseVal);\n    });\n\n    it('should evaluate the `<<` operator correctly', () => {\n      const prop = extractProp('<div foo={1 << 2} />');\n\n      const expected = 4;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `>>` operator correctly', () => {\n      const prop = extractProp('<div foo={1 >> 2} />');\n\n      const expected = 0;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `>>>` operator correctly', () => {\n      const prop = extractProp('<div foo={2 >>> 1} />');\n\n      const expected = 1;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `+` operator correctly', () => {\n      const prop = extractProp('<div foo={1 + 1} />');\n\n      const expected = 2;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `-` operator correctly', () => {\n      const prop = extractProp('<div foo={1 - 1} />');\n\n      const expected = 0;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `*` operator correctly', () => {\n      const prop = extractProp('<div foo={10 * 10} />');\n\n      const expected = 100;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `/` operator correctly', () => {\n      const prop = extractProp('<div foo={10 / 2} />');\n\n      const expected = 5;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `%` operator correctly', () => {\n      const prop = extractProp('<div foo={10 % 3} />');\n\n      const expected = 1;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `|` operator correctly', () => {\n      const prop = extractProp('<div foo={10 | 1} />');\n\n      const expected = 11;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `^` operator correctly', () => {\n      const prop = extractProp('<div foo={10 ^ 1} />');\n\n      const expected = 11;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `&` operator correctly', () => {\n      const prop = extractProp('<div foo={10 & 1} />');\n\n      const expected = 0;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `in` operator correctly', () => {\n      const prop = extractProp('<div foo={foo in bar} />');\n\n      const expected = false;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `instanceof` operator correctly', () => {\n      const prop = extractProp('<div foo={{} instanceof Object} />');\n\n      const expected = true;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should evaluate the `instanceof` operator when right side is not a function', () => {\n      const prop = extractProp('<div foo={\"bar\" instanceof Baz} />');\n\n      const expected = false;\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Object expression', () => {\n    it('should evaluate to a correct representation of the object in props', () => {\n      const prop = extractProp('<div foo={ { bar: \"baz\" } } />');\n\n      const expected = { bar: 'baz' };\n      const actual = getPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    it('should evaluate to a correct representation of the object, ignore spread properties', () => {\n      const prop = extractProp('<div foo={{bar: \"baz\", ...{baz: \"bar\", foo: {...{bar: \"meh\"}}}}} />');\n\n      const expected = { bar: 'baz', baz: 'bar', foo: { bar: 'meh' } };\n      const actual = getPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    it('should evaluate to a correct representation of the object, ignore spread properties', () => {\n      const prop = extractProp('<div foo={{ pathname: manageRoute, state: {...data}}} />');\n\n      const expected = { pathname: 'manageRoute', state: {} };\n      const actual = getPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  describe('New expression', () => {\n    it('should return a new empty object', () => {\n      const prop = extractProp('<div foo={new Bar()} />');\n\n      const expected = {};\n      const actual = getPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  describe('Sequence array expression', () => {\n    it('should evaluate to correct representation of the the array in props', () => {\n      const prop = extractProp('<div foo={[{\"type\":\"Literal\",\"start\":821,\"end\":827}]} />');\n\n      const expected = [{\n        type: 'Literal',\n        start: 821,\n        end: 827,\n      }];\n      const actual = getPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  describe('Array expression', () => {\n    it('should evaluate to correct representation of the the array in props', () => {\n      const prop = extractProp('<div foo={[\"bar\", 42, null]} />');\n\n      const expected = ['bar', 42, null];\n      const actual = getPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    it('should evaluate to a correct representation of an array with spread elements', () => {\n      const prop = extractProp('<div foo={[...this.props.params, bar]} />');\n\n      const expected = [undefined, 'bar'];\n      const actual = getPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  it('should return an empty array provided an empty array in props', () => {\n    const prop = extractProp('<div foo={[]} />');\n\n    const expected = [];\n    const actual = getPropValue(prop);\n\n    assert.deepEqual(actual, expected);\n  });\n\n  describe('Bind expression', () => {\n    it('should return string representation of bind function call when object is null', () => {\n      const prop = extractProp('<div foo={::this.handleClick} />');\n\n      const expected = null;\n      const actual = getPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    it('should return string representation of bind function call when object is not null', () => {\n      const prop = extractProp('<div foo={foo::bar} />');\n\n      const expected = 'foo';\n      const actual = getPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    it('should return string representation of bind function call when binding to object properties', () => {\n      const prop = extractProp('<div foo={a.b::c} />');\n      const otherProp = extractProp('<div foo={::a.b.c} />');\n\n      const expected = 'a.b';\n      const actual = getPropValue(prop);\n\n      const otherExpected = null;\n      const otherActual = getPropValue(otherProp);\n\n      assert.deepEqual(actual, expected);\n      assert.deepEqual(otherActual, otherExpected);\n    });\n  });\n\n  describe('Type Cast Expression', () => {\n    it('should return the expression from a type cast', () => {\n      const prop = extractProp('<div foo={(this.handleClick: (event: MouseEvent) => void))} />');\n\n      const expected = 'this.handleClick';\n      const actual = getPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  describeIfNotBabylon('Typescript', () => {\n    beforeEach(() => {\n      changePlugins((pls) => [...pls, 'typescript']);\n    });\n\n    it('should return string representation of variable identifier wrapped in a Typescript non-null assertion', () => {\n      const prop = extractProp('<div foo={bar!} />');\n\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return string representation of variable identifier wrapped in a deep Typescript non-null assertion', () => {\n      const prop = extractProp('<div foo={(bar!)!} />');\n\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return string representation of variable identifier wrapped in a Typescript type coercion', () => {\n      changePlugins((pls) => [...pls, 'typescript']);\n      const prop = extractProp('<div foo={bar as any} />');\n\n      const expected = 'bar';\n      const actual = getPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('JSX empty expression', () => {\n    it('should work with an empty expression', () => {\n      const prop = extractProp('<div>\\n{/* Hello there */}\\n</div>', 'children');\n      const expected = undefined;\n      const actual = getPropValue(prop);\n      assert.equal(actual, expected);\n    });\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}