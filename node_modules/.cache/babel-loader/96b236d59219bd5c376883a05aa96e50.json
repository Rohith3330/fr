{"ast":null,"code":"// @remove-on-eject-begin\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst paths = require('./paths');\n\nconst chalk = require('react-dev-utils/chalk');\n\nconst resolve = require('resolve');\n/**\n * Get additional module paths based on the baseUrl of a compilerOptions object.\n *\n * @param {Object} options\n */\n\n\nfunction getAdditionalModulePaths() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const baseUrl = options.baseUrl;\n\n  if (!baseUrl) {\n    return '';\n  }\n\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl); // We don't need to do anything if `baseUrl` is set to `node_modules`. This is\n  // the default behavior.\n\n  if (path.relative(paths.appNodeModules, baseUrlResolved) === '') {\n    return null;\n  } // Allow the user set the `baseUrl` to `appSrc`.\n\n\n  if (path.relative(paths.appSrc, baseUrlResolved) === '') {\n    return [paths.appSrc];\n  } // If the path is equal to the root directory we ignore it here.\n  // We don't want to allow importing from the root directly as source files are\n  // not transpiled outside of `src`. We do allow importing them with the\n  // absolute path (e.g. `src/Components/Button.js`) but we set that up with\n  // an alias.\n\n\n  if (path.relative(paths.appPath, baseUrlResolved) === '') {\n    return null;\n  } // Otherwise, throw an error.\n\n\n  throw new Error(chalk.red.bold(\"Your project's `baseUrl` can only be set to `src` or `node_modules`.\" + ' Create React App does not support other values at this time.'));\n}\n/**\n * Get webpack aliases based on the baseUrl of a compilerOptions object.\n *\n * @param {*} options\n */\n\n\nfunction getWebpackAliases() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const baseUrl = options.baseUrl;\n\n  if (!baseUrl) {\n    return {};\n  }\n\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);\n\n  if (path.relative(paths.appPath, baseUrlResolved) === '') {\n    return {\n      src: paths.appSrc\n    };\n  }\n}\n/**\n * Get jest aliases based on the baseUrl of a compilerOptions object.\n *\n * @param {*} options\n */\n\n\nfunction getJestAliases() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const baseUrl = options.baseUrl;\n\n  if (!baseUrl) {\n    return {};\n  }\n\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);\n\n  if (path.relative(paths.appPath, baseUrlResolved) === '') {\n    return {\n      '^src/(.*)$': '<rootDir>/src/$1'\n    };\n  }\n}\n\nfunction getModules() {\n  // Check if TypeScript is setup\n  const hasTsConfig = fs.existsSync(paths.appTsConfig);\n  const hasJsConfig = fs.existsSync(paths.appJsConfig);\n\n  if (hasTsConfig && hasJsConfig) {\n    throw new Error('You have both a tsconfig.json and a jsconfig.json. If you are using TypeScript please remove your jsconfig.json file.');\n  }\n\n  let config; // If there's a tsconfig.json we assume it's a\n  // TypeScript project and set up the config\n  // based on tsconfig.json\n\n  if (hasTsConfig) {\n    const ts = require(resolve.sync('typescript', {\n      basedir: paths.appNodeModules\n    }));\n\n    config = ts.readConfigFile(paths.appTsConfig, ts.sys.readFile).config; // Otherwise we'll check if there is jsconfig.json\n    // for non TS projects.\n  } else if (hasJsConfig) {\n    config = require(paths.appJsConfig);\n  }\n\n  config = config || {};\n  const options = config.compilerOptions || {};\n  const additionalModulePaths = getAdditionalModulePaths(options);\n  return {\n    additionalModulePaths: additionalModulePaths,\n    webpackAliases: getWebpackAliases(options),\n    jestAliases: getJestAliases(options),\n    hasTsConfig\n  };\n}\n\nmodule.exports = getModules();","map":{"version":3,"names":["fs","require","path","paths","chalk","resolve","getAdditionalModulePaths","options","baseUrl","baseUrlResolved","appPath","relative","appNodeModules","appSrc","Error","red","bold","getWebpackAliases","src","getJestAliases","getModules","hasTsConfig","existsSync","appTsConfig","hasJsConfig","appJsConfig","config","ts","sync","basedir","readConfigFile","sys","readFile","compilerOptions","additionalModulePaths","webpackAliases","jestAliases","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/react-scripts/config/modules.js"],"sourcesContent":["// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst paths = require('./paths');\nconst chalk = require('react-dev-utils/chalk');\nconst resolve = require('resolve');\n\n/**\n * Get additional module paths based on the baseUrl of a compilerOptions object.\n *\n * @param {Object} options\n */\nfunction getAdditionalModulePaths(options = {}) {\n  const baseUrl = options.baseUrl;\n\n  if (!baseUrl) {\n    return '';\n  }\n\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);\n\n  // We don't need to do anything if `baseUrl` is set to `node_modules`. This is\n  // the default behavior.\n  if (path.relative(paths.appNodeModules, baseUrlResolved) === '') {\n    return null;\n  }\n\n  // Allow the user set the `baseUrl` to `appSrc`.\n  if (path.relative(paths.appSrc, baseUrlResolved) === '') {\n    return [paths.appSrc];\n  }\n\n  // If the path is equal to the root directory we ignore it here.\n  // We don't want to allow importing from the root directly as source files are\n  // not transpiled outside of `src`. We do allow importing them with the\n  // absolute path (e.g. `src/Components/Button.js`) but we set that up with\n  // an alias.\n  if (path.relative(paths.appPath, baseUrlResolved) === '') {\n    return null;\n  }\n\n  // Otherwise, throw an error.\n  throw new Error(\n    chalk.red.bold(\n      \"Your project's `baseUrl` can only be set to `src` or `node_modules`.\" +\n        ' Create React App does not support other values at this time.'\n    )\n  );\n}\n\n/**\n * Get webpack aliases based on the baseUrl of a compilerOptions object.\n *\n * @param {*} options\n */\nfunction getWebpackAliases(options = {}) {\n  const baseUrl = options.baseUrl;\n\n  if (!baseUrl) {\n    return {};\n  }\n\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);\n\n  if (path.relative(paths.appPath, baseUrlResolved) === '') {\n    return {\n      src: paths.appSrc,\n    };\n  }\n}\n\n/**\n * Get jest aliases based on the baseUrl of a compilerOptions object.\n *\n * @param {*} options\n */\nfunction getJestAliases(options = {}) {\n  const baseUrl = options.baseUrl;\n\n  if (!baseUrl) {\n    return {};\n  }\n\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);\n\n  if (path.relative(paths.appPath, baseUrlResolved) === '') {\n    return {\n      '^src/(.*)$': '<rootDir>/src/$1',\n    };\n  }\n}\n\nfunction getModules() {\n  // Check if TypeScript is setup\n  const hasTsConfig = fs.existsSync(paths.appTsConfig);\n  const hasJsConfig = fs.existsSync(paths.appJsConfig);\n\n  if (hasTsConfig && hasJsConfig) {\n    throw new Error(\n      'You have both a tsconfig.json and a jsconfig.json. If you are using TypeScript please remove your jsconfig.json file.'\n    );\n  }\n\n  let config;\n\n  // If there's a tsconfig.json we assume it's a\n  // TypeScript project and set up the config\n  // based on tsconfig.json\n  if (hasTsConfig) {\n    const ts = require(resolve.sync('typescript', {\n      basedir: paths.appNodeModules,\n    }));\n    config = ts.readConfigFile(paths.appTsConfig, ts.sys.readFile).config;\n    // Otherwise we'll check if there is jsconfig.json\n    // for non TS projects.\n  } else if (hasJsConfig) {\n    config = require(paths.appJsConfig);\n  }\n\n  config = config || {};\n  const options = config.compilerOptions || {};\n\n  const additionalModulePaths = getAdditionalModulePaths(options);\n\n  return {\n    additionalModulePaths: additionalModulePaths,\n    webpackAliases: getWebpackAliases(options),\n    jestAliases: getJestAliases(options),\n    hasTsConfig,\n  };\n}\n\nmodule.exports = getModules();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}