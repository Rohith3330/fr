{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nconst extname = require('path').extname;\n\nconst log = require('debug')('eslint-plugin-import:utils:ignore'); // one-shot memoized\n\n\nlet cachedSet;\nlet lastSettings;\n\nfunction validExtensions(context) {\n  if (cachedSet && context.settings === lastSettings) {\n    return cachedSet;\n  }\n\n  lastSettings = context.settings;\n  cachedSet = makeValidExtensionSet(context.settings);\n  return cachedSet;\n}\n\nfunction makeValidExtensionSet(settings) {\n  // start with explicit JS-parsed extensions\n  const exts = new Set(settings['import/extensions'] || ['.js']); // all alternate parser extensions are also valid\n\n  if ('import/parsers' in settings) {\n    for (const parser in settings['import/parsers']) {\n      const parserSettings = settings['import/parsers'][parser];\n\n      if (!Array.isArray(parserSettings)) {\n        throw new TypeError('\"settings\" for ' + parser + ' must be an array');\n      }\n\n      parserSettings.forEach(ext => exts.add(ext));\n    }\n  }\n\n  return exts;\n}\n\nexports.getFileExtensions = makeValidExtensionSet;\n\nexports.default = function ignore(path, context) {\n  // check extension whitelist first (cheap)\n  if (!hasValidExtension(path, context)) return true;\n  if (!('import/ignore' in context.settings)) return false;\n  const ignoreStrings = context.settings['import/ignore'];\n\n  for (let i = 0; i < ignoreStrings.length; i++) {\n    const regex = new RegExp(ignoreStrings[i]);\n\n    if (regex.test(path)) {\n      log(`ignoring ${path}, matched pattern /${ignoreStrings[i]}/`);\n      return true;\n    }\n  }\n\n  return false;\n};\n\nfunction hasValidExtension(path, context) {\n  return validExtensions(context).has(extname(path));\n}\n\nexports.hasValidExtension = hasValidExtension;","map":{"version":3,"names":["exports","__esModule","extname","require","log","cachedSet","lastSettings","validExtensions","context","settings","makeValidExtensionSet","exts","Set","parser","parserSettings","Array","isArray","TypeError","forEach","ext","add","getFileExtensions","default","ignore","path","hasValidExtension","ignoreStrings","i","length","regex","RegExp","test","has"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-module-utils/ignore.js"],"sourcesContent":["'use strict';\nexports.__esModule = true;\n\nconst extname = require('path').extname;\n\nconst log = require('debug')('eslint-plugin-import:utils:ignore');\n\n// one-shot memoized\nlet cachedSet; let lastSettings;\nfunction validExtensions(context) {\n  if (cachedSet && context.settings === lastSettings) {\n    return cachedSet;\n  }\n\n  lastSettings = context.settings;\n  cachedSet = makeValidExtensionSet(context.settings);\n  return cachedSet;\n}\n\nfunction makeValidExtensionSet(settings) {\n  // start with explicit JS-parsed extensions\n  const exts = new Set(settings['import/extensions'] || [ '.js' ]);\n\n  // all alternate parser extensions are also valid\n  if ('import/parsers' in settings) {\n    for (const parser in settings['import/parsers']) {\n      const parserSettings = settings['import/parsers'][parser];\n      if (!Array.isArray(parserSettings)) {\n        throw new TypeError('\"settings\" for ' + parser + ' must be an array');\n      }\n      parserSettings.forEach(ext => exts.add(ext));\n    }\n  }\n\n  return exts;\n}\nexports.getFileExtensions = makeValidExtensionSet;\n\nexports.default = function ignore(path, context) {\n  // check extension whitelist first (cheap)\n  if (!hasValidExtension(path, context)) return true;\n\n  if (!('import/ignore' in context.settings)) return false;\n  const ignoreStrings = context.settings['import/ignore'];\n\n  for (let i = 0; i < ignoreStrings.length; i++) {\n    const regex = new RegExp(ignoreStrings[i]);\n    if (regex.test(path)) {\n      log(`ignoring ${path}, matched pattern /${ignoreStrings[i]}/`);\n      return true;\n    }\n  }\n\n  return false;\n};\n\nfunction hasValidExtension(path, context) {\n  return validExtensions(context).has(extname(path));\n}\nexports.hasValidExtension = hasValidExtension;\n"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqB,IAArB;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,OAAhC;;AAEA,MAAME,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,mCAAjB,CAAZ,C,CAEA;;;AACA,IAAIE,SAAJ;AAAe,IAAIC,YAAJ;;AACf,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;EAChC,IAAIH,SAAS,IAAIG,OAAO,CAACC,QAAR,KAAqBH,YAAtC,EAAoD;IAClD,OAAOD,SAAP;EACD;;EAEDC,YAAY,GAAGE,OAAO,CAACC,QAAvB;EACAJ,SAAS,GAAGK,qBAAqB,CAACF,OAAO,CAACC,QAAT,CAAjC;EACA,OAAOJ,SAAP;AACD;;AAED,SAASK,qBAAT,CAA+BD,QAA/B,EAAyC;EACvC;EACA,MAAME,IAAI,GAAG,IAAIC,GAAJ,CAAQH,QAAQ,CAAC,mBAAD,CAAR,IAAiC,CAAE,KAAF,CAAzC,CAAb,CAFuC,CAIvC;;EACA,IAAI,oBAAoBA,QAAxB,EAAkC;IAChC,KAAK,MAAMI,MAAX,IAAqBJ,QAAQ,CAAC,gBAAD,CAA7B,EAAiD;MAC/C,MAAMK,cAAc,GAAGL,QAAQ,CAAC,gBAAD,CAAR,CAA2BI,MAA3B,CAAvB;;MACA,IAAI,CAACE,KAAK,CAACC,OAAN,CAAcF,cAAd,CAAL,EAAoC;QAClC,MAAM,IAAIG,SAAJ,CAAc,oBAAoBJ,MAApB,GAA6B,mBAA3C,CAAN;MACD;;MACDC,cAAc,CAACI,OAAf,CAAuBC,GAAG,IAAIR,IAAI,CAACS,GAAL,CAASD,GAAT,CAA9B;IACD;EACF;;EAED,OAAOR,IAAP;AACD;;AACDX,OAAO,CAACqB,iBAAR,GAA4BX,qBAA5B;;AAEAV,OAAO,CAACsB,OAAR,GAAkB,SAASC,MAAT,CAAgBC,IAAhB,EAAsBhB,OAAtB,EAA+B;EAC/C;EACA,IAAI,CAACiB,iBAAiB,CAACD,IAAD,EAAOhB,OAAP,CAAtB,EAAuC,OAAO,IAAP;EAEvC,IAAI,EAAE,mBAAmBA,OAAO,CAACC,QAA7B,CAAJ,EAA4C,OAAO,KAAP;EAC5C,MAAMiB,aAAa,GAAGlB,OAAO,CAACC,QAAR,CAAiB,eAAjB,CAAtB;;EAEA,KAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,aAAa,CAACE,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;IAC7C,MAAME,KAAK,GAAG,IAAIC,MAAJ,CAAWJ,aAAa,CAACC,CAAD,CAAxB,CAAd;;IACA,IAAIE,KAAK,CAACE,IAAN,CAAWP,IAAX,CAAJ,EAAsB;MACpBpB,GAAG,CAAE,YAAWoB,IAAK,sBAAqBE,aAAa,CAACC,CAAD,CAAI,GAAxD,CAAH;MACA,OAAO,IAAP;IACD;EACF;;EAED,OAAO,KAAP;AACD,CAhBD;;AAkBA,SAASF,iBAAT,CAA2BD,IAA3B,EAAiChB,OAAjC,EAA0C;EACxC,OAAOD,eAAe,CAACC,OAAD,CAAf,CAAyBwB,GAAzB,CAA6B9B,OAAO,CAACsB,IAAD,CAApC,CAAP;AACD;;AACDxB,OAAO,CAACyB,iBAAR,GAA4BA,iBAA5B"},"metadata":{},"sourceType":"script"}