{"ast":null,"code":"'use strict';\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nvar _object = require('object.values');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _arrayPrototype = require('array.prototype.flat');\n\nvar _arrayPrototype2 = _interopRequireDefault(_arrayPrototype);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar meta = {\n  type: 'suggestion',\n  docs: {\n    url: (0, _docsUrl2['default'])('group-exports')\n  }\n};\n/* eslint-disable max-len */\n\nvar errors = {\n  ExportNamedDeclaration: 'Multiple named export declarations; consolidate all named exports into a single export declaration',\n  AssignmentExpression: 'Multiple CommonJS exports; consolidate all exports into a single assignment to `module.exports`'\n};\n/* eslint-enable max-len */\n\n/**\n                             * Returns an array with names of the properties in the accessor chain for MemberExpression nodes\n                             *\n                             * Example:\n                             *\n                             * `module.exports = {}` => ['module', 'exports']\n                             * `module.exports.property = true` => ['module', 'exports', 'property']\n                             *\n                             * @param     {Node}    node    AST Node (MemberExpression)\n                             * @return    {Array}           Array with the property names in the chain\n                             * @private\n                             */\n\nfunction accessorChain(node) {\n  var chain = [];\n\n  do {\n    chain.unshift(node.property.name);\n\n    if (node.object.type === 'Identifier') {\n      chain.unshift(node.object.name);\n      break;\n    }\n\n    node = node.object;\n  } while (node.type === 'MemberExpression');\n\n  return chain;\n}\n\nfunction create(context) {\n  var nodes = {\n    modules: {\n      set: new Set(),\n      sources: {}\n    },\n    types: {\n      set: new Set(),\n      sources: {}\n    },\n    commonjs: {\n      set: new Set()\n    }\n  };\n  return {\n    ExportNamedDeclaration: function () {\n      function ExportNamedDeclaration(node) {\n        var target = node.exportKind === 'type' ? nodes.types : nodes.modules;\n\n        if (!node.source) {\n          target.set.add(node);\n        } else if (Array.isArray(target.sources[node.source.value])) {\n          target.sources[node.source.value].push(node);\n        } else {\n          target.sources[node.source.value] = [node];\n        }\n      }\n\n      return ExportNamedDeclaration;\n    }(),\n    AssignmentExpression: function () {\n      function AssignmentExpression(node) {\n        if (node.left.type !== 'MemberExpression') {\n          return;\n        }\n\n        var chain = accessorChain(node.left); // Assignments to module.exports\n        // Deeper assignments are ignored since they just modify what's already being exported\n        // (ie. module.exports.exported.prop = true is ignored)\n\n        if (chain[0] === 'module' && chain[1] === 'exports' && chain.length <= 3) {\n          nodes.commonjs.set.add(node);\n          return;\n        } // Assignments to exports (exports.* = *)\n\n\n        if (chain[0] === 'exports' && chain.length === 2) {\n          nodes.commonjs.set.add(node);\n          return;\n        }\n      }\n\n      return AssignmentExpression;\n    }(),\n    'Program:exit': function () {\n      function onExit() {\n        // Report multiple `export` declarations (ES2015 modules)\n        if (nodes.modules.set.size > 1) {\n          nodes.modules.set.forEach(function (node) {\n            context.report({\n              node: node,\n              message: errors[node.type]\n            });\n          });\n        } // Report multiple `aggregated exports` from the same module (ES2015 modules)\n\n\n        (0, _arrayPrototype2['default'])((0, _object2['default'])(nodes.modules.sources).filter(function (nodesWithSource) {\n          return Array.isArray(nodesWithSource) && nodesWithSource.length > 1;\n        })).forEach(function (node) {\n          context.report({\n            node: node,\n            message: errors[node.type]\n          });\n        }); // Report multiple `export type` declarations (FLOW ES2015 modules)\n\n        if (nodes.types.set.size > 1) {\n          nodes.types.set.forEach(function (node) {\n            context.report({\n              node: node,\n              message: errors[node.type]\n            });\n          });\n        } // Report multiple `aggregated type exports` from the same module (FLOW ES2015 modules)\n\n\n        (0, _arrayPrototype2['default'])((0, _object2['default'])(nodes.types.sources).filter(function (nodesWithSource) {\n          return Array.isArray(nodesWithSource) && nodesWithSource.length > 1;\n        })).forEach(function (node) {\n          context.report({\n            node: node,\n            message: errors[node.type]\n          });\n        }); // Report multiple `module.exports` assignments (CommonJS)\n\n        if (nodes.commonjs.set.size > 1) {\n          nodes.commonjs.set.forEach(function (node) {\n            context.report({\n              node: node,\n              message: errors[node.type]\n            });\n          });\n        }\n      }\n\n      return onExit;\n    }()\n  };\n}\n\nmodule.exports = {\n  meta: meta,\n  create: create\n};","map":{"version":3,"mappings":"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","names":["meta","type","docs","url","errors","ExportNamedDeclaration","AssignmentExpression","accessorChain","node","chain","unshift","property","name","object","create","context","nodes","modules","set","Set","sources","types","commonjs","target","exportKind","source","add","Array","isArray","value","push","left","length","onExit","size","forEach","report","message","filter","nodesWithSource","module","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\group-exports.js"],"sourcesContent":["import docsUrl from '../docsUrl';\nimport values from 'object.values';\nimport flat from 'array.prototype.flat';\n\nconst meta = {\n  type: 'suggestion',\n  docs: {\n    url: docsUrl('group-exports'),\n  },\n};\n/* eslint-disable max-len */\nconst errors = {\n  ExportNamedDeclaration: 'Multiple named export declarations; consolidate all named exports into a single export declaration',\n  AssignmentExpression: 'Multiple CommonJS exports; consolidate all exports into a single assignment to `module.exports`',\n};\n/* eslint-enable max-len */\n\n/**\n * Returns an array with names of the properties in the accessor chain for MemberExpression nodes\n *\n * Example:\n *\n * `module.exports = {}` => ['module', 'exports']\n * `module.exports.property = true` => ['module', 'exports', 'property']\n *\n * @param     {Node}    node    AST Node (MemberExpression)\n * @return    {Array}           Array with the property names in the chain\n * @private\n */\nfunction accessorChain(node) {\n  const chain = [];\n\n  do {\n    chain.unshift(node.property.name);\n\n    if (node.object.type === 'Identifier') {\n      chain.unshift(node.object.name);\n      break;\n    }\n\n    node = node.object;\n  } while (node.type === 'MemberExpression');\n\n  return chain;\n}\n\nfunction create(context) {\n  const nodes = {\n    modules: {\n      set: new Set(),\n      sources: {},\n    },\n    types: {\n      set: new Set(),\n      sources: {},\n    },\n    commonjs: {\n      set: new Set(),\n    },\n  };\n\n  return {\n    ExportNamedDeclaration(node) {\n      const target = node.exportKind === 'type' ? nodes.types : nodes.modules;\n      if (!node.source) {\n        target.set.add(node);\n      } else if (Array.isArray(target.sources[node.source.value])) {\n        target.sources[node.source.value].push(node);\n      } else {\n        target.sources[node.source.value] = [node];\n      }\n    },\n\n    AssignmentExpression(node) {\n      if (node.left.type !== 'MemberExpression') {\n        return;\n      }\n\n      const chain = accessorChain(node.left);\n\n      // Assignments to module.exports\n      // Deeper assignments are ignored since they just modify what's already being exported\n      // (ie. module.exports.exported.prop = true is ignored)\n      if (chain[0] === 'module' && chain[1] === 'exports' && chain.length <= 3) {\n        nodes.commonjs.set.add(node);\n        return;\n      }\n\n      // Assignments to exports (exports.* = *)\n      if (chain[0] === 'exports' && chain.length === 2) {\n        nodes.commonjs.set.add(node);\n        return;\n      }\n    },\n\n    'Program:exit': function onExit() {\n      // Report multiple `export` declarations (ES2015 modules)\n      if (nodes.modules.set.size > 1) {\n        nodes.modules.set.forEach(node => {\n          context.report({\n            node,\n            message: errors[node.type],\n          });\n        });\n      }\n\n      // Report multiple `aggregated exports` from the same module (ES2015 modules)\n      flat(values(nodes.modules.sources)\n        .filter(nodesWithSource => Array.isArray(nodesWithSource) && nodesWithSource.length > 1))\n        .forEach((node) => {\n          context.report({\n            node,\n            message: errors[node.type],\n          });\n        });\n\n      // Report multiple `export type` declarations (FLOW ES2015 modules)\n      if (nodes.types.set.size > 1) {\n        nodes.types.set.forEach(node => {\n          context.report({\n            node,\n            message: errors[node.type],\n          });\n        });\n      }\n\n      // Report multiple `aggregated type exports` from the same module (FLOW ES2015 modules)\n      flat(values(nodes.types.sources)\n        .filter(nodesWithSource => Array.isArray(nodesWithSource) && nodesWithSource.length > 1))\n        .forEach((node) => {\n          context.report({\n            node,\n            message: errors[node.type],\n          });\n        });\n\n      // Report multiple `module.exports` assignments (CommonJS)\n      if (nodes.commonjs.set.size > 1) {\n        nodes.commonjs.set.forEach(node => {\n          context.report({\n            node,\n            message: errors[node.type],\n          });\n        });\n      }\n    },\n  };\n}\n\nmodule.exports = {\n  meta,\n  create,\n};\n"]},"metadata":{},"sourceType":"script"}