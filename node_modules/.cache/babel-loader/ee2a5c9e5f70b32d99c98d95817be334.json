{"ast":null,"code":"/**\n * @fileoverview Enforce event handler naming conventions in JSX\n * @author Jake Marsh\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  badHandlerName: 'Handler function for {{propKey}} prop key must be a camelCase name beginning with \\'{{handlerPrefix}}\\' only',\n  badPropKey: 'Prop key for {{propValue}} must begin with \\'{{handlerPropPrefix}}\\''\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce event handler naming conventions in JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-handler-names')\n    },\n    messages,\n    schema: [{\n      anyOf: [{\n        type: 'object',\n        properties: {\n          eventHandlerPrefix: {\n            type: 'string'\n          },\n          eventHandlerPropPrefix: {\n            type: 'string'\n          },\n          checkLocalVariables: {\n            type: 'boolean'\n          },\n          checkInlineFunction: {\n            type: 'boolean'\n          }\n        },\n        additionalProperties: false\n      }, {\n        type: 'object',\n        properties: {\n          eventHandlerPrefix: {\n            type: 'string'\n          },\n          eventHandlerPropPrefix: {\n            type: 'boolean',\n            enum: [false]\n          },\n          checkLocalVariables: {\n            type: 'boolean'\n          },\n          checkInlineFunction: {\n            type: 'boolean'\n          }\n        },\n        additionalProperties: false\n      }, {\n        type: 'object',\n        properties: {\n          eventHandlerPrefix: {\n            type: 'boolean',\n            enum: [false]\n          },\n          eventHandlerPropPrefix: {\n            type: 'string'\n          },\n          checkLocalVariables: {\n            type: 'boolean'\n          },\n          checkInlineFunction: {\n            type: 'boolean'\n          }\n        },\n        additionalProperties: false\n      }, {\n        type: 'object',\n        properties: {\n          checkLocalVariables: {\n            type: 'boolean'\n          }\n        },\n        additionalProperties: false\n      }, {\n        type: 'object',\n        properties: {\n          checkInlineFunction: {\n            type: 'boolean'\n          }\n        },\n        additionalProperties: false\n      }]\n    }]\n  },\n\n  create(context) {\n    function isPrefixDisabled(prefix) {\n      return prefix === false;\n    }\n\n    function isInlineHandler(node) {\n      return node.value.expression.type === 'ArrowFunctionExpression';\n    }\n\n    const configuration = context.options[0] || {};\n    const eventHandlerPrefix = isPrefixDisabled(configuration.eventHandlerPrefix) ? null : configuration.eventHandlerPrefix || 'handle';\n    const eventHandlerPropPrefix = isPrefixDisabled(configuration.eventHandlerPropPrefix) ? null : configuration.eventHandlerPropPrefix || 'on';\n    const EVENT_HANDLER_REGEX = !eventHandlerPrefix ? null : new RegExp(`^((props\\\\.${eventHandlerPropPrefix || ''})|((.*\\\\.)?${eventHandlerPrefix}))[0-9]*[A-Z].*$`);\n    const PROP_EVENT_HANDLER_REGEX = !eventHandlerPropPrefix ? null : new RegExp(`^(${eventHandlerPropPrefix}[A-Z].*|ref)$`);\n    const checkLocal = !!configuration.checkLocalVariables;\n    const checkInlineFunction = !!configuration.checkInlineFunction;\n    return {\n      JSXAttribute(node) {\n        if (!node.value || !node.value.expression || !checkInlineFunction && isInlineHandler(node) || !checkLocal && (isInlineHandler(node) ? !node.value.expression.body.callee || !node.value.expression.body.callee.object : !node.value.expression.object)) {\n          return;\n        }\n\n        const propKey = typeof node.name === 'object' ? node.name.name : node.name;\n        const expression = node.value.expression;\n        const propValue = context.getSourceCode().getText(checkInlineFunction && isInlineHandler(node) ? expression.body.callee : expression).replace(/\\s*/g, '').replace(/^this\\.|.*::/, '');\n\n        if (propKey === 'ref') {\n          return;\n        }\n\n        const propIsEventHandler = PROP_EVENT_HANDLER_REGEX && PROP_EVENT_HANDLER_REGEX.test(propKey);\n        const propFnIsNamedCorrectly = EVENT_HANDLER_REGEX && EVENT_HANDLER_REGEX.test(propValue);\n\n        if (propIsEventHandler && propFnIsNamedCorrectly !== null && !propFnIsNamedCorrectly) {\n          report(context, messages.badHandlerName, 'badHandlerName', {\n            node,\n            data: {\n              propKey,\n              handlerPrefix: eventHandlerPrefix\n            }\n          });\n        } else if (propFnIsNamedCorrectly && propIsEventHandler !== null && !propIsEventHandler) {\n          report(context, messages.badPropKey, 'badPropKey', {\n            node,\n            data: {\n              propValue,\n              handlerPropPrefix: eventHandlerPropPrefix\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","report","messages","badHandlerName","badPropKey","module","exports","meta","docs","description","category","recommended","url","schema","anyOf","type","properties","eventHandlerPrefix","eventHandlerPropPrefix","checkLocalVariables","checkInlineFunction","additionalProperties","enum","create","context","isPrefixDisabled","prefix","isInlineHandler","node","value","expression","configuration","options","EVENT_HANDLER_REGEX","RegExp","PROP_EVENT_HANDLER_REGEX","checkLocal","JSXAttribute","body","callee","object","propKey","name","propValue","getSourceCode","getText","replace","propIsEventHandler","test","propFnIsNamedCorrectly","data","handlerPrefix","handlerPropPrefix"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-handler-names.js"],"sourcesContent":["/**\n * @fileoverview Enforce event handler naming conventions in JSX\n * @author Jake Marsh\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  badHandlerName: 'Handler function for {{propKey}} prop key must be a camelCase name beginning with \\'{{handlerPrefix}}\\' only',\n  badPropKey: 'Prop key for {{propValue}} must begin with \\'{{handlerPropPrefix}}\\'',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce event handler naming conventions in JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-handler-names'),\n    },\n\n    messages,\n\n    schema: [{\n      anyOf: [\n        {\n          type: 'object',\n          properties: {\n            eventHandlerPrefix: { type: 'string' },\n            eventHandlerPropPrefix: { type: 'string' },\n            checkLocalVariables: { type: 'boolean' },\n            checkInlineFunction: { type: 'boolean' },\n          },\n          additionalProperties: false,\n        }, {\n          type: 'object',\n          properties: {\n            eventHandlerPrefix: { type: 'string' },\n            eventHandlerPropPrefix: {\n              type: 'boolean',\n              enum: [false],\n            },\n            checkLocalVariables: { type: 'boolean' },\n            checkInlineFunction: { type: 'boolean' },\n          },\n          additionalProperties: false,\n        }, {\n          type: 'object',\n          properties: {\n            eventHandlerPrefix: {\n              type: 'boolean',\n              enum: [false],\n            },\n            eventHandlerPropPrefix: { type: 'string' },\n            checkLocalVariables: { type: 'boolean' },\n            checkInlineFunction: { type: 'boolean' },\n          },\n          additionalProperties: false,\n        }, {\n          type: 'object',\n          properties: {\n            checkLocalVariables: { type: 'boolean' },\n          },\n          additionalProperties: false,\n        }, {\n          type: 'object',\n          properties: {\n            checkInlineFunction: { type: 'boolean' },\n          },\n          additionalProperties: false,\n        },\n      ],\n    }],\n  },\n\n  create(context) {\n    function isPrefixDisabled(prefix) {\n      return prefix === false;\n    }\n\n    function isInlineHandler(node) {\n      return node.value.expression.type === 'ArrowFunctionExpression';\n    }\n\n    const configuration = context.options[0] || {};\n\n    const eventHandlerPrefix = isPrefixDisabled(configuration.eventHandlerPrefix)\n      ? null\n      : configuration.eventHandlerPrefix || 'handle';\n    const eventHandlerPropPrefix = isPrefixDisabled(configuration.eventHandlerPropPrefix)\n      ? null\n      : configuration.eventHandlerPropPrefix || 'on';\n\n    const EVENT_HANDLER_REGEX = !eventHandlerPrefix\n      ? null\n      : new RegExp(`^((props\\\\.${eventHandlerPropPrefix || ''})|((.*\\\\.)?${eventHandlerPrefix}))[0-9]*[A-Z].*$`);\n    const PROP_EVENT_HANDLER_REGEX = !eventHandlerPropPrefix\n      ? null\n      : new RegExp(`^(${eventHandlerPropPrefix}[A-Z].*|ref)$`);\n\n    const checkLocal = !!configuration.checkLocalVariables;\n\n    const checkInlineFunction = !!configuration.checkInlineFunction;\n\n    return {\n      JSXAttribute(node) {\n        if (\n          !node.value\n          || !node.value.expression\n          || (!checkInlineFunction && isInlineHandler(node))\n          || (\n            !checkLocal\n            && (isInlineHandler(node)\n              ? !node.value.expression.body.callee || !node.value.expression.body.callee.object\n              : !node.value.expression.object\n            )\n          )\n        ) {\n          return;\n        }\n\n        const propKey = typeof node.name === 'object' ? node.name.name : node.name;\n        const expression = node.value.expression;\n        const propValue = context.getSourceCode()\n          .getText(checkInlineFunction && isInlineHandler(node) ? expression.body.callee : expression)\n          .replace(/\\s*/g, '')\n          .replace(/^this\\.|.*::/, '');\n\n        if (propKey === 'ref') {\n          return;\n        }\n\n        const propIsEventHandler = PROP_EVENT_HANDLER_REGEX && PROP_EVENT_HANDLER_REGEX.test(propKey);\n        const propFnIsNamedCorrectly = EVENT_HANDLER_REGEX && EVENT_HANDLER_REGEX.test(propValue);\n\n        if (\n          propIsEventHandler\n          && propFnIsNamedCorrectly !== null\n          && !propFnIsNamedCorrectly\n        ) {\n          report(context, messages.badHandlerName, 'badHandlerName', {\n            node,\n            data: {\n              propKey,\n              handlerPrefix: eventHandlerPrefix,\n            },\n          });\n        } else if (\n          propFnIsNamedCorrectly\n          && propIsEventHandler !== null\n          && !propIsEventHandler\n        ) {\n          report(context, messages.badPropKey, 'badPropKey', {\n            node,\n            data: {\n              propValue,\n              handlerPropPrefix: eventHandlerPropPrefix,\n            },\n          });\n        }\n      },\n    };\n  },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAAtB,C,CAEA;AACA;AACA;;;AAEA,MAAME,QAAQ,GAAG;EACfC,cAAc,EAAE,8GADD;EAEfC,UAAU,EAAE;AAFG,CAAjB;AAKAC,MAAM,CAACC,OAAP,GAAiB;EACfC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,WAAW,EAAE,iDADT;MAEJC,QAAQ,EAAE,kBAFN;MAGJC,WAAW,EAAE,KAHT;MAIJC,GAAG,EAAEb,OAAO,CAAC,mBAAD;IAJR,CADF;IAQJG,QARI;IAUJW,MAAM,EAAE,CAAC;MACPC,KAAK,EAAE,CACL;QACEC,IAAI,EAAE,QADR;QAEEC,UAAU,EAAE;UACVC,kBAAkB,EAAE;YAAEF,IAAI,EAAE;UAAR,CADV;UAEVG,sBAAsB,EAAE;YAAEH,IAAI,EAAE;UAAR,CAFd;UAGVI,mBAAmB,EAAE;YAAEJ,IAAI,EAAE;UAAR,CAHX;UAIVK,mBAAmB,EAAE;YAAEL,IAAI,EAAE;UAAR;QAJX,CAFd;QAQEM,oBAAoB,EAAE;MARxB,CADK,EAUF;QACDN,IAAI,EAAE,QADL;QAEDC,UAAU,EAAE;UACVC,kBAAkB,EAAE;YAAEF,IAAI,EAAE;UAAR,CADV;UAEVG,sBAAsB,EAAE;YACtBH,IAAI,EAAE,SADgB;YAEtBO,IAAI,EAAE,CAAC,KAAD;UAFgB,CAFd;UAMVH,mBAAmB,EAAE;YAAEJ,IAAI,EAAE;UAAR,CANX;UAOVK,mBAAmB,EAAE;YAAEL,IAAI,EAAE;UAAR;QAPX,CAFX;QAWDM,oBAAoB,EAAE;MAXrB,CAVE,EAsBF;QACDN,IAAI,EAAE,QADL;QAEDC,UAAU,EAAE;UACVC,kBAAkB,EAAE;YAClBF,IAAI,EAAE,SADY;YAElBO,IAAI,EAAE,CAAC,KAAD;UAFY,CADV;UAKVJ,sBAAsB,EAAE;YAAEH,IAAI,EAAE;UAAR,CALd;UAMVI,mBAAmB,EAAE;YAAEJ,IAAI,EAAE;UAAR,CANX;UAOVK,mBAAmB,EAAE;YAAEL,IAAI,EAAE;UAAR;QAPX,CAFX;QAWDM,oBAAoB,EAAE;MAXrB,CAtBE,EAkCF;QACDN,IAAI,EAAE,QADL;QAEDC,UAAU,EAAE;UACVG,mBAAmB,EAAE;YAAEJ,IAAI,EAAE;UAAR;QADX,CAFX;QAKDM,oBAAoB,EAAE;MALrB,CAlCE,EAwCF;QACDN,IAAI,EAAE,QADL;QAEDC,UAAU,EAAE;UACVI,mBAAmB,EAAE;YAAEL,IAAI,EAAE;UAAR;QADX,CAFX;QAKDM,oBAAoB,EAAE;MALrB,CAxCE;IADA,CAAD;EAVJ,CADS;;EA+DfE,MAAM,CAACC,OAAD,EAAU;IACd,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;MAChC,OAAOA,MAAM,KAAK,KAAlB;IACD;;IAED,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;MAC7B,OAAOA,IAAI,CAACC,KAAL,CAAWC,UAAX,CAAsBf,IAAtB,KAA+B,yBAAtC;IACD;;IAED,MAAMgB,aAAa,GAAGP,OAAO,CAACQ,OAAR,CAAgB,CAAhB,KAAsB,EAA5C;IAEA,MAAMf,kBAAkB,GAAGQ,gBAAgB,CAACM,aAAa,CAACd,kBAAf,CAAhB,GACvB,IADuB,GAEvBc,aAAa,CAACd,kBAAd,IAAoC,QAFxC;IAGA,MAAMC,sBAAsB,GAAGO,gBAAgB,CAACM,aAAa,CAACb,sBAAf,CAAhB,GAC3B,IAD2B,GAE3Ba,aAAa,CAACb,sBAAd,IAAwC,IAF5C;IAIA,MAAMe,mBAAmB,GAAG,CAAChB,kBAAD,GACxB,IADwB,GAExB,IAAIiB,MAAJ,CAAY,cAAahB,sBAAsB,IAAI,EAAG,cAAaD,kBAAmB,kBAAtF,CAFJ;IAGA,MAAMkB,wBAAwB,GAAG,CAACjB,sBAAD,GAC7B,IAD6B,GAE7B,IAAIgB,MAAJ,CAAY,KAAIhB,sBAAuB,eAAvC,CAFJ;IAIA,MAAMkB,UAAU,GAAG,CAAC,CAACL,aAAa,CAACZ,mBAAnC;IAEA,MAAMC,mBAAmB,GAAG,CAAC,CAACW,aAAa,CAACX,mBAA5C;IAEA,OAAO;MACLiB,YAAY,CAACT,IAAD,EAAO;QACjB,IACE,CAACA,IAAI,CAACC,KAAN,IACG,CAACD,IAAI,CAACC,KAAL,CAAWC,UADf,IAEI,CAACV,mBAAD,IAAwBO,eAAe,CAACC,IAAD,CAF3C,IAIE,CAACQ,UAAD,KACIT,eAAe,CAACC,IAAD,CAAf,GACA,CAACA,IAAI,CAACC,KAAL,CAAWC,UAAX,CAAsBQ,IAAtB,CAA2BC,MAA5B,IAAsC,CAACX,IAAI,CAACC,KAAL,CAAWC,UAAX,CAAsBQ,IAAtB,CAA2BC,MAA3B,CAAkCC,MADzE,GAEA,CAACZ,IAAI,CAACC,KAAL,CAAWC,UAAX,CAAsBU,MAH3B,CALJ,EAWE;UACA;QACD;;QAED,MAAMC,OAAO,GAAG,OAAOb,IAAI,CAACc,IAAZ,KAAqB,QAArB,GAAgCd,IAAI,CAACc,IAAL,CAAUA,IAA1C,GAAiDd,IAAI,CAACc,IAAtE;QACA,MAAMZ,UAAU,GAAGF,IAAI,CAACC,KAAL,CAAWC,UAA9B;QACA,MAAMa,SAAS,GAAGnB,OAAO,CAACoB,aAAR,GACfC,OADe,CACPzB,mBAAmB,IAAIO,eAAe,CAACC,IAAD,CAAtC,GAA+CE,UAAU,CAACQ,IAAX,CAAgBC,MAA/D,GAAwET,UADjE,EAEfgB,OAFe,CAEP,MAFO,EAEC,EAFD,EAGfA,OAHe,CAGP,cAHO,EAGS,EAHT,CAAlB;;QAKA,IAAIL,OAAO,KAAK,KAAhB,EAAuB;UACrB;QACD;;QAED,MAAMM,kBAAkB,GAAGZ,wBAAwB,IAAIA,wBAAwB,CAACa,IAAzB,CAA8BP,OAA9B,CAAvD;QACA,MAAMQ,sBAAsB,GAAGhB,mBAAmB,IAAIA,mBAAmB,CAACe,IAApB,CAAyBL,SAAzB,CAAtD;;QAEA,IACEI,kBAAkB,IACfE,sBAAsB,KAAK,IAD9B,IAEG,CAACA,sBAHN,EAIE;UACAhD,MAAM,CAACuB,OAAD,EAAUtB,QAAQ,CAACC,cAAnB,EAAmC,gBAAnC,EAAqD;YACzDyB,IADyD;YAEzDsB,IAAI,EAAE;cACJT,OADI;cAEJU,aAAa,EAAElC;YAFX;UAFmD,CAArD,CAAN;QAOD,CAZD,MAYO,IACLgC,sBAAsB,IACnBF,kBAAkB,KAAK,IAD1B,IAEG,CAACA,kBAHC,EAIL;UACA9C,MAAM,CAACuB,OAAD,EAAUtB,QAAQ,CAACE,UAAnB,EAA+B,YAA/B,EAA6C;YACjDwB,IADiD;YAEjDsB,IAAI,EAAE;cACJP,SADI;cAEJS,iBAAiB,EAAElC;YAFf;UAF2C,CAA7C,CAAN;QAOD;MACF;;IAxDI,CAAP;EA0DD;;AAtJc,CAAjB"},"metadata":{},"sourceType":"script"}