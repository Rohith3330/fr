{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _pluginSyntaxLogicalAssignmentOperators = require(\"@babel/plugin-syntax-logical-assignment-operators\");\n\nvar _core = require(\"@babel/core\");\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n  return {\n    name: \"proposal-logical-assignment-operators\",\n    inherits: _pluginSyntaxLogicalAssignmentOperators.default,\n    visitor: {\n      AssignmentExpression(path) {\n        const {\n          node,\n          scope\n        } = path;\n        const {\n          operator,\n          left,\n          right\n        } = node;\n        const operatorTrunc = operator.slice(0, -1);\n\n        if (!_core.types.LOGICAL_OPERATORS.includes(operatorTrunc)) {\n          return;\n        }\n\n        const lhs = _core.types.cloneNode(left);\n\n        if (_core.types.isMemberExpression(left)) {\n          const {\n            object,\n            property,\n            computed\n          } = left;\n          const memo = scope.maybeGenerateMemoised(object);\n\n          if (memo) {\n            left.object = memo;\n            lhs.object = _core.types.assignmentExpression(\"=\", _core.types.cloneNode(memo), object);\n          }\n\n          if (computed) {\n            const memo = scope.maybeGenerateMemoised(property);\n\n            if (memo) {\n              left.property = memo;\n              lhs.property = _core.types.assignmentExpression(\"=\", _core.types.cloneNode(memo), property);\n            }\n          }\n        }\n\n        path.replaceWith(_core.types.logicalExpression(operatorTrunc, lhs, _core.types.assignmentExpression(\"=\", left, right)));\n      }\n\n    }\n  };\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_helperPluginUtils","require","_pluginSyntaxLogicalAssignmentOperators","_core","_default","declare","api","assertVersion","name","inherits","visitor","AssignmentExpression","path","node","scope","operator","left","right","operatorTrunc","slice","types","LOGICAL_OPERATORS","includes","lhs","cloneNode","isMemberExpression","object","property","computed","memo","maybeGenerateMemoised","assignmentExpression","replaceWith","logicalExpression"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@babel/plugin-proposal-logical-assignment-operators/lib/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _pluginSyntaxLogicalAssignmentOperators = require(\"@babel/plugin-syntax-logical-assignment-operators\");\n\nvar _core = require(\"@babel/core\");\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n  return {\n    name: \"proposal-logical-assignment-operators\",\n    inherits: _pluginSyntaxLogicalAssignmentOperators.default,\n    visitor: {\n      AssignmentExpression(path) {\n        const {\n          node,\n          scope\n        } = path;\n        const {\n          operator,\n          left,\n          right\n        } = node;\n        const operatorTrunc = operator.slice(0, -1);\n\n        if (!_core.types.LOGICAL_OPERATORS.includes(operatorTrunc)) {\n          return;\n        }\n\n        const lhs = _core.types.cloneNode(left);\n\n        if (_core.types.isMemberExpression(left)) {\n          const {\n            object,\n            property,\n            computed\n          } = left;\n          const memo = scope.maybeGenerateMemoised(object);\n\n          if (memo) {\n            left.object = memo;\n            lhs.object = _core.types.assignmentExpression(\"=\", _core.types.cloneNode(memo), object);\n          }\n\n          if (computed) {\n            const memo = scope.maybeGenerateMemoised(property);\n\n            if (memo) {\n              left.property = memo;\n              lhs.property = _core.types.assignmentExpression(\"=\", _core.types.cloneNode(memo), property);\n            }\n          }\n        }\n\n        path.replaceWith(_core.types.logicalExpression(operatorTrunc, lhs, _core.types.assignmentExpression(\"=\", left, right)));\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,4BAAD,CAAhC;;AAEA,IAAIC,uCAAuC,GAAGD,OAAO,CAAC,mDAAD,CAArD;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,aAAD,CAAnB;;AAEA,IAAIG,QAAQ,GAAG,CAAC,GAAGJ,kBAAkB,CAACK,OAAvB,EAAgCC,GAAG,IAAI;EACpDA,GAAG,CAACC,aAAJ,CAAkB,CAAlB;EACA,OAAO;IACLC,IAAI,EAAE,uCADD;IAELC,QAAQ,EAAEP,uCAAuC,CAACH,OAF7C;IAGLW,OAAO,EAAE;MACPC,oBAAoB,CAACC,IAAD,EAAO;QACzB,MAAM;UACJC,IADI;UAEJC;QAFI,IAGFF,IAHJ;QAIA,MAAM;UACJG,QADI;UAEJC,IAFI;UAGJC;QAHI,IAIFJ,IAJJ;QAKA,MAAMK,aAAa,GAAGH,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAtB;;QAEA,IAAI,CAAChB,KAAK,CAACiB,KAAN,CAAYC,iBAAZ,CAA8BC,QAA9B,CAAuCJ,aAAvC,CAAL,EAA4D;UAC1D;QACD;;QAED,MAAMK,GAAG,GAAGpB,KAAK,CAACiB,KAAN,CAAYI,SAAZ,CAAsBR,IAAtB,CAAZ;;QAEA,IAAIb,KAAK,CAACiB,KAAN,CAAYK,kBAAZ,CAA+BT,IAA/B,CAAJ,EAA0C;UACxC,MAAM;YACJU,MADI;YAEJC,QAFI;YAGJC;UAHI,IAIFZ,IAJJ;UAKA,MAAMa,IAAI,GAAGf,KAAK,CAACgB,qBAAN,CAA4BJ,MAA5B,CAAb;;UAEA,IAAIG,IAAJ,EAAU;YACRb,IAAI,CAACU,MAAL,GAAcG,IAAd;YACAN,GAAG,CAACG,MAAJ,GAAavB,KAAK,CAACiB,KAAN,CAAYW,oBAAZ,CAAiC,GAAjC,EAAsC5B,KAAK,CAACiB,KAAN,CAAYI,SAAZ,CAAsBK,IAAtB,CAAtC,EAAmEH,MAAnE,CAAb;UACD;;UAED,IAAIE,QAAJ,EAAc;YACZ,MAAMC,IAAI,GAAGf,KAAK,CAACgB,qBAAN,CAA4BH,QAA5B,CAAb;;YAEA,IAAIE,IAAJ,EAAU;cACRb,IAAI,CAACW,QAAL,GAAgBE,IAAhB;cACAN,GAAG,CAACI,QAAJ,GAAexB,KAAK,CAACiB,KAAN,CAAYW,oBAAZ,CAAiC,GAAjC,EAAsC5B,KAAK,CAACiB,KAAN,CAAYI,SAAZ,CAAsBK,IAAtB,CAAtC,EAAmEF,QAAnE,CAAf;YACD;UACF;QACF;;QAEDf,IAAI,CAACoB,WAAL,CAAiB7B,KAAK,CAACiB,KAAN,CAAYa,iBAAZ,CAA8Bf,aAA9B,EAA6CK,GAA7C,EAAkDpB,KAAK,CAACiB,KAAN,CAAYW,oBAAZ,CAAiC,GAAjC,EAAsCf,IAAtC,EAA4CC,KAA5C,CAAlD,CAAjB;MACD;;IA3CM;EAHJ,CAAP;AAkDD,CApDc,CAAf;;AAsDApB,OAAO,CAACE,OAAR,GAAkBK,QAAlB"},"metadata":{},"sourceType":"script"}