{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assignDefaults = void 0;\n\nconst codegen_1 = require(\"../codegen\");\n\nconst util_1 = require(\"../util\");\n\nfunction assignDefaults(it, ty) {\n  const {\n    properties,\n    items\n  } = it.schema;\n\n  if (ty === \"object\" && properties) {\n    for (const key in properties) {\n      assignDefault(it, key, properties[key].default);\n    }\n  } else if (ty === \"array\" && Array.isArray(items)) {\n    items.forEach((sch, i) => assignDefault(it, i, sch.default));\n  }\n}\n\nexports.assignDefaults = assignDefaults;\n\nfunction assignDefault(it, prop, defaultValue) {\n  const {\n    gen,\n    compositeRule,\n    data,\n    opts\n  } = it;\n  if (defaultValue === undefined) return;\n  const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;\n\n  if (compositeRule) {\n    (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);\n    return;\n  }\n\n  let condition = (0, codegen_1._)`${childData} === undefined`;\n\n  if (opts.useDefaults === \"empty\") {\n    condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === \"\"`;\n  } // `${childData} === undefined` +\n  // (opts.useDefaults === \"empty\" ? ` || ${childData} === null || ${childData} === \"\"` : \"\")\n\n\n  gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);\n}","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAEA,SAAgBA,cAAhB,CAA+BC,EAA/B,EAAiDC,EAAjD,EAA4D;EAC1D,MAAM;IAACC,UAAD;IAAaC;EAAb,IAAsBH,EAAE,CAACI,MAA/B;;EACA,IAAIH,EAAE,KAAK,QAAP,IAAmBC,UAAvB,EAAmC;IACjC,KAAK,MAAMG,GAAX,IAAkBH,UAAlB,EAA8B;MAC5BI,aAAa,CAACN,EAAD,EAAKK,GAAL,EAAUH,UAAU,CAACG,GAAD,CAAV,CAAgBE,OAA1B,CAAb;IACD;EACF,CAJD,MAIO,IAAIN,EAAE,KAAK,OAAP,IAAkBO,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAtB,EAA4C;IACjDA,KAAK,CAACO,OAAN,CAAc,CAACC,GAAD,EAAMC,CAAN,KAAoBN,aAAa,CAACN,EAAD,EAAKY,CAAL,EAAQD,GAAG,CAACJ,OAAZ,CAA/C;EACD;AACF;;AATDM;;AAWA,SAASP,aAAT,CAAuBN,EAAvB,EAAyCc,IAAzC,EAAgEC,YAAhE,EAAqF;EACnF,MAAM;IAACC,GAAD;IAAMC,aAAN;IAAqBC,IAArB;IAA2BC;EAA3B,IAAmCnB,EAAzC;EACA,IAAIe,YAAY,KAAKK,SAArB,EAAgC;EAChC,MAAMC,SAAS,GAAG,gBAAC,GAAGH,IAAI,GAAG,2BAAYJ,IAAZ,CAAiB,EAA9C;;EACA,IAAIG,aAAJ,EAAmB;IACjB,4BAAgBjB,EAAhB,EAAoB,2BAA2BqB,SAAS,EAAxD;IACA;EACD;;EAED,IAAIC,SAAS,GAAG,gBAAC,GAAGD,SAAS,gBAA7B;;EACA,IAAIF,IAAI,CAACI,WAAL,KAAqB,OAAzB,EAAkC;IAChCD,SAAS,GAAG,gBAAC,GAAGA,SAAS,OAAOD,SAAS,gBAAgBA,SAAS,SAAlE;EACD,CAZkF,CAanF;EACA;;;EACAL,GAAG,CAACQ,EAAJ,CAAOF,SAAP,EAAkB,gBAAC,GAAGD,SAAS,MAAM,yBAAUN,YAAV,CAAuB,EAA5D;AACD","names":["assignDefaults","it","ty","properties","items","schema","key","assignDefault","default","Array","isArray","forEach","sch","i","exports","prop","defaultValue","gen","compositeRule","data","opts","undefined","childData","condition","useDefaults","if"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\mini-css-extract-plugin\\node_modules\\ajv\\lib\\compile\\validate\\defaults.ts"],"sourcesContent":["import type {SchemaObjCxt} from \"..\"\nimport {_, getProperty, stringify} from \"../codegen\"\nimport {checkStrictMode} from \"../util\"\n\nexport function assignDefaults(it: SchemaObjCxt, ty?: string): void {\n  const {properties, items} = it.schema\n  if (ty === \"object\" && properties) {\n    for (const key in properties) {\n      assignDefault(it, key, properties[key].default)\n    }\n  } else if (ty === \"array\" && Array.isArray(items)) {\n    items.forEach((sch, i: number) => assignDefault(it, i, sch.default))\n  }\n}\n\nfunction assignDefault(it: SchemaObjCxt, prop: string | number, defaultValue: unknown): void {\n  const {gen, compositeRule, data, opts} = it\n  if (defaultValue === undefined) return\n  const childData = _`${data}${getProperty(prop)}`\n  if (compositeRule) {\n    checkStrictMode(it, `default is ignored for: ${childData}`)\n    return\n  }\n\n  let condition = _`${childData} === undefined`\n  if (opts.useDefaults === \"empty\") {\n    condition = _`${condition} || ${childData} === null || ${childData} === \"\"`\n  }\n  // `${childData} === undefined` +\n  // (opts.useDefaults === \"empty\" ? ` || ${childData} === null || ${childData} === \"\"` : \"\")\n  gen.if(condition, _`${childData} = ${stringify(defaultValue)}`)\n}\n"]},"metadata":{},"sourceType":"script"}