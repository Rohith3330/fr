{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _icssUtils = require(\"icss-utils\");\n\nvar _utils = require(\"../utils\");\n\nconst plugin = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    postcssPlugin: \"postcss-icss-parser\",\n\n    async OnceExit(root) {\n      const importReplacements = Object.create(null);\n      const {\n        icssImports,\n        icssExports\n      } = (0, _icssUtils.extractICSS)(root);\n      const imports = new Map();\n      const tasks = [];\n      const {\n        loaderContext\n      } = options;\n      const resolver = loaderContext.getResolve({\n        dependencyType: \"icss\",\n        conditionNames: [\"style\"],\n        extensions: [\"...\"],\n        mainFields: [\"css\", \"style\", \"main\", \"...\"],\n        mainFiles: [\"index\", \"...\"],\n        preferRelative: true\n      }); // eslint-disable-next-line guard-for-in\n\n      for (const url in icssImports) {\n        const tokens = icssImports[url];\n\n        if (Object.keys(tokens).length === 0) {\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n\n        let normalizedUrl = url;\n        let prefix = \"\";\n        const queryParts = normalizedUrl.split(\"!\");\n\n        if (queryParts.length > 1) {\n          normalizedUrl = queryParts.pop();\n          prefix = queryParts.join(\"!\");\n        }\n\n        const request = (0, _utils.requestify)((0, _utils.normalizeUrl)(normalizedUrl, true), loaderContext.rootContext);\n\n        const doResolve = async () => {\n          const resolvedUrl = await (0, _utils.resolveRequests)(resolver, loaderContext.context, [...new Set([normalizedUrl, request])]);\n\n          if (!resolvedUrl) {\n            return;\n          } // eslint-disable-next-line consistent-return\n\n\n          return {\n            url: resolvedUrl,\n            prefix,\n            tokens\n          };\n        };\n\n        tasks.push(doResolve());\n      }\n\n      const results = await Promise.all(tasks);\n\n      for (let index = 0; index <= results.length - 1; index++) {\n        const item = results[index];\n\n        if (!item) {\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n\n        const newUrl = item.prefix ? `${item.prefix}!${item.url}` : item.url;\n        const importKey = newUrl;\n        let importName = imports.get(importKey);\n\n        if (!importName) {\n          importName = `___CSS_LOADER_ICSS_IMPORT_${imports.size}___`;\n          imports.set(importKey, importName);\n          options.imports.push({\n            type: \"icss_import\",\n            importName,\n            url: options.urlHandler(newUrl),\n            icss: true,\n            index\n          });\n          options.api.push({\n            importName,\n            dedupe: true,\n            index\n          });\n        }\n\n        for (const [replacementIndex, token] of Object.keys(item.tokens).entries()) {\n          const replacementName = `___CSS_LOADER_ICSS_IMPORT_${index}_REPLACEMENT_${replacementIndex}___`;\n          const localName = item.tokens[token];\n          importReplacements[token] = replacementName;\n          options.replacements.push({\n            replacementName,\n            importName,\n            localName\n          });\n        }\n      }\n\n      if (Object.keys(importReplacements).length > 0) {\n        (0, _icssUtils.replaceSymbols)(root, importReplacements);\n      }\n\n      for (const name of Object.keys(icssExports)) {\n        const value = (0, _icssUtils.replaceValueSymbols)(icssExports[name], importReplacements);\n        options.exports.push({\n          name,\n          value\n        });\n      }\n    }\n\n  };\n};\n\nplugin.postcss = true;\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_icssUtils","require","_utils","plugin","options","postcssPlugin","OnceExit","root","importReplacements","create","icssImports","icssExports","extractICSS","imports","Map","tasks","loaderContext","resolver","getResolve","dependencyType","conditionNames","extensions","mainFields","mainFiles","preferRelative","url","tokens","keys","length","normalizedUrl","prefix","queryParts","split","pop","join","request","requestify","normalizeUrl","rootContext","doResolve","resolvedUrl","resolveRequests","context","Set","push","results","Promise","all","index","item","newUrl","importKey","importName","get","size","set","type","urlHandler","icss","api","dedupe","replacementIndex","token","entries","replacementName","localName","replacements","replaceSymbols","name","replaceValueSymbols","postcss","_default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/css-loader/dist/plugins/postcss-icss-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _icssUtils = require(\"icss-utils\");\n\nvar _utils = require(\"../utils\");\n\nconst plugin = (options = {}) => {\n  return {\n    postcssPlugin: \"postcss-icss-parser\",\n\n    async OnceExit(root) {\n      const importReplacements = Object.create(null);\n      const {\n        icssImports,\n        icssExports\n      } = (0, _icssUtils.extractICSS)(root);\n      const imports = new Map();\n      const tasks = [];\n      const {\n        loaderContext\n      } = options;\n      const resolver = loaderContext.getResolve({\n        dependencyType: \"icss\",\n        conditionNames: [\"style\"],\n        extensions: [\"...\"],\n        mainFields: [\"css\", \"style\", \"main\", \"...\"],\n        mainFiles: [\"index\", \"...\"],\n        preferRelative: true\n      }); // eslint-disable-next-line guard-for-in\n\n      for (const url in icssImports) {\n        const tokens = icssImports[url];\n\n        if (Object.keys(tokens).length === 0) {\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n\n        let normalizedUrl = url;\n        let prefix = \"\";\n        const queryParts = normalizedUrl.split(\"!\");\n\n        if (queryParts.length > 1) {\n          normalizedUrl = queryParts.pop();\n          prefix = queryParts.join(\"!\");\n        }\n\n        const request = (0, _utils.requestify)((0, _utils.normalizeUrl)(normalizedUrl, true), loaderContext.rootContext);\n\n        const doResolve = async () => {\n          const resolvedUrl = await (0, _utils.resolveRequests)(resolver, loaderContext.context, [...new Set([normalizedUrl, request])]);\n\n          if (!resolvedUrl) {\n            return;\n          } // eslint-disable-next-line consistent-return\n\n\n          return {\n            url: resolvedUrl,\n            prefix,\n            tokens\n          };\n        };\n\n        tasks.push(doResolve());\n      }\n\n      const results = await Promise.all(tasks);\n\n      for (let index = 0; index <= results.length - 1; index++) {\n        const item = results[index];\n\n        if (!item) {\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n\n        const newUrl = item.prefix ? `${item.prefix}!${item.url}` : item.url;\n        const importKey = newUrl;\n        let importName = imports.get(importKey);\n\n        if (!importName) {\n          importName = `___CSS_LOADER_ICSS_IMPORT_${imports.size}___`;\n          imports.set(importKey, importName);\n          options.imports.push({\n            type: \"icss_import\",\n            importName,\n            url: options.urlHandler(newUrl),\n            icss: true,\n            index\n          });\n          options.api.push({\n            importName,\n            dedupe: true,\n            index\n          });\n        }\n\n        for (const [replacementIndex, token] of Object.keys(item.tokens).entries()) {\n          const replacementName = `___CSS_LOADER_ICSS_IMPORT_${index}_REPLACEMENT_${replacementIndex}___`;\n          const localName = item.tokens[token];\n          importReplacements[token] = replacementName;\n          options.replacements.push({\n            replacementName,\n            importName,\n            localName\n          });\n        }\n      }\n\n      if (Object.keys(importReplacements).length > 0) {\n        (0, _icssUtils.replaceSymbols)(root, importReplacements);\n      }\n\n      for (const name of Object.keys(icssExports)) {\n        const value = (0, _icssUtils.replaceValueSymbols)(icssExports[name], importReplacements);\n        options.exports.push({\n          name,\n          value\n        });\n      }\n    }\n\n  };\n};\n\nplugin.postcss = true;\nvar _default = plugin;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}