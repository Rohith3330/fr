{"ast":null,"code":"/**\n * @fileoverview Rule to flag non-matching identifiers\n * @author Matthieu Larcher\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Require identifiers to match a specified regular expression\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/id-match\"\n    },\n    schema: [{\n      type: \"string\"\n    }, {\n      type: \"object\",\n      properties: {\n        properties: {\n          type: \"boolean\",\n          default: false\n        },\n        classFields: {\n          type: \"boolean\",\n          default: false\n        },\n        onlyDeclarations: {\n          type: \"boolean\",\n          default: false\n        },\n        ignoreDestructuring: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      notMatch: \"Identifier '{{name}}' does not match the pattern '{{pattern}}'.\",\n      notMatchPrivate: \"Identifier '#{{name}}' does not match the pattern '{{pattern}}'.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Options\n    //--------------------------------------------------------------------------\n    const pattern = context.options[0] || \"^.+$\",\n          regexp = new RegExp(pattern, \"u\");\n    const options = context.options[1] || {},\n          checkProperties = !!options.properties,\n          checkClassFields = !!options.classFields,\n          onlyDeclarations = !!options.onlyDeclarations,\n          ignoreDestructuring = !!options.ignoreDestructuring;\n    let globalScope; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n    // contains reported nodes to avoid reporting twice on destructuring with shorthand notation\n\n    const reportedNodes = new Set();\n    const ALLOWED_PARENT_TYPES = new Set([\"CallExpression\", \"NewExpression\"]);\n    const DECLARATION_TYPES = new Set([\"FunctionDeclaration\", \"VariableDeclarator\"]);\n    const IMPORT_TYPES = new Set([\"ImportSpecifier\", \"ImportNamespaceSpecifier\", \"ImportDefaultSpecifier\"]);\n    /**\n     * Checks whether the given node represents a reference to a global variable that is not declared in the source code.\n     * These identifiers will be allowed, as it is assumed that user has no control over the names of external global variables.\n     * @param {ASTNode} node `Identifier` node to check.\n     * @returns {boolean} `true` if the node is a reference to a global variable.\n     */\n\n    function isReferenceToGlobalVariable(node) {\n      const variable = globalScope.set.get(node.name);\n      return variable && variable.defs.length === 0 && variable.references.some(ref => ref.identifier === node);\n    }\n    /**\n     * Checks if a string matches the provided pattern\n     * @param {string} name The string to check.\n     * @returns {boolean} if the string is a match\n     * @private\n     */\n\n\n    function isInvalid(name) {\n      return !regexp.test(name);\n    }\n    /**\n     * Checks if a parent of a node is an ObjectPattern.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} if the node is inside an ObjectPattern\n     * @private\n     */\n\n\n    function isInsideObjectPattern(node) {\n      let {\n        parent\n      } = node;\n\n      while (parent) {\n        if (parent.type === \"ObjectPattern\") {\n          return true;\n        }\n\n        parent = parent.parent;\n      }\n\n      return false;\n    }\n    /**\n     * Verifies if we should report an error or not based on the effective\n     * parent node and the identifier name.\n     * @param {ASTNode} effectiveParent The effective parent node of the node to be reported\n     * @param {string} name The identifier name of the identifier node\n     * @returns {boolean} whether an error should be reported or not\n     */\n\n\n    function shouldReport(effectiveParent, name) {\n      return (!onlyDeclarations || DECLARATION_TYPES.has(effectiveParent.type)) && !ALLOWED_PARENT_TYPES.has(effectiveParent.type) && isInvalid(name);\n    }\n    /**\n     * Reports an AST node as a rule violation.\n     * @param {ASTNode} node The node to report.\n     * @returns {void}\n     * @private\n     */\n\n\n    function report(node) {\n      /*\n       * We used the range instead of the node because it's possible\n       * for the same identifier to be represented by two different\n       * nodes, with the most clear example being shorthand properties:\n       * { foo }\n       * In this case, \"foo\" is represented by one node for the name\n       * and one for the value. The only way to know they are the same\n       * is to look at the range.\n       */\n      if (!reportedNodes.has(node.range.toString())) {\n        const messageId = node.type === \"PrivateIdentifier\" ? \"notMatchPrivate\" : \"notMatch\";\n        context.report({\n          node,\n          messageId,\n          data: {\n            name: node.name,\n            pattern\n          }\n        });\n        reportedNodes.add(node.range.toString());\n      }\n    }\n\n    return {\n      Program() {\n        globalScope = context.getScope();\n      },\n\n      Identifier(node) {\n        const name = node.name,\n              parent = node.parent,\n              effectiveParent = parent.type === \"MemberExpression\" ? parent.parent : parent;\n\n        if (isReferenceToGlobalVariable(node)) {\n          return;\n        }\n\n        if (parent.type === \"MemberExpression\") {\n          if (!checkProperties) {\n            return;\n          } // Always check object names\n\n\n          if (parent.object.type === \"Identifier\" && parent.object.name === name) {\n            if (isInvalid(name)) {\n              report(node);\n            } // Report AssignmentExpressions left side's assigned variable id\n\n          } else if (effectiveParent.type === \"AssignmentExpression\" && effectiveParent.left.type === \"MemberExpression\" && effectiveParent.left.property.name === node.name) {\n            if (isInvalid(name)) {\n              report(node);\n            } // Report AssignmentExpressions only if they are the left side of the assignment\n\n          } else if (effectiveParent.type === \"AssignmentExpression\" && effectiveParent.right.type !== \"MemberExpression\") {\n            if (isInvalid(name)) {\n              report(node);\n            }\n          } // For https://github.com/eslint/eslint/issues/15123\n\n        } else if (parent.type === \"Property\" && parent.parent.type === \"ObjectExpression\" && parent.key === node && !parent.computed) {\n          if (checkProperties && isInvalid(name)) {\n            report(node);\n          }\n          /*\n           * Properties have their own rules, and\n           * AssignmentPattern nodes can be treated like Properties:\n           * e.g.: const { no_camelcased = false } = bar;\n           */\n\n        } else if (parent.type === \"Property\" || parent.type === \"AssignmentPattern\") {\n          if (parent.parent && parent.parent.type === \"ObjectPattern\") {\n            if (!ignoreDestructuring && parent.shorthand && parent.value.left && isInvalid(name)) {\n              report(node);\n            }\n\n            const assignmentKeyEqualsValue = parent.key.name === parent.value.name; // prevent checking righthand side of destructured object\n\n            if (!assignmentKeyEqualsValue && parent.key === node) {\n              return;\n            }\n\n            const valueIsInvalid = parent.value.name && isInvalid(name); // ignore destructuring if the option is set, unless a new identifier is created\n\n            if (valueIsInvalid && !(assignmentKeyEqualsValue && ignoreDestructuring)) {\n              report(node);\n            }\n          } // never check properties or always ignore destructuring\n\n\n          if (!checkProperties && !parent.computed || ignoreDestructuring && isInsideObjectPattern(node)) {\n            return;\n          } // don't check right hand side of AssignmentExpression to prevent duplicate warnings\n\n\n          if (parent.right !== node && shouldReport(effectiveParent, name)) {\n            report(node);\n          } // Check if it's an import specifier\n\n        } else if (IMPORT_TYPES.has(parent.type)) {\n          // Report only if the local imported identifier is invalid\n          if (parent.local && parent.local.name === node.name && isInvalid(name)) {\n            report(node);\n          }\n        } else if (parent.type === \"PropertyDefinition\") {\n          if (checkClassFields && isInvalid(name)) {\n            report(node);\n          } // Report anything that is invalid that isn't a CallExpression\n\n        } else if (shouldReport(effectiveParent, name)) {\n          report(node);\n        }\n      },\n\n      \"PrivateIdentifier\"(node) {\n        const isClassField = node.parent.type === \"PropertyDefinition\";\n\n        if (isClassField && !checkClassFields) {\n          return;\n        }\n\n        if (isInvalid(node.name)) {\n          report(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","properties","default","classFields","onlyDeclarations","ignoreDestructuring","additionalProperties","messages","notMatch","notMatchPrivate","create","context","pattern","options","regexp","RegExp","checkProperties","checkClassFields","globalScope","reportedNodes","Set","ALLOWED_PARENT_TYPES","DECLARATION_TYPES","IMPORT_TYPES","isReferenceToGlobalVariable","node","variable","set","get","name","defs","length","references","some","ref","identifier","isInvalid","test","isInsideObjectPattern","parent","shouldReport","effectiveParent","has","report","range","toString","messageId","data","add","Program","getScope","Identifier","object","left","property","right","key","computed","shorthand","value","assignmentKeyEqualsValue","valueIsInvalid","local","isClassField"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/id-match.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag non-matching identifiers\n * @author Matthieu Larcher\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Require identifiers to match a specified regular expression\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/id-match\"\n        },\n\n        schema: [\n            {\n                type: \"string\"\n            },\n            {\n                type: \"object\",\n                properties: {\n                    properties: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    classFields: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    onlyDeclarations: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    ignoreDestructuring: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            notMatch: \"Identifier '{{name}}' does not match the pattern '{{pattern}}'.\",\n            notMatchPrivate: \"Identifier '#{{name}}' does not match the pattern '{{pattern}}'.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Options\n        //--------------------------------------------------------------------------\n        const pattern = context.options[0] || \"^.+$\",\n            regexp = new RegExp(pattern, \"u\");\n\n        const options = context.options[1] || {},\n            checkProperties = !!options.properties,\n            checkClassFields = !!options.classFields,\n            onlyDeclarations = !!options.onlyDeclarations,\n            ignoreDestructuring = !!options.ignoreDestructuring;\n\n        let globalScope;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // contains reported nodes to avoid reporting twice on destructuring with shorthand notation\n        const reportedNodes = new Set();\n        const ALLOWED_PARENT_TYPES = new Set([\"CallExpression\", \"NewExpression\"]);\n        const DECLARATION_TYPES = new Set([\"FunctionDeclaration\", \"VariableDeclarator\"]);\n        const IMPORT_TYPES = new Set([\"ImportSpecifier\", \"ImportNamespaceSpecifier\", \"ImportDefaultSpecifier\"]);\n\n        /**\n         * Checks whether the given node represents a reference to a global variable that is not declared in the source code.\n         * These identifiers will be allowed, as it is assumed that user has no control over the names of external global variables.\n         * @param {ASTNode} node `Identifier` node to check.\n         * @returns {boolean} `true` if the node is a reference to a global variable.\n         */\n        function isReferenceToGlobalVariable(node) {\n            const variable = globalScope.set.get(node.name);\n\n            return variable && variable.defs.length === 0 &&\n                variable.references.some(ref => ref.identifier === node);\n        }\n\n        /**\n         * Checks if a string matches the provided pattern\n         * @param {string} name The string to check.\n         * @returns {boolean} if the string is a match\n         * @private\n         */\n        function isInvalid(name) {\n            return !regexp.test(name);\n        }\n\n        /**\n         * Checks if a parent of a node is an ObjectPattern.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} if the node is inside an ObjectPattern\n         * @private\n         */\n        function isInsideObjectPattern(node) {\n            let { parent } = node;\n\n            while (parent) {\n                if (parent.type === \"ObjectPattern\") {\n                    return true;\n                }\n\n                parent = parent.parent;\n            }\n\n            return false;\n        }\n\n        /**\n         * Verifies if we should report an error or not based on the effective\n         * parent node and the identifier name.\n         * @param {ASTNode} effectiveParent The effective parent node of the node to be reported\n         * @param {string} name The identifier name of the identifier node\n         * @returns {boolean} whether an error should be reported or not\n         */\n        function shouldReport(effectiveParent, name) {\n            return (!onlyDeclarations || DECLARATION_TYPES.has(effectiveParent.type)) &&\n                !ALLOWED_PARENT_TYPES.has(effectiveParent.type) && isInvalid(name);\n        }\n\n        /**\n         * Reports an AST node as a rule violation.\n         * @param {ASTNode} node The node to report.\n         * @returns {void}\n         * @private\n         */\n        function report(node) {\n\n            /*\n             * We used the range instead of the node because it's possible\n             * for the same identifier to be represented by two different\n             * nodes, with the most clear example being shorthand properties:\n             * { foo }\n             * In this case, \"foo\" is represented by one node for the name\n             * and one for the value. The only way to know they are the same\n             * is to look at the range.\n             */\n            if (!reportedNodes.has(node.range.toString())) {\n\n                const messageId = (node.type === \"PrivateIdentifier\")\n                    ? \"notMatchPrivate\" : \"notMatch\";\n\n                context.report({\n                    node,\n                    messageId,\n                    data: {\n                        name: node.name,\n                        pattern\n                    }\n                });\n                reportedNodes.add(node.range.toString());\n            }\n        }\n\n        return {\n\n            Program() {\n                globalScope = context.getScope();\n            },\n\n            Identifier(node) {\n                const name = node.name,\n                    parent = node.parent,\n                    effectiveParent = (parent.type === \"MemberExpression\") ? parent.parent : parent;\n\n                if (isReferenceToGlobalVariable(node)) {\n                    return;\n                }\n\n                if (parent.type === \"MemberExpression\") {\n\n                    if (!checkProperties) {\n                        return;\n                    }\n\n                    // Always check object names\n                    if (parent.object.type === \"Identifier\" &&\n                        parent.object.name === name) {\n                        if (isInvalid(name)) {\n                            report(node);\n                        }\n\n                    // Report AssignmentExpressions left side's assigned variable id\n                    } else if (effectiveParent.type === \"AssignmentExpression\" &&\n                        effectiveParent.left.type === \"MemberExpression\" &&\n                        effectiveParent.left.property.name === node.name) {\n                        if (isInvalid(name)) {\n                            report(node);\n                        }\n\n                    // Report AssignmentExpressions only if they are the left side of the assignment\n                    } else if (effectiveParent.type === \"AssignmentExpression\" && effectiveParent.right.type !== \"MemberExpression\") {\n                        if (isInvalid(name)) {\n                            report(node);\n                        }\n                    }\n\n                // For https://github.com/eslint/eslint/issues/15123\n                } else if (\n                    parent.type === \"Property\" &&\n                    parent.parent.type === \"ObjectExpression\" &&\n                    parent.key === node &&\n                    !parent.computed\n                ) {\n                    if (checkProperties && isInvalid(name)) {\n                        report(node);\n                    }\n\n                /*\n                 * Properties have their own rules, and\n                 * AssignmentPattern nodes can be treated like Properties:\n                 * e.g.: const { no_camelcased = false } = bar;\n                 */\n                } else if (parent.type === \"Property\" || parent.type === \"AssignmentPattern\") {\n\n                    if (parent.parent && parent.parent.type === \"ObjectPattern\") {\n                        if (!ignoreDestructuring && parent.shorthand && parent.value.left && isInvalid(name)) {\n                            report(node);\n                        }\n\n                        const assignmentKeyEqualsValue = parent.key.name === parent.value.name;\n\n                        // prevent checking righthand side of destructured object\n                        if (!assignmentKeyEqualsValue && parent.key === node) {\n                            return;\n                        }\n\n                        const valueIsInvalid = parent.value.name && isInvalid(name);\n\n                        // ignore destructuring if the option is set, unless a new identifier is created\n                        if (valueIsInvalid && !(assignmentKeyEqualsValue && ignoreDestructuring)) {\n                            report(node);\n                        }\n                    }\n\n                    // never check properties or always ignore destructuring\n                    if ((!checkProperties && !parent.computed) || (ignoreDestructuring && isInsideObjectPattern(node))) {\n                        return;\n                    }\n\n                    // don't check right hand side of AssignmentExpression to prevent duplicate warnings\n                    if (parent.right !== node && shouldReport(effectiveParent, name)) {\n                        report(node);\n                    }\n\n                // Check if it's an import specifier\n                } else if (IMPORT_TYPES.has(parent.type)) {\n\n                    // Report only if the local imported identifier is invalid\n                    if (parent.local && parent.local.name === node.name && isInvalid(name)) {\n                        report(node);\n                    }\n\n                } else if (parent.type === \"PropertyDefinition\") {\n\n                    if (checkClassFields && isInvalid(name)) {\n                        report(node);\n                    }\n\n                // Report anything that is invalid that isn't a CallExpression\n                } else if (shouldReport(effectiveParent, name)) {\n                    report(node);\n                }\n            },\n\n            \"PrivateIdentifier\"(node) {\n\n                const isClassField = node.parent.type === \"PropertyDefinition\";\n\n                if (isClassField && !checkClassFields) {\n                    return;\n                }\n\n                if (isInvalid(node.name)) {\n                    report(node);\n                }\n            }\n\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}