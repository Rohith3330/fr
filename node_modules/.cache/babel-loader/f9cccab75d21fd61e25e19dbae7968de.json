{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _eachSeries = require('./eachSeries.js');\n\nvar _eachSeries2 = _interopRequireDefault(_eachSeries);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\n\n\nfunction tryEach(tasks, callback) {\n  var error = null;\n  var result;\n  return (0, _eachSeries2.default)(tasks, (task, taskCb) => {\n    (0, _wrapAsync2.default)(task)(function (err) {\n      if (err === false) return taskCb(err);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (args.length < 2) {\n        [result] = args;\n      } else {\n        result = args;\n      }\n\n      error = err;\n      taskCb(err ? null : {});\n    });\n  }, () => callback(error, result));\n}\n\nexports.default = (0, _awaitify2.default)(tryEach);\nmodule.exports = exports['default'];","map":{"version":3,"names":["Object","defineProperty","exports","value","_eachSeries","require","_eachSeries2","_interopRequireDefault","_wrapAsync","_wrapAsync2","_awaitify","_awaitify2","obj","__esModule","default","tryEach","tasks","callback","error","result","task","taskCb","err","args","length","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/async/tryEach.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _eachSeries = require('./eachSeries.js');\n\nvar _eachSeries2 = _interopRequireDefault(_eachSeries);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return (0, _eachSeries2.default)(tasks, (task, taskCb) => {\n        (0, _wrapAsync2.default)(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nexports.default = (0, _awaitify2.default)(tryEach);\nmodule.exports = exports['default'];"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EACzCC,KAAK,EAAE;AADkC,CAA7C;;AAIA,IAAIC,WAAW,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AAEA,IAAIC,YAAY,GAAGC,sBAAsB,CAACH,WAAD,CAAzC;;AAEA,IAAII,UAAU,GAAGH,OAAO,CAAC,yBAAD,CAAxB;;AAEA,IAAII,WAAW,GAAGF,sBAAsB,CAACC,UAAD,CAAxC;;AAEA,IAAIE,SAAS,GAAGL,OAAO,CAAC,wBAAD,CAAvB;;AAEA,IAAIM,UAAU,GAAGJ,sBAAsB,CAACG,SAAD,CAAvC;;AAEA,SAASH,sBAAT,CAAgCK,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAEE,OAAO,EAAEF;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,OAAT,CAAiBC,KAAjB,EAAwBC,QAAxB,EAAkC;EAC9B,IAAIC,KAAK,GAAG,IAAZ;EACA,IAAIC,MAAJ;EACA,OAAO,CAAC,GAAGb,YAAY,CAACQ,OAAjB,EAA0BE,KAA1B,EAAiC,CAACI,IAAD,EAAOC,MAAP,KAAkB;IACtD,CAAC,GAAGZ,WAAW,CAACK,OAAhB,EAAyBM,IAAzB,EAA+B,UAACE,GAAD,EAAkB;MAC7C,IAAIA,GAAG,KAAK,KAAZ,EAAmB,OAAOD,MAAM,CAACC,GAAD,CAAb;;MAD0B,kCAATC,IAAS;QAATA,IAAS;MAAA;;MAG7C,IAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;QACjB,CAACL,MAAD,IAAWI,IAAX;MACH,CAFD,MAEO;QACHJ,MAAM,GAAGI,IAAT;MACH;;MACDL,KAAK,GAAGI,GAAR;MACAD,MAAM,CAACC,GAAG,GAAG,IAAH,GAAU,EAAd,CAAN;IACH,CAVD;EAWH,CAZM,EAYJ,MAAML,QAAQ,CAACC,KAAD,EAAQC,MAAR,CAZV,CAAP;AAaH;;AAEDjB,OAAO,CAACY,OAAR,GAAkB,CAAC,GAAGH,UAAU,CAACG,OAAf,EAAwBC,OAAxB,CAAlB;AACAU,MAAM,CAACvB,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB"},"metadata":{},"sourceType":"script"}