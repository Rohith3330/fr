{"ast":null,"code":"/** internal\n * class ActionSubparsers\n *\n * Support the creation of such sub-commands with the addSubparsers()\n *\n * This class inherited from [[Action]]\n **/\n'use strict';\n\nvar util = require('util');\n\nvar format = require('util').format;\n\nvar Action = require('../action'); // Constants\n\n\nvar c = require('../const'); // Errors\n\n\nvar argumentErrorHelper = require('../argument/error');\n/*:nodoc:*\n * new ChoicesPseudoAction(name, help)\n *\n * Create pseudo action for correct help text\n *\n **/\n\n\nfunction ChoicesPseudoAction(name, help) {\n  var options = {\n    optionStrings: [],\n    dest: name,\n    help: help\n  };\n  Action.call(this, options);\n}\n\nutil.inherits(ChoicesPseudoAction, Action);\n/**\n * new ActionSubparsers(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\n\nfunction ActionSubparsers(options) {\n  options = options || {};\n  options.dest = options.dest || c.SUPPRESS;\n  options.nargs = c.PARSER;\n  this.debug = options.debug === true;\n  this._progPrefix = options.prog;\n  this._parserClass = options.parserClass;\n  this._nameParserMap = {};\n  this._choicesActions = [];\n  options.choices = this._nameParserMap;\n  Action.call(this, options);\n}\n\nutil.inherits(ActionSubparsers, Action);\n/*:nodoc:*\n * ActionSubparsers#addParser(name, options) -> ArgumentParser\n * - name (string): sub-command name\n * - options (object): see [[ArgumentParser.new]]\n *\n *  Note:\n *  addParser supports an additional aliases option,\n *  which allows multiple strings to refer to the same subparser.\n *  This example, like svn, aliases co as a shorthand for checkout\n *\n **/\n\nActionSubparsers.prototype.addParser = function (name, options) {\n  var parser;\n  var self = this;\n  options = options || {};\n  options.debug = this.debug === true; // set program from the existing prefix\n\n  if (!options.prog) {\n    options.prog = this._progPrefix + ' ' + name;\n  }\n\n  var aliases = options.aliases || []; // create a pseudo-action to hold the choice help\n\n  if (!!options.help || typeof options.help === 'string') {\n    var help = options.help;\n    delete options.help;\n    var choiceAction = new ChoicesPseudoAction(name, help);\n\n    this._choicesActions.push(choiceAction);\n  } // create the parser and add it to the map\n\n\n  parser = new this._parserClass(options);\n  this._nameParserMap[name] = parser; // make parser available under aliases also\n\n  aliases.forEach(function (alias) {\n    self._nameParserMap[alias] = parser;\n  });\n  return parser;\n};\n\nActionSubparsers.prototype._getSubactions = function () {\n  return this._choicesActions;\n};\n/*:nodoc:*\n * ActionSubparsers#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Parse input aguments\n **/\n\n\nActionSubparsers.prototype.call = function (parser, namespace, values) {\n  var parserName = values[0];\n  var argStrings = values.slice(1); // set the parser name if requested\n\n  if (this.dest !== c.SUPPRESS) {\n    namespace[this.dest] = parserName;\n  } // select the parser\n\n\n  if (this._nameParserMap[parserName]) {\n    parser = this._nameParserMap[parserName];\n  } else {\n    throw argumentErrorHelper(format('Unknown parser \"%s\" (choices: [%s]).', parserName, Object.keys(this._nameParserMap).join(', ')));\n  } // parse all the remaining options into the namespace\n\n\n  parser.parseArgs(argStrings, namespace);\n};\n\nmodule.exports = ActionSubparsers;","map":{"version":3,"names":["util","require","format","Action","c","argumentErrorHelper","ChoicesPseudoAction","name","help","options","optionStrings","dest","call","inherits","ActionSubparsers","SUPPRESS","nargs","PARSER","debug","_progPrefix","prog","_parserClass","parserClass","_nameParserMap","_choicesActions","choices","prototype","addParser","parser","self","aliases","choiceAction","push","forEach","alias","_getSubactions","namespace","values","parserName","argStrings","slice","Object","keys","join","parseArgs","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/argparse/lib/action/subparsers.js"],"sourcesContent":["/** internal\n * class ActionSubparsers\n *\n * Support the creation of such sub-commands with the addSubparsers()\n *\n * This class inherited from [[Action]]\n **/\n'use strict';\n\nvar util    = require('util');\nvar format  = require('util').format;\n\n\nvar Action = require('../action');\n\n// Constants\nvar c = require('../const');\n\n// Errors\nvar argumentErrorHelper = require('../argument/error');\n\n\n/*:nodoc:*\n * new ChoicesPseudoAction(name, help)\n *\n * Create pseudo action for correct help text\n *\n **/\nfunction ChoicesPseudoAction(name, help) {\n  var options = {\n    optionStrings: [],\n    dest: name,\n    help: help\n  };\n\n  Action.call(this, options);\n}\n\nutil.inherits(ChoicesPseudoAction, Action);\n\n/**\n * new ActionSubparsers(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\nfunction ActionSubparsers(options) {\n  options = options || {};\n  options.dest = options.dest || c.SUPPRESS;\n  options.nargs = c.PARSER;\n\n  this.debug = (options.debug === true);\n\n  this._progPrefix = options.prog;\n  this._parserClass = options.parserClass;\n  this._nameParserMap = {};\n  this._choicesActions = [];\n\n  options.choices = this._nameParserMap;\n  Action.call(this, options);\n}\n\nutil.inherits(ActionSubparsers, Action);\n\n/*:nodoc:*\n * ActionSubparsers#addParser(name, options) -> ArgumentParser\n * - name (string): sub-command name\n * - options (object): see [[ArgumentParser.new]]\n *\n *  Note:\n *  addParser supports an additional aliases option,\n *  which allows multiple strings to refer to the same subparser.\n *  This example, like svn, aliases co as a shorthand for checkout\n *\n **/\nActionSubparsers.prototype.addParser = function (name, options) {\n  var parser;\n\n  var self = this;\n\n  options = options || {};\n\n  options.debug = (this.debug === true);\n\n  // set program from the existing prefix\n  if (!options.prog) {\n    options.prog = this._progPrefix + ' ' + name;\n  }\n\n  var aliases = options.aliases || [];\n\n  // create a pseudo-action to hold the choice help\n  if (!!options.help || typeof options.help === 'string') {\n    var help = options.help;\n    delete options.help;\n\n    var choiceAction = new ChoicesPseudoAction(name, help);\n    this._choicesActions.push(choiceAction);\n  }\n\n  // create the parser and add it to the map\n  parser = new this._parserClass(options);\n  this._nameParserMap[name] = parser;\n\n  // make parser available under aliases also\n  aliases.forEach(function (alias) {\n    self._nameParserMap[alias] = parser;\n  });\n\n  return parser;\n};\n\nActionSubparsers.prototype._getSubactions = function () {\n  return this._choicesActions;\n};\n\n/*:nodoc:*\n * ActionSubparsers#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Parse input aguments\n **/\nActionSubparsers.prototype.call = function (parser, namespace, values) {\n  var parserName = values[0];\n  var argStrings = values.slice(1);\n\n  // set the parser name if requested\n  if (this.dest !== c.SUPPRESS) {\n    namespace[this.dest] = parserName;\n  }\n\n  // select the parser\n  if (this._nameParserMap[parserName]) {\n    parser = this._nameParserMap[parserName];\n  } else {\n    throw argumentErrorHelper(format(\n      'Unknown parser \"%s\" (choices: [%s]).',\n        parserName,\n        Object.keys(this._nameParserMap).join(', ')\n    ));\n  }\n\n  // parse all the remaining options into the namespace\n  parser.parseArgs(argStrings, namespace);\n};\n\nmodule.exports = ActionSubparsers;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,IAAI,GAAMC,OAAO,CAAC,MAAD,CAArB;;AACA,IAAIC,MAAM,GAAID,OAAO,CAAC,MAAD,CAAP,CAAgBC,MAA9B;;AAGA,IAAIC,MAAM,GAAGF,OAAO,CAAC,WAAD,CAApB,C,CAEA;;;AACA,IAAIG,CAAC,GAAGH,OAAO,CAAC,UAAD,CAAf,C,CAEA;;;AACA,IAAII,mBAAmB,GAAGJ,OAAO,CAAC,mBAAD,CAAjC;AAGA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,mBAAT,CAA6BC,IAA7B,EAAmCC,IAAnC,EAAyC;EACvC,IAAIC,OAAO,GAAG;IACZC,aAAa,EAAE,EADH;IAEZC,IAAI,EAAEJ,IAFM;IAGZC,IAAI,EAAEA;EAHM,CAAd;EAMAL,MAAM,CAACS,IAAP,CAAY,IAAZ,EAAkBH,OAAlB;AACD;;AAEDT,IAAI,CAACa,QAAL,CAAcP,mBAAd,EAAmCH,MAAnC;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASW,gBAAT,CAA0BL,OAA1B,EAAmC;EACjCA,OAAO,GAAGA,OAAO,IAAI,EAArB;EACAA,OAAO,CAACE,IAAR,GAAeF,OAAO,CAACE,IAAR,IAAgBP,CAAC,CAACW,QAAjC;EACAN,OAAO,CAACO,KAAR,GAAgBZ,CAAC,CAACa,MAAlB;EAEA,KAAKC,KAAL,GAAcT,OAAO,CAACS,KAAR,KAAkB,IAAhC;EAEA,KAAKC,WAAL,GAAmBV,OAAO,CAACW,IAA3B;EACA,KAAKC,YAAL,GAAoBZ,OAAO,CAACa,WAA5B;EACA,KAAKC,cAAL,GAAsB,EAAtB;EACA,KAAKC,eAAL,GAAuB,EAAvB;EAEAf,OAAO,CAACgB,OAAR,GAAkB,KAAKF,cAAvB;EACApB,MAAM,CAACS,IAAP,CAAY,IAAZ,EAAkBH,OAAlB;AACD;;AAEDT,IAAI,CAACa,QAAL,CAAcC,gBAAd,EAAgCX,MAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAW,gBAAgB,CAACY,SAAjB,CAA2BC,SAA3B,GAAuC,UAAUpB,IAAV,EAAgBE,OAAhB,EAAyB;EAC9D,IAAImB,MAAJ;EAEA,IAAIC,IAAI,GAAG,IAAX;EAEApB,OAAO,GAAGA,OAAO,IAAI,EAArB;EAEAA,OAAO,CAACS,KAAR,GAAiB,KAAKA,KAAL,KAAe,IAAhC,CAP8D,CAS9D;;EACA,IAAI,CAACT,OAAO,CAACW,IAAb,EAAmB;IACjBX,OAAO,CAACW,IAAR,GAAe,KAAKD,WAAL,GAAmB,GAAnB,GAAyBZ,IAAxC;EACD;;EAED,IAAIuB,OAAO,GAAGrB,OAAO,CAACqB,OAAR,IAAmB,EAAjC,CAd8D,CAgB9D;;EACA,IAAI,CAAC,CAACrB,OAAO,CAACD,IAAV,IAAkB,OAAOC,OAAO,CAACD,IAAf,KAAwB,QAA9C,EAAwD;IACtD,IAAIA,IAAI,GAAGC,OAAO,CAACD,IAAnB;IACA,OAAOC,OAAO,CAACD,IAAf;IAEA,IAAIuB,YAAY,GAAG,IAAIzB,mBAAJ,CAAwBC,IAAxB,EAA8BC,IAA9B,CAAnB;;IACA,KAAKgB,eAAL,CAAqBQ,IAArB,CAA0BD,YAA1B;EACD,CAvB6D,CAyB9D;;;EACAH,MAAM,GAAG,IAAI,KAAKP,YAAT,CAAsBZ,OAAtB,CAAT;EACA,KAAKc,cAAL,CAAoBhB,IAApB,IAA4BqB,MAA5B,CA3B8D,CA6B9D;;EACAE,OAAO,CAACG,OAAR,CAAgB,UAAUC,KAAV,EAAiB;IAC/BL,IAAI,CAACN,cAAL,CAAoBW,KAApB,IAA6BN,MAA7B;EACD,CAFD;EAIA,OAAOA,MAAP;AACD,CAnCD;;AAqCAd,gBAAgB,CAACY,SAAjB,CAA2BS,cAA3B,GAA4C,YAAY;EACtD,OAAO,KAAKX,eAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,gBAAgB,CAACY,SAAjB,CAA2Bd,IAA3B,GAAkC,UAAUgB,MAAV,EAAkBQ,SAAlB,EAA6BC,MAA7B,EAAqC;EACrE,IAAIC,UAAU,GAAGD,MAAM,CAAC,CAAD,CAAvB;EACA,IAAIE,UAAU,GAAGF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAjB,CAFqE,CAIrE;;EACA,IAAI,KAAK7B,IAAL,KAAcP,CAAC,CAACW,QAApB,EAA8B;IAC5BqB,SAAS,CAAC,KAAKzB,IAAN,CAAT,GAAuB2B,UAAvB;EACD,CAPoE,CASrE;;;EACA,IAAI,KAAKf,cAAL,CAAoBe,UAApB,CAAJ,EAAqC;IACnCV,MAAM,GAAG,KAAKL,cAAL,CAAoBe,UAApB,CAAT;EACD,CAFD,MAEO;IACL,MAAMjC,mBAAmB,CAACH,MAAM,CAC9B,sCAD8B,EAE5BoC,UAF4B,EAG5BG,MAAM,CAACC,IAAP,CAAY,KAAKnB,cAAjB,EAAiCoB,IAAjC,CAAsC,IAAtC,CAH4B,CAAP,CAAzB;EAKD,CAlBoE,CAoBrE;;;EACAf,MAAM,CAACgB,SAAP,CAAiBL,UAAjB,EAA6BH,SAA7B;AACD,CAtBD;;AAwBAS,MAAM,CAACC,OAAP,GAAiBhC,gBAAjB"},"metadata":{},"sourceType":"script"}