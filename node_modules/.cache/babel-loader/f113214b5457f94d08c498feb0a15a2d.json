{"ast":null,"code":"/**\n * Extractor function for a BinaryExpression type value node.\n * A binary expression has a left and right side separated by an operator\n * such as `a + b`.\n *\n * @param - value - AST Value object with type `BinaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromBinaryExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n\n  const {\n    operator,\n    left,\n    right\n  } = value;\n  const leftVal = getValue(left);\n  const rightVal = getValue(right);\n\n  switch (operator) {\n    case '==':\n      return leftVal == rightVal;\n    // eslint-disable-line\n\n    case '!=':\n      return leftVal != rightVal;\n    // eslint-disable-line\n\n    case '===':\n      return leftVal === rightVal;\n\n    case '!==':\n      return leftVal !== rightVal;\n\n    case '<':\n      return leftVal < rightVal;\n\n    case '<=':\n      return leftVal <= rightVal;\n\n    case '>':\n      return leftVal > rightVal;\n\n    case '>=':\n      return leftVal >= rightVal;\n\n    case '<<':\n      return leftVal << rightVal;\n    // eslint-disable-line no-bitwise\n\n    case '>>':\n      return leftVal >> rightVal;\n    // eslint-disable-line no-bitwise\n\n    case '>>>':\n      return leftVal >>> rightVal;\n    // eslint-disable-line no-bitwise\n\n    case '+':\n      return leftVal + rightVal;\n\n    case '-':\n      return leftVal - rightVal;\n\n    case '*':\n      return leftVal * rightVal;\n\n    case '/':\n      return leftVal / rightVal;\n\n    case '%':\n      return leftVal % rightVal;\n\n    case '|':\n      return leftVal | rightVal;\n    // eslint-disable-line no-bitwise\n\n    case '^':\n      return leftVal ^ rightVal;\n    // eslint-disable-line no-bitwise\n\n    case '&':\n      return leftVal & rightVal;\n    // eslint-disable-line no-bitwise\n\n    case 'in':\n      try {\n        return leftVal in rightVal;\n      } catch (err) {\n        return false;\n      }\n\n    case 'instanceof':\n      if (typeof rightVal !== 'function') {\n        return false;\n      }\n\n      return leftVal instanceof rightVal;\n\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"names":["extractValueFromBinaryExpression","value","getValue","require","default","operator","left","right","leftVal","rightVal","err","undefined"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/src/values/expressions/BinaryExpression.js"],"sourcesContent":["/**\n * Extractor function for a BinaryExpression type value node.\n * A binary expression has a left and right side separated by an operator\n * such as `a + b`.\n *\n * @param - value - AST Value object with type `BinaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromBinaryExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n  const { operator, left, right } = value;\n  const leftVal = getValue(left);\n  const rightVal = getValue(right);\n\n  switch (operator) {\n    case '==':\n      return leftVal == rightVal; // eslint-disable-line\n    case '!=':\n      return leftVal != rightVal; // eslint-disable-line\n    case '===':\n      return leftVal === rightVal;\n    case '!==':\n      return leftVal !== rightVal;\n    case '<':\n      return leftVal < rightVal;\n    case '<=':\n      return leftVal <= rightVal;\n    case '>':\n      return leftVal > rightVal;\n    case '>=':\n      return leftVal >= rightVal;\n    case '<<':\n      return leftVal << rightVal; // eslint-disable-line no-bitwise\n    case '>>':\n      return leftVal >> rightVal; // eslint-disable-line no-bitwise\n    case '>>>':\n      return leftVal >>> rightVal; // eslint-disable-line no-bitwise\n    case '+':\n      return leftVal + rightVal;\n    case '-':\n      return leftVal - rightVal;\n    case '*':\n      return leftVal * rightVal;\n    case '/':\n      return leftVal / rightVal;\n    case '%':\n      return leftVal % rightVal;\n    case '|':\n      return leftVal | rightVal; // eslint-disable-line no-bitwise\n    case '^':\n      return leftVal ^ rightVal; // eslint-disable-line no-bitwise\n    case '&':\n      return leftVal & rightVal; // eslint-disable-line no-bitwise\n    case 'in':\n      try {\n        return leftVal in rightVal;\n      } catch (err) {\n        return false;\n      }\n    case 'instanceof':\n      if (typeof rightVal !== 'function') {\n        return false;\n      }\n      return leftVal instanceof rightVal;\n    default:\n      return undefined;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,gCAAT,CAA0CC,KAA1C,EAAiD;EAC9D;EACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,GAAD,CAAP,CAAaC,OAA9B;;EACA,MAAM;IAAEC,QAAF;IAAYC,IAAZ;IAAkBC;EAAlB,IAA4BN,KAAlC;EACA,MAAMO,OAAO,GAAGN,QAAQ,CAACI,IAAD,CAAxB;EACA,MAAMG,QAAQ,GAAGP,QAAQ,CAACK,KAAD,CAAzB;;EAEA,QAAQF,QAAR;IACE,KAAK,IAAL;MACE,OAAOG,OAAO,IAAIC,QAAlB;IAA4B;;IAC9B,KAAK,IAAL;MACE,OAAOD,OAAO,IAAIC,QAAlB;IAA4B;;IAC9B,KAAK,KAAL;MACE,OAAOD,OAAO,KAAKC,QAAnB;;IACF,KAAK,KAAL;MACE,OAAOD,OAAO,KAAKC,QAAnB;;IACF,KAAK,GAAL;MACE,OAAOD,OAAO,GAAGC,QAAjB;;IACF,KAAK,IAAL;MACE,OAAOD,OAAO,IAAIC,QAAlB;;IACF,KAAK,GAAL;MACE,OAAOD,OAAO,GAAGC,QAAjB;;IACF,KAAK,IAAL;MACE,OAAOD,OAAO,IAAIC,QAAlB;;IACF,KAAK,IAAL;MACE,OAAOD,OAAO,IAAIC,QAAlB;IAA4B;;IAC9B,KAAK,IAAL;MACE,OAAOD,OAAO,IAAIC,QAAlB;IAA4B;;IAC9B,KAAK,KAAL;MACE,OAAOD,OAAO,KAAKC,QAAnB;IAA6B;;IAC/B,KAAK,GAAL;MACE,OAAOD,OAAO,GAAGC,QAAjB;;IACF,KAAK,GAAL;MACE,OAAOD,OAAO,GAAGC,QAAjB;;IACF,KAAK,GAAL;MACE,OAAOD,OAAO,GAAGC,QAAjB;;IACF,KAAK,GAAL;MACE,OAAOD,OAAO,GAAGC,QAAjB;;IACF,KAAK,GAAL;MACE,OAAOD,OAAO,GAAGC,QAAjB;;IACF,KAAK,GAAL;MACE,OAAOD,OAAO,GAAGC,QAAjB;IAA2B;;IAC7B,KAAK,GAAL;MACE,OAAOD,OAAO,GAAGC,QAAjB;IAA2B;;IAC7B,KAAK,GAAL;MACE,OAAOD,OAAO,GAAGC,QAAjB;IAA2B;;IAC7B,KAAK,IAAL;MACE,IAAI;QACF,OAAOD,OAAO,IAAIC,QAAlB;MACD,CAFD,CAEE,OAAOC,GAAP,EAAY;QACZ,OAAO,KAAP;MACD;;IACH,KAAK,YAAL;MACE,IAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;QAClC,OAAO,KAAP;MACD;;MACD,OAAOD,OAAO,YAAYC,QAA1B;;IACF;MACE,OAAOE,SAAP;EAnDJ;AAqDD"},"metadata":{},"sourceType":"module"}