{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsInteger = require('./IsInteger');\n\nvar Type = require('./Type');\n\nvar $charAt = callBound('String.prototype.charAt'); // https://262.ecma-international.org/6.0/#sec-splitmatch\n\nmodule.exports = function SplitMatch(S, q, R) {\n  if (Type(S) !== 'String') {\n    throw new $TypeError('Assertion failed: `S` must be a String');\n  }\n\n  if (!IsInteger(q)) {\n    throw new $TypeError('Assertion failed: `q` must be an integer');\n  }\n\n  if (Type(R) !== 'String') {\n    throw new $TypeError('Assertion failed: `R` must be a String');\n  }\n\n  var r = R.length;\n  var s = S.length;\n\n  if (q + r > s) {\n    return false;\n  }\n\n  for (var i = 0; i < r; i += 1) {\n    if ($charAt(S, q + i) !== $charAt(R, i)) {\n      return false;\n    }\n  }\n\n  return q + r;\n};","map":{"version":3,"names":["GetIntrinsic","require","callBound","$TypeError","IsInteger","Type","$charAt","module","exports","SplitMatch","S","q","R","r","length","s","i"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2019/SplitMatch.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsInteger = require('./IsInteger');\nvar Type = require('./Type');\n\nvar $charAt = callBound('String.prototype.charAt');\n\n// https://262.ecma-international.org/6.0/#sec-splitmatch\n\nmodule.exports = function SplitMatch(S, q, R) {\n\tif (Type(S) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `S` must be a String');\n\t}\n\tif (!IsInteger(q)) {\n\t\tthrow new $TypeError('Assertion failed: `q` must be an integer');\n\t}\n\tif (Type(R) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `R` must be a String');\n\t}\n\tvar r = R.length;\n\tvar s = S.length;\n\tif (q + r > s) {\n\t\treturn false;\n\t}\n\n\tfor (var i = 0; i < r; i += 1) {\n\t\tif ($charAt(S, q + i) !== $charAt(R, i)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn q + r;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIE,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAII,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIK,OAAO,GAAGJ,SAAS,CAAC,yBAAD,CAAvB,C,CAEA;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,CAA1B,EAA6B;EAC7C,IAAIP,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,MAAM,IAAIP,UAAJ,CAAe,wCAAf,CAAN;EACA;;EACD,IAAI,CAACC,SAAS,CAACO,CAAD,CAAd,EAAmB;IAClB,MAAM,IAAIR,UAAJ,CAAe,0CAAf,CAAN;EACA;;EACD,IAAIE,IAAI,CAACO,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,MAAM,IAAIT,UAAJ,CAAe,wCAAf,CAAN;EACA;;EACD,IAAIU,CAAC,GAAGD,CAAC,CAACE,MAAV;EACA,IAAIC,CAAC,GAAGL,CAAC,CAACI,MAAV;;EACA,IAAIH,CAAC,GAAGE,CAAJ,GAAQE,CAAZ,EAAe;IACd,OAAO,KAAP;EACA;;EAED,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuBG,CAAC,IAAI,CAA5B,EAA+B;IAC9B,IAAIV,OAAO,CAACI,CAAD,EAAIC,CAAC,GAAGK,CAAR,CAAP,KAAsBV,OAAO,CAACM,CAAD,EAAII,CAAJ,CAAjC,EAAyC;MACxC,OAAO,KAAP;IACA;EACD;;EAED,OAAOL,CAAC,GAAGE,CAAX;AACA,CAvBD"},"metadata":{},"sourceType":"script"}