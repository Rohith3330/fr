{"ast":null,"code":"/**\n * @fileoverview Ensure symmetric naming of useState hook value and setter variables\n * @author Duncan Beevers\n */\n'use strict';\n\nconst Components = require('../util/Components');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  useStateErrorMessage: 'useState call is not destructured into value + setter pair'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Ensure destructuring and symmetric naming of useState hook value and setter variables',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('hook-use-state')\n    },\n    messages,\n    schema: [],\n    type: 'suggestion',\n    hasSuggestions: true\n  },\n  create: Components.detect((context, components, util) => ({\n    CallExpression(node) {\n      const isImmediateReturn = node.parent && node.parent.type === 'ReturnStatement';\n\n      if (isImmediateReturn || !util.isReactHookCall(node, ['useState'])) {\n        return;\n      }\n\n      const isDestructuringDeclarator = node.parent && node.parent.type === 'VariableDeclarator' && node.parent.id.type === 'ArrayPattern';\n\n      if (!isDestructuringDeclarator) {\n        report(context, messages.useStateErrorMessage, 'useStateErrorMessage', {\n          node\n        });\n        return;\n      }\n\n      const variableNodes = node.parent.id.elements;\n      const valueVariable = variableNodes[0];\n      const setterVariable = variableNodes[1];\n      const valueVariableName = valueVariable ? valueVariable.name : undefined;\n      const setterVariableName = setterVariable ? setterVariable.name : undefined;\n      const caseCandidateMatch = valueVariableName ? valueVariableName.match(/(^[a-z]+)(.*)/) : undefined;\n      const upperCaseCandidatePrefix = caseCandidateMatch ? caseCandidateMatch[1] : undefined;\n      const caseCandidateSuffix = caseCandidateMatch ? caseCandidateMatch[2] : undefined;\n      const expectedSetterVariableNames = upperCaseCandidatePrefix ? [`set${upperCaseCandidatePrefix.charAt(0).toUpperCase()}${upperCaseCandidatePrefix.slice(1)}${caseCandidateSuffix}`, `set${upperCaseCandidatePrefix.toUpperCase()}${caseCandidateSuffix}`] : [];\n      const isSymmetricGetterSetterPair = valueVariable && setterVariable && expectedSetterVariableNames.indexOf(setterVariableName) !== -1 && variableNodes.length === 2;\n\n      if (!isSymmetricGetterSetterPair) {\n        const suggestions = [{\n          desc: 'Destructure useState call into value + setter pair',\n          fix: fixer => {\n            if (expectedSetterVariableNames.length === 0) {\n              return;\n            }\n\n            const fix = fixer.replaceTextRange(node.parent.id.range, `[${valueVariableName}, ${expectedSetterVariableNames[0]}]`);\n            return fix;\n          }\n        }];\n        const defaultReactImports = components.getDefaultReactImports();\n        const defaultReactImportSpecifier = defaultReactImports ? defaultReactImports[0] : undefined;\n        const defaultReactImportName = defaultReactImportSpecifier ? defaultReactImportSpecifier.local.name : undefined;\n        const namedReactImports = components.getNamedReactImports();\n        const useStateReactImportSpecifier = namedReactImports ? namedReactImports.find(specifier => specifier.imported.name === 'useState') : undefined;\n        const isSingleGetter = valueVariable && variableNodes.length === 1;\n        const isUseStateCalledWithSingleArgument = node.arguments.length === 1;\n\n        if (isSingleGetter && isUseStateCalledWithSingleArgument) {\n          const useMemoReactImportSpecifier = namedReactImports && namedReactImports.find(specifier => specifier.imported.name === 'useMemo');\n          let useMemoCode;\n\n          if (useMemoReactImportSpecifier) {\n            useMemoCode = useMemoReactImportSpecifier.local.name;\n          } else if (defaultReactImportName) {\n            useMemoCode = `${defaultReactImportName}.useMemo`;\n          } else {\n            useMemoCode = 'useMemo';\n          }\n\n          suggestions.unshift({\n            desc: 'Replace useState call with useMemo',\n            fix: fixer => [// Add useMemo import, if necessary\n            useStateReactImportSpecifier && (!useMemoReactImportSpecifier || defaultReactImportName) && fixer.insertTextAfter(useStateReactImportSpecifier, ', useMemo'), // Convert single-value destructure to simple assignment\n            fixer.replaceTextRange(node.parent.id.range, valueVariableName), // Convert useState call to useMemo + arrow function + dependency array\n            fixer.replaceTextRange(node.range, `${useMemoCode}(() => ${context.getSourceCode().getText(node.arguments[0])}, [])`)].filter(Boolean)\n          });\n        }\n\n        report(context, messages.useStateErrorMessage, 'useStateErrorMessage', {\n          node: node.parent.id,\n          suggest: suggestions\n        });\n      }\n    }\n\n  }))\n};","map":{"version":3,"names":["Components","require","docsUrl","report","messages","useStateErrorMessage","module","exports","meta","docs","description","category","recommended","url","schema","type","hasSuggestions","create","detect","context","components","util","CallExpression","node","isImmediateReturn","parent","isReactHookCall","isDestructuringDeclarator","id","variableNodes","elements","valueVariable","setterVariable","valueVariableName","name","undefined","setterVariableName","caseCandidateMatch","match","upperCaseCandidatePrefix","caseCandidateSuffix","expectedSetterVariableNames","charAt","toUpperCase","slice","isSymmetricGetterSetterPair","indexOf","length","suggestions","desc","fix","fixer","replaceTextRange","range","defaultReactImports","getDefaultReactImports","defaultReactImportSpecifier","defaultReactImportName","local","namedReactImports","getNamedReactImports","useStateReactImportSpecifier","find","specifier","imported","isSingleGetter","isUseStateCalledWithSingleArgument","arguments","useMemoReactImportSpecifier","useMemoCode","unshift","insertTextAfter","getSourceCode","getText","filter","Boolean","suggest"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/hook-use-state.js"],"sourcesContent":["/**\n * @fileoverview Ensure symmetric naming of useState hook value and setter variables\n * @author Duncan Beevers\n */\n\n'use strict';\n\nconst Components = require('../util/Components');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  useStateErrorMessage: 'useState call is not destructured into value + setter pair',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Ensure destructuring and symmetric naming of useState hook value and setter variables',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('hook-use-state'),\n    },\n    messages,\n    schema: [],\n    type: 'suggestion',\n    hasSuggestions: true,\n  },\n\n  create: Components.detect((context, components, util) => ({\n    CallExpression(node) {\n      const isImmediateReturn = node.parent\n        && node.parent.type === 'ReturnStatement';\n\n      if (isImmediateReturn || !util.isReactHookCall(node, ['useState'])) {\n        return;\n      }\n\n      const isDestructuringDeclarator = node.parent\n        && node.parent.type === 'VariableDeclarator'\n        && node.parent.id.type === 'ArrayPattern';\n\n      if (!isDestructuringDeclarator) {\n        report(\n          context,\n          messages.useStateErrorMessage,\n          'useStateErrorMessage',\n          { node }\n        );\n        return;\n      }\n\n      const variableNodes = node.parent.id.elements;\n      const valueVariable = variableNodes[0];\n      const setterVariable = variableNodes[1];\n\n      const valueVariableName = valueVariable\n        ? valueVariable.name\n        : undefined;\n\n      const setterVariableName = setterVariable\n        ? setterVariable.name\n        : undefined;\n\n      const caseCandidateMatch = valueVariableName ? valueVariableName.match(/(^[a-z]+)(.*)/) : undefined;\n      const upperCaseCandidatePrefix = caseCandidateMatch ? caseCandidateMatch[1] : undefined;\n      const caseCandidateSuffix = caseCandidateMatch ? caseCandidateMatch[2] : undefined;\n      const expectedSetterVariableNames = upperCaseCandidatePrefix ? [\n        `set${upperCaseCandidatePrefix.charAt(0).toUpperCase()}${upperCaseCandidatePrefix.slice(1)}${caseCandidateSuffix}`,\n        `set${upperCaseCandidatePrefix.toUpperCase()}${caseCandidateSuffix}`,\n      ] : [];\n\n      const isSymmetricGetterSetterPair = valueVariable\n        && setterVariable\n        && expectedSetterVariableNames.indexOf(setterVariableName) !== -1\n        && variableNodes.length === 2;\n\n      if (!isSymmetricGetterSetterPair) {\n        const suggestions = [\n          {\n            desc: 'Destructure useState call into value + setter pair',\n            fix: (fixer) => {\n              if (expectedSetterVariableNames.length === 0) {\n                return;\n              }\n\n              const fix = fixer.replaceTextRange(\n                node.parent.id.range,\n                `[${valueVariableName}, ${expectedSetterVariableNames[0]}]`\n              );\n\n              return fix;\n            },\n          },\n        ];\n\n        const defaultReactImports = components.getDefaultReactImports();\n        const defaultReactImportSpecifier = defaultReactImports\n          ? defaultReactImports[0]\n          : undefined;\n\n        const defaultReactImportName = defaultReactImportSpecifier\n          ? defaultReactImportSpecifier.local.name\n          : undefined;\n\n        const namedReactImports = components.getNamedReactImports();\n        const useStateReactImportSpecifier = namedReactImports\n          ? namedReactImports.find((specifier) => specifier.imported.name === 'useState')\n          : undefined;\n\n        const isSingleGetter = valueVariable && variableNodes.length === 1;\n        const isUseStateCalledWithSingleArgument = node.arguments.length === 1;\n        if (isSingleGetter && isUseStateCalledWithSingleArgument) {\n          const useMemoReactImportSpecifier = namedReactImports\n            && namedReactImports.find((specifier) => specifier.imported.name === 'useMemo');\n\n          let useMemoCode;\n          if (useMemoReactImportSpecifier) {\n            useMemoCode = useMemoReactImportSpecifier.local.name;\n          } else if (defaultReactImportName) {\n            useMemoCode = `${defaultReactImportName}.useMemo`;\n          } else {\n            useMemoCode = 'useMemo';\n          }\n\n          suggestions.unshift({\n            desc: 'Replace useState call with useMemo',\n            fix: (fixer) => [\n              // Add useMemo import, if necessary\n              useStateReactImportSpecifier\n                  && (!useMemoReactImportSpecifier || defaultReactImportName)\n                  && fixer.insertTextAfter(useStateReactImportSpecifier, ', useMemo'),\n              // Convert single-value destructure to simple assignment\n              fixer.replaceTextRange(node.parent.id.range, valueVariableName),\n              // Convert useState call to useMemo + arrow function + dependency array\n              fixer.replaceTextRange(\n                node.range,\n                `${useMemoCode}(() => ${context.getSourceCode().getText(node.arguments[0])}, [])`\n              ),\n            ].filter(Boolean),\n          });\n        }\n\n        report(\n          context,\n          messages.useStateErrorMessage,\n          'useStateErrorMessage',\n          {\n            node: node.parent.id,\n            suggest: suggestions,\n          }\n        );\n      }\n    },\n  })),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}