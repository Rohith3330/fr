{"ast":null,"code":"import e from \"postcss-value-parser\";\nvar l = new Map([[\"block,flow\", \"block\"], [\"block,flow-root\", \"flow-root\"], [\"inline,flow\", \"inline\"], [\"inline,flow-root\", \"inline-block\"], [\"run-in,flow\", \"run-in\"], [\"list-item,block,flow\", \"list-item\"], [\"inline,flow,list-item\", \"inline list-item\"], [\"block,flex\", \"flex\"], [\"inline,flex\", \"inline-flex\"], [\"block,grid\", \"grid\"], [\"inline,grid\", \"inline-grid\"], [\"inline,ruby\", \"ruby\"], [\"block,table\", \"table\"], [\"inline,table\", \"inline-table\"], [\"table-cell,flow\", \"table-cell\"], [\"table-caption,flow\", \"table-caption\"], [\"ruby-base,flow\", \"ruby-base\"], [\"ruby-text,flow\", \"ruby-text\"]]);\n\nconst n = n => {\n  const o = !(\"preserve\" in Object(n)) || Boolean(n.preserve);\n  return {\n    postcssPlugin: \"postcss-normalize-display-values\",\n\n    prepare() {\n      const n = new Map();\n      return {\n        Declaration(t) {\n          if (\"display\" !== t.prop.toLowerCase()) return;\n          const i = t.value;\n          if (!i) return;\n          if (n.has(i)) return void (t.value !== n.get(i) && (t.cloneBefore({\n            value: n.get(i)\n          }), o || t.remove()));\n\n          const r = function (n) {\n            const {\n              nodes: o\n            } = e(n);\n            if (1 === o.length) return n;\n            const t = o.filter(e => \"word\" === e.type).map(e => e.value.toLowerCase());\n            if (t.length <= 1) return n;\n            return l.get(t.join(\",\")) || n;\n          }(i);\n\n          n.set(i, r), t.value !== r && (t.cloneBefore({\n            value: r\n          }), o || t.remove());\n        }\n\n      };\n    }\n\n  };\n};\n\nn.postcss = !0;\nexport { n as default };","map":{"version":3,"names":["e","l","Map","n","o","Object","Boolean","preserve","postcssPlugin","prepare","Declaration","t","prop","toLowerCase","i","value","has","get","cloneBefore","remove","r","nodes","length","filter","type","map","join","set","postcss","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@csstools/postcss-normalize-display-values/dist/index.mjs"],"sourcesContent":["import e from\"postcss-value-parser\";var l=new Map([[\"block,flow\",\"block\"],[\"block,flow-root\",\"flow-root\"],[\"inline,flow\",\"inline\"],[\"inline,flow-root\",\"inline-block\"],[\"run-in,flow\",\"run-in\"],[\"list-item,block,flow\",\"list-item\"],[\"inline,flow,list-item\",\"inline list-item\"],[\"block,flex\",\"flex\"],[\"inline,flex\",\"inline-flex\"],[\"block,grid\",\"grid\"],[\"inline,grid\",\"inline-grid\"],[\"inline,ruby\",\"ruby\"],[\"block,table\",\"table\"],[\"inline,table\",\"inline-table\"],[\"table-cell,flow\",\"table-cell\"],[\"table-caption,flow\",\"table-caption\"],[\"ruby-base,flow\",\"ruby-base\"],[\"ruby-text,flow\",\"ruby-text\"]]);const n=n=>{const o=!(\"preserve\"in Object(n))||Boolean(n.preserve);return{postcssPlugin:\"postcss-normalize-display-values\",prepare(){const n=new Map;return{Declaration(t){if(\"display\"!==t.prop.toLowerCase())return;const i=t.value;if(!i)return;if(n.has(i))return void(t.value!==n.get(i)&&(t.cloneBefore({value:n.get(i)}),o||t.remove()));const r=function(n){const{nodes:o}=e(n);if(1===o.length)return n;const t=o.filter((e=>\"word\"===e.type)).map((e=>e.value.toLowerCase()));if(t.length<=1)return n;return l.get(t.join(\",\"))||n}(i);n.set(i,r),t.value!==r&&(t.cloneBefore({value:r}),o||t.remove())}}}}};n.postcss=!0;export{n as default};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}