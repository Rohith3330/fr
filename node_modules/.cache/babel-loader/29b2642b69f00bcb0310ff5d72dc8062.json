{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.async = {});\n})(this, function (exports) {\n  'use strict';\n  /**\n   * Creates a continuation function with some arguments already applied.\n   *\n   * Useful as a shorthand when combined with other control flow functions. Any\n   * arguments passed to the returned function are added to the arguments\n   * originally passed to apply.\n   *\n   * @name apply\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {Function} fn - The function you want to eventually apply all\n   * arguments to. Invokes with (arguments...).\n   * @param {...*} arguments... - Any number of arguments to automatically apply\n   * when the continuation is called.\n   * @returns {Function} the partially-applied function\n   * @example\n   *\n   * // using apply\n   * async.parallel([\n   *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n   *     async.apply(fs.writeFile, 'testfile2', 'test2')\n   * ]);\n   *\n   *\n   * // the same process without using apply\n   * async.parallel([\n   *     function(callback) {\n   *         fs.writeFile('testfile1', 'test1', callback);\n   *     },\n   *     function(callback) {\n   *         fs.writeFile('testfile2', 'test2', callback);\n   *     }\n   * ]);\n   *\n   * // It's possible to pass any number of additional arguments when calling the\n   * // continuation:\n   *\n   * node> var fn = async.apply(sys.puts, 'one');\n   * node> fn('two', 'three');\n   * one\n   * two\n   * three\n   */\n\n  function apply(fn) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return function () {\n      for (var _len2 = arguments.length, callArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        callArgs[_key2] = arguments[_key2];\n      }\n\n      return fn(...args, ...callArgs);\n    };\n  }\n\n  function initialParams(fn) {\n    return function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var callback = args.pop();\n      return fn.call(this, args, callback);\n    };\n  }\n  /* istanbul ignore file */\n\n\n  var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\n  var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n  var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\n  function fallback(fn) {\n    setTimeout(fn, 0);\n  }\n\n  function wrap(defer) {\n    return function (fn) {\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n\n      return defer(() => fn(...args));\n    };\n  }\n\n  var _defer;\n\n  if (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n  } else if (hasSetImmediate) {\n    _defer = setImmediate;\n  } else if (hasNextTick) {\n    _defer = process.nextTick;\n  } else {\n    _defer = fallback;\n  }\n\n  var setImmediate$1 = wrap(_defer);\n  /**\n   * Take a sync function and make it async, passing its return value to a\n   * callback. This is useful for plugging sync functions into a waterfall,\n   * series, or other async functions. Any arguments passed to the generated\n   * function will be passed to the wrapped function (except for the final\n   * callback argument). Errors thrown will be passed to the callback.\n   *\n   * If the function passed to `asyncify` returns a Promise, that promises's\n   * resolved/rejected state will be used to call the callback, rather than simply\n   * the synchronous return value.\n   *\n   * This also means you can asyncify ES2017 `async` functions.\n   *\n   * @name asyncify\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @alias wrapSync\n   * @category Util\n   * @param {Function} func - The synchronous function, or Promise-returning\n   * function to convert to an {@link AsyncFunction}.\n   * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n   * invoked with `(args..., callback)`.\n   * @example\n   *\n   * // passing a regular synchronous function\n   * async.waterfall([\n   *     async.apply(fs.readFile, filename, \"utf8\"),\n   *     async.asyncify(JSON.parse),\n   *     function (data, next) {\n   *         // data is the result of parsing the text.\n   *         // If there was a parsing error, it would have been caught.\n   *     }\n   * ], callback);\n   *\n   * // passing a function returning a promise\n   * async.waterfall([\n   *     async.apply(fs.readFile, filename, \"utf8\"),\n   *     async.asyncify(function (contents) {\n   *         return db.model.create(contents);\n   *     }),\n   *     function (model, next) {\n   *         // `model` is the instantiated model object.\n   *         // If there was an error, this function would be skipped.\n   *     }\n   * ], callback);\n   *\n   * // es2017 example, though `asyncify` is not needed if your JS environment\n   * // supports async functions out of the box\n   * var q = async.queue(async.asyncify(async function(file) {\n   *     var intermediateStep = await processFile(file);\n   *     return await somePromise(intermediateStep)\n   * }));\n   *\n   * q.push(files);\n   */\n\n  function asyncify(func) {\n    if (isAsync(func)) {\n      return function () {\n        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        const callback = args.pop();\n        const promise = func.apply(this, args);\n        return handlePromise(promise, callback);\n      };\n    }\n\n    return initialParams(function (args, callback) {\n      var result;\n\n      try {\n        result = func.apply(this, args);\n      } catch (e) {\n        return callback(e);\n      } // if result is Promise object\n\n\n      if (result && typeof result.then === 'function') {\n        return handlePromise(result, callback);\n      } else {\n        callback(null, result);\n      }\n    });\n  }\n\n  function handlePromise(promise, callback) {\n    return promise.then(value => {\n      invokeCallback(callback, null, value);\n    }, err => {\n      invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n  }\n\n  function invokeCallback(callback, error, value) {\n    try {\n      callback(error, value);\n    } catch (err) {\n      setImmediate$1(e => {\n        throw e;\n      }, err);\n    }\n  }\n\n  function isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n  }\n\n  function isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n  }\n\n  function isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n  }\n\n  function wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function');\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n  } // conditionally promisify a function.\n  // only return a promise if a callback is omitted\n\n\n  function awaitify(asyncFn) {\n    let arity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : asyncFn.length;\n    if (!arity) throw new Error('arity is undefined');\n\n    function awaitable() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      if (typeof args[arity - 1] === 'function') {\n        return asyncFn.apply(this, args);\n      }\n\n      return new Promise((resolve, reject) => {\n        args[arity - 1] = function (err) {\n          if (err) return reject(err);\n\n          for (var _len7 = arguments.length, cbArgs = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n            cbArgs[_key7 - 1] = arguments[_key7];\n          }\n\n          resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n        };\n\n        asyncFn.apply(this, args);\n      });\n    }\n\n    return awaitable;\n  }\n\n  function applyEach(eachfn) {\n    return function applyEach(fns) {\n      for (var _len8 = arguments.length, callArgs = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n        callArgs[_key8 - 1] = arguments[_key8];\n      }\n\n      const go = awaitify(function (callback) {\n        var that = this;\n        return eachfn(fns, (fn, cb) => {\n          wrapAsync(fn).apply(that, callArgs.concat(cb));\n        }, callback);\n      });\n      return go;\n    };\n  }\n\n  function _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n      var index = counter++;\n\n      _iteratee(value, (err, v) => {\n        results[index] = v;\n        iterCb(err);\n      });\n    }, err => {\n      callback(err, results);\n    });\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number' && value.length >= 0 && value.length % 1 === 0;\n  } // A temporary value used to identify if the loop should be broken.\n  // See #1064, #1293\n\n\n  const breakLoop = {};\n\n  function once(fn) {\n    function wrapper() {\n      if (fn === null) return;\n      var callFn = fn;\n      fn = null;\n\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n\n      callFn.apply(this, args);\n    }\n\n    Object.assign(wrapper, fn);\n    return wrapper;\n  }\n\n  function getIterator(coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n  }\n\n  function createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n      return ++i < len ? {\n        value: coll[i],\n        key: i\n      } : null;\n    };\n  }\n\n  function createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n      var item = iterator.next();\n      if (item.done) return null;\n      i++;\n      return {\n        value: item.value,\n        key: i\n      };\n    };\n  }\n\n  function createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n      var key = okeys[++i];\n\n      if (key === '__proto__') {\n        return next();\n      }\n\n      return i < len ? {\n        value: obj[key],\n        key\n      } : null;\n    };\n  }\n\n  function createIterator(coll) {\n    if (isArrayLike(coll)) {\n      return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n  }\n\n  function onlyOnce(fn) {\n    return function () {\n      if (fn === null) throw new Error(\"Callback was already called.\");\n      var callFn = fn;\n      fn = null;\n\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n\n      callFn.apply(this, args);\n    };\n  } // for async generators\n\n\n  function asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n      //console.log('replenish')\n      if (running >= limit || awaiting || done) return; //console.log('replenish awaiting')\n\n      awaiting = true;\n      generator.next().then(_ref => {\n        let {\n          value,\n          done: iterDone\n        } = _ref;\n        //console.log('got value', value)\n        if (canceled || done) return;\n        awaiting = false;\n\n        if (iterDone) {\n          done = true;\n\n          if (running <= 0) {\n            //console.log('done nextCb')\n            callback(null);\n          }\n\n          return;\n        }\n\n        running++;\n        iteratee(value, idx, iterateeCallback);\n        idx++;\n        replenish();\n      }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n      //console.log('iterateeCallback')\n      running -= 1;\n      if (canceled) return;\n      if (err) return handleError(err);\n\n      if (err === false) {\n        done = true;\n        canceled = true;\n        return;\n      }\n\n      if (result === breakLoop || done && running <= 0) {\n        done = true; //console.log('done iterCb')\n\n        return callback(null);\n      }\n\n      replenish();\n    }\n\n    function handleError(err) {\n      if (canceled) return;\n      awaiting = false;\n      done = true;\n      callback(err);\n    }\n\n    replenish();\n  }\n\n  var eachOfLimit = limit => {\n    return (obj, iteratee, callback) => {\n      callback = once(callback);\n\n      if (limit <= 0) {\n        throw new RangeError('concurrency limit cannot be less than 1');\n      }\n\n      if (!obj) {\n        return callback(null);\n      }\n\n      if (isAsyncGenerator(obj)) {\n        return asyncEachOfLimit(obj, limit, iteratee, callback);\n      }\n\n      if (isAsyncIterable(obj)) {\n        return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback);\n      }\n\n      var nextElem = createIterator(obj);\n      var done = false;\n      var canceled = false;\n      var running = 0;\n      var looping = false;\n\n      function iterateeCallback(err, value) {\n        if (canceled) return;\n        running -= 1;\n\n        if (err) {\n          done = true;\n          callback(err);\n        } else if (err === false) {\n          done = true;\n          canceled = true;\n        } else if (value === breakLoop || done && running <= 0) {\n          done = true;\n          return callback(null);\n        } else if (!looping) {\n          replenish();\n        }\n      }\n\n      function replenish() {\n        looping = true;\n\n        while (running < limit && !done) {\n          var elem = nextElem();\n\n          if (elem === null) {\n            done = true;\n\n            if (running <= 0) {\n              callback(null);\n            }\n\n            return;\n          }\n\n          running += 1;\n          iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n        }\n\n        looping = false;\n      }\n\n      replenish();\n    };\n  };\n  /**\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name eachOfLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.eachOf]{@link module:Collections.eachOf}\n   * @alias forEachOfLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each\n   * item in `coll`. The `key` is the item's key, or index in the case of an\n   * array.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n\n\n  function eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n  }\n\n  var eachOfLimit$2 = awaitify(eachOfLimit$1, 4); // eachOf implementation optimized for array-likes\n\n  function eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {\n      length\n    } = coll,\n        canceled = false;\n\n    if (length === 0) {\n      callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n      if (err === false) {\n        canceled = true;\n      }\n\n      if (canceled === true) return;\n\n      if (err) {\n        callback(err);\n      } else if (++completed === length || value === breakLoop) {\n        callback(null);\n      }\n    }\n\n    for (; index < length; index++) {\n      iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n  } // a generic version of eachOf which can handle array, object, and iterator cases.\n\n\n  function eachOfGeneric(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n  }\n  /**\n   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n   * to the iteratee.\n   *\n   * @name eachOf\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias forEachOf\n   * @category Collection\n   * @see [async.each]{@link module:Collections.each}\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each\n   * item in `coll`.\n   * The `key` is the item's key, or index in the case of an array.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * // dev.json is a file containing a valid json object config for dev environment\n   * // dev.json is a file containing a valid json object config for test environment\n   * // prod.json is a file containing a valid json object config for prod environment\n   * // invalid.json is a file with a malformed json object\n   *\n   * let configs = {}; //global variable\n   * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n   * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n   *\n   * // asynchronous function that reads a json file and parses the contents as json object\n   * function parseFile(file, key, callback) {\n   *     fs.readFile(file, \"utf8\", function(err, data) {\n   *         if (err) return calback(err);\n   *         try {\n   *             configs[key] = JSON.parse(data);\n   *         } catch (e) {\n   *             return callback(e);\n   *         }\n   *         callback();\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n   *     if (err) {\n   *         console.error(err);\n   *     } else {\n   *         console.log(configs);\n   *         // configs is now a map of JSON data, e.g.\n   *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n   *     }\n   * });\n   *\n   * //Error handing\n   * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n   *     if (err) {\n   *         console.error(err);\n   *         // JSON parse error exception\n   *     } else {\n   *         console.log(configs);\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.forEachOf(validConfigFileMap, parseFile)\n   * .then( () => {\n   *     console.log(configs);\n   *     // configs is now a map of JSON data, e.g.\n   *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n   * }).catch( err => {\n   *     console.error(err);\n   * });\n   *\n   * //Error handing\n   * async.forEachOf(invalidConfigFileMap, parseFile)\n   * .then( () => {\n   *     console.log(configs);\n   * }).catch( err => {\n   *     console.error(err);\n   *     // JSON parse error exception\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n   *         console.log(configs);\n   *         // configs is now a map of JSON data, e.g.\n   *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * //Error handing\n   * async () => {\n   *     try {\n   *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n   *         console.log(configs);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // JSON parse error exception\n   *     }\n   * }\n   *\n   */\n\n\n  function eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n  }\n\n  var eachOf$1 = awaitify(eachOf, 3);\n  /**\n   * Produces a new collection of values by mapping each value in `coll` through\n   * the `iteratee` function. The `iteratee` is called with an item from `coll`\n   * and a callback for when it has finished processing. Each of these callbacks\n   * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n   * `iteratee` passes an error to its callback, the main `callback` (for the\n   * `map` function) is immediately called with the error.\n   *\n   * Note, that since this function applies the `iteratee` to each item in\n   * parallel, there is no guarantee that the `iteratee` functions will complete\n   * in order. However, the results array will be in the same order as the\n   * original `coll`.\n   *\n   * If `map` is passed an Object, the results will be an Array.  The results\n   * will roughly be in the order of the original Objects' keys (but this can\n   * vary across JavaScript engines).\n   *\n   * @name map\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an Array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   * // file4.txt does not exist\n   *\n   * const fileList = ['file1.txt','file2.txt','file3.txt'];\n   * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n   *\n   * // asynchronous function that returns the file size in bytes\n   * function getFileSizeInBytes(file, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         callback(null, stat.size);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.map(fileList, getFileSizeInBytes, function(err, results) {\n   *     if (err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(results);\n   *         // results is now an array of the file size in bytes for each file, e.g.\n   *         // [ 1000, 2000, 3000]\n   *     }\n   * });\n   *\n   * // Error Handling\n   * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n   *     if (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     } else {\n   *         console.log(results);\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.map(fileList, getFileSizeInBytes)\n   * .then( results => {\n   *     console.log(results);\n   *     // results is now an array of the file size in bytes for each file, e.g.\n   *     // [ 1000, 2000, 3000]\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.map(withMissingFileList, getFileSizeInBytes)\n   * .then( results => {\n   *     console.log(results);\n   * }).catch( err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.map(fileList, getFileSizeInBytes);\n   *         console.log(results);\n   *         // results is now an array of the file size in bytes for each file, e.g.\n   *         // [ 1000, 2000, 3000]\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n   *         console.log(results);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     }\n   * }\n   *\n   */\n\n  function map(coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback);\n  }\n\n  var map$1 = awaitify(map, 3);\n  /**\n   * Applies the provided arguments to each function in the array, calling\n   * `callback` after all functions have completed. If you only provide the first\n   * argument, `fns`, then it will return a function which lets you pass in the\n   * arguments as if it were a single function call. If more arguments are\n   * provided, `callback` is required while `args` is still optional. The results\n   * for each of the applied async functions are passed to the final callback\n   * as an array.\n   *\n   * @name applyEach\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n   * to all call with the same arguments\n   * @param {...*} [args] - any number of separate arguments to pass to the\n   * function.\n   * @param {Function} [callback] - the final argument should be the callback,\n   * called when all functions have completed processing.\n   * @returns {AsyncFunction} - Returns a function that takes no args other than\n   * an optional callback, that is the result of applying the `args` to each\n   * of the functions.\n   * @example\n   *\n   * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n   *\n   * appliedFn((err, results) => {\n   *     // results[0] is the results for `enableSearch`\n   *     // results[1] is the results for `updateSchema`\n   * });\n   *\n   * // partial application example:\n   * async.each(\n   *     buckets,\n   *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n   *     callback\n   * );\n   */\n\n  var applyEach$1 = applyEach(map$1);\n  /**\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n   *\n   * @name eachOfSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.eachOf]{@link module:Collections.eachOf}\n   * @alias forEachOfSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n\n  function eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback);\n  }\n\n  var eachOfSeries$1 = awaitify(eachOfSeries, 3);\n  /**\n   * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n   *\n   * @name mapSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n\n  function mapSeries(coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback);\n  }\n\n  var mapSeries$1 = awaitify(mapSeries, 3);\n  /**\n   * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n   *\n   * @name applyEachSeries\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n   * call with the same arguments\n   * @param {...*} [args] - any number of separate arguments to pass to the\n   * function.\n   * @param {Function} [callback] - the final argument should be the callback,\n   * called when all functions have completed processing.\n   * @returns {AsyncFunction} - A function, that when called, is the result of\n   * appling the `args` to the list of functions.  It takes no args, other than\n   * a callback.\n   */\n\n  var applyEachSeries = applyEach(mapSeries$1);\n  const PROMISE_SYMBOL = Symbol('promiseCallback');\n\n  function promiseCallback() {\n    let resolve, reject;\n\n    function callback(err) {\n      if (err) return reject(err);\n\n      for (var _len11 = arguments.length, args = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n        args[_key11 - 1] = arguments[_key11];\n      }\n\n      resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n      resolve = res, reject = rej;\n    });\n    return callback;\n  }\n  /**\n   * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n   * their requirements. Each function can optionally depend on other functions\n   * being completed first, and each function is run as soon as its requirements\n   * are satisfied.\n   *\n   * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n   * will stop. Further tasks will not execute (so any other functions depending\n   * on it will not run), and the main `callback` is immediately called with the\n   * error.\n   *\n   * {@link AsyncFunction}s also receive an object containing the results of functions which\n   * have completed so far as the first argument, if they have dependencies. If a\n   * task function has no dependencies, it will only be passed a callback.\n   *\n   * @name auto\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Object} tasks - An object. Each of its properties is either a\n   * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n   * in the array. The object's key of a property serves as the name of the task\n   * defined by that property, i.e. can be used when specifying requirements for\n   * other tasks. The function receives one or two arguments:\n   * * a `results` object, containing the results of the previously executed\n   *   functions, only passed if the task has any dependencies,\n   * * a `callback(err, result)` function, which must be called when finished,\n   *   passing an `error` (which can be `null`) and the result of the function's\n   *   execution.\n   * @param {number} [concurrency=Infinity] - An optional `integer` for\n   * determining the maximum number of tasks that can be run in parallel. By\n   * default, as many as possible.\n   * @param {Function} [callback] - An optional callback which is called when all\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\n   * pass an error to their callback. Results are always returned; however, if an\n   * error occurs, no further `tasks` will be performed, and the results object\n   * will only contain partial results. Invoked with (err, results).\n   * @returns {Promise} a promise, if a callback is not passed\n   * @example\n   *\n   * //Using Callbacks\n   * async.auto({\n   *     get_data: function(callback) {\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: ['get_data', 'make_folder', function(results, callback) {\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(results, callback) {\n   *         // once the file is written let's email a link to it...\n   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n   *     }]\n   * }, function(err, results) {\n   *     if (err) {\n   *         console.log('err = ', err);\n   *     }\n   *     console.log('results = ', results);\n   *     // results = {\n   *     //     get_data: ['data', 'converted to array']\n   *     //     make_folder; 'folder',\n   *     //     write_file: 'filename'\n   *     //     email_link: { file: 'filename', email: 'user@example.com' }\n   *     // }\n   * });\n   *\n   * //Using Promises\n   * async.auto({\n   *     get_data: function(callback) {\n   *         console.log('in get_data');\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         console.log('in make_folder');\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: ['get_data', 'make_folder', function(results, callback) {\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(results, callback) {\n   *         // once the file is written let's email a link to it...\n   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n   *     }]\n   * }).then(results => {\n   *     console.log('results = ', results);\n   *     // results = {\n   *     //     get_data: ['data', 'converted to array']\n   *     //     make_folder; 'folder',\n   *     //     write_file: 'filename'\n   *     //     email_link: { file: 'filename', email: 'user@example.com' }\n   *     // }\n   * }).catch(err => {\n   *     console.log('err = ', err);\n   * });\n   *\n   * //Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.auto({\n   *             get_data: function(callback) {\n   *                 // async code to get some data\n   *                 callback(null, 'data', 'converted to array');\n   *             },\n   *             make_folder: function(callback) {\n   *                 // async code to create a directory to store a file in\n   *                 // this is run at the same time as getting the data\n   *                 callback(null, 'folder');\n   *             },\n   *             write_file: ['get_data', 'make_folder', function(results, callback) {\n   *                 // once there is some data and the directory exists,\n   *                 // write the data to a file in the directory\n   *                 callback(null, 'filename');\n   *             }],\n   *             email_link: ['write_file', function(results, callback) {\n   *                 // once the file is written let's email a link to it...\n   *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n   *             }]\n   *         });\n   *         console.log('results = ', results);\n   *         // results = {\n   *         //     get_data: ['data', 'converted to array']\n   *         //     make_folder; 'folder',\n   *         //     write_file: 'filename'\n   *         //     email_link: { file: 'filename', email: 'user@example.com' }\n   *         // }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n\n\n  function auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n      // concurrency is optional, shift the args.\n      callback = concurrency;\n      concurrency = null;\n    }\n\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n\n    if (!numTasks) {\n      return callback(null);\n    }\n\n    if (!concurrency) {\n      concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n    var listeners = Object.create(null);\n    var readyTasks = []; // for cycle detection:\n\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n\n    var uncheckedDependencies = {};\n    Object.keys(tasks).forEach(key => {\n      var task = tasks[key];\n\n      if (!Array.isArray(task)) {\n        // no dependencies\n        enqueueTask(key, [task]);\n        readyToCheck.push(key);\n        return;\n      }\n\n      var dependencies = task.slice(0, task.length - 1);\n      var remainingDependencies = dependencies.length;\n\n      if (remainingDependencies === 0) {\n        enqueueTask(key, task);\n        readyToCheck.push(key);\n        return;\n      }\n\n      uncheckedDependencies[key] = remainingDependencies;\n      dependencies.forEach(dependencyName => {\n        if (!tasks[dependencyName]) {\n          throw new Error('async.auto task `' + key + '` has a non-existent dependency `' + dependencyName + '` in ' + dependencies.join(', '));\n        }\n\n        addListener(dependencyName, () => {\n          remainingDependencies--;\n\n          if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n          }\n        });\n      });\n    });\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n      readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n      if (canceled) return;\n\n      if (readyTasks.length === 0 && runningTasks === 0) {\n        return callback(null, results);\n      }\n\n      while (readyTasks.length && runningTasks < concurrency) {\n        var run = readyTasks.shift();\n        run();\n      }\n    }\n\n    function addListener(taskName, fn) {\n      var taskListeners = listeners[taskName];\n\n      if (!taskListeners) {\n        taskListeners = listeners[taskName] = [];\n      }\n\n      taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n      var taskListeners = listeners[taskName] || [];\n      taskListeners.forEach(fn => fn());\n      processQueue();\n    }\n\n    function runTask(key, task) {\n      if (hasError) return;\n      var taskCallback = onlyOnce(function (err) {\n        for (var _len12 = arguments.length, result = new Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {\n          result[_key12 - 1] = arguments[_key12];\n        }\n\n        runningTasks--;\n\n        if (err === false) {\n          canceled = true;\n          return;\n        }\n\n        if (result.length < 2) {\n          [result] = result;\n        }\n\n        if (err) {\n          var safeResults = {};\n          Object.keys(results).forEach(rkey => {\n            safeResults[rkey] = results[rkey];\n          });\n          safeResults[key] = result;\n          hasError = true;\n          listeners = Object.create(null);\n          if (canceled) return;\n          callback(err, safeResults);\n        } else {\n          results[key] = result;\n          taskComplete(key);\n        }\n      });\n      runningTasks++;\n      var taskFn = wrapAsync(task[task.length - 1]);\n\n      if (task.length > 1) {\n        taskFn(results, taskCallback);\n      } else {\n        taskFn(taskCallback);\n      }\n    }\n\n    function checkForDeadlocks() {\n      // Kahn's algorithm\n      // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n      // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n      var currentTask;\n      var counter = 0;\n\n      while (readyToCheck.length) {\n        currentTask = readyToCheck.pop();\n        counter++;\n        getDependents(currentTask).forEach(dependent => {\n          if (--uncheckedDependencies[dependent] === 0) {\n            readyToCheck.push(dependent);\n          }\n        });\n      }\n\n      if (counter !== numTasks) {\n        throw new Error('async.auto cannot execute tasks due to a recursive dependency');\n      }\n    }\n\n    function getDependents(taskName) {\n      var result = [];\n      Object.keys(tasks).forEach(key => {\n        const task = tasks[key];\n\n        if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n          result.push(key);\n        }\n      });\n      return result;\n    }\n\n    return callback[PROMISE_SYMBOL];\n  }\n\n  var FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\n  var ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\n  var FN_ARG_SPLIT = /,/;\n  var FN_ARG = /(=.+)?(\\s*)$/;\n\n  function stripComments(string) {\n    let stripped = '';\n    let index = 0;\n    let endBlockComment = string.indexOf('*/');\n\n    while (index < string.length) {\n      if (string[index] === '/' && string[index + 1] === '/') {\n        // inline comment\n        let endIndex = string.indexOf('\\n', index);\n        index = endIndex === -1 ? string.length : endIndex;\n      } else if (endBlockComment !== -1 && string[index] === '/' && string[index + 1] === '*') {\n        // block comment\n        let endIndex = string.indexOf('*/', index);\n\n        if (endIndex !== -1) {\n          index = endIndex + 2;\n          endBlockComment = string.indexOf('*/', index);\n        } else {\n          stripped += string[index];\n          index++;\n        }\n      } else {\n        stripped += string[index];\n        index++;\n      }\n    }\n\n    return stripped;\n  }\n\n  function parseParams(func) {\n    const src = stripComments(func.toString());\n    let match = src.match(FN_ARGS);\n\n    if (!match) {\n      match = src.match(ARROW_FN_ARGS);\n    }\n\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src);\n    let [, args] = match;\n    return args.replace(/\\s/g, '').split(FN_ARG_SPLIT).map(arg => arg.replace(FN_ARG, '').trim());\n  }\n  /**\n   * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n   * tasks are specified as parameters to the function, after the usual callback\n   * parameter, with the parameter names matching the names of the tasks it\n   * depends on. This can provide even more readable task graphs which can be\n   * easier to maintain.\n   *\n   * If a final callback is specified, the task results are similarly injected,\n   * specified as named parameters after the initial error parameter.\n   *\n   * The autoInject function is purely syntactic sugar and its semantics are\n   * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n   *\n   * @name autoInject\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.auto]{@link module:ControlFlow.auto}\n   * @category Control Flow\n   * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n   * the form 'func([dependencies...], callback). The object's key of a property\n   * serves as the name of the task defined by that property, i.e. can be used\n   * when specifying requirements for other tasks.\n   * * The `callback` parameter is a `callback(err, result)` which must be called\n   *   when finished, passing an `error` (which can be `null`) and the result of\n   *   the function's execution. The remaining parameters name other tasks on\n   *   which the task is dependent, and the results from those tasks are the\n   *   arguments of those parameters.\n   * @param {Function} [callback] - An optional callback which is called when all\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\n   * pass an error to their callback, and a `results` object with any completed\n   * task results, similar to `auto`.\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * //  The example from `auto` can be rewritten as follows:\n   * async.autoInject({\n   *     get_data: function(callback) {\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: function(get_data, make_folder, callback) {\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     },\n   *     email_link: function(write_file, callback) {\n   *         // once the file is written let's email a link to it...\n   *         // write_file contains the filename returned by write_file.\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\n   *     }\n   * }, function(err, results) {\n   *     console.log('err = ', err);\n   *     console.log('email_link = ', results.email_link);\n   * });\n   *\n   * // If you are using a JS minifier that mangles parameter names, `autoInject`\n   * // will not work with plain functions, since the parameter names will be\n   * // collapsed to a single letter identifier.  To work around this, you can\n   * // explicitly specify the names of the parameters your task function needs\n   * // in an array, similar to Angular.js dependency injection.\n   *\n   * // This still has an advantage over plain `auto`, since the results a task\n   * // depends on are still spread into arguments.\n   * async.autoInject({\n   *     //...\n   *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(write_file, callback) {\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\n   *     }]\n   *     //...\n   * }, function(err, results) {\n   *     console.log('err = ', err);\n   *     console.log('email_link = ', results.email_link);\n   * });\n   */\n\n\n  function autoInject(tasks, callback) {\n    var newTasks = {};\n    Object.keys(tasks).forEach(key => {\n      var taskFn = tasks[key];\n      var params;\n      var fnIsAsync = isAsync(taskFn);\n      var hasNoDeps = !fnIsAsync && taskFn.length === 1 || fnIsAsync && taskFn.length === 0;\n\n      if (Array.isArray(taskFn)) {\n        params = [...taskFn];\n        taskFn = params.pop();\n        newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n      } else if (hasNoDeps) {\n        // no dependencies, use the function as-is\n        newTasks[key] = taskFn;\n      } else {\n        params = parseParams(taskFn);\n\n        if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\n          throw new Error(\"autoInject task functions require explicit parameters.\");\n        } // remove callback param\n\n\n        if (!fnIsAsync) params.pop();\n        newTasks[key] = params.concat(newTask);\n      }\n\n      function newTask(results, taskCb) {\n        var newArgs = params.map(name => results[name]);\n        newArgs.push(taskCb);\n        wrapAsync(taskFn)(...newArgs);\n      }\n    });\n    return auto(newTasks, callback);\n  } // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n  // used for queues. This implementation assumes that the node provided by the user can be modified\n  // to adjust the next and last properties. We implement only the minimal functionality\n  // for queue support.\n\n\n  class DLL {\n    constructor() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n\n    removeLink(node) {\n      if (node.prev) node.prev.next = node.next;else this.head = node.next;\n      if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n      node.prev = node.next = null;\n      this.length -= 1;\n      return node;\n    }\n\n    empty() {\n      while (this.head) this.shift();\n\n      return this;\n    }\n\n    insertAfter(node, newNode) {\n      newNode.prev = node;\n      newNode.next = node.next;\n      if (node.next) node.next.prev = newNode;else this.tail = newNode;\n      node.next = newNode;\n      this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n      newNode.prev = node.prev;\n      newNode.next = node;\n      if (node.prev) node.prev.next = newNode;else this.head = newNode;\n      node.prev = newNode;\n      this.length += 1;\n    }\n\n    unshift(node) {\n      if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n    }\n\n    push(node) {\n      if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n    }\n\n    shift() {\n      return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n      return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n      return [...this];\n    }\n\n    *[Symbol.iterator]() {\n      var cur = this.head;\n\n      while (cur) {\n        yield cur.data;\n        cur = cur.next;\n      }\n    }\n\n    remove(testFn) {\n      var curr = this.head;\n\n      while (curr) {\n        var {\n          next\n        } = curr;\n\n        if (testFn(curr)) {\n          this.removeLink(curr);\n        }\n\n        curr = next;\n      }\n\n      return this;\n    }\n\n  }\n\n  function setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n  }\n\n  function queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n      concurrency = 1;\n    } else if (concurrency === 0) {\n      throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n      error: [],\n      drain: [],\n      saturated: [],\n      unsaturated: [],\n      empty: []\n    };\n\n    function on(event, handler) {\n      events[event].push(handler);\n    }\n\n    function once(event, handler) {\n      const handleAndRemove = function () {\n        off(event, handleAndRemove);\n        handler(...arguments);\n      };\n\n      events[event].push(handleAndRemove);\n    }\n\n    function off(event, handler) {\n      if (!event) return Object.keys(events).forEach(ev => events[ev] = []);\n      if (!handler) return events[event] = [];\n      events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger(event) {\n      for (var _len13 = arguments.length, args = new Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {\n        args[_key13 - 1] = arguments[_key13];\n      }\n\n      events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n      if (callback != null && typeof callback !== 'function') {\n        throw new Error('task callback must be a function');\n      }\n\n      q.started = true;\n      var res, rej;\n\n      function promiseCallback(err) {\n        // we don't care about the error, let the global error handler\n        // deal with it\n        if (err) return rejectOnError ? rej(err) : res();\n\n        for (var _len14 = arguments.length, args = new Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {\n          args[_key14 - 1] = arguments[_key14];\n        }\n\n        if (args.length <= 1) return res(args[0]);\n        res(args);\n      }\n\n      var item = q._createTaskItem(data, rejectOnError ? promiseCallback : callback || promiseCallback);\n\n      if (insertAtFront) {\n        q._tasks.unshift(item);\n      } else {\n        q._tasks.push(item);\n      }\n\n      if (!processingScheduled) {\n        processingScheduled = true;\n        setImmediate$1(() => {\n          processingScheduled = false;\n          q.process();\n        });\n      }\n\n      if (rejectOnError || !callback) {\n        return new Promise((resolve, reject) => {\n          res = resolve;\n          rej = reject;\n        });\n      }\n    }\n\n    function _createCB(tasks) {\n      return function (err) {\n        numRunning -= 1;\n\n        for (var _len15 = arguments.length, args = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {\n          args[_key15 - 1] = arguments[_key15];\n        }\n\n        for (var i = 0, l = tasks.length; i < l; i++) {\n          var task = tasks[i];\n          var index = workersList.indexOf(task);\n\n          if (index === 0) {\n            workersList.shift();\n          } else if (index > 0) {\n            workersList.splice(index, 1);\n          }\n\n          task.callback(err, ...args);\n\n          if (err != null) {\n            trigger('error', err, task.data);\n          }\n        }\n\n        if (numRunning <= q.concurrency - q.buffer) {\n          trigger('unsaturated');\n        }\n\n        if (q.idle()) {\n          trigger('drain');\n        }\n\n        q.process();\n      };\n    }\n\n    function _maybeDrain(data) {\n      if (data.length === 0 && q.idle()) {\n        // call drain immediately if there are no tasks\n        setImmediate$1(() => trigger('drain'));\n        return true;\n      }\n\n      return false;\n    }\n\n    const eventMethod = name => handler => {\n      if (!handler) {\n        return new Promise((resolve, reject) => {\n          once(name, (err, data) => {\n            if (err) return reject(err);\n            resolve(data);\n          });\n        });\n      }\n\n      off(name);\n      on(name, handler);\n    };\n\n    var isProcessing = false;\n    var q = {\n      _tasks: new DLL(),\n\n      _createTaskItem(data, callback) {\n        return {\n          data,\n          callback\n        };\n      },\n\n      *[Symbol.iterator]() {\n        yield* q._tasks[Symbol.iterator]();\n      },\n\n      concurrency,\n      payload,\n      buffer: concurrency / 4,\n      started: false,\n      paused: false,\n\n      push(data, callback) {\n        if (Array.isArray(data)) {\n          if (_maybeDrain(data)) return;\n          return data.map(datum => _insert(datum, false, false, callback));\n        }\n\n        return _insert(data, false, false, callback);\n      },\n\n      pushAsync(data, callback) {\n        if (Array.isArray(data)) {\n          if (_maybeDrain(data)) return;\n          return data.map(datum => _insert(datum, false, true, callback));\n        }\n\n        return _insert(data, false, true, callback);\n      },\n\n      kill() {\n        off();\n\n        q._tasks.empty();\n      },\n\n      unshift(data, callback) {\n        if (Array.isArray(data)) {\n          if (_maybeDrain(data)) return;\n          return data.map(datum => _insert(datum, true, false, callback));\n        }\n\n        return _insert(data, true, false, callback);\n      },\n\n      unshiftAsync(data, callback) {\n        if (Array.isArray(data)) {\n          if (_maybeDrain(data)) return;\n          return data.map(datum => _insert(datum, true, true, callback));\n        }\n\n        return _insert(data, true, true, callback);\n      },\n\n      remove(testFn) {\n        q._tasks.remove(testFn);\n      },\n\n      process() {\n        // Avoid trying to start too many processing operations. This can occur\n        // when callbacks resolve synchronously (#1267).\n        if (isProcessing) {\n          return;\n        }\n\n        isProcessing = true;\n\n        while (!q.paused && numRunning < q.concurrency && q._tasks.length) {\n          var tasks = [],\n              data = [];\n          var l = q._tasks.length;\n          if (q.payload) l = Math.min(l, q.payload);\n\n          for (var i = 0; i < l; i++) {\n            var node = q._tasks.shift();\n\n            tasks.push(node);\n            workersList.push(node);\n            data.push(node.data);\n          }\n\n          numRunning += 1;\n\n          if (q._tasks.length === 0) {\n            trigger('empty');\n          }\n\n          if (numRunning === q.concurrency) {\n            trigger('saturated');\n          }\n\n          var cb = onlyOnce(_createCB(tasks));\n\n          _worker(data, cb);\n        }\n\n        isProcessing = false;\n      },\n\n      length() {\n        return q._tasks.length;\n      },\n\n      running() {\n        return numRunning;\n      },\n\n      workersList() {\n        return workersList;\n      },\n\n      idle() {\n        return q._tasks.length + numRunning === 0;\n      },\n\n      pause() {\n        q.paused = true;\n      },\n\n      resume() {\n        if (q.paused === false) {\n          return;\n        }\n\n        q.paused = false;\n        setImmediate$1(q.process);\n      }\n\n    }; // define these as fixed properties, so people get useful errors when updating\n\n    Object.defineProperties(q, {\n      saturated: {\n        writable: false,\n        value: eventMethod('saturated')\n      },\n      unsaturated: {\n        writable: false,\n        value: eventMethod('unsaturated')\n      },\n      empty: {\n        writable: false,\n        value: eventMethod('empty')\n      },\n      drain: {\n        writable: false,\n        value: eventMethod('drain')\n      },\n      error: {\n        writable: false,\n        value: eventMethod('error')\n      }\n    });\n    return q;\n  }\n  /**\n   * Creates a `cargo` object with the specified payload. Tasks added to the\n   * cargo will be processed altogether (up to the `payload` limit). If the\n   * `worker` is in progress, the task is queued until it becomes available. Once\n   * the `worker` has completed some tasks, each callback of those tasks is\n   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n   * for how `cargo` and `queue` work.\n   *\n   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n   * at a time, cargo passes an array of tasks to a single worker, repeating\n   * when the worker is finished.\n   *\n   * @name cargo\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An asynchronous function for processing an array\n   * of queued tasks. Invoked with `(tasks, callback)`.\n   * @param {number} [payload=Infinity] - An optional `integer` for determining\n   * how many tasks should be processed per round; if omitted, the default is\n   * unlimited.\n   * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the cargo and inner queue.\n   * @example\n   *\n   * // create a cargo object with payload 2\n   * var cargo = async.cargo(function(tasks, callback) {\n   *     for (var i=0; i<tasks.length; i++) {\n   *         console.log('hello ' + tasks[i].name);\n   *     }\n   *     callback();\n   * }, 2);\n   *\n   * // add some items\n   * cargo.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * cargo.push({name: 'bar'}, function(err) {\n   *     console.log('finished processing bar');\n   * });\n   * await cargo.push({name: 'baz'});\n   * console.log('finished processing baz');\n   */\n\n\n  function cargo(worker, payload) {\n    return queue(worker, 1, payload);\n  }\n  /**\n   * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n   * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n   * If the all `workers` are in progress, the task is queued until one becomes available. Once\n   * a `worker` has completed some tasks, each callback of those tasks is\n   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n   * for how `cargo` and `queue` work.\n   *\n   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n   * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n   * the cargoQueue passes an array of tasks to multiple parallel workers.\n   *\n   * @name cargoQueue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @see [async.cargo]{@link module:ControlFLow.cargo}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An asynchronous function for processing an array\n   * of queued tasks. Invoked with `(tasks, callback)`.\n   * @param {number} [concurrency=1] - An `integer` for determining how many\n   * `worker` functions should be run in parallel.  If omitted, the concurrency\n   * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n   * @param {number} [payload=Infinity] - An optional `integer` for determining\n   * how many tasks should be processed per round; if omitted, the default is\n   * unlimited.\n   * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the cargoQueue and inner queue.\n   * @example\n   *\n   * // create a cargoQueue object with payload 2 and concurrency 2\n   * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n   *     for (var i=0; i<tasks.length; i++) {\n   *         console.log('hello ' + tasks[i].name);\n   *     }\n   *     callback();\n   * }, 2, 2);\n   *\n   * // add some items\n   * cargoQueue.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * cargoQueue.push({name: 'bar'}, function(err) {\n   *     console.log('finished processing bar');\n   * });\n   * cargoQueue.push({name: 'baz'}, function(err) {\n   *     console.log('finished processing baz');\n   * });\n   * cargoQueue.push({name: 'boo'}, function(err) {\n   *     console.log('finished processing boo');\n   * });\n   */\n\n\n  function cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n  }\n  /**\n   * Reduces `coll` into a single value using an async `iteratee` to return each\n   * successive step. `memo` is the initial state of the reduction. This function\n   * only operates in series.\n   *\n   * For performance reasons, it may make sense to split a call to this function\n   * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n   * results. This function is for situations where each step in the reduction\n   * needs to be async; if you can get the data before reducing it, then it's\n   * probably a good idea to do so.\n   *\n   * @name reduce\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias inject\n   * @alias foldl\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {*} memo - The initial state of the reduction.\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * array to produce the next step in the reduction.\n   * The `iteratee` should complete with the next state of the reduction.\n   * If the iteratee completes with an error, the reduction is stopped and the\n   * main `callback` is immediately called with the error.\n   * Invoked with (memo, item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   * // file4.txt does not exist\n   *\n   * const fileList = ['file1.txt','file2.txt','file3.txt'];\n   * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n   *\n   * // asynchronous function that computes the file size in bytes\n   * // file size is added to the memoized value, then returned\n   * function getFileSizeInBytes(memo, file, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         callback(null, memo + stat.size);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n   *     if (err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(result);\n   *         // 6000\n   *         // which is the sum of the file sizes of the three files\n   *     }\n   * });\n   *\n   * // Error Handling\n   * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n   *     if (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     } else {\n   *         console.log(result);\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.reduce(fileList, 0, getFileSizeInBytes)\n   * .then( result => {\n   *     console.log(result);\n   *     // 6000\n   *     // which is the sum of the file sizes of the three files\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n   * .then( result => {\n   *     console.log(result);\n   * }).catch( err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n   *         console.log(result);\n   *         // 6000\n   *         // which is the sum of the file sizes of the three files\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n   *         console.log(result);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     }\n   * }\n   *\n   */\n\n\n  function reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n      _iteratee(memo, x, (err, v) => {\n        memo = v;\n        iterCb(err);\n      });\n    }, err => callback(err, memo));\n  }\n\n  var reduce$1 = awaitify(reduce, 4);\n  /**\n   * Version of the compose function that is more natural to read. Each function\n   * consumes the return value of the previous function. It is the equivalent of\n   * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n   *\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @name seq\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.compose]{@link module:ControlFlow.compose}\n   * @category Control Flow\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\n   * @returns {Function} a function that composes the `functions` in order\n   * @example\n   *\n   * // Requires lodash (or underscore), express3 and dresende's orm2.\n   * // Part of an app, that fetches cats of the logged user.\n   * // This example uses `seq` function to avoid overnesting and error\n   * // handling clutter.\n   * app.get('/cats', function(request, response) {\n   *     var User = request.models.User;\n   *     async.seq(\n   *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n   *         function(user, fn) {\n   *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n   *         }\n   *     )(req.session.user_id, function (err, cats) {\n   *         if (err) {\n   *             console.error(err);\n   *             response.json({ status: 'error', message: err.message });\n   *         } else {\n   *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n   *         }\n   *     });\n   * });\n   */\n\n  function seq() {\n    for (var _len16 = arguments.length, functions = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n      functions[_key16] = arguments[_key16];\n    }\n\n    var _functions = functions.map(wrapAsync);\n\n    return function () {\n      var that = this;\n\n      for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {\n        args[_key17] = arguments[_key17];\n      }\n\n      var cb = args[args.length - 1];\n\n      if (typeof cb == 'function') {\n        args.pop();\n      } else {\n        cb = promiseCallback();\n      }\n\n      reduce$1(_functions, args, (newargs, fn, iterCb) => {\n        fn.apply(that, newargs.concat(function (err) {\n          for (var _len18 = arguments.length, nextargs = new Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++) {\n            nextargs[_key18 - 1] = arguments[_key18];\n          }\n\n          iterCb(err, nextargs);\n        }));\n      }, (err, results) => cb(err, ...results));\n      return cb[PROMISE_SYMBOL];\n    };\n  }\n  /**\n   * Creates a function which is a composition of the passed asynchronous\n   * functions. Each function consumes the return value of the function that\n   * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n   * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n   *\n   * If the last argument to the composed function is not a function, a promise\n   * is returned when you call it.\n   *\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @name compose\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\n   * @returns {Function} an asynchronous function that is the composed\n   * asynchronous `functions`\n   * @example\n   *\n   * function add1(n, callback) {\n   *     setTimeout(function () {\n   *         callback(null, n + 1);\n   *     }, 10);\n   * }\n   *\n   * function mul3(n, callback) {\n   *     setTimeout(function () {\n   *         callback(null, n * 3);\n   *     }, 10);\n   * }\n   *\n   * var add1mul3 = async.compose(mul3, add1);\n   * add1mul3(4, function (err, result) {\n   *     // result now equals 15\n   * });\n   */\n\n\n  function compose() {\n    for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {\n      args[_key19] = arguments[_key19];\n    }\n\n    return seq(...args.reverse());\n  }\n  /**\n   * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name mapLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n\n\n  function mapLimit(coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback);\n  }\n\n  var mapLimit$1 = awaitify(mapLimit, 4);\n  /**\n   * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name concatLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.concat]{@link module:Collections.concat}\n   * @category Collection\n   * @alias flatMapLimit\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n   * which should use an array as its result. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   * @returns A Promise, if no callback is passed\n   */\n\n  function concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n      _iteratee(val, function (err) {\n        if (err) return iterCb(err);\n\n        for (var _len20 = arguments.length, args = new Array(_len20 > 1 ? _len20 - 1 : 0), _key20 = 1; _key20 < _len20; _key20++) {\n          args[_key20 - 1] = arguments[_key20];\n        }\n\n        return iterCb(err, args);\n      });\n    }, (err, mapResults) => {\n      var result = [];\n\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          result = result.concat(...mapResults[i]);\n        }\n      }\n\n      return callback(err, result);\n    });\n  }\n\n  var concatLimit$1 = awaitify(concatLimit, 4);\n  /**\n   * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n   * the concatenated list. The `iteratee`s are called in parallel, and the\n   * results are concatenated as they return. The results array will be returned in\n   * the original order of `coll` passed to the `iteratee` function.\n   *\n   * @name concat\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @alias flatMap\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n   * which should use an array as its result. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   * @returns A Promise, if no callback is passed\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * let directoryList = ['dir1','dir2','dir3'];\n   * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n   *\n   * // Using callbacks\n   * async.concat(directoryList, fs.readdir, function(err, results) {\n   *    if (err) {\n   *        console.log(err);\n   *    } else {\n   *        console.log(results);\n   *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n   *    }\n   * });\n   *\n   * // Error Handling\n   * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n   *    if (err) {\n   *        console.log(err);\n   *        // [ Error: ENOENT: no such file or directory ]\n   *        // since dir4 does not exist\n   *    } else {\n   *        console.log(results);\n   *    }\n   * });\n   *\n   * // Using Promises\n   * async.concat(directoryList, fs.readdir)\n   * .then(results => {\n   *     console.log(results);\n   *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n   * }).catch(err => {\n   *      console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.concat(withMissingDirectoryList, fs.readdir)\n   * .then(results => {\n   *     console.log(results);\n   * }).catch(err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   *     // since dir4 does not exist\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.concat(directoryList, fs.readdir);\n   *         console.log(results);\n   *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n   *     } catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n   *         console.log(results);\n   *     } catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *         // since dir4 does not exist\n   *     }\n   * }\n   *\n   */\n\n  function concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback);\n  }\n\n  var concat$1 = awaitify(concat, 3);\n  /**\n   * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n   *\n   * @name concatSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.concat]{@link module:Collections.concat}\n   * @category Collection\n   * @alias flatMapSeries\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n   * The iteratee should complete with an array an array of results.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   * @returns A Promise, if no callback is passed\n   */\n\n  function concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback);\n  }\n\n  var concatSeries$1 = awaitify(concatSeries, 3);\n  /**\n   * Returns a function that when called, calls-back with the values provided.\n   * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n   * [`auto`]{@link module:ControlFlow.auto}.\n   *\n   * @name constant\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {...*} arguments... - Any number of arguments to automatically invoke\n   * callback with.\n   * @returns {AsyncFunction} Returns a function that when invoked, automatically\n   * invokes the callback with the previous given arguments.\n   * @example\n   *\n   * async.waterfall([\n   *     async.constant(42),\n   *     function (value, next) {\n   *         // value === 42\n   *     },\n   *     //...\n   * ], callback);\n   *\n   * async.waterfall([\n   *     async.constant(filename, \"utf8\"),\n   *     fs.readFile,\n   *     function (fileData, next) {\n   *         //...\n   *     }\n   *     //...\n   * ], callback);\n   *\n   * async.auto({\n   *     hostname: async.constant(\"https://server.net/\"),\n   *     port: findFreePort,\n   *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n   *         startServer(options, cb);\n   *     }],\n   *     //...\n   * }, callback);\n   */\n\n  function constant() {\n    for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {\n      args[_key21] = arguments[_key21];\n    }\n\n    return function () {\n      for (var _len22 = arguments.length, ignoredArgs = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {\n        ignoredArgs[_key22] = arguments[_key22];\n      }\n\n      var callback = ignoredArgs.pop();\n      return callback(null, ...args);\n    };\n  }\n\n  function _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n      var testPassed = false;\n      var testResult;\n      const iteratee = wrapAsync(_iteratee);\n      eachfn(arr, (value, _, callback) => {\n        iteratee(value, (err, result) => {\n          if (err || err === false) return callback(err);\n\n          if (check(result) && !testResult) {\n            testPassed = true;\n            testResult = getResult(true, value);\n            return callback(null, breakLoop);\n          }\n\n          callback();\n        });\n      }, err => {\n        if (err) return cb(err);\n        cb(null, testPassed ? testResult : getResult(false));\n      });\n    };\n  }\n  /**\n   * Returns the first value in `coll` that passes an async truth test. The\n   * `iteratee` is applied in parallel, meaning the first iteratee to return\n   * `true` will fire the detect `callback` with that result. That means the\n   * result might not be the first item in the original `coll` (in terms of order)\n   * that passes the test.\n    * If order within the original `coll` is important, then look at\n   * [`detectSeries`]{@link module:Collections.detectSeries}.\n   *\n   * @name detect\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias find\n   * @category Collections\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n   *    function(err, result) {\n   *        console.log(result);\n   *        // dir1/file1.txt\n   *        // result now equals the first file in the list that exists\n   *    }\n   *);\n   *\n   * // Using Promises\n   * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n   * .then(result => {\n   *     console.log(result);\n   *     // dir1/file1.txt\n   *     // result now equals the first file in the list that exists\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n   *         console.log(result);\n   *         // dir1/file1.txt\n   *         // result now equals the file in the list that exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n\n\n  function detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback);\n  }\n\n  var detect$1 = awaitify(detect, 3);\n  /**\n   * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name detectLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.detect]{@link module:Collections.detect}\n   * @alias findLimit\n   * @category Collections\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n\n  function detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback);\n  }\n\n  var detectLimit$1 = awaitify(detectLimit, 4);\n  /**\n   * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n   *\n   * @name detectSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.detect]{@link module:Collections.detect}\n   * @alias findSeries\n   * @category Collections\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n\n  function detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback);\n  }\n\n  var detectSeries$1 = awaitify(detectSeries, 3);\n\n  function consoleFunc(name) {\n    return function (fn) {\n      for (var _len23 = arguments.length, args = new Array(_len23 > 1 ? _len23 - 1 : 0), _key23 = 1; _key23 < _len23; _key23++) {\n        args[_key23 - 1] = arguments[_key23];\n      }\n\n      return wrapAsync(fn)(...args, function (err) {\n        /* istanbul ignore else */\n        if (typeof console === 'object') {\n          /* istanbul ignore else */\n          if (err) {\n            /* istanbul ignore else */\n            if (console.error) {\n              console.error(err);\n            }\n          } else if (console[name]) {\n            for (var _len24 = arguments.length, resultArgs = new Array(_len24 > 1 ? _len24 - 1 : 0), _key24 = 1; _key24 < _len24; _key24++) {\n              resultArgs[_key24 - 1] = arguments[_key24];\n            }\n\n            /* istanbul ignore else */\n            resultArgs.forEach(x => console[name](x));\n          }\n        }\n      });\n    };\n  }\n  /**\n   * Logs the result of an [`async` function]{@link AsyncFunction} to the\n   * `console` using `console.dir` to display the properties of the resulting object.\n   * Only works in Node.js or in browsers that support `console.dir` and\n   * `console.error` (such as FF and Chrome).\n   * If multiple arguments are returned from the async function,\n   * `console.dir` is called on each argument in order.\n   *\n   * @name dir\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} function - The function you want to eventually apply\n   * all arguments to.\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\n   * @example\n   *\n   * // in a module\n   * var hello = function(name, callback) {\n   *     setTimeout(function() {\n   *         callback(null, {hello: name});\n   *     }, 1000);\n   * };\n   *\n   * // in the node repl\n   * node> async.dir(hello, 'world');\n   * {hello: 'world'}\n   */\n\n\n  var dir = consoleFunc('dir');\n  /**\n   * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n   * the order of operations, the arguments `test` and `iteratee` are switched.\n   *\n   * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n   *\n   * @name doWhilst\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\n   * @category Control Flow\n   * @param {AsyncFunction} iteratee - A function which is called each time `test`\n   * passes. Invoked with (callback).\n   * @param {AsyncFunction} test - asynchronous truth test to perform after each\n   * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n   * non-error args from the previous callback of `iteratee`.\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `iteratee` has stopped.\n   * `callback` will be passed an error and any arguments passed to the final\n   * `iteratee`'s callback. Invoked with (err, [results]);\n   * @returns {Promise} a promise, if no callback is passed\n   */\n\n  function doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n\n    var _fn = wrapAsync(iteratee);\n\n    var _test = wrapAsync(test);\n\n    var results;\n\n    function next(err) {\n      if (err) return callback(err);\n      if (err === false) return;\n\n      for (var _len25 = arguments.length, args = new Array(_len25 > 1 ? _len25 - 1 : 0), _key25 = 1; _key25 < _len25; _key25++) {\n        args[_key25 - 1] = arguments[_key25];\n      }\n\n      results = args;\n\n      _test(...args, check);\n    }\n\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (err === false) return;\n      if (!truth) return callback(null, ...results);\n\n      _fn(next);\n    }\n\n    return check(null, true);\n  }\n\n  var doWhilst$1 = awaitify(doWhilst, 3);\n  /**\n   * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n   * argument ordering differs from `until`.\n   *\n   * @name doUntil\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n   * @category Control Flow\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` fails. Invoked with (callback).\n   * @param {AsyncFunction} test - asynchronous truth test to perform after each\n   * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n   * non-error args from the previous callback of `iteratee`\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   * @returns {Promise} a promise, if no callback is passed\n   */\n\n  function doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n\n    return doWhilst$1(iteratee, function () {\n      for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {\n        args[_key26] = arguments[_key26];\n      }\n\n      const cb = args.pop();\n\n      _test(...args, (err, truth) => cb(err, !truth));\n    }, callback);\n  }\n\n  function _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n  }\n  /**\n   * Applies the function `iteratee` to each item in `coll`, in parallel.\n   * The `iteratee` is called with an item from the list, and a callback for when\n   * it has finished. If the `iteratee` passes an error to its `callback`, the\n   * main `callback` (for the `each` function) is immediately called with the\n   * error.\n   *\n   * Note, that since this function applies `iteratee` to each item in parallel,\n   * there is no guarantee that the iteratee functions will complete in order.\n   *\n   * @name each\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias forEach\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to\n   * each item in `coll`. Invoked with (item, callback).\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOf`.\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n   * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n   *\n   * // asynchronous function that deletes a file\n   * const deleteFile = function(file, callback) {\n   *     fs.unlink(file, callback);\n   * };\n   *\n   * // Using callbacks\n   * async.each(fileList, deleteFile, function(err) {\n   *     if( err ) {\n   *         console.log(err);\n   *     } else {\n   *         console.log('All files have been deleted successfully');\n   *     }\n   * });\n   *\n   * // Error Handling\n   * async.each(withMissingFileList, deleteFile, function(err){\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   *     // since dir4/file2.txt does not exist\n   *     // dir1/file1.txt could have been deleted\n   * });\n   *\n   * // Using Promises\n   * async.each(fileList, deleteFile)\n   * .then( () => {\n   *     console.log('All files have been deleted successfully');\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.each(fileList, deleteFile)\n   * .then( () => {\n   *     console.log('All files have been deleted successfully');\n   * }).catch( err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   *     // since dir4/file2.txt does not exist\n   *     // dir1/file1.txt could have been deleted\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         await async.each(files, deleteFile);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         await async.each(withMissingFileList, deleteFile);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *         // since dir4/file2.txt does not exist\n   *         // dir1/file1.txt could have been deleted\n   *     }\n   * }\n   *\n   */\n\n\n  function eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n\n  var each = awaitify(eachLimit, 3);\n  /**\n   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name eachLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.each]{@link module:Collections.each}\n   * @alias forEachLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOfLimit`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n\n  function eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n\n  var eachLimit$2 = awaitify(eachLimit$1, 4);\n  /**\n   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n   *\n   * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n   * in series and therefore the iteratee functions will complete in order.\n    * @name eachSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.each]{@link module:Collections.each}\n   * @alias forEachSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each\n   * item in `coll`.\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOfSeries`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n\n  function eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback);\n  }\n\n  var eachSeries$1 = awaitify(eachSeries, 3);\n  /**\n   * Wrap an async function and ensure it calls its callback on a later tick of\n   * the event loop.  If the function already calls its callback on a next tick,\n   * no extra deferral is added. This is useful for preventing stack overflows\n   * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n   * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n   * contained. ES2017 `async` functions are returned as-is -- they are immune\n   * to Zalgo's corrupting influences, as they always resolve on a later tick.\n   *\n   * @name ensureAsync\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - an async function, one that expects a node-style\n   * callback as its last argument.\n   * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n   * signature as the function passed in.\n   * @example\n   *\n   * function sometimesAsync(arg, callback) {\n   *     if (cache[arg]) {\n   *         return callback(null, cache[arg]); // this would be synchronous!!\n   *     } else {\n   *         doSomeIO(arg, callback); // this IO would be asynchronous\n   *     }\n   * }\n   *\n   * // this has a risk of stack overflows if many results are cached in a row\n   * async.mapSeries(args, sometimesAsync, done);\n   *\n   * // this will defer sometimesAsync's callback if necessary,\n   * // preventing stack overflows\n   * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n   */\n\n  function ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function () {\n      for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {\n        args[_key27] = arguments[_key27];\n      }\n\n      var callback = args.pop();\n      var sync = true;\n      args.push(function () {\n        for (var _len28 = arguments.length, innerArgs = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {\n          innerArgs[_key28] = arguments[_key28];\n        }\n\n        if (sync) {\n          setImmediate$1(() => callback(...innerArgs));\n        } else {\n          callback(...innerArgs);\n        }\n      });\n      fn.apply(this, args);\n      sync = false;\n    };\n  }\n  /**\n   * Returns `true` if every element in `coll` satisfies an async test. If any\n   * iteratee call returns `false`, the main `callback` is immediately called.\n   *\n   * @name every\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias all\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in parallel.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n   * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * // Using callbacks\n   * async.every(fileList, fileExists, function(err, result) {\n   *     console.log(result);\n   *     // true\n   *     // result is true since every file exists\n   * });\n   *\n   * async.every(withMissingFileList, fileExists, function(err, result) {\n   *     console.log(result);\n   *     // false\n   *     // result is false since NOT every file exists\n   * });\n   *\n   * // Using Promises\n   * async.every(fileList, fileExists)\n   * .then( result => {\n   *     console.log(result);\n   *     // true\n   *     // result is true since every file exists\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * async.every(withMissingFileList, fileExists)\n   * .then( result => {\n   *     console.log(result);\n   *     // false\n   *     // result is false since NOT every file exists\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.every(fileList, fileExists);\n   *         console.log(result);\n   *         // true\n   *         // result is true since every file exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * async () => {\n   *     try {\n   *         let result = await async.every(withMissingFileList, fileExists);\n   *         console.log(result);\n   *         // false\n   *         // result is false since NOT every file exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n\n\n  function every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback);\n  }\n\n  var every$1 = awaitify(every, 3);\n  /**\n   * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name everyLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.every]{@link module:Collections.every}\n   * @alias allLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in parallel.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   */\n\n  function everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback);\n  }\n\n  var everyLimit$1 = awaitify(everyLimit, 4);\n  /**\n   * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n   *\n   * @name everySeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.every]{@link module:Collections.every}\n   * @alias allSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in series.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   */\n\n  function everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback);\n  }\n\n  var everySeries$1 = awaitify(everySeries, 3);\n\n  function filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n      iteratee(x, (err, v) => {\n        truthValues[index] = !!v;\n        iterCb(err);\n      });\n    }, err => {\n      if (err) return callback(err);\n      var results = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        if (truthValues[i]) results.push(arr[i]);\n      }\n\n      callback(null, results);\n    });\n  }\n\n  function filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n      iteratee(x, (err, v) => {\n        if (err) return iterCb(err);\n\n        if (v) {\n          results.push({\n            index,\n            value: x\n          });\n        }\n\n        iterCb(err);\n      });\n    }, err => {\n      if (err) return callback(err);\n      callback(null, results.sort((a, b) => a.index - b.index).map(v => v.value));\n    });\n  }\n\n  function _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n  }\n  /**\n   * Returns a new array of all the values in `coll` which pass an async truth\n   * test. This operation is performed in parallel, but the results array will be\n   * in the same order as the original.\n   *\n   * @name filter\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias select\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback provided\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   *\n   * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * // Using callbacks\n   * async.filter(files, fileExists, function(err, results) {\n   *    if(err) {\n   *        console.log(err);\n   *    } else {\n   *        console.log(results);\n   *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n   *        // results is now an array of the existing files\n   *    }\n   * });\n   *\n   * // Using Promises\n   * async.filter(files, fileExists)\n   * .then(results => {\n   *     console.log(results);\n   *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n   *     // results is now an array of the existing files\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.filter(files, fileExists);\n   *         console.log(results);\n   *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n   *         // results is now an array of the existing files\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n\n\n  function filter(coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback);\n  }\n\n  var filter$1 = awaitify(filter, 3);\n  /**\n   * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name filterLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @alias selectLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback provided\n   */\n\n  function filterLimit(coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback);\n  }\n\n  var filterLimit$1 = awaitify(filterLimit, 4);\n  /**\n   * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n   *\n   * @name filterSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @alias selectSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results)\n   * @returns {Promise} a promise, if no callback provided\n   */\n\n  function filterSeries(coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback);\n  }\n\n  var filterSeries$1 = awaitify(filterSeries, 3);\n  /**\n   * Calls the asynchronous function `fn` with a callback parameter that allows it\n   * to call itself again, in series, indefinitely.\n    * If an error is passed to the callback then `errback` is called with the\n   * error, and execution stops, otherwise it will never be called.\n   *\n   * @name forever\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} fn - an async function to call repeatedly.\n   * Invoked with (next).\n   * @param {Function} [errback] - when `fn` passes an error to it's callback,\n   * this function will be called, and execution stops. Invoked with (err).\n   * @returns {Promise} a promise that rejects if an error occurs and an errback\n   * is not passed\n   * @example\n   *\n   * async.forever(\n   *     function(next) {\n   *         // next is suitable for passing to things that need a callback(err [, whatever]);\n   *         // it will result in this function being called again.\n   *     },\n   *     function(err) {\n   *         // if next is called with a value in its first parameter, it will appear\n   *         // in here as 'err', and execution will stop.\n   *     }\n   * );\n   */\n\n  function forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n      if (err) return done(err);\n      if (err === false) return;\n      task(next);\n    }\n\n    return next();\n  }\n\n  var forever$1 = awaitify(forever, 2);\n  /**\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name groupByLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.groupBy]{@link module:Collections.groupBy}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whoses\n   * properties are arrays of values which returned the corresponding key.\n   * @returns {Promise} a promise, if no callback is passed\n   */\n\n  function groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n      _iteratee(val, (err, key) => {\n        if (err) return iterCb(err);\n        return iterCb(err, {\n          key,\n          val\n        });\n      });\n    }, (err, mapResults) => {\n      var result = {}; // from MDN, handle object having an `hasOwnProperty` prop\n\n      var {\n        hasOwnProperty\n      } = Object.prototype;\n\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          var {\n            key\n          } = mapResults[i];\n          var {\n            val\n          } = mapResults[i];\n\n          if (hasOwnProperty.call(result, key)) {\n            result[key].push(val);\n          } else {\n            result[key] = [val];\n          }\n        }\n      }\n\n      return callback(err, result);\n    });\n  }\n\n  var groupByLimit$1 = awaitify(groupByLimit, 4);\n  /**\n   * Returns a new object, where each value corresponds to an array of items, from\n   * `coll`, that returned the corresponding key. That is, the keys of the object\n   * correspond to the values passed to the `iteratee` callback.\n   *\n   * Note: Since this function applies the `iteratee` to each item in parallel,\n   * there is no guarantee that the `iteratee` functions will complete in order.\n   * However, the values for each key in the `result` will be in the same order as\n   * the original `coll`. For Objects, the values will roughly be in the order of\n   * the original Objects' keys (but this can vary across JavaScript engines).\n   *\n   * @name groupBy\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whoses\n   * properties are arrays of values which returned the corresponding key.\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * const files = ['dir1/file1.txt','dir2','dir4']\n   *\n   * // asynchronous function that detects file type as none, file, or directory\n   * function detectFile(file, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(null, 'none');\n   *         }\n   *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n   *     });\n   * }\n   *\n   * //Using callbacks\n   * async.groupBy(files, detectFile, function(err, result) {\n   *     if(err) {\n   *         console.log(err);\n   *     } else {\n   *\t       console.log(result);\n   *         // {\n   *         //     file: [ 'dir1/file1.txt' ],\n   *         //     none: [ 'dir4' ],\n   *         //     directory: [ 'dir2']\n   *         // }\n   *         // result is object containing the files grouped by type\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.groupBy(files, detectFile)\n   * .then( result => {\n   *     console.log(result);\n   *     // {\n   *     //     file: [ 'dir1/file1.txt' ],\n   *     //     none: [ 'dir4' ],\n   *     //     directory: [ 'dir2']\n   *     // }\n   *     // result is object containing the files grouped by type\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.groupBy(files, detectFile);\n   *         console.log(result);\n   *         // {\n   *         //     file: [ 'dir1/file1.txt' ],\n   *         //     none: [ 'dir4' ],\n   *         //     directory: [ 'dir2']\n   *         // }\n   *         // result is object containing the files grouped by type\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n\n  function groupBy(coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback);\n  }\n  /**\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n   *\n   * @name groupBySeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.groupBy]{@link module:Collections.groupBy}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whose\n   * properties are arrays of values which returned the corresponding key.\n   * @returns {Promise} a promise, if no callback is passed\n   */\n\n\n  function groupBySeries(coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback);\n  }\n  /**\n   * Logs the result of an `async` function to the `console`. Only works in\n   * Node.js or in browsers that support `console.log` and `console.error` (such\n   * as FF and Chrome). If multiple arguments are returned from the async\n   * function, `console.log` is called on each argument in order.\n   *\n   * @name log\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} function - The function you want to eventually apply\n   * all arguments to.\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\n   * @example\n   *\n   * // in a module\n   * var hello = function(name, callback) {\n   *     setTimeout(function() {\n   *         callback(null, 'hello ' + name);\n   *     }, 1000);\n   * };\n   *\n   * // in the node repl\n   * node> async.log(hello, 'world');\n   * 'hello world'\n   */\n\n\n  var log = consoleFunc('log');\n  /**\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name mapValuesLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.mapValues]{@link module:Collections.mapValues}\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n\n  function mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n      _iteratee(val, key, (err, result) => {\n        if (err) return next(err);\n        newObj[key] = result;\n        next(err);\n      });\n    }, err => callback(err, newObj));\n  }\n\n  var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n  /**\n   * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n   *\n   * Produces a new Object by mapping each value of `obj` through the `iteratee`\n   * function. The `iteratee` is called each `value` and `key` from `obj` and a\n   * callback for when it has finished processing. Each of these callbacks takes\n   * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n   * passes an error to its callback, the main `callback` (for the `mapValues`\n   * function) is immediately called with the error.\n   *\n   * Note, the order of the keys in the result is not guaranteed.  The keys will\n   * be roughly in the order they complete, (but this is very engine-specific)\n   *\n   * @name mapValues\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   * // file4.txt does not exist\n   *\n   * const fileMap = {\n   *     f1: 'file1.txt',\n   *     f2: 'file2.txt',\n   *     f3: 'file3.txt'\n   * };\n   *\n   * const withMissingFileMap = {\n   *     f1: 'file1.txt',\n   *     f2: 'file2.txt',\n   *     f3: 'file4.txt'\n   * };\n   *\n   * // asynchronous function that returns the file size in bytes\n   * function getFileSizeInBytes(file, key, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         callback(null, stat.size);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n   *     if (err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(result);\n   *         // result is now a map of file size in bytes for each file, e.g.\n   *         // {\n   *         //     f1: 1000,\n   *         //     f2: 2000,\n   *         //     f3: 3000\n   *         // }\n   *     }\n   * });\n   *\n   * // Error handling\n   * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n   *     if (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     } else {\n   *         console.log(result);\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.mapValues(fileMap, getFileSizeInBytes)\n   * .then( result => {\n   *     console.log(result);\n   *     // result is now a map of file size in bytes for each file, e.g.\n   *     // {\n   *     //     f1: 1000,\n   *     //     f2: 2000,\n   *     //     f3: 3000\n   *     // }\n   * }).catch (err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n   * .then( result => {\n   *     console.log(result);\n   * }).catch (err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n   *         console.log(result);\n   *         // result is now a map of file size in bytes for each file, e.g.\n   *         // {\n   *         //     f1: 1000,\n   *         //     f2: 2000,\n   *         //     f3: 3000\n   *         // }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n   *         console.log(result);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     }\n   * }\n   *\n   */\n\n  function mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback);\n  }\n  /**\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n   *\n   * @name mapValuesSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.mapValues]{@link module:Collections.mapValues}\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n\n\n  function mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback);\n  }\n  /**\n   * Caches the results of an async function. When creating a hash to store\n   * function results against, the callback is omitted from the hash and an\n   * optional hash function can be used.\n   *\n   * **Note: if the async function errs, the result will not be cached and\n   * subsequent calls will call the wrapped function.**\n   *\n   * If no hash function is specified, the first argument is used as a hash key,\n   * which may work reasonably if it is a string or a data type that converts to a\n   * distinct string. Note that objects and arrays will not behave reasonably.\n   * Neither will cases where the other arguments are significant. In such cases,\n   * specify your own hash function.\n   *\n   * The cache of results is exposed as the `memo` property of the function\n   * returned by `memoize`.\n   *\n   * @name memoize\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n   * @param {Function} hasher - An optional function for generating a custom hash\n   * for storing results. It has all the arguments applied to it apart from the\n   * callback, and must be synchronous.\n   * @returns {AsyncFunction} a memoized version of `fn`\n   * @example\n   *\n   * var slow_fn = function(name, callback) {\n   *     // do something\n   *     callback(null, result);\n   * };\n   * var fn = async.memoize(slow_fn);\n   *\n   * // fn can now be used as if it were slow_fn\n   * fn('some name', function() {\n   *     // callback\n   * });\n   */\n\n\n  function memoize(fn) {\n    let hasher = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : v => v;\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n\n    var _fn = wrapAsync(fn);\n\n    var memoized = initialParams((args, callback) => {\n      var key = hasher(...args);\n\n      if (key in memo) {\n        setImmediate$1(() => callback(null, ...memo[key]));\n      } else if (key in queues) {\n        queues[key].push(callback);\n      } else {\n        queues[key] = [callback];\n\n        _fn(...args, function (err) {\n          for (var _len29 = arguments.length, resultArgs = new Array(_len29 > 1 ? _len29 - 1 : 0), _key29 = 1; _key29 < _len29; _key29++) {\n            resultArgs[_key29 - 1] = arguments[_key29];\n          }\n\n          // #1465 don't memoize if an error occurred\n          if (!err) {\n            memo[key] = resultArgs;\n          }\n\n          var q = queues[key];\n          delete queues[key];\n\n          for (var i = 0, l = q.length; i < l; i++) {\n            q[i](err, ...resultArgs);\n          }\n        });\n      }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n  }\n  /* istanbul ignore file */\n\n  /**\n   * Calls `callback` on a later loop around the event loop. In Node.js this just\n   * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n   * available, otherwise `setTimeout(callback, 0)`, which means other higher\n   * priority events may precede the execution of `callback`.\n   *\n   * This is used internally for browser-compatibility purposes.\n   *\n   * @name nextTick\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.setImmediate]{@link module:Utils.setImmediate}\n   * @category Util\n   * @param {Function} callback - The function to call on a later loop around\n   * the event loop. Invoked with (args...).\n   * @param {...*} args... - any number of additional arguments to pass to the\n   * callback on the next tick.\n   * @example\n   *\n   * var call_order = [];\n   * async.nextTick(function() {\n   *     call_order.push('two');\n   *     // call_order now equals ['one','two']\n   * });\n   * call_order.push('one');\n   *\n   * async.setImmediate(function (a, b, c) {\n   *     // a, b, and c equal 1, 2, and 3\n   * }, 1, 2, 3);\n   */\n\n\n  var _defer$1;\n\n  if (hasNextTick) {\n    _defer$1 = process.nextTick;\n  } else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n  } else {\n    _defer$1 = fallback;\n  }\n\n  var nextTick = wrap(_defer$1);\n  var parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n    eachfn(tasks, (task, key, taskCb) => {\n      wrapAsync(task)(function (err) {\n        for (var _len30 = arguments.length, result = new Array(_len30 > 1 ? _len30 - 1 : 0), _key30 = 1; _key30 < _len30; _key30++) {\n          result[_key30 - 1] = arguments[_key30];\n        }\n\n        if (result.length < 2) {\n          [result] = result;\n        }\n\n        results[key] = result;\n        taskCb(err);\n      });\n    }, err => callback(err, results));\n  }, 3);\n  /**\n   * Run the `tasks` collection of functions in parallel, without waiting until\n   * the previous function has completed. If any of the functions pass an error to\n   * its callback, the main `callback` is immediately called with the value of the\n   * error. Once the `tasks` have completed, the results are passed to the final\n   * `callback` as an array.\n   *\n   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n   * parallel execution of code.  If your tasks do not use any timers or perform\n   * any I/O, they will actually be executed in series.  Any synchronous setup\n   * sections for each task will happen one after the other.  JavaScript remains\n   * single-threaded.\n   *\n   * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n   * execution of other tasks when a task fails.\n   *\n   * It is also possible to use an object instead of an array. Each property will\n   * be run as a function and the results will be passed to the final `callback`\n   * as an object instead of an array. This can be a more readable way of handling\n   * results from {@link async.parallel}.\n   *\n   * @name parallel\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n   * [async functions]{@link AsyncFunction} to run.\n   * Each async function can complete with any number of optional `result` values.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed successfully. This function gets a results array\n   * (or object) containing all the result arguments passed to the task callbacks.\n   * Invoked with (err, results).\n   * @returns {Promise} a promise, if a callback is not passed\n   *\n   * @example\n   *\n   * //Using Callbacks\n   * async.parallel([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ], function(err, results) {\n   *     console.log(results);\n   *     // results is equal to ['one','two'] even though\n   *     // the second function had a shorter timeout.\n   * });\n   *\n   * // an example using an object instead of an array\n   * async.parallel({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }, function(err, results) {\n   *     console.log(results);\n   *     // results is equal to: { one: 1, two: 2 }\n   * });\n   *\n   * //Using Promises\n   * async.parallel([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ]).then(results => {\n   *     console.log(results);\n   *     // results is equal to ['one','two'] even though\n   *     // the second function had a shorter timeout.\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // an example using an object instead of an array\n   * async.parallel({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }).then(results => {\n   *     console.log(results);\n   *     // results is equal to: { one: 1, two: 2 }\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * //Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.parallel([\n   *             function(callback) {\n   *                 setTimeout(function() {\n   *                     callback(null, 'one');\n   *                 }, 200);\n   *             },\n   *             function(callback) {\n   *                 setTimeout(function() {\n   *                     callback(null, 'two');\n   *                 }, 100);\n   *             }\n   *         ]);\n   *         console.log(results);\n   *         // results is equal to ['one','two'] even though\n   *         // the second function had a shorter timeout.\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // an example using an object instead of an array\n   * async () => {\n   *     try {\n   *         let results = await async.parallel({\n   *             one: function(callback) {\n   *                 setTimeout(function() {\n   *                     callback(null, 1);\n   *                 }, 200);\n   *             },\n   *            two: function(callback) {\n   *                 setTimeout(function() {\n   *                     callback(null, 2);\n   *                 }, 100);\n   *            }\n   *         });\n   *         console.log(results);\n   *         // results is equal to: { one: 1, two: 2 }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n\n  function parallel$1(tasks, callback) {\n    return parallel(eachOf$1, tasks, callback);\n  }\n  /**\n   * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name parallelLimit\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.parallel]{@link module:ControlFlow.parallel}\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n   * [async functions]{@link AsyncFunction} to run.\n   * Each async function can complete with any number of optional `result` values.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed successfully. This function gets a results array\n   * (or object) containing all the result arguments passed to the task callbacks.\n   * Invoked with (err, results).\n   * @returns {Promise} a promise, if a callback is not passed\n   */\n\n\n  function parallelLimit(tasks, limit, callback) {\n    return parallel(eachOfLimit(limit), tasks, callback);\n  }\n  /**\n   * A queue of tasks for the worker function to complete.\n   * @typedef {Iterable} QueueObject\n   * @memberOf module:ControlFlow\n   * @property {Function} length - a function returning the number of items\n   * waiting to be processed. Invoke with `queue.length()`.\n   * @property {boolean} started - a boolean indicating whether or not any\n   * items have been pushed and processed by the queue.\n   * @property {Function} running - a function returning the number of items\n   * currently being processed. Invoke with `queue.running()`.\n   * @property {Function} workersList - a function returning the array of items\n   * currently being processed. Invoke with `queue.workersList()`.\n   * @property {Function} idle - a function returning false if there are items\n   * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n   * @property {number} concurrency - an integer for determining how many `worker`\n   * functions should be run in parallel. This property can be changed after a\n   * `queue` is created to alter the concurrency on-the-fly.\n   * @property {number} payload - an integer that specifies how many items are\n   * passed to the worker function at a time. only applies if this is a\n   * [cargo]{@link module:ControlFlow.cargo} object\n   * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n   * once the `worker` has finished processing the task. Instead of a single task,\n   * a `tasks` array can be submitted. The respective callback is used for every\n   * task in the list. Invoke with `queue.push(task, [callback])`,\n   * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n   * Invoke with `queue.unshift(task, [callback])`.\n   * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n   * a promise that rejects if an error occurs.\n   * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n   * a promise that rejects if an error occurs.\n   * @property {Function} remove - remove items from the queue that match a test\n   * function.  The test function will be passed an object with a `data` property,\n   * and a `priority` property, if this is a\n   * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n   * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n   * `function ({data, priority}) {}` and returns a Boolean.\n   * @property {Function} saturated - a function that sets a callback that is\n   * called when the number of running workers hits the `concurrency` limit, and\n   * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n   * returns a promise for the next occurrence.\n   * @property {Function} unsaturated - a function that sets a callback that is\n   * called when the number of running workers is less than the `concurrency` &\n   * `buffer` limits, and further tasks will not be queued. If the callback is\n   * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n   * @property {number} buffer - A minimum threshold buffer in order to say that\n   * the `queue` is `unsaturated`.\n   * @property {Function} empty - a function that sets a callback that is called\n   * when the last item from the `queue` is given to a `worker`. If the callback\n   * is omitted, `q.empty()` returns a promise for the next occurrence.\n   * @property {Function} drain - a function that sets a callback that is called\n   * when the last item from the `queue` has returned from the `worker`. If the\n   * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n   * @property {Function} error - a function that sets a callback that is called\n   * when a task errors. Has the signature `function(error, task)`. If the\n   * callback is omitted, `error()` returns a promise that rejects on the next\n   * error.\n   * @property {boolean} paused - a boolean for determining whether the queue is\n   * in a paused state.\n   * @property {Function} pause - a function that pauses the processing of tasks\n   * until `resume()` is called. Invoke with `queue.pause()`.\n   * @property {Function} resume - a function that resumes the processing of\n   * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n   * @property {Function} kill - a function that removes the `drain` callback and\n   * empties remaining tasks from the queue forcing it to go idle. No more tasks\n   * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n   *\n   * @example\n   * const q = async.queue(worker, 2)\n   * q.push(item1)\n   * q.push(item2)\n   * q.push(item3)\n   * // queues are iterable, spread into an array to inspect\n   * const items = [...q] // [item1, item2, item3]\n   * // or use for of\n   * for (let item of q) {\n   *     console.log(item)\n   * }\n   *\n   * q.drain(() => {\n   *     console.log('all done')\n   * })\n   * // or\n   * await q.drain()\n   */\n\n  /**\n   * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n   * `queue` are processed in parallel (up to the `concurrency` limit). If all\n   * `worker`s are in progress, the task is queued until one becomes available.\n   * Once a `worker` completes a `task`, that `task`'s callback is called.\n   *\n   * @name queue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\n   * If you want to handle errors from an individual task, pass a callback to\n   * `q.push()`. Invoked with (task, callback).\n   * @param {number} [concurrency=1] - An `integer` for determining how many\n   * `worker` functions should be run in parallel.  If omitted, the concurrency\n   * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n   * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the queue.\n   * @example\n   *\n   * // create a queue object with concurrency 2\n   * var q = async.queue(function(task, callback) {\n   *     console.log('hello ' + task.name);\n   *     callback();\n   * }, 2);\n   *\n   * // assign a callback\n   * q.drain(function() {\n   *     console.log('all items have been processed');\n   * });\n   * // or await the end\n   * await q.drain()\n   *\n   * // assign an error callback\n   * q.error(function(err, task) {\n   *     console.error('task experienced an error');\n   * });\n   *\n   * // add some items to the queue\n   * q.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * // callback is optional\n   * q.push({name: 'bar'});\n   *\n   * // add some items to the queue (batch-wise)\n   * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n   *     console.log('finished processing item');\n   * });\n   *\n   * // add some items to the front of the queue\n   * q.unshift({name: 'bar'}, function (err) {\n   *     console.log('finished processing bar');\n   * });\n   */\n\n\n  function queue$1(worker, concurrency) {\n    var _worker = wrapAsync(worker);\n\n    return queue((items, cb) => {\n      _worker(items[0], cb);\n    }, concurrency, 1);\n  } // Binary min-heap implementation used for priority queue.\n  // Implementation is stable, i.e. push time is considered for equal priorities\n\n\n  class Heap {\n    constructor() {\n      this.heap = [];\n      this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n      return this.heap.length;\n    }\n\n    empty() {\n      this.heap = [];\n      return this;\n    }\n\n    percUp(index) {\n      let p;\n\n      while (index > 0 && smaller(this.heap[index], this.heap[p = parent(index)])) {\n        let t = this.heap[index];\n        this.heap[index] = this.heap[p];\n        this.heap[p] = t;\n        index = p;\n      }\n    }\n\n    percDown(index) {\n      let l;\n\n      while ((l = leftChi(index)) < this.heap.length) {\n        if (l + 1 < this.heap.length && smaller(this.heap[l + 1], this.heap[l])) {\n          l = l + 1;\n        }\n\n        if (smaller(this.heap[index], this.heap[l])) {\n          break;\n        }\n\n        let t = this.heap[index];\n        this.heap[index] = this.heap[l];\n        this.heap[l] = t;\n        index = l;\n      }\n    }\n\n    push(node) {\n      node.pushCount = ++this.pushCount;\n      this.heap.push(node);\n      this.percUp(this.heap.length - 1);\n    }\n\n    unshift(node) {\n      return this.heap.push(node);\n    }\n\n    shift() {\n      let [top] = this.heap;\n      this.heap[0] = this.heap[this.heap.length - 1];\n      this.heap.pop();\n      this.percDown(0);\n      return top;\n    }\n\n    toArray() {\n      return [...this];\n    }\n\n    *[Symbol.iterator]() {\n      for (let i = 0; i < this.heap.length; i++) {\n        yield this.heap[i].data;\n      }\n    }\n\n    remove(testFn) {\n      let j = 0;\n\n      for (let i = 0; i < this.heap.length; i++) {\n        if (!testFn(this.heap[i])) {\n          this.heap[j] = this.heap[i];\n          j++;\n        }\n      }\n\n      this.heap.splice(j);\n\n      for (let i = parent(this.heap.length - 1); i >= 0; i--) {\n        this.percDown(i);\n      }\n\n      return this;\n    }\n\n  }\n\n  function leftChi(i) {\n    return (i << 1) + 1;\n  }\n\n  function parent(i) {\n    return (i + 1 >> 1) - 1;\n  }\n\n  function smaller(x, y) {\n    if (x.priority !== y.priority) {\n      return x.priority < y.priority;\n    } else {\n      return x.pushCount < y.pushCount;\n    }\n  }\n  /**\n   * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n   * completed in ascending priority order.\n   *\n   * @name priorityQueue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\n   * If you want to handle errors from an individual task, pass a callback to\n   * `q.push()`.\n   * Invoked with (task, callback).\n   * @param {number} concurrency - An `integer` for determining how many `worker`\n   * functions should be run in parallel.  If omitted, the concurrency defaults to\n   * `1`.  If the concurrency is `0`, an error is thrown.\n   * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are three\n   * differences between `queue` and `priorityQueue` objects:\n   * * `push(task, priority, [callback])` - `priority` should be a number. If an\n   *   array of `tasks` is given, all tasks will be assigned the same priority.\n   * * `pushAsync(task, priority, [callback])` - the same as `priorityQueue.push`,\n   *   except this returns a promise that rejects if an error occurs.\n   * * The `unshift` and `unshiftAsync` methods were removed.\n   */\n\n\n  function priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n    var {\n      push,\n      pushAsync\n    } = q;\n    q._tasks = new Heap();\n\n    q._createTaskItem = (_ref2, callback) => {\n      let {\n        data,\n        priority\n      } = _ref2;\n      return {\n        data,\n        priority,\n        callback\n      };\n    };\n\n    function createDataItems(tasks, priority) {\n      if (!Array.isArray(tasks)) {\n        return {\n          data: tasks,\n          priority\n        };\n      }\n\n      return tasks.map(data => {\n        return {\n          data,\n          priority\n        };\n      });\n    } // Override push to accept second parameter representing priority\n\n\n    q.push = function (data) {\n      let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let callback = arguments.length > 2 ? arguments[2] : undefined;\n      return push(createDataItems(data, priority), callback);\n    };\n\n    q.pushAsync = function (data) {\n      let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let callback = arguments.length > 2 ? arguments[2] : undefined;\n      return pushAsync(createDataItems(data, priority), callback);\n    }; // Remove unshift functions\n\n\n    delete q.unshift;\n    delete q.unshiftAsync;\n    return q;\n  }\n  /**\n   * Runs the `tasks` array of functions in parallel, without waiting until the\n   * previous function has completed. Once any of the `tasks` complete or pass an\n   * error to its callback, the main `callback` is immediately called. It's\n   * equivalent to `Promise.race()`.\n   *\n   * @name race\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n   * to run. Each function can complete with an optional `result` value.\n   * @param {Function} callback - A callback to run once any of the functions have\n   * completed. This function gets an error or result from the first function that\n   * completed. Invoked with (err, result).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * async.race([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ],\n   * // main callback\n   * function(err, result) {\n   *     // the result will be equal to 'two' as it finishes earlier\n   * });\n   */\n\n\n  function race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n\n    for (var i = 0, l = tasks.length; i < l; i++) {\n      wrapAsync(tasks[i])(callback);\n    }\n  }\n\n  var race$1 = awaitify(race, 2);\n  /**\n   * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n   *\n   * @name reduceRight\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reduce]{@link module:Collections.reduce}\n   * @alias foldr\n   * @category Collection\n   * @param {Array} array - A collection to iterate over.\n   * @param {*} memo - The initial state of the reduction.\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * array to produce the next step in the reduction.\n   * The `iteratee` should complete with the next state of the reduction.\n   * If the iteratee completes with an error, the reduction is stopped and the\n   * main `callback` is immediately called with the error.\n   * Invoked with (memo, item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n\n  function reduceRight(array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n  }\n  /**\n   * Wraps the async function in another function that always completes with a\n   * result object, even when it errors.\n   *\n   * The result object has either the property `error` or `value`.\n   *\n   * @name reflect\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - The async function you want to wrap\n   * @returns {Function} - A function that always passes null to it's callback as\n   * the error. The second argument to the callback will be an `object` with\n   * either an `error` or a `value` property.\n   * @example\n   *\n   * async.parallel([\n   *     async.reflect(function(callback) {\n   *         // do some stuff ...\n   *         callback(null, 'one');\n   *     }),\n   *     async.reflect(function(callback) {\n   *         // do some more stuff but error ...\n   *         callback('bad stuff happened');\n   *     }),\n   *     async.reflect(function(callback) {\n   *         // do some more stuff ...\n   *         callback(null, 'two');\n   *     })\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results[0].value = 'one'\n   *     // results[1].error = 'bad stuff happened'\n   *     // results[2].value = 'two'\n   * });\n   */\n\n\n  function reflect(fn) {\n    var _fn = wrapAsync(fn);\n\n    return initialParams(function reflectOn(args, reflectCallback) {\n      args.push(function (error) {\n        let retVal = {};\n\n        if (error) {\n          retVal.error = error;\n        }\n\n        for (var _len31 = arguments.length, cbArgs = new Array(_len31 > 1 ? _len31 - 1 : 0), _key31 = 1; _key31 < _len31; _key31++) {\n          cbArgs[_key31 - 1] = arguments[_key31];\n        }\n\n        if (cbArgs.length > 0) {\n          var value = cbArgs;\n\n          if (cbArgs.length <= 1) {\n            [value] = cbArgs;\n          }\n\n          retVal.value = value;\n        }\n\n        reflectCallback(null, retVal);\n      });\n      return _fn.apply(this, args);\n    });\n  }\n  /**\n   * A helper function that wraps an array or an object of functions with `reflect`.\n   *\n   * @name reflectAll\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.reflect]{@link module:Utils.reflect}\n   * @category Util\n   * @param {Array|Object|Iterable} tasks - The collection of\n   * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n   * @returns {Array} Returns an array of async functions, each wrapped in\n   * `async.reflect`\n   * @example\n   *\n   * let tasks = [\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         // do some more stuff but error ...\n   *         callback(new Error('bad stuff happened'));\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ];\n   *\n   * async.parallel(async.reflectAll(tasks),\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results[0].value = 'one'\n   *     // results[1].error = Error('bad stuff happened')\n   *     // results[2].value = 'two'\n   * });\n   *\n   * // an example using an object instead of an array\n   * let tasks = {\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         callback('two');\n   *     },\n   *     three: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'three');\n   *         }, 100);\n   *     }\n   * };\n   *\n   * async.parallel(async.reflectAll(tasks),\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results.one.value = 'one'\n   *     // results.two.error = 'two'\n   *     // results.three.value = 'three'\n   * });\n   */\n\n\n  function reflectAll(tasks) {\n    var results;\n\n    if (Array.isArray(tasks)) {\n      results = tasks.map(reflect);\n    } else {\n      results = {};\n      Object.keys(tasks).forEach(key => {\n        results[key] = reflect.call(this, tasks[key]);\n      });\n    }\n\n    return results;\n  }\n\n  function reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n      iteratee(value, (err, v) => {\n        cb(err, !v);\n      });\n    }, callback);\n  }\n  /**\n   * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n   *\n   * @name reject\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   *\n   * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * // Using callbacks\n   * async.reject(fileList, fileExists, function(err, results) {\n   *    // [ 'dir3/file6.txt' ]\n   *    // results now equals an array of the non-existing files\n   * });\n   *\n   * // Using Promises\n   * async.reject(fileList, fileExists)\n   * .then( results => {\n   *     console.log(results);\n   *     // [ 'dir3/file6.txt' ]\n   *     // results now equals an array of the non-existing files\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.reject(fileList, fileExists);\n   *         console.log(results);\n   *         // [ 'dir3/file6.txt' ]\n   *         // results now equals an array of the non-existing files\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n\n\n  function reject$1(coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback);\n  }\n\n  var reject$2 = awaitify(reject$1, 3);\n  /**\n   * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name rejectLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reject]{@link module:Collections.reject}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n\n  function rejectLimit(coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback);\n  }\n\n  var rejectLimit$1 = awaitify(rejectLimit, 4);\n  /**\n   * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n   *\n   * @name rejectSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reject]{@link module:Collections.reject}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n\n  function rejectSeries(coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback);\n  }\n\n  var rejectSeries$1 = awaitify(rejectSeries, 3);\n\n  function constant$1(value) {\n    return function () {\n      return value;\n    };\n  }\n  /**\n   * Attempts to get a successful response from `task` no more than `times` times\n   * before returning an error. If the task is successful, the `callback` will be\n   * passed the result of the successful task. If all attempts fail, the callback\n   * will be passed the error and result (if any) of the final attempt.\n   *\n   * @name retry\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @see [async.retryable]{@link module:ControlFlow.retryable}\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n   * object with `times` and `interval` or a number.\n   * * `times` - The number of attempts to make before giving up.  The default\n   *   is `5`.\n   * * `interval` - The time to wait between retries, in milliseconds.  The\n   *   default is `0`. The interval may also be specified as a function of the\n   *   retry count (see example).\n   * * `errorFilter` - An optional synchronous function that is invoked on\n   *   erroneous result. If it returns `true` the retry attempts will continue;\n   *   if the function returns `false` the retry flow is aborted with the current\n   *   attempt's error and result being returned to the final callback.\n   *   Invoked with (err).\n   * * If `opts` is a number, the number specifies the number of times to retry,\n   *   with the default interval of `0`.\n   * @param {AsyncFunction} task - An async function to retry.\n   * Invoked with (callback).\n   * @param {Function} [callback] - An optional callback which is called when the\n   * task has succeeded, or after the final failed attempt. It receives the `err`\n   * and `result` arguments of the last attempt at completing the `task`. Invoked\n   * with (err, results).\n   * @returns {Promise} a promise if no callback provided\n   *\n   * @example\n   *\n   * // The `retry` function can be used as a stand-alone control flow by passing\n   * // a callback, as shown below:\n   *\n   * // try calling apiMethod 3 times\n   * async.retry(3, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod 3 times, waiting 200 ms between each retry\n   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod 10 times with exponential backoff\n   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n   * async.retry({\n   *   times: 10,\n   *   interval: function(retryCount) {\n   *     return 50 * Math.pow(2, retryCount);\n   *   }\n   * }, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod the default 5 times no delay between each retry\n   * async.retry(apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod only when error condition satisfies, all other\n   * // errors will abort the retry control flow and return to final callback\n   * async.retry({\n   *   errorFilter: function(err) {\n   *     return err.message === 'Temporary error'; // only retry on a specific error\n   *   }\n   * }, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // to retry individual methods that are not as reliable within other\n   * // control flow functions, use the `retryable` wrapper:\n   * async.auto({\n   *     users: api.getUsers.bind(api),\n   *     payments: async.retryable(3, api.getPayments.bind(api))\n   * }, function(err, results) {\n   *     // do something with the results\n   * });\n   *\n   */\n\n\n  const DEFAULT_TIMES = 5;\n  const DEFAULT_INTERVAL = 0;\n\n  function retry(opts, task, callback) {\n    var options = {\n      times: DEFAULT_TIMES,\n      intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n      callback = task || promiseCallback();\n      task = opts;\n    } else {\n      parseTimes(options, opts);\n      callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n      throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n\n    function retryAttempt() {\n      _task(function (err) {\n        if (err === false) return;\n\n        if (err && attempt++ < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) {\n          setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n        } else {\n          for (var _len32 = arguments.length, args = new Array(_len32 > 1 ? _len32 - 1 : 0), _key32 = 1; _key32 < _len32; _key32++) {\n            args[_key32 - 1] = arguments[_key32];\n          }\n\n          callback(err, ...args);\n        }\n      });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL];\n  }\n\n  function parseTimes(acc, t) {\n    if (typeof t === 'object') {\n      acc.times = +t.times || DEFAULT_TIMES;\n      acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);\n      acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n      acc.times = +t || DEFAULT_TIMES;\n    } else {\n      throw new Error(\"Invalid arguments for async.retry\");\n    }\n  }\n  /**\n   * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n   * wraps a task and makes it retryable, rather than immediately calling it\n   * with retries.\n   *\n   * @name retryable\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.retry]{@link module:ControlFlow.retry}\n   * @category Control Flow\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n   * options, exactly the same as from `retry`, except for a `opts.arity` that\n   * is the arity of the `task` function, defaulting to `task.length`\n   * @param {AsyncFunction} task - the asynchronous function to wrap.\n   * This function will be passed any arguments passed to the returned wrapper.\n   * Invoked with (...args, callback).\n   * @returns {AsyncFunction} The wrapped function, which when invoked, will\n   * retry on an error, based on the parameters specified in `opts`.\n   * This function will accept the same parameters as `task`.\n   * @example\n   *\n   * async.auto({\n   *     dep1: async.retryable(3, getFromFlakyService),\n   *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n   *         maybeProcessData(results.dep1, cb);\n   *     })]\n   * }, callback);\n   */\n\n\n  function retryable(opts, task) {\n    if (!task) {\n      task = opts;\n      opts = null;\n    }\n\n    let arity = opts && opts.arity || task.length;\n\n    if (isAsync(task)) {\n      arity += 1;\n    }\n\n    var _task = wrapAsync(task);\n\n    return initialParams((args, callback) => {\n      if (args.length < arity - 1 || callback == null) {\n        args.push(callback);\n        callback = promiseCallback();\n      }\n\n      function taskFn(cb) {\n        _task(...args, cb);\n      }\n\n      if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);\n      return callback[PROMISE_SYMBOL];\n    });\n  }\n  /**\n   * Run the functions in the `tasks` collection in series, each one running once\n   * the previous function has completed. If any functions in the series pass an\n   * error to its callback, no more functions are run, and `callback` is\n   * immediately called with the value of the error. Otherwise, `callback`\n   * receives an array of results when `tasks` have completed.\n   *\n   * It is also possible to use an object instead of an array. Each property will\n   * be run as a function, and the results will be passed to the final `callback`\n   * as an object instead of an array. This can be a more readable way of handling\n   *  results from {@link async.series}.\n   *\n   * **Note** that while many implementations preserve the order of object\n   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n   * explicitly states that\n   *\n   * > The mechanics and order of enumerating the properties is not specified.\n   *\n   * So if you rely on the order in which your series of functions are executed,\n   * and want this to work on all platforms, consider using an array.\n   *\n   * @name series\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n   * [async functions]{@link AsyncFunction} to run in series.\n   * Each function can complete with any number of optional `result` values.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed. This function gets a results array (or object)\n   * containing all the result arguments passed to the `task` callbacks. Invoked\n   * with (err, result).\n   * @return {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * //Using Callbacks\n   * async.series([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             // do some async task\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             // then do another async task\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ], function(err, results) {\n   *     console.log(results);\n   *     // results is equal to ['one','two']\n   * });\n   *\n   * // an example using objects instead of arrays\n   * async.series({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             // do some async task\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             // then do another async task\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }, function(err, results) {\n   *     console.log(results);\n   *     // results is equal to: { one: 1, two: 2 }\n   * });\n   *\n   * //Using Promises\n   * async.series([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ]).then(results => {\n   *     console.log(results);\n   *     // results is equal to ['one','two']\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // an example using an object instead of an array\n   * async.series({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             // do some async task\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             // then do another async task\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }).then(results => {\n   *     console.log(results);\n   *     // results is equal to: { one: 1, two: 2 }\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * //Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.series([\n   *             function(callback) {\n   *                 setTimeout(function() {\n   *                     // do some async task\n   *                     callback(null, 'one');\n   *                 }, 200);\n   *             },\n   *             function(callback) {\n   *                 setTimeout(function() {\n   *                     // then do another async task\n   *                     callback(null, 'two');\n   *                 }, 100);\n   *             }\n   *         ]);\n   *         console.log(results);\n   *         // results is equal to ['one','two']\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // an example using an object instead of an array\n   * async () => {\n   *     try {\n   *         let results = await async.parallel({\n   *             one: function(callback) {\n   *                 setTimeout(function() {\n   *                     // do some async task\n   *                     callback(null, 1);\n   *                 }, 200);\n   *             },\n   *            two: function(callback) {\n   *                 setTimeout(function() {\n   *                     // then do another async task\n   *                     callback(null, 2);\n   *                 }, 100);\n   *            }\n   *         });\n   *         console.log(results);\n   *         // results is equal to: { one: 1, two: 2 }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n\n\n  function series(tasks, callback) {\n    return parallel(eachOfSeries$1, tasks, callback);\n  }\n  /**\n   * Returns `true` if at least one element in the `coll` satisfies an async test.\n   * If any iteratee call returns `true`, the main `callback` is immediately\n   * called.\n   *\n   * @name some\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias any\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in parallel.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * // Using callbacks\n   * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n   *    function(err, result) {\n   *        console.log(result);\n   *        // true\n   *        // result is true since some file in the list exists\n   *    }\n   *);\n   *\n   * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n   *    function(err, result) {\n   *        console.log(result);\n   *        // false\n   *        // result is false since none of the files exists\n   *    }\n   *);\n   *\n   * // Using Promises\n   * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n   * .then( result => {\n   *     console.log(result);\n   *     // true\n   *     // result is true since some file in the list exists\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n   * .then( result => {\n   *     console.log(result);\n   *     // false\n   *     // result is false since none of the files exists\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n   *         console.log(result);\n   *         // true\n   *         // result is true since some file in the list exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * async () => {\n   *     try {\n   *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n   *         console.log(result);\n   *         // false\n   *         // result is false since none of the files exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n\n\n  function some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback);\n  }\n\n  var some$1 = awaitify(some, 3);\n  /**\n   * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name someLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.some]{@link module:Collections.some}\n   * @alias anyLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in parallel.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   */\n\n  function someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback);\n  }\n\n  var someLimit$1 = awaitify(someLimit, 4);\n  /**\n   * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n   *\n   * @name someSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.some]{@link module:Collections.some}\n   * @alias anySeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in series.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   */\n\n  function someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback);\n  }\n\n  var someSeries$1 = awaitify(someSeries, 3);\n  /**\n   * Sorts a list by the results of running each `coll` value through an async\n   * `iteratee`.\n   *\n   * @name sortBy\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a value to use as the sort criteria as\n   * its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} callback - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is the items\n   * from the original `coll` sorted by the values returned by the `iteratee`\n   * calls. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback passed\n   * @example\n   *\n   * // bigfile.txt is a file that is 251100 bytes in size\n   * // mediumfile.txt is a file that is 11000 bytes in size\n   * // smallfile.txt is a file that is 121 bytes in size\n   *\n   * // asynchronous function that returns the file size in bytes\n   * function getFileSizeInBytes(file, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         callback(null, stat.size);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n   *     function(err, results) {\n   *         if (err) {\n   *             console.log(err);\n   *         } else {\n   *             console.log(results);\n   *             // results is now the original array of files sorted by\n   *             // file size (ascending by default), e.g.\n   *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n   *         }\n   *     }\n   * );\n   *\n   * // By modifying the callback parameter the\n   * // sorting order can be influenced:\n   *\n   * // ascending order\n   * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n   *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n   *         if (getFileSizeErr) return callback(getFileSizeErr);\n   *         callback(null, fileSize);\n   *     });\n   * }, function(err, results) {\n   *         if (err) {\n   *             console.log(err);\n   *         } else {\n   *             console.log(results);\n   *             // results is now the original array of files sorted by\n   *             // file size (ascending by default), e.g.\n   *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n   *         }\n   *     }\n   * );\n   *\n   * // descending order\n   * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n   *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n   *         if (getFileSizeErr) {\n   *             return callback(getFileSizeErr);\n   *         }\n   *         callback(null, fileSize * -1);\n   *     });\n   * }, function(err, results) {\n   *         if (err) {\n   *             console.log(err);\n   *         } else {\n   *             console.log(results);\n   *             // results is now the original array of files sorted by\n   *             // file size (ascending by default), e.g.\n   *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n   *         }\n   *     }\n   * );\n   *\n   * // Error handling\n   * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n   *     function(err, results) {\n   *         if (err) {\n   *             console.log(err);\n   *             // [ Error: ENOENT: no such file or directory ]\n   *         } else {\n   *             console.log(results);\n   *         }\n   *     }\n   * );\n   *\n   * // Using Promises\n   * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n   * .then( results => {\n   *     console.log(results);\n   *     // results is now the original array of files sorted by\n   *     // file size (ascending by default), e.g.\n   *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error handling\n   * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n   * .then( results => {\n   *     console.log(results);\n   * }).catch( err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   * });\n   *\n   * // Using async/await\n   * (async () => {\n   *     try {\n   *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n   *         console.log(results);\n   *         // results is now the original array of files sorted by\n   *         // file size (ascending by default), e.g.\n   *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * })();\n   *\n   * // Error handling\n   * async () => {\n   *     try {\n   *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n   *         console.log(results);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     }\n   * }\n   *\n   */\n\n  function sortBy(coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n\n    return map$1(coll, (x, iterCb) => {\n      _iteratee(x, (err, criteria) => {\n        if (err) return iterCb(err);\n        iterCb(err, {\n          value: x,\n          criteria\n        });\n      });\n    }, (err, results) => {\n      if (err) return callback(err);\n      callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n      var a = left.criteria,\n          b = right.criteria;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }\n  }\n\n  var sortBy$1 = awaitify(sortBy, 3);\n  /**\n   * Sets a time limit on an asynchronous function. If the function does not call\n   * its callback within the specified milliseconds, it will be called with a\n   * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n   *\n   * @name timeout\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} asyncFn - The async function to limit in time.\n   * @param {number} milliseconds - The specified time limit.\n   * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n   * to timeout Error for more information..\n   * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n   * of the control flow functions.\n   * Invoke this function with the same parameters as you would `asyncFunc`.\n   * @example\n   *\n   * function myFunction(foo, callback) {\n   *     doAsyncTask(foo, function(err, data) {\n   *         // handle errors\n   *         if (err) return callback(err);\n   *\n   *         // do some stuff ...\n   *\n   *         // return processed data\n   *         return callback(null, data);\n   *     });\n   * }\n   *\n   * var wrapped = async.timeout(myFunction, 1000);\n   *\n   * // call `wrapped` as you would `myFunction`\n   * wrapped({ bar: 'bar' }, function(err, data) {\n   *     // if `myFunction` takes < 1000 ms to execute, `err`\n   *     // and `data` will have their expected values\n   *\n   *     // else `err` will be an Error with the code 'ETIMEDOUT'\n   * });\n   */\n\n  function timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n    return initialParams((args, callback) => {\n      var timedOut = false;\n      var timer;\n\n      function timeoutCallback() {\n        var name = asyncFn.name || 'anonymous';\n        var error = new Error('Callback function \"' + name + '\" timed out.');\n        error.code = 'ETIMEDOUT';\n\n        if (info) {\n          error.info = info;\n        }\n\n        timedOut = true;\n        callback(error);\n      }\n\n      args.push(function () {\n        if (!timedOut) {\n          callback(...arguments);\n          clearTimeout(timer);\n        }\n      }); // setup timer and call original function\n\n      timer = setTimeout(timeoutCallback, milliseconds);\n      fn(...args);\n    });\n  }\n\n  function range(size) {\n    var result = Array(size);\n\n    while (size--) {\n      result[size] = size;\n    }\n\n    return result;\n  }\n  /**\n   * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name timesLimit\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.times]{@link module:ControlFlow.times}\n   * @category Control Flow\n   * @param {number} count - The number of times to run the function.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n   * @returns {Promise} a promise, if no callback is provided\n   */\n\n\n  function timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n  }\n  /**\n   * Calls the `iteratee` function `n` times, and accumulates results in the same\n   * manner you would use with [map]{@link module:Collections.map}.\n   *\n   * @name times\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Control Flow\n   * @param {number} n - The number of times to run the function.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see {@link module:Collections.map}.\n   * @returns {Promise} a promise, if no callback is provided\n   * @example\n   *\n   * // Pretend this is some complicated async factory\n   * var createUser = function(id, callback) {\n   *     callback(null, {\n   *         id: 'user' + id\n   *     });\n   * };\n   *\n   * // generate 5 users\n   * async.times(5, function(n, next) {\n   *     createUser(n, function(err, user) {\n   *         next(err, user);\n   *     });\n   * }, function(err, users) {\n   *     // we should now have 5 users\n   * });\n   */\n\n\n  function times(n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback);\n  }\n  /**\n   * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n   *\n   * @name timesSeries\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.times]{@link module:ControlFlow.times}\n   * @category Control Flow\n   * @param {number} n - The number of times to run the function.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see {@link module:Collections.map}.\n   * @returns {Promise} a promise, if no callback is provided\n   */\n\n\n  function timesSeries(n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback);\n  }\n  /**\n   * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n   * element in parallel, each step potentially mutating an `accumulator` value.\n   * The type of the accumulator defaults to the type of collection passed in.\n   *\n   * @name transform\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n   * it will default to an empty Object or Array, depending on the type of `coll`\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * collection that potentially modifies the accumulator.\n   * Invoked with (accumulator, item, key, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the transformed accumulator.\n   * Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   *\n   * // helper function that returns human-readable size format from bytes\n   * function formatBytes(bytes, decimals = 2) {\n   *   // implementation not included for brevity\n   *   return humanReadbleFilesize;\n   * }\n   *\n   * const fileList = ['file1.txt','file2.txt','file3.txt'];\n   *\n   * // asynchronous function that returns the file size, transformed to human-readable format\n   * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n   * function transformFileSize(acc, value, key, callback) {\n   *     fs.stat(value, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         acc[key] = formatBytes(stat.size);\n   *         callback(null);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.transform(fileList, transformFileSize, function(err, result) {\n   *     if(err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(result);\n   *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.transform(fileList, transformFileSize)\n   * .then(result => {\n   *     console.log(result);\n   *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * (async () => {\n   *     try {\n   *         let result = await async.transform(fileList, transformFileSize);\n   *         console.log(result);\n   *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * })();\n   *\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   *\n   * // helper function that returns human-readable size format from bytes\n   * function formatBytes(bytes, decimals = 2) {\n   *   // implementation not included for brevity\n   *   return humanReadbleFilesize;\n   * }\n   *\n   * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n   *\n   * // asynchronous function that returns the file size, transformed to human-readable format\n   * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n   * function transformFileSize(acc, value, key, callback) {\n   *     fs.stat(value, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         acc[key] = formatBytes(stat.size);\n   *         callback(null);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.transform(fileMap, transformFileSize, function(err, result) {\n   *     if(err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(result);\n   *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.transform(fileMap, transformFileSize)\n   * .then(result => {\n   *     console.log(result);\n   *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.transform(fileMap, transformFileSize);\n   *         console.log(result);\n   *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n\n\n  function transform(coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n      callback = iteratee;\n      iteratee = accumulator;\n      accumulator = Array.isArray(coll) ? [] : {};\n    }\n\n    callback = once(callback || promiseCallback());\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n      _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL];\n  }\n  /**\n   * It runs each task in series but stops whenever any of the functions were\n   * successful. If one of the tasks were successful, the `callback` will be\n   * passed the result of the successful task. If all tasks fail, the callback\n   * will be passed the error and result (if any) of the final attempt.\n   *\n   * @name tryEach\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n   * run, each function is passed a `callback(err, result)` it must call on\n   * completion with an error `err` (which can be `null`) and an optional `result`\n   * value.\n   * @param {Function} [callback] - An optional callback which is called when one\n   * of the tasks has succeeded, or all have failed. It receives the `err` and\n   * `result` arguments of the last attempt at completing the `task`. Invoked with\n   * (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   * async.tryEach([\n   *     function getDataFromFirstWebsite(callback) {\n   *         // Try getting the data from the first website\n   *         callback(err, data);\n   *     },\n   *     function getDataFromSecondWebsite(callback) {\n   *         // First website failed,\n   *         // Try getting the data from the backup website\n   *         callback(err, data);\n   *     }\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     Now do something with the data.\n   * });\n   *\n   */\n\n\n  function tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n      wrapAsync(task)(function (err) {\n        if (err === false) return taskCb(err);\n\n        for (var _len33 = arguments.length, args = new Array(_len33 > 1 ? _len33 - 1 : 0), _key33 = 1; _key33 < _len33; _key33++) {\n          args[_key33 - 1] = arguments[_key33];\n        }\n\n        if (args.length < 2) {\n          [result] = args;\n        } else {\n          result = args;\n        }\n\n        error = err;\n        taskCb(err ? null : {});\n      });\n    }, () => callback(error, result));\n  }\n\n  var tryEach$1 = awaitify(tryEach);\n  /**\n   * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n   * unmemoized form. Handy for testing.\n   *\n   * @name unmemoize\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.memoize]{@link module:Utils.memoize}\n   * @category Util\n   * @param {AsyncFunction} fn - the memoized function\n   * @returns {AsyncFunction} a function that calls the original unmemoized function\n   */\n\n  function unmemoize(fn) {\n    return function () {\n      return (fn.unmemoized || fn)(...arguments);\n    };\n  }\n  /**\n   * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n   * stopped, or an error occurs.\n   *\n   * @name whilst\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\n   * execution of `iteratee`. Invoked with ().\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` passes. Invoked with (callback).\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * var count = 0;\n   * async.whilst(\n   *     function test(cb) { cb(null, count < 5); },\n   *     function iter(callback) {\n   *         count++;\n   *         setTimeout(function() {\n   *             callback(null, count);\n   *         }, 1000);\n   *     },\n   *     function (err, n) {\n   *         // 5 seconds have passed, n = 5\n   *     }\n   * );\n   */\n\n\n  function whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n\n    var _fn = wrapAsync(iteratee);\n\n    var _test = wrapAsync(test);\n\n    var results = [];\n\n    function next(err) {\n      if (err) return callback(err);\n\n      for (var _len34 = arguments.length, rest = new Array(_len34 > 1 ? _len34 - 1 : 0), _key34 = 1; _key34 < _len34; _key34++) {\n        rest[_key34 - 1] = arguments[_key34];\n      }\n\n      results = rest;\n      if (err === false) return;\n\n      _test(check);\n    }\n\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (err === false) return;\n      if (!truth) return callback(null, ...results);\n\n      _fn(next);\n    }\n\n    return _test(check);\n  }\n\n  var whilst$1 = awaitify(whilst, 3);\n  /**\n   * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n   * stopped, or an error occurs. `callback` will be passed an error and any\n   * arguments passed to the final `iteratee`'s callback.\n   *\n   * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n   *\n   * @name until\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\n   * @category Control Flow\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\n   * execution of `iteratee`. Invoked with (callback).\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` fails. Invoked with (callback).\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   * @returns {Promise} a promise, if a callback is not passed\n   *\n   * @example\n   * const results = []\n   * let finished = false\n   * async.until(function test(cb) {\n   *     cb(null, finished)\n   * }, function iter(next) {\n   *     fetchPage(url, (err, body) => {\n   *         if (err) return next(err)\n   *         results = results.concat(body.objects)\n   *         finished = !!body.next\n   *         next(err)\n   *     })\n   * }, function done (err) {\n   *     // all pages have been fetched\n   * })\n   */\n\n  function until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n\n    return whilst$1(cb => _test((err, truth) => cb(err, !truth)), iteratee, callback);\n  }\n  /**\n   * Runs the `tasks` array of functions in series, each passing their results to\n   * the next in the array. However, if any of the `tasks` pass an error to their\n   * own callback, the next function is not executed, and the main `callback` is\n   * immediately called with the error.\n   *\n   * @name waterfall\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n   * to run.\n   * Each function should complete with any number of `result` values.\n   * The `result` values will be passed as arguments, in order, to the next task.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed. This will be passed the results of the last task's\n   * callback. Invoked with (err, [results]).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * async.waterfall([\n   *     function(callback) {\n   *         callback(null, 'one', 'two');\n   *     },\n   *     function(arg1, arg2, callback) {\n   *         // arg1 now equals 'one' and arg2 now equals 'two'\n   *         callback(null, 'three');\n   *     },\n   *     function(arg1, callback) {\n   *         // arg1 now equals 'three'\n   *         callback(null, 'done');\n   *     }\n   * ], function (err, result) {\n   *     // result now equals 'done'\n   * });\n   *\n   * // Or, with named functions:\n   * async.waterfall([\n   *     myFirstFunction,\n   *     mySecondFunction,\n   *     myLastFunction,\n   * ], function (err, result) {\n   *     // result now equals 'done'\n   * });\n   * function myFirstFunction(callback) {\n   *     callback(null, 'one', 'two');\n   * }\n   * function mySecondFunction(arg1, arg2, callback) {\n   *     // arg1 now equals 'one' and arg2 now equals 'two'\n   *     callback(null, 'three');\n   * }\n   * function myLastFunction(arg1, callback) {\n   *     // arg1 now equals 'three'\n   *     callback(null, 'done');\n   * }\n   */\n\n\n  function waterfall(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n      var task = wrapAsync(tasks[taskIndex++]);\n      task(...args, onlyOnce(next));\n    }\n\n    function next(err) {\n      if (err === false) return;\n\n      for (var _len35 = arguments.length, args = new Array(_len35 > 1 ? _len35 - 1 : 0), _key35 = 1; _key35 < _len35; _key35++) {\n        args[_key35 - 1] = arguments[_key35];\n      }\n\n      if (err || taskIndex === tasks.length) {\n        return callback(err, ...args);\n      }\n\n      nextTask(args);\n    }\n\n    nextTask([]);\n  }\n\n  var waterfall$1 = awaitify(waterfall);\n  /**\n   * An \"async function\" in the context of Async is an asynchronous function with\n   * a variable number of parameters, with the final parameter being a callback.\n   * (`function (arg1, arg2, ..., callback) {}`)\n   * The final callback is of the form `callback(err, results...)`, which must be\n   * called once the function is completed.  The callback should be called with a\n   * Error as its first argument to signal that an error occurred.\n   * Otherwise, if no error occurred, it should be called with `null` as the first\n   * argument, and any additional `result` arguments that may apply, to signal\n   * successful completion.\n   * The callback must be called exactly once, ideally on a later tick of the\n   * JavaScript event loop.\n   *\n   * This type of function is also referred to as a \"Node-style async function\",\n   * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n   * library are themselves CPS/Node-style async functions, or functions that\n   * return CPS/Node-style async functions.\n   *\n   * Wherever we accept a Node-style async function, we also directly accept an\n   * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n   * In this case, the `async` function will not be passed a final callback\n   * argument, and any thrown error will be used as the `err` argument of the\n   * implicit callback, and the return value will be used as the `result` value.\n   * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n   * argument, and a `resolved` value becomes the `result`.)\n   *\n   * Note, due to JavaScript limitations, we can only detect native `async`\n   * functions and not transpilied implementations.\n   * Your environment must have `async`/`await` support for this to work.\n   * (e.g. Node > v7.6, or a recent version of a modern browser).\n   * If you are using `async` functions through a transpiler (e.g. Babel), you\n   * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n   * because the `async function` will be compiled to an ordinary function that\n   * returns a promise.\n   *\n   * @typedef {Function} AsyncFunction\n   * @static\n   */\n\n  var index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel: parallel$1,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n  };\n  exports.default = index;\n  exports.apply = apply;\n  exports.applyEach = applyEach$1;\n  exports.applyEachSeries = applyEachSeries;\n  exports.asyncify = asyncify;\n  exports.auto = auto;\n  exports.autoInject = autoInject;\n  exports.cargo = cargo;\n  exports.cargoQueue = cargo$1;\n  exports.compose = compose;\n  exports.concat = concat$1;\n  exports.concatLimit = concatLimit$1;\n  exports.concatSeries = concatSeries$1;\n  exports.constant = constant;\n  exports.detect = detect$1;\n  exports.detectLimit = detectLimit$1;\n  exports.detectSeries = detectSeries$1;\n  exports.dir = dir;\n  exports.doUntil = doUntil;\n  exports.doWhilst = doWhilst$1;\n  exports.each = each;\n  exports.eachLimit = eachLimit$2;\n  exports.eachOf = eachOf$1;\n  exports.eachOfLimit = eachOfLimit$2;\n  exports.eachOfSeries = eachOfSeries$1;\n  exports.eachSeries = eachSeries$1;\n  exports.ensureAsync = ensureAsync;\n  exports.every = every$1;\n  exports.everyLimit = everyLimit$1;\n  exports.everySeries = everySeries$1;\n  exports.filter = filter$1;\n  exports.filterLimit = filterLimit$1;\n  exports.filterSeries = filterSeries$1;\n  exports.forever = forever$1;\n  exports.groupBy = groupBy;\n  exports.groupByLimit = groupByLimit$1;\n  exports.groupBySeries = groupBySeries;\n  exports.log = log;\n  exports.map = map$1;\n  exports.mapLimit = mapLimit$1;\n  exports.mapSeries = mapSeries$1;\n  exports.mapValues = mapValues;\n  exports.mapValuesLimit = mapValuesLimit$1;\n  exports.mapValuesSeries = mapValuesSeries;\n  exports.memoize = memoize;\n  exports.nextTick = nextTick;\n  exports.parallel = parallel$1;\n  exports.parallelLimit = parallelLimit;\n  exports.priorityQueue = priorityQueue;\n  exports.queue = queue$1;\n  exports.race = race$1;\n  exports.reduce = reduce$1;\n  exports.reduceRight = reduceRight;\n  exports.reflect = reflect;\n  exports.reflectAll = reflectAll;\n  exports.reject = reject$2;\n  exports.rejectLimit = rejectLimit$1;\n  exports.rejectSeries = rejectSeries$1;\n  exports.retry = retry;\n  exports.retryable = retryable;\n  exports.seq = seq;\n  exports.series = series;\n  exports.setImmediate = setImmediate$1;\n  exports.some = some$1;\n  exports.someLimit = someLimit$1;\n  exports.someSeries = someSeries$1;\n  exports.sortBy = sortBy$1;\n  exports.timeout = timeout;\n  exports.times = times;\n  exports.timesLimit = timesLimit;\n  exports.timesSeries = timesSeries;\n  exports.transform = transform;\n  exports.tryEach = tryEach$1;\n  exports.unmemoize = unmemoize;\n  exports.until = until;\n  exports.waterfall = waterfall$1;\n  exports.whilst = whilst$1;\n  exports.all = every$1;\n  exports.allLimit = everyLimit$1;\n  exports.allSeries = everySeries$1;\n  exports.any = some$1;\n  exports.anyLimit = someLimit$1;\n  exports.anySeries = someSeries$1;\n  exports.find = detect$1;\n  exports.findLimit = detectLimit$1;\n  exports.findSeries = detectSeries$1;\n  exports.flatMap = concat$1;\n  exports.flatMapLimit = concatLimit$1;\n  exports.flatMapSeries = concatSeries$1;\n  exports.forEach = each;\n  exports.forEachSeries = eachSeries$1;\n  exports.forEachLimit = eachLimit$2;\n  exports.forEachOf = eachOf$1;\n  exports.forEachOfSeries = eachOfSeries$1;\n  exports.forEachOfLimit = eachOfLimit$2;\n  exports.inject = reduce$1;\n  exports.foldl = reduce$1;\n  exports.foldr = reduceRight;\n  exports.select = filter$1;\n  exports.selectLimit = filterLimit$1;\n  exports.selectSeries = filterSeries$1;\n  exports.wrapSync = asyncify;\n  exports.during = whilst$1;\n  exports.doDuring = doWhilst$1;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","async","apply","fn","args","callArgs","initialParams","callback","pop","call","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","process","nextTick","fallback","setTimeout","wrap","defer","_defer","setImmediate$1","asyncify","func","isAsync","promise","handlePromise","result","e","then","value","invokeCallback","err","message","Error","error","Symbol","toStringTag","isAsyncGenerator","isAsyncIterable","obj","asyncIterator","wrapAsync","asyncFn","awaitify","arity","length","awaitable","Promise","resolve","reject","cbArgs","applyEach","eachfn","fns","go","that","cb","concat","_asyncMap","arr","iteratee","results","counter","_iteratee","_","iterCb","index","v","isArrayLike","breakLoop","once","wrapper","callFn","Object","assign","getIterator","coll","iterator","createArrayIterator","i","len","next","key","createES2015Iterator","item","done","createObjectIterator","okeys","keys","createIterator","onlyOnce","asyncEachOfLimit","generator","limit","canceled","awaiting","running","idx","replenish","iterDone","iterateeCallback","catch","handleError","eachOfLimit","RangeError","nextElem","looping","elem","eachOfLimit$1","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf","eachOfImplementation","eachOf$1","map","map$1","applyEach$1","eachOfSeries","eachOfSeries$1","mapSeries","mapSeries$1","applyEachSeries","PROMISE_SYMBOL","promiseCallback","res","rej","auto","tasks","concurrency","numTasks","runningTasks","hasError","listeners","create","readyTasks","readyToCheck","uncheckedDependencies","forEach","task","Array","isArray","enqueueTask","push","dependencies","slice","remainingDependencies","dependencyName","join","addListener","checkForDeadlocks","processQueue","runTask","run","shift","taskName","taskListeners","taskComplete","taskCallback","safeResults","rkey","taskFn","currentTask","getDependents","dependent","indexOf","FN_ARGS","ARROW_FN_ARGS","FN_ARG_SPLIT","FN_ARG","stripComments","string","stripped","endBlockComment","endIndex","parseParams","src","toString","match","replace","split","arg","trim","autoInject","newTasks","params","fnIsAsync","hasNoDeps","newTask","taskCb","newArgs","name","DLL","constructor","head","tail","removeLink","node","prev","empty","insertAfter","newNode","insertBefore","unshift","setInitial","toArray","cur","data","remove","testFn","curr","dll","queue","worker","payload","_worker","numRunning","workersList","events","drain","saturated","unsaturated","on","event","handler","handleAndRemove","off","ev","filter","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","q","started","_createTaskItem","_tasks","_createCB","l","splice","buffer","idle","_maybeDrain","eventMethod","isProcessing","paused","datum","pushAsync","kill","unshiftAsync","Math","min","pause","resume","defineProperties","writable","cargo","cargo$1","reduce","memo","x","reduce$1","seq","functions","_functions","newargs","nextargs","compose","reverse","mapLimit","mapLimit$1","concatLimit","val","mapResults","concatLimit$1","concat$1","concatSeries","concatSeries$1","constant","ignoredArgs","_createTester","check","getResult","testPassed","testResult","detect","bool","detect$1","detectLimit","detectLimit$1","detectSeries","detectSeries$1","consoleFunc","console","resultArgs","dir","doWhilst","test","_fn","_test","truth","doWhilst$1","doUntil","_withoutIndex","eachLimit","each","eachLimit$1","eachLimit$2","eachSeries","eachSeries$1","ensureAsync","sync","innerArgs","every","every$1","everyLimit","everyLimit$1","everySeries","everySeries$1","filterArray","truthValues","filterGeneric","sort","a","b","_filter","filter$1","filterLimit","filterLimit$1","filterSeries","filterSeries$1","forever","errback","forever$1","groupByLimit","hasOwnProperty","prototype","groupByLimit$1","groupBy","groupBySeries","log","mapValuesLimit","newObj","mapValuesLimit$1","mapValues","mapValuesSeries","memoize","hasher","queues","memoized","unmemoized","_defer$1","parallel","parallel$1","parallelLimit","queue$1","items","Heap","heap","pushCount","Number","MIN_SAFE_INTEGER","percUp","p","smaller","parent","t","percDown","leftChi","top","j","y","priority","priorityQueue","createDataItems","race","TypeError","race$1","reduceRight","array","reversed","reflect","reflectOn","reflectCallback","retVal","reflectAll","reject$1","reject$2","rejectLimit","rejectLimit$1","rejectSeries","rejectSeries$1","constant$1","DEFAULT_TIMES","DEFAULT_INTERVAL","retry","opts","options","times","intervalFunc","arguments","parseTimes","_task","attempt","retryAttempt","errorFilter","acc","interval","retryable","series","some","Boolean","some$1","someLimit","someLimit$1","someSeries","someSeries$1","sortBy","criteria","comparator","left","right","sortBy$1","timeout","milliseconds","info","timedOut","timer","timeoutCallback","code","clearTimeout","range","size","timesLimit","count","n","timesSeries","transform","accumulator","k","tryEach","tryEach$1","unmemoize","whilst","rest","whilst$1","until","waterfall","taskIndex","nextTask","waterfall$1","cargoQueue","all","allLimit","allSeries","any","anyLimit","anySeries","find","findLimit","findSeries","flatMap","flatMapLimit","flatMapSeries","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","during","doDuring","default","defineProperty"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/async/dist/async.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.async = {})));\n}(this, (function (exports) { 'use strict';\n\n    /**\n     * Creates a continuation function with some arguments already applied.\n     *\n     * Useful as a shorthand when combined with other control flow functions. Any\n     * arguments passed to the returned function are added to the arguments\n     * originally passed to apply.\n     *\n     * @name apply\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {Function} fn - The function you want to eventually apply all\n     * arguments to. Invokes with (arguments...).\n     * @param {...*} arguments... - Any number of arguments to automatically apply\n     * when the continuation is called.\n     * @returns {Function} the partially-applied function\n     * @example\n     *\n     * // using apply\n     * async.parallel([\n     *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n     *     async.apply(fs.writeFile, 'testfile2', 'test2')\n     * ]);\n     *\n     *\n     * // the same process without using apply\n     * async.parallel([\n     *     function(callback) {\n     *         fs.writeFile('testfile1', 'test1', callback);\n     *     },\n     *     function(callback) {\n     *         fs.writeFile('testfile2', 'test2', callback);\n     *     }\n     * ]);\n     *\n     * // It's possible to pass any number of additional arguments when calling the\n     * // continuation:\n     *\n     * node> var fn = async.apply(sys.puts, 'one');\n     * node> fn('two', 'three');\n     * one\n     * two\n     * three\n     */\n    function apply(fn, ...args) {\n        return (...callArgs) => fn(...args,...callArgs);\n    }\n\n    function initialParams (fn) {\n        return function (...args/*, callback*/) {\n            var callback = args.pop();\n            return fn.call(this, args, callback);\n        };\n    }\n\n    /* istanbul ignore file */\n\n    var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\n    var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n    var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\n    function fallback(fn) {\n        setTimeout(fn, 0);\n    }\n\n    function wrap(defer) {\n        return (fn, ...args) => defer(() => fn(...args));\n    }\n\n    var _defer;\n\n    if (hasQueueMicrotask) {\n        _defer = queueMicrotask;\n    } else if (hasSetImmediate) {\n        _defer = setImmediate;\n    } else if (hasNextTick) {\n        _defer = process.nextTick;\n    } else {\n        _defer = fallback;\n    }\n\n    var setImmediate$1 = wrap(_defer);\n\n    /**\n     * Take a sync function and make it async, passing its return value to a\n     * callback. This is useful for plugging sync functions into a waterfall,\n     * series, or other async functions. Any arguments passed to the generated\n     * function will be passed to the wrapped function (except for the final\n     * callback argument). Errors thrown will be passed to the callback.\n     *\n     * If the function passed to `asyncify` returns a Promise, that promises's\n     * resolved/rejected state will be used to call the callback, rather than simply\n     * the synchronous return value.\n     *\n     * This also means you can asyncify ES2017 `async` functions.\n     *\n     * @name asyncify\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @alias wrapSync\n     * @category Util\n     * @param {Function} func - The synchronous function, or Promise-returning\n     * function to convert to an {@link AsyncFunction}.\n     * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n     * invoked with `(args..., callback)`.\n     * @example\n     *\n     * // passing a regular synchronous function\n     * async.waterfall([\n     *     async.apply(fs.readFile, filename, \"utf8\"),\n     *     async.asyncify(JSON.parse),\n     *     function (data, next) {\n     *         // data is the result of parsing the text.\n     *         // If there was a parsing error, it would have been caught.\n     *     }\n     * ], callback);\n     *\n     * // passing a function returning a promise\n     * async.waterfall([\n     *     async.apply(fs.readFile, filename, \"utf8\"),\n     *     async.asyncify(function (contents) {\n     *         return db.model.create(contents);\n     *     }),\n     *     function (model, next) {\n     *         // `model` is the instantiated model object.\n     *         // If there was an error, this function would be skipped.\n     *     }\n     * ], callback);\n     *\n     * // es2017 example, though `asyncify` is not needed if your JS environment\n     * // supports async functions out of the box\n     * var q = async.queue(async.asyncify(async function(file) {\n     *     var intermediateStep = await processFile(file);\n     *     return await somePromise(intermediateStep)\n     * }));\n     *\n     * q.push(files);\n     */\n    function asyncify(func) {\n        if (isAsync(func)) {\n            return function (...args/*, callback*/) {\n                const callback = args.pop();\n                const promise = func.apply(this, args);\n                return handlePromise(promise, callback)\n            }\n        }\n\n        return initialParams(function (args, callback) {\n            var result;\n            try {\n                result = func.apply(this, args);\n            } catch (e) {\n                return callback(e);\n            }\n            // if result is Promise object\n            if (result && typeof result.then === 'function') {\n                return handlePromise(result, callback)\n            } else {\n                callback(null, result);\n            }\n        });\n    }\n\n    function handlePromise(promise, callback) {\n        return promise.then(value => {\n            invokeCallback(callback, null, value);\n        }, err => {\n            invokeCallback(callback, err && err.message ? err : new Error(err));\n        });\n    }\n\n    function invokeCallback(callback, error, value) {\n        try {\n            callback(error, value);\n        } catch (err) {\n            setImmediate$1(e => { throw e }, err);\n        }\n    }\n\n    function isAsync(fn) {\n        return fn[Symbol.toStringTag] === 'AsyncFunction';\n    }\n\n    function isAsyncGenerator(fn) {\n        return fn[Symbol.toStringTag] === 'AsyncGenerator';\n    }\n\n    function isAsyncIterable(obj) {\n        return typeof obj[Symbol.asyncIterator] === 'function';\n    }\n\n    function wrapAsync(asyncFn) {\n        if (typeof asyncFn !== 'function') throw new Error('expected a function')\n        return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n    }\n\n    // conditionally promisify a function.\n    // only return a promise if a callback is omitted\n    function awaitify (asyncFn, arity = asyncFn.length) {\n        if (!arity) throw new Error('arity is undefined')\n        function awaitable (...args) {\n            if (typeof args[arity - 1] === 'function') {\n                return asyncFn.apply(this, args)\n            }\n\n            return new Promise((resolve, reject) => {\n                args[arity - 1] = (err, ...cbArgs) => {\n                    if (err) return reject(err)\n                    resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n                };\n                asyncFn.apply(this, args);\n            })\n        }\n\n        return awaitable\n    }\n\n    function applyEach (eachfn) {\n        return function applyEach(fns, ...callArgs) {\n            const go = awaitify(function (callback) {\n                var that = this;\n                return eachfn(fns, (fn, cb) => {\n                    wrapAsync(fn).apply(that, callArgs.concat(cb));\n                }, callback);\n            });\n            return go;\n        };\n    }\n\n    function _asyncMap(eachfn, arr, iteratee, callback) {\n        arr = arr || [];\n        var results = [];\n        var counter = 0;\n        var _iteratee = wrapAsync(iteratee);\n\n        return eachfn(arr, (value, _, iterCb) => {\n            var index = counter++;\n            _iteratee(value, (err, v) => {\n                results[index] = v;\n                iterCb(err);\n            });\n        }, err => {\n            callback(err, results);\n        });\n    }\n\n    function isArrayLike(value) {\n        return value &&\n            typeof value.length === 'number' &&\n            value.length >= 0 &&\n            value.length % 1 === 0;\n    }\n\n    // A temporary value used to identify if the loop should be broken.\n    // See #1064, #1293\n    const breakLoop = {};\n\n    function once(fn) {\n        function wrapper (...args) {\n            if (fn === null) return;\n            var callFn = fn;\n            fn = null;\n            callFn.apply(this, args);\n        }\n        Object.assign(wrapper, fn);\n        return wrapper\n    }\n\n    function getIterator (coll) {\n        return coll[Symbol.iterator] && coll[Symbol.iterator]();\n    }\n\n    function createArrayIterator(coll) {\n        var i = -1;\n        var len = coll.length;\n        return function next() {\n            return ++i < len ? {value: coll[i], key: i} : null;\n        }\n    }\n\n    function createES2015Iterator(iterator) {\n        var i = -1;\n        return function next() {\n            var item = iterator.next();\n            if (item.done)\n                return null;\n            i++;\n            return {value: item.value, key: i};\n        }\n    }\n\n    function createObjectIterator(obj) {\n        var okeys = obj ? Object.keys(obj) : [];\n        var i = -1;\n        var len = okeys.length;\n        return function next() {\n            var key = okeys[++i];\n            if (key === '__proto__') {\n                return next();\n            }\n            return i < len ? {value: obj[key], key} : null;\n        };\n    }\n\n    function createIterator(coll) {\n        if (isArrayLike(coll)) {\n            return createArrayIterator(coll);\n        }\n\n        var iterator = getIterator(coll);\n        return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n    }\n\n    function onlyOnce(fn) {\n        return function (...args) {\n            if (fn === null) throw new Error(\"Callback was already called.\");\n            var callFn = fn;\n            fn = null;\n            callFn.apply(this, args);\n        };\n    }\n\n    // for async generators\n    function asyncEachOfLimit(generator, limit, iteratee, callback) {\n        let done = false;\n        let canceled = false;\n        let awaiting = false;\n        let running = 0;\n        let idx = 0;\n\n        function replenish() {\n            //console.log('replenish')\n            if (running >= limit || awaiting || done) return\n            //console.log('replenish awaiting')\n            awaiting = true;\n            generator.next().then(({value, done: iterDone}) => {\n                //console.log('got value', value)\n                if (canceled || done) return\n                awaiting = false;\n                if (iterDone) {\n                    done = true;\n                    if (running <= 0) {\n                        //console.log('done nextCb')\n                        callback(null);\n                    }\n                    return;\n                }\n                running++;\n                iteratee(value, idx, iterateeCallback);\n                idx++;\n                replenish();\n            }).catch(handleError);\n        }\n\n        function iterateeCallback(err, result) {\n            //console.log('iterateeCallback')\n            running -= 1;\n            if (canceled) return\n            if (err) return handleError(err)\n\n            if (err === false) {\n                done = true;\n                canceled = true;\n                return\n            }\n\n            if (result === breakLoop || (done && running <= 0)) {\n                done = true;\n                //console.log('done iterCb')\n                return callback(null);\n            }\n            replenish();\n        }\n\n        function handleError(err) {\n            if (canceled) return\n            awaiting = false;\n            done = true;\n            callback(err);\n        }\n\n        replenish();\n    }\n\n    var eachOfLimit = (limit) => {\n        return (obj, iteratee, callback) => {\n            callback = once(callback);\n            if (limit <= 0) {\n                throw new RangeError('concurrency limit cannot be less than 1')\n            }\n            if (!obj) {\n                return callback(null);\n            }\n            if (isAsyncGenerator(obj)) {\n                return asyncEachOfLimit(obj, limit, iteratee, callback)\n            }\n            if (isAsyncIterable(obj)) {\n                return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n            }\n            var nextElem = createIterator(obj);\n            var done = false;\n            var canceled = false;\n            var running = 0;\n            var looping = false;\n\n            function iterateeCallback(err, value) {\n                if (canceled) return\n                running -= 1;\n                if (err) {\n                    done = true;\n                    callback(err);\n                }\n                else if (err === false) {\n                    done = true;\n                    canceled = true;\n                }\n                else if (value === breakLoop || (done && running <= 0)) {\n                    done = true;\n                    return callback(null);\n                }\n                else if (!looping) {\n                    replenish();\n                }\n            }\n\n            function replenish () {\n                looping = true;\n                while (running < limit && !done) {\n                    var elem = nextElem();\n                    if (elem === null) {\n                        done = true;\n                        if (running <= 0) {\n                            callback(null);\n                        }\n                        return;\n                    }\n                    running += 1;\n                    iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n                }\n                looping = false;\n            }\n\n            replenish();\n        };\n    };\n\n    /**\n     * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name eachOfLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.eachOf]{@link module:Collections.eachOf}\n     * @alias forEachOfLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each\n     * item in `coll`. The `key` is the item's key, or index in the case of an\n     * array.\n     * Invoked with (item, key, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachOfLimit$1(coll, limit, iteratee, callback) {\n        return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n    }\n\n    var eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n    // eachOf implementation optimized for array-likes\n    function eachOfArrayLike(coll, iteratee, callback) {\n        callback = once(callback);\n        var index = 0,\n            completed = 0,\n            {length} = coll,\n            canceled = false;\n        if (length === 0) {\n            callback(null);\n        }\n\n        function iteratorCallback(err, value) {\n            if (err === false) {\n                canceled = true;\n            }\n            if (canceled === true) return\n            if (err) {\n                callback(err);\n            } else if ((++completed === length) || value === breakLoop) {\n                callback(null);\n            }\n        }\n\n        for (; index < length; index++) {\n            iteratee(coll[index], index, onlyOnce(iteratorCallback));\n        }\n    }\n\n    // a generic version of eachOf which can handle array, object, and iterator cases.\n    function eachOfGeneric (coll, iteratee, callback) {\n        return eachOfLimit$2(coll, Infinity, iteratee, callback);\n    }\n\n    /**\n     * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n     * to the iteratee.\n     *\n     * @name eachOf\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias forEachOf\n     * @category Collection\n     * @see [async.each]{@link module:Collections.each}\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each\n     * item in `coll`.\n     * The `key` is the item's key, or index in the case of an array.\n     * Invoked with (item, key, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * // dev.json is a file containing a valid json object config for dev environment\n     * // dev.json is a file containing a valid json object config for test environment\n     * // prod.json is a file containing a valid json object config for prod environment\n     * // invalid.json is a file with a malformed json object\n     *\n     * let configs = {}; //global variable\n     * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n     * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n     *\n     * // asynchronous function that reads a json file and parses the contents as json object\n     * function parseFile(file, key, callback) {\n     *     fs.readFile(file, \"utf8\", function(err, data) {\n     *         if (err) return calback(err);\n     *         try {\n     *             configs[key] = JSON.parse(data);\n     *         } catch (e) {\n     *             return callback(e);\n     *         }\n     *         callback();\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n     *     if (err) {\n     *         console.error(err);\n     *     } else {\n     *         console.log(configs);\n     *         // configs is now a map of JSON data, e.g.\n     *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n     *     }\n     * });\n     *\n     * //Error handing\n     * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n     *     if (err) {\n     *         console.error(err);\n     *         // JSON parse error exception\n     *     } else {\n     *         console.log(configs);\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.forEachOf(validConfigFileMap, parseFile)\n     * .then( () => {\n     *     console.log(configs);\n     *     // configs is now a map of JSON data, e.g.\n     *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n     * }).catch( err => {\n     *     console.error(err);\n     * });\n     *\n     * //Error handing\n     * async.forEachOf(invalidConfigFileMap, parseFile)\n     * .then( () => {\n     *     console.log(configs);\n     * }).catch( err => {\n     *     console.error(err);\n     *     // JSON parse error exception\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n     *         console.log(configs);\n     *         // configs is now a map of JSON data, e.g.\n     *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * //Error handing\n     * async () => {\n     *     try {\n     *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n     *         console.log(configs);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // JSON parse error exception\n     *     }\n     * }\n     *\n     */\n    function eachOf(coll, iteratee, callback) {\n        var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n        return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n    }\n\n    var eachOf$1 = awaitify(eachOf, 3);\n\n    /**\n     * Produces a new collection of values by mapping each value in `coll` through\n     * the `iteratee` function. The `iteratee` is called with an item from `coll`\n     * and a callback for when it has finished processing. Each of these callbacks\n     * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n     * `iteratee` passes an error to its callback, the main `callback` (for the\n     * `map` function) is immediately called with the error.\n     *\n     * Note, that since this function applies the `iteratee` to each item in\n     * parallel, there is no guarantee that the `iteratee` functions will complete\n     * in order. However, the results array will be in the same order as the\n     * original `coll`.\n     *\n     * If `map` is passed an Object, the results will be an Array.  The results\n     * will roughly be in the order of the original Objects' keys (but this can\n     * vary across JavaScript engines).\n     *\n     * @name map\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with the transformed item.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Results is an Array of the\n     * transformed items from the `coll`. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     * // file4.txt does not exist\n     *\n     * const fileList = ['file1.txt','file2.txt','file3.txt'];\n     * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n     *\n     * // asynchronous function that returns the file size in bytes\n     * function getFileSizeInBytes(file, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         callback(null, stat.size);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.map(fileList, getFileSizeInBytes, function(err, results) {\n     *     if (err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(results);\n     *         // results is now an array of the file size in bytes for each file, e.g.\n     *         // [ 1000, 2000, 3000]\n     *     }\n     * });\n     *\n     * // Error Handling\n     * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n     *     if (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     } else {\n     *         console.log(results);\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.map(fileList, getFileSizeInBytes)\n     * .then( results => {\n     *     console.log(results);\n     *     // results is now an array of the file size in bytes for each file, e.g.\n     *     // [ 1000, 2000, 3000]\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.map(withMissingFileList, getFileSizeInBytes)\n     * .then( results => {\n     *     console.log(results);\n     * }).catch( err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.map(fileList, getFileSizeInBytes);\n     *         console.log(results);\n     *         // results is now an array of the file size in bytes for each file, e.g.\n     *         // [ 1000, 2000, 3000]\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n     *         console.log(results);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     }\n     * }\n     *\n     */\n    function map (coll, iteratee, callback) {\n        return _asyncMap(eachOf$1, coll, iteratee, callback)\n    }\n    var map$1 = awaitify(map, 3);\n\n    /**\n     * Applies the provided arguments to each function in the array, calling\n     * `callback` after all functions have completed. If you only provide the first\n     * argument, `fns`, then it will return a function which lets you pass in the\n     * arguments as if it were a single function call. If more arguments are\n     * provided, `callback` is required while `args` is still optional. The results\n     * for each of the applied async functions are passed to the final callback\n     * as an array.\n     *\n     * @name applyEach\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n     * to all call with the same arguments\n     * @param {...*} [args] - any number of separate arguments to pass to the\n     * function.\n     * @param {Function} [callback] - the final argument should be the callback,\n     * called when all functions have completed processing.\n     * @returns {AsyncFunction} - Returns a function that takes no args other than\n     * an optional callback, that is the result of applying the `args` to each\n     * of the functions.\n     * @example\n     *\n     * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n     *\n     * appliedFn((err, results) => {\n     *     // results[0] is the results for `enableSearch`\n     *     // results[1] is the results for `updateSchema`\n     * });\n     *\n     * // partial application example:\n     * async.each(\n     *     buckets,\n     *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n     *     callback\n     * );\n     */\n    var applyEach$1 = applyEach(map$1);\n\n    /**\n     * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n     *\n     * @name eachOfSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.eachOf]{@link module:Collections.eachOf}\n     * @alias forEachOfSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * Invoked with (item, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachOfSeries(coll, iteratee, callback) {\n        return eachOfLimit$2(coll, 1, iteratee, callback)\n    }\n    var eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n    /**\n     * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n     *\n     * @name mapSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.map]{@link module:Collections.map}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with the transformed item.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Results is an array of the\n     * transformed items from the `coll`. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapSeries (coll, iteratee, callback) {\n        return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var mapSeries$1 = awaitify(mapSeries, 3);\n\n    /**\n     * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n     *\n     * @name applyEachSeries\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n     * call with the same arguments\n     * @param {...*} [args] - any number of separate arguments to pass to the\n     * function.\n     * @param {Function} [callback] - the final argument should be the callback,\n     * called when all functions have completed processing.\n     * @returns {AsyncFunction} - A function, that when called, is the result of\n     * appling the `args` to the list of functions.  It takes no args, other than\n     * a callback.\n     */\n    var applyEachSeries = applyEach(mapSeries$1);\n\n    const PROMISE_SYMBOL = Symbol('promiseCallback');\n\n    function promiseCallback () {\n        let resolve, reject;\n        function callback (err, ...args) {\n            if (err) return reject(err)\n            resolve(args.length > 1 ? args : args[0]);\n        }\n\n        callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n            resolve = res,\n            reject = rej;\n        });\n\n        return callback\n    }\n\n    /**\n     * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n     * their requirements. Each function can optionally depend on other functions\n     * being completed first, and each function is run as soon as its requirements\n     * are satisfied.\n     *\n     * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n     * will stop. Further tasks will not execute (so any other functions depending\n     * on it will not run), and the main `callback` is immediately called with the\n     * error.\n     *\n     * {@link AsyncFunction}s also receive an object containing the results of functions which\n     * have completed so far as the first argument, if they have dependencies. If a\n     * task function has no dependencies, it will only be passed a callback.\n     *\n     * @name auto\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Object} tasks - An object. Each of its properties is either a\n     * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n     * in the array. The object's key of a property serves as the name of the task\n     * defined by that property, i.e. can be used when specifying requirements for\n     * other tasks. The function receives one or two arguments:\n     * * a `results` object, containing the results of the previously executed\n     *   functions, only passed if the task has any dependencies,\n     * * a `callback(err, result)` function, which must be called when finished,\n     *   passing an `error` (which can be `null`) and the result of the function's\n     *   execution.\n     * @param {number} [concurrency=Infinity] - An optional `integer` for\n     * determining the maximum number of tasks that can be run in parallel. By\n     * default, as many as possible.\n     * @param {Function} [callback] - An optional callback which is called when all\n     * the tasks have been completed. It receives the `err` argument if any `tasks`\n     * pass an error to their callback. Results are always returned; however, if an\n     * error occurs, no further `tasks` will be performed, and the results object\n     * will only contain partial results. Invoked with (err, results).\n     * @returns {Promise} a promise, if a callback is not passed\n     * @example\n     *\n     * //Using Callbacks\n     * async.auto({\n     *     get_data: function(callback) {\n     *         // async code to get some data\n     *         callback(null, 'data', 'converted to array');\n     *     },\n     *     make_folder: function(callback) {\n     *         // async code to create a directory to store a file in\n     *         // this is run at the same time as getting the data\n     *         callback(null, 'folder');\n     *     },\n     *     write_file: ['get_data', 'make_folder', function(results, callback) {\n     *         // once there is some data and the directory exists,\n     *         // write the data to a file in the directory\n     *         callback(null, 'filename');\n     *     }],\n     *     email_link: ['write_file', function(results, callback) {\n     *         // once the file is written let's email a link to it...\n     *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n     *     }]\n     * }, function(err, results) {\n     *     if (err) {\n     *         console.log('err = ', err);\n     *     }\n     *     console.log('results = ', results);\n     *     // results = {\n     *     //     get_data: ['data', 'converted to array']\n     *     //     make_folder; 'folder',\n     *     //     write_file: 'filename'\n     *     //     email_link: { file: 'filename', email: 'user@example.com' }\n     *     // }\n     * });\n     *\n     * //Using Promises\n     * async.auto({\n     *     get_data: function(callback) {\n     *         console.log('in get_data');\n     *         // async code to get some data\n     *         callback(null, 'data', 'converted to array');\n     *     },\n     *     make_folder: function(callback) {\n     *         console.log('in make_folder');\n     *         // async code to create a directory to store a file in\n     *         // this is run at the same time as getting the data\n     *         callback(null, 'folder');\n     *     },\n     *     write_file: ['get_data', 'make_folder', function(results, callback) {\n     *         // once there is some data and the directory exists,\n     *         // write the data to a file in the directory\n     *         callback(null, 'filename');\n     *     }],\n     *     email_link: ['write_file', function(results, callback) {\n     *         // once the file is written let's email a link to it...\n     *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n     *     }]\n     * }).then(results => {\n     *     console.log('results = ', results);\n     *     // results = {\n     *     //     get_data: ['data', 'converted to array']\n     *     //     make_folder; 'folder',\n     *     //     write_file: 'filename'\n     *     //     email_link: { file: 'filename', email: 'user@example.com' }\n     *     // }\n     * }).catch(err => {\n     *     console.log('err = ', err);\n     * });\n     *\n     * //Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.auto({\n     *             get_data: function(callback) {\n     *                 // async code to get some data\n     *                 callback(null, 'data', 'converted to array');\n     *             },\n     *             make_folder: function(callback) {\n     *                 // async code to create a directory to store a file in\n     *                 // this is run at the same time as getting the data\n     *                 callback(null, 'folder');\n     *             },\n     *             write_file: ['get_data', 'make_folder', function(results, callback) {\n     *                 // once there is some data and the directory exists,\n     *                 // write the data to a file in the directory\n     *                 callback(null, 'filename');\n     *             }],\n     *             email_link: ['write_file', function(results, callback) {\n     *                 // once the file is written let's email a link to it...\n     *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n     *             }]\n     *         });\n     *         console.log('results = ', results);\n     *         // results = {\n     *         //     get_data: ['data', 'converted to array']\n     *         //     make_folder; 'folder',\n     *         //     write_file: 'filename'\n     *         //     email_link: { file: 'filename', email: 'user@example.com' }\n     *         // }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function auto(tasks, concurrency, callback) {\n        if (typeof concurrency !== 'number') {\n            // concurrency is optional, shift the args.\n            callback = concurrency;\n            concurrency = null;\n        }\n        callback = once(callback || promiseCallback());\n        var numTasks = Object.keys(tasks).length;\n        if (!numTasks) {\n            return callback(null);\n        }\n        if (!concurrency) {\n            concurrency = numTasks;\n        }\n\n        var results = {};\n        var runningTasks = 0;\n        var canceled = false;\n        var hasError = false;\n\n        var listeners = Object.create(null);\n\n        var readyTasks = [];\n\n        // for cycle detection:\n        var readyToCheck = []; // tasks that have been identified as reachable\n        // without the possibility of returning to an ancestor task\n        var uncheckedDependencies = {};\n\n        Object.keys(tasks).forEach(key => {\n            var task = tasks[key];\n            if (!Array.isArray(task)) {\n                // no dependencies\n                enqueueTask(key, [task]);\n                readyToCheck.push(key);\n                return;\n            }\n\n            var dependencies = task.slice(0, task.length - 1);\n            var remainingDependencies = dependencies.length;\n            if (remainingDependencies === 0) {\n                enqueueTask(key, task);\n                readyToCheck.push(key);\n                return;\n            }\n            uncheckedDependencies[key] = remainingDependencies;\n\n            dependencies.forEach(dependencyName => {\n                if (!tasks[dependencyName]) {\n                    throw new Error('async.auto task `' + key +\n                        '` has a non-existent dependency `' +\n                        dependencyName + '` in ' +\n                        dependencies.join(', '));\n                }\n                addListener(dependencyName, () => {\n                    remainingDependencies--;\n                    if (remainingDependencies === 0) {\n                        enqueueTask(key, task);\n                    }\n                });\n            });\n        });\n\n        checkForDeadlocks();\n        processQueue();\n\n        function enqueueTask(key, task) {\n            readyTasks.push(() => runTask(key, task));\n        }\n\n        function processQueue() {\n            if (canceled) return\n            if (readyTasks.length === 0 && runningTasks === 0) {\n                return callback(null, results);\n            }\n            while(readyTasks.length && runningTasks < concurrency) {\n                var run = readyTasks.shift();\n                run();\n            }\n\n        }\n\n        function addListener(taskName, fn) {\n            var taskListeners = listeners[taskName];\n            if (!taskListeners) {\n                taskListeners = listeners[taskName] = [];\n            }\n\n            taskListeners.push(fn);\n        }\n\n        function taskComplete(taskName) {\n            var taskListeners = listeners[taskName] || [];\n            taskListeners.forEach(fn => fn());\n            processQueue();\n        }\n\n\n        function runTask(key, task) {\n            if (hasError) return;\n\n            var taskCallback = onlyOnce((err, ...result) => {\n                runningTasks--;\n                if (err === false) {\n                    canceled = true;\n                    return\n                }\n                if (result.length < 2) {\n                    [result] = result;\n                }\n                if (err) {\n                    var safeResults = {};\n                    Object.keys(results).forEach(rkey => {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[key] = result;\n                    hasError = true;\n                    listeners = Object.create(null);\n                    if (canceled) return\n                    callback(err, safeResults);\n                } else {\n                    results[key] = result;\n                    taskComplete(key);\n                }\n            });\n\n            runningTasks++;\n            var taskFn = wrapAsync(task[task.length - 1]);\n            if (task.length > 1) {\n                taskFn(results, taskCallback);\n            } else {\n                taskFn(taskCallback);\n            }\n        }\n\n        function checkForDeadlocks() {\n            // Kahn's algorithm\n            // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n            // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n            var currentTask;\n            var counter = 0;\n            while (readyToCheck.length) {\n                currentTask = readyToCheck.pop();\n                counter++;\n                getDependents(currentTask).forEach(dependent => {\n                    if (--uncheckedDependencies[dependent] === 0) {\n                        readyToCheck.push(dependent);\n                    }\n                });\n            }\n\n            if (counter !== numTasks) {\n                throw new Error(\n                    'async.auto cannot execute tasks due to a recursive dependency'\n                );\n            }\n        }\n\n        function getDependents(taskName) {\n            var result = [];\n            Object.keys(tasks).forEach(key => {\n                const task = tasks[key];\n                if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                    result.push(key);\n                }\n            });\n            return result;\n        }\n\n        return callback[PROMISE_SYMBOL]\n    }\n\n    var FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\n    var ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\n    var FN_ARG_SPLIT = /,/;\n    var FN_ARG = /(=.+)?(\\s*)$/;\n\n    function stripComments(string) {\n        let stripped = '';\n        let index = 0;\n        let endBlockComment = string.indexOf('*/');\n        while (index < string.length) {\n            if (string[index] === '/' && string[index+1] === '/') {\n                // inline comment\n                let endIndex = string.indexOf('\\n', index);\n                index = (endIndex === -1) ? string.length : endIndex;\n            } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {\n                // block comment\n                let endIndex = string.indexOf('*/', index);\n                if (endIndex !== -1) {\n                    index = endIndex + 2;\n                    endBlockComment = string.indexOf('*/', index);\n                } else {\n                    stripped += string[index];\n                    index++;\n                }\n            } else {\n                stripped += string[index];\n                index++;\n            }\n        }\n        return stripped;\n    }\n\n    function parseParams(func) {\n        const src = stripComments(func.toString());\n        let match = src.match(FN_ARGS);\n        if (!match) {\n            match = src.match(ARROW_FN_ARGS);\n        }\n        if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n        let [, args] = match;\n        return args\n            .replace(/\\s/g, '')\n            .split(FN_ARG_SPLIT)\n            .map((arg) => arg.replace(FN_ARG, '').trim());\n    }\n\n    /**\n     * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n     * tasks are specified as parameters to the function, after the usual callback\n     * parameter, with the parameter names matching the names of the tasks it\n     * depends on. This can provide even more readable task graphs which can be\n     * easier to maintain.\n     *\n     * If a final callback is specified, the task results are similarly injected,\n     * specified as named parameters after the initial error parameter.\n     *\n     * The autoInject function is purely syntactic sugar and its semantics are\n     * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n     *\n     * @name autoInject\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.auto]{@link module:ControlFlow.auto}\n     * @category Control Flow\n     * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n     * the form 'func([dependencies...], callback). The object's key of a property\n     * serves as the name of the task defined by that property, i.e. can be used\n     * when specifying requirements for other tasks.\n     * * The `callback` parameter is a `callback(err, result)` which must be called\n     *   when finished, passing an `error` (which can be `null`) and the result of\n     *   the function's execution. The remaining parameters name other tasks on\n     *   which the task is dependent, and the results from those tasks are the\n     *   arguments of those parameters.\n     * @param {Function} [callback] - An optional callback which is called when all\n     * the tasks have been completed. It receives the `err` argument if any `tasks`\n     * pass an error to their callback, and a `results` object with any completed\n     * task results, similar to `auto`.\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * //  The example from `auto` can be rewritten as follows:\n     * async.autoInject({\n     *     get_data: function(callback) {\n     *         // async code to get some data\n     *         callback(null, 'data', 'converted to array');\n     *     },\n     *     make_folder: function(callback) {\n     *         // async code to create a directory to store a file in\n     *         // this is run at the same time as getting the data\n     *         callback(null, 'folder');\n     *     },\n     *     write_file: function(get_data, make_folder, callback) {\n     *         // once there is some data and the directory exists,\n     *         // write the data to a file in the directory\n     *         callback(null, 'filename');\n     *     },\n     *     email_link: function(write_file, callback) {\n     *         // once the file is written let's email a link to it...\n     *         // write_file contains the filename returned by write_file.\n     *         callback(null, {'file':write_file, 'email':'user@example.com'});\n     *     }\n     * }, function(err, results) {\n     *     console.log('err = ', err);\n     *     console.log('email_link = ', results.email_link);\n     * });\n     *\n     * // If you are using a JS minifier that mangles parameter names, `autoInject`\n     * // will not work with plain functions, since the parameter names will be\n     * // collapsed to a single letter identifier.  To work around this, you can\n     * // explicitly specify the names of the parameters your task function needs\n     * // in an array, similar to Angular.js dependency injection.\n     *\n     * // This still has an advantage over plain `auto`, since the results a task\n     * // depends on are still spread into arguments.\n     * async.autoInject({\n     *     //...\n     *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n     *         callback(null, 'filename');\n     *     }],\n     *     email_link: ['write_file', function(write_file, callback) {\n     *         callback(null, {'file':write_file, 'email':'user@example.com'});\n     *     }]\n     *     //...\n     * }, function(err, results) {\n     *     console.log('err = ', err);\n     *     console.log('email_link = ', results.email_link);\n     * });\n     */\n    function autoInject(tasks, callback) {\n        var newTasks = {};\n\n        Object.keys(tasks).forEach(key => {\n            var taskFn = tasks[key];\n            var params;\n            var fnIsAsync = isAsync(taskFn);\n            var hasNoDeps =\n                (!fnIsAsync && taskFn.length === 1) ||\n                (fnIsAsync && taskFn.length === 0);\n\n            if (Array.isArray(taskFn)) {\n                params = [...taskFn];\n                taskFn = params.pop();\n\n                newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n            } else if (hasNoDeps) {\n                // no dependencies, use the function as-is\n                newTasks[key] = taskFn;\n            } else {\n                params = parseParams(taskFn);\n                if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                    throw new Error(\"autoInject task functions require explicit parameters.\");\n                }\n\n                // remove callback param\n                if (!fnIsAsync) params.pop();\n\n                newTasks[key] = params.concat(newTask);\n            }\n\n            function newTask(results, taskCb) {\n                var newArgs = params.map(name => results[name]);\n                newArgs.push(taskCb);\n                wrapAsync(taskFn)(...newArgs);\n            }\n        });\n\n        return auto(newTasks, callback);\n    }\n\n    // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n    // used for queues. This implementation assumes that the node provided by the user can be modified\n    // to adjust the next and last properties. We implement only the minimal functionality\n    // for queue support.\n    class DLL {\n        constructor() {\n            this.head = this.tail = null;\n            this.length = 0;\n        }\n\n        removeLink(node) {\n            if (node.prev) node.prev.next = node.next;\n            else this.head = node.next;\n            if (node.next) node.next.prev = node.prev;\n            else this.tail = node.prev;\n\n            node.prev = node.next = null;\n            this.length -= 1;\n            return node;\n        }\n\n        empty () {\n            while(this.head) this.shift();\n            return this;\n        }\n\n        insertAfter(node, newNode) {\n            newNode.prev = node;\n            newNode.next = node.next;\n            if (node.next) node.next.prev = newNode;\n            else this.tail = newNode;\n            node.next = newNode;\n            this.length += 1;\n        }\n\n        insertBefore(node, newNode) {\n            newNode.prev = node.prev;\n            newNode.next = node;\n            if (node.prev) node.prev.next = newNode;\n            else this.head = newNode;\n            node.prev = newNode;\n            this.length += 1;\n        }\n\n        unshift(node) {\n            if (this.head) this.insertBefore(this.head, node);\n            else setInitial(this, node);\n        }\n\n        push(node) {\n            if (this.tail) this.insertAfter(this.tail, node);\n            else setInitial(this, node);\n        }\n\n        shift() {\n            return this.head && this.removeLink(this.head);\n        }\n\n        pop() {\n            return this.tail && this.removeLink(this.tail);\n        }\n\n        toArray() {\n            return [...this]\n        }\n\n        *[Symbol.iterator] () {\n            var cur = this.head;\n            while (cur) {\n                yield cur.data;\n                cur = cur.next;\n            }\n        }\n\n        remove (testFn) {\n            var curr = this.head;\n            while(curr) {\n                var {next} = curr;\n                if (testFn(curr)) {\n                    this.removeLink(curr);\n                }\n                curr = next;\n            }\n            return this;\n        }\n    }\n\n    function setInitial(dll, node) {\n        dll.length = 1;\n        dll.head = dll.tail = node;\n    }\n\n    function queue(worker, concurrency, payload) {\n        if (concurrency == null) {\n            concurrency = 1;\n        }\n        else if(concurrency === 0) {\n            throw new RangeError('Concurrency must not be zero');\n        }\n\n        var _worker = wrapAsync(worker);\n        var numRunning = 0;\n        var workersList = [];\n        const events = {\n            error: [],\n            drain: [],\n            saturated: [],\n            unsaturated: [],\n            empty: []\n        };\n\n        function on (event, handler) {\n            events[event].push(handler);\n        }\n\n        function once (event, handler) {\n            const handleAndRemove = (...args) => {\n                off(event, handleAndRemove);\n                handler(...args);\n            };\n            events[event].push(handleAndRemove);\n        }\n\n        function off (event, handler) {\n            if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n            if (!handler) return events[event] = []\n            events[event] = events[event].filter(ev => ev !== handler);\n        }\n\n        function trigger (event, ...args) {\n            events[event].forEach(handler => handler(...args));\n        }\n\n        var processingScheduled = false;\n        function _insert(data, insertAtFront, rejectOnError, callback) {\n            if (callback != null && typeof callback !== 'function') {\n                throw new Error('task callback must be a function');\n            }\n            q.started = true;\n\n            var res, rej;\n            function promiseCallback (err, ...args) {\n                // we don't care about the error, let the global error handler\n                // deal with it\n                if (err) return rejectOnError ? rej(err) : res()\n                if (args.length <= 1) return res(args[0])\n                res(args);\n            }\n\n            var item = q._createTaskItem(\n                data,\n                rejectOnError ? promiseCallback :\n                    (callback || promiseCallback)\n            );\n\n            if (insertAtFront) {\n                q._tasks.unshift(item);\n            } else {\n                q._tasks.push(item);\n            }\n\n            if (!processingScheduled) {\n                processingScheduled = true;\n                setImmediate$1(() => {\n                    processingScheduled = false;\n                    q.process();\n                });\n            }\n\n            if (rejectOnError || !callback) {\n                return new Promise((resolve, reject) => {\n                    res = resolve;\n                    rej = reject;\n                })\n            }\n        }\n\n        function _createCB(tasks) {\n            return function (err, ...args) {\n                numRunning -= 1;\n\n                for (var i = 0, l = tasks.length; i < l; i++) {\n                    var task = tasks[i];\n\n                    var index = workersList.indexOf(task);\n                    if (index === 0) {\n                        workersList.shift();\n                    } else if (index > 0) {\n                        workersList.splice(index, 1);\n                    }\n\n                    task.callback(err, ...args);\n\n                    if (err != null) {\n                        trigger('error', err, task.data);\n                    }\n                }\n\n                if (numRunning <= (q.concurrency - q.buffer) ) {\n                    trigger('unsaturated');\n                }\n\n                if (q.idle()) {\n                    trigger('drain');\n                }\n                q.process();\n            };\n        }\n\n        function _maybeDrain(data) {\n            if (data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                setImmediate$1(() => trigger('drain'));\n                return true\n            }\n            return false\n        }\n\n        const eventMethod = (name) => (handler) => {\n            if (!handler) {\n                return new Promise((resolve, reject) => {\n                    once(name, (err, data) => {\n                        if (err) return reject(err)\n                        resolve(data);\n                    });\n                })\n            }\n            off(name);\n            on(name, handler);\n\n        };\n\n        var isProcessing = false;\n        var q = {\n            _tasks: new DLL(),\n            _createTaskItem (data, callback) {\n                return {\n                    data,\n                    callback\n                };\n            },\n            *[Symbol.iterator] () {\n                yield* q._tasks[Symbol.iterator]();\n            },\n            concurrency,\n            payload,\n            buffer: concurrency / 4,\n            started: false,\n            paused: false,\n            push (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, false, false, callback))\n                }\n                return _insert(data, false, false, callback);\n            },\n            pushAsync (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, false, true, callback))\n                }\n                return _insert(data, false, true, callback);\n            },\n            kill () {\n                off();\n                q._tasks.empty();\n            },\n            unshift (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, true, false, callback))\n                }\n                return _insert(data, true, false, callback);\n            },\n            unshiftAsync (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, true, true, callback))\n                }\n                return _insert(data, true, true, callback);\n            },\n            remove (testFn) {\n                q._tasks.remove(testFn);\n            },\n            process () {\n                // Avoid trying to start too many processing operations. This can occur\n                // when callbacks resolve synchronously (#1267).\n                if (isProcessing) {\n                    return;\n                }\n                isProcessing = true;\n                while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                    var tasks = [], data = [];\n                    var l = q._tasks.length;\n                    if (q.payload) l = Math.min(l, q.payload);\n                    for (var i = 0; i < l; i++) {\n                        var node = q._tasks.shift();\n                        tasks.push(node);\n                        workersList.push(node);\n                        data.push(node.data);\n                    }\n\n                    numRunning += 1;\n\n                    if (q._tasks.length === 0) {\n                        trigger('empty');\n                    }\n\n                    if (numRunning === q.concurrency) {\n                        trigger('saturated');\n                    }\n\n                    var cb = onlyOnce(_createCB(tasks));\n                    _worker(data, cb);\n                }\n                isProcessing = false;\n            },\n            length () {\n                return q._tasks.length;\n            },\n            running () {\n                return numRunning;\n            },\n            workersList () {\n                return workersList;\n            },\n            idle() {\n                return q._tasks.length + numRunning === 0;\n            },\n            pause () {\n                q.paused = true;\n            },\n            resume () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                setImmediate$1(q.process);\n            }\n        };\n        // define these as fixed properties, so people get useful errors when updating\n        Object.defineProperties(q, {\n            saturated: {\n                writable: false,\n                value: eventMethod('saturated')\n            },\n            unsaturated: {\n                writable: false,\n                value: eventMethod('unsaturated')\n            },\n            empty: {\n                writable: false,\n                value: eventMethod('empty')\n            },\n            drain: {\n                writable: false,\n                value: eventMethod('drain')\n            },\n            error: {\n                writable: false,\n                value: eventMethod('error')\n            },\n        });\n        return q;\n    }\n\n    /**\n     * Creates a `cargo` object with the specified payload. Tasks added to the\n     * cargo will be processed altogether (up to the `payload` limit). If the\n     * `worker` is in progress, the task is queued until it becomes available. Once\n     * the `worker` has completed some tasks, each callback of those tasks is\n     * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n     * for how `cargo` and `queue` work.\n     *\n     * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n     * at a time, cargo passes an array of tasks to a single worker, repeating\n     * when the worker is finished.\n     *\n     * @name cargo\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.queue]{@link module:ControlFlow.queue}\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An asynchronous function for processing an array\n     * of queued tasks. Invoked with `(tasks, callback)`.\n     * @param {number} [payload=Infinity] - An optional `integer` for determining\n     * how many tasks should be processed per round; if omitted, the default is\n     * unlimited.\n     * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n     * attached as certain properties to listen for specific events during the\n     * lifecycle of the cargo and inner queue.\n     * @example\n     *\n     * // create a cargo object with payload 2\n     * var cargo = async.cargo(function(tasks, callback) {\n     *     for (var i=0; i<tasks.length; i++) {\n     *         console.log('hello ' + tasks[i].name);\n     *     }\n     *     callback();\n     * }, 2);\n     *\n     * // add some items\n     * cargo.push({name: 'foo'}, function(err) {\n     *     console.log('finished processing foo');\n     * });\n     * cargo.push({name: 'bar'}, function(err) {\n     *     console.log('finished processing bar');\n     * });\n     * await cargo.push({name: 'baz'});\n     * console.log('finished processing baz');\n     */\n    function cargo(worker, payload) {\n        return queue(worker, 1, payload);\n    }\n\n    /**\n     * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n     * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n     * If the all `workers` are in progress, the task is queued until one becomes available. Once\n     * a `worker` has completed some tasks, each callback of those tasks is\n     * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n     * for how `cargo` and `queue` work.\n     *\n     * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n     * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n     * the cargoQueue passes an array of tasks to multiple parallel workers.\n     *\n     * @name cargoQueue\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.queue]{@link module:ControlFlow.queue}\n     * @see [async.cargo]{@link module:ControlFLow.cargo}\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An asynchronous function for processing an array\n     * of queued tasks. Invoked with `(tasks, callback)`.\n     * @param {number} [concurrency=1] - An `integer` for determining how many\n     * `worker` functions should be run in parallel.  If omitted, the concurrency\n     * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n     * @param {number} [payload=Infinity] - An optional `integer` for determining\n     * how many tasks should be processed per round; if omitted, the default is\n     * unlimited.\n     * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n     * attached as certain properties to listen for specific events during the\n     * lifecycle of the cargoQueue and inner queue.\n     * @example\n     *\n     * // create a cargoQueue object with payload 2 and concurrency 2\n     * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n     *     for (var i=0; i<tasks.length; i++) {\n     *         console.log('hello ' + tasks[i].name);\n     *     }\n     *     callback();\n     * }, 2, 2);\n     *\n     * // add some items\n     * cargoQueue.push({name: 'foo'}, function(err) {\n     *     console.log('finished processing foo');\n     * });\n     * cargoQueue.push({name: 'bar'}, function(err) {\n     *     console.log('finished processing bar');\n     * });\n     * cargoQueue.push({name: 'baz'}, function(err) {\n     *     console.log('finished processing baz');\n     * });\n     * cargoQueue.push({name: 'boo'}, function(err) {\n     *     console.log('finished processing boo');\n     * });\n     */\n    function cargo$1(worker, concurrency, payload) {\n        return queue(worker, concurrency, payload);\n    }\n\n    /**\n     * Reduces `coll` into a single value using an async `iteratee` to return each\n     * successive step. `memo` is the initial state of the reduction. This function\n     * only operates in series.\n     *\n     * For performance reasons, it may make sense to split a call to this function\n     * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n     * results. This function is for situations where each step in the reduction\n     * needs to be async; if you can get the data before reducing it, then it's\n     * probably a good idea to do so.\n     *\n     * @name reduce\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias inject\n     * @alias foldl\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {*} memo - The initial state of the reduction.\n     * @param {AsyncFunction} iteratee - A function applied to each item in the\n     * array to produce the next step in the reduction.\n     * The `iteratee` should complete with the next state of the reduction.\n     * If the iteratee completes with an error, the reduction is stopped and the\n     * main `callback` is immediately called with the error.\n     * Invoked with (memo, item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result is the reduced value. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     * // file4.txt does not exist\n     *\n     * const fileList = ['file1.txt','file2.txt','file3.txt'];\n     * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n     *\n     * // asynchronous function that computes the file size in bytes\n     * // file size is added to the memoized value, then returned\n     * function getFileSizeInBytes(memo, file, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         callback(null, memo + stat.size);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n     *     if (err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(result);\n     *         // 6000\n     *         // which is the sum of the file sizes of the three files\n     *     }\n     * });\n     *\n     * // Error Handling\n     * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n     *     if (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     } else {\n     *         console.log(result);\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.reduce(fileList, 0, getFileSizeInBytes)\n     * .then( result => {\n     *     console.log(result);\n     *     // 6000\n     *     // which is the sum of the file sizes of the three files\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n     * .then( result => {\n     *     console.log(result);\n     * }).catch( err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n     *         console.log(result);\n     *         // 6000\n     *         // which is the sum of the file sizes of the three files\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n     *         console.log(result);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     }\n     * }\n     *\n     */\n    function reduce(coll, memo, iteratee, callback) {\n        callback = once(callback);\n        var _iteratee = wrapAsync(iteratee);\n        return eachOfSeries$1(coll, (x, i, iterCb) => {\n            _iteratee(memo, x, (err, v) => {\n                memo = v;\n                iterCb(err);\n            });\n        }, err => callback(err, memo));\n    }\n    var reduce$1 = awaitify(reduce, 4);\n\n    /**\n     * Version of the compose function that is more natural to read. Each function\n     * consumes the return value of the previous function. It is the equivalent of\n     * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n     *\n     * Each function is executed with the `this` binding of the composed function.\n     *\n     * @name seq\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.compose]{@link module:ControlFlow.compose}\n     * @category Control Flow\n     * @param {...AsyncFunction} functions - the asynchronous functions to compose\n     * @returns {Function} a function that composes the `functions` in order\n     * @example\n     *\n     * // Requires lodash (or underscore), express3 and dresende's orm2.\n     * // Part of an app, that fetches cats of the logged user.\n     * // This example uses `seq` function to avoid overnesting and error\n     * // handling clutter.\n     * app.get('/cats', function(request, response) {\n     *     var User = request.models.User;\n     *     async.seq(\n     *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n     *         function(user, fn) {\n     *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n     *         }\n     *     )(req.session.user_id, function (err, cats) {\n     *         if (err) {\n     *             console.error(err);\n     *             response.json({ status: 'error', message: err.message });\n     *         } else {\n     *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n     *         }\n     *     });\n     * });\n     */\n    function seq(...functions) {\n        var _functions = functions.map(wrapAsync);\n        return function (...args) {\n            var that = this;\n\n            var cb = args[args.length - 1];\n            if (typeof cb == 'function') {\n                args.pop();\n            } else {\n                cb = promiseCallback();\n            }\n\n            reduce$1(_functions, args, (newargs, fn, iterCb) => {\n                fn.apply(that, newargs.concat((err, ...nextargs) => {\n                    iterCb(err, nextargs);\n                }));\n            },\n            (err, results) => cb(err, ...results));\n\n            return cb[PROMISE_SYMBOL]\n        };\n    }\n\n    /**\n     * Creates a function which is a composition of the passed asynchronous\n     * functions. Each function consumes the return value of the function that\n     * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n     * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n     *\n     * If the last argument to the composed function is not a function, a promise\n     * is returned when you call it.\n     *\n     * Each function is executed with the `this` binding of the composed function.\n     *\n     * @name compose\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {...AsyncFunction} functions - the asynchronous functions to compose\n     * @returns {Function} an asynchronous function that is the composed\n     * asynchronous `functions`\n     * @example\n     *\n     * function add1(n, callback) {\n     *     setTimeout(function () {\n     *         callback(null, n + 1);\n     *     }, 10);\n     * }\n     *\n     * function mul3(n, callback) {\n     *     setTimeout(function () {\n     *         callback(null, n * 3);\n     *     }, 10);\n     * }\n     *\n     * var add1mul3 = async.compose(mul3, add1);\n     * add1mul3(4, function (err, result) {\n     *     // result now equals 15\n     * });\n     */\n    function compose(...args) {\n        return seq(...args.reverse());\n    }\n\n    /**\n     * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name mapLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.map]{@link module:Collections.map}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with the transformed item.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Results is an array of the\n     * transformed items from the `coll`. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapLimit (coll, limit, iteratee, callback) {\n        return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var mapLimit$1 = awaitify(mapLimit, 4);\n\n    /**\n     * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name concatLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.concat]{@link module:Collections.concat}\n     * @category Collection\n     * @alias flatMapLimit\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n     * which should use an array as its result. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is an array\n     * containing the concatenated results of the `iteratee` function. Invoked with\n     * (err, results).\n     * @returns A Promise, if no callback is passed\n     */\n    function concatLimit(coll, limit, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return mapLimit$1(coll, limit, (val, iterCb) => {\n            _iteratee(val, (err, ...args) => {\n                if (err) return iterCb(err);\n                return iterCb(err, args);\n            });\n        }, (err, mapResults) => {\n            var result = [];\n            for (var i = 0; i < mapResults.length; i++) {\n                if (mapResults[i]) {\n                    result = result.concat(...mapResults[i]);\n                }\n            }\n\n            return callback(err, result);\n        });\n    }\n    var concatLimit$1 = awaitify(concatLimit, 4);\n\n    /**\n     * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n     * the concatenated list. The `iteratee`s are called in parallel, and the\n     * results are concatenated as they return. The results array will be returned in\n     * the original order of `coll` passed to the `iteratee` function.\n     *\n     * @name concat\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @alias flatMap\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n     * which should use an array as its result. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is an array\n     * containing the concatenated results of the `iteratee` function. Invoked with\n     * (err, results).\n     * @returns A Promise, if no callback is passed\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * let directoryList = ['dir1','dir2','dir3'];\n     * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n     *\n     * // Using callbacks\n     * async.concat(directoryList, fs.readdir, function(err, results) {\n     *    if (err) {\n     *        console.log(err);\n     *    } else {\n     *        console.log(results);\n     *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n     *    }\n     * });\n     *\n     * // Error Handling\n     * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n     *    if (err) {\n     *        console.log(err);\n     *        // [ Error: ENOENT: no such file or directory ]\n     *        // since dir4 does not exist\n     *    } else {\n     *        console.log(results);\n     *    }\n     * });\n     *\n     * // Using Promises\n     * async.concat(directoryList, fs.readdir)\n     * .then(results => {\n     *     console.log(results);\n     *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n     * }).catch(err => {\n     *      console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.concat(withMissingDirectoryList, fs.readdir)\n     * .then(results => {\n     *     console.log(results);\n     * }).catch(err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     *     // since dir4 does not exist\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.concat(directoryList, fs.readdir);\n     *         console.log(results);\n     *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n     *     } catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n     *         console.log(results);\n     *     } catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *         // since dir4 does not exist\n     *     }\n     * }\n     *\n     */\n    function concat(coll, iteratee, callback) {\n        return concatLimit$1(coll, Infinity, iteratee, callback)\n    }\n    var concat$1 = awaitify(concat, 3);\n\n    /**\n     * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n     *\n     * @name concatSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.concat]{@link module:Collections.concat}\n     * @category Collection\n     * @alias flatMapSeries\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n     * The iteratee should complete with an array an array of results.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is an array\n     * containing the concatenated results of the `iteratee` function. Invoked with\n     * (err, results).\n     * @returns A Promise, if no callback is passed\n     */\n    function concatSeries(coll, iteratee, callback) {\n        return concatLimit$1(coll, 1, iteratee, callback)\n    }\n    var concatSeries$1 = awaitify(concatSeries, 3);\n\n    /**\n     * Returns a function that when called, calls-back with the values provided.\n     * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n     * [`auto`]{@link module:ControlFlow.auto}.\n     *\n     * @name constant\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {...*} arguments... - Any number of arguments to automatically invoke\n     * callback with.\n     * @returns {AsyncFunction} Returns a function that when invoked, automatically\n     * invokes the callback with the previous given arguments.\n     * @example\n     *\n     * async.waterfall([\n     *     async.constant(42),\n     *     function (value, next) {\n     *         // value === 42\n     *     },\n     *     //...\n     * ], callback);\n     *\n     * async.waterfall([\n     *     async.constant(filename, \"utf8\"),\n     *     fs.readFile,\n     *     function (fileData, next) {\n     *         //...\n     *     }\n     *     //...\n     * ], callback);\n     *\n     * async.auto({\n     *     hostname: async.constant(\"https://server.net/\"),\n     *     port: findFreePort,\n     *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n     *         startServer(options, cb);\n     *     }],\n     *     //...\n     * }, callback);\n     */\n    function constant(...args) {\n        return function (...ignoredArgs/*, callback*/) {\n            var callback = ignoredArgs.pop();\n            return callback(null, ...args);\n        };\n    }\n\n    function _createTester(check, getResult) {\n        return (eachfn, arr, _iteratee, cb) => {\n            var testPassed = false;\n            var testResult;\n            const iteratee = wrapAsync(_iteratee);\n            eachfn(arr, (value, _, callback) => {\n                iteratee(value, (err, result) => {\n                    if (err || err === false) return callback(err);\n\n                    if (check(result) && !testResult) {\n                        testPassed = true;\n                        testResult = getResult(true, value);\n                        return callback(null, breakLoop);\n                    }\n                    callback();\n                });\n            }, err => {\n                if (err) return cb(err);\n                cb(null, testPassed ? testResult : getResult(false));\n            });\n        };\n    }\n\n    /**\n     * Returns the first value in `coll` that passes an async truth test. The\n     * `iteratee` is applied in parallel, meaning the first iteratee to return\n     * `true` will fire the detect `callback` with that result. That means the\n     * result might not be the first item in the original `coll` (in terms of order)\n     * that passes the test.\n\n     * If order within the original `coll` is important, then look at\n     * [`detectSeries`]{@link module:Collections.detectSeries}.\n     *\n     * @name detect\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias find\n     * @category Collections\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n     * The iteratee must complete with a boolean value as its result.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the `iteratee` functions have finished.\n     * Result will be the first item in the array that passes the truth test\n     * (iteratee) or the value `undefined` if none passed. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n     *    function(err, result) {\n     *        console.log(result);\n     *        // dir1/file1.txt\n     *        // result now equals the first file in the list that exists\n     *    }\n     *);\n     *\n     * // Using Promises\n     * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n     * .then(result => {\n     *     console.log(result);\n     *     // dir1/file1.txt\n     *     // result now equals the first file in the list that exists\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n     *         console.log(result);\n     *         // dir1/file1.txt\n     *         // result now equals the file in the list that exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function detect(coll, iteratee, callback) {\n        return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n    }\n    var detect$1 = awaitify(detect, 3);\n\n    /**\n     * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name detectLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.detect]{@link module:Collections.detect}\n     * @alias findLimit\n     * @category Collections\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n     * The iteratee must complete with a boolean value as its result.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the `iteratee` functions have finished.\n     * Result will be the first item in the array that passes the truth test\n     * (iteratee) or the value `undefined` if none passed. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function detectLimit(coll, limit, iteratee, callback) {\n        return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var detectLimit$1 = awaitify(detectLimit, 4);\n\n    /**\n     * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n     *\n     * @name detectSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.detect]{@link module:Collections.detect}\n     * @alias findSeries\n     * @category Collections\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n     * The iteratee must complete with a boolean value as its result.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the `iteratee` functions have finished.\n     * Result will be the first item in the array that passes the truth test\n     * (iteratee) or the value `undefined` if none passed. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function detectSeries(coll, iteratee, callback) {\n        return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n    }\n\n    var detectSeries$1 = awaitify(detectSeries, 3);\n\n    function consoleFunc(name) {\n        return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n            /* istanbul ignore else */\n            if (typeof console === 'object') {\n                /* istanbul ignore else */\n                if (err) {\n                    /* istanbul ignore else */\n                    if (console.error) {\n                        console.error(err);\n                    }\n                } else if (console[name]) { /* istanbul ignore else */\n                    resultArgs.forEach(x => console[name](x));\n                }\n            }\n        })\n    }\n\n    /**\n     * Logs the result of an [`async` function]{@link AsyncFunction} to the\n     * `console` using `console.dir` to display the properties of the resulting object.\n     * Only works in Node.js or in browsers that support `console.dir` and\n     * `console.error` (such as FF and Chrome).\n     * If multiple arguments are returned from the async function,\n     * `console.dir` is called on each argument in order.\n     *\n     * @name dir\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} function - The function you want to eventually apply\n     * all arguments to.\n     * @param {...*} arguments... - Any number of arguments to apply to the function.\n     * @example\n     *\n     * // in a module\n     * var hello = function(name, callback) {\n     *     setTimeout(function() {\n     *         callback(null, {hello: name});\n     *     }, 1000);\n     * };\n     *\n     * // in the node repl\n     * node> async.dir(hello, 'world');\n     * {hello: 'world'}\n     */\n    var dir = consoleFunc('dir');\n\n    /**\n     * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n     * the order of operations, the arguments `test` and `iteratee` are switched.\n     *\n     * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n     *\n     * @name doWhilst\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.whilst]{@link module:ControlFlow.whilst}\n     * @category Control Flow\n     * @param {AsyncFunction} iteratee - A function which is called each time `test`\n     * passes. Invoked with (callback).\n     * @param {AsyncFunction} test - asynchronous truth test to perform after each\n     * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n     * non-error args from the previous callback of `iteratee`.\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has failed and repeated execution of `iteratee` has stopped.\n     * `callback` will be passed an error and any arguments passed to the final\n     * `iteratee`'s callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function doWhilst(iteratee, test, callback) {\n        callback = onlyOnce(callback);\n        var _fn = wrapAsync(iteratee);\n        var _test = wrapAsync(test);\n        var results;\n\n        function next(err, ...args) {\n            if (err) return callback(err);\n            if (err === false) return;\n            results = args;\n            _test(...args, check);\n        }\n\n        function check(err, truth) {\n            if (err) return callback(err);\n            if (err === false) return;\n            if (!truth) return callback(null, ...results);\n            _fn(next);\n        }\n\n        return check(null, true);\n    }\n\n    var doWhilst$1 = awaitify(doWhilst, 3);\n\n    /**\n     * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n     * argument ordering differs from `until`.\n     *\n     * @name doUntil\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n     * @category Control Flow\n     * @param {AsyncFunction} iteratee - An async function which is called each time\n     * `test` fails. Invoked with (callback).\n     * @param {AsyncFunction} test - asynchronous truth test to perform after each\n     * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n     * non-error args from the previous callback of `iteratee`\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has passed and repeated execution of `iteratee` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `iteratee`'s\n     * callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function doUntil(iteratee, test, callback) {\n        const _test = wrapAsync(test);\n        return doWhilst$1(iteratee, (...args) => {\n            const cb = args.pop();\n            _test(...args, (err, truth) => cb (err, !truth));\n        }, callback);\n    }\n\n    function _withoutIndex(iteratee) {\n        return (value, index, callback) => iteratee(value, callback);\n    }\n\n    /**\n     * Applies the function `iteratee` to each item in `coll`, in parallel.\n     * The `iteratee` is called with an item from the list, and a callback for when\n     * it has finished. If the `iteratee` passes an error to its `callback`, the\n     * main `callback` (for the `each` function) is immediately called with the\n     * error.\n     *\n     * Note, that since this function applies `iteratee` to each item in parallel,\n     * there is no guarantee that the iteratee functions will complete in order.\n     *\n     * @name each\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias forEach\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to\n     * each item in `coll`. Invoked with (item, callback).\n     * The array index is not passed to the iteratee.\n     * If you need the index, use `eachOf`.\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n     * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n     *\n     * // asynchronous function that deletes a file\n     * const deleteFile = function(file, callback) {\n     *     fs.unlink(file, callback);\n     * };\n     *\n     * // Using callbacks\n     * async.each(fileList, deleteFile, function(err) {\n     *     if( err ) {\n     *         console.log(err);\n     *     } else {\n     *         console.log('All files have been deleted successfully');\n     *     }\n     * });\n     *\n     * // Error Handling\n     * async.each(withMissingFileList, deleteFile, function(err){\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     *     // since dir4/file2.txt does not exist\n     *     // dir1/file1.txt could have been deleted\n     * });\n     *\n     * // Using Promises\n     * async.each(fileList, deleteFile)\n     * .then( () => {\n     *     console.log('All files have been deleted successfully');\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.each(fileList, deleteFile)\n     * .then( () => {\n     *     console.log('All files have been deleted successfully');\n     * }).catch( err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     *     // since dir4/file2.txt does not exist\n     *     // dir1/file1.txt could have been deleted\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         await async.each(files, deleteFile);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         await async.each(withMissingFileList, deleteFile);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *         // since dir4/file2.txt does not exist\n     *         // dir1/file1.txt could have been deleted\n     *     }\n     * }\n     *\n     */\n    function eachLimit(coll, iteratee, callback) {\n        return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n    }\n\n    var each = awaitify(eachLimit, 3);\n\n    /**\n     * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name eachLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.each]{@link module:Collections.each}\n     * @alias forEachLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The array index is not passed to the iteratee.\n     * If you need the index, use `eachOfLimit`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachLimit$1(coll, limit, iteratee, callback) {\n        return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n    }\n    var eachLimit$2 = awaitify(eachLimit$1, 4);\n\n    /**\n     * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n     *\n     * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n     * in series and therefore the iteratee functions will complete in order.\n\n     * @name eachSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.each]{@link module:Collections.each}\n     * @alias forEachSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each\n     * item in `coll`.\n     * The array index is not passed to the iteratee.\n     * If you need the index, use `eachOfSeries`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachSeries(coll, iteratee, callback) {\n        return eachLimit$2(coll, 1, iteratee, callback)\n    }\n    var eachSeries$1 = awaitify(eachSeries, 3);\n\n    /**\n     * Wrap an async function and ensure it calls its callback on a later tick of\n     * the event loop.  If the function already calls its callback on a next tick,\n     * no extra deferral is added. This is useful for preventing stack overflows\n     * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n     * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n     * contained. ES2017 `async` functions are returned as-is -- they are immune\n     * to Zalgo's corrupting influences, as they always resolve on a later tick.\n     *\n     * @name ensureAsync\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} fn - an async function, one that expects a node-style\n     * callback as its last argument.\n     * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n     * signature as the function passed in.\n     * @example\n     *\n     * function sometimesAsync(arg, callback) {\n     *     if (cache[arg]) {\n     *         return callback(null, cache[arg]); // this would be synchronous!!\n     *     } else {\n     *         doSomeIO(arg, callback); // this IO would be asynchronous\n     *     }\n     * }\n     *\n     * // this has a risk of stack overflows if many results are cached in a row\n     * async.mapSeries(args, sometimesAsync, done);\n     *\n     * // this will defer sometimesAsync's callback if necessary,\n     * // preventing stack overflows\n     * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n     */\n    function ensureAsync(fn) {\n        if (isAsync(fn)) return fn;\n        return function (...args/*, callback*/) {\n            var callback = args.pop();\n            var sync = true;\n            args.push((...innerArgs) => {\n                if (sync) {\n                    setImmediate$1(() => callback(...innerArgs));\n                } else {\n                    callback(...innerArgs);\n                }\n            });\n            fn.apply(this, args);\n            sync = false;\n        };\n    }\n\n    /**\n     * Returns `true` if every element in `coll` satisfies an async test. If any\n     * iteratee call returns `false`, the main `callback` is immediately called.\n     *\n     * @name every\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias all\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collection in parallel.\n     * The iteratee must complete with a boolean result value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result will be either `true` or `false`\n     * depending on the values of the async tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n     * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * // Using callbacks\n     * async.every(fileList, fileExists, function(err, result) {\n     *     console.log(result);\n     *     // true\n     *     // result is true since every file exists\n     * });\n     *\n     * async.every(withMissingFileList, fileExists, function(err, result) {\n     *     console.log(result);\n     *     // false\n     *     // result is false since NOT every file exists\n     * });\n     *\n     * // Using Promises\n     * async.every(fileList, fileExists)\n     * .then( result => {\n     *     console.log(result);\n     *     // true\n     *     // result is true since every file exists\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * async.every(withMissingFileList, fileExists)\n     * .then( result => {\n     *     console.log(result);\n     *     // false\n     *     // result is false since NOT every file exists\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.every(fileList, fileExists);\n     *         console.log(result);\n     *         // true\n     *         // result is true since every file exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * async () => {\n     *     try {\n     *         let result = await async.every(withMissingFileList, fileExists);\n     *         console.log(result);\n     *         // false\n     *         // result is false since NOT every file exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function every(coll, iteratee, callback) {\n        return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n    }\n    var every$1 = awaitify(every, 3);\n\n    /**\n     * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name everyLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.every]{@link module:Collections.every}\n     * @alias allLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collection in parallel.\n     * The iteratee must complete with a boolean result value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result will be either `true` or `false`\n     * depending on the values of the async tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function everyLimit(coll, limit, iteratee, callback) {\n        return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var everyLimit$1 = awaitify(everyLimit, 4);\n\n    /**\n     * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n     *\n     * @name everySeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.every]{@link module:Collections.every}\n     * @alias allSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collection in series.\n     * The iteratee must complete with a boolean result value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result will be either `true` or `false`\n     * depending on the values of the async tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function everySeries(coll, iteratee, callback) {\n        return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var everySeries$1 = awaitify(everySeries, 3);\n\n    function filterArray(eachfn, arr, iteratee, callback) {\n        var truthValues = new Array(arr.length);\n        eachfn(arr, (x, index, iterCb) => {\n            iteratee(x, (err, v) => {\n                truthValues[index] = !!v;\n                iterCb(err);\n            });\n        }, err => {\n            if (err) return callback(err);\n            var results = [];\n            for (var i = 0; i < arr.length; i++) {\n                if (truthValues[i]) results.push(arr[i]);\n            }\n            callback(null, results);\n        });\n    }\n\n    function filterGeneric(eachfn, coll, iteratee, callback) {\n        var results = [];\n        eachfn(coll, (x, index, iterCb) => {\n            iteratee(x, (err, v) => {\n                if (err) return iterCb(err);\n                if (v) {\n                    results.push({index, value: x});\n                }\n                iterCb(err);\n            });\n        }, err => {\n            if (err) return callback(err);\n            callback(null, results\n                .sort((a, b) => a.index - b.index)\n                .map(v => v.value));\n        });\n    }\n\n    function _filter(eachfn, coll, iteratee, callback) {\n        var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n        return filter(eachfn, coll, wrapAsync(iteratee), callback);\n    }\n\n    /**\n     * Returns a new array of all the values in `coll` which pass an async truth\n     * test. This operation is performed in parallel, but the results array will be\n     * in the same order as the original.\n     *\n     * @name filter\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias select\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n     * with a boolean argument once it has completed. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     *\n     * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * // Using callbacks\n     * async.filter(files, fileExists, function(err, results) {\n     *    if(err) {\n     *        console.log(err);\n     *    } else {\n     *        console.log(results);\n     *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n     *        // results is now an array of the existing files\n     *    }\n     * });\n     *\n     * // Using Promises\n     * async.filter(files, fileExists)\n     * .then(results => {\n     *     console.log(results);\n     *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n     *     // results is now an array of the existing files\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.filter(files, fileExists);\n     *         console.log(results);\n     *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n     *         // results is now an array of the existing files\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function filter (coll, iteratee, callback) {\n        return _filter(eachOf$1, coll, iteratee, callback)\n    }\n    var filter$1 = awaitify(filter, 3);\n\n    /**\n     * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name filterLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.filter]{@link module:Collections.filter}\n     * @alias selectLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n     * with a boolean argument once it has completed. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function filterLimit (coll, limit, iteratee, callback) {\n        return _filter(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var filterLimit$1 = awaitify(filterLimit, 4);\n\n    /**\n     * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n     *\n     * @name filterSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.filter]{@link module:Collections.filter}\n     * @alias selectSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n     * with a boolean argument once it has completed. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results)\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function filterSeries (coll, iteratee, callback) {\n        return _filter(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var filterSeries$1 = awaitify(filterSeries, 3);\n\n    /**\n     * Calls the asynchronous function `fn` with a callback parameter that allows it\n     * to call itself again, in series, indefinitely.\n\n     * If an error is passed to the callback then `errback` is called with the\n     * error, and execution stops, otherwise it will never be called.\n     *\n     * @name forever\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {AsyncFunction} fn - an async function to call repeatedly.\n     * Invoked with (next).\n     * @param {Function} [errback] - when `fn` passes an error to it's callback,\n     * this function will be called, and execution stops. Invoked with (err).\n     * @returns {Promise} a promise that rejects if an error occurs and an errback\n     * is not passed\n     * @example\n     *\n     * async.forever(\n     *     function(next) {\n     *         // next is suitable for passing to things that need a callback(err [, whatever]);\n     *         // it will result in this function being called again.\n     *     },\n     *     function(err) {\n     *         // if next is called with a value in its first parameter, it will appear\n     *         // in here as 'err', and execution will stop.\n     *     }\n     * );\n     */\n    function forever(fn, errback) {\n        var done = onlyOnce(errback);\n        var task = wrapAsync(ensureAsync(fn));\n\n        function next(err) {\n            if (err) return done(err);\n            if (err === false) return;\n            task(next);\n        }\n        return next();\n    }\n    var forever$1 = awaitify(forever, 2);\n\n    /**\n     * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name groupByLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.groupBy]{@link module:Collections.groupBy}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a `key` to group the value under.\n     * Invoked with (value, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Result is an `Object` whoses\n     * properties are arrays of values which returned the corresponding key.\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function groupByLimit(coll, limit, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return mapLimit$1(coll, limit, (val, iterCb) => {\n            _iteratee(val, (err, key) => {\n                if (err) return iterCb(err);\n                return iterCb(err, {key, val});\n            });\n        }, (err, mapResults) => {\n            var result = {};\n            // from MDN, handle object having an `hasOwnProperty` prop\n            var {hasOwnProperty} = Object.prototype;\n\n            for (var i = 0; i < mapResults.length; i++) {\n                if (mapResults[i]) {\n                    var {key} = mapResults[i];\n                    var {val} = mapResults[i];\n\n                    if (hasOwnProperty.call(result, key)) {\n                        result[key].push(val);\n                    } else {\n                        result[key] = [val];\n                    }\n                }\n            }\n\n            return callback(err, result);\n        });\n    }\n\n    var groupByLimit$1 = awaitify(groupByLimit, 4);\n\n    /**\n     * Returns a new object, where each value corresponds to an array of items, from\n     * `coll`, that returned the corresponding key. That is, the keys of the object\n     * correspond to the values passed to the `iteratee` callback.\n     *\n     * Note: Since this function applies the `iteratee` to each item in parallel,\n     * there is no guarantee that the `iteratee` functions will complete in order.\n     * However, the values for each key in the `result` will be in the same order as\n     * the original `coll`. For Objects, the values will roughly be in the order of\n     * the original Objects' keys (but this can vary across JavaScript engines).\n     *\n     * @name groupBy\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a `key` to group the value under.\n     * Invoked with (value, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Result is an `Object` whoses\n     * properties are arrays of values which returned the corresponding key.\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * const files = ['dir1/file1.txt','dir2','dir4']\n     *\n     * // asynchronous function that detects file type as none, file, or directory\n     * function detectFile(file, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(null, 'none');\n     *         }\n     *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n     *     });\n     * }\n     *\n     * //Using callbacks\n     * async.groupBy(files, detectFile, function(err, result) {\n     *     if(err) {\n     *         console.log(err);\n     *     } else {\n     *\t       console.log(result);\n     *         // {\n     *         //     file: [ 'dir1/file1.txt' ],\n     *         //     none: [ 'dir4' ],\n     *         //     directory: [ 'dir2']\n     *         // }\n     *         // result is object containing the files grouped by type\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.groupBy(files, detectFile)\n     * .then( result => {\n     *     console.log(result);\n     *     // {\n     *     //     file: [ 'dir1/file1.txt' ],\n     *     //     none: [ 'dir4' ],\n     *     //     directory: [ 'dir2']\n     *     // }\n     *     // result is object containing the files grouped by type\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.groupBy(files, detectFile);\n     *         console.log(result);\n     *         // {\n     *         //     file: [ 'dir1/file1.txt' ],\n     *         //     none: [ 'dir4' ],\n     *         //     directory: [ 'dir2']\n     *         // }\n     *         // result is object containing the files grouped by type\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function groupBy (coll, iteratee, callback) {\n        return groupByLimit$1(coll, Infinity, iteratee, callback)\n    }\n\n    /**\n     * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n     *\n     * @name groupBySeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.groupBy]{@link module:Collections.groupBy}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a `key` to group the value under.\n     * Invoked with (value, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Result is an `Object` whose\n     * properties are arrays of values which returned the corresponding key.\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function groupBySeries (coll, iteratee, callback) {\n        return groupByLimit$1(coll, 1, iteratee, callback)\n    }\n\n    /**\n     * Logs the result of an `async` function to the `console`. Only works in\n     * Node.js or in browsers that support `console.log` and `console.error` (such\n     * as FF and Chrome). If multiple arguments are returned from the async\n     * function, `console.log` is called on each argument in order.\n     *\n     * @name log\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} function - The function you want to eventually apply\n     * all arguments to.\n     * @param {...*} arguments... - Any number of arguments to apply to the function.\n     * @example\n     *\n     * // in a module\n     * var hello = function(name, callback) {\n     *     setTimeout(function() {\n     *         callback(null, 'hello ' + name);\n     *     }, 1000);\n     * };\n     *\n     * // in the node repl\n     * node> async.log(hello, 'world');\n     * 'hello world'\n     */\n    var log = consoleFunc('log');\n\n    /**\n     * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name mapValuesLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.mapValues]{@link module:Collections.mapValues}\n     * @category Collection\n     * @param {Object} obj - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - A function to apply to each value and key\n     * in `coll`.\n     * The iteratee should complete with the transformed value as its result.\n     * Invoked with (value, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. `result` is a new object consisting\n     * of each key from `obj`, with each transformed value on the right-hand side.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapValuesLimit(obj, limit, iteratee, callback) {\n        callback = once(callback);\n        var newObj = {};\n        var _iteratee = wrapAsync(iteratee);\n        return eachOfLimit(limit)(obj, (val, key, next) => {\n            _iteratee(val, key, (err, result) => {\n                if (err) return next(err);\n                newObj[key] = result;\n                next(err);\n            });\n        }, err => callback(err, newObj));\n    }\n\n    var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n    /**\n     * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n     *\n     * Produces a new Object by mapping each value of `obj` through the `iteratee`\n     * function. The `iteratee` is called each `value` and `key` from `obj` and a\n     * callback for when it has finished processing. Each of these callbacks takes\n     * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n     * passes an error to its callback, the main `callback` (for the `mapValues`\n     * function) is immediately called with the error.\n     *\n     * Note, the order of the keys in the result is not guaranteed.  The keys will\n     * be roughly in the order they complete, (but this is very engine-specific)\n     *\n     * @name mapValues\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Object} obj - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each value and key\n     * in `coll`.\n     * The iteratee should complete with the transformed value as its result.\n     * Invoked with (value, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. `result` is a new object consisting\n     * of each key from `obj`, with each transformed value on the right-hand side.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     * // file4.txt does not exist\n     *\n     * const fileMap = {\n     *     f1: 'file1.txt',\n     *     f2: 'file2.txt',\n     *     f3: 'file3.txt'\n     * };\n     *\n     * const withMissingFileMap = {\n     *     f1: 'file1.txt',\n     *     f2: 'file2.txt',\n     *     f3: 'file4.txt'\n     * };\n     *\n     * // asynchronous function that returns the file size in bytes\n     * function getFileSizeInBytes(file, key, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         callback(null, stat.size);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n     *     if (err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(result);\n     *         // result is now a map of file size in bytes for each file, e.g.\n     *         // {\n     *         //     f1: 1000,\n     *         //     f2: 2000,\n     *         //     f3: 3000\n     *         // }\n     *     }\n     * });\n     *\n     * // Error handling\n     * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n     *     if (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     } else {\n     *         console.log(result);\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.mapValues(fileMap, getFileSizeInBytes)\n     * .then( result => {\n     *     console.log(result);\n     *     // result is now a map of file size in bytes for each file, e.g.\n     *     // {\n     *     //     f1: 1000,\n     *     //     f2: 2000,\n     *     //     f3: 3000\n     *     // }\n     * }).catch (err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n     * .then( result => {\n     *     console.log(result);\n     * }).catch (err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n     *         console.log(result);\n     *         // result is now a map of file size in bytes for each file, e.g.\n     *         // {\n     *         //     f1: 1000,\n     *         //     f2: 2000,\n     *         //     f3: 3000\n     *         // }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n     *         console.log(result);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     }\n     * }\n     *\n     */\n    function mapValues(obj, iteratee, callback) {\n        return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n    }\n\n    /**\n     * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n     *\n     * @name mapValuesSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.mapValues]{@link module:Collections.mapValues}\n     * @category Collection\n     * @param {Object} obj - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each value and key\n     * in `coll`.\n     * The iteratee should complete with the transformed value as its result.\n     * Invoked with (value, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. `result` is a new object consisting\n     * of each key from `obj`, with each transformed value on the right-hand side.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapValuesSeries(obj, iteratee, callback) {\n        return mapValuesLimit$1(obj, 1, iteratee, callback)\n    }\n\n    /**\n     * Caches the results of an async function. When creating a hash to store\n     * function results against, the callback is omitted from the hash and an\n     * optional hash function can be used.\n     *\n     * **Note: if the async function errs, the result will not be cached and\n     * subsequent calls will call the wrapped function.**\n     *\n     * If no hash function is specified, the first argument is used as a hash key,\n     * which may work reasonably if it is a string or a data type that converts to a\n     * distinct string. Note that objects and arrays will not behave reasonably.\n     * Neither will cases where the other arguments are significant. In such cases,\n     * specify your own hash function.\n     *\n     * The cache of results is exposed as the `memo` property of the function\n     * returned by `memoize`.\n     *\n     * @name memoize\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n     * @param {Function} hasher - An optional function for generating a custom hash\n     * for storing results. It has all the arguments applied to it apart from the\n     * callback, and must be synchronous.\n     * @returns {AsyncFunction} a memoized version of `fn`\n     * @example\n     *\n     * var slow_fn = function(name, callback) {\n     *     // do something\n     *     callback(null, result);\n     * };\n     * var fn = async.memoize(slow_fn);\n     *\n     * // fn can now be used as if it were slow_fn\n     * fn('some name', function() {\n     *     // callback\n     * });\n     */\n    function memoize(fn, hasher = v => v) {\n        var memo = Object.create(null);\n        var queues = Object.create(null);\n        var _fn = wrapAsync(fn);\n        var memoized = initialParams((args, callback) => {\n            var key = hasher(...args);\n            if (key in memo) {\n                setImmediate$1(() => callback(null, ...memo[key]));\n            } else if (key in queues) {\n                queues[key].push(callback);\n            } else {\n                queues[key] = [callback];\n                _fn(...args, (err, ...resultArgs) => {\n                    // #1465 don't memoize if an error occurred\n                    if (!err) {\n                        memo[key] = resultArgs;\n                    }\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                        q[i](err, ...resultArgs);\n                    }\n                });\n            }\n        });\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    }\n\n    /* istanbul ignore file */\n\n    /**\n     * Calls `callback` on a later loop around the event loop. In Node.js this just\n     * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n     * available, otherwise `setTimeout(callback, 0)`, which means other higher\n     * priority events may precede the execution of `callback`.\n     *\n     * This is used internally for browser-compatibility purposes.\n     *\n     * @name nextTick\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @see [async.setImmediate]{@link module:Utils.setImmediate}\n     * @category Util\n     * @param {Function} callback - The function to call on a later loop around\n     * the event loop. Invoked with (args...).\n     * @param {...*} args... - any number of additional arguments to pass to the\n     * callback on the next tick.\n     * @example\n     *\n     * var call_order = [];\n     * async.nextTick(function() {\n     *     call_order.push('two');\n     *     // call_order now equals ['one','two']\n     * });\n     * call_order.push('one');\n     *\n     * async.setImmediate(function (a, b, c) {\n     *     // a, b, and c equal 1, 2, and 3\n     * }, 1, 2, 3);\n     */\n    var _defer$1;\n\n    if (hasNextTick) {\n        _defer$1 = process.nextTick;\n    } else if (hasSetImmediate) {\n        _defer$1 = setImmediate;\n    } else {\n        _defer$1 = fallback;\n    }\n\n    var nextTick = wrap(_defer$1);\n\n    var parallel = awaitify((eachfn, tasks, callback) => {\n        var results = isArrayLike(tasks) ? [] : {};\n\n        eachfn(tasks, (task, key, taskCb) => {\n            wrapAsync(task)((err, ...result) => {\n                if (result.length < 2) {\n                    [result] = result;\n                }\n                results[key] = result;\n                taskCb(err);\n            });\n        }, err => callback(err, results));\n    }, 3);\n\n    /**\n     * Run the `tasks` collection of functions in parallel, without waiting until\n     * the previous function has completed. If any of the functions pass an error to\n     * its callback, the main `callback` is immediately called with the value of the\n     * error. Once the `tasks` have completed, the results are passed to the final\n     * `callback` as an array.\n     *\n     * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n     * parallel execution of code.  If your tasks do not use any timers or perform\n     * any I/O, they will actually be executed in series.  Any synchronous setup\n     * sections for each task will happen one after the other.  JavaScript remains\n     * single-threaded.\n     *\n     * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n     * execution of other tasks when a task fails.\n     *\n     * It is also possible to use an object instead of an array. Each property will\n     * be run as a function and the results will be passed to the final `callback`\n     * as an object instead of an array. This can be a more readable way of handling\n     * results from {@link async.parallel}.\n     *\n     * @name parallel\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n     * [async functions]{@link AsyncFunction} to run.\n     * Each async function can complete with any number of optional `result` values.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed successfully. This function gets a results array\n     * (or object) containing all the result arguments passed to the task callbacks.\n     * Invoked with (err, results).\n     * @returns {Promise} a promise, if a callback is not passed\n     *\n     * @example\n     *\n     * //Using Callbacks\n     * async.parallel([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ], function(err, results) {\n     *     console.log(results);\n     *     // results is equal to ['one','two'] even though\n     *     // the second function had a shorter timeout.\n     * });\n     *\n     * // an example using an object instead of an array\n     * async.parallel({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }, function(err, results) {\n     *     console.log(results);\n     *     // results is equal to: { one: 1, two: 2 }\n     * });\n     *\n     * //Using Promises\n     * async.parallel([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ]).then(results => {\n     *     console.log(results);\n     *     // results is equal to ['one','two'] even though\n     *     // the second function had a shorter timeout.\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // an example using an object instead of an array\n     * async.parallel({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }).then(results => {\n     *     console.log(results);\n     *     // results is equal to: { one: 1, two: 2 }\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * //Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.parallel([\n     *             function(callback) {\n     *                 setTimeout(function() {\n     *                     callback(null, 'one');\n     *                 }, 200);\n     *             },\n     *             function(callback) {\n     *                 setTimeout(function() {\n     *                     callback(null, 'two');\n     *                 }, 100);\n     *             }\n     *         ]);\n     *         console.log(results);\n     *         // results is equal to ['one','two'] even though\n     *         // the second function had a shorter timeout.\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // an example using an object instead of an array\n     * async () => {\n     *     try {\n     *         let results = await async.parallel({\n     *             one: function(callback) {\n     *                 setTimeout(function() {\n     *                     callback(null, 1);\n     *                 }, 200);\n     *             },\n     *            two: function(callback) {\n     *                 setTimeout(function() {\n     *                     callback(null, 2);\n     *                 }, 100);\n     *            }\n     *         });\n     *         console.log(results);\n     *         // results is equal to: { one: 1, two: 2 }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function parallel$1(tasks, callback) {\n        return parallel(eachOf$1, tasks, callback);\n    }\n\n    /**\n     * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name parallelLimit\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.parallel]{@link module:ControlFlow.parallel}\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n     * [async functions]{@link AsyncFunction} to run.\n     * Each async function can complete with any number of optional `result` values.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed successfully. This function gets a results array\n     * (or object) containing all the result arguments passed to the task callbacks.\n     * Invoked with (err, results).\n     * @returns {Promise} a promise, if a callback is not passed\n     */\n    function parallelLimit(tasks, limit, callback) {\n        return parallel(eachOfLimit(limit), tasks, callback);\n    }\n\n    /**\n     * A queue of tasks for the worker function to complete.\n     * @typedef {Iterable} QueueObject\n     * @memberOf module:ControlFlow\n     * @property {Function} length - a function returning the number of items\n     * waiting to be processed. Invoke with `queue.length()`.\n     * @property {boolean} started - a boolean indicating whether or not any\n     * items have been pushed and processed by the queue.\n     * @property {Function} running - a function returning the number of items\n     * currently being processed. Invoke with `queue.running()`.\n     * @property {Function} workersList - a function returning the array of items\n     * currently being processed. Invoke with `queue.workersList()`.\n     * @property {Function} idle - a function returning false if there are items\n     * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n     * @property {number} concurrency - an integer for determining how many `worker`\n     * functions should be run in parallel. This property can be changed after a\n     * `queue` is created to alter the concurrency on-the-fly.\n     * @property {number} payload - an integer that specifies how many items are\n     * passed to the worker function at a time. only applies if this is a\n     * [cargo]{@link module:ControlFlow.cargo} object\n     * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n     * once the `worker` has finished processing the task. Instead of a single task,\n     * a `tasks` array can be submitted. The respective callback is used for every\n     * task in the list. Invoke with `queue.push(task, [callback])`,\n     * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n     * Invoke with `queue.unshift(task, [callback])`.\n     * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n     * a promise that rejects if an error occurs.\n     * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n     * a promise that rejects if an error occurs.\n     * @property {Function} remove - remove items from the queue that match a test\n     * function.  The test function will be passed an object with a `data` property,\n     * and a `priority` property, if this is a\n     * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n     * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n     * `function ({data, priority}) {}` and returns a Boolean.\n     * @property {Function} saturated - a function that sets a callback that is\n     * called when the number of running workers hits the `concurrency` limit, and\n     * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n     * returns a promise for the next occurrence.\n     * @property {Function} unsaturated - a function that sets a callback that is\n     * called when the number of running workers is less than the `concurrency` &\n     * `buffer` limits, and further tasks will not be queued. If the callback is\n     * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n     * @property {number} buffer - A minimum threshold buffer in order to say that\n     * the `queue` is `unsaturated`.\n     * @property {Function} empty - a function that sets a callback that is called\n     * when the last item from the `queue` is given to a `worker`. If the callback\n     * is omitted, `q.empty()` returns a promise for the next occurrence.\n     * @property {Function} drain - a function that sets a callback that is called\n     * when the last item from the `queue` has returned from the `worker`. If the\n     * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n     * @property {Function} error - a function that sets a callback that is called\n     * when a task errors. Has the signature `function(error, task)`. If the\n     * callback is omitted, `error()` returns a promise that rejects on the next\n     * error.\n     * @property {boolean} paused - a boolean for determining whether the queue is\n     * in a paused state.\n     * @property {Function} pause - a function that pauses the processing of tasks\n     * until `resume()` is called. Invoke with `queue.pause()`.\n     * @property {Function} resume - a function that resumes the processing of\n     * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n     * @property {Function} kill - a function that removes the `drain` callback and\n     * empties remaining tasks from the queue forcing it to go idle. No more tasks\n     * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n     *\n     * @example\n     * const q = async.queue(worker, 2)\n     * q.push(item1)\n     * q.push(item2)\n     * q.push(item3)\n     * // queues are iterable, spread into an array to inspect\n     * const items = [...q] // [item1, item2, item3]\n     * // or use for of\n     * for (let item of q) {\n     *     console.log(item)\n     * }\n     *\n     * q.drain(() => {\n     *     console.log('all done')\n     * })\n     * // or\n     * await q.drain()\n     */\n\n    /**\n     * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n     * `queue` are processed in parallel (up to the `concurrency` limit). If all\n     * `worker`s are in progress, the task is queued until one becomes available.\n     * Once a `worker` completes a `task`, that `task`'s callback is called.\n     *\n     * @name queue\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An async function for processing a queued task.\n     * If you want to handle errors from an individual task, pass a callback to\n     * `q.push()`. Invoked with (task, callback).\n     * @param {number} [concurrency=1] - An `integer` for determining how many\n     * `worker` functions should be run in parallel.  If omitted, the concurrency\n     * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n     * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n     * attached as certain properties to listen for specific events during the\n     * lifecycle of the queue.\n     * @example\n     *\n     * // create a queue object with concurrency 2\n     * var q = async.queue(function(task, callback) {\n     *     console.log('hello ' + task.name);\n     *     callback();\n     * }, 2);\n     *\n     * // assign a callback\n     * q.drain(function() {\n     *     console.log('all items have been processed');\n     * });\n     * // or await the end\n     * await q.drain()\n     *\n     * // assign an error callback\n     * q.error(function(err, task) {\n     *     console.error('task experienced an error');\n     * });\n     *\n     * // add some items to the queue\n     * q.push({name: 'foo'}, function(err) {\n     *     console.log('finished processing foo');\n     * });\n     * // callback is optional\n     * q.push({name: 'bar'});\n     *\n     * // add some items to the queue (batch-wise)\n     * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n     *     console.log('finished processing item');\n     * });\n     *\n     * // add some items to the front of the queue\n     * q.unshift({name: 'bar'}, function (err) {\n     *     console.log('finished processing bar');\n     * });\n     */\n    function queue$1 (worker, concurrency) {\n        var _worker = wrapAsync(worker);\n        return queue((items, cb) => {\n            _worker(items[0], cb);\n        }, concurrency, 1);\n    }\n\n    // Binary min-heap implementation used for priority queue.\n    // Implementation is stable, i.e. push time is considered for equal priorities\n    class Heap {\n        constructor() {\n            this.heap = [];\n            this.pushCount = Number.MIN_SAFE_INTEGER;\n        }\n\n        get length() {\n            return this.heap.length;\n        }\n\n        empty () {\n            this.heap = [];\n            return this;\n        }\n\n        percUp(index) {\n            let p;\n\n            while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n                let t = this.heap[index];\n                this.heap[index] = this.heap[p];\n                this.heap[p] = t;\n\n                index = p;\n            }\n        }\n\n        percDown(index) {\n            let l;\n\n            while ((l=leftChi(index)) < this.heap.length) {\n                if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                    l = l+1;\n                }\n\n                if (smaller(this.heap[index], this.heap[l])) {\n                    break;\n                }\n\n                let t = this.heap[index];\n                this.heap[index] = this.heap[l];\n                this.heap[l] = t;\n\n                index = l;\n            }\n        }\n\n        push(node) {\n            node.pushCount = ++this.pushCount;\n            this.heap.push(node);\n            this.percUp(this.heap.length-1);\n        }\n\n        unshift(node) {\n            return this.heap.push(node);\n        }\n\n        shift() {\n            let [top] = this.heap;\n\n            this.heap[0] = this.heap[this.heap.length-1];\n            this.heap.pop();\n            this.percDown(0);\n\n            return top;\n        }\n\n        toArray() {\n            return [...this];\n        }\n\n        *[Symbol.iterator] () {\n            for (let i = 0; i < this.heap.length; i++) {\n                yield this.heap[i].data;\n            }\n        }\n\n        remove (testFn) {\n            let j = 0;\n            for (let i = 0; i < this.heap.length; i++) {\n                if (!testFn(this.heap[i])) {\n                    this.heap[j] = this.heap[i];\n                    j++;\n                }\n            }\n\n            this.heap.splice(j);\n\n            for (let i = parent(this.heap.length-1); i >= 0; i--) {\n                this.percDown(i);\n            }\n\n            return this;\n        }\n    }\n\n    function leftChi(i) {\n        return (i<<1)+1;\n    }\n\n    function parent(i) {\n        return ((i+1)>>1)-1;\n    }\n\n    function smaller(x, y) {\n        if (x.priority !== y.priority) {\n            return x.priority < y.priority;\n        }\n        else {\n            return x.pushCount < y.pushCount;\n        }\n    }\n\n    /**\n     * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n     * completed in ascending priority order.\n     *\n     * @name priorityQueue\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.queue]{@link module:ControlFlow.queue}\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An async function for processing a queued task.\n     * If you want to handle errors from an individual task, pass a callback to\n     * `q.push()`.\n     * Invoked with (task, callback).\n     * @param {number} concurrency - An `integer` for determining how many `worker`\n     * functions should be run in parallel.  If omitted, the concurrency defaults to\n     * `1`.  If the concurrency is `0`, an error is thrown.\n     * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are three\n     * differences between `queue` and `priorityQueue` objects:\n     * * `push(task, priority, [callback])` - `priority` should be a number. If an\n     *   array of `tasks` is given, all tasks will be assigned the same priority.\n     * * `pushAsync(task, priority, [callback])` - the same as `priorityQueue.push`,\n     *   except this returns a promise that rejects if an error occurs.\n     * * The `unshift` and `unshiftAsync` methods were removed.\n     */\n    function priorityQueue(worker, concurrency) {\n        // Start with a normal queue\n        var q = queue$1(worker, concurrency);\n\n        var {\n            push,\n            pushAsync\n        } = q;\n\n        q._tasks = new Heap();\n        q._createTaskItem = ({data, priority}, callback) => {\n            return {\n                data,\n                priority,\n                callback\n            };\n        };\n\n        function createDataItems(tasks, priority) {\n            if (!Array.isArray(tasks)) {\n                return {data: tasks, priority};\n            }\n            return tasks.map(data => { return {data, priority}; });\n        }\n\n        // Override push to accept second parameter representing priority\n        q.push = function(data, priority = 0, callback) {\n            return push(createDataItems(data, priority), callback);\n        };\n\n        q.pushAsync = function(data, priority = 0, callback) {\n            return pushAsync(createDataItems(data, priority), callback);\n        };\n\n        // Remove unshift functions\n        delete q.unshift;\n        delete q.unshiftAsync;\n\n        return q;\n    }\n\n    /**\n     * Runs the `tasks` array of functions in parallel, without waiting until the\n     * previous function has completed. Once any of the `tasks` complete or pass an\n     * error to its callback, the main `callback` is immediately called. It's\n     * equivalent to `Promise.race()`.\n     *\n     * @name race\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n     * to run. Each function can complete with an optional `result` value.\n     * @param {Function} callback - A callback to run once any of the functions have\n     * completed. This function gets an error or result from the first function that\n     * completed. Invoked with (err, result).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * async.race([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ],\n     * // main callback\n     * function(err, result) {\n     *     // the result will be equal to 'two' as it finishes earlier\n     * });\n     */\n    function race(tasks, callback) {\n        callback = once(callback);\n        if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n        if (!tasks.length) return callback();\n        for (var i = 0, l = tasks.length; i < l; i++) {\n            wrapAsync(tasks[i])(callback);\n        }\n    }\n\n    var race$1 = awaitify(race, 2);\n\n    /**\n     * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n     *\n     * @name reduceRight\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.reduce]{@link module:Collections.reduce}\n     * @alias foldr\n     * @category Collection\n     * @param {Array} array - A collection to iterate over.\n     * @param {*} memo - The initial state of the reduction.\n     * @param {AsyncFunction} iteratee - A function applied to each item in the\n     * array to produce the next step in the reduction.\n     * The `iteratee` should complete with the next state of the reduction.\n     * If the iteratee completes with an error, the reduction is stopped and the\n     * main `callback` is immediately called with the error.\n     * Invoked with (memo, item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result is the reduced value. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function reduceRight (array, memo, iteratee, callback) {\n        var reversed = [...array].reverse();\n        return reduce$1(reversed, memo, iteratee, callback);\n    }\n\n    /**\n     * Wraps the async function in another function that always completes with a\n     * result object, even when it errors.\n     *\n     * The result object has either the property `error` or `value`.\n     *\n     * @name reflect\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} fn - The async function you want to wrap\n     * @returns {Function} - A function that always passes null to it's callback as\n     * the error. The second argument to the callback will be an `object` with\n     * either an `error` or a `value` property.\n     * @example\n     *\n     * async.parallel([\n     *     async.reflect(function(callback) {\n     *         // do some stuff ...\n     *         callback(null, 'one');\n     *     }),\n     *     async.reflect(function(callback) {\n     *         // do some more stuff but error ...\n     *         callback('bad stuff happened');\n     *     }),\n     *     async.reflect(function(callback) {\n     *         // do some more stuff ...\n     *         callback(null, 'two');\n     *     })\n     * ],\n     * // optional callback\n     * function(err, results) {\n     *     // values\n     *     // results[0].value = 'one'\n     *     // results[1].error = 'bad stuff happened'\n     *     // results[2].value = 'two'\n     * });\n     */\n    function reflect(fn) {\n        var _fn = wrapAsync(fn);\n        return initialParams(function reflectOn(args, reflectCallback) {\n            args.push((error, ...cbArgs) => {\n                let retVal = {};\n                if (error) {\n                    retVal.error = error;\n                }\n                if (cbArgs.length > 0){\n                    var value = cbArgs;\n                    if (cbArgs.length <= 1) {\n                        [value] = cbArgs;\n                    }\n                    retVal.value = value;\n                }\n                reflectCallback(null, retVal);\n            });\n\n            return _fn.apply(this, args);\n        });\n    }\n\n    /**\n     * A helper function that wraps an array or an object of functions with `reflect`.\n     *\n     * @name reflectAll\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @see [async.reflect]{@link module:Utils.reflect}\n     * @category Util\n     * @param {Array|Object|Iterable} tasks - The collection of\n     * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n     * @returns {Array} Returns an array of async functions, each wrapped in\n     * `async.reflect`\n     * @example\n     *\n     * let tasks = [\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         // do some more stuff but error ...\n     *         callback(new Error('bad stuff happened'));\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ];\n     *\n     * async.parallel(async.reflectAll(tasks),\n     * // optional callback\n     * function(err, results) {\n     *     // values\n     *     // results[0].value = 'one'\n     *     // results[1].error = Error('bad stuff happened')\n     *     // results[2].value = 'two'\n     * });\n     *\n     * // an example using an object instead of an array\n     * let tasks = {\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         callback('two');\n     *     },\n     *     three: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'three');\n     *         }, 100);\n     *     }\n     * };\n     *\n     * async.parallel(async.reflectAll(tasks),\n     * // optional callback\n     * function(err, results) {\n     *     // values\n     *     // results.one.value = 'one'\n     *     // results.two.error = 'two'\n     *     // results.three.value = 'three'\n     * });\n     */\n    function reflectAll(tasks) {\n        var results;\n        if (Array.isArray(tasks)) {\n            results = tasks.map(reflect);\n        } else {\n            results = {};\n            Object.keys(tasks).forEach(key => {\n                results[key] = reflect.call(this, tasks[key]);\n            });\n        }\n        return results;\n    }\n\n    function reject(eachfn, arr, _iteratee, callback) {\n        const iteratee = wrapAsync(_iteratee);\n        return _filter(eachfn, arr, (value, cb) => {\n            iteratee(value, (err, v) => {\n                cb(err, !v);\n            });\n        }, callback);\n    }\n\n    /**\n     * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n     *\n     * @name reject\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.filter]{@link module:Collections.filter}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - An async truth test to apply to each item in\n     * `coll`.\n     * The should complete with a boolean value as its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     *\n     * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * // Using callbacks\n     * async.reject(fileList, fileExists, function(err, results) {\n     *    // [ 'dir3/file6.txt' ]\n     *    // results now equals an array of the non-existing files\n     * });\n     *\n     * // Using Promises\n     * async.reject(fileList, fileExists)\n     * .then( results => {\n     *     console.log(results);\n     *     // [ 'dir3/file6.txt' ]\n     *     // results now equals an array of the non-existing files\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.reject(fileList, fileExists);\n     *         console.log(results);\n     *         // [ 'dir3/file6.txt' ]\n     *         // results now equals an array of the non-existing files\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function reject$1 (coll, iteratee, callback) {\n        return reject(eachOf$1, coll, iteratee, callback)\n    }\n    var reject$2 = awaitify(reject$1, 3);\n\n    /**\n     * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name rejectLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.reject]{@link module:Collections.reject}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {Function} iteratee - An async truth test to apply to each item in\n     * `coll`.\n     * The should complete with a boolean value as its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function rejectLimit (coll, limit, iteratee, callback) {\n        return reject(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var rejectLimit$1 = awaitify(rejectLimit, 4);\n\n    /**\n     * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n     *\n     * @name rejectSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.reject]{@link module:Collections.reject}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - An async truth test to apply to each item in\n     * `coll`.\n     * The should complete with a boolean value as its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function rejectSeries (coll, iteratee, callback) {\n        return reject(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var rejectSeries$1 = awaitify(rejectSeries, 3);\n\n    function constant$1(value) {\n        return function () {\n            return value;\n        }\n    }\n\n    /**\n     * Attempts to get a successful response from `task` no more than `times` times\n     * before returning an error. If the task is successful, the `callback` will be\n     * passed the result of the successful task. If all attempts fail, the callback\n     * will be passed the error and result (if any) of the final attempt.\n     *\n     * @name retry\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @see [async.retryable]{@link module:ControlFlow.retryable}\n     * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n     * object with `times` and `interval` or a number.\n     * * `times` - The number of attempts to make before giving up.  The default\n     *   is `5`.\n     * * `interval` - The time to wait between retries, in milliseconds.  The\n     *   default is `0`. The interval may also be specified as a function of the\n     *   retry count (see example).\n     * * `errorFilter` - An optional synchronous function that is invoked on\n     *   erroneous result. If it returns `true` the retry attempts will continue;\n     *   if the function returns `false` the retry flow is aborted with the current\n     *   attempt's error and result being returned to the final callback.\n     *   Invoked with (err).\n     * * If `opts` is a number, the number specifies the number of times to retry,\n     *   with the default interval of `0`.\n     * @param {AsyncFunction} task - An async function to retry.\n     * Invoked with (callback).\n     * @param {Function} [callback] - An optional callback which is called when the\n     * task has succeeded, or after the final failed attempt. It receives the `err`\n     * and `result` arguments of the last attempt at completing the `task`. Invoked\n     * with (err, results).\n     * @returns {Promise} a promise if no callback provided\n     *\n     * @example\n     *\n     * // The `retry` function can be used as a stand-alone control flow by passing\n     * // a callback, as shown below:\n     *\n     * // try calling apiMethod 3 times\n     * async.retry(3, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod 3 times, waiting 200 ms between each retry\n     * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod 10 times with exponential backoff\n     * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n     * async.retry({\n     *   times: 10,\n     *   interval: function(retryCount) {\n     *     return 50 * Math.pow(2, retryCount);\n     *   }\n     * }, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod the default 5 times no delay between each retry\n     * async.retry(apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod only when error condition satisfies, all other\n     * // errors will abort the retry control flow and return to final callback\n     * async.retry({\n     *   errorFilter: function(err) {\n     *     return err.message === 'Temporary error'; // only retry on a specific error\n     *   }\n     * }, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // to retry individual methods that are not as reliable within other\n     * // control flow functions, use the `retryable` wrapper:\n     * async.auto({\n     *     users: api.getUsers.bind(api),\n     *     payments: async.retryable(3, api.getPayments.bind(api))\n     * }, function(err, results) {\n     *     // do something with the results\n     * });\n     *\n     */\n    const DEFAULT_TIMES = 5;\n    const DEFAULT_INTERVAL = 0;\n\n    function retry(opts, task, callback) {\n        var options = {\n            times: DEFAULT_TIMES,\n            intervalFunc: constant$1(DEFAULT_INTERVAL)\n        };\n\n        if (arguments.length < 3 && typeof opts === 'function') {\n            callback = task || promiseCallback();\n            task = opts;\n        } else {\n            parseTimes(options, opts);\n            callback = callback || promiseCallback();\n        }\n\n        if (typeof task !== 'function') {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n\n        var _task = wrapAsync(task);\n\n        var attempt = 1;\n        function retryAttempt() {\n            _task((err, ...args) => {\n                if (err === false) return\n                if (err && attempt++ < options.times &&\n                    (typeof options.errorFilter != 'function' ||\n                        options.errorFilter(err))) {\n                    setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n                } else {\n                    callback(err, ...args);\n                }\n            });\n        }\n\n        retryAttempt();\n        return callback[PROMISE_SYMBOL]\n    }\n\n    function parseTimes(acc, t) {\n        if (typeof t === 'object') {\n            acc.times = +t.times || DEFAULT_TIMES;\n\n            acc.intervalFunc = typeof t.interval === 'function' ?\n                t.interval :\n                constant$1(+t.interval || DEFAULT_INTERVAL);\n\n            acc.errorFilter = t.errorFilter;\n        } else if (typeof t === 'number' || typeof t === 'string') {\n            acc.times = +t || DEFAULT_TIMES;\n        } else {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n    }\n\n    /**\n     * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n     * wraps a task and makes it retryable, rather than immediately calling it\n     * with retries.\n     *\n     * @name retryable\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.retry]{@link module:ControlFlow.retry}\n     * @category Control Flow\n     * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n     * options, exactly the same as from `retry`, except for a `opts.arity` that\n     * is the arity of the `task` function, defaulting to `task.length`\n     * @param {AsyncFunction} task - the asynchronous function to wrap.\n     * This function will be passed any arguments passed to the returned wrapper.\n     * Invoked with (...args, callback).\n     * @returns {AsyncFunction} The wrapped function, which when invoked, will\n     * retry on an error, based on the parameters specified in `opts`.\n     * This function will accept the same parameters as `task`.\n     * @example\n     *\n     * async.auto({\n     *     dep1: async.retryable(3, getFromFlakyService),\n     *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n     *         maybeProcessData(results.dep1, cb);\n     *     })]\n     * }, callback);\n     */\n    function retryable (opts, task) {\n        if (!task) {\n            task = opts;\n            opts = null;\n        }\n        let arity = (opts && opts.arity) || task.length;\n        if (isAsync(task)) {\n            arity += 1;\n        }\n        var _task = wrapAsync(task);\n        return initialParams((args, callback) => {\n            if (args.length < arity - 1 || callback == null) {\n                args.push(callback);\n                callback = promiseCallback();\n            }\n            function taskFn(cb) {\n                _task(...args, cb);\n            }\n\n            if (opts) retry(opts, taskFn, callback);\n            else retry(taskFn, callback);\n\n            return callback[PROMISE_SYMBOL]\n        });\n    }\n\n    /**\n     * Run the functions in the `tasks` collection in series, each one running once\n     * the previous function has completed. If any functions in the series pass an\n     * error to its callback, no more functions are run, and `callback` is\n     * immediately called with the value of the error. Otherwise, `callback`\n     * receives an array of results when `tasks` have completed.\n     *\n     * It is also possible to use an object instead of an array. Each property will\n     * be run as a function, and the results will be passed to the final `callback`\n     * as an object instead of an array. This can be a more readable way of handling\n     *  results from {@link async.series}.\n     *\n     * **Note** that while many implementations preserve the order of object\n     * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n     * explicitly states that\n     *\n     * > The mechanics and order of enumerating the properties is not specified.\n     *\n     * So if you rely on the order in which your series of functions are executed,\n     * and want this to work on all platforms, consider using an array.\n     *\n     * @name series\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n     * [async functions]{@link AsyncFunction} to run in series.\n     * Each function can complete with any number of optional `result` values.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed. This function gets a results array (or object)\n     * containing all the result arguments passed to the `task` callbacks. Invoked\n     * with (err, result).\n     * @return {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * //Using Callbacks\n     * async.series([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             // do some async task\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             // then do another async task\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ], function(err, results) {\n     *     console.log(results);\n     *     // results is equal to ['one','two']\n     * });\n     *\n     * // an example using objects instead of arrays\n     * async.series({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             // do some async task\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             // then do another async task\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }, function(err, results) {\n     *     console.log(results);\n     *     // results is equal to: { one: 1, two: 2 }\n     * });\n     *\n     * //Using Promises\n     * async.series([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ]).then(results => {\n     *     console.log(results);\n     *     // results is equal to ['one','two']\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // an example using an object instead of an array\n     * async.series({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             // do some async task\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             // then do another async task\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }).then(results => {\n     *     console.log(results);\n     *     // results is equal to: { one: 1, two: 2 }\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * //Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.series([\n     *             function(callback) {\n     *                 setTimeout(function() {\n     *                     // do some async task\n     *                     callback(null, 'one');\n     *                 }, 200);\n     *             },\n     *             function(callback) {\n     *                 setTimeout(function() {\n     *                     // then do another async task\n     *                     callback(null, 'two');\n     *                 }, 100);\n     *             }\n     *         ]);\n     *         console.log(results);\n     *         // results is equal to ['one','two']\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // an example using an object instead of an array\n     * async () => {\n     *     try {\n     *         let results = await async.parallel({\n     *             one: function(callback) {\n     *                 setTimeout(function() {\n     *                     // do some async task\n     *                     callback(null, 1);\n     *                 }, 200);\n     *             },\n     *            two: function(callback) {\n     *                 setTimeout(function() {\n     *                     // then do another async task\n     *                     callback(null, 2);\n     *                 }, 100);\n     *            }\n     *         });\n     *         console.log(results);\n     *         // results is equal to: { one: 1, two: 2 }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function series(tasks, callback) {\n        return parallel(eachOfSeries$1, tasks, callback);\n    }\n\n    /**\n     * Returns `true` if at least one element in the `coll` satisfies an async test.\n     * If any iteratee call returns `true`, the main `callback` is immediately\n     * called.\n     *\n     * @name some\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias any\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collections in parallel.\n     * The iteratee should complete with a boolean `result` value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the iteratee functions have finished.\n     * Result will be either `true` or `false` depending on the values of the async\n     * tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * // Using callbacks\n     * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n     *    function(err, result) {\n     *        console.log(result);\n     *        // true\n     *        // result is true since some file in the list exists\n     *    }\n     *);\n     *\n     * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n     *    function(err, result) {\n     *        console.log(result);\n     *        // false\n     *        // result is false since none of the files exists\n     *    }\n     *);\n     *\n     * // Using Promises\n     * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n     * .then( result => {\n     *     console.log(result);\n     *     // true\n     *     // result is true since some file in the list exists\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n     * .then( result => {\n     *     console.log(result);\n     *     // false\n     *     // result is false since none of the files exists\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n     *         console.log(result);\n     *         // true\n     *         // result is true since some file in the list exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * async () => {\n     *     try {\n     *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n     *         console.log(result);\n     *         // false\n     *         // result is false since none of the files exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function some(coll, iteratee, callback) {\n        return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n    }\n    var some$1 = awaitify(some, 3);\n\n    /**\n     * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name someLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.some]{@link module:Collections.some}\n     * @alias anyLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collections in parallel.\n     * The iteratee should complete with a boolean `result` value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the iteratee functions have finished.\n     * Result will be either `true` or `false` depending on the values of the async\n     * tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function someLimit(coll, limit, iteratee, callback) {\n        return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n    }\n    var someLimit$1 = awaitify(someLimit, 4);\n\n    /**\n     * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n     *\n     * @name someSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.some]{@link module:Collections.some}\n     * @alias anySeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collections in series.\n     * The iteratee should complete with a boolean `result` value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the iteratee functions have finished.\n     * Result will be either `true` or `false` depending on the values of the async\n     * tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function someSeries(coll, iteratee, callback) {\n        return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var someSeries$1 = awaitify(someSeries, 3);\n\n    /**\n     * Sorts a list by the results of running each `coll` value through an async\n     * `iteratee`.\n     *\n     * @name sortBy\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a value to use as the sort criteria as\n     * its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} callback - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is the items\n     * from the original `coll` sorted by the values returned by the `iteratee`\n     * calls. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback passed\n     * @example\n     *\n     * // bigfile.txt is a file that is 251100 bytes in size\n     * // mediumfile.txt is a file that is 11000 bytes in size\n     * // smallfile.txt is a file that is 121 bytes in size\n     *\n     * // asynchronous function that returns the file size in bytes\n     * function getFileSizeInBytes(file, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         callback(null, stat.size);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n     *     function(err, results) {\n     *         if (err) {\n     *             console.log(err);\n     *         } else {\n     *             console.log(results);\n     *             // results is now the original array of files sorted by\n     *             // file size (ascending by default), e.g.\n     *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n     *         }\n     *     }\n     * );\n     *\n     * // By modifying the callback parameter the\n     * // sorting order can be influenced:\n     *\n     * // ascending order\n     * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n     *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n     *         if (getFileSizeErr) return callback(getFileSizeErr);\n     *         callback(null, fileSize);\n     *     });\n     * }, function(err, results) {\n     *         if (err) {\n     *             console.log(err);\n     *         } else {\n     *             console.log(results);\n     *             // results is now the original array of files sorted by\n     *             // file size (ascending by default), e.g.\n     *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n     *         }\n     *     }\n     * );\n     *\n     * // descending order\n     * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n     *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n     *         if (getFileSizeErr) {\n     *             return callback(getFileSizeErr);\n     *         }\n     *         callback(null, fileSize * -1);\n     *     });\n     * }, function(err, results) {\n     *         if (err) {\n     *             console.log(err);\n     *         } else {\n     *             console.log(results);\n     *             // results is now the original array of files sorted by\n     *             // file size (ascending by default), e.g.\n     *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n     *         }\n     *     }\n     * );\n     *\n     * // Error handling\n     * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n     *     function(err, results) {\n     *         if (err) {\n     *             console.log(err);\n     *             // [ Error: ENOENT: no such file or directory ]\n     *         } else {\n     *             console.log(results);\n     *         }\n     *     }\n     * );\n     *\n     * // Using Promises\n     * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n     * .then( results => {\n     *     console.log(results);\n     *     // results is now the original array of files sorted by\n     *     // file size (ascending by default), e.g.\n     *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error handling\n     * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n     * .then( results => {\n     *     console.log(results);\n     * }).catch( err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     * });\n     *\n     * // Using async/await\n     * (async () => {\n     *     try {\n     *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n     *         console.log(results);\n     *         // results is now the original array of files sorted by\n     *         // file size (ascending by default), e.g.\n     *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * })();\n     *\n     * // Error handling\n     * async () => {\n     *     try {\n     *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n     *         console.log(results);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     }\n     * }\n     *\n     */\n    function sortBy (coll, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return map$1(coll, (x, iterCb) => {\n            _iteratee(x, (err, criteria) => {\n                if (err) return iterCb(err);\n                iterCb(err, {value: x, criteria});\n            });\n        }, (err, results) => {\n            if (err) return callback(err);\n            callback(null, results.sort(comparator).map(v => v.value));\n        });\n\n        function comparator(left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n    }\n    var sortBy$1 = awaitify(sortBy, 3);\n\n    /**\n     * Sets a time limit on an asynchronous function. If the function does not call\n     * its callback within the specified milliseconds, it will be called with a\n     * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n     *\n     * @name timeout\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} asyncFn - The async function to limit in time.\n     * @param {number} milliseconds - The specified time limit.\n     * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n     * to timeout Error for more information..\n     * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n     * of the control flow functions.\n     * Invoke this function with the same parameters as you would `asyncFunc`.\n     * @example\n     *\n     * function myFunction(foo, callback) {\n     *     doAsyncTask(foo, function(err, data) {\n     *         // handle errors\n     *         if (err) return callback(err);\n     *\n     *         // do some stuff ...\n     *\n     *         // return processed data\n     *         return callback(null, data);\n     *     });\n     * }\n     *\n     * var wrapped = async.timeout(myFunction, 1000);\n     *\n     * // call `wrapped` as you would `myFunction`\n     * wrapped({ bar: 'bar' }, function(err, data) {\n     *     // if `myFunction` takes < 1000 ms to execute, `err`\n     *     // and `data` will have their expected values\n     *\n     *     // else `err` will be an Error with the code 'ETIMEDOUT'\n     * });\n     */\n    function timeout(asyncFn, milliseconds, info) {\n        var fn = wrapAsync(asyncFn);\n\n        return initialParams((args, callback) => {\n            var timedOut = false;\n            var timer;\n\n            function timeoutCallback() {\n                var name = asyncFn.name || 'anonymous';\n                var error  = new Error('Callback function \"' + name + '\" timed out.');\n                error.code = 'ETIMEDOUT';\n                if (info) {\n                    error.info = info;\n                }\n                timedOut = true;\n                callback(error);\n            }\n\n            args.push((...cbArgs) => {\n                if (!timedOut) {\n                    callback(...cbArgs);\n                    clearTimeout(timer);\n                }\n            });\n\n            // setup timer and call original function\n            timer = setTimeout(timeoutCallback, milliseconds);\n            fn(...args);\n        });\n    }\n\n    function range(size) {\n        var result = Array(size);\n        while (size--) {\n            result[size] = size;\n        }\n        return result;\n    }\n\n    /**\n     * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name timesLimit\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.times]{@link module:ControlFlow.times}\n     * @category Control Flow\n     * @param {number} count - The number of times to run the function.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - The async function to call `n` times.\n     * Invoked with the iteration index and a callback: (n, next).\n     * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n     * @returns {Promise} a promise, if no callback is provided\n     */\n    function timesLimit(count, limit, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return mapLimit$1(range(count), limit, _iteratee, callback);\n    }\n\n    /**\n     * Calls the `iteratee` function `n` times, and accumulates results in the same\n     * manner you would use with [map]{@link module:Collections.map}.\n     *\n     * @name times\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.map]{@link module:Collections.map}\n     * @category Control Flow\n     * @param {number} n - The number of times to run the function.\n     * @param {AsyncFunction} iteratee - The async function to call `n` times.\n     * Invoked with the iteration index and a callback: (n, next).\n     * @param {Function} callback - see {@link module:Collections.map}.\n     * @returns {Promise} a promise, if no callback is provided\n     * @example\n     *\n     * // Pretend this is some complicated async factory\n     * var createUser = function(id, callback) {\n     *     callback(null, {\n     *         id: 'user' + id\n     *     });\n     * };\n     *\n     * // generate 5 users\n     * async.times(5, function(n, next) {\n     *     createUser(n, function(err, user) {\n     *         next(err, user);\n     *     });\n     * }, function(err, users) {\n     *     // we should now have 5 users\n     * });\n     */\n    function times (n, iteratee, callback) {\n        return timesLimit(n, Infinity, iteratee, callback)\n    }\n\n    /**\n     * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n     *\n     * @name timesSeries\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.times]{@link module:ControlFlow.times}\n     * @category Control Flow\n     * @param {number} n - The number of times to run the function.\n     * @param {AsyncFunction} iteratee - The async function to call `n` times.\n     * Invoked with the iteration index and a callback: (n, next).\n     * @param {Function} callback - see {@link module:Collections.map}.\n     * @returns {Promise} a promise, if no callback is provided\n     */\n    function timesSeries (n, iteratee, callback) {\n        return timesLimit(n, 1, iteratee, callback)\n    }\n\n    /**\n     * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n     * element in parallel, each step potentially mutating an `accumulator` value.\n     * The type of the accumulator defaults to the type of collection passed in.\n     *\n     * @name transform\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n     * it will default to an empty Object or Array, depending on the type of `coll`\n     * @param {AsyncFunction} iteratee - A function applied to each item in the\n     * collection that potentially modifies the accumulator.\n     * Invoked with (accumulator, item, key, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result is the transformed accumulator.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     *\n     * // helper function that returns human-readable size format from bytes\n     * function formatBytes(bytes, decimals = 2) {\n     *   // implementation not included for brevity\n     *   return humanReadbleFilesize;\n     * }\n     *\n     * const fileList = ['file1.txt','file2.txt','file3.txt'];\n     *\n     * // asynchronous function that returns the file size, transformed to human-readable format\n     * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n     * function transformFileSize(acc, value, key, callback) {\n     *     fs.stat(value, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         acc[key] = formatBytes(stat.size);\n     *         callback(null);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.transform(fileList, transformFileSize, function(err, result) {\n     *     if(err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(result);\n     *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.transform(fileList, transformFileSize)\n     * .then(result => {\n     *     console.log(result);\n     *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * (async () => {\n     *     try {\n     *         let result = await async.transform(fileList, transformFileSize);\n     *         console.log(result);\n     *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * })();\n     *\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     *\n     * // helper function that returns human-readable size format from bytes\n     * function formatBytes(bytes, decimals = 2) {\n     *   // implementation not included for brevity\n     *   return humanReadbleFilesize;\n     * }\n     *\n     * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n     *\n     * // asynchronous function that returns the file size, transformed to human-readable format\n     * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n     * function transformFileSize(acc, value, key, callback) {\n     *     fs.stat(value, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         acc[key] = formatBytes(stat.size);\n     *         callback(null);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.transform(fileMap, transformFileSize, function(err, result) {\n     *     if(err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(result);\n     *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.transform(fileMap, transformFileSize)\n     * .then(result => {\n     *     console.log(result);\n     *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.transform(fileMap, transformFileSize);\n     *         console.log(result);\n     *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function transform (coll, accumulator, iteratee, callback) {\n        if (arguments.length <= 3 && typeof accumulator === 'function') {\n            callback = iteratee;\n            iteratee = accumulator;\n            accumulator = Array.isArray(coll) ? [] : {};\n        }\n        callback = once(callback || promiseCallback());\n        var _iteratee = wrapAsync(iteratee);\n\n        eachOf$1(coll, (v, k, cb) => {\n            _iteratee(accumulator, v, k, cb);\n        }, err => callback(err, accumulator));\n        return callback[PROMISE_SYMBOL]\n    }\n\n    /**\n     * It runs each task in series but stops whenever any of the functions were\n     * successful. If one of the tasks were successful, the `callback` will be\n     * passed the result of the successful task. If all tasks fail, the callback\n     * will be passed the error and result (if any) of the final attempt.\n     *\n     * @name tryEach\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n     * run, each function is passed a `callback(err, result)` it must call on\n     * completion with an error `err` (which can be `null`) and an optional `result`\n     * value.\n     * @param {Function} [callback] - An optional callback which is called when one\n     * of the tasks has succeeded, or all have failed. It receives the `err` and\n     * `result` arguments of the last attempt at completing the `task`. Invoked with\n     * (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     * async.tryEach([\n     *     function getDataFromFirstWebsite(callback) {\n     *         // Try getting the data from the first website\n     *         callback(err, data);\n     *     },\n     *     function getDataFromSecondWebsite(callback) {\n     *         // First website failed,\n     *         // Try getting the data from the backup website\n     *         callback(err, data);\n     *     }\n     * ],\n     * // optional callback\n     * function(err, results) {\n     *     Now do something with the data.\n     * });\n     *\n     */\n    function tryEach(tasks, callback) {\n        var error = null;\n        var result;\n        return eachSeries$1(tasks, (task, taskCb) => {\n            wrapAsync(task)((err, ...args) => {\n                if (err === false) return taskCb(err);\n\n                if (args.length < 2) {\n                    [result] = args;\n                } else {\n                    result = args;\n                }\n                error = err;\n                taskCb(err ? null : {});\n            });\n        }, () => callback(error, result));\n    }\n\n    var tryEach$1 = awaitify(tryEach);\n\n    /**\n     * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n     * unmemoized form. Handy for testing.\n     *\n     * @name unmemoize\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @see [async.memoize]{@link module:Utils.memoize}\n     * @category Util\n     * @param {AsyncFunction} fn - the memoized function\n     * @returns {AsyncFunction} a function that calls the original unmemoized function\n     */\n    function unmemoize(fn) {\n        return (...args) => {\n            return (fn.unmemoized || fn)(...args);\n        };\n    }\n\n    /**\n     * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n     * stopped, or an error occurs.\n     *\n     * @name whilst\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {AsyncFunction} test - asynchronous truth test to perform before each\n     * execution of `iteratee`. Invoked with ().\n     * @param {AsyncFunction} iteratee - An async function which is called each time\n     * `test` passes. Invoked with (callback).\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has failed and repeated execution of `iteratee` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `iteratee`'s\n     * callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * var count = 0;\n     * async.whilst(\n     *     function test(cb) { cb(null, count < 5); },\n     *     function iter(callback) {\n     *         count++;\n     *         setTimeout(function() {\n     *             callback(null, count);\n     *         }, 1000);\n     *     },\n     *     function (err, n) {\n     *         // 5 seconds have passed, n = 5\n     *     }\n     * );\n     */\n    function whilst(test, iteratee, callback) {\n        callback = onlyOnce(callback);\n        var _fn = wrapAsync(iteratee);\n        var _test = wrapAsync(test);\n        var results = [];\n\n        function next(err, ...rest) {\n            if (err) return callback(err);\n            results = rest;\n            if (err === false) return;\n            _test(check);\n        }\n\n        function check(err, truth) {\n            if (err) return callback(err);\n            if (err === false) return;\n            if (!truth) return callback(null, ...results);\n            _fn(next);\n        }\n\n        return _test(check);\n    }\n    var whilst$1 = awaitify(whilst, 3);\n\n    /**\n     * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n     * stopped, or an error occurs. `callback` will be passed an error and any\n     * arguments passed to the final `iteratee`'s callback.\n     *\n     * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n     *\n     * @name until\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.whilst]{@link module:ControlFlow.whilst}\n     * @category Control Flow\n     * @param {AsyncFunction} test - asynchronous truth test to perform before each\n     * execution of `iteratee`. Invoked with (callback).\n     * @param {AsyncFunction} iteratee - An async function which is called each time\n     * `test` fails. Invoked with (callback).\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has passed and repeated execution of `iteratee` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `iteratee`'s\n     * callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if a callback is not passed\n     *\n     * @example\n     * const results = []\n     * let finished = false\n     * async.until(function test(cb) {\n     *     cb(null, finished)\n     * }, function iter(next) {\n     *     fetchPage(url, (err, body) => {\n     *         if (err) return next(err)\n     *         results = results.concat(body.objects)\n     *         finished = !!body.next\n     *         next(err)\n     *     })\n     * }, function done (err) {\n     *     // all pages have been fetched\n     * })\n     */\n    function until(test, iteratee, callback) {\n        const _test = wrapAsync(test);\n        return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n    }\n\n    /**\n     * Runs the `tasks` array of functions in series, each passing their results to\n     * the next in the array. However, if any of the `tasks` pass an error to their\n     * own callback, the next function is not executed, and the main `callback` is\n     * immediately called with the error.\n     *\n     * @name waterfall\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n     * to run.\n     * Each function should complete with any number of `result` values.\n     * The `result` values will be passed as arguments, in order, to the next task.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed. This will be passed the results of the last task's\n     * callback. Invoked with (err, [results]).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * async.waterfall([\n     *     function(callback) {\n     *         callback(null, 'one', 'two');\n     *     },\n     *     function(arg1, arg2, callback) {\n     *         // arg1 now equals 'one' and arg2 now equals 'two'\n     *         callback(null, 'three');\n     *     },\n     *     function(arg1, callback) {\n     *         // arg1 now equals 'three'\n     *         callback(null, 'done');\n     *     }\n     * ], function (err, result) {\n     *     // result now equals 'done'\n     * });\n     *\n     * // Or, with named functions:\n     * async.waterfall([\n     *     myFirstFunction,\n     *     mySecondFunction,\n     *     myLastFunction,\n     * ], function (err, result) {\n     *     // result now equals 'done'\n     * });\n     * function myFirstFunction(callback) {\n     *     callback(null, 'one', 'two');\n     * }\n     * function mySecondFunction(arg1, arg2, callback) {\n     *     // arg1 now equals 'one' and arg2 now equals 'two'\n     *     callback(null, 'three');\n     * }\n     * function myLastFunction(arg1, callback) {\n     *     // arg1 now equals 'three'\n     *     callback(null, 'done');\n     * }\n     */\n    function waterfall (tasks, callback) {\n        callback = once(callback);\n        if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n        if (!tasks.length) return callback();\n        var taskIndex = 0;\n\n        function nextTask(args) {\n            var task = wrapAsync(tasks[taskIndex++]);\n            task(...args, onlyOnce(next));\n        }\n\n        function next(err, ...args) {\n            if (err === false) return\n            if (err || taskIndex === tasks.length) {\n                return callback(err, ...args);\n            }\n            nextTask(args);\n        }\n\n        nextTask([]);\n    }\n\n    var waterfall$1 = awaitify(waterfall);\n\n    /**\n     * An \"async function\" in the context of Async is an asynchronous function with\n     * a variable number of parameters, with the final parameter being a callback.\n     * (`function (arg1, arg2, ..., callback) {}`)\n     * The final callback is of the form `callback(err, results...)`, which must be\n     * called once the function is completed.  The callback should be called with a\n     * Error as its first argument to signal that an error occurred.\n     * Otherwise, if no error occurred, it should be called with `null` as the first\n     * argument, and any additional `result` arguments that may apply, to signal\n     * successful completion.\n     * The callback must be called exactly once, ideally on a later tick of the\n     * JavaScript event loop.\n     *\n     * This type of function is also referred to as a \"Node-style async function\",\n     * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n     * library are themselves CPS/Node-style async functions, or functions that\n     * return CPS/Node-style async functions.\n     *\n     * Wherever we accept a Node-style async function, we also directly accept an\n     * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n     * In this case, the `async` function will not be passed a final callback\n     * argument, and any thrown error will be used as the `err` argument of the\n     * implicit callback, and the return value will be used as the `result` value.\n     * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n     * argument, and a `resolved` value becomes the `result`.)\n     *\n     * Note, due to JavaScript limitations, we can only detect native `async`\n     * functions and not transpilied implementations.\n     * Your environment must have `async`/`await` support for this to work.\n     * (e.g. Node > v7.6, or a recent version of a modern browser).\n     * If you are using `async` functions through a transpiler (e.g. Babel), you\n     * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n     * because the `async function` will be compiled to an ordinary function that\n     * returns a promise.\n     *\n     * @typedef {Function} AsyncFunction\n     * @static\n     */\n\n    var index = {\n        apply,\n        applyEach: applyEach$1,\n        applyEachSeries,\n        asyncify,\n        auto,\n        autoInject,\n        cargo,\n        cargoQueue: cargo$1,\n        compose,\n        concat: concat$1,\n        concatLimit: concatLimit$1,\n        concatSeries: concatSeries$1,\n        constant,\n        detect: detect$1,\n        detectLimit: detectLimit$1,\n        detectSeries: detectSeries$1,\n        dir,\n        doUntil,\n        doWhilst: doWhilst$1,\n        each,\n        eachLimit: eachLimit$2,\n        eachOf: eachOf$1,\n        eachOfLimit: eachOfLimit$2,\n        eachOfSeries: eachOfSeries$1,\n        eachSeries: eachSeries$1,\n        ensureAsync,\n        every: every$1,\n        everyLimit: everyLimit$1,\n        everySeries: everySeries$1,\n        filter: filter$1,\n        filterLimit: filterLimit$1,\n        filterSeries: filterSeries$1,\n        forever: forever$1,\n        groupBy,\n        groupByLimit: groupByLimit$1,\n        groupBySeries,\n        log,\n        map: map$1,\n        mapLimit: mapLimit$1,\n        mapSeries: mapSeries$1,\n        mapValues,\n        mapValuesLimit: mapValuesLimit$1,\n        mapValuesSeries,\n        memoize,\n        nextTick,\n        parallel: parallel$1,\n        parallelLimit,\n        priorityQueue,\n        queue: queue$1,\n        race: race$1,\n        reduce: reduce$1,\n        reduceRight,\n        reflect,\n        reflectAll,\n        reject: reject$2,\n        rejectLimit: rejectLimit$1,\n        rejectSeries: rejectSeries$1,\n        retry,\n        retryable,\n        seq,\n        series,\n        setImmediate: setImmediate$1,\n        some: some$1,\n        someLimit: someLimit$1,\n        someSeries: someSeries$1,\n        sortBy: sortBy$1,\n        timeout,\n        times,\n        timesLimit,\n        timesSeries,\n        transform,\n        tryEach: tryEach$1,\n        unmemoize,\n        until,\n        waterfall: waterfall$1,\n        whilst: whilst$1,\n\n        // aliases\n        all: every$1,\n        allLimit: everyLimit$1,\n        allSeries: everySeries$1,\n        any: some$1,\n        anyLimit: someLimit$1,\n        anySeries: someSeries$1,\n        find: detect$1,\n        findLimit: detectLimit$1,\n        findSeries: detectSeries$1,\n        flatMap: concat$1,\n        flatMapLimit: concatLimit$1,\n        flatMapSeries: concatSeries$1,\n        forEach: each,\n        forEachSeries: eachSeries$1,\n        forEachLimit: eachLimit$2,\n        forEachOf: eachOf$1,\n        forEachOfSeries: eachOfSeries$1,\n        forEachOfLimit: eachOfLimit$2,\n        inject: reduce$1,\n        foldl: reduce$1,\n        foldr: reduceRight,\n        select: filter$1,\n        selectLimit: filterLimit$1,\n        selectSeries: filterSeries$1,\n        wrapSync: asyncify,\n        during: whilst$1,\n        doDuring: doWhilst$1\n    };\n\n    exports.default = index;\n    exports.apply = apply;\n    exports.applyEach = applyEach$1;\n    exports.applyEachSeries = applyEachSeries;\n    exports.asyncify = asyncify;\n    exports.auto = auto;\n    exports.autoInject = autoInject;\n    exports.cargo = cargo;\n    exports.cargoQueue = cargo$1;\n    exports.compose = compose;\n    exports.concat = concat$1;\n    exports.concatLimit = concatLimit$1;\n    exports.concatSeries = concatSeries$1;\n    exports.constant = constant;\n    exports.detect = detect$1;\n    exports.detectLimit = detectLimit$1;\n    exports.detectSeries = detectSeries$1;\n    exports.dir = dir;\n    exports.doUntil = doUntil;\n    exports.doWhilst = doWhilst$1;\n    exports.each = each;\n    exports.eachLimit = eachLimit$2;\n    exports.eachOf = eachOf$1;\n    exports.eachOfLimit = eachOfLimit$2;\n    exports.eachOfSeries = eachOfSeries$1;\n    exports.eachSeries = eachSeries$1;\n    exports.ensureAsync = ensureAsync;\n    exports.every = every$1;\n    exports.everyLimit = everyLimit$1;\n    exports.everySeries = everySeries$1;\n    exports.filter = filter$1;\n    exports.filterLimit = filterLimit$1;\n    exports.filterSeries = filterSeries$1;\n    exports.forever = forever$1;\n    exports.groupBy = groupBy;\n    exports.groupByLimit = groupByLimit$1;\n    exports.groupBySeries = groupBySeries;\n    exports.log = log;\n    exports.map = map$1;\n    exports.mapLimit = mapLimit$1;\n    exports.mapSeries = mapSeries$1;\n    exports.mapValues = mapValues;\n    exports.mapValuesLimit = mapValuesLimit$1;\n    exports.mapValuesSeries = mapValuesSeries;\n    exports.memoize = memoize;\n    exports.nextTick = nextTick;\n    exports.parallel = parallel$1;\n    exports.parallelLimit = parallelLimit;\n    exports.priorityQueue = priorityQueue;\n    exports.queue = queue$1;\n    exports.race = race$1;\n    exports.reduce = reduce$1;\n    exports.reduceRight = reduceRight;\n    exports.reflect = reflect;\n    exports.reflectAll = reflectAll;\n    exports.reject = reject$2;\n    exports.rejectLimit = rejectLimit$1;\n    exports.rejectSeries = rejectSeries$1;\n    exports.retry = retry;\n    exports.retryable = retryable;\n    exports.seq = seq;\n    exports.series = series;\n    exports.setImmediate = setImmediate$1;\n    exports.some = some$1;\n    exports.someLimit = someLimit$1;\n    exports.someSeries = someSeries$1;\n    exports.sortBy = sortBy$1;\n    exports.timeout = timeout;\n    exports.times = times;\n    exports.timesLimit = timesLimit;\n    exports.timesSeries = timesSeries;\n    exports.transform = transform;\n    exports.tryEach = tryEach$1;\n    exports.unmemoize = unmemoize;\n    exports.until = until;\n    exports.waterfall = waterfall$1;\n    exports.whilst = whilst$1;\n    exports.all = every$1;\n    exports.allLimit = everyLimit$1;\n    exports.allSeries = everySeries$1;\n    exports.any = some$1;\n    exports.anyLimit = someLimit$1;\n    exports.anySeries = someSeries$1;\n    exports.find = detect$1;\n    exports.findLimit = detectLimit$1;\n    exports.findSeries = detectSeries$1;\n    exports.flatMap = concat$1;\n    exports.flatMapLimit = concatLimit$1;\n    exports.flatMapSeries = concatSeries$1;\n    exports.forEach = each;\n    exports.forEachSeries = eachSeries$1;\n    exports.forEachLimit = eachLimit$2;\n    exports.forEachOf = eachOf$1;\n    exports.forEachOfSeries = eachOfSeries$1;\n    exports.forEachOfLimit = eachOfLimit$2;\n    exports.inject = reduce$1;\n    exports.foldl = reduce$1;\n    exports.foldr = reduceRight;\n    exports.select = filter$1;\n    exports.selectLimit = filterLimit$1;\n    exports.selectSeries = filterSeries$1;\n    exports.wrapSync = asyncify;\n    exports.during = whilst$1;\n    exports.doDuring = doWhilst$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"],"mappings":"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IAAIqD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsM,UAAU,CAACxO,MAA/B,EAAuCkC,CAAC,EAAxC,EAA4C;QACxC,IAAIsM,UAAU,CAACtM,CAAD,CAAd,EAAmB;UACfrD,MAAM,GAAGA,MAAM,CAAC+B,MAAP,CAAc,GAAG4N,UAAU,CAACtM,CAAD,CAA3B,CAAT;QACH;MACJ;;MAED,OAAO1E,QAAQ,CAAC0B,GAAD,EAAML,MAAN,CAAf;IACH,CAdgB,CAAjB;EAeH;;EACD,IAAI4P,aAAa,GAAG3O,QAAQ,CAACwO,WAAD,EAAc,CAAd,CAA5B;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,SAAS1N,MAAT,CAAgBmB,IAAhB,EAAsBhB,QAAtB,EAAgCvD,QAAhC,EAA0C;IACtC,OAAOiR,aAAa,CAAC1M,IAAD,EAAOsC,QAAP,EAAiBtD,QAAjB,EAA2BvD,QAA3B,CAApB;EACH;;EACD,IAAIkR,QAAQ,GAAG5O,QAAQ,CAACc,MAAD,EAAS,CAAT,CAAvB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,SAAS+N,YAAT,CAAsB5M,IAAtB,EAA4BhB,QAA5B,EAAsCvD,QAAtC,EAAgD;IAC5C,OAAOiR,aAAa,CAAC1M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,IAAJ,EAAU,CAAC6B,GAAD,EAAMiR,KAAN,KAAgBxP,EAAE,CAAEzB,GAAF,EAAO,CAACiR,KAAR,CAA5B,CAAL;IACH,CAHgB,EAGd3S,QAHc,CAAjB;EAIH;;EAED,SAAS8S,aAAT,CAAuBvP,QAAvB,EAAiC;IAC7B,OAAO,CAAC/B,KAAD,EAAQqC,KAAR,EAAe7D,QAAf,KAA4BuD,QAAQ,CAAC/B,KAAD,EAAQxB,QAAR,CAA3C;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,SAAS+S,SAAT,CAAmBxO,IAAnB,EAAyBhB,QAAzB,EAAmCvD,QAAnC,EAA6C;IACzC,OAAOgH,QAAQ,CAACzC,IAAD,EAAOuO,aAAa,CAAC1Q,SAAS,CAACmB,QAAD,CAAV,CAApB,EAA2CvD,QAA3C,CAAf;EACH;;EAED,IAAIgT,IAAI,GAAG1Q,QAAQ,CAACyQ,SAAD,EAAY,CAAZ,CAAnB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,SAASE,WAAT,CAAqB1O,IAArB,EAA2BiB,KAA3B,EAAkCjC,QAAlC,EAA4CvD,QAA5C,EAAsD;IAClD,OAAOkG,WAAW,CAACV,KAAD,CAAX,CAAmBjB,IAAnB,EAAyBuO,aAAa,CAAC1Q,SAAS,CAACmB,QAAD,CAAV,CAAtC,EAA6DvD,QAA7D,CAAP;EACH;;EACD,IAAIkT,WAAW,GAAG5Q,QAAQ,CAAC2Q,WAAD,EAAc,CAAd,CAA1B;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,SAASE,UAAT,CAAoB5O,IAApB,EAA0BhB,QAA1B,EAAoCvD,QAApC,EAA8C;IAC1C,OAAOkT,WAAW,CAAC3O,IAAD,EAAO,CAAP,EAAUhB,QAAV,EAAoBvD,QAApB,CAAlB;EACH;;EACD,IAAIoT,YAAY,GAAG9Q,QAAQ,CAAC6Q,UAAD,EAAa,CAAb,CAA3B;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,SAASE,WAAT,CAAqBzT,EAArB,EAAyB;IACrB,IAAIsB,OAAO,CAACtB,EAAD,CAAX,EAAiB,OAAOA,EAAP;IACjB,OAAO,YAAiC;MAAA,oCAApBC,IAAoB;QAApBA,IAAoB;MAAA;;MACpC,IAAIG,QAAQ,GAAGH,IAAI,CAACI,GAAL,EAAf;MACA,IAAIqT,IAAI,GAAG,IAAX;MACAzT,IAAI,CAACgJ,IAAL,CAAU,YAAkB;QAAA,oCAAd0K,SAAc;UAAdA,SAAc;QAAA;;QACxB,IAAID,IAAJ,EAAU;UACNvS,cAAc,CAAC,MAAMf,QAAQ,CAAC,GAAGuT,SAAJ,CAAf,CAAd;QACH,CAFD,MAEO;UACHvT,QAAQ,CAAC,GAAGuT,SAAJ,CAAR;QACH;MACJ,CAND;MAOA3T,EAAE,CAACD,KAAH,CAAS,IAAT,EAAeE,IAAf;MACAyT,IAAI,GAAG,KAAP;IACH,CAZD;EAaH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,SAASE,KAAT,CAAejP,IAAf,EAAqBhB,QAArB,EAA+BvD,QAA/B,EAAyC;IACrC,OAAOuR,aAAa,CAACM,IAAI,IAAI,CAACA,IAAV,EAAgBlK,GAAG,IAAI,CAACA,GAAxB,CAAb,CAA0CX,QAA1C,EAAoDzC,IAApD,EAA0DhB,QAA1D,EAAoEvD,QAApE,CAAP;EACH;;EACD,IAAIyT,OAAO,GAAGnR,QAAQ,CAACkR,KAAD,EAAQ,CAAR,CAAtB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,SAASE,UAAT,CAAoBnP,IAApB,EAA0BiB,KAA1B,EAAiCjC,QAAjC,EAA2CvD,QAA3C,EAAqD;IACjD,OAAOuR,aAAa,CAACM,IAAI,IAAI,CAACA,IAAV,EAAgBlK,GAAG,IAAI,CAACA,GAAxB,CAAb,CAA0CzB,WAAW,CAACV,KAAD,CAArD,EAA8DjB,IAA9D,EAAoEhB,QAApE,EAA8EvD,QAA9E,CAAP;EACH;;EACD,IAAI2T,YAAY,GAAGrR,QAAQ,CAACoR,UAAD,EAAa,CAAb,CAA3B;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,SAASE,WAAT,CAAqBrP,IAArB,EAA2BhB,QAA3B,EAAqCvD,QAArC,EAA+C;IAC3C,OAAOuR,aAAa,CAACM,IAAI,IAAI,CAACA,IAAV,EAAgBlK,GAAG,IAAI,CAACA,GAAxB,CAAb,CAA0CN,cAA1C,EAA0D9C,IAA1D,EAAgEhB,QAAhE,EAA0EvD,QAA1E,CAAP;EACH;;EACD,IAAI6T,aAAa,GAAGvR,QAAQ,CAACsR,WAAD,EAAc,CAAd,CAA5B;;EAEA,SAASE,WAAT,CAAqB/Q,MAArB,EAA6BO,GAA7B,EAAkCC,QAAlC,EAA4CvD,QAA5C,EAAsD;IAClD,IAAI+T,WAAW,GAAG,IAAIrL,KAAJ,CAAUpF,GAAG,CAACd,MAAd,CAAlB;IACAO,MAAM,CAACO,GAAD,EAAM,CAAC6M,CAAD,EAAItM,KAAJ,EAAWD,MAAX,KAAsB;MAC9BL,QAAQ,CAAC4M,CAAD,EAAI,CAACzO,GAAD,EAAMoC,CAAN,KAAY;QACpBiQ,WAAW,CAAClQ,KAAD,CAAX,GAAqB,CAAC,CAACC,CAAvB;QACAF,MAAM,CAAClC,GAAD,CAAN;MACH,CAHO,CAAR;IAIH,CALK,EAKHA,GAAG,IAAI;MACN,IAAIA,GAAJ,EAAS,OAAO1B,QAAQ,CAAC0B,GAAD,CAAf;MACT,IAAI8B,OAAO,GAAG,EAAd;;MACA,KAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,GAAG,CAACd,MAAxB,EAAgCkC,CAAC,EAAjC,EAAqC;QACjC,IAAIqP,WAAW,CAACrP,CAAD,CAAf,EAAoBlB,OAAO,CAACqF,IAAR,CAAavF,GAAG,CAACoB,CAAD,CAAhB;MACvB;;MACD1E,QAAQ,CAAC,IAAD,EAAOwD,OAAP,CAAR;IACH,CAZK,CAAN;EAaH;;EAED,SAASwQ,aAAT,CAAuBjR,MAAvB,EAA+BwB,IAA/B,EAAqChB,QAArC,EAA+CvD,QAA/C,EAAyD;IACrD,IAAIwD,OAAO,GAAG,EAAd;IACAT,MAAM,CAACwB,IAAD,EAAO,CAAC4L,CAAD,EAAItM,KAAJ,EAAWD,MAAX,KAAsB;MAC/BL,QAAQ,CAAC4M,CAAD,EAAI,CAACzO,GAAD,EAAMoC,CAAN,KAAY;QACpB,IAAIpC,GAAJ,EAAS,OAAOkC,MAAM,CAAClC,GAAD,CAAb;;QACT,IAAIoC,CAAJ,EAAO;UACHN,OAAO,CAACqF,IAAR,CAAa;YAAChF,KAAD;YAAQrC,KAAK,EAAE2O;UAAf,CAAb;QACH;;QACDvM,MAAM,CAAClC,GAAD,CAAN;MACH,CANO,CAAR;IAOH,CARK,EAQHA,GAAG,IAAI;MACN,IAAIA,GAAJ,EAAS,OAAO1B,QAAQ,CAAC0B,GAAD,CAAf;MACT1B,QAAQ,CAAC,IAAD,EAAOwD,OAAO,CACjByQ,IADU,CACL,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACrQ,KAAF,GAAUsQ,CAAC,CAACtQ,KADjB,EAEVoD,GAFU,CAENnD,CAAC,IAAIA,CAAC,CAACtC,KAFD,CAAP,CAAR;IAGH,CAbK,CAAN;EAcH;;EAED,SAAS4S,OAAT,CAAiBrR,MAAjB,EAAyBwB,IAAzB,EAA+BhB,QAA/B,EAAyCvD,QAAzC,EAAmD;IAC/C,IAAIkO,MAAM,GAAGnK,WAAW,CAACQ,IAAD,CAAX,GAAoBuP,WAApB,GAAkCE,aAA/C;IACA,OAAO9F,MAAM,CAACnL,MAAD,EAASwB,IAAT,EAAenC,SAAS,CAACmB,QAAD,CAAxB,EAAoCvD,QAApC,CAAb;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,SAASkO,MAAT,CAAiB3J,IAAjB,EAAuBhB,QAAvB,EAAiCvD,QAAjC,EAA2C;IACvC,OAAOoU,OAAO,CAACpN,QAAD,EAAWzC,IAAX,EAAiBhB,QAAjB,EAA2BvD,QAA3B,CAAd;EACH;;EACD,IAAIqU,QAAQ,GAAG/R,QAAQ,CAAC4L,MAAD,EAAS,CAAT,CAAvB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,SAASoG,WAAT,CAAsB/P,IAAtB,EAA4BiB,KAA5B,EAAmCjC,QAAnC,EAA6CvD,QAA7C,EAAuD;IACnD,OAAOoU,OAAO,CAAClO,WAAW,CAACV,KAAD,CAAZ,EAAqBjB,IAArB,EAA2BhB,QAA3B,EAAqCvD,QAArC,CAAd;EACH;;EACD,IAAIuU,aAAa,GAAGjS,QAAQ,CAACgS,WAAD,EAAc,CAAd,CAA5B;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,SAASE,YAAT,CAAuBjQ,IAAvB,EAA6BhB,QAA7B,EAAuCvD,QAAvC,EAAiD;IAC7C,OAAOoU,OAAO,CAAC/M,cAAD,EAAiB9C,IAAjB,EAAuBhB,QAAvB,EAAiCvD,QAAjC,CAAd;EACH;;EACD,IAAIyU,cAAc,GAAGnS,QAAQ,CAACkS,YAAD,EAAe,CAAf,CAA7B;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,SAASE,OAAT,CAAiB9U,EAAjB,EAAqB+U,OAArB,EAA8B;IAC1B,IAAI3P,IAAI,GAAGK,QAAQ,CAACsP,OAAD,CAAnB;IACA,IAAIlM,IAAI,GAAGrG,SAAS,CAACiR,WAAW,CAACzT,EAAD,CAAZ,CAApB;;IAEA,SAASgF,IAAT,CAAclD,GAAd,EAAmB;MACf,IAAIA,GAAJ,EAAS,OAAOsD,IAAI,CAACtD,GAAD,CAAX;MACT,IAAIA,GAAG,KAAK,KAAZ,EAAmB;MACnB+G,IAAI,CAAC7D,IAAD,CAAJ;IACH;;IACD,OAAOA,IAAI,EAAX;EACH;;EACD,IAAIgQ,SAAS,GAAGtS,QAAQ,CAACoS,OAAD,EAAU,CAAV,CAAxB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,SAASG,YAAT,CAAsBtQ,IAAtB,EAA4BiB,KAA5B,EAAmCjC,QAAnC,EAA6CvD,QAA7C,EAAuD;IACnD,IAAI0D,SAAS,GAAGtB,SAAS,CAACmB,QAAD,CAAzB;;IACA,OAAOsN,UAAU,CAACtM,IAAD,EAAOiB,KAAP,EAAc,CAACuL,GAAD,EAAMnN,MAAN,KAAiB;MAC5CF,SAAS,CAACqN,GAAD,EAAM,CAACrP,GAAD,EAAMmD,GAAN,KAAc;QACzB,IAAInD,GAAJ,EAAS,OAAOkC,MAAM,CAAClC,GAAD,CAAb;QACT,OAAOkC,MAAM,CAAClC,GAAD,EAAM;UAACmD,GAAD;UAAMkM;QAAN,CAAN,CAAb;MACH,CAHQ,CAAT;IAIH,CALgB,EAKd,CAACrP,GAAD,EAAMsP,UAAN,KAAqB;MACpB,IAAI3P,MAAM,GAAG,EAAb,CADoB,CAEpB;;MACA,IAAI;QAACyT;MAAD,IAAmB1Q,MAAM,CAAC2Q,SAA9B;;MAEA,KAAK,IAAIrQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsM,UAAU,CAACxO,MAA/B,EAAuCkC,CAAC,EAAxC,EAA4C;QACxC,IAAIsM,UAAU,CAACtM,CAAD,CAAd,EAAmB;UACf,IAAI;YAACG;UAAD,IAAQmM,UAAU,CAACtM,CAAD,CAAtB;UACA,IAAI;YAACqM;UAAD,IAAQC,UAAU,CAACtM,CAAD,CAAtB;;UAEA,IAAIoQ,cAAc,CAAC5U,IAAf,CAAoBmB,MAApB,EAA4BwD,GAA5B,CAAJ,EAAsC;YAClCxD,MAAM,CAACwD,GAAD,CAAN,CAAYgE,IAAZ,CAAiBkI,GAAjB;UACH,CAFD,MAEO;YACH1P,MAAM,CAACwD,GAAD,CAAN,GAAc,CAACkM,GAAD,CAAd;UACH;QACJ;MACJ;;MAED,OAAO/Q,QAAQ,CAAC0B,GAAD,EAAML,MAAN,CAAf;IACH,CAxBgB,CAAjB;EAyBH;;EAED,IAAI2T,cAAc,GAAG1S,QAAQ,CAACuS,YAAD,EAAe,CAAf,CAA7B;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,SAASI,OAAT,CAAkB1Q,IAAlB,EAAwBhB,QAAxB,EAAkCvD,QAAlC,EAA4C;IACxC,OAAOgV,cAAc,CAACzQ,IAAD,EAAOsC,QAAP,EAAiBtD,QAAjB,EAA2BvD,QAA3B,CAArB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,SAASkV,aAAT,CAAwB3Q,IAAxB,EAA8BhB,QAA9B,EAAwCvD,QAAxC,EAAkD;IAC9C,OAAOgV,cAAc,CAACzQ,IAAD,EAAO,CAAP,EAAUhB,QAAV,EAAoBvD,QAApB,CAArB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAImV,GAAG,GAAGhD,WAAW,CAAC,KAAD,CAArB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,SAASiD,cAAT,CAAwBlT,GAAxB,EAA6BsD,KAA7B,EAAoCjC,QAApC,EAA8CvD,QAA9C,EAAwD;IACpDA,QAAQ,GAAGiE,IAAI,CAACjE,QAAD,CAAf;IACA,IAAIqV,MAAM,GAAG,EAAb;;IACA,IAAI3R,SAAS,GAAGtB,SAAS,CAACmB,QAAD,CAAzB;;IACA,OAAO2C,WAAW,CAACV,KAAD,CAAX,CAAmBtD,GAAnB,EAAwB,CAAC6O,GAAD,EAAMlM,GAAN,EAAWD,IAAX,KAAoB;MAC/ClB,SAAS,CAACqN,GAAD,EAAMlM,GAAN,EAAW,CAACnD,GAAD,EAAML,MAAN,KAAiB;QACjC,IAAIK,GAAJ,EAAS,OAAOkD,IAAI,CAAClD,GAAD,CAAX;QACT2T,MAAM,CAACxQ,GAAD,CAAN,GAAcxD,MAAd;QACAuD,IAAI,CAAClD,GAAD,CAAJ;MACH,CAJQ,CAAT;IAKH,CANM,EAMJA,GAAG,IAAI1B,QAAQ,CAAC0B,GAAD,EAAM2T,MAAN,CANX,CAAP;EAOH;;EAED,IAAIC,gBAAgB,GAAGhT,QAAQ,CAAC8S,cAAD,EAAiB,CAAjmBrT,GAAnB,EAAwBqB,QAAxB,EAAkCvD,QAAlC,EAA4C;IACxC,OAAOsV,gBAAgB,CAACpT,GAAD,EAAM2E,QAAN,EAAgBtD,QAAhB,EAA0BvD,QAA1B,CAAvB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,SAASwV,eAAT,CAAyBtT,GAAzB,EAA8BqB,QAA9B,EAAwCvD,QAAxC,EAAkD;IAC9C,OAAOsV,gBAAgB,CAACpT,GAAD,EAAM,CAAN,EAASqB,QAAT,EAAmBvD,QAAnB,CAAvB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,SAASyV,OAAT,CAAiB7V,EAAjB,EAAsC;IAAA,IAAjB8V,MAAiB,uEAAR5R,CAAC,IAAIA,CAAG;IAClC,IAAIoM,IAAI,GAAG9L,MAAM,CAACgE,MAAP,CAAc,IAAd,CAAX;IACA,IAAIuN,MAAM,GAAGvR,MAAM,CAACgE,MAAP,CAAc,IAAd,CAAb;;IACA,IAAIqK,GAAG,GAAGrQ,SAAS,CAACxC,EAAD,CAAnB;;IACA,IAAIgW,QAAQ,GAAG7V,aAAa,CAAC,CAACF,IAAD,EAAOG,QAAP,KAAoB;MAC7C,IAAI6E,GAAG,GAAG6Q,MAAM,CAAC,GAAG7V,IAAJ,CAAhB;;MACA,IAAIgF,GAAG,IAAIqL,IAAX,EAAiB;QACbnP,cAAc,CAAC,MAAMf,QAAQ,CAAC,IAAD,EAAO,GAAGkQ,IAAI,CAACrL,GAAD,CAAd,CAAf,CAAd;MACH,CAFD,MAEO,IAAIA,GAAG,IAAI8Q,MAAX,EAAmB;QACtBA,MAAM,CAAC9Q,GAAD,CAAN,CAAYgE,IAAZ,CAAiB7I,QAAjB;MACH,CAFM,MAEA;QACH2V,MAAM,CAAC9Q,GAAD,CAAN,GAAc,CAAC7E,QAAD,CAAd;;QACAyS,GAAG,CAAC,GAAG5S,IAAJ,EAAU,UAAC6B,GAAD,EAAwB;UAAA,oCAAf2Q,UAAe;YAAfA,UAAe;UAAA;;UACjC;UACA,IAAI,CAAC3Q,GAAL,EAAU;YACNwO,IAAI,CAACrL,GAAD,CAAJ,GAAYwN,UAAZ;UACH;;UACD,IAAI7D,CAAC,GAAGmH,MAAM,CAAC9Q,GAAD,CAAd;UACA,OAAO8Q,MAAM,CAAC9Q,GAAD,CAAb;;UACA,KAAK,IAAIH,CAAC,GAAG,CAAR,EAAWmK,CAAC,GAAGL,CAAC,CAAChM,MAAtB,EAA8BkC,CAAC,GAAGmK,CAAlC,EAAqCnK,CAAC,EAAtC,EAA0C;YACtC8J,CAAC,CAAC9J,CAAD,CAAD,CAAKhD,GAAL,EAAU,GAAG2Q,UAAb;UACH;QACJ,CAVE,CAAH;MAWH;IACJ,CApB2B,CAA5B;IAqBAuD,QAAQ,CAAC1F,IAAT,GAAgBA,IAAhB;IACA0F,QAAQ,CAACC,UAAT,GAAsBjW,EAAtB;IACA,OAAOgW,QAAP;EACH;EAED;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIE,QAAJ;;EAEA,IAAIvV,WAAJ,EAAiB;IACbuV,QAAQ,GAAGtV,OAAO,CAACC,QAAnB;EACH,CAFD,MAEO,IAAIJ,eAAJ,EAAqB;IACxByV,QAAQ,GAAGxV,YAAX;EACH,CAFM,MAEA;IACHwV,QAAQ,GAAGpV,QAAX;EACH;;EAED,IAAID,QAAQ,GAAGG,IAAI,CAACkV,QAAD,CAAnB;EAEA,IAAIC,QAAQ,GAAGzT,QAAQ,CAAC,CAACS,MAAD,EAAS+E,KAAT,EAAgB9H,QAAhB,KAA6B;IACjD,IAAIwD,OAAO,GAAGO,WAAW,CAAC+D,KAAD,CAAX,GAAqB,EAArB,GAA0B,EAAxC;IAEA/E,MAAM,CAAC+E,KAAD,EAAQ,CAACW,IAAD,EAAO5D,GAAP,EAAY8G,MAAZ,KAAuB;MACjCvJ,SAAS,CAACqG,IAAD,CAAT,CAAgB,UAAC/G,GAAD,EAAoB;QAAA,oCAAXL,MAAW;UAAXA,MAAW;QAAA;;QAChC,IAAIA,MAAM,CAACmB,MAAP,GAAgB,CAApB,EAAuB;UACnB,CAACnB,MAAD,IAAWA,MAAX;QACH;;QACDmC,OAAO,CAACqB,GAAD,CAAP,GAAexD,MAAf;QACAsK,MAAM,CAACjK,GAAD,CAAN;MACH,CAND;IAOH,CARK,EAQHA,GAAG,IAAI1B,QAAQ,CAAC0B,GAAD,EAAM8B,OAAN,CARZ,CAAN;EASH,CAZsB,EAYpB,CAZoB,CAAvB;EAcwS,UAAT,CAAoBlO,KAApB,EAA2B9H,QAA3B,EAAqC;IACjC,OAAO+V,QAAQ,CAAC/O,QAAD,EAAWc,KAAX,EAAkB9H,QAAlB,CAAf;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,SAASiW,aAAT,CAAuBnO,KAAvB,EAA8BtC,KAA9B,EAAqCxF,QAArC,EAA+C;IAC3C,OAAO+V,QAAQ,CAAC7P,WAAW,CAACV,KAAD,CAAZ,EAAqBsC,KAArB,EAA4B9H,QAA5B,CAAf;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,SAASkW,OAAT,CAAkB/I,MAAlB,EAA0BpF,WAA1B,EAAuC;IACnC,IAAIsF,OAAO,GAAGjL,SAAS,CAAC+K,MAAD,CAAvB;;IACA,OAAOD,KAAK,CAAC,CAACiJ,KAAD,EAAQhT,EAAR,KAAe;MACxBkK,OAAO,CAAC8I,KAAK,CAAC,CAAD,CAAN,EAAWhT,EAAX,CAAP;IACH,CAFW,EAET4E,WAFS,EAEI,CAFJ,CAAZ;EAGH,CA76HuB,CA+6HxB;EACA;;;EACA,MAAMqO,IAAN,CAAW;IACPrK,WAAW,GAAG;MACV,KAAKsK,IAAL,GAAY,EAAZ;MACA,KAAKC,SAAL,GAAiBC,MAAM,CAACC,gBAAxB;IACH;;IAES,IAANhU,MAAM,GAAG;MA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"},"metadata":{},"sourceType":"script"}