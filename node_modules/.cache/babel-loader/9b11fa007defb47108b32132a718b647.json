{"ast":null,"code":"/**\n * @fileoverview TAP reporter\n * @author Jonathan Kingston\n */\n\"use strict\";\n\nconst yaml = require(\"js-yaml\"); //------------------------------------------------------------------------------\n// Helper Functions\n//------------------------------------------------------------------------------\n\n/**\n * Returns a canonical error level string based upon the error message passed in.\n * @param {Object} message Individual error message provided by eslint\n * @returns {string} Error level string\n */\n\n\nfunction getMessageType(message) {\n  if (message.fatal || message.severity === 2) {\n    return \"error\";\n  }\n\n  return \"warning\";\n}\n/**\n * Takes in a JavaScript object and outputs a TAP diagnostics string\n * @param {Object} diagnostic JavaScript object to be embedded as YAML into output.\n * @returns {string} diagnostics string with YAML embedded - TAP version 13 compliant\n */\n\n\nfunction outputDiagnostics(diagnostic) {\n  const prefix = \"  \";\n  let output = `${prefix}---\\n`;\n  output += prefix + yaml.dump(diagnostic).split(\"\\n\").join(`\\n${prefix}`);\n  output += \"...\\n\";\n  return output;\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nmodule.exports = function (results) {\n  let output = `TAP version 13\\n1..${results.length}\\n`;\n  results.forEach((result, id) => {\n    const messages = result.messages;\n    let testResult = \"ok\";\n    let diagnostics = {};\n\n    if (messages.length > 0) {\n      messages.forEach(message => {\n        const severity = getMessageType(message);\n        const diagnostic = {\n          message: message.message,\n          severity,\n          data: {\n            line: message.line || 0,\n            column: message.column || 0,\n            ruleId: message.ruleId || \"\"\n          }\n        }; // This ensures a warning message is not flagged as error\n\n        if (severity === \"error\") {\n          testResult = \"not ok\";\n        }\n        /*\n         * If we have multiple messages place them under a messages key\n         * The first error will be logged as message key\n         * This is to adhere to TAP 13 loosely defined specification of having a message key\n         */\n\n\n        if (\"message\" in diagnostics) {\n          if (typeof diagnostics.messages === \"undefined\") {\n            diagnostics.messages = [];\n          }\n\n          diagnostics.messages.push(diagnostic);\n        } else {\n          diagnostics = diagnostic;\n        }\n      });\n    }\n\n    output += `${testResult} ${id + 1} - ${result.filePath}\\n`; // If we have an error include diagnostics\n\n    if (messages.length > 0) {\n      output += outputDiagnostics(diagnostics);\n    }\n  });\n  return output;\n};","map":{"version":3,"names":["yaml","require","getMessageType","message","fatal","severity","outputDiagnostics","diagnostic","prefix","output","dump","split","join","module","exports","results","length","forEach","result","id","messages","testResult","diagnostics","data","line","column","ruleId","push","filePath"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/cli-engine/formatters/tap.js"],"sourcesContent":["/**\n * @fileoverview TAP reporter\n * @author Jonathan Kingston\n */\n\"use strict\";\n\nconst yaml = require(\"js-yaml\");\n\n//------------------------------------------------------------------------------\n// Helper Functions\n//------------------------------------------------------------------------------\n\n/**\n * Returns a canonical error level string based upon the error message passed in.\n * @param {Object} message Individual error message provided by eslint\n * @returns {string} Error level string\n */\nfunction getMessageType(message) {\n    if (message.fatal || message.severity === 2) {\n        return \"error\";\n    }\n    return \"warning\";\n}\n\n/**\n * Takes in a JavaScript object and outputs a TAP diagnostics string\n * @param {Object} diagnostic JavaScript object to be embedded as YAML into output.\n * @returns {string} diagnostics string with YAML embedded - TAP version 13 compliant\n */\nfunction outputDiagnostics(diagnostic) {\n    const prefix = \"  \";\n    let output = `${prefix}---\\n`;\n\n    output += prefix + yaml.dump(diagnostic).split(\"\\n\").join(`\\n${prefix}`);\n    output += \"...\\n\";\n    return output;\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = function(results) {\n    let output = `TAP version 13\\n1..${results.length}\\n`;\n\n    results.forEach((result, id) => {\n        const messages = result.messages;\n        let testResult = \"ok\";\n        let diagnostics = {};\n\n        if (messages.length > 0) {\n            messages.forEach(message => {\n                const severity = getMessageType(message);\n                const diagnostic = {\n                    message: message.message,\n                    severity,\n                    data: {\n                        line: message.line || 0,\n                        column: message.column || 0,\n                        ruleId: message.ruleId || \"\"\n                    }\n                };\n\n                // This ensures a warning message is not flagged as error\n                if (severity === \"error\") {\n                    testResult = \"not ok\";\n                }\n\n                /*\n                 * If we have multiple messages place them under a messages key\n                 * The first error will be logged as message key\n                 * This is to adhere to TAP 13 loosely defined specification of having a message key\n                 */\n                if (\"message\" in diagnostics) {\n                    if (typeof diagnostics.messages === \"undefined\") {\n                        diagnostics.messages = [];\n                    }\n                    diagnostics.messages.push(diagnostic);\n                } else {\n                    diagnostics = diagnostic;\n                }\n            });\n        }\n\n        output += `${testResult} ${id + 1} - ${result.filePath}\\n`;\n\n        // If we have an error include diagnostics\n        if (messages.length > 0) {\n            output += outputDiagnostics(diagnostics);\n        }\n\n    });\n\n    return output;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;EAC7B,IAAIA,OAAO,CAACC,KAAR,IAAiBD,OAAO,CAACE,QAAR,KAAqB,CAA1C,EAA6C;IACzC,OAAO,OAAP;EACH;;EACD,OAAO,SAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2BC,UAA3B,EAAuC;EACnC,MAAMC,MAAM,GAAG,IAAf;EACA,IAAIC,MAAM,GAAI,GAAED,MAAO,OAAvB;EAEAC,MAAM,IAAID,MAAM,GAAGR,IAAI,CAACU,IAAL,CAAUH,UAAV,EAAsBI,KAAtB,CAA4B,IAA5B,EAAkCC,IAAlC,CAAwC,KAAIJ,MAAO,EAAnD,CAAnB;EACAC,MAAM,IAAI,OAAV;EACA,OAAOA,MAAP;AACH,C,CAED;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;EAC/B,IAAIN,MAAM,GAAI,sBAAqBM,OAAO,CAACC,MAAO,IAAlD;EAEAD,OAAO,CAACE,OAAR,CAAgB,CAACC,MAAD,EAASC,EAAT,KAAgB;IAC5B,MAAMC,QAAQ,GAAGF,MAAM,CAACE,QAAxB;IACA,IAAIC,UAAU,GAAG,IAAjB;IACA,IAAIC,WAAW,GAAG,EAAlB;;IAEA,IAAIF,QAAQ,CAACJ,MAAT,GAAkB,CAAtB,EAAyB;MACrBI,QAAQ,CAACH,OAAT,CAAiBd,OAAO,IAAI;QACxB,MAAME,QAAQ,GAAGH,cAAc,CAACC,OAAD,CAA/B;QACA,MAAMI,UAAU,GAAG;UACfJ,OAAO,EAAEA,OAAO,CAACA,OADF;UAEfE,QAFe;UAGfkB,IAAI,EAAE;YACFC,IAAI,EAAErB,OAAO,CAACqB,IAAR,IAAgB,CADpB;YAEFC,MAAM,EAAEtB,OAAO,CAACsB,MAAR,IAAkB,CAFxB;YAGFC,MAAM,EAAEvB,OAAO,CAACuB,MAAR,IAAkB;UAHxB;QAHS,CAAnB,CAFwB,CAYxB;;QACA,IAAIrB,QAAQ,KAAK,OAAjB,EAA0B;UACtBgB,UAAU,GAAG,QAAb;QACH;QAED;AAChB;AACA;AACA;AACA;;;QACgB,IAAI,aAAaC,WAAjB,EAA8B;UAC1B,IAAI,OAAOA,WAAW,CAACF,QAAnB,KAAgC,WAApC,EAAiD;YAC7CE,WAAW,CAACF,QAAZ,GAAuB,EAAvB;UACH;;UACDE,WAAW,CAACF,QAAZ,CAAqBO,IAArB,CAA0BpB,UAA1B;QACH,CALD,MAKO;UACHe,WAAW,GAAGf,UAAd;QACH;MACJ,CA9BD;IA+BH;;IAEDE,MAAM,IAAK,GAAEY,UAAW,IAAGF,EAAE,GAAG,CAAE,MAAKD,MAAM,CAACU,QAAS,IAAvD,CAvC4B,CAyC5B;;IACA,IAAIR,QAAQ,CAACJ,MAAT,GAAkB,CAAtB,EAAyB;MACrBP,MAAM,IAAIH,iBAAiB,CAACgB,WAAD,CAA3B;IACH;EAEJ,CA9CD;EAgDA,OAAOb,MAAP;AACH,CApDD"},"metadata":{},"sourceType":"script"}