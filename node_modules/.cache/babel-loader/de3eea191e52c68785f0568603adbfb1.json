{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Function = GetIntrinsic('%Function%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Get = require('./Get');\n\nvar IsConstructor = require('./IsConstructor');\n\nvar Type = require('./Type'); // https://ecma-international.org/ecma-262/6.0/#sec-getprototypefromconstructor\n\n\nmodule.exports = function GetPrototypeFromConstructor(constructor, intrinsicDefaultProto) {\n  var intrinsic = GetIntrinsic(intrinsicDefaultProto); // throws if not a valid intrinsic\n\n  if (!IsConstructor(constructor)) {\n    throw new $TypeError('Assertion failed: `constructor` must be a constructor');\n  }\n\n  var proto = Get(constructor, 'prototype');\n\n  if (Type(proto) !== 'Object') {\n    if (!(constructor instanceof $Function)) {\n      // ignore other realms, for now\n      throw new $TypeError('cross-realm constructors not currently supported');\n    }\n\n    proto = intrinsic;\n  }\n\n  return proto;\n};","map":{"version":3,"names":["GetIntrinsic","require","$Function","$TypeError","Get","IsConstructor","Type","module","exports","GetPrototypeFromConstructor","constructor","intrinsicDefaultProto","intrinsic","proto"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2020/GetPrototypeFromConstructor.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Function = GetIntrinsic('%Function%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Get = require('./Get');\nvar IsConstructor = require('./IsConstructor');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-getprototypefromconstructor\n\nmodule.exports = function GetPrototypeFromConstructor(constructor, intrinsicDefaultProto) {\n\tvar intrinsic = GetIntrinsic(intrinsicDefaultProto); // throws if not a valid intrinsic\n\tif (!IsConstructor(constructor)) {\n\t\tthrow new $TypeError('Assertion failed: `constructor` must be a constructor');\n\t}\n\tvar proto = Get(constructor, 'prototype');\n\tif (Type(proto) !== 'Object') {\n\t\tif (!(constructor instanceof $Function)) {\n\t\t\t// ignore other realms, for now\n\t\t\tthrow new $TypeError('cross-realm constructors not currently supported');\n\t\t}\n\t\tproto = intrinsic;\n\t}\n\treturn proto;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,SAAS,GAAGF,YAAY,CAAC,YAAD,CAA5B;AACA,IAAIG,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAII,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAM,MAAM,CAACC,OAAP,GAAiB,SAASC,2BAAT,CAAqCC,WAArC,EAAkDC,qBAAlD,EAAyE;EACzF,IAAIC,SAAS,GAAGZ,YAAY,CAACW,qBAAD,CAA5B,CADyF,CACpC;;EACrD,IAAI,CAACN,aAAa,CAACK,WAAD,CAAlB,EAAiC;IAChC,MAAM,IAAIP,UAAJ,CAAe,uDAAf,CAAN;EACA;;EACD,IAAIU,KAAK,GAAGT,GAAG,CAACM,WAAD,EAAc,WAAd,CAAf;;EACA,IAAIJ,IAAI,CAACO,KAAD,CAAJ,KAAgB,QAApB,EAA8B;IAC7B,IAAI,EAAEH,WAAW,YAAYR,SAAzB,CAAJ,EAAyC;MACxC;MACA,MAAM,IAAIC,UAAJ,CAAe,kDAAf,CAAN;IACA;;IACDU,KAAK,GAAGD,SAAR;EACA;;EACD,OAAOC,KAAP;AACA,CAdD"},"metadata":{},"sourceType":"script"}