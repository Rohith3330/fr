{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction getRangeDef(keyword) {\n  return () => ({\n    keyword,\n    type: \"number\",\n    schemaType: \"array\",\n    macro: function (_ref) {\n      let [min, max] = _ref;\n      validateRangeSchema(min, max);\n      return keyword === \"range\" ? {\n        minimum: min,\n        maximum: max\n      } : {\n        exclusiveMinimum: min,\n        exclusiveMaximum: max\n      };\n    },\n    metaSchema: {\n      type: \"array\",\n      minItems: 2,\n      maxItems: 2,\n      items: {\n        type: \"number\"\n      }\n    }\n  });\n\n  function validateRangeSchema(min, max) {\n    if (min > max || keyword === \"exclusiveRange\" && min === max) {\n      throw new Error(\"There are no numbers in range\");\n    }\n  }\n}\n\nexports.default = getRangeDef;","map":{"version":3,"mappings":";;;;;;AAKA,SAAwBA,WAAxB,CAAoCC,OAApC,EAAqD;EACnD,OAAO,OAAO;IACZA,OADY;IAEZC,IAAI,EAAE,QAFM;IAGZC,UAAU,EAAE,OAHA;IAIZC,KAAK,EAAE,gBAAsC;MAAA,IAA5B,CAACC,GAAD,EAAMC,GAAN,CAA4B;MAC3CC,mBAAmB,CAACF,GAAD,EAAMC,GAAN,CAAnB;MACA,OAAOL,OAAO,KAAK,OAAZ,GACH;QAACO,OAAO,EAAEH,GAAV;QAAeI,OAAO,EAAEH;MAAxB,CADG,GAEH;QAACI,gBAAgB,EAAEL,GAAnB;QAAwBM,gBAAgB,EAAEL;MAA1C,CAFJ;IAGD,CATW;IAUZM,UAAU,EAAE;MACVV,IAAI,EAAE,OADI;MAEVW,QAAQ,EAAE,CAFA;MAGVC,QAAQ,EAAE,CAHA;MAIVC,KAAK,EAAE;QAACb,IAAI,EAAE;MAAP;IAJG;EAVA,CAAP,CAAP;;EAkBA,SAASK,mBAAT,CAA6BF,GAA7B,EAA0CC,GAA1C,EAAqD;IACnD,IAAID,GAAG,GAAGC,GAAN,IAAcL,OAAO,KAAK,gBAAZ,IAAgCI,GAAG,KAAKC,GAA1D,EAAgE;MAC9D,MAAM,IAAIU,KAAJ,CAAU,+BAAV,CAAN;IACD;EACF;AACF;;AAxBDC","names":["getRangeDef","keyword","type","schemaType","macro","min","max","validateRangeSchema","minimum","maximum","exclusiveMinimum","exclusiveMaximum","metaSchema","minItems","maxItems","items","Error","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\mini-css-extract-plugin\\node_modules\\ajv-keywords\\src\\definitions\\_range.ts"],"sourcesContent":["import type {MacroKeywordDefinition} from \"ajv\"\nimport type {GetDefinition} from \"./_types\"\n\ntype RangeKwd = \"range\" | \"exclusiveRange\"\n\nexport default function getRangeDef(keyword: RangeKwd): GetDefinition<MacroKeywordDefinition> {\n  return () => ({\n    keyword,\n    type: \"number\",\n    schemaType: \"array\",\n    macro: function ([min, max]: [number, number]) {\n      validateRangeSchema(min, max)\n      return keyword === \"range\"\n        ? {minimum: min, maximum: max}\n        : {exclusiveMinimum: min, exclusiveMaximum: max}\n    },\n    metaSchema: {\n      type: \"array\",\n      minItems: 2,\n      maxItems: 2,\n      items: {type: \"number\"},\n    },\n  })\n\n  function validateRangeSchema(min: number, max: number): void {\n    if (min > max || (keyword === \"exclusiveRange\" && min === max)) {\n      throw new Error(\"There are no numbers in range\")\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}