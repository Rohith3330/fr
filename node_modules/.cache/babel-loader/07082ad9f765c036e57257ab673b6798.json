{"ast":null,"code":"/**\n * @fileoverview Rule to restrict what can be thrown as an exception.\n * @author Dieter Oberkofler\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow throwing literals as exceptions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-throw-literal\"\n    },\n    schema: [],\n    messages: {\n      object: \"Expected an error object to be thrown.\",\n      undef: \"Do not throw undefined.\"\n    }\n  },\n\n  create(context) {\n    return {\n      ThrowStatement(node) {\n        if (!astUtils.couldBeError(node.argument)) {\n          context.report({\n            node,\n            messageId: \"object\"\n          });\n        } else if (node.argument.type === \"Identifier\") {\n          if (node.argument.name === \"undefined\") {\n            context.report({\n              node,\n              messageId: \"undef\"\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","object","undef","create","context","ThrowStatement","node","couldBeError","argument","report","messageId","name"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-throw-literal.js"],"sourcesContent":["/**\n * @fileoverview Rule to restrict what can be thrown as an exception.\n * @author Dieter Oberkofler\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow throwing literals as exceptions\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-throw-literal\"\n        },\n\n        schema: [],\n\n        messages: {\n            object: \"Expected an error object to be thrown.\",\n            undef: \"Do not throw undefined.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            ThrowStatement(node) {\n                if (!astUtils.couldBeError(node.argument)) {\n                    context.report({ node, messageId: \"object\" });\n                } else if (node.argument.type === \"Identifier\") {\n                    if (node.argument.name === \"undefined\") {\n                        context.report({ node, messageId: \"undef\" });\n                    }\n                }\n\n            }\n\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,0CADX;MAEFC,WAAW,EAAE,KAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAWFC,QAAQ,EAAE;MACNC,MAAM,EAAE,wCADF;MAENC,KAAK,EAAE;IAFD;EAXR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IAEZ,OAAO;MAEHC,cAAc,CAACC,IAAD,EAAO;QACjB,IAAI,CAACjB,QAAQ,CAACkB,YAAT,CAAsBD,IAAI,CAACE,QAA3B,CAAL,EAA2C;UACvCJ,OAAO,CAACK,MAAR,CAAe;YAAEH,IAAF;YAAQI,SAAS,EAAE;UAAnB,CAAf;QACH,CAFD,MAEO,IAAIJ,IAAI,CAACE,QAAL,CAAcd,IAAd,KAAuB,YAA3B,EAAyC;UAC5C,IAAIY,IAAI,CAACE,QAAL,CAAcG,IAAd,KAAuB,WAA3B,EAAwC;YACpCP,OAAO,CAACK,MAAR,CAAe;cAAEH,IAAF;cAAQI,SAAS,EAAE;YAAnB,CAAf;UACH;QACJ;MAEJ;;IAXE,CAAP;EAeH;;AAnCY,CAAjB"},"metadata":{},"sourceType":"script"}