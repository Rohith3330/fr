{"ast":null,"code":"'use strict';\n\nvar {\n  CSSStyleDeclaration\n} = require('./CSSStyleDeclaration');\n\nvar allProperties = require('./allProperties');\n\nvar allExtraProperties = require('./allExtraProperties');\n\nvar implementedProperties = require('./implementedProperties');\n\nvar parsers = require('./parsers');\n\nvar dashedProperties = [...allProperties, ...allExtraProperties];\nvar allowedProperties = dashedProperties.map(parsers.dashedToCamelCase);\nimplementedProperties = Array.from(implementedProperties).map(parsers.dashedToCamelCase);\nvar invalidProperties = implementedProperties.filter(prop => !allowedProperties.includes(prop));\ndescribe('CSSStyleDeclaration', () => {\n  test('has only valid properties implemented', () => {\n    expect(invalidProperties.length).toEqual(0);\n  });\n  test('has all properties', () => {\n    var style = new CSSStyleDeclaration();\n    allProperties.forEach(property => {\n      expect(style.__lookupGetter__(property)).toBeTruthy();\n      expect(style.__lookupSetter__(property)).toBeTruthy();\n    });\n  });\n  test('has dashed properties', () => {\n    var style = new CSSStyleDeclaration();\n    dashedProperties.forEach(property => {\n      expect(style.__lookupGetter__(property)).toBeTruthy();\n      expect(style.__lookupSetter__(property)).toBeTruthy();\n    });\n  });\n  test('has all functions', () => {\n    var style = new CSSStyleDeclaration();\n    expect(typeof style.item).toEqual('function');\n    expect(typeof style.getPropertyValue).toEqual('function');\n    expect(typeof style.setProperty).toEqual('function');\n    expect(typeof style.getPropertyPriority).toEqual('function');\n    expect(typeof style.removeProperty).toEqual('function'); // TODO - deprecated according to MDN and not implemented at all, can we remove?\n\n    expect(typeof style.getPropertyCSSValue).toEqual('function');\n  });\n  test('has special properties', () => {\n    var style = new CSSStyleDeclaration();\n    expect(style.__lookupGetter__('cssText')).toBeTruthy();\n    expect(style.__lookupSetter__('cssText')).toBeTruthy();\n    expect(style.__lookupGetter__('length')).toBeTruthy();\n    expect(style.__lookupSetter__('length')).toBeTruthy();\n    expect(style.__lookupGetter__('parentRule')).toBeTruthy();\n  });\n  test('from style string', () => {\n    var style = new CSSStyleDeclaration();\n    style.cssText = 'color: blue; background-color: red; width: 78%; height: 50vh;';\n    expect(style.length).toEqual(4);\n    expect(style.cssText).toEqual('color: blue; background-color: red; width: 78%; height: 50vh;');\n    expect(style.getPropertyValue('color')).toEqual('blue');\n    expect(style.item(0)).toEqual('color');\n    expect(style[1]).toEqual('background-color');\n    expect(style.backgroundColor).toEqual('red');\n    style.cssText = '';\n    expect(style.cssText).toEqual('');\n    expect(style.length).toEqual(0);\n  });\n  test('from properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.color = 'blue';\n    expect(style.length).toEqual(1);\n    expect(style[0]).toEqual('color');\n    expect(style.cssText).toEqual('color: blue;');\n    expect(style.item(0)).toEqual('color');\n    expect(style.color).toEqual('blue');\n    style.backgroundColor = 'red';\n    expect(style.length).toEqual(2);\n    expect(style[0]).toEqual('color');\n    expect(style[1]).toEqual('background-color');\n    expect(style.cssText).toEqual('color: blue; background-color: red;');\n    expect(style.backgroundColor).toEqual('red');\n    style.removeProperty('color');\n    expect(style[0]).toEqual('background-color');\n  });\n  test('shorthand properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.background = 'blue url(http://www.example.com/some_img.jpg)';\n    expect(style.backgroundColor).toEqual('blue');\n    expect(style.backgroundImage).toEqual('url(http://www.example.com/some_img.jpg)');\n    expect(style.background).toEqual('blue url(http://www.example.com/some_img.jpg)');\n    style.border = '0 solid black';\n    expect(style.borderWidth).toEqual('0px');\n    expect(style.borderStyle).toEqual('solid');\n    expect(style.borderColor).toEqual('black');\n    expect(style.borderTopWidth).toEqual('0px');\n    expect(style.borderLeftStyle).toEqual('solid');\n    expect(style.borderBottomColor).toEqual('black');\n    style.font = '12em monospace';\n    expect(style.fontSize).toEqual('12em');\n    expect(style.fontFamily).toEqual('monospace');\n  });\n  test('width and height properties and null and empty strings', () => {\n    var style = new CSSStyleDeclaration();\n    style.height = 6;\n    expect(style.height).toEqual('');\n    style.width = 0;\n    expect(style.width).toEqual('0px');\n    style.height = '34%';\n    expect(style.height).toEqual('34%');\n    style.height = '100vh';\n    expect(style.height).toEqual('100vh');\n    style.height = '100vw';\n    expect(style.height).toEqual('100vw');\n    style.height = '';\n    expect(1).toEqual(style.length);\n    expect(style.cssText).toEqual('width: 0px;');\n    style.width = null;\n    expect(0).toEqual(style.length);\n    expect(style.cssText).toEqual('');\n  });\n  test('implicit properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.borderWidth = 0;\n    expect(style.length).toEqual(1);\n    expect(style.borderWidth).toEqual('0px');\n    expect(style.borderTopWidth).toEqual('0px');\n    expect(style.borderBottomWidth).toEqual('0px');\n    expect(style.borderLeftWidth).toEqual('0px');\n    expect(style.borderRightWidth).toEqual('0px');\n    expect(style.cssText).toEqual('border-width: 0px;');\n  });\n  test('top, left, right, bottom properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.top = 0;\n    style.left = '0%';\n    style.right = '5em';\n    style.bottom = '12pt';\n    expect(style.top).toEqual('0px');\n    expect(style.left).toEqual('0%');\n    expect(style.right).toEqual('5em');\n    expect(style.bottom).toEqual('12pt');\n    expect(style.length).toEqual(4);\n    expect(style.cssText).toEqual('top: 0px; left: 0%; right: 5em; bottom: 12pt;');\n  });\n  test('clear and clip properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.clear = 'none';\n    expect(style.clear).toEqual('none');\n    style.clear = 'lfet';\n    expect(style.clear).toEqual('none');\n    style.clear = 'left';\n    expect(style.clear).toEqual('left');\n    style.clear = 'right';\n    expect(style.clear).toEqual('right');\n    style.clear = 'both';\n    expect(style.clear).toEqual('both');\n    style.clip = 'elipse(5px, 10px)';\n    expect(style.clip).toEqual('');\n    expect(style.length).toEqual(1);\n    style.clip = 'rect(0, 3Em, 2pt, 50%)';\n    expect(style.clip).toEqual('rect(0px, 3em, 2pt, 50%)');\n    expect(style.length).toEqual(2);\n    expect(style.cssText).toEqual('clear: both; clip: rect(0px, 3em, 2pt, 50%);');\n  });\n  test('colors', () => {\n    var style = new CSSStyleDeclaration();\n    style.color = 'rgba(0,0,0,0)';\n    expect(style.color).toEqual('rgba(0, 0, 0, 0)');\n    style.color = 'rgba(5%, 10%, 20%, 0.4)';\n    expect(style.color).toEqual('rgba(12, 25, 51, 0.4)');\n    style.color = 'rgb(33%, 34%, 33%)';\n    expect(style.color).toEqual('rgb(84, 86, 84)');\n    style.color = 'rgba(300, 200, 100, 1.5)';\n    expect(style.color).toEqual('rgb(255, 200, 100)');\n    style.color = 'hsla(0, 1%, 2%, 0.5)';\n    expect(style.color).toEqual('rgba(5, 5, 5, 0.5)');\n    style.color = 'hsl(0, 1%, 2%)';\n    expect(style.color).toEqual('rgb(5, 5, 5)');\n    style.color = 'rebeccapurple';\n    expect(style.color).toEqual('rebeccapurple');\n    style.color = 'transparent';\n    expect(style.color).toEqual('transparent');\n    style.color = 'currentcolor';\n    expect(style.color).toEqual('currentcolor');\n    style.color = '#ffffffff';\n    expect(style.color).toEqual('rgba(255, 255, 255, 1)');\n    style.color = '#fffa';\n    expect(style.color).toEqual('rgba(255, 255, 255, 0.667)');\n    style.color = '#ffffff66';\n    expect(style.color).toEqual('rgba(255, 255, 255, 0.4)');\n  });\n  test('short hand properties with embedded spaces', () => {\n    var style = new CSSStyleDeclaration();\n    style.background = 'rgb(0, 0, 0) url(/something/somewhere.jpg)';\n    expect(style.backgroundColor).toEqual('rgb(0, 0, 0)');\n    expect(style.backgroundImage).toEqual('url(/something/somewhere.jpg)');\n    expect(style.cssText).toEqual('background: rgb(0, 0, 0) url(/something/somewhere.jpg);');\n    style = new CSSStyleDeclaration();\n    style.border = '  1px  solid   black  ';\n    expect(style.border).toEqual('1px solid black');\n  });\n  test('setting shorthand properties to an empty string should clear all dependent properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.borderWidth = '1px';\n    expect(style.cssText).toEqual('border-width: 1px;');\n    style.border = '';\n    expect(style.cssText).toEqual('');\n  });\n  test('setting implicit properties to an empty string should clear all dependent properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.borderTopWidth = '1px';\n    expect(style.cssText).toEqual('border-top-width: 1px;');\n    style.borderWidth = '';\n    expect(style.cssText).toEqual('');\n  });\n  test('setting a shorthand property, whose shorthands are implicit properties, to an empty string should clear all dependent properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.borderTopWidth = '1px';\n    expect(style.cssText).toEqual('border-top-width: 1px;');\n    style.border = '';\n    expect(style.cssText).toEqual('');\n    style.borderTop = '1px solid black';\n    expect(style.cssText).toEqual('border-top: 1px solid black;');\n    style.border = '';\n    expect(style.cssText).toEqual('');\n  });\n  test('setting border values to \"none\" should clear dependent values', () => {\n    var style = new CSSStyleDeclaration();\n    style.borderTopWidth = '1px';\n    expect(style.cssText).toEqual('border-top-width: 1px;');\n    style.border = 'none';\n    expect(style.cssText).toEqual('');\n    style.borderTopWidth = '1px';\n    expect(style.cssText).toEqual('border-top-width: 1px;');\n    style.borderTopStyle = 'none';\n    expect(style.cssText).toEqual('');\n    style.borderTopWidth = '1px';\n    expect(style.cssText).toEqual('border-top-width: 1px;');\n    style.borderTop = 'none';\n    expect(style.cssText).toEqual('');\n    style.borderTopWidth = '1px';\n    style.borderLeftWidth = '1px';\n    expect(style.cssText).toEqual('border-top-width: 1px; border-left-width: 1px;');\n    style.borderTop = 'none';\n    expect(style.cssText).toEqual('border-left-width: 1px;');\n  });\n  test('setting border to 0 should be okay', () => {\n    var style = new CSSStyleDeclaration();\n    style.border = 0;\n    expect(style.cssText).toEqual('border: 0px;');\n  });\n  test('setting values implicit and shorthand properties via csstext and setproperty should propagate to dependent properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.cssText = 'border: 1px solid black;';\n    expect(style.cssText).toEqual('border: 1px solid black;');\n    expect(style.borderTop).toEqual('1px solid black');\n    style.border = '';\n    expect(style.cssText).toEqual('');\n    style.setProperty('border', '1px solid black');\n    expect(style.cssText).toEqual('border: 1px solid black;');\n  });\n  test('setting opacity should work', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('opacity', 0.75);\n    expect(style.cssText).toEqual('opacity: 0.75;');\n    style.opacity = '0.50';\n    expect(style.cssText).toEqual('opacity: 0.5;');\n    style.opacity = 1;\n    expect(style.cssText).toEqual('opacity: 1;');\n  });\n  test('width and height of auto should work', () => {\n    var style = new CSSStyleDeclaration();\n    style.width = 'auto';\n    expect(style.cssText).toEqual('width: auto;');\n    expect(style.width).toEqual('auto');\n    style = new CSSStyleDeclaration();\n    style.height = 'auto';\n    expect(style.cssText).toEqual('height: auto;');\n    expect(style.height).toEqual('auto');\n  });\n  test('padding and margin should set/clear shorthand properties', () => {\n    var style = new CSSStyleDeclaration();\n    var parts = ['Top', 'Right', 'Bottom', 'Left'];\n\n    var testParts = function (name, v, V) {\n      style[name] = v;\n\n      for (var i = 0; i < 4; i++) {\n        var part = name + parts[i];\n        expect(style[part]).toEqual(V[i]);\n      }\n\n      expect(style[name]).toEqual(v);\n      style[name] = '';\n    };\n\n    testParts('padding', '1px', ['1px', '1px', '1px', '1px']);\n    testParts('padding', '1px 2%', ['1px', '2%', '1px', '2%']);\n    testParts('padding', '1px 2px 3px', ['1px', '2px', '3px', '2px']);\n    testParts('padding', '1px 2px 3px 4px', ['1px', '2px', '3px', '4px']);\n    style.paddingTop = style.paddingRight = style.paddingBottom = style.paddingLeft = '1px';\n    testParts('padding', '', ['', '', '', '']);\n    testParts('margin', '1px', ['1px', '1px', '1px', '1px']);\n    testParts('margin', '1px auto', ['1px', 'auto', '1px', 'auto']);\n    testParts('margin', '1px 2% 3px', ['1px', '2%', '3px', '2%']);\n    testParts('margin', '1px 2px 3px 4px', ['1px', '2px', '3px', '4px']);\n    style.marginTop = style.marginRight = style.marginBottom = style.marginLeft = '1px';\n    testParts('margin', '', ['', '', '', '']);\n  });\n  test('padding and margin shorthands should set main properties', () => {\n    var style = new CSSStyleDeclaration();\n    var parts = ['Top', 'Right', 'Bottom', 'Left'];\n\n    var testParts = function (name, v, V) {\n      var expected;\n\n      for (var i = 0; i < 4; i++) {\n        style[name] = v;\n        style[name + parts[i]] = V;\n        expected = v.split(/ /);\n        expected[i] = V;\n        expected = expected.join(' ');\n        expect(style[name]).toEqual(expected);\n      }\n    };\n\n    testParts('padding', '1px 2px 3px 4px', '10px');\n    testParts('margin', '1px 2px 3px 4px', '10px');\n    testParts('margin', '1px 2px 3px 4px', 'auto');\n  });\n  test('setting a value to 0 should return the string value', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('fill-opacity', 0);\n    expect(style.fillOpacity).toEqual('0');\n  });\n  test('onchange callback should be called when the csstext changes', () => {\n    var style = new CSSStyleDeclaration(function (cssText) {\n      expect(cssText).toEqual('opacity: 0;');\n    });\n    style.setProperty('opacity', 0);\n  });\n  test('setting float should work the same as cssfloat', () => {\n    var style = new CSSStyleDeclaration();\n    style.float = 'left';\n    expect(style.cssFloat).toEqual('left');\n  });\n  test('setting improper css to csstext should not throw', () => {\n    var style = new CSSStyleDeclaration();\n    style.cssText = 'color: ';\n    expect(style.cssText).toEqual('');\n    style.color = 'black';\n    style.cssText = 'float: ';\n    expect(style.cssText).toEqual('');\n  });\n  test('url parsing works with quotes', () => {\n    var style = new CSSStyleDeclaration();\n    style.backgroundImage = 'url(http://some/url/here1.png)';\n    expect(style.backgroundImage).toEqual('url(http://some/url/here1.png)');\n    style.backgroundImage = \"url('http://some/url/here2.png')\";\n    expect(style.backgroundImage).toEqual('url(http://some/url/here2.png)');\n    style.backgroundImage = 'url(\"http://some/url/here3.png\")';\n    expect(style.backgroundImage).toEqual('url(http://some/url/here3.png)');\n  });\n  test('setting 0 to a padding or margin works', () => {\n    var style = new CSSStyleDeclaration();\n    style.padding = 0;\n    expect(style.cssText).toEqual('padding: 0px;');\n    style.margin = '1em';\n    style.marginTop = '0';\n    expect(style.marginTop).toEqual('0px');\n  });\n  test('setting ex units to a padding or margin works', () => {\n    var style = new CSSStyleDeclaration();\n    style.padding = '1ex';\n    expect(style.cssText).toEqual('padding: 1ex;');\n    style.margin = '1em';\n    style.marginTop = '0.5ex';\n    expect(style.marginTop).toEqual('0.5ex');\n  });\n  test('setting null to background works', () => {\n    var style = new CSSStyleDeclaration();\n    style.background = 'red';\n    expect(style.cssText).toEqual('background: red;');\n    style.background = null;\n    expect(style.cssText).toEqual('');\n  });\n  test('flex properties should keep their values', () => {\n    var style = new CSSStyleDeclaration();\n    style.flexDirection = 'column';\n    expect(style.cssText).toEqual('flex-direction: column;');\n    style.flexDirection = 'row';\n    expect(style.cssText).toEqual('flex-direction: row;');\n  });\n  test('camelcase properties are not assigned with `.setproperty()`', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('fontSize', '12px');\n    expect(style.cssText).toEqual('');\n  });\n  test('casing is ignored in `.setproperty()`', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('FoNt-SiZe', '12px');\n    expect(style.fontSize).toEqual('12px');\n    expect(style.getPropertyValue('font-size')).toEqual('12px');\n  });\n  test('support non string entries in border-spacing', () => {\n    var style = new CSSStyleDeclaration();\n    style.borderSpacing = 0;\n    expect(style.cssText).toEqual('border-spacing: 0px;');\n  });\n  test('float should be valid property for `.setproperty()`', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('float', 'left');\n    expect(style.float).toEqual('left');\n    expect(style.getPropertyValue('float')).toEqual('left');\n  });\n  test('flex-shrink works', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('flex-shrink', 0);\n    expect(style.getPropertyValue('flex-shrink')).toEqual('0');\n    style.setProperty('flex-shrink', 1);\n    expect(style.getPropertyValue('flex-shrink')).toEqual('1');\n    expect(style.cssText).toEqual('flex-shrink: 1;');\n  });\n  test('flex-grow works', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('flex-grow', 2);\n    expect(style.getPropertyValue('flex-grow')).toEqual('2');\n    expect(style.cssText).toEqual('flex-grow: 2;');\n  });\n  test('flex-basis works', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('flex-basis', 0);\n    expect(style.getPropertyValue('flex-basis')).toEqual('0px');\n    style.setProperty('flex-basis', '250px');\n    expect(style.getPropertyValue('flex-basis')).toEqual('250px');\n    style.setProperty('flex-basis', '10em');\n    expect(style.getPropertyValue('flex-basis')).toEqual('10em');\n    style.setProperty('flex-basis', '30%');\n    expect(style.getPropertyValue('flex-basis')).toEqual('30%');\n    expect(style.cssText).toEqual('flex-basis: 30%;');\n  });\n  test('shorthand flex works', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('flex', 'none');\n    expect(style.getPropertyValue('flex-grow')).toEqual('0');\n    expect(style.getPropertyValue('flex-shrink')).toEqual('0');\n    expect(style.getPropertyValue('flex-basis')).toEqual('auto');\n    style.removeProperty('flex');\n    style.removeProperty('flex-basis');\n    style.setProperty('flex', 'auto');\n    expect(style.getPropertyValue('flex-grow')).toEqual('');\n    expect(style.getPropertyValue('flex-shrink')).toEqual('');\n    expect(style.getPropertyValue('flex-basis')).toEqual('auto');\n    style.removeProperty('flex');\n    style.setProperty('flex', '0 1 250px');\n    expect(style.getPropertyValue('flex')).toEqual('0 1 250px');\n    expect(style.getPropertyValue('flex-grow')).toEqual('0');\n    expect(style.getPropertyValue('flex-shrink')).toEqual('1');\n    expect(style.getPropertyValue('flex-basis')).toEqual('250px');\n    style.removeProperty('flex');\n    style.setProperty('flex', '2');\n    expect(style.getPropertyValue('flex-grow')).toEqual('2');\n    expect(style.getPropertyValue('flex-shrink')).toEqual('');\n    expect(style.getPropertyValue('flex-basis')).toEqual('');\n    style.removeProperty('flex');\n    style.setProperty('flex', '20%');\n    expect(style.getPropertyValue('flex-grow')).toEqual('');\n    expect(style.getPropertyValue('flex-shrink')).toEqual('');\n    expect(style.getPropertyValue('flex-basis')).toEqual('20%');\n    style.removeProperty('flex');\n    style.setProperty('flex', '2 2');\n    expect(style.getPropertyValue('flex-grow')).toEqual('2');\n    expect(style.getPropertyValue('flex-shrink')).toEqual('2');\n    expect(style.getPropertyValue('flex-basis')).toEqual('');\n    style.removeProperty('flex');\n  });\n  test('font-size get a valid value', () => {\n    var style = new CSSStyleDeclaration();\n    const invalidValue = '1r5px';\n    style.cssText = 'font-size: 15px';\n    expect(1).toEqual(style.length);\n    style.cssText = `font-size: ${invalidValue}`;\n    expect(0).toEqual(style.length);\n    expect(undefined).toEqual(style[0]);\n  });\n  test('getPropertyValue for custom properties in cssText', () => {\n    const style = new CSSStyleDeclaration();\n    style.cssText = '--foo: red';\n    expect(style.getPropertyValue('--foo')).toEqual('red');\n  });\n  test('getPropertyValue for custom properties with setProperty', () => {\n    const style = new CSSStyleDeclaration();\n    style.setProperty('--bar', 'blue');\n    expect(style.getPropertyValue('--bar')).toEqual('blue');\n  });\n  test('getPropertyValue for custom properties with object setter', () => {\n    const style = new CSSStyleDeclaration();\n    style['--baz'] = 'yellow';\n    expect(style.getPropertyValue('--baz')).toEqual('');\n  });\n  test('custom properties are case-sensitive', () => {\n    const style = new CSSStyleDeclaration();\n    style.cssText = '--fOo: purple';\n    expect(style.getPropertyValue('--foo')).toEqual('');\n    expect(style.getPropertyValue('--fOo')).toEqual('purple');\n  });\n  test('supports calc', () => {\n    const style = new CSSStyleDeclaration();\n    style.setProperty('width', 'calc(100% - 100px)');\n    expect(style.getPropertyValue('width')).toEqual('calc(100% - 100px)');\n  });\n});","map":{"version":3,"names":["CSSStyleDeclaration","require","allProperties","allExtraProperties","implementedProperties","parsers","dashedProperties","allowedProperties","map","dashedToCamelCase","Array","from","invalidProperties","filter","prop","includes","describe","test","expect","length","toEqual","style","forEach","property","__lookupGetter__","toBeTruthy","__lookupSetter__","item","getPropertyValue","setProperty","getPropertyPriority","removeProperty","getPropertyCSSValue","cssText","backgroundColor","color","background","backgroundImage","border","borderWidth","borderStyle","borderColor","borderTopWidth","borderLeftStyle","borderBottomColor","font","fontSize","fontFamily","height","width","borderBottomWidth","borderLeftWidth","borderRightWidth","top","left","right","bottom","clear","clip","borderTop","borderTopStyle","opacity","parts","testParts","name","v","V","i","part","paddingTop","paddingRight","paddingBottom","paddingLeft","marginTop","marginRight","marginBottom","marginLeft","expected","split","join","fillOpacity","float","cssFloat","padding","margin","flexDirection","borderSpacing","invalidValue","undefined"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/cssstyle/lib/CSSStyleDeclaration.test.js"],"sourcesContent":["'use strict';\n\nvar { CSSStyleDeclaration } = require('./CSSStyleDeclaration');\n\nvar allProperties = require('./allProperties');\nvar allExtraProperties = require('./allExtraProperties');\nvar implementedProperties = require('./implementedProperties');\nvar parsers = require('./parsers');\n\nvar dashedProperties = [...allProperties, ...allExtraProperties];\nvar allowedProperties = dashedProperties.map(parsers.dashedToCamelCase);\nimplementedProperties = Array.from(implementedProperties).map(parsers.dashedToCamelCase);\nvar invalidProperties = implementedProperties.filter(prop => !allowedProperties.includes(prop));\n\ndescribe('CSSStyleDeclaration', () => {\n  test('has only valid properties implemented', () => {\n    expect(invalidProperties.length).toEqual(0);\n  });\n\n  test('has all properties', () => {\n    var style = new CSSStyleDeclaration();\n    allProperties.forEach(property => {\n      expect(style.__lookupGetter__(property)).toBeTruthy();\n      expect(style.__lookupSetter__(property)).toBeTruthy();\n    });\n  });\n\n  test('has dashed properties', () => {\n    var style = new CSSStyleDeclaration();\n    dashedProperties.forEach(property => {\n      expect(style.__lookupGetter__(property)).toBeTruthy();\n      expect(style.__lookupSetter__(property)).toBeTruthy();\n    });\n  });\n\n  test('has all functions', () => {\n    var style = new CSSStyleDeclaration();\n\n    expect(typeof style.item).toEqual('function');\n    expect(typeof style.getPropertyValue).toEqual('function');\n    expect(typeof style.setProperty).toEqual('function');\n    expect(typeof style.getPropertyPriority).toEqual('function');\n    expect(typeof style.removeProperty).toEqual('function');\n\n    // TODO - deprecated according to MDN and not implemented at all, can we remove?\n    expect(typeof style.getPropertyCSSValue).toEqual('function');\n  });\n\n  test('has special properties', () => {\n    var style = new CSSStyleDeclaration();\n\n    expect(style.__lookupGetter__('cssText')).toBeTruthy();\n    expect(style.__lookupSetter__('cssText')).toBeTruthy();\n    expect(style.__lookupGetter__('length')).toBeTruthy();\n    expect(style.__lookupSetter__('length')).toBeTruthy();\n    expect(style.__lookupGetter__('parentRule')).toBeTruthy();\n  });\n\n  test('from style string', () => {\n    var style = new CSSStyleDeclaration();\n    style.cssText = 'color: blue; background-color: red; width: 78%; height: 50vh;';\n    expect(style.length).toEqual(4);\n    expect(style.cssText).toEqual('color: blue; background-color: red; width: 78%; height: 50vh;');\n    expect(style.getPropertyValue('color')).toEqual('blue');\n    expect(style.item(0)).toEqual('color');\n    expect(style[1]).toEqual('background-color');\n    expect(style.backgroundColor).toEqual('red');\n    style.cssText = '';\n    expect(style.cssText).toEqual('');\n    expect(style.length).toEqual(0);\n  });\n\n  test('from properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.color = 'blue';\n    expect(style.length).toEqual(1);\n    expect(style[0]).toEqual('color');\n    expect(style.cssText).toEqual('color: blue;');\n    expect(style.item(0)).toEqual('color');\n    expect(style.color).toEqual('blue');\n    style.backgroundColor = 'red';\n    expect(style.length).toEqual(2);\n    expect(style[0]).toEqual('color');\n    expect(style[1]).toEqual('background-color');\n    expect(style.cssText).toEqual('color: blue; background-color: red;');\n    expect(style.backgroundColor).toEqual('red');\n    style.removeProperty('color');\n    expect(style[0]).toEqual('background-color');\n  });\n\n  test('shorthand properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.background = 'blue url(http://www.example.com/some_img.jpg)';\n    expect(style.backgroundColor).toEqual('blue');\n    expect(style.backgroundImage).toEqual('url(http://www.example.com/some_img.jpg)');\n    expect(style.background).toEqual('blue url(http://www.example.com/some_img.jpg)');\n    style.border = '0 solid black';\n    expect(style.borderWidth).toEqual('0px');\n    expect(style.borderStyle).toEqual('solid');\n    expect(style.borderColor).toEqual('black');\n    expect(style.borderTopWidth).toEqual('0px');\n    expect(style.borderLeftStyle).toEqual('solid');\n    expect(style.borderBottomColor).toEqual('black');\n    style.font = '12em monospace';\n    expect(style.fontSize).toEqual('12em');\n    expect(style.fontFamily).toEqual('monospace');\n  });\n\n  test('width and height properties and null and empty strings', () => {\n    var style = new CSSStyleDeclaration();\n    style.height = 6;\n    expect(style.height).toEqual('');\n    style.width = 0;\n    expect(style.width).toEqual('0px');\n    style.height = '34%';\n    expect(style.height).toEqual('34%');\n    style.height = '100vh';\n    expect(style.height).toEqual('100vh');\n    style.height = '100vw';\n    expect(style.height).toEqual('100vw');\n    style.height = '';\n    expect(1).toEqual(style.length);\n    expect(style.cssText).toEqual('width: 0px;');\n    style.width = null;\n    expect(0).toEqual(style.length);\n    expect(style.cssText).toEqual('');\n  });\n\n  test('implicit properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.borderWidth = 0;\n    expect(style.length).toEqual(1);\n    expect(style.borderWidth).toEqual('0px');\n    expect(style.borderTopWidth).toEqual('0px');\n    expect(style.borderBottomWidth).toEqual('0px');\n    expect(style.borderLeftWidth).toEqual('0px');\n    expect(style.borderRightWidth).toEqual('0px');\n    expect(style.cssText).toEqual('border-width: 0px;');\n  });\n\n  test('top, left, right, bottom properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.top = 0;\n    style.left = '0%';\n    style.right = '5em';\n    style.bottom = '12pt';\n    expect(style.top).toEqual('0px');\n    expect(style.left).toEqual('0%');\n    expect(style.right).toEqual('5em');\n    expect(style.bottom).toEqual('12pt');\n    expect(style.length).toEqual(4);\n    expect(style.cssText).toEqual('top: 0px; left: 0%; right: 5em; bottom: 12pt;');\n  });\n\n  test('clear and clip properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.clear = 'none';\n    expect(style.clear).toEqual('none');\n    style.clear = 'lfet';\n    expect(style.clear).toEqual('none');\n    style.clear = 'left';\n    expect(style.clear).toEqual('left');\n    style.clear = 'right';\n    expect(style.clear).toEqual('right');\n    style.clear = 'both';\n    expect(style.clear).toEqual('both');\n    style.clip = 'elipse(5px, 10px)';\n    expect(style.clip).toEqual('');\n    expect(style.length).toEqual(1);\n    style.clip = 'rect(0, 3Em, 2pt, 50%)';\n    expect(style.clip).toEqual('rect(0px, 3em, 2pt, 50%)');\n    expect(style.length).toEqual(2);\n    expect(style.cssText).toEqual('clear: both; clip: rect(0px, 3em, 2pt, 50%);');\n  });\n\n  test('colors', () => {\n    var style = new CSSStyleDeclaration();\n    style.color = 'rgba(0,0,0,0)';\n    expect(style.color).toEqual('rgba(0, 0, 0, 0)');\n    style.color = 'rgba(5%, 10%, 20%, 0.4)';\n    expect(style.color).toEqual('rgba(12, 25, 51, 0.4)');\n    style.color = 'rgb(33%, 34%, 33%)';\n    expect(style.color).toEqual('rgb(84, 86, 84)');\n    style.color = 'rgba(300, 200, 100, 1.5)';\n    expect(style.color).toEqual('rgb(255, 200, 100)');\n    style.color = 'hsla(0, 1%, 2%, 0.5)';\n    expect(style.color).toEqual('rgba(5, 5, 5, 0.5)');\n    style.color = 'hsl(0, 1%, 2%)';\n    expect(style.color).toEqual('rgb(5, 5, 5)');\n    style.color = 'rebeccapurple';\n    expect(style.color).toEqual('rebeccapurple');\n    style.color = 'transparent';\n    expect(style.color).toEqual('transparent');\n    style.color = 'currentcolor';\n    expect(style.color).toEqual('currentcolor');\n    style.color = '#ffffffff';\n    expect(style.color).toEqual('rgba(255, 255, 255, 1)');\n    style.color = '#fffa';\n    expect(style.color).toEqual('rgba(255, 255, 255, 0.667)');\n    style.color = '#ffffff66';\n    expect(style.color).toEqual('rgba(255, 255, 255, 0.4)');\n  });\n\n  test('short hand properties with embedded spaces', () => {\n    var style = new CSSStyleDeclaration();\n    style.background = 'rgb(0, 0, 0) url(/something/somewhere.jpg)';\n    expect(style.backgroundColor).toEqual('rgb(0, 0, 0)');\n    expect(style.backgroundImage).toEqual('url(/something/somewhere.jpg)');\n    expect(style.cssText).toEqual('background: rgb(0, 0, 0) url(/something/somewhere.jpg);');\n    style = new CSSStyleDeclaration();\n    style.border = '  1px  solid   black  ';\n    expect(style.border).toEqual('1px solid black');\n  });\n\n  test('setting shorthand properties to an empty string should clear all dependent properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.borderWidth = '1px';\n    expect(style.cssText).toEqual('border-width: 1px;');\n    style.border = '';\n    expect(style.cssText).toEqual('');\n  });\n\n  test('setting implicit properties to an empty string should clear all dependent properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.borderTopWidth = '1px';\n    expect(style.cssText).toEqual('border-top-width: 1px;');\n    style.borderWidth = '';\n    expect(style.cssText).toEqual('');\n  });\n\n  test('setting a shorthand property, whose shorthands are implicit properties, to an empty string should clear all dependent properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.borderTopWidth = '1px';\n    expect(style.cssText).toEqual('border-top-width: 1px;');\n    style.border = '';\n    expect(style.cssText).toEqual('');\n    style.borderTop = '1px solid black';\n    expect(style.cssText).toEqual('border-top: 1px solid black;');\n    style.border = '';\n    expect(style.cssText).toEqual('');\n  });\n\n  test('setting border values to \"none\" should clear dependent values', () => {\n    var style = new CSSStyleDeclaration();\n    style.borderTopWidth = '1px';\n    expect(style.cssText).toEqual('border-top-width: 1px;');\n    style.border = 'none';\n    expect(style.cssText).toEqual('');\n    style.borderTopWidth = '1px';\n    expect(style.cssText).toEqual('border-top-width: 1px;');\n    style.borderTopStyle = 'none';\n    expect(style.cssText).toEqual('');\n    style.borderTopWidth = '1px';\n    expect(style.cssText).toEqual('border-top-width: 1px;');\n    style.borderTop = 'none';\n    expect(style.cssText).toEqual('');\n    style.borderTopWidth = '1px';\n    style.borderLeftWidth = '1px';\n    expect(style.cssText).toEqual('border-top-width: 1px; border-left-width: 1px;');\n    style.borderTop = 'none';\n    expect(style.cssText).toEqual('border-left-width: 1px;');\n  });\n\n  test('setting border to 0 should be okay', () => {\n    var style = new CSSStyleDeclaration();\n    style.border = 0;\n    expect(style.cssText).toEqual('border: 0px;');\n  });\n\n  test('setting values implicit and shorthand properties via csstext and setproperty should propagate to dependent properties', () => {\n    var style = new CSSStyleDeclaration();\n    style.cssText = 'border: 1px solid black;';\n    expect(style.cssText).toEqual('border: 1px solid black;');\n    expect(style.borderTop).toEqual('1px solid black');\n    style.border = '';\n    expect(style.cssText).toEqual('');\n    style.setProperty('border', '1px solid black');\n    expect(style.cssText).toEqual('border: 1px solid black;');\n  });\n\n  test('setting opacity should work', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('opacity', 0.75);\n    expect(style.cssText).toEqual('opacity: 0.75;');\n    style.opacity = '0.50';\n    expect(style.cssText).toEqual('opacity: 0.5;');\n    style.opacity = 1;\n    expect(style.cssText).toEqual('opacity: 1;');\n  });\n\n  test('width and height of auto should work', () => {\n    var style = new CSSStyleDeclaration();\n    style.width = 'auto';\n    expect(style.cssText).toEqual('width: auto;');\n    expect(style.width).toEqual('auto');\n    style = new CSSStyleDeclaration();\n    style.height = 'auto';\n    expect(style.cssText).toEqual('height: auto;');\n    expect(style.height).toEqual('auto');\n  });\n\n  test('padding and margin should set/clear shorthand properties', () => {\n    var style = new CSSStyleDeclaration();\n    var parts = ['Top', 'Right', 'Bottom', 'Left'];\n    var testParts = function(name, v, V) {\n      style[name] = v;\n      for (var i = 0; i < 4; i++) {\n        var part = name + parts[i];\n        expect(style[part]).toEqual(V[i]);\n      }\n\n      expect(style[name]).toEqual(v);\n      style[name] = '';\n    };\n    testParts('padding', '1px', ['1px', '1px', '1px', '1px']);\n    testParts('padding', '1px 2%', ['1px', '2%', '1px', '2%']);\n    testParts('padding', '1px 2px 3px', ['1px', '2px', '3px', '2px']);\n    testParts('padding', '1px 2px 3px 4px', ['1px', '2px', '3px', '4px']);\n    style.paddingTop = style.paddingRight = style.paddingBottom = style.paddingLeft = '1px';\n    testParts('padding', '', ['', '', '', '']);\n    testParts('margin', '1px', ['1px', '1px', '1px', '1px']);\n    testParts('margin', '1px auto', ['1px', 'auto', '1px', 'auto']);\n    testParts('margin', '1px 2% 3px', ['1px', '2%', '3px', '2%']);\n    testParts('margin', '1px 2px 3px 4px', ['1px', '2px', '3px', '4px']);\n    style.marginTop = style.marginRight = style.marginBottom = style.marginLeft = '1px';\n    testParts('margin', '', ['', '', '', '']);\n  });\n\n  test('padding and margin shorthands should set main properties', () => {\n    var style = new CSSStyleDeclaration();\n    var parts = ['Top', 'Right', 'Bottom', 'Left'];\n    var testParts = function(name, v, V) {\n      var expected;\n      for (var i = 0; i < 4; i++) {\n        style[name] = v;\n        style[name + parts[i]] = V;\n        expected = v.split(/ /);\n        expected[i] = V;\n        expected = expected.join(' ');\n\n        expect(style[name]).toEqual(expected);\n      }\n    };\n    testParts('padding', '1px 2px 3px 4px', '10px');\n    testParts('margin', '1px 2px 3px 4px', '10px');\n    testParts('margin', '1px 2px 3px 4px', 'auto');\n  });\n\n  test('setting a value to 0 should return the string value', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('fill-opacity', 0);\n    expect(style.fillOpacity).toEqual('0');\n  });\n\n  test('onchange callback should be called when the csstext changes', () => {\n    var style = new CSSStyleDeclaration(function(cssText) {\n      expect(cssText).toEqual('opacity: 0;');\n    });\n    style.setProperty('opacity', 0);\n  });\n\n  test('setting float should work the same as cssfloat', () => {\n    var style = new CSSStyleDeclaration();\n    style.float = 'left';\n    expect(style.cssFloat).toEqual('left');\n  });\n\n  test('setting improper css to csstext should not throw', () => {\n    var style = new CSSStyleDeclaration();\n    style.cssText = 'color: ';\n    expect(style.cssText).toEqual('');\n    style.color = 'black';\n    style.cssText = 'float: ';\n    expect(style.cssText).toEqual('');\n  });\n\n  test('url parsing works with quotes', () => {\n    var style = new CSSStyleDeclaration();\n    style.backgroundImage = 'url(http://some/url/here1.png)';\n    expect(style.backgroundImage).toEqual('url(http://some/url/here1.png)');\n    style.backgroundImage = \"url('http://some/url/here2.png')\";\n    expect(style.backgroundImage).toEqual('url(http://some/url/here2.png)');\n    style.backgroundImage = 'url(\"http://some/url/here3.png\")';\n    expect(style.backgroundImage).toEqual('url(http://some/url/here3.png)');\n  });\n\n  test('setting 0 to a padding or margin works', () => {\n    var style = new CSSStyleDeclaration();\n    style.padding = 0;\n    expect(style.cssText).toEqual('padding: 0px;');\n    style.margin = '1em';\n    style.marginTop = '0';\n    expect(style.marginTop).toEqual('0px');\n  });\n\n  test('setting ex units to a padding or margin works', () => {\n    var style = new CSSStyleDeclaration();\n    style.padding = '1ex';\n    expect(style.cssText).toEqual('padding: 1ex;');\n    style.margin = '1em';\n    style.marginTop = '0.5ex';\n    expect(style.marginTop).toEqual('0.5ex');\n  });\n\n  test('setting null to background works', () => {\n    var style = new CSSStyleDeclaration();\n    style.background = 'red';\n    expect(style.cssText).toEqual('background: red;');\n    style.background = null;\n    expect(style.cssText).toEqual('');\n  });\n\n  test('flex properties should keep their values', () => {\n    var style = new CSSStyleDeclaration();\n    style.flexDirection = 'column';\n    expect(style.cssText).toEqual('flex-direction: column;');\n    style.flexDirection = 'row';\n    expect(style.cssText).toEqual('flex-direction: row;');\n  });\n\n  test('camelcase properties are not assigned with `.setproperty()`', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('fontSize', '12px');\n    expect(style.cssText).toEqual('');\n  });\n\n  test('casing is ignored in `.setproperty()`', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('FoNt-SiZe', '12px');\n    expect(style.fontSize).toEqual('12px');\n    expect(style.getPropertyValue('font-size')).toEqual('12px');\n  });\n\n  test('support non string entries in border-spacing', () => {\n    var style = new CSSStyleDeclaration();\n    style.borderSpacing = 0;\n    expect(style.cssText).toEqual('border-spacing: 0px;');\n  });\n\n  test('float should be valid property for `.setproperty()`', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('float', 'left');\n    expect(style.float).toEqual('left');\n    expect(style.getPropertyValue('float')).toEqual('left');\n  });\n\n  test('flex-shrink works', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('flex-shrink', 0);\n    expect(style.getPropertyValue('flex-shrink')).toEqual('0');\n    style.setProperty('flex-shrink', 1);\n    expect(style.getPropertyValue('flex-shrink')).toEqual('1');\n    expect(style.cssText).toEqual('flex-shrink: 1;');\n  });\n\n  test('flex-grow works', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('flex-grow', 2);\n    expect(style.getPropertyValue('flex-grow')).toEqual('2');\n    expect(style.cssText).toEqual('flex-grow: 2;');\n  });\n\n  test('flex-basis works', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('flex-basis', 0);\n    expect(style.getPropertyValue('flex-basis')).toEqual('0px');\n    style.setProperty('flex-basis', '250px');\n    expect(style.getPropertyValue('flex-basis')).toEqual('250px');\n    style.setProperty('flex-basis', '10em');\n    expect(style.getPropertyValue('flex-basis')).toEqual('10em');\n    style.setProperty('flex-basis', '30%');\n    expect(style.getPropertyValue('flex-basis')).toEqual('30%');\n    expect(style.cssText).toEqual('flex-basis: 30%;');\n  });\n\n  test('shorthand flex works', () => {\n    var style = new CSSStyleDeclaration();\n    style.setProperty('flex', 'none');\n    expect(style.getPropertyValue('flex-grow')).toEqual('0');\n    expect(style.getPropertyValue('flex-shrink')).toEqual('0');\n    expect(style.getPropertyValue('flex-basis')).toEqual('auto');\n    style.removeProperty('flex');\n    style.removeProperty('flex-basis');\n    style.setProperty('flex', 'auto');\n    expect(style.getPropertyValue('flex-grow')).toEqual('');\n    expect(style.getPropertyValue('flex-shrink')).toEqual('');\n    expect(style.getPropertyValue('flex-basis')).toEqual('auto');\n    style.removeProperty('flex');\n    style.setProperty('flex', '0 1 250px');\n    expect(style.getPropertyValue('flex')).toEqual('0 1 250px');\n    expect(style.getPropertyValue('flex-grow')).toEqual('0');\n    expect(style.getPropertyValue('flex-shrink')).toEqual('1');\n    expect(style.getPropertyValue('flex-basis')).toEqual('250px');\n    style.removeProperty('flex');\n    style.setProperty('flex', '2');\n    expect(style.getPropertyValue('flex-grow')).toEqual('2');\n    expect(style.getPropertyValue('flex-shrink')).toEqual('');\n    expect(style.getPropertyValue('flex-basis')).toEqual('');\n    style.removeProperty('flex');\n    style.setProperty('flex', '20%');\n    expect(style.getPropertyValue('flex-grow')).toEqual('');\n    expect(style.getPropertyValue('flex-shrink')).toEqual('');\n    expect(style.getPropertyValue('flex-basis')).toEqual('20%');\n    style.removeProperty('flex');\n    style.setProperty('flex', '2 2');\n    expect(style.getPropertyValue('flex-grow')).toEqual('2');\n    expect(style.getPropertyValue('flex-shrink')).toEqual('2');\n    expect(style.getPropertyValue('flex-basis')).toEqual('');\n    style.removeProperty('flex');\n  });\n\n  test('font-size get a valid value', () => {\n    var style = new CSSStyleDeclaration();\n    const invalidValue = '1r5px';\n    style.cssText = 'font-size: 15px';\n    expect(1).toEqual(style.length);\n    style.cssText = `font-size: ${invalidValue}`;\n    expect(0).toEqual(style.length);\n    expect(undefined).toEqual(style[0]);\n  });\n\n  test('getPropertyValue for custom properties in cssText', () => {\n    const style = new CSSStyleDeclaration();\n    style.cssText = '--foo: red';\n\n    expect(style.getPropertyValue('--foo')).toEqual('red');\n  });\n\n  test('getPropertyValue for custom properties with setProperty', () => {\n    const style = new CSSStyleDeclaration();\n    style.setProperty('--bar', 'blue');\n\n    expect(style.getPropertyValue('--bar')).toEqual('blue');\n  });\n\n  test('getPropertyValue for custom properties with object setter', () => {\n    const style = new CSSStyleDeclaration();\n    style['--baz'] = 'yellow';\n\n    expect(style.getPropertyValue('--baz')).toEqual('');\n  });\n\n  test('custom properties are case-sensitive', () => {\n    const style = new CSSStyleDeclaration();\n    style.cssText = '--fOo: purple';\n\n    expect(style.getPropertyValue('--foo')).toEqual('');\n    expect(style.getPropertyValue('--fOo')).toEqual('purple');\n  });\n\n  test('supports calc', () => {\n    const style = new CSSStyleDeclaration();\n    style.setProperty('width', 'calc(100% - 100px)');\n    expect(style.getPropertyValue('width')).toEqual('calc(100% - 100px)');\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}