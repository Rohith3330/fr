{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Call = require('./Call');\n\nvar Get = require('./Get');\n\nvar IsCallable = require('./IsCallable');\n\nvar Type = require('./Type');\n\nvar inspect = require('object-inspect'); // https://262.ecma-international.org/8.0/#sec-ordinarytoprimitive\n\n\nmodule.exports = function OrdinaryToPrimitive(O, hint) {\n  if (Type(O) !== 'Object') {\n    throw new $TypeError('Assertion failed: Type(O) is not Object');\n  }\n\n  if (\n  /* Type(hint) !== 'String' || */\n  hint !== 'string' && hint !== 'number') {\n    throw new $TypeError('Assertion failed: `hint` must be \"string\" or \"number\"');\n  }\n\n  var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];\n\n  for (var i = 0; i < methodNames.length; i += 1) {\n    var name = methodNames[i];\n    var method = Get(O, name);\n\n    if (IsCallable(method)) {\n      var result = Call(method, O);\n\n      if (Type(result) !== 'Object') {\n        return result;\n      }\n    }\n  }\n\n  throw new $TypeError('No primitive value for ' + inspect(O));\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","Call","Get","IsCallable","Type","inspect","module","exports","OrdinaryToPrimitive","O","hint","methodNames","i","length","name","method","result"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2018/OrdinaryToPrimitive.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Call = require('./Call');\nvar Get = require('./Get');\nvar IsCallable = require('./IsCallable');\nvar Type = require('./Type');\n\nvar inspect = require('object-inspect');\n\n// https://262.ecma-international.org/8.0/#sec-ordinarytoprimitive\n\nmodule.exports = function OrdinaryToPrimitive(O, hint) {\n\tif (Type(O) !== 'Object') {\n\t\tthrow new $TypeError('Assertion failed: Type(O) is not Object');\n\t}\n\tif (/* Type(hint) !== 'String' || */ hint !== 'string' && hint !== 'number') {\n\t\tthrow new $TypeError('Assertion failed: `hint` must be \"string\" or \"number\"');\n\t}\n\n\tvar methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];\n\n\tfor (var i = 0; i < methodNames.length; i += 1) {\n\t\tvar name = methodNames[i];\n\t\tvar method = Get(O, name);\n\t\tif (IsCallable(method)) {\n\t\t\tvar result = Call(method, O);\n\t\t\tif (Type(result) !== 'Object') {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow new $TypeError('No primitive value for ' + inspect(O));\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,IAAI,GAAGF,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIM,OAAO,GAAGN,OAAO,CAAC,gBAAD,CAArB,C,CAEA;;;AAEAO,MAAM,CAACC,OAAP,GAAiB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgCC,IAAhC,EAAsC;EACtD,IAAIN,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,MAAM,IAAIT,UAAJ,CAAe,yCAAf,CAAN;EACA;;EACD;EAAI;EAAiCU,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,QAAnE,EAA6E;IAC5E,MAAM,IAAIV,UAAJ,CAAe,uDAAf,CAAN;EACA;;EAED,IAAIW,WAAW,GAAGD,IAAI,KAAK,QAAT,GAAoB,CAAC,UAAD,EAAa,SAAb,CAApB,GAA8C,CAAC,SAAD,EAAY,UAAZ,CAAhE;;EAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,IAAI,CAA7C,EAAgD;IAC/C,IAAIE,IAAI,GAAGH,WAAW,CAACC,CAAD,CAAtB;IACA,IAAIG,MAAM,GAAGb,GAAG,CAACO,CAAD,EAAIK,IAAJ,CAAhB;;IACA,IAAIX,UAAU,CAACY,MAAD,CAAd,EAAwB;MACvB,IAAIC,MAAM,GAAGf,IAAI,CAACc,MAAD,EAASN,CAAT,CAAjB;;MACA,IAAIL,IAAI,CAACY,MAAD,CAAJ,KAAiB,QAArB,EAA+B;QAC9B,OAAOA,MAAP;MACA;IACD;EACD;;EAED,MAAM,IAAIhB,UAAJ,CAAe,4BAA4BK,OAAO,CAACI,CAAD,CAAlD,CAAN;AACA,CAtBD"},"metadata":{},"sourceType":"script"}