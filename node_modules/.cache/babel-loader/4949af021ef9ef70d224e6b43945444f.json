{"ast":null,"code":"/**\n * @fileoverview Forbid certain props on components\n * @author Joe Lencioni\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\n\nconst DEFAULTS = ['className', 'style']; // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  propIsForbidden: 'Prop \"{{prop}}\" is forbidden on Components'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow certain props on components',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('forbid-component-props')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        forbid: {\n          type: 'array',\n          items: {\n            oneOf: [{\n              type: 'string'\n            }, {\n              type: 'object',\n              properties: {\n                propName: {\n                  type: 'string'\n                },\n                allowedFor: {\n                  type: 'array',\n                  uniqueItems: true,\n                  items: {\n                    type: 'string'\n                  }\n                },\n                message: {\n                  type: 'string'\n                }\n              }\n            }]\n          }\n        }\n      }\n    }]\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const forbid = new Map((configuration.forbid || DEFAULTS).map(value => {\n      const propName = typeof value === 'string' ? value : value.propName;\n      const options = {\n        allowList: typeof value === 'string' ? [] : value.allowedFor || [],\n        message: typeof value === 'string' ? null : value.message\n      };\n      return [propName, options];\n    }));\n\n    function isForbidden(prop, tagName) {\n      const options = forbid.get(prop);\n      const allowList = options ? options.allowList : undefined; // if the tagName is undefined (`<this.something>`), we assume it's a forbidden element\n\n      return typeof allowList !== 'undefined' && (typeof tagName === 'undefined' || allowList.indexOf(tagName) === -1);\n    }\n\n    return {\n      JSXAttribute(node) {\n        const parentName = node.parent.name; // Extract a component name when using a \"namespace\", e.g. `<AntdLayout.Content />`.\n\n        const tag = parentName.name || `${parentName.object.name}.${parentName.property.name}`;\n        const componentName = parentName.name || parentName.property.name;\n\n        if (componentName && typeof componentName[0] === 'string' && componentName[0] !== componentName[0].toUpperCase()) {\n          // This is a DOM node, not a Component, so exit.\n          return;\n        }\n\n        const prop = node.name.name;\n\n        if (!isForbidden(prop, tag)) {\n          return;\n        }\n\n        const customMessage = forbid.get(prop).message;\n        report(context, customMessage || messages.propIsForbidden, !customMessage && 'propIsForbidden', {\n          node,\n          data: {\n            prop\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","report","DEFAULTS","messages","propIsForbidden","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","forbid","items","oneOf","propName","allowedFor","uniqueItems","message","create","context","configuration","options","Map","map","value","allowList","isForbidden","prop","tagName","get","undefined","indexOf","JSXAttribute","node","parentName","parent","name","tag","object","property","componentName","toUpperCase","customMessage","data"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/forbid-component-props.js"],"sourcesContent":["/**\n * @fileoverview Forbid certain props on components\n * @author Joe Lencioni\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\nconst DEFAULTS = ['className', 'style'];\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  propIsForbidden: 'Prop \"{{prop}}\" is forbidden on Components',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow certain props on components',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('forbid-component-props'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        forbid: {\n          type: 'array',\n          items: {\n            oneOf: [{\n              type: 'string',\n            }, {\n              type: 'object',\n              properties: {\n                propName: {\n                  type: 'string',\n                },\n                allowedFor: {\n                  type: 'array',\n                  uniqueItems: true,\n                  items: {\n                    type: 'string',\n                  },\n                },\n                message: {\n                  type: 'string',\n                },\n              },\n            }],\n          },\n        },\n      },\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const forbid = new Map((configuration.forbid || DEFAULTS).map((value) => {\n      const propName = typeof value === 'string' ? value : value.propName;\n      const options = {\n        allowList: typeof value === 'string' ? [] : (value.allowedFor || []),\n        message: typeof value === 'string' ? null : value.message,\n      };\n      return [propName, options];\n    }));\n\n    function isForbidden(prop, tagName) {\n      const options = forbid.get(prop);\n      const allowList = options ? options.allowList : undefined;\n      // if the tagName is undefined (`<this.something>`), we assume it's a forbidden element\n      return typeof allowList !== 'undefined' && (typeof tagName === 'undefined' || allowList.indexOf(tagName) === -1);\n    }\n\n    return {\n      JSXAttribute(node) {\n        const parentName = node.parent.name;\n        // Extract a component name when using a \"namespace\", e.g. `<AntdLayout.Content />`.\n        const tag = parentName.name || `${parentName.object.name}.${parentName.property.name}`;\n        const componentName = parentName.name || parentName.property.name;\n        if (componentName && typeof componentName[0] === 'string' && componentName[0] !== componentName[0].toUpperCase()) {\n          // This is a DOM node, not a Component, so exit.\n          return;\n        }\n\n        const prop = node.name.name;\n\n        if (!isForbidden(prop, tag)) {\n          return;\n        }\n\n        const customMessage = forbid.get(prop).message;\n\n        report(context, customMessage || messages.propIsForbidden, !customMessage && 'propIsForbidden', {\n          node,\n          data: {\n            prop,\n          },\n        });\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}