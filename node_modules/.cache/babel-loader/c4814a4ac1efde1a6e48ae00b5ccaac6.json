{"ast":null,"code":"/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nconst path = require('path');\n\nconst PACKAGE_NAME = require('../../package.json').name;\n/**\n * Paths are formatted to have posix style path separators and those within the CWD are made relative to CWD.\n *\n * @param {string} absolutePath An absolute path to format\n * @returns {string} the formatted path\n */\n\n\nconst pathToString = absolutePath => {\n  if (absolutePath === '') {\n    return '-empty-';\n  } else {\n    const relative = path.relative(process.cwd(), absolutePath).split(path.sep);\n    const segments = relative[0] !== '..' ? ['.'].concat(relative).filter(Boolean) : relative.lastIndexOf('..') < 2 ? relative : absolutePath.split(path.sep);\n    return segments.join('/');\n  }\n};\n\nexports.pathToString = pathToString;\n/**\n * Format a debug message.\n *\n * @param {string} filename The file being processed by webpack\n * @param {string} uri A uri path, relative or absolute\n * @param {Array<{base:string,joined:string,isSuccess:boolean}>} attempts An array of attempts, possibly empty\n * @return {string} Formatted message\n */\n\nconst formatJoinMessage = (filename, uri, attempts) => {\n  const attemptToCells = (_, i, array) => {\n    const {\n      base: prev\n    } = i === 0 ? {} : array[i - 1];\n    const {\n      base: curr,\n      joined\n    } = array[i];\n    return [curr === prev ? '' : pathToString(curr), pathToString(joined)];\n  };\n\n  const formatCells = lines => {\n    const maxWidth = lines.reduce((max, _ref) => {\n      let [cellA] = _ref;\n      return Math.max(max, cellA.length);\n    }, 0);\n    return lines.map(_ref2 => {\n      let [cellA, cellB] = _ref2;\n      return [cellA.padEnd(maxWidth), cellB];\n    }).map(cells => cells.join(' --> '));\n  };\n\n  return [PACKAGE_NAME + ': ' + pathToString(filename) + ': ' + uri].concat(attempts.length === 0 ? '-empty-' : formatCells(attempts.map(attemptToCells))).concat(attempts.some(_ref3 => {\n    let {\n      isSuccess\n    } = _ref3;\n    return isSuccess;\n  }) ? 'FOUND' : 'NOT FOUND').join('\\n  ');\n};\n\nexports.formatJoinMessage = formatJoinMessage;\n/**\n * A factory for a log function predicated on the given debug parameter.\n *\n * The logging function created accepts a function that formats a message and parameters that the function utilises.\n * Presuming the message function may be expensive we only call it if logging is enabled.\n *\n * The log messages are de-duplicated based on the parameters, so it is assumed they are simple types that stringify\n * well.\n *\n * @param {function|boolean} debug A boolean or debug function\n * @return {function(function, array):void} A logging function possibly degenerate\n */\n\nconst createDebugLogger = debug => {\n  const log = !!debug && (typeof debug === 'function' ? debug : console.log);\n  const cache = {};\n  return log ? (msgFn, params) => {\n    const key = Function.prototype.toString.call(msgFn) + JSON.stringify(params);\n\n    if (!cache[key]) {\n      cache[key] = true;\n      log(msgFn.apply(null, params));\n    }\n  } : () => undefined;\n};\n\nexports.createDebugLogger = createDebugLogger;","map":{"version":3,"names":["path","require","PACKAGE_NAME","name","pathToString","absolutePath","relative","process","cwd","split","sep","segments","concat","filter","Boolean","lastIndexOf","join","exports","formatJoinMessage","filename","uri","attempts","attemptToCells","_","i","array","base","prev","curr","joined","formatCells","lines","maxWidth","reduce","max","cellA","Math","length","map","cellB","padEnd","cells","some","isSuccess","createDebugLogger","debug","log","console","cache","msgFn","params","key","Function","prototype","toString","call","JSON","stringify","apply","undefined"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/resolve-url-loader/lib/join-function/debug.js"],"sourcesContent":["/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nconst path = require('path');\n\nconst PACKAGE_NAME = require('../../package.json').name;\n\n/**\n * Paths are formatted to have posix style path separators and those within the CWD are made relative to CWD.\n *\n * @param {string} absolutePath An absolute path to format\n * @returns {string} the formatted path\n */\nconst pathToString = (absolutePath) => {\n  if (absolutePath === '') {\n    return '-empty-';\n  } else {\n    const relative = path.relative(process.cwd(), absolutePath).split(path.sep);\n    const segments =\n      (relative[0] !== '..') ? ['.'].concat(relative).filter(Boolean) :\n        (relative.lastIndexOf('..') < 2) ? relative :\n          absolutePath.split(path.sep);\n    return segments.join('/');\n  }\n};\n\nexports.pathToString = pathToString;\n\n/**\n * Format a debug message.\n *\n * @param {string} filename The file being processed by webpack\n * @param {string} uri A uri path, relative or absolute\n * @param {Array<{base:string,joined:string,isSuccess:boolean}>} attempts An array of attempts, possibly empty\n * @return {string} Formatted message\n */\nconst formatJoinMessage = (filename, uri, attempts) => {\n  const attemptToCells = (_, i, array) => {\n    const { base: prev } = (i === 0) ? {} : array[i-1];\n    const { base: curr, joined } = array[i];\n    return [(curr === prev) ? '' : pathToString(curr), pathToString(joined)];\n  };\n\n  const formatCells = (lines) => {\n    const maxWidth = lines.reduce((max, [cellA]) => Math.max(max, cellA.length), 0);\n    return lines.map(([cellA, cellB]) => [cellA.padEnd(maxWidth), cellB]).map((cells) => cells.join(' --> '));\n  };\n\n  return [PACKAGE_NAME + ': ' + pathToString(filename) + ': ' + uri]\n    .concat(attempts.length === 0 ? '-empty-' : formatCells(attempts.map(attemptToCells)))\n    .concat(attempts.some(({ isSuccess }) => isSuccess) ? 'FOUND' : 'NOT FOUND')\n    .join('\\n  ');\n};\n\nexports.formatJoinMessage = formatJoinMessage;\n\n/**\n * A factory for a log function predicated on the given debug parameter.\n *\n * The logging function created accepts a function that formats a message and parameters that the function utilises.\n * Presuming the message function may be expensive we only call it if logging is enabled.\n *\n * The log messages are de-duplicated based on the parameters, so it is assumed they are simple types that stringify\n * well.\n *\n * @param {function|boolean} debug A boolean or debug function\n * @return {function(function, array):void} A logging function possibly degenerate\n */\nconst createDebugLogger = (debug) => {\n  const log = !!debug && ((typeof debug === 'function') ? debug : console.log);\n  const cache = {};\n  return log ?\n    ((msgFn, params) => {\n      const key = Function.prototype.toString.call(msgFn) + JSON.stringify(params);\n      if (!cache[key]) {\n        cache[key] = true;\n        log(msgFn.apply(null, params));\n      }\n    }) :\n    (() => undefined);\n};\n\nexports.createDebugLogger = createDebugLogger;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}