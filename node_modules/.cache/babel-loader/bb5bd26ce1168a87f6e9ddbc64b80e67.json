{"ast":null,"code":"'use strict';\n\nconst {\n  unit\n} = require('postcss-value-parser');\n\nconst {\n  getArguments\n} = require('cssnano-utils');\n\nconst addSpace = require('../lib/addSpace');\n\nconst getValue = require('../lib/getValue');\n\nconst mathFunctions = require('../lib/mathfunctions.js');\n\nconst vendorUnprefixed = require('../lib/vendorUnprefixed.js'); // box-shadow: inset? && <length>{2,4} && <color>?\n\n/**\n * @param {import('postcss-value-parser').ParsedValue} parsed\n * @return {string}\n */\n\n\nmodule.exports = function normalizeBoxShadow(parsed) {\n  let args = getArguments(parsed);\n  const normalized = normalize(args);\n\n  if (normalized === false) {\n    return parsed.toString();\n  }\n\n  return getValue(normalized);\n};\n/**\n * @param {import('postcss-value-parser').Node[][]} args\n * @return {false | import('postcss-value-parser').Node[][]}\n */\n\n\nfunction normalize(args) {\n  const list = [];\n  let abort = false;\n\n  for (const arg of args) {\n    /** @type {import('postcss-value-parser').Node[]} */\n    let val = [];\n    /** @type {Record<'inset'|'color', import('postcss-value-parser').Node[]>} */\n\n    let state = {\n      inset: [],\n      color: []\n    };\n    arg.forEach(node => {\n      const {\n        type,\n        value\n      } = node;\n\n      if (type === 'function' && mathFunctions.has(vendorUnprefixed(value.toLowerCase()))) {\n        abort = true;\n        return;\n      }\n\n      if (type === 'space') {\n        return;\n      }\n\n      if (unit(value)) {\n        val = [...val, node, addSpace()];\n      } else if (value.toLowerCase() === 'inset') {\n        state.inset = [...state.inset, node, addSpace()];\n      } else {\n        state.color = [...state.color, node, addSpace()];\n      }\n    });\n\n    if (abort) {\n      return false;\n    }\n\n    list.push([...state.inset, ...val, ...state.color]);\n  }\n\n  return list;\n}","map":{"version":3,"names":["unit","require","getArguments","addSpace","getValue","mathFunctions","vendorUnprefixed","module","exports","normalizeBoxShadow","parsed","args","normalized","normalize","toString","list","abort","arg","val","state","inset","color","forEach","node","type","value","has","toLowerCase","push"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-ordered-values/src/rules/boxShadow.js"],"sourcesContent":["'use strict';\nconst { unit } = require('postcss-value-parser');\nconst { getArguments } = require('cssnano-utils');\nconst addSpace = require('../lib/addSpace');\nconst getValue = require('../lib/getValue');\nconst mathFunctions = require('../lib/mathfunctions.js');\nconst vendorUnprefixed = require('../lib/vendorUnprefixed.js');\n\n// box-shadow: inset? && <length>{2,4} && <color>?\n\n/**\n * @param {import('postcss-value-parser').ParsedValue} parsed\n * @return {string}\n */\nmodule.exports = function normalizeBoxShadow(parsed) {\n  let args = getArguments(parsed);\n\n  const normalized = normalize(args);\n\n  if (normalized === false) {\n    return parsed.toString();\n  }\n\n  return getValue(normalized);\n};\n/**\n * @param {import('postcss-value-parser').Node[][]} args\n * @return {false | import('postcss-value-parser').Node[][]}\n */\nfunction normalize(args) {\n  const list = [];\n  let abort = false;\n  for (const arg of args) {\n    /** @type {import('postcss-value-parser').Node[]} */\n    let val = [];\n    /** @type {Record<'inset'|'color', import('postcss-value-parser').Node[]>} */\n    let state = {\n      inset: [],\n      color: [],\n    };\n\n    arg.forEach((node) => {\n      const { type, value } = node;\n\n      if (\n        type === 'function' &&\n        mathFunctions.has(vendorUnprefixed(value.toLowerCase()))\n      ) {\n        abort = true;\n        return;\n      }\n\n      if (type === 'space') {\n        return;\n      }\n\n      if (unit(value)) {\n        val = [...val, node, addSpace()];\n      } else if (value.toLowerCase() === 'inset') {\n        state.inset = [...state.inset, node, addSpace()];\n      } else {\n        state.color = [...state.color, node, addSpace()];\n      }\n    });\n\n    if (abort) {\n      return false;\n    }\n\n    list.push([...state.inset, ...val, ...state.color]);\n  }\n  return list;\n}\n"],"mappings":"AAAA;;AACA,MAAM;EAAEA;AAAF,IAAWC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAM;EAAEC;AAAF,IAAmBD,OAAO,CAAC,eAAD,CAAhC;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,yBAAD,CAA7B;;AACA,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,4BAAD,CAAhC,C,CAEA;;AAEA;AACA;AACA;AACA;;;AACAM,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;EACnD,IAAIC,IAAI,GAAGT,YAAY,CAACQ,MAAD,CAAvB;EAEA,MAAME,UAAU,GAAGC,SAAS,CAACF,IAAD,CAA5B;;EAEA,IAAIC,UAAU,KAAK,KAAnB,EAA0B;IACxB,OAAOF,MAAM,CAACI,QAAP,EAAP;EACD;;EAED,OAAOV,QAAQ,CAACQ,UAAD,CAAf;AACD,CAVD;AAWA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBF,IAAnB,EAAyB;EACvB,MAAMI,IAAI,GAAG,EAAb;EACA,IAAIC,KAAK,GAAG,KAAZ;;EACA,KAAK,MAAMC,GAAX,IAAkBN,IAAlB,EAAwB;IACtB;IACA,IAAIO,GAAG,GAAG,EAAV;IACA;;IACA,IAAIC,KAAK,GAAG;MACVC,KAAK,EAAE,EADG;MAEVC,KAAK,EAAE;IAFG,CAAZ;IAKAJ,GAAG,CAACK,OAAJ,CAAaC,IAAD,IAAU;MACpB,MAAM;QAAEC,IAAF;QAAQC;MAAR,IAAkBF,IAAxB;;MAEA,IACEC,IAAI,KAAK,UAAT,IACAnB,aAAa,CAACqB,GAAd,CAAkBpB,gBAAgB,CAACmB,KAAK,CAACE,WAAN,EAAD,CAAlC,CAFF,EAGE;QACAX,KAAK,GAAG,IAAR;QACA;MACD;;MAED,IAAIQ,IAAI,KAAK,OAAb,EAAsB;QACpB;MACD;;MAED,IAAIxB,IAAI,CAACyB,KAAD,CAAR,EAAiB;QACfP,GAAG,GAAG,CAAC,GAAGA,GAAJ,EAASK,IAAT,EAAepB,QAAQ,EAAvB,CAAN;MACD,CAFD,MAEO,IAAIsB,KAAK,CAACE,WAAN,OAAwB,OAA5B,EAAqC;QAC1CR,KAAK,CAACC,KAAN,GAAc,CAAC,GAAGD,KAAK,CAACC,KAAV,EAAiBG,IAAjB,EAAuBpB,QAAQ,EAA/B,CAAd;MACD,CAFM,MAEA;QACLgB,KAAK,CAACE,KAAN,GAAc,CAAC,GAAGF,KAAK,CAACE,KAAV,EAAiBE,IAAjB,EAAuBpB,QAAQ,EAA/B,CAAd;MACD;IACF,CAtBD;;IAwBA,IAAIa,KAAJ,EAAW;MACT,OAAO,KAAP;IACD;;IAEDD,IAAI,CAACa,IAAL,CAAU,CAAC,GAAGT,KAAK,CAACC,KAAV,EAAiB,GAAGF,GAApB,EAAyB,GAAGC,KAAK,CAACE,KAAlC,CAAV;EACD;;EACD,OAAON,IAAP;AACD"},"metadata":{},"sourceType":"script"}