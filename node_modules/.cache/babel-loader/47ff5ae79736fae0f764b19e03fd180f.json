{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RULE_NAME = void 0;\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\n\nconst node_utils_1 = require(\"../node-utils\");\n\nexports.RULE_NAME = 'no-manual-cleanup';\nconst CLEANUP_LIBRARY_REGEXP = /(@testing-library\\/(preact|react|svelte|vue))|@marko\\/testing-library/;\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n  name: exports.RULE_NAME,\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallow the use of `cleanup`',\n      recommendedConfig: {\n        dom: false,\n        angular: false,\n        react: false,\n        vue: false,\n        marko: false\n      }\n    },\n    messages: {\n      noManualCleanup: \"`cleanup` is performed automatically by your test runner, you don't need manual cleanups.\"\n    },\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context, _, helpers) {\n    function reportImportReferences(references) {\n      for (const reference of references) {\n        const utilsUsage = reference.identifier.parent;\n\n        if (utilsUsage && (0, node_utils_1.isMemberExpression)(utilsUsage) && utils_1.ASTUtils.isIdentifier(utilsUsage.property) && utilsUsage.property.name === 'cleanup') {\n          context.report({\n            node: utilsUsage.property,\n            messageId: 'noManualCleanup'\n          });\n        }\n      }\n    }\n\n    function reportCandidateModule(moduleNode) {\n      if ((0, node_utils_1.isImportDeclaration)(moduleNode)) {\n        if ((0, node_utils_1.isImportDefaultSpecifier)(moduleNode.specifiers[0])) {\n          const {\n            references\n          } = context.getDeclaredVariables(moduleNode)[0];\n          reportImportReferences(references);\n        }\n\n        const cleanupSpecifier = moduleNode.specifiers.find(specifier => (0, node_utils_1.isImportSpecifier)(specifier) && specifier.imported.name === 'cleanup');\n\n        if (cleanupSpecifier) {\n          context.report({\n            node: cleanupSpecifier,\n            messageId: 'noManualCleanup'\n          });\n        }\n      } else {\n        const declaratorNode = moduleNode.parent;\n\n        if ((0, node_utils_1.isObjectPattern)(declaratorNode.id)) {\n          const cleanupProperty = declaratorNode.id.properties.find(property => (0, node_utils_1.isProperty)(property) && utils_1.ASTUtils.isIdentifier(property.key) && property.key.name === 'cleanup');\n\n          if (cleanupProperty) {\n            context.report({\n              node: cleanupProperty,\n              messageId: 'noManualCleanup'\n            });\n          }\n        } else {\n          const references = (0, node_utils_1.getVariableReferences)(context, declaratorNode);\n          reportImportReferences(references);\n        }\n      }\n    }\n\n    return {\n      'Program:exit'() {\n        const testingLibraryImportName = helpers.getTestingLibraryImportName();\n        const testingLibraryImportNode = helpers.getTestingLibraryImportNode();\n        const customModuleImportNode = helpers.getCustomModuleImportNode();\n\n        if (testingLibraryImportName && testingLibraryImportNode && testingLibraryImportName.match(CLEANUP_LIBRARY_REGEXP)) {\n          reportCandidateModule(testingLibraryImportNode);\n        }\n\n        if (customModuleImportNode) {\n          reportCandidateModule(customModuleImportNode);\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","RULE_NAME","utils_1","require","create_testing_library_rule_1","node_utils_1","CLEANUP_LIBRARY_REGEXP","default","createTestingLibraryRule","name","meta","type","docs","description","recommendedConfig","dom","angular","react","vue","marko","messages","noManualCleanup","schema","defaultOptions","create","context","_","helpers","reportImportReferences","references","reference","utilsUsage","identifier","parent","isMemberExpression","ASTUtils","isIdentifier","property","report","node","messageId","reportCandidateModule","moduleNode","isImportDeclaration","isImportDefaultSpecifier","specifiers","getDeclaredVariables","cleanupSpecifier","find","specifier","isImportSpecifier","imported","declaratorNode","isObjectPattern","id","cleanupProperty","properties","isProperty","key","getVariableReferences","testingLibraryImportName","getTestingLibraryImportName","testingLibraryImportNode","getTestingLibraryImportNode","customModuleImportNode","getCustomModuleImportNode","match"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-testing-library/rules/no-manual-cleanup.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RULE_NAME = void 0;\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\nconst node_utils_1 = require(\"../node-utils\");\nexports.RULE_NAME = 'no-manual-cleanup';\nconst CLEANUP_LIBRARY_REGEXP = /(@testing-library\\/(preact|react|svelte|vue))|@marko\\/testing-library/;\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n    name: exports.RULE_NAME,\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow the use of `cleanup`',\n            recommendedConfig: {\n                dom: false,\n                angular: false,\n                react: false,\n                vue: false,\n                marko: false,\n            },\n        },\n        messages: {\n            noManualCleanup: \"`cleanup` is performed automatically by your test runner, you don't need manual cleanups.\",\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context, _, helpers) {\n        function reportImportReferences(references) {\n            for (const reference of references) {\n                const utilsUsage = reference.identifier.parent;\n                if (utilsUsage &&\n                    (0, node_utils_1.isMemberExpression)(utilsUsage) &&\n                    utils_1.ASTUtils.isIdentifier(utilsUsage.property) &&\n                    utilsUsage.property.name === 'cleanup') {\n                    context.report({\n                        node: utilsUsage.property,\n                        messageId: 'noManualCleanup',\n                    });\n                }\n            }\n        }\n        function reportCandidateModule(moduleNode) {\n            if ((0, node_utils_1.isImportDeclaration)(moduleNode)) {\n                if ((0, node_utils_1.isImportDefaultSpecifier)(moduleNode.specifiers[0])) {\n                    const { references } = context.getDeclaredVariables(moduleNode)[0];\n                    reportImportReferences(references);\n                }\n                const cleanupSpecifier = moduleNode.specifiers.find((specifier) => (0, node_utils_1.isImportSpecifier)(specifier) &&\n                    specifier.imported.name === 'cleanup');\n                if (cleanupSpecifier) {\n                    context.report({\n                        node: cleanupSpecifier,\n                        messageId: 'noManualCleanup',\n                    });\n                }\n            }\n            else {\n                const declaratorNode = moduleNode.parent;\n                if ((0, node_utils_1.isObjectPattern)(declaratorNode.id)) {\n                    const cleanupProperty = declaratorNode.id.properties.find((property) => (0, node_utils_1.isProperty)(property) &&\n                        utils_1.ASTUtils.isIdentifier(property.key) &&\n                        property.key.name === 'cleanup');\n                    if (cleanupProperty) {\n                        context.report({\n                            node: cleanupProperty,\n                            messageId: 'noManualCleanup',\n                        });\n                    }\n                }\n                else {\n                    const references = (0, node_utils_1.getVariableReferences)(context, declaratorNode);\n                    reportImportReferences(references);\n                }\n            }\n        }\n        return {\n            'Program:exit'() {\n                const testingLibraryImportName = helpers.getTestingLibraryImportName();\n                const testingLibraryImportNode = helpers.getTestingLibraryImportNode();\n                const customModuleImportNode = helpers.getCustomModuleImportNode();\n                if (testingLibraryImportName &&\n                    testingLibraryImportNode &&\n                    testingLibraryImportName.match(CLEANUP_LIBRARY_REGEXP)) {\n                    reportCandidateModule(testingLibraryImportNode);\n                }\n                if (customModuleImportNode) {\n                    reportCandidateModule(customModuleImportNode);\n                }\n            },\n        };\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}