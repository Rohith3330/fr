{"ast":null,"code":"/**\n * @fileoverview Rule to flag when a function has too many parameters\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst {\n  upperCaseFirst\n} = require(\"../shared/string-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Enforce a maximum number of parameters in function definitions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-params\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      exceed: \"{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const option = context.options[0];\n    let numParams = 3;\n\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      numParams = option.maximum || option.max;\n    }\n\n    if (typeof option === \"number\") {\n      numParams = option;\n    }\n    /**\n     * Checks a function to see if it has too many parameters.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkFunction(node) {\n      if (node.params.length > numParams) {\n        context.report({\n          loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n          node,\n          messageId: \"exceed\",\n          data: {\n            name: upperCaseFirst(astUtils.getFunctionNameWithKind(node)),\n            count: node.params.length,\n            max: numParams\n          }\n        });\n      }\n    }\n\n    return {\n      FunctionDeclaration: checkFunction,\n      ArrowFunctionExpression: checkFunction,\n      FunctionExpression: checkFunction\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","upperCaseFirst","module","exports","meta","type","docs","description","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","messages","exceed","create","context","sourceCode","getSourceCode","option","options","numParams","Object","prototype","hasOwnProperty","call","checkFunction","node","params","length","report","loc","getFunctionHeadLoc","messageId","data","name","getFunctionNameWithKind","count","FunctionDeclaration","ArrowFunctionExpression","FunctionExpression"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/max-params.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when a function has too many parameters\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { upperCaseFirst } = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Enforce a maximum number of parameters in function definitions\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-params\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n        messages: {\n            exceed: \"{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const option = context.options[0];\n        let numParams = 3;\n\n        if (\n            typeof option === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\n        ) {\n            numParams = option.maximum || option.max;\n        }\n        if (typeof option === \"number\") {\n            numParams = option;\n        }\n\n        /**\n         * Checks a function to see if it has too many parameters.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkFunction(node) {\n            if (node.params.length > numParams) {\n                context.report({\n                    loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n                    node,\n                    messageId: \"exceed\",\n                    data: {\n                        name: upperCaseFirst(astUtils.getFunctionNameWithKind(node)),\n                        count: node.params.length,\n                        max: numParams\n                    }\n                });\n            }\n        }\n\n        return {\n            FunctionDeclaration: checkFunction,\n            ArrowFunctionExpression: checkFunction,\n            FunctionExpression: checkFunction\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB;;AACA,MAAM;EAAEC;AAAF,IAAqBD,OAAO,CAAC,wBAAD,CAAlC,C,CAEA;AACA;AACA;;AAEA;;;AACAE,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,gEADX;MAEFC,WAAW,EAAE,KAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,CACJ;MACIC,KAAK,EAAE,CACH;QACIN,IAAI,EAAE,SADV;QAEIO,OAAO,EAAE;MAFb,CADG,EAKH;QACIP,IAAI,EAAE,QADV;QAEIQ,UAAU,EAAE;UACRC,OAAO,EAAE;YACLT,IAAI,EAAE,SADD;YAELO,OAAO,EAAE;UAFJ,CADD;UAKRG,GAAG,EAAE;YACDV,IAAI,EAAE,SADL;YAEDO,OAAO,EAAE;UAFR;QALG,CAFhB;QAYII,oBAAoB,EAAE;MAZ1B,CALG;IADX,CADI,CATN;IAiCFC,QAAQ,EAAE;MACNC,MAAM,EAAE;IADF;EAjCR,CADO;;EAuCbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IACA,MAAMC,MAAM,GAAGH,OAAO,CAACI,OAAR,CAAgB,CAAhB,CAAf;IACA,IAAIC,SAAS,GAAG,CAAhB;;IAEA,IACI,OAAOF,MAAP,KAAkB,QAAlB,KACCG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,MAArC,EAA6C,SAA7C,KAA2DG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,MAArC,EAA6C,KAA7C,CAD5D,CADJ,EAGE;MACEE,SAAS,GAAGF,MAAM,CAACT,OAAP,IAAkBS,MAAM,CAACR,GAArC;IACH;;IACD,IAAI,OAAOQ,MAAP,KAAkB,QAAtB,EAAgC;MAC5BE,SAAS,GAAGF,MAAZ;IACH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAASO,aAAT,CAAuBC,IAAvB,EAA6B;MACzB,IAAIA,IAAI,CAACC,MAAL,CAAYC,MAAZ,GAAqBR,SAAzB,EAAoC;QAChCL,OAAO,CAACc,MAAR,CAAe;UACXC,GAAG,EAAEpC,QAAQ,CAACqC,kBAAT,CAA4BL,IAA5B,EAAkCV,UAAlC,CADM;UAEXU,IAFW;UAGXM,SAAS,EAAE,QAHA;UAIXC,IAAI,EAAE;YACFC,IAAI,EAAEtC,cAAc,CAACF,QAAQ,CAACyC,uBAAT,CAAiCT,IAAjC,CAAD,CADlB;YAEFU,KAAK,EAAEV,IAAI,CAACC,MAAL,CAAYC,MAFjB;YAGFlB,GAAG,EAAEU;UAHH;QAJK,CAAf;MAUH;IACJ;;IAED,OAAO;MACHiB,mBAAmB,EAAEZ,aADlB;MAEHa,uBAAuB,EAAEb,aAFtB;MAGHc,kBAAkB,EAAEd;IAHjB,CAAP;EAMH;;AAjFY,CAAjB"},"metadata":{},"sourceType":"script"}