{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _taggedTemplateLiteral = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\n\nvar _templateObject;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nfunction helpers() {\n  var data = require(\"@babel/helpers\");\n\n  helpers = function helpers() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _generator() {\n  var data = require(\"@babel/generator\");\n\n  _generator = function _generator() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _template() {\n  var data = require(\"@babel/template\");\n\n  _template = function _template() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _t() {\n  var data = require(\"@babel/types\");\n\n  _t = function _t() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _file = require(\"../transformation/file/file\");\n\nvar _t2 = _t(),\n    arrayExpression = _t2.arrayExpression,\n    assignmentExpression = _t2.assignmentExpression,\n    binaryExpression = _t2.binaryExpression,\n    blockStatement = _t2.blockStatement,\n    callExpression = _t2.callExpression,\n    cloneNode = _t2.cloneNode,\n    conditionalExpression = _t2.conditionalExpression,\n    exportNamedDeclaration = _t2.exportNamedDeclaration,\n    exportSpecifier = _t2.exportSpecifier,\n    expressionStatement = _t2.expressionStatement,\n    functionExpression = _t2.functionExpression,\n    identifier = _t2.identifier,\n    memberExpression = _t2.memberExpression,\n    objectExpression = _t2.objectExpression,\n    program = _t2.program,\n    stringLiteral = _t2.stringLiteral,\n    unaryExpression = _t2.unaryExpression,\n    variableDeclaration = _t2.variableDeclaration,\n    variableDeclarator = _t2.variableDeclarator;\n\nvar buildUmdWrapper = function buildUmdWrapper(replacements) {\n  return _template().default.statement(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    (function (root, factory) {\\n      if (typeof define === \\\"function\\\" && define.amd) {\\n        define(AMD_ARGUMENTS, factory);\\n      } else if (typeof exports === \\\"object\\\") {\\n        factory(COMMON_ARGUMENTS);\\n      } else {\\n        factory(BROWSER_ARGUMENTS);\\n      }\\n    })(UMD_ROOT, function (FACTORY_PARAMETERS) {\\n      FACTORY_BODY\\n    });\\n  \"])))(replacements);\n};\n\nfunction buildGlobal(allowlist) {\n  var namespace = identifier(\"babelHelpers\");\n  var body = [];\n  var container = functionExpression(null, [identifier(\"global\")], blockStatement(body));\n  var tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression(\"===\", unaryExpression(\"typeof\", identifier(\"global\")), stringLiteral(\"undefined\")), identifier(\"self\"), identifier(\"global\"))]))]);\n  body.push(variableDeclaration(\"var\", [variableDeclarator(namespace, assignmentExpression(\"=\", memberExpression(identifier(\"global\"), namespace), objectExpression([])))]));\n  buildHelpers(body, namespace, allowlist);\n  return tree;\n}\n\nfunction buildModule(allowlist) {\n  var body = [];\n  var refs = buildHelpers(body, null, allowlist);\n  body.unshift(exportNamedDeclaration(null, Object.keys(refs).map(function (name) {\n    return exportSpecifier(cloneNode(refs[name]), identifier(name));\n  })));\n  return program(body, [], \"module\");\n}\n\nfunction buildUmd(allowlist) {\n  var namespace = identifier(\"babelHelpers\");\n  var body = [];\n  body.push(variableDeclaration(\"var\", [variableDeclarator(namespace, identifier(\"global\"))]));\n  buildHelpers(body, namespace, allowlist);\n  return program([buildUmdWrapper({\n    FACTORY_PARAMETERS: identifier(\"global\"),\n    BROWSER_ARGUMENTS: assignmentExpression(\"=\", memberExpression(identifier(\"root\"), namespace), objectExpression([])),\n    COMMON_ARGUMENTS: identifier(\"exports\"),\n    AMD_ARGUMENTS: arrayExpression([stringLiteral(\"exports\")]),\n    FACTORY_BODY: body,\n    UMD_ROOT: identifier(\"this\")\n  })]);\n}\n\nfunction buildVar(allowlist) {\n  var namespace = identifier(\"babelHelpers\");\n  var body = [];\n  body.push(variableDeclaration(\"var\", [variableDeclarator(namespace, objectExpression([]))]));\n  var tree = program(body);\n  buildHelpers(body, namespace, allowlist);\n  body.push(expressionStatement(namespace));\n  return tree;\n}\n\nfunction buildHelpers(body, namespace, allowlist) {\n  var getHelperReference = function getHelperReference(name) {\n    return namespace ? memberExpression(namespace, identifier(name)) : identifier(\"_\".concat(name));\n  };\n\n  var refs = {};\n  helpers().list.forEach(function (name) {\n    if (allowlist && allowlist.indexOf(name) < 0) return;\n    var ref = refs[name] = getHelperReference(name);\n    helpers().ensure(name, _file.default);\n\n    var _helpers$get = helpers().get(name, getHelperReference, ref),\n        nodes = _helpers$get.nodes;\n\n    body.push.apply(body, _toConsumableArray(nodes));\n  });\n  return refs;\n}\n\nfunction _default(allowlist) {\n  var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"global\";\n  var tree;\n  var build = {\n    global: buildGlobal,\n    module: buildModule,\n    umd: buildUmd,\n    var: buildVar\n  }[outputType];\n\n  if (build) {\n    tree = build(allowlist);\n  } else {\n    throw new Error(\"Unsupported output type \".concat(outputType));\n  }\n\n  return (0, _generator().default)(tree).code;\n}\n\n0 && 0;","map":{"version":3,"mappings":"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","names":["helpers","_generator","_template","_t","arrayExpression","assignmentExpression","binaryExpression","blockStatement","callExpression","cloneNode","conditionalExpression","exportNamedDeclaration","exportSpecifier","expressionStatement","functionExpression","identifier","memberExpression","objectExpression","program","stringLiteral","unaryExpression","variableDeclaration","variableDeclarator","buildUmdWrapper","replacements","template","statement","buildGlobal","allowlist","namespace","body","container","tree","push","buildHelpers","buildModule","refs","unshift","Object","keys","map","name","buildUmd","FACTORY_PARAMETERS","BROWSER_ARGUMENTS","COMMON_ARGUMENTS","AMD_ARGUMENTS","FACTORY_BODY","UMD_ROOT","buildVar","getHelperReference","list","forEach","indexOf","ref","ensure","File","get","nodes","outputType","build","global","module","umd","var","Error","code"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\tools\\build-external-helpers.ts"],"sourcesContent":["import * as helpers from \"@babel/helpers\";\nimport generator from \"@babel/generator\";\nimport template from \"@babel/template\";\nimport {\n  arrayExpression,\n  assignmentExpression,\n  binaryExpression,\n  blockStatement,\n  callExpression,\n  cloneNode,\n  conditionalExpression,\n  exportNamedDeclaration,\n  exportSpecifier,\n  expressionStatement,\n  functionExpression,\n  identifier,\n  memberExpression,\n  objectExpression,\n  program,\n  stringLiteral,\n  unaryExpression,\n  variableDeclaration,\n  variableDeclarator,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport File from \"../transformation/file/file\";\nimport type { PublicReplacements } from \"@babel/template/src/options\";\n\n// Wrapped to avoid wasting time parsing this when almost no-one uses\n// build-external-helpers.\nconst buildUmdWrapper = (replacements: PublicReplacements) =>\n  template.statement`\n    (function (root, factory) {\n      if (typeof define === \"function\" && define.amd) {\n        define(AMD_ARGUMENTS, factory);\n      } else if (typeof exports === \"object\") {\n        factory(COMMON_ARGUMENTS);\n      } else {\n        factory(BROWSER_ARGUMENTS);\n      }\n    })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n      FACTORY_BODY\n    });\n  `(replacements);\n\nfunction buildGlobal(allowlist?: Array<string>) {\n  const namespace = identifier(\"babelHelpers\");\n\n  const body: t.Statement[] = [];\n  const container = functionExpression(\n    null,\n    [identifier(\"global\")],\n    blockStatement(body),\n  );\n  const tree = program([\n    expressionStatement(\n      callExpression(container, [\n        // typeof global === \"undefined\" ? self : global\n        conditionalExpression(\n          binaryExpression(\n            \"===\",\n            unaryExpression(\"typeof\", identifier(\"global\")),\n            stringLiteral(\"undefined\"),\n          ),\n          identifier(\"self\"),\n          identifier(\"global\"),\n        ),\n      ]),\n    ),\n  ]);\n\n  body.push(\n    variableDeclaration(\"var\", [\n      variableDeclarator(\n        namespace,\n        assignmentExpression(\n          \"=\",\n          memberExpression(identifier(\"global\"), namespace),\n          objectExpression([]),\n        ),\n      ),\n    ]),\n  );\n\n  buildHelpers(body, namespace, allowlist);\n\n  return tree;\n}\n\nfunction buildModule(allowlist?: Array<string>) {\n  const body: t.Statement[] = [];\n  const refs = buildHelpers(body, null, allowlist);\n\n  body.unshift(\n    exportNamedDeclaration(\n      null,\n      Object.keys(refs).map(name => {\n        return exportSpecifier(cloneNode(refs[name]), identifier(name));\n      }),\n    ),\n  );\n\n  return program(body, [], \"module\");\n}\n\nfunction buildUmd(allowlist?: Array<string>) {\n  const namespace = identifier(\"babelHelpers\");\n\n  const body: t.Statement[] = [];\n  body.push(\n    variableDeclaration(\"var\", [\n      variableDeclarator(namespace, identifier(\"global\")),\n    ]),\n  );\n\n  buildHelpers(body, namespace, allowlist);\n\n  return program([\n    buildUmdWrapper({\n      FACTORY_PARAMETERS: identifier(\"global\"),\n      BROWSER_ARGUMENTS: assignmentExpression(\n        \"=\",\n        memberExpression(identifier(\"root\"), namespace),\n        objectExpression([]),\n      ),\n      COMMON_ARGUMENTS: identifier(\"exports\"),\n      AMD_ARGUMENTS: arrayExpression([stringLiteral(\"exports\")]),\n      FACTORY_BODY: body,\n      UMD_ROOT: identifier(\"this\"),\n    }),\n  ]);\n}\n\nfunction buildVar(allowlist?: Array<string>) {\n  const namespace = identifier(\"babelHelpers\");\n\n  const body: t.Statement[] = [];\n  body.push(\n    variableDeclaration(\"var\", [\n      variableDeclarator(namespace, objectExpression([])),\n    ]),\n  );\n  const tree = program(body);\n  buildHelpers(body, namespace, allowlist);\n  body.push(expressionStatement(namespace));\n  return tree;\n}\n\nfunction buildHelpers(\n  body: t.Statement[],\n  namespace: t.Expression,\n  allowlist?: Array<string>,\n): Record<string, t.MemberExpression>;\nfunction buildHelpers(\n  body: t.Statement[],\n  namespace: null,\n  allowlist?: Array<string>,\n): Record<string, t.Identifier>;\n\nfunction buildHelpers(\n  body: t.Statement[],\n  namespace: t.Expression | null,\n  allowlist?: Array<string>,\n) {\n  const getHelperReference = (name: string) => {\n    return namespace\n      ? memberExpression(namespace, identifier(name))\n      : identifier(`_${name}`);\n  };\n\n  const refs: { [key: string]: t.Identifier | t.MemberExpression } = {};\n  helpers.list.forEach(function (name) {\n    if (allowlist && allowlist.indexOf(name) < 0) return;\n\n    const ref = (refs[name] = getHelperReference(name));\n\n    helpers.ensure(name, File);\n    const { nodes } = helpers.get(name, getHelperReference, ref);\n\n    body.push(...nodes);\n  });\n  return refs;\n}\nexport default function (\n  allowlist?: Array<string>,\n  outputType: \"global\" | \"module\" | \"umd\" | \"var\" = \"global\",\n) {\n  let tree: t.Program;\n\n  const build = {\n    global: buildGlobal,\n    module: buildModule,\n    umd: buildUmd,\n    var: buildVar,\n  }[outputType];\n\n  if (build) {\n    tree = build(allowlist);\n  } else {\n    throw new Error(`Unsupported output type ${outputType}`);\n  }\n\n  return generator(tree).code;\n}\n"]},"metadata":{},"sourceType":"script"}