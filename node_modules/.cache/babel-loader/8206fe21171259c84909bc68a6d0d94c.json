{"ast":null,"code":"/**\n * @author Matthew Caruana Galizia <m@m.cg>\n * @license MIT: http://mattcg.mit-license.org/\n * @copyright Copyright (c) 2013, Matthew Caruana Galizia\n */\n\n/*jshint node:true*/\n\n/*global test, suite*/\n'use strict';\n\nvar assert = require('assert');\n\nvar tags = require(process.env.TEST_LIB_PATH);\n\nsuite('tags', function () {\n  test('date() returns file date', function () {\n    assert(/\\d{4}\\-\\d{2}\\-\\d{2}/.test(tags.date()));\n  });\n  test('type() returns subtag by type', function () {\n    var subtag;\n    subtag = tags.type('Latn', 'script');\n    assert(subtag);\n    assert.equal(subtag.format(), 'Latn');\n    assert.equal(subtag.type(), 'script');\n    assert.equal(tags.type('en', 'script'), null);\n  });\n  test('region() returns subtag by region', function () {\n    var subtag;\n    subtag = tags.region('IQ');\n    assert(subtag);\n    assert.equal(subtag.format(), 'IQ');\n    assert.equal(subtag.type(), 'region');\n    assert.equal(tags.region('en'), null);\n  });\n  test('language() returns subtag by language', function () {\n    var subtag;\n    subtag = tags.language('en');\n    assert(subtag);\n    assert.equal(subtag.format(), 'en');\n    assert.equal(subtag.type(), 'language');\n    assert.equal(tags.language('GB'), null);\n  });\n  test('languages() returns all languages for macrolanguage', function () {\n    var subtags, err;\n    subtags = tags.languages('zh');\n    assert(subtags.length > 0);\n\n    try {\n      assert.equal(tags.languages('en'));\n    } catch (e) {\n      err = e;\n    }\n\n    assert(err);\n    assert.equal(err.message, '\\'en\\' is not a macrolanguage.');\n  });\n  test('search() matches descriptions', function () {\n    var subtags;\n    subtags = tags.search('Maltese');\n    assert(subtags.length > 0);\n    assert.equal(subtags[0].type(), 'language');\n    assert.equal(subtags[0].format(), 'mt');\n    assert.equal(subtags[1].type(), 'language');\n    assert.equal(subtags[1].format(), 'mdl');\n    assert.equal(subtags[2].type(), 'extlang');\n    assert.equal(subtags[2].format(), 'mdl');\n    subtags = tags.search('Gibberish');\n    assert.deepEqual(subtags, []);\n  });\n  test('search() puts exact match at the top', function () {\n    var subtags;\n    subtags = tags.search('Dari');\n    assert(subtags.length > 0);\n    assert.equal(subtags[0].type(), 'language');\n    assert.equal(subtags[0].format(), 'prs');\n  });\n  test('subtags() returns subtags', function () {\n    var subtags;\n    subtags = tags.subtags('whatever');\n    assert.deepEqual(subtags, []);\n    subtags = tags.subtags('mt');\n    assert.equal(subtags.length, 2);\n    assert.equal(subtags[0].type(), 'language');\n    assert.equal(subtags[0].format(), 'mt');\n    assert.equal(subtags[1].type(), 'region');\n    assert.equal(subtags[1].format(), 'MT');\n  });\n  test('check() checks tag validity', function () {\n    assert(tags.check('en'));\n    assert(!tags.check('mo'));\n  });\n  test('gets tag', function () {\n    var tag;\n    tag = tags('en');\n    assert(tag);\n    tag = tags('en-gb');\n    assert(tag);\n    assert.equal(tag.format(), 'en-GB');\n  });\n});","map":{"version":3,"names":["assert","require","tags","process","env","TEST_LIB_PATH","suite","test","date","subtag","type","equal","format","region","language","subtags","err","languages","length","e","message","search","deepEqual","check","tag"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/language-tags/test/lib/index-test.js"],"sourcesContent":["/**\n * @author Matthew Caruana Galizia <m@m.cg>\n * @license MIT: http://mattcg.mit-license.org/\n * @copyright Copyright (c) 2013, Matthew Caruana Galizia\n */\n\n/*jshint node:true*/\n/*global test, suite*/\n\n'use strict';\n\nvar assert = require('assert');\nvar tags = require(process.env.TEST_LIB_PATH);\n\nsuite('tags', function() {\n\n\ttest('date() returns file date', function() {\n\t\tassert(/\\d{4}\\-\\d{2}\\-\\d{2}/.test(tags.date()));\n\t});\n\n\ttest('type() returns subtag by type', function() {\n\t\tvar subtag;\n\n\t\tsubtag = tags.type('Latn', 'script');\n\t\tassert(subtag);\n\t\tassert.equal(subtag.format(), 'Latn');\n\t\tassert.equal(subtag.type(), 'script');\n\n\t\tassert.equal(tags.type('en', 'script'), null);\n\t});\n\n\ttest('region() returns subtag by region', function() {\n\t\tvar subtag;\n\n\t\tsubtag = tags.region('IQ');\n\t\tassert(subtag);\n\t\tassert.equal(subtag.format(), 'IQ');\n\t\tassert.equal(subtag.type(), 'region');\n\n\t\tassert.equal(tags.region('en'), null);\n\t});\n\n\ttest('language() returns subtag by language', function() {\n\t\tvar subtag;\n\n\t\tsubtag = tags.language('en');\n\t\tassert(subtag);\n\t\tassert.equal(subtag.format(), 'en');\n\t\tassert.equal(subtag.type(), 'language');\n\n\t\tassert.equal(tags.language('GB'), null);\n\t});\n\n\ttest('languages() returns all languages for macrolanguage', function() {\n\t\tvar subtags, err;\n\n\t\tsubtags = tags.languages('zh');\n\t\tassert(subtags.length > 0);\n\n\t\ttry {\n\t\t\tassert.equal(tags.languages('en'));\n\t\t} catch (e) {\n\t\t\terr = e;\n\t\t}\n\n\t\tassert(err);\n\t\tassert.equal(err.message, '\\'en\\' is not a macrolanguage.');\n\t});\n\n\ttest('search() matches descriptions', function() {\n\t\tvar subtags;\n\n\t\tsubtags = tags.search('Maltese');\n\t\tassert(subtags.length > 0);\n\n\t\tassert.equal(subtags[0].type(), 'language');\n\t\tassert.equal(subtags[0].format(), 'mt');\n\t\tassert.equal(subtags[1].type(), 'language');\n\t\tassert.equal(subtags[1].format(), 'mdl');\n\t\tassert.equal(subtags[2].type(), 'extlang');\n\t\tassert.equal(subtags[2].format(), 'mdl');\n\n\t\tsubtags = tags.search('Gibberish');\n\t\tassert.deepEqual(subtags, []);\n\t});\n\n\ttest('search() puts exact match at the top', function() {\n\t\tvar subtags;\n\n\t\tsubtags = tags.search('Dari');\n\t\tassert(subtags.length > 0);\n\n\t\tassert.equal(subtags[0].type(), 'language');\n\t\tassert.equal(subtags[0].format(), 'prs');\n\t});\n\n\ttest('subtags() returns subtags', function() {\n\t\tvar subtags;\n\n\t\tsubtags = tags.subtags('whatever');\n\t\tassert.deepEqual(subtags, []);\n\n\t\tsubtags = tags.subtags('mt');\n\t\tassert.equal(subtags.length, 2);\n\t\tassert.equal(subtags[0].type(), 'language');\n\t\tassert.equal(subtags[0].format(), 'mt');\n\t\tassert.equal(subtags[1].type(), 'region');\n\t\tassert.equal(subtags[1].format(), 'MT');\n\t});\n\n\ttest('check() checks tag validity', function() {\n\t\tassert(tags.check('en'));\n\t\tassert(!tags.check('mo'));\n\t});\n\n\ttest('gets tag', function() {\n\t\tvar tag;\n\n\t\ttag = tags('en');\n\t\tassert(tag);\n\n\t\ttag = tags('en-gb');\n\t\tassert(tag);\n\t\tassert.equal(tag.format(), 'en-GB');\n\t});\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}