{"ast":null,"code":"export default function stringifyValidator(validator, nodePrefix) {\n  if (validator === undefined) {\n    return \"any\";\n  }\n\n  if (validator.each) {\n    return `Array<${stringifyValidator(validator.each, nodePrefix)}>`;\n  }\n\n  if (validator.chainOf) {\n    const ret = stringifyValidator(validator.chainOf[1], nodePrefix);\n    return Array.isArray(ret) && ret.length === 1 && ret[0] === \"any\" ? stringifyValidator(validator.chainOf[0], nodePrefix) : ret;\n  }\n\n  if (validator.oneOf) {\n    return validator.oneOf.map(JSON.stringify).join(\" | \");\n  }\n\n  if (validator.oneOfNodeTypes) {\n    return validator.oneOfNodeTypes.map(_ => nodePrefix + _).join(\" | \");\n  }\n\n  if (validator.oneOfNodeOrValueTypes) {\n    return validator.oneOfNodeOrValueTypes.map(_ => {\n      return isValueType(_) ? _ : nodePrefix + _;\n    }).join(\" | \");\n  }\n\n  if (validator.type) {\n    return validator.type;\n  }\n\n  if (validator.shapeOf) {\n    return \"{ \" + Object.keys(validator.shapeOf).map(shapeKey => {\n      const propertyDefinition = validator.shapeOf[shapeKey];\n\n      if (propertyDefinition.validate) {\n        const isOptional = propertyDefinition.optional || propertyDefinition.default != null;\n        return shapeKey + (isOptional ? \"?: \" : \": \") + stringifyValidator(propertyDefinition.validate);\n      }\n\n      return null;\n    }).filter(Boolean).join(\", \") + \" }\";\n  }\n\n  return [\"any\"];\n}\n/**\n * Heuristic to decide whether or not the given type is a value type (eg. \"null\")\n * or a Node type (eg. \"Expression\").\n */\n\nexport function isValueType(type) {\n  return type.charAt(0).toLowerCase() === type.charAt(0);\n}","map":{"version":3,"names":["stringifyValidator","validator","nodePrefix","undefined","each","chainOf","ret","Array","isArray","length","oneOf","map","JSON","stringify","join","oneOfNodeTypes","_","oneOfNodeOrValueTypes","isValueType","type","shapeOf","Object","keys","shapeKey","propertyDefinition","validate","isOptional","optional","default","filter","Boolean","charAt","toLowerCase"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@babel/types/scripts/utils/stringifyValidator.js"],"sourcesContent":["export default function stringifyValidator(validator, nodePrefix) {\n  if (validator === undefined) {\n    return \"any\";\n  }\n\n  if (validator.each) {\n    return `Array<${stringifyValidator(validator.each, nodePrefix)}>`;\n  }\n\n  if (validator.chainOf) {\n    const ret = stringifyValidator(validator.chainOf[1], nodePrefix);\n    return Array.isArray(ret) && ret.length === 1 && ret[0] === \"any\"\n      ? stringifyValidator(validator.chainOf[0], nodePrefix)\n      : ret;\n  }\n\n  if (validator.oneOf) {\n    return validator.oneOf.map(JSON.stringify).join(\" | \");\n  }\n\n  if (validator.oneOfNodeTypes) {\n    return validator.oneOfNodeTypes.map(_ => nodePrefix + _).join(\" | \");\n  }\n\n  if (validator.oneOfNodeOrValueTypes) {\n    return validator.oneOfNodeOrValueTypes\n      .map(_ => {\n        return isValueType(_) ? _ : nodePrefix + _;\n      })\n      .join(\" | \");\n  }\n\n  if (validator.type) {\n    return validator.type;\n  }\n\n  if (validator.shapeOf) {\n    return (\n      \"{ \" +\n      Object.keys(validator.shapeOf)\n        .map(shapeKey => {\n          const propertyDefinition = validator.shapeOf[shapeKey];\n          if (propertyDefinition.validate) {\n            const isOptional =\n              propertyDefinition.optional || propertyDefinition.default != null;\n            return (\n              shapeKey +\n              (isOptional ? \"?: \" : \": \") +\n              stringifyValidator(propertyDefinition.validate)\n            );\n          }\n          return null;\n        })\n        .filter(Boolean)\n        .join(\", \") +\n      \" }\"\n    );\n  }\n\n  return [\"any\"];\n}\n\n/**\n * Heuristic to decide whether or not the given type is a value type (eg. \"null\")\n * or a Node type (eg. \"Expression\").\n */\nexport function isValueType(type) {\n  return type.charAt(0).toLowerCase() === type.charAt(0);\n}\n"],"mappings":"AAAA,eAAe,SAASA,kBAAT,CAA4BC,SAA5B,EAAuCC,UAAvC,EAAmD;EAChE,IAAID,SAAS,KAAKE,SAAlB,EAA6B;IAC3B,OAAO,KAAP;EACD;;EAED,IAAIF,SAAS,CAACG,IAAd,EAAoB;IAClB,OAAQ,SAAQJ,kBAAkB,CAACC,SAAS,CAACG,IAAX,EAAiBF,UAAjB,CAA6B,GAA/D;EACD;;EAED,IAAID,SAAS,CAACI,OAAd,EAAuB;IACrB,MAAMC,GAAG,GAAGN,kBAAkB,CAACC,SAAS,CAACI,OAAV,CAAkB,CAAlB,CAAD,EAAuBH,UAAvB,CAA9B;IACA,OAAOK,KAAK,CAACC,OAAN,CAAcF,GAAd,KAAsBA,GAAG,CAACG,MAAJ,KAAe,CAArC,IAA0CH,GAAG,CAAC,CAAD,CAAH,KAAW,KAArD,GACHN,kBAAkB,CAACC,SAAS,CAACI,OAAV,CAAkB,CAAlB,CAAD,EAAuBH,UAAvB,CADf,GAEHI,GAFJ;EAGD;;EAED,IAAIL,SAAS,CAACS,KAAd,EAAqB;IACnB,OAAOT,SAAS,CAACS,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,CAACC,SAAzB,EAAoCC,IAApC,CAAyC,KAAzC,CAAP;EACD;;EAED,IAAIb,SAAS,CAACc,cAAd,EAA8B;IAC5B,OAAOd,SAAS,CAACc,cAAV,CAAyBJ,GAAzB,CAA6BK,CAAC,IAAId,UAAU,GAAGc,CAA/C,EAAkDF,IAAlD,CAAuD,KAAvD,CAAP;EACD;;EAED,IAAIb,SAAS,CAACgB,qBAAd,EAAqC;IACnC,OAAOhB,SAAS,CAACgB,qBAAV,CACJN,GADI,CACAK,CAAC,IAAI;MACR,OAAOE,WAAW,CAACF,CAAD,CAAX,GAAiBA,CAAjB,GAAqBd,UAAU,GAAGc,CAAzC;IACD,CAHI,EAIJF,IAJI,CAIC,KAJD,CAAP;EAKD;;EAED,IAAIb,SAAS,CAACkB,IAAd,EAAoB;IAClB,OAAOlB,SAAS,CAACkB,IAAjB;EACD;;EAED,IAAIlB,SAAS,CAACmB,OAAd,EAAuB;IACrB,OACE,OACAC,MAAM,CAACC,IAAP,CAAYrB,SAAS,CAACmB,OAAtB,EACGT,GADH,CACOY,QAAQ,IAAI;MACf,MAAMC,kBAAkB,GAAGvB,SAAS,CAACmB,OAAV,CAAkBG,QAAlB,CAA3B;;MACA,IAAIC,kBAAkB,CAACC,QAAvB,EAAiC;QAC/B,MAAMC,UAAU,GACdF,kBAAkB,CAACG,QAAnB,IAA+BH,kBAAkB,CAACI,OAAnB,IAA8B,IAD/D;QAEA,OACEL,QAAQ,IACPG,UAAU,GAAG,KAAH,GAAW,IADd,CAAR,GAEA1B,kBAAkB,CAACwB,kBAAkB,CAACC,QAApB,CAHpB;MAKD;;MACD,OAAO,IAAP;IACD,CAbH,EAcGI,MAdH,CAcUC,OAdV,EAeGhB,IAfH,CAeQ,IAfR,CADA,GAiBA,IAlBF;EAoBD;;EAED,OAAO,CAAC,KAAD,CAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASI,WAAT,CAAqBC,IAArB,EAA2B;EAChC,OAAOA,IAAI,CAACY,MAAL,CAAY,CAAZ,EAAeC,WAAf,OAAiCb,IAAI,CAACY,MAAL,CAAY,CAAZ,CAAxC;AACD"},"metadata":{},"sourceType":"module"}