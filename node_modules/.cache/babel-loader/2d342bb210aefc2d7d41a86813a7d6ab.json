{"ast":null,"code":"'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst directionKeywords = new Set(['top', 'right', 'bottom', 'left', 'center']);\nconst center = '50%';\nconst horizontal = new Map([['right', '100%'], ['left', '0']]);\nconst verticalValue = new Map([['bottom', '100%'], ['top', '0']]);\nconst mathFunctions = new Set(['calc', 'min', 'max', 'clamp']);\nconst variableFunctions = new Set(['var', 'env', 'constant']);\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\n\nfunction isCommaNode(node) {\n  return node.type === 'div' && node.value === ',';\n}\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\n\n\nfunction isVariableFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return variableFunctions.has(node.value.toLowerCase());\n}\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\n\n\nfunction isMathFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return mathFunctions.has(node.value.toLowerCase());\n}\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\n\n\nfunction isNumberNode(node) {\n  if (node.type !== 'word') {\n    return false;\n  }\n\n  const value = parseFloat(node.value);\n  return !isNaN(value);\n}\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\n\n\nfunction isDimensionNode(node) {\n  if (node.type !== 'word') {\n    return false;\n  }\n\n  const parsed = valueParser.unit(node.value);\n\n  if (!parsed) {\n    return false;\n  }\n\n  return parsed.unit !== '';\n}\n/**\n * @param {string} value\n * @return {string}\n */\n\n\nfunction transform(value) {\n  const parsed = valueParser(value);\n  /** @type {({start: number, end: number} | {start: null, end: null})[]} */\n\n  const ranges = [];\n  let rangeIndex = 0;\n  let shouldContinue = true;\n  parsed.nodes.forEach((node, index) => {\n    // After comma (`,`) follows next background\n    if (isCommaNode(node)) {\n      rangeIndex += 1;\n      shouldContinue = true;\n      return;\n    }\n\n    if (!shouldContinue) {\n      return;\n    } // After separator (`/`) follows `background-size` values\n    // Avoid them\n\n\n    if (node.type === 'div' && node.value === '/') {\n      shouldContinue = false;\n      return;\n    }\n\n    if (!ranges[rangeIndex]) {\n      ranges[rangeIndex] = {\n        start: null,\n        end: null\n      };\n    } // Do not try to be processed `var and `env` function inside background\n\n\n    if (isVariableFunctionNode(node)) {\n      shouldContinue = false;\n      ranges[rangeIndex].start = null;\n      ranges[rangeIndex].end = null;\n      return;\n    }\n\n    const isPositionKeyword = node.type === 'word' && directionKeywords.has(node.value.toLowerCase()) || isDimensionNode(node) || isNumberNode(node) || isMathFunctionNode(node);\n\n    if (ranges[rangeIndex].start === null && isPositionKeyword) {\n      ranges[rangeIndex].start = index;\n      ranges[rangeIndex].end = index;\n      return;\n    }\n\n    if (ranges[rangeIndex].start !== null) {\n      if (node.type === 'space') {\n        return;\n      } else if (isPositionKeyword) {\n        ranges[rangeIndex].end = index;\n        return;\n      }\n\n      return;\n    }\n  });\n  ranges.forEach(range => {\n    if (range.start === null) {\n      return;\n    }\n\n    const nodes = parsed.nodes.slice(range.start, range.end + 1);\n\n    if (nodes.length > 3) {\n      return;\n    }\n\n    const firstNode = nodes[0].value.toLowerCase();\n    const secondNode = nodes[2] && nodes[2].value ? nodes[2].value.toLowerCase() : null;\n\n    if (nodes.length === 1 || secondNode === 'center') {\n      if (secondNode) {\n        nodes[2].value = nodes[1].value = '';\n      }\n\n      const map = new Map([...horizontal, ['center', center]]);\n\n      if (map.has(firstNode)) {\n        nodes[0].value =\n        /** @type {string}*/\n        map.get(firstNode);\n      }\n\n      return;\n    }\n\n    if (secondNode !== null) {\n      if (firstNode === 'center' && directionKeywords.has(secondNode)) {\n        nodes[0].value = nodes[1].value = '';\n\n        if (horizontal.has(secondNode)) {\n          nodes[2].value =\n          /** @type {string} */\n          horizontal.get(secondNode);\n        }\n\n        return;\n      }\n\n      if (horizontal.has(firstNode) && verticalValue.has(secondNode)) {\n        nodes[0].value =\n        /** @type {string} */\n        horizontal.get(firstNode);\n        nodes[2].value =\n        /** @type {string} */\n        verticalValue.get(secondNode);\n        return;\n      } else if (verticalValue.has(firstNode) && horizontal.has(secondNode)) {\n        nodes[0].value =\n        /** @type {string} */\n        horizontal.get(secondNode);\n        nodes[2].value =\n        /** @type {string} */\n        verticalValue.get(firstNode);\n        return;\n      }\n    }\n  });\n  return parsed.toString();\n}\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\n\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-positions',\n\n    OnceExit(css) {\n      const cache = new Map();\n      css.walkDecls(/^(background(-position)?|(-\\w+-)?perspective-origin)$/i, decl => {\n        const value = decl.value;\n\n        if (!value) {\n          return;\n        }\n\n        if (cache.has(value)) {\n          decl.value = cache.get(value);\n          return;\n        }\n\n        const result = transform(value);\n        decl.value = result;\n        cache.set(value, result);\n      });\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"names":["valueParser","require","directionKeywords","Set","center","horizontal","Map","verticalValue","mathFunctions","variableFunctions","isCommaNode","node","type","value","isVariableFunctionNode","has","toLowerCase","isMathFunctionNode","isNumberNode","parseFloat","isNaN","isDimensionNode","parsed","unit","transform","ranges","rangeIndex","shouldContinue","nodes","forEach","index","start","end","isPositionKeyword","range","slice","length","firstNode","secondNode","map","get","toString","pluginCreator","postcssPlugin","OnceExit","css","cache","walkDecls","decl","result","set","postcss","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-normalize-positions/src/index.js"],"sourcesContent":["'use strict';\nconst valueParser = require('postcss-value-parser');\n\nconst directionKeywords = new Set(['top', 'right', 'bottom', 'left', 'center']);\n\nconst center = '50%';\nconst horizontal = new Map([\n  ['right', '100%'],\n  ['left', '0'],\n]);\nconst verticalValue = new Map([\n  ['bottom', '100%'],\n  ['top', '0'],\n]);\nconst mathFunctions = new Set(['calc', 'min', 'max', 'clamp']);\nconst variableFunctions = new Set(['var', 'env', 'constant']);\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isCommaNode(node) {\n  return node.type === 'div' && node.value === ',';\n}\n\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isVariableFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return variableFunctions.has(node.value.toLowerCase());\n}\n\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isMathFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n  return mathFunctions.has(node.value.toLowerCase());\n}\n\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isNumberNode(node) {\n  if (node.type !== 'word') {\n    return false;\n  }\n\n  const value = parseFloat(node.value);\n\n  return !isNaN(value);\n}\n\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isDimensionNode(node) {\n  if (node.type !== 'word') {\n    return false;\n  }\n\n  const parsed = valueParser.unit(node.value);\n\n  if (!parsed) {\n    return false;\n  }\n\n  return parsed.unit !== '';\n}\n\n/**\n * @param {string} value\n * @return {string}\n */\nfunction transform(value) {\n  const parsed = valueParser(value);\n  /** @type {({start: number, end: number} | {start: null, end: null})[]} */\n  const ranges = [];\n  let rangeIndex = 0;\n  let shouldContinue = true;\n\n  parsed.nodes.forEach((node, index) => {\n    // After comma (`,`) follows next background\n    if (isCommaNode(node)) {\n      rangeIndex += 1;\n      shouldContinue = true;\n\n      return;\n    }\n\n    if (!shouldContinue) {\n      return;\n    }\n\n    // After separator (`/`) follows `background-size` values\n    // Avoid them\n    if (node.type === 'div' && node.value === '/') {\n      shouldContinue = false;\n\n      return;\n    }\n\n    if (!ranges[rangeIndex]) {\n      ranges[rangeIndex] = {\n        start: null,\n        end: null,\n      };\n    }\n\n    // Do not try to be processed `var and `env` function inside background\n    if (isVariableFunctionNode(node)) {\n      shouldContinue = false;\n      ranges[rangeIndex].start = null;\n      ranges[rangeIndex].end = null;\n\n      return;\n    }\n\n    const isPositionKeyword =\n      (node.type === 'word' &&\n        directionKeywords.has(node.value.toLowerCase())) ||\n      isDimensionNode(node) ||\n      isNumberNode(node) ||\n      isMathFunctionNode(node);\n\n    if (ranges[rangeIndex].start === null && isPositionKeyword) {\n      ranges[rangeIndex].start = index;\n      ranges[rangeIndex].end = index;\n\n      return;\n    }\n\n    if (ranges[rangeIndex].start !== null) {\n      if (node.type === 'space') {\n        return;\n      } else if (isPositionKeyword) {\n        ranges[rangeIndex].end = index;\n\n        return;\n      }\n\n      return;\n    }\n  });\n\n  ranges.forEach((range) => {\n    if (range.start === null) {\n      return;\n    }\n\n    const nodes = parsed.nodes.slice(range.start, range.end + 1);\n\n    if (nodes.length > 3) {\n      return;\n    }\n\n    const firstNode = nodes[0].value.toLowerCase();\n    const secondNode =\n      nodes[2] && nodes[2].value ? nodes[2].value.toLowerCase() : null;\n\n    if (nodes.length === 1 || secondNode === 'center') {\n      if (secondNode) {\n        nodes[2].value = nodes[1].value = '';\n      }\n\n      const map = new Map([...horizontal, ['center', center]]);\n\n      if (map.has(firstNode)) {\n        nodes[0].value = /** @type {string}*/ (map.get(firstNode));\n      }\n\n      return;\n    }\n\n    if (secondNode !== null) {\n      if (firstNode === 'center' && directionKeywords.has(secondNode)) {\n        nodes[0].value = nodes[1].value = '';\n\n        if (horizontal.has(secondNode)) {\n          nodes[2].value = /** @type {string} */ (horizontal.get(secondNode));\n        }\n        return;\n      }\n\n      if (horizontal.has(firstNode) && verticalValue.has(secondNode)) {\n        nodes[0].value = /** @type {string} */ (horizontal.get(firstNode));\n        nodes[2].value = /** @type {string} */ (verticalValue.get(secondNode));\n\n        return;\n      } else if (verticalValue.has(firstNode) && horizontal.has(secondNode)) {\n        nodes[0].value = /** @type {string} */ (horizontal.get(secondNode));\n        nodes[2].value = /** @type {string} */ (verticalValue.get(firstNode));\n\n        return;\n      }\n    }\n  });\n\n  return parsed.toString();\n}\n\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-positions',\n\n    OnceExit(css) {\n      const cache = new Map();\n\n      css.walkDecls(\n        /^(background(-position)?|(-\\w+-)?perspective-origin)$/i,\n        (decl) => {\n          const value = decl.value;\n\n          if (!value) {\n            return;\n          }\n\n          if (cache.has(value)) {\n            decl.value = cache.get(value);\n\n            return;\n          }\n\n          const result = transform(value);\n\n          decl.value = result;\n          cache.set(value, result);\n        }\n      );\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}