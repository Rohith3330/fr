{"ast":null,"code":"import colors from 'picocolors';\nimport log from './util/log';\nlet defaults = {\n  optimizeUniversalDefaults: false\n};\nlet featureFlags = {\n  future: ['hoverOnlyWhenSupported', 'respectDefaultRingColorOpacity'],\n  experimental: ['optimizeUniversalDefaults', 'matchVariant'\n  /* , 'variantGrouping' */\n  ]\n};\nexport function flagEnabled(config, flag) {\n  if (featureFlags.future.includes(flag)) {\n    return config.future === 'all' || (config?.future?.[flag] ?? defaults[flag] ?? false);\n  }\n\n  if (featureFlags.experimental.includes(flag)) {\n    return config.experimental === 'all' || (config?.experimental?.[flag] ?? defaults[flag] ?? false);\n  }\n\n  return false;\n}\n\nfunction experimentalFlagsEnabled(config) {\n  if (config.experimental === 'all') {\n    return featureFlags.experimental;\n  }\n\n  return Object.keys(config?.experimental ?? {}).filter(flag => featureFlags.experimental.includes(flag) && config.experimental[flag]);\n}\n\nexport function issueFlagNotices(config) {\n  if (process.env.JEST_WORKER_ID !== undefined) {\n    return;\n  }\n\n  if (experimentalFlagsEnabled(config).length > 0) {\n    let changes = experimentalFlagsEnabled(config).map(s => colors.yellow(s)).join(', ');\n    log.warn('experimental-flags-enabled', [`You have enabled experimental features: ${changes}`, 'Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time.']);\n  }\n}\nexport default featureFlags;","map":{"version":3,"names":["colors","log","defaults","optimizeUniversalDefaults","featureFlags","future","experimental","flagEnabled","config","flag","includes","experimentalFlagsEnabled","Object","keys","filter","issueFlagNotices","process","env","JEST_WORKER_ID","undefined","length","changes","map","s","yellow","join","warn"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/featureFlags.js"],"sourcesContent":["import colors from 'picocolors'\nimport log from './util/log'\n\nlet defaults = {\n  optimizeUniversalDefaults: false,\n}\n\nlet featureFlags = {\n  future: ['hoverOnlyWhenSupported', 'respectDefaultRingColorOpacity'],\n  experimental: ['optimizeUniversalDefaults', 'matchVariant' /* , 'variantGrouping' */],\n}\n\nexport function flagEnabled(config, flag) {\n  if (featureFlags.future.includes(flag)) {\n    return config.future === 'all' || (config?.future?.[flag] ?? defaults[flag] ?? false)\n  }\n\n  if (featureFlags.experimental.includes(flag)) {\n    return (\n      config.experimental === 'all' || (config?.experimental?.[flag] ?? defaults[flag] ?? false)\n    )\n  }\n\n  return false\n}\n\nfunction experimentalFlagsEnabled(config) {\n  if (config.experimental === 'all') {\n    return featureFlags.experimental\n  }\n\n  return Object.keys(config?.experimental ?? {}).filter(\n    (flag) => featureFlags.experimental.includes(flag) && config.experimental[flag]\n  )\n}\n\nexport function issueFlagNotices(config) {\n  if (process.env.JEST_WORKER_ID !== undefined) {\n    return\n  }\n\n  if (experimentalFlagsEnabled(config).length > 0) {\n    let changes = experimentalFlagsEnabled(config)\n      .map((s) => colors.yellow(s))\n      .join(', ')\n\n    log.warn('experimental-flags-enabled', [\n      `You have enabled experimental features: ${changes}`,\n      'Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time.',\n    ])\n  }\n}\n\nexport default featureFlags\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,IAAIC,QAAQ,GAAG;EACbC,yBAAyB,EAAE;AADd,CAAf;AAIA,IAAIC,YAAY,GAAG;EACjBC,MAAM,EAAE,CAAC,wBAAD,EAA2B,gCAA3B,CADS;EAEjBC,YAAY,EAAE,CAAC,2BAAD,EAA8B;EAAe;EAA7C;AAFG,CAAnB;AAKA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,IAA7B,EAAmC;EACxC,IAAIL,YAAY,CAACC,MAAb,CAAoBK,QAApB,CAA6BD,IAA7B,CAAJ,EAAwC;IACtC,OAAOD,MAAM,CAACH,MAAP,KAAkB,KAAlB,KAA4BG,MAAM,EAAEH,MAAR,GAAiBI,IAAjB,KAA0BP,QAAQ,CAACO,IAAD,CAAlC,IAA4C,KAAxE,CAAP;EACD;;EAED,IAAIL,YAAY,CAACE,YAAb,CAA0BI,QAA1B,CAAmCD,IAAnC,CAAJ,EAA8C;IAC5C,OACED,MAAM,CAACF,YAAP,KAAwB,KAAxB,KAAkCE,MAAM,EAAEF,YAAR,GAAuBG,IAAvB,KAAgCP,QAAQ,CAACO,IAAD,CAAxC,IAAkD,KAApF,CADF;EAGD;;EAED,OAAO,KAAP;AACD;;AAED,SAASE,wBAAT,CAAkCH,MAAlC,EAA0C;EACxC,IAAIA,MAAM,CAACF,YAAP,KAAwB,KAA5B,EAAmC;IACjC,OAAOF,YAAY,CAACE,YAApB;EACD;;EAED,OAAOM,MAAM,CAACC,IAAP,CAAYL,MAAM,EAAEF,YAAR,IAAwB,EAApC,EAAwCQ,MAAxC,CACJL,IAAD,IAAUL,YAAY,CAACE,YAAb,CAA0BI,QAA1B,CAAmCD,IAAnC,KAA4CD,MAAM,CAACF,YAAP,CAAoBG,IAApB,CADjD,CAAP;AAGD;;AAED,OAAO,SAASM,gBAAT,CAA0BP,MAA1B,EAAkC;EACvC,IAAIQ,OAAO,CAACC,GAAR,CAAYC,cAAZ,KAA+BC,SAAnC,EAA8C;IAC5C;EACD;;EAED,IAAIR,wBAAwB,CAACH,MAAD,CAAxB,CAAiCY,MAAjC,GAA0C,CAA9C,EAAiD;IAC/C,IAAIC,OAAO,GAAGV,wBAAwB,CAACH,MAAD,CAAxB,CACXc,GADW,CACNC,CAAD,IAAOvB,MAAM,CAACwB,MAAP,CAAcD,CAAd,CADA,EAEXE,IAFW,CAEN,IAFM,CAAd;IAIAxB,GAAG,CAACyB,IAAJ,CAAS,4BAAT,EAAuC,CACpC,2CAA0CL,OAAQ,EADd,EAErC,8HAFqC,CAAvC;EAID;AACF;AAED,eAAejB,YAAf"},"metadata":{},"sourceType":"module"}