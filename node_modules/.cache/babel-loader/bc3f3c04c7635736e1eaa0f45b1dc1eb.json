{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = runTest;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n\n  fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _sourceMapSupport() {\n  const data = _interopRequireDefault(require('source-map-support'));\n\n  _sourceMapSupport = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _console() {\n  const data = require('@jest/console');\n\n  _console = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _transform() {\n  const data = require('@jest/transform');\n\n  _transform = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction docblock() {\n  const data = _interopRequireWildcard(require('jest-docblock'));\n\n  docblock = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestLeakDetector() {\n  const data = _interopRequireDefault(require('jest-leak-detector'));\n\n  _jestLeakDetector = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestResolve() {\n  const data = require('jest-resolve');\n\n  _jestResolve = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\nfunction freezeConsole(testConsole, config) {\n  // @ts-expect-error: `_log` is `private` - we should figure out some proper API here\n  testConsole._log = function fakeConsolePush(_type, message) {\n    const error = new (_jestUtil().ErrorWithStack)(`${_chalk().default.red(`${_chalk().default.bold('Cannot log after tests are done.')} Did you forget to wait for something async in your test?`)}\\nAttempted to log \"${message}\".`, fakeConsolePush);\n    const formattedError = (0, _jestMessageUtil().formatExecError)(error, config, {\n      noStackTrace: false\n    }, undefined, true);\n    process.stderr.write('\\n' + formattedError + '\\n');\n    process.exitCode = 1;\n  };\n} // Keeping the core of \"runTest\" as a separate function (as \"runTestInternal\")\n// is key to be able to detect memory leaks. Since all variables are local to\n// the function, when \"runTestInternal\" finishes its execution, they can all be\n// freed, UNLESS something else is leaking them (and that's why we can detect\n// the leak!).\n//\n// If we had all the code in a single function, we should manually nullify all\n// references to verify if there is a leak, which is not maintainable and error\n// prone. That's why \"runTestInternal\" CANNOT be inlined inside \"runTest\".\n\n\nasync function runTestInternal(path, globalConfig, config, resolver, context, sendMessageToJest) {\n  const testSource = fs().readFileSync(path, 'utf8');\n  const docblockPragmas = docblock().parse(docblock().extract(testSource));\n  const customEnvironment = docblockPragmas['jest-environment'];\n  let testEnvironment = config.testEnvironment;\n\n  if (customEnvironment) {\n    if (Array.isArray(customEnvironment)) {\n      throw new Error(`You can only define a single test environment through docblocks, got \"${customEnvironment.join(', ')}\"`);\n    }\n\n    testEnvironment = (0, _jestResolve().resolveTestEnvironment)({ ...config,\n      requireResolveFunction: require.resolve,\n      testEnvironment: customEnvironment\n    });\n  }\n\n  const cacheFS = new Map([[path, testSource]]);\n  const transformer = await (0, _transform().createScriptTransformer)(config, cacheFS);\n  const TestEnvironment = await transformer.requireAndTranspileModule(testEnvironment);\n  const testFramework = await transformer.requireAndTranspileModule(process.env.JEST_JASMINE === '1' ? require.resolve('jest-jasmine2') : config.testRunner);\n  const Runtime = (0, _jestUtil().interopRequireDefault)(config.moduleLoader ? require(config.moduleLoader) : require('jest-runtime')).default;\n  const consoleOut = globalConfig.useStderr ? process.stderr : process.stdout;\n\n  const consoleFormatter = (type, message) => (0, _console().getConsoleOutput)( // 4 = the console call is buried 4 stack frames deep\n  _console().BufferedConsole.write([], type, message, 4), config, globalConfig);\n\n  let testConsole;\n\n  if (globalConfig.silent) {\n    testConsole = new (_console().NullConsole)(consoleOut, consoleOut, consoleFormatter);\n  } else if (globalConfig.verbose) {\n    testConsole = new (_console().CustomConsole)(consoleOut, consoleOut, consoleFormatter);\n  } else {\n    testConsole = new (_console().BufferedConsole)();\n  }\n\n  const environment = new TestEnvironment(config, {\n    console: testConsole,\n    docblockPragmas,\n    testPath: path\n  });\n\n  if (typeof environment.getVmContext !== 'function') {\n    console.error(`Test environment found at \"${testEnvironment}\" does not export a \"getVmContext\" method, which is mandatory from Jest 27. This method is a replacement for \"runScript\".`);\n    process.exit(1);\n  }\n\n  const leakDetector = config.detectLeaks ? new (_jestLeakDetector().default)(environment) : null;\n  (0, _jestUtil().setGlobal)(environment.global, 'console', testConsole);\n  const runtime = new Runtime(config, environment, resolver, transformer, cacheFS, {\n    changedFiles: context === null || context === void 0 ? void 0 : context.changedFiles,\n    collectCoverage: globalConfig.collectCoverage,\n    collectCoverageFrom: globalConfig.collectCoverageFrom,\n    collectCoverageOnlyFrom: globalConfig.collectCoverageOnlyFrom,\n    coverageProvider: globalConfig.coverageProvider,\n    sourcesRelatedToTestsInChangedFiles: context === null || context === void 0 ? void 0 : context.sourcesRelatedToTestsInChangedFiles\n  }, path);\n  const start = Date.now();\n\n  for (const path of config.setupFiles) {\n    const esm = runtime.unstable_shouldLoadAsEsm(path);\n\n    if (esm) {\n      await runtime.unstable_importModule(path);\n    } else {\n      runtime.requireModule(path);\n    }\n  }\n\n  const sourcemapOptions = {\n    environment: 'node',\n    handleUncaughtExceptions: false,\n    retrieveSourceMap: source => {\n      var _runtime$getSourceMap;\n\n      const sourceMapSource = (_runtime$getSourceMap = runtime.getSourceMaps()) === null || _runtime$getSourceMap === void 0 ? void 0 : _runtime$getSourceMap.get(source);\n\n      if (sourceMapSource) {\n        try {\n          return {\n            map: JSON.parse(fs().readFileSync(sourceMapSource, 'utf8')),\n            url: source\n          };\n        } catch {}\n      }\n\n      return null;\n    }\n  }; // For tests\n\n  runtime.requireInternalModule(require.resolve('source-map-support'), 'source-map-support').install(sourcemapOptions); // For runtime errors\n\n  _sourceMapSupport().default.install(sourcemapOptions);\n\n  if (environment.global && environment.global.process && environment.global.process.exit) {\n    const realExit = environment.global.process.exit;\n\n    environment.global.process.exit = function exit() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const error = new (_jestUtil().ErrorWithStack)(`process.exit called with \"${args.join(', ')}\"`, exit);\n      const formattedError = (0, _jestMessageUtil().formatExecError)(error, config, {\n        noStackTrace: false\n      }, undefined, true);\n      process.stderr.write(formattedError);\n      return realExit(...args);\n    };\n  } // if we don't have `getVmContext` on the env skip coverage\n\n\n  const collectV8Coverage = globalConfig.coverageProvider === 'v8' && typeof environment.getVmContext === 'function';\n\n  try {\n    await environment.setup();\n    let result;\n\n    try {\n      if (collectV8Coverage) {\n        await runtime.collectV8Coverage();\n      }\n\n      result = await testFramework(globalConfig, config, environment, runtime, path, sendMessageToJest);\n    } catch (err) {\n      // Access stack before uninstalling sourcemaps\n      err.stack;\n      throw err;\n    } finally {\n      if (collectV8Coverage) {\n        await runtime.stopCollectingV8Coverage();\n      }\n    }\n\n    freezeConsole(testConsole, config);\n    const testCount = result.numPassingTests + result.numFailingTests + result.numPendingTests + result.numTodoTests;\n    const end = Date.now();\n    const testRuntime = end - start;\n    result.perfStats = {\n      end,\n      runtime: testRuntime,\n      slow: testRuntime / 1000 > config.slowTestThreshold,\n      start\n    };\n    result.testFilePath = path;\n    result.console = testConsole.getBuffer();\n    result.skipped = testCount === result.numPendingTests;\n    result.displayName = config.displayName;\n    const coverage = runtime.getAllCoverageInfoCopy();\n\n    if (coverage) {\n      const coverageKeys = Object.keys(coverage);\n\n      if (coverageKeys.length) {\n        result.coverage = coverage;\n      }\n    }\n\n    if (collectV8Coverage) {\n      const v8Coverage = runtime.getAllV8CoverageInfoCopy();\n\n      if (v8Coverage && v8Coverage.length > 0) {\n        result.v8Coverage = v8Coverage;\n      }\n    }\n\n    if (globalConfig.logHeapUsage) {\n      if (global.gc) {\n        global.gc();\n      }\n\n      result.memoryUsage = process.memoryUsage().heapUsed;\n    } // Delay the resolution to allow log messages to be output.\n\n\n    return new Promise(resolve => {\n      setImmediate(() => resolve({\n        leakDetector,\n        result\n      }));\n    });\n  } finally {\n    runtime.teardown();\n    await environment.teardown();\n\n    _sourceMapSupport().default.resetRetrieveHandlers();\n  }\n}\n\nasync function runTest(path, globalConfig, config, resolver, context, sendMessageToJest) {\n  const {\n    leakDetector,\n    result\n  } = await runTestInternal(path, globalConfig, config, resolver, context, sendMessageToJest);\n\n  if (leakDetector) {\n    // We wanna allow a tiny but time to pass to allow last-minute cleanup\n    await new Promise(resolve => setTimeout(resolve, 100)); // Resolve leak detector, outside the \"runTestInternal\" closure.\n\n    result.leaks = await leakDetector.isLeaking();\n  } else {\n    result.leaks = false;\n  }\n\n  return result;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","runTest","_chalk","data","_interopRequireDefault","require","fs","_interopRequireWildcard","_sourceMapSupport","_console","_transform","docblock","_jestLeakDetector","_jestMessageUtil","_jestResolve","_jestUtil","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","freezeConsole","testConsole","config","_log","fakeConsolePush","_type","message","error","ErrorWithStack","red","bold","formattedError","formatExecError","noStackTrace","undefined","process","stderr","write","exitCode","runTestInternal","path","globalConfig","resolver","context","sendMessageToJest","testSource","readFileSync","docblockPragmas","parse","extract","customEnvironment","testEnvironment","Array","isArray","Error","join","resolveTestEnvironment","requireResolveFunction","resolve","cacheFS","Map","transformer","createScriptTransformer","TestEnvironment","requireAndTranspileModule","testFramework","env","JEST_JASMINE","testRunner","Runtime","interopRequireDefault","moduleLoader","consoleOut","useStderr","stdout","consoleFormatter","type","getConsoleOutput","BufferedConsole","silent","NullConsole","verbose","CustomConsole","environment","console","testPath","getVmContext","exit","leakDetector","detectLeaks","setGlobal","global","runtime","changedFiles","collectCoverage","collectCoverageFrom","collectCoverageOnlyFrom","coverageProvider","sourcesRelatedToTestsInChangedFiles","start","Date","now","setupFiles","esm","unstable_shouldLoadAsEsm","unstable_importModule","requireModule","sourcemapOptions","handleUncaughtExceptions","retrieveSourceMap","source","_runtime$getSourceMap","sourceMapSource","getSourceMaps","map","JSON","url","requireInternalModule","install","realExit","args","collectV8Coverage","setup","result","err","stack","stopCollectingV8Coverage","testCount","numPassingTests","numFailingTests","numPendingTests","numTodoTests","end","testRuntime","perfStats","slow","slowTestThreshold","testFilePath","getBuffer","skipped","displayName","coverage","getAllCoverageInfoCopy","coverageKeys","keys","length","v8Coverage","getAllV8CoverageInfoCopy","logHeapUsage","gc","memoryUsage","heapUsed","Promise","setImmediate","teardown","resetRetrieveHandlers","setTimeout","leaks","isLeaking"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jest-runner/build/runTest.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = runTest;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n\n  fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _sourceMapSupport() {\n  const data = _interopRequireDefault(require('source-map-support'));\n\n  _sourceMapSupport = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _console() {\n  const data = require('@jest/console');\n\n  _console = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _transform() {\n  const data = require('@jest/transform');\n\n  _transform = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction docblock() {\n  const data = _interopRequireWildcard(require('jest-docblock'));\n\n  docblock = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestLeakDetector() {\n  const data = _interopRequireDefault(require('jest-leak-detector'));\n\n  _jestLeakDetector = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestResolve() {\n  const data = require('jest-resolve');\n\n  _jestResolve = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction freezeConsole(testConsole, config) {\n  // @ts-expect-error: `_log` is `private` - we should figure out some proper API here\n  testConsole._log = function fakeConsolePush(_type, message) {\n    const error = new (_jestUtil().ErrorWithStack)(\n      `${_chalk().default.red(\n        `${_chalk().default.bold(\n          'Cannot log after tests are done.'\n        )} Did you forget to wait for something async in your test?`\n      )}\\nAttempted to log \"${message}\".`,\n      fakeConsolePush\n    );\n    const formattedError = (0, _jestMessageUtil().formatExecError)(\n      error,\n      config,\n      {\n        noStackTrace: false\n      },\n      undefined,\n      true\n    );\n    process.stderr.write('\\n' + formattedError + '\\n');\n    process.exitCode = 1;\n  };\n} // Keeping the core of \"runTest\" as a separate function (as \"runTestInternal\")\n// is key to be able to detect memory leaks. Since all variables are local to\n// the function, when \"runTestInternal\" finishes its execution, they can all be\n// freed, UNLESS something else is leaking them (and that's why we can detect\n// the leak!).\n//\n// If we had all the code in a single function, we should manually nullify all\n// references to verify if there is a leak, which is not maintainable and error\n// prone. That's why \"runTestInternal\" CANNOT be inlined inside \"runTest\".\n\nasync function runTestInternal(\n  path,\n  globalConfig,\n  config,\n  resolver,\n  context,\n  sendMessageToJest\n) {\n  const testSource = fs().readFileSync(path, 'utf8');\n  const docblockPragmas = docblock().parse(docblock().extract(testSource));\n  const customEnvironment = docblockPragmas['jest-environment'];\n  let testEnvironment = config.testEnvironment;\n\n  if (customEnvironment) {\n    if (Array.isArray(customEnvironment)) {\n      throw new Error(\n        `You can only define a single test environment through docblocks, got \"${customEnvironment.join(\n          ', '\n        )}\"`\n      );\n    }\n\n    testEnvironment = (0, _jestResolve().resolveTestEnvironment)({\n      ...config,\n      requireResolveFunction: require.resolve,\n      testEnvironment: customEnvironment\n    });\n  }\n\n  const cacheFS = new Map([[path, testSource]]);\n  const transformer = await (0, _transform().createScriptTransformer)(\n    config,\n    cacheFS\n  );\n  const TestEnvironment = await transformer.requireAndTranspileModule(\n    testEnvironment\n  );\n  const testFramework = await transformer.requireAndTranspileModule(\n    process.env.JEST_JASMINE === '1'\n      ? require.resolve('jest-jasmine2')\n      : config.testRunner\n  );\n  const Runtime = (0, _jestUtil().interopRequireDefault)(\n    config.moduleLoader ? require(config.moduleLoader) : require('jest-runtime')\n  ).default;\n  const consoleOut = globalConfig.useStderr ? process.stderr : process.stdout;\n\n  const consoleFormatter = (type, message) =>\n    (0, _console().getConsoleOutput)(\n      // 4 = the console call is buried 4 stack frames deep\n      _console().BufferedConsole.write([], type, message, 4),\n      config,\n      globalConfig\n    );\n\n  let testConsole;\n\n  if (globalConfig.silent) {\n    testConsole = new (_console().NullConsole)(\n      consoleOut,\n      consoleOut,\n      consoleFormatter\n    );\n  } else if (globalConfig.verbose) {\n    testConsole = new (_console().CustomConsole)(\n      consoleOut,\n      consoleOut,\n      consoleFormatter\n    );\n  } else {\n    testConsole = new (_console().BufferedConsole)();\n  }\n\n  const environment = new TestEnvironment(config, {\n    console: testConsole,\n    docblockPragmas,\n    testPath: path\n  });\n\n  if (typeof environment.getVmContext !== 'function') {\n    console.error(\n      `Test environment found at \"${testEnvironment}\" does not export a \"getVmContext\" method, which is mandatory from Jest 27. This method is a replacement for \"runScript\".`\n    );\n    process.exit(1);\n  }\n\n  const leakDetector = config.detectLeaks\n    ? new (_jestLeakDetector().default)(environment)\n    : null;\n  (0, _jestUtil().setGlobal)(environment.global, 'console', testConsole);\n  const runtime = new Runtime(\n    config,\n    environment,\n    resolver,\n    transformer,\n    cacheFS,\n    {\n      changedFiles:\n        context === null || context === void 0 ? void 0 : context.changedFiles,\n      collectCoverage: globalConfig.collectCoverage,\n      collectCoverageFrom: globalConfig.collectCoverageFrom,\n      collectCoverageOnlyFrom: globalConfig.collectCoverageOnlyFrom,\n      coverageProvider: globalConfig.coverageProvider,\n      sourcesRelatedToTestsInChangedFiles:\n        context === null || context === void 0\n          ? void 0\n          : context.sourcesRelatedToTestsInChangedFiles\n    },\n    path\n  );\n  const start = Date.now();\n\n  for (const path of config.setupFiles) {\n    const esm = runtime.unstable_shouldLoadAsEsm(path);\n\n    if (esm) {\n      await runtime.unstable_importModule(path);\n    } else {\n      runtime.requireModule(path);\n    }\n  }\n\n  const sourcemapOptions = {\n    environment: 'node',\n    handleUncaughtExceptions: false,\n    retrieveSourceMap: source => {\n      var _runtime$getSourceMap;\n\n      const sourceMapSource =\n        (_runtime$getSourceMap = runtime.getSourceMaps()) === null ||\n        _runtime$getSourceMap === void 0\n          ? void 0\n          : _runtime$getSourceMap.get(source);\n\n      if (sourceMapSource) {\n        try {\n          return {\n            map: JSON.parse(fs().readFileSync(sourceMapSource, 'utf8')),\n            url: source\n          };\n        } catch {}\n      }\n\n      return null;\n    }\n  }; // For tests\n\n  runtime\n    .requireInternalModule(\n      require.resolve('source-map-support'),\n      'source-map-support'\n    )\n    .install(sourcemapOptions); // For runtime errors\n\n  _sourceMapSupport().default.install(sourcemapOptions);\n\n  if (\n    environment.global &&\n    environment.global.process &&\n    environment.global.process.exit\n  ) {\n    const realExit = environment.global.process.exit;\n\n    environment.global.process.exit = function exit(...args) {\n      const error = new (_jestUtil().ErrorWithStack)(\n        `process.exit called with \"${args.join(', ')}\"`,\n        exit\n      );\n      const formattedError = (0, _jestMessageUtil().formatExecError)(\n        error,\n        config,\n        {\n          noStackTrace: false\n        },\n        undefined,\n        true\n      );\n      process.stderr.write(formattedError);\n      return realExit(...args);\n    };\n  } // if we don't have `getVmContext` on the env skip coverage\n\n  const collectV8Coverage =\n    globalConfig.coverageProvider === 'v8' &&\n    typeof environment.getVmContext === 'function';\n\n  try {\n    await environment.setup();\n    let result;\n\n    try {\n      if (collectV8Coverage) {\n        await runtime.collectV8Coverage();\n      }\n\n      result = await testFramework(\n        globalConfig,\n        config,\n        environment,\n        runtime,\n        path,\n        sendMessageToJest\n      );\n    } catch (err) {\n      // Access stack before uninstalling sourcemaps\n      err.stack;\n      throw err;\n    } finally {\n      if (collectV8Coverage) {\n        await runtime.stopCollectingV8Coverage();\n      }\n    }\n\n    freezeConsole(testConsole, config);\n    const testCount =\n      result.numPassingTests +\n      result.numFailingTests +\n      result.numPendingTests +\n      result.numTodoTests;\n    const end = Date.now();\n    const testRuntime = end - start;\n    result.perfStats = {\n      end,\n      runtime: testRuntime,\n      slow: testRuntime / 1000 > config.slowTestThreshold,\n      start\n    };\n    result.testFilePath = path;\n    result.console = testConsole.getBuffer();\n    result.skipped = testCount === result.numPendingTests;\n    result.displayName = config.displayName;\n    const coverage = runtime.getAllCoverageInfoCopy();\n\n    if (coverage) {\n      const coverageKeys = Object.keys(coverage);\n\n      if (coverageKeys.length) {\n        result.coverage = coverage;\n      }\n    }\n\n    if (collectV8Coverage) {\n      const v8Coverage = runtime.getAllV8CoverageInfoCopy();\n\n      if (v8Coverage && v8Coverage.length > 0) {\n        result.v8Coverage = v8Coverage;\n      }\n    }\n\n    if (globalConfig.logHeapUsage) {\n      if (global.gc) {\n        global.gc();\n      }\n\n      result.memoryUsage = process.memoryUsage().heapUsed;\n    } // Delay the resolution to allow log messages to be output.\n\n    return new Promise(resolve => {\n      setImmediate(() =>\n        resolve({\n          leakDetector,\n          result\n        })\n      );\n    });\n  } finally {\n    runtime.teardown();\n    await environment.teardown();\n\n    _sourceMapSupport().default.resetRetrieveHandlers();\n  }\n}\n\nasync function runTest(\n  path,\n  globalConfig,\n  config,\n  resolver,\n  context,\n  sendMessageToJest\n) {\n  const {leakDetector, result} = await runTestInternal(\n    path,\n    globalConfig,\n    config,\n    resolver,\n    context,\n    sendMessageToJest\n  );\n\n  if (leakDetector) {\n    // We wanna allow a tiny but time to pass to allow last-minute cleanup\n    await new Promise(resolve => setTimeout(resolve, 100)); // Resolve leak detector, outside the \"runTestInternal\" closure.\n\n    result.leaks = await leakDetector.isLeaking();\n  } else {\n    result.leaks = false;\n  }\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}