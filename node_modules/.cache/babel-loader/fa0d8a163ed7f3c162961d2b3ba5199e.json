{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n\n_export(exports, {\n  parseBoxShadowValue: () => parseBoxShadowValue,\n  formatBoxShadowValue: () => formatBoxShadowValue\n});\n\nconst _splitAtTopLevelOnly = require(\"./splitAtTopLevelOnly\");\n\nlet KEYWORDS = new Set([\"inset\", \"inherit\", \"initial\", \"revert\", \"unset\"]);\nlet SPACE = /\\ +(?![^(]*\\))/g // Similar to the one above, but with spaces instead.\n;\nlet LENGTH = /^-?(\\d+|\\.\\d+)(.*?)$/g;\n\nfunction parseBoxShadowValue(input) {\n  let shadows = Array.from((0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(input, \",\"));\n  return shadows.map(shadow => {\n    let value = shadow.trim();\n    let result = {\n      raw: value\n    };\n    let parts = value.split(SPACE);\n    let seen = new Set();\n\n    for (let part of parts) {\n      // Reset index, since the regex is stateful.\n      LENGTH.lastIndex = 0; // Keyword\n\n      if (!seen.has(\"KEYWORD\") && KEYWORDS.has(part)) {\n        result.keyword = part;\n        seen.add(\"KEYWORD\");\n      } else if (LENGTH.test(part)) {\n        if (!seen.has(\"X\")) {\n          result.x = part;\n          seen.add(\"X\");\n        } else if (!seen.has(\"Y\")) {\n          result.y = part;\n          seen.add(\"Y\");\n        } else if (!seen.has(\"BLUR\")) {\n          result.blur = part;\n          seen.add(\"BLUR\");\n        } else if (!seen.has(\"SPREAD\")) {\n          result.spread = part;\n          seen.add(\"SPREAD\");\n        }\n      } else {\n        if (!result.color) {\n          result.color = part;\n        } else {\n          if (!result.unknown) result.unknown = [];\n          result.unknown.push(part);\n        }\n      }\n    } // Check if valid\n\n\n    result.valid = result.x !== undefined && result.y !== undefined;\n    return result;\n  });\n}\n\nfunction formatBoxShadowValue(shadows) {\n  return shadows.map(shadow => {\n    if (!shadow.valid) {\n      return shadow.raw;\n    }\n\n    return [shadow.keyword, shadow.x, shadow.y, shadow.blur, shadow.spread, shadow.color].filter(Boolean).join(\" \");\n  }).join(\", \");\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_export","target","all","name","enumerable","get","parseBoxShadowValue","formatBoxShadowValue","_splitAtTopLevelOnly","require","KEYWORDS","Set","SPACE","LENGTH","input","shadows","Array","from","splitAtTopLevelOnly","map","shadow","trim","result","raw","parts","split","seen","part","lastIndex","has","keyword","add","test","x","y","blur","spread","color","unknown","push","valid","undefined","filter","Boolean","join"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/lib/util/parseBoxShadowValue.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    parseBoxShadowValue: ()=>parseBoxShadowValue,\n    formatBoxShadowValue: ()=>formatBoxShadowValue\n});\nconst _splitAtTopLevelOnly = require(\"./splitAtTopLevelOnly\");\nlet KEYWORDS = new Set([\n    \"inset\",\n    \"inherit\",\n    \"initial\",\n    \"revert\",\n    \"unset\"\n]);\nlet SPACE = /\\ +(?![^(]*\\))/g // Similar to the one above, but with spaces instead.\n;\nlet LENGTH = /^-?(\\d+|\\.\\d+)(.*?)$/g;\nfunction parseBoxShadowValue(input) {\n    let shadows = Array.from((0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(input, \",\"));\n    return shadows.map((shadow)=>{\n        let value = shadow.trim();\n        let result = {\n            raw: value\n        };\n        let parts = value.split(SPACE);\n        let seen = new Set();\n        for (let part of parts){\n            // Reset index, since the regex is stateful.\n            LENGTH.lastIndex = 0;\n            // Keyword\n            if (!seen.has(\"KEYWORD\") && KEYWORDS.has(part)) {\n                result.keyword = part;\n                seen.add(\"KEYWORD\");\n            } else if (LENGTH.test(part)) {\n                if (!seen.has(\"X\")) {\n                    result.x = part;\n                    seen.add(\"X\");\n                } else if (!seen.has(\"Y\")) {\n                    result.y = part;\n                    seen.add(\"Y\");\n                } else if (!seen.has(\"BLUR\")) {\n                    result.blur = part;\n                    seen.add(\"BLUR\");\n                } else if (!seen.has(\"SPREAD\")) {\n                    result.spread = part;\n                    seen.add(\"SPREAD\");\n                }\n            } else {\n                if (!result.color) {\n                    result.color = part;\n                } else {\n                    if (!result.unknown) result.unknown = [];\n                    result.unknown.push(part);\n                }\n            }\n        }\n        // Check if valid\n        result.valid = result.x !== undefined && result.y !== undefined;\n        return result;\n    });\n}\nfunction formatBoxShadowValue(shadows) {\n    return shadows.map((shadow)=>{\n        if (!shadow.valid) {\n            return shadow.raw;\n        }\n        return [\n            shadow.keyword,\n            shadow.x,\n            shadow.y,\n            shadow.blur,\n            shadow.spread,\n            shadow.color\n        ].filter(Boolean).join(\" \");\n    }).join(\", \");\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}