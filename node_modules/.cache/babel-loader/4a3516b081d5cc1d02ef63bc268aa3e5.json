{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ROOT_CONFIG_FILENAMES = void 0;\nexports.findConfigUpwards = findConfigUpwards;\nexports.findRelativeConfig = findRelativeConfig;\nexports.findRootConfig = findRootConfig;\nexports.loadConfig = loadConfig;\nexports.resolveShowConfigPath = resolveShowConfigPath;\n\nfunction _debug() {\n  const data = require(\"debug\");\n\n  _debug = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = require(\"fs\");\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _json() {\n  const data = require(\"json5\");\n\n  _json = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _gensync() {\n  const data = require(\"gensync\");\n\n  _gensync = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _caching = require(\"../caching\");\n\nvar _configApi = require(\"../helpers/config-api\");\n\nvar _utils = require(\"./utils\");\n\nvar _moduleTypes = require(\"./module-types\");\n\nvar _patternToRegex = require(\"../pattern-to-regex\");\n\nvar _configError = require(\"../../errors/config-error\");\n\nvar fs = require(\"../../gensync-utils/fs\");\n\nfunction _module() {\n  const data = require(\"module\");\n\n  _module = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _rewriteStackTrace = require(\"../../errors/rewrite-stack-trace\");\n\nconst debug = _debug()(\"babel:config:loading:files:configuration\");\n\nconst ROOT_CONFIG_FILENAMES = [\"babel.config.js\", \"babel.config.cjs\", \"babel.config.mjs\", \"babel.config.json\"];\nexports.ROOT_CONFIG_FILENAMES = ROOT_CONFIG_FILENAMES;\nconst RELATIVE_CONFIG_FILENAMES = [\".babelrc\", \".babelrc.js\", \".babelrc.cjs\", \".babelrc.mjs\", \".babelrc.json\"];\nconst BABELIGNORE_FILENAME = \".babelignore\";\n\nfunction findConfigUpwards(rootDir) {\n  let dirname = rootDir;\n\n  for (;;) {\n    for (const filename of ROOT_CONFIG_FILENAMES) {\n      if (_fs().existsSync(_path().join(dirname, filename))) {\n        return dirname;\n      }\n    }\n\n    const nextDir = _path().dirname(dirname);\n\n    if (dirname === nextDir) break;\n    dirname = nextDir;\n  }\n\n  return null;\n}\n\nfunction* findRelativeConfig(packageData, envName, caller) {\n  let config = null;\n  let ignore = null;\n\n  const dirname = _path().dirname(packageData.filepath);\n\n  for (const loc of packageData.directories) {\n    if (!config) {\n      var _packageData$pkg;\n\n      config = yield* loadOneConfig(RELATIVE_CONFIG_FILENAMES, loc, envName, caller, ((_packageData$pkg = packageData.pkg) == null ? void 0 : _packageData$pkg.dirname) === loc ? packageToBabelConfig(packageData.pkg) : null);\n    }\n\n    if (!ignore) {\n      const ignoreLoc = _path().join(loc, BABELIGNORE_FILENAME);\n\n      ignore = yield* readIgnoreConfig(ignoreLoc);\n\n      if (ignore) {\n        debug(\"Found ignore %o from %o.\", ignore.filepath, dirname);\n      }\n    }\n  }\n\n  return {\n    config,\n    ignore\n  };\n}\n\nfunction findRootConfig(dirname, envName, caller) {\n  return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname, envName, caller);\n}\n\nfunction* loadOneConfig(names, dirname, envName, caller) {\n  let previousConfig = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  const configs = yield* _gensync().all(names.map(filename => readConfig(_path().join(dirname, filename), envName, caller)));\n  const config = configs.reduce((previousConfig, config) => {\n    if (config && previousConfig) {\n      throw new _configError.default(`Multiple configuration files found. Please remove one:\\n` + ` - ${_path().basename(previousConfig.filepath)}\\n` + ` - ${config.filepath}\\n` + `from ${dirname}`);\n    }\n\n    return config || previousConfig;\n  }, previousConfig);\n\n  if (config) {\n    debug(\"Found configuration %o from %o.\", config.filepath, dirname);\n  }\n\n  return config;\n}\n\nfunction* loadConfig(name, dirname, envName, caller) {\n  const filepath = (((v, w) => (v = v.split(\".\"), w = w.split(\".\"), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, \"8.9\") ? require.resolve : function (r, _ref) {\n    let {\n      paths: [b]\n    } = _ref;\n    let M = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : require(\"module\");\n\n    let f = M._findPath(r, M._nodeModulePaths(b).concat(b));\n\n    if (f) return f;\n    f = new Error(`Cannot resolve module '${r}'`);\n    f.code = \"MODULE_NOT_FOUND\";\n    throw f;\n  })(name, {\n    paths: [dirname]\n  });\n  const conf = yield* readConfig(filepath, envName, caller);\n\n  if (!conf) {\n    throw new _configError.default(`Config file contains no configuration data`, filepath);\n  }\n\n  debug(\"Loaded config %o from %o.\", name, dirname);\n  return conf;\n}\n\nfunction readConfig(filepath, envName, caller) {\n  const ext = _path().extname(filepath);\n\n  return ext === \".js\" || ext === \".cjs\" || ext === \".mjs\" ? readConfigJS(filepath, {\n    envName,\n    caller\n  }) : readConfigJSON5(filepath);\n}\n\nconst LOADING_CONFIGS = new Set();\nconst readConfigJS = (0, _caching.makeStrongCache)(function* readConfigJS(filepath, cache) {\n  if (!_fs().existsSync(filepath)) {\n    cache.never();\n    return null;\n  }\n\n  if (LOADING_CONFIGS.has(filepath)) {\n    cache.never();\n    debug(\"Auto-ignoring usage of config %o.\", filepath);\n    return {\n      filepath,\n      dirname: _path().dirname(filepath),\n      options: {}\n    };\n  }\n\n  let options;\n\n  try {\n    LOADING_CONFIGS.add(filepath);\n    options = yield* (0, _moduleTypes.default)(filepath, \"You appear to be using a native ECMAScript module configuration \" + \"file, which is only supported when running Babel asynchronously.\");\n  } finally {\n    LOADING_CONFIGS.delete(filepath);\n  }\n\n  let assertCache = false;\n\n  if (typeof options === \"function\") {\n    yield* [];\n    options = (0, _rewriteStackTrace.endHiddenCallStack)(options)((0, _configApi.makeConfigAPI)(cache));\n    assertCache = true;\n  }\n\n  if (!options || typeof options !== \"object\" || Array.isArray(options)) {\n    throw new _configError.default(`Configuration should be an exported JavaScript object.`, filepath);\n  }\n\n  if (typeof options.then === \"function\") {\n    throw new _configError.default(`You appear to be using an async configuration, ` + `which your current version of Babel does not support. ` + `We may add support for this in the future, ` + `but if you're on the most recent version of @babel/core and still ` + `seeing this error, then you'll need to synchronously return your config.`, filepath);\n  }\n\n  if (assertCache && !cache.configured()) throwConfigError(filepath);\n  return {\n    filepath,\n    dirname: _path().dirname(filepath),\n    options\n  };\n});\nconst packageToBabelConfig = (0, _caching.makeWeakCacheSync)(file => {\n  const babel = file.options[\"babel\"];\n  if (typeof babel === \"undefined\") return null;\n\n  if (typeof babel !== \"object\" || Array.isArray(babel) || babel === null) {\n    throw new _configError.default(`.babel property must be an object`, file.filepath);\n  }\n\n  return {\n    filepath: file.filepath,\n    dirname: file.dirname,\n    options: babel\n  };\n});\nconst readConfigJSON5 = (0, _utils.makeStaticFileCache)((filepath, content) => {\n  let options;\n\n  try {\n    options = _json().parse(content);\n  } catch (err) {\n    throw new _configError.default(`Error while parsing config - ${err.message}`, filepath);\n  }\n\n  if (!options) throw new _configError.default(`No config detected`, filepath);\n\n  if (typeof options !== \"object\") {\n    throw new _configError.default(`Config returned typeof ${typeof options}`, filepath);\n  }\n\n  if (Array.isArray(options)) {\n    throw new _configError.default(`Expected config object but found array`, filepath);\n  }\n\n  delete options[\"$schema\"];\n  return {\n    filepath,\n    dirname: _path().dirname(filepath),\n    options\n  };\n});\nconst readIgnoreConfig = (0, _utils.makeStaticFileCache)((filepath, content) => {\n  const ignoreDir = _path().dirname(filepath);\n\n  const ignorePatterns = content.split(\"\\n\").map(line => line.replace(/#(.*?)$/, \"\").trim()).filter(line => !!line);\n\n  for (const pattern of ignorePatterns) {\n    if (pattern[0] === \"!\") {\n      throw new _configError.default(`Negation of file paths is not supported.`, filepath);\n    }\n  }\n\n  return {\n    filepath,\n    dirname: _path().dirname(filepath),\n    ignore: ignorePatterns.map(pattern => (0, _patternToRegex.default)(pattern, ignoreDir))\n  };\n});\n\nfunction* resolveShowConfigPath(dirname) {\n  const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;\n\n  if (targetPath != null) {\n    const absolutePath = _path().resolve(dirname, targetPath);\n\n    const stats = yield* fs.stat(absolutePath);\n\n    if (!stats.isFile()) {\n      throw new Error(`${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);\n    }\n\n    return absolutePath;\n  }\n\n  return null;\n}\n\nfunction throwConfigError(filepath) {\n  throw new _configError.default(`\\\nCaching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured\nfor various types of caching, using the first param of their handler functions:\n\nmodule.exports = function(api) {\n  // The API exposes the following:\n\n  // Cache the returned value forever and don't call this function again.\n  api.cache(true);\n\n  // Don't cache at all. Not recommended because it will be very slow.\n  api.cache(false);\n\n  // Cached based on the value of some function. If this function returns a value different from\n  // a previously-encountered value, the plugins will re-evaluate.\n  var env = api.cache(() => process.env.NODE_ENV);\n\n  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for\n  // any possible NODE_ENV value that might come up during plugin execution.\n  var isProd = api.cache(() => process.env.NODE_ENV === \"production\");\n\n  // .cache(fn) will perform a linear search though instances to find the matching plugin based\n  // based on previous instantiated plugins. If you want to recreate the plugin and discard the\n  // previous instance whenever something changes, you may use:\n  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === \"production\");\n\n  // Note, we also expose the following more-verbose versions of the above examples:\n  api.cache.forever(); // api.cache(true)\n  api.cache.never();   // api.cache(false)\n  api.cache.using(fn); // api.cache(fn)\n\n  // Return the value that will be cached.\n  return { };\n};`, filepath);\n}\n\n0 && 0;","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;EAAA;;EAAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AAEA;;AAEA;;AAEA;;AACA;;AACA;;AAGA;;AAEA;;AAEA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AACA;;AAGA,MAAMC,KAAK,GAAGC,SAAW,0CAAXA,CAAd;;AAEO,MAAMC,qBAAqB,GAAG,CACnC,iBADmC,EAEnC,kBAFmC,EAGnC,kBAHmC,EAInC,mBAJmC,CAA9B;;AAMP,MAAMC,yBAAyB,GAAG,CAChC,UADgC,EAEhC,aAFgC,EAGhC,cAHgC,EAIhC,cAJgC,EAKhC,eALgC,CAAlC;AAQA,MAAMC,oBAAoB,GAAG,cAA7B;;AAEO,SAASC,iBAAT,CAA2BC,OAA3B,EAA2D;EAChE,IAAIC,OAAO,GAAGD,OAAd;;EACA,SAAS;IACP,KAAK,MAAME,QAAX,IAAuBN,qBAAvB,EAA8C;MAC5C,IAAIO,MAAOC,UAAPD,CAAkBE,QAAKC,IAALD,CAAUJ,OAAVI,EAAmBH,QAAnBG,CAAlBF,CAAJ,EAAqD;QACnD,OAAOF,OAAP;MACD;IACF;;IAED,MAAMM,OAAO,GAAGF,QAAKJ,OAALI,CAAaJ,OAAbI,CAAhB;;IACA,IAAIJ,OAAO,KAAKM,OAAhB,EAAyB;IACzBN,OAAO,GAAGM,OAAVN;EACD;;EAED,OAAO,IAAP;AACD;;AAEM,UAAUO,kBAAV,CACLC,WADK,EAELC,OAFK,EAGLC,MAHK,EAIoB;EACzB,IAAIC,MAAM,GAAG,IAAb;EACA,IAAIC,MAAM,GAAG,IAAb;;EAEA,MAAMZ,OAAO,GAAGI,QAAKJ,OAALI,CAAaI,WAAW,CAACK,QAAzBT,CAAhB;;EAEA,KAAK,MAAMU,GAAX,IAAkBN,WAAW,CAACO,WAA9B,EAA2C;IACzC,IAAI,CAACJ,MAAL,EAAa;MAAA;;MACXA,MAAM,GAAG,OAAOK,aAAa,CAC3BpB,yBAD2B,EAE3BkB,GAF2B,EAG3BL,OAH2B,EAI3BC,MAJ2B,EAK3B,gCAAW,CAACO,GAAZ,sCAAiBjB,OAAjB,MAA6Bc,GAA7B,GACII,oBAAoB,CAACV,WAAW,CAACS,GAAb,CADxB,GAEI,IAPuB,CAA7BN;IASD;;IAED,IAAI,CAACC,MAAL,EAAa;MACX,MAAMO,SAAS,GAAGf,QAAKC,IAALD,CAAUU,GAAVV,EAAeP,oBAAfO,CAAlB;;MACAQ,MAAM,GAAG,OAAOQ,gBAAgB,CAACD,SAAD,CAAhCP;;MAEA,IAAIA,MAAJ,EAAY;QACVnB,KAAK,CAAC,0BAAD,EAA6BmB,MAAM,CAACC,QAApC,EAA8Cb,OAA9C,CAALP;MACD;IACF;EACF;;EAED,OAAO;IAAEkB,MAAF;IAAUC;EAAV,CAAP;AACD;;AAEM,SAASS,cAAT,CACLrB,OADK,EAELS,OAFK,EAGLC,MAHK,EAIuB;EAC5B,OAAOM,aAAa,CAACrB,qBAAD,EAAwBK,OAAxB,EAAiCS,OAAjC,EAA0CC,MAA1C,CAApB;AACD;;AAED,UAAUM,aAAV,CACEM,KADF,EAEEtB,OAFF,EAGES,OAHF,EAIEC,MAJF,EAM8B;EAAA,IAD5Ba,cAC4B,uEADQ,IACR;EAC5B,MAAMC,OAAO,GAAG,OAAOC,WAAQC,GAARD,CACrBH,KAAK,CAACK,GAANL,CAAUrB,QAAQ,IAChB2B,UAAU,CAACxB,QAAKC,IAALD,CAAUJ,OAAVI,EAAmBH,QAAnBG,CAAD,EAA+BK,OAA/B,EAAwCC,MAAxC,CADZY,CADqBG,CAAvB;EAKA,MAAMd,MAAM,GAAGa,OAAO,CAACK,MAARL,CAAe,CAACD,cAAD,EAAoCZ,MAApC,KAA+C;IAC3E,IAAIA,MAAM,IAAIY,cAAd,EAA8B;MAC5B,MAAM,IAAIO,oBAAJ,CACH,6DACE,MAAK1B,QAAK2B,QAAL3B,CAAcmB,cAAc,CAACV,QAA7BT,CAAuC,IAD9C,GAEE,MAAKO,MAAM,CAACE,QAAS,IAFvB,GAGE,QAAOb,OAAQ,EAJd,CAAN;IAMD;;IAED,OAAOW,MAAM,IAAIY,cAAjB;EAVa,GAWZA,cAXYC,CAAf;;EAaA,IAAIb,MAAJ,EAAY;IACVlB,KAAK,CAAC,iCAAD,EAAoCkB,MAAM,CAACE,QAA3C,EAAqDb,OAArD,CAALP;EACD;;EACD,OAAOkB,MAAP;AACD;;AAEM,UAAUqB,UAAV,CACLC,IADK,EAELjC,OAFK,EAGLS,OAHK,EAILC,MAJK,EAKgB;EACrB,MAAMG,QAAQ,GAAG;IAAA;MAAAqB;IAAA;IAAA;;IAAA;;IAAA;IAAAC;IAAAA;IAAA;EAAA,GAAgBF,IAAhB,EAAsB;IAAEC,KAAK,EAAE,CAAClC,OAAD;EAAT,CAAtB,CAAjB;EAEA,MAAMoC,IAAI,GAAG,OAAOR,UAAU,CAACf,QAAD,EAAWJ,OAAX,EAAoBC,MAApB,CAA9B;;EACA,IAAI,CAAC0B,IAAL,EAAW;IACT,MAAM,IAAIN,oBAAJ,CACH,4CADG,EAEJjB,QAFI,CAAN;EAID;;EAEDpB,KAAK,CAAC,2BAAD,EAA8BwC,IAA9B,EAAoCjC,OAApC,CAALP;EACA,OAAO2C,IAAP;AACD;;AAMD,SAASR,UAAT,CACEf,QADF,EAEEJ,OAFF,EAGEC,MAHF,EAI8B;EAC5B,MAAM2B,GAAG,GAAGjC,QAAKkC,OAALlC,CAAaS,QAAbT,CAAZ;;EACA,OAAOiC,GAAG,KAAK,KAARA,IAAiBA,GAAG,KAAK,MAAzBA,IAAmCA,GAAG,KAAK,MAA3CA,GACHE,YAAY,CAAC1B,QAAD,EAAW;IAAEJ,OAAF;IAAWC;EAAX,CAAX,CADT2B,GAEHG,eAAe,CAAC3B,QAAD,CAFnB;AAGD;;AAED,MAAM4B,eAAe,GAAG,IAAIC,GAAJ,EAAxB;AAEA,MAAMH,YAAY,GAAG,8BAAgB,UAAUA,YAAV,CACnC1B,QADmC,EAEnC8B,KAFmC,EAMP;EAC5B,IAAI,CAACzC,MAAOC,UAAPD,CAAkBW,QAAlBX,CAAL,EAAkC;IAChCyC,KAAK,CAACC,KAAND;IACA,OAAO,IAAP;EACD;;EAKD,IAAIF,eAAe,CAACI,GAAhBJ,CAAoB5B,QAApB4B,CAAJ,EAAmC;IACjCE,KAAK,CAACC,KAAND;IAEAlD,KAAK,CAAC,mCAAD,EAAsCoB,QAAtC,CAALpB;IACA,OAAO;MACLoB,QADK;MAELb,OAAO,EAAEI,QAAKJ,OAALI,CAAaS,QAAbT,CAFJ;MAGL0C,OAAO,EAAE;IAHJ,CAAP;EAKD;;EAED,IAAIA,OAAJ;;EACA,IAAI;IACFL,eAAe,CAACM,GAAhBN,CAAoB5B,QAApB4B;IACAK,OAAO,GAAG,OAAO,0BACfjC,QADe,EAEf,qEACE,kEAHa,CAAjBiC;EAFF,UAOU;IACRL,eAAe,CAACO,MAAhBP,CAAuB5B,QAAvB4B;EACD;;EAED,IAAIQ,WAAW,GAAG,KAAlB;;EACA,IAAI,OAAOH,OAAP,KAAmB,UAAvB,EAAmC;IAEjC,OAAO,EAAP;IAEAA,OAAO,GAAG,2CAAmBA,OAAnB,EACR,8BAAcH,KAAd,CADQ,CAAVG;IAIAG,WAAW,GAAG,IAAdA;EACD;;EAED,IAAI,CAACH,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAA/B,IAA2CI,KAAK,CAACC,OAAND,CAAcJ,OAAdI,CAA/C,EAAuE;IACrE,MAAM,IAAIpB,oBAAJ,CACH,wDADG,EAEJjB,QAFI,CAAN;EAID;;EAGD,IAAI,OAAOiC,OAAO,CAACM,IAAf,KAAwB,UAA5B,EAAwC;IACtC,MAAM,IAAItB,oBAAJ,CACH,oDACE,wDADF,GAEE,6CAFF,GAGE,oEAHF,GAIE,0EALC,EAMJjB,QANI,CAAN;EAQD;;EAED,IAAIoC,WAAW,IAAI,CAACN,KAAK,CAACU,UAANV,EAApB,EAAwCW,gBAAgB,CAACzC,QAAD,CAAhByC;EAExC,OAAO;IACLzC,QADK;IAELb,OAAO,EAAEI,QAAKJ,OAALI,CAAaS,QAAbT,CAFJ;IAGL0C;EAHK,CAAP;AAvEmB,EAArB;AA8EA,MAAM5B,oBAAoB,GAAG,gCAC1BqC,IAAD,IAAyC;EACvC,MAAMC,KAAc,GAAGD,IAAI,CAACT,OAALS,CAAa,OAAbA,CAAvB;EAEA,IAAI,OAAOC,KAAP,KAAiB,WAArB,EAAkC,OAAO,IAAP;;EAElC,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BN,KAAK,CAACC,OAAND,CAAcM,KAAdN,CAA7B,IAAqDM,KAAK,KAAK,IAAnE,EAAyE;IACvE,MAAM,IAAI1B,oBAAJ,CAAiB,mCAAjB,EAAqDyB,IAAI,CAAC1C,QAA1D,CAAN;EACD;;EAED,OAAO;IACLA,QAAQ,EAAE0C,IAAI,CAAC1C,QADV;IAELb,OAAO,EAAEuD,IAAI,CAACvD,OAFT;IAGL8C,OAAO,EAAEU;EAHJ,CAAP;AAVyB,EAA7B;AAkBA,MAAMhB,eAAe,GAAG,gCAAoB,CAAC3B,QAAD,EAAW4C,OAAX,KAAmC;EAC7E,IAAIX,OAAJ;;EACA,IAAI;IACFA,OAAO,GAAGY,QAAMC,KAAND,CAAYD,OAAZC,CAAVZ;EADF,EAEE,OAAOc,GAAP,EAAY;IACZ,MAAM,IAAI9B,oBAAJ,CACH,gCAA+B8B,GAAG,CAACC,OAAQ,EADxC,EAEJhD,QAFI,CAAN;EAID;;EAED,IAAI,CAACiC,OAAL,EAAc,MAAM,IAAIhB,oBAAJ,CAAiB,oBAAjB,EAAsCjB,QAAtC,CAAN;;EAEd,IAAI,OAAOiC,OAAP,KAAmB,QAAvB,EAAiC;IAC/B,MAAM,IAAIhB,oBAAJ,CAAiB,0BAAyB,OAAOgB,OAAQ,EAAzD,EAA4DjC,QAA5D,CAAN;EACD;;EACD,IAAIqC,KAAK,CAACC,OAAND,CAAcJ,OAAdI,CAAJ,EAA4B;IAC1B,MAAM,IAAIpB,oBAAJ,CAAiB,wCAAjB,EAA0DjB,QAA1D,CAAN;EACD;;EAED,OAAOiC,OAAO,CAAC,SAAD,CAAd;EAEA,OAAO;IACLjC,QADK;IAELb,OAAO,EAAEI,QAAKJ,OAALI,CAAaS,QAAbT,CAFJ;IAGL0C;EAHK,CAAP;AAtBsB,EAAxB;AA6BA,MAAM1B,gBAAgB,GAAG,gCAAoB,CAACP,QAAD,EAAW4C,OAAX,KAAuB;EAClE,MAAMK,SAAS,GAAG1D,QAAKJ,OAALI,CAAaS,QAAbT,CAAlB;;EACA,MAAM2D,cAAc,GAAGN,OAAO,CAC3BO,KADoBP,CACd,IADcA,EAEpB9B,GAFoB8B,CAERQ,IAAI,IAAIA,IAAI,CAACC,OAALD,CAAa,SAAbA,EAAwB,EAAxBA,EAA4BE,IAA5BF,EAFAR,EAGpBW,MAHoBX,CAGbQ,IAAI,IAAI,CAAC,CAACA,IAHGR,CAAvB;;EAKA,KAAK,MAAMY,OAAX,IAAsBN,cAAtB,EAAsC;IACpC,IAAIM,OAAO,CAAC,CAAD,CAAPA,KAAe,GAAnB,EAAwB;MACtB,MAAM,IAAIvC,oBAAJ,CACH,0CADG,EAEJjB,QAFI,CAAN;IAID;EACF;;EAED,OAAO;IACLA,QADK;IAELb,OAAO,EAAEI,QAAKJ,OAALI,CAAaS,QAAbT,CAFJ;IAGLQ,MAAM,EAAEmD,cAAc,CAACpC,GAAfoC,CAAmBM,OAAO,IAChC,6BAAmBA,OAAnB,EAA4BP,SAA5B,CADMC;EAHH,CAAP;AAhBuB,EAAzB;;AAyBO,UAAUO,qBAAV,CACLtE,OADK,EAEmB;EACxB,MAAMuE,UAAU,GAAGC,OAAO,CAACC,GAARD,CAAYE,qBAA/B;;EACA,IAAIH,UAAU,IAAI,IAAlB,EAAwB;IACtB,MAAMI,YAAY,GAAGvE,QAAKwE,OAALxE,CAAaJ,OAAbI,EAAsBmE,UAAtBnE,CAArB;;IACA,MAAMyE,KAAK,GAAG,OAAOC,EAAE,CAACC,IAAHD,CAAQH,YAARG,CAArB;;IACA,IAAI,CAACD,KAAK,CAACG,MAANH,EAAL,EAAqB;MACnB,MAAM,IAAII,KAAJ,CACH,GAAEN,YAAa,sFADZ,CAAN;IAGD;;IACD,OAAOA,YAAP;EACD;;EACD,OAAO,IAAP;AACD;;AAED,SAASrB,gBAAT,CAA0BzC,QAA1B,EAAmD;EACjD,MAAM,IAAIiB,oBAAJ,CACH;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAlCQ,EAmCJjB,QAnCI,CAAN;AAqCD","names":["_debug","_fs","_path","_json","_gensync","_module","debug","buildDebug","ROOT_CONFIG_FILENAMES","RELATIVE_CONFIG_FILENAMES","BABELIGNORE_FILENAME","findConfigUpwards","rootDir","dirname","filename","nodeFs","existsSync","path","join","nextDir","findRelativeConfig","packageData","envName","caller","config","ignore","filepath","loc","directories","loadOneConfig","pkg","packageToBabelConfig","ignoreLoc","readIgnoreConfig","findRootConfig","names","previousConfig","configs","gensync","all","map","readConfig","reduce","ConfigError","basename","loadConfig","name","paths","f","conf","ext","extname","readConfigJS","readConfigJSON5","LOADING_CONFIGS","Set","cache","never","has","options","add","delete","assertCache","Array","isArray","then","configured","throwConfigError","file","babel","content","json5","parse","err","message","ignoreDir","ignorePatterns","split","line","replace","trim","filter","pattern","resolveShowConfigPath","targetPath","process","env","BABEL_SHOW_CONFIG_FOR","absolutePath","resolve","stats","fs","stat","isFile","Error"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\config\\files\\configuration.ts"],"sourcesContent":["import buildDebug from \"debug\";\nimport nodeFs from \"fs\";\nimport path from \"path\";\nimport json5 from \"json5\";\nimport gensync from \"gensync\";\nimport type { Handler } from \"gensync\";\nimport { makeStrongCache, makeWeakCacheSync } from \"../caching\";\nimport type { CacheConfigurator } from \"../caching\";\nimport { makeConfigAPI } from \"../helpers/config-api\";\nimport type { ConfigAPI } from \"../helpers/config-api\";\nimport { makeStaticFileCache } from \"./utils\";\nimport loadCjsOrMjsDefault from \"./module-types\";\nimport pathPatternToRegex from \"../pattern-to-regex\";\nimport type { FilePackageData, RelativeConfig, ConfigFile } from \"./types\";\nimport type { CallerMetadata } from \"../validation/options\";\nimport ConfigError from \"../../errors/config-error\";\n\nimport * as fs from \"../../gensync-utils/fs\";\n\nimport { createRequire } from \"module\";\nimport { endHiddenCallStack } from \"../../errors/rewrite-stack-trace\";\nconst require = createRequire(import.meta.url);\n\nconst debug = buildDebug(\"babel:config:loading:files:configuration\");\n\nexport const ROOT_CONFIG_FILENAMES = [\n  \"babel.config.js\",\n  \"babel.config.cjs\",\n  \"babel.config.mjs\",\n  \"babel.config.json\",\n];\nconst RELATIVE_CONFIG_FILENAMES = [\n  \".babelrc\",\n  \".babelrc.js\",\n  \".babelrc.cjs\",\n  \".babelrc.mjs\",\n  \".babelrc.json\",\n];\n\nconst BABELIGNORE_FILENAME = \".babelignore\";\n\nexport function findConfigUpwards(rootDir: string): string | null {\n  let dirname = rootDir;\n  for (;;) {\n    for (const filename of ROOT_CONFIG_FILENAMES) {\n      if (nodeFs.existsSync(path.join(dirname, filename))) {\n        return dirname;\n      }\n    }\n\n    const nextDir = path.dirname(dirname);\n    if (dirname === nextDir) break;\n    dirname = nextDir;\n  }\n\n  return null;\n}\n\nexport function* findRelativeConfig(\n  packageData: FilePackageData,\n  envName: string,\n  caller: CallerMetadata | undefined,\n): Handler<RelativeConfig> {\n  let config = null;\n  let ignore = null;\n\n  const dirname = path.dirname(packageData.filepath);\n\n  for (const loc of packageData.directories) {\n    if (!config) {\n      config = yield* loadOneConfig(\n        RELATIVE_CONFIG_FILENAMES,\n        loc,\n        envName,\n        caller,\n        packageData.pkg?.dirname === loc\n          ? packageToBabelConfig(packageData.pkg as ConfigFile)\n          : null,\n      );\n    }\n\n    if (!ignore) {\n      const ignoreLoc = path.join(loc, BABELIGNORE_FILENAME);\n      ignore = yield* readIgnoreConfig(ignoreLoc);\n\n      if (ignore) {\n        debug(\"Found ignore %o from %o.\", ignore.filepath, dirname);\n      }\n    }\n  }\n\n  return { config, ignore };\n}\n\nexport function findRootConfig(\n  dirname: string,\n  envName: string,\n  caller: CallerMetadata | undefined,\n): Handler<ConfigFile | null> {\n  return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname, envName, caller);\n}\n\nfunction* loadOneConfig(\n  names: string[],\n  dirname: string,\n  envName: string,\n  caller: CallerMetadata | undefined,\n  previousConfig: ConfigFile | null = null,\n): Handler<ConfigFile | null> {\n  const configs = yield* gensync.all(\n    names.map(filename =>\n      readConfig(path.join(dirname, filename), envName, caller),\n    ),\n  );\n  const config = configs.reduce((previousConfig: ConfigFile | null, config) => {\n    if (config && previousConfig) {\n      throw new ConfigError(\n        `Multiple configuration files found. Please remove one:\\n` +\n          ` - ${path.basename(previousConfig.filepath)}\\n` +\n          ` - ${config.filepath}\\n` +\n          `from ${dirname}`,\n      );\n    }\n\n    return config || previousConfig;\n  }, previousConfig);\n\n  if (config) {\n    debug(\"Found configuration %o from %o.\", config.filepath, dirname);\n  }\n  return config;\n}\n\nexport function* loadConfig(\n  name: string,\n  dirname: string,\n  envName: string,\n  caller: CallerMetadata | undefined,\n): Handler<ConfigFile> {\n  const filepath = require.resolve(name, { paths: [dirname] });\n\n  const conf = yield* readConfig(filepath, envName, caller);\n  if (!conf) {\n    throw new ConfigError(\n      `Config file contains no configuration data`,\n      filepath,\n    );\n  }\n\n  debug(\"Loaded config %o from %o.\", name, dirname);\n  return conf;\n}\n\n/**\n * Read the given config file, returning the result. Returns null if no config was found, but will\n * throw if there are parsing errors while loading a config.\n */\nfunction readConfig(\n  filepath: string,\n  envName: string,\n  caller: CallerMetadata | undefined,\n): Handler<ConfigFile | null> {\n  const ext = path.extname(filepath);\n  return ext === \".js\" || ext === \".cjs\" || ext === \".mjs\"\n    ? readConfigJS(filepath, { envName, caller })\n    : readConfigJSON5(filepath);\n}\n\nconst LOADING_CONFIGS = new Set();\n\nconst readConfigJS = makeStrongCache(function* readConfigJS(\n  filepath: string,\n  cache: CacheConfigurator<{\n    envName: string;\n    caller: CallerMetadata | undefined;\n  }>,\n): Handler<ConfigFile | null> {\n  if (!nodeFs.existsSync(filepath)) {\n    cache.never();\n    return null;\n  }\n\n  // The `require()` call below can make this code reentrant if a require hook like @babel/register has been\n  // loaded into the system. That would cause Babel to attempt to compile the `.babelrc.js` file as it loads\n  // below. To cover this case, we auto-ignore re-entrant config processing.\n  if (LOADING_CONFIGS.has(filepath)) {\n    cache.never();\n\n    debug(\"Auto-ignoring usage of config %o.\", filepath);\n    return {\n      filepath,\n      dirname: path.dirname(filepath),\n      options: {},\n    };\n  }\n\n  let options: unknown;\n  try {\n    LOADING_CONFIGS.add(filepath);\n    options = yield* loadCjsOrMjsDefault(\n      filepath,\n      \"You appear to be using a native ECMAScript module configuration \" +\n        \"file, which is only supported when running Babel asynchronously.\",\n    );\n  } finally {\n    LOADING_CONFIGS.delete(filepath);\n  }\n\n  let assertCache = false;\n  if (typeof options === \"function\") {\n    // @ts-expect-error - if we want to make it possible to use async configs\n    yield* [];\n\n    options = endHiddenCallStack(options as any as (api: ConfigAPI) => {})(\n      makeConfigAPI(cache),\n    );\n\n    assertCache = true;\n  }\n\n  if (!options || typeof options !== \"object\" || Array.isArray(options)) {\n    throw new ConfigError(\n      `Configuration should be an exported JavaScript object.`,\n      filepath,\n    );\n  }\n\n  // @ts-expect-error todo(flow->ts)\n  if (typeof options.then === \"function\") {\n    throw new ConfigError(\n      `You appear to be using an async configuration, ` +\n        `which your current version of Babel does not support. ` +\n        `We may add support for this in the future, ` +\n        `but if you're on the most recent version of @babel/core and still ` +\n        `seeing this error, then you'll need to synchronously return your config.`,\n      filepath,\n    );\n  }\n\n  if (assertCache && !cache.configured()) throwConfigError(filepath);\n\n  return {\n    filepath,\n    dirname: path.dirname(filepath),\n    options,\n  };\n});\n\nconst packageToBabelConfig = makeWeakCacheSync(\n  (file: ConfigFile): ConfigFile | null => {\n    const babel: unknown = file.options[\"babel\"];\n\n    if (typeof babel === \"undefined\") return null;\n\n    if (typeof babel !== \"object\" || Array.isArray(babel) || babel === null) {\n      throw new ConfigError(`.babel property must be an object`, file.filepath);\n    }\n\n    return {\n      filepath: file.filepath,\n      dirname: file.dirname,\n      options: babel,\n    };\n  },\n);\n\nconst readConfigJSON5 = makeStaticFileCache((filepath, content): ConfigFile => {\n  let options;\n  try {\n    options = json5.parse(content);\n  } catch (err) {\n    throw new ConfigError(\n      `Error while parsing config - ${err.message}`,\n      filepath,\n    );\n  }\n\n  if (!options) throw new ConfigError(`No config detected`, filepath);\n\n  if (typeof options !== \"object\") {\n    throw new ConfigError(`Config returned typeof ${typeof options}`, filepath);\n  }\n  if (Array.isArray(options)) {\n    throw new ConfigError(`Expected config object but found array`, filepath);\n  }\n\n  delete options[\"$schema\"];\n\n  return {\n    filepath,\n    dirname: path.dirname(filepath),\n    options,\n  };\n});\n\nconst readIgnoreConfig = makeStaticFileCache((filepath, content) => {\n  const ignoreDir = path.dirname(filepath);\n  const ignorePatterns = content\n    .split(\"\\n\")\n    .map<string>(line => line.replace(/#(.*?)$/, \"\").trim())\n    .filter(line => !!line);\n\n  for (const pattern of ignorePatterns) {\n    if (pattern[0] === \"!\") {\n      throw new ConfigError(\n        `Negation of file paths is not supported.`,\n        filepath,\n      );\n    }\n  }\n\n  return {\n    filepath,\n    dirname: path.dirname(filepath),\n    ignore: ignorePatterns.map(pattern =>\n      pathPatternToRegex(pattern, ignoreDir),\n    ),\n  };\n});\n\nexport function* resolveShowConfigPath(\n  dirname: string,\n): Handler<string | null> {\n  const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;\n  if (targetPath != null) {\n    const absolutePath = path.resolve(dirname, targetPath);\n    const stats = yield* fs.stat(absolutePath);\n    if (!stats.isFile()) {\n      throw new Error(\n        `${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`,\n      );\n    }\n    return absolutePath;\n  }\n  return null;\n}\n\nfunction throwConfigError(filepath: string): never {\n  throw new ConfigError(\n    `\\\nCaching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured\nfor various types of caching, using the first param of their handler functions:\n\nmodule.exports = function(api) {\n  // The API exposes the following:\n\n  // Cache the returned value forever and don't call this function again.\n  api.cache(true);\n\n  // Don't cache at all. Not recommended because it will be very slow.\n  api.cache(false);\n\n  // Cached based on the value of some function. If this function returns a value different from\n  // a previously-encountered value, the plugins will re-evaluate.\n  var env = api.cache(() => process.env.NODE_ENV);\n\n  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for\n  // any possible NODE_ENV value that might come up during plugin execution.\n  var isProd = api.cache(() => process.env.NODE_ENV === \"production\");\n\n  // .cache(fn) will perform a linear search though instances to find the matching plugin based\n  // based on previous instantiated plugins. If you want to recreate the plugin and discard the\n  // previous instance whenever something changes, you may use:\n  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === \"production\");\n\n  // Note, we also expose the following more-verbose versions of the above examples:\n  api.cache.forever(); // api.cache(true)\n  api.cache.never();   // api.cache(false)\n  api.cache.using(fn); // api.cache(fn)\n\n  // Return the value that will be cached.\n  return { };\n};`,\n    filepath,\n  );\n}\n"]},"metadata":{},"sourceType":"script"}