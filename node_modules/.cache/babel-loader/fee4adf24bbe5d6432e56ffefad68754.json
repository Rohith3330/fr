{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.callExpressionAffectsControlFlow = exports.SignatureEffect = exports.getControlFlowEnd = exports.endsControlFlow = void 0;\n\nconst ts = require(\"typescript\");\n\nconst node_1 = require(\"../typeguard/node\");\n\nconst util_1 = require(\"./util\");\n\nfunction endsControlFlow(statement, checker) {\n  return getControlFlowEnd(statement, checker).end;\n}\n\nexports.endsControlFlow = endsControlFlow;\nconst defaultControlFlowEnd = {\n  statements: [],\n  end: false\n};\n\nfunction getControlFlowEnd(statement, checker) {\n  return node_1.isBlockLike(statement) ? handleBlock(statement, checker) : getControlFlowEndWorker(statement, checker);\n}\n\nexports.getControlFlowEnd = getControlFlowEnd;\n\nfunction getControlFlowEndWorker(statement, checker) {\n  switch (statement.kind) {\n    case ts.SyntaxKind.ReturnStatement:\n    case ts.SyntaxKind.ThrowStatement:\n    case ts.SyntaxKind.ContinueStatement:\n    case ts.SyntaxKind.BreakStatement:\n      return {\n        statements: [statement],\n        end: true\n      };\n\n    case ts.SyntaxKind.Block:\n      return handleBlock(statement, checker);\n\n    case ts.SyntaxKind.ForStatement:\n    case ts.SyntaxKind.WhileStatement:\n      return handleForAndWhileStatement(statement, checker);\n\n    case ts.SyntaxKind.ForOfStatement:\n    case ts.SyntaxKind.ForInStatement:\n      return handleForInOrOfStatement(statement, checker);\n\n    case ts.SyntaxKind.DoStatement:\n      return matchBreakOrContinue(getControlFlowEndWorker(statement.statement, checker), node_1.isBreakOrContinueStatement);\n\n    case ts.SyntaxKind.IfStatement:\n      return handleIfStatement(statement, checker);\n\n    case ts.SyntaxKind.SwitchStatement:\n      return matchBreakOrContinue(handleSwitchStatement(statement, checker), node_1.isBreakStatement);\n\n    case ts.SyntaxKind.TryStatement:\n      return handleTryStatement(statement, checker);\n\n    case ts.SyntaxKind.LabeledStatement:\n      return matchLabel(getControlFlowEndWorker(statement.statement, checker), statement.label);\n\n    case ts.SyntaxKind.WithStatement:\n      return getControlFlowEndWorker(statement.statement, checker);\n\n    case ts.SyntaxKind.ExpressionStatement:\n      if (checker === undefined) return defaultControlFlowEnd;\n      return handleExpressionStatement(statement, checker);\n\n    default:\n      return defaultControlFlowEnd;\n  }\n}\n\nfunction handleBlock(statement, checker) {\n  const result = {\n    statements: [],\n    end: false\n  };\n\n  for (const s of statement.statements) {\n    const current = getControlFlowEndWorker(s, checker);\n    result.statements.push(...current.statements);\n\n    if (current.end) {\n      result.end = true;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction handleForInOrOfStatement(statement, checker) {\n  const end = matchBreakOrContinue(getControlFlowEndWorker(statement.statement, checker), node_1.isBreakOrContinueStatement);\n  end.end = false; // loop body is guaranteed to be executed\n\n  return end;\n}\n\nfunction handleForAndWhileStatement(statement, checker) {\n  const constantCondition = statement.kind === ts.SyntaxKind.WhileStatement ? getConstantCondition(statement.expression) : statement.condition === undefined || getConstantCondition(statement.condition);\n  if (constantCondition === false) return defaultControlFlowEnd; // loop body is never executed\n\n  const end = matchBreakOrContinue(getControlFlowEndWorker(statement.statement, checker), node_1.isBreakOrContinueStatement);\n  if (constantCondition === undefined) end.end = false; // can't be sure that loop body is executed at all\n\n  return end;\n}\n/** Simply detects `true` and `false` in conditions. That matches TypeScript's behavior. */\n\n\nfunction getConstantCondition(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.TrueKeyword:\n      return true;\n\n    case ts.SyntaxKind.FalseKeyword:\n      return false;\n\n    default:\n      return;\n  }\n}\n\nfunction handleIfStatement(node, checker) {\n  switch (getConstantCondition(node.expression)) {\n    case true:\n      // else branch is never executed\n      return getControlFlowEndWorker(node.thenStatement, checker);\n\n    case false:\n      // then branch is never executed\n      return node.elseStatement === undefined ? defaultControlFlowEnd : getControlFlowEndWorker(node.elseStatement, checker);\n  }\n\n  const then = getControlFlowEndWorker(node.thenStatement, checker);\n  if (node.elseStatement === undefined) return {\n    statements: then.statements,\n    end: false\n  };\n  const elze = getControlFlowEndWorker(node.elseStatement, checker);\n  return {\n    statements: [...then.statements, ...elze.statements],\n    end: then.end && elze.end\n  };\n}\n\nfunction handleSwitchStatement(node, checker) {\n  let hasDefault = false;\n  const result = {\n    statements: [],\n    end: false\n  };\n\n  for (const clause of node.caseBlock.clauses) {\n    if (clause.kind === ts.SyntaxKind.DefaultClause) hasDefault = true;\n    const current = handleBlock(clause, checker);\n    result.end = current.end;\n    result.statements.push(...current.statements);\n  }\n\n  result.end && (result.end = hasDefault || checker !== undefined && util_1.hasExhaustiveCaseClauses(node, checker));\n  return result;\n}\n\nfunction handleTryStatement(node, checker) {\n  let finallyResult;\n\n  if (node.finallyBlock !== undefined) {\n    finallyResult = handleBlock(node.finallyBlock, checker); // if 'finally' always ends control flow, we are not interested in any jump statements from 'try' or 'catch'\n\n    if (finallyResult.end) return finallyResult;\n  }\n\n  const tryResult = handleBlock(node.tryBlock, checker);\n  if (node.catchClause === undefined) return {\n    statements: finallyResult.statements.concat(tryResult.statements),\n    end: tryResult.end\n  };\n  const catchResult = handleBlock(node.catchClause.block, checker);\n  return {\n    statements: tryResult.statements // remove all throw statements and throwing function calls from the list of control flow statements inside tryBlock\n    .filter(s => s.kind !== ts.SyntaxKind.ThrowStatement && s.kind !== ts.SyntaxKind.ExpressionStatement).concat(catchResult.statements, finallyResult === undefined ? [] : finallyResult.statements),\n    end: tryResult.end && catchResult.end // only ends control flow if try AND catch definitely end control flow\n\n  };\n}\n/** Dotted name as TypeScript requires it for assertion signatures to affect control flow. */\n\n\nfunction isDottedNameWithExplicitTypeAnnotation(node, checker) {\n  while (true) {\n    switch (node.kind) {\n      case ts.SyntaxKind.Identifier:\n        {\n          const symbol = checker.getExportSymbolOfSymbol(checker.getSymbolAtLocation(node));\n          return isExplicitlyTypedSymbol(util_1.isSymbolFlagSet(symbol, ts.SymbolFlags.Alias) ? checker.getAliasedSymbol(symbol) : symbol, checker);\n        }\n\n      case ts.SyntaxKind.ThisKeyword:\n        return isExplicitlyTypedThis(node);\n\n      case ts.SyntaxKind.SuperKeyword:\n        return true;\n\n      case ts.SyntaxKind.PropertyAccessExpression:\n        if (!isExplicitlyTypedSymbol(checker.getSymbolAtLocation(node), checker)) return false;\n      // falls through\n\n      case ts.SyntaxKind.ParenthesizedExpression:\n        node = node.expression;\n        continue;\n\n      default:\n        return false;\n    }\n  }\n}\n\nfunction isExplicitlyTypedSymbol(symbol, checker) {\n  if (symbol === undefined) return false;\n  if (util_1.isSymbolFlagSet(symbol, ts.SymbolFlags.Function | ts.SymbolFlags.Method | ts.SymbolFlags.Class | ts.SymbolFlags.ValueModule)) return true;\n  if (!util_1.isSymbolFlagSet(symbol, ts.SymbolFlags.Variable | ts.SymbolFlags.Property)) return false;\n  if (symbol.valueDeclaration === undefined) return false;\n  if (declarationHasExplicitTypeAnnotation(symbol.valueDeclaration)) return true;\n  return node_1.isVariableDeclaration(symbol.valueDeclaration) && symbol.valueDeclaration.parent.parent.kind === ts.SyntaxKind.ForOfStatement && isDottedNameWithExplicitTypeAnnotation(symbol.valueDeclaration.parent.parent.expression, checker);\n}\n\nfunction declarationHasExplicitTypeAnnotation(node) {\n  if (ts.isJSDocPropertyLikeTag(node)) return node.typeExpression !== undefined;\n  return (node_1.isVariableDeclaration(node) || node_1.isParameterDeclaration(node) || node_1.isPropertyDeclaration(node) || node_1.isPropertySignature(node)) && (util_1.isNodeFlagSet(node, ts.NodeFlags.JavaScriptFile) ? ts.getJSDocType(node) : node.type) !== undefined;\n}\n\nfunction isExplicitlyTypedThis(node) {\n  var _a;\n\n  do {\n    node = node.parent;\n\n    if (node_1.isDecorator(node)) {\n      // `this` in decorators always resolves outside of the containing class\n      if (node.parent.kind === ts.SyntaxKind.Parameter && node_1.isClassLikeDeclaration(node.parent.parent.parent)) {\n        node = node.parent.parent.parent.parent;\n      } else if (node_1.isClassLikeDeclaration(node.parent.parent)) {\n        node = node.parent.parent.parent;\n      } else if (node_1.isClassLikeDeclaration(node.parent)) {\n        node = node.parent.parent;\n      }\n    }\n  } while (util_1.isFunctionScopeBoundary(node) !== 1\n  /* Function */\n  || node.kind === ts.SyntaxKind.ArrowFunction);\n\n  return util_1.isFunctionWithBody(node) && (util_1.isNodeFlagSet(node, ts.NodeFlags.JavaScriptFile) ? ((_a = ts.getJSDocThisTag(node)) === null || _a === void 0 ? void 0 : _a.typeExpression) !== undefined : node.parameters.length !== 0 && util_1.isThisParameter(node.parameters[0]) && node.parameters[0].type !== undefined) || node_1.isClassLikeDeclaration(node.parent);\n}\n\nvar SignatureEffect;\n\n(function (SignatureEffect) {\n  SignatureEffect[SignatureEffect[\"Never\"] = 1] = \"Never\";\n  SignatureEffect[SignatureEffect[\"Asserts\"] = 2] = \"Asserts\";\n})(SignatureEffect = exports.SignatureEffect || (exports.SignatureEffect = {}));\n/**\r\n * Dermines whether a top level CallExpression has a control flow effect according to TypeScript's rules.\r\n * This handles functions returning `never` and `asserts`.\r\n */\n\n\nfunction callExpressionAffectsControlFlow(node, checker) {\n  var _a, _b, _c;\n\n  if (!node_1.isExpressionStatement(node.parent) || ts.isOptionalChain(node) || !isDottedNameWithExplicitTypeAnnotation(node.expression, checker)) return;\n  const signature = checker.getResolvedSignature(node);\n  if ((signature === null || signature === void 0 ? void 0 : signature.declaration) === undefined) return;\n  const typeNode = ts.isJSDocSignature(signature.declaration) ? (_b = (_a = signature.declaration.type) === null || _a === void 0 ? void 0 : _a.typeExpression) === null || _b === void 0 ? void 0 : _b.type : (_c = signature.declaration.type) !== null && _c !== void 0 ? _c : util_1.isNodeFlagSet(signature.declaration, ts.NodeFlags.JavaScriptFile) ? ts.getJSDocReturnType(signature.declaration) : undefined;\n  if (typeNode === undefined) return;\n  if (node_1.isTypePredicateNode(typeNode) && typeNode.assertsModifier !== undefined) return 2\n  /* Asserts */\n  ;\n  return util_1.isTypeFlagSet(checker.getTypeFromTypeNode(typeNode), ts.TypeFlags.Never) ? 1\n  /* Never */\n  : undefined;\n}\n\nexports.callExpressionAffectsControlFlow = callExpressionAffectsControlFlow;\n\nfunction handleExpressionStatement(node, checker) {\n  if (!node_1.isCallExpression(node.expression)) return defaultControlFlowEnd;\n\n  switch (callExpressionAffectsControlFlow(node.expression, checker)) {\n    case 2\n    /* Asserts */\n    :\n      return {\n        statements: [node],\n        end: false\n      };\n\n    case 1\n    /* Never */\n    :\n      return {\n        statements: [node],\n        end: true\n      };\n\n    case undefined:\n      return defaultControlFlowEnd;\n  }\n}\n\nfunction matchBreakOrContinue(current, pred) {\n  const result = {\n    statements: [],\n    end: current.end\n  };\n\n  for (const statement of current.statements) {\n    if (pred(statement) && statement.label === undefined) {\n      result.end = false;\n      continue;\n    }\n\n    result.statements.push(statement);\n  }\n\n  return result;\n}\n\nfunction matchLabel(current, label) {\n  const result = {\n    statements: [],\n    end: current.end\n  };\n  const labelText = label.text;\n\n  for (const statement of current.statements) {\n    switch (statement.kind) {\n      case ts.SyntaxKind.BreakStatement:\n      case ts.SyntaxKind.ContinueStatement:\n        if (statement.label !== undefined && statement.label.text === labelText) {\n          result.end = false;\n          continue;\n        }\n\n    }\n\n    result.statements.push(statement);\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["endsControlFlow","statement","checker","getControlFlowEnd","end","exports","defaultControlFlowEnd","statements","node_1","handleBlock","getControlFlowEndWorker","kind","ts","SyntaxKind","ReturnStatement","ThrowStatement","ContinueStatement","BreakStatement","Block","ForStatement","WhileStatement","handleForAndWhileStatement","ForOfStatement","ForInStatement","handleForInOrOfStatement","DoStatement","matchBreakOrContinue","IfStatement","handleIfStatement","SwitchStatement","handleSwitchStatement","TryStatement","handleTryStatement","LabeledStatement","matchLabel","label","WithStatement","ExpressionStatement","undefined","handleExpressionStatement","result","s","current","push","constantCondition","getConstantCondition","expression","condition","node","TrueKeyword","FalseKeyword","thenStatement","elseStatement","then","elze","hasDefault","clause","caseBlock","clauses","DefaultClause","util_1","finallyResult","finallyBlock","tryResult","tryBlock","catchClause","concat","catchResult","block","filter","isDottedNameWithExplicitTypeAnnotation","Identifier","symbol","getExportSymbolOfSymbol","getSymbolAtLocation","isExplicitlyTypedSymbol","SymbolFlags","Alias","getAliasedSymbol","ThisKeyword","isExplicitlyTypedThis","SuperKeyword","PropertyAccessExpression","ParenthesizedExpression","Function","Method","Class","ValueModule","Variable","Property","valueDeclaration","declarationHasExplicitTypeAnnotation","parent","isJSDocPropertyLikeTag","typeExpression","NodeFlags","JavaScriptFile","getJSDocType","type","Parameter","ArrowFunction","getJSDocThisTag","_a","parameters","length","SignatureEffect","callExpressionAffectsControlFlow","isOptionalChain","signature","getResolvedSignature","declaration","typeNode","isJSDocSignature","_b","_c","getJSDocReturnType","assertsModifier","getTypeFromTypeNode","TypeFlags","Never","pred","labelText","text"],"sources":["control-flow.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}