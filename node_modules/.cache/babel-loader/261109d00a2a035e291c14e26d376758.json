{"ast":null,"code":"/* eslint-disable no-console */\n\"use strict\";\n/**\n * Returns a function that will invoke the supplied function and print a\n * deprecation warning to the console each time it is called.\n *\n * @param  {Function} func\n * @param  {string} msg\n * @returns {Function}\n */\n\nexports.wrap = function (func, msg) {\n  var wrapped = function () {\n    exports.printWarning(msg);\n    return func.apply(this, arguments);\n  };\n\n  if (func.prototype) {\n    wrapped.prototype = func.prototype;\n  }\n\n  return wrapped;\n};\n/**\n * Returns a string which can be supplied to `wrap()` to notify the user that a\n * particular part of the sinon API has been deprecated.\n *\n * @param  {string} packageName\n * @param  {string} funcName\n * @returns {string}\n */\n\n\nexports.defaultMsg = function (packageName, funcName) {\n  return packageName + \".\" + funcName + \" is deprecated and will be removed from the public API in a future version of \" + packageName + \".\";\n};\n/**\n * Prints a warning on the console, when it exists\n *\n * @param  {string} msg\n * @returns {undefined}\n */\n\n\nexports.printWarning = function (msg) {\n  /* istanbul ignore next */\n  if (typeof process === \"object\" && process.emitWarning) {\n    // Emit Warnings in Node\n    process.emitWarning(msg);\n  } else if (console.info) {\n    console.info(msg);\n  } else {\n    console.log(msg);\n  }\n};","map":{"version":3,"names":["exports","wrap","func","msg","wrapped","printWarning","apply","arguments","prototype","defaultMsg","packageName","funcName","process","emitWarning","console","info","log"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@sinonjs/commons/lib/deprecated.js"],"sourcesContent":["/* eslint-disable no-console */\n\"use strict\";\n\n/**\n * Returns a function that will invoke the supplied function and print a\n * deprecation warning to the console each time it is called.\n *\n * @param  {Function} func\n * @param  {string} msg\n * @returns {Function}\n */\nexports.wrap = function(func, msg) {\n    var wrapped = function() {\n        exports.printWarning(msg);\n        return func.apply(this, arguments);\n    };\n    if (func.prototype) {\n        wrapped.prototype = func.prototype;\n    }\n    return wrapped;\n};\n\n/**\n * Returns a string which can be supplied to `wrap()` to notify the user that a\n * particular part of the sinon API has been deprecated.\n *\n * @param  {string} packageName\n * @param  {string} funcName\n * @returns {string}\n */\nexports.defaultMsg = function(packageName, funcName) {\n    return (\n        packageName +\n        \".\" +\n        funcName +\n        \" is deprecated and will be removed from the public API in a future version of \" +\n        packageName +\n        \".\"\n    );\n};\n\n/**\n * Prints a warning on the console, when it exists\n *\n * @param  {string} msg\n * @returns {undefined}\n */\nexports.printWarning = function(msg) {\n    /* istanbul ignore next */\n    if (typeof process === \"object\" && process.emitWarning) {\n        // Emit Warnings in Node\n        process.emitWarning(msg);\n    } else if (console.info) {\n        console.info(msg);\n    } else {\n        console.log(msg);\n    }\n};\n"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,OAAO,CAACC,IAAR,GAAe,UAASC,IAAT,EAAeC,GAAf,EAAoB;EAC/B,IAAIC,OAAO,GAAG,YAAW;IACrBJ,OAAO,CAACK,YAAR,CAAqBF,GAArB;IACA,OAAOD,IAAI,CAACI,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAP;EACH,CAHD;;EAIA,IAAIL,IAAI,CAACM,SAAT,EAAoB;IAChBJ,OAAO,CAACI,SAAR,GAAoBN,IAAI,CAACM,SAAzB;EACH;;EACD,OAAOJ,OAAP;AACH,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACS,UAAR,GAAqB,UAASC,WAAT,EAAsBC,QAAtB,EAAgC;EACjD,OACID,WAAW,GACX,GADA,GAEAC,QAFA,GAGA,gFAHA,GAIAD,WAJA,GAKA,GANJ;AAQH,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;;;AACAV,OAAO,CAACK,YAAR,GAAuB,UAASF,GAAT,EAAc;EACjC;EACA,IAAI,OAAOS,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,CAACC,WAA3C,EAAwD;IACpD;IACAD,OAAO,CAACC,WAAR,CAAoBV,GAApB;EACH,CAHD,MAGO,IAAIW,OAAO,CAACC,IAAZ,EAAkB;IACrBD,OAAO,CAACC,IAAR,CAAaZ,GAAb;EACH,CAFM,MAEA;IACHW,OAAO,CAACE,GAAR,CAAYb,GAAZ;EACH;AACJ,CAVD"},"metadata":{},"sourceType":"script"}