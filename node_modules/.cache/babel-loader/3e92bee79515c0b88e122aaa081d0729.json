{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE\n file for terms.\n */\n'use strict';\n\nconst {\n  ReportBase\n} = require('istanbul-lib-report');\n\nconst NAME_COL = 4;\nconst PCT_COLS = 7;\nconst MISSING_COL = 17;\nconst TAB_SIZE = 1;\nconst DELIM = ' | ';\n\nfunction padding(num, ch) {\n  let str = '';\n  let i;\n  ch = ch || ' ';\n\n  for (i = 0; i < num; i += 1) {\n    str += ch;\n  }\n\n  return str;\n}\n\nfunction fill(str, width, right, tabs) {\n  tabs = tabs || 0;\n  str = String(str);\n  const leadingSpaces = tabs * TAB_SIZE;\n  const remaining = width - leadingSpaces;\n  const leader = padding(leadingSpaces);\n  let fmtStr = '';\n\n  if (remaining > 0) {\n    const strlen = str.length;\n    let fillStr;\n\n    if (remaining >= strlen) {\n      fillStr = padding(remaining - strlen);\n    } else {\n      fillStr = '...';\n      const length = remaining - fillStr.length;\n      str = str.substring(strlen - length);\n      right = true;\n    }\n\n    fmtStr = right ? fillStr + str : str + fillStr;\n  }\n\n  return leader + fmtStr;\n}\n\nfunction formatName(name, maxCols, level) {\n  return fill(name, maxCols, false, level);\n}\n\nfunction formatPct(pct, width) {\n  return fill(pct, width || PCT_COLS, true, 0);\n}\n\nfunction nodeMissing(node) {\n  if (node.isSummary()) {\n    return '';\n  }\n\n  const metrics = node.getCoverageSummary();\n  const isEmpty = metrics.isEmpty();\n  const lines = isEmpty ? 0 : metrics.lines.pct;\n  let coveredLines;\n  const fileCoverage = node.getFileCoverage();\n\n  if (lines === 100) {\n    const branches = fileCoverage.getBranchCoverageByLine();\n    coveredLines = Object.entries(branches).map(_ref => {\n      let [key, {\n        coverage\n      }] = _ref;\n      return [key, coverage === 100];\n    });\n  } else {\n    coveredLines = Object.entries(fileCoverage.getLineCoverage());\n  }\n\n  let newRange = true;\n  const ranges = coveredLines.reduce((acum, _ref2) => {\n    let [line, hit] = _ref2;\n    if (hit) newRange = true;else {\n      line = parseInt(line);\n\n      if (newRange) {\n        acum.push([line]);\n        newRange = false;\n      } else acum[acum.length - 1][1] = line;\n    }\n    return acum;\n  }, []).map(range => {\n    const {\n      length\n    } = range;\n    if (length === 1) return range[0];\n    return `${range[0]}-${range[1]}`;\n  });\n  return [].concat(...ranges).join(',');\n}\n\nfunction nodeName(node) {\n  return node.getRelativeName() || 'All files';\n}\n\nfunction depthFor(node) {\n  let ret = 0;\n  node = node.getParent();\n\n  while (node) {\n    ret += 1;\n    node = node.getParent();\n  }\n\n  return ret;\n}\n\nfunction nullDepthFor() {\n  return 0;\n}\n\nfunction findWidth(node, context, nodeExtractor) {\n  let depthFor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : nullDepthFor;\n  let last = 0;\n\n  function compareWidth(node) {\n    last = Math.max(last, TAB_SIZE * depthFor(node) + nodeExtractor(node).length);\n  }\n\n  const visitor = {\n    onSummary: compareWidth,\n    onDetail: compareWidth\n  };\n  node.visit(context.getVisitor(visitor));\n  return last;\n}\n\nfunction makeLine(nameWidth, missingWidth) {\n  const name = padding(nameWidth, '-');\n  const pct = padding(PCT_COLS, '-');\n  const elements = [];\n  elements.push(name);\n  elements.push(pct);\n  elements.push(padding(PCT_COLS + 1, '-'));\n  elements.push(pct);\n  elements.push(pct);\n  elements.push(padding(missingWidth, '-'));\n  return elements.join(DELIM.replace(/ /g, '-')) + '-';\n}\n\nfunction tableHeader(maxNameCols, missingWidth) {\n  const elements = [];\n  elements.push(formatName('File', maxNameCols, 0));\n  elements.push(formatPct('% Stmts'));\n  elements.push(formatPct('% Branch', PCT_COLS + 1));\n  elements.push(formatPct('% Funcs'));\n  elements.push(formatPct('% Lines'));\n  elements.push(formatName('Uncovered Line #s', missingWidth));\n  return elements.join(DELIM) + ' ';\n}\n\nfunction isFull(metrics) {\n  return metrics.statements.pct === 100 && metrics.branches.pct === 100 && metrics.functions.pct === 100 && metrics.lines.pct === 100;\n}\n\nfunction tableRow(node, context, colorizer, maxNameCols, level, skipEmpty, skipFull, missingWidth) {\n  const name = nodeName(node);\n  const metrics = node.getCoverageSummary();\n  const isEmpty = metrics.isEmpty();\n\n  if (skipEmpty && isEmpty) {\n    return '';\n  }\n\n  if (skipFull && isFull(metrics)) {\n    return '';\n  }\n\n  const mm = {\n    statements: isEmpty ? 0 : metrics.statements.pct,\n    branches: isEmpty ? 0 : metrics.branches.pct,\n    functions: isEmpty ? 0 : metrics.functions.pct,\n    lines: isEmpty ? 0 : metrics.lines.pct\n  };\n  const colorize = isEmpty ? function (str) {\n    return str;\n  } : function (str, key) {\n    return colorizer(str, context.classForPercent(key, mm[key]));\n  };\n  const elements = [];\n  elements.push(colorize(formatName(name, maxNameCols, level), 'statements'));\n  elements.push(colorize(formatPct(mm.statements), 'statements'));\n  elements.push(colorize(formatPct(mm.branches, PCT_COLS + 1), 'branches'));\n  elements.push(colorize(formatPct(mm.functions), 'functions'));\n  elements.push(colorize(formatPct(mm.lines), 'lines'));\n  elements.push(colorizer(formatName(nodeMissing(node), missingWidth), mm.lines === 100 ? 'medium' : 'low'));\n  return elements.join(DELIM) + ' ';\n}\n\nclass TextReport extends ReportBase {\n  constructor(opts) {\n    super(opts);\n    opts = opts || {};\n    const {\n      maxCols\n    } = opts;\n    this.file = opts.file || null;\n    this.maxCols = maxCols != null ? maxCols : process.stdout.columns || 80;\n    this.cw = null;\n    this.skipEmpty = opts.skipEmpty;\n    this.skipFull = opts.skipFull;\n  }\n\n  onStart(root, context) {\n    this.cw = context.writer.writeFile(this.file);\n    this.nameWidth = Math.max(NAME_COL, findWidth(root, context, nodeName, depthFor));\n    this.missingWidth = Math.max(MISSING_COL, findWidth(root, context, nodeMissing));\n\n    if (this.maxCols > 0) {\n      const pct_cols = DELIM.length + 4 * (PCT_COLS + DELIM.length) + 2;\n      const maxRemaining = this.maxCols - (pct_cols + MISSING_COL);\n\n      if (this.nameWidth > maxRemaining) {\n        this.nameWidth = maxRemaining;\n        this.missingWidth = MISSING_COL;\n      } else if (this.nameWidth < maxRemaining) {\n        const maxRemaining = this.maxCols - (this.nameWidth + pct_cols);\n\n        if (this.missingWidth > maxRemaining) {\n          this.missingWidth = maxRemaining;\n        }\n      }\n    }\n\n    const line = makeLine(this.nameWidth, this.missingWidth);\n    this.cw.println(line);\n    this.cw.println(tableHeader(this.nameWidth, this.missingWidth));\n    this.cw.println(line);\n  }\n\n  onSummary(node, context) {\n    const nodeDepth = depthFor(node);\n    const row = tableRow(node, context, this.cw.colorize.bind(this.cw), this.nameWidth, nodeDepth, this.skipEmpty, this.skipFull, this.missingWidth);\n\n    if (row) {\n      this.cw.println(row);\n    }\n  }\n\n  onDetail(node, context) {\n    return this.onSummary(node, context);\n  }\n\n  onEnd() {\n    this.cw.println(makeLine(this.nameWidth, this.missingWidth));\n    this.cw.close();\n  }\n\n}\n\nmodule.exports = TextReport;","map":{"version":3,"names":["ReportBase","require","NAME_COL","PCT_COLS","MISSING_COL","TAB_SIZE","DELIM","padding","num","ch","str","i","fill","width","right","tabs","String","leadingSpaces","remaining","leader","fmtStr","strlen","length","fillStr","substring","formatName","name","maxCols","level","formatPct","pct","nodeMissing","node","isSummary","metrics","getCoverageSummary","isEmpty","lines","coveredLines","fileCoverage","getFileCoverage","branches","getBranchCoverageByLine","Object","entries","map","key","coverage","getLineCoverage","newRange","ranges","reduce","acum","line","hit","parseInt","push","range","concat","join","nodeName","getRelativeName","depthFor","ret","getParent","nullDepthFor","findWidth","context","nodeExtractor","last","compareWidth","Math","max","visitor","onSummary","onDetail","visit","getVisitor","makeLine","nameWidth","missingWidth","elements","replace","tableHeader","maxNameCols","isFull","statements","functions","tableRow","colorizer","skipEmpty","skipFull","mm","colorize","classForPercent","TextReport","constructor","opts","file","process","stdout","columns","cw","onStart","root","writer","writeFile","pct_cols","maxRemaining","println","nodeDepth","row","bind","onEnd","close","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/istanbul-reports/lib/text/index.js"],"sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE\n file for terms.\n */\n'use strict';\nconst { ReportBase } = require('istanbul-lib-report');\n\nconst NAME_COL = 4;\nconst PCT_COLS = 7;\nconst MISSING_COL = 17;\nconst TAB_SIZE = 1;\nconst DELIM = ' | ';\n\nfunction padding(num, ch) {\n    let str = '';\n    let i;\n    ch = ch || ' ';\n    for (i = 0; i < num; i += 1) {\n        str += ch;\n    }\n    return str;\n}\n\nfunction fill(str, width, right, tabs) {\n    tabs = tabs || 0;\n    str = String(str);\n\n    const leadingSpaces = tabs * TAB_SIZE;\n    const remaining = width - leadingSpaces;\n    const leader = padding(leadingSpaces);\n    let fmtStr = '';\n\n    if (remaining > 0) {\n        const strlen = str.length;\n        let fillStr;\n\n        if (remaining >= strlen) {\n            fillStr = padding(remaining - strlen);\n        } else {\n            fillStr = '...';\n            const length = remaining - fillStr.length;\n\n            str = str.substring(strlen - length);\n            right = true;\n        }\n        fmtStr = right ? fillStr + str : str + fillStr;\n    }\n\n    return leader + fmtStr;\n}\n\nfunction formatName(name, maxCols, level) {\n    return fill(name, maxCols, false, level);\n}\n\nfunction formatPct(pct, width) {\n    return fill(pct, width || PCT_COLS, true, 0);\n}\n\nfunction nodeMissing(node) {\n    if (node.isSummary()) {\n        return '';\n    }\n\n    const metrics = node.getCoverageSummary();\n    const isEmpty = metrics.isEmpty();\n    const lines = isEmpty ? 0 : metrics.lines.pct;\n\n    let coveredLines;\n\n    const fileCoverage = node.getFileCoverage();\n    if (lines === 100) {\n        const branches = fileCoverage.getBranchCoverageByLine();\n        coveredLines = Object.entries(branches).map(([key, { coverage }]) => [\n            key,\n            coverage === 100\n        ]);\n    } else {\n        coveredLines = Object.entries(fileCoverage.getLineCoverage());\n    }\n\n    let newRange = true;\n    const ranges = coveredLines\n        .reduce((acum, [line, hit]) => {\n            if (hit) newRange = true;\n            else {\n                line = parseInt(line);\n                if (newRange) {\n                    acum.push([line]);\n                    newRange = false;\n                } else acum[acum.length - 1][1] = line;\n            }\n\n            return acum;\n        }, [])\n        .map(range => {\n            const { length } = range;\n\n            if (length === 1) return range[0];\n\n            return `${range[0]}-${range[1]}`;\n        });\n\n    return [].concat(...ranges).join(',');\n}\n\nfunction nodeName(node) {\n    return node.getRelativeName() || 'All files';\n}\n\nfunction depthFor(node) {\n    let ret = 0;\n    node = node.getParent();\n    while (node) {\n        ret += 1;\n        node = node.getParent();\n    }\n    return ret;\n}\n\nfunction nullDepthFor() {\n    return 0;\n}\n\nfunction findWidth(node, context, nodeExtractor, depthFor = nullDepthFor) {\n    let last = 0;\n    function compareWidth(node) {\n        last = Math.max(\n            last,\n            TAB_SIZE * depthFor(node) + nodeExtractor(node).length\n        );\n    }\n    const visitor = {\n        onSummary: compareWidth,\n        onDetail: compareWidth\n    };\n    node.visit(context.getVisitor(visitor));\n    return last;\n}\n\nfunction makeLine(nameWidth, missingWidth) {\n    const name = padding(nameWidth, '-');\n    const pct = padding(PCT_COLS, '-');\n    const elements = [];\n\n    elements.push(name);\n    elements.push(pct);\n    elements.push(padding(PCT_COLS + 1, '-'));\n    elements.push(pct);\n    elements.push(pct);\n    elements.push(padding(missingWidth, '-'));\n    return elements.join(DELIM.replace(/ /g, '-')) + '-';\n}\n\nfunction tableHeader(maxNameCols, missingWidth) {\n    const elements = [];\n    elements.push(formatName('File', maxNameCols, 0));\n    elements.push(formatPct('% Stmts'));\n    elements.push(formatPct('% Branch', PCT_COLS + 1));\n    elements.push(formatPct('% Funcs'));\n    elements.push(formatPct('% Lines'));\n    elements.push(formatName('Uncovered Line #s', missingWidth));\n    return elements.join(DELIM) + ' ';\n}\n\nfunction isFull(metrics) {\n    return (\n        metrics.statements.pct === 100 &&\n        metrics.branches.pct === 100 &&\n        metrics.functions.pct === 100 &&\n        metrics.lines.pct === 100\n    );\n}\n\nfunction tableRow(\n    node,\n    context,\n    colorizer,\n    maxNameCols,\n    level,\n    skipEmpty,\n    skipFull,\n    missingWidth\n) {\n    const name = nodeName(node);\n    const metrics = node.getCoverageSummary();\n    const isEmpty = metrics.isEmpty();\n    if (skipEmpty && isEmpty) {\n        return '';\n    }\n    if (skipFull && isFull(metrics)) {\n        return '';\n    }\n\n    const mm = {\n        statements: isEmpty ? 0 : metrics.statements.pct,\n        branches: isEmpty ? 0 : metrics.branches.pct,\n        functions: isEmpty ? 0 : metrics.functions.pct,\n        lines: isEmpty ? 0 : metrics.lines.pct\n    };\n    const colorize = isEmpty\n        ? function(str) {\n              return str;\n          }\n        : function(str, key) {\n              return colorizer(str, context.classForPercent(key, mm[key]));\n          };\n    const elements = [];\n\n    elements.push(colorize(formatName(name, maxNameCols, level), 'statements'));\n    elements.push(colorize(formatPct(mm.statements), 'statements'));\n    elements.push(colorize(formatPct(mm.branches, PCT_COLS + 1), 'branches'));\n    elements.push(colorize(formatPct(mm.functions), 'functions'));\n    elements.push(colorize(formatPct(mm.lines), 'lines'));\n    elements.push(\n        colorizer(\n            formatName(nodeMissing(node), missingWidth),\n            mm.lines === 100 ? 'medium' : 'low'\n        )\n    );\n\n    return elements.join(DELIM) + ' ';\n}\n\nclass TextReport extends ReportBase {\n    constructor(opts) {\n        super(opts);\n\n        opts = opts || {};\n        const { maxCols } = opts;\n\n        this.file = opts.file || null;\n        this.maxCols = maxCols != null ? maxCols : process.stdout.columns || 80;\n        this.cw = null;\n        this.skipEmpty = opts.skipEmpty;\n        this.skipFull = opts.skipFull;\n    }\n\n    onStart(root, context) {\n        this.cw = context.writer.writeFile(this.file);\n        this.nameWidth = Math.max(\n            NAME_COL,\n            findWidth(root, context, nodeName, depthFor)\n        );\n        this.missingWidth = Math.max(\n            MISSING_COL,\n            findWidth(root, context, nodeMissing)\n        );\n\n        if (this.maxCols > 0) {\n            const pct_cols = DELIM.length + 4 * (PCT_COLS + DELIM.length) + 2;\n\n            const maxRemaining = this.maxCols - (pct_cols + MISSING_COL);\n            if (this.nameWidth > maxRemaining) {\n                this.nameWidth = maxRemaining;\n                this.missingWidth = MISSING_COL;\n            } else if (this.nameWidth < maxRemaining) {\n                const maxRemaining = this.maxCols - (this.nameWidth + pct_cols);\n                if (this.missingWidth > maxRemaining) {\n                    this.missingWidth = maxRemaining;\n                }\n            }\n        }\n        const line = makeLine(this.nameWidth, this.missingWidth);\n        this.cw.println(line);\n        this.cw.println(tableHeader(this.nameWidth, this.missingWidth));\n        this.cw.println(line);\n    }\n\n    onSummary(node, context) {\n        const nodeDepth = depthFor(node);\n        const row = tableRow(\n            node,\n            context,\n            this.cw.colorize.bind(this.cw),\n            this.nameWidth,\n            nodeDepth,\n            this.skipEmpty,\n            this.skipFull,\n            this.missingWidth\n        );\n        if (row) {\n            this.cw.println(row);\n        }\n    }\n\n    onDetail(node, context) {\n        return this.onSummary(node, context);\n    }\n\n    onEnd() {\n        this.cw.println(makeLine(this.nameWidth, this.missingWidth));\n        this.cw.close();\n    }\n}\n\nmodule.exports = TextReport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}