{"ast":null,"code":"'use strict';\n\nvar debugMessage = require('./debug-message'),\n    toRegExp = require('./to-reg-exp'),\n    throwErrors = require('./throw-errors'),\n    decodeSourcesWith = require('./decode-sources-with'),\n    locateRootWith = require('./locate-root-with'),\n    encodeSourcesWith = require('./encode-sources-with'),\n    testCodec = require('./test-codec');\n\nvar CODECS = require('../../codec');\n/**\n * Process the given source-map per the given options.\n * @param {{resourcePath:string, context:string, output:{path:string}}} context A loader or compilation\n * @param {{debug:boolean, fail:boolean, format:string|boolean, root:string, codecs:object}} opt Options hash\n * @param {object|string} sourceMapOrSource An incoming source-map or single source path\n * @returns {undefined|object|string} An amended source-map or source path else undefined\n */\n\n\nfunction process(context, opt, sourceMapOrSource) {\n  // default options\n  var options = Object.assign({\n    sep: '/',\n    debug: false,\n    fail: false,\n    format: false,\n    root: false,\n    codecs: CODECS\n  }, opt); // validate codecs\n\n  var codecs = options.codecs.filter(testCodec); // determine what is present\n\n  var inputMap = !!sourceMapOrSource && typeof sourceMapOrSource === 'object' && sourceMapOrSource,\n      inputPath = typeof sourceMapOrSource === 'string' && sourceMapOrSource,\n      inputSources = inputMap && inputMap.sources || inputPath && [inputPath]; // what we need to produce\n\n  var absoluteSources, outputSources, outputRoot, outputMap;\n\n  if (inputSources) {\n    // decode each source with the first valid codec\n    absoluteSources = inputSources.map(decodeSourcesWith.call(context, codecs, options.fail)); // check for decode errors\n\n    throwErrors(context.resourcePath, absoluteSources); // output map is a copy unless absent or we are removing\n\n    outputMap = !inputMap || options.format === 'remove' ? undefined : Object.assign({}, inputMap); // some change in format\n\n    if (options.format) {\n      // find the specified codec in the codecs list\n      var codec = codecs.filter(testNamedCodec).pop();\n\n      if (!codec) {\n        throw new Error('Specified format \"' + options.format + '\" does not match any available codec.');\n      } // use the encoder where specified in 'format'\n\n\n      outputSources = absoluteSources.map(encodeSourcesWith.call(context, codec)).map(insertAbstractSources).map(convertPathSep);\n      outputRoot = !!options.root && locateRootWith.call(context, codec)() || undefined; // check for encode errors\n\n      throwErrors(context.resourcePath, outputSources.concat(outputRoot)); // commit the change\n\n      if (outputMap) {\n        outputMap.sources = outputSources;\n        outputMap.sourceRoot = outputRoot;\n      }\n    }\n  } // debugging information\n\n\n  var isDebug = toRegExp(options.debug).test(context.resourcePath);\n\n  if (isDebug) {\n    console.log(debugMessage(context, {\n      input: inputSources,\n      absolute: absoluteSources,\n      output: outputSources,\n      root: outputRoot\n    }));\n  } // complete\n\n\n  return inputMap ? outputMap : outputSources ? outputSources[0] : undefined;\n\n  function testNamedCodec(value) {\n    return value.name === options.format;\n  }\n\n  function insertAbstractSources(value, i) {\n    return value || inputSources[i];\n  }\n\n  function convertPathSep(value) {\n    return value instanceof Error ? value : value.replace(/[\\\\\\/]/g, options.sep);\n  }\n}\n\nmodule.exports = process;","map":{"version":3,"names":["debugMessage","require","toRegExp","throwErrors","decodeSourcesWith","locateRootWith","encodeSourcesWith","testCodec","CODECS","process","context","opt","sourceMapOrSource","options","Object","assign","sep","debug","fail","format","root","codecs","filter","inputMap","inputPath","inputSources","sources","absoluteSources","outputSources","outputRoot","outputMap","map","call","resourcePath","undefined","codec","testNamedCodec","pop","Error","insertAbstractSources","convertPathSep","concat","sourceRoot","isDebug","test","console","log","input","absolute","output","value","name","i","replace","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/adjust-sourcemap-loader/lib/process/index.js"],"sourcesContent":["'use strict';\n\nvar debugMessage      = require('./debug-message'),\n    toRegExp          = require('./to-reg-exp'),\n    throwErrors       = require('./throw-errors'),\n    decodeSourcesWith = require('./decode-sources-with'),\n    locateRootWith    = require('./locate-root-with'),\n    encodeSourcesWith = require('./encode-sources-with'),\n    testCodec         = require('./test-codec');\n\nvar CODECS = require('../../codec');\n\n/**\n * Process the given source-map per the given options.\n * @param {{resourcePath:string, context:string, output:{path:string}}} context A loader or compilation\n * @param {{debug:boolean, fail:boolean, format:string|boolean, root:string, codecs:object}} opt Options hash\n * @param {object|string} sourceMapOrSource An incoming source-map or single source path\n * @returns {undefined|object|string} An amended source-map or source path else undefined\n */\nfunction process(context, opt, sourceMapOrSource) {\n\n  // default options\n  var options = Object.assign({\n    sep   : '/',\n    debug : false,\n    fail  : false,\n    format: false,\n    root  : false,\n    codecs: CODECS\n  }, opt);\n\n  // validate codecs\n  var codecs = options.codecs\n    .filter(testCodec);\n\n  // determine what is present\n  var inputMap     = !!sourceMapOrSource && (typeof sourceMapOrSource === 'object') && sourceMapOrSource,\n      inputPath    = (typeof sourceMapOrSource === 'string') && sourceMapOrSource,\n      inputSources = inputMap && inputMap.sources || inputPath && [inputPath];\n\n  // what we need to produce\n  var absoluteSources,\n      outputSources,\n      outputRoot,\n      outputMap;\n\n  if (inputSources) {\n\n    // decode each source with the first valid codec\n    absoluteSources = inputSources\n      .map(decodeSourcesWith.call(context, codecs, options.fail));\n\n    // check for decode errors\n    throwErrors(context.resourcePath, absoluteSources);\n\n    // output map is a copy unless absent or we are removing\n    outputMap = (!inputMap || (options.format === 'remove')) ? undefined : Object.assign({}, inputMap);\n\n    // some change in format\n    if (options.format) {\n\n      // find the specified codec in the codecs list\n      var codec = codecs\n        .filter(testNamedCodec)\n        .pop();\n\n      if (!codec) {\n        throw new Error('Specified format \"' + options.format + '\" does not match any available codec.');\n      }\n\n      // use the encoder where specified in 'format'\n      outputSources = absoluteSources\n        .map(encodeSourcesWith.call(context, codec))\n        .map(insertAbstractSources)\n        .map(convertPathSep);\n\n      outputRoot = !!options.root && locateRootWith.call(context, codec)() || undefined;\n\n      // check for encode errors\n      throwErrors(context.resourcePath, outputSources.concat(outputRoot));\n\n      // commit the change\n      if (outputMap) {\n        outputMap.sources = outputSources;\n        outputMap.sourceRoot = outputRoot;\n      }\n    }\n  }\n\n  // debugging information\n  var isDebug = toRegExp(options.debug).test(context.resourcePath);\n  if (isDebug) {\n    console.log(debugMessage(context, {\n      input   : inputSources,\n      absolute: absoluteSources,\n      output  : outputSources,\n      root    : outputRoot\n    }));\n  }\n\n  // complete\n  return inputMap ? outputMap : outputSources ? outputSources[0] : undefined;\n\n  function testNamedCodec(value) {\n    return (value.name === options.format);\n  }\n\n  function insertAbstractSources(value, i) {\n    return value || inputSources[i];\n  }\n\n  function convertPathSep(value) {\n    return (value instanceof Error) ? value : value.replace(/[\\\\\\/]/g, options.sep);\n  }\n}\n\nmodule.exports = process;\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAQC,OAAO,CAAC,iBAAD,CAA/B;AAAA,IACIC,QAAQ,GAAYD,OAAO,CAAC,cAAD,CAD/B;AAAA,IAEIE,WAAW,GAASF,OAAO,CAAC,gBAAD,CAF/B;AAAA,IAGIG,iBAAiB,GAAGH,OAAO,CAAC,uBAAD,CAH/B;AAAA,IAIII,cAAc,GAAMJ,OAAO,CAAC,oBAAD,CAJ/B;AAAA,IAKIK,iBAAiB,GAAGL,OAAO,CAAC,uBAAD,CAL/B;AAAA,IAMIM,SAAS,GAAWN,OAAO,CAAC,cAAD,CAN/B;;AAQA,IAAIO,MAAM,GAAGP,OAAO,CAAC,aAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,OAAT,CAAiBC,OAAjB,EAA0BC,GAA1B,EAA+BC,iBAA/B,EAAkD;EAEhD;EACA,IAAIC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;IAC1BC,GAAG,EAAK,GADkB;IAE1BC,KAAK,EAAG,KAFkB;IAG1BC,IAAI,EAAI,KAHkB;IAI1BC,MAAM,EAAE,KAJkB;IAK1BC,IAAI,EAAI,KALkB;IAM1BC,MAAM,EAAEb;EANkB,CAAd,EAOXG,GAPW,CAAd,CAHgD,CAYhD;;EACA,IAAIU,MAAM,GAAGR,OAAO,CAACQ,MAAR,CACVC,MADU,CACHf,SADG,CAAb,CAbgD,CAgBhD;;EACA,IAAIgB,QAAQ,GAAO,CAAC,CAACX,iBAAF,IAAwB,OAAOA,iBAAP,KAA6B,QAArD,IAAkEA,iBAArF;EAAA,IACIY,SAAS,GAAO,OAAOZ,iBAAP,KAA6B,QAA9B,IAA2CA,iBAD9D;EAAA,IAEIa,YAAY,GAAGF,QAAQ,IAAIA,QAAQ,CAACG,OAArB,IAAgCF,SAAS,IAAI,CAACA,SAAD,CAFhE,CAjBgD,CAqBhD;;EACA,IAAIG,eAAJ,EACIC,aADJ,EAEIC,UAFJ,EAGIC,SAHJ;;EAKA,IAAIL,YAAJ,EAAkB;IAEhB;IACAE,eAAe,GAAGF,YAAY,CAC3BM,GADe,CACX3B,iBAAiB,CAAC4B,IAAlB,CAAuBtB,OAAvB,EAAgCW,MAAhC,EAAwCR,OAAO,CAACK,IAAhD,CADW,CAAlB,CAHgB,CAMhB;;IACAf,WAAW,CAACO,OAAO,CAACuB,YAAT,EAAuBN,eAAvB,CAAX,CAPgB,CAShB;;IACAG,SAAS,GAAI,CAACP,QAAD,IAAcV,OAAO,CAACM,MAAR,KAAmB,QAAlC,GAA+Ce,SAA/C,GAA2DpB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBQ,QAAlB,CAAvE,CAVgB,CAYhB;;IACA,IAAIV,OAAO,CAACM,MAAZ,EAAoB;MAElB;MACA,IAAIgB,KAAK,GAAGd,MAAM,CACfC,MADS,CACFc,cADE,EAETC,GAFS,EAAZ;;MAIA,IAAI,CAACF,KAAL,EAAY;QACV,MAAM,IAAIG,KAAJ,CAAU,uBAAuBzB,OAAO,CAACM,MAA/B,GAAwC,uCAAlD,CAAN;MACD,CATiB,CAWlB;;;MACAS,aAAa,GAAGD,eAAe,CAC5BI,GADa,CACTzB,iBAAiB,CAAC0B,IAAlB,CAAuBtB,OAAvB,EAAgCyB,KAAhC,CADS,EAEbJ,GAFa,CAETQ,qBAFS,EAGbR,GAHa,CAGTS,cAHS,CAAhB;MAKAX,UAAU,GAAG,CAAC,CAAChB,OAAO,CAACO,IAAV,IAAkBf,cAAc,CAAC2B,IAAf,CAAoBtB,OAApB,EAA6ByB,KAA7B,GAAlB,IAA2DD,SAAxE,CAjBkB,CAmBlB;;MACA/B,WAAW,CAACO,OAAO,CAACuB,YAAT,EAAuBL,aAAa,CAACa,MAAd,CAAqBZ,UAArB,CAAvB,CAAX,CApBkB,CAsBlB;;MACA,IAAIC,SAAJ,EAAe;QACbA,SAAS,CAACJ,OAAV,GAAoBE,aAApB;QACAE,SAAS,CAACY,UAAV,GAAuBb,UAAvB;MACD;IACF;EACF,CApE+C,CAsEhD;;;EACA,IAAIc,OAAO,GAAGzC,QAAQ,CAACW,OAAO,CAACI,KAAT,CAAR,CAAwB2B,IAAxB,CAA6BlC,OAAO,CAACuB,YAArC,CAAd;;EACA,IAAIU,OAAJ,EAAa;IACXE,OAAO,CAACC,GAAR,CAAY9C,YAAY,CAACU,OAAD,EAAU;MAChCqC,KAAK,EAAKtB,YADsB;MAEhCuB,QAAQ,EAAErB,eAFsB;MAGhCsB,MAAM,EAAIrB,aAHsB;MAIhCR,IAAI,EAAMS;IAJsB,CAAV,CAAxB;EAMD,CA/E+C,CAiFhD;;;EACA,OAAON,QAAQ,GAAGO,SAAH,GAAeF,aAAa,GAAGA,aAAa,CAAC,CAAD,CAAhB,GAAsBM,SAAjE;;EAEA,SAASE,cAAT,CAAwBc,KAAxB,EAA+B;IAC7B,OAAQA,KAAK,CAACC,IAAN,KAAetC,OAAO,CAACM,MAA/B;EACD;;EAED,SAASoB,qBAAT,CAA+BW,KAA/B,EAAsCE,CAAtC,EAAyC;IACvC,OAAOF,KAAK,IAAIzB,YAAY,CAAC2B,CAAD,CAA5B;EACD;;EAED,SAASZ,cAAT,CAAwBU,KAAxB,EAA+B;IAC7B,OAAQA,KAAK,YAAYZ,KAAlB,GAA2BY,KAA3B,GAAmCA,KAAK,CAACG,OAAN,CAAc,SAAd,EAAyBxC,OAAO,CAACG,GAAjC,CAA1C;EACD;AACF;;AAEDsC,MAAM,CAACC,OAAP,GAAiB9C,OAAjB"},"metadata":{},"sourceType":"script"}