{"ast":null,"code":"/**\n * Extractor function for a Literal type value node.\n *\n * @param - value - AST Value object with type `Literal`\n * @returns { String|Boolean } - The extracted value converted to correct type.\n */\nexport default function extractValueFromLiteral(value) {\n  const {\n    value: extractedValue\n  } = value;\n  const normalizedStringValue = typeof extractedValue === 'string' && extractedValue.toLowerCase();\n\n  if (normalizedStringValue === 'true') {\n    return true;\n  }\n\n  if (normalizedStringValue === 'false') {\n    return false;\n  }\n\n  return extractedValue;\n}","map":{"version":3,"names":["extractValueFromLiteral","value","extractedValue","normalizedStringValue","toLowerCase"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/src/values/Literal.js"],"sourcesContent":["/**\n * Extractor function for a Literal type value node.\n *\n * @param - value - AST Value object with type `Literal`\n * @returns { String|Boolean } - The extracted value converted to correct type.\n */\nexport default function extractValueFromLiteral(value) {\n  const { value: extractedValue } = value;\n\n  const normalizedStringValue = typeof extractedValue === 'string' && extractedValue.toLowerCase();\n  if (normalizedStringValue === 'true') {\n    return true;\n  }\n\n  if (normalizedStringValue === 'false') {\n    return false;\n  }\n\n  return extractedValue;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,uBAAT,CAAiCC,KAAjC,EAAwC;EACrD,MAAM;IAAEA,KAAK,EAAEC;EAAT,IAA4BD,KAAlC;EAEA,MAAME,qBAAqB,GAAG,OAAOD,cAAP,KAA0B,QAA1B,IAAsCA,cAAc,CAACE,WAAf,EAApE;;EACA,IAAID,qBAAqB,KAAK,MAA9B,EAAsC;IACpC,OAAO,IAAP;EACD;;EAED,IAAIA,qBAAqB,KAAK,OAA9B,EAAuC;IACrC,OAAO,KAAP;EACD;;EAED,OAAOD,cAAP;AACD"},"metadata":{},"sourceType":"module"}