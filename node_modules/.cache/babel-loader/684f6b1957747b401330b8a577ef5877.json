{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _genMapping = require(\"@jridgewell/gen-mapping\");\n\nclass SourceMap {\n  constructor(opts, code) {\n    var _opts$sourceFileName;\n\n    this._map = void 0;\n    this._rawMappings = void 0;\n    this._sourceFileName = void 0;\n    this._lastGenLine = 0;\n    this._lastSourceLine = 0;\n    this._lastSourceColumn = 0;\n    const map = this._map = new _genMapping.GenMapping({\n      sourceRoot: opts.sourceRoot\n    });\n    this._sourceFileName = (_opts$sourceFileName = opts.sourceFileName) == null ? void 0 : _opts$sourceFileName.replace(/\\\\/g, \"/\");\n    this._rawMappings = undefined;\n\n    if (typeof code === \"string\") {\n      (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);\n    } else if (typeof code === \"object\") {\n      Object.keys(code).forEach(sourceFileName => {\n        (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\\\/g, \"/\"), code[sourceFileName]);\n      });\n    }\n  }\n\n  get() {\n    return (0, _genMapping.toEncodedMap)(this._map);\n  }\n\n  getDecoded() {\n    return (0, _genMapping.toDecodedMap)(this._map);\n  }\n\n  getRawMappings() {\n    return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));\n  }\n\n  mark(generated, line, column, identifierName, filename) {\n    this._rawMappings = undefined;\n    (0, _genMapping.maybeAddMapping)(this._map, {\n      name: identifierName,\n      generated,\n      source: line == null ? undefined : (filename == null ? void 0 : filename.replace(/\\\\/g, \"/\")) || this._sourceFileName,\n      original: line == null ? undefined : {\n        line: line,\n        column: column\n      }\n    });\n  }\n\n}\n\nexports.default = SourceMap;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAmBe,MAAMA,SAAN,CAAgB;EAa7BC,WAAW,CACTC,IADS,EAETC,IAFS,EAGT;IAAA;;IAAA,KAfMC,IAeN;IAAA,KAdMC,YAcN;IAAA,KAbMC,eAaN;IAAA,KAVMC,YAUN,GAVqB,CAUrB;IAAA,KATMC,eASN,GATwB,CASxB;IAAA,KALMC,iBAKN,GAL0B,CAK1B;IACA,MAAMC,GAAG,GAAI,KAAKN,IAAL,GAAY,IAAIO,sBAAJ,CAAe;MAAEC,UAAU,EAAEV,IAAI,CAACU;IAAnB,CAAf,CAAzB;IACA,KAAKN,eAAL,2BAAuBJ,IAAI,CAACW,cAA5B,qBAAuBC,qBAAqBC,OAArB,CAA6B,KAA7B,EAAoC,GAApC,CAAvB;IACA,KAAKV,YAAL,GAAoBW,SAApB;;IAEA,IAAI,OAAOb,IAAP,KAAgB,QAApB,EAA8B;MAC5B,kCAAiBO,GAAjB,EAAsB,KAAKJ,eAA3B,EAA4CH,IAA5C;IADF,OAEO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;MACnCc,MAAM,CAACC,IAAPD,CAAYd,IAAZc,EAAkBE,OAAlBF,CAA0BJ,cAAc,IAAI;QAC1C,kCACEH,GADF,EAEEG,cAAc,CAACE,OAAfF,CAAuB,KAAvBA,EAA8B,GAA9BA,CAFF,EAGEV,IAAI,CAACU,cAAD,CAHN;MADF;IAOD;EACF;;EAKDO,GAAG,GAAqB;IACtB,OAAO,8BAAa,KAAKhB,IAAlB,CAAP;EACD;;EAEDiB,UAAU,GAAqB;IAC7B,OAAO,8BAAa,KAAKjB,IAAlB,CAAP;EACD;;EAEDkB,cAAc,GAAc;IAC1B,OAAQ,KAAKjB,YAAL,UAAKA,YAAL,GAAsB,6BAAY,KAAKD,IAAjB,CAAtB,CAAR;EACD;;EAODmB,IAAI,CACFC,SADE,EAEFC,IAFE,EAGFC,MAHE,EAIFC,cAJE,EAKFC,QALE,EAMF;IACA,KAAKvB,YAAL,GAAoBW,SAApB;IAEA,iCAAgB,KAAKZ,IAArB,EAA2B;MACzByB,IAAI,EAAEF,cADmB;MAEzBH,SAFyB;MAGzBM,MAAM,EACJL,IAAI,IAAI,IAARA,GACIT,SADJS,GAEI,SAAQ,QAARG,oBAAQ,CAAEb,OAAVa,CAAkB,KAAlBA,EAAyB,GAAzBA,MAAiC,KAAKtB,eANnB;MAOzByB,QAAQ,EACNN,IAAI,IAAI,IAARA,GACIT,SADJS,GAEI;QACEA,IAAI,EAAEA,IADR;QAEEC,MAAM,EAAEA;MAFV;IAVmB,CAA3B;EAeD;;AA9E4B","names":["SourceMap","constructor","opts","code","_map","_rawMappings","_sourceFileName","_lastGenLine","_lastSourceLine","_lastSourceColumn","map","GenMapping","sourceRoot","sourceFileName","_opts$sourceFileName","replace","undefined","Object","keys","forEach","get","getDecoded","getRawMappings","mark","generated","line","column","identifierName","filename","name","source","original"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\generator\\src\\source-map.ts"],"sourcesContent":["import {\n  GenMapping,\n  maybeAddMapping,\n  setSourceContent,\n  allMappings,\n  toEncodedMap,\n  toDecodedMap,\n} from \"@jridgewell/gen-mapping\";\n\nimport type {\n  EncodedSourceMap,\n  DecodedSourceMap,\n  Mapping,\n} from \"@jridgewell/gen-mapping\";\n\n/**\n * Build a sourcemap.\n */\n\nexport default class SourceMap {\n  private _map: GenMapping;\n  private _rawMappings: Mapping[] | undefined;\n  private _sourceFileName: string | undefined;\n\n  // Any real line is > 0, so init to 0 is fine.\n  private _lastGenLine = 0;\n  private _lastSourceLine = 0;\n\n  // Source columns can be 0, but we ony check in unison with sourceLine, which\n  // inits to an impossible value. So init to 0 is fine.\n  private _lastSourceColumn = 0;\n\n  constructor(\n    opts: { sourceFileName?: string; sourceRoot?: string },\n    code: string | { [sourceFileName: string]: string },\n  ) {\n    const map = (this._map = new GenMapping({ sourceRoot: opts.sourceRoot }));\n    this._sourceFileName = opts.sourceFileName?.replace(/\\\\/g, \"/\");\n    this._rawMappings = undefined;\n\n    if (typeof code === \"string\") {\n      setSourceContent(map, this._sourceFileName, code);\n    } else if (typeof code === \"object\") {\n      Object.keys(code).forEach(sourceFileName => {\n        setSourceContent(\n          map,\n          sourceFileName.replace(/\\\\/g, \"/\"),\n          code[sourceFileName],\n        );\n      });\n    }\n  }\n\n  /**\n   * Get the sourcemap.\n   */\n  get(): EncodedSourceMap {\n    return toEncodedMap(this._map);\n  }\n\n  getDecoded(): DecodedSourceMap {\n    return toDecodedMap(this._map);\n  }\n\n  getRawMappings(): Mapping[] {\n    return (this._rawMappings ||= allMappings(this._map));\n  }\n\n  /**\n   * Mark the current generated position with a source position. May also be passed null line/column\n   * values to insert a mapping to nothing.\n   */\n\n  mark(\n    generated: { line: number; column: number },\n    line: number,\n    column: number,\n    identifierName?: string | null,\n    filename?: string | null,\n  ) {\n    this._rawMappings = undefined;\n\n    maybeAddMapping(this._map, {\n      name: identifierName,\n      generated,\n      source:\n        line == null\n          ? undefined\n          : filename?.replace(/\\\\/g, \"/\") || this._sourceFileName,\n      original:\n        line == null\n          ? undefined\n          : {\n              line: line,\n              column: column,\n            },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}