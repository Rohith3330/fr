{"ast":null,"code":"'use strict';\n\nconst pragmaUtil = require('./pragma');\n\nconst variableUtil = require('./variable');\n/**\n * Check if variable is destructured from pragma import\n *\n * @param {string} variable The variable name to check\n * @param {Context} context eslint context\n * @returns {Boolean} True if createElement is destructured from the pragma\n */\n\n\nmodule.exports = function isDestructuredFromPragmaImport(variable, context) {\n  const pragma = pragmaUtil.getFromContext(context);\n  const variables = variableUtil.variablesInScope(context);\n  const variableInScope = variableUtil.getVariable(variables, variable);\n\n  if (variableInScope) {\n    const latestDef = variableUtil.getLatestVariableDefinition(variableInScope);\n\n    if (latestDef) {\n      // check if latest definition is a variable declaration: 'variable = value'\n      if (latestDef.node.type === 'VariableDeclarator' && latestDef.node.init) {\n        // check for: 'variable = pragma.variable'\n        if (latestDef.node.init.type === 'MemberExpression' && latestDef.node.init.object.type === 'Identifier' && latestDef.node.init.object.name === pragma) {\n          return true;\n        } // check for: '{variable} = pragma'\n\n\n        if (latestDef.node.init.type === 'Identifier' && latestDef.node.init.name === pragma) {\n          return true;\n        } // \"require('react')\"\n\n\n        let requireExpression = null; // get \"require('react')\" from: \"{variable} = require('react')\"\n\n        if (latestDef.node.init.type === 'CallExpression') {\n          requireExpression = latestDef.node.init;\n        } // get \"require('react')\" from: \"variable = require('react').variable\"\n\n\n        if (!requireExpression && latestDef.node.init.type === 'MemberExpression' && latestDef.node.init.object.type === 'CallExpression') {\n          requireExpression = latestDef.node.init.object;\n        } // check proper require.\n\n\n        if (requireExpression && requireExpression.callee && requireExpression.callee.name === 'require' && requireExpression.arguments[0] && requireExpression.arguments[0].value === pragma.toLocaleLowerCase()) {\n          return true;\n        }\n\n        return false;\n      } // latest definition is an import declaration: import {<variable>} from 'react'\n\n\n      if (latestDef.parent && latestDef.parent.type === 'ImportDeclaration' && latestDef.parent.source.value === pragma.toLocaleLowerCase()) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};","map":{"version":3,"names":["pragmaUtil","require","variableUtil","module","exports","isDestructuredFromPragmaImport","variable","context","pragma","getFromContext","variables","variablesInScope","variableInScope","getVariable","latestDef","getLatestVariableDefinition","node","type","init","object","name","requireExpression","callee","arguments","value","toLocaleLowerCase","parent","source"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/util/isDestructuredFromPragmaImport.js"],"sourcesContent":["'use strict';\n\nconst pragmaUtil = require('./pragma');\nconst variableUtil = require('./variable');\n\n/**\n * Check if variable is destructured from pragma import\n *\n * @param {string} variable The variable name to check\n * @param {Context} context eslint context\n * @returns {Boolean} True if createElement is destructured from the pragma\n */\nmodule.exports = function isDestructuredFromPragmaImport(variable, context) {\n  const pragma = pragmaUtil.getFromContext(context);\n  const variables = variableUtil.variablesInScope(context);\n  const variableInScope = variableUtil.getVariable(variables, variable);\n  if (variableInScope) {\n    const latestDef = variableUtil.getLatestVariableDefinition(variableInScope);\n    if (latestDef) {\n      // check if latest definition is a variable declaration: 'variable = value'\n      if (latestDef.node.type === 'VariableDeclarator' && latestDef.node.init) {\n        // check for: 'variable = pragma.variable'\n        if (\n          latestDef.node.init.type === 'MemberExpression'\n              && latestDef.node.init.object.type === 'Identifier'\n              && latestDef.node.init.object.name === pragma\n        ) {\n          return true;\n        }\n        // check for: '{variable} = pragma'\n        if (\n          latestDef.node.init.type === 'Identifier'\n              && latestDef.node.init.name === pragma\n        ) {\n          return true;\n        }\n\n        // \"require('react')\"\n        let requireExpression = null;\n\n        // get \"require('react')\" from: \"{variable} = require('react')\"\n        if (latestDef.node.init.type === 'CallExpression') {\n          requireExpression = latestDef.node.init;\n        }\n        // get \"require('react')\" from: \"variable = require('react').variable\"\n        if (\n          !requireExpression\n              && latestDef.node.init.type === 'MemberExpression'\n              && latestDef.node.init.object.type === 'CallExpression'\n        ) {\n          requireExpression = latestDef.node.init.object;\n        }\n\n        // check proper require.\n        if (\n          requireExpression\n              && requireExpression.callee\n              && requireExpression.callee.name === 'require'\n              && requireExpression.arguments[0]\n              && requireExpression.arguments[0].value === pragma.toLocaleLowerCase()\n        ) {\n          return true;\n        }\n\n        return false;\n      }\n\n      // latest definition is an import declaration: import {<variable>} from 'react'\n      if (\n        latestDef.parent\n            && latestDef.parent.type === 'ImportDeclaration'\n            && latestDef.parent.source.value === pragma.toLocaleLowerCase()\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,UAAD,CAA1B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,YAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,8BAAT,CAAwCC,QAAxC,EAAkDC,OAAlD,EAA2D;EAC1E,MAAMC,MAAM,GAAGR,UAAU,CAACS,cAAX,CAA0BF,OAA1B,CAAf;EACA,MAAMG,SAAS,GAAGR,YAAY,CAACS,gBAAb,CAA8BJ,OAA9B,CAAlB;EACA,MAAMK,eAAe,GAAGV,YAAY,CAACW,WAAb,CAAyBH,SAAzB,EAAoCJ,QAApC,CAAxB;;EACA,IAAIM,eAAJ,EAAqB;IACnB,MAAME,SAAS,GAAGZ,YAAY,CAACa,2BAAb,CAAyCH,eAAzC,CAAlB;;IACA,IAAIE,SAAJ,EAAe;MACb;MACA,IAAIA,SAAS,CAACE,IAAV,CAAeC,IAAf,KAAwB,oBAAxB,IAAgDH,SAAS,CAACE,IAAV,CAAeE,IAAnE,EAAyE;QACvE;QACA,IACEJ,SAAS,CAACE,IAAV,CAAeE,IAAf,CAAoBD,IAApB,KAA6B,kBAA7B,IACOH,SAAS,CAACE,IAAV,CAAeE,IAAf,CAAoBC,MAApB,CAA2BF,IAA3B,KAAoC,YAD3C,IAEOH,SAAS,CAACE,IAAV,CAAeE,IAAf,CAAoBC,MAApB,CAA2BC,IAA3B,KAAoCZ,MAH7C,EAIE;UACA,OAAO,IAAP;QACD,CARsE,CASvE;;;QACA,IACEM,SAAS,CAACE,IAAV,CAAeE,IAAf,CAAoBD,IAApB,KAA6B,YAA7B,IACOH,SAAS,CAACE,IAAV,CAAeE,IAAf,CAAoBE,IAApB,KAA6BZ,MAFtC,EAGE;UACA,OAAO,IAAP;QACD,CAfsE,CAiBvE;;;QACA,IAAIa,iBAAiB,GAAG,IAAxB,CAlBuE,CAoBvE;;QACA,IAAIP,SAAS,CAACE,IAAV,CAAeE,IAAf,CAAoBD,IAApB,KAA6B,gBAAjC,EAAmD;UACjDI,iBAAiB,GAAGP,SAAS,CAACE,IAAV,CAAeE,IAAnC;QACD,CAvBsE,CAwBvE;;;QACA,IACE,CAACG,iBAAD,IACOP,SAAS,CAACE,IAAV,CAAeE,IAAf,CAAoBD,IAApB,KAA6B,kBADpC,IAEOH,SAAS,CAACE,IAAV,CAAeE,IAAf,CAAoBC,MAApB,CAA2BF,IAA3B,KAAoC,gBAH7C,EAIE;UACAI,iBAAiB,GAAGP,SAAS,CAACE,IAAV,CAAeE,IAAf,CAAoBC,MAAxC;QACD,CA/BsE,CAiCvE;;;QACA,IACEE,iBAAiB,IACVA,iBAAiB,CAACC,MADzB,IAEOD,iBAAiB,CAACC,MAAlB,CAAyBF,IAAzB,KAAkC,SAFzC,IAGOC,iBAAiB,CAACE,SAAlB,CAA4B,CAA5B,CAHP,IAIOF,iBAAiB,CAACE,SAAlB,CAA4B,CAA5B,EAA+BC,KAA/B,KAAyChB,MAAM,CAACiB,iBAAP,EALlD,EAME;UACA,OAAO,IAAP;QACD;;QAED,OAAO,KAAP;MACD,CA/CY,CAiDb;;;MACA,IACEX,SAAS,CAACY,MAAV,IACOZ,SAAS,CAACY,MAAV,CAAiBT,IAAjB,KAA0B,mBADjC,IAEOH,SAAS,CAACY,MAAV,CAAiBC,MAAjB,CAAwBH,KAAxB,KAAkChB,MAAM,CAACiB,iBAAP,EAH3C,EAIE;QACA,OAAO,IAAP;MACD;IACF;EACF;;EACD,OAAO,KAAP;AACD,CAlED"},"metadata":{},"sourceType":"script"}