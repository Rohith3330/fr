{"ast":null,"code":"/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\nlet path = require('path');\n\nlet fs = require('fs');\n\nlet existsSync = fs.existsSync;\n\nlet utils = require('./utils'); // Files like jakelib/foobar.jake.js\n\n\nconst JAKELIB_FILE_PAT = /\\.jake$|\\.js$/;\nconst SUPPORTED_EXTENSIONS = {\n  'js': null,\n  'coffee': function () {\n    try {\n      let cs = require('coffeescript');\n\n      if (typeof cs.register == 'function') {\n        cs.register();\n      }\n    } catch (e) {\n      throw new Error('You have a CoffeeScript Jakefile, but have not installed CoffeeScript');\n    }\n  },\n  'ls': function () {\n    try {\n      require('livescript');\n    } catch (e) {\n      throw new Error('You have a LiveScript Jakefile, but have not installed LiveScript');\n    }\n  },\n  'ts': function () {\n    try {\n      require('ts-node/register/transpile-only');\n    } catch (e) {\n      throw new Error('You have a TypeScript Jakefile, but have not installed TypeScript and ts-node');\n    }\n  }\n};\nconst IMPLICIT_JAKEFILE_NAMES = ['Jakefile', 'Gulpfile'];\n\nlet Loader = function () {\n  // Load a Jakefile, running the code inside -- this may result in\n  // tasks getting defined using the original Jake API, e.g.,\n  // `task('foo' ['bar', 'baz']);`, or can also auto-create tasks\n  // from any functions exported from the file\n  function loadFile(filePath) {\n    let exported = require(filePath);\n\n    for (let [key, value] of Object.entries(exported)) {\n      let t;\n\n      if (typeof value == 'function') {\n        t = jake.task(key, value);\n        t.description = '(Exported function)';\n      }\n    }\n  }\n\n  function fileExists(name) {\n    let nameWithExt = null; // Support no file extension as well\n\n    let exts = Object.keys(SUPPORTED_EXTENSIONS).concat(['']);\n    exts.some(ext => {\n      let fname = ext ? `${name}.${ext}` : name;\n\n      if (existsSync(fname)) {\n        nameWithExt = fname;\n        return true;\n      }\n    });\n    return nameWithExt;\n  } // Recursive\n\n\n  function findImplicitJakefile() {\n    let cwd = process.cwd();\n    let names = IMPLICIT_JAKEFILE_NAMES;\n    let found = null;\n    names.some(name => {\n      let n; // Prefer all-lowercase\n\n      n = name.toLowerCase();\n\n      if (found = fileExists(n)) {\n        return found;\n      } // Check mixed-case as well\n\n\n      n = name;\n\n      if (found = fileExists(n)) {\n        return found;\n      }\n    });\n\n    if (found) {\n      return found;\n    } else {\n      process.chdir(\"..\"); // If we've walked all the way up the directory tree,\n      // bail out with no result\n\n      if (cwd === process.cwd()) {\n        return null;\n      }\n\n      return findImplicitJakefile();\n    }\n  }\n\n  this.loadFile = function (fileSpecified) {\n    let jakefile;\n    let origCwd = process.cwd();\n\n    if (fileSpecified) {\n      if (existsSync(fileSpecified)) {\n        jakefile = fileSpecified;\n      }\n    } else {\n      jakefile = findImplicitJakefile();\n    }\n\n    if (jakefile) {\n      let ext = jakefile.split('.')[1];\n      let loaderFunc = SUPPORTED_EXTENSIONS[ext];\n      loaderFunc && loaderFunc();\n      loadFile(utils.file.absolutize(jakefile));\n      return true;\n    } else {\n      if (!fileSpecified) {\n        // Restore the working directory on failure\n        process.chdir(origCwd);\n      }\n\n      return false;\n    }\n  };\n\n  this.loadDirectory = function (d) {\n    let dirname = d || 'jakelib';\n    let dirlist;\n    dirname = utils.file.absolutize(dirname);\n\n    if (existsSync(dirname)) {\n      dirlist = fs.readdirSync(dirname);\n      dirlist.forEach(function (filePath) {\n        if (JAKELIB_FILE_PAT.test(filePath)) {\n          loadFile(path.join(dirname, filePath));\n        }\n      });\n      return true;\n    }\n\n    return false;\n  };\n};\n\nmodule.exports = function () {\n  return new Loader();\n};","map":{"version":3,"names":["path","require","fs","existsSync","utils","JAKELIB_FILE_PAT","SUPPORTED_EXTENSIONS","cs","register","e","Error","IMPLICIT_JAKEFILE_NAMES","Loader","loadFile","filePath","exported","key","value","Object","entries","t","jake","task","description","fileExists","name","nameWithExt","exts","keys","concat","some","ext","fname","findImplicitJakefile","cwd","process","names","found","n","toLowerCase","chdir","fileSpecified","jakefile","origCwd","split","loaderFunc","file","absolutize","loadDirectory","d","dirname","dirlist","readdirSync","forEach","test","join","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jake/lib/loader.js"],"sourcesContent":["/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\nlet path = require('path');\nlet fs = require('fs');\nlet existsSync = fs.existsSync;\nlet utils = require('./utils');\n\n// Files like jakelib/foobar.jake.js\nconst JAKELIB_FILE_PAT = /\\.jake$|\\.js$/;\nconst SUPPORTED_EXTENSIONS = {\n  'js': null,\n  'coffee': function () {\n    try {\n      let cs = require('coffeescript');\n      if (typeof cs.register == 'function') {\n        cs.register();\n      }\n    }\n    catch(e) {\n      throw new Error('You have a CoffeeScript Jakefile, but have not installed CoffeeScript');\n    }\n  },\n  'ls': function () {\n    try {\n      require('livescript');\n    }\n    catch (e) {\n      throw new Error('You have a LiveScript Jakefile, but have not installed LiveScript');\n    }\n  },\n  'ts': function () {\n    try {\n      require('ts-node/register/transpile-only');\n    }\n    catch (e) {\n      throw new Error('You have a TypeScript Jakefile, but have not installed TypeScript and ts-node');\n    }\n  }\n};\nconst IMPLICIT_JAKEFILE_NAMES = [\n  'Jakefile',\n  'Gulpfile'\n];\n\nlet Loader = function () {\n  // Load a Jakefile, running the code inside -- this may result in\n  // tasks getting defined using the original Jake API, e.g.,\n  // `task('foo' ['bar', 'baz']);`, or can also auto-create tasks\n  // from any functions exported from the file\n  function loadFile(filePath) {\n    let exported = require(filePath);\n    for (let [key, value] of Object.entries(exported)) {\n      let t;\n      if (typeof value == 'function') {\n        t = jake.task(key, value);\n        t.description = '(Exported function)';\n      }\n    }\n  }\n\n  function fileExists(name) {\n    let nameWithExt = null;\n    // Support no file extension as well\n    let exts = Object.keys(SUPPORTED_EXTENSIONS).concat(['']);\n    exts.some((ext) => {\n      let fname = ext ? `${name}.${ext}` : name;\n      if (existsSync(fname)) {\n        nameWithExt = fname;\n        return true;\n      }\n    });\n    return nameWithExt;\n  }\n\n  // Recursive\n  function findImplicitJakefile() {\n    let cwd = process.cwd();\n    let names = IMPLICIT_JAKEFILE_NAMES;\n    let found = null;\n    names.some((name) => {\n      let n;\n      // Prefer all-lowercase\n      n = name.toLowerCase();\n      if ((found = fileExists(n))) {\n        return found;\n      }\n      // Check mixed-case as well\n      n = name;\n      if ((found = fileExists(n))) {\n        return found;\n      }\n    });\n    if (found) {\n      return found;\n    }\n    else {\n      process.chdir(\"..\");\n      // If we've walked all the way up the directory tree,\n      // bail out with no result\n      if (cwd === process.cwd()) {\n        return null;\n      }\n      return findImplicitJakefile();\n    }\n  }\n\n  this.loadFile = function (fileSpecified) {\n    let jakefile;\n    let origCwd = process.cwd();\n\n    if (fileSpecified) {\n      if (existsSync(fileSpecified)) {\n        jakefile = fileSpecified;\n      }\n    }\n    else {\n      jakefile = findImplicitJakefile();\n    }\n\n    if (jakefile) {\n      let ext = jakefile.split('.')[1];\n      let loaderFunc = SUPPORTED_EXTENSIONS[ext];\n      loaderFunc && loaderFunc();\n\n      loadFile(utils.file.absolutize(jakefile));\n      return true;\n    }\n    else {\n      if (!fileSpecified) {\n        // Restore the working directory on failure\n        process.chdir(origCwd);\n      }\n      return false;\n    }\n  };\n\n  this.loadDirectory = function (d) {\n    let dirname = d || 'jakelib';\n    let dirlist;\n    dirname = utils.file.absolutize(dirname);\n    if (existsSync(dirname)) {\n      dirlist = fs.readdirSync(dirname);\n      dirlist.forEach(function (filePath) {\n        if (JAKELIB_FILE_PAT.test(filePath)) {\n          loadFile(path.join(dirname, filePath));\n        }\n      });\n      return true;\n    }\n    return false;\n  };\n\n};\n\nmodule.exports = function () {\n  return new Loader();\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}