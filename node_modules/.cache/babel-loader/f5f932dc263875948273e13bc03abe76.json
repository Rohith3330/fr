{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst semver = __importStar(require(\"semver\"));\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst util = __importStar(require(\"../util\"));\n\nconst is3dot5 = semver.satisfies(ts.version, `>= 3.5.0 || >= 3.5.1-rc || >= 3.5.0-beta`, {\n  includePrerelease: true\n});\nconst is3dot9 = is3dot5 && semver.satisfies(ts.version, `>= 3.9.0 || >= 3.9.1-rc || >= 3.9.0-beta`, {\n  includePrerelease: true\n});\nexports.default = util.createRule({\n  name: 'no-unnecessary-type-constraint',\n  meta: {\n    docs: {\n      description: 'Disallow unnecessary constraints on generic types',\n      recommended: 'error'\n    },\n    hasSuggestions: true,\n    messages: {\n      unnecessaryConstraint: 'Constraining the generic type `{{name}}` to `{{constraint}}` does nothing and is unnecessary.',\n      removeUnnecessaryConstraint: 'Remove the unnecessary `{{constraint}}` constraint.'\n    },\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    if (!is3dot5) {\n      return {};\n    } // In theory, we could use the type checker for more advanced constraint types...\n    // ...but in practice, these types are rare, and likely not worth requiring type info.\n    // https://github.com/typescript-eslint/typescript-eslint/pull/2516#discussion_r495731858\n\n\n    const unnecessaryConstraints = is3dot9 ? new Map([[utils_1.AST_NODE_TYPES.TSAnyKeyword, 'any'], [utils_1.AST_NODE_TYPES.TSUnknownKeyword, 'unknown']]) : new Map([[utils_1.AST_NODE_TYPES.TSUnknownKeyword, 'unknown']]);\n    const inJsx = context.getFilename().toLowerCase().endsWith('tsx');\n    const source = context.getSourceCode();\n\n    const checkNode = (node, inArrowFunction) => {\n      const constraint = unnecessaryConstraints.get(node.constraint.type);\n\n      function shouldAddTrailingComma() {\n        if (!inArrowFunction || !inJsx) {\n          return false;\n        } // Only <T>() => {} would need trailing comma\n\n\n        return node.parent.params.length === 1 && source.getTokensAfter(node)[0].value !== ',' && !node.default;\n      }\n\n      if (constraint) {\n        context.report({\n          data: {\n            constraint,\n            name: node.name.name\n          },\n          suggest: [{\n            messageId: 'removeUnnecessaryConstraint',\n            data: {\n              constraint\n            },\n\n            fix(fixer) {\n              return fixer.replaceTextRange([node.name.range[1], node.constraint.range[1]], shouldAddTrailingComma() ? ',' : '');\n            }\n\n          }],\n          messageId: 'unnecessaryConstraint',\n          node\n        });\n      }\n    };\n\n    return {\n      ':not(ArrowFunctionExpression) > TSTypeParameterDeclaration > TSTypeParameter[constraint]'(node) {\n        checkNode(node, false);\n      },\n\n      'ArrowFunctionExpression > TSTypeParameterDeclaration > TSTypeParameter[constraint]'(node) {\n        checkNode(node, true);\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["is3dot5","semver","satisfies","ts","version","includePrerelease","is3dot9","exports","util","createRule","name","meta","docs","description","recommended","hasSuggestions","messages","unnecessaryConstraint","removeUnnecessaryConstraint","schema","type","defaultOptions","create","context","unnecessaryConstraints","Map","utils_1","TSAnyKeyword","TSUnknownKeyword","inJsx","getFilename","toLowerCase","endsWith","source","getSourceCode","checkNode","node","inArrowFunction","constraint","get","shouldAddTrailingComma","parent","params","length","getTokensAfter","value","default","report","data","suggest","messageId","fix","fixer","replaceTextRange","range"],"sources":["../../src/rules/no-unnecessary-type-constraint.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}