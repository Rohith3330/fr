{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n/** @type {any} */\n\n\nconst postcss = require('postcss');\n\nconst yaml = require('yaml');\n\nconst {\n  lilconfigSync\n} = require('lilconfig');\n\nconst cssnano = 'cssnano';\n/** @typedef {{preset?: any, plugins?: any[], configFile?: string}} Options */\n\n/**\n * @param {string} moduleId\n * @returns {boolean}\n */\n\nfunction isResolvable(moduleId) {\n  try {\n    require.resolve(moduleId);\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * preset can be one of four possibilities:\n * preset = 'default'\n * preset = ['default', {}]\n * preset = function <- to be invoked\n * preset = {plugins: []} <- already invoked function\n *\n * @param {any} preset\n * @return {[import('postcss').PluginCreator<any>, boolean | Record<string, any> | undefined][]}}\n */\n\n\nfunction resolvePreset(preset) {\n  let fn, options;\n\n  if (Array.isArray(preset)) {\n    fn = preset[0];\n    options = preset[1];\n  } else {\n    fn = preset;\n    options = {};\n  } // For JS setups where we invoked the preset already\n\n\n  if (preset.plugins) {\n    return preset.plugins;\n  } // Provide an alias for the default preset, as it is built-in.\n\n\n  if (fn === 'default') {\n    return require('cssnano-preset-default')(options).plugins;\n  } // For non-JS setups; we'll need to invoke the preset ourselves.\n\n\n  if (typeof fn === 'function') {\n    return fn(options).plugins;\n  } // Try loading a preset from node_modules\n\n\n  if (isResolvable(fn)) {\n    return require(fn)(options).plugins;\n  }\n\n  const sugar = `cssnano-preset-${fn}`; // Try loading a preset from node_modules (sugar)\n\n  if (isResolvable(sugar)) {\n    return require(sugar)(options).plugins;\n  } // If all else fails, we probably have a typo in the config somewhere\n\n\n  throw new Error(`Cannot load preset \"${fn}\". Please check your configuration for errors and try again.`);\n}\n/**\n * cssnano will look for configuration firstly as options passed\n * directly to it, and failing this it will use lilconfig to\n * load an external file.\n\n * @param {Options} options\n */\n\n\nfunction resolveConfig(options) {\n  if (options.preset) {\n    return resolvePreset(options.preset);\n  }\n  /** @type {string | undefined} */\n\n\n  let searchPath = process.cwd();\n  let configPath = undefined;\n\n  if (options.configFile) {\n    searchPath = undefined;\n    configPath = path.resolve(process.cwd(), options.configFile);\n  }\n\n  const configExplorer = lilconfigSync(cssnano, {\n    searchPlaces: ['package.json', '.cssnanorc', '.cssnanorc.json', '.cssnanorc.yaml', '.cssnanorc.yml', '.cssnanorc.js', 'cssnano.config.js'],\n    loaders: {\n      '.yaml': (filepath, content) => yaml.parse(content),\n      '.yml': (filepath, content) => yaml.parse(content)\n    }\n  });\n  const config = configPath ? configExplorer.load(configPath) : configExplorer.search(searchPath);\n\n  if (config === null) {\n    return resolvePreset('default');\n  }\n\n  return resolvePreset(config.config.preset || config.config);\n}\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options=} options\n * @return {import('postcss').Processor}\n */\n\n\nfunction cssnanoPlugin() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (Array.isArray(options.plugins)) {\n    if (!options.preset || !options.preset.plugins) {\n      options.preset = {\n        plugins: []\n      };\n    }\n\n    options.plugins.forEach(plugin => {\n      if (Array.isArray(plugin)) {\n        const [pluginDef, opts = {}] = plugin;\n\n        if (typeof pluginDef === 'string' && isResolvable(pluginDef)) {\n          options.preset.plugins.push([require(pluginDef), opts]);\n        } else {\n          options.preset.plugins.push([pluginDef, opts]);\n        }\n      } else if (typeof plugin === 'string' && isResolvable(plugin)) {\n        options.preset.plugins.push([require(plugin), {}]);\n      } else {\n        options.preset.plugins.push([plugin, {}]);\n      }\n    });\n  }\n\n  const plugins = [];\n  const nanoPlugins = resolveConfig(options);\n\n  for (const nanoPlugin of nanoPlugins) {\n    if (Array.isArray(nanoPlugin)) {\n      const [processor, opts] = nanoPlugin;\n\n      if (typeof opts === 'undefined' || typeof opts === 'object' && !opts.exclude || typeof opts === 'boolean' && opts === true) {\n        plugins.push(processor(opts));\n      }\n    } else {\n      plugins.push(nanoPlugin);\n    }\n  }\n\n  return postcss(plugins);\n}\n\ncssnanoPlugin.postcss = true;\nmodule.exports = cssnanoPlugin;","map":{"version":3,"names":["path","require","postcss","yaml","lilconfigSync","cssnano","isResolvable","moduleId","resolve","e","resolvePreset","preset","fn","options","Array","isArray","plugins","sugar","Error","resolveConfig","searchPath","process","cwd","configPath","undefined","configFile","configExplorer","searchPlaces","loaders","filepath","content","parse","config","load","search","cssnanoPlugin","forEach","plugin","pluginDef","opts","push","nanoPlugins","nanoPlugin","processor","exclude","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/cssnano/src/index.js"],"sourcesContent":["'use strict';\nconst path = require('path');\n/** @type {any} */\nconst postcss = require('postcss');\nconst yaml = require('yaml');\nconst { lilconfigSync } = require('lilconfig');\n\nconst cssnano = 'cssnano';\n\n/** @typedef {{preset?: any, plugins?: any[], configFile?: string}} Options */\n/**\n * @param {string} moduleId\n * @returns {boolean}\n */\nfunction isResolvable(moduleId) {\n  try {\n    require.resolve(moduleId);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * preset can be one of four possibilities:\n * preset = 'default'\n * preset = ['default', {}]\n * preset = function <- to be invoked\n * preset = {plugins: []} <- already invoked function\n *\n * @param {any} preset\n * @return {[import('postcss').PluginCreator<any>, boolean | Record<string, any> | undefined][]}}\n */\nfunction resolvePreset(preset) {\n  let fn, options;\n\n  if (Array.isArray(preset)) {\n    fn = preset[0];\n    options = preset[1];\n  } else {\n    fn = preset;\n    options = {};\n  }\n\n  // For JS setups where we invoked the preset already\n  if (preset.plugins) {\n    return preset.plugins;\n  }\n\n  // Provide an alias for the default preset, as it is built-in.\n  if (fn === 'default') {\n    return require('cssnano-preset-default')(options).plugins;\n  }\n\n  // For non-JS setups; we'll need to invoke the preset ourselves.\n  if (typeof fn === 'function') {\n    return fn(options).plugins;\n  }\n\n  // Try loading a preset from node_modules\n  if (isResolvable(fn)) {\n    return require(fn)(options).plugins;\n  }\n\n  const sugar = `cssnano-preset-${fn}`;\n\n  // Try loading a preset from node_modules (sugar)\n  if (isResolvable(sugar)) {\n    return require(sugar)(options).plugins;\n  }\n\n  // If all else fails, we probably have a typo in the config somewhere\n  throw new Error(\n    `Cannot load preset \"${fn}\". Please check your configuration for errors and try again.`\n  );\n}\n\n/**\n * cssnano will look for configuration firstly as options passed\n * directly to it, and failing this it will use lilconfig to\n * load an external file.\n\n * @param {Options} options\n */\nfunction resolveConfig(options) {\n  if (options.preset) {\n    return resolvePreset(options.preset);\n  }\n\n  /** @type {string | undefined} */\n  let searchPath = process.cwd();\n  let configPath = undefined;\n\n  if (options.configFile) {\n    searchPath = undefined;\n    configPath = path.resolve(process.cwd(), options.configFile);\n  }\n\n  const configExplorer = lilconfigSync(cssnano, {\n    searchPlaces: [\n      'package.json',\n      '.cssnanorc',\n      '.cssnanorc.json',\n      '.cssnanorc.yaml',\n      '.cssnanorc.yml',\n      '.cssnanorc.js',\n      'cssnano.config.js',\n    ],\n    loaders: {\n      '.yaml': (filepath, content) => yaml.parse(content),\n      '.yml': (filepath, content) => yaml.parse(content),\n    },\n  });\n  const config = configPath\n    ? configExplorer.load(configPath)\n    : configExplorer.search(searchPath);\n\n  if (config === null) {\n    return resolvePreset('default');\n  }\n\n  return resolvePreset(config.config.preset || config.config);\n}\n\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options=} options\n * @return {import('postcss').Processor}\n */\nfunction cssnanoPlugin(options = {}) {\n  if (Array.isArray(options.plugins)) {\n    if (!options.preset || !options.preset.plugins) {\n      options.preset = { plugins: [] };\n    }\n\n    options.plugins.forEach((plugin) => {\n      if (Array.isArray(plugin)) {\n        const [pluginDef, opts = {}] = plugin;\n        if (typeof pluginDef === 'string' && isResolvable(pluginDef)) {\n          options.preset.plugins.push([require(pluginDef), opts]);\n        } else {\n          options.preset.plugins.push([pluginDef, opts]);\n        }\n      } else if (typeof plugin === 'string' && isResolvable(plugin)) {\n        options.preset.plugins.push([require(plugin), {}]);\n      } else {\n        options.preset.plugins.push([plugin, {}]);\n      }\n    });\n  }\n  const plugins = [];\n  const nanoPlugins = resolveConfig(options);\n  for (const nanoPlugin of nanoPlugins) {\n    if (Array.isArray(nanoPlugin)) {\n      const [processor, opts] = nanoPlugin;\n      if (\n        typeof opts === 'undefined' ||\n        (typeof opts === 'object' && !opts.exclude) ||\n        (typeof opts === 'boolean' && opts === true)\n      ) {\n        plugins.push(processor(opts));\n      }\n    } else {\n      plugins.push(nanoPlugin);\n    }\n  }\n  return postcss(plugins);\n}\n\ncssnanoPlugin.postcss = true;\nmodule.exports = cssnanoPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}