{"ast":null,"code":"/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nlet currentTypes = null;\nexport function wrapWithTypes(types, fn) {\n  return function () {\n    const oldTypes = currentTypes;\n    currentTypes = types;\n\n    try {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return fn.apply(this, args);\n    } finally {\n      currentTypes = oldTypes;\n    }\n  };\n}\nexport function getTypes() {\n  return currentTypes;\n}\nexport function runtimeProperty(name) {\n  const t = getTypes();\n  return t.memberExpression(t.identifier(\"regeneratorRuntime\"), t.identifier(name), false);\n}\nexport function isReference(path) {\n  return path.isReferenced() || path.parentPath.isAssignmentExpression({\n    left: path.node\n  });\n}\nexport function replaceWithOrRemove(path, replacement) {\n  if (replacement) {\n    path.replaceWith(replacement);\n  } else {\n    path.remove();\n  }\n}","map":{"version":3,"names":["currentTypes","wrapWithTypes","types","fn","oldTypes","args","apply","getTypes","runtimeProperty","name","t","memberExpression","identifier","isReference","path","isReferenced","parentPath","isAssignmentExpression","left","node","replaceWithOrRemove","replacement","replaceWith","remove"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/regenerator-transform/src/util.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nlet currentTypes = null;\n\nexport function wrapWithTypes(types, fn) {\n  return function (...args) {\n    const oldTypes = currentTypes;\n    currentTypes = types;\n    try {\n      return fn.apply(this, args);\n    } finally {\n      currentTypes = oldTypes;\n    }\n  };\n}\n\nexport function getTypes() {\n  return currentTypes;\n}\n\nexport function runtimeProperty(name) {\n  const t = getTypes();\n  return t.memberExpression(\n    t.identifier(\"regeneratorRuntime\"),\n    t.identifier(name),\n    false\n  );\n}\n\nexport function isReference(path) {\n  return path.isReferenced() || path.parentPath.isAssignmentExpression({ left: path.node });\n}\n\nexport function replaceWithOrRemove(path, replacement) {\n  if (replacement) {\n    path.replaceWith(replacement)\n  } else {\n    path.remove();\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,YAAY,GAAG,IAAnB;AAEA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,EAA9B,EAAkC;EACvC,OAAO,YAAmB;IACxB,MAAMC,QAAQ,GAAGJ,YAAjB;IACAA,YAAY,GAAGE,KAAf;;IACA,IAAI;MAAA,kCAHcG,IAGd;QAHcA,IAGd;MAAA;;MACF,OAAOF,EAAE,CAACG,KAAH,CAAS,IAAT,EAAeD,IAAf,CAAP;IACD,CAFD,SAEU;MACRL,YAAY,GAAGI,QAAf;IACD;EACF,CARD;AASD;AAED,OAAO,SAASG,QAAT,GAAoB;EACzB,OAAOP,YAAP;AACD;AAED,OAAO,SAASQ,eAAT,CAAyBC,IAAzB,EAA+B;EACpC,MAAMC,CAAC,GAAGH,QAAQ,EAAlB;EACA,OAAOG,CAAC,CAACC,gBAAF,CACLD,CAAC,CAACE,UAAF,CAAa,oBAAb,CADK,EAELF,CAAC,CAACE,UAAF,CAAaH,IAAb,CAFK,EAGL,KAHK,CAAP;AAKD;AAED,OAAO,SAASI,WAAT,CAAqBC,IAArB,EAA2B;EAChC,OAAOA,IAAI,CAACC,YAAL,MAAuBD,IAAI,CAACE,UAAL,CAAgBC,sBAAhB,CAAuC;IAAEC,IAAI,EAAEJ,IAAI,CAACK;EAAb,CAAvC,CAA9B;AACD;AAED,OAAO,SAASC,mBAAT,CAA6BN,IAA7B,EAAmCO,WAAnC,EAAgD;EACrD,IAAIA,WAAJ,EAAiB;IACfP,IAAI,CAACQ,WAAL,CAAiBD,WAAjB;EACD,CAFD,MAEO;IACLP,IAAI,CAACS,MAAL;EACD;AACF"},"metadata":{},"sourceType":"module"}