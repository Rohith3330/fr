{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'prefer-ts-expect-error',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Enforce using `@ts-expect-error` over `@ts-ignore`',\n      recommended: 'strict'\n    },\n    fixable: 'code',\n    messages: {\n      preferExpectErrorComment: 'Use \"@ts-expect-error\" to ensure an error is actually being suppressed.'\n    },\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    const tsIgnoreRegExpSingleLine = /^\\s*\\/?\\s*@ts-ignore/;\n    const tsIgnoreRegExpMultiLine = /^\\s*(?:\\/|\\*)*\\s*@ts-ignore/;\n    const sourceCode = context.getSourceCode();\n\n    function isLineComment(comment) {\n      return comment.type === utils_1.AST_TOKEN_TYPES.Line;\n    }\n\n    function getLastCommentLine(comment) {\n      if (isLineComment(comment)) {\n        return comment.value;\n      } // For multiline comments - we look at only the last line.\n\n\n      const commentlines = comment.value.split('\\n');\n      return commentlines[commentlines.length - 1];\n    }\n\n    function isValidTsIgnorePresent(comment) {\n      const line = getLastCommentLine(comment);\n      return isLineComment(comment) ? tsIgnoreRegExpSingleLine.test(line) : tsIgnoreRegExpMultiLine.test(line);\n    }\n\n    return {\n      Program() {\n        const comments = sourceCode.getAllComments();\n        comments.forEach(comment => {\n          if (isValidTsIgnorePresent(comment)) {\n            const lineCommentRuleFixer = fixer => fixer.replaceText(comment, `//${comment.value.replace('@ts-ignore', '@ts-expect-error')}`);\n\n            const blockCommentRuleFixer = fixer => fixer.replaceText(comment, `/*${comment.value.replace('@ts-ignore', '@ts-expect-error')}*/`);\n\n            context.report({\n              node: comment,\n              messageId: 'preferExpectErrorComment',\n              fix: isLineComment(comment) ? lineCommentRuleFixer : blockCommentRuleFixer\n            });\n          }\n        });\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAMA;;AAIAA,kBAAeC,IAAI,CAACC,UAAL,CAAgC;EAC7CC,IAAI,EAAE,wBADuC;EAE7CC,IAAI,EAAE;IACJC,IAAI,EAAE,SADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EAAE,oDADT;MAEJC,WAAW,EAAE;IAFT,CAFF;IAMJC,OAAO,EAAE,MANL;IAOJC,QAAQ,EAAE;MACRC,wBAAwB,EACtB;IAFM,CAPN;IAWJC,MAAM,EAAE;EAXJ,CAFuC;EAe7CC,cAAc,EAAE,EAf6B;;EAgB7CC,MAAM,CAACC,OAAD,EAAQ;IACZ,MAAMC,wBAAwB,GAAG,sBAAjC;IACA,MAAMC,uBAAuB,GAAG,6BAAhC;IACA,MAAMC,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;;IAEA,SAASC,aAAT,CAAuBC,OAAvB,EAAgD;MAC9C,OAAOA,OAAO,CAAChB,IAAR,KAAiBiB,wBAAgBC,IAAxC;IACD;;IAED,SAASC,kBAAT,CAA4BH,OAA5B,EAAqD;MACnD,IAAID,aAAa,CAACC,OAAD,CAAjB,EAA4B;QAC1B,OAAOA,OAAO,CAACI,KAAf;MACD,CAHkD,CAKnD;;;MACA,MAAMC,YAAY,GAAGL,OAAO,CAACI,KAAR,CAAcE,KAAd,CAAoB,IAApB,CAArB;MACA,OAAOD,YAAY,CAACA,YAAY,CAACE,MAAb,GAAsB,CAAvB,CAAnB;IACD;;IAED,SAASC,sBAAT,CAAgCR,OAAhC,EAAyD;MACvD,MAAMS,IAAI,GAAGN,kBAAkB,CAACH,OAAD,CAA/B;MACA,OAAOD,aAAa,CAACC,OAAD,CAAb,GACHL,wBAAwB,CAACe,IAAzB,CAA8BD,IAA9B,CADG,GAEHb,uBAAuB,CAACc,IAAxB,CAA6BD,IAA7B,CAFJ;IAGD;;IAED,OAAO;MACLE,OAAO;QACL,MAAMC,QAAQ,GAAGf,UAAU,CAACgB,cAAX,EAAjB;QACAD,QAAQ,CAACE,OAAT,CAAiBd,OAAO,IAAG;UACzB,IAAIQ,sBAAsB,CAACR,OAAD,CAA1B,EAAqC;YACnC,MAAMe,oBAAoB,GAAIC,KAAD,IAC3BA,KAAK,CAACC,WAAN,CACEjB,OADF,EAEE,KAAKA,OAAO,CAACI,KAAR,CAAcc,OAAd,CAAsB,YAAtB,EAAoC,kBAApC,CAAuD,EAF9D,CADF;;YAMA,MAAMC,qBAAqB,GAAIH,KAAD,IAC5BA,KAAK,CAACC,WAAN,CACEjB,OADF,EAEE,KAAKA,OAAO,CAACI,KAAR,CAAcc,OAAd,CACH,YADG,EAEH,kBAFG,CAGJ,IALH,CADF;;YASAxB,OAAO,CAAC0B,MAAR,CAAe;cACbC,IAAI,EAAErB,OADO;cAEbsB,SAAS,EAAE,0BAFE;cAGbC,GAAG,EAAExB,aAAa,CAACC,OAAD,CAAb,GACDe,oBADC,GAEDI;YALS,CAAf;UAOD;QACF,CAzBD;MA0BD;;IA7BI,CAAP;EA+BD;;AAzE4C,CAAhC,CAAf","names":["exports","util","createRule","name","meta","type","docs","description","recommended","fixable","messages","preferExpectErrorComment","schema","defaultOptions","create","context","tsIgnoreRegExpSingleLine","tsIgnoreRegExpMultiLine","sourceCode","getSourceCode","isLineComment","comment","utils_1","Line","getLastCommentLine","value","commentlines","split","length","isValidTsIgnorePresent","line","test","Program","comments","getAllComments","forEach","lineCommentRuleFixer","fixer","replaceText","replace","blockCommentRuleFixer","report","node","messageId","fix"],"sources":["../../src/rules/prefer-ts-expect-error.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}