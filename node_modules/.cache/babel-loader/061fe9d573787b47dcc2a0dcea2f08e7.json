{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar max = GetIntrinsic('%Math.max%');\nvar min = GetIntrinsic('%Math.min%');\n\nvar Type = require('./Type'); // https://262.ecma-international.org/12.0/#clamping\n\n\nmodule.exports = function clamp(x, lower, upper) {\n  if (Type(x) !== 'Number' || Type(lower) !== 'Number' || Type(upper) !== 'Number' || !(lower <= upper)) {\n    throw new $TypeError('Assertion failed: all three arguments must be MVs, and `lower` must be `<= upper`');\n  }\n\n  return min(max(lower, x), upper);\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","max","min","Type","module","exports","clamp","x","lower","upper"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2021/clamp.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar max = GetIntrinsic('%Math.max%');\nvar min = GetIntrinsic('%Math.min%');\n\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/12.0/#clamping\n\nmodule.exports = function clamp(x, lower, upper) {\n\tif (Type(x) !== 'Number' || Type(lower) !== 'Number' || Type(upper) !== 'Number' || !(lower <= upper)) {\n\t\tthrow new $TypeError('Assertion failed: all three arguments must be MVs, and `lower` must be `<= upper`');\n\t}\n\treturn min(max(lower, x), upper);\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;AACA,IAAIG,GAAG,GAAGH,YAAY,CAAC,YAAD,CAAtB;AACA,IAAII,GAAG,GAAGJ,YAAY,CAAC,YAAD,CAAtB;;AAEA,IAAIK,IAAI,GAAGJ,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeC,CAAf,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgC;EAChD,IAAIN,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAZ,IAAwBJ,IAAI,CAACK,KAAD,CAAJ,KAAgB,QAAxC,IAAoDL,IAAI,CAACM,KAAD,CAAJ,KAAgB,QAApE,IAAgF,EAAED,KAAK,IAAIC,KAAX,CAApF,EAAuG;IACtG,MAAM,IAAIT,UAAJ,CAAe,mFAAf,CAAN;EACA;;EACD,OAAOE,GAAG,CAACD,GAAG,CAACO,KAAD,EAAQD,CAAR,CAAJ,EAAgBE,KAAhB,CAAV;AACA,CALD"},"metadata":{},"sourceType":"script"}