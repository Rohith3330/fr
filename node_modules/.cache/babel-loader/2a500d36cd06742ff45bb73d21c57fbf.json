{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst create = context => {\n  const always = (context.options[0] || 'always') === 'always';\n  return {\n    ObjectTypeAnnotation(node) {\n      const {\n        inexact,\n        exact\n      } = node;\n\n      if (!Object.prototype.hasOwnProperty.call(node, 'inexact')) {\n        return;\n      }\n\n      if (always && !inexact && !exact) {\n        context.report({\n          message: 'Type must be explicit inexact.',\n          node\n        });\n      }\n\n      if (!always && inexact) {\n        context.report({\n          message: 'Type must not be explicit inexact.',\n          node\n        });\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","schema","enum","type","create","context","always","options","ObjectTypeAnnotation","node","inexact","exact","prototype","hasOwnProperty","call","report","message","_default","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/requireInexactType.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst create = context => {\n  const always = (context.options[0] || 'always') === 'always';\n  return {\n    ObjectTypeAnnotation(node) {\n      const {\n        inexact,\n        exact\n      } = node;\n\n      if (!Object.prototype.hasOwnProperty.call(node, 'inexact')) {\n        return;\n      }\n\n      if (always && !inexact && !exact) {\n        context.report({\n          message: 'Type must be explicit inexact.',\n          node\n        });\n      }\n\n      if (!always && inexact) {\n        context.report({\n          message: 'Type must not be explicit inexact.',\n          node\n        });\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,MAAM,GAAG,CAAC;EACdC,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX,CADQ;EAEdC,IAAI,EAAE;AAFQ,CAAD,CAAf;;AAKA,MAAMC,MAAM,GAAGC,OAAO,IAAI;EACxB,MAAMC,MAAM,GAAG,CAACD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,QAAvB,MAAqC,QAApD;EACA,OAAO;IACLC,oBAAoB,CAACC,IAAD,EAAO;MACzB,MAAM;QACJC,OADI;QAEJC;MAFI,IAGFF,IAHJ;;MAKA,IAAI,CAACb,MAAM,CAACgB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,IAArC,EAA2C,SAA3C,CAAL,EAA4D;QAC1D;MACD;;MAED,IAAIH,MAAM,IAAI,CAACI,OAAX,IAAsB,CAACC,KAA3B,EAAkC;QAChCN,OAAO,CAACU,MAAR,CAAe;UACbC,OAAO,EAAE,gCADI;UAEbP;QAFa,CAAf;MAID;;MAED,IAAI,CAACH,MAAD,IAAWI,OAAf,EAAwB;QACtBL,OAAO,CAACU,MAAR,CAAe;UACbC,OAAO,EAAE,oCADI;UAEbP;QAFa,CAAf;MAID;IACF;;EAxBI,CAAP;AA2BD,CA7BD;;AA+BA,IAAIQ,QAAQ,GAAG;EACbb,MADa;EAEbH;AAFa,CAAf;AAIAH,OAAO,CAACE,OAAR,GAAkBiB,QAAlB;AACAC,MAAM,CAACpB,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}