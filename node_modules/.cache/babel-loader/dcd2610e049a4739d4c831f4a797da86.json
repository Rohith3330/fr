{"ast":null,"code":"/**\n * @fileoverview Rule to require object keys to be sorted\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"),\n      naturalCompare = require(\"natural-compare\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the property name of the given `Property` node.\n *\n * - If the property's key is an `Identifier` node, this returns the key's name\n *   whether it's a computed property or not.\n * - If the property has a static name, this returns the static name.\n * - Otherwise, this returns null.\n * @param {ASTNode} node The `Property` node to get.\n * @returns {string|null} The property name or null.\n * @private\n */\n\n\nfunction getPropertyName(node) {\n  const staticName = astUtils.getStaticPropertyName(node);\n\n  if (staticName !== null) {\n    return staticName;\n  }\n\n  return node.key.name || null;\n}\n/**\n * Functions which check that the given 2 names are in specific order.\n *\n * Postfix `I` is meant insensitive.\n * Postfix `N` is meant natural.\n * @private\n */\n\n\nconst isValidOrders = {\n  asc(a, b) {\n    return a <= b;\n  },\n\n  ascI(a, b) {\n    return a.toLowerCase() <= b.toLowerCase();\n  },\n\n  ascN(a, b) {\n    return naturalCompare(a, b) <= 0;\n  },\n\n  ascIN(a, b) {\n    return naturalCompare(a.toLowerCase(), b.toLowerCase()) <= 0;\n  },\n\n  desc(a, b) {\n    return isValidOrders.asc(b, a);\n  },\n\n  descI(a, b) {\n    return isValidOrders.ascI(b, a);\n  },\n\n  descN(a, b) {\n    return isValidOrders.ascN(b, a);\n  },\n\n  descIN(a, b) {\n    return isValidOrders.ascIN(b, a);\n  }\n\n}; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Require object keys to be sorted\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/sort-keys\"\n    },\n    schema: [{\n      enum: [\"asc\", \"desc\"]\n    }, {\n      type: \"object\",\n      properties: {\n        caseSensitive: {\n          type: \"boolean\",\n          default: true\n        },\n        natural: {\n          type: \"boolean\",\n          default: false\n        },\n        minKeys: {\n          type: \"integer\",\n          minimum: 2,\n          default: 2\n        },\n        allowLineSeparatedGroups: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      sortKeys: \"Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'.\"\n    }\n  },\n\n  create(context) {\n    // Parse options.\n    const order = context.options[0] || \"asc\";\n    const options = context.options[1];\n    const insensitive = options && options.caseSensitive === false;\n    const natural = options && options.natural;\n    const minKeys = options && options.minKeys;\n    const allowLineSeparatedGroups = options && options.allowLineSeparatedGroups || false;\n    const isValidOrder = isValidOrders[order + (insensitive ? \"I\" : \"\") + (natural ? \"N\" : \"\")]; // The stack to save the previous property's name for each object literals.\n\n    let stack = null;\n    const sourceCode = context.getSourceCode();\n    return {\n      ObjectExpression(node) {\n        stack = {\n          upper: stack,\n          prevNode: null,\n          prevBlankLine: false,\n          prevName: null,\n          numKeys: node.properties.length\n        };\n      },\n\n      \"ObjectExpression:exit\"() {\n        stack = stack.upper;\n      },\n\n      SpreadElement(node) {\n        if (node.parent.type === \"ObjectExpression\") {\n          stack.prevName = null;\n        }\n      },\n\n      Property(node) {\n        if (node.parent.type === \"ObjectPattern\") {\n          return;\n        }\n\n        const prevName = stack.prevName;\n        const numKeys = stack.numKeys;\n        const thisName = getPropertyName(node); // Get tokens between current node and previous node\n\n        const tokens = stack.prevNode && sourceCode.getTokensBetween(stack.prevNode, node, {\n          includeComments: true\n        });\n        let isBlankLineBetweenNodes = stack.prevBlankLine;\n\n        if (tokens) {\n          // check blank line between tokens\n          tokens.forEach((token, index) => {\n            const previousToken = tokens[index - 1];\n\n            if (previousToken && token.loc.start.line - previousToken.loc.end.line > 1) {\n              isBlankLineBetweenNodes = true;\n            }\n          }); // check blank line between the current node and the last token\n\n          if (!isBlankLineBetweenNodes && node.loc.start.line - tokens[tokens.length - 1].loc.end.line > 1) {\n            isBlankLineBetweenNodes = true;\n          } // check blank line between the first token and the previous node\n\n\n          if (!isBlankLineBetweenNodes && tokens[0].loc.start.line - stack.prevNode.loc.end.line > 1) {\n            isBlankLineBetweenNodes = true;\n          }\n        }\n\n        stack.prevNode = node;\n\n        if (thisName !== null) {\n          stack.prevName = thisName;\n        }\n\n        if (allowLineSeparatedGroups && isBlankLineBetweenNodes) {\n          stack.prevBlankLine = thisName === null;\n          return;\n        }\n\n        if (prevName === null || thisName === null || numKeys < minKeys) {\n          return;\n        }\n\n        if (!isValidOrder(prevName, thisName)) {\n          context.report({\n            node,\n            loc: node.key.loc,\n            messageId: \"sortKeys\",\n            data: {\n              thisName,\n              prevName,\n              order,\n              insensitive: insensitive ? \"insensitive \" : \"\",\n              natural: natural ? \"natural \" : \"\"\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","naturalCompare","getPropertyName","node","staticName","getStaticPropertyName","key","name","isValidOrders","asc","a","b","ascI","toLowerCase","ascN","ascIN","desc","descI","descN","descIN","module","exports","meta","type","docs","description","recommended","url","schema","enum","properties","caseSensitive","default","natural","minKeys","minimum","allowLineSeparatedGroups","additionalProperties","messages","sortKeys","create","context","order","options","insensitive","isValidOrder","stack","sourceCode","getSourceCode","ObjectExpression","upper","prevNode","prevBlankLine","prevName","numKeys","length","SpreadElement","parent","Property","thisName","tokens","getTokensBetween","includeComments","isBlankLineBetweenNodes","forEach","token","index","previousToken","loc","start","line","end","report","messageId","data"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/sort-keys.js"],"sourcesContent":["/**\n * @fileoverview Rule to require object keys to be sorted\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"),\n    naturalCompare = require(\"natural-compare\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the property name of the given `Property` node.\n *\n * - If the property's key is an `Identifier` node, this returns the key's name\n *   whether it's a computed property or not.\n * - If the property has a static name, this returns the static name.\n * - Otherwise, this returns null.\n * @param {ASTNode} node The `Property` node to get.\n * @returns {string|null} The property name or null.\n * @private\n */\nfunction getPropertyName(node) {\n    const staticName = astUtils.getStaticPropertyName(node);\n\n    if (staticName !== null) {\n        return staticName;\n    }\n\n    return node.key.name || null;\n}\n\n/**\n * Functions which check that the given 2 names are in specific order.\n *\n * Postfix `I` is meant insensitive.\n * Postfix `N` is meant natural.\n * @private\n */\nconst isValidOrders = {\n    asc(a, b) {\n        return a <= b;\n    },\n    ascI(a, b) {\n        return a.toLowerCase() <= b.toLowerCase();\n    },\n    ascN(a, b) {\n        return naturalCompare(a, b) <= 0;\n    },\n    ascIN(a, b) {\n        return naturalCompare(a.toLowerCase(), b.toLowerCase()) <= 0;\n    },\n    desc(a, b) {\n        return isValidOrders.asc(b, a);\n    },\n    descI(a, b) {\n        return isValidOrders.ascI(b, a);\n    },\n    descN(a, b) {\n        return isValidOrders.ascN(b, a);\n    },\n    descIN(a, b) {\n        return isValidOrders.ascIN(b, a);\n    }\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Require object keys to be sorted\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/sort-keys\"\n        },\n\n        schema: [\n            {\n                enum: [\"asc\", \"desc\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    caseSensitive: {\n                        type: \"boolean\",\n                        default: true\n                    },\n                    natural: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    minKeys: {\n                        type: \"integer\",\n                        minimum: 2,\n                        default: 2\n                    },\n                    allowLineSeparatedGroups: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            sortKeys: \"Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'.\"\n        }\n    },\n\n    create(context) {\n\n        // Parse options.\n        const order = context.options[0] || \"asc\";\n        const options = context.options[1];\n        const insensitive = options && options.caseSensitive === false;\n        const natural = options && options.natural;\n        const minKeys = options && options.minKeys;\n        const allowLineSeparatedGroups = options && options.allowLineSeparatedGroups || false;\n        const isValidOrder = isValidOrders[\n            order + (insensitive ? \"I\" : \"\") + (natural ? \"N\" : \"\")\n        ];\n\n        // The stack to save the previous property's name for each object literals.\n        let stack = null;\n        const sourceCode = context.getSourceCode();\n\n        return {\n            ObjectExpression(node) {\n                stack = {\n                    upper: stack,\n                    prevNode: null,\n                    prevBlankLine: false,\n                    prevName: null,\n                    numKeys: node.properties.length\n                };\n            },\n\n            \"ObjectExpression:exit\"() {\n                stack = stack.upper;\n            },\n\n            SpreadElement(node) {\n                if (node.parent.type === \"ObjectExpression\") {\n                    stack.prevName = null;\n                }\n            },\n\n            Property(node) {\n                if (node.parent.type === \"ObjectPattern\") {\n                    return;\n                }\n\n                const prevName = stack.prevName;\n                const numKeys = stack.numKeys;\n                const thisName = getPropertyName(node);\n\n                // Get tokens between current node and previous node\n                const tokens = stack.prevNode && sourceCode\n                    .getTokensBetween(stack.prevNode, node, { includeComments: true });\n\n                let isBlankLineBetweenNodes = stack.prevBlankLine;\n\n                if (tokens) {\n\n                    // check blank line between tokens\n                    tokens.forEach((token, index) => {\n                        const previousToken = tokens[index - 1];\n\n                        if (previousToken && (token.loc.start.line - previousToken.loc.end.line > 1)) {\n                            isBlankLineBetweenNodes = true;\n                        }\n                    });\n\n                    // check blank line between the current node and the last token\n                    if (!isBlankLineBetweenNodes && (node.loc.start.line - tokens[tokens.length - 1].loc.end.line > 1)) {\n                        isBlankLineBetweenNodes = true;\n                    }\n\n                    // check blank line between the first token and the previous node\n                    if (!isBlankLineBetweenNodes && (tokens[0].loc.start.line - stack.prevNode.loc.end.line > 1)) {\n                        isBlankLineBetweenNodes = true;\n                    }\n                }\n\n                stack.prevNode = node;\n\n                if (thisName !== null) {\n                    stack.prevName = thisName;\n                }\n\n                if (allowLineSeparatedGroups && isBlankLineBetweenNodes) {\n                    stack.prevBlankLine = thisName === null;\n                    return;\n                }\n\n                if (prevName === null || thisName === null || numKeys < minKeys) {\n                    return;\n                }\n\n                if (!isValidOrder(prevName, thisName)) {\n                    context.report({\n                        node,\n                        loc: node.key.loc,\n                        messageId: \"sortKeys\",\n                        data: {\n                            thisName,\n                            prevName,\n                            order,\n                            insensitive: insensitive ? \"insensitive \" : \"\",\n                            natural: natural ? \"natural \" : \"\"\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}