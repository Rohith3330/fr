{"ast":null,"code":"\"use strict\";\n\nvar jsc = require(\"jsverify\");\n\nvar refute = require(\"@sinonjs/referee-sinon\").refute;\n\nvar functionName = require(\"./function-name\");\n\ndescribe(\"function-name\", function () {\n  it(\"should return empty string if func is falsy\", function () {\n    jsc.assertForall(\"falsy\", function (fn) {\n      return functionName(fn) === \"\";\n    });\n  });\n  it(\"should use displayName by default\", function () {\n    jsc.assertForall(\"nestring\", function (displayName) {\n      var fn = {\n        displayName: displayName\n      };\n      return functionName(fn) === fn.displayName;\n    });\n  });\n  it(\"should use name if displayName is not available\", function () {\n    jsc.assertForall(\"nestring\", function (name) {\n      var fn = {\n        name: name\n      };\n      return functionName(fn) === fn.name;\n    });\n  });\n  it(\"should fallback to string parsing\", function () {\n    jsc.assertForall(\"nat\", function (naturalNumber) {\n      var name = \"fn\" + naturalNumber;\n      var fn = {\n        toString: function () {\n          return \"\\nfunction \" + name;\n        }\n      };\n      return functionName(fn) === name;\n    });\n  });\n  it(\"should not fail when a name cannot be found\", function () {\n    refute.exception(function () {\n      var fn = {\n        toString: function () {\n          return \"\\nfunction (\";\n        }\n      };\n      functionName(fn);\n    });\n  });\n  it(\"should not fail when toString is undefined\", function () {\n    refute.exception(function () {\n      functionName(Object.create(null));\n    });\n  });\n  it(\"should not fail when toString throws\", function () {\n    refute.exception(function () {\n      var fn;\n\n      try {\n        // eslint-disable-next-line no-eval\n        fn = eval(\"(function*() {})\")().constructor;\n      } catch (e) {\n        // env doesn't support generators\n        return;\n      }\n\n      functionName(fn);\n    });\n  });\n});","map":{"version":3,"names":["jsc","require","refute","functionName","describe","it","assertForall","fn","displayName","name","naturalNumber","toString","exception","Object","create","eval","constructor","e"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@sinonjs/commons/lib/function-name.test.js"],"sourcesContent":["\"use strict\";\n\nvar jsc = require(\"jsverify\");\nvar refute = require(\"@sinonjs/referee-sinon\").refute;\n\nvar functionName = require(\"./function-name\");\n\ndescribe(\"function-name\", function() {\n    it(\"should return empty string if func is falsy\", function() {\n        jsc.assertForall(\"falsy\", function(fn) {\n            return functionName(fn) === \"\";\n        });\n    });\n\n    it(\"should use displayName by default\", function() {\n        jsc.assertForall(\"nestring\", function(displayName) {\n            var fn = { displayName: displayName };\n\n            return functionName(fn) === fn.displayName;\n        });\n    });\n\n    it(\"should use name if displayName is not available\", function() {\n        jsc.assertForall(\"nestring\", function(name) {\n            var fn = { name: name };\n\n            return functionName(fn) === fn.name;\n        });\n    });\n\n    it(\"should fallback to string parsing\", function() {\n        jsc.assertForall(\"nat\", function(naturalNumber) {\n            var name = \"fn\" + naturalNumber;\n            var fn = {\n                toString: function() {\n                    return \"\\nfunction \" + name;\n                }\n            };\n\n            return functionName(fn) === name;\n        });\n    });\n\n    it(\"should not fail when a name cannot be found\", function() {\n        refute.exception(function() {\n            var fn = {\n                toString: function() {\n                    return \"\\nfunction (\";\n                }\n            };\n\n            functionName(fn);\n        });\n    });\n\n    it(\"should not fail when toString is undefined\", function() {\n        refute.exception(function() {\n            functionName(Object.create(null));\n        });\n    });\n\n    it(\"should not fail when toString throws\", function() {\n        refute.exception(function() {\n            var fn;\n            try {\n                // eslint-disable-next-line no-eval\n                fn = eval(\"(function*() {})\")().constructor;\n            } catch (e) {\n                // env doesn't support generators\n                return;\n            }\n\n            functionName(fn);\n        });\n    });\n});\n"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,UAAD,CAAjB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,wBAAD,CAAP,CAAkCC,MAA/C;;AAEA,IAAIC,YAAY,GAAGF,OAAO,CAAC,iBAAD,CAA1B;;AAEAG,QAAQ,CAAC,eAAD,EAAkB,YAAW;EACjCC,EAAE,CAAC,6CAAD,EAAgD,YAAW;IACzDL,GAAG,CAACM,YAAJ,CAAiB,OAAjB,EAA0B,UAASC,EAAT,EAAa;MACnC,OAAOJ,YAAY,CAACI,EAAD,CAAZ,KAAqB,EAA5B;IACH,CAFD;EAGH,CAJC,CAAF;EAMAF,EAAE,CAAC,mCAAD,EAAsC,YAAW;IAC/CL,GAAG,CAACM,YAAJ,CAAiB,UAAjB,EAA6B,UAASE,WAAT,EAAsB;MAC/C,IAAID,EAAE,GAAG;QAAEC,WAAW,EAAEA;MAAf,CAAT;MAEA,OAAOL,YAAY,CAACI,EAAD,CAAZ,KAAqBA,EAAE,CAACC,WAA/B;IACH,CAJD;EAKH,CANC,CAAF;EAQAH,EAAE,CAAC,iDAAD,EAAoD,YAAW;IAC7DL,GAAG,CAACM,YAAJ,CAAiB,UAAjB,EAA6B,UAASG,IAAT,EAAe;MACxC,IAAIF,EAAE,GAAG;QAAEE,IAAI,EAAEA;MAAR,CAAT;MAEA,OAAON,YAAY,CAACI,EAAD,CAAZ,KAAqBA,EAAE,CAACE,IAA/B;IACH,CAJD;EAKH,CANC,CAAF;EAQAJ,EAAE,CAAC,mCAAD,EAAsC,YAAW;IAC/CL,GAAG,CAACM,YAAJ,CAAiB,KAAjB,EAAwB,UAASI,aAAT,EAAwB;MAC5C,IAAID,IAAI,GAAG,OAAOC,aAAlB;MACA,IAAIH,EAAE,GAAG;QACLI,QAAQ,EAAE,YAAW;UACjB,OAAO,gBAAgBF,IAAvB;QACH;MAHI,CAAT;MAMA,OAAON,YAAY,CAACI,EAAD,CAAZ,KAAqBE,IAA5B;IACH,CATD;EAUH,CAXC,CAAF;EAaAJ,EAAE,CAAC,6CAAD,EAAgD,YAAW;IACzDH,MAAM,CAACU,SAAP,CAAiB,YAAW;MACxB,IAAIL,EAAE,GAAG;QACLI,QAAQ,EAAE,YAAW;UACjB,OAAO,cAAP;QACH;MAHI,CAAT;MAMAR,YAAY,CAACI,EAAD,CAAZ;IACH,CARD;EASH,CAVC,CAAF;EAYAF,EAAE,CAAC,4CAAD,EAA+C,YAAW;IACxDH,MAAM,CAACU,SAAP,CAAiB,YAAW;MACxBT,YAAY,CAACU,MAAM,CAACC,MAAP,CAAc,IAAd,CAAD,CAAZ;IACH,CAFD;EAGH,CAJC,CAAF;EAMAT,EAAE,CAAC,sCAAD,EAAyC,YAAW;IAClDH,MAAM,CAACU,SAAP,CAAiB,YAAW;MACxB,IAAIL,EAAJ;;MACA,IAAI;QACA;QACAA,EAAE,GAAGQ,IAAI,CAAC,kBAAD,CAAJ,GAA2BC,WAAhC;MACH,CAHD,CAGE,OAAOC,CAAP,EAAU;QACR;QACA;MACH;;MAEDd,YAAY,CAACI,EAAD,CAAZ;IACH,CAXD;EAYH,CAbC,CAAF;AAcH,CApEO,CAAR"},"metadata":{},"sourceType":"script"}