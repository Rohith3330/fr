{"ast":null,"code":"const fs = require('fs');\n\nconst test = require('tape');\n\nconst GraphemeSplitter = require('../index');\n\nfunction ucs2encode(array) {\n  return array.map(value => {\n    let output = '';\n\n    if (value > 0xFFFF) {\n      value -= 0x10000;\n      output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);\n      value = 0xDC00 | value & 0x3FF;\n    }\n\n    output += String.fromCharCode(value);\n    return output;\n  }).join('');\n}\n\nfunction testDataFromLine(line) {\n  const codePoints = line.split(/\\s*[×÷]\\s*/).map(c => parseInt(c, 16));\n  const input = ucs2encode(codePoints);\n  const expected = line.split(/\\s*÷\\s*/).map(sequence => {\n    const codePoints = sequence.split(/\\s*×\\s*/).map(c => parseInt(c, 16));\n    return ucs2encode(codePoints);\n  });\n  return {\n    input,\n    expected\n  };\n}\n\nconst testData = fs.readFileSync('tests/GraphemeBreakTest.txt', 'utf-8').split('\\n').filter(line => line != null && line.length > 0 && !line.startsWith('#')).map(line => line.split('#')[0]).map(testDataFromLine); // ---------------------------------------------------------------------------\n// Test cases\n// ---------------------------------------------------------------------------\n\ntest('splitGraphemes returns properly split list from string', t => {\n  const splitter = new GraphemeSplitter();\n  t.plan(testData.length);\n  testData.forEach(_ref => {\n    let {\n      input,\n      expected\n    } = _ref;\n    const result = splitter.splitGraphemes(input);\n    t.deepLooseEqual(result, expected);\n  });\n  t.end();\n});\ntest('iterateGraphemes returns properly split iterator from string', t => {\n  const splitter = new GraphemeSplitter();\n  t.plan(testData.length);\n  testData.forEach(_ref2 => {\n    let {\n      input,\n      expected\n    } = _ref2;\n    const result = splitter.iterateGraphemes(input);\n    t.deepLooseEqual([...result], expected);\n  });\n  t.end();\n});\ntest('countGraphemes returns the correct number of graphemes in string', t => {\n  const splitter = new GraphemeSplitter();\n  t.plan(testData.length);\n  testData.forEach(_ref3 => {\n    let {\n      input,\n      expected\n    } = _ref3;\n    const result = splitter.countGraphemes(input);\n    t.equal(result, expected.length);\n  });\n  t.end();\n});","map":{"version":3,"names":["fs","require","test","GraphemeSplitter","ucs2encode","array","map","value","output","String","fromCharCode","join","testDataFromLine","line","codePoints","split","c","parseInt","input","expected","sequence","testData","readFileSync","filter","length","startsWith","t","splitter","plan","forEach","result","splitGraphemes","deepLooseEqual","end","iterateGraphemes","countGraphemes","equal"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/grapheme-splitter/tests/grapheme_splitter_tests.js"],"sourcesContent":["const fs = require('fs')\r\nconst test = require('tape')\r\n\r\nconst GraphemeSplitter = require('../index')\r\n\r\nfunction ucs2encode(array) {\r\n  return array.map( value => {\r\n    let output = '';\r\n\r\n    if (value > 0xFFFF) {\r\n      value -= 0x10000;\r\n      output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);\r\n      value = 0xDC00 | value & 0x3FF;\r\n    }\r\n\r\n    output += String.fromCharCode(value);\r\n    return output;\r\n  }).join('');\r\n}\r\n\r\nfunction testDataFromLine(line) {\r\n  const codePoints = line.split(/\\s*[×÷]\\s*/).map(c => parseInt(c, 16));\r\n  const input = ucs2encode(codePoints);\r\n\r\n  const expected = line.split(/\\s*÷\\s*/) .map(sequence => {\r\n    const codePoints = sequence.split(/\\s*×\\s*/).map(c => parseInt(c, 16))\r\n    return ucs2encode(codePoints)\r\n  });\r\n\r\n  return { input, expected };\r\n}\r\n\r\nconst testData = fs.readFileSync('tests/GraphemeBreakTest.txt', 'utf-8')\r\n                   .split('\\n')\r\n                   .filter(line =>\r\n                     line != null && line.length > 0 && !line.startsWith('#'))\r\n                   .map(line => line.split('#')[0])\r\n                   .map(testDataFromLine);\r\n\r\n// ---------------------------------------------------------------------------\r\n// Test cases\r\n// ---------------------------------------------------------------------------\r\ntest('splitGraphemes returns properly split list from string', t => {\r\n  const splitter = new GraphemeSplitter();\r\n\r\n  t.plan(testData.length);\r\n\r\n  testData.forEach( ({ input, expected }) => {\r\n    const result = splitter.splitGraphemes(input);\r\n    \r\n    t.deepLooseEqual(result, expected);\r\n  });\r\n\r\n  t.end();\r\n});\r\n\r\ntest('iterateGraphemes returns properly split iterator from string', t => {\r\n  const splitter = new GraphemeSplitter();\r\n\r\n  t.plan(testData.length);\r\n\r\n  testData.forEach( ({ input, expected }) => {\r\n    const result = splitter.iterateGraphemes(input);\r\n\r\n    t.deepLooseEqual([...result], expected);\r\n  });\r\n\r\n  t.end();\r\n});\r\n\r\ntest('countGraphemes returns the correct number of graphemes in string', t => {\r\n  const splitter = new GraphemeSplitter();\r\n\r\n  t.plan(testData.length);\r\n\r\n  testData.forEach( ({ input, expected }) => {\r\n    const result = splitter.countGraphemes(input);\r\n\r\n    t.equal(result, expected.length);\r\n  });\r\n\r\n  t.end();\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}