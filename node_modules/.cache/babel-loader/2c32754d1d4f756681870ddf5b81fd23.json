{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tests = void 0;\n\nvar path_1 = require(\"path\");\n\nvar filesystem_1 = require(\"../../filesystem\");\n\nvar defaultExtensionsWhenRunningInTsNode = [\".js\", \".json\", \".node\", \".ts\", \".tsx\"];\nexports.tests = [{\n  name: \"should locate path that matches with star and exists\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"lib/*\": [\"location/*\"]\n  },\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n  requestedModule: \"lib/mylib\",\n  expectedPath: (0, path_1.dirname)((0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n  extensions: defaultExtensionsWhenRunningInTsNode\n}, {\n  name: \"should resolve to correct path when many are specified\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"lib/*\": [\"foo1/*\", \"foo2/*\", \"location/*\", \"foo3/*\"]\n  },\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n  requestedModule: \"lib/mylib\",\n  extensions: [\".ts\"],\n  expectedPath: (0, path_1.dirname)((0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\"))\n}, {\n  name: \"should locate path that matches with star and prioritize pattern with longest prefix\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"*\": [\"location/*\"],\n    \"lib/*\": [\"location/*\"]\n  },\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"lib\", \"mylib\", \"index.ts\"), (0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n  requestedModule: \"lib/mylib\",\n  expectedPath: (0, path_1.dirname)((0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n  extensions: defaultExtensionsWhenRunningInTsNode\n}, {\n  name: \"should locate path that matches with star and exists with extension\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"lib/*\": [\"location/*\"]\n  },\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib.myext\")],\n  requestedModule: \"lib/mylib\",\n  extensions: [\".js\", \".myext\"],\n  expectedPath: (0, filesystem_1.removeExtension)((0, path_1.join)(\"/root\", \"location\", \"mylib.myext\"))\n}, {\n  name: \"should resolve request with extension specified\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"lib/*\": [\"location/*\"]\n  },\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"test.jpg\")],\n  requestedModule: \"lib/test.jpg\",\n  expectedPath: (0, path_1.join)(\"/root\", \"location\", \"test.jpg\"),\n  extensions: defaultExtensionsWhenRunningInTsNode\n}, {\n  name: \"should locate path that matches without star and exists\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"lib/foo\": [\"location/foo\"]\n  },\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"foo.ts\")],\n  requestedModule: \"lib/foo\",\n  expectedPath: (0, filesystem_1.removeExtension)((0, path_1.join)(\"/root\", \"location\", \"foo.ts\")),\n  extensions: defaultExtensionsWhenRunningInTsNode\n}, {\n  name: \"should resolve to parent folder when filename is in subfolder\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"lib/*\": [\"location/*\"]\n  },\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n  requestedModule: \"lib/mylib\",\n  expectedPath: (0, path_1.dirname)((0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n  extensions: defaultExtensionsWhenRunningInTsNode\n}, {\n  name: \"should resolve from main field in package.json\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"lib/*\": [\"location/*\"]\n  },\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib\", \"kalle.ts\")],\n  packageJson: {\n    main: \"./kalle.ts\"\n  },\n  requestedModule: \"lib/mylib\",\n  expectedPath: (0, path_1.join)(\"/root\", \"location\", \"mylib\", \"kalle.ts\"),\n  extensions: defaultExtensionsWhenRunningInTsNode\n}, {\n  name: \"should resolve from main field in package.json (js)\",\n  absoluteBaseUrl: \"/root\",\n  paths: {\n    \"lib/*\": [\"location/*\"]\n  },\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib.js\", \"kalle.js\")],\n  packageJson: {\n    main: \"./kalle.js\"\n  },\n  requestedModule: \"lib/mylib.js\",\n  extensions: [\".ts\", \".js\"],\n  expectedPath: (0, path_1.join)(\"/root\", \"location\", \"mylib.js\", \"kalle.js\")\n}, {\n  name: \"should resolve from list of fields by priority in package.json\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"lib/*\": [\"location/*\"]\n  },\n  mainFields: [\"missing\", \"browser\", \"main\"],\n  packageJson: {\n    main: \"./main.js\",\n    browser: \"./browser.js\"\n  },\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"main.js\"), (0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"browser.js\") // browserFilePath\n  ],\n  extensions: [\".ts\", \".js\"],\n  requestedModule: \"lib/mylibjs\",\n  expectedPath: (0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"browser.js\")\n}, {\n  name: \"should ignore field mappings to missing files in package.json\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"lib/*\": [\"location/*\"]\n  },\n  mainFields: [\"browser\", \"main\"],\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"kalle.js\")],\n  requestedModule: \"lib/mylibjs\",\n  packageJson: {\n    main: \"./kalle.js\",\n    browser: \"./nope.js\"\n  },\n  extensions: [\".ts\", \".js\"],\n  expectedPath: (0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"kalle.js\")\n}, {\n  name: \"should ignore advanced field mappings in package.json\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"lib/*\": [\"location/*\"]\n  },\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"kalle.js\"), (0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"browser.js\")],\n  requestedModule: \"lib/mylibjs\",\n  packageJson: {\n    main: \"./kalle.js\",\n    browser: {\n      mylibjs: \"./browser.js\",\n      \"./kalle.js\": \"./browser.js\"\n    }\n  },\n  extensions: [\".ts\", \".js\"],\n  expectedPath: (0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"kalle.js\")\n}, {\n  name: \"should resolve to with the help of baseUrl when not explicitly set\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {},\n  existingFiles: [(0, path_1.join)(\"/root\", \"mylib\", \"index.ts\")],\n  requestedModule: \"mylib\",\n  expectedPath: (0, path_1.dirname)((0, path_1.join)(\"/root\", \"mylib\", \"index.ts\")),\n  extensions: defaultExtensionsWhenRunningInTsNode\n}, {\n  name: \"should not resolve with the help of baseUrl when asked not to\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {},\n  addMatchAll: false,\n  existingFiles: [(0, path_1.join)(\"/root\", \"mylib\", \"index.ts\")],\n  requestedModule: \"mylib\",\n  expectedPath: undefined,\n  extensions: defaultExtensionsWhenRunningInTsNode\n}, {\n  name: \"should not locate path that does not match\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"lib/*\": [\"location/*\"]\n  },\n  existingFiles: [(0, path_1.join)(\"root\", \"location\", \"mylib\")],\n  requestedModule: \"mylib\",\n  expectedPath: undefined,\n  extensions: defaultExtensionsWhenRunningInTsNode\n}, {\n  name: \"should not resolve typings file (index.d.ts)\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {\n    \"lib/*\": [\"location/*\"]\n  },\n  existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.d.ts\")],\n  requestedModule: \"lib/mylib\",\n  expectedPath: undefined,\n  extensions: defaultExtensionsWhenRunningInTsNode\n}, {\n  name: \"should resolve main file with cjs file extension\",\n  absoluteBaseUrl: \"/root/\",\n  paths: {},\n  existingFiles: [(0, path_1.join)(\"/root\", \"mylib\", \"index.cjs\")],\n  packageJson: {\n    main: \"./index.cjs\"\n  },\n  requestedModule: \"mylib\",\n  expectedPath: (0, path_1.join)(\"/root\", \"mylib\", \"index.cjs\"),\n  extensions: defaultExtensionsWhenRunningInTsNode\n}];","map":{"version":3,"mappings":"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","names":["defaultExtensionsWhenRunningInTsNode","exports","name","absoluteBaseUrl","paths","existingFiles","requestedModule","expectedPath","extensions","packageJson","main","mainFields","browser","mylibjs","addMatchAll","undefined"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\tsconfig-paths\\src\\__tests__\\data\\match-path-data.ts"],"sourcesContent":["import { join, dirname } from \"path\";\nimport { removeExtension } from \"../../filesystem\";\n\nexport interface OneTest {\n  readonly name: string;\n  readonly only?: boolean;\n  readonly skip?: boolean;\n  readonly absoluteBaseUrl: string;\n  readonly paths: { [key: string]: Array<string> };\n  readonly mainFields?: string[];\n  readonly addMatchAll?: boolean;\n  readonly existingFiles: ReadonlyArray<string>;\n  readonly requestedModule: string;\n  readonly extensions: ReadonlyArray<string>;\n  readonly packageJson?: {};\n  readonly expectedPath: string | undefined;\n}\n\nconst defaultExtensionsWhenRunningInTsNode = [\n  \".js\",\n  \".json\",\n  \".node\",\n  \".ts\",\n  \".tsx\",\n];\n\nexport const tests: ReadonlyArray<OneTest> = [\n  {\n    name: \"should locate path that matches with star and exists\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {\n      \"lib/*\": [\"location/*\"],\n    },\n    existingFiles: [join(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n    requestedModule: \"lib/mylib\",\n    expectedPath: dirname(join(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should resolve to correct path when many are specified\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {\n      \"lib/*\": [\"foo1/*\", \"foo2/*\", \"location/*\", \"foo3/*\"],\n    },\n    existingFiles: [join(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n    requestedModule: \"lib/mylib\",\n    extensions: [\".ts\"],\n    expectedPath: dirname(join(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n  },\n  {\n    name:\n      \"should locate path that matches with star and prioritize pattern with longest prefix\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {\n      \"*\": [\"location/*\"],\n      \"lib/*\": [\"location/*\"],\n    },\n    existingFiles: [\n      join(\"/root\", \"location\", \"lib\", \"mylib\", \"index.ts\"),\n      join(\"/root\", \"location\", \"mylib\", \"index.ts\"),\n    ],\n    requestedModule: \"lib/mylib\",\n    expectedPath: dirname(join(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should locate path that matches with star and exists with extension\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [join(\"/root\", \"location\", \"mylib.myext\")],\n    requestedModule: \"lib/mylib\",\n    extensions: [\".js\", \".myext\"],\n    expectedPath: removeExtension(join(\"/root\", \"location\", \"mylib.myext\")),\n  },\n  {\n    name: \"should resolve request with extension specified\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [join(\"/root\", \"location\", \"test.jpg\")],\n    requestedModule: \"lib/test.jpg\",\n    expectedPath: join(\"/root\", \"location\", \"test.jpg\"),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should locate path that matches without star and exists\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {\n      \"lib/foo\": [\"location/foo\"],\n    },\n    existingFiles: [join(\"/root\", \"location\", \"foo.ts\")],\n    requestedModule: \"lib/foo\",\n    expectedPath: removeExtension(join(\"/root\", \"location\", \"foo.ts\")),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should resolve to parent folder when filename is in subfolder\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [join(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n    requestedModule: \"lib/mylib\",\n    expectedPath: dirname(join(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should resolve from main field in package.json\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [join(\"/root\", \"location\", \"mylib\", \"kalle.ts\")],\n    packageJson: { main: \"./kalle.ts\" },\n    requestedModule: \"lib/mylib\",\n    expectedPath: join(\"/root\", \"location\", \"mylib\", \"kalle.ts\"),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should resolve from main field in package.json (js)\",\n    absoluteBaseUrl: \"/root\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [join(\"/root\", \"location\", \"mylib.js\", \"kalle.js\")],\n    packageJson: { main: \"./kalle.js\" },\n    requestedModule: \"lib/mylib.js\",\n    extensions: [\".ts\", \".js\"],\n    expectedPath: join(\"/root\", \"location\", \"mylib.js\", \"kalle.js\"),\n  },\n  {\n    name: \"should resolve from list of fields by priority in package.json\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    mainFields: [\"missing\", \"browser\", \"main\"],\n    packageJson: { main: \"./main.js\", browser: \"./browser.js\" },\n    existingFiles: [\n      join(\"/root\", \"location\", \"mylibjs\", \"main.js\"), // mainFilePath\n      join(\"/root\", \"location\", \"mylibjs\", \"browser.js\"), // browserFilePath\n    ],\n    extensions: [\".ts\", \".js\"],\n    requestedModule: \"lib/mylibjs\",\n    expectedPath: join(\"/root\", \"location\", \"mylibjs\", \"browser.js\"),\n  },\n  {\n    name: \"should ignore field mappings to missing files in package.json\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    mainFields: [\"browser\", \"main\"],\n    existingFiles: [join(\"/root\", \"location\", \"mylibjs\", \"kalle.js\")],\n    requestedModule: \"lib/mylibjs\",\n    packageJson: {\n      main: \"./kalle.js\",\n      browser: \"./nope.js\",\n    },\n    extensions: [\".ts\", \".js\"],\n    expectedPath: join(\"/root\", \"location\", \"mylibjs\", \"kalle.js\"),\n  },\n  {\n    name: \"should ignore advanced field mappings in package.json\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [\n      join(\"/root\", \"location\", \"mylibjs\", \"kalle.js\"),\n      join(\"/root\", \"location\", \"mylibjs\", \"browser.js\"),\n    ],\n    requestedModule: \"lib/mylibjs\",\n    packageJson: {\n      main: \"./kalle.js\",\n      browser: { mylibjs: \"./browser.js\", \"./kalle.js\": \"./browser.js\" },\n    },\n    extensions: [\".ts\", \".js\"],\n    expectedPath: join(\"/root\", \"location\", \"mylibjs\", \"kalle.js\"),\n  },\n  {\n    name: \"should resolve to with the help of baseUrl when not explicitly set\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {},\n    existingFiles: [join(\"/root\", \"mylib\", \"index.ts\")],\n    requestedModule: \"mylib\",\n    expectedPath: dirname(join(\"/root\", \"mylib\", \"index.ts\")),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should not resolve with the help of baseUrl when asked not to\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {},\n    addMatchAll: false,\n    existingFiles: [join(\"/root\", \"mylib\", \"index.ts\")],\n    requestedModule: \"mylib\",\n    expectedPath: undefined,\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should not locate path that does not match\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [join(\"root\", \"location\", \"mylib\")],\n    requestedModule: \"mylib\",\n    expectedPath: undefined,\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should not resolve typings file (index.d.ts)\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {\n      \"lib/*\": [\"location/*\"],\n    },\n    existingFiles: [join(\"/root\", \"location\", \"mylib\", \"index.d.ts\")],\n    requestedModule: \"lib/mylib\",\n    expectedPath: undefined,\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should resolve main file with cjs file extension\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {},\n    existingFiles: [join(\"/root\", \"mylib\", \"index.cjs\")],\n    packageJson: {\n      main: \"./index.cjs\",\n    },\n    requestedModule: \"mylib\",\n    expectedPath: join(\"/root\", \"mylib\", \"index.cjs\"),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n];\n"]},"metadata":{},"sourceType":"script"}