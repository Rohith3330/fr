{"ast":null,"code":"'use strict';\n\nvar inspect = require('../');\n\nvar test = require('tape');\n\nvar mockProperty = require('mock-property');\n\ntest('when Object#hasOwnProperty is deleted', function (t) {\n  t.plan(1);\n  var arr = [1,, 3]; // eslint-disable-line no-sparse-arrays\n\n  t.teardown(mockProperty(Array.prototype, 1, {\n    value: 2\n  })); // this is needed to account for \"in\" vs \"hasOwnProperty\"\n\n  t.teardown(mockProperty(Object.prototype, 'hasOwnProperty', {\n    'delete': true\n  }));\n  t.equal(inspect(arr), '[ 1, , 3 ]');\n});","map":{"version":3,"names":["inspect","require","test","mockProperty","t","plan","arr","teardown","Array","prototype","value","Object","equal"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/object-inspect/test/has.js"],"sourcesContent":["'use strict';\n\nvar inspect = require('../');\nvar test = require('tape');\nvar mockProperty = require('mock-property');\n\ntest('when Object#hasOwnProperty is deleted', function (t) {\n    t.plan(1);\n    var arr = [1, , 3]; // eslint-disable-line no-sparse-arrays\n\n    t.teardown(mockProperty(Array.prototype, 1, { value: 2 })); // this is needed to account for \"in\" vs \"hasOwnProperty\"\n    t.teardown(mockProperty(Object.prototype, 'hasOwnProperty', { 'delete': true }));\n\n    t.equal(inspect(arr), '[ 1, , 3 ]');\n});\n"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,KAAD,CAArB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA1B;;AAEAC,IAAI,CAAC,uCAAD,EAA0C,UAAUE,CAAV,EAAa;EACvDA,CAAC,CAACC,IAAF,CAAO,CAAP;EACA,IAAIC,GAAG,GAAG,CAAC,CAAD,GAAM,CAAN,CAAV,CAFuD,CAEnC;;EAEpBF,CAAC,CAACG,QAAF,CAAWJ,YAAY,CAACK,KAAK,CAACC,SAAP,EAAkB,CAAlB,EAAqB;IAAEC,KAAK,EAAE;EAAT,CAArB,CAAvB,EAJuD,CAIK;;EAC5DN,CAAC,CAACG,QAAF,CAAWJ,YAAY,CAACQ,MAAM,CAACF,SAAR,EAAmB,gBAAnB,EAAqC;IAAE,UAAU;EAAZ,CAArC,CAAvB;EAEAL,CAAC,CAACQ,KAAF,CAAQZ,OAAO,CAACM,GAAD,CAAf,EAAsB,YAAtB;AACH,CARG,CAAJ"},"metadata":{},"sourceType":"script"}