{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;\n\nconst codegen_1 = require(\"./codegen\");\n\nconst code_1 = require(\"./codegen/code\"); // TODO refactor to use Set\n\n\nfunction toHash(arr) {\n  const hash = {};\n\n  for (const item of arr) hash[item] = true;\n\n  return hash;\n}\n\nexports.toHash = toHash;\n\nfunction alwaysValidSchema(it, schema) {\n  if (typeof schema == \"boolean\") return schema;\n  if (Object.keys(schema).length === 0) return true;\n  checkUnknownRules(it, schema);\n  return !schemaHasRules(schema, it.self.RULES.all);\n}\n\nexports.alwaysValidSchema = alwaysValidSchema;\n\nfunction checkUnknownRules(it) {\n  let schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : it.schema;\n  const {\n    opts,\n    self\n  } = it;\n  if (!opts.strictSchema) return;\n  if (typeof schema === \"boolean\") return;\n  const rules = self.RULES.keywords;\n\n  for (const key in schema) {\n    if (!rules[key]) checkStrictMode(it, `unknown keyword: \"${key}\"`);\n  }\n}\n\nexports.checkUnknownRules = checkUnknownRules;\n\nfunction schemaHasRules(schema, rules) {\n  if (typeof schema == \"boolean\") return !schema;\n\n  for (const key in schema) if (rules[key]) return true;\n\n  return false;\n}\n\nexports.schemaHasRules = schemaHasRules;\n\nfunction schemaHasRulesButRef(schema, RULES) {\n  if (typeof schema == \"boolean\") return !schema;\n\n  for (const key in schema) if (key !== \"$ref\" && RULES.all[key]) return true;\n\n  return false;\n}\n\nexports.schemaHasRulesButRef = schemaHasRulesButRef;\n\nfunction schemaRefOrVal(_ref, schema, keyword, $data) {\n  let {\n    topSchemaRef,\n    schemaPath\n  } = _ref;\n\n  if (!$data) {\n    if (typeof schema == \"number\" || typeof schema == \"boolean\") return schema;\n    if (typeof schema == \"string\") return (0, codegen_1._)`${schema}`;\n  }\n\n  return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;\n}\n\nexports.schemaRefOrVal = schemaRefOrVal;\n\nfunction unescapeFragment(str) {\n  return unescapeJsonPointer(decodeURIComponent(str));\n}\n\nexports.unescapeFragment = unescapeFragment;\n\nfunction escapeFragment(str) {\n  return encodeURIComponent(escapeJsonPointer(str));\n}\n\nexports.escapeFragment = escapeFragment;\n\nfunction escapeJsonPointer(str) {\n  if (typeof str == \"number\") return `${str}`;\n  return str.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\n\nexports.escapeJsonPointer = escapeJsonPointer;\n\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\n\nexports.unescapeJsonPointer = unescapeJsonPointer;\n\nfunction eachItem(xs, f) {\n  if (Array.isArray(xs)) {\n    for (const x of xs) f(x);\n  } else {\n    f(xs);\n  }\n}\n\nexports.eachItem = eachItem;\n\nfunction makeMergeEvaluated(_ref2) {\n  let {\n    mergeNames,\n    mergeToName,\n    mergeValues,\n    resultToName\n  } = _ref2;\n  return (gen, from, to, toName) => {\n    const res = to === undefined ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);\n    return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;\n  };\n}\n\nexports.mergeEvaluated = {\n  props: makeMergeEvaluated({\n    mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => {\n      gen.if((0, codegen_1._)`${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from})`));\n    }),\n    mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => {\n      if (from === true) {\n        gen.assign(to, true);\n      } else {\n        gen.assign(to, (0, codegen_1._)`${to} || {}`);\n        setEvaluated(gen, to, from);\n      }\n    }),\n    mergeValues: (from, to) => from === true ? true : { ...from,\n      ...to\n    },\n    resultToName: evaluatedPropsToName\n  }),\n  items: makeMergeEvaluated({\n    mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._)`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),\n    mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._)`${to} > ${from} ? ${to} : ${from}`)),\n    mergeValues: (from, to) => from === true ? true : Math.max(from, to),\n    resultToName: (gen, items) => gen.var(\"items\", items)\n  })\n};\n\nfunction evaluatedPropsToName(gen, ps) {\n  if (ps === true) return gen.var(\"props\", true);\n  const props = gen.var(\"props\", (0, codegen_1._)`{}`);\n  if (ps !== undefined) setEvaluated(gen, props, ps);\n  return props;\n}\n\nexports.evaluatedPropsToName = evaluatedPropsToName;\n\nfunction setEvaluated(gen, props, ps) {\n  Object.keys(ps).forEach(p => gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`, true));\n}\n\nexports.setEvaluated = setEvaluated;\nconst snippets = {};\n\nfunction useFunc(gen, f) {\n  return gen.scopeValue(\"func\", {\n    ref: f,\n    code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code))\n  });\n}\n\nexports.useFunc = useFunc;\nvar Type;\n\n(function (Type) {\n  Type[Type[\"Num\"] = 0] = \"Num\";\n  Type[Type[\"Str\"] = 1] = \"Str\";\n})(Type = exports.Type || (exports.Type = {}));\n\nfunction getErrorPath(dataProp, dataPropType, jsPropertySyntax) {\n  // let path\n  if (dataProp instanceof codegen_1.Name) {\n    const isNumber = dataPropType === Type.Num;\n    return jsPropertySyntax ? isNumber ? (0, codegen_1._)`\"[\" + ${dataProp} + \"]\"` : (0, codegen_1._)`\"['\" + ${dataProp} + \"']\"` : isNumber ? (0, codegen_1._)`\"/\" + ${dataProp}` : (0, codegen_1._)`\"/\" + ${dataProp}.replace(/~/g, \"~0\").replace(/\\\\//g, \"~1\")`; // TODO maybe use global escapePointer\n  }\n\n  return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : \"/\" + escapeJsonPointer(dataProp);\n}\n\nexports.getErrorPath = getErrorPath;\n\nfunction checkStrictMode(it, msg) {\n  let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : it.opts.strictSchema;\n  if (!mode) return;\n  msg = `strict mode: ${msg}`;\n  if (mode === true) throw new Error(msg);\n  it.self.logger.warn(msg);\n}\n\nexports.checkStrictMode = checkStrictMode;","map":{"version":3,"mappings":"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","names":["toHash","arr","hash","item","exports","alwaysValidSchema","it","schema","Object","keys","length","checkUnknownRules","schemaHasRules","self","RULES","all","opts","strictSchema","rules","keywords","key","checkStrictMode","schemaHasRulesButRef","schemaRefOrVal","keyword","$data","topSchemaRef","schemaPath","unescapeFragment","str","unescapeJsonPointer","decodeURIComponent","escapeFragment","encodeURIComponent","escapeJsonPointer","replace","eachItem","xs","f","Array","isArray","x","makeMergeEvaluated","mergeNames","mergeToName","mergeValues","resultToName","gen","from","to","toName","res","undefined","codegen_1","props","if","assign","code","setEvaluated","evaluatedPropsToName","items","Math","max","var","ps","forEach","p","snippets","useFunc","scopeValue","ref","code_1","Type","getErrorPath","dataProp","dataPropType","jsPropertySyntax","isNumber","Num","toString","msg","mode","Error","logger","warn"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\compile\\util.ts"],"sourcesContent":["import type {AnySchema, EvaluatedProperties, EvaluatedItems} from \"../types\"\nimport type {SchemaCxt, SchemaObjCxt} from \".\"\nimport {_, getProperty, Code, Name, CodeGen} from \"./codegen\"\nimport {_Code} from \"./codegen/code\"\nimport type {Rule, ValidationRules} from \"./rules\"\n\n// TODO refactor to use Set\nexport function toHash<T extends string = string>(arr: T[]): {[K in T]?: true} {\n  const hash: {[K in T]?: true} = {}\n  for (const item of arr) hash[item] = true\n  return hash\n}\n\nexport function alwaysValidSchema(it: SchemaCxt, schema: AnySchema): boolean | void {\n  if (typeof schema == \"boolean\") return schema\n  if (Object.keys(schema).length === 0) return true\n  checkUnknownRules(it, schema)\n  return !schemaHasRules(schema, it.self.RULES.all)\n}\n\nexport function checkUnknownRules(it: SchemaCxt, schema: AnySchema = it.schema): void {\n  const {opts, self} = it\n  if (!opts.strictSchema) return\n  if (typeof schema === \"boolean\") return\n  const rules = self.RULES.keywords\n  for (const key in schema) {\n    if (!rules[key]) checkStrictMode(it, `unknown keyword: \"${key}\"`)\n  }\n}\n\nexport function schemaHasRules(\n  schema: AnySchema,\n  rules: {[Key in string]?: boolean | Rule}\n): boolean {\n  if (typeof schema == \"boolean\") return !schema\n  for (const key in schema) if (rules[key]) return true\n  return false\n}\n\nexport function schemaHasRulesButRef(schema: AnySchema, RULES: ValidationRules): boolean {\n  if (typeof schema == \"boolean\") return !schema\n  for (const key in schema) if (key !== \"$ref\" && RULES.all[key]) return true\n  return false\n}\n\nexport function schemaRefOrVal(\n  {topSchemaRef, schemaPath}: SchemaObjCxt,\n  schema: unknown,\n  keyword: string,\n  $data?: string | false\n): Code | number | boolean {\n  if (!$data) {\n    if (typeof schema == \"number\" || typeof schema == \"boolean\") return schema\n    if (typeof schema == \"string\") return _`${schema}`\n  }\n  return _`${topSchemaRef}${schemaPath}${getProperty(keyword)}`\n}\n\nexport function unescapeFragment(str: string): string {\n  return unescapeJsonPointer(decodeURIComponent(str))\n}\n\nexport function escapeFragment(str: string | number): string {\n  return encodeURIComponent(escapeJsonPointer(str))\n}\n\nexport function escapeJsonPointer(str: string | number): string {\n  if (typeof str == \"number\") return `${str}`\n  return str.replace(/~/g, \"~0\").replace(/\\//g, \"~1\")\n}\n\nexport function unescapeJsonPointer(str: string): string {\n  return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\")\n}\n\nexport function eachItem<T>(xs: T | T[], f: (x: T) => void): void {\n  if (Array.isArray(xs)) {\n    for (const x of xs) f(x)\n  } else {\n    f(xs)\n  }\n}\n\ntype SomeEvaluated = EvaluatedProperties | EvaluatedItems\n\ntype MergeEvaluatedFunc<T extends SomeEvaluated> = (\n  gen: CodeGen,\n  from: Name | T,\n  to: Name | Exclude<T, true> | undefined,\n  toName?: typeof Name\n) => Name | T\n\ninterface MakeMergeFuncArgs<T extends SomeEvaluated> {\n  mergeNames: (gen: CodeGen, from: Name, to: Name) => void\n  mergeToName: (gen: CodeGen, from: T, to: Name) => void\n  mergeValues: (from: T, to: Exclude<T, true>) => T\n  resultToName: (gen: CodeGen, res?: T) => Name\n}\n\nfunction makeMergeEvaluated<T extends SomeEvaluated>({\n  mergeNames,\n  mergeToName,\n  mergeValues,\n  resultToName,\n}: MakeMergeFuncArgs<T>): MergeEvaluatedFunc<T> {\n  return (gen, from, to, toName) => {\n    const res =\n      to === undefined\n        ? from\n        : to instanceof Name\n        ? (from instanceof Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)\n        : from instanceof Name\n        ? (mergeToName(gen, to, from), from)\n        : mergeValues(from, to)\n    return toName === Name && !(res instanceof Name) ? resultToName(gen, res) : res\n  }\n}\n\ninterface MergeEvaluated {\n  props: MergeEvaluatedFunc<EvaluatedProperties>\n  items: MergeEvaluatedFunc<EvaluatedItems>\n}\n\nexport const mergeEvaluated: MergeEvaluated = {\n  props: makeMergeEvaluated({\n    mergeNames: (gen, from, to) =>\n      gen.if(_`${to} !== true && ${from} !== undefined`, () => {\n        gen.if(\n          _`${from} === true`,\n          () => gen.assign(to, true),\n          () => gen.assign(to, _`${to} || {}`).code(_`Object.assign(${to}, ${from})`)\n        )\n      }),\n    mergeToName: (gen, from, to) =>\n      gen.if(_`${to} !== true`, () => {\n        if (from === true) {\n          gen.assign(to, true)\n        } else {\n          gen.assign(to, _`${to} || {}`)\n          setEvaluated(gen, to, from)\n        }\n      }),\n    mergeValues: (from, to) => (from === true ? true : {...from, ...to}),\n    resultToName: evaluatedPropsToName,\n  }),\n  items: makeMergeEvaluated({\n    mergeNames: (gen, from, to) =>\n      gen.if(_`${to} !== true && ${from} !== undefined`, () =>\n        gen.assign(to, _`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)\n      ),\n    mergeToName: (gen, from, to) =>\n      gen.if(_`${to} !== true`, () =>\n        gen.assign(to, from === true ? true : _`${to} > ${from} ? ${to} : ${from}`)\n      ),\n    mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),\n    resultToName: (gen, items) => gen.var(\"items\", items),\n  }),\n}\n\nexport function evaluatedPropsToName(gen: CodeGen, ps?: EvaluatedProperties): Name {\n  if (ps === true) return gen.var(\"props\", true)\n  const props = gen.var(\"props\", _`{}`)\n  if (ps !== undefined) setEvaluated(gen, props, ps)\n  return props\n}\n\nexport function setEvaluated(gen: CodeGen, props: Name, ps: {[K in string]?: true}): void {\n  Object.keys(ps).forEach((p) => gen.assign(_`${props}${getProperty(p)}`, true))\n}\n\nconst snippets: {[S in string]?: _Code} = {}\n\nexport function useFunc(gen: CodeGen, f: {code: string}): Name {\n  return gen.scopeValue(\"func\", {\n    ref: f,\n    code: snippets[f.code] || (snippets[f.code] = new _Code(f.code)),\n  })\n}\n\nexport enum Type {\n  Num,\n  Str,\n}\n\nexport function getErrorPath(\n  dataProp: Name | string | number,\n  dataPropType?: Type,\n  jsPropertySyntax?: boolean\n): Code | string {\n  // let path\n  if (dataProp instanceof Name) {\n    const isNumber = dataPropType === Type.Num\n    return jsPropertySyntax\n      ? isNumber\n        ? _`\"[\" + ${dataProp} + \"]\"`\n        : _`\"['\" + ${dataProp} + \"']\"`\n      : isNumber\n      ? _`\"/\" + ${dataProp}`\n      : _`\"/\" + ${dataProp}.replace(/~/g, \"~0\").replace(/\\\\//g, \"~1\")` // TODO maybe use global escapePointer\n  }\n  return jsPropertySyntax ? getProperty(dataProp).toString() : \"/\" + escapeJsonPointer(dataProp)\n}\n\nexport function checkStrictMode(\n  it: SchemaCxt,\n  msg: string,\n  mode: boolean | \"log\" = it.opts.strictSchema\n): void {\n  if (!mode) return\n  msg = `strict mode: ${msg}`\n  if (mode === true) throw new Error(msg)\n  it.self.logger.warn(msg)\n}\n"]},"metadata":{},"sourceType":"script"}