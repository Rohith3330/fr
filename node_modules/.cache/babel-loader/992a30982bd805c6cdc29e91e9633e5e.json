{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ignore_1 = __importDefault(require(\"ignore\"));\n\nconst util_1 = require(\"../util\");\n\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\n\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('no-restricted-imports');\nconst allowTypeImportsOptionSchema = {\n  allowTypeImports: {\n    type: 'boolean',\n    default: false\n  }\n};\nconst schemaForMergeArrayOfStringsOrObjects = {\n  items: {\n    anyOf: [{}, {\n      properties: allowTypeImportsOptionSchema\n    }]\n  }\n};\nconst schemaForMergeArrayOfStringsOrObjectPatterns = {\n  anyOf: [{}, {\n    items: {\n      properties: allowTypeImportsOptionSchema\n    }\n  }]\n};\nconst schema = (0, util_1.deepMerge)(Object.assign({}, baseRule.meta.schema), {\n  anyOf: [schemaForMergeArrayOfStringsOrObjects, {\n    items: {\n      properties: {\n        paths: schemaForMergeArrayOfStringsOrObjects,\n        patterns: schemaForMergeArrayOfStringsOrObjectPatterns\n      }\n    }\n  }]\n});\n\nfunction isObjectOfPaths(obj) {\n  return Object.prototype.hasOwnProperty.call(obj, 'paths');\n}\n\nfunction isObjectOfPatterns(obj) {\n  return Object.prototype.hasOwnProperty.call(obj, 'patterns');\n}\n\nfunction isOptionsArrayOfStringOrObject(options) {\n  if (isObjectOfPaths(options[0])) {\n    return false;\n  }\n\n  if (isObjectOfPatterns(options[0])) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getRestrictedPaths(options) {\n  if (isOptionsArrayOfStringOrObject(options)) {\n    return options;\n  }\n\n  if (isObjectOfPaths(options[0])) {\n    return options[0].paths;\n  }\n\n  return [];\n}\n\nfunction getRestrictedPatterns(options) {\n  if (isObjectOfPatterns(options[0])) {\n    return options[0].patterns;\n  }\n\n  return [];\n}\n\nexports.default = (0, util_1.createRule)({\n  name: 'no-restricted-imports',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow specified modules when loaded by `import`',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    messages: baseRule.meta.messages,\n    fixable: baseRule.meta.fixable,\n    schema\n  },\n  defaultOptions: [],\n\n  create(context) {\n    const rules = baseRule.create(context);\n    const {\n      options\n    } = context;\n\n    if (options.length === 0) {\n      return {};\n    }\n\n    const restrictedPaths = getRestrictedPaths(options);\n    const allowedTypeImportPathNameSet = new Set();\n\n    for (const restrictedPath of restrictedPaths) {\n      if (typeof restrictedPath === 'object' && restrictedPath.allowTypeImports) {\n        allowedTypeImportPathNameSet.add(restrictedPath.name);\n      }\n    }\n\n    function isAllowedTypeImportPath(importSource) {\n      return allowedTypeImportPathNameSet.has(importSource);\n    }\n\n    const restrictedPatterns = getRestrictedPatterns(options);\n    const allowedImportTypeMatchers = [];\n\n    for (const restrictedPattern of restrictedPatterns) {\n      if (typeof restrictedPattern === 'object' && restrictedPattern.allowTypeImports) {\n        // Following how ignore is configured in the base rule\n        allowedImportTypeMatchers.push((0, ignore_1.default)({\n          allowRelativePaths: true,\n          ignoreCase: !restrictedPattern.caseSensitive\n        }).add(restrictedPattern.group));\n      }\n    }\n\n    function isAllowedTypeImportPattern(importSource) {\n      return (// As long as there's one matching pattern that allows type import\n        allowedImportTypeMatchers.some(matcher => matcher.ignores(importSource))\n      );\n    }\n\n    return {\n      ImportDeclaration(node) {\n        if (node.importKind === 'type') {\n          const importSource = node.source.value.trim();\n\n          if (!isAllowedTypeImportPath(importSource) && !isAllowedTypeImportPattern(importSource)) {\n            return rules.ImportDeclaration(node);\n          }\n        } else {\n          return rules.ImportDeclaration(node);\n        }\n      },\n\n      'ExportNamedDeclaration[source]'(node) {\n        if (node.exportKind === 'type') {\n          const importSource = node.source.value.trim();\n\n          if (!isAllowedTypeImportPath(importSource) && !isAllowedTypeImportPattern(importSource)) {\n            return rules.ExportNamedDeclaration(node);\n          }\n        } else {\n          return rules.ExportNamedDeclaration(node);\n        }\n      },\n\n      ExportAllDeclaration: rules.ExportAllDeclaration\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["baseRule","allowTypeImportsOptionSchema","allowTypeImports","type","default","schemaForMergeArrayOfStringsOrObjects","items","anyOf","properties","schemaForMergeArrayOfStringsOrObjectPatterns","schema","Object","meta","paths","patterns","isObjectOfPaths","obj","prototype","hasOwnProperty","call","isObjectOfPatterns","isOptionsArrayOfStringOrObject","options","getRestrictedPaths","getRestrictedPatterns","exports","name","docs","description","recommended","extendsBaseRule","messages","fixable","defaultOptions","create","context","rules","length","restrictedPaths","allowedTypeImportPathNameSet","Set","restrictedPath","add","isAllowedTypeImportPath","importSource","has","restrictedPatterns","allowedImportTypeMatchers","restrictedPattern","push","allowRelativePaths","ignoreCase","caseSensitive","group","isAllowedTypeImportPattern","some","matcher","ignores","ImportDeclaration","node","importKind","source","value","trim","exportKind","ExportNamedDeclaration","ExportAllDeclaration"],"sources":["../../src/rules/no-restricted-imports.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}