{"ast":null,"code":"\"use strict\";\n\nconst promisify = require(\"util.promisify\");\n\nconst gensync = require(\"../\");\n\nconst TEST_ERROR = new Error(\"TEST_ERROR\");\nconst DID_ERROR = new Error(\"DID_ERROR\");\nconst doSuccess = gensync({\n  sync: () => 42,\n  async: () => Promise.resolve(42)\n});\nconst doError = gensync({\n  sync: () => {\n    throw DID_ERROR;\n  },\n  async: () => Promise.reject(DID_ERROR)\n});\n\nfunction throwTestError() {\n  throw TEST_ERROR;\n}\n\nasync function expectResult(fn, arg, _ref) {\n  let {\n    error,\n    value,\n    expectSync = false,\n    syncErrback = expectSync\n  } = _ref;\n\n  if (!expectSync) {\n    expect(() => fn.sync(arg)).toThrow(TEST_ERROR);\n  } else if (error) {\n    expect(() => fn.sync(arg)).toThrow(error);\n  } else {\n    expect(fn.sync(arg)).toBe(value);\n  }\n\n  if (error) {\n    await expect(fn.async(arg)).rejects.toBe(error);\n  } else {\n    await expect(fn.async(arg)).resolves.toBe(value);\n  }\n\n  await new Promise((resolve, reject) => {\n    let sync = true;\n    fn.errback(arg, (err, val) => {\n      try {\n        expect(err).toBe(error);\n        expect(val).toBe(value);\n        expect(sync).toBe(syncErrback);\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n    sync = false;\n  });\n}\n\ndescribe(\"gensync({})\", () => {\n  describe(\"option validation\", () => {\n    test(\"disallow async and errback handler together\", () => {\n      try {\n        gensync({\n          sync: throwTestError,\n          async: throwTestError,\n          errback: throwTestError\n        });\n        throwTestError();\n      } catch (err) {\n        expect(err.message).toMatch(/Expected one of either opts.async or opts.errback, but got _both_\\./);\n        expect(err.code).toBe(\"GENSYNC_OPTIONS_ERROR\");\n      }\n    });\n    test(\"disallow missing sync handler\", () => {\n      try {\n        gensync({\n          async: throwTestError\n        });\n        throwTestError();\n      } catch (err) {\n        expect(err.message).toMatch(/Expected opts.sync to be a function./);\n        expect(err.code).toBe(\"GENSYNC_OPTIONS_ERROR\");\n      }\n    });\n    test(\"errback callback required\", () => {\n      const fn = gensync({\n        sync: throwTestError,\n        async: throwTestError\n      });\n\n      try {\n        fn.errback();\n        throwTestError();\n      } catch (err) {\n        expect(err.message).toMatch(/function called without callback/);\n        expect(err.code).toBe(\"GENSYNC_ERRBACK_NO_CALLBACK\");\n      }\n    });\n  });\n  describe(\"generator function metadata\", () => {\n    test(\"automatic naming\", () => {\n      expect(gensync({\n        sync: function readFileSync() {},\n        async: () => {}\n      }).name).toBe(\"readFile\");\n      expect(gensync({\n        sync: function readFile() {},\n        async: () => {}\n      }).name).toBe(\"readFile\");\n      expect(gensync({\n        sync: function readFileAsync() {},\n        async: () => {}\n      }).name).toBe(\"readFileAsync\");\n      expect(gensync({\n        sync: () => {},\n        async: function readFileSync() {}\n      }).name).toBe(\"readFileSync\");\n      expect(gensync({\n        sync: () => {},\n        async: function readFile() {}\n      }).name).toBe(\"readFile\");\n      expect(gensync({\n        sync: () => {},\n        async: function readFileAsync() {}\n      }).name).toBe(\"readFile\");\n      expect(gensync({\n        sync: () => {},\n        errback: function readFileSync() {}\n      }).name).toBe(\"readFileSync\");\n      expect(gensync({\n        sync: () => {},\n        errback: function readFile() {}\n      }).name).toBe(\"readFile\");\n      expect(gensync({\n        sync: () => {},\n        errback: function readFileAsync() {}\n      }).name).toBe(\"readFileAsync\");\n    });\n    test(\"explicit naming\", () => {\n      expect(gensync({\n        name: \"readFile\",\n        sync: () => {},\n        async: () => {}\n      }).name).toBe(\"readFile\");\n    });\n    test(\"default arity\", () => {\n      expect(gensync({\n        sync: function (a, b, c, d, e, f, g) {\n          throwTestError();\n        },\n        async: throwTestError\n      }).length).toBe(7);\n    });\n    test(\"explicit arity\", () => {\n      expect(gensync({\n        arity: 3,\n        sync: throwTestError,\n        async: throwTestError\n      }).length).toBe(3);\n    });\n  });\n  describe(\"'sync' handler\", async () => {\n    test(\"success\", async () => {\n      const fn = gensync({\n        sync: function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return JSON.stringify(args);\n        }\n      });\n      await expectResult(fn, 42, {\n        value: \"[42]\",\n        expectSync: true\n      });\n    });\n    test(\"failure\", async () => {\n      const fn = gensync({\n        sync: function () {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          throw JSON.stringify(args);\n        }\n      });\n      await expectResult(fn, 42, {\n        error: \"[42]\",\n        expectSync: true\n      });\n    });\n  });\n  describe(\"'async' handler\", async () => {\n    test(\"success\", async () => {\n      const fn = gensync({\n        sync: throwTestError,\n        async: function () {\n          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n\n          return Promise.resolve(JSON.stringify(args));\n        }\n      });\n      await expectResult(fn, 42, {\n        value: \"[42]\"\n      });\n    });\n    test(\"failure\", async () => {\n      const fn = gensync({\n        sync: throwTestError,\n        async: function () {\n          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n\n          return Promise.reject(JSON.stringify(args));\n        }\n      });\n      await expectResult(fn, 42, {\n        error: \"[42]\"\n      });\n    });\n  });\n  describe(\"'errback' sync handler\", async () => {\n    test(\"success\", async () => {\n      const fn = gensync({\n        sync: throwTestError,\n        errback: function () {\n          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = arguments[_key5];\n          }\n\n          return args.pop()(null, JSON.stringify(args));\n        }\n      });\n      await expectResult(fn, 42, {\n        value: \"[42]\",\n        syncErrback: true\n      });\n    });\n    test(\"failure\", async () => {\n      const fn = gensync({\n        sync: throwTestError,\n        errback: function () {\n          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n            args[_key6] = arguments[_key6];\n          }\n\n          return args.pop()(JSON.stringify(args));\n        }\n      });\n      await expectResult(fn, 42, {\n        error: \"[42]\",\n        syncErrback: true\n      });\n    });\n  });\n  describe(\"'errback' async handler\", async () => {\n    test(\"success\", async () => {\n      const fn = gensync({\n        sync: throwTestError,\n        errback: function () {\n          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n            args[_key7] = arguments[_key7];\n          }\n\n          return process.nextTick(() => args.pop()(null, JSON.stringify(args)));\n        }\n      });\n      await expectResult(fn, 42, {\n        value: \"[42]\"\n      });\n    });\n    test(\"failure\", async () => {\n      const fn = gensync({\n        sync: throwTestError,\n        errback: function () {\n          for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n            args[_key8] = arguments[_key8];\n          }\n\n          return process.nextTick(() => args.pop()(JSON.stringify(args)));\n        }\n      });\n      await expectResult(fn, 42, {\n        error: \"[42]\"\n      });\n    });\n  });\n});\ndescribe(\"gensync(function* () {})\", () => {\n  test(\"sync throw before body\", async () => {\n    const fn = gensync(function* () {\n      let arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : throwTestError();\n    });\n    await expectResult(fn, undefined, {\n      error: TEST_ERROR,\n      syncErrback: true\n    });\n  });\n  test(\"sync throw inside body\", async () => {\n    const fn = gensync(function* () {\n      throwTestError();\n    });\n    await expectResult(fn, undefined, {\n      error: TEST_ERROR,\n      syncErrback: true\n    });\n  });\n  test(\"async throw inside body\", async () => {\n    const fn = gensync(function* () {\n      const val = yield* doSuccess();\n      throwTestError();\n    });\n    await expectResult(fn, undefined, {\n      error: TEST_ERROR\n    });\n  });\n  test(\"error inside body\", async () => {\n    const fn = gensync(function* () {\n      yield* doError();\n    });\n    await expectResult(fn, undefined, {\n      error: DID_ERROR,\n      expectSync: true,\n      syncErrback: false\n    });\n  });\n  test(\"successful return value\", async () => {\n    const fn = gensync(function* () {\n      const value = yield* doSuccess();\n      expect(value).toBe(42);\n      return 84;\n    });\n    await expectResult(fn, undefined, {\n      value: 84,\n      expectSync: true,\n      syncErrback: false\n    });\n  });\n  test(\"successful final value\", async () => {\n    const fn = gensync(function* () {\n      return 42;\n    });\n    await expectResult(fn, undefined, {\n      value: 42,\n      expectSync: true\n    });\n  });\n  test(\"yield unexpected object\", async () => {\n    const fn = gensync(function* () {\n      yield {};\n    });\n\n    try {\n      await fn.async();\n      throwTestError();\n    } catch (err) {\n      expect(err.message).toMatch(/Got unexpected yielded value in gensync generator/);\n      expect(err.code).toBe(\"GENSYNC_EXPECTED_START\");\n    }\n  });\n  test(\"yield suspend yield\", async () => {\n    const fn = gensync(function* () {\n      yield Symbol.for(\"gensync:v1:start\"); // Should be \"yield*\" for no error.\n\n      yield {};\n    });\n\n    try {\n      await fn.async();\n      throwTestError();\n    } catch (err) {\n      expect(err.message).toMatch(/Expected GENSYNC_SUSPEND, got {}/);\n      expect(err.code).toBe(\"GENSYNC_EXPECTED_SUSPEND\");\n    }\n  });\n  test(\"yield suspend return\", async () => {\n    const fn = gensync(function* () {\n      yield Symbol.for(\"gensync:v1:start\"); // Should be \"yield*\" for no error.\n\n      return {};\n    });\n\n    try {\n      await fn.async();\n      throwTestError();\n    } catch (err) {\n      expect(err.message).toMatch(/Unexpected generator completion/);\n      expect(err.code).toBe(\"GENSYNC_EXPECTED_SUSPEND\");\n    }\n  });\n});\ndescribe(\"gensync.all()\", () => {\n  test(\"success\", async () => {\n    const fn = gensync(function* () {\n      const result = yield* gensync.all([doSuccess(), doSuccess()]);\n      expect(result).toEqual([42, 42]);\n    });\n    await expectResult(fn, undefined, {\n      value: undefined,\n      expectSync: true,\n      syncErrback: false\n    });\n  });\n  test(\"error first\", async () => {\n    const fn = gensync(function* () {\n      yield* gensync.all([doError(), doSuccess()]);\n    });\n    await expectResult(fn, undefined, {\n      error: DID_ERROR,\n      expectSync: true,\n      syncErrback: false\n    });\n  });\n  test(\"error last\", async () => {\n    const fn = gensync(function* () {\n      yield* gensync.all([doSuccess(), doError()]);\n    });\n    await expectResult(fn, undefined, {\n      error: DID_ERROR,\n      expectSync: true,\n      syncErrback: false\n    });\n  });\n  test(\"empty list\", async () => {\n    const fn = gensync(function* () {\n      yield* gensync.all([]);\n    });\n    await expectResult(fn, undefined, {\n      value: undefined,\n      expectSync: true,\n      syncErrback: false\n    });\n  });\n});\ndescribe(\"gensync.race()\", () => {\n  test(\"success\", async () => {\n    const fn = gensync(function* () {\n      const result = yield* gensync.race([doSuccess(), doError()]);\n      expect(result).toEqual(42);\n    });\n    await expectResult(fn, undefined, {\n      value: undefined,\n      expectSync: true,\n      syncErrback: false\n    });\n  });\n  test(\"error\", async () => {\n    const fn = gensync(function* () {\n      yield* gensync.race([doError(), doSuccess()]);\n    });\n    await expectResult(fn, undefined, {\n      error: DID_ERROR,\n      expectSync: true,\n      syncErrback: false\n    });\n  });\n});","map":{"version":3,"names":["promisify","require","gensync","TEST_ERROR","Error","DID_ERROR","doSuccess","sync","async","Promise","resolve","doError","reject","throwTestError","expectResult","fn","arg","error","value","expectSync","syncErrback","expect","toThrow","toBe","rejects","resolves","errback","err","val","e","describe","test","message","toMatch","code","readFileSync","name","readFile","readFileAsync","a","b","c","d","f","g","length","arity","args","JSON","stringify","pop","process","nextTick","undefined","Symbol","for","result","all","toEqual","race"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/gensync/test/index.test.js"],"sourcesContent":["\"use strict\";\n\nconst promisify = require(\"util.promisify\");\nconst gensync = require(\"../\");\n\nconst TEST_ERROR = new Error(\"TEST_ERROR\");\n\nconst DID_ERROR = new Error(\"DID_ERROR\");\n\nconst doSuccess = gensync({\n  sync: () => 42,\n  async: () => Promise.resolve(42),\n});\n\nconst doError = gensync({\n  sync: () => {\n    throw DID_ERROR;\n  },\n  async: () => Promise.reject(DID_ERROR),\n});\n\nfunction throwTestError() {\n  throw TEST_ERROR;\n}\n\nasync function expectResult(\n  fn,\n  arg,\n  { error, value, expectSync = false, syncErrback = expectSync }\n) {\n  if (!expectSync) {\n    expect(() => fn.sync(arg)).toThrow(TEST_ERROR);\n  } else if (error) {\n    expect(() => fn.sync(arg)).toThrow(error);\n  } else {\n    expect(fn.sync(arg)).toBe(value);\n  }\n\n  if (error) {\n    await expect(fn.async(arg)).rejects.toBe(error);\n  } else {\n    await expect(fn.async(arg)).resolves.toBe(value);\n  }\n\n  await new Promise((resolve, reject) => {\n    let sync = true;\n    fn.errback(arg, (err, val) => {\n      try {\n        expect(err).toBe(error);\n        expect(val).toBe(value);\n        expect(sync).toBe(syncErrback);\n\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n    sync = false;\n  });\n}\n\ndescribe(\"gensync({})\", () => {\n  describe(\"option validation\", () => {\n    test(\"disallow async and errback handler together\", () => {\n      try {\n        gensync({\n          sync: throwTestError,\n          async: throwTestError,\n          errback: throwTestError,\n        });\n\n        throwTestError();\n      } catch (err) {\n        expect(err.message).toMatch(\n          /Expected one of either opts.async or opts.errback, but got _both_\\./\n        );\n        expect(err.code).toBe(\"GENSYNC_OPTIONS_ERROR\");\n      }\n    });\n\n    test(\"disallow missing sync handler\", () => {\n      try {\n        gensync({\n          async: throwTestError,\n        });\n\n        throwTestError();\n      } catch (err) {\n        expect(err.message).toMatch(/Expected opts.sync to be a function./);\n        expect(err.code).toBe(\"GENSYNC_OPTIONS_ERROR\");\n      }\n    });\n\n    test(\"errback callback required\", () => {\n      const fn = gensync({\n        sync: throwTestError,\n        async: throwTestError,\n      });\n\n      try {\n        fn.errback();\n\n        throwTestError();\n      } catch (err) {\n        expect(err.message).toMatch(/function called without callback/);\n        expect(err.code).toBe(\"GENSYNC_ERRBACK_NO_CALLBACK\");\n      }\n    });\n  });\n\n  describe(\"generator function metadata\", () => {\n    test(\"automatic naming\", () => {\n      expect(\n        gensync({\n          sync: function readFileSync() {},\n          async: () => {},\n        }).name\n      ).toBe(\"readFile\");\n      expect(\n        gensync({\n          sync: function readFile() {},\n          async: () => {},\n        }).name\n      ).toBe(\"readFile\");\n      expect(\n        gensync({\n          sync: function readFileAsync() {},\n          async: () => {},\n        }).name\n      ).toBe(\"readFileAsync\");\n\n      expect(\n        gensync({\n          sync: () => {},\n          async: function readFileSync() {},\n        }).name\n      ).toBe(\"readFileSync\");\n      expect(\n        gensync({\n          sync: () => {},\n          async: function readFile() {},\n        }).name\n      ).toBe(\"readFile\");\n      expect(\n        gensync({\n          sync: () => {},\n          async: function readFileAsync() {},\n        }).name\n      ).toBe(\"readFile\");\n\n      expect(\n        gensync({\n          sync: () => {},\n          errback: function readFileSync() {},\n        }).name\n      ).toBe(\"readFileSync\");\n      expect(\n        gensync({\n          sync: () => {},\n          errback: function readFile() {},\n        }).name\n      ).toBe(\"readFile\");\n      expect(\n        gensync({\n          sync: () => {},\n          errback: function readFileAsync() {},\n        }).name\n      ).toBe(\"readFileAsync\");\n    });\n\n    test(\"explicit naming\", () => {\n      expect(\n        gensync({\n          name: \"readFile\",\n          sync: () => {},\n          async: () => {},\n        }).name\n      ).toBe(\"readFile\");\n    });\n\n    test(\"default arity\", () => {\n      expect(\n        gensync({\n          sync: function(a, b, c, d, e, f, g) {\n            throwTestError();\n          },\n          async: throwTestError,\n        }).length\n      ).toBe(7);\n    });\n\n    test(\"explicit arity\", () => {\n      expect(\n        gensync({\n          arity: 3,\n          sync: throwTestError,\n          async: throwTestError,\n        }).length\n      ).toBe(3);\n    });\n  });\n\n  describe(\"'sync' handler\", async () => {\n    test(\"success\", async () => {\n      const fn = gensync({\n        sync: (...args) => JSON.stringify(args),\n      });\n\n      await expectResult(fn, 42, { value: \"[42]\", expectSync: true });\n    });\n\n    test(\"failure\", async () => {\n      const fn = gensync({\n        sync: (...args) => {\n          throw JSON.stringify(args);\n        },\n      });\n\n      await expectResult(fn, 42, { error: \"[42]\", expectSync: true });\n    });\n  });\n\n  describe(\"'async' handler\", async () => {\n    test(\"success\", async () => {\n      const fn = gensync({\n        sync: throwTestError,\n        async: (...args) => Promise.resolve(JSON.stringify(args)),\n      });\n\n      await expectResult(fn, 42, { value: \"[42]\" });\n    });\n\n    test(\"failure\", async () => {\n      const fn = gensync({\n        sync: throwTestError,\n        async: (...args) => Promise.reject(JSON.stringify(args)),\n      });\n\n      await expectResult(fn, 42, { error: \"[42]\" });\n    });\n  });\n\n  describe(\"'errback' sync handler\", async () => {\n    test(\"success\", async () => {\n      const fn = gensync({\n        sync: throwTestError,\n        errback: (...args) => args.pop()(null, JSON.stringify(args)),\n      });\n\n      await expectResult(fn, 42, { value: \"[42]\", syncErrback: true });\n    });\n\n    test(\"failure\", async () => {\n      const fn = gensync({\n        sync: throwTestError,\n        errback: (...args) => args.pop()(JSON.stringify(args)),\n      });\n\n      await expectResult(fn, 42, { error: \"[42]\", syncErrback: true });\n    });\n  });\n\n  describe(\"'errback' async handler\", async () => {\n    test(\"success\", async () => {\n      const fn = gensync({\n        sync: throwTestError,\n        errback: (...args) =>\n          process.nextTick(() => args.pop()(null, JSON.stringify(args))),\n      });\n\n      await expectResult(fn, 42, { value: \"[42]\" });\n    });\n\n    test(\"failure\", async () => {\n      const fn = gensync({\n        sync: throwTestError,\n        errback: (...args) =>\n          process.nextTick(() => args.pop()(JSON.stringify(args))),\n      });\n\n      await expectResult(fn, 42, { error: \"[42]\" });\n    });\n  });\n});\n\ndescribe(\"gensync(function* () {})\", () => {\n  test(\"sync throw before body\", async () => {\n    const fn = gensync(function*(arg = throwTestError()) {});\n\n    await expectResult(fn, undefined, {\n      error: TEST_ERROR,\n      syncErrback: true,\n    });\n  });\n\n  test(\"sync throw inside body\", async () => {\n    const fn = gensync(function*() {\n      throwTestError();\n    });\n\n    await expectResult(fn, undefined, {\n      error: TEST_ERROR,\n      syncErrback: true,\n    });\n  });\n\n  test(\"async throw inside body\", async () => {\n    const fn = gensync(function*() {\n      const val = yield* doSuccess();\n      throwTestError();\n    });\n\n    await expectResult(fn, undefined, {\n      error: TEST_ERROR,\n    });\n  });\n\n  test(\"error inside body\", async () => {\n    const fn = gensync(function*() {\n      yield* doError();\n    });\n\n    await expectResult(fn, undefined, {\n      error: DID_ERROR,\n      expectSync: true,\n      syncErrback: false,\n    });\n  });\n\n  test(\"successful return value\", async () => {\n    const fn = gensync(function*() {\n      const value = yield* doSuccess();\n\n      expect(value).toBe(42);\n\n      return 84;\n    });\n\n    await expectResult(fn, undefined, {\n      value: 84,\n      expectSync: true,\n      syncErrback: false,\n    });\n  });\n\n  test(\"successful final value\", async () => {\n    const fn = gensync(function*() {\n      return 42;\n    });\n\n    await expectResult(fn, undefined, {\n      value: 42,\n      expectSync: true,\n    });\n  });\n\n  test(\"yield unexpected object\", async () => {\n    const fn = gensync(function*() {\n      yield {};\n    });\n\n    try {\n      await fn.async();\n\n      throwTestError();\n    } catch (err) {\n      expect(err.message).toMatch(\n        /Got unexpected yielded value in gensync generator/\n      );\n      expect(err.code).toBe(\"GENSYNC_EXPECTED_START\");\n    }\n  });\n\n  test(\"yield suspend yield\", async () => {\n    const fn = gensync(function*() {\n      yield Symbol.for(\"gensync:v1:start\");\n\n      // Should be \"yield*\" for no error.\n      yield {};\n    });\n\n    try {\n      await fn.async();\n\n      throwTestError();\n    } catch (err) {\n      expect(err.message).toMatch(/Expected GENSYNC_SUSPEND, got {}/);\n      expect(err.code).toBe(\"GENSYNC_EXPECTED_SUSPEND\");\n    }\n  });\n\n  test(\"yield suspend return\", async () => {\n    const fn = gensync(function*() {\n      yield Symbol.for(\"gensync:v1:start\");\n\n      // Should be \"yield*\" for no error.\n      return {};\n    });\n\n    try {\n      await fn.async();\n\n      throwTestError();\n    } catch (err) {\n      expect(err.message).toMatch(/Unexpected generator completion/);\n      expect(err.code).toBe(\"GENSYNC_EXPECTED_SUSPEND\");\n    }\n  });\n});\n\ndescribe(\"gensync.all()\", () => {\n  test(\"success\", async () => {\n    const fn = gensync(function*() {\n      const result = yield* gensync.all([doSuccess(), doSuccess()]);\n\n      expect(result).toEqual([42, 42]);\n    });\n\n    await expectResult(fn, undefined, {\n      value: undefined,\n      expectSync: true,\n      syncErrback: false,\n    });\n  });\n\n  test(\"error first\", async () => {\n    const fn = gensync(function*() {\n      yield* gensync.all([doError(), doSuccess()]);\n    });\n\n    await expectResult(fn, undefined, {\n      error: DID_ERROR,\n      expectSync: true,\n      syncErrback: false,\n    });\n  });\n\n  test(\"error last\", async () => {\n    const fn = gensync(function*() {\n      yield* gensync.all([doSuccess(), doError()]);\n    });\n\n    await expectResult(fn, undefined, {\n      error: DID_ERROR,\n      expectSync: true,\n      syncErrback: false,\n    });\n  });\n\n  test(\"empty list\", async () => {\n    const fn = gensync(function*() {\n      yield* gensync.all([]);\n    });\n\n    await expectResult(fn, undefined, {\n      value: undefined,\n      expectSync: true,\n      syncErrback: false,\n    });\n  });\n});\n\ndescribe(\"gensync.race()\", () => {\n  test(\"success\", async () => {\n    const fn = gensync(function*() {\n      const result = yield* gensync.race([doSuccess(), doError()]);\n\n      expect(result).toEqual(42);\n    });\n\n    await expectResult(fn, undefined, {\n      value: undefined,\n      expectSync: true,\n      syncErrback: false,\n    });\n  });\n\n  test(\"error\", async () => {\n    const fn = gensync(function*() {\n      yield* gensync.race([doError(), doSuccess()]);\n    });\n\n    await expectResult(fn, undefined, {\n      error: DID_ERROR,\n      expectSync: true,\n      syncErrback: false,\n    });\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}