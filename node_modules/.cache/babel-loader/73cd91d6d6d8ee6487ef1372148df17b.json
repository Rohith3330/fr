{"ast":null,"code":"'use strict';\n\nconst defaultAlphabetIndexMap = [];\n\nfunction isNumberCode(code) {\n  return code >= 48\n  /* '0' */\n  && code <= 57\n  /* '9' */\n  ;\n}\n\nfunction naturalCompare(a, b, opts) {\n  if (typeof a !== 'string') {\n    throw new TypeError(`The first argument must be a string. Received type '${typeof a}'`);\n  }\n\n  if (typeof b !== 'string') {\n    throw new TypeError(`The second argument must be a string. Received type '${typeof b}'`);\n  }\n\n  const lengthA = a.length;\n  const lengthB = b.length;\n  let indexA = 0;\n  let indexB = 0;\n  let alphabetIndexMap = defaultAlphabetIndexMap;\n  let firstDifferenceInLeadingZeros = 0;\n\n  if (opts) {\n    if (opts.caseInsensitive) {\n      a = a.toLowerCase();\n      b = b.toLowerCase();\n    }\n\n    if (opts.alphabet) {\n      alphabetIndexMap = buildAlphabetIndexMap(opts.alphabet);\n    }\n  }\n\n  while (indexA < lengthA && indexB < lengthB) {\n    let charCodeA = a.charCodeAt(indexA);\n    let charCodeB = b.charCodeAt(indexB);\n\n    if (isNumberCode(charCodeA)) {\n      if (!isNumberCode(charCodeB)) {\n        return charCodeA - charCodeB;\n      }\n\n      let numStartA = indexA;\n      let numStartB = indexB;\n\n      while (charCodeA === 48\n      /* '0' */\n      && ++numStartA < lengthA) {\n        charCodeA = a.charCodeAt(numStartA);\n      }\n\n      while (charCodeB === 48\n      /* '0' */\n      && ++numStartB < lengthB) {\n        charCodeB = b.charCodeAt(numStartB);\n      }\n\n      if (numStartA !== numStartB && firstDifferenceInLeadingZeros === 0) {\n        firstDifferenceInLeadingZeros = numStartA - numStartB;\n      }\n\n      let numEndA = numStartA;\n      let numEndB = numStartB;\n\n      while (numEndA < lengthA && isNumberCode(a.charCodeAt(numEndA))) {\n        ++numEndA;\n      }\n\n      while (numEndB < lengthB && isNumberCode(b.charCodeAt(numEndB))) {\n        ++numEndB;\n      }\n\n      let difference = numEndA - numStartA - numEndB + numStartB; // numA length - numB length\n\n      if (difference !== 0) {\n        return difference;\n      }\n\n      while (numStartA < numEndA) {\n        difference = a.charCodeAt(numStartA++) - b.charCodeAt(numStartB++);\n\n        if (difference !== 0) {\n          return difference;\n        }\n      }\n\n      indexA = numEndA;\n      indexB = numEndB;\n      continue;\n    }\n\n    if (charCodeA !== charCodeB) {\n      if (charCodeA < alphabetIndexMap.length && charCodeB < alphabetIndexMap.length && alphabetIndexMap[charCodeA] !== -1 && alphabetIndexMap[charCodeB] !== -1) {\n        return alphabetIndexMap[charCodeA] - alphabetIndexMap[charCodeB];\n      }\n\n      return charCodeA - charCodeB;\n    }\n\n    ++indexA;\n    ++indexB;\n  }\n\n  if (indexA < lengthA) {\n    // `b` is a substring of `a`\n    return 1;\n  }\n\n  if (indexB < lengthB) {\n    // `a` is a substring of `b`\n    return -1;\n  }\n\n  return firstDifferenceInLeadingZeros;\n}\n\nconst alphabetIndexMapCache = {};\n\nfunction buildAlphabetIndexMap(alphabet) {\n  const existingMap = alphabetIndexMapCache[alphabet];\n\n  if (existingMap !== undefined) {\n    return existingMap;\n  }\n\n  const indexMap = [];\n  const maxCharCode = alphabet.split('').reduce((maxCode, char) => {\n    return Math.max(maxCode, char.charCodeAt(0));\n  }, 0);\n\n  for (let i = 0; i <= maxCharCode; i++) {\n    indexMap.push(-1);\n  }\n\n  for (let i = 0; i < alphabet.length; i++) {\n    indexMap[alphabet.charCodeAt(i)] = i;\n  }\n\n  alphabetIndexMapCache[alphabet] = indexMap;\n  return indexMap;\n}\n\nmodule.exports = naturalCompare;","map":{"version":3,"names":["defaultAlphabetIndexMap","isNumberCode","code","naturalCompare","a","b","opts","TypeError","lengthA","length","lengthB","indexA","indexB","alphabetIndexMap","firstDifferenceInLeadingZeros","caseInsensitive","toLowerCase","alphabet","buildAlphabetIndexMap","charCodeA","charCodeAt","charCodeB","numStartA","numStartB","numEndA","numEndB","difference","alphabetIndexMapCache","existingMap","undefined","indexMap","maxCharCode","split","reduce","maxCode","char","Math","max","i","push","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/string-natural-compare/natural-compare.js"],"sourcesContent":["'use strict';\n\nconst defaultAlphabetIndexMap = [];\n\nfunction isNumberCode(code) {\n  return code >= 48/* '0' */ && code <= 57/* '9' */;\n}\n\nfunction naturalCompare(a, b, opts) {\n  if (typeof a !== 'string') {\n    throw new TypeError(`The first argument must be a string. Received type '${typeof a}'`);\n  }\n  if (typeof b !== 'string') {\n    throw new TypeError(`The second argument must be a string. Received type '${typeof b}'`);\n  }\n\n  const lengthA = a.length;\n  const lengthB = b.length;\n  let indexA = 0;\n  let indexB = 0;\n  let alphabetIndexMap = defaultAlphabetIndexMap;\n  let firstDifferenceInLeadingZeros = 0;\n\n  if (opts) {\n    if (opts.caseInsensitive) {\n      a = a.toLowerCase();\n      b = b.toLowerCase();\n    }\n\n    if (opts.alphabet) {\n      alphabetIndexMap = buildAlphabetIndexMap(opts.alphabet);\n    }\n  }\n\n  while (indexA < lengthA && indexB < lengthB) {\n    let charCodeA = a.charCodeAt(indexA);\n    let charCodeB = b.charCodeAt(indexB);\n\n    if (isNumberCode(charCodeA)) {\n      if (!isNumberCode(charCodeB)) {\n        return charCodeA - charCodeB;\n      }\n\n      let numStartA = indexA;\n      let numStartB = indexB;\n\n      while (charCodeA === 48/* '0' */ && ++numStartA < lengthA) {\n        charCodeA = a.charCodeAt(numStartA);\n      }\n      while (charCodeB === 48/* '0' */ && ++numStartB < lengthB) {\n        charCodeB = b.charCodeAt(numStartB);\n      }\n\n      if (numStartA !== numStartB && firstDifferenceInLeadingZeros === 0) {\n        firstDifferenceInLeadingZeros = numStartA - numStartB;\n      }\n\n      let numEndA = numStartA;\n      let numEndB = numStartB;\n\n      while (numEndA < lengthA && isNumberCode(a.charCodeAt(numEndA))) {\n        ++numEndA;\n      }\n      while (numEndB < lengthB && isNumberCode(b.charCodeAt(numEndB))) {\n        ++numEndB;\n      }\n\n      let difference = numEndA - numStartA - numEndB + numStartB; // numA length - numB length\n      if (difference !== 0) {\n        return difference;\n      }\n\n      while (numStartA < numEndA) {\n        difference = a.charCodeAt(numStartA++) - b.charCodeAt(numStartB++);\n        if (difference !== 0) {\n          return difference;\n        }\n      }\n\n      indexA = numEndA;\n      indexB = numEndB;\n      continue;\n    }\n\n    if (charCodeA !== charCodeB) {\n      if (\n        charCodeA < alphabetIndexMap.length &&\n        charCodeB < alphabetIndexMap.length &&\n        alphabetIndexMap[charCodeA] !== -1 &&\n        alphabetIndexMap[charCodeB] !== -1\n      ) {\n        return alphabetIndexMap[charCodeA] - alphabetIndexMap[charCodeB];\n      }\n\n      return charCodeA - charCodeB;\n    }\n\n    ++indexA;\n    ++indexB;\n  }\n\n  if (indexA < lengthA) { // `b` is a substring of `a`\n    return 1;\n  }\n\n  if (indexB < lengthB) { // `a` is a substring of `b`\n    return -1;\n  }\n\n  return firstDifferenceInLeadingZeros;\n}\n\nconst alphabetIndexMapCache = {};\n\nfunction buildAlphabetIndexMap(alphabet) {\n  const existingMap = alphabetIndexMapCache[alphabet];\n  if (existingMap !== undefined) {\n    return existingMap;\n  }\n\n  const indexMap = [];\n  const maxCharCode = alphabet.split('').reduce((maxCode, char) => {\n    return Math.max(maxCode, char.charCodeAt(0));\n  }, 0);\n\n  for (let i = 0; i <= maxCharCode; i++) {\n    indexMap.push(-1);\n  }\n\n  for (let i = 0; i < alphabet.length; i++) {\n    indexMap[alphabet.charCodeAt(i)] = i;\n  }\n\n  alphabetIndexMapCache[alphabet] = indexMap;\n\n  return indexMap;\n}\n\nmodule.exports = naturalCompare;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}