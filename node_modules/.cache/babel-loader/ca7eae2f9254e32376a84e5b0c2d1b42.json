{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nconst getMemberExpressionName = member => {\n  if (!member.computed) {\n    return member.property.name;\n  }\n\n  if (member.property.type === utils_1.AST_NODE_TYPES.Literal && typeof member.property.value === 'string') {\n    return member.property.value;\n  }\n\n  return null;\n};\n\nexports.default = util.createRule({\n  name: 'prefer-reduce-type-parameter',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Enforce using type parameter when calling `Array#reduce` instead of casting',\n      recommended: 'strict',\n      requiresTypeChecking: true\n    },\n    messages: {\n      preferTypeParameter: 'Unnecessary cast: Array#reduce accepts a type parameter for the default value.'\n    },\n    fixable: 'code',\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    const service = util.getParserServices(context);\n    const checker = service.program.getTypeChecker();\n    return {\n      'CallExpression > MemberExpression.callee'(callee) {\n        if (getMemberExpressionName(callee) !== 'reduce') {\n          return;\n        }\n\n        const [, secondArg] = callee.parent.arguments;\n\n        if (callee.parent.arguments.length < 2 || !util.isTypeAssertion(secondArg)) {\n          return;\n        } // Get the symbol of the `reduce` method.\n\n\n        const tsNode = service.esTreeNodeToTSNodeMap.get(callee.object);\n        const calleeObjType = util.getConstrainedTypeAtLocation(checker, tsNode); // Check the owner type of the `reduce` method.\n\n        if (checker.isArrayType(calleeObjType)) {\n          context.report({\n            messageId: 'preferTypeParameter',\n            node: secondArg,\n            fix: fixer => {\n              const fixes = [fixer.removeRange([secondArg.range[0], secondArg.expression.range[0]]), fixer.removeRange([secondArg.expression.range[1], secondArg.range[1]])];\n\n              if (!callee.parent.typeParameters) {\n                fixes.push(fixer.insertTextAfter(callee, `<${context.getSourceCode().getText(secondArg.typeAnnotation)}>`));\n              }\n\n              return fixes;\n            }\n          });\n          return;\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["getMemberExpressionName","member","computed","property","name","type","utils_1","Literal","value","exports","util","createRule","meta","docs","description","recommended","requiresTypeChecking","messages","preferTypeParameter","fixable","schema","defaultOptions","create","context","service","getParserServices","checker","program","getTypeChecker","callee","secondArg","parent","arguments","length","isTypeAssertion","tsNode","esTreeNodeToTSNodeMap","get","object","calleeObjType","getConstrainedTypeAtLocation","isArrayType","report","messageId","node","fix","fixer","fixes","removeRange","range","expression","typeParameters","push","insertTextAfter","getSourceCode","getText","typeAnnotation"],"sources":["../../src/rules/prefer-reduce-type-parameter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}