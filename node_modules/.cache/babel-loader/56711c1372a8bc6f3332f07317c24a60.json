{"ast":null,"code":"const DIRECTIONS = new Set(['normal', 'reverse', 'alternate', 'alternate-reverse']);\nconst PLAY_STATES = new Set(['running', 'paused']);\nconst FILL_MODES = new Set(['none', 'forwards', 'backwards', 'both']);\nconst ITERATION_COUNTS = new Set(['infinite']);\nconst TIMINGS = new Set(['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'step-start', 'step-end']);\nconst TIMING_FNS = ['cubic-bezier', 'steps'];\nconst COMMA = /\\,(?![^(]*\\))/g; // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.\n\nconst SPACE = /\\ +(?![^(]*\\))/g; // Similar to the one above, but with spaces instead.\n\nconst TIME = /^(-?[\\d.]+m?s)$/;\nconst DIGIT = /^(\\d+)$/;\nexport default function parseAnimationValue(input) {\n  let animations = input.split(COMMA);\n  return animations.map(animation => {\n    let value = animation.trim();\n    let result = {\n      value\n    };\n    let parts = value.split(SPACE);\n    let seen = new Set();\n\n    for (let part of parts) {\n      if (!seen.has('DIRECTIONS') && DIRECTIONS.has(part)) {\n        result.direction = part;\n        seen.add('DIRECTIONS');\n      } else if (!seen.has('PLAY_STATES') && PLAY_STATES.has(part)) {\n        result.playState = part;\n        seen.add('PLAY_STATES');\n      } else if (!seen.has('FILL_MODES') && FILL_MODES.has(part)) {\n        result.fillMode = part;\n        seen.add('FILL_MODES');\n      } else if (!seen.has('ITERATION_COUNTS') && (ITERATION_COUNTS.has(part) || DIGIT.test(part))) {\n        result.iterationCount = part;\n        seen.add('ITERATION_COUNTS');\n      } else if (!seen.has('TIMING_FUNCTION') && TIMINGS.has(part)) {\n        result.timingFunction = part;\n        seen.add('TIMING_FUNCTION');\n      } else if (!seen.has('TIMING_FUNCTION') && TIMING_FNS.some(f => part.startsWith(`${f}(`))) {\n        result.timingFunction = part;\n        seen.add('TIMING_FUNCTION');\n      } else if (!seen.has('DURATION') && TIME.test(part)) {\n        result.duration = part;\n        seen.add('DURATION');\n      } else if (!seen.has('DELAY') && TIME.test(part)) {\n        result.delay = part;\n        seen.add('DELAY');\n      } else if (!seen.has('NAME')) {\n        result.name = part;\n        seen.add('NAME');\n      } else {\n        if (!result.unknown) result.unknown = [];\n        result.unknown.push(part);\n      }\n    }\n\n    return result;\n  });\n}","map":{"version":3,"names":["DIRECTIONS","Set","PLAY_STATES","FILL_MODES","ITERATION_COUNTS","TIMINGS","TIMING_FNS","COMMA","SPACE","TIME","DIGIT","parseAnimationValue","input","animations","split","map","animation","value","trim","result","parts","seen","part","has","direction","add","playState","fillMode","test","iterationCount","timingFunction","some","f","startsWith","duration","delay","name","unknown","push"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/util/parseAnimationValue.js"],"sourcesContent":["const DIRECTIONS = new Set(['normal', 'reverse', 'alternate', 'alternate-reverse'])\nconst PLAY_STATES = new Set(['running', 'paused'])\nconst FILL_MODES = new Set(['none', 'forwards', 'backwards', 'both'])\nconst ITERATION_COUNTS = new Set(['infinite'])\nconst TIMINGS = new Set([\n  'linear',\n  'ease',\n  'ease-in',\n  'ease-out',\n  'ease-in-out',\n  'step-start',\n  'step-end',\n])\nconst TIMING_FNS = ['cubic-bezier', 'steps']\n\nconst COMMA = /\\,(?![^(]*\\))/g // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.\nconst SPACE = /\\ +(?![^(]*\\))/g // Similar to the one above, but with spaces instead.\nconst TIME = /^(-?[\\d.]+m?s)$/\nconst DIGIT = /^(\\d+)$/\n\nexport default function parseAnimationValue(input) {\n  let animations = input.split(COMMA)\n  return animations.map((animation) => {\n    let value = animation.trim()\n    let result = { value }\n    let parts = value.split(SPACE)\n    let seen = new Set()\n\n    for (let part of parts) {\n      if (!seen.has('DIRECTIONS') && DIRECTIONS.has(part)) {\n        result.direction = part\n        seen.add('DIRECTIONS')\n      } else if (!seen.has('PLAY_STATES') && PLAY_STATES.has(part)) {\n        result.playState = part\n        seen.add('PLAY_STATES')\n      } else if (!seen.has('FILL_MODES') && FILL_MODES.has(part)) {\n        result.fillMode = part\n        seen.add('FILL_MODES')\n      } else if (\n        !seen.has('ITERATION_COUNTS') &&\n        (ITERATION_COUNTS.has(part) || DIGIT.test(part))\n      ) {\n        result.iterationCount = part\n        seen.add('ITERATION_COUNTS')\n      } else if (!seen.has('TIMING_FUNCTION') && TIMINGS.has(part)) {\n        result.timingFunction = part\n        seen.add('TIMING_FUNCTION')\n      } else if (!seen.has('TIMING_FUNCTION') && TIMING_FNS.some((f) => part.startsWith(`${f}(`))) {\n        result.timingFunction = part\n        seen.add('TIMING_FUNCTION')\n      } else if (!seen.has('DURATION') && TIME.test(part)) {\n        result.duration = part\n        seen.add('DURATION')\n      } else if (!seen.has('DELAY') && TIME.test(part)) {\n        result.delay = part\n        seen.add('DELAY')\n      } else if (!seen.has('NAME')) {\n        result.name = part\n        seen.add('NAME')\n      } else {\n        if (!result.unknown) result.unknown = []\n        result.unknown.push(part)\n      }\n    }\n\n    return result\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}