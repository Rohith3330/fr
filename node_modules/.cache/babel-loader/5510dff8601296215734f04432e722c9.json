{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { castImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { notEqual } from './NotEqual';\nimport { real } from './Real';\nimport { int } from '../kernel_utils/int';\nexport function cast(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x;\n  var dtype = attrs.dtype; // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x: x\n        },\n        backend: backend\n      });\n    }\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    var zerosTensor = tf.zeros(x.shape);\n    var floatX = cast({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    var result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensor\n      },\n      backend: backend\n    });\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  }\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    var realPart = real({\n      inputs: {\n        input: x\n      },\n      backend: backend\n    });\n    var _result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend: backend,\n      attrs: {\n        dtype: dtype\n      }\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    return _result;\n  }\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    var _result2 = identity({\n      inputs: {\n        x: x\n      },\n      backend: backend\n    });\n    return {\n      dataId: _result2.dataId,\n      shape: _result2.shape,\n      dtype: dtype\n    };\n  }\n  if (backend.shouldExecuteOnCPU([x])) {\n    var values = backend.texData.get(x.dataId).values;\n    var _castImplCPU = castImplCPU(values, x.shape, x.dtype, dtype),\n      _castImplCPU2 = _slicedToArray(_castImplCPU, 3),\n      resultShape = _castImplCPU2[0],\n      resultType = _castImplCPU2[1],\n      resultData = _castImplCPU2[2];\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n  if (dtype === 'bool') {\n    var zerosTensorInfo = backend.makeTensorInfo([], 'bool', util.getTypedArrayFromDType('bool', 1));\n    var binaryInputs = {\n      a: x,\n      b: zerosTensorInfo\n    };\n    var _result3 = notEqual({\n      inputs: binaryInputs,\n      backend: backend\n    });\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return _result3;\n  }\n  throw new Error(\"Error in Cast: failed to cast \".concat(x.dtype, \" to \").concat(dtype));\n}\nexport var castConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast\n};","map":null,"metadata":{},"sourceType":"module"}