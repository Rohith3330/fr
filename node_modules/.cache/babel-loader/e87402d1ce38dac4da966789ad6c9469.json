{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProgramsForProjects = exports.createWatchProgram = exports.clearWatchCaches = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_1 = __importDefault(require(\"fs\"));\n\nconst semver_1 = __importDefault(require(\"semver\"));\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst shared_1 = require(\"./shared\");\n\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:createWatchProgram');\n/**\n * Maps tsconfig paths to their corresponding file contents and resulting watches\n */\n\nconst knownWatchProgramMap = new Map();\n/**\n * Maps file/folder paths to their set of corresponding watch callbacks\n * There may be more than one per file/folder if a file/folder is shared between projects\n */\n\nconst fileWatchCallbackTrackingMap = new Map();\nconst folderWatchCallbackTrackingMap = new Map();\n/**\n * Stores the list of known files for each program\n */\n\nconst programFileListCache = new Map();\n/**\n * Caches the last modified time of the tsconfig files\n */\n\nconst tsconfigLastModifiedTimestampCache = new Map();\nconst parsedFilesSeenHash = new Map();\n/**\n * Clear all of the parser caches.\n * This should only be used in testing to ensure the parser is clean between tests.\n */\n\nfunction clearWatchCaches() {\n  knownWatchProgramMap.clear();\n  fileWatchCallbackTrackingMap.clear();\n  folderWatchCallbackTrackingMap.clear();\n  parsedFilesSeenHash.clear();\n  programFileListCache.clear();\n  tsconfigLastModifiedTimestampCache.clear();\n}\n\nexports.clearWatchCaches = clearWatchCaches;\n\nfunction saveWatchCallback(trackingMap) {\n  return (fileName, callback) => {\n    const normalizedFileName = (0, shared_1.getCanonicalFileName)(fileName);\n\n    const watchers = (() => {\n      let watchers = trackingMap.get(normalizedFileName);\n\n      if (!watchers) {\n        watchers = new Set();\n        trackingMap.set(normalizedFileName, watchers);\n      }\n\n      return watchers;\n    })();\n\n    watchers.add(callback);\n    return {\n      close: () => {\n        watchers.delete(callback);\n      }\n    };\n  };\n}\n/**\n * Holds information about the file currently being linted\n */\n\n\nconst currentLintOperationState = {\n  code: '',\n  filePath: ''\n};\n/**\n * Appropriately report issues found when reading a config file\n * @param diagnostic The diagnostic raised when creating a program\n */\n\nfunction diagnosticReporter(diagnostic) {\n  throw new Error(ts.flattenDiagnosticMessageText(diagnostic.messageText, ts.sys.newLine));\n}\n/**\n * Hash content for compare content.\n * @param content hashed contend\n * @returns hashed result\n */\n\n\nfunction createHash(content) {\n  var _a; // No ts.sys in browser environments.\n\n\n  if ((_a = ts.sys) === null || _a === void 0 ? void 0 : _a.createHash) {\n    return ts.sys.createHash(content);\n  }\n\n  return content;\n}\n\nfunction updateCachedFileList(tsconfigPath, program, extra) {\n  const fileList = extra.EXPERIMENTAL_useSourceOfProjectReferenceRedirect ? new Set(program.getSourceFiles().map(sf => (0, shared_1.getCanonicalFileName)(sf.fileName))) : new Set(program.getRootFileNames().map(f => (0, shared_1.getCanonicalFileName)(f)));\n  programFileListCache.set(tsconfigPath, fileList);\n  return fileList;\n}\n/**\n * Calculate project environments using options provided by consumer and paths from config\n * @param code The code being linted\n * @param filePathIn The path of the file being parsed\n * @param extra.tsconfigRootDir The root directory for relative tsconfig paths\n * @param extra.projects Provided tsconfig paths\n * @returns The programs corresponding to the supplied tsconfig paths\n */\n\n\nfunction getProgramsForProjects(code, filePathIn, extra) {\n  const filePath = (0, shared_1.getCanonicalFileName)(filePathIn);\n  const results = []; // preserve reference to code and file being linted\n\n  currentLintOperationState.code = code;\n  currentLintOperationState.filePath = filePath; // Update file version if necessary\n\n  const fileWatchCallbacks = fileWatchCallbackTrackingMap.get(filePath);\n  const codeHash = createHash(code);\n\n  if (parsedFilesSeenHash.get(filePath) !== codeHash && fileWatchCallbacks && fileWatchCallbacks.size > 0) {\n    fileWatchCallbacks.forEach(cb => cb(filePath, ts.FileWatcherEventKind.Changed));\n  }\n  /*\n   * before we go into the process of attempting to find and update every program\n   * see if we know of a program that contains this file\n   */\n\n\n  for (const [tsconfigPath, existingWatch] of knownWatchProgramMap.entries()) {\n    let fileList = programFileListCache.get(tsconfigPath);\n    let updatedProgram = null;\n\n    if (!fileList) {\n      updatedProgram = existingWatch.getProgram().getProgram();\n      fileList = updateCachedFileList(tsconfigPath, updatedProgram, extra);\n    }\n\n    if (fileList.has(filePath)) {\n      log('Found existing program for file. %s', filePath);\n      updatedProgram = updatedProgram !== null && updatedProgram !== void 0 ? updatedProgram : existingWatch.getProgram().getProgram(); // sets parent pointers in source files\n\n      updatedProgram.getTypeChecker();\n      return [updatedProgram];\n    }\n  }\n\n  log('File did not belong to any existing programs, moving to create/update. %s', filePath);\n  /*\n   * We don't know of a program that contains the file, this means that either:\n   * - the required program hasn't been created yet, or\n   * - the file is new/renamed, and the program hasn't been updated.\n   */\n\n  for (const tsconfigPath of extra.projects) {\n    const existingWatch = knownWatchProgramMap.get(tsconfigPath);\n\n    if (existingWatch) {\n      const updatedProgram = maybeInvalidateProgram(existingWatch, filePath, tsconfigPath);\n\n      if (!updatedProgram) {\n        continue;\n      } // sets parent pointers in source files\n\n\n      updatedProgram.getTypeChecker(); // cache and check the file list\n\n      const fileList = updateCachedFileList(tsconfigPath, updatedProgram, extra);\n\n      if (fileList.has(filePath)) {\n        log('Found updated program for file. %s', filePath); // we can return early because we know this program contains the file\n\n        return [updatedProgram];\n      }\n\n      results.push(updatedProgram);\n      continue;\n    }\n\n    const programWatch = createWatchProgram(tsconfigPath, extra);\n    knownWatchProgramMap.set(tsconfigPath, programWatch);\n    const program = programWatch.getProgram().getProgram(); // sets parent pointers in source files\n\n    program.getTypeChecker(); // cache and check the file list\n\n    const fileList = updateCachedFileList(tsconfigPath, program, extra);\n\n    if (fileList.has(filePath)) {\n      log('Found program for file. %s', filePath); // we can return early because we know this program contains the file\n\n      return [program];\n    }\n\n    results.push(program);\n  }\n\n  return results;\n}\n\nexports.getProgramsForProjects = getProgramsForProjects;\nconst isRunningNoTimeoutFix = semver_1.default.satisfies(ts.version, '>=3.9.0-beta', {\n  includePrerelease: true\n});\n\nfunction createWatchProgram(tsconfigPath, extra) {\n  log('Creating watch program for %s.', tsconfigPath); // create compiler host\n\n  const watchCompilerHost = ts.createWatchCompilerHost(tsconfigPath, (0, shared_1.createDefaultCompilerOptionsFromExtra)(extra), ts.sys, ts.createAbstractBuilder, diagnosticReporter,\n  /*reportWatchStatus*/\n  () => {});\n\n  if (extra.moduleResolver) {\n    watchCompilerHost.resolveModuleNames = (0, shared_1.getModuleResolver)(extra.moduleResolver).resolveModuleNames;\n  } // ensure readFile reads the code being linted instead of the copy on disk\n\n\n  const oldReadFile = watchCompilerHost.readFile;\n\n  watchCompilerHost.readFile = (filePathIn, encoding) => {\n    const filePath = (0, shared_1.getCanonicalFileName)(filePathIn);\n    const fileContent = filePath === currentLintOperationState.filePath ? currentLintOperationState.code : oldReadFile(filePath, encoding);\n\n    if (fileContent !== undefined) {\n      parsedFilesSeenHash.set(filePath, createHash(fileContent));\n    }\n\n    return fileContent;\n  }; // ensure process reports error on failure instead of exiting process immediately\n\n\n  watchCompilerHost.onUnRecoverableConfigFileDiagnostic = diagnosticReporter; // ensure process doesn't emit programs\n\n  watchCompilerHost.afterProgramCreate = program => {\n    // report error if there are any errors in the config file\n    const configFileDiagnostics = program.getConfigFileParsingDiagnostics().filter(diag => diag.category === ts.DiagnosticCategory.Error && diag.code !== 18003);\n\n    if (configFileDiagnostics.length > 0) {\n      diagnosticReporter(configFileDiagnostics[0]);\n    }\n  };\n  /*\n   * From the CLI, the file watchers won't matter, as the files will be parsed once and then forgotten.\n   * When running from an IDE, these watchers will let us tell typescript about changes.\n   *\n   * ESLint IDE plugins will send us unfinished file content as the user types (before it's saved to disk).\n   * We use the file watchers to tell typescript about this latest file content.\n   *\n   * When files are created (or renamed), we won't know about them because we have no filesystem watchers attached.\n   * We use the folder watchers to tell typescript it needs to go and find new files in the project folders.\n   */\n\n\n  watchCompilerHost.watchFile = saveWatchCallback(fileWatchCallbackTrackingMap);\n  watchCompilerHost.watchDirectory = saveWatchCallback(folderWatchCallbackTrackingMap); // allow files with custom extensions to be included in program (uses internal ts api)\n\n  const oldOnDirectoryStructureHostCreate = watchCompilerHost.onCachedDirectoryStructureHostCreate;\n\n  watchCompilerHost.onCachedDirectoryStructureHostCreate = host => {\n    const oldReadDirectory = host.readDirectory;\n\n    host.readDirectory = (path, extensions, exclude, include, depth) => oldReadDirectory(path, !extensions ? undefined : extensions.concat(extra.extraFileExtensions), exclude, include, depth);\n\n    oldOnDirectoryStructureHostCreate(host);\n  }; // This works only on 3.9\n\n\n  watchCompilerHost.extraFileExtensions = extra.extraFileExtensions.map(extension => ({\n    extension,\n    isMixedContent: true,\n    scriptKind: ts.ScriptKind.Deferred\n  }));\n  watchCompilerHost.trace = log;\n  /**\n   * TODO: this needs refinement and development, but we're allowing users to opt-in to this for now for testing and feedback.\n   * See https://github.com/typescript-eslint/typescript-eslint/issues/2094\n   */\n\n  watchCompilerHost.useSourceOfProjectReferenceRedirect = () => extra.EXPERIMENTAL_useSourceOfProjectReferenceRedirect; // Since we don't want to asynchronously update program we want to disable timeout methods\n  // So any changes in the program will be delayed and updated when getProgram is called on watch\n\n\n  let callback;\n\n  if (isRunningNoTimeoutFix) {\n    watchCompilerHost.setTimeout = undefined;\n    watchCompilerHost.clearTimeout = undefined;\n  } else {\n    log('Running without timeout fix'); // But because of https://github.com/microsoft/TypeScript/pull/37308 we cannot just set it to undefined\n    // instead save it and call before getProgram is called\n\n    watchCompilerHost.setTimeout = function (cb, _ms) {\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      callback = cb.bind(\n      /*this*/\n      undefined, ...args);\n      return callback;\n    };\n\n    watchCompilerHost.clearTimeout = () => {\n      callback = undefined;\n    };\n  }\n\n  const watch = ts.createWatchProgram(watchCompilerHost);\n\n  if (!isRunningNoTimeoutFix) {\n    const originalGetProgram = watch.getProgram;\n\n    watch.getProgram = () => {\n      if (callback) {\n        callback();\n      }\n\n      callback = undefined;\n      return originalGetProgram.call(watch);\n    };\n  }\n\n  return watch;\n}\n\nexports.createWatchProgram = createWatchProgram;\n\nfunction hasTSConfigChanged(tsconfigPath) {\n  const stat = fs_1.default.statSync(tsconfigPath);\n  const lastModifiedAt = stat.mtimeMs;\n  const cachedLastModifiedAt = tsconfigLastModifiedTimestampCache.get(tsconfigPath);\n  tsconfigLastModifiedTimestampCache.set(tsconfigPath, lastModifiedAt);\n\n  if (cachedLastModifiedAt === undefined) {\n    return false;\n  }\n\n  return Math.abs(cachedLastModifiedAt - lastModifiedAt) > Number.EPSILON;\n}\n\nfunction maybeInvalidateProgram(existingWatch, filePath, tsconfigPath) {\n  /*\n   * By calling watchProgram.getProgram(), it will trigger a resync of the program based on\n   * whatever new file content we've given it from our input.\n   */\n  let updatedProgram = existingWatch.getProgram().getProgram(); // In case this change causes problems in larger real world codebases\n  // Provide an escape hatch so people don't _have_ to revert to an older version\n\n  if (process.env.TSESTREE_NO_INVALIDATION === 'true') {\n    return updatedProgram;\n  }\n\n  if (hasTSConfigChanged(tsconfigPath)) {\n    /*\n     * If the stat of the tsconfig has changed, that could mean the include/exclude/files lists has changed\n     * We need to make sure typescript knows this so it can update appropriately\n     */\n    log('tsconfig has changed - triggering program update. %s', tsconfigPath);\n    fileWatchCallbackTrackingMap.get(tsconfigPath).forEach(cb => cb(tsconfigPath, ts.FileWatcherEventKind.Changed)); // tsconfig change means that the file list more than likely changed, so clear the cache\n\n    programFileListCache.delete(tsconfigPath);\n  }\n\n  let sourceFile = updatedProgram.getSourceFile(filePath);\n\n  if (sourceFile) {\n    return updatedProgram;\n  }\n  /*\n   * Missing source file means our program's folder structure might be out of date.\n   * So we need to tell typescript it needs to update the correct folder.\n   */\n\n\n  log('File was not found in program - triggering folder update. %s', filePath); // Find the correct directory callback by climbing the folder tree\n\n  const currentDir = (0, shared_1.canonicalDirname)(filePath);\n  let current = null;\n  let next = currentDir;\n  let hasCallback = false;\n\n  while (current !== next) {\n    current = next;\n    const folderWatchCallbacks = folderWatchCallbackTrackingMap.get(current);\n\n    if (folderWatchCallbacks) {\n      folderWatchCallbacks.forEach(cb => {\n        if (currentDir !== current) {\n          cb(currentDir, ts.FileWatcherEventKind.Changed);\n        }\n\n        cb(current, ts.FileWatcherEventKind.Changed);\n      });\n      hasCallback = true;\n    }\n\n    next = (0, shared_1.canonicalDirname)(current);\n  }\n\n  if (!hasCallback) {\n    /*\n     * No callback means the paths don't matchup - so no point returning any program\n     * this will signal to the caller to skip this program\n     */\n    log('No callback found for file, not part of this program. %s', filePath);\n    return null;\n  } // directory update means that the file list more than likely changed, so clear the cache\n\n\n  programFileListCache.delete(tsconfigPath); // force the immediate resync\n\n  updatedProgram = existingWatch.getProgram().getProgram();\n  sourceFile = updatedProgram.getSourceFile(filePath);\n\n  if (sourceFile) {\n    return updatedProgram;\n  }\n  /*\n   * At this point we're in one of two states:\n   * - The file isn't supposed to be in this program due to exclusions\n   * - The file is new, and was renamed from an old, included filename\n   *\n   * For the latter case, we need to tell typescript that the old filename is now deleted\n   */\n\n\n  log('File was still not found in program after directory update - checking file deletions. %s', filePath);\n  const rootFilenames = updatedProgram.getRootFileNames(); // use find because we only need to \"delete\" one file to cause typescript to do a full resync\n\n  const deletedFile = rootFilenames.find(file => !fs_1.default.existsSync(file));\n\n  if (!deletedFile) {\n    // There are no deleted files, so it must be the former case of the file not belonging to this program\n    return null;\n  }\n\n  const fileWatchCallbacks = fileWatchCallbackTrackingMap.get((0, shared_1.getCanonicalFileName)(deletedFile));\n\n  if (!fileWatchCallbacks) {\n    // shouldn't happen, but just in case\n    log('Could not find watch callbacks for root file. %s', deletedFile);\n    return updatedProgram;\n  }\n\n  log('Marking file as deleted. %s', deletedFile);\n  fileWatchCallbacks.forEach(cb => cb(deletedFile, ts.FileWatcherEventKind.Deleted)); // deleted files means that the file list _has_ changed, so clear the cache\n\n  programFileListCache.delete(tsconfigPath);\n  updatedProgram = existingWatch.getProgram().getProgram();\n  sourceFile = updatedProgram.getSourceFile(filePath);\n\n  if (sourceFile) {\n    return updatedProgram;\n  }\n\n  log('File was still not found in program after deletion check, assuming it is not part of this program. %s', filePath);\n  return null;\n}","map":{"version":3,"mappings":"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","names":["log","knownWatchProgramMap","Map","fileWatchCallbackTrackingMap","folderWatchCallbackTrackingMap","programFileListCache","tsconfigLastModifiedTimestampCache","parsedFilesSeenHash","clearWatchCaches","clear","exports","saveWatchCallback","trackingMap","fileName","callback","normalizedFileName","watchers","get","Set","set","add","close","delete","currentLintOperationState","code","filePath","diagnosticReporter","diagnostic","Error","ts","flattenDiagnosticMessageText","messageText","sys","newLine","createHash","content","_a","updateCachedFileList","tsconfigPath","program","extra","fileList","EXPERIMENTAL_useSourceOfProjectReferenceRedirect","getSourceFiles","map","sf","getRootFileNames","f","getProgramsForProjects","filePathIn","results","fileWatchCallbacks","codeHash","size","forEach","cb","FileWatcherEventKind","Changed","existingWatch","entries","updatedProgram","getProgram","has","getTypeChecker","projects","maybeInvalidateProgram","push","programWatch","createWatchProgram","isRunningNoTimeoutFix","semver_1","satisfies","version","includePrerelease","watchCompilerHost","createWatchCompilerHost","createAbstractBuilder","moduleResolver","resolveModuleNames","oldReadFile","readFile","encoding","fileContent","undefined","onUnRecoverableConfigFileDiagnostic","afterProgramCreate","configFileDiagnostics","getConfigFileParsingDiagnostics","filter","diag","category","DiagnosticCategory","length","watchFile","watchDirectory","oldOnDirectoryStructureHostCreate","onCachedDirectoryStructureHostCreate","host","oldReadDirectory","readDirectory","path","extensions","exclude","include","depth","concat","extraFileExtensions","extension","isMixedContent","scriptKind","ScriptKind","Deferred","trace","useSourceOfProjectReferenceRedirect","setTimeout","clearTimeout","_ms","args","bind","watch","originalGetProgram","call","hasTSConfigChanged","stat","fs_1","statSync","lastModifiedAt","mtimeMs","cachedLastModifiedAt","Math","abs","Number","EPSILON","process","env","TSESTREE_NO_INVALIDATION","sourceFile","getSourceFile","currentDir","current","next","hasCallback","folderWatchCallbacks","rootFilenames","deletedFile","find","file","existsSync","Deleted"],"sources":["../../src/create-program/createWatchProgram.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}