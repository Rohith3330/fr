{"ast":null,"code":"/**\n * Extractor function for a UnaryExpression type value node.\n * A unary expression is an expression with a unary operator.\n * For example, !\"foobar\" will evaluate to false, so this will return false.\n *\n * @param - value - AST Value object with type `UnaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromUnaryExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n\n  const {\n    operator,\n    argument\n  } = value;\n\n  switch (operator) {\n    case '-':\n      return -getValue(argument);\n\n    case '+':\n      return +getValue(argument);\n    // eslint-disable-line no-implicit-coercion\n\n    case '!':\n      return !getValue(argument);\n\n    case '~':\n      return ~getValue(argument);\n    // eslint-disable-line no-bitwise\n\n    case 'delete':\n      // I believe delete statements evaluate to true.\n      return true;\n\n    case 'typeof':\n    case 'void':\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"names":["extractValueFromUnaryExpression","value","getValue","require","default","operator","argument","undefined"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/src/values/expressions/UnaryExpression.js"],"sourcesContent":["/**\n * Extractor function for a UnaryExpression type value node.\n * A unary expression is an expression with a unary operator.\n * For example, !\"foobar\" will evaluate to false, so this will return false.\n *\n * @param - value - AST Value object with type `UnaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromUnaryExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n  const { operator, argument } = value;\n\n  switch (operator) {\n    case '-':\n      return -getValue(argument);\n    case '+':\n      return +getValue(argument); // eslint-disable-line no-implicit-coercion\n    case '!':\n      return !getValue(argument);\n    case '~':\n      return ~getValue(argument); // eslint-disable-line no-bitwise\n    case 'delete':\n      // I believe delete statements evaluate to true.\n      return true;\n    case 'typeof':\n    case 'void':\n    default:\n      return undefined;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,+BAAT,CAAyCC,KAAzC,EAAgD;EAC7D;EACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,GAAD,CAAP,CAAaC,OAA9B;;EACA,MAAM;IAAEC,QAAF;IAAYC;EAAZ,IAAyBL,KAA/B;;EAEA,QAAQI,QAAR;IACE,KAAK,GAAL;MACE,OAAO,CAACH,QAAQ,CAACI,QAAD,CAAhB;;IACF,KAAK,GAAL;MACE,OAAO,CAACJ,QAAQ,CAACI,QAAD,CAAhB;IAA4B;;IAC9B,KAAK,GAAL;MACE,OAAO,CAACJ,QAAQ,CAACI,QAAD,CAAhB;;IACF,KAAK,GAAL;MACE,OAAO,CAACJ,QAAQ,CAACI,QAAD,CAAhB;IAA4B;;IAC9B,KAAK,QAAL;MACE;MACA,OAAO,IAAP;;IACF,KAAK,QAAL;IACA,KAAK,MAAL;IACA;MACE,OAAOC,SAAP;EAfJ;AAiBD"},"metadata":{},"sourceType":"module"}