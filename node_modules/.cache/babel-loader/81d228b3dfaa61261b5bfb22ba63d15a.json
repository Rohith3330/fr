{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst error = {\n  message: \"must match exactly one schema in oneOf\",\n  params: _ref => {\n    let {\n      params\n    } = _ref;\n    return (0, codegen_1._)`{passingSchemas: ${params.passing}}`;\n  }\n};\nconst def = {\n  keyword: \"oneOf\",\n  schemaType: \"array\",\n  trackErrors: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      parentSchema,\n      it\n    } = cxt;\n    /* istanbul ignore if */\n\n    if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n    if (it.opts.discriminator && parentSchema.discriminator) return;\n    const schArr = schema;\n    const valid = gen.let(\"valid\", false);\n    const passing = gen.let(\"passing\", null);\n    const schValid = gen.name(\"_valid\");\n    cxt.setParams({\n      passing\n    }); // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas\n\n    gen.block(validateOneOf);\n    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));\n\n    function validateOneOf() {\n      schArr.forEach((sch, i) => {\n        let schCxt;\n\n        if ((0, util_1.alwaysValidSchema)(it, sch)) {\n          gen.var(schValid, true);\n        } else {\n          schCxt = cxt.subschema({\n            keyword: \"oneOf\",\n            schemaProp: i,\n            compositeRule: true\n          }, schValid);\n        }\n\n        if (i > 0) {\n          gen.if((0, codegen_1._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1._)`[${passing}, ${i}]`).else();\n        }\n\n        gen.if(schValid, () => {\n          gen.assign(valid, true);\n          gen.assign(passing, i);\n          if (schCxt) cxt.mergeEvaluated(schCxt, codegen_1.Name);\n        });\n      });\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAOA;;AACA;;AASA,MAAMA,KAAK,GAA2B;EACpCC,OAAO,EAAE,wCAD2B;EAEpCC,MAAM,EAAE;IAAA,IAAC;MAACA;IAAD,CAAD;IAAA,OAAc,gBAAC,oBAAoBA,MAAM,CAACC,OAAO,GAAjD;EAAA;AAF4B,CAAtC;AAKA,MAAMC,GAAG,GAA0B;EACjCC,OAAO,EAAE,OADwB;EAEjCC,UAAU,EAAE,OAFqB;EAGjCC,WAAW,EAAE,IAHoB;EAIjCP,KAJiC;;EAKjCQ,IAAI,CAACC,GAAD,EAAgB;IAClB,MAAM;MAACC,GAAD;MAAMC,MAAN;MAAcC,YAAd;MAA4BC;IAA5B,IAAkCJ,GAAxC;IACA;;IACA,IAAI,CAACK,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAL,EAA4B,MAAM,IAAIK,KAAJ,CAAU,0BAAV,CAAN;IAC5B,IAAIH,EAAE,CAACI,IAAH,CAAQC,aAAR,IAAyBN,YAAY,CAACM,aAA1C,EAAyD;IACzD,MAAMC,MAAM,GAAgBR,MAA5B;IACA,MAAMS,KAAK,GAAGV,GAAG,CAACW,GAAJ,CAAQ,OAAR,EAAiB,KAAjB,CAAd;IACA,MAAMlB,OAAO,GAAGO,GAAG,CAACW,GAAJ,CAAQ,SAAR,EAAmB,IAAnB,CAAhB;IACA,MAAMC,QAAQ,GAAGZ,GAAG,CAACa,IAAJ,CAAS,QAAT,CAAjB;IACAd,GAAG,CAACe,SAAJ,CAAc;MAACrB;IAAD,CAAd,EATkB,CAUlB;;IAEAO,GAAG,CAACe,KAAJ,CAAUC,aAAV;IAEAjB,GAAG,CAACkB,MAAJ,CACEP,KADF,EAEE,MAAMX,GAAG,CAACmB,KAAJ,EAFR,EAGE,MAAMnB,GAAG,CAACT,KAAJ,CAAU,IAAV,CAHR;;IAMA,SAAS0B,aAAT,GAAsB;MACpBP,MAAM,CAACU,OAAP,CAAe,CAACC,GAAD,EAAiBC,CAAjB,KAA8B;QAC3C,IAAIC,MAAJ;;QACA,IAAI,8BAAkBnB,EAAlB,EAAsBiB,GAAtB,CAAJ,EAAgC;UAC9BpB,GAAG,CAACuB,GAAJ,CAAQX,QAAR,EAAkB,IAAlB;QACD,CAFD,MAEO;UACLU,MAAM,GAAGvB,GAAG,CAACyB,SAAJ,CACP;YACE7B,OAAO,EAAE,OADX;YAEE8B,UAAU,EAAEJ,CAFd;YAGEK,aAAa,EAAE;UAHjB,CADO,EAMPd,QANO,CAAT;QAQD;;QAED,IAAIS,CAAC,GAAG,CAAR,EAAW;UACTrB,GAAG,CACA2B,EADH,CACM,gBAAC,GAAGf,QAAQ,OAAOF,KAAK,EAD9B,EAEGkB,MAFH,CAEUlB,KAFV,EAEiB,KAFjB,EAGGkB,MAHH,CAGUnC,OAHV,EAGmB,gBAAC,IAAIA,OAAO,KAAK4B,CAAC,GAHrC,EAIGQ,IAJH;QAKD;;QAED7B,GAAG,CAAC2B,EAAJ,CAAOf,QAAP,EAAiB,MAAK;UACpBZ,GAAG,CAAC4B,MAAJ,CAAWlB,KAAX,EAAkB,IAAlB;UACAV,GAAG,CAAC4B,MAAJ,CAAWnC,OAAX,EAAoB4B,CAApB;UACA,IAAIC,MAAJ,EAAYvB,GAAG,CAAC+B,cAAJ,CAAmBR,MAAnB,EAA2BS,cAA3B;QACb,CAJD;MAKD,CA5BD;IA6BD;EACF;;AAxDgC,CAAnC;AA2DAC,kBAAetC,GAAf","names":["error","message","params","passing","def","keyword","schemaType","trackErrors","code","cxt","gen","schema","parentSchema","it","Array","isArray","Error","opts","discriminator","schArr","valid","let","schValid","name","setParams","block","validateOneOf","result","reset","forEach","sch","i","schCxt","var","subschema","schemaProp","compositeRule","if","assign","else","mergeEvaluated","codegen_1","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\css-minimizer-webpack-plugin\\node_modules\\ajv\\lib\\vocabularies\\applicator\\oneOf.ts"],"sourcesContent":["import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\nimport {SchemaCxt} from \"../../compile\"\n\nexport type OneOfError = ErrorObject<\n  \"oneOf\",\n  {passingSchemas: [number, number] | null},\n  AnySchema[]\n>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must match exactly one schema in oneOf\",\n  params: ({params}) => _`{passingSchemas: ${params.passing}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"oneOf\",\n  schemaType: \"array\",\n  trackErrors: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, parentSchema, it} = cxt\n    /* istanbul ignore if */\n    if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\")\n    if (it.opts.discriminator && parentSchema.discriminator) return\n    const schArr: AnySchema[] = schema\n    const valid = gen.let(\"valid\", false)\n    const passing = gen.let(\"passing\", null)\n    const schValid = gen.name(\"_valid\")\n    cxt.setParams({passing})\n    // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas\n\n    gen.block(validateOneOf)\n\n    cxt.result(\n      valid,\n      () => cxt.reset(),\n      () => cxt.error(true)\n    )\n\n    function validateOneOf(): void {\n      schArr.forEach((sch: AnySchema, i: number) => {\n        let schCxt: SchemaCxt | undefined\n        if (alwaysValidSchema(it, sch)) {\n          gen.var(schValid, true)\n        } else {\n          schCxt = cxt.subschema(\n            {\n              keyword: \"oneOf\",\n              schemaProp: i,\n              compositeRule: true,\n            },\n            schValid\n          )\n        }\n\n        if (i > 0) {\n          gen\n            .if(_`${schValid} && ${valid}`)\n            .assign(valid, false)\n            .assign(passing, _`[${passing}, ${i}]`)\n            .else()\n        }\n\n        gen.if(schValid, () => {\n          gen.assign(valid, true)\n          gen.assign(passing, i)\n          if (schCxt) cxt.mergeEvaluated(schCxt, Name)\n        })\n      })\n    }\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}