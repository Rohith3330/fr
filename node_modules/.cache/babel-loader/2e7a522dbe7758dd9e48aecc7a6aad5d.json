{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst create = context => {\n  const always = (context.options[0] || 'always') === 'always';\n\n  if (always) {\n    const sourceCode = context.getSourceCode(); // nodes representing type and import declarations\n\n    const ignoredNodes = [// import ...\n    node => {\n      return node.type === 'ImportDeclaration';\n    }, // export type Foo = ...\n    // export opaque type Foo = ...\n    // export type Foo from ...\n    // export opaque type Foo from ...\n    node => {\n      return node.type === 'ExportNamedDeclaration' && node.exportKind === 'type';\n    }, // type Foo = ...\n    node => {\n      return node.type === 'TypeAlias';\n    }, // opaque type Foo = ...\n    node => {\n      return node.type === 'OpaqueType';\n    }];\n\n    const isIgnoredNode = node => {\n      for (const predicate of ignoredNodes) {\n        if (predicate(node)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    let regularCodeStartRange;\n\n    for (const node of sourceCode.ast.body) {\n      if (!isIgnoredNode(node)) {\n        regularCodeStartRange = node.range;\n        break;\n      }\n    }\n\n    if (!_lodash.default.isArray(regularCodeStartRange)) {\n      // a source with only ignored nodes\n      return {};\n    }\n\n    return {\n      'TypeAlias, OpaqueType'(node) {\n        if (node.range[0] > regularCodeStartRange[0]) {\n          context.report({\n            message: 'All type declaration must be at the top of the file, after any import declarations.',\n            node\n          });\n        }\n      }\n\n    };\n  }\n\n  return {};\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_lodash","_interopRequireDefault","require","obj","__esModule","schema","enum","type","create","context","always","options","sourceCode","getSourceCode","ignoredNodes","node","exportKind","isIgnoredNode","predicate","regularCodeStartRange","ast","body","range","isArray","report","message","_default","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/requireTypesAtTop.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst create = context => {\n  const always = (context.options[0] || 'always') === 'always';\n\n  if (always) {\n    const sourceCode = context.getSourceCode(); // nodes representing type and import declarations\n\n    const ignoredNodes = [// import ...\n    node => {\n      return node.type === 'ImportDeclaration';\n    }, // export type Foo = ...\n    // export opaque type Foo = ...\n    // export type Foo from ...\n    // export opaque type Foo from ...\n    node => {\n      return node.type === 'ExportNamedDeclaration' && node.exportKind === 'type';\n    }, // type Foo = ...\n    node => {\n      return node.type === 'TypeAlias';\n    }, // opaque type Foo = ...\n    node => {\n      return node.type === 'OpaqueType';\n    }];\n\n    const isIgnoredNode = node => {\n      for (const predicate of ignoredNodes) {\n        if (predicate(node)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    let regularCodeStartRange;\n\n    for (const node of sourceCode.ast.body) {\n      if (!isIgnoredNode(node)) {\n        regularCodeStartRange = node.range;\n        break;\n      }\n    }\n\n    if (!_lodash.default.isArray(regularCodeStartRange)) {\n      // a source with only ignored nodes\n      return {};\n    }\n\n    return {\n      'TypeAlias, OpaqueType'(node) {\n        if (node.range[0] > regularCodeStartRange[0]) {\n          context.report({\n            message: 'All type declaration must be at the top of the file, after any import declarations.',\n            node\n          });\n        }\n      }\n\n    };\n  }\n\n  return {};\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAEJ,OAAO,EAAEI;EAAX,CAArC;AAAwD;;AAE/F,MAAME,MAAM,GAAG,CAAC;EACdC,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX,CADQ;EAEdC,IAAI,EAAE;AAFQ,CAAD,CAAf;;AAKA,MAAMC,MAAM,GAAGC,OAAO,IAAI;EACxB,MAAMC,MAAM,GAAG,CAACD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,QAAvB,MAAqC,QAApD;;EAEA,IAAID,MAAJ,EAAY;IACV,MAAME,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB,CADU,CACkC;;IAE5C,MAAMC,YAAY,GAAG,CAAC;IACtBC,IAAI,IAAI;MACN,OAAOA,IAAI,CAACR,IAAL,KAAc,mBAArB;IACD,CAHoB,EAGlB;IACH;IACA;IACA;IACAQ,IAAI,IAAI;MACN,OAAOA,IAAI,CAACR,IAAL,KAAc,wBAAd,IAA0CQ,IAAI,CAACC,UAAL,KAAoB,MAArE;IACD,CAToB,EASlB;IACHD,IAAI,IAAI;MACN,OAAOA,IAAI,CAACR,IAAL,KAAc,WAArB;IACD,CAZoB,EAYlB;IACHQ,IAAI,IAAI;MACN,OAAOA,IAAI,CAACR,IAAL,KAAc,YAArB;IACD,CAfoB,CAArB;;IAiBA,MAAMU,aAAa,GAAGF,IAAI,IAAI;MAC5B,KAAK,MAAMG,SAAX,IAAwBJ,YAAxB,EAAsC;QACpC,IAAII,SAAS,CAACH,IAAD,CAAb,EAAqB;UACnB,OAAO,IAAP;QACD;MACF;;MAED,OAAO,KAAP;IACD,CARD;;IAUA,IAAII,qBAAJ;;IAEA,KAAK,MAAMJ,IAAX,IAAmBH,UAAU,CAACQ,GAAX,CAAeC,IAAlC,EAAwC;MACtC,IAAI,CAACJ,aAAa,CAACF,IAAD,CAAlB,EAA0B;QACxBI,qBAAqB,GAAGJ,IAAI,CAACO,KAA7B;QACA;MACD;IACF;;IAED,IAAI,CAACtB,OAAO,CAACD,OAAR,CAAgBwB,OAAhB,CAAwBJ,qBAAxB,CAAL,EAAqD;MACnD;MACA,OAAO,EAAP;IACD;;IAED,OAAO;MACL,wBAAwBJ,IAAxB,EAA8B;QAC5B,IAAIA,IAAI,CAACO,KAAL,CAAW,CAAX,IAAgBH,qBAAqB,CAAC,CAAD,CAAzC,EAA8C;UAC5CV,OAAO,CAACe,MAAR,CAAe;YACbC,OAAO,EAAE,qFADI;YAEbV;UAFa,CAAf;QAID;MACF;;IARI,CAAP;EAWD;;EAED,OAAO,EAAP;AACD,CA7DD;;AA+DA,IAAIW,QAAQ,GAAG;EACblB,MADa;EAEbH;AAFa,CAAf;AAIAR,OAAO,CAACE,OAAR,GAAkB2B,QAAlB;AACAC,MAAM,CAAC9B,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}