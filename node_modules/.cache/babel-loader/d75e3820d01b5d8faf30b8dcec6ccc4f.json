{"ast":null,"code":"import { Prompt } from 'jest-watcher';\nimport FileNamePatternPrompt from \"./prompt.js\";\nexport default class FileNamePlugin {\n  constructor(_ref) {\n    let {\n      stdin,\n      stdout,\n      config = {}\n    } = _ref;\n    this._stdin = stdin;\n    this._stdout = stdout;\n    this._prompt = new Prompt();\n    this._projects = [];\n    this._usageInfo = {\n      key: config.key || 'p',\n      prompt: config.prompt || 'filter by a filename regex pattern'\n    };\n  }\n\n  apply(jestHooks) {\n    jestHooks.onFileChange(_ref2 => {\n      let {\n        projects\n      } = _ref2;\n      this._projects = projects;\n    });\n  }\n\n  onKey(key) {\n    this._prompt.put(key);\n  }\n\n  run(globalConfig, updateConfigAndRun) {\n    const p = new FileNamePatternPrompt(this._stdout, this._prompt);\n    p.updateSearchSources(this._projects);\n    return new Promise((res, rej) => {\n      p.run(testPathPattern => {\n        updateConfigAndRun({\n          mode: 'watch',\n          testPathPattern\n        });\n        res();\n      }, rej);\n    });\n  }\n\n  getUsageInfo() {\n    return this._usageInfo;\n  }\n\n}","map":{"version":3,"names":["Prompt","FileNamePatternPrompt","FileNamePlugin","constructor","stdin","stdout","config","_stdin","_stdout","_prompt","_projects","_usageInfo","key","prompt","apply","jestHooks","onFileChange","projects","onKey","put","run","globalConfig","updateConfigAndRun","p","updateSearchSources","Promise","res","rej","testPathPattern","mode","getUsageInfo"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jest-watch-typeahead/build/file_name_plugin/plugin.js"],"sourcesContent":["import { Prompt } from 'jest-watcher';\nimport FileNamePatternPrompt from \"./prompt.js\";\nexport default class FileNamePlugin {\n  constructor({\n    stdin,\n    stdout,\n    config = {}\n  }) {\n    this._stdin = stdin;\n    this._stdout = stdout;\n    this._prompt = new Prompt();\n    this._projects = [];\n    this._usageInfo = {\n      key: config.key || 'p',\n      prompt: config.prompt || 'filter by a filename regex pattern'\n    };\n  }\n\n  apply(jestHooks) {\n    jestHooks.onFileChange(({\n      projects\n    }) => {\n      this._projects = projects;\n    });\n  }\n\n  onKey(key) {\n    this._prompt.put(key);\n  }\n\n  run(globalConfig, updateConfigAndRun) {\n    const p = new FileNamePatternPrompt(this._stdout, this._prompt);\n    p.updateSearchSources(this._projects);\n    return new Promise((res, rej) => {\n      p.run(testPathPattern => {\n        updateConfigAndRun({\n          mode: 'watch',\n          testPathPattern\n        });\n        res();\n      }, rej);\n    });\n  }\n\n  getUsageInfo() {\n    return this._usageInfo;\n  }\n\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,OAAOC,qBAAP,MAAkC,aAAlC;AACA,eAAe,MAAMC,cAAN,CAAqB;EAClCC,WAAW,OAIR;IAAA,IAJS;MACVC,KADU;MAEVC,MAFU;MAGVC,MAAM,GAAG;IAHC,CAIT;IACD,KAAKC,MAAL,GAAcH,KAAd;IACA,KAAKI,OAAL,GAAeH,MAAf;IACA,KAAKI,OAAL,GAAe,IAAIT,MAAJ,EAAf;IACA,KAAKU,SAAL,GAAiB,EAAjB;IACA,KAAKC,UAAL,GAAkB;MAChBC,GAAG,EAAEN,MAAM,CAACM,GAAP,IAAc,GADH;MAEhBC,MAAM,EAAEP,MAAM,CAACO,MAAP,IAAiB;IAFT,CAAlB;EAID;;EAEDC,KAAK,CAACC,SAAD,EAAY;IACfA,SAAS,CAACC,YAAV,CAAuB,SAEjB;MAAA,IAFkB;QACtBC;MADsB,CAElB;MACJ,KAAKP,SAAL,GAAiBO,QAAjB;IACD,CAJD;EAKD;;EAEDC,KAAK,CAACN,GAAD,EAAM;IACT,KAAKH,OAAL,CAAaU,GAAb,CAAiBP,GAAjB;EACD;;EAEDQ,GAAG,CAACC,YAAD,EAAeC,kBAAf,EAAmC;IACpC,MAAMC,CAAC,GAAG,IAAItB,qBAAJ,CAA0B,KAAKO,OAA/B,EAAwC,KAAKC,OAA7C,CAAV;IACAc,CAAC,CAACC,mBAAF,CAAsB,KAAKd,SAA3B;IACA,OAAO,IAAIe,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;MAC/BJ,CAAC,CAACH,GAAF,CAAMQ,eAAe,IAAI;QACvBN,kBAAkB,CAAC;UACjBO,IAAI,EAAE,OADW;UAEjBD;QAFiB,CAAD,CAAlB;QAIAF,GAAG;MACJ,CAND,EAMGC,GANH;IAOD,CARM,CAAP;EASD;;EAEDG,YAAY,GAAG;IACb,OAAO,KAAKnB,UAAZ;EACD;;AA5CiC"},"metadata":{},"sourceType":"module"}