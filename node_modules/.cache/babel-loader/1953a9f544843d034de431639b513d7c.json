{"ast":null,"code":"export const env = {\n  NODE_ENV: process.env.NODE_ENV,\n  DEBUG: resolveDebug(process.env.DEBUG)\n};\nexport const contextMap = new Map();\nexport const configContextMap = new Map();\nexport const contextSourcesMap = new Map();\nexport const sourceHashMap = new Map();\nexport const NOT_ON_DEMAND = new String('*');\nexport function resolveDebug(debug) {\n  if (debug === undefined) {\n    return false;\n  } // Environment variables are strings, so convert to boolean\n\n\n  if (debug === 'true' || debug === '1') {\n    return true;\n  }\n\n  if (debug === 'false' || debug === '0') {\n    return false;\n  } // Keep the debug convention into account:\n  // DEBUG=* -> This enables all debug modes\n  // DEBUG=projectA,projectB,projectC -> This enables debug for projectA, projectB and projectC\n  // DEBUG=projectA:* -> This enables all debug modes for projectA (if you have sub-types)\n  // DEBUG=projectA,-projectB -> This enables debug for projectA and explicitly disables it for projectB\n\n\n  if (debug === '*') {\n    return true;\n  }\n\n  let debuggers = debug.split(',').map(d => d.split(':')[0]); // Ignoring tailwindcss\n\n  if (debuggers.includes('-tailwindcss')) {\n    return false;\n  } // Including tailwindcss\n\n\n  if (debuggers.includes('tailwindcss')) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"names":["env","NODE_ENV","process","DEBUG","resolveDebug","contextMap","Map","configContextMap","contextSourcesMap","sourceHashMap","NOT_ON_DEMAND","String","debug","undefined","debuggers","split","map","d","includes"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/lib/sharedState.js"],"sourcesContent":["export const env = {\n  NODE_ENV: process.env.NODE_ENV,\n  DEBUG: resolveDebug(process.env.DEBUG),\n}\nexport const contextMap = new Map()\nexport const configContextMap = new Map()\nexport const contextSourcesMap = new Map()\nexport const sourceHashMap = new Map()\nexport const NOT_ON_DEMAND = new String('*')\n\nexport function resolveDebug(debug) {\n  if (debug === undefined) {\n    return false\n  }\n\n  // Environment variables are strings, so convert to boolean\n  if (debug === 'true' || debug === '1') {\n    return true\n  }\n\n  if (debug === 'false' || debug === '0') {\n    return false\n  }\n\n  // Keep the debug convention into account:\n  // DEBUG=* -> This enables all debug modes\n  // DEBUG=projectA,projectB,projectC -> This enables debug for projectA, projectB and projectC\n  // DEBUG=projectA:* -> This enables all debug modes for projectA (if you have sub-types)\n  // DEBUG=projectA,-projectB -> This enables debug for projectA and explicitly disables it for projectB\n\n  if (debug === '*') {\n    return true\n  }\n\n  let debuggers = debug.split(',').map((d) => d.split(':')[0])\n\n  // Ignoring tailwindcss\n  if (debuggers.includes('-tailwindcss')) {\n    return false\n  }\n\n  // Including tailwindcss\n  if (debuggers.includes('tailwindcss')) {\n    return true\n  }\n\n  return false\n}\n"],"mappings":"AAAA,OAAO,MAAMA,GAAG,GAAG;EACjBC,QAAQ,EAAEC,OAAO,CAACF,GAAR,CAAYC,QADL;EAEjBE,KAAK,EAAEC,YAAY,CAACF,OAAO,CAACF,GAAR,CAAYG,KAAb;AAFF,CAAZ;AAIP,OAAO,MAAME,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACP,OAAO,MAAMC,gBAAgB,GAAG,IAAID,GAAJ,EAAzB;AACP,OAAO,MAAME,iBAAiB,GAAG,IAAIF,GAAJ,EAA1B;AACP,OAAO,MAAMG,aAAa,GAAG,IAAIH,GAAJ,EAAtB;AACP,OAAO,MAAMI,aAAa,GAAG,IAAIC,MAAJ,CAAW,GAAX,CAAtB;AAEP,OAAO,SAASP,YAAT,CAAsBQ,KAAtB,EAA6B;EAClC,IAAIA,KAAK,KAAKC,SAAd,EAAyB;IACvB,OAAO,KAAP;EACD,CAHiC,CAKlC;;;EACA,IAAID,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,GAAlC,EAAuC;IACrC,OAAO,IAAP;EACD;;EAED,IAAIA,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,GAAnC,EAAwC;IACtC,OAAO,KAAP;EACD,CAZiC,CAclC;EACA;EACA;EACA;EACA;;;EAEA,IAAIA,KAAK,KAAK,GAAd,EAAmB;IACjB,OAAO,IAAP;EACD;;EAED,IAAIE,SAAS,GAAGF,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAsBC,CAAD,IAAOA,CAAC,CAACF,KAAF,CAAQ,GAAR,EAAa,CAAb,CAA5B,CAAhB,CAxBkC,CA0BlC;;EACA,IAAID,SAAS,CAACI,QAAV,CAAmB,cAAnB,CAAJ,EAAwC;IACtC,OAAO,KAAP;EACD,CA7BiC,CA+BlC;;;EACA,IAAIJ,SAAS,CAACI,QAAV,CAAmB,aAAnB,CAAJ,EAAuC;IACrC,OAAO,IAAP;EACD;;EAED,OAAO,KAAP;AACD"},"metadata":{},"sourceType":"module"}