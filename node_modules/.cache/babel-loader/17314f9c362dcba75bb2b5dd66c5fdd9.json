{"ast":null,"code":"/**\n * @fileoverview Main Linter Class\n * @author Gyandeep Singh\n * @author aladdin-add\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst path = require(\"path\"),\n      eslintScope = require(\"eslint-scope\"),\n      evk = require(\"eslint-visitor-keys\"),\n      espree = require(\"espree\"),\n      merge = require(\"lodash.merge\"),\n      pkg = require(\"../../package.json\"),\n      astUtils = require(\"../shared/ast-utils\"),\n      {\n  Legacy: {\n    ConfigOps,\n    ConfigValidator,\n    environments: BuiltInEnvironments\n  }\n} = require(\"@eslint/eslintrc/universal\"),\n      Traverser = require(\"../shared/traverser\"),\n      {\n  SourceCode\n} = require(\"../source-code\"),\n      CodePathAnalyzer = require(\"./code-path-analysis/code-path-analyzer\"),\n      applyDisableDirectives = require(\"./apply-disable-directives\"),\n      ConfigCommentParser = require(\"./config-comment-parser\"),\n      NodeEventGenerator = require(\"./node-event-generator\"),\n      createReportTranslator = require(\"./report-translator\"),\n      Rules = require(\"./rules\"),\n      createEmitter = require(\"./safe-emitter\"),\n      SourceCodeFixer = require(\"./source-code-fixer\"),\n      timing = require(\"./timing\"),\n      ruleReplacements = require(\"../../conf/replacements.json\");\n\nconst {\n  getRuleFromConfig\n} = require(\"../config/flat-config-helpers\");\n\nconst {\n  FlatConfigArray\n} = require(\"../config/flat-config-array\");\n\nconst debug = require(\"debug\")(\"eslint:linter\");\n\nconst MAX_AUTOFIX_PASSES = 10;\nconst DEFAULT_PARSER_NAME = \"espree\";\nconst DEFAULT_ECMA_VERSION = 5;\nconst commentParser = new ConfigCommentParser();\nconst DEFAULT_ERROR_LOC = {\n  start: {\n    line: 1,\n    column: 0\n  },\n  end: {\n    line: 1,\n    column: 1\n  }\n};\nconst parserSymbol = Symbol.for(\"eslint.RuleTester.parser\");\n\nconst globals = require(\"../../conf/globals\"); //------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/** @typedef {InstanceType<import(\"../cli-engine/config-array\").ConfigArray>} ConfigArray */\n\n/** @typedef {InstanceType<import(\"../cli-engine/config-array\").ExtractedConfig>} ExtractedConfig */\n\n/** @typedef {import(\"../shared/types\").ConfigData} ConfigData */\n\n/** @typedef {import(\"../shared/types\").Environment} Environment */\n\n/** @typedef {import(\"../shared/types\").GlobalConf} GlobalConf */\n\n/** @typedef {import(\"../shared/types\").LintMessage} LintMessage */\n\n/** @typedef {import(\"../shared/types\").SuppressedLintMessage} SuppressedLintMessage */\n\n/** @typedef {import(\"../shared/types\").ParserOptions} ParserOptions */\n\n/** @typedef {import(\"../shared/types\").LanguageOptions} LanguageOptions */\n\n/** @typedef {import(\"../shared/types\").Processor} Processor */\n\n/** @typedef {import(\"../shared/types\").Rule} Rule */\n\n/* eslint-disable jsdoc/valid-types -- https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/4#issuecomment-778805577 */\n\n/**\n * @template T\n * @typedef {{ [P in keyof T]-?: T[P] }} Required\n */\n\n/* eslint-enable jsdoc/valid-types -- https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/4#issuecomment-778805577 */\n\n/**\n * @typedef {Object} DisableDirective\n * @property {(\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\")} type Type of directive\n * @property {number} line The line number\n * @property {number} column The column number\n * @property {(string|null)} ruleId The rule ID\n * @property {string} justification The justification of directive\n */\n\n/**\n * The private data for `Linter` instance.\n * @typedef {Object} LinterInternalSlots\n * @property {ConfigArray|null} lastConfigArray The `ConfigArray` instance that the last `verify()` call used.\n * @property {SourceCode|null} lastSourceCode The `SourceCode` instance that the last `verify()` call used.\n * @property {SuppressedLintMessage[]} lastSuppressedMessages The `SuppressedLintMessage[]` instance that the last `verify()` call produced.\n * @property {Map<string, Parser>} parserMap The loaded parsers.\n * @property {Rules} ruleMap The loaded rules.\n */\n\n/**\n * @typedef {Object} VerifyOptions\n * @property {boolean} [allowInlineConfig] Allow/disallow inline comments' ability\n *      to change config once it is set. Defaults to true if not supplied.\n *      Useful if you want to validate JS without comments overriding rules.\n * @property {boolean} [disableFixes] if `true` then the linter doesn't make `fix`\n *      properties into the lint result.\n * @property {string} [filename] the filename of the source code.\n * @property {boolean | \"off\" | \"warn\" | \"error\"} [reportUnusedDisableDirectives] Adds reported errors for\n *      unused `eslint-disable` directives.\n */\n\n/**\n * @typedef {Object} ProcessorOptions\n * @property {(filename:string, text:string) => boolean} [filterCodeBlock] the\n *      predicate function that selects adopt code blocks.\n * @property {Processor.postprocess} [postprocess] postprocessor for report\n *      messages. If provided, this should accept an array of the message lists\n *      for each code block returned from the preprocessor, apply a mapping to\n *      the messages as appropriate, and return a one-dimensional array of\n *      messages.\n * @property {Processor.preprocess} [preprocess] preprocessor for source text.\n *      If provided, this should accept a string of source text, and return an\n *      array of code blocks to lint.\n */\n\n/**\n * @typedef {Object} FixOptions\n * @property {boolean | ((message: LintMessage) => boolean)} [fix] Determines\n *      whether fixes should be applied.\n */\n\n/**\n * @typedef {Object} InternalOptions\n * @property {string | null} warnInlineConfig The config name what `noInlineConfig` setting came from. If `noInlineConfig` setting didn't exist, this is null. If this is a config name, then the linter warns directive comments.\n * @property {\"off\" | \"warn\" | \"error\"} reportUnusedDisableDirectives (boolean values were normalized)\n */\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines if a given object is Espree.\n * @param {Object} parser The parser to check.\n * @returns {boolean} True if the parser is Espree or false if not.\n */\n\n\nfunction isEspree(parser) {\n  return !!(parser === espree || parser[parserSymbol] === espree);\n}\n/**\n * Retrieves globals for the given ecmaVersion.\n * @param {number} ecmaVersion The version to retrieve globals for.\n * @returns {Object} The globals for the given ecmaVersion.\n */\n\n\nfunction getGlobalsForEcmaVersion(ecmaVersion) {\n  switch (ecmaVersion) {\n    case 3:\n      return globals.es3;\n\n    case 5:\n      return globals.es5;\n\n    default:\n      if (ecmaVersion < 2015) {\n        return globals[`es${ecmaVersion + 2009}`];\n      }\n\n      return globals[`es${ecmaVersion}`];\n  }\n}\n/**\n * Ensures that variables representing built-in properties of the Global Object,\n * and any globals declared by special block comments, are present in the global\n * scope.\n * @param {Scope} globalScope The global scope.\n * @param {Object} configGlobals The globals declared in configuration\n * @param {{exportedVariables: Object, enabledGlobals: Object}} commentDirectives Directives from comment configuration\n * @returns {void}\n */\n\n\nfunction addDeclaredGlobals(globalScope, configGlobals, _ref) {\n  let {\n    exportedVariables,\n    enabledGlobals\n  } = _ref;\n\n  // Define configured global variables.\n  for (const id of new Set([...Object.keys(configGlobals), ...Object.keys(enabledGlobals)])) {\n    /*\n     * `ConfigOps.normalizeConfigGlobal` will throw an error if a configured global value is invalid. However, these errors would\n     * typically be caught when validating a config anyway (validity for inline global comments is checked separately).\n     */\n    const configValue = configGlobals[id] === void 0 ? void 0 : ConfigOps.normalizeConfigGlobal(configGlobals[id]);\n    const commentValue = enabledGlobals[id] && enabledGlobals[id].value;\n    const value = commentValue || configValue;\n    const sourceComments = enabledGlobals[id] && enabledGlobals[id].comments;\n\n    if (value === \"off\") {\n      continue;\n    }\n\n    let variable = globalScope.set.get(id);\n\n    if (!variable) {\n      variable = new eslintScope.Variable(id, globalScope);\n      globalScope.variables.push(variable);\n      globalScope.set.set(id, variable);\n    }\n\n    variable.eslintImplicitGlobalSetting = configValue;\n    variable.eslintExplicitGlobal = sourceComments !== void 0;\n    variable.eslintExplicitGlobalComments = sourceComments;\n    variable.writeable = value === \"writable\";\n  } // mark all exported variables as such\n\n\n  Object.keys(exportedVariables).forEach(name => {\n    const variable = globalScope.set.get(name);\n\n    if (variable) {\n      variable.eslintUsed = true;\n    }\n  });\n  /*\n   * \"through\" contains all references which definitions cannot be found.\n   * Since we augment the global scope using configuration, we need to update\n   * references and remove the ones that were added by configuration.\n   */\n\n  globalScope.through = globalScope.through.filter(reference => {\n    const name = reference.identifier.name;\n    const variable = globalScope.set.get(name);\n\n    if (variable) {\n      /*\n       * Links the variable and the reference.\n       * And this reference is removed from `Scope#through`.\n       */\n      reference.resolved = variable;\n      variable.references.push(reference);\n      return false;\n    }\n\n    return true;\n  });\n}\n/**\n * creates a missing-rule message.\n * @param {string} ruleId the ruleId to create\n * @returns {string} created error message\n * @private\n */\n\n\nfunction createMissingRuleMessage(ruleId) {\n  return Object.prototype.hasOwnProperty.call(ruleReplacements.rules, ruleId) ? `Rule '${ruleId}' was removed and replaced by: ${ruleReplacements.rules[ruleId].join(\", \")}` : `Definition for rule '${ruleId}' was not found.`;\n}\n/**\n * creates a linting problem\n * @param {Object} options to create linting error\n * @param {string} [options.ruleId] the ruleId to report\n * @param {Object} [options.loc] the loc to report\n * @param {string} [options.message] the error message to report\n * @param {string} [options.severity] the error message to report\n * @returns {LintMessage} created problem, returns a missing-rule problem if only provided ruleId.\n * @private\n */\n\n\nfunction createLintingProblem(options) {\n  const {\n    ruleId = null,\n    loc = DEFAULT_ERROR_LOC,\n    message = createMissingRuleMessage(options.ruleId),\n    severity = 2\n  } = options;\n  return {\n    ruleId,\n    message,\n    line: loc.start.line,\n    column: loc.start.column + 1,\n    endLine: loc.end.line,\n    endColumn: loc.end.column + 1,\n    severity,\n    nodeType: null\n  };\n}\n/**\n * Creates a collection of disable directives from a comment\n * @param {Object} options to create disable directives\n * @param {(\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\")} options.type The type of directive comment\n * @param {token} options.commentToken The Comment token\n * @param {string} options.value The value after the directive in the comment\n * comment specified no specific rules, so it applies to all rules (e.g. `eslint-disable`)\n * @param {string} options.justification The justification of the directive\n * @param {function(string): {create: Function}} options.ruleMapper A map from rule IDs to defined rules\n * @returns {Object} Directives and problems from the comment\n */\n\n\nfunction createDisableDirectives(options) {\n  const {\n    commentToken,\n    type,\n    value,\n    justification,\n    ruleMapper\n  } = options;\n  const ruleIds = Object.keys(commentParser.parseListConfig(value));\n  const directiveRules = ruleIds.length ? ruleIds : [null];\n  const result = {\n    directives: [],\n    // valid disable directives\n    directiveProblems: [] // problems in directives\n\n  };\n  const parentComment = {\n    commentToken,\n    ruleIds\n  };\n\n  for (const ruleId of directiveRules) {\n    // push to directives, if the rule is defined(including null, e.g. /*eslint enable*/)\n    if (ruleId === null || !!ruleMapper(ruleId)) {\n      if (type === \"disable-next-line\") {\n        result.directives.push({\n          parentComment,\n          type,\n          line: commentToken.loc.end.line,\n          column: commentToken.loc.end.column + 1,\n          ruleId,\n          justification\n        });\n      } else {\n        result.directives.push({\n          parentComment,\n          type,\n          line: commentToken.loc.start.line,\n          column: commentToken.loc.start.column + 1,\n          ruleId,\n          justification\n        });\n      }\n    } else {\n      result.directiveProblems.push(createLintingProblem({\n        ruleId,\n        loc: commentToken.loc\n      }));\n    }\n  }\n\n  return result;\n}\n/**\n * Extract the directive and the justification from a given directive comment and trim them.\n * @param {string} value The comment text to extract.\n * @returns {{directivePart: string, justificationPart: string}} The extracted directive and justification.\n */\n\n\nfunction extractDirectiveComment(value) {\n  const match = /\\s-{2,}\\s/u.exec(value);\n\n  if (!match) {\n    return {\n      directivePart: value.trim(),\n      justificationPart: \"\"\n    };\n  }\n\n  const directive = value.slice(0, match.index).trim();\n  const justification = value.slice(match.index + match[0].length).trim();\n  return {\n    directivePart: directive,\n    justificationPart: justification\n  };\n}\n/**\n * Parses comments in file to extract file-specific config of rules, globals\n * and environments and merges them with global config; also code blocks\n * where reporting is disabled or enabled and merges them with reporting config.\n * @param {ASTNode} ast The top node of the AST.\n * @param {function(string): {create: Function}} ruleMapper A map from rule IDs to defined rules\n * @param {string|null} warnInlineConfig If a string then it should warn directive comments as disabled. The string value is the config name what the setting came from.\n * @returns {{configuredRules: Object, enabledGlobals: {value:string,comment:Token}[], exportedVariables: Object, problems: Problem[], disableDirectives: DisableDirective[]}}\n * A collection of the directive comments that were found, along with any problems that occurred when parsing\n */\n\n\nfunction getDirectiveComments(ast, ruleMapper, warnInlineConfig) {\n  const configuredRules = {};\n  const enabledGlobals = Object.create(null);\n  const exportedVariables = {};\n  const problems = [];\n  const disableDirectives = [];\n  const validator = new ConfigValidator({\n    builtInRules: Rules\n  });\n  ast.comments.filter(token => token.type !== \"Shebang\").forEach(comment => {\n    const {\n      directivePart,\n      justificationPart\n    } = extractDirectiveComment(comment.value);\n    const match = /^(eslint(?:-env|-enable|-disable(?:(?:-next)?-line)?)?|exported|globals?)(?:\\s|$)/u.exec(directivePart);\n\n    if (!match) {\n      return;\n    }\n\n    const directiveText = match[1];\n    const lineCommentSupported = /^eslint-disable-(next-)?line$/u.test(directiveText);\n\n    if (comment.type === \"Line\" && !lineCommentSupported) {\n      return;\n    }\n\n    if (warnInlineConfig) {\n      const kind = comment.type === \"Block\" ? `/*${directiveText}*/` : `//${directiveText}`;\n      problems.push(createLintingProblem({\n        ruleId: null,\n        message: `'${kind}' has no effect because you have 'noInlineConfig' setting in ${warnInlineConfig}.`,\n        loc: comment.loc,\n        severity: 1\n      }));\n      return;\n    }\n\n    if (directiveText === \"eslint-disable-line\" && comment.loc.start.line !== comment.loc.end.line) {\n      const message = `${directiveText} comment should not span multiple lines.`;\n      problems.push(createLintingProblem({\n        ruleId: null,\n        message,\n        loc: comment.loc\n      }));\n      return;\n    }\n\n    const directiveValue = directivePart.slice(match.index + directiveText.length);\n\n    switch (directiveText) {\n      case \"eslint-disable\":\n      case \"eslint-enable\":\n      case \"eslint-disable-next-line\":\n      case \"eslint-disable-line\":\n        {\n          const directiveType = directiveText.slice(\"eslint-\".length);\n          const options = {\n            commentToken: comment,\n            type: directiveType,\n            value: directiveValue,\n            justification: justificationPart,\n            ruleMapper\n          };\n          const {\n            directives,\n            directiveProblems\n          } = createDisableDirectives(options);\n          disableDirectives.push(...directives);\n          problems.push(...directiveProblems);\n          break;\n        }\n\n      case \"exported\":\n        Object.assign(exportedVariables, commentParser.parseStringConfig(directiveValue, comment));\n        break;\n\n      case \"globals\":\n      case \"global\":\n        for (const [id, {\n          value\n        }] of Object.entries(commentParser.parseStringConfig(directiveValue, comment))) {\n          let normalizedValue;\n\n          try {\n            normalizedValue = ConfigOps.normalizeConfigGlobal(value);\n          } catch (err) {\n            problems.push(createLintingProblem({\n              ruleId: null,\n              loc: comment.loc,\n              message: err.message\n            }));\n            continue;\n          }\n\n          if (enabledGlobals[id]) {\n            enabledGlobals[id].comments.push(comment);\n            enabledGlobals[id].value = normalizedValue;\n          } else {\n            enabledGlobals[id] = {\n              comments: [comment],\n              value: normalizedValue\n            };\n          }\n        }\n\n        break;\n\n      case \"eslint\":\n        {\n          const parseResult = commentParser.parseJsonConfig(directiveValue, comment.loc);\n\n          if (parseResult.success) {\n            Object.keys(parseResult.config).forEach(name => {\n              const rule = ruleMapper(name);\n              const ruleValue = parseResult.config[name];\n\n              if (!rule) {\n                problems.push(createLintingProblem({\n                  ruleId: name,\n                  loc: comment.loc\n                }));\n                return;\n              }\n\n              try {\n                validator.validateRuleOptions(rule, name, ruleValue);\n              } catch (err) {\n                problems.push(createLintingProblem({\n                  ruleId: name,\n                  message: err.message,\n                  loc: comment.loc\n                })); // do not apply the config, if found invalid options.\n\n                return;\n              }\n\n              configuredRules[name] = ruleValue;\n            });\n          } else {\n            problems.push(parseResult.error);\n          }\n\n          break;\n        }\n      // no default\n    }\n  });\n  return {\n    configuredRules,\n    enabledGlobals,\n    exportedVariables,\n    problems,\n    disableDirectives\n  };\n}\n/**\n * Normalize ECMAScript version from the initial config\n * @param {Parser} parser The parser which uses this options.\n * @param {number} ecmaVersion ECMAScript version from the initial config\n * @returns {number} normalized ECMAScript version\n */\n\n\nfunction normalizeEcmaVersion(parser, ecmaVersion) {\n  if (isEspree(parser)) {\n    if (ecmaVersion === \"latest\") {\n      return espree.latestEcmaVersion;\n    }\n  }\n  /*\n   * Calculate ECMAScript edition number from official year version starting with\n   * ES2015, which corresponds with ES6 (or a difference of 2009).\n   */\n\n\n  return ecmaVersion >= 2015 ? ecmaVersion - 2009 : ecmaVersion;\n}\n/**\n * Normalize ECMAScript version from the initial config into languageOptions (year)\n * format.\n * @param {any} [ecmaVersion] ECMAScript version from the initial config\n * @returns {number} normalized ECMAScript version\n */\n\n\nfunction normalizeEcmaVersionForLanguageOptions(ecmaVersion) {\n  switch (ecmaVersion) {\n    case 3:\n      return 3;\n    // void 0 = no ecmaVersion specified so use the default\n\n    case 5:\n    case void 0:\n      return 5;\n\n    default:\n      if (typeof ecmaVersion === \"number\") {\n        return ecmaVersion >= 2015 ? ecmaVersion : ecmaVersion + 2009;\n      }\n\n  }\n  /*\n   * We default to the latest supported ecmaVersion for everything else.\n   * Remember, this is for languageOptions.ecmaVersion, which sets the version\n   * that is used for a number of processes inside of ESLint. It's normally\n   * safe to assume people want the latest unless otherwise specified.\n   */\n\n\n  return espree.latestEcmaVersion + 2009;\n}\n\nconst eslintEnvPattern = /\\/\\*\\s*eslint-env\\s(.+?)(?:\\*\\/|$)/gsu;\n/**\n * Checks whether or not there is a comment which has \"eslint-env *\" in a given text.\n * @param {string} text A source code text to check.\n * @returns {Object|null} A result of parseListConfig() with \"eslint-env *\" comment.\n */\n\nfunction findEslintEnv(text) {\n  let match, retv;\n  eslintEnvPattern.lastIndex = 0;\n\n  while ((match = eslintEnvPattern.exec(text)) !== null) {\n    if (match[0].endsWith(\"*/\")) {\n      retv = Object.assign(retv || {}, commentParser.parseListConfig(extractDirectiveComment(match[1]).directivePart));\n    }\n  }\n\n  return retv;\n}\n/**\n * Convert \"/path/to/<text>\" to \"<text>\".\n * `CLIEngine#executeOnText()` method gives \"/path/to/<text>\" if the filename\n * was omitted because `configArray.extractConfig()` requires an absolute path.\n * But the linter should pass `<text>` to `RuleContext#getFilename()` in that\n * case.\n * Also, code blocks can have their virtual filename. If the parent filename was\n * `<text>`, the virtual filename is `<text>/0_foo.js` or something like (i.e.,\n * it's not an absolute path).\n * @param {string} filename The filename to normalize.\n * @returns {string} The normalized filename.\n */\n\n\nfunction normalizeFilename(filename) {\n  const parts = filename.split(path.sep);\n  const index = parts.lastIndexOf(\"<text>\");\n  return index === -1 ? filename : parts.slice(index).join(path.sep);\n}\n/**\n * Normalizes the possible options for `linter.verify` and `linter.verifyAndFix` to a\n * consistent shape.\n * @param {VerifyOptions} providedOptions Options\n * @param {ConfigData} config Config.\n * @returns {Required<VerifyOptions> & InternalOptions} Normalized options\n */\n\n\nfunction normalizeVerifyOptions(providedOptions, config) {\n  const linterOptions = config.linterOptions || config; // .noInlineConfig for eslintrc, .linterOptions.noInlineConfig for flat\n\n  const disableInlineConfig = linterOptions.noInlineConfig === true;\n  const ignoreInlineConfig = providedOptions.allowInlineConfig === false;\n  const configNameOfNoInlineConfig = config.configNameOfNoInlineConfig ? ` (${config.configNameOfNoInlineConfig})` : \"\";\n  let reportUnusedDisableDirectives = providedOptions.reportUnusedDisableDirectives;\n\n  if (typeof reportUnusedDisableDirectives === \"boolean\") {\n    reportUnusedDisableDirectives = reportUnusedDisableDirectives ? \"error\" : \"off\";\n  }\n\n  if (typeof reportUnusedDisableDirectives !== \"string\") {\n    reportUnusedDisableDirectives = linterOptions.reportUnusedDisableDirectives ? \"warn\" : \"off\";\n  }\n\n  return {\n    filename: normalizeFilename(providedOptions.filename || \"<input>\"),\n    allowInlineConfig: !ignoreInlineConfig,\n    warnInlineConfig: disableInlineConfig && !ignoreInlineConfig ? `your config${configNameOfNoInlineConfig}` : null,\n    reportUnusedDisableDirectives,\n    disableFixes: Boolean(providedOptions.disableFixes)\n  };\n}\n/**\n * Combines the provided parserOptions with the options from environments\n * @param {Parser} parser The parser which uses this options.\n * @param {ParserOptions} providedOptions The provided 'parserOptions' key in a config\n * @param {Environment[]} enabledEnvironments The environments enabled in configuration and with inline comments\n * @returns {ParserOptions} Resulting parser options after merge\n */\n\n\nfunction resolveParserOptions(parser, providedOptions, enabledEnvironments) {\n  const parserOptionsFromEnv = enabledEnvironments.filter(env => env.parserOptions).reduce((parserOptions, env) => merge(parserOptions, env.parserOptions), {});\n  const mergedParserOptions = merge(parserOptionsFromEnv, providedOptions || {});\n  const isModule = mergedParserOptions.sourceType === \"module\";\n\n  if (isModule) {\n    /*\n     * can't have global return inside of modules\n     * TODO: espree validate parserOptions.globalReturn when sourceType is setting to module.(@aladdin-add)\n     */\n    mergedParserOptions.ecmaFeatures = Object.assign({}, mergedParserOptions.ecmaFeatures, {\n      globalReturn: false\n    });\n  }\n\n  mergedParserOptions.ecmaVersion = normalizeEcmaVersion(parser, mergedParserOptions.ecmaVersion);\n  return mergedParserOptions;\n}\n/**\n * Converts parserOptions to languageOptions for backwards compatibility with eslintrc.\n * @param {ConfigData} config Config object.\n * @param {Object} config.globals Global variable definitions.\n * @param {Parser} config.parser The parser to use.\n * @param {ParserOptions} config.parserOptions The parserOptions to use.\n * @returns {LanguageOptions} The languageOptions equivalent.\n */\n\n\nfunction createLanguageOptions(_ref2) {\n  let {\n    globals: configuredGlobals,\n    parser,\n    parserOptions\n  } = _ref2;\n  const {\n    ecmaVersion,\n    sourceType\n  } = parserOptions;\n  return {\n    globals: configuredGlobals,\n    ecmaVersion: normalizeEcmaVersionForLanguageOptions(ecmaVersion),\n    sourceType,\n    parser,\n    parserOptions\n  };\n}\n/**\n * Combines the provided globals object with the globals from environments\n * @param {Record<string, GlobalConf>} providedGlobals The 'globals' key in a config\n * @param {Environment[]} enabledEnvironments The environments enabled in configuration and with inline comments\n * @returns {Record<string, GlobalConf>} The resolved globals object\n */\n\n\nfunction resolveGlobals(providedGlobals, enabledEnvironments) {\n  return Object.assign({}, ...enabledEnvironments.filter(env => env.globals).map(env => env.globals), providedGlobals);\n}\n/**\n * Strips Unicode BOM from a given text.\n * @param {string} text A text to strip.\n * @returns {string} The stripped text.\n */\n\n\nfunction stripUnicodeBOM(text) {\n  /*\n   * Check Unicode BOM.\n   * In JavaScript, string data is stored as UTF-16, so BOM is 0xFEFF.\n   * http://www.ecma-international.org/ecma-262/6.0/#sec-unicode-format-control-characters\n   */\n  if (text.charCodeAt(0) === 0xFEFF) {\n    return text.slice(1);\n  }\n\n  return text;\n}\n/**\n * Get the options for a rule (not including severity), if any\n * @param {Array|number} ruleConfig rule configuration\n * @returns {Array} of rule options, empty Array if none\n */\n\n\nfunction getRuleOptions(ruleConfig) {\n  if (Array.isArray(ruleConfig)) {\n    return ruleConfig.slice(1);\n  }\n\n  return [];\n}\n/**\n * Analyze scope of the given AST.\n * @param {ASTNode} ast The `Program` node to analyze.\n * @param {LanguageOptions} languageOptions The parser options.\n * @param {Record<string, string[]>} visitorKeys The visitor keys.\n * @returns {ScopeManager} The analysis result.\n */\n\n\nfunction analyzeScope(ast, languageOptions, visitorKeys) {\n  const parserOptions = languageOptions.parserOptions;\n  const ecmaFeatures = parserOptions.ecmaFeatures || {};\n  const ecmaVersion = languageOptions.ecmaVersion || DEFAULT_ECMA_VERSION;\n  return eslintScope.analyze(ast, {\n    ignoreEval: true,\n    nodejsScope: ecmaFeatures.globalReturn,\n    impliedStrict: ecmaFeatures.impliedStrict,\n    ecmaVersion: typeof ecmaVersion === \"number\" ? ecmaVersion : 6,\n    sourceType: languageOptions.sourceType || \"script\",\n    childVisitorKeys: visitorKeys || evk.KEYS,\n    fallback: Traverser.getKeys\n  });\n}\n/**\n * Parses text into an AST. Moved out here because the try-catch prevents\n * optimization of functions, so it's best to keep the try-catch as isolated\n * as possible\n * @param {string} text The text to parse.\n * @param {LanguageOptions} languageOptions Options to pass to the parser\n * @param {string} filePath The path to the file being parsed.\n * @returns {{success: false, error: Problem}|{success: true, sourceCode: SourceCode}}\n * An object containing the AST and parser services if parsing was successful, or the error if parsing failed\n * @private\n */\n\n\nfunction parse(text, languageOptions, filePath) {\n  const textToParse = stripUnicodeBOM(text).replace(astUtils.shebangPattern, (match, captured) => `//${captured}`);\n  const {\n    ecmaVersion,\n    sourceType,\n    parser\n  } = languageOptions;\n  const parserOptions = Object.assign({\n    ecmaVersion,\n    sourceType\n  }, languageOptions.parserOptions, {\n    loc: true,\n    range: true,\n    raw: true,\n    tokens: true,\n    comment: true,\n    eslintVisitorKeys: true,\n    eslintScopeManager: true,\n    filePath\n  });\n  /*\n   * Check for parsing errors first. If there's a parsing error, nothing\n   * else can happen. However, a parsing error does not throw an error\n   * from this method - it's just considered a fatal error message, a\n   * problem that ESLint identified just like any other.\n   */\n\n  try {\n    debug(\"Parsing:\", filePath);\n    const parseResult = typeof parser.parseForESLint === \"function\" ? parser.parseForESLint(textToParse, parserOptions) : {\n      ast: parser.parse(textToParse, parserOptions)\n    };\n    debug(\"Parsing successful:\", filePath);\n    const ast = parseResult.ast;\n    const parserServices = parseResult.services || {};\n    const visitorKeys = parseResult.visitorKeys || evk.KEYS;\n    debug(\"Scope analysis:\", filePath);\n    const scopeManager = parseResult.scopeManager || analyzeScope(ast, languageOptions, visitorKeys);\n    debug(\"Scope analysis successful:\", filePath);\n    return {\n      success: true,\n\n      /*\n       * Save all values that `parseForESLint()` returned.\n       * If a `SourceCode` object is given as the first parameter instead of source code text,\n       * linter skips the parsing process and reuses the source code object.\n       * In that case, linter needs all the values that `parseForESLint()` returned.\n       */\n      sourceCode: new SourceCode({\n        text,\n        ast,\n        parserServices,\n        scopeManager,\n        visitorKeys\n      })\n    };\n  } catch (ex) {\n    // If the message includes a leading line number, strip it:\n    const message = `Parsing error: ${ex.message.replace(/^line \\d+:/iu, \"\").trim()}`;\n    debug(\"%s\\n%s\", message, ex.stack);\n    return {\n      success: false,\n      error: {\n        ruleId: null,\n        fatal: true,\n        severity: 2,\n        message,\n        line: ex.lineNumber,\n        column: ex.column\n      }\n    };\n  }\n}\n/**\n * Gets the scope for the current node\n * @param {ScopeManager} scopeManager The scope manager for this AST\n * @param {ASTNode} currentNode The node to get the scope of\n * @returns {eslint-scope.Scope} The scope information for this node\n */\n\n\nfunction getScope(scopeManager, currentNode) {\n  // On Program node, get the outermost scope to avoid return Node.js special function scope or ES modules scope.\n  const inner = currentNode.type !== \"Program\";\n\n  for (let node = currentNode; node; node = node.parent) {\n    const scope = scopeManager.acquire(node, inner);\n\n    if (scope) {\n      if (scope.type === \"function-expression-name\") {\n        return scope.childScopes[0];\n      }\n\n      return scope;\n    }\n  }\n\n  return scopeManager.scopes[0];\n}\n/**\n * Marks a variable as used in the current scope\n * @param {ScopeManager} scopeManager The scope manager for this AST. The scope may be mutated by this function.\n * @param {ASTNode} currentNode The node currently being traversed\n * @param {LanguageOptions} languageOptions The options used to parse this text\n * @param {string} name The name of the variable that should be marked as used.\n * @returns {boolean} True if the variable was found and marked as used, false if not.\n */\n\n\nfunction markVariableAsUsed(scopeManager, currentNode, languageOptions, name) {\n  const parserOptions = languageOptions.parserOptions;\n  const sourceType = languageOptions.sourceType;\n  const hasGlobalReturn = parserOptions.ecmaFeatures && parserOptions.ecmaFeatures.globalReturn || sourceType === \"commonjs\";\n  const specialScope = hasGlobalReturn || sourceType === \"module\";\n  const currentScope = getScope(scopeManager, currentNode); // Special Node.js scope means we need to start one level deeper\n\n  const initialScope = currentScope.type === \"global\" && specialScope ? currentScope.childScopes[0] : currentScope;\n\n  for (let scope = initialScope; scope; scope = scope.upper) {\n    const variable = scope.variables.find(scopeVar => scopeVar.name === name);\n\n    if (variable) {\n      variable.eslintUsed = true;\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Runs a rule, and gets its listeners\n * @param {Rule} rule A normalized rule with a `create` method\n * @param {Context} ruleContext The context that should be passed to the rule\n * @throws {any} Any error during the rule's `create`\n * @returns {Object} A map of selector listeners provided by the rule\n */\n\n\nfunction createRuleListeners(rule, ruleContext) {\n  try {\n    return rule.create(ruleContext);\n  } catch (ex) {\n    ex.message = `Error while loading rule '${ruleContext.id}': ${ex.message}`;\n    throw ex;\n  }\n}\n/**\n * Gets all the ancestors of a given node\n * @param {ASTNode} node The node\n * @returns {ASTNode[]} All the ancestor nodes in the AST, not including the provided node, starting\n * from the root node and going inwards to the parent node.\n */\n\n\nfunction getAncestors(node) {\n  const ancestorsStartingAtParent = [];\n\n  for (let ancestor = node.parent; ancestor; ancestor = ancestor.parent) {\n    ancestorsStartingAtParent.push(ancestor);\n  }\n\n  return ancestorsStartingAtParent.reverse();\n} // methods that exist on SourceCode object\n\n\nconst DEPRECATED_SOURCECODE_PASSTHROUGHS = {\n  getSource: \"getText\",\n  getSourceLines: \"getLines\",\n  getAllComments: \"getAllComments\",\n  getNodeByRangeIndex: \"getNodeByRangeIndex\",\n  getComments: \"getComments\",\n  getCommentsBefore: \"getCommentsBefore\",\n  getCommentsAfter: \"getCommentsAfter\",\n  getCommentsInside: \"getCommentsInside\",\n  getJSDocComment: \"getJSDocComment\",\n  getFirstToken: \"getFirstToken\",\n  getFirstTokens: \"getFirstTokens\",\n  getLastToken: \"getLastToken\",\n  getLastTokens: \"getLastTokens\",\n  getTokenAfter: \"getTokenAfter\",\n  getTokenBefore: \"getTokenBefore\",\n  getTokenByRangeStart: \"getTokenByRangeStart\",\n  getTokens: \"getTokens\",\n  getTokensAfter: \"getTokensAfter\",\n  getTokensBefore: \"getTokensBefore\",\n  getTokensBetween: \"getTokensBetween\"\n};\nconst BASE_TRAVERSAL_CONTEXT = Object.freeze(Object.keys(DEPRECATED_SOURCECODE_PASSTHROUGHS).reduce((contextInfo, methodName) => Object.assign(contextInfo, {\n  [methodName]() {\n    return this.getSourceCode()[DEPRECATED_SOURCECODE_PASSTHROUGHS[methodName]](...arguments);\n  }\n\n}), {}));\n/**\n * Runs the given rules on the given SourceCode object\n * @param {SourceCode} sourceCode A SourceCode object for the given text\n * @param {Object} configuredRules The rules configuration\n * @param {function(string): Rule} ruleMapper A mapper function from rule names to rules\n * @param {string | undefined} parserName The name of the parser in the config\n * @param {LanguageOptions} languageOptions The options for parsing the code.\n * @param {Object} settings The settings that were enabled in the config\n * @param {string} filename The reported filename of the code\n * @param {boolean} disableFixes If true, it doesn't make `fix` properties.\n * @param {string | undefined} cwd cwd of the cli\n * @param {string} physicalFilename The full path of the file on disk without any code block information\n * @returns {Problem[]} An array of reported problems\n */\n\nfunction runRules(sourceCode, configuredRules, ruleMapper, parserName, languageOptions, settings, filename, disableFixes, cwd, physicalFilename) {\n  const emitter = createEmitter();\n  const nodeQueue = [];\n  let currentNode = sourceCode.ast;\n  Traverser.traverse(sourceCode.ast, {\n    enter(node, parent) {\n      node.parent = parent;\n      nodeQueue.push({\n        isEntering: true,\n        node\n      });\n    },\n\n    leave(node) {\n      nodeQueue.push({\n        isEntering: false,\n        node\n      });\n    },\n\n    visitorKeys: sourceCode.visitorKeys\n  });\n  /*\n   * Create a frozen object with the ruleContext properties and methods that are shared by all rules.\n   * All rule contexts will inherit from this object. This avoids the performance penalty of copying all the\n   * properties once for each rule.\n   */\n\n  const sharedTraversalContext = Object.freeze(Object.assign(Object.create(BASE_TRAVERSAL_CONTEXT), {\n    getAncestors: () => getAncestors(currentNode),\n    getDeclaredVariables: sourceCode.scopeManager.getDeclaredVariables.bind(sourceCode.scopeManager),\n    getCwd: () => cwd,\n    getFilename: () => filename,\n    getPhysicalFilename: () => physicalFilename || filename,\n    getScope: () => getScope(sourceCode.scopeManager, currentNode),\n    getSourceCode: () => sourceCode,\n    markVariableAsUsed: name => markVariableAsUsed(sourceCode.scopeManager, currentNode, languageOptions, name),\n    parserOptions: { ...languageOptions.parserOptions\n    },\n    parserPath: parserName,\n    languageOptions,\n    parserServices: sourceCode.parserServices,\n    settings\n  }));\n  const lintingProblems = [];\n  Object.keys(configuredRules).forEach(ruleId => {\n    const severity = ConfigOps.getRuleSeverity(configuredRules[ruleId]); // not load disabled rules\n\n    if (severity === 0) {\n      return;\n    }\n\n    const rule = ruleMapper(ruleId);\n\n    if (!rule) {\n      lintingProblems.push(createLintingProblem({\n        ruleId\n      }));\n      return;\n    }\n\n    const messageIds = rule.meta && rule.meta.messages;\n    let reportTranslator = null;\n    const ruleContext = Object.freeze(Object.assign(Object.create(sharedTraversalContext), {\n      id: ruleId,\n      options: getRuleOptions(configuredRules[ruleId]),\n\n      report() {\n        /*\n         * Create a report translator lazily.\n         * In a vast majority of cases, any given rule reports zero errors on a given\n         * piece of code. Creating a translator lazily avoids the performance cost of\n         * creating a new translator function for each rule that usually doesn't get\n         * called.\n         *\n         * Using lazy report translators improves end-to-end performance by about 3%\n         * with Node 8.4.0.\n         */\n        if (reportTranslator === null) {\n          reportTranslator = createReportTranslator({\n            ruleId,\n            severity,\n            sourceCode,\n            messageIds,\n            disableFixes\n          });\n        }\n\n        const problem = reportTranslator(...arguments);\n\n        if (problem.fix && !(rule.meta && rule.meta.fixable)) {\n          throw new Error(\"Fixable rules must set the `meta.fixable` property to \\\"code\\\" or \\\"whitespace\\\".\");\n        }\n\n        if (problem.suggestions && !(rule.meta && rule.meta.hasSuggestions === true)) {\n          if (rule.meta && rule.meta.docs && typeof rule.meta.docs.suggestion !== \"undefined\") {\n            // Encourage migration from the former property name.\n            throw new Error(\"Rules with suggestions must set the `meta.hasSuggestions` property to `true`. `meta.docs.suggestion` is ignored by ESLint.\");\n          }\n\n          throw new Error(\"Rules with suggestions must set the `meta.hasSuggestions` property to `true`.\");\n        }\n\n        lintingProblems.push(problem);\n      }\n\n    }));\n    const ruleListeners = timing.enabled ? timing.time(ruleId, createRuleListeners)(rule, ruleContext) : createRuleListeners(rule, ruleContext);\n    /**\n     * Include `ruleId` in error logs\n     * @param {Function} ruleListener A rule method that listens for a node.\n     * @returns {Function} ruleListener wrapped in error handler\n     */\n\n    function addRuleErrorHandler(ruleListener) {\n      return function ruleErrorHandler() {\n        try {\n          return ruleListener(...arguments);\n        } catch (e) {\n          e.ruleId = ruleId;\n          throw e;\n        }\n      };\n    }\n\n    if (typeof ruleListeners === \"undefined\" || ruleListeners === null) {\n      throw new Error(`The create() function for rule '${ruleId}' did not return an object.`);\n    } // add all the selectors from the rule as listeners\n\n\n    Object.keys(ruleListeners).forEach(selector => {\n      const ruleListener = timing.enabled ? timing.time(ruleId, ruleListeners[selector]) : ruleListeners[selector];\n      emitter.on(selector, addRuleErrorHandler(ruleListener));\n    });\n  }); // only run code path analyzer if the top level node is \"Program\", skip otherwise\n\n  const eventGenerator = nodeQueue[0].node.type === \"Program\" ? new CodePathAnalyzer(new NodeEventGenerator(emitter, {\n    visitorKeys: sourceCode.visitorKeys,\n    fallback: Traverser.getKeys\n  })) : new NodeEventGenerator(emitter, {\n    visitorKeys: sourceCode.visitorKeys,\n    fallback: Traverser.getKeys\n  });\n  nodeQueue.forEach(traversalInfo => {\n    currentNode = traversalInfo.node;\n\n    try {\n      if (traversalInfo.isEntering) {\n        eventGenerator.enterNode(currentNode);\n      } else {\n        eventGenerator.leaveNode(currentNode);\n      }\n    } catch (err) {\n      err.currentNode = currentNode;\n      throw err;\n    }\n  });\n  return lintingProblems;\n}\n/**\n * Ensure the source code to be a string.\n * @param {string|SourceCode} textOrSourceCode The text or source code object.\n * @returns {string} The source code text.\n */\n\n\nfunction ensureText(textOrSourceCode) {\n  if (typeof textOrSourceCode === \"object\") {\n    const {\n      hasBOM,\n      text\n    } = textOrSourceCode;\n    const bom = hasBOM ? \"\\uFEFF\" : \"\";\n    return bom + text;\n  }\n\n  return String(textOrSourceCode);\n}\n/**\n * Get an environment.\n * @param {LinterInternalSlots} slots The internal slots of Linter.\n * @param {string} envId The environment ID to get.\n * @returns {Environment|null} The environment.\n */\n\n\nfunction getEnv(slots, envId) {\n  return slots.lastConfigArray && slots.lastConfigArray.pluginEnvironments.get(envId) || BuiltInEnvironments.get(envId) || null;\n}\n/**\n * Get a rule.\n * @param {LinterInternalSlots} slots The internal slots of Linter.\n * @param {string} ruleId The rule ID to get.\n * @returns {Rule|null} The rule.\n */\n\n\nfunction getRule(slots, ruleId) {\n  return slots.lastConfigArray && slots.lastConfigArray.pluginRules.get(ruleId) || slots.ruleMap.get(ruleId);\n}\n/**\n * Normalize the value of the cwd\n * @param {string | undefined} cwd raw value of the cwd, path to a directory that should be considered as the current working directory, can be undefined.\n * @returns {string | undefined} normalized cwd\n */\n\n\nfunction normalizeCwd(cwd) {\n  if (cwd) {\n    return cwd;\n  }\n\n  if (typeof process === \"object\") {\n    return process.cwd();\n  } // It's more explicit to assign the undefined\n  // eslint-disable-next-line no-undefined -- Consistently returning a value\n\n\n  return undefined;\n}\n/**\n * The map to store private data.\n * @type {WeakMap<Linter, LinterInternalSlots>}\n */\n\n\nconst internalSlotsMap = new WeakMap();\n/**\n * Throws an error when the given linter is in flat config mode.\n * @param {Linter} linter The linter to check.\n * @returns {void}\n * @throws {Error} If the linter is in flat config mode.\n */\n\nfunction assertEslintrcConfig(linter) {\n  const {\n    configType\n  } = internalSlotsMap.get(linter);\n\n  if (configType === \"flat\") {\n    throw new Error(\"This method cannot be used with flat config. Add your entries directly into the config array.\");\n  }\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Object that is responsible for verifying JavaScript text\n * @name Linter\n */\n\n\nclass Linter {\n  /**\n   * Initialize the Linter.\n   * @param {Object} [config] the config object\n   * @param {string} [config.cwd] path to a directory that should be considered as the current working directory, can be undefined.\n   * @param {\"flat\"|\"eslintrc\"} [config.configType=\"eslintrc\"] the type of config used.\n   */\n  constructor() {\n    let {\n      cwd,\n      configType\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    internalSlotsMap.set(this, {\n      cwd: normalizeCwd(cwd),\n      lastConfigArray: null,\n      lastSourceCode: null,\n      lastSuppressedMessages: [],\n      configType,\n      // TODO: Remove after flat config conversion\n      parserMap: new Map([[\"espree\", espree]]),\n      ruleMap: new Rules()\n    });\n    this.version = pkg.version;\n  }\n  /**\n   * Getter for package version.\n   * @static\n   * @returns {string} The version from package.json.\n   */\n\n\n  static get version() {\n    return pkg.version;\n  }\n  /**\n   * Same as linter.verify, except without support for processors.\n   * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.\n   * @param {ConfigData} providedConfig An ESLintConfig instance to configure everything.\n   * @param {VerifyOptions} [providedOptions] The optional filename of the file being checked.\n   * @throws {Error} If during rule execution.\n   * @returns {(LintMessage|SuppressedLintMessage)[]} The results as an array of messages or an empty array if no messages.\n   */\n\n\n  _verifyWithoutProcessors(textOrSourceCode, providedConfig, providedOptions) {\n    const slots = internalSlotsMap.get(this);\n    const config = providedConfig || {};\n    const options = normalizeVerifyOptions(providedOptions, config);\n    let text; // evaluate arguments\n\n    if (typeof textOrSourceCode === \"string\") {\n      slots.lastSourceCode = null;\n      text = textOrSourceCode;\n    } else {\n      slots.lastSourceCode = textOrSourceCode;\n      text = textOrSourceCode.text;\n    } // Resolve parser.\n\n\n    let parserName = DEFAULT_PARSER_NAME;\n    let parser = espree;\n\n    if (typeof config.parser === \"object\" && config.parser !== null) {\n      parserName = config.parser.filePath;\n      parser = config.parser.definition;\n    } else if (typeof config.parser === \"string\") {\n      if (!slots.parserMap.has(config.parser)) {\n        return [{\n          ruleId: null,\n          fatal: true,\n          severity: 2,\n          message: `Configured parser '${config.parser}' was not found.`,\n          line: 0,\n          column: 0\n        }];\n      }\n\n      parserName = config.parser;\n      parser = slots.parserMap.get(config.parser);\n    } // search and apply \"eslint-env *\".\n\n\n    const envInFile = options.allowInlineConfig && !options.warnInlineConfig ? findEslintEnv(text) : {};\n    const resolvedEnvConfig = Object.assign({\n      builtin: true\n    }, config.env, envInFile);\n    const enabledEnvs = Object.keys(resolvedEnvConfig).filter(envName => resolvedEnvConfig[envName]).map(envName => getEnv(slots, envName)).filter(env => env);\n    const parserOptions = resolveParserOptions(parser, config.parserOptions || {}, enabledEnvs);\n    const configuredGlobals = resolveGlobals(config.globals || {}, enabledEnvs);\n    const settings = config.settings || {};\n    const languageOptions = createLanguageOptions({\n      globals: config.globals,\n      parser,\n      parserOptions\n    });\n\n    if (!slots.lastSourceCode) {\n      const parseResult = parse(text, languageOptions, options.filename);\n\n      if (!parseResult.success) {\n        return [parseResult.error];\n      }\n\n      slots.lastSourceCode = parseResult.sourceCode;\n    } else {\n      /*\n       * If the given source code object as the first argument does not have scopeManager, analyze the scope.\n       * This is for backward compatibility (SourceCode is frozen so it cannot rebind).\n       */\n      if (!slots.lastSourceCode.scopeManager) {\n        slots.lastSourceCode = new SourceCode({\n          text: slots.lastSourceCode.text,\n          ast: slots.lastSourceCode.ast,\n          parserServices: slots.lastSourceCode.parserServices,\n          visitorKeys: slots.lastSourceCode.visitorKeys,\n          scopeManager: analyzeScope(slots.lastSourceCode.ast, languageOptions)\n        });\n      }\n    }\n\n    const sourceCode = slots.lastSourceCode;\n    const commentDirectives = options.allowInlineConfig ? getDirectiveComments(sourceCode.ast, ruleId => getRule(slots, ruleId), options.warnInlineConfig) : {\n      configuredRules: {},\n      enabledGlobals: {},\n      exportedVariables: {},\n      problems: [],\n      disableDirectives: []\n    }; // augment global scope with declared global variables\n\n    addDeclaredGlobals(sourceCode.scopeManager.scopes[0], configuredGlobals, {\n      exportedVariables: commentDirectives.exportedVariables,\n      enabledGlobals: commentDirectives.enabledGlobals\n    });\n    const configuredRules = Object.assign({}, config.rules, commentDirectives.configuredRules);\n    let lintingProblems;\n\n    try {\n      lintingProblems = runRules(sourceCode, configuredRules, ruleId => getRule(slots, ruleId), parserName, languageOptions, settings, options.filename, options.disableFixes, slots.cwd, providedOptions.physicalFilename);\n    } catch (err) {\n      err.message += `\\nOccurred while linting ${options.filename}`;\n      debug(\"An error occurred while traversing\");\n      debug(\"Filename:\", options.filename);\n\n      if (err.currentNode) {\n        const {\n          line\n        } = err.currentNode.loc.start;\n        debug(\"Line:\", line);\n        err.message += `:${line}`;\n      }\n\n      debug(\"Parser Options:\", parserOptions);\n      debug(\"Parser Path:\", parserName);\n      debug(\"Settings:\", settings);\n\n      if (err.ruleId) {\n        err.message += `\\nRule: \"${err.ruleId}\"`;\n      }\n\n      throw err;\n    }\n\n    return applyDisableDirectives({\n      directives: commentDirectives.disableDirectives,\n      disableFixes: options.disableFixes,\n      problems: lintingProblems.concat(commentDirectives.problems).sort((problemA, problemB) => problemA.line - problemB.line || problemA.column - problemB.column),\n      reportUnusedDisableDirectives: options.reportUnusedDisableDirectives\n    });\n  }\n  /**\n   * Verifies the text against the rules specified by the second argument.\n   * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.\n   * @param {ConfigData|ConfigArray} config An ESLintConfig instance to configure everything.\n   * @param {(string|(VerifyOptions&ProcessorOptions))} [filenameOrOptions] The optional filename of the file being checked.\n   *      If this is not set, the filename will default to '<input>' in the rule context. If\n   *      an object, then it has \"filename\", \"allowInlineConfig\", and some properties.\n   * @returns {LintMessage[]} The results as an array of messages or an empty array if no messages.\n   */\n\n\n  verify(textOrSourceCode, config, filenameOrOptions) {\n    debug(\"Verify\");\n    const {\n      configType\n    } = internalSlotsMap.get(this);\n    const options = typeof filenameOrOptions === \"string\" ? {\n      filename: filenameOrOptions\n    } : filenameOrOptions || {};\n\n    if (config) {\n      if (configType === \"flat\") {\n        /*\n         * Because of how Webpack packages up the files, we can't\n         * compare directly to `FlatConfigArray` using `instanceof`\n         * because it's not the same `FlatConfigArray` as in the tests.\n         * So, we work around it by assuming an array is, in fact, a\n         * `FlatConfigArray` if it has a `getConfig()` method.\n         */\n        let configArray = config;\n\n        if (!Array.isArray(config) || typeof config.getConfig !== \"function\") {\n          configArray = new FlatConfigArray(config);\n          configArray.normalizeSync();\n        }\n\n        return this._distinguishSuppressedMessages(this._verifyWithFlatConfigArray(textOrSourceCode, configArray, options, true));\n      }\n\n      if (typeof config.extractConfig === \"function\") {\n        return this._distinguishSuppressedMessages(this._verifyWithConfigArray(textOrSourceCode, config, options));\n      }\n    }\n    /*\n     * If we get to here, it means `config` is just an object rather\n     * than a config array so we can go right into linting.\n     */\n\n    /*\n     * `Linter` doesn't support `overrides` property in configuration.\n     * So we cannot apply multiple processors.\n     */\n\n\n    if (options.preprocess || options.postprocess) {\n      return this._distinguishSuppressedMessages(this._verifyWithProcessor(textOrSourceCode, config, options));\n    }\n\n    return this._distinguishSuppressedMessages(this._verifyWithoutProcessors(textOrSourceCode, config, options));\n  }\n  /**\n   * Verify with a processor.\n   * @param {string|SourceCode} textOrSourceCode The source code.\n   * @param {FlatConfig} config The config array.\n   * @param {VerifyOptions&ProcessorOptions} options The options.\n   * @param {FlatConfigArray} [configForRecursive] The `ConfigArray` object to apply multiple processors recursively.\n   * @returns {(LintMessage|SuppressedLintMessage)[]} The found problems.\n   */\n\n\n  _verifyWithFlatConfigArrayAndProcessor(textOrSourceCode, config, options, configForRecursive) {\n    const filename = options.filename || \"<input>\";\n    const filenameToExpose = normalizeFilename(filename);\n    const physicalFilename = options.physicalFilename || filenameToExpose;\n    const text = ensureText(textOrSourceCode);\n\n    const preprocess = options.preprocess || (rawText => [rawText]);\n\n    const postprocess = options.postprocess || (messagesList => messagesList.flat());\n\n    const filterCodeBlock = options.filterCodeBlock || (blockFilename => blockFilename.endsWith(\".js\"));\n\n    const originalExtname = path.extname(filename);\n    let blocks;\n\n    try {\n      blocks = preprocess(text, filenameToExpose);\n    } catch (ex) {\n      // If the message includes a leading line number, strip it:\n      const message = `Preprocessing error: ${ex.message.replace(/^line \\d+:/iu, \"\").trim()}`;\n      debug(\"%s\\n%s\", message, ex.stack);\n      return [{\n        ruleId: null,\n        fatal: true,\n        severity: 2,\n        message,\n        line: ex.lineNumber,\n        column: ex.column\n      }];\n    }\n\n    const messageLists = blocks.map((block, i) => {\n      debug(\"A code block was found: %o\", block.filename || \"(unnamed)\"); // Keep the legacy behavior.\n\n      if (typeof block === \"string\") {\n        return this._verifyWithFlatConfigArrayAndWithoutProcessors(block, config, options);\n      }\n\n      const blockText = block.text;\n      const blockName = path.join(filename, `${i}_${block.filename}`); // Skip this block if filtered.\n\n      if (!filterCodeBlock(blockName, blockText)) {\n        debug(\"This code block was skipped.\");\n        return [];\n      } // Resolve configuration again if the file content or extension was changed.\n\n\n      if (configForRecursive && (text !== blockText || path.extname(blockName) !== originalExtname)) {\n        debug(\"Resolving configuration again because the file content or extension was changed.\");\n        return this._verifyWithFlatConfigArray(blockText, configForRecursive, { ...options,\n          filename: blockName,\n          physicalFilename\n        });\n      } // Does lint.\n\n\n      return this._verifyWithFlatConfigArrayAndWithoutProcessors(blockText, config, { ...options,\n        filename: blockName,\n        physicalFilename\n      });\n    });\n    return postprocess(messageLists, filenameToExpose);\n  }\n  /**\n   * Same as linter.verify, except without support for processors.\n   * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.\n   * @param {FlatConfig} providedConfig An ESLintConfig instance to configure everything.\n   * @param {VerifyOptions} [providedOptions] The optional filename of the file being checked.\n   * @throws {Error} If during rule execution.\n   * @returns {(LintMessage|SuppressedLintMessage)[]} The results as an array of messages or an empty array if no messages.\n   */\n\n\n  _verifyWithFlatConfigArrayAndWithoutProcessors(textOrSourceCode, providedConfig, providedOptions) {\n    const slots = internalSlotsMap.get(this);\n    const config = providedConfig || {};\n    const options = normalizeVerifyOptions(providedOptions, config);\n    let text; // evaluate arguments\n\n    if (typeof textOrSourceCode === \"string\") {\n      slots.lastSourceCode = null;\n      text = textOrSourceCode;\n    } else {\n      slots.lastSourceCode = textOrSourceCode;\n      text = textOrSourceCode.text;\n    }\n\n    const languageOptions = config.languageOptions;\n    languageOptions.ecmaVersion = normalizeEcmaVersionForLanguageOptions(languageOptions.ecmaVersion); // add configured globals and language globals\n\n    const configuredGlobals = { ...getGlobalsForEcmaVersion(languageOptions.ecmaVersion),\n      ...(languageOptions.sourceType === \"commonjs\" ? globals.commonjs : void 0),\n      ...languageOptions.globals\n    }; // double check that there is a parser to avoid mysterious error messages\n\n    if (!languageOptions.parser) {\n      throw new TypeError(`No parser specified for ${options.filename}`);\n    } // Espree expects this information to be passed in\n\n\n    if (isEspree(languageOptions.parser)) {\n      const parserOptions = languageOptions.parserOptions;\n\n      if (languageOptions.sourceType) {\n        parserOptions.sourceType = languageOptions.sourceType;\n\n        if (parserOptions.sourceType === \"module\" && parserOptions.ecmaFeatures && parserOptions.ecmaFeatures.globalReturn) {\n          parserOptions.ecmaFeatures.globalReturn = false;\n        }\n      }\n    }\n\n    const settings = config.settings || {};\n\n    if (!slots.lastSourceCode) {\n      const parseResult = parse(text, languageOptions, options.filename);\n\n      if (!parseResult.success) {\n        return [parseResult.error];\n      }\n\n      slots.lastSourceCode = parseResult.sourceCode;\n    } else {\n      /*\n       * If the given source code object as the first argument does not have scopeManager, analyze the scope.\n       * This is for backward compatibility (SourceCode is frozen so it cannot rebind).\n       */\n      if (!slots.lastSourceCode.scopeManager) {\n        slots.lastSourceCode = new SourceCode({\n          text: slots.lastSourceCode.text,\n          ast: slots.lastSourceCode.ast,\n          parserServices: slots.lastSourceCode.parserServices,\n          visitorKeys: slots.lastSourceCode.visitorKeys,\n          scopeManager: analyzeScope(slots.lastSourceCode.ast, languageOptions)\n        });\n      }\n    }\n\n    const sourceCode = slots.lastSourceCode;\n    const commentDirectives = options.allowInlineConfig ? getDirectiveComments(sourceCode.ast, ruleId => getRuleFromConfig(ruleId, config), options.warnInlineConfig) : {\n      configuredRules: {},\n      enabledGlobals: {},\n      exportedVariables: {},\n      problems: [],\n      disableDirectives: []\n    }; // augment global scope with declared global variables\n\n    addDeclaredGlobals(sourceCode.scopeManager.scopes[0], configuredGlobals, {\n      exportedVariables: commentDirectives.exportedVariables,\n      enabledGlobals: commentDirectives.enabledGlobals\n    });\n    const configuredRules = Object.assign({}, config.rules, commentDirectives.configuredRules);\n    let lintingProblems;\n\n    try {\n      lintingProblems = runRules(sourceCode, configuredRules, ruleId => getRuleFromConfig(ruleId, config), void 0, languageOptions, settings, options.filename, options.disableFixes, slots.cwd, providedOptions.physicalFilename);\n    } catch (err) {\n      err.message += `\\nOccurred while linting ${options.filename}`;\n      debug(\"An error occurred while traversing\");\n      debug(\"Filename:\", options.filename);\n\n      if (err.currentNode) {\n        const {\n          line\n        } = err.currentNode.loc.start;\n        debug(\"Line:\", line);\n        err.message += `:${line}`;\n      }\n\n      debug(\"Parser Options:\", languageOptions.parserOptions); // debug(\"Parser Path:\", parserName);\n\n      debug(\"Settings:\", settings);\n\n      if (err.ruleId) {\n        err.message += `\\nRule: \"${err.ruleId}\"`;\n      }\n\n      throw err;\n    }\n\n    return applyDisableDirectives({\n      directives: commentDirectives.disableDirectives,\n      disableFixes: options.disableFixes,\n      problems: lintingProblems.concat(commentDirectives.problems).sort((problemA, problemB) => problemA.line - problemB.line || problemA.column - problemB.column),\n      reportUnusedDisableDirectives: options.reportUnusedDisableDirectives\n    });\n  }\n  /**\n   * Verify a given code with `ConfigArray`.\n   * @param {string|SourceCode} textOrSourceCode The source code.\n   * @param {ConfigArray} configArray The config array.\n   * @param {VerifyOptions&ProcessorOptions} options The options.\n   * @returns {(LintMessage|SuppressedLintMessage)[]} The found problems.\n   */\n\n\n  _verifyWithConfigArray(textOrSourceCode, configArray, options) {\n    debug(\"With ConfigArray: %s\", options.filename); // Store the config array in order to get plugin envs and rules later.\n\n    internalSlotsMap.get(this).lastConfigArray = configArray; // Extract the final config for this file.\n\n    const config = configArray.extractConfig(options.filename);\n    const processor = config.processor && configArray.pluginProcessors.get(config.processor); // Verify.\n\n    if (processor) {\n      debug(\"Apply the processor: %o\", config.processor);\n      const {\n        preprocess,\n        postprocess,\n        supportsAutofix\n      } = processor;\n      const disableFixes = options.disableFixes || !supportsAutofix;\n      return this._verifyWithProcessor(textOrSourceCode, config, { ...options,\n        disableFixes,\n        postprocess,\n        preprocess\n      }, configArray);\n    }\n\n    return this._verifyWithoutProcessors(textOrSourceCode, config, options);\n  }\n  /**\n   * Verify a given code with a flat config.\n   * @param {string|SourceCode} textOrSourceCode The source code.\n   * @param {FlatConfigArray} configArray The config array.\n   * @param {VerifyOptions&ProcessorOptions} options The options.\n   * @param {boolean} [firstCall=false] Indicates if this is being called directly\n   *      from verify(). (TODO: Remove once eslintrc is removed.)\n   * @returns {(LintMessage|SuppressedLintMessage)[]} The found problems.\n   */\n\n\n  _verifyWithFlatConfigArray(textOrSourceCode, configArray, options) {\n    let firstCall = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    debug(\"With flat config: %s\", options.filename); // we need a filename to match configs against\n\n    const filename = options.filename || \"__placeholder__.js\"; // Store the config array in order to get plugin envs and rules later.\n\n    internalSlotsMap.get(this).lastConfigArray = configArray;\n    const config = configArray.getConfig(filename);\n\n    if (!config) {\n      return [{\n        ruleId: null,\n        severity: 1,\n        message: `No matching configuration found for ${filename}.`,\n        line: 0,\n        column: 0\n      }];\n    } // Verify.\n\n\n    if (config.processor) {\n      debug(\"Apply the processor: %o\", config.processor);\n      const {\n        preprocess,\n        postprocess,\n        supportsAutofix\n      } = config.processor;\n      const disableFixes = options.disableFixes || !supportsAutofix;\n      return this._verifyWithFlatConfigArrayAndProcessor(textOrSourceCode, config, { ...options,\n        filename,\n        disableFixes,\n        postprocess,\n        preprocess\n      }, configArray);\n    } // check for options-based processing\n\n\n    if (firstCall && (options.preprocess || options.postprocess)) {\n      return this._verifyWithFlatConfigArrayAndProcessor(textOrSourceCode, config, options);\n    }\n\n    return this._verifyWithFlatConfigArrayAndWithoutProcessors(textOrSourceCode, config, options);\n  }\n  /**\n   * Verify with a processor.\n   * @param {string|SourceCode} textOrSourceCode The source code.\n   * @param {ConfigData|ExtractedConfig} config The config array.\n   * @param {VerifyOptions&ProcessorOptions} options The options.\n   * @param {ConfigArray} [configForRecursive] The `ConfigArray` object to apply multiple processors recursively.\n   * @returns {(LintMessage|SuppressedLintMessage)[]} The found problems.\n   */\n\n\n  _verifyWithProcessor(textOrSourceCode, config, options, configForRecursive) {\n    const filename = options.filename || \"<input>\";\n    const filenameToExpose = normalizeFilename(filename);\n    const physicalFilename = options.physicalFilename || filenameToExpose;\n    const text = ensureText(textOrSourceCode);\n\n    const preprocess = options.preprocess || (rawText => [rawText]);\n\n    const postprocess = options.postprocess || (messagesList => messagesList.flat());\n\n    const filterCodeBlock = options.filterCodeBlock || (blockFilename => blockFilename.endsWith(\".js\"));\n\n    const originalExtname = path.extname(filename);\n    let blocks;\n\n    try {\n      blocks = preprocess(text, filenameToExpose);\n    } catch (ex) {\n      // If the message includes a leading line number, strip it:\n      const message = `Preprocessing error: ${ex.message.replace(/^line \\d+:/iu, \"\").trim()}`;\n      debug(\"%s\\n%s\", message, ex.stack);\n      return [{\n        ruleId: null,\n        fatal: true,\n        severity: 2,\n        message,\n        line: ex.lineNumber,\n        column: ex.column\n      }];\n    }\n\n    const messageLists = blocks.map((block, i) => {\n      debug(\"A code block was found: %o\", block.filename || \"(unnamed)\"); // Keep the legacy behavior.\n\n      if (typeof block === \"string\") {\n        return this._verifyWithoutProcessors(block, config, options);\n      }\n\n      const blockText = block.text;\n      const blockName = path.join(filename, `${i}_${block.filename}`); // Skip this block if filtered.\n\n      if (!filterCodeBlock(blockName, blockText)) {\n        debug(\"This code block was skipped.\");\n        return [];\n      } // Resolve configuration again if the file content or extension was changed.\n\n\n      if (configForRecursive && (text !== blockText || path.extname(blockName) !== originalExtname)) {\n        debug(\"Resolving configuration again because the file content or extension was changed.\");\n        return this._verifyWithConfigArray(blockText, configForRecursive, { ...options,\n          filename: blockName,\n          physicalFilename\n        });\n      } // Does lint.\n\n\n      return this._verifyWithoutProcessors(blockText, config, { ...options,\n        filename: blockName,\n        physicalFilename\n      });\n    });\n    return postprocess(messageLists, filenameToExpose);\n  }\n  /**\n   * Given a list of reported problems, distinguish problems between normal messages and suppressed messages.\n   * The normal messages will be returned and the suppressed messages will be stored as lastSuppressedMessages.\n   * @param {Problem[]} problems A list of reported problems.\n   * @returns {LintMessage[]} A list of LintMessage.\n   */\n\n\n  _distinguishSuppressedMessages(problems) {\n    const messages = [];\n    const suppressedMessages = [];\n    const slots = internalSlotsMap.get(this);\n\n    for (const problem of problems) {\n      if (problem.suppressions) {\n        suppressedMessages.push(problem);\n      } else {\n        messages.push(problem);\n      }\n    }\n\n    slots.lastSuppressedMessages = suppressedMessages;\n    return messages;\n  }\n  /**\n   * Gets the SourceCode object representing the parsed source.\n   * @returns {SourceCode} The SourceCode object.\n   */\n\n\n  getSourceCode() {\n    return internalSlotsMap.get(this).lastSourceCode;\n  }\n  /**\n   * Gets the list of SuppressedLintMessage produced in the last running.\n   * @returns {SuppressedLintMessage[]} The list of SuppressedLintMessage\n   */\n\n\n  getSuppressedMessages() {\n    return internalSlotsMap.get(this).lastSuppressedMessages;\n  }\n  /**\n   * Defines a new linting rule.\n   * @param {string} ruleId A unique rule identifier\n   * @param {Function | Rule} ruleModule Function from context to object mapping AST node types to event handlers\n   * @returns {void}\n   */\n\n\n  defineRule(ruleId, ruleModule) {\n    assertEslintrcConfig(this);\n    internalSlotsMap.get(this).ruleMap.define(ruleId, ruleModule);\n  }\n  /**\n   * Defines many new linting rules.\n   * @param {Record<string, Function | Rule>} rulesToDefine map from unique rule identifier to rule\n   * @returns {void}\n   */\n\n\n  defineRules(rulesToDefine) {\n    assertEslintrcConfig(this);\n    Object.getOwnPropertyNames(rulesToDefine).forEach(ruleId => {\n      this.defineRule(ruleId, rulesToDefine[ruleId]);\n    });\n  }\n  /**\n   * Gets an object with all loaded rules.\n   * @returns {Map<string, Rule>} All loaded rules\n   */\n\n\n  getRules() {\n    assertEslintrcConfig(this);\n    const {\n      lastConfigArray,\n      ruleMap\n    } = internalSlotsMap.get(this);\n    return new Map(function* () {\n      yield* ruleMap;\n\n      if (lastConfigArray) {\n        yield* lastConfigArray.pluginRules;\n      }\n    }());\n  }\n  /**\n   * Define a new parser module\n   * @param {string} parserId Name of the parser\n   * @param {Parser} parserModule The parser object\n   * @returns {void}\n   */\n\n\n  defineParser(parserId, parserModule) {\n    assertEslintrcConfig(this);\n    internalSlotsMap.get(this).parserMap.set(parserId, parserModule);\n  }\n  /**\n   * Performs multiple autofix passes over the text until as many fixes as possible\n   * have been applied.\n   * @param {string} text The source text to apply fixes to.\n   * @param {ConfigData|ConfigArray|FlatConfigArray} config The ESLint config object to use.\n   * @param {VerifyOptions&ProcessorOptions&FixOptions} options The ESLint options object to use.\n   * @returns {{fixed:boolean,messages:LintMessage[],output:string}} The result of the fix operation as returned from the\n   *      SourceCodeFixer.\n   */\n\n\n  verifyAndFix(text, config, options) {\n    let messages = [],\n        fixedResult,\n        fixed = false,\n        passNumber = 0,\n        currentText = text;\n    const debugTextDescription = options && options.filename || `${text.slice(0, 10)}...`;\n    const shouldFix = options && typeof options.fix !== \"undefined\" ? options.fix : true;\n    /**\n     * This loop continues until one of the following is true:\n     *\n     * 1. No more fixes have been applied.\n     * 2. Ten passes have been made.\n     *\n     * That means anytime a fix is successfully applied, there will be another pass.\n     * Essentially, guaranteeing a minimum of two passes.\n     */\n\n    do {\n      passNumber++;\n      debug(`Linting code for ${debugTextDescription} (pass ${passNumber})`);\n      messages = this.verify(currentText, config, options);\n      debug(`Generating fixed text for ${debugTextDescription} (pass ${passNumber})`);\n      fixedResult = SourceCodeFixer.applyFixes(currentText, messages, shouldFix);\n      /*\n       * stop if there are any syntax errors.\n       * 'fixedResult.output' is a empty string.\n       */\n\n      if (messages.length === 1 && messages[0].fatal) {\n        break;\n      } // keep track if any fixes were ever applied - important for return value\n\n\n      fixed = fixed || fixedResult.fixed; // update to use the fixed output instead of the original text\n\n      currentText = fixedResult.output;\n    } while (fixedResult.fixed && passNumber < MAX_AUTOFIX_PASSES);\n    /*\n     * If the last result had fixes, we need to lint again to be sure we have\n     * the most up-to-date information.\n     */\n\n\n    if (fixedResult.fixed) {\n      fixedResult.messages = this.verify(currentText, config, options);\n    } // ensure the last result properly reflects if fixes were done\n\n\n    fixedResult.fixed = fixed;\n    fixedResult.output = currentText;\n    return fixedResult;\n  }\n\n}\n\nmodule.exports = {\n  Linter,\n\n  /**\n   * Get the internal slots of a given Linter instance for tests.\n   * @param {Linter} instance The Linter instance to get.\n   * @returns {LinterInternalSlots} The internal slots.\n   */\n  getLinterInternalSlots(instance) {\n    return internalSlotsMap.get(instance);\n  }\n\n};","map":{"version":3,"names":["path","require","eslintScope","evk","espree","merge","pkg","astUtils","Legacy","ConfigOps","ConfigValidator","environments","BuiltInEnvironments","Traverser","SourceCode","CodePathAnalyzer","applyDisableDirectives","ConfigCommentParser","NodeEventGenerator","createReportTranslator","Rules","createEmitter","SourceCodeFixer","timing","ruleReplacements","getRuleFromConfig","FlatConfigArray","debug","MAX_AUTOFIX_PASSES","DEFAULT_PARSER_NAME","DEFAULT_ECMA_VERSION","commentParser","DEFAULT_ERROR_LOC","start","line","column","end","parserSymbol","Symbol","for","globals","isEspree","parser","getGlobalsForEcmaVersion","ecmaVersion","es3","es5","addDeclaredGlobals","globalScope","configGlobals","exportedVariables","enabledGlobals","id","Set","Object","keys","configValue","normalizeConfigGlobal","commentValue","value","sourceComments","comments","variable","set","get","Variable","variables","push","eslintImplicitGlobalSetting","eslintExplicitGlobal","eslintExplicitGlobalComments","writeable","forEach","name","eslintUsed","through","filter","reference","identifier","resolved","references","createMissingRuleMessage","ruleId","prototype","hasOwnProperty","call","rules","join","createLintingProblem","options","loc","message","severity","endLine","endColumn","nodeType","createDisableDirectives","commentToken","type","justification","ruleMapper","ruleIds","parseListConfig","directiveRules","length","result","directives","directiveProblems","parentComment","extractDirectiveComment","match","exec","directivePart","trim","justificationPart","directive","slice","index","getDirectiveComments","ast","warnInlineConfig","configuredRules","create","problems","disableDirectives","validator","builtInRules","token","comment","directiveText","lineCommentSupported","test","kind","directiveValue","directiveType","assign","parseStringConfig","entries","normalizedValue","err","parseResult","parseJsonConfig","success","config","rule","ruleValue","validateRuleOptions","error","normalizeEcmaVersion","latestEcmaVersion","normalizeEcmaVersionForLanguageOptions","eslintEnvPattern","findEslintEnv","text","retv","lastIndex","endsWith","normalizeFilename","filename","parts","split","sep","lastIndexOf","normalizeVerifyOptions","providedOptions","linterOptions","disableInlineConfig","noInlineConfig","ignoreInlineConfig","allowInlineConfig","configNameOfNoInlineConfig","reportUnusedDisableDirectives","disableFixes","Boolean","resolveParserOptions","enabledEnvironments","parserOptionsFromEnv","env","parserOptions","reduce","mergedParserOptions","isModule","sourceType","ecmaFeatures","globalReturn","createLanguageOptions","configuredGlobals","resolveGlobals","providedGlobals","map","stripUnicodeBOM","charCodeAt","getRuleOptions","ruleConfig","Array","isArray","analyzeScope","languageOptions","visitorKeys","analyze","ignoreEval","nodejsScope","impliedStrict","childVisitorKeys","KEYS","fallback","getKeys","parse","filePath","textToParse","replace","shebangPattern","captured","range","raw","tokens","eslintVisitorKeys","eslintScopeManager","parseForESLint","parserServices","services","scopeManager","sourceCode","ex","stack","fatal","lineNumber","getScope","currentNode","inner","node","parent","scope","acquire","childScopes","scopes","markVariableAsUsed","hasGlobalReturn","specialScope","currentScope","initialScope","upper","find","scopeVar","createRuleListeners","ruleContext","getAncestors","ancestorsStartingAtParent","ancestor","reverse","DEPRECATED_SOURCECODE_PASSTHROUGHS","getSource","getSourceLines","getAllComments","getNodeByRangeIndex","getComments","getCommentsBefore","getCommentsAfter","getCommentsInside","getJSDocComment","getFirstToken","getFirstTokens","getLastToken","getLastTokens","getTokenAfter","getTokenBefore","getTokenByRangeStart","getTokens","getTokensAfter","getTokensBefore","getTokensBetween","BASE_TRAVERSAL_CONTEXT","freeze","contextInfo","methodName","getSourceCode","runRules","parserName","settings","cwd","physicalFilename","emitter","nodeQueue","traverse","enter","isEntering","leave","sharedTraversalContext","getDeclaredVariables","bind","getCwd","getFilename","getPhysicalFilename","parserPath","lintingProblems","getRuleSeverity","messageIds","meta","messages","reportTranslator","report","problem","fix","fixable","Error","suggestions","hasSuggestions","docs","suggestion","ruleListeners","enabled","time","addRuleErrorHandler","ruleListener","ruleErrorHandler","e","selector","on","eventGenerator","traversalInfo","enterNode","leaveNode","ensureText","textOrSourceCode","hasBOM","bom","String","getEnv","slots","envId","lastConfigArray","pluginEnvironments","getRule","pluginRules","ruleMap","normalizeCwd","process","undefined","internalSlotsMap","WeakMap","assertEslintrcConfig","linter","configType","Linter","constructor","lastSourceCode","lastSuppressedMessages","parserMap","Map","version","_verifyWithoutProcessors","providedConfig","definition","has","envInFile","resolvedEnvConfig","builtin","enabledEnvs","envName","commentDirectives","concat","sort","problemA","problemB","verify","filenameOrOptions","configArray","getConfig","normalizeSync","_distinguishSuppressedMessages","_verifyWithFlatConfigArray","extractConfig","_verifyWithConfigArray","preprocess","postprocess","_verifyWithProcessor","_verifyWithFlatConfigArrayAndProcessor","configForRecursive","filenameToExpose","rawText","messagesList","flat","filterCodeBlock","blockFilename","originalExtname","extname","blocks","messageLists","block","i","_verifyWithFlatConfigArrayAndWithoutProcessors","blockText","blockName","commonjs","TypeError","processor","pluginProcessors","supportsAutofix","firstCall","suppressedMessages","suppressions","getSuppressedMessages","defineRule","ruleModule","define","defineRules","rulesToDefine","getOwnPropertyNames","getRules","defineParser","parserId","parserModule","verifyAndFix","fixedResult","fixed","passNumber","currentText","debugTextDescription","shouldFix","applyFixes","output","module","exports","getLinterInternalSlots","instance"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/linter/linter.js"],"sourcesContent":["/**\n * @fileoverview Main Linter Class\n * @author Gyandeep Singh\n * @author aladdin-add\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst\n    path = require(\"path\"),\n    eslintScope = require(\"eslint-scope\"),\n    evk = require(\"eslint-visitor-keys\"),\n    espree = require(\"espree\"),\n    merge = require(\"lodash.merge\"),\n    pkg = require(\"../../package.json\"),\n    astUtils = require(\"../shared/ast-utils\"),\n    {\n        Legacy: {\n            ConfigOps,\n            ConfigValidator,\n            environments: BuiltInEnvironments\n        }\n    } = require(\"@eslint/eslintrc/universal\"),\n    Traverser = require(\"../shared/traverser\"),\n    { SourceCode } = require(\"../source-code\"),\n    CodePathAnalyzer = require(\"./code-path-analysis/code-path-analyzer\"),\n    applyDisableDirectives = require(\"./apply-disable-directives\"),\n    ConfigCommentParser = require(\"./config-comment-parser\"),\n    NodeEventGenerator = require(\"./node-event-generator\"),\n    createReportTranslator = require(\"./report-translator\"),\n    Rules = require(\"./rules\"),\n    createEmitter = require(\"./safe-emitter\"),\n    SourceCodeFixer = require(\"./source-code-fixer\"),\n    timing = require(\"./timing\"),\n    ruleReplacements = require(\"../../conf/replacements.json\");\nconst { getRuleFromConfig } = require(\"../config/flat-config-helpers\");\nconst { FlatConfigArray } = require(\"../config/flat-config-array\");\n\nconst debug = require(\"debug\")(\"eslint:linter\");\nconst MAX_AUTOFIX_PASSES = 10;\nconst DEFAULT_PARSER_NAME = \"espree\";\nconst DEFAULT_ECMA_VERSION = 5;\nconst commentParser = new ConfigCommentParser();\nconst DEFAULT_ERROR_LOC = { start: { line: 1, column: 0 }, end: { line: 1, column: 1 } };\nconst parserSymbol = Symbol.for(\"eslint.RuleTester.parser\");\nconst globals = require(\"../../conf/globals\");\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/** @typedef {InstanceType<import(\"../cli-engine/config-array\").ConfigArray>} ConfigArray */\n/** @typedef {InstanceType<import(\"../cli-engine/config-array\").ExtractedConfig>} ExtractedConfig */\n/** @typedef {import(\"../shared/types\").ConfigData} ConfigData */\n/** @typedef {import(\"../shared/types\").Environment} Environment */\n/** @typedef {import(\"../shared/types\").GlobalConf} GlobalConf */\n/** @typedef {import(\"../shared/types\").LintMessage} LintMessage */\n/** @typedef {import(\"../shared/types\").SuppressedLintMessage} SuppressedLintMessage */\n/** @typedef {import(\"../shared/types\").ParserOptions} ParserOptions */\n/** @typedef {import(\"../shared/types\").LanguageOptions} LanguageOptions */\n/** @typedef {import(\"../shared/types\").Processor} Processor */\n/** @typedef {import(\"../shared/types\").Rule} Rule */\n\n/* eslint-disable jsdoc/valid-types -- https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/4#issuecomment-778805577 */\n/**\n * @template T\n * @typedef {{ [P in keyof T]-?: T[P] }} Required\n */\n/* eslint-enable jsdoc/valid-types -- https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/4#issuecomment-778805577 */\n\n/**\n * @typedef {Object} DisableDirective\n * @property {(\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\")} type Type of directive\n * @property {number} line The line number\n * @property {number} column The column number\n * @property {(string|null)} ruleId The rule ID\n * @property {string} justification The justification of directive\n */\n\n/**\n * The private data for `Linter` instance.\n * @typedef {Object} LinterInternalSlots\n * @property {ConfigArray|null} lastConfigArray The `ConfigArray` instance that the last `verify()` call used.\n * @property {SourceCode|null} lastSourceCode The `SourceCode` instance that the last `verify()` call used.\n * @property {SuppressedLintMessage[]} lastSuppressedMessages The `SuppressedLintMessage[]` instance that the last `verify()` call produced.\n * @property {Map<string, Parser>} parserMap The loaded parsers.\n * @property {Rules} ruleMap The loaded rules.\n */\n\n/**\n * @typedef {Object} VerifyOptions\n * @property {boolean} [allowInlineConfig] Allow/disallow inline comments' ability\n *      to change config once it is set. Defaults to true if not supplied.\n *      Useful if you want to validate JS without comments overriding rules.\n * @property {boolean} [disableFixes] if `true` then the linter doesn't make `fix`\n *      properties into the lint result.\n * @property {string} [filename] the filename of the source code.\n * @property {boolean | \"off\" | \"warn\" | \"error\"} [reportUnusedDisableDirectives] Adds reported errors for\n *      unused `eslint-disable` directives.\n */\n\n/**\n * @typedef {Object} ProcessorOptions\n * @property {(filename:string, text:string) => boolean} [filterCodeBlock] the\n *      predicate function that selects adopt code blocks.\n * @property {Processor.postprocess} [postprocess] postprocessor for report\n *      messages. If provided, this should accept an array of the message lists\n *      for each code block returned from the preprocessor, apply a mapping to\n *      the messages as appropriate, and return a one-dimensional array of\n *      messages.\n * @property {Processor.preprocess} [preprocess] preprocessor for source text.\n *      If provided, this should accept a string of source text, and return an\n *      array of code blocks to lint.\n */\n\n/**\n * @typedef {Object} FixOptions\n * @property {boolean | ((message: LintMessage) => boolean)} [fix] Determines\n *      whether fixes should be applied.\n */\n\n/**\n * @typedef {Object} InternalOptions\n * @property {string | null} warnInlineConfig The config name what `noInlineConfig` setting came from. If `noInlineConfig` setting didn't exist, this is null. If this is a config name, then the linter warns directive comments.\n * @property {\"off\" | \"warn\" | \"error\"} reportUnusedDisableDirectives (boolean values were normalized)\n */\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines if a given object is Espree.\n * @param {Object} parser The parser to check.\n * @returns {boolean} True if the parser is Espree or false if not.\n */\nfunction isEspree(parser) {\n    return !!(parser === espree || parser[parserSymbol] === espree);\n}\n\n/**\n * Retrieves globals for the given ecmaVersion.\n * @param {number} ecmaVersion The version to retrieve globals for.\n * @returns {Object} The globals for the given ecmaVersion.\n */\nfunction getGlobalsForEcmaVersion(ecmaVersion) {\n\n    switch (ecmaVersion) {\n        case 3:\n            return globals.es3;\n\n        case 5:\n            return globals.es5;\n\n        default:\n            if (ecmaVersion < 2015) {\n                return globals[`es${ecmaVersion + 2009}`];\n            }\n\n            return globals[`es${ecmaVersion}`];\n    }\n}\n\n/**\n * Ensures that variables representing built-in properties of the Global Object,\n * and any globals declared by special block comments, are present in the global\n * scope.\n * @param {Scope} globalScope The global scope.\n * @param {Object} configGlobals The globals declared in configuration\n * @param {{exportedVariables: Object, enabledGlobals: Object}} commentDirectives Directives from comment configuration\n * @returns {void}\n */\nfunction addDeclaredGlobals(globalScope, configGlobals, { exportedVariables, enabledGlobals }) {\n\n    // Define configured global variables.\n    for (const id of new Set([...Object.keys(configGlobals), ...Object.keys(enabledGlobals)])) {\n\n        /*\n         * `ConfigOps.normalizeConfigGlobal` will throw an error if a configured global value is invalid. However, these errors would\n         * typically be caught when validating a config anyway (validity for inline global comments is checked separately).\n         */\n        const configValue = configGlobals[id] === void 0 ? void 0 : ConfigOps.normalizeConfigGlobal(configGlobals[id]);\n        const commentValue = enabledGlobals[id] && enabledGlobals[id].value;\n        const value = commentValue || configValue;\n        const sourceComments = enabledGlobals[id] && enabledGlobals[id].comments;\n\n        if (value === \"off\") {\n            continue;\n        }\n\n        let variable = globalScope.set.get(id);\n\n        if (!variable) {\n            variable = new eslintScope.Variable(id, globalScope);\n\n            globalScope.variables.push(variable);\n            globalScope.set.set(id, variable);\n        }\n\n        variable.eslintImplicitGlobalSetting = configValue;\n        variable.eslintExplicitGlobal = sourceComments !== void 0;\n        variable.eslintExplicitGlobalComments = sourceComments;\n        variable.writeable = (value === \"writable\");\n    }\n\n    // mark all exported variables as such\n    Object.keys(exportedVariables).forEach(name => {\n        const variable = globalScope.set.get(name);\n\n        if (variable) {\n            variable.eslintUsed = true;\n        }\n    });\n\n    /*\n     * \"through\" contains all references which definitions cannot be found.\n     * Since we augment the global scope using configuration, we need to update\n     * references and remove the ones that were added by configuration.\n     */\n    globalScope.through = globalScope.through.filter(reference => {\n        const name = reference.identifier.name;\n        const variable = globalScope.set.get(name);\n\n        if (variable) {\n\n            /*\n             * Links the variable and the reference.\n             * And this reference is removed from `Scope#through`.\n             */\n            reference.resolved = variable;\n            variable.references.push(reference);\n\n            return false;\n        }\n\n        return true;\n    });\n}\n\n/**\n * creates a missing-rule message.\n * @param {string} ruleId the ruleId to create\n * @returns {string} created error message\n * @private\n */\nfunction createMissingRuleMessage(ruleId) {\n    return Object.prototype.hasOwnProperty.call(ruleReplacements.rules, ruleId)\n        ? `Rule '${ruleId}' was removed and replaced by: ${ruleReplacements.rules[ruleId].join(\", \")}`\n        : `Definition for rule '${ruleId}' was not found.`;\n}\n\n/**\n * creates a linting problem\n * @param {Object} options to create linting error\n * @param {string} [options.ruleId] the ruleId to report\n * @param {Object} [options.loc] the loc to report\n * @param {string} [options.message] the error message to report\n * @param {string} [options.severity] the error message to report\n * @returns {LintMessage} created problem, returns a missing-rule problem if only provided ruleId.\n * @private\n */\nfunction createLintingProblem(options) {\n    const {\n        ruleId = null,\n        loc = DEFAULT_ERROR_LOC,\n        message = createMissingRuleMessage(options.ruleId),\n        severity = 2\n    } = options;\n\n    return {\n        ruleId,\n        message,\n        line: loc.start.line,\n        column: loc.start.column + 1,\n        endLine: loc.end.line,\n        endColumn: loc.end.column + 1,\n        severity,\n        nodeType: null\n    };\n}\n\n/**\n * Creates a collection of disable directives from a comment\n * @param {Object} options to create disable directives\n * @param {(\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\")} options.type The type of directive comment\n * @param {token} options.commentToken The Comment token\n * @param {string} options.value The value after the directive in the comment\n * comment specified no specific rules, so it applies to all rules (e.g. `eslint-disable`)\n * @param {string} options.justification The justification of the directive\n * @param {function(string): {create: Function}} options.ruleMapper A map from rule IDs to defined rules\n * @returns {Object} Directives and problems from the comment\n */\nfunction createDisableDirectives(options) {\n    const { commentToken, type, value, justification, ruleMapper } = options;\n    const ruleIds = Object.keys(commentParser.parseListConfig(value));\n    const directiveRules = ruleIds.length ? ruleIds : [null];\n    const result = {\n        directives: [], // valid disable directives\n        directiveProblems: [] // problems in directives\n    };\n\n    const parentComment = { commentToken, ruleIds };\n\n    for (const ruleId of directiveRules) {\n\n        // push to directives, if the rule is defined(including null, e.g. /*eslint enable*/)\n        if (ruleId === null || !!ruleMapper(ruleId)) {\n            if (type === \"disable-next-line\") {\n                result.directives.push({\n                    parentComment,\n                    type,\n                    line: commentToken.loc.end.line,\n                    column: commentToken.loc.end.column + 1,\n                    ruleId,\n                    justification\n                });\n            } else {\n                result.directives.push({\n                    parentComment,\n                    type,\n                    line: commentToken.loc.start.line,\n                    column: commentToken.loc.start.column + 1,\n                    ruleId,\n                    justification\n                });\n            }\n        } else {\n            result.directiveProblems.push(createLintingProblem({ ruleId, loc: commentToken.loc }));\n        }\n    }\n    return result;\n}\n\n/**\n * Extract the directive and the justification from a given directive comment and trim them.\n * @param {string} value The comment text to extract.\n * @returns {{directivePart: string, justificationPart: string}} The extracted directive and justification.\n */\nfunction extractDirectiveComment(value) {\n    const match = /\\s-{2,}\\s/u.exec(value);\n\n    if (!match) {\n        return { directivePart: value.trim(), justificationPart: \"\" };\n    }\n\n    const directive = value.slice(0, match.index).trim();\n    const justification = value.slice(match.index + match[0].length).trim();\n\n    return { directivePart: directive, justificationPart: justification };\n}\n\n/**\n * Parses comments in file to extract file-specific config of rules, globals\n * and environments and merges them with global config; also code blocks\n * where reporting is disabled or enabled and merges them with reporting config.\n * @param {ASTNode} ast The top node of the AST.\n * @param {function(string): {create: Function}} ruleMapper A map from rule IDs to defined rules\n * @param {string|null} warnInlineConfig If a string then it should warn directive comments as disabled. The string value is the config name what the setting came from.\n * @returns {{configuredRules: Object, enabledGlobals: {value:string,comment:Token}[], exportedVariables: Object, problems: Problem[], disableDirectives: DisableDirective[]}}\n * A collection of the directive comments that were found, along with any problems that occurred when parsing\n */\nfunction getDirectiveComments(ast, ruleMapper, warnInlineConfig) {\n    const configuredRules = {};\n    const enabledGlobals = Object.create(null);\n    const exportedVariables = {};\n    const problems = [];\n    const disableDirectives = [];\n    const validator = new ConfigValidator({\n        builtInRules: Rules\n    });\n\n    ast.comments.filter(token => token.type !== \"Shebang\").forEach(comment => {\n        const { directivePart, justificationPart } = extractDirectiveComment(comment.value);\n\n        const match = /^(eslint(?:-env|-enable|-disable(?:(?:-next)?-line)?)?|exported|globals?)(?:\\s|$)/u.exec(directivePart);\n\n        if (!match) {\n            return;\n        }\n        const directiveText = match[1];\n        const lineCommentSupported = /^eslint-disable-(next-)?line$/u.test(directiveText);\n\n        if (comment.type === \"Line\" && !lineCommentSupported) {\n            return;\n        }\n\n        if (warnInlineConfig) {\n            const kind = comment.type === \"Block\" ? `/*${directiveText}*/` : `//${directiveText}`;\n\n            problems.push(createLintingProblem({\n                ruleId: null,\n                message: `'${kind}' has no effect because you have 'noInlineConfig' setting in ${warnInlineConfig}.`,\n                loc: comment.loc,\n                severity: 1\n            }));\n            return;\n        }\n\n        if (directiveText === \"eslint-disable-line\" && comment.loc.start.line !== comment.loc.end.line) {\n            const message = `${directiveText} comment should not span multiple lines.`;\n\n            problems.push(createLintingProblem({\n                ruleId: null,\n                message,\n                loc: comment.loc\n            }));\n            return;\n        }\n\n        const directiveValue = directivePart.slice(match.index + directiveText.length);\n\n        switch (directiveText) {\n            case \"eslint-disable\":\n            case \"eslint-enable\":\n            case \"eslint-disable-next-line\":\n            case \"eslint-disable-line\": {\n                const directiveType = directiveText.slice(\"eslint-\".length);\n                const options = { commentToken: comment, type: directiveType, value: directiveValue, justification: justificationPart, ruleMapper };\n                const { directives, directiveProblems } = createDisableDirectives(options);\n\n                disableDirectives.push(...directives);\n                problems.push(...directiveProblems);\n                break;\n            }\n\n            case \"exported\":\n                Object.assign(exportedVariables, commentParser.parseStringConfig(directiveValue, comment));\n                break;\n\n            case \"globals\":\n            case \"global\":\n                for (const [id, { value }] of Object.entries(commentParser.parseStringConfig(directiveValue, comment))) {\n                    let normalizedValue;\n\n                    try {\n                        normalizedValue = ConfigOps.normalizeConfigGlobal(value);\n                    } catch (err) {\n                        problems.push(createLintingProblem({\n                            ruleId: null,\n                            loc: comment.loc,\n                            message: err.message\n                        }));\n                        continue;\n                    }\n\n                    if (enabledGlobals[id]) {\n                        enabledGlobals[id].comments.push(comment);\n                        enabledGlobals[id].value = normalizedValue;\n                    } else {\n                        enabledGlobals[id] = {\n                            comments: [comment],\n                            value: normalizedValue\n                        };\n                    }\n                }\n                break;\n\n            case \"eslint\": {\n                const parseResult = commentParser.parseJsonConfig(directiveValue, comment.loc);\n\n                if (parseResult.success) {\n                    Object.keys(parseResult.config).forEach(name => {\n                        const rule = ruleMapper(name);\n                        const ruleValue = parseResult.config[name];\n\n                        if (!rule) {\n                            problems.push(createLintingProblem({ ruleId: name, loc: comment.loc }));\n                            return;\n                        }\n\n                        try {\n                            validator.validateRuleOptions(rule, name, ruleValue);\n                        } catch (err) {\n                            problems.push(createLintingProblem({\n                                ruleId: name,\n                                message: err.message,\n                                loc: comment.loc\n                            }));\n\n                            // do not apply the config, if found invalid options.\n                            return;\n                        }\n\n                        configuredRules[name] = ruleValue;\n                    });\n                } else {\n                    problems.push(parseResult.error);\n                }\n\n                break;\n            }\n\n            // no default\n        }\n    });\n\n    return {\n        configuredRules,\n        enabledGlobals,\n        exportedVariables,\n        problems,\n        disableDirectives\n    };\n}\n\n/**\n * Normalize ECMAScript version from the initial config\n * @param {Parser} parser The parser which uses this options.\n * @param {number} ecmaVersion ECMAScript version from the initial config\n * @returns {number} normalized ECMAScript version\n */\nfunction normalizeEcmaVersion(parser, ecmaVersion) {\n\n    if (isEspree(parser)) {\n        if (ecmaVersion === \"latest\") {\n            return espree.latestEcmaVersion;\n        }\n    }\n\n    /*\n     * Calculate ECMAScript edition number from official year version starting with\n     * ES2015, which corresponds with ES6 (or a difference of 2009).\n     */\n    return ecmaVersion >= 2015 ? ecmaVersion - 2009 : ecmaVersion;\n}\n\n/**\n * Normalize ECMAScript version from the initial config into languageOptions (year)\n * format.\n * @param {any} [ecmaVersion] ECMAScript version from the initial config\n * @returns {number} normalized ECMAScript version\n */\nfunction normalizeEcmaVersionForLanguageOptions(ecmaVersion) {\n\n    switch (ecmaVersion) {\n        case 3:\n            return 3;\n\n        // void 0 = no ecmaVersion specified so use the default\n        case 5:\n        case void 0:\n            return 5;\n\n        default:\n            if (typeof ecmaVersion === \"number\") {\n                return ecmaVersion >= 2015 ? ecmaVersion : ecmaVersion + 2009;\n            }\n    }\n\n    /*\n     * We default to the latest supported ecmaVersion for everything else.\n     * Remember, this is for languageOptions.ecmaVersion, which sets the version\n     * that is used for a number of processes inside of ESLint. It's normally\n     * safe to assume people want the latest unless otherwise specified.\n     */\n    return espree.latestEcmaVersion + 2009;\n}\n\nconst eslintEnvPattern = /\\/\\*\\s*eslint-env\\s(.+?)(?:\\*\\/|$)/gsu;\n\n/**\n * Checks whether or not there is a comment which has \"eslint-env *\" in a given text.\n * @param {string} text A source code text to check.\n * @returns {Object|null} A result of parseListConfig() with \"eslint-env *\" comment.\n */\nfunction findEslintEnv(text) {\n    let match, retv;\n\n    eslintEnvPattern.lastIndex = 0;\n\n    while ((match = eslintEnvPattern.exec(text)) !== null) {\n        if (match[0].endsWith(\"*/\")) {\n            retv = Object.assign(\n                retv || {},\n                commentParser.parseListConfig(extractDirectiveComment(match[1]).directivePart)\n            );\n        }\n    }\n\n    return retv;\n}\n\n/**\n * Convert \"/path/to/<text>\" to \"<text>\".\n * `CLIEngine#executeOnText()` method gives \"/path/to/<text>\" if the filename\n * was omitted because `configArray.extractConfig()` requires an absolute path.\n * But the linter should pass `<text>` to `RuleContext#getFilename()` in that\n * case.\n * Also, code blocks can have their virtual filename. If the parent filename was\n * `<text>`, the virtual filename is `<text>/0_foo.js` or something like (i.e.,\n * it's not an absolute path).\n * @param {string} filename The filename to normalize.\n * @returns {string} The normalized filename.\n */\nfunction normalizeFilename(filename) {\n    const parts = filename.split(path.sep);\n    const index = parts.lastIndexOf(\"<text>\");\n\n    return index === -1 ? filename : parts.slice(index).join(path.sep);\n}\n\n/**\n * Normalizes the possible options for `linter.verify` and `linter.verifyAndFix` to a\n * consistent shape.\n * @param {VerifyOptions} providedOptions Options\n * @param {ConfigData} config Config.\n * @returns {Required<VerifyOptions> & InternalOptions} Normalized options\n */\nfunction normalizeVerifyOptions(providedOptions, config) {\n\n    const linterOptions = config.linterOptions || config;\n\n    // .noInlineConfig for eslintrc, .linterOptions.noInlineConfig for flat\n    const disableInlineConfig = linterOptions.noInlineConfig === true;\n    const ignoreInlineConfig = providedOptions.allowInlineConfig === false;\n    const configNameOfNoInlineConfig = config.configNameOfNoInlineConfig\n        ? ` (${config.configNameOfNoInlineConfig})`\n        : \"\";\n\n    let reportUnusedDisableDirectives = providedOptions.reportUnusedDisableDirectives;\n\n    if (typeof reportUnusedDisableDirectives === \"boolean\") {\n        reportUnusedDisableDirectives = reportUnusedDisableDirectives ? \"error\" : \"off\";\n    }\n    if (typeof reportUnusedDisableDirectives !== \"string\") {\n        reportUnusedDisableDirectives =\n            linterOptions.reportUnusedDisableDirectives\n                ? \"warn\" : \"off\";\n    }\n\n    return {\n        filename: normalizeFilename(providedOptions.filename || \"<input>\"),\n        allowInlineConfig: !ignoreInlineConfig,\n        warnInlineConfig: disableInlineConfig && !ignoreInlineConfig\n            ? `your config${configNameOfNoInlineConfig}`\n            : null,\n        reportUnusedDisableDirectives,\n        disableFixes: Boolean(providedOptions.disableFixes)\n    };\n}\n\n/**\n * Combines the provided parserOptions with the options from environments\n * @param {Parser} parser The parser which uses this options.\n * @param {ParserOptions} providedOptions The provided 'parserOptions' key in a config\n * @param {Environment[]} enabledEnvironments The environments enabled in configuration and with inline comments\n * @returns {ParserOptions} Resulting parser options after merge\n */\nfunction resolveParserOptions(parser, providedOptions, enabledEnvironments) {\n\n    const parserOptionsFromEnv = enabledEnvironments\n        .filter(env => env.parserOptions)\n        .reduce((parserOptions, env) => merge(parserOptions, env.parserOptions), {});\n    const mergedParserOptions = merge(parserOptionsFromEnv, providedOptions || {});\n    const isModule = mergedParserOptions.sourceType === \"module\";\n\n    if (isModule) {\n\n        /*\n         * can't have global return inside of modules\n         * TODO: espree validate parserOptions.globalReturn when sourceType is setting to module.(@aladdin-add)\n         */\n        mergedParserOptions.ecmaFeatures = Object.assign({}, mergedParserOptions.ecmaFeatures, { globalReturn: false });\n    }\n\n    mergedParserOptions.ecmaVersion = normalizeEcmaVersion(parser, mergedParserOptions.ecmaVersion);\n\n    return mergedParserOptions;\n}\n\n/**\n * Converts parserOptions to languageOptions for backwards compatibility with eslintrc.\n * @param {ConfigData} config Config object.\n * @param {Object} config.globals Global variable definitions.\n * @param {Parser} config.parser The parser to use.\n * @param {ParserOptions} config.parserOptions The parserOptions to use.\n * @returns {LanguageOptions} The languageOptions equivalent.\n */\nfunction createLanguageOptions({ globals: configuredGlobals, parser, parserOptions }) {\n\n    const {\n        ecmaVersion,\n        sourceType\n    } = parserOptions;\n\n    return {\n        globals: configuredGlobals,\n        ecmaVersion: normalizeEcmaVersionForLanguageOptions(ecmaVersion),\n        sourceType,\n        parser,\n        parserOptions\n    };\n}\n\n/**\n * Combines the provided globals object with the globals from environments\n * @param {Record<string, GlobalConf>} providedGlobals The 'globals' key in a config\n * @param {Environment[]} enabledEnvironments The environments enabled in configuration and with inline comments\n * @returns {Record<string, GlobalConf>} The resolved globals object\n */\nfunction resolveGlobals(providedGlobals, enabledEnvironments) {\n    return Object.assign(\n        {},\n        ...enabledEnvironments.filter(env => env.globals).map(env => env.globals),\n        providedGlobals\n    );\n}\n\n/**\n * Strips Unicode BOM from a given text.\n * @param {string} text A text to strip.\n * @returns {string} The stripped text.\n */\nfunction stripUnicodeBOM(text) {\n\n    /*\n     * Check Unicode BOM.\n     * In JavaScript, string data is stored as UTF-16, so BOM is 0xFEFF.\n     * http://www.ecma-international.org/ecma-262/6.0/#sec-unicode-format-control-characters\n     */\n    if (text.charCodeAt(0) === 0xFEFF) {\n        return text.slice(1);\n    }\n    return text;\n}\n\n/**\n * Get the options for a rule (not including severity), if any\n * @param {Array|number} ruleConfig rule configuration\n * @returns {Array} of rule options, empty Array if none\n */\nfunction getRuleOptions(ruleConfig) {\n    if (Array.isArray(ruleConfig)) {\n        return ruleConfig.slice(1);\n    }\n    return [];\n\n}\n\n/**\n * Analyze scope of the given AST.\n * @param {ASTNode} ast The `Program` node to analyze.\n * @param {LanguageOptions} languageOptions The parser options.\n * @param {Record<string, string[]>} visitorKeys The visitor keys.\n * @returns {ScopeManager} The analysis result.\n */\nfunction analyzeScope(ast, languageOptions, visitorKeys) {\n    const parserOptions = languageOptions.parserOptions;\n    const ecmaFeatures = parserOptions.ecmaFeatures || {};\n    const ecmaVersion = languageOptions.ecmaVersion || DEFAULT_ECMA_VERSION;\n\n    return eslintScope.analyze(ast, {\n        ignoreEval: true,\n        nodejsScope: ecmaFeatures.globalReturn,\n        impliedStrict: ecmaFeatures.impliedStrict,\n        ecmaVersion: typeof ecmaVersion === \"number\" ? ecmaVersion : 6,\n        sourceType: languageOptions.sourceType || \"script\",\n        childVisitorKeys: visitorKeys || evk.KEYS,\n        fallback: Traverser.getKeys\n    });\n}\n\n/**\n * Parses text into an AST. Moved out here because the try-catch prevents\n * optimization of functions, so it's best to keep the try-catch as isolated\n * as possible\n * @param {string} text The text to parse.\n * @param {LanguageOptions} languageOptions Options to pass to the parser\n * @param {string} filePath The path to the file being parsed.\n * @returns {{success: false, error: Problem}|{success: true, sourceCode: SourceCode}}\n * An object containing the AST and parser services if parsing was successful, or the error if parsing failed\n * @private\n */\nfunction parse(text, languageOptions, filePath) {\n    const textToParse = stripUnicodeBOM(text).replace(astUtils.shebangPattern, (match, captured) => `//${captured}`);\n    const { ecmaVersion, sourceType, parser } = languageOptions;\n    const parserOptions = Object.assign(\n        { ecmaVersion, sourceType },\n        languageOptions.parserOptions,\n        {\n            loc: true,\n            range: true,\n            raw: true,\n            tokens: true,\n            comment: true,\n            eslintVisitorKeys: true,\n            eslintScopeManager: true,\n            filePath\n        }\n    );\n\n    /*\n     * Check for parsing errors first. If there's a parsing error, nothing\n     * else can happen. However, a parsing error does not throw an error\n     * from this method - it's just considered a fatal error message, a\n     * problem that ESLint identified just like any other.\n     */\n    try {\n        debug(\"Parsing:\", filePath);\n        const parseResult = (typeof parser.parseForESLint === \"function\")\n            ? parser.parseForESLint(textToParse, parserOptions)\n            : { ast: parser.parse(textToParse, parserOptions) };\n\n        debug(\"Parsing successful:\", filePath);\n        const ast = parseResult.ast;\n        const parserServices = parseResult.services || {};\n        const visitorKeys = parseResult.visitorKeys || evk.KEYS;\n\n        debug(\"Scope analysis:\", filePath);\n        const scopeManager = parseResult.scopeManager || analyzeScope(ast, languageOptions, visitorKeys);\n\n        debug(\"Scope analysis successful:\", filePath);\n\n        return {\n            success: true,\n\n            /*\n             * Save all values that `parseForESLint()` returned.\n             * If a `SourceCode` object is given as the first parameter instead of source code text,\n             * linter skips the parsing process and reuses the source code object.\n             * In that case, linter needs all the values that `parseForESLint()` returned.\n             */\n            sourceCode: new SourceCode({\n                text,\n                ast,\n                parserServices,\n                scopeManager,\n                visitorKeys\n            })\n        };\n    } catch (ex) {\n\n        // If the message includes a leading line number, strip it:\n        const message = `Parsing error: ${ex.message.replace(/^line \\d+:/iu, \"\").trim()}`;\n\n        debug(\"%s\\n%s\", message, ex.stack);\n\n        return {\n            success: false,\n            error: {\n                ruleId: null,\n                fatal: true,\n                severity: 2,\n                message,\n                line: ex.lineNumber,\n                column: ex.column\n            }\n        };\n    }\n}\n\n/**\n * Gets the scope for the current node\n * @param {ScopeManager} scopeManager The scope manager for this AST\n * @param {ASTNode} currentNode The node to get the scope of\n * @returns {eslint-scope.Scope} The scope information for this node\n */\nfunction getScope(scopeManager, currentNode) {\n\n    // On Program node, get the outermost scope to avoid return Node.js special function scope or ES modules scope.\n    const inner = currentNode.type !== \"Program\";\n\n    for (let node = currentNode; node; node = node.parent) {\n        const scope = scopeManager.acquire(node, inner);\n\n        if (scope) {\n            if (scope.type === \"function-expression-name\") {\n                return scope.childScopes[0];\n            }\n            return scope;\n        }\n    }\n\n    return scopeManager.scopes[0];\n}\n\n/**\n * Marks a variable as used in the current scope\n * @param {ScopeManager} scopeManager The scope manager for this AST. The scope may be mutated by this function.\n * @param {ASTNode} currentNode The node currently being traversed\n * @param {LanguageOptions} languageOptions The options used to parse this text\n * @param {string} name The name of the variable that should be marked as used.\n * @returns {boolean} True if the variable was found and marked as used, false if not.\n */\nfunction markVariableAsUsed(scopeManager, currentNode, languageOptions, name) {\n    const parserOptions = languageOptions.parserOptions;\n    const sourceType = languageOptions.sourceType;\n    const hasGlobalReturn =\n        (parserOptions.ecmaFeatures && parserOptions.ecmaFeatures.globalReturn) ||\n        sourceType === \"commonjs\";\n    const specialScope = hasGlobalReturn || sourceType === \"module\";\n    const currentScope = getScope(scopeManager, currentNode);\n\n    // Special Node.js scope means we need to start one level deeper\n    const initialScope = currentScope.type === \"global\" && specialScope ? currentScope.childScopes[0] : currentScope;\n\n    for (let scope = initialScope; scope; scope = scope.upper) {\n        const variable = scope.variables.find(scopeVar => scopeVar.name === name);\n\n        if (variable) {\n            variable.eslintUsed = true;\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Runs a rule, and gets its listeners\n * @param {Rule} rule A normalized rule with a `create` method\n * @param {Context} ruleContext The context that should be passed to the rule\n * @throws {any} Any error during the rule's `create`\n * @returns {Object} A map of selector listeners provided by the rule\n */\nfunction createRuleListeners(rule, ruleContext) {\n    try {\n        return rule.create(ruleContext);\n    } catch (ex) {\n        ex.message = `Error while loading rule '${ruleContext.id}': ${ex.message}`;\n        throw ex;\n    }\n}\n\n/**\n * Gets all the ancestors of a given node\n * @param {ASTNode} node The node\n * @returns {ASTNode[]} All the ancestor nodes in the AST, not including the provided node, starting\n * from the root node and going inwards to the parent node.\n */\nfunction getAncestors(node) {\n    const ancestorsStartingAtParent = [];\n\n    for (let ancestor = node.parent; ancestor; ancestor = ancestor.parent) {\n        ancestorsStartingAtParent.push(ancestor);\n    }\n\n    return ancestorsStartingAtParent.reverse();\n}\n\n// methods that exist on SourceCode object\nconst DEPRECATED_SOURCECODE_PASSTHROUGHS = {\n    getSource: \"getText\",\n    getSourceLines: \"getLines\",\n    getAllComments: \"getAllComments\",\n    getNodeByRangeIndex: \"getNodeByRangeIndex\",\n    getComments: \"getComments\",\n    getCommentsBefore: \"getCommentsBefore\",\n    getCommentsAfter: \"getCommentsAfter\",\n    getCommentsInside: \"getCommentsInside\",\n    getJSDocComment: \"getJSDocComment\",\n    getFirstToken: \"getFirstToken\",\n    getFirstTokens: \"getFirstTokens\",\n    getLastToken: \"getLastToken\",\n    getLastTokens: \"getLastTokens\",\n    getTokenAfter: \"getTokenAfter\",\n    getTokenBefore: \"getTokenBefore\",\n    getTokenByRangeStart: \"getTokenByRangeStart\",\n    getTokens: \"getTokens\",\n    getTokensAfter: \"getTokensAfter\",\n    getTokensBefore: \"getTokensBefore\",\n    getTokensBetween: \"getTokensBetween\"\n};\n\nconst BASE_TRAVERSAL_CONTEXT = Object.freeze(\n    Object.keys(DEPRECATED_SOURCECODE_PASSTHROUGHS).reduce(\n        (contextInfo, methodName) =>\n            Object.assign(contextInfo, {\n                [methodName](...args) {\n                    return this.getSourceCode()[DEPRECATED_SOURCECODE_PASSTHROUGHS[methodName]](...args);\n                }\n            }),\n        {}\n    )\n);\n\n/**\n * Runs the given rules on the given SourceCode object\n * @param {SourceCode} sourceCode A SourceCode object for the given text\n * @param {Object} configuredRules The rules configuration\n * @param {function(string): Rule} ruleMapper A mapper function from rule names to rules\n * @param {string | undefined} parserName The name of the parser in the config\n * @param {LanguageOptions} languageOptions The options for parsing the code.\n * @param {Object} settings The settings that were enabled in the config\n * @param {string} filename The reported filename of the code\n * @param {boolean} disableFixes If true, it doesn't make `fix` properties.\n * @param {string | undefined} cwd cwd of the cli\n * @param {string} physicalFilename The full path of the file on disk without any code block information\n * @returns {Problem[]} An array of reported problems\n */\nfunction runRules(sourceCode, configuredRules, ruleMapper, parserName, languageOptions, settings, filename, disableFixes, cwd, physicalFilename) {\n    const emitter = createEmitter();\n    const nodeQueue = [];\n    let currentNode = sourceCode.ast;\n\n    Traverser.traverse(sourceCode.ast, {\n        enter(node, parent) {\n            node.parent = parent;\n            nodeQueue.push({ isEntering: true, node });\n        },\n        leave(node) {\n            nodeQueue.push({ isEntering: false, node });\n        },\n        visitorKeys: sourceCode.visitorKeys\n    });\n\n    /*\n     * Create a frozen object with the ruleContext properties and methods that are shared by all rules.\n     * All rule contexts will inherit from this object. This avoids the performance penalty of copying all the\n     * properties once for each rule.\n     */\n    const sharedTraversalContext = Object.freeze(\n        Object.assign(\n            Object.create(BASE_TRAVERSAL_CONTEXT),\n            {\n                getAncestors: () => getAncestors(currentNode),\n                getDeclaredVariables: sourceCode.scopeManager.getDeclaredVariables.bind(sourceCode.scopeManager),\n                getCwd: () => cwd,\n                getFilename: () => filename,\n                getPhysicalFilename: () => physicalFilename || filename,\n                getScope: () => getScope(sourceCode.scopeManager, currentNode),\n                getSourceCode: () => sourceCode,\n                markVariableAsUsed: name => markVariableAsUsed(sourceCode.scopeManager, currentNode, languageOptions, name),\n                parserOptions: {\n                    ...languageOptions.parserOptions\n                },\n                parserPath: parserName,\n                languageOptions,\n                parserServices: sourceCode.parserServices,\n                settings\n            }\n        )\n    );\n\n    const lintingProblems = [];\n\n    Object.keys(configuredRules).forEach(ruleId => {\n        const severity = ConfigOps.getRuleSeverity(configuredRules[ruleId]);\n\n        // not load disabled rules\n        if (severity === 0) {\n            return;\n        }\n\n        const rule = ruleMapper(ruleId);\n\n        if (!rule) {\n            lintingProblems.push(createLintingProblem({ ruleId }));\n            return;\n        }\n\n        const messageIds = rule.meta && rule.meta.messages;\n        let reportTranslator = null;\n        const ruleContext = Object.freeze(\n            Object.assign(\n                Object.create(sharedTraversalContext),\n                {\n                    id: ruleId,\n                    options: getRuleOptions(configuredRules[ruleId]),\n                    report(...args) {\n\n                        /*\n                         * Create a report translator lazily.\n                         * In a vast majority of cases, any given rule reports zero errors on a given\n                         * piece of code. Creating a translator lazily avoids the performance cost of\n                         * creating a new translator function for each rule that usually doesn't get\n                         * called.\n                         *\n                         * Using lazy report translators improves end-to-end performance by about 3%\n                         * with Node 8.4.0.\n                         */\n                        if (reportTranslator === null) {\n                            reportTranslator = createReportTranslator({\n                                ruleId,\n                                severity,\n                                sourceCode,\n                                messageIds,\n                                disableFixes\n                            });\n                        }\n                        const problem = reportTranslator(...args);\n\n                        if (problem.fix && !(rule.meta && rule.meta.fixable)) {\n                            throw new Error(\"Fixable rules must set the `meta.fixable` property to \\\"code\\\" or \\\"whitespace\\\".\");\n                        }\n                        if (problem.suggestions && !(rule.meta && rule.meta.hasSuggestions === true)) {\n                            if (rule.meta && rule.meta.docs && typeof rule.meta.docs.suggestion !== \"undefined\") {\n\n                                // Encourage migration from the former property name.\n                                throw new Error(\"Rules with suggestions must set the `meta.hasSuggestions` property to `true`. `meta.docs.suggestion` is ignored by ESLint.\");\n                            }\n                            throw new Error(\"Rules with suggestions must set the `meta.hasSuggestions` property to `true`.\");\n                        }\n                        lintingProblems.push(problem);\n                    }\n                }\n            )\n        );\n\n        const ruleListeners = timing.enabled ? timing.time(ruleId, createRuleListeners)(rule, ruleContext) : createRuleListeners(rule, ruleContext);\n\n        /**\n         * Include `ruleId` in error logs\n         * @param {Function} ruleListener A rule method that listens for a node.\n         * @returns {Function} ruleListener wrapped in error handler\n         */\n        function addRuleErrorHandler(ruleListener) {\n            return function ruleErrorHandler(...listenerArgs) {\n                try {\n                    return ruleListener(...listenerArgs);\n                } catch (e) {\n                    e.ruleId = ruleId;\n                    throw e;\n                }\n            };\n        }\n\n        if (typeof ruleListeners === \"undefined\" || ruleListeners === null) {\n            throw new Error(`The create() function for rule '${ruleId}' did not return an object.`);\n        }\n\n        // add all the selectors from the rule as listeners\n        Object.keys(ruleListeners).forEach(selector => {\n            const ruleListener = timing.enabled\n                ? timing.time(ruleId, ruleListeners[selector])\n                : ruleListeners[selector];\n\n            emitter.on(\n                selector,\n                addRuleErrorHandler(ruleListener)\n            );\n        });\n    });\n\n    // only run code path analyzer if the top level node is \"Program\", skip otherwise\n    const eventGenerator = nodeQueue[0].node.type === \"Program\"\n        ? new CodePathAnalyzer(new NodeEventGenerator(emitter, { visitorKeys: sourceCode.visitorKeys, fallback: Traverser.getKeys }))\n        : new NodeEventGenerator(emitter, { visitorKeys: sourceCode.visitorKeys, fallback: Traverser.getKeys });\n\n    nodeQueue.forEach(traversalInfo => {\n        currentNode = traversalInfo.node;\n\n        try {\n            if (traversalInfo.isEntering) {\n                eventGenerator.enterNode(currentNode);\n            } else {\n                eventGenerator.leaveNode(currentNode);\n            }\n        } catch (err) {\n            err.currentNode = currentNode;\n            throw err;\n        }\n    });\n\n    return lintingProblems;\n}\n\n/**\n * Ensure the source code to be a string.\n * @param {string|SourceCode} textOrSourceCode The text or source code object.\n * @returns {string} The source code text.\n */\nfunction ensureText(textOrSourceCode) {\n    if (typeof textOrSourceCode === \"object\") {\n        const { hasBOM, text } = textOrSourceCode;\n        const bom = hasBOM ? \"\\uFEFF\" : \"\";\n\n        return bom + text;\n    }\n\n    return String(textOrSourceCode);\n}\n\n/**\n * Get an environment.\n * @param {LinterInternalSlots} slots The internal slots of Linter.\n * @param {string} envId The environment ID to get.\n * @returns {Environment|null} The environment.\n */\nfunction getEnv(slots, envId) {\n    return (\n        (slots.lastConfigArray && slots.lastConfigArray.pluginEnvironments.get(envId)) ||\n        BuiltInEnvironments.get(envId) ||\n        null\n    );\n}\n\n/**\n * Get a rule.\n * @param {LinterInternalSlots} slots The internal slots of Linter.\n * @param {string} ruleId The rule ID to get.\n * @returns {Rule|null} The rule.\n */\nfunction getRule(slots, ruleId) {\n    return (\n        (slots.lastConfigArray && slots.lastConfigArray.pluginRules.get(ruleId)) ||\n        slots.ruleMap.get(ruleId)\n    );\n}\n\n/**\n * Normalize the value of the cwd\n * @param {string | undefined} cwd raw value of the cwd, path to a directory that should be considered as the current working directory, can be undefined.\n * @returns {string | undefined} normalized cwd\n */\nfunction normalizeCwd(cwd) {\n    if (cwd) {\n        return cwd;\n    }\n    if (typeof process === \"object\") {\n        return process.cwd();\n    }\n\n    // It's more explicit to assign the undefined\n    // eslint-disable-next-line no-undefined -- Consistently returning a value\n    return undefined;\n}\n\n/**\n * The map to store private data.\n * @type {WeakMap<Linter, LinterInternalSlots>}\n */\nconst internalSlotsMap = new WeakMap();\n\n/**\n * Throws an error when the given linter is in flat config mode.\n * @param {Linter} linter The linter to check.\n * @returns {void}\n * @throws {Error} If the linter is in flat config mode.\n */\nfunction assertEslintrcConfig(linter) {\n    const { configType } = internalSlotsMap.get(linter);\n\n    if (configType === \"flat\") {\n        throw new Error(\"This method cannot be used with flat config. Add your entries directly into the config array.\");\n    }\n}\n\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Object that is responsible for verifying JavaScript text\n * @name Linter\n */\nclass Linter {\n\n    /**\n     * Initialize the Linter.\n     * @param {Object} [config] the config object\n     * @param {string} [config.cwd] path to a directory that should be considered as the current working directory, can be undefined.\n     * @param {\"flat\"|\"eslintrc\"} [config.configType=\"eslintrc\"] the type of config used.\n     */\n    constructor({ cwd, configType } = {}) {\n        internalSlotsMap.set(this, {\n            cwd: normalizeCwd(cwd),\n            lastConfigArray: null,\n            lastSourceCode: null,\n            lastSuppressedMessages: [],\n            configType, // TODO: Remove after flat config conversion\n            parserMap: new Map([[\"espree\", espree]]),\n            ruleMap: new Rules()\n        });\n\n        this.version = pkg.version;\n    }\n\n    /**\n     * Getter for package version.\n     * @static\n     * @returns {string} The version from package.json.\n     */\n    static get version() {\n        return pkg.version;\n    }\n\n    /**\n     * Same as linter.verify, except without support for processors.\n     * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.\n     * @param {ConfigData} providedConfig An ESLintConfig instance to configure everything.\n     * @param {VerifyOptions} [providedOptions] The optional filename of the file being checked.\n     * @throws {Error} If during rule execution.\n     * @returns {(LintMessage|SuppressedLintMessage)[]} The results as an array of messages or an empty array if no messages.\n     */\n    _verifyWithoutProcessors(textOrSourceCode, providedConfig, providedOptions) {\n        const slots = internalSlotsMap.get(this);\n        const config = providedConfig || {};\n        const options = normalizeVerifyOptions(providedOptions, config);\n        let text;\n\n        // evaluate arguments\n        if (typeof textOrSourceCode === \"string\") {\n            slots.lastSourceCode = null;\n            text = textOrSourceCode;\n        } else {\n            slots.lastSourceCode = textOrSourceCode;\n            text = textOrSourceCode.text;\n        }\n\n        // Resolve parser.\n        let parserName = DEFAULT_PARSER_NAME;\n        let parser = espree;\n\n        if (typeof config.parser === \"object\" && config.parser !== null) {\n            parserName = config.parser.filePath;\n            parser = config.parser.definition;\n        } else if (typeof config.parser === \"string\") {\n            if (!slots.parserMap.has(config.parser)) {\n                return [{\n                    ruleId: null,\n                    fatal: true,\n                    severity: 2,\n                    message: `Configured parser '${config.parser}' was not found.`,\n                    line: 0,\n                    column: 0\n                }];\n            }\n            parserName = config.parser;\n            parser = slots.parserMap.get(config.parser);\n        }\n\n        // search and apply \"eslint-env *\".\n        const envInFile = options.allowInlineConfig && !options.warnInlineConfig\n            ? findEslintEnv(text)\n            : {};\n        const resolvedEnvConfig = Object.assign({ builtin: true }, config.env, envInFile);\n        const enabledEnvs = Object.keys(resolvedEnvConfig)\n            .filter(envName => resolvedEnvConfig[envName])\n            .map(envName => getEnv(slots, envName))\n            .filter(env => env);\n\n        const parserOptions = resolveParserOptions(parser, config.parserOptions || {}, enabledEnvs);\n        const configuredGlobals = resolveGlobals(config.globals || {}, enabledEnvs);\n        const settings = config.settings || {};\n        const languageOptions = createLanguageOptions({\n            globals: config.globals,\n            parser,\n            parserOptions\n        });\n\n        if (!slots.lastSourceCode) {\n            const parseResult = parse(\n                text,\n                languageOptions,\n                options.filename\n            );\n\n            if (!parseResult.success) {\n                return [parseResult.error];\n            }\n\n            slots.lastSourceCode = parseResult.sourceCode;\n        } else {\n\n            /*\n             * If the given source code object as the first argument does not have scopeManager, analyze the scope.\n             * This is for backward compatibility (SourceCode is frozen so it cannot rebind).\n             */\n            if (!slots.lastSourceCode.scopeManager) {\n                slots.lastSourceCode = new SourceCode({\n                    text: slots.lastSourceCode.text,\n                    ast: slots.lastSourceCode.ast,\n                    parserServices: slots.lastSourceCode.parserServices,\n                    visitorKeys: slots.lastSourceCode.visitorKeys,\n                    scopeManager: analyzeScope(slots.lastSourceCode.ast, languageOptions)\n                });\n            }\n        }\n\n        const sourceCode = slots.lastSourceCode;\n        const commentDirectives = options.allowInlineConfig\n            ? getDirectiveComments(sourceCode.ast, ruleId => getRule(slots, ruleId), options.warnInlineConfig)\n            : { configuredRules: {}, enabledGlobals: {}, exportedVariables: {}, problems: [], disableDirectives: [] };\n\n        // augment global scope with declared global variables\n        addDeclaredGlobals(\n            sourceCode.scopeManager.scopes[0],\n            configuredGlobals,\n            { exportedVariables: commentDirectives.exportedVariables, enabledGlobals: commentDirectives.enabledGlobals }\n        );\n\n        const configuredRules = Object.assign({}, config.rules, commentDirectives.configuredRules);\n\n        let lintingProblems;\n\n        try {\n            lintingProblems = runRules(\n                sourceCode,\n                configuredRules,\n                ruleId => getRule(slots, ruleId),\n                parserName,\n                languageOptions,\n                settings,\n                options.filename,\n                options.disableFixes,\n                slots.cwd,\n                providedOptions.physicalFilename\n            );\n        } catch (err) {\n            err.message += `\\nOccurred while linting ${options.filename}`;\n            debug(\"An error occurred while traversing\");\n            debug(\"Filename:\", options.filename);\n            if (err.currentNode) {\n                const { line } = err.currentNode.loc.start;\n\n                debug(\"Line:\", line);\n                err.message += `:${line}`;\n            }\n            debug(\"Parser Options:\", parserOptions);\n            debug(\"Parser Path:\", parserName);\n            debug(\"Settings:\", settings);\n\n            if (err.ruleId) {\n                err.message += `\\nRule: \"${err.ruleId}\"`;\n            }\n\n            throw err;\n        }\n\n        return applyDisableDirectives({\n            directives: commentDirectives.disableDirectives,\n            disableFixes: options.disableFixes,\n            problems: lintingProblems\n                .concat(commentDirectives.problems)\n                .sort((problemA, problemB) => problemA.line - problemB.line || problemA.column - problemB.column),\n            reportUnusedDisableDirectives: options.reportUnusedDisableDirectives\n        });\n    }\n\n    /**\n     * Verifies the text against the rules specified by the second argument.\n     * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.\n     * @param {ConfigData|ConfigArray} config An ESLintConfig instance to configure everything.\n     * @param {(string|(VerifyOptions&ProcessorOptions))} [filenameOrOptions] The optional filename of the file being checked.\n     *      If this is not set, the filename will default to '<input>' in the rule context. If\n     *      an object, then it has \"filename\", \"allowInlineConfig\", and some properties.\n     * @returns {LintMessage[]} The results as an array of messages or an empty array if no messages.\n     */\n    verify(textOrSourceCode, config, filenameOrOptions) {\n        debug(\"Verify\");\n\n        const { configType } = internalSlotsMap.get(this);\n\n        const options = typeof filenameOrOptions === \"string\"\n            ? { filename: filenameOrOptions }\n            : filenameOrOptions || {};\n\n        if (config) {\n            if (configType === \"flat\") {\n\n                /*\n                 * Because of how Webpack packages up the files, we can't\n                 * compare directly to `FlatConfigArray` using `instanceof`\n                 * because it's not the same `FlatConfigArray` as in the tests.\n                 * So, we work around it by assuming an array is, in fact, a\n                 * `FlatConfigArray` if it has a `getConfig()` method.\n                 */\n                let configArray = config;\n\n                if (!Array.isArray(config) || typeof config.getConfig !== \"function\") {\n                    configArray = new FlatConfigArray(config);\n                    configArray.normalizeSync();\n                }\n\n                return this._distinguishSuppressedMessages(this._verifyWithFlatConfigArray(textOrSourceCode, configArray, options, true));\n            }\n\n            if (typeof config.extractConfig === \"function\") {\n                return this._distinguishSuppressedMessages(this._verifyWithConfigArray(textOrSourceCode, config, options));\n            }\n        }\n\n        /*\n         * If we get to here, it means `config` is just an object rather\n         * than a config array so we can go right into linting.\n         */\n\n        /*\n         * `Linter` doesn't support `overrides` property in configuration.\n         * So we cannot apply multiple processors.\n         */\n        if (options.preprocess || options.postprocess) {\n            return this._distinguishSuppressedMessages(this._verifyWithProcessor(textOrSourceCode, config, options));\n        }\n        return this._distinguishSuppressedMessages(this._verifyWithoutProcessors(textOrSourceCode, config, options));\n    }\n\n    /**\n     * Verify with a processor.\n     * @param {string|SourceCode} textOrSourceCode The source code.\n     * @param {FlatConfig} config The config array.\n     * @param {VerifyOptions&ProcessorOptions} options The options.\n     * @param {FlatConfigArray} [configForRecursive] The `ConfigArray` object to apply multiple processors recursively.\n     * @returns {(LintMessage|SuppressedLintMessage)[]} The found problems.\n     */\n    _verifyWithFlatConfigArrayAndProcessor(textOrSourceCode, config, options, configForRecursive) {\n        const filename = options.filename || \"<input>\";\n        const filenameToExpose = normalizeFilename(filename);\n        const physicalFilename = options.physicalFilename || filenameToExpose;\n        const text = ensureText(textOrSourceCode);\n        const preprocess = options.preprocess || (rawText => [rawText]);\n        const postprocess = options.postprocess || (messagesList => messagesList.flat());\n        const filterCodeBlock =\n            options.filterCodeBlock ||\n            (blockFilename => blockFilename.endsWith(\".js\"));\n        const originalExtname = path.extname(filename);\n\n        let blocks;\n\n        try {\n            blocks = preprocess(text, filenameToExpose);\n        } catch (ex) {\n\n            // If the message includes a leading line number, strip it:\n            const message = `Preprocessing error: ${ex.message.replace(/^line \\d+:/iu, \"\").trim()}`;\n\n            debug(\"%s\\n%s\", message, ex.stack);\n\n            return [\n                {\n                    ruleId: null,\n                    fatal: true,\n                    severity: 2,\n                    message,\n                    line: ex.lineNumber,\n                    column: ex.column\n                }\n            ];\n        }\n\n        const messageLists = blocks.map((block, i) => {\n            debug(\"A code block was found: %o\", block.filename || \"(unnamed)\");\n\n            // Keep the legacy behavior.\n            if (typeof block === \"string\") {\n                return this._verifyWithFlatConfigArrayAndWithoutProcessors(block, config, options);\n            }\n\n            const blockText = block.text;\n            const blockName = path.join(filename, `${i}_${block.filename}`);\n\n            // Skip this block if filtered.\n            if (!filterCodeBlock(blockName, blockText)) {\n                debug(\"This code block was skipped.\");\n                return [];\n            }\n\n            // Resolve configuration again if the file content or extension was changed.\n            if (configForRecursive && (text !== blockText || path.extname(blockName) !== originalExtname)) {\n                debug(\"Resolving configuration again because the file content or extension was changed.\");\n                return this._verifyWithFlatConfigArray(\n                    blockText,\n                    configForRecursive,\n                    { ...options, filename: blockName, physicalFilename }\n                );\n            }\n\n            // Does lint.\n            return this._verifyWithFlatConfigArrayAndWithoutProcessors(\n                blockText,\n                config,\n                { ...options, filename: blockName, physicalFilename }\n            );\n        });\n\n        return postprocess(messageLists, filenameToExpose);\n    }\n\n    /**\n     * Same as linter.verify, except without support for processors.\n     * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.\n     * @param {FlatConfig} providedConfig An ESLintConfig instance to configure everything.\n     * @param {VerifyOptions} [providedOptions] The optional filename of the file being checked.\n     * @throws {Error} If during rule execution.\n     * @returns {(LintMessage|SuppressedLintMessage)[]} The results as an array of messages or an empty array if no messages.\n     */\n    _verifyWithFlatConfigArrayAndWithoutProcessors(textOrSourceCode, providedConfig, providedOptions) {\n        const slots = internalSlotsMap.get(this);\n        const config = providedConfig || {};\n        const options = normalizeVerifyOptions(providedOptions, config);\n        let text;\n\n        // evaluate arguments\n        if (typeof textOrSourceCode === \"string\") {\n            slots.lastSourceCode = null;\n            text = textOrSourceCode;\n        } else {\n            slots.lastSourceCode = textOrSourceCode;\n            text = textOrSourceCode.text;\n        }\n\n        const languageOptions = config.languageOptions;\n\n        languageOptions.ecmaVersion = normalizeEcmaVersionForLanguageOptions(\n            languageOptions.ecmaVersion\n        );\n\n        // add configured globals and language globals\n        const configuredGlobals = {\n            ...(getGlobalsForEcmaVersion(languageOptions.ecmaVersion)),\n            ...(languageOptions.sourceType === \"commonjs\" ? globals.commonjs : void 0),\n            ...languageOptions.globals\n        };\n\n        // double check that there is a parser to avoid mysterious error messages\n        if (!languageOptions.parser) {\n            throw new TypeError(`No parser specified for ${options.filename}`);\n        }\n\n        // Espree expects this information to be passed in\n        if (isEspree(languageOptions.parser)) {\n            const parserOptions = languageOptions.parserOptions;\n\n            if (languageOptions.sourceType) {\n\n                parserOptions.sourceType = languageOptions.sourceType;\n\n                if (\n                    parserOptions.sourceType === \"module\" &&\n                    parserOptions.ecmaFeatures &&\n                    parserOptions.ecmaFeatures.globalReturn\n                ) {\n                    parserOptions.ecmaFeatures.globalReturn = false;\n                }\n            }\n        }\n\n        const settings = config.settings || {};\n\n        if (!slots.lastSourceCode) {\n            const parseResult = parse(\n                text,\n                languageOptions,\n                options.filename\n            );\n\n            if (!parseResult.success) {\n                return [parseResult.error];\n            }\n\n            slots.lastSourceCode = parseResult.sourceCode;\n        } else {\n\n            /*\n             * If the given source code object as the first argument does not have scopeManager, analyze the scope.\n             * This is for backward compatibility (SourceCode is frozen so it cannot rebind).\n             */\n            if (!slots.lastSourceCode.scopeManager) {\n                slots.lastSourceCode = new SourceCode({\n                    text: slots.lastSourceCode.text,\n                    ast: slots.lastSourceCode.ast,\n                    parserServices: slots.lastSourceCode.parserServices,\n                    visitorKeys: slots.lastSourceCode.visitorKeys,\n                    scopeManager: analyzeScope(slots.lastSourceCode.ast, languageOptions)\n                });\n            }\n        }\n\n        const sourceCode = slots.lastSourceCode;\n        const commentDirectives = options.allowInlineConfig\n            ? getDirectiveComments(\n                sourceCode.ast,\n                ruleId => getRuleFromConfig(ruleId, config),\n                options.warnInlineConfig\n            )\n            : { configuredRules: {}, enabledGlobals: {}, exportedVariables: {}, problems: [], disableDirectives: [] };\n\n        // augment global scope with declared global variables\n        addDeclaredGlobals(\n            sourceCode.scopeManager.scopes[0],\n            configuredGlobals,\n            { exportedVariables: commentDirectives.exportedVariables, enabledGlobals: commentDirectives.enabledGlobals }\n        );\n\n        const configuredRules = Object.assign({}, config.rules, commentDirectives.configuredRules);\n\n        let lintingProblems;\n\n        try {\n            lintingProblems = runRules(\n                sourceCode,\n                configuredRules,\n                ruleId => getRuleFromConfig(ruleId, config),\n                void 0,\n                languageOptions,\n                settings,\n                options.filename,\n                options.disableFixes,\n                slots.cwd,\n                providedOptions.physicalFilename\n            );\n        } catch (err) {\n            err.message += `\\nOccurred while linting ${options.filename}`;\n            debug(\"An error occurred while traversing\");\n            debug(\"Filename:\", options.filename);\n            if (err.currentNode) {\n                const { line } = err.currentNode.loc.start;\n\n                debug(\"Line:\", line);\n                err.message += `:${line}`;\n            }\n            debug(\"Parser Options:\", languageOptions.parserOptions);\n\n            // debug(\"Parser Path:\", parserName);\n            debug(\"Settings:\", settings);\n\n            if (err.ruleId) {\n                err.message += `\\nRule: \"${err.ruleId}\"`;\n            }\n\n            throw err;\n        }\n\n        return applyDisableDirectives({\n            directives: commentDirectives.disableDirectives,\n            disableFixes: options.disableFixes,\n            problems: lintingProblems\n                .concat(commentDirectives.problems)\n                .sort((problemA, problemB) => problemA.line - problemB.line || problemA.column - problemB.column),\n            reportUnusedDisableDirectives: options.reportUnusedDisableDirectives\n        });\n    }\n\n    /**\n     * Verify a given code with `ConfigArray`.\n     * @param {string|SourceCode} textOrSourceCode The source code.\n     * @param {ConfigArray} configArray The config array.\n     * @param {VerifyOptions&ProcessorOptions} options The options.\n     * @returns {(LintMessage|SuppressedLintMessage)[]} The found problems.\n     */\n    _verifyWithConfigArray(textOrSourceCode, configArray, options) {\n        debug(\"With ConfigArray: %s\", options.filename);\n\n        // Store the config array in order to get plugin envs and rules later.\n        internalSlotsMap.get(this).lastConfigArray = configArray;\n\n        // Extract the final config for this file.\n        const config = configArray.extractConfig(options.filename);\n        const processor =\n            config.processor &&\n            configArray.pluginProcessors.get(config.processor);\n\n        // Verify.\n        if (processor) {\n            debug(\"Apply the processor: %o\", config.processor);\n            const { preprocess, postprocess, supportsAutofix } = processor;\n            const disableFixes = options.disableFixes || !supportsAutofix;\n\n            return this._verifyWithProcessor(\n                textOrSourceCode,\n                config,\n                { ...options, disableFixes, postprocess, preprocess },\n                configArray\n            );\n        }\n        return this._verifyWithoutProcessors(textOrSourceCode, config, options);\n    }\n\n    /**\n     * Verify a given code with a flat config.\n     * @param {string|SourceCode} textOrSourceCode The source code.\n     * @param {FlatConfigArray} configArray The config array.\n     * @param {VerifyOptions&ProcessorOptions} options The options.\n     * @param {boolean} [firstCall=false] Indicates if this is being called directly\n     *      from verify(). (TODO: Remove once eslintrc is removed.)\n     * @returns {(LintMessage|SuppressedLintMessage)[]} The found problems.\n     */\n    _verifyWithFlatConfigArray(textOrSourceCode, configArray, options, firstCall = false) {\n        debug(\"With flat config: %s\", options.filename);\n\n        // we need a filename to match configs against\n        const filename = options.filename || \"__placeholder__.js\";\n\n        // Store the config array in order to get plugin envs and rules later.\n        internalSlotsMap.get(this).lastConfigArray = configArray;\n        const config = configArray.getConfig(filename);\n\n        if (!config) {\n            return [\n                {\n                    ruleId: null,\n                    severity: 1,\n                    message: `No matching configuration found for ${filename}.`,\n                    line: 0,\n                    column: 0\n                }\n            ];\n        }\n\n        // Verify.\n        if (config.processor) {\n            debug(\"Apply the processor: %o\", config.processor);\n            const { preprocess, postprocess, supportsAutofix } = config.processor;\n            const disableFixes = options.disableFixes || !supportsAutofix;\n\n            return this._verifyWithFlatConfigArrayAndProcessor(\n                textOrSourceCode,\n                config,\n                { ...options, filename, disableFixes, postprocess, preprocess },\n                configArray\n            );\n        }\n\n        // check for options-based processing\n        if (firstCall && (options.preprocess || options.postprocess)) {\n            return this._verifyWithFlatConfigArrayAndProcessor(textOrSourceCode, config, options);\n        }\n\n        return this._verifyWithFlatConfigArrayAndWithoutProcessors(textOrSourceCode, config, options);\n    }\n\n    /**\n     * Verify with a processor.\n     * @param {string|SourceCode} textOrSourceCode The source code.\n     * @param {ConfigData|ExtractedConfig} config The config array.\n     * @param {VerifyOptions&ProcessorOptions} options The options.\n     * @param {ConfigArray} [configForRecursive] The `ConfigArray` object to apply multiple processors recursively.\n     * @returns {(LintMessage|SuppressedLintMessage)[]} The found problems.\n     */\n    _verifyWithProcessor(textOrSourceCode, config, options, configForRecursive) {\n        const filename = options.filename || \"<input>\";\n        const filenameToExpose = normalizeFilename(filename);\n        const physicalFilename = options.physicalFilename || filenameToExpose;\n        const text = ensureText(textOrSourceCode);\n        const preprocess = options.preprocess || (rawText => [rawText]);\n        const postprocess = options.postprocess || (messagesList => messagesList.flat());\n        const filterCodeBlock =\n            options.filterCodeBlock ||\n            (blockFilename => blockFilename.endsWith(\".js\"));\n        const originalExtname = path.extname(filename);\n\n        let blocks;\n\n        try {\n            blocks = preprocess(text, filenameToExpose);\n        } catch (ex) {\n\n            // If the message includes a leading line number, strip it:\n            const message = `Preprocessing error: ${ex.message.replace(/^line \\d+:/iu, \"\").trim()}`;\n\n            debug(\"%s\\n%s\", message, ex.stack);\n\n            return [\n                {\n                    ruleId: null,\n                    fatal: true,\n                    severity: 2,\n                    message,\n                    line: ex.lineNumber,\n                    column: ex.column\n                }\n            ];\n        }\n\n        const messageLists = blocks.map((block, i) => {\n            debug(\"A code block was found: %o\", block.filename || \"(unnamed)\");\n\n            // Keep the legacy behavior.\n            if (typeof block === \"string\") {\n                return this._verifyWithoutProcessors(block, config, options);\n            }\n\n            const blockText = block.text;\n            const blockName = path.join(filename, `${i}_${block.filename}`);\n\n            // Skip this block if filtered.\n            if (!filterCodeBlock(blockName, blockText)) {\n                debug(\"This code block was skipped.\");\n                return [];\n            }\n\n            // Resolve configuration again if the file content or extension was changed.\n            if (configForRecursive && (text !== blockText || path.extname(blockName) !== originalExtname)) {\n                debug(\"Resolving configuration again because the file content or extension was changed.\");\n                return this._verifyWithConfigArray(\n                    blockText,\n                    configForRecursive,\n                    { ...options, filename: blockName, physicalFilename }\n                );\n            }\n\n            // Does lint.\n            return this._verifyWithoutProcessors(\n                blockText,\n                config,\n                { ...options, filename: blockName, physicalFilename }\n            );\n        });\n\n        return postprocess(messageLists, filenameToExpose);\n    }\n\n    /**\n     * Given a list of reported problems, distinguish problems between normal messages and suppressed messages.\n     * The normal messages will be returned and the suppressed messages will be stored as lastSuppressedMessages.\n     * @param {Problem[]} problems A list of reported problems.\n     * @returns {LintMessage[]} A list of LintMessage.\n     */\n    _distinguishSuppressedMessages(problems) {\n        const messages = [];\n        const suppressedMessages = [];\n        const slots = internalSlotsMap.get(this);\n\n        for (const problem of problems) {\n            if (problem.suppressions) {\n                suppressedMessages.push(problem);\n            } else {\n                messages.push(problem);\n            }\n        }\n\n        slots.lastSuppressedMessages = suppressedMessages;\n\n        return messages;\n    }\n\n    /**\n     * Gets the SourceCode object representing the parsed source.\n     * @returns {SourceCode} The SourceCode object.\n     */\n    getSourceCode() {\n        return internalSlotsMap.get(this).lastSourceCode;\n    }\n\n    /**\n     * Gets the list of SuppressedLintMessage produced in the last running.\n     * @returns {SuppressedLintMessage[]} The list of SuppressedLintMessage\n     */\n    getSuppressedMessages() {\n        return internalSlotsMap.get(this).lastSuppressedMessages;\n    }\n\n    /**\n     * Defines a new linting rule.\n     * @param {string} ruleId A unique rule identifier\n     * @param {Function | Rule} ruleModule Function from context to object mapping AST node types to event handlers\n     * @returns {void}\n     */\n    defineRule(ruleId, ruleModule) {\n        assertEslintrcConfig(this);\n        internalSlotsMap.get(this).ruleMap.define(ruleId, ruleModule);\n    }\n\n    /**\n     * Defines many new linting rules.\n     * @param {Record<string, Function | Rule>} rulesToDefine map from unique rule identifier to rule\n     * @returns {void}\n     */\n    defineRules(rulesToDefine) {\n        assertEslintrcConfig(this);\n        Object.getOwnPropertyNames(rulesToDefine).forEach(ruleId => {\n            this.defineRule(ruleId, rulesToDefine[ruleId]);\n        });\n    }\n\n    /**\n     * Gets an object with all loaded rules.\n     * @returns {Map<string, Rule>} All loaded rules\n     */\n    getRules() {\n        assertEslintrcConfig(this);\n        const { lastConfigArray, ruleMap } = internalSlotsMap.get(this);\n\n        return new Map(function *() {\n            yield* ruleMap;\n\n            if (lastConfigArray) {\n                yield* lastConfigArray.pluginRules;\n            }\n        }());\n    }\n\n    /**\n     * Define a new parser module\n     * @param {string} parserId Name of the parser\n     * @param {Parser} parserModule The parser object\n     * @returns {void}\n     */\n    defineParser(parserId, parserModule) {\n        assertEslintrcConfig(this);\n        internalSlotsMap.get(this).parserMap.set(parserId, parserModule);\n    }\n\n    /**\n     * Performs multiple autofix passes over the text until as many fixes as possible\n     * have been applied.\n     * @param {string} text The source text to apply fixes to.\n     * @param {ConfigData|ConfigArray|FlatConfigArray} config The ESLint config object to use.\n     * @param {VerifyOptions&ProcessorOptions&FixOptions} options The ESLint options object to use.\n     * @returns {{fixed:boolean,messages:LintMessage[],output:string}} The result of the fix operation as returned from the\n     *      SourceCodeFixer.\n     */\n    verifyAndFix(text, config, options) {\n        let messages = [],\n            fixedResult,\n            fixed = false,\n            passNumber = 0,\n            currentText = text;\n        const debugTextDescription = options && options.filename || `${text.slice(0, 10)}...`;\n        const shouldFix = options && typeof options.fix !== \"undefined\" ? options.fix : true;\n\n        /**\n         * This loop continues until one of the following is true:\n         *\n         * 1. No more fixes have been applied.\n         * 2. Ten passes have been made.\n         *\n         * That means anytime a fix is successfully applied, there will be another pass.\n         * Essentially, guaranteeing a minimum of two passes.\n         */\n        do {\n            passNumber++;\n\n            debug(`Linting code for ${debugTextDescription} (pass ${passNumber})`);\n            messages = this.verify(currentText, config, options);\n\n            debug(`Generating fixed text for ${debugTextDescription} (pass ${passNumber})`);\n            fixedResult = SourceCodeFixer.applyFixes(currentText, messages, shouldFix);\n\n            /*\n             * stop if there are any syntax errors.\n             * 'fixedResult.output' is a empty string.\n             */\n            if (messages.length === 1 && messages[0].fatal) {\n                break;\n            }\n\n            // keep track if any fixes were ever applied - important for return value\n            fixed = fixed || fixedResult.fixed;\n\n            // update to use the fixed output instead of the original text\n            currentText = fixedResult.output;\n\n        } while (\n            fixedResult.fixed &&\n            passNumber < MAX_AUTOFIX_PASSES\n        );\n\n        /*\n         * If the last result had fixes, we need to lint again to be sure we have\n         * the most up-to-date information.\n         */\n        if (fixedResult.fixed) {\n            fixedResult.messages = this.verify(currentText, config, options);\n        }\n\n        // ensure the last result properly reflects if fixes were done\n        fixedResult.fixed = fixed;\n        fixedResult.output = currentText;\n\n        return fixedResult;\n    }\n}\n\nmodule.exports = {\n    Linter,\n\n    /**\n     * Get the internal slots of a given Linter instance for tests.\n     * @param {Linter} instance The Linter instance to get.\n     * @returns {LinterInternalSlots} The internal slots.\n     */\n    getLinterInternalSlots(instance) {\n        return internalSlotsMap.get(instance);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}