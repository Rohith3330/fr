{"ast":null,"code":"/**\n * @fileoverview Enforce all aria-* properties are valid.\n * @author Ethan Cohen\n */\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nimport { aria } from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/aria-props';\nimport getSuggestion from '../../../src/util/getSuggestion'; // -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\nconst ariaAttributes = [...aria.keys()];\n\nconst errorMessage = name => {\n  const suggestions = getSuggestion(name, ariaAttributes);\n  const message = `${name}: This attribute is an invalid ARIA attribute.`;\n\n  if (suggestions.length > 0) {\n    return {\n      type: 'JSXAttribute',\n      message: `${message} Did you mean to use ${suggestions}?`\n    };\n  }\n\n  return {\n    type: 'JSXAttribute',\n    message\n  };\n}; // Create basic test cases using all valid role types.\n\n\nconst basicValidityTests = ariaAttributes.map(prop => ({\n  code: `<div ${prop.toLowerCase()}=\"foobar\" />`\n}));\nruleTester.run('aria-props', rule, {\n  valid: [// Variables should pass, as we are only testing literals.\n  {\n    code: '<div />'\n  }, {\n    code: '<div></div>'\n  }, {\n    code: '<div aria=\"wee\"></div>'\n  }, // Needs aria-*\n  {\n    code: '<div abcARIAdef=\"true\"></div>'\n  }, {\n    code: '<div fooaria-foobar=\"true\"></div>'\n  }, {\n    code: '<div fooaria-hidden=\"true\"></div>'\n  }, {\n    code: '<Bar baz />'\n  }, {\n    code: '<input type=\"text\" aria-errormessage=\"foobar\" />'\n  }].concat(basicValidityTests).map(parserOptionsMapper),\n  invalid: [{\n    code: '<div aria-=\"foobar\" />',\n    errors: [errorMessage('aria-')]\n  }, {\n    code: '<div aria-labeledby=\"foobar\" />',\n    errors: [errorMessage('aria-labeledby')]\n  }, {\n    code: '<div aria-skldjfaria-klajsd=\"foobar\" />',\n    errors: [errorMessage('aria-skldjfaria-klajsd')]\n  }].map(parserOptionsMapper)\n});","map":{"version":3,"names":["aria","RuleTester","parserOptionsMapper","rule","getSuggestion","ruleTester","ariaAttributes","keys","errorMessage","name","suggestions","message","length","type","basicValidityTests","map","prop","code","toLowerCase","run","valid","concat","invalid","errors"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/aria-props-test.js"],"sourcesContent":["/**\n * @fileoverview Enforce all aria-* properties are valid.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { aria } from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/aria-props';\nimport getSuggestion from '../../../src/util/getSuggestion';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\nconst ariaAttributes = [...aria.keys()];\n\nconst errorMessage = (name) => {\n  const suggestions = getSuggestion(name, ariaAttributes);\n  const message = `${name}: This attribute is an invalid ARIA attribute.`;\n\n  if (suggestions.length > 0) {\n    return {\n      type: 'JSXAttribute',\n      message: `${message} Did you mean to use ${suggestions}?`,\n    };\n  }\n\n  return {\n    type: 'JSXAttribute',\n    message,\n  };\n};\n\n// Create basic test cases using all valid role types.\nconst basicValidityTests = ariaAttributes.map((prop) => ({\n  code: `<div ${prop.toLowerCase()}=\"foobar\" />`,\n}));\n\nruleTester.run('aria-props', rule, {\n  valid: [\n    // Variables should pass, as we are only testing literals.\n    { code: '<div />' },\n    { code: '<div></div>' },\n    { code: '<div aria=\"wee\"></div>' }, // Needs aria-*\n    { code: '<div abcARIAdef=\"true\"></div>' },\n    { code: '<div fooaria-foobar=\"true\"></div>' },\n    { code: '<div fooaria-hidden=\"true\"></div>' },\n    { code: '<Bar baz />' },\n    { code: '<input type=\"text\" aria-errormessage=\"foobar\" />' },\n  ].concat(basicValidityTests).map(parserOptionsMapper),\n  invalid: [\n    { code: '<div aria-=\"foobar\" />', errors: [errorMessage('aria-')] },\n    {\n      code: '<div aria-labeledby=\"foobar\" />',\n      errors: [errorMessage('aria-labeledby')],\n    },\n    {\n      code: '<div aria-skldjfaria-klajsd=\"foobar\" />',\n      errors: [errorMessage('aria-skldjfaria-klajsd')],\n    },\n  ].map(parserOptionsMapper),\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,SAASA,IAAT,QAAqB,YAArB;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,OAAOC,aAAP,MAA0B,iCAA1B,C,CAEA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG,IAAIJ,UAAJ,EAAnB;AACA,MAAMK,cAAc,GAAG,CAAC,GAAGN,IAAI,CAACO,IAAL,EAAJ,CAAvB;;AAEA,MAAMC,YAAY,GAAIC,IAAD,IAAU;EAC7B,MAAMC,WAAW,GAAGN,aAAa,CAACK,IAAD,EAAOH,cAAP,CAAjC;EACA,MAAMK,OAAO,GAAI,GAAEF,IAAK,gDAAxB;;EAEA,IAAIC,WAAW,CAACE,MAAZ,GAAqB,CAAzB,EAA4B;IAC1B,OAAO;MACLC,IAAI,EAAE,cADD;MAELF,OAAO,EAAG,GAAEA,OAAQ,wBAAuBD,WAAY;IAFlD,CAAP;EAID;;EAED,OAAO;IACLG,IAAI,EAAE,cADD;IAELF;EAFK,CAAP;AAID,CAfD,C,CAiBA;;;AACA,MAAMG,kBAAkB,GAAGR,cAAc,CAACS,GAAf,CAAoBC,IAAD,KAAW;EACvDC,IAAI,EAAG,QAAOD,IAAI,CAACE,WAAL,EAAmB;AADsB,CAAX,CAAnB,CAA3B;AAIAb,UAAU,CAACc,GAAX,CAAe,YAAf,EAA6BhB,IAA7B,EAAmC;EACjCiB,KAAK,EAAE,CACL;EACA;IAAEH,IAAI,EAAE;EAAR,CAFK,EAGL;IAAEA,IAAI,EAAE;EAAR,CAHK,EAIL;IAAEA,IAAI,EAAE;EAAR,CAJK,EAI+B;EACpC;IAAEA,IAAI,EAAE;EAAR,CALK,EAML;IAAEA,IAAI,EAAE;EAAR,CANK,EAOL;IAAEA,IAAI,EAAE;EAAR,CAPK,EAQL;IAAEA,IAAI,EAAE;EAAR,CARK,EASL;IAAEA,IAAI,EAAE;EAAR,CATK,EAULI,MAVK,CAUEP,kBAVF,EAUsBC,GAVtB,CAU0Bb,mBAV1B,CAD0B;EAYjCoB,OAAO,EAAE,CACP;IAAEL,IAAI,EAAE,wBAAR;IAAkCM,MAAM,EAAE,CAACf,YAAY,CAAC,OAAD,CAAb;EAA1C,CADO,EAEP;IACES,IAAI,EAAE,iCADR;IAEEM,MAAM,EAAE,CAACf,YAAY,CAAC,gBAAD,CAAb;EAFV,CAFO,EAMP;IACES,IAAI,EAAE,yCADR;IAEEM,MAAM,EAAE,CAACf,YAAY,CAAC,wBAAD,CAAb;EAFV,CANO,EAUPO,GAVO,CAUHb,mBAVG;AAZwB,CAAnC"},"metadata":{},"sourceType":"module"}