{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst tsutils = __importStar(require(\"tsutils\"));\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst util = __importStar(require(\"../util\"));\n\nconst util_1 = require(\"../util\");\n\nconst functionScopeBoundaries = [utils_1.AST_NODE_TYPES.ArrowFunctionExpression, utils_1.AST_NODE_TYPES.FunctionDeclaration, utils_1.AST_NODE_TYPES.FunctionExpression, utils_1.AST_NODE_TYPES.MethodDefinition].join(', ');\nexports.default = util.createRule({\n  name: 'prefer-readonly',\n  meta: {\n    docs: {\n      description: \"Require private members to be marked as `readonly` if they're never modified outside of the constructor\",\n      recommended: false,\n      requiresTypeChecking: true\n    },\n    fixable: 'code',\n    messages: {\n      preferReadonly: \"Member '{{name}}' is never reassigned; mark it as `readonly`.\"\n    },\n    schema: [{\n      allowAdditionalProperties: false,\n      properties: {\n        onlyInlineLambdas: {\n          type: 'boolean'\n        }\n      },\n      type: 'object'\n    }],\n    type: 'suggestion'\n  },\n  defaultOptions: [{\n    onlyInlineLambdas: false\n  }],\n\n  create(context, _ref) {\n    let [{\n      onlyInlineLambdas\n    }] = _ref;\n    const parserServices = util.getParserServices(context);\n    const checker = parserServices.program.getTypeChecker();\n    const classScopeStack = [];\n\n    function handlePropertyAccessExpression(node, parent, classScope) {\n      if (ts.isBinaryExpression(parent)) {\n        handleParentBinaryExpression(node, parent, classScope);\n        return;\n      }\n\n      if (ts.isDeleteExpression(parent) || isDestructuringAssignment(node)) {\n        classScope.addVariableModification(node);\n        return;\n      }\n\n      if (ts.isPostfixUnaryExpression(parent) || ts.isPrefixUnaryExpression(parent)) {\n        handleParentPostfixOrPrefixUnaryExpression(parent, classScope);\n      }\n    }\n\n    function handleParentBinaryExpression(node, parent, classScope) {\n      if (parent.left === node && tsutils.isAssignmentKind(parent.operatorToken.kind)) {\n        classScope.addVariableModification(node);\n      }\n    }\n\n    function handleParentPostfixOrPrefixUnaryExpression(node, classScope) {\n      if (node.operator === ts.SyntaxKind.PlusPlusToken || node.operator === ts.SyntaxKind.MinusMinusToken) {\n        classScope.addVariableModification(node.operand);\n      }\n    }\n\n    function isDestructuringAssignment(node) {\n      let current = node.parent;\n\n      while (current) {\n        const parent = current.parent;\n\n        if (ts.isObjectLiteralExpression(parent) || ts.isArrayLiteralExpression(parent) || ts.isSpreadAssignment(parent) || ts.isSpreadElement(parent) && ts.isArrayLiteralExpression(parent.parent)) {\n          current = parent;\n        } else if (ts.isBinaryExpression(parent)) {\n          return parent.left === current && parent.operatorToken.kind === ts.SyntaxKind.EqualsToken;\n        } else {\n          break;\n        }\n      }\n\n      return false;\n    }\n\n    function isFunctionScopeBoundaryInStack(node) {\n      if (classScopeStack.length === 0) {\n        return false;\n      }\n\n      const tsNode = parserServices.esTreeNodeToTSNodeMap.get(node);\n\n      if (ts.isConstructorDeclaration(tsNode)) {\n        return false;\n      }\n\n      return tsutils.isFunctionScopeBoundary(tsNode);\n    }\n\n    function getEsNodesFromViolatingNode(violatingNode) {\n      if (ts.isParameterPropertyDeclaration(violatingNode, violatingNode.parent)) {\n        return {\n          esNode: parserServices.tsNodeToESTreeNodeMap.get(violatingNode.name),\n          nameNode: parserServices.tsNodeToESTreeNodeMap.get(violatingNode.name)\n        };\n      }\n\n      return {\n        esNode: parserServices.tsNodeToESTreeNodeMap.get(violatingNode),\n        nameNode: parserServices.tsNodeToESTreeNodeMap.get(violatingNode.name)\n      };\n    }\n\n    return {\n      'ClassDeclaration, ClassExpression'(node) {\n        classScopeStack.push(new ClassScope(checker, parserServices.esTreeNodeToTSNodeMap.get(node), onlyInlineLambdas));\n      },\n\n      'ClassDeclaration, ClassExpression:exit'() {\n        const finalizedClassScope = classScopeStack.pop();\n        const sourceCode = context.getSourceCode();\n\n        for (const violatingNode of finalizedClassScope.finalizeUnmodifiedPrivateNonReadonlys()) {\n          const {\n            esNode,\n            nameNode\n          } = getEsNodesFromViolatingNode(violatingNode);\n          context.report({\n            data: {\n              name: sourceCode.getText(nameNode)\n            },\n            fix: fixer => fixer.insertTextBefore(nameNode, 'readonly '),\n            messageId: 'preferReadonly',\n            node: esNode\n          });\n        }\n      },\n\n      MemberExpression(node) {\n        if (classScopeStack.length !== 0 && !node.computed) {\n          const tsNode = parserServices.esTreeNodeToTSNodeMap.get(node);\n          handlePropertyAccessExpression(tsNode, tsNode.parent, classScopeStack[classScopeStack.length - 1]);\n        }\n      },\n\n      [functionScopeBoundaries](node) {\n        if (utils_1.ASTUtils.isConstructor(node)) {\n          classScopeStack[classScopeStack.length - 1].enterConstructor(parserServices.esTreeNodeToTSNodeMap.get(node));\n        } else if (isFunctionScopeBoundaryInStack(node)) {\n          classScopeStack[classScopeStack.length - 1].enterNonConstructor();\n        }\n      },\n\n      [`${functionScopeBoundaries}:exit`](node) {\n        if (utils_1.ASTUtils.isConstructor(node)) {\n          classScopeStack[classScopeStack.length - 1].exitConstructor();\n        } else if (isFunctionScopeBoundaryInStack(node)) {\n          classScopeStack[classScopeStack.length - 1].exitNonConstructor();\n        }\n      }\n\n    };\n  }\n\n});\nconst OUTSIDE_CONSTRUCTOR = -1;\nconst DIRECTLY_INSIDE_CONSTRUCTOR = 0;\n\nclass ClassScope {\n  constructor(checker, classNode, onlyInlineLambdas) {\n    this.checker = checker;\n    this.onlyInlineLambdas = onlyInlineLambdas;\n    this.privateModifiableMembers = new Map();\n    this.privateModifiableStatics = new Map();\n    this.memberVariableModifications = new Set();\n    this.staticVariableModifications = new Set();\n    this.constructorScopeDepth = OUTSIDE_CONSTRUCTOR;\n    const classType = checker.getTypeAtLocation(classNode);\n\n    if (tsutils.isIntersectionType(classType)) {\n      this.classType = classType.types[0];\n    } else {\n      this.classType = classType;\n    }\n\n    for (const member of classNode.members) {\n      if (ts.isPropertyDeclaration(member)) {\n        this.addDeclaredVariable(member);\n      }\n    }\n  }\n\n  addDeclaredVariable(node) {\n    if (!tsutils.isModifierFlagSet(node, ts.ModifierFlags.Private) || tsutils.isModifierFlagSet(node, ts.ModifierFlags.Readonly) || ts.isComputedPropertyName(node.name)) {\n      return;\n    }\n\n    if (this.onlyInlineLambdas && node.initializer !== undefined && !ts.isArrowFunction(node.initializer)) {\n      return;\n    }\n\n    (tsutils.isModifierFlagSet(node, ts.ModifierFlags.Static) ? this.privateModifiableStatics : this.privateModifiableMembers).set(node.name.getText(), node);\n  }\n\n  addVariableModification(node) {\n    const modifierType = this.checker.getTypeAtLocation(node.expression);\n\n    if (!modifierType.getSymbol() || !(0, util_1.typeIsOrHasBaseType)(modifierType, this.classType)) {\n      return;\n    }\n\n    const modifyingStatic = tsutils.isObjectType(modifierType) && tsutils.isObjectFlagSet(modifierType, ts.ObjectFlags.Anonymous);\n\n    if (!modifyingStatic && this.constructorScopeDepth === DIRECTLY_INSIDE_CONSTRUCTOR) {\n      return;\n    }\n\n    (modifyingStatic ? this.staticVariableModifications : this.memberVariableModifications).add(node.name.text);\n  }\n\n  enterConstructor(node) {\n    this.constructorScopeDepth = DIRECTLY_INSIDE_CONSTRUCTOR;\n\n    for (const parameter of node.parameters) {\n      if (tsutils.isModifierFlagSet(parameter, ts.ModifierFlags.Private)) {\n        this.addDeclaredVariable(parameter);\n      }\n    }\n  }\n\n  exitConstructor() {\n    this.constructorScopeDepth = OUTSIDE_CONSTRUCTOR;\n  }\n\n  enterNonConstructor() {\n    if (this.constructorScopeDepth !== OUTSIDE_CONSTRUCTOR) {\n      this.constructorScopeDepth += 1;\n    }\n  }\n\n  exitNonConstructor() {\n    if (this.constructorScopeDepth !== OUTSIDE_CONSTRUCTOR) {\n      this.constructorScopeDepth -= 1;\n    }\n  }\n\n  finalizeUnmodifiedPrivateNonReadonlys() {\n    this.memberVariableModifications.forEach(variableName => {\n      this.privateModifiableMembers.delete(variableName);\n    });\n    this.staticVariableModifications.forEach(variableName => {\n      this.privateModifiableStatics.delete(variableName);\n    });\n    return [...Array.from(this.privateModifiableMembers.values()), ...Array.from(this.privateModifiableStatics.values())];\n  }\n\n}","map":{"version":3,"mappings":"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","names":["functionScopeBoundaries","utils_1","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression","MethodDefinition","join","exports","util","createRule","name","meta","docs","description","recommended","requiresTypeChecking","fixable","messages","preferReadonly","schema","allowAdditionalProperties","properties","onlyInlineLambdas","type","defaultOptions","create","context","parserServices","getParserServices","checker","program","getTypeChecker","classScopeStack","handlePropertyAccessExpression","node","parent","classScope","ts","isBinaryExpression","handleParentBinaryExpression","isDeleteExpression","isDestructuringAssignment","addVariableModification","isPostfixUnaryExpression","isPrefixUnaryExpression","handleParentPostfixOrPrefixUnaryExpression","left","tsutils","isAssignmentKind","operatorToken","kind","operator","SyntaxKind","PlusPlusToken","MinusMinusToken","operand","current","isObjectLiteralExpression","isArrayLiteralExpression","isSpreadAssignment","isSpreadElement","EqualsToken","isFunctionScopeBoundaryInStack","length","tsNode","esTreeNodeToTSNodeMap","get","isConstructorDeclaration","isFunctionScopeBoundary","getEsNodesFromViolatingNode","violatingNode","isParameterPropertyDeclaration","esNode","tsNodeToESTreeNodeMap","nameNode","push","ClassScope","finalizedClassScope","pop","sourceCode","getSourceCode","finalizeUnmodifiedPrivateNonReadonlys","report","data","getText","fix","fixer","insertTextBefore","messageId","MemberExpression","computed","isConstructor","enterConstructor","enterNonConstructor","exitConstructor","exitNonConstructor","OUTSIDE_CONSTRUCTOR","DIRECTLY_INSIDE_CONSTRUCTOR","constructor","classNode","Map","Set","classType","getTypeAtLocation","isIntersectionType","types","member","members","isPropertyDeclaration","addDeclaredVariable","isModifierFlagSet","ModifierFlags","Private","Readonly","isComputedPropertyName","initializer","undefined","isArrowFunction","Static","privateModifiableStatics","privateModifiableMembers","set","modifierType","expression","getSymbol","modifyingStatic","isObjectType","isObjectFlagSet","ObjectFlags","Anonymous","constructorScopeDepth","staticVariableModifications","memberVariableModifications","add","text","parameter","parameters","forEach","variableName","delete","Array","from","values"],"sources":["../../src/rules/prefer-readonly.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}