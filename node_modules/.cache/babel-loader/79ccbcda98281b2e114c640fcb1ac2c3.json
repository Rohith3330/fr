{"ast":null,"code":"import namedColors from 'color-name';\nlet HEX = /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i;\nlet SHORT_HEX = /^#([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i;\nlet VALUE = /(?:\\d+|\\d*\\.\\d+)%?/;\nlet SEP = /(?:\\s*,\\s*|\\s+)/;\nlet ALPHA_SEP = /\\s*[,/]\\s*/;\nlet CUSTOM_PROPERTY = /var\\(--(?:[^ )]*?)\\)/;\nlet RGB = new RegExp(`^(rgb)a?\\\\(\\\\s*(${VALUE.source}|${CUSTOM_PROPERTY.source})(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${ALPHA_SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?\\\\s*\\\\)$`);\nlet HSL = new RegExp(`^(hsl)a?\\\\(\\\\s*((?:${VALUE.source})(?:deg|rad|grad|turn)?|${CUSTOM_PROPERTY.source})(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${ALPHA_SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?\\\\s*\\\\)$`); // In \"loose\" mode the color may contain fewer than 3 parts, as long as at least\n// one of the parts is variable.\n\nexport function parseColor(value) {\n  let {\n    loose = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof value !== 'string') {\n    return null;\n  }\n\n  value = value.trim();\n\n  if (value === 'transparent') {\n    return {\n      mode: 'rgb',\n      color: ['0', '0', '0'],\n      alpha: '0'\n    };\n  }\n\n  if (value in namedColors) {\n    return {\n      mode: 'rgb',\n      color: namedColors[value].map(v => v.toString())\n    };\n  }\n\n  let hex = value.replace(SHORT_HEX, (_, r, g, b, a) => ['#', r, r, g, g, b, b, a ? a + a : ''].join('')).match(HEX);\n\n  if (hex !== null) {\n    return {\n      mode: 'rgb',\n      color: [parseInt(hex[1], 16), parseInt(hex[2], 16), parseInt(hex[3], 16)].map(v => v.toString()),\n      alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : undefined\n    };\n  }\n\n  let match = value.match(RGB) ?? value.match(HSL);\n\n  if (match === null) {\n    return null;\n  }\n\n  let color = [match[2], match[3], match[4]].filter(Boolean).map(v => v.toString());\n\n  if (!loose && color.length !== 3) {\n    return null;\n  }\n\n  if (color.length < 3 && !color.some(part => /^var\\(.*?\\)$/.test(part))) {\n    return null;\n  }\n\n  return {\n    mode: match[1],\n    color,\n    alpha: match[5]?.toString?.()\n  };\n}\nexport function formatColor(_ref) {\n  let {\n    mode,\n    color,\n    alpha\n  } = _ref;\n  let hasAlpha = alpha !== undefined;\n  return `${mode}(${color.join(' ')}${hasAlpha ? ` / ${alpha}` : ''})`;\n}","map":{"version":3,"names":["namedColors","HEX","SHORT_HEX","VALUE","SEP","ALPHA_SEP","CUSTOM_PROPERTY","RGB","RegExp","source","HSL","parseColor","value","loose","trim","mode","color","alpha","map","v","toString","hex","replace","_","r","g","b","a","join","match","parseInt","undefined","filter","Boolean","length","some","part","test","formatColor","hasAlpha"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/util/color.js"],"sourcesContent":["import namedColors from 'color-name'\n\nlet HEX = /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i\nlet SHORT_HEX = /^#([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i\nlet VALUE = /(?:\\d+|\\d*\\.\\d+)%?/\nlet SEP = /(?:\\s*,\\s*|\\s+)/\nlet ALPHA_SEP = /\\s*[,/]\\s*/\nlet CUSTOM_PROPERTY = /var\\(--(?:[^ )]*?)\\)/\n\nlet RGB = new RegExp(\n  `^(rgb)a?\\\\(\\\\s*(${VALUE.source}|${CUSTOM_PROPERTY.source})(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${ALPHA_SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?\\\\s*\\\\)$`\n)\nlet HSL = new RegExp(\n  `^(hsl)a?\\\\(\\\\s*((?:${VALUE.source})(?:deg|rad|grad|turn)?|${CUSTOM_PROPERTY.source})(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${ALPHA_SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?\\\\s*\\\\)$`\n)\n\n// In \"loose\" mode the color may contain fewer than 3 parts, as long as at least\n// one of the parts is variable.\nexport function parseColor(value, { loose = false } = {}) {\n  if (typeof value !== 'string') {\n    return null\n  }\n\n  value = value.trim()\n  if (value === 'transparent') {\n    return { mode: 'rgb', color: ['0', '0', '0'], alpha: '0' }\n  }\n\n  if (value in namedColors) {\n    return { mode: 'rgb', color: namedColors[value].map((v) => v.toString()) }\n  }\n\n  let hex = value\n    .replace(SHORT_HEX, (_, r, g, b, a) => ['#', r, r, g, g, b, b, a ? a + a : ''].join(''))\n    .match(HEX)\n\n  if (hex !== null) {\n    return {\n      mode: 'rgb',\n      color: [parseInt(hex[1], 16), parseInt(hex[2], 16), parseInt(hex[3], 16)].map((v) =>\n        v.toString()\n      ),\n      alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : undefined,\n    }\n  }\n\n  let match = value.match(RGB) ?? value.match(HSL)\n\n  if (match === null) {\n    return null\n  }\n\n  let color = [match[2], match[3], match[4]].filter(Boolean).map((v) => v.toString())\n\n  if (!loose && color.length !== 3) {\n    return null\n  }\n\n  if (color.length < 3 && !color.some((part) => /^var\\(.*?\\)$/.test(part))) {\n    return null\n  }\n\n  return {\n    mode: match[1],\n    color,\n    alpha: match[5]?.toString?.(),\n  }\n}\n\nexport function formatColor({ mode, color, alpha }) {\n  let hasAlpha = alpha !== undefined\n  return `${mode}(${color.join(' ')}${hasAlpha ? ` / ${alpha}` : ''})`\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}