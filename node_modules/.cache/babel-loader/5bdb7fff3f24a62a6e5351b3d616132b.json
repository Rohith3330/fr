{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rewriteLiveReferences;\n\nvar _assert = require(\"assert\");\n\nvar _t = require(\"@babel/types\");\n\nvar _template = require(\"@babel/template\");\n\nvar _helperSimpleAccess = require(\"@babel/helper-simple-access\");\n\nconst {\n  assignmentExpression,\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  getOuterBindingIdentifiers,\n  identifier,\n  isMemberExpression,\n  isVariableDeclaration,\n  jsxIdentifier,\n  jsxMemberExpression,\n  memberExpression,\n  numericLiteral,\n  sequenceExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nfunction isInType(path) {\n  do {\n    switch (path.parent.type) {\n      case \"TSTypeAnnotation\":\n      case \"TSTypeAliasDeclaration\":\n      case \"TSTypeReference\":\n      case \"TypeAnnotation\":\n      case \"TypeAlias\":\n        return true;\n\n      case \"ExportSpecifier\":\n        return path.parentPath.parent.exportKind === \"type\";\n\n      default:\n        if (path.parentPath.isStatement() || path.parentPath.isExpression()) {\n          return false;\n        }\n\n    }\n  } while (path = path.parentPath);\n}\n\nfunction rewriteLiveReferences(programPath, metadata) {\n  const imported = new Map();\n  const exported = new Map();\n\n  const requeueInParent = path => {\n    programPath.requeue(path);\n  };\n\n  for (const [source, data] of metadata.source) {\n    for (const [localName, importName] of data.imports) {\n      imported.set(localName, [source, importName, null]);\n    }\n\n    for (const localName of data.importsNamespace) {\n      imported.set(localName, [source, null, localName]);\n    }\n  }\n\n  for (const [local, data] of metadata.local) {\n    let exportMeta = exported.get(local);\n\n    if (!exportMeta) {\n      exportMeta = [];\n      exported.set(local, exportMeta);\n    }\n\n    exportMeta.push(...data.names);\n  }\n\n  const rewriteBindingInitVisitorState = {\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    exported\n  };\n  programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);\n  (0, _helperSimpleAccess.default)(programPath, new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]), false);\n  const rewriteReferencesVisitorState = {\n    seen: new WeakSet(),\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    imported,\n    exported,\n    buildImportReference: (_ref, identNode) => {\n      let [source, importName, localName] = _ref;\n      const meta = metadata.source.get(source);\n\n      if (localName) {\n        if (meta.lazy) {\n          identNode = callExpression(identNode, []);\n        }\n\n        return identNode;\n      }\n\n      let namespace = identifier(meta.name);\n      if (meta.lazy) namespace = callExpression(namespace, []);\n\n      if (importName === \"default\" && meta.interop === \"node-default\") {\n        return namespace;\n      }\n\n      const computed = metadata.stringSpecifiers.has(importName);\n      return memberExpression(namespace, computed ? stringLiteral(importName) : identifier(importName), computed);\n    }\n  };\n  programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);\n}\n\nconst rewriteBindingInitVisitor = {\n  Scope(path) {\n    path.skip();\n  },\n\n  ClassDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    const {\n      id\n    } = path.node;\n    if (!id) throw new Error(\"Expected class to have a name\");\n    const localName = id.name;\n    const exportNames = exported.get(localName) || [];\n\n    if (exportNames.length > 0) {\n      const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName), path.scope));\n      statement._blockHoist = path.node._blockHoist;\n      requeueInParent(path.insertAfter(statement)[0]);\n    }\n  },\n\n  VariableDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    Object.keys(path.getOuterBindingIdentifiers()).forEach(localName => {\n      const exportNames = exported.get(localName) || [];\n\n      if (exportNames.length > 0) {\n        const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName), path.scope));\n        statement._blockHoist = path.node._blockHoist;\n        requeueInParent(path.insertAfter(statement)[0]);\n      }\n    });\n  }\n\n};\n\nconst buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope) => {\n  const exportsObjectName = metadata.exportName;\n\n  for (let currentScope = scope; currentScope != null; currentScope = currentScope.parent) {\n    if (currentScope.hasOwnBinding(exportsObjectName)) {\n      currentScope.rename(exportsObjectName);\n    }\n  }\n\n  return (exportNames || []).reduce((expr, exportName) => {\n    const {\n      stringSpecifiers\n    } = metadata;\n    const computed = stringSpecifiers.has(exportName);\n    return assignmentExpression(\"=\", memberExpression(identifier(exportsObjectName), computed ? stringLiteral(exportName) : identifier(exportName), computed), expr);\n  }, localExpr);\n};\n\nconst buildImportThrow = localName => {\n  return _template.default.expression.ast`\n    (function() {\n      throw new Error('\"' + '${localName}' + '\" is read-only.');\n    })()\n  `;\n};\n\nconst rewriteReferencesVisitor = {\n  ReferencedIdentifier(path) {\n    const {\n      seen,\n      buildImportReference,\n      scope,\n      imported,\n      requeueInParent\n    } = this;\n    if (seen.has(path.node)) return;\n    seen.add(path.node);\n    const localName = path.node.name;\n    const importData = imported.get(localName);\n\n    if (importData) {\n      if (isInType(path)) {\n        throw path.buildCodeFrameError(`Cannot transform the imported binding \"${localName}\" since it's also used in a type annotation. ` + `Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);\n      }\n\n      const localBinding = path.scope.getBinding(localName);\n      const rootBinding = scope.getBinding(localName);\n      if (rootBinding !== localBinding) return;\n      const ref = buildImportReference(importData, path.node);\n      ref.loc = path.node.loc;\n\n      if ((path.parentPath.isCallExpression({\n        callee: path.node\n      }) || path.parentPath.isOptionalCallExpression({\n        callee: path.node\n      }) || path.parentPath.isTaggedTemplateExpression({\n        tag: path.node\n      })) && isMemberExpression(ref)) {\n        path.replaceWith(sequenceExpression([numericLiteral(0), ref]));\n      } else if (path.isJSXIdentifier() && isMemberExpression(ref)) {\n        const {\n          object,\n          property\n        } = ref;\n        path.replaceWith(jsxMemberExpression(jsxIdentifier(object.name), jsxIdentifier(property.name)));\n      } else {\n        path.replaceWith(ref);\n      }\n\n      requeueInParent(path);\n      path.skip();\n    }\n  },\n\n  UpdateExpression(path) {\n    const {\n      scope,\n      seen,\n      imported,\n      exported,\n      requeueInParent,\n      buildImportReference\n    } = this;\n    if (seen.has(path.node)) return;\n    seen.add(path.node);\n    const arg = path.get(\"argument\");\n    if (arg.isMemberExpression()) return;\n    const update = path.node;\n\n    if (arg.isIdentifier()) {\n      const localName = arg.node.name;\n\n      if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n        return;\n      }\n\n      const exportedNames = exported.get(localName);\n      const importData = imported.get(localName);\n\n      if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {\n        if (importData) {\n          path.replaceWith(assignmentExpression(update.operator[0] + \"=\", buildImportReference(importData, arg.node), buildImportThrow(localName)));\n        } else if (update.prefix) {\n          path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, cloneNode(update), path.scope));\n        } else {\n          const ref = scope.generateDeclaredUidIdentifier(localName);\n          path.replaceWith(sequenceExpression([assignmentExpression(\"=\", cloneNode(ref), cloneNode(update)), buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName), path.scope), cloneNode(ref)]));\n        }\n      }\n    }\n\n    requeueInParent(path);\n    path.skip();\n  },\n\n  AssignmentExpression: {\n    exit(path) {\n      const {\n        scope,\n        seen,\n        imported,\n        exported,\n        requeueInParent,\n        buildImportReference\n      } = this;\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n      const left = path.get(\"left\");\n      if (left.isMemberExpression()) return;\n\n      if (left.isIdentifier()) {\n        const localName = left.node.name;\n\n        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n          return;\n        }\n\n        const exportedNames = exported.get(localName);\n        const importData = imported.get(localName);\n\n        if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {\n          _assert(path.node.operator === \"=\", \"Path was not simplified\");\n\n          const assignment = path.node;\n\n          if (importData) {\n            assignment.left = buildImportReference(importData, left.node);\n            assignment.right = sequenceExpression([assignment.right, buildImportThrow(localName)]);\n          }\n\n          path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment, path.scope));\n          requeueInParent(path);\n        }\n      } else {\n        const ids = left.getOuterBindingIdentifiers();\n        const programScopeIds = Object.keys(ids).filter(localName => scope.getBinding(localName) === path.scope.getBinding(localName));\n        const id = programScopeIds.find(localName => imported.has(localName));\n\n        if (id) {\n          path.node.right = sequenceExpression([path.node.right, buildImportThrow(id)]);\n        }\n\n        const items = [];\n        programScopeIds.forEach(localName => {\n          const exportedNames = exported.get(localName) || [];\n\n          if (exportedNames.length > 0) {\n            items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName), path.scope));\n          }\n        });\n\n        if (items.length > 0) {\n          let node = sequenceExpression(items);\n\n          if (path.parentPath.isExpressionStatement()) {\n            node = expressionStatement(node);\n            node._blockHoist = path.parentPath.node._blockHoist;\n          }\n\n          const statement = path.insertAfter(node)[0];\n          requeueInParent(statement);\n        }\n      }\n    }\n\n  },\n\n  \"ForOfStatement|ForInStatement\"(path) {\n    const {\n      scope,\n      node\n    } = path;\n    const {\n      left\n    } = node;\n    const {\n      exported,\n      imported,\n      scope: programScope\n    } = this;\n\n    if (!isVariableDeclaration(left)) {\n      let didTransformExport = false,\n          importConstViolationName;\n      const loopBodyScope = path.get(\"body\").scope;\n\n      for (const name of Object.keys(getOuterBindingIdentifiers(left))) {\n        if (programScope.getBinding(name) === scope.getBinding(name)) {\n          if (exported.has(name)) {\n            didTransformExport = true;\n\n            if (loopBodyScope.hasOwnBinding(name)) {\n              loopBodyScope.rename(name);\n            }\n          }\n\n          if (imported.has(name) && !importConstViolationName) {\n            importConstViolationName = name;\n          }\n        }\n      }\n\n      if (!didTransformExport && !importConstViolationName) {\n        return;\n      }\n\n      path.ensureBlock();\n      const bodyPath = path.get(\"body\");\n      const newLoopId = scope.generateUidIdentifierBasedOnNode(left);\n      path.get(\"left\").replaceWith(variableDeclaration(\"let\", [variableDeclarator(cloneNode(newLoopId))]));\n      scope.registerDeclaration(path.get(\"left\"));\n\n      if (didTransformExport) {\n        bodyPath.unshiftContainer(\"body\", expressionStatement(assignmentExpression(\"=\", left, newLoopId)));\n      }\n\n      if (importConstViolationName) {\n        bodyPath.unshiftContainer(\"body\", expressionStatement(buildImportThrow(importConstViolationName)));\n      }\n    }\n  }\n\n};","map":{"version":3,"mappings":"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","names":["assignmentExpression","callExpression","cloneNode","expressionStatement","getOuterBindingIdentifiers","identifier","isMemberExpression","isVariableDeclaration","jsxIdentifier","jsxMemberExpression","memberExpression","numericLiteral","sequenceExpression","stringLiteral","variableDeclaration","variableDeclarator","isInType","path","parent","type","parentPath","exportKind","isStatement","isExpression","rewriteLiveReferences","programPath","metadata","imported","Map","exported","requeueInParent","requeue","source","data","localName","importName","imports","set","importsNamespace","local","exportMeta","get","push","names","rewriteBindingInitVisitorState","scope","traverse","rewriteBindingInitVisitor","Set","Array","from","keys","rewriteReferencesVisitorState","seen","WeakSet","buildImportReference","identNode","meta","lazy","namespace","name","interop","computed","stringSpecifiers","has","rewriteReferencesVisitor","Scope","skip","ClassDeclaration","id","node","Error","exportNames","length","statement","buildBindingExportAssignmentExpression","_blockHoist","insertAfter","VariableDeclaration","Object","forEach","localExpr","exportsObjectName","exportName","currentScope","hasOwnBinding","rename","reduce","expr","buildImportThrow","template","expression","ast","ReferencedIdentifier","add","importData","buildCodeFrameError","localBinding","getBinding","rootBinding","ref","loc","isCallExpression","callee","isOptionalCallExpression","isTaggedTemplateExpression","tag","replaceWith","isJSXIdentifier","object","property","UpdateExpression","arg","update","isIdentifier","exportedNames","operator","prefix","generateDeclaredUidIdentifier","AssignmentExpression","exit","left","assert","assignment","right","ids","programScopeIds","filter","find","items","isExpressionStatement","programScope","didTransformExport","importConstViolationName","loopBodyScope","ensureBlock","bodyPath","newLoopId","generateUidIdentifierBasedOnNode","registerDeclaration","unshiftContainer"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\helper-module-transforms\\src\\rewrite-live-references.ts"],"sourcesContent":["import assert from \"assert\";\nimport {\n  assignmentExpression,\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  getOuterBindingIdentifiers,\n  identifier,\n  isMemberExpression,\n  isVariableDeclaration,\n  jsxIdentifier,\n  jsxMemberExpression,\n  memberExpression,\n  numericLiteral,\n  sequenceExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport template from \"@babel/template\";\nimport type { NodePath, Visitor, Scope } from \"@babel/traverse\";\nimport simplifyAccess from \"@babel/helper-simple-access\";\n\nimport type { ModuleMetadata } from \"./normalize-and-load-metadata\";\n\ninterface RewriteReferencesVisitorState {\n  exported: Map<any, any>;\n  metadata: ModuleMetadata;\n  requeueInParent: (path: NodePath) => void;\n  scope: Scope;\n  imported: Map<any, any>;\n  buildImportReference: (\n    [source, importName, localName]: readonly [string, string, string],\n    identNode: t.Identifier | t.CallExpression | t.JSXIdentifier,\n  ) => any;\n  seen: WeakSet<object>;\n}\n\ninterface RewriteBindingInitVisitorState {\n  exported: Map<any, any>;\n  metadata: ModuleMetadata;\n  requeueInParent: (path: NodePath) => void;\n  scope: Scope;\n}\n\nfunction isInType(path: NodePath) {\n  do {\n    switch (path.parent.type) {\n      case \"TSTypeAnnotation\":\n      case \"TSTypeAliasDeclaration\":\n      case \"TSTypeReference\":\n      case \"TypeAnnotation\":\n      case \"TypeAlias\":\n        return true;\n      case \"ExportSpecifier\":\n        return (\n          (\n            path.parentPath.parent as\n              | t.ExportDefaultDeclaration\n              | t.ExportNamedDeclaration\n          ).exportKind === \"type\"\n        );\n      default:\n        if (path.parentPath.isStatement() || path.parentPath.isExpression()) {\n          return false;\n        }\n    }\n  } while ((path = path.parentPath));\n}\n\nexport default function rewriteLiveReferences(\n  programPath: NodePath<t.Program>,\n  metadata: ModuleMetadata,\n) {\n  const imported = new Map();\n  const exported = new Map();\n  const requeueInParent = (path: NodePath) => {\n    // Manually re-queue `exports.default =` expressions so that the ES3\n    // transform has an opportunity to convert them. Ideally this would\n    // happen automatically from the replaceWith above. See #4140 for\n    // more info.\n    programPath.requeue(path);\n  };\n\n  for (const [source, data] of metadata.source) {\n    for (const [localName, importName] of data.imports) {\n      imported.set(localName, [source, importName, null]);\n    }\n    for (const localName of data.importsNamespace) {\n      imported.set(localName, [source, null, localName]);\n    }\n  }\n\n  for (const [local, data] of metadata.local) {\n    let exportMeta = exported.get(local);\n    if (!exportMeta) {\n      exportMeta = [];\n      exported.set(local, exportMeta);\n    }\n\n    exportMeta.push(...data.names);\n  }\n\n  // Rewrite initialization of bindings to update exports.\n  const rewriteBindingInitVisitorState: RewriteBindingInitVisitorState = {\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    exported, // local name => exported name list\n  };\n  programPath.traverse(\n    rewriteBindingInitVisitor,\n    rewriteBindingInitVisitorState,\n  );\n\n  simplifyAccess(\n    programPath,\n    // NOTE(logan): The 'Array.from' calls are to make this code with in loose mode.\n    new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]),\n    false,\n  );\n\n  // Rewrite reads/writes from imports and exports to have the correct behavior.\n  const rewriteReferencesVisitorState: RewriteReferencesVisitorState = {\n    seen: new WeakSet(),\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    imported, // local / import\n    exported, // local name => exported name list\n    buildImportReference: ([source, importName, localName], identNode) => {\n      const meta = metadata.source.get(source);\n\n      if (localName) {\n        if (meta.lazy) {\n          identNode = callExpression(\n            // @ts-expect-error Fixme: we should handle the case when identNode is a JSXIdentifier\n            identNode,\n            [],\n          );\n        }\n        return identNode;\n      }\n\n      let namespace: t.Expression = identifier(meta.name);\n      if (meta.lazy) namespace = callExpression(namespace, []);\n\n      if (importName === \"default\" && meta.interop === \"node-default\") {\n        return namespace;\n      }\n\n      const computed = metadata.stringSpecifiers.has(importName);\n\n      return memberExpression(\n        namespace,\n        computed ? stringLiteral(importName) : identifier(importName),\n        computed,\n      );\n    },\n  };\n  programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);\n}\n\n/**\n * A visitor to inject export update statements during binding initialization.\n */\nconst rewriteBindingInitVisitor: Visitor<RewriteBindingInitVisitorState> = {\n  Scope(path) {\n    path.skip();\n  },\n  ClassDeclaration(path) {\n    const { requeueInParent, exported, metadata } = this;\n\n    const { id } = path.node;\n    if (!id) throw new Error(\"Expected class to have a name\");\n    const localName = id.name;\n\n    const exportNames = exported.get(localName) || [];\n    if (exportNames.length > 0) {\n      const statement = expressionStatement(\n        buildBindingExportAssignmentExpression(\n          metadata,\n          exportNames,\n          identifier(localName),\n          path.scope,\n        ),\n      );\n      // @ts-expect-error todo(flow->ts): avoid mutations\n      statement._blockHoist = path.node._blockHoist;\n\n      requeueInParent(path.insertAfter(statement)[0]);\n    }\n  },\n  VariableDeclaration(path) {\n    const { requeueInParent, exported, metadata } = this;\n\n    Object.keys(path.getOuterBindingIdentifiers()).forEach(localName => {\n      const exportNames = exported.get(localName) || [];\n\n      if (exportNames.length > 0) {\n        const statement = expressionStatement(\n          buildBindingExportAssignmentExpression(\n            metadata,\n            exportNames,\n            identifier(localName),\n            path.scope,\n          ),\n        );\n        // @ts-expect-error todo(flow->ts): avoid mutations\n        statement._blockHoist = path.node._blockHoist;\n\n        requeueInParent(path.insertAfter(statement)[0]);\n      }\n    });\n  },\n};\n\nconst buildBindingExportAssignmentExpression = (\n  metadata: ModuleMetadata,\n  exportNames: string[],\n  localExpr: t.Expression,\n  scope: Scope,\n) => {\n  const exportsObjectName = metadata.exportName;\n  for (\n    let currentScope = scope;\n    currentScope != null;\n    currentScope = currentScope.parent\n  ) {\n    if (currentScope.hasOwnBinding(exportsObjectName)) {\n      currentScope.rename(exportsObjectName);\n    }\n  }\n  return (exportNames || []).reduce((expr, exportName) => {\n    // class Foo {} export { Foo, Foo as Bar };\n    // as\n    // class Foo {} exports.Foo = exports.Bar = Foo;\n    const { stringSpecifiers } = metadata;\n    const computed = stringSpecifiers.has(exportName);\n    return assignmentExpression(\n      \"=\",\n      memberExpression(\n        identifier(exportsObjectName),\n        computed ? stringLiteral(exportName) : identifier(exportName),\n        /* computed */ computed,\n      ),\n      expr,\n    );\n  }, localExpr);\n};\n\nconst buildImportThrow = (localName: string) => {\n  return template.expression.ast`\n    (function() {\n      throw new Error('\"' + '${localName}' + '\" is read-only.');\n    })()\n  `;\n};\n\nconst rewriteReferencesVisitor: Visitor<RewriteReferencesVisitorState> = {\n  ReferencedIdentifier(path) {\n    const { seen, buildImportReference, scope, imported, requeueInParent } =\n      this;\n    if (seen.has(path.node)) return;\n    seen.add(path.node);\n\n    const localName = path.node.name;\n\n    const importData = imported.get(localName);\n    if (importData) {\n      if (isInType(path)) {\n        throw path.buildCodeFrameError(\n          `Cannot transform the imported binding \"${localName}\" since it's also used in a type annotation. ` +\n            `Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`,\n        );\n      }\n\n      const localBinding = path.scope.getBinding(localName);\n      const rootBinding = scope.getBinding(localName);\n\n      // redeclared in this scope\n      if (rootBinding !== localBinding) return;\n\n      const ref = buildImportReference(importData, path.node);\n\n      // Preserve the binding location so that sourcemaps are nicer.\n      ref.loc = path.node.loc;\n\n      if (\n        (path.parentPath.isCallExpression({ callee: path.node }) ||\n          path.parentPath.isOptionalCallExpression({ callee: path.node }) ||\n          path.parentPath.isTaggedTemplateExpression({ tag: path.node })) &&\n        isMemberExpression(ref)\n      ) {\n        path.replaceWith(sequenceExpression([numericLiteral(0), ref]));\n      } else if (path.isJSXIdentifier() && isMemberExpression(ref)) {\n        const { object, property } = ref;\n        path.replaceWith(\n          jsxMemberExpression(\n            // @ts-expect-error todo(flow->ts): possible bug `object` might not have a name\n            jsxIdentifier(object.name),\n            // @ts-expect-error todo(flow->ts): possible bug `property` might not have a name\n            jsxIdentifier(property.name),\n          ),\n        );\n      } else {\n        path.replaceWith(ref);\n      }\n\n      requeueInParent(path);\n\n      // The path could have been replaced with an identifier that would\n      // otherwise be re-visited, so we skip processing its children.\n      path.skip();\n    }\n  },\n\n  UpdateExpression(path) {\n    const {\n      scope,\n      seen,\n      imported,\n      exported,\n      requeueInParent,\n      buildImportReference,\n    } = this;\n\n    if (seen.has(path.node)) return;\n\n    seen.add(path.node);\n\n    const arg = path.get(\"argument\");\n\n    // No change needed\n    if (arg.isMemberExpression()) return;\n\n    const update = path.node;\n\n    if (arg.isIdentifier()) {\n      const localName = arg.node.name;\n\n      // redeclared in this scope\n      if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n        return;\n      }\n\n      const exportedNames = exported.get(localName);\n      const importData = imported.get(localName);\n\n      if (exportedNames?.length > 0 || importData) {\n        if (importData) {\n          path.replaceWith(\n            assignmentExpression(\n              update.operator[0] + \"=\",\n              buildImportReference(importData, arg.node),\n              buildImportThrow(localName),\n            ),\n          );\n        } else if (update.prefix) {\n          // ++foo\n          // =>   exports.foo = ++foo\n          path.replaceWith(\n            buildBindingExportAssignmentExpression(\n              this.metadata,\n              exportedNames,\n              cloneNode(update),\n              path.scope,\n            ),\n          );\n        } else {\n          // foo++\n          // =>   (ref = i++, exports.i = i, ref)\n          const ref = scope.generateDeclaredUidIdentifier(localName);\n\n          path.replaceWith(\n            sequenceExpression([\n              assignmentExpression(\"=\", cloneNode(ref), cloneNode(update)),\n              buildBindingExportAssignmentExpression(\n                this.metadata,\n                exportedNames,\n                identifier(localName),\n                path.scope,\n              ),\n              cloneNode(ref),\n            ]),\n          );\n        }\n      }\n    }\n\n    requeueInParent(path);\n    path.skip();\n  },\n\n  AssignmentExpression: {\n    exit(path) {\n      const {\n        scope,\n        seen,\n        imported,\n        exported,\n        requeueInParent,\n        buildImportReference,\n      } = this;\n\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n\n      const left = path.get(\"left\");\n\n      // No change needed\n      if (left.isMemberExpression()) return;\n\n      if (left.isIdentifier()) {\n        // Simple update-assign foo += 1; export { foo };\n        // =>   exports.foo =  (foo += 1);\n        const localName = left.node.name;\n\n        // redeclared in this scope\n        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n          return;\n        }\n\n        const exportedNames = exported.get(localName);\n        const importData = imported.get(localName);\n        if (exportedNames?.length > 0 || importData) {\n          assert(path.node.operator === \"=\", \"Path was not simplified\");\n\n          const assignment = path.node;\n\n          if (importData) {\n            assignment.left = buildImportReference(importData, left.node);\n\n            assignment.right = sequenceExpression([\n              assignment.right,\n              buildImportThrow(localName),\n            ]);\n          }\n\n          path.replaceWith(\n            buildBindingExportAssignmentExpression(\n              this.metadata,\n              exportedNames,\n              assignment,\n              path.scope,\n            ),\n          );\n          requeueInParent(path);\n        }\n      } else {\n        const ids = left.getOuterBindingIdentifiers();\n        const programScopeIds = Object.keys(ids).filter(\n          localName =>\n            scope.getBinding(localName) === path.scope.getBinding(localName),\n        );\n        const id = programScopeIds.find(localName => imported.has(localName));\n\n        if (id) {\n          path.node.right = sequenceExpression([\n            path.node.right,\n            buildImportThrow(id),\n          ]);\n        }\n\n        // Complex ({a, b, c} = {}); export { a, c };\n        // =>   ({a, b, c} = {}), (exports.a = a, exports.c = c);\n        const items: t.Expression[] = [];\n        programScopeIds.forEach(localName => {\n          const exportedNames = exported.get(localName) || [];\n          if (exportedNames.length > 0) {\n            items.push(\n              buildBindingExportAssignmentExpression(\n                this.metadata,\n                exportedNames,\n                identifier(localName),\n                path.scope,\n              ),\n            );\n          }\n        });\n\n        if (items.length > 0) {\n          let node: t.Node = sequenceExpression(items);\n          if (path.parentPath.isExpressionStatement()) {\n            node = expressionStatement(node);\n            // @ts-expect-error todo(flow->ts): avoid mutations\n            node._blockHoist = path.parentPath.node._blockHoist;\n          }\n\n          const statement = path.insertAfter(node)[0];\n          requeueInParent(statement);\n        }\n      }\n    },\n  },\n  \"ForOfStatement|ForInStatement\"(\n    path: NodePath<t.ForOfStatement | t.ForInStatement>,\n  ) {\n    const { scope, node } = path;\n    const { left } = node;\n    const { exported, imported, scope: programScope } = this;\n\n    if (!isVariableDeclaration(left)) {\n      let didTransformExport = false,\n        importConstViolationName;\n      const loopBodyScope = path.get(\"body\").scope;\n      for (const name of Object.keys(getOuterBindingIdentifiers(left))) {\n        if (programScope.getBinding(name) === scope.getBinding(name)) {\n          if (exported.has(name)) {\n            didTransformExport = true;\n            if (loopBodyScope.hasOwnBinding(name)) {\n              loopBodyScope.rename(name);\n            }\n          }\n          if (imported.has(name) && !importConstViolationName) {\n            importConstViolationName = name;\n          }\n        }\n      }\n      if (!didTransformExport && !importConstViolationName) {\n        return;\n      }\n\n      path.ensureBlock();\n      const bodyPath = path.get(\"body\");\n\n      const newLoopId = scope.generateUidIdentifierBasedOnNode(left);\n      path\n        .get(\"left\")\n        .replaceWith(\n          variableDeclaration(\"let\", [\n            variableDeclarator(cloneNode(newLoopId)),\n          ]),\n        );\n      scope.registerDeclaration(path.get(\"left\"));\n\n      if (didTransformExport) {\n        bodyPath.unshiftContainer(\n          \"body\",\n          expressionStatement(assignmentExpression(\"=\", left, newLoopId)),\n        );\n      }\n      if (importConstViolationName) {\n        bodyPath.unshiftContainer(\n          \"body\",\n          expressionStatement(buildImportThrow(importConstViolationName)),\n        );\n      }\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"script"}