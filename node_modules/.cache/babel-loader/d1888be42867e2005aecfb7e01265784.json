{"ast":null,"code":"const definitions = require(\"../src/definitions\");\n\nconst flatMap = require(\"array.prototype.flatmap\");\n\nconst {\n  typeSignature,\n  mapProps,\n  iterateProps,\n  unique\n} = require(\"./util\");\n\nconst stdout = process.stdout;\n\nfunction params(fields) {\n  return mapProps(fields).map(typeSignature).join(\",\");\n}\n\nfunction generate() {\n  stdout.write(`\n    // @flow\n    /* eslint no-unused-vars: off */\n\n    // THIS FILE IS AUTOGENERATED\n    // see scripts/generateTypeDefinitions.js\n  `); // generate union types\n\n  const unionTypes = unique(flatMap(mapProps(definitions).filter(d => d.unionType), d => d.unionType));\n  unionTypes.forEach(unionType => {\n    stdout.write(`type ${unionType} = ` + mapProps(definitions).filter(d => d.unionType && d.unionType.includes(unionType)).map(d => d.name).join(\"|\") + \";\\n\\n\");\n  }); // generate the type definitions\n\n  iterateProps(definitions, typeDef => {\n    stdout.write(`type ${typeDef.name} = {\n        ...BaseNode,\n        type: \"${typeDef.name}\",\n        ${params(typeDef.fields)}\n      };\\n\\n`);\n  });\n}\n\ngenerate();","map":{"version":3,"names":["definitions","require","flatMap","typeSignature","mapProps","iterateProps","unique","stdout","process","params","fields","map","join","generate","write","unionTypes","filter","d","unionType","forEach","includes","name","typeDef"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@webassemblyjs/ast/scripts/generateTypeDefinitions.js"],"sourcesContent":["const definitions = require(\"../src/definitions\");\nconst flatMap = require(\"array.prototype.flatmap\");\nconst { typeSignature, mapProps, iterateProps, unique } = require(\"./util\");\n\nconst stdout = process.stdout;\n\nfunction params(fields) {\n  return mapProps(fields)\n    .map(typeSignature)\n    .join(\",\");\n}\n\nfunction generate() {\n  stdout.write(`\n    // @flow\n    /* eslint no-unused-vars: off */\n\n    // THIS FILE IS AUTOGENERATED\n    // see scripts/generateTypeDefinitions.js\n  `);\n\n  // generate union types\n  const unionTypes = unique(\n    flatMap(mapProps(definitions).filter(d => d.unionType), d => d.unionType)\n  );\n  unionTypes.forEach(unionType => {\n    stdout.write(\n      `type ${unionType} = ` +\n        mapProps(definitions)\n          .filter(d => d.unionType && d.unionType.includes(unionType))\n          .map(d => d.name)\n          .join(\"|\") +\n        \";\\n\\n\"\n    );\n  });\n\n  // generate the type definitions\n  iterateProps(definitions, typeDef => {\n    stdout.write(`type ${typeDef.name} = {\n        ...BaseNode,\n        type: \"${typeDef.name}\",\n        ${params(typeDef.fields)}\n      };\\n\\n`);\n  });\n}\n\ngenerate();\n"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAA3B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,yBAAD,CAAvB;;AACA,MAAM;EAAEE,aAAF;EAAiBC,QAAjB;EAA2BC,YAA3B;EAAyCC;AAAzC,IAAoDL,OAAO,CAAC,QAAD,CAAjE;;AAEA,MAAMM,MAAM,GAAGC,OAAO,CAACD,MAAvB;;AAEA,SAASE,MAAT,CAAgBC,MAAhB,EAAwB;EACtB,OAAON,QAAQ,CAACM,MAAD,CAAR,CACJC,GADI,CACAR,aADA,EAEJS,IAFI,CAEC,GAFD,CAAP;AAGD;;AAED,SAASC,QAAT,GAAoB;EAClBN,MAAM,CAACO,KAAP,CAAc;AAChB;AACA;AACA;AACA;AACA;AACA,GANE,EADkB,CASlB;;EACA,MAAMC,UAAU,GAAGT,MAAM,CACvBJ,OAAO,CAACE,QAAQ,CAACJ,WAAD,CAAR,CAAsBgB,MAAtB,CAA6BC,CAAC,IAAIA,CAAC,CAACC,SAApC,CAAD,EAAiDD,CAAC,IAAIA,CAAC,CAACC,SAAxD,CADgB,CAAzB;EAGAH,UAAU,CAACI,OAAX,CAAmBD,SAAS,IAAI;IAC9BX,MAAM,CAACO,KAAP,CACG,QAAOI,SAAU,KAAlB,GACEd,QAAQ,CAACJ,WAAD,CAAR,CACGgB,MADH,CACUC,CAAC,IAAIA,CAAC,CAACC,SAAF,IAAeD,CAAC,CAACC,SAAF,CAAYE,QAAZ,CAAqBF,SAArB,CAD9B,EAEGP,GAFH,CAEOM,CAAC,IAAIA,CAAC,CAACI,IAFd,EAGGT,IAHH,CAGQ,GAHR,CADF,GAKE,OANJ;EAQD,CATD,EAbkB,CAwBlB;;EACAP,YAAY,CAACL,WAAD,EAAcsB,OAAO,IAAI;IACnCf,MAAM,CAACO,KAAP,CAAc,QAAOQ,OAAO,CAACD,IAAK;AACtC;AACA,iBAAiBC,OAAO,CAACD,IAAK;AAC9B,UAAUZ,MAAM,CAACa,OAAO,CAACZ,MAAT,CAAiB;AACjC,aAJI;EAKD,CANW,CAAZ;AAOD;;AAEDG,QAAQ"},"metadata":{},"sourceType":"script"}