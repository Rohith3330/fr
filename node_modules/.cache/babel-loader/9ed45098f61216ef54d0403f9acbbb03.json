{"ast":null,"code":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\nimport { makePredicate } from \"../utils/index.js\"; // Lists of native methods, useful for `unsafe` option which assumes they exist.\n// Note: Lots of methods and functions are missing here, in case they aren't pure\n// or not available in all JS environments.\n\nfunction make_nested_lookup(obj) {\n  const out = new Map();\n\n  for (var key of Object.keys(obj)) {\n    out.set(key, makePredicate(obj[key]));\n  }\n\n  const does_have = (global_name, fname) => {\n    const inner_map = out.get(global_name);\n    return inner_map != null && inner_map.has(fname);\n  };\n\n  return does_have;\n} // Objects which are safe to access without throwing or causing a side effect.\n// Usually we'd check the `unsafe` option first but these are way too common for that\n\n\nexport const pure_prop_access_globals = new Set([\"Number\", \"String\", \"Array\", \"Object\", \"Function\", \"Promise\"]);\nconst object_methods = [\"constructor\", \"toString\", \"valueOf\"];\nexport const is_pure_native_method = make_nested_lookup({\n  Array: [\"indexOf\", \"join\", \"lastIndexOf\", \"slice\", ...object_methods],\n  Boolean: object_methods,\n  Function: object_methods,\n  Number: [\"toExponential\", \"toFixed\", \"toPrecision\", ...object_methods],\n  Object: object_methods,\n  RegExp: [\"test\", ...object_methods],\n  String: [\"charAt\", \"charCodeAt\", \"concat\", \"indexOf\", \"italics\", \"lastIndexOf\", \"match\", \"replace\", \"search\", \"slice\", \"split\", \"substr\", \"substring\", \"toLowerCase\", \"toUpperCase\", \"trim\", ...object_methods]\n});\nexport const is_pure_native_fn = make_nested_lookup({\n  Array: [\"isArray\"],\n  Math: [\"abs\", \"acos\", \"asin\", \"atan\", \"ceil\", \"cos\", \"exp\", \"floor\", \"log\", \"round\", \"sin\", \"sqrt\", \"tan\", \"atan2\", \"pow\", \"max\", \"min\"],\n  Number: [\"isFinite\", \"isNaN\"],\n  Object: [\"create\", \"getOwnPropertyDescriptor\", \"getOwnPropertyNames\", \"getPrototypeOf\", \"isExtensible\", \"isFrozen\", \"isSealed\", \"hasOwn\", \"keys\"],\n  String: [\"fromCharCode\"]\n}); // Known numeric values which come with JS environments\n\nexport const is_pure_native_value = make_nested_lookup({\n  Math: [\"E\", \"LN10\", \"LN2\", \"LOG2E\", \"LOG10E\", \"PI\", \"SQRT1_2\", \"SQRT2\"],\n  Number: [\"MAX_VALUE\", \"MIN_VALUE\", \"NaN\", \"NEGATIVE_INFINITY\", \"POSITIVE_INFINITY\"]\n});","map":{"version":3,"names":["makePredicate","make_nested_lookup","obj","out","Map","key","Object","keys","set","does_have","global_name","fname","inner_map","get","has","pure_prop_access_globals","Set","object_methods","is_pure_native_method","Array","Boolean","Function","Number","RegExp","String","is_pure_native_fn","Math","is_pure_native_value"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/terser/lib/compress/native-objects.js"],"sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport { makePredicate } from \"../utils/index.js\";\n\n// Lists of native methods, useful for `unsafe` option which assumes they exist.\n// Note: Lots of methods and functions are missing here, in case they aren't pure\n// or not available in all JS environments.\n\nfunction make_nested_lookup(obj) {\n    const out = new Map();\n    for (var key of Object.keys(obj)) {\n        out.set(key, makePredicate(obj[key]));\n    }\n\n    const does_have = (global_name, fname) => {\n        const inner_map = out.get(global_name);\n        return inner_map != null && inner_map.has(fname);\n    };\n    return does_have;\n}\n\n// Objects which are safe to access without throwing or causing a side effect.\n// Usually we'd check the `unsafe` option first but these are way too common for that\nexport const pure_prop_access_globals = new Set([\n    \"Number\",\n    \"String\",\n    \"Array\",\n    \"Object\",\n    \"Function\",\n    \"Promise\",\n]);\n\nconst object_methods = [\n    \"constructor\",\n    \"toString\",\n    \"valueOf\",\n];\n\nexport const is_pure_native_method = make_nested_lookup({\n    Array: [\n        \"indexOf\",\n        \"join\",\n        \"lastIndexOf\",\n        \"slice\",\n        ...object_methods,\n    ],\n    Boolean: object_methods,\n    Function: object_methods,\n    Number: [\n        \"toExponential\",\n        \"toFixed\",\n        \"toPrecision\",\n        ...object_methods,\n    ],\n    Object: object_methods,\n    RegExp: [\n        \"test\",\n        ...object_methods,\n    ],\n    String: [\n        \"charAt\",\n        \"charCodeAt\",\n        \"concat\",\n        \"indexOf\",\n        \"italics\",\n        \"lastIndexOf\",\n        \"match\",\n        \"replace\",\n        \"search\",\n        \"slice\",\n        \"split\",\n        \"substr\",\n        \"substring\",\n        \"toLowerCase\",\n        \"toUpperCase\",\n        \"trim\",\n        ...object_methods,\n    ],\n});\n\nexport const is_pure_native_fn = make_nested_lookup({\n    Array: [\n        \"isArray\",\n    ],\n    Math: [\n        \"abs\",\n        \"acos\",\n        \"asin\",\n        \"atan\",\n        \"ceil\",\n        \"cos\",\n        \"exp\",\n        \"floor\",\n        \"log\",\n        \"round\",\n        \"sin\",\n        \"sqrt\",\n        \"tan\",\n        \"atan2\",\n        \"pow\",\n        \"max\",\n        \"min\",\n    ],\n    Number: [\n        \"isFinite\",\n        \"isNaN\",\n    ],\n    Object: [\n        \"create\",\n        \"getOwnPropertyDescriptor\",\n        \"getOwnPropertyNames\",\n        \"getPrototypeOf\",\n        \"isExtensible\",\n        \"isFrozen\",\n        \"isSealed\",\n        \"hasOwn\",\n        \"keys\",\n    ],\n    String: [\n        \"fromCharCode\",\n    ],\n});\n\n// Known numeric values which come with JS environments\nexport const is_pure_native_value = make_nested_lookup({\n    Math: [\n        \"E\",\n        \"LN10\",\n        \"LN2\",\n        \"LOG2E\",\n        \"LOG10E\",\n        \"PI\",\n        \"SQRT1_2\",\n        \"SQRT2\",\n    ],\n    Number: [\n        \"MAX_VALUE\",\n        \"MIN_VALUE\",\n        \"NaN\",\n        \"NEGATIVE_INFINITY\",\n        \"POSITIVE_INFINITY\",\n    ],\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,aAAT,QAA8B,mBAA9B,C,CAEA;AACA;AACA;;AAEA,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;EAC7B,MAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;;EACA,KAAK,IAAIC,GAAT,IAAgBC,MAAM,CAACC,IAAP,CAAYL,GAAZ,CAAhB,EAAkC;IAC9BC,GAAG,CAACK,GAAJ,CAAQH,GAAR,EAAaL,aAAa,CAACE,GAAG,CAACG,GAAD,CAAJ,CAA1B;EACH;;EAED,MAAMI,SAAS,GAAG,CAACC,WAAD,EAAcC,KAAd,KAAwB;IACtC,MAAMC,SAAS,GAAGT,GAAG,CAACU,GAAJ,CAAQH,WAAR,CAAlB;IACA,OAAOE,SAAS,IAAI,IAAb,IAAqBA,SAAS,CAACE,GAAV,CAAcH,KAAd,CAA5B;EACH,CAHD;;EAIA,OAAOF,SAAP;AACH,C,CAED;AACA;;;AACA,OAAO,MAAMM,wBAAwB,GAAG,IAAIC,GAAJ,CAAQ,CAC5C,QAD4C,EAE5C,QAF4C,EAG5C,OAH4C,EAI5C,QAJ4C,EAK5C,UAL4C,EAM5C,SAN4C,CAAR,CAAjC;AASP,MAAMC,cAAc,GAAG,CACnB,aADmB,EAEnB,UAFmB,EAGnB,SAHmB,CAAvB;AAMA,OAAO,MAAMC,qBAAqB,GAAGjB,kBAAkB,CAAC;EACpDkB,KAAK,EAAE,CACH,SADG,EAEH,MAFG,EAGH,aAHG,EAIH,OAJG,EAKH,GAAGF,cALA,CAD6C;EAQpDG,OAAO,EAAEH,cAR2C;EASpDI,QAAQ,EAAEJ,cAT0C;EAUpDK,MAAM,EAAE,CACJ,eADI,EAEJ,SAFI,EAGJ,aAHI,EAIJ,GAAGL,cAJC,CAV4C;EAgBpDX,MAAM,EAAEW,cAhB4C;EAiBpDM,MAAM,EAAE,CACJ,MADI,EAEJ,GAAGN,cAFC,CAjB4C;EAqBpDO,MAAM,EAAE,CACJ,QADI,EAEJ,YAFI,EAGJ,QAHI,EAIJ,SAJI,EAKJ,SALI,EAMJ,aANI,EAOJ,OAPI,EAQJ,SARI,EASJ,QATI,EAUJ,OAVI,EAWJ,OAXI,EAYJ,QAZI,EAaJ,WAbI,EAcJ,aAdI,EAeJ,aAfI,EAgBJ,MAhBI,EAiBJ,GAAGP,cAjBC;AArB4C,CAAD,CAAhD;AA0CP,OAAO,MAAMQ,iBAAiB,GAAGxB,kBAAkB,CAAC;EAChDkB,KAAK,EAAE,CACH,SADG,CADyC;EAIhDO,IAAI,EAAE,CACF,KADE,EAEF,MAFE,EAGF,MAHE,EAIF,MAJE,EAKF,MALE,EAMF,KANE,EAOF,KAPE,EAQF,OARE,EASF,KATE,EAUF,OAVE,EAWF,KAXE,EAYF,MAZE,EAaF,KAbE,EAcF,OAdE,EAeF,KAfE,EAgBF,KAhBE,EAiBF,KAjBE,CAJ0C;EAuBhDJ,MAAM,EAAE,CACJ,UADI,EAEJ,OAFI,CAvBwC;EA2BhDhB,MAAM,EAAE,CACJ,QADI,EAEJ,0BAFI,EAGJ,qBAHI,EAIJ,gBAJI,EAKJ,cALI,EAMJ,UANI,EAOJ,UAPI,EAQJ,QARI,EASJ,MATI,CA3BwC;EAsChDkB,MAAM,EAAE,CACJ,cADI;AAtCwC,CAAD,CAA5C,C,CA2CP;;AACA,OAAO,MAAMG,oBAAoB,GAAG1B,kBAAkB,CAAC;EACnDyB,IAAI,EAAE,CACF,GADE,EAEF,MAFE,EAGF,KAHE,EAIF,OAJE,EAKF,QALE,EAMF,IANE,EAOF,SAPE,EAQF,OARE,CAD6C;EAWnDJ,MAAM,EAAE,CACJ,WADI,EAEJ,WAFI,EAGJ,KAHI,EAIJ,mBAJI,EAKJ,mBALI;AAX2C,CAAD,CAA/C"},"metadata":{},"sourceType":"module"}