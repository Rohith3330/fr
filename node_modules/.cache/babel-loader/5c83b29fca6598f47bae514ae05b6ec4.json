{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ControlledWatchCompilerHost_1 = require(\"./ControlledWatchCompilerHost\");\n\nfunction createControlledWatchSolutionBuilderHost(typescript, parsedCommandLine, system, createProgram, reportDiagnostic, reportWatchStatus, reportSolutionBuilderStatus, afterProgramCreate, afterProgramEmitAndDiagnostics) {\n  let hostExtensions = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];\n  const controlledWatchCompilerHost = ControlledWatchCompilerHost_1.createControlledWatchCompilerHost(typescript, parsedCommandLine, system, createProgram, reportDiagnostic, reportWatchStatus, afterProgramCreate, hostExtensions);\n  let controlledWatchSolutionBuilderHost = Object.assign(Object.assign({}, controlledWatchCompilerHost), {\n    reportDiagnostic(diagnostic) {\n      if (reportDiagnostic) {\n        reportDiagnostic(diagnostic);\n      }\n    },\n\n    reportSolutionBuilderStatus(diagnostic) {\n      if (reportSolutionBuilderStatus) {\n        reportSolutionBuilderStatus(diagnostic);\n      }\n    },\n\n    afterProgramEmitAndDiagnostics(program) {\n      if (afterProgramEmitAndDiagnostics) {\n        afterProgramEmitAndDiagnostics(program);\n      }\n    },\n\n    createDirectory(path) {\n      system.createDirectory(path);\n    },\n\n    writeFile(path, data) {\n      system.writeFile(path, data);\n    },\n\n    getModifiedTime(fileName) {\n      return system.getModifiedTime(fileName);\n    },\n\n    setModifiedTime(fileName, date) {\n      system.setModifiedTime(fileName, date);\n    },\n\n    deleteFile(fileName) {\n      system.deleteFile(fileName);\n    },\n\n    getParsedCommandLine(fileName) {\n      return typescript.getParsedCommandLineOfConfigFile(fileName, {\n        skipLibCheck: true\n      }, Object.assign(Object.assign({}, system), {\n        onUnRecoverableConfigFileDiagnostic: diagnostic => {\n          if (reportDiagnostic) {\n            reportDiagnostic(diagnostic);\n          }\n        }\n      }));\n    }\n\n  });\n  hostExtensions.forEach(hostExtension => {\n    if (hostExtension.extendWatchSolutionBuilderHost) {\n      controlledWatchSolutionBuilderHost = hostExtension.extendWatchSolutionBuilderHost(controlledWatchSolutionBuilderHost, parsedCommandLine);\n    }\n  });\n  return controlledWatchSolutionBuilderHost;\n}\n\nexports.createControlledWatchSolutionBuilderHost = createControlledWatchSolutionBuilderHost;","map":{"version":3,"names":["Object","defineProperty","exports","value","ControlledWatchCompilerHost_1","require","createControlledWatchSolutionBuilderHost","typescript","parsedCommandLine","system","createProgram","reportDiagnostic","reportWatchStatus","reportSolutionBuilderStatus","afterProgramCreate","afterProgramEmitAndDiagnostics","hostExtensions","controlledWatchCompilerHost","createControlledWatchCompilerHost","controlledWatchSolutionBuilderHost","assign","diagnostic","program","createDirectory","path","writeFile","data","getModifiedTime","fileName","setModifiedTime","date","deleteFile","getParsedCommandLine","getParsedCommandLineOfConfigFile","skipLibCheck","onUnRecoverableConfigFileDiagnostic","forEach","hostExtension","extendWatchSolutionBuilderHost"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/fork-ts-checker-webpack-plugin/lib/typescript-reporter/reporter/ControlledWatchSolutionBuilderHost.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ControlledWatchCompilerHost_1 = require(\"./ControlledWatchCompilerHost\");\nfunction createControlledWatchSolutionBuilderHost(typescript, parsedCommandLine, system, createProgram, reportDiagnostic, reportWatchStatus, reportSolutionBuilderStatus, afterProgramCreate, afterProgramEmitAndDiagnostics, hostExtensions = []) {\n    const controlledWatchCompilerHost = ControlledWatchCompilerHost_1.createControlledWatchCompilerHost(typescript, parsedCommandLine, system, createProgram, reportDiagnostic, reportWatchStatus, afterProgramCreate, hostExtensions);\n    let controlledWatchSolutionBuilderHost = Object.assign(Object.assign({}, controlledWatchCompilerHost), { reportDiagnostic(diagnostic) {\n            if (reportDiagnostic) {\n                reportDiagnostic(diagnostic);\n            }\n        },\n        reportSolutionBuilderStatus(diagnostic) {\n            if (reportSolutionBuilderStatus) {\n                reportSolutionBuilderStatus(diagnostic);\n            }\n        },\n        afterProgramEmitAndDiagnostics(program) {\n            if (afterProgramEmitAndDiagnostics) {\n                afterProgramEmitAndDiagnostics(program);\n            }\n        },\n        createDirectory(path) {\n            system.createDirectory(path);\n        },\n        writeFile(path, data) {\n            system.writeFile(path, data);\n        },\n        getModifiedTime(fileName) {\n            return system.getModifiedTime(fileName);\n        },\n        setModifiedTime(fileName, date) {\n            system.setModifiedTime(fileName, date);\n        },\n        deleteFile(fileName) {\n            system.deleteFile(fileName);\n        },\n        getParsedCommandLine(fileName) {\n            return typescript.getParsedCommandLineOfConfigFile(fileName, { skipLibCheck: true }, Object.assign(Object.assign({}, system), { onUnRecoverableConfigFileDiagnostic: (diagnostic) => {\n                    if (reportDiagnostic) {\n                        reportDiagnostic(diagnostic);\n                    }\n                } }));\n        } });\n    hostExtensions.forEach((hostExtension) => {\n        if (hostExtension.extendWatchSolutionBuilderHost) {\n            controlledWatchSolutionBuilderHost = hostExtension.extendWatchSolutionBuilderHost(controlledWatchSolutionBuilderHost, parsedCommandLine);\n        }\n    });\n    return controlledWatchSolutionBuilderHost;\n}\nexports.createControlledWatchSolutionBuilderHost = createControlledWatchSolutionBuilderHost;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,6BAA6B,GAAGC,OAAO,CAAC,+BAAD,CAA7C;;AACA,SAASC,wCAAT,CAAkDC,UAAlD,EAA8DC,iBAA9D,EAAiFC,MAAjF,EAAyFC,aAAzF,EAAwGC,gBAAxG,EAA0HC,iBAA1H,EAA6IC,2BAA7I,EAA0KC,kBAA1K,EAA8LC,8BAA9L,EAAmP;EAAA,IAArBC,cAAqB,uEAAJ,EAAI;EAC/O,MAAMC,2BAA2B,GAAGb,6BAA6B,CAACc,iCAA9B,CAAgEX,UAAhE,EAA4EC,iBAA5E,EAA+FC,MAA/F,EAAuGC,aAAvG,EAAsHC,gBAAtH,EAAwIC,iBAAxI,EAA2JE,kBAA3J,EAA+KE,cAA/K,CAApC;EACA,IAAIG,kCAAkC,GAAGnB,MAAM,CAACoB,MAAP,CAAcpB,MAAM,CAACoB,MAAP,CAAc,EAAd,EAAkBH,2BAAlB,CAAd,EAA8D;IAAEN,gBAAgB,CAACU,UAAD,EAAa;MAC9H,IAAIV,gBAAJ,EAAsB;QAClBA,gBAAgB,CAACU,UAAD,CAAhB;MACH;IACJ,CAJkG;;IAKnGR,2BAA2B,CAACQ,UAAD,EAAa;MACpC,IAAIR,2BAAJ,EAAiC;QAC7BA,2BAA2B,CAACQ,UAAD,CAA3B;MACH;IACJ,CATkG;;IAUnGN,8BAA8B,CAACO,OAAD,EAAU;MACpC,IAAIP,8BAAJ,EAAoC;QAChCA,8BAA8B,CAACO,OAAD,CAA9B;MACH;IACJ,CAdkG;;IAenGC,eAAe,CAACC,IAAD,EAAO;MAClBf,MAAM,CAACc,eAAP,CAAuBC,IAAvB;IACH,CAjBkG;;IAkBnGC,SAAS,CAACD,IAAD,EAAOE,IAAP,EAAa;MAClBjB,MAAM,CAACgB,SAAP,CAAiBD,IAAjB,EAAuBE,IAAvB;IACH,CApBkG;;IAqBnGC,eAAe,CAACC,QAAD,EAAW;MACtB,OAAOnB,MAAM,CAACkB,eAAP,CAAuBC,QAAvB,CAAP;IACH,CAvBkG;;IAwBnGC,eAAe,CAACD,QAAD,EAAWE,IAAX,EAAiB;MAC5BrB,MAAM,CAACoB,eAAP,CAAuBD,QAAvB,EAAiCE,IAAjC;IACH,CA1BkG;;IA2BnGC,UAAU,CAACH,QAAD,EAAW;MACjBnB,MAAM,CAACsB,UAAP,CAAkBH,QAAlB;IACH,CA7BkG;;IA8BnGI,oBAAoB,CAACJ,QAAD,EAAW;MAC3B,OAAOrB,UAAU,CAAC0B,gCAAX,CAA4CL,QAA5C,EAAsD;QAAEM,YAAY,EAAE;MAAhB,CAAtD,EAA8ElC,MAAM,CAACoB,MAAP,CAAcpB,MAAM,CAACoB,MAAP,CAAc,EAAd,EAAkBX,MAAlB,CAAd,EAAyC;QAAE0B,mCAAmC,EAAGd,UAAD,IAAgB;UAC7K,IAAIV,gBAAJ,EAAsB;YAClBA,gBAAgB,CAACU,UAAD,CAAhB;UACH;QACJ;MAJyH,CAAzC,CAA9E,CAAP;IAKH;;EApCkG,CAA9D,CAAzC;EAqCAL,cAAc,CAACoB,OAAf,CAAwBC,aAAD,IAAmB;IACtC,IAAIA,aAAa,CAACC,8BAAlB,EAAkD;MAC9CnB,kCAAkC,GAAGkB,aAAa,CAACC,8BAAd,CAA6CnB,kCAA7C,EAAiFX,iBAAjF,CAArC;IACH;EACJ,CAJD;EAKA,OAAOW,kCAAP;AACH;;AACDjB,OAAO,CAACI,wCAAR,GAAmDA,wCAAnD"},"metadata":{},"sourceType":"script"}