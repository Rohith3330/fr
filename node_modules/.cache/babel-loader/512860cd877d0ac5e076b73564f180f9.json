{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsIntegralNumber = require('./IsIntegralNumber');\n\nvar StringToCodePoints = require('./StringToCodePoints');\n\nvar Type = require('./Type');\n\nvar $indexOf = callBound('String.prototype.indexOf'); // https://ecma-international.org/ecma-262/13.0/#sec-getstringindex\n\nmodule.exports = function GetStringIndex(S, e) {\n  if (Type(S) !== 'String') {\n    throw new $TypeError('Assertion failed: `S` must be a String');\n  }\n\n  if (!IsIntegralNumber(e) || e < 0) {\n    throw new $TypeError('Assertion failed: `e` must be a non-negative integer');\n  }\n\n  if (S === '') {\n    return 0;\n  }\n\n  var codepoints = StringToCodePoints(S);\n  var eUTF = e >= codepoints.length ? S.length : $indexOf(S, codepoints[e]);\n  return eUTF;\n};","map":{"version":3,"names":["GetIntrinsic","require","callBound","$TypeError","IsIntegralNumber","StringToCodePoints","Type","$indexOf","module","exports","GetStringIndex","S","e","codepoints","eUTF","length"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2022/GetStringIndex.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsIntegralNumber = require('./IsIntegralNumber');\nvar StringToCodePoints = require('./StringToCodePoints');\nvar Type = require('./Type');\n\nvar $indexOf = callBound('String.prototype.indexOf');\n\n// https://ecma-international.org/ecma-262/13.0/#sec-getstringindex\n\nmodule.exports = function GetStringIndex(S, e) {\n\tif (Type(S) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `S` must be a String');\n\t}\n\tif (!IsIntegralNumber(e) || e < 0) {\n\t\tthrow new $TypeError('Assertion failed: `e` must be a non-negative integer');\n\t}\n\n\tif (S === '') {\n\t\treturn 0;\n\t}\n\tvar codepoints = StringToCodePoints(S);\n\tvar eUTF = e >= codepoints.length ? S.length : $indexOf(S, codepoints[e]);\n\treturn eUTF;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIE,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAII,gBAAgB,GAAGH,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAII,kBAAkB,GAAGJ,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIM,QAAQ,GAAGL,SAAS,CAAC,0BAAD,CAAxB,C,CAEA;;AAEAM,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;EAC9C,IAAIN,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,MAAM,IAAIR,UAAJ,CAAe,wCAAf,CAAN;EACA;;EACD,IAAI,CAACC,gBAAgB,CAACQ,CAAD,CAAjB,IAAwBA,CAAC,GAAG,CAAhC,EAAmC;IAClC,MAAM,IAAIT,UAAJ,CAAe,sDAAf,CAAN;EACA;;EAED,IAAIQ,CAAC,KAAK,EAAV,EAAc;IACb,OAAO,CAAP;EACA;;EACD,IAAIE,UAAU,GAAGR,kBAAkB,CAACM,CAAD,CAAnC;EACA,IAAIG,IAAI,GAAGF,CAAC,IAAIC,UAAU,CAACE,MAAhB,GAAyBJ,CAAC,CAACI,MAA3B,GAAoCR,QAAQ,CAACI,CAAD,EAAIE,UAAU,CAACD,CAAD,CAAd,CAAvD;EACA,OAAOE,IAAP;AACA,CAdD"},"metadata":{},"sourceType":"script"}