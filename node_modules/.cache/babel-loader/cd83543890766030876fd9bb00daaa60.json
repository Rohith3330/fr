{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isUnsafeAssignment = void 0;\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst tsutils_1 = require(\"tsutils\");\n\nconst predicates_1 = require(\"./predicates\");\n/**\n * Does a simple check to see if there is an any being assigned to a non-any type.\n *\n * This also checks generic positions to ensure there's no unsafe sub-assignments.\n * Note: in the case of generic positions, it makes the assumption that the two types are the same.\n *\n * @example See tests for examples\n *\n * @returns false if it's safe, or an object with the two types if it's unsafe\n */\n\n\nfunction isUnsafeAssignment(type, receiver, checker, senderNode) {\n  var _a, _b;\n\n  if ((0, predicates_1.isTypeAnyType)(type)) {\n    // Allow assignment of any ==> unknown.\n    if ((0, predicates_1.isTypeUnknownType)(receiver)) {\n      return false;\n    }\n\n    if (!(0, predicates_1.isTypeAnyType)(receiver)) {\n      return {\n        sender: type,\n        receiver\n      };\n    }\n  }\n\n  if ((0, tsutils_1.isTypeReference)(type) && (0, tsutils_1.isTypeReference)(receiver)) {\n    // TODO - figure out how to handle cases like this,\n    // where the types are assignable, but not the same type\n\n    /*\n    function foo(): ReadonlySet<number> { return new Set<any>(); }\n         // and\n         type Test<T> = { prop: T }\n    type Test2 = { prop: string }\n    declare const a: Test<any>;\n    const b: Test2 = a;\n    */\n    if (type.target !== receiver.target) {\n      // if the type references are different, assume safe, as we won't know how to compare the two types\n      // the generic positions might not be equivalent for both types\n      return false;\n    }\n\n    if ((senderNode === null || senderNode === void 0 ? void 0 : senderNode.type) === utils_1.AST_NODE_TYPES.NewExpression && senderNode.callee.type === utils_1.AST_NODE_TYPES.Identifier && senderNode.callee.name === 'Map' && senderNode.arguments.length === 0 && senderNode.typeParameters == null) {\n      // special case to handle `new Map()`\n      // unfortunately Map's default empty constructor is typed to return `Map<any, any>` :(\n      // https://github.com/typescript-eslint/typescript-eslint/issues/2109#issuecomment-634144396\n      return false;\n    }\n\n    const typeArguments = (_a = type.typeArguments) !== null && _a !== void 0 ? _a : [];\n    const receiverTypeArguments = (_b = receiver.typeArguments) !== null && _b !== void 0 ? _b : [];\n\n    for (let i = 0; i < typeArguments.length; i += 1) {\n      const arg = typeArguments[i];\n      const receiverArg = receiverTypeArguments[i];\n      const unsafe = isUnsafeAssignment(arg, receiverArg, checker, senderNode);\n\n      if (unsafe) {\n        return {\n          sender: type,\n          receiver\n        };\n      }\n    }\n\n    return false;\n  }\n\n  return false;\n}\n\nexports.isUnsafeAssignment = isUnsafeAssignment;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAGA;AAEA;;;;;;;;;;;;AAUA,SAAgBA,kBAAhB,CACEC,IADF,EAEEC,QAFF,EAGEC,OAHF,EAIEC,UAJF,EAIkC;;;EAEhC,IAAI,gCAAcH,IAAd,CAAJ,EAAyB;IACvB;IACA,IAAI,oCAAkBC,QAAlB,CAAJ,EAAiC;MAC/B,OAAO,KAAP;IACD;;IAED,IAAI,CAAC,gCAAcA,QAAd,CAAL,EAA8B;MAC5B,OAAO;QAAEG,MAAM,EAAEJ,IAAV;QAAgBC;MAAhB,CAAP;IACD;EACF;;EAED,IAAI,+BAAgBD,IAAhB,KAAyB,+BAAgBC,QAAhB,CAA7B,EAAwD;IACtD;IACA;;IACA;;;;;;;;IAWA,IAAID,IAAI,CAACK,MAAL,KAAgBJ,QAAQ,CAACI,MAA7B,EAAqC;MACnC;MACA;MACA,OAAO,KAAP;IACD;;IAED,IACE,WAAU,SAAV,cAAU,WAAV,GAAU,MAAV,aAAU,CAAEL,IAAZ,MAAqBM,uBAAeC,aAApC,IACAJ,UAAU,CAACK,MAAX,CAAkBR,IAAlB,KAA2BM,uBAAeG,UAD1C,IAEAN,UAAU,CAACK,MAAX,CAAkBE,IAAlB,KAA2B,KAF3B,IAGAP,UAAU,CAACQ,SAAX,CAAqBC,MAArB,KAAgC,CAHhC,IAIAT,UAAU,CAACU,cAAX,IAA6B,IAL/B,EAME;MACA;MACA;MACA;MACA,OAAO,KAAP;IACD;;IAED,MAAMC,aAAa,GAAG,UAAI,CAACA,aAAL,MAAkB,IAAlB,IAAkBC,aAAlB,GAAkBA,EAAlB,GAAsB,EAA5C;IACA,MAAMC,qBAAqB,GAAG,cAAQ,CAACF,aAAT,MAAsB,IAAtB,IAAsBG,aAAtB,GAAsBA,EAAtB,GAA0B,EAAxD;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,aAAa,CAACF,MAAlC,EAA0CM,CAAC,IAAI,CAA/C,EAAkD;MAChD,MAAMC,GAAG,GAAGL,aAAa,CAACI,CAAD,CAAzB;MACA,MAAME,WAAW,GAAGJ,qBAAqB,CAACE,CAAD,CAAzC;MAEA,MAAMG,MAAM,GAAGtB,kBAAkB,CAACoB,GAAD,EAAMC,WAAN,EAAmBlB,OAAnB,EAA4BC,UAA5B,CAAjC;;MACA,IAAIkB,MAAJ,EAAY;QACV,OAAO;UAAEjB,MAAM,EAAEJ,IAAV;UAAgBC;QAAhB,CAAP;MACD;IACF;;IAED,OAAO,KAAP;EACD;;EAED,OAAO,KAAP;AACD;;AAnEDqB","names":["isUnsafeAssignment","type","receiver","checker","senderNode","sender","target","utils_1","NewExpression","callee","Identifier","name","arguments","length","typeParameters","typeArguments","_a","receiverTypeArguments","_b","i","arg","receiverArg","unsafe","exports"],"sources":["../src/isUnsafeAssignment.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}