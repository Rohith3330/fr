{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isParenthesized = exports.hasSideEffect = exports.getStringIfConstant = exports.getStaticValue = exports.getPropertyName = exports.getFunctionNameWithKind = exports.getFunctionHeadLocation = void 0;\n\nconst eslintUtils = __importStar(require(\"eslint-utils\"));\n/**\n * Get the proper location of a given function node to report.\n *\n * @see {@link https://eslint-utils.mysticatea.dev/api/ast-utils.html#getfunctionheadlocation}\n */\n\n\nconst getFunctionHeadLocation = eslintUtils.getFunctionHeadLocation;\nexports.getFunctionHeadLocation = getFunctionHeadLocation;\n/**\n * Get the name and kind of a given function node.\n *\n * @see {@link https://eslint-utils.mysticatea.dev/api/ast-utils.html#getfunctionnamewithkind}\n */\n\nconst getFunctionNameWithKind = eslintUtils.getFunctionNameWithKind;\nexports.getFunctionNameWithKind = getFunctionNameWithKind;\n/**\n * Get the property name of a given property node.\n * If the node is a computed property, this tries to compute the property name by the getStringIfConstant function.\n *\n * @see {@link https://eslint-utils.mysticatea.dev/api/ast-utils.html#getpropertyname}\n * @returns The property name of the node. If the property name is not constant then it returns `null`.\n */\n\nconst getPropertyName = eslintUtils.getPropertyName;\nexports.getPropertyName = getPropertyName;\n/**\n * Get the value of a given node if it can decide the value statically.\n * If the 2nd parameter `initialScope` was given, this function tries to resolve identifier references which are in the\n * given node as much as possible. In the resolving way, it does on the assumption that built-in global objects have\n * not been modified.\n * For example, it considers `Symbol.iterator`, ` String.raw``hello`` `, and `Object.freeze({a: 1}).a` as static.\n *\n * @see {@link https://eslint-utils.mysticatea.dev/api/ast-utils.html#getstaticvalue}\n * @returns The `{ value: any }` shaped object. The `value` property is the static value. If it couldn't compute the\n * static value of the node, it returns `null`.\n */\n\nconst getStaticValue = eslintUtils.getStaticValue;\nexports.getStaticValue = getStaticValue;\n/**\n * Get the string value of a given node.\n * This function is a tiny wrapper of the getStaticValue function.\n *\n * @see {@link https://eslint-utils.mysticatea.dev/api/ast-utils.html#getstringifconstant}\n */\n\nconst getStringIfConstant = eslintUtils.getStringIfConstant;\nexports.getStringIfConstant = getStringIfConstant;\n/**\n * Check whether a given node has any side effect or not.\n * The side effect means that it may modify a certain variable or object member. This function considers the node which\n * contains the following types as the node which has side effects:\n * - `AssignmentExpression`\n * - `AwaitExpression`\n * - `CallExpression`\n * - `ImportExpression`\n * - `NewExpression`\n * - `UnaryExpression([operator = \"delete\"])`\n * - `UpdateExpression`\n * - `YieldExpression`\n * - When `options.considerGetters` is `true`:\n *   - `MemberExpression`\n * - When `options.considerImplicitTypeConversion` is `true`:\n *   - `BinaryExpression([operator = \"==\" | \"!=\" | \"<\" | \"<=\" | \">\" | \">=\" | \"<<\" | \">>\" | \">>>\" | \"+\" | \"-\" | \"*\" | \"/\" | \"%\" | \"|\" | \"^\" | \"&\" | \"in\"])`\n *   - `MemberExpression([computed = true])`\n *   - `MethodDefinition([computed = true])`\n *   - `Property([computed = true])`\n *   - `UnaryExpression([operator = \"-\" | \"+\" | \"!\" | \"~\"])`\n *\n * @see {@link https://eslint-utils.mysticatea.dev/api/ast-utils.html#hassideeffect}\n */\n\nconst hasSideEffect = eslintUtils.hasSideEffect;\nexports.hasSideEffect = hasSideEffect;\nconst isParenthesized = eslintUtils.isParenthesized;\nexports.isParenthesized = isParenthesized;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAKA;;;;;;;AAKA,MAAMA,uBAAuB,GAAGC,WAAW,CAACD,uBAA5C;AAmHEE;AA3GF;;;;;;AAKA,MAAMC,uBAAuB,GAAGF,WAAW,CAACE,uBAA5C;AAuGED;AA/FF;;;;;;;;AAOA,MAAME,eAAe,GAAGH,WAAW,CAACG,eAApC;AAyFEF;AAhFF;;;;;;;;;;;;AAWA,MAAMG,cAAc,GAAGJ,WAAW,CAACI,cAAnC;AAsEEH;AAjEF;;;;;;;AAMA,MAAMI,mBAAmB,GAAGL,WAAW,CAACK,mBAAxC;AA4DEJ;AAvDF;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,MAAMK,aAAa,GAAGN,WAAW,CAACM,aAAlC;AAiCEL;AAxBF,MAAMM,eAAe,GAAGP,WAAW,CAACO,eAApC;AAyBEN","names":["getFunctionHeadLocation","eslintUtils","exports","getFunctionNameWithKind","getPropertyName","getStaticValue","getStringIfConstant","hasSideEffect","isParenthesized"],"sources":["../../../src/ast-utils/eslint-utils/astUtilities.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}