{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stats = void 0;\n\nvar constants_1 = require(\"./constants\");\n\nvar getBigInt_1 = require(\"./getBigInt\");\n\nvar S_IFMT = constants_1.constants.S_IFMT,\n    S_IFDIR = constants_1.constants.S_IFDIR,\n    S_IFREG = constants_1.constants.S_IFREG,\n    S_IFBLK = constants_1.constants.S_IFBLK,\n    S_IFCHR = constants_1.constants.S_IFCHR,\n    S_IFLNK = constants_1.constants.S_IFLNK,\n    S_IFIFO = constants_1.constants.S_IFIFO,\n    S_IFSOCK = constants_1.constants.S_IFSOCK;\n/**\n * Statistics about a file/directory, like `fs.Stats`.\n */\n\nvar Stats =\n/** @class */\nfunction () {\n  function Stats() {}\n\n  Stats.build = function (node, bigint) {\n    if (bigint === void 0) {\n      bigint = false;\n    }\n\n    var stats = new Stats();\n    var uid = node.uid,\n        gid = node.gid,\n        atime = node.atime,\n        mtime = node.mtime,\n        ctime = node.ctime;\n    var getStatNumber = !bigint ? function (number) {\n      return number;\n    } : getBigInt_1.default; // Copy all values on Stats from Node, so that if Node values\n    // change, values on Stats would still be the old ones,\n    // just like in Node fs.\n\n    stats.uid = getStatNumber(uid);\n    stats.gid = getStatNumber(gid);\n    stats.rdev = getStatNumber(0);\n    stats.blksize = getStatNumber(4096);\n    stats.ino = getStatNumber(node.ino);\n    stats.size = getStatNumber(node.getSize());\n    stats.blocks = getStatNumber(1);\n    stats.atime = atime;\n    stats.mtime = mtime;\n    stats.ctime = ctime;\n    stats.birthtime = ctime;\n    stats.atimeMs = getStatNumber(atime.getTime());\n    stats.mtimeMs = getStatNumber(mtime.getTime());\n    var ctimeMs = getStatNumber(ctime.getTime());\n    stats.ctimeMs = ctimeMs;\n    stats.birthtimeMs = ctimeMs;\n    stats.dev = getStatNumber(0);\n    stats.mode = getStatNumber(node.mode);\n    stats.nlink = getStatNumber(node.nlink);\n    return stats;\n  };\n\n  Stats.prototype._checkModeProperty = function (property) {\n    return (Number(this.mode) & S_IFMT) === property;\n  };\n\n  Stats.prototype.isDirectory = function () {\n    return this._checkModeProperty(S_IFDIR);\n  };\n\n  Stats.prototype.isFile = function () {\n    return this._checkModeProperty(S_IFREG);\n  };\n\n  Stats.prototype.isBlockDevice = function () {\n    return this._checkModeProperty(S_IFBLK);\n  };\n\n  Stats.prototype.isCharacterDevice = function () {\n    return this._checkModeProperty(S_IFCHR);\n  };\n\n  Stats.prototype.isSymbolicLink = function () {\n    return this._checkModeProperty(S_IFLNK);\n  };\n\n  Stats.prototype.isFIFO = function () {\n    return this._checkModeProperty(S_IFIFO);\n  };\n\n  Stats.prototype.isSocket = function () {\n    return this._checkModeProperty(S_IFSOCK);\n  };\n\n  return Stats;\n}();\n\nexports.Stats = Stats;\nexports.default = Stats;","map":{"version":3,"names":["Object","defineProperty","exports","value","Stats","constants_1","require","getBigInt_1","S_IFMT","constants","S_IFDIR","S_IFREG","S_IFBLK","S_IFCHR","S_IFLNK","S_IFIFO","S_IFSOCK","build","node","bigint","stats","uid","gid","atime","mtime","ctime","getStatNumber","number","default","rdev","blksize","ino","size","getSize","blocks","birthtime","atimeMs","getTime","mtimeMs","ctimeMs","birthtimeMs","dev","mode","nlink","prototype","_checkModeProperty","property","Number","isDirectory","isFile","isBlockDevice","isCharacterDevice","isSymbolicLink","isFIFO","isSocket"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/memfs/lib/Stats.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Stats = void 0;\nvar constants_1 = require(\"./constants\");\nvar getBigInt_1 = require(\"./getBigInt\");\nvar S_IFMT = constants_1.constants.S_IFMT, S_IFDIR = constants_1.constants.S_IFDIR, S_IFREG = constants_1.constants.S_IFREG, S_IFBLK = constants_1.constants.S_IFBLK, S_IFCHR = constants_1.constants.S_IFCHR, S_IFLNK = constants_1.constants.S_IFLNK, S_IFIFO = constants_1.constants.S_IFIFO, S_IFSOCK = constants_1.constants.S_IFSOCK;\n/**\n * Statistics about a file/directory, like `fs.Stats`.\n */\nvar Stats = /** @class */ (function () {\n    function Stats() {\n    }\n    Stats.build = function (node, bigint) {\n        if (bigint === void 0) { bigint = false; }\n        var stats = new Stats();\n        var uid = node.uid, gid = node.gid, atime = node.atime, mtime = node.mtime, ctime = node.ctime;\n        var getStatNumber = !bigint ? function (number) { return number; } : getBigInt_1.default;\n        // Copy all values on Stats from Node, so that if Node values\n        // change, values on Stats would still be the old ones,\n        // just like in Node fs.\n        stats.uid = getStatNumber(uid);\n        stats.gid = getStatNumber(gid);\n        stats.rdev = getStatNumber(0);\n        stats.blksize = getStatNumber(4096);\n        stats.ino = getStatNumber(node.ino);\n        stats.size = getStatNumber(node.getSize());\n        stats.blocks = getStatNumber(1);\n        stats.atime = atime;\n        stats.mtime = mtime;\n        stats.ctime = ctime;\n        stats.birthtime = ctime;\n        stats.atimeMs = getStatNumber(atime.getTime());\n        stats.mtimeMs = getStatNumber(mtime.getTime());\n        var ctimeMs = getStatNumber(ctime.getTime());\n        stats.ctimeMs = ctimeMs;\n        stats.birthtimeMs = ctimeMs;\n        stats.dev = getStatNumber(0);\n        stats.mode = getStatNumber(node.mode);\n        stats.nlink = getStatNumber(node.nlink);\n        return stats;\n    };\n    Stats.prototype._checkModeProperty = function (property) {\n        return (Number(this.mode) & S_IFMT) === property;\n    };\n    Stats.prototype.isDirectory = function () {\n        return this._checkModeProperty(S_IFDIR);\n    };\n    Stats.prototype.isFile = function () {\n        return this._checkModeProperty(S_IFREG);\n    };\n    Stats.prototype.isBlockDevice = function () {\n        return this._checkModeProperty(S_IFBLK);\n    };\n    Stats.prototype.isCharacterDevice = function () {\n        return this._checkModeProperty(S_IFCHR);\n    };\n    Stats.prototype.isSymbolicLink = function () {\n        return this._checkModeProperty(S_IFLNK);\n    };\n    Stats.prototype.isFIFO = function () {\n        return this._checkModeProperty(S_IFIFO);\n    };\n    Stats.prototype.isSocket = function () {\n        return this._checkModeProperty(S_IFSOCK);\n    };\n    return Stats;\n}());\nexports.Stats = Stats;\nexports.default = Stats;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}