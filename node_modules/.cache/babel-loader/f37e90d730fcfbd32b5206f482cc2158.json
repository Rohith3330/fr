{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBinaryOperatorPrecedence = exports.getOperatorPrecedence = exports.OperatorPrecedence = void 0;\n\nconst typescript_1 = require(\"typescript\");\n\nvar OperatorPrecedence;\n\n(function (OperatorPrecedence) {\n  // Expression:\n  //     AssignmentExpression\n  //     Expression `,` AssignmentExpression\n  OperatorPrecedence[OperatorPrecedence[\"Comma\"] = 0] = \"Comma\"; // NOTE: `Spread` is higher than `Comma` due to how it is parsed in |ElementList|\n  // SpreadElement:\n  //     `...` AssignmentExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"Spread\"] = 1] = \"Spread\"; // AssignmentExpression:\n  //     ConditionalExpression\n  //     YieldExpression\n  //     ArrowFunction\n  //     AsyncArrowFunction\n  //     LeftHandSideExpression `=` AssignmentExpression\n  //     LeftHandSideExpression AssignmentOperator AssignmentExpression\n  //\n  // NOTE: AssignmentExpression is broken down into several precedences due to the requirements\n  //       of the parenthesize rules.\n  // AssignmentExpression: YieldExpression\n  // YieldExpression:\n  //     `yield`\n  //     `yield` AssignmentExpression\n  //     `yield` `*` AssignmentExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"Yield\"] = 2] = \"Yield\"; // AssignmentExpression: LeftHandSideExpression `=` AssignmentExpression\n  // AssignmentExpression: LeftHandSideExpression AssignmentOperator AssignmentExpression\n  // AssignmentOperator: one of\n  //     `*=` `/=` `%=` `+=` `-=` `<<=` `>>=` `>>>=` `&=` `^=` `|=` `**=`\n\n  OperatorPrecedence[OperatorPrecedence[\"Assignment\"] = 3] = \"Assignment\"; // NOTE: `Conditional` is considered higher than `Assignment` here, but in reality they have\n  //       the same precedence.\n  // AssignmentExpression: ConditionalExpression\n  // ConditionalExpression:\n  //     ShortCircuitExpression\n  //     ShortCircuitExpression `?` AssignmentExpression `:` AssignmentExpression\n  // ShortCircuitExpression:\n  //     LogicalORExpression\n  //     CoalesceExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"Conditional\"] = 4] = \"Conditional\"; // CoalesceExpression:\n  //     CoalesceExpressionHead `??` BitwiseORExpression\n  // CoalesceExpressionHead:\n  //     CoalesceExpression\n  //     BitwiseORExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"Coalesce\"] = 4] = \"Coalesce\"; // LogicalORExpression:\n  //     LogicalANDExpression\n  //     LogicalORExpression `||` LogicalANDExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"LogicalOR\"] = 5] = \"LogicalOR\"; // LogicalANDExpression:\n  //     BitwiseORExpression\n  //     LogicalANDExpression `&&` BitwiseORExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"LogicalAND\"] = 6] = \"LogicalAND\"; // BitwiseORExpression:\n  //     BitwiseXORExpression\n  //     BitwiseORExpression `^` BitwiseXORExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"BitwiseOR\"] = 7] = \"BitwiseOR\"; // BitwiseXORExpression:\n  //     BitwiseANDExpression\n  //     BitwiseXORExpression `^` BitwiseANDExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"BitwiseXOR\"] = 8] = \"BitwiseXOR\"; // BitwiseANDExpression:\n  //     EqualityExpression\n  //     BitwiseANDExpression `^` EqualityExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"BitwiseAND\"] = 9] = \"BitwiseAND\"; // EqualityExpression:\n  //     RelationalExpression\n  //     EqualityExpression `==` RelationalExpression\n  //     EqualityExpression `!=` RelationalExpression\n  //     EqualityExpression `===` RelationalExpression\n  //     EqualityExpression `!==` RelationalExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"Equality\"] = 10] = \"Equality\"; // RelationalExpression:\n  //     ShiftExpression\n  //     RelationalExpression `<` ShiftExpression\n  //     RelationalExpression `>` ShiftExpression\n  //     RelationalExpression `<=` ShiftExpression\n  //     RelationalExpression `>=` ShiftExpression\n  //     RelationalExpression `instanceof` ShiftExpression\n  //     RelationalExpression `in` ShiftExpression\n  //     [+TypeScript] RelationalExpression `as` Type\n\n  OperatorPrecedence[OperatorPrecedence[\"Relational\"] = 11] = \"Relational\"; // ShiftExpression:\n  //     AdditiveExpression\n  //     ShiftExpression `<<` AdditiveExpression\n  //     ShiftExpression `>>` AdditiveExpression\n  //     ShiftExpression `>>>` AdditiveExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"Shift\"] = 12] = \"Shift\"; // AdditiveExpression:\n  //     MultiplicativeExpression\n  //     AdditiveExpression `+` MultiplicativeExpression\n  //     AdditiveExpression `-` MultiplicativeExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"Additive\"] = 13] = \"Additive\"; // MultiplicativeExpression:\n  //     ExponentiationExpression\n  //     MultiplicativeExpression MultiplicativeOperator ExponentiationExpression\n  // MultiplicativeOperator: one of `*`, `/`, `%`\n\n  OperatorPrecedence[OperatorPrecedence[\"Multiplicative\"] = 14] = \"Multiplicative\"; // ExponentiationExpression:\n  //     UnaryExpression\n  //     UpdateExpression `**` ExponentiationExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"Exponentiation\"] = 15] = \"Exponentiation\"; // UnaryExpression:\n  //     UpdateExpression\n  //     `delete` UnaryExpression\n  //     `void` UnaryExpression\n  //     `typeof` UnaryExpression\n  //     `+` UnaryExpression\n  //     `-` UnaryExpression\n  //     `~` UnaryExpression\n  //     `!` UnaryExpression\n  //     AwaitExpression\n  // UpdateExpression:            // TODO: Do we need to investigate the precedence here?\n  //     `++` UnaryExpression\n  //     `--` UnaryExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"Unary\"] = 16] = \"Unary\"; // UpdateExpression:\n  //     LeftHandSideExpression\n  //     LeftHandSideExpression `++`\n  //     LeftHandSideExpression `--`\n\n  OperatorPrecedence[OperatorPrecedence[\"Update\"] = 17] = \"Update\"; // LeftHandSideExpression:\n  //     NewExpression\n  //     CallExpression\n  // NewExpression:\n  //     MemberExpression\n  //     `new` NewExpression\n\n  OperatorPrecedence[OperatorPrecedence[\"LeftHandSide\"] = 18] = \"LeftHandSide\"; // CallExpression:\n  //     CoverCallExpressionAndAsyncArrowHead\n  //     SuperCall\n  //     ImportCall\n  //     CallExpression Arguments\n  //     CallExpression `[` Expression `]`\n  //     CallExpression `.` IdentifierName\n  //     CallExpression TemplateLiteral\n  // MemberExpression:\n  //     PrimaryExpression\n  //     MemberExpression `[` Expression `]`\n  //     MemberExpression `.` IdentifierName\n  //     MemberExpression TemplateLiteral\n  //     SuperProperty\n  //     MetaProperty\n  //     `new` MemberExpression Arguments\n\n  OperatorPrecedence[OperatorPrecedence[\"Member\"] = 19] = \"Member\"; // TODO: JSXElement?\n  // PrimaryExpression:\n  //     `this`\n  //     IdentifierReference\n  //     Literal\n  //     ArrayLiteral\n  //     ObjectLiteral\n  //     FunctionExpression\n  //     ClassExpression\n  //     GeneratorExpression\n  //     AsyncFunctionExpression\n  //     AsyncGeneratorExpression\n  //     RegularExpressionLiteral\n  //     TemplateLiteral\n  //     CoverParenthesizedExpressionAndArrowParameterList\n\n  OperatorPrecedence[OperatorPrecedence[\"Primary\"] = 20] = \"Primary\";\n  OperatorPrecedence[OperatorPrecedence[\"Highest\"] = 20] = \"Highest\";\n  OperatorPrecedence[OperatorPrecedence[\"Lowest\"] = 0] = \"Lowest\"; // -1 is lower than all other precedences. Returning it will cause binary expression\n  // parsing to stop.\n\n  OperatorPrecedence[OperatorPrecedence[\"Invalid\"] = -1] = \"Invalid\";\n})(OperatorPrecedence = exports.OperatorPrecedence || (exports.OperatorPrecedence = {}));\n\nfunction getOperatorPrecedence(nodeKind, operatorKind, hasArguments) {\n  switch (nodeKind) {\n    case typescript_1.SyntaxKind.CommaListExpression:\n      return OperatorPrecedence.Comma;\n\n    case typescript_1.SyntaxKind.SpreadElement:\n      return OperatorPrecedence.Spread;\n\n    case typescript_1.SyntaxKind.YieldExpression:\n      return OperatorPrecedence.Yield;\n\n    case typescript_1.SyntaxKind.ConditionalExpression:\n      return OperatorPrecedence.Conditional;\n\n    case typescript_1.SyntaxKind.BinaryExpression:\n      switch (operatorKind) {\n        case typescript_1.SyntaxKind.CommaToken:\n          return OperatorPrecedence.Comma;\n\n        case typescript_1.SyntaxKind.EqualsToken:\n        case typescript_1.SyntaxKind.PlusEqualsToken:\n        case typescript_1.SyntaxKind.MinusEqualsToken:\n        case typescript_1.SyntaxKind.AsteriskAsteriskEqualsToken:\n        case typescript_1.SyntaxKind.AsteriskEqualsToken:\n        case typescript_1.SyntaxKind.SlashEqualsToken:\n        case typescript_1.SyntaxKind.PercentEqualsToken:\n        case typescript_1.SyntaxKind.LessThanLessThanEqualsToken:\n        case typescript_1.SyntaxKind.GreaterThanGreaterThanEqualsToken:\n        case typescript_1.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:\n        case typescript_1.SyntaxKind.AmpersandEqualsToken:\n        case typescript_1.SyntaxKind.CaretEqualsToken:\n        case typescript_1.SyntaxKind.BarEqualsToken:\n        case typescript_1.SyntaxKind.BarBarEqualsToken:\n        case typescript_1.SyntaxKind.AmpersandAmpersandEqualsToken:\n        case typescript_1.SyntaxKind.QuestionQuestionEqualsToken:\n          return OperatorPrecedence.Assignment;\n\n        default:\n          return getBinaryOperatorPrecedence(operatorKind);\n      }\n\n    // TODO: Should prefix `++` and `--` be moved to the `Update` precedence?\n\n    case typescript_1.SyntaxKind.TypeAssertionExpression:\n    case typescript_1.SyntaxKind.NonNullExpression:\n    case typescript_1.SyntaxKind.PrefixUnaryExpression:\n    case typescript_1.SyntaxKind.TypeOfExpression:\n    case typescript_1.SyntaxKind.VoidExpression:\n    case typescript_1.SyntaxKind.DeleteExpression:\n    case typescript_1.SyntaxKind.AwaitExpression:\n      return OperatorPrecedence.Unary;\n\n    case typescript_1.SyntaxKind.PostfixUnaryExpression:\n      return OperatorPrecedence.Update;\n\n    case typescript_1.SyntaxKind.CallExpression:\n      return OperatorPrecedence.LeftHandSide;\n\n    case typescript_1.SyntaxKind.NewExpression:\n      return hasArguments ? OperatorPrecedence.Member : OperatorPrecedence.LeftHandSide;\n\n    case typescript_1.SyntaxKind.TaggedTemplateExpression:\n    case typescript_1.SyntaxKind.PropertyAccessExpression:\n    case typescript_1.SyntaxKind.ElementAccessExpression:\n    case typescript_1.SyntaxKind.MetaProperty:\n      return OperatorPrecedence.Member;\n\n    case typescript_1.SyntaxKind.AsExpression:\n      return OperatorPrecedence.Relational;\n\n    case typescript_1.SyntaxKind.ThisKeyword:\n    case typescript_1.SyntaxKind.SuperKeyword:\n    case typescript_1.SyntaxKind.Identifier:\n    case typescript_1.SyntaxKind.PrivateIdentifier:\n    case typescript_1.SyntaxKind.NullKeyword:\n    case typescript_1.SyntaxKind.TrueKeyword:\n    case typescript_1.SyntaxKind.FalseKeyword:\n    case typescript_1.SyntaxKind.NumericLiteral:\n    case typescript_1.SyntaxKind.BigIntLiteral:\n    case typescript_1.SyntaxKind.StringLiteral:\n    case typescript_1.SyntaxKind.ArrayLiteralExpression:\n    case typescript_1.SyntaxKind.ObjectLiteralExpression:\n    case typescript_1.SyntaxKind.FunctionExpression:\n    case typescript_1.SyntaxKind.ArrowFunction:\n    case typescript_1.SyntaxKind.ClassExpression:\n    case typescript_1.SyntaxKind.RegularExpressionLiteral:\n    case typescript_1.SyntaxKind.NoSubstitutionTemplateLiteral:\n    case typescript_1.SyntaxKind.TemplateExpression:\n    case typescript_1.SyntaxKind.ParenthesizedExpression:\n    case typescript_1.SyntaxKind.OmittedExpression:\n    case typescript_1.SyntaxKind.JsxElement:\n    case typescript_1.SyntaxKind.JsxSelfClosingElement:\n    case typescript_1.SyntaxKind.JsxFragment:\n      return OperatorPrecedence.Primary;\n\n    default:\n      return OperatorPrecedence.Invalid;\n  }\n}\n\nexports.getOperatorPrecedence = getOperatorPrecedence;\n\nfunction getBinaryOperatorPrecedence(kind) {\n  switch (kind) {\n    case typescript_1.SyntaxKind.QuestionQuestionToken:\n      return OperatorPrecedence.Coalesce;\n\n    case typescript_1.SyntaxKind.BarBarToken:\n      return OperatorPrecedence.LogicalOR;\n\n    case typescript_1.SyntaxKind.AmpersandAmpersandToken:\n      return OperatorPrecedence.LogicalAND;\n\n    case typescript_1.SyntaxKind.BarToken:\n      return OperatorPrecedence.BitwiseOR;\n\n    case typescript_1.SyntaxKind.CaretToken:\n      return OperatorPrecedence.BitwiseXOR;\n\n    case typescript_1.SyntaxKind.AmpersandToken:\n      return OperatorPrecedence.BitwiseAND;\n\n    case typescript_1.SyntaxKind.EqualsEqualsToken:\n    case typescript_1.SyntaxKind.ExclamationEqualsToken:\n    case typescript_1.SyntaxKind.EqualsEqualsEqualsToken:\n    case typescript_1.SyntaxKind.ExclamationEqualsEqualsToken:\n      return OperatorPrecedence.Equality;\n\n    case typescript_1.SyntaxKind.LessThanToken:\n    case typescript_1.SyntaxKind.GreaterThanToken:\n    case typescript_1.SyntaxKind.LessThanEqualsToken:\n    case typescript_1.SyntaxKind.GreaterThanEqualsToken:\n    case typescript_1.SyntaxKind.InstanceOfKeyword:\n    case typescript_1.SyntaxKind.InKeyword:\n    case typescript_1.SyntaxKind.AsKeyword:\n      return OperatorPrecedence.Relational;\n\n    case typescript_1.SyntaxKind.LessThanLessThanToken:\n    case typescript_1.SyntaxKind.GreaterThanGreaterThanToken:\n    case typescript_1.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\n      return OperatorPrecedence.Shift;\n\n    case typescript_1.SyntaxKind.PlusToken:\n    case typescript_1.SyntaxKind.MinusToken:\n      return OperatorPrecedence.Additive;\n\n    case typescript_1.SyntaxKind.AsteriskToken:\n    case typescript_1.SyntaxKind.SlashToken:\n    case typescript_1.SyntaxKind.PercentToken:\n      return OperatorPrecedence.Multiplicative;\n\n    case typescript_1.SyntaxKind.AsteriskAsteriskToken:\n      return OperatorPrecedence.Exponentiation;\n  } // -1 is lower than all other precedences.  Returning it will cause binary expression\n  // parsing to stop.\n\n\n  return -1;\n}\n\nexports.getBinaryOperatorPrecedence = getBinaryOperatorPrecedence;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA,IAAYA,kBAAZ;;AAAA,WAAYA,kBAAZ,EAA8B;EAC5B;EACA;EACA;EACAA,8DAJ4B,CAM5B;EACA;EACA;;EACAA,gEAT4B,CAW5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;;EACAA,8DA3B4B,CA6B5B;EACA;EACA;EACA;;EACAA,wEAjC4B,CAmC5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACAA,0EA5C4B,CA8C5B;EACA;EACA;EACA;EACA;;EACAA,oEAnD4B,CAqD5B;EACA;EACA;;EACAA,sEAxD4B,CA0D5B;EACA;EACA;;EACAA,wEA7D4B,CA+D5B;EACA;EACA;;EACAA,sEAlE4B,CAoE5B;EACA;EACA;;EACAA,wEAvE4B,CAyE5B;EACA;EACA;;EACAA,wEA5E4B,CA8E5B;EACA;EACA;EACA;EACA;EACA;;EACAA,qEApF4B,CAsF5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACAA,yEA/F4B,CAiG5B;EACA;EACA;EACA;EACA;;EACAA,+DAtG4B,CAwG5B;EACA;EACA;EACA;;EACAA,qEA5G4B,CA8G5B;EACA;EACA;EACA;;EACAA,iFAlH4B,CAoH5B;EACA;EACA;;EACAA,iFAvH4B,CAyH5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACAA,+DAtI4B,CAwI5B;EACA;EACA;EACA;;EACAA,iEA5I4B,CA8I5B;EACA;EACA;EACA;EACA;EACA;;EACAA,6EApJ4B,CAsJ5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACAA,iEAtK4B,CAwK5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACAA;EAEAA;EACAA,gEA1L4B,CA2L5B;EACA;;EACAA;AACD,CA9LD,EAAYA,kBAAkB,GAAlBC,4DAAkB,EAAlB,CAAZ;;AA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","names":["OperatorPrecedence","exports","getOperatorPrecedence","nodeKind","operatorKind","hasArguments","typescript_1","CommaListExpression","Comma","SpreadElement","Spread","YieldExpression","Yield","ConditionalExpression","Conditional","BinaryExpression","CommaToken","EqualsToken","PlusEqualsToken","MinusEqualsToken","AsteriskAsteriskEqualsToken","AsteriskEqualsToken","SlashEqualsToken","PercentEqualsToken","LessThanLessThanEqualsToken","GreaterThanGreaterThanEqualsToken","GreaterThanGreaterThanGreaterThanEqualsToken","AmpersandEqualsToken","CaretEqualsToken","BarEqualsToken","BarBarEqualsToken","AmpersandAmpersandEqualsToken","QuestionQuestionEqualsToken","Assignment","getBinaryOperatorPrecedence","TypeAssertionExpression","NonNullExpression","PrefixUnaryExpression","TypeOfExpression","VoidExpression","DeleteExpression","AwaitExpression","Unary","PostfixUnaryExpression","Update","CallExpression","LeftHandSide","NewExpression","Member","TaggedTemplateExpression","PropertyAccessExpression","ElementAccessExpression","MetaProperty","AsExpression","Relational","ThisKeyword","SuperKeyword","Identifier","PrivateIdentifier","NullKeyword","TrueKeyword","FalseKeyword","NumericLiteral","BigIntLiteral","StringLiteral","ArrayLiteralExpression","ObjectLiteralExpression","FunctionExpression","ArrowFunction","ClassExpression","RegularExpressionLiteral","NoSubstitutionTemplateLiteral","TemplateExpression","ParenthesizedExpression","OmittedExpression","JsxElement","JsxSelfClosingElement","JsxFragment","Primary","Invalid","kind","QuestionQuestionToken","Coalesce","BarBarToken","LogicalOR","AmpersandAmpersandToken","LogicalAND","BarToken","BitwiseOR","CaretToken","BitwiseXOR","AmpersandToken","BitwiseAND","EqualsEqualsToken","ExclamationEqualsToken","EqualsEqualsEqualsToken","ExclamationEqualsEqualsToken","Equality","LessThanToken","GreaterThanToken","LessThanEqualsToken","GreaterThanEqualsToken","InstanceOfKeyword","InKeyword","AsKeyword","LessThanLessThanToken","GreaterThanGreaterThanToken","GreaterThanGreaterThanGreaterThanToken","Shift","PlusToken","MinusToken","Additive","AsteriskToken","SlashToken","PercentToken","Multiplicative","AsteriskAsteriskToken","Exponentiation"],"sources":["../../src/util/getOperatorPrecedence.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}