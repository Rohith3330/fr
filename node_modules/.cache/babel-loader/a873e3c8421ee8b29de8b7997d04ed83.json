{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nconst addJSXAttribute = (_ref, opts) => {\n  let {\n    types: t,\n    template\n  } = _ref;\n\n  function getAttributeValue(value, literal) {\n    if (typeof value === 'string' && literal) {\n      return t.jsxExpressionContainer(template.ast(value).expression);\n    }\n\n    if (typeof value === 'string') {\n      return t.stringLiteral(value);\n    }\n\n    if (typeof value === 'boolean') {\n      return t.jsxExpressionContainer(t.booleanLiteral(value));\n    }\n\n    if (typeof value === 'number') {\n      return t.jsxExpressionContainer(t.numericLiteral(value));\n    }\n\n    return null;\n  }\n\n  return {\n    visitor: {\n      JSXAttribute(path) {\n        const valuePath = path.get('value');\n        if (!valuePath.isStringLiteral()) return;\n        opts.values.forEach(_ref2 => {\n          let {\n            value,\n            newValue,\n            literal\n          } = _ref2;\n          if (!valuePath.isStringLiteral({\n            value\n          })) return;\n          valuePath.replaceWith(getAttributeValue(newValue, literal));\n        });\n      }\n\n    }\n  };\n};\n\nvar _default = addJSXAttribute;\nexports.default = _default;","map":{"version":3,"names":["exports","__esModule","default","addJSXAttribute","opts","types","t","template","getAttributeValue","value","literal","jsxExpressionContainer","ast","expression","stringLiteral","booleanLiteral","numericLiteral","visitor","JSXAttribute","path","valuePath","get","isStringLiteral","values","forEach","newValue","replaceWith","_default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@svgr/babel-plugin-replace-jsx-attribute-value/lib/index.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nconst addJSXAttribute = ({\n  types: t,\n  template\n}, opts) => {\n  function getAttributeValue(value, literal) {\n    if (typeof value === 'string' && literal) {\n      return t.jsxExpressionContainer(template.ast(value).expression);\n    }\n\n    if (typeof value === 'string') {\n      return t.stringLiteral(value);\n    }\n\n    if (typeof value === 'boolean') {\n      return t.jsxExpressionContainer(t.booleanLiteral(value));\n    }\n\n    if (typeof value === 'number') {\n      return t.jsxExpressionContainer(t.numericLiteral(value));\n    }\n\n    return null;\n  }\n\n  return {\n    visitor: {\n      JSXAttribute(path) {\n        const valuePath = path.get('value');\n        if (!valuePath.isStringLiteral()) return;\n        opts.values.forEach(({\n          value,\n          newValue,\n          literal\n        }) => {\n          if (!valuePath.isStringLiteral({\n            value\n          })) return;\n          valuePath.replaceWith(getAttributeValue(newValue, literal));\n        });\n      }\n\n    }\n  };\n};\n\nvar _default = addJSXAttribute;\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,MAAMC,eAAe,GAAG,OAGrBC,IAHqB,KAGZ;EAAA,IAHa;IACvBC,KAAK,EAAEC,CADgB;IAEvBC;EAFuB,CAGb;;EACV,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,OAAlC,EAA2C;IACzC,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6BC,OAAjC,EAA0C;MACxC,OAAOJ,CAAC,CAACK,sBAAF,CAAyBJ,QAAQ,CAACK,GAAT,CAAaH,KAAb,EAAoBI,UAA7C,CAAP;IACD;;IAED,IAAI,OAAOJ,KAAP,KAAiB,QAArB,EAA+B;MAC7B,OAAOH,CAAC,CAACQ,aAAF,CAAgBL,KAAhB,CAAP;IACD;;IAED,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;MAC9B,OAAOH,CAAC,CAACK,sBAAF,CAAyBL,CAAC,CAACS,cAAF,CAAiBN,KAAjB,CAAzB,CAAP;IACD;;IAED,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,OAAOH,CAAC,CAACK,sBAAF,CAAyBL,CAAC,CAACU,cAAF,CAAiBP,KAAjB,CAAzB,CAAP;IACD;;IAED,OAAO,IAAP;EACD;;EAED,OAAO;IACLQ,OAAO,EAAE;MACPC,YAAY,CAACC,IAAD,EAAO;QACjB,MAAMC,SAAS,GAAGD,IAAI,CAACE,GAAL,CAAS,OAAT,CAAlB;QACA,IAAI,CAACD,SAAS,CAACE,eAAV,EAAL,EAAkC;QAClClB,IAAI,CAACmB,MAAL,CAAYC,OAAZ,CAAoB,SAId;UAAA,IAJe;YACnBf,KADmB;YAEnBgB,QAFmB;YAGnBf;UAHmB,CAIf;UACJ,IAAI,CAACU,SAAS,CAACE,eAAV,CAA0B;YAC7Bb;UAD6B,CAA1B,CAAL,EAEI;UACJW,SAAS,CAACM,WAAV,CAAsBlB,iBAAiB,CAACiB,QAAD,EAAWf,OAAX,CAAvC;QACD,CATD;MAUD;;IAdM;EADJ,CAAP;AAmBD,CA3CD;;AA6CA,IAAIiB,QAAQ,GAAGxB,eAAf;AACAH,OAAO,CAACE,OAAR,GAAkByB,QAAlB"},"metadata":{},"sourceType":"script"}