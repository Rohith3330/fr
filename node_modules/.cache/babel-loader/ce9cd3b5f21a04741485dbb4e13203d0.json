{"ast":null,"code":"import { splitAtTopLevelOnly } from './splitAtTopLevelOnly';\nlet KEYWORDS = new Set(['inset', 'inherit', 'initial', 'revert', 'unset']);\nlet SPACE = /\\ +(?![^(]*\\))/g; // Similar to the one above, but with spaces instead.\n\nlet LENGTH = /^-?(\\d+|\\.\\d+)(.*?)$/g;\nexport function parseBoxShadowValue(input) {\n  let shadows = Array.from(splitAtTopLevelOnly(input, ','));\n  return shadows.map(shadow => {\n    let value = shadow.trim();\n    let result = {\n      raw: value\n    };\n    let parts = value.split(SPACE);\n    let seen = new Set();\n\n    for (let part of parts) {\n      // Reset index, since the regex is stateful.\n      LENGTH.lastIndex = 0; // Keyword\n\n      if (!seen.has('KEYWORD') && KEYWORDS.has(part)) {\n        result.keyword = part;\n        seen.add('KEYWORD');\n      } // Length value\n      else if (LENGTH.test(part)) {\n        if (!seen.has('X')) {\n          result.x = part;\n          seen.add('X');\n        } else if (!seen.has('Y')) {\n          result.y = part;\n          seen.add('Y');\n        } else if (!seen.has('BLUR')) {\n          result.blur = part;\n          seen.add('BLUR');\n        } else if (!seen.has('SPREAD')) {\n          result.spread = part;\n          seen.add('SPREAD');\n        }\n      } // Color or unknown\n      else {\n        if (!result.color) {\n          result.color = part;\n        } else {\n          if (!result.unknown) result.unknown = [];\n          result.unknown.push(part);\n        }\n      }\n    } // Check if valid\n\n\n    result.valid = result.x !== undefined && result.y !== undefined;\n    return result;\n  });\n}\nexport function formatBoxShadowValue(shadows) {\n  return shadows.map(shadow => {\n    if (!shadow.valid) {\n      return shadow.raw;\n    }\n\n    return [shadow.keyword, shadow.x, shadow.y, shadow.blur, shadow.spread, shadow.color].filter(Boolean).join(' ');\n  }).join(', ');\n}","map":{"version":3,"names":["splitAtTopLevelOnly","KEYWORDS","Set","SPACE","LENGTH","parseBoxShadowValue","input","shadows","Array","from","map","shadow","value","trim","result","raw","parts","split","seen","part","lastIndex","has","keyword","add","test","x","y","blur","spread","color","unknown","push","valid","undefined","formatBoxShadowValue","filter","Boolean","join"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/util/parseBoxShadowValue.js"],"sourcesContent":["import { splitAtTopLevelOnly } from './splitAtTopLevelOnly'\n\nlet KEYWORDS = new Set(['inset', 'inherit', 'initial', 'revert', 'unset'])\nlet SPACE = /\\ +(?![^(]*\\))/g // Similar to the one above, but with spaces instead.\nlet LENGTH = /^-?(\\d+|\\.\\d+)(.*?)$/g\n\nexport function parseBoxShadowValue(input) {\n  let shadows = Array.from(splitAtTopLevelOnly(input, ','))\n  return shadows.map((shadow) => {\n    let value = shadow.trim()\n    let result = { raw: value }\n    let parts = value.split(SPACE)\n    let seen = new Set()\n\n    for (let part of parts) {\n      // Reset index, since the regex is stateful.\n      LENGTH.lastIndex = 0\n\n      // Keyword\n      if (!seen.has('KEYWORD') && KEYWORDS.has(part)) {\n        result.keyword = part\n        seen.add('KEYWORD')\n      }\n\n      // Length value\n      else if (LENGTH.test(part)) {\n        if (!seen.has('X')) {\n          result.x = part\n          seen.add('X')\n        } else if (!seen.has('Y')) {\n          result.y = part\n          seen.add('Y')\n        } else if (!seen.has('BLUR')) {\n          result.blur = part\n          seen.add('BLUR')\n        } else if (!seen.has('SPREAD')) {\n          result.spread = part\n          seen.add('SPREAD')\n        }\n      }\n\n      // Color or unknown\n      else {\n        if (!result.color) {\n          result.color = part\n        } else {\n          if (!result.unknown) result.unknown = []\n          result.unknown.push(part)\n        }\n      }\n    }\n\n    // Check if valid\n    result.valid = result.x !== undefined && result.y !== undefined\n\n    return result\n  })\n}\n\nexport function formatBoxShadowValue(shadows) {\n  return shadows\n    .map((shadow) => {\n      if (!shadow.valid) {\n        return shadow.raw\n      }\n\n      return [shadow.keyword, shadow.x, shadow.y, shadow.blur, shadow.spread, shadow.color]\n        .filter(Boolean)\n        .join(' ')\n    })\n    .join(', ')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}