{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFirstSemanticOrSyntacticError = void 0;\n\nconst typescript_1 = require(\"typescript\");\n/**\n * By default, diagnostics from the TypeScript compiler contain all errors - regardless of whether\n * they are related to generic ECMAScript standards, or TypeScript-specific constructs.\n *\n * Therefore, we filter out all diagnostics, except for the ones we explicitly want to consider when\n * the user opts in to throwing errors on semantic issues.\n */\n\n\nfunction getFirstSemanticOrSyntacticError(program, ast) {\n  try {\n    const supportedSyntacticDiagnostics = whitelistSupportedDiagnostics(program.getSyntacticDiagnostics(ast));\n\n    if (supportedSyntacticDiagnostics.length) {\n      return convertDiagnosticToSemanticOrSyntacticError(supportedSyntacticDiagnostics[0]);\n    }\n\n    const supportedSemanticDiagnostics = whitelistSupportedDiagnostics(program.getSemanticDiagnostics(ast));\n\n    if (supportedSemanticDiagnostics.length) {\n      return convertDiagnosticToSemanticOrSyntacticError(supportedSemanticDiagnostics[0]);\n    }\n\n    return undefined;\n  } catch (e) {\n    /**\n     * TypeScript compiler has certain Debug.fail() statements in, which will cause the diagnostics\n     * retrieval above to throw.\n     *\n     * E.g. from ast-alignment-tests\n     * \"Debug Failure. Shouldn't ever directly check a JsxOpeningElement\"\n     *\n     * For our current use-cases this is undesired behavior, so we just suppress it\n     * and log a a warning.\n     */\n\n    /* istanbul ignore next */\n    console.warn(`Warning From TSC: \"${e.message}`); // eslint-disable-line no-console\n\n    /* istanbul ignore next */\n\n    return undefined;\n  }\n}\n\nexports.getFirstSemanticOrSyntacticError = getFirstSemanticOrSyntacticError;\n\nfunction whitelistSupportedDiagnostics(diagnostics) {\n  return diagnostics.filter(diagnostic => {\n    switch (diagnostic.code) {\n      case 1013: // \"A rest parameter or binding pattern may not have a trailing comma.\"\n\n      case 1014: // \"A rest parameter must be last in a parameter list.\"\n\n      case 1044: // \"'{0}' modifier cannot appear on a module or namespace element.\"\n\n      case 1045: // \"A '{0}' modifier cannot be used with an interface declaration.\"\n\n      case 1048: // \"A rest parameter cannot have an initializer.\"\n\n      case 1049: // \"A 'set' accessor must have exactly one parameter.\"\n\n      case 1070: // \"'{0}' modifier cannot appear on a type member.\"\n\n      case 1071: // \"'{0}' modifier cannot appear on an index signature.\"\n\n      case 1085: // \"Octal literals are not available when targeting ECMAScript 5 and higher. Use the syntax '{0}'.\"\n\n      case 1090: // \"'{0}' modifier cannot appear on a parameter.\"\n\n      case 1096: // \"An index signature must have exactly one parameter.\"\n\n      case 1097: // \"'{0}' list cannot be empty.\"\n\n      case 1098: // \"Type parameter list cannot be empty.\"\n\n      case 1099: // \"Type argument list cannot be empty.\"\n\n      case 1117: // \"An object literal cannot have multiple properties with the same name in strict mode.\"\n\n      case 1121: // \"Octal literals are not allowed in strict mode.\"\n\n      case 1123: //  \"Variable declaration list cannot be empty.\"\n\n      case 1141: // \"String literal expected.\"\n\n      case 1162: // \"An object member cannot be declared optional.\"\n\n      case 1164: // \"Computed property names are not allowed in enums.\"\n\n      case 1172: // \"'extends' clause already seen.\"\n\n      case 1173: // \"'extends' clause must precede 'implements' clause.\"\n\n      case 1175: // \"'implements' clause already seen.\"\n\n      case 1176: // \"Interface declaration cannot have 'implements' clause.\"\n\n      case 1190: // \"The variable declaration of a 'for...of' statement cannot have an initializer.\"\n\n      case 1196: // \"Catch clause variable type annotation must be 'any' or 'unknown' if specified.\"\n\n      case 1200: // \"Line terminator not permitted before arrow.\"\n\n      case 1206: // \"Decorators are not valid here.\"\n\n      case 1211: // \"A class declaration without the 'default' modifier must have a name.\"\n\n      case 1242: // \"'abstract' modifier can only appear on a class, method, or property declaration.\"\n\n      case 1246: // \"An interface property cannot have an initializer.\"\n\n      case 1255: // \"A definite assignment assertion '!' is not permitted in this context.\"\n\n      case 1308: // \"'await' expression is only allowed within an async function.\"\n\n      case 2364: // \"The left-hand side of an assignment expression must be a variable or a property access.\"\n\n      case 2369: // \"A parameter property is only allowed in a constructor implementation.\"\n\n      case 2452: // \"An enum member cannot have a numeric name.\"\n\n      case 2462: // \"A rest element must be last in a destructuring pattern.\"\n\n      case 8017: // \"Octal literal types must use ES2015 syntax. Use the syntax '{0}'.\"\n\n      case 17012: // \"'{0}' is not a valid meta-property for keyword '{1}'. Did you mean '{2}'?\"\n\n      case 17013:\n        // \"Meta-property '{0}' is only allowed in the body of a function declaration, function expression, or constructor.\"\n        return true;\n    }\n\n    return false;\n  });\n}\n\nfunction convertDiagnosticToSemanticOrSyntacticError(diagnostic) {\n  return Object.assign(Object.assign({}, diagnostic), {\n    message: (0, typescript_1.flattenDiagnosticMessageText)(diagnostic.messageText, typescript_1.sys.newLine)\n  });\n}","map":{"version":3,"mappings":";;;;;;;AAMA;AAMA;;;;;;;;;AAOA,SAAgBA,gCAAhB,CACEC,OADF,EAEEC,GAFF,EAEiB;EAEf,IAAI;IACF,MAAMC,6BAA6B,GAAGC,6BAA6B,CACjEH,OAAO,CAACI,uBAAR,CAAgCH,GAAhC,CADiE,CAAnE;;IAGA,IAAIC,6BAA6B,CAACG,MAAlC,EAA0C;MACxC,OAAOC,2CAA2C,CAChDJ,6BAA6B,CAAC,CAAD,CADmB,CAAlD;IAGD;;IACD,MAAMK,4BAA4B,GAAGJ,6BAA6B,CAChEH,OAAO,CAACQ,sBAAR,CAA+BP,GAA/B,CADgE,CAAlE;;IAGA,IAAIM,4BAA4B,CAACF,MAAjC,EAAyC;MACvC,OAAOC,2CAA2C,CAChDC,4BAA4B,CAAC,CAAD,CADoB,CAAlD;IAGD;;IACD,OAAOE,SAAP;EACD,CAlBD,CAkBE,OAAOC,CAAP,EAAU;IACV;;;;;;;;;;;IAUA;IACAC,OAAO,CAACC,IAAR,CAAa,sBAAuBF,CAAW,CAACG,OAAO,EAAvD,EAZU,CAYkD;;IAC5D;;IACA,OAAOJ,SAAP;EACD;AACF;;AAtCDK;;AAwCA,SAASX,6BAAT,CACEY,WADF,EAC+D;EAE7D,OAAOA,WAAW,CAACC,MAAZ,CAAmBC,UAAU,IAAG;IACrC,QAAQA,UAAU,CAACC,IAAnB;MACE,KAAK,IAAL,CADF,CACa;;MACX,KAAK,IAAL,CAFF,CAEa;;MACX,KAAK,IAAL,CAHF,CAGa;;MACX,KAAK,IAAL,CAJF,CAIa;;MACX,KAAK,IAAL,CALF,CAKa;;MACX,KAAK,IAAL,CANF,CAMa;;MACX,KAAK,IAAL,CAPF,CAOa;;MACX,KAAK,IAAL,CARF,CAQa;;MACX,KAAK,IAAL,CATF,CASa;;MACX,KAAK,IAAL,CAVF,CAUa;;MACX,KAAK,IAAL,CAXF,CAWa;;MACX,KAAK,IAAL,CAZF,CAYa;;MACX,KAAK,IAAL,CAbF,CAaa;;MACX,KAAK,IAAL,CAdF,CAca;;MACX,KAAK,IAAL,CAfF,CAea;;MACX,KAAK,IAAL,CAhBF,CAgBa;;MACX,KAAK,IAAL,CAjBF,CAiBa;;MACX,KAAK,IAAL,CAlBF,CAkBa;;MACX,KAAK,IAAL,CAnBF,CAmBa;;MACX,KAAK,IAAL,CApBF,CAoBa;;MACX,KAAK,IAAL,CArBF,CAqBa;;MACX,KAAK,IAAL,CAtBF,CAsBa;;MACX,KAAK,IAAL,CAvBF,CAuBa;;MACX,KAAK,IAAL,CAxBF,CAwBa;;MACX,KAAK,IAAL,CAzBF,CAyBa;;MACX,KAAK,IAAL,CA1BF,CA0Ba;;MACX,KAAK,IAAL,CA3BF,CA2Ba;;MACX,KAAK,IAAL,CA5BF,CA4Ba;;MACX,KAAK,IAAL,CA7BF,CA6Ba;;MACX,KAAK,IAAL,CA9BF,CA8Ba;;MACX,KAAK,IAAL,CA/BF,CA+Ba;;MACX,KAAK,IAAL,CAhCF,CAgCa;;MACX,KAAK,IAAL,CAjCF,CAiCa;;MACX,KAAK,IAAL,CAlCF,CAkCa;;MACX,KAAK,IAAL,CAnCF,CAmCa;;MACX,KAAK,IAAL,CApCF,CAoCa;;MACX,KAAK,IAAL,CArCF,CAqCa;;MACX,KAAK,IAAL,CAtCF,CAsCa;;MACX,KAAK,KAAL,CAvCF,CAuCc;;MACZ,KAAK,KAAL;QAAY;QACV,OAAO,IAAP;IAzCJ;;IA2CA,OAAO,KAAP;EACD,CA7CM,CAAP;AA8CD;;AAED,SAASZ,2CAAT,CACEW,UADF,EACwB;EAEtB,uCACKA,UADL,GACe;IACbJ,OAAO,EAAE,+CAA6BI,UAAU,CAACE,WAAxC,EAAqDC,iBAAIC,OAAzD;EADI,CADf;AAID","names":["getFirstSemanticOrSyntacticError","program","ast","supportedSyntacticDiagnostics","whitelistSupportedDiagnostics","getSyntacticDiagnostics","length","convertDiagnosticToSemanticOrSyntacticError","supportedSemanticDiagnostics","getSemanticDiagnostics","undefined","e","console","warn","message","exports","diagnostics","filter","diagnostic","code","messageText","typescript_1","newLine"],"sources":["../src/semantic-or-syntactic-errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}