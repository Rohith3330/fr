{"ast":null,"code":"'use strict';\n\nconst {\n  unit\n} = require('postcss-value-parser');\n/**\n * @param {string} value\n * @return {boolean}\n */\n\n\nfunction hasUnit(value) {\n  const parsedVal = unit(value);\n  return parsedVal && parsedVal.unit !== '';\n}\n/**\n * @param {import('postcss-value-parser').ParsedValue} columns\n * @return {import('postcss-value-parser').ParsedValue | string}\n */\n\n\nmodule.exports = columns => {\n  /** @type {string[]} */\n  const widths = [];\n  /** @type {string[]} */\n\n  const other = [];\n  columns.walk(node => {\n    const {\n      type,\n      value\n    } = node;\n\n    if (type === 'word') {\n      if (hasUnit(value)) {\n        widths.push(value);\n      } else {\n        other.push(value);\n      }\n    }\n  }); // only transform if declaration is not invalid or a single value\n\n  if (other.length === 1 && widths.length === 1) {\n    return `${widths[0].trimStart()} ${other[0].trimStart()}`;\n  }\n\n  return columns;\n};","map":{"version":3,"names":["unit","require","hasUnit","value","parsedVal","module","exports","columns","widths","other","walk","node","type","push","length","trimStart"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-ordered-values/src/rules/columns.js"],"sourcesContent":["'use strict';\nconst { unit } = require('postcss-value-parser');\n\n/**\n * @param {string} value\n * @return {boolean}\n */\nfunction hasUnit(value) {\n  const parsedVal = unit(value);\n  return parsedVal && parsedVal.unit !== '';\n}\n\n/**\n * @param {import('postcss-value-parser').ParsedValue} columns\n * @return {import('postcss-value-parser').ParsedValue | string}\n */\nmodule.exports = (columns) => {\n  /** @type {string[]} */\n  const widths = [];\n  /** @type {string[]} */\n  const other = [];\n  columns.walk((node) => {\n    const { type, value } = node;\n    if (type === 'word') {\n      if (hasUnit(value)) {\n        widths.push(value);\n      } else {\n        other.push(value);\n      }\n    }\n  });\n\n  // only transform if declaration is not invalid or a single value\n  if (other.length === 1 && widths.length === 1) {\n    return `${widths[0].trimStart()} ${other[0].trimStart()}`;\n  }\n\n  return columns;\n};\n"],"mappings":"AAAA;;AACA,MAAM;EAAEA;AAAF,IAAWC,OAAO,CAAC,sBAAD,CAAxB;AAEA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;EACtB,MAAMC,SAAS,GAAGJ,IAAI,CAACG,KAAD,CAAtB;EACA,OAAOC,SAAS,IAAIA,SAAS,CAACJ,IAAV,KAAmB,EAAvC;AACD;AAED;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;EAC5B;EACA,MAAMC,MAAM,GAAG,EAAf;EACA;;EACA,MAAMC,KAAK,GAAG,EAAd;EACAF,OAAO,CAACG,IAAR,CAAcC,IAAD,IAAU;IACrB,MAAM;MAAEC,IAAF;MAAQT;IAAR,IAAkBQ,IAAxB;;IACA,IAAIC,IAAI,KAAK,MAAb,EAAqB;MACnB,IAAIV,OAAO,CAACC,KAAD,CAAX,EAAoB;QAClBK,MAAM,CAACK,IAAP,CAAYV,KAAZ;MACD,CAFD,MAEO;QACLM,KAAK,CAACI,IAAN,CAAWV,KAAX;MACD;IACF;EACF,CATD,EAL4B,CAgB5B;;EACA,IAAIM,KAAK,CAACK,MAAN,KAAiB,CAAjB,IAAsBN,MAAM,CAACM,MAAP,KAAkB,CAA5C,EAA+C;IAC7C,OAAQ,GAAEN,MAAM,CAAC,CAAD,CAAN,CAAUO,SAAV,EAAsB,IAAGN,KAAK,CAAC,CAAD,CAAL,CAASM,SAAT,EAAqB,EAAxD;EACD;;EAED,OAAOR,OAAP;AACD,CAtBD"},"metadata":{},"sourceType":"script"}