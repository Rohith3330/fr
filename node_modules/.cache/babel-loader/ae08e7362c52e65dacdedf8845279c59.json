{"ast":null,"code":"import * as definitions from \"../../lib/definitions/index.js\";\n\nfunction addAssertHelper(type) {\n  const result = definitions.NODE_FIELDS[type] || definitions.FLIPPED_ALIAS_KEYS[type] ? `node is t.${type}` : \"boolean\";\n  return `export function assert${type}(node: object | null | undefined, opts?: object | null): asserts ${result === \"boolean\" ? \"node\" : result} {\n    assert(\"${type}\", node, opts) }\n  `;\n}\n\nexport default function generateAsserts() {\n  let output = `/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport is from \"../../validators/is\";\nimport type * as t from \"../..\";\n\nfunction assert(type: string, node: any, opts?: any): void {\n  if (!is(type, node, opts)) {\n    throw new Error(\n      \\`Expected type \"\\${type}\" with option \\${JSON.stringify(opts)}, \\` +\n        \\`but instead got \"\\${node.type}\".\\`,\n    );\n  }\n}\\n\\n`;\n  Object.keys(definitions.VISITOR_KEYS).forEach(type => {\n    output += addAssertHelper(type);\n  });\n  Object.keys(definitions.FLIPPED_ALIAS_KEYS).forEach(type => {\n    output += addAssertHelper(type);\n  });\n  Object.keys(definitions.DEPRECATED_KEYS).forEach(type => {\n    const newType = definitions.DEPRECATED_KEYS[type];\n    output += `export function assert${type}(node: any, opts: any): void {\n  console.trace(\"The node type ${type} has been renamed to ${newType}\");\n  assert(\"${type}\", node, opts);\n}\\n`;\n  });\n  return output;\n}","map":{"version":3,"names":["definitions","addAssertHelper","type","result","NODE_FIELDS","FLIPPED_ALIAS_KEYS","generateAsserts","output","Object","keys","VISITOR_KEYS","forEach","DEPRECATED_KEYS","newType"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@babel/types/scripts/generators/asserts.js"],"sourcesContent":["import * as definitions from \"../../lib/definitions/index.js\";\n\nfunction addAssertHelper(type) {\n  const result =\n    definitions.NODE_FIELDS[type] || definitions.FLIPPED_ALIAS_KEYS[type]\n      ? `node is t.${type}`\n      : \"boolean\";\n\n  return `export function assert${type}(node: object | null | undefined, opts?: object | null): asserts ${\n    result === \"boolean\" ? \"node\" : result\n  } {\n    assert(\"${type}\", node, opts) }\n  `;\n}\n\nexport default function generateAsserts() {\n  let output = `/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport is from \"../../validators/is\";\nimport type * as t from \"../..\";\n\nfunction assert(type: string, node: any, opts?: any): void {\n  if (!is(type, node, opts)) {\n    throw new Error(\n      \\`Expected type \"\\${type}\" with option \\${JSON.stringify(opts)}, \\` +\n        \\`but instead got \"\\${node.type}\".\\`,\n    );\n  }\n}\\n\\n`;\n\n  Object.keys(definitions.VISITOR_KEYS).forEach(type => {\n    output += addAssertHelper(type);\n  });\n\n  Object.keys(definitions.FLIPPED_ALIAS_KEYS).forEach(type => {\n    output += addAssertHelper(type);\n  });\n\n  Object.keys(definitions.DEPRECATED_KEYS).forEach(type => {\n    const newType = definitions.DEPRECATED_KEYS[type];\n    output += `export function assert${type}(node: any, opts: any): void {\n  console.trace(\"The node type ${type} has been renamed to ${newType}\");\n  assert(\"${type}\", node, opts);\n}\\n`;\n  });\n\n  return output;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,gCAA7B;;AAEA,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;EAC7B,MAAMC,MAAM,GACVH,WAAW,CAACI,WAAZ,CAAwBF,IAAxB,KAAiCF,WAAW,CAACK,kBAAZ,CAA+BH,IAA/B,CAAjC,GACK,aAAYA,IAAK,EADtB,GAEI,SAHN;EAKA,OAAQ,yBAAwBA,IAAK,oEACnCC,MAAM,KAAK,SAAX,GAAuB,MAAvB,GAAgCA,MACjC;AACH,cAAcD,IAAK;AACnB,GAJE;AAKD;;AAED,eAAe,SAASI,eAAT,GAA2B;EACxC,IAAIC,MAAM,GAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAdE;EAgBAC,MAAM,CAACC,IAAP,CAAYT,WAAW,CAACU,YAAxB,EAAsCC,OAAtC,CAA8CT,IAAI,IAAI;IACpDK,MAAM,IAAIN,eAAe,CAACC,IAAD,CAAzB;EACD,CAFD;EAIAM,MAAM,CAACC,IAAP,CAAYT,WAAW,CAACK,kBAAxB,EAA4CM,OAA5C,CAAoDT,IAAI,IAAI;IAC1DK,MAAM,IAAIN,eAAe,CAACC,IAAD,CAAzB;EACD,CAFD;EAIAM,MAAM,CAACC,IAAP,CAAYT,WAAW,CAACY,eAAxB,EAAyCD,OAAzC,CAAiDT,IAAI,IAAI;IACvD,MAAMW,OAAO,GAAGb,WAAW,CAACY,eAAZ,CAA4BV,IAA5B,CAAhB;IACAK,MAAM,IAAK,yBAAwBL,IAAK;AAC5C,iCAAiCA,IAAK,wBAAuBW,OAAQ;AACrE,YAAYX,IAAK;AACjB,IAHI;EAID,CAND;EAQA,OAAOK,MAAP;AACD"},"metadata":{},"sourceType":"module"}