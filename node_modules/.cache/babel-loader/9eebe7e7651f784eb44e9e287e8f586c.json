{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromArrayExpression;\n/**\n * Extractor function for an ArrayExpression type value node.\n * An array expression is an expression with [] syntax.\n *\n * @returns - An array of the extracted elements.\n */\n\nfunction extractValueFromArrayExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n\n  return value.elements.map(function (element) {\n    if (element === null) return undefined;\n    return getValue(element);\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","extractValueFromArrayExpression","getValue","require","elements","map","element","undefined"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/lib/values/expressions/ArrayExpression.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromArrayExpression;\n/**\n * Extractor function for an ArrayExpression type value node.\n * An array expression is an expression with [] syntax.\n *\n * @returns - An array of the extracted elements.\n */\nfunction extractValueFromArrayExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  return value.elements.map(function (element) {\n    if (element === null) return undefined;\n    return getValue(element);\n  });\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,+BAAlB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,+BAAT,CAAyCF,KAAzC,EAAgD;EAC9C;EACA,IAAIG,QAAQ,GAAGC,OAAO,CAAC,GAAD,CAAP,CAAaH,OAA5B;;EACA,OAAOD,KAAK,CAACK,QAAN,CAAeC,GAAf,CAAmB,UAAUC,OAAV,EAAmB;IAC3C,IAAIA,OAAO,KAAK,IAAhB,EAAsB,OAAOC,SAAP;IACtB,OAAOL,QAAQ,CAACI,OAAD,CAAf;EACD,CAHM,CAAP;AAID"},"metadata":{},"sourceType":"script"}