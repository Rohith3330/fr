{"ast":null,"code":"module.exports = function compressFont(node) {\n  var list = node.children;\n  list.eachRight(function (node, item) {\n    if (node.type === 'Identifier') {\n      if (node.name === 'bold') {\n        item.data = {\n          type: 'Number',\n          loc: node.loc,\n          value: '700'\n        };\n      } else if (node.name === 'normal') {\n        var prev = item.prev;\n\n        if (prev && prev.data.type === 'Operator' && prev.data.value === '/') {\n          this.remove(prev);\n        }\n\n        this.remove(item);\n      } else if (node.name === 'medium') {\n        var next = item.next;\n\n        if (!next || next.data.type !== 'Operator') {\n          this.remove(item);\n        }\n      }\n    }\n  }); // remove redundant spaces\n\n  list.each(function (node, item) {\n    if (node.type === 'WhiteSpace') {\n      if (!item.prev || !item.next || item.next.data.type === 'WhiteSpace') {\n        this.remove(item);\n      }\n    }\n  });\n\n  if (list.isEmpty()) {\n    list.insert(list.createItem({\n      type: 'Identifier',\n      name: 'normal'\n    }));\n  }\n};","map":{"version":3,"names":["module","exports","compressFont","node","list","children","eachRight","item","type","name","data","loc","value","prev","remove","next","each","isEmpty","insert","createItem"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/csso/lib/replace/property/font.js"],"sourcesContent":["module.exports = function compressFont(node) {\n    var list = node.children;\n\n    list.eachRight(function(node, item) {\n        if (node.type === 'Identifier') {\n            if (node.name === 'bold') {\n                item.data = {\n                    type: 'Number',\n                    loc: node.loc,\n                    value: '700'\n                };\n            } else if (node.name === 'normal') {\n                var prev = item.prev;\n\n                if (prev && prev.data.type === 'Operator' && prev.data.value === '/') {\n                    this.remove(prev);\n                }\n\n                this.remove(item);\n            } else if (node.name === 'medium') {\n                var next = item.next;\n\n                if (!next || next.data.type !== 'Operator') {\n                    this.remove(item);\n                }\n            }\n        }\n    });\n\n    // remove redundant spaces\n    list.each(function(node, item) {\n        if (node.type === 'WhiteSpace') {\n            if (!item.prev || !item.next || item.next.data.type === 'WhiteSpace') {\n                this.remove(item);\n            }\n        }\n    });\n\n    if (list.isEmpty()) {\n        list.insert(list.createItem({\n            type: 'Identifier',\n            name: 'normal'\n        }));\n    }\n};\n"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;EACzC,IAAIC,IAAI,GAAGD,IAAI,CAACE,QAAhB;EAEAD,IAAI,CAACE,SAAL,CAAe,UAASH,IAAT,EAAeI,IAAf,EAAqB;IAChC,IAAIJ,IAAI,CAACK,IAAL,KAAc,YAAlB,EAAgC;MAC5B,IAAIL,IAAI,CAACM,IAAL,KAAc,MAAlB,EAA0B;QACtBF,IAAI,CAACG,IAAL,GAAY;UACRF,IAAI,EAAE,QADE;UAERG,GAAG,EAAER,IAAI,CAACQ,GAFF;UAGRC,KAAK,EAAE;QAHC,CAAZ;MAKH,CAND,MAMO,IAAIT,IAAI,CAACM,IAAL,KAAc,QAAlB,EAA4B;QAC/B,IAAII,IAAI,GAAGN,IAAI,CAACM,IAAhB;;QAEA,IAAIA,IAAI,IAAIA,IAAI,CAACH,IAAL,CAAUF,IAAV,KAAmB,UAA3B,IAAyCK,IAAI,CAACH,IAAL,CAAUE,KAAV,KAAoB,GAAjE,EAAsE;UAClE,KAAKE,MAAL,CAAYD,IAAZ;QACH;;QAED,KAAKC,MAAL,CAAYP,IAAZ;MACH,CARM,MAQA,IAAIJ,IAAI,CAACM,IAAL,KAAc,QAAlB,EAA4B;QAC/B,IAAIM,IAAI,GAAGR,IAAI,CAACQ,IAAhB;;QAEA,IAAI,CAACA,IAAD,IAASA,IAAI,CAACL,IAAL,CAAUF,IAAV,KAAmB,UAAhC,EAA4C;UACxC,KAAKM,MAAL,CAAYP,IAAZ;QACH;MACJ;IACJ;EACJ,CAxBD,EAHyC,CA6BzC;;EACAH,IAAI,CAACY,IAAL,CAAU,UAASb,IAAT,EAAeI,IAAf,EAAqB;IAC3B,IAAIJ,IAAI,CAACK,IAAL,KAAc,YAAlB,EAAgC;MAC5B,IAAI,CAACD,IAAI,CAACM,IAAN,IAAc,CAACN,IAAI,CAACQ,IAApB,IAA4BR,IAAI,CAACQ,IAAL,CAAUL,IAAV,CAAeF,IAAf,KAAwB,YAAxD,EAAsE;QAClE,KAAKM,MAAL,CAAYP,IAAZ;MACH;IACJ;EACJ,CAND;;EAQA,IAAIH,IAAI,CAACa,OAAL,EAAJ,EAAoB;IAChBb,IAAI,CAACc,MAAL,CAAYd,IAAI,CAACe,UAAL,CAAgB;MACxBX,IAAI,EAAE,YADkB;MAExBC,IAAI,EAAE;IAFkB,CAAhB,CAAZ;EAIH;AACJ,CA5CD"},"metadata":{},"sourceType":"script"}