{"ast":null,"code":"// @remove-on-eject-begin\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict'; // Do this as the first thing so that any code reading it knows the right env.\n\nprocess.env.BABEL_ENV = 'production';\nprocess.env.NODE_ENV = 'production'; // Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\n\nprocess.on('unhandledRejection', err => {\n  throw err;\n}); // Ensure environment variables are read.\n\nrequire('../config/env');\n\nconst path = require('path');\n\nconst chalk = require('react-dev-utils/chalk');\n\nconst fs = require('fs-extra');\n\nconst bfj = require('bfj');\n\nconst webpack = require('webpack');\n\nconst configFactory = require('../config/webpack.config');\n\nconst paths = require('../config/paths');\n\nconst checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');\n\nconst formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');\n\nconst printHostingInstructions = require('react-dev-utils/printHostingInstructions');\n\nconst FileSizeReporter = require('react-dev-utils/FileSizeReporter');\n\nconst printBuildError = require('react-dev-utils/printBuildError');\n\nconst measureFileSizesBeforeBuild = FileSizeReporter.measureFileSizesBeforeBuild;\nconst printFileSizesAfterBuild = FileSizeReporter.printFileSizesAfterBuild;\nconst useYarn = fs.existsSync(paths.yarnLockFile); // These sizes are pretty large. We'll warn for bundles exceeding them.\n\nconst WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;\nconst WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;\nconst isInteractive = process.stdout.isTTY; // Warn and crash if required files are missing\n\nif (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {\n  process.exit(1);\n}\n\nconst argv = process.argv.slice(2);\nconst writeStatsJson = argv.indexOf('--stats') !== -1; // Generate configuration\n\nconst config = configFactory('production'); // We require that you explicitly set browsers and do not fall back to\n// browserslist defaults.\n\nconst {\n  checkBrowsers\n} = require('react-dev-utils/browsersHelper');\n\ncheckBrowsers(paths.appPath, isInteractive).then(() => {\n  // First, read the current file sizes in build directory.\n  // This lets us display how much they changed later.\n  return measureFileSizesBeforeBuild(paths.appBuild);\n}).then(previousFileSizes => {\n  // Remove all content but keep the directory so that\n  // if you're in it, you don't end up in Trash\n  fs.emptyDirSync(paths.appBuild); // Merge with the public folder\n\n  copyPublicFolder(); // Start the webpack build\n\n  return build(previousFileSizes);\n}).then(_ref => {\n  let {\n    stats,\n    previousFileSizes,\n    warnings\n  } = _ref;\n\n  if (warnings.length) {\n    console.log(chalk.yellow('Compiled with warnings.\\n'));\n    console.log(warnings.join('\\n\\n'));\n    console.log('\\nSearch for the ' + chalk.underline(chalk.yellow('keywords')) + ' to learn more about each warning.');\n    console.log('To ignore, add ' + chalk.cyan('// eslint-disable-next-line') + ' to the line before.\\n');\n  } else {\n    console.log(chalk.green('Compiled successfully.\\n'));\n  }\n\n  console.log('File sizes after gzip:\\n');\n  printFileSizesAfterBuild(stats, previousFileSizes, paths.appBuild, WARN_AFTER_BUNDLE_GZIP_SIZE, WARN_AFTER_CHUNK_GZIP_SIZE);\n  console.log();\n\n  const appPackage = require(paths.appPackageJson);\n\n  const publicUrl = paths.publicUrlOrPath;\n  const publicPath = config.output.publicPath;\n  const buildFolder = path.relative(process.cwd(), paths.appBuild);\n  printHostingInstructions(appPackage, publicUrl, publicPath, buildFolder, useYarn);\n}, err => {\n  const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';\n\n  if (tscCompileOnError) {\n    console.log(chalk.yellow('Compiled with the following type errors (you may want to check these before deploying your app):\\n'));\n    printBuildError(err);\n  } else {\n    console.log(chalk.red('Failed to compile.\\n'));\n    printBuildError(err);\n    process.exit(1);\n  }\n}).catch(err => {\n  if (err && err.message) {\n    console.log(err.message);\n  }\n\n  process.exit(1);\n}); // Create the production build and print the deployment instructions.\n\nfunction build(previousFileSizes) {\n  console.log('Creating an optimized production build...');\n  const compiler = webpack(config);\n  return new Promise((resolve, reject) => {\n    compiler.run((err, stats) => {\n      let messages;\n\n      if (err) {\n        if (!err.message) {\n          return reject(err);\n        }\n\n        let errMessage = err.message; // Add additional information for postcss errors\n\n        if (Object.prototype.hasOwnProperty.call(err, 'postcssNode')) {\n          errMessage += '\\nCompileError: Begins at CSS selector ' + err['postcssNode'].selector;\n        }\n\n        messages = formatWebpackMessages({\n          errors: [errMessage],\n          warnings: []\n        });\n      } else {\n        messages = formatWebpackMessages(stats.toJson({\n          all: false,\n          warnings: true,\n          errors: true\n        }));\n      }\n\n      if (messages.errors.length) {\n        // Only keep the first error. Others are often indicative\n        // of the same problem, but confuse the reader with noise.\n        if (messages.errors.length > 1) {\n          messages.errors.length = 1;\n        }\n\n        return reject(new Error(messages.errors.join('\\n\\n')));\n      }\n\n      if (process.env.CI && (typeof process.env.CI !== 'string' || process.env.CI.toLowerCase() !== 'false') && messages.warnings.length) {\n        // Ignore sourcemap warnings in CI builds. See #8227 for more info.\n        const filteredWarnings = messages.warnings.filter(w => !/Failed to parse source map/.test(w));\n\n        if (filteredWarnings.length) {\n          console.log(chalk.yellow('\\nTreating warnings as errors because process.env.CI = true.\\n' + 'Most CI servers set it automatically.\\n'));\n          return reject(new Error(filteredWarnings.join('\\n\\n')));\n        }\n      }\n\n      const resolveArgs = {\n        stats,\n        previousFileSizes,\n        warnings: messages.warnings\n      };\n\n      if (writeStatsJson) {\n        return bfj.write(paths.appBuild + '/bundle-stats.json', stats.toJson()).then(() => resolve(resolveArgs)).catch(error => reject(new Error(error)));\n      }\n\n      return resolve(resolveArgs);\n    });\n  });\n}\n\nfunction copyPublicFolder() {\n  fs.copySync(paths.appPublic, paths.appBuild, {\n    dereference: true,\n    filter: file => file !== paths.appHtml\n  });\n}","map":{"version":3,"names":["process","env","BABEL_ENV","NODE_ENV","on","err","require","path","chalk","fs","bfj","webpack","configFactory","paths","checkRequiredFiles","formatWebpackMessages","printHostingInstructions","FileSizeReporter","printBuildError","measureFileSizesBeforeBuild","printFileSizesAfterBuild","useYarn","existsSync","yarnLockFile","WARN_AFTER_BUNDLE_GZIP_SIZE","WARN_AFTER_CHUNK_GZIP_SIZE","isInteractive","stdout","isTTY","appHtml","appIndexJs","exit","argv","slice","writeStatsJson","indexOf","config","checkBrowsers","appPath","then","appBuild","previousFileSizes","emptyDirSync","copyPublicFolder","build","stats","warnings","length","console","log","yellow","join","underline","cyan","green","appPackage","appPackageJson","publicUrl","publicUrlOrPath","publicPath","output","buildFolder","relative","cwd","tscCompileOnError","TSC_COMPILE_ON_ERROR","red","catch","message","compiler","Promise","resolve","reject","run","messages","errMessage","Object","prototype","hasOwnProperty","call","selector","errors","toJson","all","Error","CI","toLowerCase","filteredWarnings","filter","w","test","resolveArgs","write","error","copySync","appPublic","dereference","file"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/react-scripts/scripts/build.js"],"sourcesContent":["// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\n// Do this as the first thing so that any code reading it knows the right env.\nprocess.env.BABEL_ENV = 'production';\nprocess.env.NODE_ENV = 'production';\n\n// Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\nprocess.on('unhandledRejection', err => {\n  throw err;\n});\n\n// Ensure environment variables are read.\nrequire('../config/env');\n\nconst path = require('path');\nconst chalk = require('react-dev-utils/chalk');\nconst fs = require('fs-extra');\nconst bfj = require('bfj');\nconst webpack = require('webpack');\nconst configFactory = require('../config/webpack.config');\nconst paths = require('../config/paths');\nconst checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');\nconst formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');\nconst printHostingInstructions = require('react-dev-utils/printHostingInstructions');\nconst FileSizeReporter = require('react-dev-utils/FileSizeReporter');\nconst printBuildError = require('react-dev-utils/printBuildError');\n\nconst measureFileSizesBeforeBuild =\n  FileSizeReporter.measureFileSizesBeforeBuild;\nconst printFileSizesAfterBuild = FileSizeReporter.printFileSizesAfterBuild;\nconst useYarn = fs.existsSync(paths.yarnLockFile);\n\n// These sizes are pretty large. We'll warn for bundles exceeding them.\nconst WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;\nconst WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;\n\nconst isInteractive = process.stdout.isTTY;\n\n// Warn and crash if required files are missing\nif (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {\n  process.exit(1);\n}\n\nconst argv = process.argv.slice(2);\nconst writeStatsJson = argv.indexOf('--stats') !== -1;\n\n// Generate configuration\nconst config = configFactory('production');\n\n// We require that you explicitly set browsers and do not fall back to\n// browserslist defaults.\nconst { checkBrowsers } = require('react-dev-utils/browsersHelper');\ncheckBrowsers(paths.appPath, isInteractive)\n  .then(() => {\n    // First, read the current file sizes in build directory.\n    // This lets us display how much they changed later.\n    return measureFileSizesBeforeBuild(paths.appBuild);\n  })\n  .then(previousFileSizes => {\n    // Remove all content but keep the directory so that\n    // if you're in it, you don't end up in Trash\n    fs.emptyDirSync(paths.appBuild);\n    // Merge with the public folder\n    copyPublicFolder();\n    // Start the webpack build\n    return build(previousFileSizes);\n  })\n  .then(\n    ({ stats, previousFileSizes, warnings }) => {\n      if (warnings.length) {\n        console.log(chalk.yellow('Compiled with warnings.\\n'));\n        console.log(warnings.join('\\n\\n'));\n        console.log(\n          '\\nSearch for the ' +\n            chalk.underline(chalk.yellow('keywords')) +\n            ' to learn more about each warning.'\n        );\n        console.log(\n          'To ignore, add ' +\n            chalk.cyan('// eslint-disable-next-line') +\n            ' to the line before.\\n'\n        );\n      } else {\n        console.log(chalk.green('Compiled successfully.\\n'));\n      }\n\n      console.log('File sizes after gzip:\\n');\n      printFileSizesAfterBuild(\n        stats,\n        previousFileSizes,\n        paths.appBuild,\n        WARN_AFTER_BUNDLE_GZIP_SIZE,\n        WARN_AFTER_CHUNK_GZIP_SIZE\n      );\n      console.log();\n\n      const appPackage = require(paths.appPackageJson);\n      const publicUrl = paths.publicUrlOrPath;\n      const publicPath = config.output.publicPath;\n      const buildFolder = path.relative(process.cwd(), paths.appBuild);\n      printHostingInstructions(\n        appPackage,\n        publicUrl,\n        publicPath,\n        buildFolder,\n        useYarn\n      );\n    },\n    err => {\n      const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';\n      if (tscCompileOnError) {\n        console.log(\n          chalk.yellow(\n            'Compiled with the following type errors (you may want to check these before deploying your app):\\n'\n          )\n        );\n        printBuildError(err);\n      } else {\n        console.log(chalk.red('Failed to compile.\\n'));\n        printBuildError(err);\n        process.exit(1);\n      }\n    }\n  )\n  .catch(err => {\n    if (err && err.message) {\n      console.log(err.message);\n    }\n    process.exit(1);\n  });\n\n// Create the production build and print the deployment instructions.\nfunction build(previousFileSizes) {\n  console.log('Creating an optimized production build...');\n\n  const compiler = webpack(config);\n  return new Promise((resolve, reject) => {\n    compiler.run((err, stats) => {\n      let messages;\n      if (err) {\n        if (!err.message) {\n          return reject(err);\n        }\n\n        let errMessage = err.message;\n\n        // Add additional information for postcss errors\n        if (Object.prototype.hasOwnProperty.call(err, 'postcssNode')) {\n          errMessage +=\n            '\\nCompileError: Begins at CSS selector ' +\n            err['postcssNode'].selector;\n        }\n\n        messages = formatWebpackMessages({\n          errors: [errMessage],\n          warnings: [],\n        });\n      } else {\n        messages = formatWebpackMessages(\n          stats.toJson({ all: false, warnings: true, errors: true })\n        );\n      }\n      if (messages.errors.length) {\n        // Only keep the first error. Others are often indicative\n        // of the same problem, but confuse the reader with noise.\n        if (messages.errors.length > 1) {\n          messages.errors.length = 1;\n        }\n        return reject(new Error(messages.errors.join('\\n\\n')));\n      }\n      if (\n        process.env.CI &&\n        (typeof process.env.CI !== 'string' ||\n          process.env.CI.toLowerCase() !== 'false') &&\n        messages.warnings.length\n      ) {\n        // Ignore sourcemap warnings in CI builds. See #8227 for more info.\n        const filteredWarnings = messages.warnings.filter(\n          w => !/Failed to parse source map/.test(w)\n        );\n        if (filteredWarnings.length) {\n          console.log(\n            chalk.yellow(\n              '\\nTreating warnings as errors because process.env.CI = true.\\n' +\n                'Most CI servers set it automatically.\\n'\n            )\n          );\n          return reject(new Error(filteredWarnings.join('\\n\\n')));\n        }\n      }\n\n      const resolveArgs = {\n        stats,\n        previousFileSizes,\n        warnings: messages.warnings,\n      };\n\n      if (writeStatsJson) {\n        return bfj\n          .write(paths.appBuild + '/bundle-stats.json', stats.toJson())\n          .then(() => resolve(resolveArgs))\n          .catch(error => reject(new Error(error)));\n      }\n\n      return resolve(resolveArgs);\n    });\n  });\n}\n\nfunction copyPublicFolder() {\n  fs.copySync(paths.appPublic, paths.appBuild, {\n    dereference: true,\n    filter: file => file !== paths.appHtml,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}