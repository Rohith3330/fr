{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTypeFlagSet = exports.getTypeFlags = void 0;\n\nconst tsutils_1 = require(\"tsutils\");\n\nconst ts = __importStar(require(\"typescript\"));\n/**\n * Gets all of the type flags in a type, iterating through unions automatically\n */\n\n\nfunction getTypeFlags(type) {\n  let flags = 0;\n\n  for (const t of (0, tsutils_1.unionTypeParts)(type)) {\n    flags |= t.flags;\n  }\n\n  return flags;\n}\n\nexports.getTypeFlags = getTypeFlags;\n/**\n * Checks if the given type is (or accepts) the given flags\n * @param isReceiver true if the type is a receiving type (i.e. the type of a called function's parameter)\n */\n\nfunction isTypeFlagSet(type, flagsToCheck, isReceiver) {\n  const flags = getTypeFlags(type);\n\n  if (isReceiver && flags & (ts.TypeFlags.Any | ts.TypeFlags.Unknown)) {\n    return true;\n  }\n\n  return (flags & flagsToCheck) !== 0;\n}\n\nexports.isTypeFlagSet = isTypeFlagSet;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEA;;;;;AAGA,SAAgBA,YAAhB,CAA6BC,IAA7B,EAA0C;EACxC,IAAIC,KAAK,GAAiB,CAA1B;;EACA,KAAK,MAAMC,CAAX,IAAgB,8BAAeF,IAAf,CAAhB,EAAsC;IACpCC,KAAK,IAAIC,CAAC,CAACD,KAAX;EACD;;EACD,OAAOA,KAAP;AACD;;AANDE;AAQA;;;;;AAIA,SAAgBC,aAAhB,CACEJ,IADF,EAEEK,YAFF,EAGEC,UAHF,EAGsB;EAEpB,MAAML,KAAK,GAAGF,YAAY,CAACC,IAAD,CAA1B;;EAEA,IAAIM,UAAU,IAAIL,KAAK,IAAIM,EAAE,CAACC,SAAH,CAAaC,GAAb,GAAmBF,EAAE,CAACC,SAAH,CAAaE,OAApC,CAAvB,EAAqE;IACnE,OAAO,IAAP;EACD;;EAED,OAAO,CAACT,KAAK,GAAGI,YAAT,MAA2B,CAAlC;AACD;;AAZDF","names":["getTypeFlags","type","flags","t","exports","isTypeFlagSet","flagsToCheck","isReceiver","ts","TypeFlags","Any","Unknown"],"sources":["../src/typeFlagUtils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}