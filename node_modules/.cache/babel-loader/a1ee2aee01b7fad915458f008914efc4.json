{"ast":null,"code":"// @ts-check\n\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n\n/** @typedef {import(\"webpack/lib/FileSystemInfo\").Snapshot} Snapshot */\n'use strict';\n/**\n *\n * @param {{fileDependencies: string[], contextDependencies: string[], missingDependencies: string[]}} fileDependencies\n * @param {WebpackCompilation} mainCompilation\n * @param {number} startTime\n */\n\nfunction createSnapshot(fileDependencies, mainCompilation, startTime) {\n  return new Promise((resolve, reject) => {\n    mainCompilation.fileSystemInfo.createSnapshot(startTime, fileDependencies.fileDependencies, fileDependencies.contextDependencies, fileDependencies.missingDependencies, null, (err, snapshot) => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(snapshot);\n    });\n  });\n}\n/**\n * Returns true if the files inside this snapshot\n * have not been changed\n *\n * @param {Snapshot} snapshot\n * @param {WebpackCompilation} mainCompilation\n * @returns {Promise<boolean>}\n */\n\n\nfunction isSnapShotValid(snapshot, mainCompilation) {\n  return new Promise((resolve, reject) => {\n    mainCompilation.fileSystemInfo.checkSnapshotValid(snapshot, (err, isValid) => {\n      if (err) {\n        reject(err);\n      }\n\n      resolve(isValid);\n    });\n  });\n}\n/**\n * Ensure that the files keep watched for changes\n * and will trigger a recompile\n *\n * @param {WebpackCompilation} mainCompilation\n * @param {{fileDependencies: string[], contextDependencies: string[], missingDependencies: string[]}} fileDependencies\n */\n\n\nfunction watchFiles(mainCompilation, fileDependencies) {\n  Object.keys(fileDependencies).forEach(depencyTypes => {\n    fileDependencies[depencyTypes].forEach(fileDependency => {\n      mainCompilation[depencyTypes].add(fileDependency);\n    });\n  });\n}\n\nmodule.exports = {\n  createSnapshot,\n  isSnapShotValid,\n  watchFiles\n};","map":{"version":3,"names":["createSnapshot","fileDependencies","mainCompilation","startTime","Promise","resolve","reject","fileSystemInfo","contextDependencies","missingDependencies","err","snapshot","isSnapShotValid","checkSnapshotValid","isValid","watchFiles","Object","keys","forEach","depencyTypes","fileDependency","add","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/html-webpack-plugin/lib/file-watcher-api.js"],"sourcesContent":["// @ts-check\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n/** @typedef {import(\"webpack/lib/FileSystemInfo\").Snapshot} Snapshot */\n'use strict';\n\n/**\n *\n * @param {{fileDependencies: string[], contextDependencies: string[], missingDependencies: string[]}} fileDependencies\n * @param {WebpackCompilation} mainCompilation\n * @param {number} startTime\n */\nfunction createSnapshot (fileDependencies, mainCompilation, startTime) {\n  return new Promise((resolve, reject) => {\n    mainCompilation.fileSystemInfo.createSnapshot(\n      startTime,\n      fileDependencies.fileDependencies,\n      fileDependencies.contextDependencies,\n      fileDependencies.missingDependencies,\n      null,\n      (err, snapshot) => {\n        if (err) {\n          return reject(err);\n        }\n        resolve(snapshot);\n      }\n    );\n  });\n}\n\n/**\n * Returns true if the files inside this snapshot\n * have not been changed\n *\n * @param {Snapshot} snapshot\n * @param {WebpackCompilation} mainCompilation\n * @returns {Promise<boolean>}\n */\nfunction isSnapShotValid (snapshot, mainCompilation) {\n  return new Promise((resolve, reject) => {\n    mainCompilation.fileSystemInfo.checkSnapshotValid(\n      snapshot,\n      (err, isValid) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(isValid);\n      }\n    );\n  });\n}\n\n/**\n * Ensure that the files keep watched for changes\n * and will trigger a recompile\n *\n * @param {WebpackCompilation} mainCompilation\n * @param {{fileDependencies: string[], contextDependencies: string[], missingDependencies: string[]}} fileDependencies\n */\nfunction watchFiles (mainCompilation, fileDependencies) {\n  Object.keys(fileDependencies).forEach((depencyTypes) => {\n    fileDependencies[depencyTypes].forEach(fileDependency => {\n      mainCompilation[depencyTypes].add(fileDependency);\n    });\n  });\n}\n\nmodule.exports = {\n  createSnapshot,\n  isSnapShotValid,\n  watchFiles\n};\n"],"mappings":"AAAA;;AACA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,cAAT,CAAyBC,gBAAzB,EAA2CC,eAA3C,EAA4DC,SAA5D,EAAuE;EACrE,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtCJ,eAAe,CAACK,cAAhB,CAA+BP,cAA/B,CACEG,SADF,EAEEF,gBAAgB,CAACA,gBAFnB,EAGEA,gBAAgB,CAACO,mBAHnB,EAIEP,gBAAgB,CAACQ,mBAJnB,EAKE,IALF,EAME,CAACC,GAAD,EAAMC,QAAN,KAAmB;MACjB,IAAID,GAAJ,EAAS;QACP,OAAOJ,MAAM,CAACI,GAAD,CAAb;MACD;;MACDL,OAAO,CAACM,QAAD,CAAP;IACD,CAXH;EAaD,CAdM,CAAP;AAeD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,eAAT,CAA0BD,QAA1B,EAAoCT,eAApC,EAAqD;EACnD,OAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtCJ,eAAe,CAACK,cAAhB,CAA+BM,kBAA/B,CACEF,QADF,EAEE,CAACD,GAAD,EAAMI,OAAN,KAAkB;MAChB,IAAIJ,GAAJ,EAAS;QACPJ,MAAM,CAACI,GAAD,CAAN;MACD;;MACDL,OAAO,CAACS,OAAD,CAAP;IACD,CAPH;EASD,CAVM,CAAP;AAWD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAqBb,eAArB,EAAsCD,gBAAtC,EAAwD;EACtDe,MAAM,CAACC,IAAP,CAAYhB,gBAAZ,EAA8BiB,OAA9B,CAAuCC,YAAD,IAAkB;IACtDlB,gBAAgB,CAACkB,YAAD,CAAhB,CAA+BD,OAA/B,CAAuCE,cAAc,IAAI;MACvDlB,eAAe,CAACiB,YAAD,CAAf,CAA8BE,GAA9B,CAAkCD,cAAlC;IACD,CAFD;EAGD,CAJD;AAKD;;AAEDE,MAAM,CAACC,OAAP,GAAiB;EACfvB,cADe;EAEfY,eAFe;EAGfG;AAHe,CAAjB"},"metadata":{},"sourceType":"script"}