{"ast":null,"code":"'use strict';\n\nconst detectNewline = string => {\n  if (typeof string !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  const newlines = string.match(/(?:\\r?\\n)/g) || [];\n\n  if (newlines.length === 0) {\n    return;\n  }\n\n  const crlf = newlines.filter(newline => newline === '\\r\\n').length;\n  const lf = newlines.length - crlf;\n  return crlf > lf ? '\\r\\n' : '\\n';\n};\n\nmodule.exports = detectNewline;\n\nmodule.exports.graceful = string => typeof string === 'string' && detectNewline(string) || '\\n';","map":{"version":3,"names":["detectNewline","string","TypeError","newlines","match","length","crlf","filter","newline","lf","module","exports","graceful"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/detect-newline/index.js"],"sourcesContent":["'use strict';\n\nconst detectNewline = string => {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\tconst newlines = string.match(/(?:\\r?\\n)/g) || [];\n\n\tif (newlines.length === 0) {\n\t\treturn;\n\t}\n\n\tconst crlf = newlines.filter(newline => newline === '\\r\\n').length;\n\tconst lf = newlines.length - crlf;\n\n\treturn crlf > lf ? '\\r\\n' : '\\n';\n};\n\nmodule.exports = detectNewline;\nmodule.exports.graceful = string => (typeof string === 'string' && detectNewline(string)) || '\\n';\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,MAAM,IAAI;EAC/B,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;IAC/B,MAAM,IAAIC,SAAJ,CAAc,mBAAd,CAAN;EACA;;EAED,MAAMC,QAAQ,GAAGF,MAAM,CAACG,KAAP,CAAa,YAAb,KAA8B,EAA/C;;EAEA,IAAID,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;IAC1B;EACA;;EAED,MAAMC,IAAI,GAAGH,QAAQ,CAACI,MAAT,CAAgBC,OAAO,IAAIA,OAAO,KAAK,MAAvC,EAA+CH,MAA5D;EACA,MAAMI,EAAE,GAAGN,QAAQ,CAACE,MAAT,GAAkBC,IAA7B;EAEA,OAAOA,IAAI,GAAGG,EAAP,GAAY,MAAZ,GAAqB,IAA5B;AACA,CAfD;;AAiBAC,MAAM,CAACC,OAAP,GAAiBX,aAAjB;;AACAU,MAAM,CAACC,OAAP,CAAeC,QAAf,GAA0BX,MAAM,IAAK,OAAOA,MAAP,KAAkB,QAAlB,IAA8BD,aAAa,CAACC,MAAD,CAA5C,IAAyD,IAA7F"},"metadata":{},"sourceType":"script"}