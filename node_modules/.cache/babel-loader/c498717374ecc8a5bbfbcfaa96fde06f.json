{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [];\n\nconst create = context => {\n  const markTypeAsUsed = node => {\n    context.markVariableAsUsed(node.id.name);\n  };\n\n  const markTypeAsUsedWithGenericType = node => {\n    let typeId;\n    let scope;\n    let variable;\n\n    if (node.id.type === 'Identifier') {\n      typeId = node.id;\n    } else if (node.id.type === 'QualifiedTypeIdentifier') {\n      typeId = node.id;\n\n      do {\n        typeId = typeId.qualification;\n      } while (typeId.qualification);\n    }\n\n    for (scope = context.getScope(); scope; scope = scope.upper) {\n      variable = scope.set.get(typeId.name);\n\n      if (variable && variable.defs.length) {\n        context.markVariableAsUsed(typeId.name);\n        break;\n      }\n    }\n  };\n\n  return {\n    DeclareClass: markTypeAsUsed,\n    DeclareFunction: markTypeAsUsed,\n    DeclareModule: markTypeAsUsed,\n    DeclareVariable: markTypeAsUsed,\n    GenericTypeAnnotation: markTypeAsUsedWithGenericType,\n\n    TypeParameterDeclaration(node) {\n      for (const param of node.params) {\n        if (param.default && param.default.typeParameters) {\n          if (param.default.type === 'GenericTypeAnnotation') {\n            markTypeAsUsedWithGenericType(param.default);\n          }\n\n          for (const typeParameterNode of param.default.typeParameters.params) {\n            if (typeParameterNode.type === 'GenericTypeAnnotation') {\n              markTypeAsUsedWithGenericType(typeParameterNode);\n            }\n          }\n        }\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","schema","create","context","markTypeAsUsed","node","markVariableAsUsed","id","name","markTypeAsUsedWithGenericType","typeId","scope","variable","type","qualification","getScope","upper","set","get","defs","length","DeclareClass","DeclareFunction","DeclareModule","DeclareVariable","GenericTypeAnnotation","TypeParameterDeclaration","param","params","typeParameters","typeParameterNode","_default","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/useFlowType.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [];\n\nconst create = context => {\n  const markTypeAsUsed = node => {\n    context.markVariableAsUsed(node.id.name);\n  };\n\n  const markTypeAsUsedWithGenericType = node => {\n    let typeId;\n    let scope;\n    let variable;\n\n    if (node.id.type === 'Identifier') {\n      typeId = node.id;\n    } else if (node.id.type === 'QualifiedTypeIdentifier') {\n      typeId = node.id;\n\n      do {\n        typeId = typeId.qualification;\n      } while (typeId.qualification);\n    }\n\n    for (scope = context.getScope(); scope; scope = scope.upper) {\n      variable = scope.set.get(typeId.name);\n\n      if (variable && variable.defs.length) {\n        context.markVariableAsUsed(typeId.name);\n        break;\n      }\n    }\n  };\n\n  return {\n    DeclareClass: markTypeAsUsed,\n    DeclareFunction: markTypeAsUsed,\n    DeclareModule: markTypeAsUsed,\n    DeclareVariable: markTypeAsUsed,\n    GenericTypeAnnotation: markTypeAsUsedWithGenericType,\n\n    TypeParameterDeclaration(node) {\n      for (const param of node.params) {\n        if (param.default && param.default.typeParameters) {\n          if (param.default.type === 'GenericTypeAnnotation') {\n            markTypeAsUsedWithGenericType(param.default);\n          }\n\n          for (const typeParameterNode of param.default.typeParameters.params) {\n            if (typeParameterNode.type === 'GenericTypeAnnotation') {\n              markTypeAsUsedWithGenericType(typeParameterNode);\n            }\n          }\n        }\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,MAAM,GAAG,EAAf;;AAEA,MAAMC,MAAM,GAAGC,OAAO,IAAI;EACxB,MAAMC,cAAc,GAAGC,IAAI,IAAI;IAC7BF,OAAO,CAACG,kBAAR,CAA2BD,IAAI,CAACE,EAAL,CAAQC,IAAnC;EACD,CAFD;;EAIA,MAAMC,6BAA6B,GAAGJ,IAAI,IAAI;IAC5C,IAAIK,MAAJ;IACA,IAAIC,KAAJ;IACA,IAAIC,QAAJ;;IAEA,IAAIP,IAAI,CAACE,EAAL,CAAQM,IAAR,KAAiB,YAArB,EAAmC;MACjCH,MAAM,GAAGL,IAAI,CAACE,EAAd;IACD,CAFD,MAEO,IAAIF,IAAI,CAACE,EAAL,CAAQM,IAAR,KAAiB,yBAArB,EAAgD;MACrDH,MAAM,GAAGL,IAAI,CAACE,EAAd;;MAEA,GAAG;QACDG,MAAM,GAAGA,MAAM,CAACI,aAAhB;MACD,CAFD,QAESJ,MAAM,CAACI,aAFhB;IAGD;;IAED,KAAKH,KAAK,GAAGR,OAAO,CAACY,QAAR,EAAb,EAAiCJ,KAAjC,EAAwCA,KAAK,GAAGA,KAAK,CAACK,KAAtD,EAA6D;MAC3DJ,QAAQ,GAAGD,KAAK,CAACM,GAAN,CAAUC,GAAV,CAAcR,MAAM,CAACF,IAArB,CAAX;;MAEA,IAAII,QAAQ,IAAIA,QAAQ,CAACO,IAAT,CAAcC,MAA9B,EAAsC;QACpCjB,OAAO,CAACG,kBAAR,CAA2BI,MAAM,CAACF,IAAlC;QACA;MACD;IACF;EACF,CAvBD;;EAyBA,OAAO;IACLa,YAAY,EAAEjB,cADT;IAELkB,eAAe,EAAElB,cAFZ;IAGLmB,aAAa,EAAEnB,cAHV;IAILoB,eAAe,EAAEpB,cAJZ;IAKLqB,qBAAqB,EAAEhB,6BALlB;;IAOLiB,wBAAwB,CAACrB,IAAD,EAAO;MAC7B,KAAK,MAAMsB,KAAX,IAAoBtB,IAAI,CAACuB,MAAzB,EAAiC;QAC/B,IAAID,KAAK,CAAC3B,OAAN,IAAiB2B,KAAK,CAAC3B,OAAN,CAAc6B,cAAnC,EAAmD;UACjD,IAAIF,KAAK,CAAC3B,OAAN,CAAca,IAAd,KAAuB,uBAA3B,EAAoD;YAClDJ,6BAA6B,CAACkB,KAAK,CAAC3B,OAAP,CAA7B;UACD;;UAED,KAAK,MAAM8B,iBAAX,IAAgCH,KAAK,CAAC3B,OAAN,CAAc6B,cAAd,CAA6BD,MAA7D,EAAqE;YACnE,IAAIE,iBAAiB,CAACjB,IAAlB,KAA2B,uBAA/B,EAAwD;cACtDJ,6BAA6B,CAACqB,iBAAD,CAA7B;YACD;UACF;QACF;MACF;IACF;;EArBI,CAAP;AAwBD,CAtDD;;AAwDA,IAAIC,QAAQ,GAAG;EACb7B,MADa;EAEbD;AAFa,CAAf;AAIAH,OAAO,CAACE,OAAR,GAAkB+B,QAAlB;AACAC,MAAM,CAAClC,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}