{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Suggest using `toHaveLength()`',\n      recommended: false\n    },\n    messages: {\n      useToHaveLength: 'Use toHaveLength() instead'\n    },\n    fixable: 'code',\n    type: 'suggestion',\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          expect: {\n            arguments: [argument]\n          },\n          matcher\n        } = (0, _utils.parseExpectCall)(node);\n\n        if (!matcher || !(0, _utils.isParsedEqualityMatcherCall)(matcher) || (argument === null || argument === void 0 ? void 0 : argument.type) !== _experimentalUtils.AST_NODE_TYPES.MemberExpression || !(0, _utils.isSupportedAccessor)(argument.property, 'length')) {\n          return;\n        }\n\n        context.report({\n          fix(fixer) {\n            return [// remove the \"length\" property accessor\n            fixer.removeRange([argument.property.range[0] - 1, argument.range[1]]), // replace the current matcher with \"toHaveLength\"\n            fixer.replaceTextRange([matcher.node.object.range[1], matcher.node.range[1]], '.toHaveLength')];\n          },\n\n          messageId: 'useToHaveLength',\n          node: matcher.node.property\n        });\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","useToHaveLength","fixable","type","schema","defaultOptions","create","context","CallExpression","node","isExpectCall","expect","arguments","argument","matcher","parseExpectCall","isParsedEqualityMatcherCall","AST_NODE_TYPES","MemberExpression","isSupportedAccessor","property","report","fix","fixer","removeRange","range","replaceTextRange","object","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/prefer-to-have-length.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Suggest using `toHaveLength()`',\n      recommended: false\n    },\n    messages: {\n      useToHaveLength: 'Use toHaveLength() instead'\n    },\n    fixable: 'code',\n    type: 'suggestion',\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          expect: {\n            arguments: [argument]\n          },\n          matcher\n        } = (0, _utils.parseExpectCall)(node);\n\n        if (!matcher || !(0, _utils.isParsedEqualityMatcherCall)(matcher) || (argument === null || argument === void 0 ? void 0 : argument.type) !== _experimentalUtils.AST_NODE_TYPES.MemberExpression || !(0, _utils.isSupportedAccessor)(argument.property, 'length')) {\n          return;\n        }\n\n        context.report({\n          fix(fixer) {\n            return [// remove the \"length\" property accessor\n            fixer.removeRange([argument.property.range[0] - 1, argument.range[1]]), // replace the current matcher with \"toHaveLength\"\n            fixer.replaceTextRange([matcher.node.object.range[1], matcher.node.range[1]], '.toHaveLength')];\n          },\n\n          messageId: 'useToHaveLength',\n          node: matcher.node.property\n        });\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,uCAAD,CAAhC;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIE,QAAQ,GAAG,CAAC,GAAGD,MAAM,CAACE,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,gCAFT;MAGJC,WAAW,EAAE;IAHT,CADF;IAMJC,QAAQ,EAAE;MACRC,eAAe,EAAE;IADT,CANN;IASJC,OAAO,EAAE,MATL;IAUJC,IAAI,EAAE,YAVF;IAWJC,MAAM,EAAE;EAXJ,CAF8B;EAepCC,cAAc,EAAE,EAfoB;;EAiBpCC,MAAM,CAACC,OAAD,EAAU;IACd,OAAO;MACLC,cAAc,CAACC,IAAD,EAAO;QACnB,IAAI,CAAC,CAAC,GAAGnB,MAAM,CAACoB,YAAX,EAAyBD,IAAzB,CAAL,EAAqC;UACnC;QACD;;QAED,MAAM;UACJE,MAAM,EAAE;YACNC,SAAS,EAAE,CAACC,QAAD;UADL,CADJ;UAIJC;QAJI,IAKF,CAAC,GAAGxB,MAAM,CAACyB,eAAX,EAA4BN,IAA5B,CALJ;;QAOA,IAAI,CAACK,OAAD,IAAY,CAAC,CAAC,GAAGxB,MAAM,CAAC0B,2BAAX,EAAwCF,OAAxC,CAAb,IAAiE,CAACD,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACV,IAA9D,MAAwEf,kBAAkB,CAAC6B,cAAnB,CAAkCC,gBAA3K,IAA+L,CAAC,CAAC,GAAG5B,MAAM,CAAC6B,mBAAX,EAAgCN,QAAQ,CAACO,QAAzC,EAAmD,QAAnD,CAApM,EAAkQ;UAChQ;QACD;;QAEDb,OAAO,CAACc,MAAR,CAAe;UACbC,GAAG,CAACC,KAAD,EAAQ;YACT,OAAO,CAAC;YACRA,KAAK,CAACC,WAAN,CAAkB,CAACX,QAAQ,CAACO,QAAT,CAAkBK,KAAlB,CAAwB,CAAxB,IAA6B,CAA9B,EAAiCZ,QAAQ,CAACY,KAAT,CAAe,CAAf,CAAjC,CAAlB,CADO,EACiE;YACxEF,KAAK,CAACG,gBAAN,CAAuB,CAACZ,OAAO,CAACL,IAAR,CAAakB,MAAb,CAAoBF,KAApB,CAA0B,CAA1B,CAAD,EAA+BX,OAAO,CAACL,IAAR,CAAagB,KAAb,CAAmB,CAAnB,CAA/B,CAAvB,EAA8E,eAA9E,CAFO,CAAP;UAGD,CALY;;UAObG,SAAS,EAAE,iBAPE;UAQbnB,IAAI,EAAEK,OAAO,CAACL,IAAR,CAAaW;QARN,CAAf;MAUD;;IA3BI,CAAP;EA8BD;;AAhDmC,CAAvB,CAAf;;AAoDAnC,OAAO,CAACE,OAAR,GAAkBI,QAAlB"},"metadata":{},"sourceType":"script"}