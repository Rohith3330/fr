{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar objectKeys = require('object-keys');\n\nvar callBound = require('call-bind/callBound');\n\nvar callBind = require('call-bind');\n\nvar $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');\nvar $pushApply = callBind.apply(GetIntrinsic('%Array.prototype.push%'));\n\nvar forEach = require('../helpers/forEach');\n\nvar Type = require('./Type'); // https://262.ecma-international.org/8.0/#sec-enumerableownproperties\n\n\nmodule.exports = function EnumerableOwnPropertyNames(O, kind) {\n  if (Type(O) !== 'Object') {\n    throw new $TypeError('Assertion failed: Type(O) is not Object');\n  }\n\n  var keys = objectKeys(O);\n\n  if (kind === 'key') {\n    return keys;\n  }\n\n  if (kind === 'value' || kind === 'key+value') {\n    var results = [];\n    forEach(keys, function (key) {\n      if ($isEnumerable(O, key)) {\n        $pushApply(results, [kind === 'value' ? O[key] : [key, O[key]]]);\n      }\n    });\n    return results;\n  }\n\n  throw new $TypeError('Assertion failed: \"kind\" is not \"key\", \"value\", or \"key+value\": ' + kind);\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","objectKeys","callBound","callBind","$isEnumerable","$pushApply","apply","forEach","Type","module","exports","EnumerableOwnPropertyNames","O","kind","keys","results","key"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2022/EnumerableOwnPropertyNames.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar objectKeys = require('object-keys');\n\nvar callBound = require('call-bind/callBound');\n\nvar callBind = require('call-bind');\n\nvar $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');\nvar $pushApply = callBind.apply(GetIntrinsic('%Array.prototype.push%'));\n\nvar forEach = require('../helpers/forEach');\n\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/8.0/#sec-enumerableownproperties\n\nmodule.exports = function EnumerableOwnPropertyNames(O, kind) {\n\tif (Type(O) !== 'Object') {\n\t\tthrow new $TypeError('Assertion failed: Type(O) is not Object');\n\t}\n\n\tvar keys = objectKeys(O);\n\tif (kind === 'key') {\n\t\treturn keys;\n\t}\n\tif (kind === 'value' || kind === 'key+value') {\n\t\tvar results = [];\n\t\tforEach(keys, function (key) {\n\t\t\tif ($isEnumerable(O, key)) {\n\t\t\t\t$pushApply(results, [\n\t\t\t\t\tkind === 'value' ? O[key] : [key, O[key]]\n\t\t\t\t]);\n\t\t\t}\n\t\t});\n\t\treturn results;\n\t}\n\tthrow new $TypeError('Assertion failed: \"kind\" is not \"key\", \"value\", or \"key+value\": ' + kind);\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,UAAU,GAAGF,OAAO,CAAC,aAAD,CAAxB;;AAEA,IAAIG,SAAS,GAAGH,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAtB;;AAEA,IAAIK,aAAa,GAAGF,SAAS,CAAC,uCAAD,CAA7B;AACA,IAAIG,UAAU,GAAGF,QAAQ,CAACG,KAAT,CAAeR,YAAY,CAAC,wBAAD,CAA3B,CAAjB;;AAEA,IAAIS,OAAO,GAAGR,OAAO,CAAC,oBAAD,CAArB;;AAEA,IAAIS,IAAI,GAAGT,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAU,MAAM,CAACC,OAAP,GAAiB,SAASC,0BAAT,CAAoCC,CAApC,EAAuCC,IAAvC,EAA6C;EAC7D,IAAIL,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,MAAM,IAAIZ,UAAJ,CAAe,yCAAf,CAAN;EACA;;EAED,IAAIc,IAAI,GAAGb,UAAU,CAACW,CAAD,CAArB;;EACA,IAAIC,IAAI,KAAK,KAAb,EAAoB;IACnB,OAAOC,IAAP;EACA;;EACD,IAAID,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,WAAjC,EAA8C;IAC7C,IAAIE,OAAO,GAAG,EAAd;IACAR,OAAO,CAACO,IAAD,EAAO,UAAUE,GAAV,EAAe;MAC5B,IAAIZ,aAAa,CAACQ,CAAD,EAAII,GAAJ,CAAjB,EAA2B;QAC1BX,UAAU,CAACU,OAAD,EAAU,CACnBF,IAAI,KAAK,OAAT,GAAmBD,CAAC,CAACI,GAAD,CAApB,GAA4B,CAACA,GAAD,EAAMJ,CAAC,CAACI,GAAD,CAAP,CADT,CAAV,CAAV;MAGA;IACD,CANM,CAAP;IAOA,OAAOD,OAAP;EACA;;EACD,MAAM,IAAIf,UAAJ,CAAe,qEAAqEa,IAApF,CAAN;AACA,CArBD"},"metadata":{},"sourceType":"script"}