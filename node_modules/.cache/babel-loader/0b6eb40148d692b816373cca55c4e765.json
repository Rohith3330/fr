{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _axeCore = require(\"axe-core\");\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n/**\n * @fileoverview Ensure autocomplete attribute is correct.\n * @author Wilco Fiers\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\n\nvar schema = (0, _schemas.generateObjSchema)({\n  inputComponents: _schemas.arraySchema\n});\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md',\n      description: 'Enforce that autocomplete attributes are used correctly.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var _options$inputCompone = options.inputComponents,\n            inputComponents = _options$inputCompone === void 0 ? [] : _options$inputCompone;\n        var inputTypes = ['input'].concat(inputComponents);\n        var elType = elementType(node);\n        var autocomplete = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'autocomplete'));\n\n        if (typeof autocomplete !== 'string' || !inputTypes.includes(elType)) {\n          return;\n        }\n\n        var type = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'type'));\n\n        var _runVirtualRule = (0, _axeCore.runVirtualRule)('autocomplete-valid', {\n          nodeName: 'input',\n          attributes: {\n            autocomplete,\n            // Which autocomplete is valid depends on the input type\n            type: type === null ? undefined : type\n          }\n        }),\n            violations = _runVirtualRule.violations;\n\n        if (violations.length === 0) {\n          return;\n        } // Since we only test one rule, with one node, return the message from first (and only) instance of each\n\n\n        context.report({\n          node,\n          message: violations[0].nodes[0].all[0].message\n        });\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_axeCore","_jsxAstUtils","_schemas","_getElementType","schema","generateObjSchema","inputComponents","arraySchema","_default","meta","docs","url","description","create","context","elementType","JSXOpeningElement","node","options","_options$inputCompone","inputTypes","concat","elType","autocomplete","getLiteralPropValue","getProp","attributes","includes","type","_runVirtualRule","runVirtualRule","nodeName","undefined","violations","length","report","message","nodes","all","module","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/lib/rules/autocomplete-valid.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _axeCore = require(\"axe-core\");\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\n/**\n * @fileoverview Ensure autocomplete attribute is correct.\n * @author Wilco Fiers\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\nvar schema = (0, _schemas.generateObjSchema)({\n  inputComponents: _schemas.arraySchema\n});\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md',\n      description: 'Enforce that autocomplete attributes are used correctly.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var _options$inputCompone = options.inputComponents,\n            inputComponents = _options$inputCompone === void 0 ? [] : _options$inputCompone;\n        var inputTypes = ['input'].concat(inputComponents);\n        var elType = elementType(node);\n        var autocomplete = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'autocomplete'));\n\n        if (typeof autocomplete !== 'string' || !inputTypes.includes(elType)) {\n          return;\n        }\n\n        var type = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'type'));\n\n        var _runVirtualRule = (0, _axeCore.runVirtualRule)('autocomplete-valid', {\n          nodeName: 'input',\n          attributes: {\n            autocomplete,\n            // Which autocomplete is valid depends on the input type\n            type: type === null ? undefined : type\n          }\n        }),\n            violations = _runVirtualRule.violations;\n\n        if (violations.length === 0) {\n          return;\n        } // Since we only test one rule, with one node, return the message from first (and only) instance of each\n\n\n        context.report({\n          node,\n          message: violations[0].nodes[0].all[0].message\n        });\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}