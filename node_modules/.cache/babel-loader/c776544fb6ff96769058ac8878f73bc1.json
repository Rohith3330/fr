{"ast":null,"code":"/**\n * @fileoverview Limit maximum of props on a single line in JSX\n * @author Yannick Croissant\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report');\n\nfunction getPropName(context, propNode) {\n  if (propNode.type === 'JSXSpreadAttribute') {\n    return context.getSourceCode().getText(propNode.argument);\n  }\n\n  return propNode.name.name;\n} // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  newLine: 'Prop `{{prop}}` must be placed on a new line'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce maximum of props on a single line in JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-max-props-per-line')\n    },\n    fixable: 'code',\n    messages,\n    schema: [{\n      anyOf: [{\n        type: 'object',\n        properties: {\n          maximum: {\n            type: 'object',\n            properties: {\n              single: {\n                type: 'integer',\n                minimum: 1\n              },\n              multi: {\n                type: 'integer',\n                minimum: 1\n              }\n            }\n          }\n        },\n        additionalProperties: false\n      }, {\n        type: 'object',\n        properties: {\n          maximum: {\n            type: 'number',\n            minimum: 1\n          },\n          when: {\n            type: 'string',\n            enum: ['always', 'multiline']\n          }\n        },\n        additionalProperties: false\n      }]\n    }]\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const maximum = configuration.maximum || 1;\n    const maxConfig = typeof maximum === 'number' ? {\n      single: configuration.when === 'multiline' ? Infinity : maximum,\n      multi: maximum\n    } : {\n      single: maximum.single || Infinity,\n      multi: maximum.multi || Infinity\n    };\n\n    function generateFixFunction(line, max) {\n      const sourceCode = context.getSourceCode();\n      const output = [];\n      const front = line[0].range[0];\n      const back = line[line.length - 1].range[1];\n\n      for (let i = 0; i < line.length; i += max) {\n        const nodes = line.slice(i, i + max);\n        output.push(nodes.reduce((prev, curr) => {\n          if (prev === '') {\n            return sourceCode.getText(curr);\n          }\n\n          return `${prev} ${sourceCode.getText(curr)}`;\n        }, ''));\n      }\n\n      const code = output.join('\\n');\n      return function fix(fixer) {\n        return fixer.replaceTextRange([front, back], code);\n      };\n    }\n\n    return {\n      JSXOpeningElement(node) {\n        if (!node.attributes.length) {\n          return;\n        }\n\n        const isSingleLineTag = node.loc.start.line === node.loc.end.line;\n\n        if ((isSingleLineTag ? maxConfig.single : maxConfig.multi) === Infinity) {\n          return;\n        }\n\n        const firstProp = node.attributes[0];\n        const linePartitionedProps = [[firstProp]];\n        node.attributes.reduce((last, decl) => {\n          if (last.loc.end.line === decl.loc.start.line) {\n            linePartitionedProps[linePartitionedProps.length - 1].push(decl);\n          } else {\n            linePartitionedProps.push([decl]);\n          }\n\n          return decl;\n        });\n        linePartitionedProps.forEach(propsInLine => {\n          const maxPropsCountPerLine = isSingleLineTag && propsInLine[0].loc.start.line === node.loc.start.line ? maxConfig.single : maxConfig.multi;\n\n          if (propsInLine.length > maxPropsCountPerLine) {\n            const name = getPropName(context, propsInLine[maxPropsCountPerLine]);\n            report(context, messages.newLine, 'newLine', {\n              node: propsInLine[maxPropsCountPerLine],\n              data: {\n                prop: name\n              },\n              fix: generateFixFunction(propsInLine, maxPropsCountPerLine)\n            });\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","report","getPropName","context","propNode","type","getSourceCode","getText","argument","name","messages","newLine","module","exports","meta","docs","description","category","recommended","url","fixable","schema","anyOf","properties","maximum","single","minimum","multi","additionalProperties","when","enum","create","configuration","options","maxConfig","Infinity","generateFixFunction","line","max","sourceCode","output","front","range","back","length","i","nodes","slice","push","reduce","prev","curr","code","join","fix","fixer","replaceTextRange","JSXOpeningElement","node","attributes","isSingleLineTag","loc","start","end","firstProp","linePartitionedProps","last","decl","forEach","propsInLine","maxPropsCountPerLine","data","prop"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-max-props-per-line.js"],"sourcesContent":["/**\n * @fileoverview Limit maximum of props on a single line in JSX\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\nfunction getPropName(context, propNode) {\n  if (propNode.type === 'JSXSpreadAttribute') {\n    return context.getSourceCode().getText(propNode.argument);\n  }\n  return propNode.name.name;\n}\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  newLine: 'Prop `{{prop}}` must be placed on a new line',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce maximum of props on a single line in JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-max-props-per-line'),\n    },\n    fixable: 'code',\n\n    messages,\n\n    schema: [{\n      anyOf: [{\n        type: 'object',\n        properties: {\n          maximum: {\n            type: 'object',\n            properties: {\n              single: {\n                type: 'integer',\n                minimum: 1,\n              },\n              multi: {\n                type: 'integer',\n                minimum: 1,\n              },\n            },\n          },\n        },\n        additionalProperties: false,\n      }, {\n        type: 'object',\n        properties: {\n          maximum: {\n            type: 'number',\n            minimum: 1,\n          },\n          when: {\n            type: 'string',\n            enum: ['always', 'multiline'],\n          },\n        },\n        additionalProperties: false,\n      }],\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const maximum = configuration.maximum || 1;\n\n    const maxConfig = typeof maximum === 'number'\n      ? {\n        single: configuration.when === 'multiline' ? Infinity : maximum,\n        multi: maximum,\n      }\n      : {\n        single: maximum.single || Infinity,\n        multi: maximum.multi || Infinity,\n      };\n\n    function generateFixFunction(line, max) {\n      const sourceCode = context.getSourceCode();\n      const output = [];\n      const front = line[0].range[0];\n      const back = line[line.length - 1].range[1];\n\n      for (let i = 0; i < line.length; i += max) {\n        const nodes = line.slice(i, i + max);\n        output.push(nodes.reduce((prev, curr) => {\n          if (prev === '') {\n            return sourceCode.getText(curr);\n          }\n          return `${prev} ${sourceCode.getText(curr)}`;\n        }, ''));\n      }\n\n      const code = output.join('\\n');\n\n      return function fix(fixer) {\n        return fixer.replaceTextRange([front, back], code);\n      };\n    }\n\n    return {\n      JSXOpeningElement(node) {\n        if (!node.attributes.length) {\n          return;\n        }\n\n        const isSingleLineTag = node.loc.start.line === node.loc.end.line;\n\n        if ((isSingleLineTag ? maxConfig.single : maxConfig.multi) === Infinity) {\n          return;\n        }\n\n        const firstProp = node.attributes[0];\n        const linePartitionedProps = [[firstProp]];\n\n        node.attributes.reduce((last, decl) => {\n          if (last.loc.end.line === decl.loc.start.line) {\n            linePartitionedProps[linePartitionedProps.length - 1].push(decl);\n          } else {\n            linePartitionedProps.push([decl]);\n          }\n          return decl;\n        });\n\n        linePartitionedProps.forEach((propsInLine) => {\n          const maxPropsCountPerLine = isSingleLineTag && propsInLine[0].loc.start.line === node.loc.start.line\n            ? maxConfig.single\n            : maxConfig.multi;\n\n          if (propsInLine.length > maxPropsCountPerLine) {\n            const name = getPropName(context, propsInLine[maxPropsCountPerLine]);\n            report(context, messages.newLine, 'newLine', {\n              node: propsInLine[maxPropsCountPerLine],\n              data: {\n                prop: name,\n              },\n              fix: generateFixFunction(propsInLine, maxPropsCountPerLine),\n            });\n          }\n        });\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}