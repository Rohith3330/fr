{"ast":null,"code":"/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport * as util from \"./util\";\nlet hasOwn = Object.prototype.hasOwnProperty; // The hoist function takes a FunctionExpression or FunctionDeclaration\n// and replaces any Declaration nodes in its body with assignments, then\n// returns a VariableDeclaration containing just the names of the removed\n// declarations.\n\nexports.hoist = function (funPath) {\n  const t = util.getTypes();\n  t.assertFunction(funPath.node);\n  let vars = {};\n\n  function varDeclToExpr(_ref, includeIdentifiers) {\n    let {\n      node: vdec,\n      scope\n    } = _ref;\n    t.assertVariableDeclaration(vdec); // TODO assert.equal(vdec.kind, \"var\");\n\n    let exprs = [];\n    vdec.declarations.forEach(function (dec) {\n      // Note: We duplicate 'dec.id' here to ensure that the variable declaration IDs don't\n      // have the same 'loc' value, since that can make sourcemaps and retainLines behave poorly.\n      vars[dec.id.name] = t.identifier(dec.id.name); // Remove the binding, to avoid \"duplicate declaration\" errors when it will\n      // be injected again.\n\n      scope.removeBinding(dec.id.name);\n\n      if (dec.init) {\n        exprs.push(t.assignmentExpression(\"=\", dec.id, dec.init));\n      } else if (includeIdentifiers) {\n        exprs.push(dec.id);\n      }\n    });\n    if (exprs.length === 0) return null;\n    if (exprs.length === 1) return exprs[0];\n    return t.sequenceExpression(exprs);\n  }\n\n  funPath.get(\"body\").traverse({\n    VariableDeclaration: {\n      exit: function (path) {\n        let expr = varDeclToExpr(path, false);\n\n        if (expr === null) {\n          path.remove();\n        } else {\n          // We don't need to traverse this expression any further because\n          // there can't be any new declarations inside an expression.\n          util.replaceWithOrRemove(path, t.expressionStatement(expr));\n        } // Since the original node has been either removed or replaced,\n        // avoid traversing it any further.\n\n\n        path.skip();\n      }\n    },\n    ForStatement: function (path) {\n      let init = path.get(\"init\");\n\n      if (init.isVariableDeclaration()) {\n        util.replaceWithOrRemove(init, varDeclToExpr(init, false));\n      }\n    },\n    ForXStatement: function (path) {\n      let left = path.get(\"left\");\n\n      if (left.isVariableDeclaration()) {\n        util.replaceWithOrRemove(left, varDeclToExpr(left, true));\n      }\n    },\n    FunctionDeclaration: function (path) {\n      let node = path.node;\n      vars[node.id.name] = node.id;\n      let assignment = t.expressionStatement(t.assignmentExpression(\"=\", t.clone(node.id), t.functionExpression(path.scope.generateUidIdentifierBasedOnNode(node), node.params, node.body, node.generator, node.expression)));\n\n      if (path.parentPath.isBlockStatement()) {\n        // Insert the assignment form before the first statement in the\n        // enclosing block.\n        path.parentPath.unshiftContainer(\"body\", assignment); // Remove the function declaration now that we've inserted the\n        // equivalent assignment form at the beginning of the block.\n\n        path.remove();\n      } else {\n        // If the parent node is not a block statement, then we can just\n        // replace the declaration with the equivalent assignment form\n        // without worrying about hoisting it.\n        util.replaceWithOrRemove(path, assignment);\n      } // Remove the binding, to avoid \"duplicate declaration\" errors when it will\n      // be injected again.\n\n\n      path.scope.removeBinding(node.id.name); // Don't hoist variables out of inner functions.\n\n      path.skip();\n    },\n    FunctionExpression: function (path) {\n      // Don't descend into nested function expressions.\n      path.skip();\n    },\n    ArrowFunctionExpression: function (path) {\n      // Don't descend into nested function expressions.\n      path.skip();\n    }\n  });\n  let paramNames = {};\n  funPath.get(\"params\").forEach(function (paramPath) {\n    let param = paramPath.node;\n\n    if (t.isIdentifier(param)) {\n      paramNames[param.name] = param;\n    } else {// Variables declared by destructuring parameter patterns will be\n      // harmlessly re-declared.\n    }\n  });\n  let declarations = [];\n  Object.keys(vars).forEach(function (name) {\n    if (!hasOwn.call(paramNames, name)) {\n      declarations.push(t.variableDeclarator(vars[name], null));\n    }\n  });\n\n  if (declarations.length === 0) {\n    return null; // Be sure to handle this case!\n  }\n\n  return t.variableDeclaration(\"var\", declarations);\n};","map":{"version":3,"names":["util","hasOwn","Object","prototype","hasOwnProperty","exports","hoist","funPath","t","getTypes","assertFunction","node","vars","varDeclToExpr","includeIdentifiers","vdec","scope","assertVariableDeclaration","exprs","declarations","forEach","dec","id","name","identifier","removeBinding","init","push","assignmentExpression","length","sequenceExpression","get","traverse","VariableDeclaration","exit","path","expr","remove","replaceWithOrRemove","expressionStatement","skip","ForStatement","isVariableDeclaration","ForXStatement","left","FunctionDeclaration","assignment","clone","functionExpression","generateUidIdentifierBasedOnNode","params","body","generator","expression","parentPath","isBlockStatement","unshiftContainer","FunctionExpression","ArrowFunctionExpression","paramNames","paramPath","param","isIdentifier","keys","call","variableDeclarator","variableDeclaration"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/regenerator-transform/src/hoist.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as util from \"./util\";\nlet hasOwn = Object.prototype.hasOwnProperty;\n\n// The hoist function takes a FunctionExpression or FunctionDeclaration\n// and replaces any Declaration nodes in its body with assignments, then\n// returns a VariableDeclaration containing just the names of the removed\n// declarations.\nexports.hoist = function(funPath) {\n  const t = util.getTypes();\n  t.assertFunction(funPath.node);\n\n  let vars = {};\n\n  function varDeclToExpr({ node: vdec, scope }, includeIdentifiers) {\n    t.assertVariableDeclaration(vdec);\n    // TODO assert.equal(vdec.kind, \"var\");\n    let exprs = [];\n\n    vdec.declarations.forEach(function(dec) {\n      // Note: We duplicate 'dec.id' here to ensure that the variable declaration IDs don't\n      // have the same 'loc' value, since that can make sourcemaps and retainLines behave poorly.\n      vars[dec.id.name] = t.identifier(dec.id.name);\n\n      // Remove the binding, to avoid \"duplicate declaration\" errors when it will\n      // be injected again.\n      scope.removeBinding(dec.id.name);\n\n      if (dec.init) {\n        exprs.push(t.assignmentExpression(\n          \"=\", dec.id, dec.init\n        ));\n      } else if (includeIdentifiers) {\n        exprs.push(dec.id);\n      }\n    });\n\n    if (exprs.length === 0)\n      return null;\n\n    if (exprs.length === 1)\n      return exprs[0];\n\n    return t.sequenceExpression(exprs);\n  }\n\n  funPath.get(\"body\").traverse({\n    VariableDeclaration: {\n      exit: function(path) {\n        let expr = varDeclToExpr(path, false);\n        if (expr === null) {\n          path.remove();\n        } else {\n          // We don't need to traverse this expression any further because\n          // there can't be any new declarations inside an expression.\n          util.replaceWithOrRemove(path, t.expressionStatement(expr));\n        }\n\n        // Since the original node has been either removed or replaced,\n        // avoid traversing it any further.\n        path.skip();\n      }\n    },\n\n    ForStatement: function(path) {\n      let init = path.get(\"init\");\n      if (init.isVariableDeclaration()) {\n        util.replaceWithOrRemove(init, varDeclToExpr(init, false));\n      }\n    },\n\n    ForXStatement: function(path) {\n      let left = path.get(\"left\");\n      if (left.isVariableDeclaration()) {\n        util.replaceWithOrRemove(left, varDeclToExpr(left, true));\n      }\n    },\n\n    FunctionDeclaration: function(path) {\n      let node = path.node;\n      vars[node.id.name] = node.id;\n\n      let assignment = t.expressionStatement(\n        t.assignmentExpression(\n          \"=\",\n          t.clone(node.id),\n          t.functionExpression(\n            path.scope.generateUidIdentifierBasedOnNode(node),\n            node.params,\n            node.body,\n            node.generator,\n            node.expression\n          )\n        )\n      );\n\n      if (path.parentPath.isBlockStatement()) {\n        // Insert the assignment form before the first statement in the\n        // enclosing block.\n        path.parentPath.unshiftContainer(\"body\", assignment);\n\n        // Remove the function declaration now that we've inserted the\n        // equivalent assignment form at the beginning of the block.\n        path.remove();\n      } else {\n        // If the parent node is not a block statement, then we can just\n        // replace the declaration with the equivalent assignment form\n        // without worrying about hoisting it.\n        util.replaceWithOrRemove(path, assignment);\n      }\n\n      // Remove the binding, to avoid \"duplicate declaration\" errors when it will\n      // be injected again.\n      path.scope.removeBinding(node.id.name);\n\n      // Don't hoist variables out of inner functions.\n      path.skip();\n    },\n\n    FunctionExpression: function(path) {\n      // Don't descend into nested function expressions.\n      path.skip();\n    },\n\n    ArrowFunctionExpression: function(path) {\n      // Don't descend into nested function expressions.\n      path.skip();\n    }\n  });\n\n  let paramNames = {};\n  funPath.get(\"params\").forEach(function(paramPath) {\n    let param = paramPath.node;\n    if (t.isIdentifier(param)) {\n      paramNames[param.name] = param;\n    } else {\n      // Variables declared by destructuring parameter patterns will be\n      // harmlessly re-declared.\n    }\n  });\n\n  let declarations = [];\n\n  Object.keys(vars).forEach(function(name) {\n    if (!hasOwn.call(paramNames, name)) {\n      declarations.push(t.variableDeclarator(vars[name], null));\n    }\n  });\n\n  if (declarations.length === 0) {\n    return null; // Be sure to handle this case!\n  }\n\n  return t.variableDeclaration(\"var\", declarations);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}