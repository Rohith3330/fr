{"ast":null,"code":"\"use strict\";\n\nconst {\n  isAbsolute,\n  join\n} = require('path');\n\nconst {\n  isMatch\n} = require('micromatch');\n\nconst {\n  getOptions\n} = require('./options');\n\nconst linter = require('./linter');\n\nconst {\n  arrify,\n  parseFiles,\n  parseFoldersToGlobs\n} = require('./utils');\n/** @typedef {import('webpack').Compiler} Compiler */\n\n/** @typedef {import('./options').Options} Options */\n\n\nconst ESLINT_PLUGIN = 'ESLintWebpackPlugin';\nlet counter = 0;\n\nclass ESLintWebpackPlugin {\n  /**\n   * @param {Options} options\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.key = ESLINT_PLUGIN;\n    this.options = getOptions(options);\n    this.run = this.run.bind(this);\n  }\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    // Generate key for each compilation,\n    // this differentiates one from the other when being cached.\n    this.key = compiler.name || `${this.key}_${counter += 1}`;\n    const options = { ...this.options,\n      exclude: parseFiles(this.options.exclude || [], this.getContext(compiler)),\n      extensions: arrify(this.options.extensions),\n      resourceQueryExclude: arrify(this.options.resourceQueryExclude || []).map(item => item instanceof RegExp ? item : new RegExp(item)),\n      files: parseFiles(this.options.files || '', this.getContext(compiler))\n    };\n    const wanted = parseFoldersToGlobs(options.files, options.extensions);\n    const exclude = parseFoldersToGlobs(this.options.exclude ? options.exclude : '**/node_modules/**', []); // If `lintDirtyModulesOnly` is disabled,\n    // execute the linter on the build\n\n    if (!this.options.lintDirtyModulesOnly) {\n      compiler.hooks.run.tapPromise(this.key, c => this.run(c, options, wanted, exclude));\n    }\n\n    let isFirstRun = this.options.lintDirtyModulesOnly;\n    compiler.hooks.watchRun.tapPromise(this.key, c => {\n      if (isFirstRun) {\n        isFirstRun = false;\n        return Promise.resolve();\n      }\n\n      return this.run(c, options, wanted, exclude);\n    });\n  }\n  /**\n   * @param {Compiler} compiler\n   * @param {Omit<Options, 'resourceQueryExclude'> & {resourceQueryExclude: RegExp[]}} options\n   * @param {string[]} wanted\n   * @param {string[]} exclude\n   */\n\n\n  async run(compiler, options, wanted, exclude) {\n    // Do not re-hook\n    if ( // @ts-ignore\n    compiler.hooks.compilation.taps.find(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === this.key;\n    })) {\n      return;\n    }\n\n    compiler.hooks.compilation.tap(this.key, compilation => {\n      /** @type {import('./linter').Linter} */\n      let lint;\n      /** @type {import('./linter').Reporter} */\n\n      let report;\n      /** @type number */\n\n      let threads;\n\n      try {\n        ({\n          lint,\n          report,\n          threads\n        } = linter(this.key, options, compilation));\n      } catch (e) {\n        compilation.errors.push(e);\n        return;\n      }\n      /** @type {string[]} */\n\n\n      const files = []; // @ts-ignore\n      // Add the file to be linted\n\n      compilation.hooks.succeedModule.tap(this.key, _ref2 => {\n        let {\n          resource\n        } = _ref2;\n\n        if (resource) {\n          const [file, query] = resource.split('?');\n\n          if (file && !files.includes(file) && isMatch(file, wanted, {\n            dot: true\n          }) && !isMatch(file, exclude, {\n            dot: true\n          }) && options.resourceQueryExclude.every(reg => !reg.test(query))) {\n            files.push(file);\n\n            if (threads > 1) {\n              lint(file);\n            }\n          }\n        }\n      }); // Lint all files added\n\n      compilation.hooks.finishModules.tap(this.key, () => {\n        if (files.length > 0 && threads <= 1) {\n          lint(files);\n        }\n      }); // await and interpret results\n\n      compilation.hooks.additionalAssets.tapPromise(this.key, processResults);\n\n      async function processResults() {\n        const {\n          errors,\n          warnings,\n          generateReportAsset\n        } = await report();\n\n        if (warnings && !options.failOnWarning) {\n          // @ts-ignore\n          compilation.warnings.push(warnings);\n        } else if (warnings && options.failOnWarning) {\n          // @ts-ignore\n          compilation.errors.push(warnings);\n        }\n\n        if (errors && options.failOnError) {\n          // @ts-ignore\n          compilation.errors.push(errors);\n        } else if (errors && !options.failOnError) {\n          // @ts-ignore\n          compilation.warnings.push(errors);\n        }\n\n        if (generateReportAsset) {\n          await generateReportAsset(compilation);\n        }\n      }\n    });\n  }\n  /**\n   *\n   * @param {Compiler} compiler\n   * @returns {string}\n   */\n\n\n  getContext(compiler) {\n    if (!this.options.context) {\n      return String(compiler.options.context);\n    }\n\n    if (!isAbsolute(this.options.context)) {\n      return join(String(compiler.options.context), this.options.context);\n    }\n\n    return this.options.context;\n  }\n\n}\n\nmodule.exports = ESLintWebpackPlugin;","map":{"version":3,"names":["isAbsolute","join","require","isMatch","getOptions","linter","arrify","parseFiles","parseFoldersToGlobs","ESLINT_PLUGIN","counter","ESLintWebpackPlugin","constructor","options","key","run","bind","apply","compiler","name","exclude","getContext","extensions","resourceQueryExclude","map","item","RegExp","files","wanted","lintDirtyModulesOnly","hooks","tapPromise","c","isFirstRun","watchRun","Promise","resolve","compilation","taps","find","tap","lint","report","threads","e","errors","push","succeedModule","resource","file","query","split","includes","dot","every","reg","test","finishModules","length","additionalAssets","processResults","warnings","generateReportAsset","failOnWarning","failOnError","context","String","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-webpack-plugin/dist/index.js"],"sourcesContent":["\"use strict\";\n\nconst {\n  isAbsolute,\n  join\n} = require('path');\n\nconst {\n  isMatch\n} = require('micromatch');\n\nconst {\n  getOptions\n} = require('./options');\n\nconst linter = require('./linter');\n\nconst {\n  arrify,\n  parseFiles,\n  parseFoldersToGlobs\n} = require('./utils');\n/** @typedef {import('webpack').Compiler} Compiler */\n\n/** @typedef {import('./options').Options} Options */\n\n\nconst ESLINT_PLUGIN = 'ESLintWebpackPlugin';\nlet counter = 0;\n\nclass ESLintWebpackPlugin {\n  /**\n   * @param {Options} options\n   */\n  constructor(options = {}) {\n    this.key = ESLINT_PLUGIN;\n    this.options = getOptions(options);\n    this.run = this.run.bind(this);\n  }\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    // Generate key for each compilation,\n    // this differentiates one from the other when being cached.\n    this.key = compiler.name || `${this.key}_${counter += 1}`;\n    const options = { ...this.options,\n      exclude: parseFiles(this.options.exclude || [], this.getContext(compiler)),\n      extensions: arrify(this.options.extensions),\n      resourceQueryExclude: arrify(this.options.resourceQueryExclude || []).map(item => item instanceof RegExp ? item : new RegExp(item)),\n      files: parseFiles(this.options.files || '', this.getContext(compiler))\n    };\n    const wanted = parseFoldersToGlobs(options.files, options.extensions);\n    const exclude = parseFoldersToGlobs(this.options.exclude ? options.exclude : '**/node_modules/**', []); // If `lintDirtyModulesOnly` is disabled,\n    // execute the linter on the build\n\n    if (!this.options.lintDirtyModulesOnly) {\n      compiler.hooks.run.tapPromise(this.key, c => this.run(c, options, wanted, exclude));\n    }\n\n    let isFirstRun = this.options.lintDirtyModulesOnly;\n    compiler.hooks.watchRun.tapPromise(this.key, c => {\n      if (isFirstRun) {\n        isFirstRun = false;\n        return Promise.resolve();\n      }\n\n      return this.run(c, options, wanted, exclude);\n    });\n  }\n  /**\n   * @param {Compiler} compiler\n   * @param {Omit<Options, 'resourceQueryExclude'> & {resourceQueryExclude: RegExp[]}} options\n   * @param {string[]} wanted\n   * @param {string[]} exclude\n   */\n\n\n  async run(compiler, options, wanted, exclude) {\n    // Do not re-hook\n    if ( // @ts-ignore\n    compiler.hooks.compilation.taps.find(({\n      name\n    }) => name === this.key)) {\n      return;\n    }\n\n    compiler.hooks.compilation.tap(this.key, compilation => {\n      /** @type {import('./linter').Linter} */\n      let lint;\n      /** @type {import('./linter').Reporter} */\n\n      let report;\n      /** @type number */\n\n      let threads;\n\n      try {\n        ({\n          lint,\n          report,\n          threads\n        } = linter(this.key, options, compilation));\n      } catch (e) {\n        compilation.errors.push(e);\n        return;\n      }\n      /** @type {string[]} */\n\n\n      const files = []; // @ts-ignore\n      // Add the file to be linted\n\n      compilation.hooks.succeedModule.tap(this.key, ({\n        resource\n      }) => {\n        if (resource) {\n          const [file, query] = resource.split('?');\n\n          if (file && !files.includes(file) && isMatch(file, wanted, {\n            dot: true\n          }) && !isMatch(file, exclude, {\n            dot: true\n          }) && options.resourceQueryExclude.every(reg => !reg.test(query))) {\n            files.push(file);\n\n            if (threads > 1) {\n              lint(file);\n            }\n          }\n        }\n      }); // Lint all files added\n\n      compilation.hooks.finishModules.tap(this.key, () => {\n        if (files.length > 0 && threads <= 1) {\n          lint(files);\n        }\n      }); // await and interpret results\n\n      compilation.hooks.additionalAssets.tapPromise(this.key, processResults);\n\n      async function processResults() {\n        const {\n          errors,\n          warnings,\n          generateReportAsset\n        } = await report();\n\n        if (warnings && !options.failOnWarning) {\n          // @ts-ignore\n          compilation.warnings.push(warnings);\n        } else if (warnings && options.failOnWarning) {\n          // @ts-ignore\n          compilation.errors.push(warnings);\n        }\n\n        if (errors && options.failOnError) {\n          // @ts-ignore\n          compilation.errors.push(errors);\n        } else if (errors && !options.failOnError) {\n          // @ts-ignore\n          compilation.warnings.push(errors);\n        }\n\n        if (generateReportAsset) {\n          await generateReportAsset(compilation);\n        }\n      }\n    });\n  }\n  /**\n   *\n   * @param {Compiler} compiler\n   * @returns {string}\n   */\n\n\n  getContext(compiler) {\n    if (!this.options.context) {\n      return String(compiler.options.context);\n    }\n\n    if (!isAbsolute(this.options.context)) {\n      return join(String(compiler.options.context), this.options.context);\n    }\n\n    return this.options.context;\n  }\n\n}\n\nmodule.exports = ESLintWebpackPlugin;"],"mappings":"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"},"metadata":{},"sourceType":"script"}