{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'no-redeclare',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow variable redeclaration',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        builtinGlobals: {\n          type: 'boolean'\n        },\n        ignoreDeclarationMerge: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      redeclared: \"'{{id}}' is already defined.\",\n      redeclaredAsBuiltin: \"'{{id}}' is already defined as a built-in global variable.\",\n      redeclaredBySyntax: \"'{{id}}' is already defined by a variable declaration.\"\n    }\n  },\n  defaultOptions: [{\n    builtinGlobals: true,\n    ignoreDeclarationMerge: true\n  }],\n\n  create(context, _ref) {\n    let [options] = _ref;\n    const sourceCode = context.getSourceCode();\n    const CLASS_DECLARATION_MERGE_NODES = new Set([utils_1.AST_NODE_TYPES.TSInterfaceDeclaration, utils_1.AST_NODE_TYPES.TSModuleDeclaration, utils_1.AST_NODE_TYPES.ClassDeclaration]);\n    const FUNCTION_DECLARATION_MERGE_NODES = new Set([utils_1.AST_NODE_TYPES.TSModuleDeclaration, utils_1.AST_NODE_TYPES.FunctionDeclaration]);\n    const ENUM_DECLARATION_MERGE_NODES = new Set([utils_1.AST_NODE_TYPES.TSEnumDeclaration, utils_1.AST_NODE_TYPES.TSModuleDeclaration]);\n\n    function* iterateDeclarations(variable) {\n      if ((options === null || options === void 0 ? void 0 : options.builtinGlobals) && 'eslintImplicitGlobalSetting' in variable && (variable.eslintImplicitGlobalSetting === 'readonly' || variable.eslintImplicitGlobalSetting === 'writable')) {\n        yield {\n          type: 'builtin'\n        };\n      }\n\n      if ('eslintExplicitGlobalComments' in variable && variable.eslintExplicitGlobalComments) {\n        for (const comment of variable.eslintExplicitGlobalComments) {\n          yield {\n            type: 'comment',\n            node: comment,\n            loc: util.getNameLocationInGlobalDirectiveComment(sourceCode, comment, variable.name)\n          };\n        }\n      }\n\n      const identifiers = variable.identifiers.map(id => ({\n        identifier: id,\n        parent: id.parent\n      })) // ignore function declarations because TS will treat them as an overload\n      .filter(_ref2 => {\n        let {\n          parent\n        } = _ref2;\n        return parent.type !== utils_1.AST_NODE_TYPES.TSDeclareFunction;\n      });\n\n      if (options.ignoreDeclarationMerge && identifiers.length > 1) {\n        if ( // interfaces merging\n        identifiers.every(_ref3 => {\n          let {\n            parent\n          } = _ref3;\n          return parent.type === utils_1.AST_NODE_TYPES.TSInterfaceDeclaration;\n        })) {\n          return;\n        }\n\n        if ( // namespace/module merging\n        identifiers.every(_ref4 => {\n          let {\n            parent\n          } = _ref4;\n          return parent.type === utils_1.AST_NODE_TYPES.TSModuleDeclaration;\n        })) {\n          return;\n        }\n\n        if ( // class + interface/namespace merging\n        identifiers.every(_ref5 => {\n          let {\n            parent\n          } = _ref5;\n          return CLASS_DECLARATION_MERGE_NODES.has(parent.type);\n        })) {\n          const classDecls = identifiers.filter(_ref6 => {\n            let {\n              parent\n            } = _ref6;\n            return parent.type === utils_1.AST_NODE_TYPES.ClassDeclaration;\n          });\n\n          if (classDecls.length === 1) {\n            // safe declaration merging\n            return;\n          } // there's more than one class declaration, which needs to be reported\n\n\n          for (const {\n            identifier\n          } of classDecls) {\n            yield {\n              type: 'syntax',\n              node: identifier,\n              loc: identifier.loc\n            };\n          }\n\n          return;\n        }\n\n        if ( // class + interface/namespace merging\n        identifiers.every(_ref7 => {\n          let {\n            parent\n          } = _ref7;\n          return FUNCTION_DECLARATION_MERGE_NODES.has(parent.type);\n        })) {\n          const functionDecls = identifiers.filter(_ref8 => {\n            let {\n              parent\n            } = _ref8;\n            return parent.type === utils_1.AST_NODE_TYPES.FunctionDeclaration;\n          });\n\n          if (functionDecls.length === 1) {\n            // safe declaration merging\n            return;\n          } // there's more than one function declaration, which needs to be reported\n\n\n          for (const {\n            identifier\n          } of functionDecls) {\n            yield {\n              type: 'syntax',\n              node: identifier,\n              loc: identifier.loc\n            };\n          }\n\n          return;\n        }\n\n        if ( // enum + namespace merging\n        identifiers.every(_ref9 => {\n          let {\n            parent\n          } = _ref9;\n          return ENUM_DECLARATION_MERGE_NODES.has(parent.type);\n        })) {\n          const enumDecls = identifiers.filter(_ref10 => {\n            let {\n              parent\n            } = _ref10;\n            return parent.type === utils_1.AST_NODE_TYPES.TSEnumDeclaration;\n          });\n\n          if (enumDecls.length === 1) {\n            // safe declaration merging\n            return;\n          } // there's more than one enum declaration, which needs to be reported\n\n\n          for (const {\n            identifier\n          } of enumDecls) {\n            yield {\n              type: 'syntax',\n              node: identifier,\n              loc: identifier.loc\n            };\n          }\n\n          return;\n        }\n      }\n\n      for (const {\n        identifier\n      } of identifiers) {\n        yield {\n          type: 'syntax',\n          node: identifier,\n          loc: identifier.loc\n        };\n      }\n    }\n\n    function findVariablesInScope(scope) {\n      for (const variable of scope.variables) {\n        const [declaration, ...extraDeclarations] = iterateDeclarations(variable);\n\n        if (extraDeclarations.length === 0) {\n          continue;\n        }\n        /*\n         * If the type of a declaration is different from the type of\n         * the first declaration, it shows the location of the first\n         * declaration.\n         */\n\n\n        const detailMessageId = declaration.type === 'builtin' ? 'redeclaredAsBuiltin' : 'redeclaredBySyntax';\n        const data = {\n          id: variable.name\n        }; // Report extra declarations.\n\n        for (const {\n          type,\n          node,\n          loc\n        } of extraDeclarations) {\n          const messageId = type === declaration.type ? 'redeclared' : detailMessageId;\n\n          if (node) {\n            context.report({\n              node,\n              loc,\n              messageId,\n              data\n            });\n          } else if (loc) {\n            context.report({\n              loc,\n              messageId,\n              data\n            });\n          }\n        }\n      }\n    }\n    /**\n     * Find variables in the current scope.\n     */\n\n\n    function checkForBlock(node) {\n      const scope = context.getScope();\n      /*\n       * In ES5, some node type such as `BlockStatement` doesn't have that scope.\n       * `scope.block` is a different node in such a case.\n       */\n\n      if (scope.block === node) {\n        findVariablesInScope(scope);\n      }\n    }\n\n    return {\n      Program() {\n        const scope = context.getScope();\n        findVariablesInScope(scope); // Node.js or ES modules has a special scope.\n\n        if (scope.type === 'global' && scope.childScopes[0] && // The special scope's block is the Program node.\n        scope.block === scope.childScopes[0].block) {\n          findVariablesInScope(scope.childScopes[0]);\n        }\n      },\n\n      FunctionDeclaration: checkForBlock,\n      FunctionExpression: checkForBlock,\n      ArrowFunctionExpression: checkForBlock,\n      BlockStatement: checkForBlock,\n      ForStatement: checkForBlock,\n      ForInStatement: checkForBlock,\n      ForOfStatement: checkForBlock,\n      SwitchStatement: checkForBlock\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["exports","util","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","schema","properties","builtinGlobals","ignoreDeclarationMerge","additionalProperties","messages","redeclared","redeclaredAsBuiltin","redeclaredBySyntax","defaultOptions","create","context","options","sourceCode","getSourceCode","CLASS_DECLARATION_MERGE_NODES","Set","utils_1","TSInterfaceDeclaration","TSModuleDeclaration","ClassDeclaration","FUNCTION_DECLARATION_MERGE_NODES","FunctionDeclaration","ENUM_DECLARATION_MERGE_NODES","TSEnumDeclaration","iterateDeclarations","variable","eslintImplicitGlobalSetting","eslintExplicitGlobalComments","comment","node","loc","getNameLocationInGlobalDirectiveComment","identifiers","map","id","identifier","parent","filter","TSDeclareFunction","length","every","has","classDecls","functionDecls","enumDecls","findVariablesInScope","scope","variables","declaration","extraDeclarations","detailMessageId","data","messageId","report","checkForBlock","getScope","block","Program","childScopes","FunctionExpression","ArrowFunctionExpression","BlockStatement","ForStatement","ForInStatement","ForOfStatement","SwitchStatement"],"sources":["../../src/rules/no-redeclare.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}