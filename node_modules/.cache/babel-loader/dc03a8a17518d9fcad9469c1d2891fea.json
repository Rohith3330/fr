{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst index_1 = __importDefault(require(\"./Base/index\"));\n\nconst Vector_1 = __importDefault(require(\"../SequentialContainer/Vector\"));\n\nconst OrderedMap_1 = __importDefault(require(\"../TreeContainer/OrderedMap\"));\n\nclass HashMap extends index_1.default {\n  constructor() {\n    let container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let initBucketNum = arguments.length > 1 ? arguments[1] : undefined;\n    let hashFunc = arguments.length > 2 ? arguments[2] : undefined;\n    super(initBucketNum, hashFunc);\n    this.hashTable = [];\n    container.forEach(element => this.setElement(element[0], element[1]));\n  }\n\n  reAllocate() {\n    if (this.bucketNum >= index_1.default.maxBucketNum) return;\n    const newHashTable = [];\n    const originalBucketNum = this.bucketNum;\n    this.bucketNum <<= 1;\n    const keys = Object.keys(this.hashTable);\n    const keyNums = keys.length;\n\n    for (let i = 0; i < keyNums; ++i) {\n      const index = parseInt(keys[i]);\n      const container = this.hashTable[index];\n      const size = container.size();\n      if (size === 0) continue;\n\n      if (size === 1) {\n        const element = container.front();\n        newHashTable[this.hashFunc(element[0]) & this.bucketNum - 1] = new Vector_1.default([element], false);\n        continue;\n      }\n\n      const lowList = [];\n      const highList = [];\n      container.forEach(element => {\n        const hashCode = this.hashFunc(element[0]);\n\n        if ((hashCode & originalBucketNum) === 0) {\n          lowList.push(element);\n        } else highList.push(element);\n      });\n\n      if (container instanceof OrderedMap_1.default) {\n        if (lowList.length > index_1.default.untreeifyThreshold) {\n          newHashTable[index] = new OrderedMap_1.default(lowList);\n        } else if (lowList.length) {\n          newHashTable[index] = new Vector_1.default(lowList, false);\n        }\n\n        if (highList.length > index_1.default.untreeifyThreshold) {\n          newHashTable[index + originalBucketNum] = new OrderedMap_1.default(highList);\n        } else if (highList.length) {\n          newHashTable[index + originalBucketNum] = new Vector_1.default(highList, false);\n        }\n      } else {\n        if (lowList.length >= index_1.default.treeifyThreshold) {\n          newHashTable[index] = new OrderedMap_1.default(lowList);\n        } else if (lowList.length) {\n          newHashTable[index] = new Vector_1.default(lowList, false);\n        }\n\n        if (highList.length >= index_1.default.treeifyThreshold) {\n          newHashTable[index + originalBucketNum] = new OrderedMap_1.default(highList);\n        } else if (highList.length) {\n          newHashTable[index + originalBucketNum] = new Vector_1.default(highList, false);\n        }\n      }\n    }\n\n    this.hashTable = newHashTable;\n  }\n\n  forEach(callback) {\n    const containers = Object.values(this.hashTable);\n    const containersNum = containers.length;\n    let index = 0;\n\n    for (let i = 0; i < containersNum; ++i) {\n      containers[i].forEach(element => callback(element, index++));\n    }\n  }\n  /**\n   * @description Insert a new key-value pair to hash map or set value by key.\n   * @param key The key you want to insert.\n   * @param value The value you want to insert.\n   * @example HashMap.setElement(1, 2); // insert a key-value pair [1, 2]\n   */\n\n\n  setElement(key, value) {\n    const index = this.hashFunc(key) & this.bucketNum - 1;\n    const container = this.hashTable[index];\n\n    if (!container) {\n      this.length += 1;\n      this.hashTable[index] = new Vector_1.default([[key, value]], false);\n    } else {\n      const preSize = container.size();\n\n      if (container instanceof Vector_1.default) {\n        for (const pair of container) {\n          if (pair[0] === key) {\n            pair[1] = value;\n            return;\n          }\n        }\n\n        container.pushBack([key, value]);\n\n        if (preSize + 1 >= HashMap.treeifyThreshold) {\n          if (this.bucketNum <= HashMap.minTreeifySize) {\n            this.length += 1;\n            this.reAllocate();\n            return;\n          }\n\n          this.hashTable[index] = new OrderedMap_1.default(this.hashTable[index]);\n        }\n\n        this.length += 1;\n      } else {\n        container.setElement(key, value);\n        const curSize = container.size();\n        this.length += curSize - preSize;\n      }\n    }\n\n    if (this.length > this.bucketNum * HashMap.sigma) {\n      this.reAllocate();\n    }\n  }\n  /**\n   * @description Get the value of the element which has the specified key.\n   * @param key The key you want to get.\n   */\n\n\n  getElementByKey(key) {\n    const index = this.hashFunc(key) & this.bucketNum - 1;\n    const container = this.hashTable[index];\n    if (!container) return undefined;\n\n    if (container instanceof OrderedMap_1.default) {\n      return container.getElementByKey(key);\n    } else {\n      for (const pair of container) {\n        if (pair[0] === key) return pair[1];\n      }\n\n      return undefined;\n    }\n  }\n\n  eraseElementByKey(key) {\n    const index = this.hashFunc(key) & this.bucketNum - 1;\n    const container = this.hashTable[index];\n    if (!container) return;\n\n    if (container instanceof Vector_1.default) {\n      let pos = 0;\n\n      for (const pair of container) {\n        if (pair[0] === key) {\n          container.eraseElementByPos(pos);\n          this.length -= 1;\n          return;\n        }\n\n        pos += 1;\n      }\n    } else {\n      const preSize = container.size();\n      container.eraseElementByKey(key);\n      const curSize = container.size();\n      this.length += curSize - preSize;\n\n      if (curSize <= index_1.default.untreeifyThreshold) {\n        this.hashTable[index] = new Vector_1.default(container);\n      }\n    }\n  }\n\n  find(key) {\n    const index = this.hashFunc(key) & this.bucketNum - 1;\n    const container = this.hashTable[index];\n    if (!container) return false;\n\n    if (container instanceof OrderedMap_1.default) {\n      return !container.find(key).equals(container.end());\n    }\n\n    for (const pair of container) {\n      if (pair[0] === key) return true;\n    }\n\n    return false;\n  }\n\n  [Symbol.iterator]() {\n    return function* () {\n      const containers = Object.values(this.hashTable);\n      const containersNum = containers.length;\n\n      for (let i = 0; i < containersNum; ++i) {\n        const container = containers[i];\n\n        for (const element of container) {\n          yield element;\n        }\n      }\n    }.bind(this)();\n  }\n\n}\n\nexports.default = HashMap;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","index_1","require","Vector_1","OrderedMap_1","HashMap","default","constructor","container","initBucketNum","hashFunc","hashTable","forEach","element","setElement","reAllocate","bucketNum","maxBucketNum","newHashTable","originalBucketNum","keys","keyNums","length","i","index","parseInt","size","front","lowList","highList","hashCode","push","untreeifyThreshold","treeifyThreshold","callback","containers","values","containersNum","key","preSize","pair","pushBack","minTreeifySize","curSize","sigma","getElementByKey","undefined","eraseElementByKey","pos","eraseElementByPos","find","equals","end","Symbol","iterator","bind"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/js-sdsl/dist/cjs/container/HashContainer/HashMap.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_1 = __importDefault(require(\"./Base/index\"));\nconst Vector_1 = __importDefault(require(\"../SequentialContainer/Vector\"));\nconst OrderedMap_1 = __importDefault(require(\"../TreeContainer/OrderedMap\"));\nclass HashMap extends index_1.default {\n    constructor(container = [], initBucketNum, hashFunc) {\n        super(initBucketNum, hashFunc);\n        this.hashTable = [];\n        container.forEach(element => this.setElement(element[0], element[1]));\n    }\n    reAllocate() {\n        if (this.bucketNum >= index_1.default.maxBucketNum)\n            return;\n        const newHashTable = [];\n        const originalBucketNum = this.bucketNum;\n        this.bucketNum <<= 1;\n        const keys = Object.keys(this.hashTable);\n        const keyNums = keys.length;\n        for (let i = 0; i < keyNums; ++i) {\n            const index = parseInt(keys[i]);\n            const container = this.hashTable[index];\n            const size = container.size();\n            if (size === 0)\n                continue;\n            if (size === 1) {\n                const element = container.front();\n                newHashTable[this.hashFunc(element[0]) & (this.bucketNum - 1)] = new Vector_1.default([element], false);\n                continue;\n            }\n            const lowList = [];\n            const highList = [];\n            container.forEach(element => {\n                const hashCode = this.hashFunc(element[0]);\n                if ((hashCode & originalBucketNum) === 0) {\n                    lowList.push(element);\n                }\n                else\n                    highList.push(element);\n            });\n            if (container instanceof OrderedMap_1.default) {\n                if (lowList.length > index_1.default.untreeifyThreshold) {\n                    newHashTable[index] = new OrderedMap_1.default(lowList);\n                }\n                else if (lowList.length) {\n                    newHashTable[index] = new Vector_1.default(lowList, false);\n                }\n                if (highList.length > index_1.default.untreeifyThreshold) {\n                    newHashTable[index + originalBucketNum] = new OrderedMap_1.default(highList);\n                }\n                else if (highList.length) {\n                    newHashTable[index + originalBucketNum] = new Vector_1.default(highList, false);\n                }\n            }\n            else {\n                if (lowList.length >= index_1.default.treeifyThreshold) {\n                    newHashTable[index] = new OrderedMap_1.default(lowList);\n                }\n                else if (lowList.length) {\n                    newHashTable[index] = new Vector_1.default(lowList, false);\n                }\n                if (highList.length >= index_1.default.treeifyThreshold) {\n                    newHashTable[index + originalBucketNum] = new OrderedMap_1.default(highList);\n                }\n                else if (highList.length) {\n                    newHashTable[index + originalBucketNum] = new Vector_1.default(highList, false);\n                }\n            }\n        }\n        this.hashTable = newHashTable;\n    }\n    forEach(callback) {\n        const containers = Object.values(this.hashTable);\n        const containersNum = containers.length;\n        let index = 0;\n        for (let i = 0; i < containersNum; ++i) {\n            containers[i].forEach(element => callback(element, index++));\n        }\n    }\n    /**\n     * @description Insert a new key-value pair to hash map or set value by key.\n     * @param key The key you want to insert.\n     * @param value The value you want to insert.\n     * @example HashMap.setElement(1, 2); // insert a key-value pair [1, 2]\n     */\n    setElement(key, value) {\n        const index = this.hashFunc(key) & (this.bucketNum - 1);\n        const container = this.hashTable[index];\n        if (!container) {\n            this.length += 1;\n            this.hashTable[index] = new Vector_1.default([[key, value]], false);\n        }\n        else {\n            const preSize = container.size();\n            if (container instanceof Vector_1.default) {\n                for (const pair of container) {\n                    if (pair[0] === key) {\n                        pair[1] = value;\n                        return;\n                    }\n                }\n                container.pushBack([key, value]);\n                if (preSize + 1 >= HashMap.treeifyThreshold) {\n                    if (this.bucketNum <= HashMap.minTreeifySize) {\n                        this.length += 1;\n                        this.reAllocate();\n                        return;\n                    }\n                    this.hashTable[index] = new OrderedMap_1.default(this.hashTable[index]);\n                }\n                this.length += 1;\n            }\n            else {\n                container.setElement(key, value);\n                const curSize = container.size();\n                this.length += curSize - preSize;\n            }\n        }\n        if (this.length > this.bucketNum * HashMap.sigma) {\n            this.reAllocate();\n        }\n    }\n    /**\n     * @description Get the value of the element which has the specified key.\n     * @param key The key you want to get.\n     */\n    getElementByKey(key) {\n        const index = this.hashFunc(key) & (this.bucketNum - 1);\n        const container = this.hashTable[index];\n        if (!container)\n            return undefined;\n        if (container instanceof OrderedMap_1.default) {\n            return container.getElementByKey(key);\n        }\n        else {\n            for (const pair of container) {\n                if (pair[0] === key)\n                    return pair[1];\n            }\n            return undefined;\n        }\n    }\n    eraseElementByKey(key) {\n        const index = this.hashFunc(key) & (this.bucketNum - 1);\n        const container = this.hashTable[index];\n        if (!container)\n            return;\n        if (container instanceof Vector_1.default) {\n            let pos = 0;\n            for (const pair of container) {\n                if (pair[0] === key) {\n                    container.eraseElementByPos(pos);\n                    this.length -= 1;\n                    return;\n                }\n                pos += 1;\n            }\n        }\n        else {\n            const preSize = container.size();\n            container.eraseElementByKey(key);\n            const curSize = container.size();\n            this.length += curSize - preSize;\n            if (curSize <= index_1.default.untreeifyThreshold) {\n                this.hashTable[index] = new Vector_1.default(container);\n            }\n        }\n    }\n    find(key) {\n        const index = this.hashFunc(key) & (this.bucketNum - 1);\n        const container = this.hashTable[index];\n        if (!container)\n            return false;\n        if (container instanceof OrderedMap_1.default) {\n            return !container.find(key)\n                .equals(container.end());\n        }\n        for (const pair of container) {\n            if (pair[0] === key)\n                return true;\n        }\n        return false;\n    }\n    [Symbol.iterator]() {\n        return function* () {\n            const containers = Object.values(this.hashTable);\n            const containersNum = containers.length;\n            for (let i = 0; i < containersNum; ++i) {\n                const container = containers[i];\n                for (const element of container) {\n                    yield element;\n                }\n            }\n        }.bind(this)();\n    }\n}\nexports.default = HashMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}