{"ast":null,"code":"\"use strict\";\n/*--------------------------------------------------------------------------\r\n\r\n@sinclair/typebox/compiler\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n---------------------------------------------------------------------------*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeCompiler = exports.TypeCompilerUnknownTypeError = exports.Property = exports.TypeCheck = void 0;\n\nconst index_1 = require(\"../errors/index\");\n\nconst index_2 = require(\"../guard/index\");\n\nconst index_3 = require(\"../format/index\");\n\nconst Types = require(\"../typebox\"); // -------------------------------------------------------------------\n// TypeCheck\n// -------------------------------------------------------------------\n\n\nclass TypeCheck {\n  constructor(schema, references, checkFunc, code) {\n    this.schema = schema;\n    this.references = references;\n    this.checkFunc = checkFunc;\n    this.code = code;\n  }\n  /** Returns the generated validation code used to validate this type. */\n\n\n  Code() {\n    return this.code;\n  }\n  /** Returns an iterator for each error in this value. */\n\n\n  Errors(value) {\n    return index_1.ValueErrors.Errors(this.schema, this.references, value);\n  }\n  /** Returns true if the value matches the given type. */\n\n\n  Check(value) {\n    return this.checkFunc(value);\n  }\n\n}\n\nexports.TypeCheck = TypeCheck; // -------------------------------------------------------------------\n// Property\n// -------------------------------------------------------------------\n\nvar Property;\n\n(function (Property) {\n  function DollarSign(code) {\n    return code === 36;\n  }\n\n  function Underscore(code) {\n    return code === 95;\n  }\n\n  function Numeric(code) {\n    return code >= 48 && code <= 57;\n  }\n\n  function Alpha(code) {\n    return code >= 65 && code <= 90 || code >= 97 && code <= 122;\n  }\n\n  function Check(propertyName) {\n    if (propertyName.length === 0) return false;\n    {\n      const code = propertyName.charCodeAt(0);\n\n      if (!(DollarSign(code) || Underscore(code) || Alpha(code))) {\n        return false;\n      }\n    }\n\n    for (let i = 1; i < propertyName.length; i++) {\n      const code = propertyName.charCodeAt(i);\n\n      if (!(DollarSign(code) || Underscore(code) || Alpha(code) || Numeric(code))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  Property.Check = Check;\n})(Property = exports.Property || (exports.Property = {})); // -------------------------------------------------------------------\n// TypeCompiler\n// -------------------------------------------------------------------\n\n\nclass TypeCompilerUnknownTypeError extends Error {\n  constructor(schema) {\n    super('TypeCompiler: Unknown type');\n    this.schema = schema;\n  }\n\n}\n\nexports.TypeCompilerUnknownTypeError = TypeCompilerUnknownTypeError;\n/** Compiles Types for Runtime Type Checking */\n\nvar TypeCompiler;\n\n(function (TypeCompiler) {\n  // -------------------------------------------------------------------\n  // Types\n  // -------------------------------------------------------------------\n  function* Any(schema, value) {\n    yield '(true)';\n  }\n\n  function* Array(schema, value) {\n    const expression = CreateExpression(schema.items, 'value');\n    if (schema.minItems !== undefined) yield `(${value}.length >= ${schema.minItems})`;\n    if (schema.maxItems !== undefined) yield `(${value}.length <= ${schema.maxItems})`;\n    if (schema.uniqueItems !== undefined) yield `(new Set(${value}).size === ${value}.length)`;\n    yield `(Array.isArray(${value}) && ${value}.every(value => ${expression}))`;\n  }\n\n  function* Boolean(schema, value) {\n    yield `(typeof ${value} === 'boolean')`;\n  }\n\n  function* Constructor(schema, value) {\n    yield* Visit(schema.returns, `${value}.prototype`);\n  }\n\n  function* Function(schema, value) {\n    yield `(typeof ${value} === 'function')`;\n  }\n\n  function* Integer(schema, value) {\n    yield `(typeof ${value} === 'number' && Number.isInteger(${value}))`;\n    if (schema.multipleOf !== undefined) yield `(${value} % ${schema.multipleOf} === 0)`;\n    if (schema.exclusiveMinimum !== undefined) yield `(${value} > ${schema.exclusiveMinimum})`;\n    if (schema.exclusiveMaximum !== undefined) yield `(${value} < ${schema.exclusiveMaximum})`;\n    if (schema.minimum !== undefined) yield `(${value} >= ${schema.minimum})`;\n    if (schema.maximum !== undefined) yield `(${value} <= ${schema.maximum})`;\n  }\n\n  function* Literal(schema, value) {\n    if (typeof schema.const === 'number' || typeof schema.const === 'boolean') {\n      yield `(${value} === ${schema.const})`;\n    } else {\n      yield `(${value} === '${schema.const}')`;\n    }\n  }\n\n  function* Never(schema, value) {\n    yield `(false)`;\n  }\n\n  function* Null(schema, value) {\n    yield `(${value} === null)`;\n  }\n\n  function* Number(schema, value) {\n    yield `(typeof ${value} === 'number')`;\n    if (schema.multipleOf !== undefined) yield `(${value} % ${schema.multipleOf} === 0)`;\n    if (schema.exclusiveMinimum !== undefined) yield `(${value} > ${schema.exclusiveMinimum})`;\n    if (schema.exclusiveMaximum !== undefined) yield `(${value} < ${schema.exclusiveMaximum})`;\n    if (schema.minimum !== undefined) yield `(${value} >= ${schema.minimum})`;\n    if (schema.maximum !== undefined) yield `(${value} <= ${schema.maximum})`;\n  }\n\n  function* Object(schema, value) {\n    yield `(typeof ${value} === 'object' && ${value} !== null && !Array.isArray(${value}))`;\n    if (schema.minProperties !== undefined) yield `(Object.keys(${value}).length >= ${schema.minProperties})`;\n    if (schema.maxProperties !== undefined) yield `(Object.keys(${value}).length <= ${schema.maxProperties})`;\n    const propertyKeys = globalThis.Object.keys(schema.properties);\n\n    if (schema.additionalProperties === false) {\n      // Optimization: If the property key length matches the required keys length\n      // then we only need check that the values property key length matches that\n      // of the property key length. This is because exhaustive testing for values\n      // will occur in subsequent property tests.\n      if (schema.required && schema.required.length === propertyKeys.length) {\n        yield `(Object.keys(${value}).length === ${propertyKeys.length})`;\n      } else {\n        const keys = `[${propertyKeys.map(key => `'${key}'`).join(', ')}]`;\n        yield `(Object.keys(${value}).every(key => ${keys}.includes(key)))`;\n      }\n    }\n\n    for (const propertyKey of propertyKeys) {\n      const memberExpression = Property.Check(propertyKey) ? `${value}.${propertyKey}` : `${value}['${propertyKey}']`;\n      const propertySchema = schema.properties[propertyKey];\n\n      if (schema.required && schema.required.includes(propertyKey)) {\n        yield* Visit(propertySchema, memberExpression);\n      } else {\n        const expression = CreateExpression(propertySchema, memberExpression);\n        yield `(${memberExpression} === undefined ? true : (${expression}))`;\n      }\n    }\n  }\n\n  function* Promise(schema, value) {\n    yield `(typeof value === 'object' && typeof ${value}.then === 'function')`;\n  }\n\n  function* Record(schema, value) {\n    yield `(typeof ${value} === 'object' && ${value} !== null && !Array.isArray(${value}))`;\n    const [keyPattern, valueSchema] = globalThis.Object.entries(schema.patternProperties)[0];\n    const local = PushLocal(`new RegExp(/${keyPattern}/)`);\n    yield `(Object.keys(${value}).every(key => ${local}.test(key)))`;\n    const expression = CreateExpression(valueSchema, 'value');\n    yield `(Object.values(${value}).every(value => ${expression}))`;\n  }\n\n  function* Ref(schema, value) {\n    // Reference: If we have seen this reference before we can just yield and return\n    // the function call. If this isn't the case we defer to visit to generate and\n    // set the function for subsequent passes. Consider for refactor.\n    if (names.has(schema.$ref)) return yield `(${CreateFunctionName(schema.$ref)}(${value}))`;\n    if (!referenceMap.has(schema.$ref)) throw Error(`TypeCompiler.Ref: Cannot de-reference schema with $id '${schema.$ref}'`);\n    const reference = referenceMap.get(schema.$ref);\n    yield* Visit(reference, value);\n  }\n\n  function* Self(schema, value) {\n    const func = CreateFunctionName(schema.$ref);\n    yield `(${func}(${value}))`;\n  }\n\n  function* String(schema, value) {\n    yield `(typeof ${value} === 'string')`;\n\n    if (schema.minLength !== undefined) {\n      yield `(${value}.length >= ${schema.minLength})`;\n    }\n\n    if (schema.maxLength !== undefined) {\n      yield `(${value}.length <= ${schema.maxLength})`;\n    }\n\n    if (schema.pattern !== undefined) {\n      const local = PushLocal(`new RegExp(/${schema.pattern}/);`);\n      yield `(${local}.test(${value}))`;\n    }\n\n    if (schema.format !== undefined) {\n      yield `(format('${schema.format}', ${value}))`;\n    }\n  }\n\n  function* Tuple(schema, value) {\n    yield `(Array.isArray(${value}))`;\n    if (schema.items === undefined) return yield `(${value}.length === 0)`;\n    yield `(${value}.length === ${schema.maxItems})`;\n\n    for (let i = 0; i < schema.items.length; i++) {\n      const expression = CreateExpression(schema.items[i], `${value}[${i}]`);\n      yield `(${expression})`;\n    }\n  }\n\n  function* Undefined(schema, value) {\n    yield `(${value} === undefined)`;\n  }\n\n  function* Union(schema, value) {\n    const expressions = schema.anyOf.map(schema => CreateExpression(schema, value));\n    yield `(${expressions.join(' || ')})`;\n  }\n\n  function* Uint8Array(schema, value) {\n    yield `(${value} instanceof Uint8Array)`;\n    if (schema.maxByteLength) yield `(${value}.length <= ${schema.maxByteLength})`;\n    if (schema.minByteLength) yield `(${value}.length >= ${schema.minByteLength})`;\n  }\n\n  function* Unknown(schema, value) {\n    yield '(true)';\n  }\n\n  function* Void(schema, value) {\n    yield `(${value} === null)`;\n  }\n\n  function* Visit(schema, value) {\n    // Reference: Referenced schemas can originate from either additional schemas\n    // or inline in the schema itself. Ideally the recursive path should align to\n    // reference path. Consider for refactor.\n    if (schema.$id && !names.has(schema.$id)) {\n      names.add(schema.$id);\n      const name = CreateFunctionName(schema.$id);\n      const body = CreateFunction(name, schema, 'value');\n      PushFunction(body);\n      yield `(${name}(${value}))`;\n      return;\n    }\n\n    const anySchema = schema;\n\n    switch (anySchema[Types.Kind]) {\n      case 'Any':\n        return yield* Any(anySchema, value);\n\n      case 'Array':\n        return yield* Array(anySchema, value);\n\n      case 'Boolean':\n        return yield* Boolean(anySchema, value);\n\n      case 'Constructor':\n        return yield* Constructor(anySchema, value);\n\n      case 'Function':\n        return yield* Function(anySchema, value);\n\n      case 'Integer':\n        return yield* Integer(anySchema, value);\n\n      case 'Literal':\n        return yield* Literal(anySchema, value);\n\n      case 'Never':\n        return yield* Never(anySchema, value);\n\n      case 'Null':\n        return yield* Null(anySchema, value);\n\n      case 'Number':\n        return yield* Number(anySchema, value);\n\n      case 'Object':\n        return yield* Object(anySchema, value);\n\n      case 'Promise':\n        return yield* Promise(anySchema, value);\n\n      case 'Record':\n        return yield* Record(anySchema, value);\n\n      case 'Ref':\n        return yield* Ref(anySchema, value);\n\n      case 'Self':\n        return yield* Self(anySchema, value);\n\n      case 'String':\n        return yield* String(anySchema, value);\n\n      case 'Tuple':\n        return yield* Tuple(anySchema, value);\n\n      case 'Undefined':\n        return yield* Undefined(anySchema, value);\n\n      case 'Union':\n        return yield* Union(anySchema, value);\n\n      case 'Uint8Array':\n        return yield* Uint8Array(anySchema, value);\n\n      case 'Unknown':\n        return yield* Unknown(anySchema, value);\n\n      case 'Void':\n        return yield* Void(anySchema, value);\n\n      default:\n        throw new TypeCompilerUnknownTypeError(schema);\n    }\n  } // -------------------------------------------------------------------\n  // Compile State\n  // -------------------------------------------------------------------\n\n\n  const referenceMap = new Map();\n  const locals = new Set(); // local variables and functions\n\n  const names = new Set(); // cache of local functions\n\n  function ResetCompiler() {\n    referenceMap.clear();\n    locals.clear();\n    names.clear();\n  }\n\n  function AddReferences() {\n    let schemas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    for (const schema of schemas) {\n      if (!schema.$id) throw new Error(`TypeCompiler: Referenced schemas must specify an $id.`);\n      if (referenceMap.has(schema.$id)) throw new Error(`TypeCompiler: Duplicate schema $id found for '${schema.$id}'`);\n      referenceMap.set(schema.$id, schema);\n    }\n  }\n\n  function CreateExpression(schema, value) {\n    return [...Visit(schema, value)].join(' && ');\n  }\n\n  function CreateFunctionName($id) {\n    return `check_${$id.replace(/-/g, '_')}`;\n  }\n\n  function CreateFunction(name, schema, value) {\n    const expression = [...Visit(schema, value)].map(condition => `    ${condition}`).join(' &&\\n');\n    return `function ${name}(value) {\\n  return (\\n${expression}\\n )\\n}`;\n  }\n\n  function PushFunction(functionBody) {\n    locals.add(functionBody);\n  }\n\n  function PushLocal(expression) {\n    const local = `local_${locals.size}`;\n    locals.add(`const ${local} = ${expression}`);\n    return local;\n  }\n\n  function GetLocals() {\n    return [...locals.values()];\n  } // -------------------------------------------------------------------\n  // Compile\n  // -------------------------------------------------------------------\n\n\n  function Build(schema) {\n    let references = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    ResetCompiler();\n    AddReferences(references);\n    const check = CreateFunction('check', schema, 'value');\n    const locals = GetLocals();\n    return `${locals.join('\\n')}\\nreturn ${check}`;\n  }\n  /** Compiles the given type for runtime type checking. This compiler only accepts known TypeBox types non-inclusive of unsafe types. */\n\n\n  function Compile(schema) {\n    let references = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    index_2.TypeGuard.Assert(schema, references);\n    const code = Build(schema, references);\n    const func1 = globalThis.Function('format', code);\n    const func2 = func1((format, value) => {\n      if (!index_3.Format.Has(format)) return false;\n      const func = index_3.Format.Get(format);\n      return func(value);\n    });\n    return new TypeCheck(schema, references, func2, code);\n  }\n\n  TypeCompiler.Compile = Compile;\n})(TypeCompiler = exports.TypeCompiler || (exports.TypeCompiler = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","TypeCompiler","TypeCompilerUnknownTypeError","Property","TypeCheck","index_1","require","index_2","index_3","Types","constructor","schema","references","checkFunc","code","Code","Errors","ValueErrors","Check","DollarSign","Underscore","Numeric","Alpha","propertyName","length","charCodeAt","i","Error","Any","Array","expression","CreateExpression","items","minItems","undefined","maxItems","uniqueItems","Boolean","Constructor","Visit","returns","Function","Integer","multipleOf","exclusiveMinimum","exclusiveMaximum","minimum","maximum","Literal","const","Never","Null","Number","minProperties","maxProperties","propertyKeys","globalThis","keys","properties","additionalProperties","required","map","key","join","propertyKey","memberExpression","propertySchema","includes","Promise","Record","keyPattern","valueSchema","entries","patternProperties","local","PushLocal","Ref","names","has","$ref","CreateFunctionName","referenceMap","reference","get","Self","func","String","minLength","maxLength","pattern","format","Tuple","Undefined","Union","expressions","anyOf","Uint8Array","maxByteLength","minByteLength","Unknown","Void","$id","add","name","body","CreateFunction","PushFunction","anySchema","Kind","Map","locals","Set","ResetCompiler","clear","AddReferences","schemas","set","replace","condition","functionBody","size","GetLocals","values","Build","check","Compile","TypeGuard","Assert","func1","func2","Format","Has","Get"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@sinclair/typebox/compiler/compiler.js"],"sourcesContent":["\"use strict\";\r\n/*--------------------------------------------------------------------------\r\n\r\n@sinclair/typebox/compiler\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n---------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TypeCompiler = exports.TypeCompilerUnknownTypeError = exports.Property = exports.TypeCheck = void 0;\r\nconst index_1 = require(\"../errors/index\");\r\nconst index_2 = require(\"../guard/index\");\r\nconst index_3 = require(\"../format/index\");\r\nconst Types = require(\"../typebox\");\r\n// -------------------------------------------------------------------\r\n// TypeCheck\r\n// -------------------------------------------------------------------\r\nclass TypeCheck {\r\n    constructor(schema, references, checkFunc, code) {\r\n        this.schema = schema;\r\n        this.references = references;\r\n        this.checkFunc = checkFunc;\r\n        this.code = code;\r\n    }\r\n    /** Returns the generated validation code used to validate this type. */\r\n    Code() {\r\n        return this.code;\r\n    }\r\n    /** Returns an iterator for each error in this value. */\r\n    Errors(value) {\r\n        return index_1.ValueErrors.Errors(this.schema, this.references, value);\r\n    }\r\n    /** Returns true if the value matches the given type. */\r\n    Check(value) {\r\n        return this.checkFunc(value);\r\n    }\r\n}\r\nexports.TypeCheck = TypeCheck;\r\n// -------------------------------------------------------------------\r\n// Property\r\n// -------------------------------------------------------------------\r\nvar Property;\r\n(function (Property) {\r\n    function DollarSign(code) {\r\n        return code === 36;\r\n    }\r\n    function Underscore(code) {\r\n        return code === 95;\r\n    }\r\n    function Numeric(code) {\r\n        return code >= 48 && code <= 57;\r\n    }\r\n    function Alpha(code) {\r\n        return (code >= 65 && code <= 90) || (code >= 97 && code <= 122);\r\n    }\r\n    function Check(propertyName) {\r\n        if (propertyName.length === 0)\r\n            return false;\r\n        {\r\n            const code = propertyName.charCodeAt(0);\r\n            if (!(DollarSign(code) || Underscore(code) || Alpha(code))) {\r\n                return false;\r\n            }\r\n        }\r\n        for (let i = 1; i < propertyName.length; i++) {\r\n            const code = propertyName.charCodeAt(i);\r\n            if (!(DollarSign(code) || Underscore(code) || Alpha(code) || Numeric(code))) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    Property.Check = Check;\r\n})(Property = exports.Property || (exports.Property = {}));\r\n// -------------------------------------------------------------------\r\n// TypeCompiler\r\n// -------------------------------------------------------------------\r\nclass TypeCompilerUnknownTypeError extends Error {\r\n    constructor(schema) {\r\n        super('TypeCompiler: Unknown type');\r\n        this.schema = schema;\r\n    }\r\n}\r\nexports.TypeCompilerUnknownTypeError = TypeCompilerUnknownTypeError;\r\n/** Compiles Types for Runtime Type Checking */\r\nvar TypeCompiler;\r\n(function (TypeCompiler) {\r\n    // -------------------------------------------------------------------\r\n    // Types\r\n    // -------------------------------------------------------------------\r\n    function* Any(schema, value) {\r\n        yield '(true)';\r\n    }\r\n    function* Array(schema, value) {\r\n        const expression = CreateExpression(schema.items, 'value');\r\n        if (schema.minItems !== undefined)\r\n            yield `(${value}.length >= ${schema.minItems})`;\r\n        if (schema.maxItems !== undefined)\r\n            yield `(${value}.length <= ${schema.maxItems})`;\r\n        if (schema.uniqueItems !== undefined)\r\n            yield `(new Set(${value}).size === ${value}.length)`;\r\n        yield `(Array.isArray(${value}) && ${value}.every(value => ${expression}))`;\r\n    }\r\n    function* Boolean(schema, value) {\r\n        yield `(typeof ${value} === 'boolean')`;\r\n    }\r\n    function* Constructor(schema, value) {\r\n        yield* Visit(schema.returns, `${value}.prototype`);\r\n    }\r\n    function* Function(schema, value) {\r\n        yield `(typeof ${value} === 'function')`;\r\n    }\r\n    function* Integer(schema, value) {\r\n        yield `(typeof ${value} === 'number' && Number.isInteger(${value}))`;\r\n        if (schema.multipleOf !== undefined)\r\n            yield `(${value} % ${schema.multipleOf} === 0)`;\r\n        if (schema.exclusiveMinimum !== undefined)\r\n            yield `(${value} > ${schema.exclusiveMinimum})`;\r\n        if (schema.exclusiveMaximum !== undefined)\r\n            yield `(${value} < ${schema.exclusiveMaximum})`;\r\n        if (schema.minimum !== undefined)\r\n            yield `(${value} >= ${schema.minimum})`;\r\n        if (schema.maximum !== undefined)\r\n            yield `(${value} <= ${schema.maximum})`;\r\n    }\r\n    function* Literal(schema, value) {\r\n        if (typeof schema.const === 'number' || typeof schema.const === 'boolean') {\r\n            yield `(${value} === ${schema.const})`;\r\n        }\r\n        else {\r\n            yield `(${value} === '${schema.const}')`;\r\n        }\r\n    }\r\n    function* Never(schema, value) {\r\n        yield `(false)`;\r\n    }\r\n    function* Null(schema, value) {\r\n        yield `(${value} === null)`;\r\n    }\r\n    function* Number(schema, value) {\r\n        yield `(typeof ${value} === 'number')`;\r\n        if (schema.multipleOf !== undefined)\r\n            yield `(${value} % ${schema.multipleOf} === 0)`;\r\n        if (schema.exclusiveMinimum !== undefined)\r\n            yield `(${value} > ${schema.exclusiveMinimum})`;\r\n        if (schema.exclusiveMaximum !== undefined)\r\n            yield `(${value} < ${schema.exclusiveMaximum})`;\r\n        if (schema.minimum !== undefined)\r\n            yield `(${value} >= ${schema.minimum})`;\r\n        if (schema.maximum !== undefined)\r\n            yield `(${value} <= ${schema.maximum})`;\r\n    }\r\n    function* Object(schema, value) {\r\n        yield `(typeof ${value} === 'object' && ${value} !== null && !Array.isArray(${value}))`;\r\n        if (schema.minProperties !== undefined)\r\n            yield `(Object.keys(${value}).length >= ${schema.minProperties})`;\r\n        if (schema.maxProperties !== undefined)\r\n            yield `(Object.keys(${value}).length <= ${schema.maxProperties})`;\r\n        const propertyKeys = globalThis.Object.keys(schema.properties);\r\n        if (schema.additionalProperties === false) {\r\n            // Optimization: If the property key length matches the required keys length\r\n            // then we only need check that the values property key length matches that\r\n            // of the property key length. This is because exhaustive testing for values\r\n            // will occur in subsequent property tests.\r\n            if (schema.required && schema.required.length === propertyKeys.length) {\r\n                yield `(Object.keys(${value}).length === ${propertyKeys.length})`;\r\n            }\r\n            else {\r\n                const keys = `[${propertyKeys.map((key) => `'${key}'`).join(', ')}]`;\r\n                yield `(Object.keys(${value}).every(key => ${keys}.includes(key)))`;\r\n            }\r\n        }\r\n        for (const propertyKey of propertyKeys) {\r\n            const memberExpression = Property.Check(propertyKey) ? `${value}.${propertyKey}` : `${value}['${propertyKey}']`;\r\n            const propertySchema = schema.properties[propertyKey];\r\n            if (schema.required && schema.required.includes(propertyKey)) {\r\n                yield* Visit(propertySchema, memberExpression);\r\n            }\r\n            else {\r\n                const expression = CreateExpression(propertySchema, memberExpression);\r\n                yield `(${memberExpression} === undefined ? true : (${expression}))`;\r\n            }\r\n        }\r\n    }\r\n    function* Promise(schema, value) {\r\n        yield `(typeof value === 'object' && typeof ${value}.then === 'function')`;\r\n    }\r\n    function* Record(schema, value) {\r\n        yield `(typeof ${value} === 'object' && ${value} !== null && !Array.isArray(${value}))`;\r\n        const [keyPattern, valueSchema] = globalThis.Object.entries(schema.patternProperties)[0];\r\n        const local = PushLocal(`new RegExp(/${keyPattern}/)`);\r\n        yield `(Object.keys(${value}).every(key => ${local}.test(key)))`;\r\n        const expression = CreateExpression(valueSchema, 'value');\r\n        yield `(Object.values(${value}).every(value => ${expression}))`;\r\n    }\r\n    function* Ref(schema, value) {\r\n        // Reference: If we have seen this reference before we can just yield and return\r\n        // the function call. If this isn't the case we defer to visit to generate and\r\n        // set the function for subsequent passes. Consider for refactor.\r\n        if (names.has(schema.$ref))\r\n            return yield `(${CreateFunctionName(schema.$ref)}(${value}))`;\r\n        if (!referenceMap.has(schema.$ref))\r\n            throw Error(`TypeCompiler.Ref: Cannot de-reference schema with $id '${schema.$ref}'`);\r\n        const reference = referenceMap.get(schema.$ref);\r\n        yield* Visit(reference, value);\r\n    }\r\n    function* Self(schema, value) {\r\n        const func = CreateFunctionName(schema.$ref);\r\n        yield `(${func}(${value}))`;\r\n    }\r\n    function* String(schema, value) {\r\n        yield `(typeof ${value} === 'string')`;\r\n        if (schema.minLength !== undefined) {\r\n            yield `(${value}.length >= ${schema.minLength})`;\r\n        }\r\n        if (schema.maxLength !== undefined) {\r\n            yield `(${value}.length <= ${schema.maxLength})`;\r\n        }\r\n        if (schema.pattern !== undefined) {\r\n            const local = PushLocal(`new RegExp(/${schema.pattern}/);`);\r\n            yield `(${local}.test(${value}))`;\r\n        }\r\n        if (schema.format !== undefined) {\r\n            yield `(format('${schema.format}', ${value}))`;\r\n        }\r\n    }\r\n    function* Tuple(schema, value) {\r\n        yield `(Array.isArray(${value}))`;\r\n        if (schema.items === undefined)\r\n            return yield `(${value}.length === 0)`;\r\n        yield `(${value}.length === ${schema.maxItems})`;\r\n        for (let i = 0; i < schema.items.length; i++) {\r\n            const expression = CreateExpression(schema.items[i], `${value}[${i}]`);\r\n            yield `(${expression})`;\r\n        }\r\n    }\r\n    function* Undefined(schema, value) {\r\n        yield `(${value} === undefined)`;\r\n    }\r\n    function* Union(schema, value) {\r\n        const expressions = schema.anyOf.map((schema) => CreateExpression(schema, value));\r\n        yield `(${expressions.join(' || ')})`;\r\n    }\r\n    function* Uint8Array(schema, value) {\r\n        yield `(${value} instanceof Uint8Array)`;\r\n        if (schema.maxByteLength)\r\n            yield `(${value}.length <= ${schema.maxByteLength})`;\r\n        if (schema.minByteLength)\r\n            yield `(${value}.length >= ${schema.minByteLength})`;\r\n    }\r\n    function* Unknown(schema, value) {\r\n        yield '(true)';\r\n    }\r\n    function* Void(schema, value) {\r\n        yield `(${value} === null)`;\r\n    }\r\n    function* Visit(schema, value) {\r\n        // Reference: Referenced schemas can originate from either additional schemas\r\n        // or inline in the schema itself. Ideally the recursive path should align to\r\n        // reference path. Consider for refactor.\r\n        if (schema.$id && !names.has(schema.$id)) {\r\n            names.add(schema.$id);\r\n            const name = CreateFunctionName(schema.$id);\r\n            const body = CreateFunction(name, schema, 'value');\r\n            PushFunction(body);\r\n            yield `(${name}(${value}))`;\r\n            return;\r\n        }\r\n        const anySchema = schema;\r\n        switch (anySchema[Types.Kind]) {\r\n            case 'Any':\r\n                return yield* Any(anySchema, value);\r\n            case 'Array':\r\n                return yield* Array(anySchema, value);\r\n            case 'Boolean':\r\n                return yield* Boolean(anySchema, value);\r\n            case 'Constructor':\r\n                return yield* Constructor(anySchema, value);\r\n            case 'Function':\r\n                return yield* Function(anySchema, value);\r\n            case 'Integer':\r\n                return yield* Integer(anySchema, value);\r\n            case 'Literal':\r\n                return yield* Literal(anySchema, value);\r\n            case 'Never':\r\n                return yield* Never(anySchema, value);\r\n            case 'Null':\r\n                return yield* Null(anySchema, value);\r\n            case 'Number':\r\n                return yield* Number(anySchema, value);\r\n            case 'Object':\r\n                return yield* Object(anySchema, value);\r\n            case 'Promise':\r\n                return yield* Promise(anySchema, value);\r\n            case 'Record':\r\n                return yield* Record(anySchema, value);\r\n            case 'Ref':\r\n                return yield* Ref(anySchema, value);\r\n            case 'Self':\r\n                return yield* Self(anySchema, value);\r\n            case 'String':\r\n                return yield* String(anySchema, value);\r\n            case 'Tuple':\r\n                return yield* Tuple(anySchema, value);\r\n            case 'Undefined':\r\n                return yield* Undefined(anySchema, value);\r\n            case 'Union':\r\n                return yield* Union(anySchema, value);\r\n            case 'Uint8Array':\r\n                return yield* Uint8Array(anySchema, value);\r\n            case 'Unknown':\r\n                return yield* Unknown(anySchema, value);\r\n            case 'Void':\r\n                return yield* Void(anySchema, value);\r\n            default:\r\n                throw new TypeCompilerUnknownTypeError(schema);\r\n        }\r\n    }\r\n    // -------------------------------------------------------------------\r\n    // Compile State\r\n    // -------------------------------------------------------------------\r\n    const referenceMap = new Map();\r\n    const locals = new Set(); // local variables and functions\r\n    const names = new Set(); // cache of local functions\r\n    function ResetCompiler() {\r\n        referenceMap.clear();\r\n        locals.clear();\r\n        names.clear();\r\n    }\r\n    function AddReferences(schemas = []) {\r\n        for (const schema of schemas) {\r\n            if (!schema.$id)\r\n                throw new Error(`TypeCompiler: Referenced schemas must specify an $id.`);\r\n            if (referenceMap.has(schema.$id))\r\n                throw new Error(`TypeCompiler: Duplicate schema $id found for '${schema.$id}'`);\r\n            referenceMap.set(schema.$id, schema);\r\n        }\r\n    }\r\n    function CreateExpression(schema, value) {\r\n        return [...Visit(schema, value)].join(' && ');\r\n    }\r\n    function CreateFunctionName($id) {\r\n        return `check_${$id.replace(/-/g, '_')}`;\r\n    }\r\n    function CreateFunction(name, schema, value) {\r\n        const expression = [...Visit(schema, value)].map((condition) => `    ${condition}`).join(' &&\\n');\r\n        return `function ${name}(value) {\\n  return (\\n${expression}\\n )\\n}`;\r\n    }\r\n    function PushFunction(functionBody) {\r\n        locals.add(functionBody);\r\n    }\r\n    function PushLocal(expression) {\r\n        const local = `local_${locals.size}`;\r\n        locals.add(`const ${local} = ${expression}`);\r\n        return local;\r\n    }\r\n    function GetLocals() {\r\n        return [...locals.values()];\r\n    }\r\n    // -------------------------------------------------------------------\r\n    // Compile\r\n    // -------------------------------------------------------------------\r\n    function Build(schema, references = []) {\r\n        ResetCompiler();\r\n        AddReferences(references);\r\n        const check = CreateFunction('check', schema, 'value');\r\n        const locals = GetLocals();\r\n        return `${locals.join('\\n')}\\nreturn ${check}`;\r\n    }\r\n    /** Compiles the given type for runtime type checking. This compiler only accepts known TypeBox types non-inclusive of unsafe types. */\r\n    function Compile(schema, references = []) {\r\n        index_2.TypeGuard.Assert(schema, references);\r\n        const code = Build(schema, references);\r\n        const func1 = globalThis.Function('format', code);\r\n        const func2 = func1((format, value) => {\r\n            if (!index_3.Format.Has(format))\r\n                return false;\r\n            const func = index_3.Format.Get(format);\r\n            return func(value);\r\n        });\r\n        return new TypeCheck(schema, references, func2, code);\r\n    }\r\n    TypeCompiler.Compile = Compile;\r\n})(TypeCompiler = exports.TypeCompiler || (exports.TypeCompiler = {}));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}