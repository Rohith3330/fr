{"ast":null,"code":"var Token = require('../../tokenizer/token');\n\nvar serializeBody = require('../../writer/one-time').body;\n\nvar serializeRules = require('../../writer/one-time').rules;\n\nfunction removeDuplicates(tokens) {\n  var matched = {};\n  var moreThanOnce = [];\n  var id, token;\n  var body, bodies;\n\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n\n    if (token[0] != Token.RULE) {\n      continue;\n    }\n\n    id = serializeRules(token[1]);\n\n    if (matched[id] && matched[id].length == 1) {\n      moreThanOnce.push(id);\n    } else {\n      matched[id] = matched[id] || [];\n    }\n\n    matched[id].push(i);\n  }\n\n  for (i = 0, l = moreThanOnce.length; i < l; i++) {\n    id = moreThanOnce[i];\n    bodies = [];\n\n    for (var j = matched[id].length - 1; j >= 0; j--) {\n      token = tokens[matched[id][j]];\n      body = serializeBody(token[2]);\n\n      if (bodies.indexOf(body) > -1) {\n        token[2] = [];\n      } else {\n        bodies.push(body);\n      }\n    }\n  }\n}\n\nmodule.exports = removeDuplicates;","map":{"version":3,"names":["Token","require","serializeBody","body","serializeRules","rules","removeDuplicates","tokens","matched","moreThanOnce","id","token","bodies","i","l","length","RULE","push","j","indexOf","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/clean-css/lib/optimizer/level-2/remove-duplicates.js"],"sourcesContent":["var Token = require('../../tokenizer/token');\n\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\n\nfunction removeDuplicates(tokens) {\n  var matched = {};\n  var moreThanOnce = [];\n  var id, token;\n  var body, bodies;\n\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    if (token[0] != Token.RULE) { continue; }\n\n    id = serializeRules(token[1]);\n\n    if (matched[id] && matched[id].length == 1) { moreThanOnce.push(id); } else { matched[id] = matched[id] || []; }\n\n    matched[id].push(i);\n  }\n\n  for (i = 0, l = moreThanOnce.length; i < l; i++) {\n    id = moreThanOnce[i];\n    bodies = [];\n\n    for (var j = matched[id].length - 1; j >= 0; j--) {\n      token = tokens[matched[id][j]];\n      body = serializeBody(token[2]);\n\n      if (bodies.indexOf(body) > -1) { token[2] = []; } else { bodies.push(body); }\n    }\n  }\n}\n\nmodule.exports = removeDuplicates;\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,uBAAD,CAAnB;;AAEA,IAAIC,aAAa,GAAGD,OAAO,CAAC,uBAAD,CAAP,CAAiCE,IAArD;;AACA,IAAIC,cAAc,GAAGH,OAAO,CAAC,uBAAD,CAAP,CAAiCI,KAAtD;;AAEA,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;EAChC,IAAIC,OAAO,GAAG,EAAd;EACA,IAAIC,YAAY,GAAG,EAAnB;EACA,IAAIC,EAAJ,EAAQC,KAAR;EACA,IAAIR,IAAJ,EAAUS,MAAV;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGP,MAAM,CAACQ,MAA3B,EAAmCF,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;IAC7CF,KAAK,GAAGJ,MAAM,CAACM,CAAD,CAAd;;IACA,IAAIF,KAAK,CAAC,CAAD,CAAL,IAAYX,KAAK,CAACgB,IAAtB,EAA4B;MAAE;IAAW;;IAEzCN,EAAE,GAAGN,cAAc,CAACO,KAAK,CAAC,CAAD,CAAN,CAAnB;;IAEA,IAAIH,OAAO,CAACE,EAAD,CAAP,IAAeF,OAAO,CAACE,EAAD,CAAP,CAAYK,MAAZ,IAAsB,CAAzC,EAA4C;MAAEN,YAAY,CAACQ,IAAb,CAAkBP,EAAlB;IAAwB,CAAtE,MAA4E;MAAEF,OAAO,CAACE,EAAD,CAAP,GAAcF,OAAO,CAACE,EAAD,CAAP,IAAe,EAA7B;IAAkC;;IAEhHF,OAAO,CAACE,EAAD,CAAP,CAAYO,IAAZ,CAAiBJ,CAAjB;EACD;;EAED,KAAKA,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGL,YAAY,CAACM,MAA7B,EAAqCF,CAAC,GAAGC,CAAzC,EAA4CD,CAAC,EAA7C,EAAiD;IAC/CH,EAAE,GAAGD,YAAY,CAACI,CAAD,CAAjB;IACAD,MAAM,GAAG,EAAT;;IAEA,KAAK,IAAIM,CAAC,GAAGV,OAAO,CAACE,EAAD,CAAP,CAAYK,MAAZ,GAAqB,CAAlC,EAAqCG,CAAC,IAAI,CAA1C,EAA6CA,CAAC,EAA9C,EAAkD;MAChDP,KAAK,GAAGJ,MAAM,CAACC,OAAO,CAACE,EAAD,CAAP,CAAYQ,CAAZ,CAAD,CAAd;MACAf,IAAI,GAAGD,aAAa,CAACS,KAAK,CAAC,CAAD,CAAN,CAApB;;MAEA,IAAIC,MAAM,CAACO,OAAP,CAAehB,IAAf,IAAuB,CAAC,CAA5B,EAA+B;QAAEQ,KAAK,CAAC,CAAD,CAAL,GAAW,EAAX;MAAgB,CAAjD,MAAuD;QAAEC,MAAM,CAACK,IAAP,CAAYd,IAAZ;MAAoB;IAC9E;EACF;AACF;;AAEDiB,MAAM,CAACC,OAAP,GAAiBf,gBAAjB"},"metadata":{},"sourceType":"script"}