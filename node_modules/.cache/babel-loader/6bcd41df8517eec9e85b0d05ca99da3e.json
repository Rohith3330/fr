{"ast":null,"code":"/*!\n * regjsgen 0.5.2\n * Copyright 2014-2020 Benjamin Tan <https://ofcr.se/>\n * Available under the MIT license <https://github.com/bnjmnt4n/regjsgen/blob/master/LICENSE-MIT.txt>\n */\n;\n(function () {\n  'use strict'; // Used to determine if values are of the language type `Object`.\n\n  var objectTypes = {\n    'function': true,\n    'object': true\n  }; // Used as a reference to the global object.\n\n  var root = objectTypes[typeof window] && window || this; // Detect free variable `exports`.\n\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports; // Detect free variable `module`.\n\n  var hasFreeModule = objectTypes[typeof module] && module && !module.nodeType; // Detect free variable `global` from Node.js or Browserified code and use it as `root`.\n\n  var freeGlobal = freeExports && hasFreeModule && typeof global == 'object' && global;\n\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  } // Used to check objects for own properties.\n\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  /*--------------------------------------------------------------------------*/\n  // Generates a string based on the given code point.\n  // Based on https://mths.be/fromcodepoint by @mathias.\n\n  function fromCodePoint() {\n    var codePoint = Number(arguments[0]);\n\n    if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n    codePoint < 0 || // not a valid Unicode code point\n    codePoint > 0x10FFFF || // not a valid Unicode code point\n    Math.floor(codePoint) != codePoint // not an integer\n    ) {\n      throw RangeError('Invalid code point: ' + codePoint);\n    }\n\n    if (codePoint <= 0xFFFF) {\n      // BMP code point\n      return String.fromCharCode(codePoint);\n    } else {\n      // Astral code point; split in surrogate halves\n      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      codePoint -= 0x10000;\n      var highSurrogate = (codePoint >> 10) + 0xD800;\n      var lowSurrogate = codePoint % 0x400 + 0xDC00;\n      return String.fromCharCode(highSurrogate, lowSurrogate);\n    }\n  }\n  /*--------------------------------------------------------------------------*/\n  // Ensures that nodes have the correct types.\n\n\n  var assertTypeRegexMap = {};\n\n  function assertType(type, expected) {\n    if (expected.indexOf('|') == -1) {\n      if (type == expected) {\n        return;\n      }\n\n      throw Error('Invalid node type: ' + type + '; expected type: ' + expected);\n    }\n\n    expected = hasOwnProperty.call(assertTypeRegexMap, expected) ? assertTypeRegexMap[expected] : assertTypeRegexMap[expected] = RegExp('^(?:' + expected + ')$');\n\n    if (expected.test(type)) {\n      return;\n    }\n\n    throw Error('Invalid node type: ' + type + '; expected types: ' + expected);\n  }\n  /*--------------------------------------------------------------------------*/\n  // Generates a regular expression string based on an AST.\n\n\n  function generate(node) {\n    var type = node.type;\n\n    if (hasOwnProperty.call(generators, type)) {\n      return generators[type](node);\n    }\n\n    throw Error('Invalid node type: ' + type);\n  } // Constructs a string by concatentating the output of each term.\n\n\n  function generateSequence(generator, terms,\n  /* optional */\n  separator) {\n    var i = -1,\n        length = terms.length,\n        result = '',\n        term;\n\n    while (++i < length) {\n      term = terms[i];\n      if (separator && i > 0) result += separator; // Ensure that `\\0` null escapes followed by number symbols are not\n      // treated as backreferences.\n\n      if (i + 1 < length && terms[i].type == 'value' && terms[i].kind == 'null' && terms[i + 1].type == 'value' && terms[i + 1].kind == 'symbol' && terms[i + 1].codePoint >= 48 && terms[i + 1].codePoint <= 57) {\n        result += '\\\\000';\n        continue;\n      }\n\n      result += generator(term);\n    }\n\n    return result;\n  }\n  /*--------------------------------------------------------------------------*/\n\n\n  function generateAlternative(node) {\n    assertType(node.type, 'alternative');\n    return generateSequence(generateTerm, node.body);\n  }\n\n  function generateAnchor(node) {\n    assertType(node.type, 'anchor');\n\n    switch (node.kind) {\n      case 'start':\n        return '^';\n\n      case 'end':\n        return '$';\n\n      case 'boundary':\n        return '\\\\b';\n\n      case 'not-boundary':\n        return '\\\\B';\n\n      default:\n        throw Error('Invalid assertion');\n    }\n  }\n\n  var atomType = 'anchor|characterClass|characterClassEscape|dot|group|reference|unicodePropertyEscape|value';\n\n  function generateAtom(node) {\n    assertType(node.type, atomType);\n    return generate(node);\n  }\n\n  function generateCharacterClass(node) {\n    assertType(node.type, 'characterClass');\n    var kind = node.kind;\n    var separator = kind === 'intersection' ? '&&' : kind === 'subtraction' ? '--' : '';\n    return '[' + (node.negative ? '^' : '') + generateSequence(generateClassAtom, node.body, separator) + ']';\n  }\n\n  function generateCharacterClassEscape(node) {\n    assertType(node.type, 'characterClassEscape');\n    return '\\\\' + node.value;\n  }\n\n  function generateCharacterClassRange(node) {\n    assertType(node.type, 'characterClassRange');\n    var min = node.min,\n        max = node.max;\n\n    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n      throw Error('Invalid character class range');\n    }\n\n    return generateClassAtom(min) + '-' + generateClassAtom(max);\n  }\n\n  function generateClassAtom(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|characterClassRange|dot|value|unicodePropertyEscape|classStrings');\n    return generate(node);\n  }\n\n  function generateClassStrings(node) {\n    assertType(node.type, 'classStrings');\n    return '\\\\q{' + generateSequence(generateClassString, node.strings, '|') + '}';\n  }\n\n  function generateClassString(node) {\n    assertType(node.type, 'classString');\n    return generateSequence(generate, node.characters);\n  }\n\n  function generateDisjunction(node) {\n    assertType(node.type, 'disjunction');\n    return generateSequence(generate, node.body, '|');\n  }\n\n  function generateDot(node) {\n    assertType(node.type, 'dot');\n    return '.';\n  }\n\n  function generateGroup(node) {\n    assertType(node.type, 'group');\n    var result = '';\n\n    switch (node.behavior) {\n      case 'normal':\n        if (node.name) {\n          result += '?<' + generateIdentifier(node.name) + '>';\n        }\n\n        break;\n\n      case 'ignore':\n        result += '?:';\n        break;\n\n      case 'lookahead':\n        result += '?=';\n        break;\n\n      case 'negativeLookahead':\n        result += '?!';\n        break;\n\n      case 'lookbehind':\n        result += '?<=';\n        break;\n\n      case 'negativeLookbehind':\n        result += '?<!';\n        break;\n\n      default:\n        throw Error('Invalid behaviour: ' + node.behaviour);\n    }\n\n    result += generateSequence(generate, node.body);\n    return '(' + result + ')';\n  }\n\n  function generateIdentifier(node) {\n    assertType(node.type, 'identifier');\n    return node.value;\n  }\n\n  function generateQuantifier(node) {\n    assertType(node.type, 'quantifier');\n    var quantifier = '',\n        min = node.min,\n        max = node.max;\n\n    if (max == null) {\n      if (min == 0) {\n        quantifier = '*';\n      } else if (min == 1) {\n        quantifier = '+';\n      } else {\n        quantifier = '{' + min + ',}';\n      }\n    } else if (min == max) {\n      quantifier = '{' + min + '}';\n    } else if (min == 0 && max == 1) {\n      quantifier = '?';\n    } else {\n      quantifier = '{' + min + ',' + max + '}';\n    }\n\n    if (!node.greedy) {\n      quantifier += '?';\n    }\n\n    return generateAtom(node.body[0]) + quantifier;\n  }\n\n  function generateReference(node) {\n    assertType(node.type, 'reference');\n\n    if (node.matchIndex) {\n      return '\\\\' + node.matchIndex;\n    }\n\n    if (node.name) {\n      return '\\\\k<' + generateIdentifier(node.name) + '>';\n    }\n\n    throw new Error('Unknown reference type');\n  }\n\n  function generateTerm(node) {\n    assertType(node.type, atomType + '|empty|quantifier');\n    return generate(node);\n  }\n\n  function generateUnicodePropertyEscape(node) {\n    assertType(node.type, 'unicodePropertyEscape');\n    return '\\\\' + (node.negative ? 'P' : 'p') + '{' + node.value + '}';\n  }\n\n  function generateValue(node) {\n    assertType(node.type, 'value');\n    var kind = node.kind,\n        codePoint = node.codePoint;\n\n    if (typeof codePoint != 'number') {\n      throw new Error('Invalid code point: ' + codePoint);\n    }\n\n    switch (kind) {\n      case 'controlLetter':\n        return '\\\\c' + fromCodePoint(codePoint + 64);\n\n      case 'hexadecimalEscape':\n        return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n\n      case 'identifier':\n        return '\\\\' + fromCodePoint(codePoint);\n\n      case 'null':\n        return '\\\\' + codePoint;\n\n      case 'octal':\n        return '\\\\' + ('000' + codePoint.toString(8)).slice(-3);\n\n      case 'singleEscape':\n        switch (codePoint) {\n          case 0x0008:\n            return '\\\\b';\n\n          case 0x0009:\n            return '\\\\t';\n\n          case 0x000A:\n            return '\\\\n';\n\n          case 0x000B:\n            return '\\\\v';\n\n          case 0x000C:\n            return '\\\\f';\n\n          case 0x000D:\n            return '\\\\r';\n\n          case 0x002D:\n            return '\\\\-';\n\n          default:\n            throw Error('Invalid code point: ' + codePoint);\n        }\n\n      case 'symbol':\n        return fromCodePoint(codePoint);\n\n      case 'unicodeEscape':\n        return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n\n      case 'unicodeCodePointEscape':\n        return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n\n      default:\n        throw Error('Unsupported node kind: ' + kind);\n    }\n  }\n  /*--------------------------------------------------------------------------*/\n  // Used to generate strings for each node type.\n\n\n  var generators = {\n    'alternative': generateAlternative,\n    'anchor': generateAnchor,\n    'characterClass': generateCharacterClass,\n    'characterClassEscape': generateCharacterClassEscape,\n    'characterClassRange': generateCharacterClassRange,\n    'classStrings': generateClassStrings,\n    'disjunction': generateDisjunction,\n    'dot': generateDot,\n    'group': generateGroup,\n    'quantifier': generateQuantifier,\n    'reference': generateReference,\n    'unicodePropertyEscape': generateUnicodePropertyEscape,\n    'value': generateValue\n  };\n  /*--------------------------------------------------------------------------*/\n  // Export regjsgen.\n\n  var regjsgen = {\n    'generate': generate\n  }; // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Define as an anonymous module so it can be aliased through path mapping.\n    define(function () {\n      return regjsgen;\n    });\n    root.regjsgen = regjsgen;\n  } // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && hasFreeModule) {\n    // Export for CommonJS support.\n    freeExports.generate = generate;\n  } else {\n    // Export to the global object.\n    root.regjsgen = regjsgen;\n  }\n}).call(this);","map":{"version":3,"names":["objectTypes","root","window","freeExports","exports","nodeType","hasFreeModule","module","freeGlobal","global","self","hasOwnProperty","Object","prototype","fromCodePoint","codePoint","Number","arguments","isFinite","Math","floor","RangeError","String","fromCharCode","highSurrogate","lowSurrogate","assertTypeRegexMap","assertType","type","expected","indexOf","Error","call","RegExp","test","generate","node","generators","generateSequence","generator","terms","separator","i","length","result","term","kind","generateAlternative","generateTerm","body","generateAnchor","atomType","generateAtom","generateCharacterClass","negative","generateClassAtom","generateCharacterClassEscape","value","generateCharacterClassRange","min","max","generateClassStrings","generateClassString","strings","characters","generateDisjunction","generateDot","generateGroup","behavior","name","generateIdentifier","behaviour","generateQuantifier","quantifier","greedy","generateReference","matchIndex","generateUnicodePropertyEscape","generateValue","toString","toUpperCase","slice","regjsgen","define","amd"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/regjsgen/regjsgen.js"],"sourcesContent":["/*!\n * regjsgen 0.5.2\n * Copyright 2014-2020 Benjamin Tan <https://ofcr.se/>\n * Available under the MIT license <https://github.com/bnjmnt4n/regjsgen/blob/master/LICENSE-MIT.txt>\n */\n;(function() {\n  'use strict';\n\n  // Used to determine if values are of the language type `Object`.\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  // Used as a reference to the global object.\n  var root = (objectTypes[typeof window] && window) || this;\n\n  // Detect free variable `exports`.\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  // Detect free variable `module`.\n  var hasFreeModule = objectTypes[typeof module] && module && !module.nodeType;\n\n  // Detect free variable `global` from Node.js or Browserified code and use it as `root`.\n  var freeGlobal = freeExports && hasFreeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Used to check objects for own properties.\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  /*--------------------------------------------------------------------------*/\n\n  // Generates a string based on the given code point.\n  // Based on https://mths.be/fromcodepoint by @mathias.\n  function fromCodePoint() {\n    var codePoint = Number(arguments[0]);\n\n    if (\n      !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n      codePoint < 0 || // not a valid Unicode code point\n      codePoint > 0x10FFFF || // not a valid Unicode code point\n      Math.floor(codePoint) != codePoint // not an integer\n    ) {\n      throw RangeError('Invalid code point: ' + codePoint);\n    }\n\n    if (codePoint <= 0xFFFF) {\n      // BMP code point\n      return String.fromCharCode(codePoint);\n    } else {\n      // Astral code point; split in surrogate halves\n      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      codePoint -= 0x10000;\n      var highSurrogate = (codePoint >> 10) + 0xD800;\n      var lowSurrogate = (codePoint % 0x400) + 0xDC00;\n      return String.fromCharCode(highSurrogate, lowSurrogate);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Ensures that nodes have the correct types.\n  var assertTypeRegexMap = {};\n  function assertType(type, expected) {\n    if (expected.indexOf('|') == -1) {\n      if (type == expected) {\n        return;\n      }\n\n      throw Error('Invalid node type: ' + type + '; expected type: ' + expected);\n    }\n\n    expected = hasOwnProperty.call(assertTypeRegexMap, expected)\n      ? assertTypeRegexMap[expected]\n      : (assertTypeRegexMap[expected] = RegExp('^(?:' + expected + ')$'));\n\n    if (expected.test(type)) {\n      return;\n    }\n\n    throw Error('Invalid node type: ' + type + '; expected types: ' + expected);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Generates a regular expression string based on an AST.\n  function generate(node) {\n    var type = node.type;\n\n    if (hasOwnProperty.call(generators, type)) {\n      return generators[type](node);\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  // Constructs a string by concatentating the output of each term.\n  function generateSequence(generator, terms, /* optional */  separator) {\n    var i = -1,\n        length = terms.length,\n        result = '',\n        term;\n\n    while (++i < length) {\n      term = terms[i];\n\n      if (separator && i > 0) result += separator;\n\n      // Ensure that `\\0` null escapes followed by number symbols are not\n      // treated as backreferences.\n      if (\n        i + 1 < length &&\n        terms[i].type == 'value' &&\n        terms[i].kind == 'null' &&\n        terms[i + 1].type == 'value' &&\n        terms[i + 1].kind == 'symbol' &&\n        terms[i + 1].codePoint >= 48 &&\n        terms[i + 1].codePoint <= 57\n      ) {\n        result += '\\\\000';\n        continue;\n      }\n\n      result += generator(term);\n    }\n\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generateAlternative(node) {\n    assertType(node.type, 'alternative');\n\n    return generateSequence(generateTerm, node.body);\n  }\n\n  function generateAnchor(node) {\n    assertType(node.type, 'anchor');\n\n    switch (node.kind) {\n      case 'start':\n        return '^';\n      case 'end':\n        return '$';\n      case 'boundary':\n        return '\\\\b';\n      case 'not-boundary':\n        return '\\\\B';\n      default:\n        throw Error('Invalid assertion');\n    }\n  }\n\n  var atomType = 'anchor|characterClass|characterClassEscape|dot|group|reference|unicodePropertyEscape|value';\n\n  function generateAtom(node) {\n    assertType(node.type, atomType);\n\n    return generate(node);\n  }\n\n  function generateCharacterClass(node) {\n    assertType(node.type, 'characterClass');\n\n    var kind = node.kind;\n    var separator = kind === 'intersection' ? '&&' : kind === 'subtraction' ? '--' : '';\n\n    return '[' +\n      (node.negative ? '^' : '') +\n      generateSequence(generateClassAtom, node.body, separator) +\n    ']';\n  }\n\n  function generateCharacterClassEscape(node) {\n    assertType(node.type, 'characterClassEscape');\n\n    return '\\\\' + node.value;\n  }\n\n  function generateCharacterClassRange(node) {\n    assertType(node.type, 'characterClassRange');\n\n    var min = node.min,\n        max = node.max;\n\n    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n      throw Error('Invalid character class range');\n    }\n\n    return generateClassAtom(min) + '-' + generateClassAtom(max);\n  }\n\n  function generateClassAtom(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|characterClassRange|dot|value|unicodePropertyEscape|classStrings');\n\n    return generate(node);\n  }\n\n  function generateClassStrings(node) {\n    assertType(node.type, 'classStrings');\n\n    return '\\\\q{' + generateSequence(generateClassString, node.strings, '|') + '}';\n  }\n\n  function generateClassString(node) {\n    assertType(node.type, 'classString');\n\n    return generateSequence(generate, node.characters);\n  }\n\n  function generateDisjunction(node) {\n    assertType(node.type, 'disjunction');\n\n    return generateSequence(generate, node.body, '|');\n  }\n\n\n  function generateDot(node) {\n    assertType(node.type, 'dot');\n\n    return '.';\n  }\n\n  function generateGroup(node) {\n    assertType(node.type, 'group');\n\n    var result = '';\n\n    switch (node.behavior) {\n      case 'normal':\n        if (node.name) {\n          result += '?<' + generateIdentifier(node.name) + '>';\n        }\n        break;\n      case 'ignore':\n        result += '?:';\n        break;\n      case 'lookahead':\n        result += '?=';\n        break;\n      case 'negativeLookahead':\n        result += '?!';\n        break;\n      case 'lookbehind':\n        result += '?<=';\n        break;\n      case 'negativeLookbehind':\n        result += '?<!';\n        break;\n      default:\n        throw Error('Invalid behaviour: ' + node.behaviour);\n    }\n\n    result += generateSequence(generate, node.body);\n\n    return '(' + result + ')';\n  }\n\n  function generateIdentifier(node) {\n    assertType(node.type, 'identifier');\n\n    return node.value;\n  }\n\n  function generateQuantifier(node) {\n    assertType(node.type, 'quantifier');\n\n    var quantifier = '',\n        min = node.min,\n        max = node.max;\n\n    if (max == null) {\n      if (min == 0) {\n        quantifier = '*';\n      } else if (min == 1) {\n        quantifier = '+';\n      } else {\n        quantifier = '{' + min + ',}';\n      }\n    } else if (min == max) {\n      quantifier = '{' + min + '}';\n    } else if (min == 0 && max == 1) {\n      quantifier = '?';\n    } else {\n      quantifier = '{' + min + ',' + max + '}';\n    }\n\n    if (!node.greedy) {\n      quantifier += '?';\n    }\n\n    return generateAtom(node.body[0]) + quantifier;\n  }\n\n  function generateReference(node) {\n    assertType(node.type, 'reference');\n\n    if (node.matchIndex) {\n      return '\\\\' + node.matchIndex;\n    }\n    if (node.name) {\n      return '\\\\k<' + generateIdentifier(node.name) + '>';\n    }\n\n    throw new Error('Unknown reference type');\n  }\n\n  function generateTerm(node) {\n    assertType(node.type, atomType + '|empty|quantifier');\n\n    return generate(node);\n  }\n\n  function generateUnicodePropertyEscape(node) {\n    assertType(node.type, 'unicodePropertyEscape');\n\n    return '\\\\' + (node.negative ? 'P' : 'p') + '{' + node.value + '}';\n  }\n\n  function generateValue(node) {\n    assertType(node.type, 'value');\n\n    var kind = node.kind,\n        codePoint = node.codePoint;\n\n    if (typeof codePoint != 'number') {\n      throw new Error('Invalid code point: ' + codePoint);\n    }\n\n    switch (kind) {\n      case 'controlLetter':\n        return '\\\\c' + fromCodePoint(codePoint + 64);\n      case 'hexadecimalEscape':\n        return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n      case 'identifier':\n        return '\\\\' + fromCodePoint(codePoint);\n      case 'null':\n        return '\\\\' + codePoint;\n      case 'octal':\n        return '\\\\' + ('000' + codePoint.toString(8)).slice(-3);\n      case 'singleEscape':\n        switch (codePoint) {\n          case 0x0008:\n            return '\\\\b';\n          case 0x0009:\n            return '\\\\t';\n          case 0x000A:\n            return '\\\\n';\n          case 0x000B:\n            return '\\\\v';\n          case 0x000C:\n            return '\\\\f';\n          case 0x000D:\n            return '\\\\r';\n          case 0x002D:\n            return '\\\\-';\n          default:\n            throw Error('Invalid code point: ' + codePoint);\n        }\n      case 'symbol':\n        return fromCodePoint(codePoint);\n      case 'unicodeEscape':\n        return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n      case 'unicodeCodePointEscape':\n        return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n      default:\n        throw Error('Unsupported node kind: ' + kind);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Used to generate strings for each node type.\n  var generators = {\n    'alternative': generateAlternative,\n    'anchor': generateAnchor,\n    'characterClass': generateCharacterClass,\n    'characterClassEscape': generateCharacterClassEscape,\n    'characterClassRange': generateCharacterClassRange,\n    'classStrings': generateClassStrings,\n    'disjunction': generateDisjunction,\n    'dot': generateDot,\n    'group': generateGroup,\n    'quantifier': generateQuantifier,\n    'reference': generateReference,\n    'unicodePropertyEscape': generateUnicodePropertyEscape,\n    'value': generateValue\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export regjsgen.\n  var regjsgen = {\n    'generate': generate\n  };\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Define as an anonymous module so it can be aliased through path mapping.\n    define(function() {\n      return regjsgen;\n    });\n\n    root.regjsgen = regjsgen;\n  }\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && hasFreeModule) {\n    // Export for CommonJS support.\n    freeExports.generate = generate;\n  }\n  else {\n    // Export to the global object.\n    root.regjsgen = regjsgen;\n  }\n}.call(this));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}