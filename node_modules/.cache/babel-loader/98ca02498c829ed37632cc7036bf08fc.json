{"ast":null,"code":"import prettier from 'prettier';\nimport { corePlugins } from '../src/corePlugins';\nimport colors from '../src/public/colors';\nimport defaultTheme from '../src/public/default-theme';\nimport fs from 'fs';\nimport path from 'path';\nimport * as types from './type-utils';\nfs.writeFileSync(path.join(process.cwd(), 'types', 'generated', 'corePluginList.d.ts'), `export type CorePluginList = ${Object.keys(corePlugins).map(p => `'${p}'`).join(' | ')}`);\nlet colorsWithoutDeprecatedColors = Object.fromEntries(Object.entries(Object.getOwnPropertyDescriptors(colors)).filter(_ref => {\n  let [_, {\n    value\n  }] = _ref;\n  return typeof value !== 'undefined';\n}).map(_ref2 => {\n  let [name, definition] = _ref2;\n  return [name, definition.value];\n}));\nlet deprecatedColors = Object.entries(Object.getOwnPropertyDescriptors(colors)).filter(_ref3 => {\n  let [_, {\n    value\n  }] = _ref3;\n  return typeof value === 'undefined';\n}).map(_ref4 => {\n  let [name, definition] = _ref4;\n  let warn = console.warn;\n  let messages = [];\n\n  console.warn = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return messages.push(args.pop());\n  };\n\n  definition.get();\n  console.warn = warn;\n  let message = messages.join(' ').trim();\n  let newColor = message.match(/renamed to `(.*)`/)[1];\n  return `/** @deprecated ${message} */${name}: DefaultColors['${newColor}'],`;\n}).join('\\n');\nfs.writeFileSync(path.join(process.cwd(), 'types', 'generated', 'colors.d.ts'), prettier.format(`export interface DefaultColors { ${JSON.stringify(colorsWithoutDeprecatedColors).slice(1, -1)}\\n${deprecatedColors}\\n}`, {\n  semi: false,\n  singleQuote: true,\n  printWidth: 100,\n  parser: 'typescript'\n}));\nconst defaultThemeTypes = Object.entries(defaultTheme).map(_ref5 => {\n  let [name, value] = _ref5;\n\n  // Special cases for slightly more accurate types\n  if (name === 'keyframes') {\n    return [name, `Record<${types.forKeys(value)}, Record<string, CSSDeclarationList>>`];\n  }\n\n  if (name === 'fontSize') {\n    return [name, `Record<${types.forKeys(value)}, [string, { lineHeight: string }]>`];\n  } // General cases\n\n\n  if (typeof value === 'string') {\n    return [name, `string`];\n  }\n\n  if (typeof value === 'function') {\n    return [name, null];\n  }\n\n  if (typeof value === 'object') {\n    if (Object.keys(value).length === 0) {\n      return [name, null];\n    }\n\n    return [name, types.forValue(value)];\n  }\n\n  return [name, `unknown`];\n}).filter(_ref6 => {\n  let [, type] = _ref6;\n  return type !== null;\n}).map(_ref7 => {\n  let [name, type] = _ref7;\n  return `${name}: ${type}`;\n}).join('\\n');\nfs.writeFileSync(path.join(process.cwd(), 'types', 'generated', 'default-theme.d.ts'), prettier.format(`\n    import { Config } from '../../types'\n    type CSSDeclarationList = Record<string, string>\n    export type DefaultTheme = Config['theme'] & { ${defaultThemeTypes} }\n  `, {\n  semi: false,\n  singleQuote: true,\n  printWidth: 100,\n  parser: 'typescript'\n}));","map":{"version":3,"names":["prettier","corePlugins","colors","defaultTheme","fs","path","types","writeFileSync","join","process","cwd","Object","keys","map","p","colorsWithoutDeprecatedColors","fromEntries","entries","getOwnPropertyDescriptors","filter","_","value","name","definition","deprecatedColors","warn","console","messages","args","push","pop","get","message","trim","newColor","match","format","JSON","stringify","slice","semi","singleQuote","printWidth","parser","defaultThemeTypes","forKeys","length","forValue","type"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/scripts/generate-types.js"],"sourcesContent":["import prettier from 'prettier'\nimport { corePlugins } from '../src/corePlugins'\nimport colors from '../src/public/colors'\nimport defaultTheme from '../src/public/default-theme'\nimport fs from 'fs'\nimport path from 'path'\nimport * as types from './type-utils'\n\nfs.writeFileSync(\n  path.join(process.cwd(), 'types', 'generated', 'corePluginList.d.ts'),\n  `export type CorePluginList = ${Object.keys(corePlugins)\n    .map((p) => `'${p}'`)\n    .join(' | ')}`\n)\n\nlet colorsWithoutDeprecatedColors = Object.fromEntries(\n  Object.entries(Object.getOwnPropertyDescriptors(colors))\n    .filter(([_, { value }]) => {\n      return typeof value !== 'undefined'\n    })\n    .map(([name, definition]) => [name, definition.value])\n)\n\nlet deprecatedColors = Object.entries(Object.getOwnPropertyDescriptors(colors))\n  .filter(([_, { value }]) => {\n    return typeof value === 'undefined'\n  })\n  .map(([name, definition]) => {\n    let warn = console.warn\n    let messages = []\n    console.warn = (...args) => messages.push(args.pop())\n    definition.get()\n    console.warn = warn\n    let message = messages.join(' ').trim()\n    let newColor = message.match(/renamed to `(.*)`/)[1]\n    return `/** @deprecated ${message} */${name}: DefaultColors['${newColor}'],`\n  })\n  .join('\\n')\n\nfs.writeFileSync(\n  path.join(process.cwd(), 'types', 'generated', 'colors.d.ts'),\n  prettier.format(\n    `export interface DefaultColors { ${JSON.stringify(colorsWithoutDeprecatedColors).slice(\n      1,\n      -1\n    )}\\n${deprecatedColors}\\n}`,\n    {\n      semi: false,\n      singleQuote: true,\n      printWidth: 100,\n      parser: 'typescript',\n    }\n  )\n)\n\nconst defaultThemeTypes = Object.entries(defaultTheme)\n  .map(([name, value]) => {\n    // Special cases for slightly more accurate types\n    if (name === 'keyframes') {\n      return [name, `Record<${types.forKeys(value)}, Record<string, CSSDeclarationList>>`]\n    }\n\n    if (name === 'fontSize') {\n      return [name, `Record<${types.forKeys(value)}, [string, { lineHeight: string }]>`]\n    }\n\n    // General cases\n    if (typeof value === 'string') {\n      return [name, `string`]\n    }\n\n    if (typeof value === 'function') {\n      return [name, null]\n    }\n\n    if (typeof value === 'object') {\n      if (Object.keys(value).length === 0) {\n        return [name, null]\n      }\n\n      return [name, types.forValue(value)]\n    }\n\n    return [name, `unknown`]\n  })\n  .filter(([, type]) => type !== null)\n  .map(([name, type]) => `${name}: ${type}`)\n  .join('\\n')\n\nfs.writeFileSync(\n  path.join(process.cwd(), 'types', 'generated', 'default-theme.d.ts'),\n  prettier.format(\n    `\n    import { Config } from '../../types'\n    type CSSDeclarationList = Record<string, string>\n    export type DefaultTheme = Config['theme'] & { ${defaultThemeTypes} }\n  `,\n    {\n      semi: false,\n      singleQuote: true,\n      printWidth: 100,\n      parser: 'typescript',\n    }\n  )\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}