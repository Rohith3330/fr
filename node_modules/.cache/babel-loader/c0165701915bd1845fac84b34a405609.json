{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configure = configure;\nexports.getConfig = getConfig;\nexports.runWithExpensiveErrorDiagnosticsDisabled = runWithExpensiveErrorDiagnosticsDisabled;\n\nvar _prettyDom = require(\"./pretty-dom\"); // It would be cleaner for this to live inside './queries', but\n// other parts of the code assume that all exports from\n// './queries' are query functions.\n\n\nlet config = {\n  testIdAttribute: 'data-testid',\n  asyncUtilTimeout: 1000,\n  // asyncWrapper and advanceTimersWrapper is to support React's async `act` function.\n  // forcing react-testing-library to wrap all async functions would've been\n  // a total nightmare (consider wrapping every findBy* query and then also\n  // updating `within` so those would be wrapped too. Total nightmare).\n  // so we have this config option that's really only intended for\n  // react-testing-library to use. For that reason, this feature will remain\n  // undocumented.\n  asyncWrapper: cb => cb(),\n  unstable_advanceTimersWrapper: cb => cb(),\n  eventWrapper: cb => cb(),\n  // default value for the `hidden` option in `ByRole` queries\n  defaultHidden: false,\n  // default value for the `ignore` option in `ByText` queries\n  defaultIgnore: 'script, style',\n  // showOriginalStackTrace flag to show the full error stack traces for async errors\n  showOriginalStackTrace: false,\n  // throw errors w/ suggestions for better queries. Opt in so off by default.\n  throwSuggestions: false,\n\n  // called when getBy* queries fail. (message, container) => Error\n  getElementError(message, container) {\n    const prettifiedDOM = (0, _prettyDom.prettyDOM)(container);\n    const error = new Error([message, `Ignored nodes: comments, ${config.defaultIgnore}\\n${prettifiedDOM}`].filter(Boolean).join('\\n\\n'));\n    error.name = 'TestingLibraryElementError';\n    return error;\n  },\n\n  _disableExpensiveErrorDiagnostics: false,\n  computedStyleSupportsPseudoElements: false\n};\n\nfunction runWithExpensiveErrorDiagnosticsDisabled(callback) {\n  try {\n    config._disableExpensiveErrorDiagnostics = true;\n    return callback();\n  } finally {\n    config._disableExpensiveErrorDiagnostics = false;\n  }\n}\n\nfunction configure(newConfig) {\n  if (typeof newConfig === 'function') {\n    // Pass the existing config out to the provided function\n    // and accept a delta in return\n    newConfig = newConfig(config);\n  } // Merge the incoming config delta\n\n\n  config = { ...config,\n    ...newConfig\n  };\n}\n\nfunction getConfig() {\n  return config;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","configure","getConfig","runWithExpensiveErrorDiagnosticsDisabled","_prettyDom","require","config","testIdAttribute","asyncUtilTimeout","asyncWrapper","cb","unstable_advanceTimersWrapper","eventWrapper","defaultHidden","defaultIgnore","showOriginalStackTrace","throwSuggestions","getElementError","message","container","prettifiedDOM","prettyDOM","error","Error","filter","Boolean","join","name","_disableExpensiveErrorDiagnostics","computedStyleSupportsPseudoElements","callback","newConfig"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@testing-library/dom/dist/config.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configure = configure;\nexports.getConfig = getConfig;\nexports.runWithExpensiveErrorDiagnosticsDisabled = runWithExpensiveErrorDiagnosticsDisabled;\n\nvar _prettyDom = require(\"./pretty-dom\");\n\n// It would be cleaner for this to live inside './queries', but\n// other parts of the code assume that all exports from\n// './queries' are query functions.\nlet config = {\n  testIdAttribute: 'data-testid',\n  asyncUtilTimeout: 1000,\n  // asyncWrapper and advanceTimersWrapper is to support React's async `act` function.\n  // forcing react-testing-library to wrap all async functions would've been\n  // a total nightmare (consider wrapping every findBy* query and then also\n  // updating `within` so those would be wrapped too. Total nightmare).\n  // so we have this config option that's really only intended for\n  // react-testing-library to use. For that reason, this feature will remain\n  // undocumented.\n  asyncWrapper: cb => cb(),\n  unstable_advanceTimersWrapper: cb => cb(),\n  eventWrapper: cb => cb(),\n  // default value for the `hidden` option in `ByRole` queries\n  defaultHidden: false,\n  // default value for the `ignore` option in `ByText` queries\n  defaultIgnore: 'script, style',\n  // showOriginalStackTrace flag to show the full error stack traces for async errors\n  showOriginalStackTrace: false,\n  // throw errors w/ suggestions for better queries. Opt in so off by default.\n  throwSuggestions: false,\n\n  // called when getBy* queries fail. (message, container) => Error\n  getElementError(message, container) {\n    const prettifiedDOM = (0, _prettyDom.prettyDOM)(container);\n    const error = new Error([message, `Ignored nodes: comments, ${config.defaultIgnore}\\n${prettifiedDOM}`].filter(Boolean).join('\\n\\n'));\n    error.name = 'TestingLibraryElementError';\n    return error;\n  },\n\n  _disableExpensiveErrorDiagnostics: false,\n  computedStyleSupportsPseudoElements: false\n};\n\nfunction runWithExpensiveErrorDiagnosticsDisabled(callback) {\n  try {\n    config._disableExpensiveErrorDiagnostics = true;\n    return callback();\n  } finally {\n    config._disableExpensiveErrorDiagnostics = false;\n  }\n}\n\nfunction configure(newConfig) {\n  if (typeof newConfig === 'function') {\n    // Pass the existing config out to the provided function\n    // and accept a delta in return\n    newConfig = newConfig(config);\n  } // Merge the incoming config delta\n\n\n  config = { ...config,\n    ...newConfig\n  };\n}\n\nfunction getConfig() {\n  return config;\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;AACAF,OAAO,CAACG,SAAR,GAAoBA,SAApB;AACAH,OAAO,CAACI,wCAAR,GAAmDA,wCAAnD;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB,C,CAEA;AACA;AACA;;;AACA,IAAIC,MAAM,GAAG;EACXC,eAAe,EAAE,aADN;EAEXC,gBAAgB,EAAE,IAFP;EAGX;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,YAAY,EAAEC,EAAE,IAAIA,EAAE,EAVX;EAWXC,6BAA6B,EAAED,EAAE,IAAIA,EAAE,EAX5B;EAYXE,YAAY,EAAEF,EAAE,IAAIA,EAAE,EAZX;EAaX;EACAG,aAAa,EAAE,KAdJ;EAeX;EACAC,aAAa,EAAE,eAhBJ;EAiBX;EACAC,sBAAsB,EAAE,KAlBb;EAmBX;EACAC,gBAAgB,EAAE,KApBP;;EAsBX;EACAC,eAAe,CAACC,OAAD,EAAUC,SAAV,EAAqB;IAClC,MAAMC,aAAa,GAAG,CAAC,GAAGhB,UAAU,CAACiB,SAAf,EAA0BF,SAA1B,CAAtB;IACA,MAAMG,KAAK,GAAG,IAAIC,KAAJ,CAAU,CAACL,OAAD,EAAW,4BAA2BZ,MAAM,CAACQ,aAAc,KAAIM,aAAc,EAA7E,EAAgFI,MAAhF,CAAuFC,OAAvF,EAAgGC,IAAhG,CAAqG,MAArG,CAAV,CAAd;IACAJ,KAAK,CAACK,IAAN,GAAa,4BAAb;IACA,OAAOL,KAAP;EACD,CA5BU;;EA8BXM,iCAAiC,EAAE,KA9BxB;EA+BXC,mCAAmC,EAAE;AA/B1B,CAAb;;AAkCA,SAAS1B,wCAAT,CAAkD2B,QAAlD,EAA4D;EAC1D,IAAI;IACFxB,MAAM,CAACsB,iCAAP,GAA2C,IAA3C;IACA,OAAOE,QAAQ,EAAf;EACD,CAHD,SAGU;IACRxB,MAAM,CAACsB,iCAAP,GAA2C,KAA3C;EACD;AACF;;AAED,SAAS3B,SAAT,CAAmB8B,SAAnB,EAA8B;EAC5B,IAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;IACnC;IACA;IACAA,SAAS,GAAGA,SAAS,CAACzB,MAAD,CAArB;EACD,CAL2B,CAK1B;;;EAGFA,MAAM,GAAG,EAAE,GAAGA,MAAL;IACP,GAAGyB;EADI,CAAT;AAGD;;AAED,SAAS7B,SAAT,GAAqB;EACnB,OAAOI,MAAP;AACD"},"metadata":{},"sourceType":"script"}