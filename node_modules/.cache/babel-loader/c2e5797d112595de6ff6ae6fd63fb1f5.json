{"ast":null,"code":"import e from \"postcss-value-parser\";\n\nconst o = o => {\n  const r = !(\"preserve\" in Object(o)) || Boolean(o.preserve);\n  return {\n    postcssPlugin: \"postcss-overflow-shorthand\",\n    Declaration: (o, _ref) => {\n      let {\n        result: t\n      } = _ref;\n      if (\"overflow\" !== o.prop.toLowerCase()) return;\n      let s = \"\",\n          a = \"\";\n      const l = o.value;\n\n      try {\n        const o = e(l).nodes.slice().filter(e => \"comment\" !== e.type && \"space\" !== e.type);\n        if (o.length < 2) return;\n        s = e.stringify(o[0]), a = e.stringify(o[1]);\n      } catch (e) {\n        return void o.warn(t, `Failed to parse value '${l}' as a shorthand for \"overflow\". Leaving the original value intact.`);\n      }\n\n      s && a && (s.toLowerCase() === a.toLowerCase() ? o.cloneBefore({\n        value: s\n      }) : (o.cloneBefore({\n        prop: \"overflow-x\",\n        value: s\n      }), o.cloneBefore({\n        prop: \"overflow-y\",\n        value: a\n      })), r || o.remove());\n    }\n  };\n};\n\no.postcss = !0;\nexport { o as default };","map":{"version":3,"names":["e","o","r","Object","Boolean","preserve","postcssPlugin","Declaration","result","t","prop","toLowerCase","s","a","l","value","nodes","slice","filter","type","length","stringify","warn","cloneBefore","remove","postcss","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-overflow-shorthand/dist/index.mjs"],"sourcesContent":["import e from\"postcss-value-parser\";const o=o=>{const r=!(\"preserve\"in Object(o))||Boolean(o.preserve);return{postcssPlugin:\"postcss-overflow-shorthand\",Declaration:(o,{result:t})=>{if(\"overflow\"!==o.prop.toLowerCase())return;let s=\"\",a=\"\";const l=o.value;try{const o=e(l).nodes.slice().filter((e=>\"comment\"!==e.type&&\"space\"!==e.type));if(o.length<2)return;s=e.stringify(o[0]),a=e.stringify(o[1])}catch(e){return void o.warn(t,`Failed to parse value '${l}' as a shorthand for \"overflow\". Leaving the original value intact.`)}s&&a&&(s.toLowerCase()===a.toLowerCase()?o.cloneBefore({value:s}):(o.cloneBefore({prop:\"overflow-x\",value:s}),o.cloneBefore({prop:\"overflow-y\",value:a})),r||o.remove())}}};o.postcss=!0;export{o as default};\n"],"mappings":"AAAA,OAAOA,CAAP,MAAa,sBAAb;;AAAoC,MAAMC,CAAC,GAACA,CAAC,IAAE;EAAC,MAAMC,CAAC,GAAC,EAAE,cAAaC,MAAM,CAACF,CAAD,CAArB,KAA2BG,OAAO,CAACH,CAAC,CAACI,QAAH,CAA1C;EAAuD,OAAM;IAACC,aAAa,EAAC,4BAAf;IAA4CC,WAAW,EAAC,CAACN,CAAD,WAAgB;MAAA,IAAb;QAACO,MAAM,EAACC;MAAR,CAAa;MAAC,IAAG,eAAaR,CAAC,CAACS,IAAF,CAAOC,WAAP,EAAhB,EAAqC;MAAO,IAAIC,CAAC,GAAC,EAAN;MAAA,IAASC,CAAC,GAAC,EAAX;MAAc,MAAMC,CAAC,GAACb,CAAC,CAACc,KAAV;;MAAgB,IAAG;QAAC,MAAMd,CAAC,GAACD,CAAC,CAACc,CAAD,CAAD,CAAKE,KAAL,CAAWC,KAAX,GAAmBC,MAAnB,CAA2BlB,CAAC,IAAE,cAAYA,CAAC,CAACmB,IAAd,IAAoB,YAAUnB,CAAC,CAACmB,IAA9D,CAAR;QAA6E,IAAGlB,CAAC,CAACmB,MAAF,GAAS,CAAZ,EAAc;QAAOR,CAAC,GAACZ,CAAC,CAACqB,SAAF,CAAYpB,CAAC,CAAC,CAAD,CAAb,CAAF,EAAoBY,CAAC,GAACb,CAAC,CAACqB,SAAF,CAAYpB,CAAC,CAAC,CAAD,CAAb,CAAtB;MAAwC,CAA9I,CAA8I,OAAMD,CAAN,EAAQ;QAAC,OAAO,KAAKC,CAAC,CAACqB,IAAF,CAAOb,CAAP,EAAU,0BAAyBK,CAAE,qEAArC,CAAZ;MAAuH;;MAAAF,CAAC,IAAEC,CAAH,KAAOD,CAAC,CAACD,WAAF,OAAkBE,CAAC,CAACF,WAAF,EAAlB,GAAkCV,CAAC,CAACsB,WAAF,CAAc;QAACR,KAAK,EAACH;MAAP,CAAd,CAAlC,IAA4DX,CAAC,CAACsB,WAAF,CAAc;QAACb,IAAI,EAAC,YAAN;QAAmBK,KAAK,EAACH;MAAzB,CAAd,GAA2CX,CAAC,CAACsB,WAAF,CAAc;QAACb,IAAI,EAAC,YAAN;QAAmBK,KAAK,EAACF;MAAzB,CAAd,CAAvG,GAAmJX,CAAC,IAAED,CAAC,CAACuB,MAAF,EAA7J;IAAyK;EAA1kB,CAAN;AAAklB,CAArpB;;AAAspBvB,CAAC,CAACwB,OAAF,GAAU,CAAC,CAAX;AAAa,SAAOxB,CAAC,IAAIyB,OAAZ"},"metadata":{},"sourceType":"module"}