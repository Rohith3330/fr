{"ast":null,"code":"/* eslint global-require: 0 */\nimport fs from 'fs';\nimport path from 'path';\nimport expect from 'expect';\nimport plugin from '../src';\nconst rules = fs.readdirSync(path.resolve(__dirname, '../src/rules/')).map(f => path.basename(f, '.js'));\ndescribe('all rule files should be exported by the plugin', () => {\n  rules.forEach(ruleName => {\n    it(`should export ${ruleName}`, () => {\n      expect(plugin.rules[ruleName]).toEqual(require(path.join('../src/rules', ruleName)) // eslint-disable-line\n      );\n    });\n  });\n});\ndescribe('configurations', () => {\n  it('should export a \\'recommended\\' configuration', () => {\n    expect(plugin.configs.recommended).toBeDefined();\n  });\n});\ndescribe('schemas', () => {\n  rules.forEach(ruleName => {\n    it(`${ruleName} should export a schema with type object`, () => {\n      const rule = require(path.join('../src/rules', ruleName)); // eslint-disable-line\n\n\n      const schema = rule.meta && rule.meta.schema && rule.meta.schema[0];\n      const {\n        type\n      } = schema;\n      expect(type).toEqual('object');\n    });\n  });\n});","map":{"version":3,"names":["fs","path","expect","plugin","rules","readdirSync","resolve","__dirname","map","f","basename","describe","forEach","ruleName","it","toEqual","require","join","configs","recommended","toBeDefined","rule","schema","meta","type"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/index-test.js"],"sourcesContent":["/* eslint global-require: 0 */\n\nimport fs from 'fs';\nimport path from 'path';\nimport expect from 'expect';\nimport plugin from '../src';\n\nconst rules = fs.readdirSync(path.resolve(__dirname, '../src/rules/'))\n  .map((f) => path.basename(f, '.js'));\n\ndescribe('all rule files should be exported by the plugin', () => {\n  rules.forEach((ruleName) => {\n    it(`should export ${ruleName}`, () => {\n      expect(plugin.rules[ruleName]).toEqual(\n        require(path.join('../src/rules', ruleName)) // eslint-disable-line\n      );\n    });\n  });\n});\n\ndescribe('configurations', () => {\n  it('should export a \\'recommended\\' configuration', () => {\n    expect(plugin.configs.recommended).toBeDefined();\n  });\n});\n\ndescribe('schemas', () => {\n  rules.forEach((ruleName) => {\n    it(`${ruleName} should export a schema with type object`, () => {\n      const rule = require(path.join('../src/rules', ruleName)); // eslint-disable-line\n      const schema = rule.meta && rule.meta.schema && rule.meta.schema[0];\n      const { type } = schema;\n\n      expect(type).toEqual('object');\n    });\n  });\n});\n"],"mappings":"AAAA;AAEA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,MAAMC,KAAK,GAAGJ,EAAE,CAACK,WAAH,CAAeJ,IAAI,CAACK,OAAL,CAAaC,SAAb,EAAwB,eAAxB,CAAf,EACXC,GADW,CACNC,CAAD,IAAOR,IAAI,CAACS,QAAL,CAAcD,CAAd,EAAiB,KAAjB,CADA,CAAd;AAGAE,QAAQ,CAAC,iDAAD,EAAoD,MAAM;EAChEP,KAAK,CAACQ,OAAN,CAAeC,QAAD,IAAc;IAC1BC,EAAE,CAAE,iBAAgBD,QAAS,EAA3B,EAA8B,MAAM;MACpCX,MAAM,CAACC,MAAM,CAACC,KAAP,CAAaS,QAAb,CAAD,CAAN,CAA+BE,OAA/B,CACEC,OAAO,CAACf,IAAI,CAACgB,IAAL,CAAU,cAAV,EAA0BJ,QAA1B,CAAD,CADT,CAC+C;MAD/C;IAGD,CAJC,CAAF;EAKD,CAND;AAOD,CARO,CAAR;AAUAF,QAAQ,CAAC,gBAAD,EAAmB,MAAM;EAC/BG,EAAE,CAAC,+CAAD,EAAkD,MAAM;IACxDZ,MAAM,CAACC,MAAM,CAACe,OAAP,CAAeC,WAAhB,CAAN,CAAmCC,WAAnC;EACD,CAFC,CAAF;AAGD,CAJO,CAAR;AAMAT,QAAQ,CAAC,SAAD,EAAY,MAAM;EACxBP,KAAK,CAACQ,OAAN,CAAeC,QAAD,IAAc;IAC1BC,EAAE,CAAE,GAAED,QAAS,0CAAb,EAAwD,MAAM;MAC9D,MAAMQ,IAAI,GAAGL,OAAO,CAACf,IAAI,CAACgB,IAAL,CAAU,cAAV,EAA0BJ,QAA1B,CAAD,CAApB,CAD8D,CACH;;;MAC3D,MAAMS,MAAM,GAAGD,IAAI,CAACE,IAAL,IAAaF,IAAI,CAACE,IAAL,CAAUD,MAAvB,IAAiCD,IAAI,CAACE,IAAL,CAAUD,MAAV,CAAiB,CAAjB,CAAhD;MACA,MAAM;QAAEE;MAAF,IAAWF,MAAjB;MAEApB,MAAM,CAACsB,IAAD,CAAN,CAAaT,OAAb,CAAqB,QAArB;IACD,CANC,CAAF;EAOD,CARD;AASD,CAVO,CAAR"},"metadata":{},"sourceType":"module"}