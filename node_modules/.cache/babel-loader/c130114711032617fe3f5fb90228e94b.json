{"ast":null,"code":"'use strict';\n\nvar test = require('tape');\n\nvar inspect = require('object-inspect');\n\nvar hasBigInts = require('has-bigints')();\n\nvar hasSymbols = require('has-symbols')();\n\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar isBigInt = require('../');\n\nvar debug = function (v, m) {\n  return inspect(v) + ' ' + m;\n};\n\nvar forEach = function (arr, func) {\n  var i;\n\n  for (i = 0; i < arr.length; ++i) {\n    func(arr[i], i, arr);\n  }\n};\n\ntest('non-BigInt values', function (t) {\n  var nonBigInts = [true, false, Object(true), Object(false), null, undefined, {}, [], /a/g, 'string', 42, new Date(), function () {}, NaN];\n\n  if (hasSymbols) {\n    nonBigInts.push(Symbol.iterator, Symbol('foo'));\n  }\n\n  t.plan(nonBigInts.length);\n  forEach(nonBigInts, function (nonBigInt) {\n    t.equal(false, isBigInt(nonBigInt), debug(nonBigInt, 'is not a BigInt'));\n  });\n  t.end();\n});\ntest('faked BigInt values', function (t) {\n  t.test('real BigInt valueOf', {\n    skip: !hasBigInts\n  }, function (st) {\n    var fakeBigInt = {\n      valueOf: function () {\n        return BigInt(42);\n      }\n    };\n    st.equal(false, isBigInt(fakeBigInt), 'object with valueOf returning a BigInt is not a BigInt');\n    st.end();\n  });\n  t.test('faked @@toStringTag', {\n    skip: !hasBigInts || !hasToStringTag\n  }, function (st) {\n    var fakeBigInt = {\n      valueOf: function () {\n        return BigInt(42);\n      }\n    };\n    fakeBigInt[Symbol.toStringTag] = 'BigInt';\n    st.equal(false, isBigInt(fakeBigInt), 'object with fake BigInt @@toStringTag and valueOf returning a BigInt is not a BigInt');\n    var notSoFakeBigInt = {\n      valueOf: function () {\n        return 42;\n      }\n    };\n    notSoFakeBigInt[Symbol.toStringTag] = 'BigInt';\n    st.equal(false, isBigInt(notSoFakeBigInt), 'object with fake BigInt @@toStringTag and valueOf not returning a BigInt is not a BigInt');\n    st.end();\n  });\n  var fakeBigIntString = {\n    toString: function () {\n      return '42n';\n    }\n  };\n  t.equal(false, isBigInt(fakeBigIntString), 'object with toString returning 42n is not a BigInt');\n  t.end();\n});\ntest('BigInt support', {\n  skip: !hasBigInts\n}, function (t) {\n  forEach([Function('return 42n')(), // eslint-disable-line no-new-func\n  BigInt(42), Object(BigInt(42))], function (bigInt) {\n    t.equal(true, isBigInt(bigInt), debug(bigInt, 'is a BigInt'));\n  });\n  t.end();\n});","map":{"version":3,"names":["test","require","inspect","hasBigInts","hasSymbols","hasToStringTag","isBigInt","debug","v","m","forEach","arr","func","i","length","t","nonBigInts","Object","undefined","Date","NaN","push","Symbol","iterator","plan","nonBigInt","equal","end","skip","st","fakeBigInt","valueOf","BigInt","toStringTag","notSoFakeBigInt","fakeBigIntString","toString","Function","bigInt"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/is-bigint/test/index.js"],"sourcesContent":["'use strict';\n\nvar test = require('tape');\nvar inspect = require('object-inspect');\nvar hasBigInts = require('has-bigints')();\nvar hasSymbols = require('has-symbols')();\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar isBigInt = require('../');\n\nvar debug = function (v, m) { return inspect(v) + ' ' + m; };\n\nvar forEach = function (arr, func) {\n\tvar i;\n\tfor (i = 0; i < arr.length; ++i) {\n\t\tfunc(arr[i], i, arr);\n\t}\n};\n\ntest('non-BigInt values', function (t) {\n\tvar nonBigInts = [\n\t\ttrue,\n\t\tfalse,\n\t\tObject(true),\n\t\tObject(false),\n\t\tnull,\n\t\tundefined,\n\t\t{},\n\t\t[],\n\t\t/a/g,\n\t\t'string',\n\t\t42,\n\t\tnew Date(),\n\t\tfunction () {},\n\t\tNaN\n\t];\n\tif (hasSymbols) {\n\t\tnonBigInts.push(Symbol.iterator, Symbol('foo'));\n\t}\n\tt.plan(nonBigInts.length);\n\tforEach(nonBigInts, function (nonBigInt) {\n\t\tt.equal(false, isBigInt(nonBigInt), debug(nonBigInt, 'is not a BigInt'));\n\t});\n\tt.end();\n});\n\ntest('faked BigInt values', function (t) {\n\tt.test('real BigInt valueOf', { skip: !hasBigInts }, function (st) {\n\t\tvar fakeBigInt = { valueOf: function () { return BigInt(42); } };\n\t\tst.equal(false, isBigInt(fakeBigInt), 'object with valueOf returning a BigInt is not a BigInt');\n\t\tst.end();\n\t});\n\n\tt.test('faked @@toStringTag', { skip: !hasBigInts || !hasToStringTag }, function (st) {\n\t\tvar fakeBigInt = { valueOf: function () { return BigInt(42); } };\n\t\tfakeBigInt[Symbol.toStringTag] = 'BigInt';\n\t\tst.equal(false, isBigInt(fakeBigInt), 'object with fake BigInt @@toStringTag and valueOf returning a BigInt is not a BigInt');\n\n\t\tvar notSoFakeBigInt = { valueOf: function () { return 42; } };\n\t\tnotSoFakeBigInt[Symbol.toStringTag] = 'BigInt';\n\t\tst.equal(false, isBigInt(notSoFakeBigInt), 'object with fake BigInt @@toStringTag and valueOf not returning a BigInt is not a BigInt');\n\t\tst.end();\n\t});\n\n\tvar fakeBigIntString = { toString: function () { return '42n'; } };\n\tt.equal(false, isBigInt(fakeBigIntString), 'object with toString returning 42n is not a BigInt');\n\n\tt.end();\n});\n\ntest('BigInt support', { skip: !hasBigInts }, function (t) {\n\tforEach([\n\t\tFunction('return 42n')(), // eslint-disable-line no-new-func\n\t\tBigInt(42),\n\t\tObject(BigInt(42))\n\t], function (bigInt) {\n\t\tt.equal(true, isBigInt(bigInt), debug(bigInt, 'is a BigInt'));\n\t});\n\n\tt.end();\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}