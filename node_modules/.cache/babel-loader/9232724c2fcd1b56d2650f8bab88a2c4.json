{"ast":null,"code":"import postcss from 'postcss';\nimport selectorParser from 'postcss-selector-parser';\nimport { flagEnabled } from '../featureFlags';\nlet getNode = {\n  id(node) {\n    return selectorParser.attribute({\n      attribute: 'id',\n      operator: '=',\n      value: node.value,\n      quoteMark: '\"'\n    });\n  }\n\n};\n\nfunction minimumImpactSelector(nodes) {\n  let rest = nodes.filter(node => {\n    // Keep non-pseudo nodes\n    if (node.type !== 'pseudo') return true; // Keep pseudo nodes that have subnodes\n    // E.g.: `:not()` contains subnodes inside the parentheses\n\n    if (node.nodes.length > 0) return true; // Keep pseudo `elements`\n    // This implicitly means that we ignore pseudo `classes`\n\n    return node.value.startsWith('::') || [':before', ':after', ':first-line', ':first-letter'].includes(node.value);\n  }).reverse();\n  let searchFor = new Set(['tag', 'class', 'id', 'attribute']);\n  let splitPointIdx = rest.findIndex(n => searchFor.has(n.type));\n  if (splitPointIdx === -1) return rest.reverse().join('').trim();\n  let node = rest[splitPointIdx];\n  let bestNode = getNode[node.type] ? getNode[node.type](node) : node;\n  rest = rest.slice(0, splitPointIdx);\n  let combinatorIdx = rest.findIndex(n => n.type === 'combinator' && n.value === '>');\n\n  if (combinatorIdx !== -1) {\n    rest.splice(0, combinatorIdx);\n    rest.unshift(selectorParser.universal());\n  }\n\n  return [bestNode, ...rest.reverse()].join('').trim();\n}\n\nexport let elementSelectorParser = selectorParser(selectors => {\n  return selectors.map(s => {\n    let nodes = s.split(n => n.type === 'combinator' && n.value === ' ').pop();\n    return minimumImpactSelector(nodes);\n  });\n});\nlet cache = new Map();\n\nfunction extractElementSelector(selector) {\n  if (!cache.has(selector)) {\n    cache.set(selector, elementSelectorParser.transformSync(selector));\n  }\n\n  return cache.get(selector);\n}\n\nexport default function resolveDefaultsAtRules(_ref) {\n  let {\n    tailwindConfig\n  } = _ref;\n  return root => {\n    let variableNodeMap = new Map();\n    /** @type {Set<import('postcss').AtRule>} */\n\n    let universals = new Set();\n    root.walkAtRules('defaults', rule => {\n      if (rule.nodes && rule.nodes.length > 0) {\n        universals.add(rule);\n        return;\n      }\n\n      let variable = rule.params;\n\n      if (!variableNodeMap.has(variable)) {\n        variableNodeMap.set(variable, new Set());\n      }\n\n      variableNodeMap.get(variable).add(rule.parent);\n      rule.remove();\n    });\n\n    if (flagEnabled(tailwindConfig, 'optimizeUniversalDefaults')) {\n      for (let universal of universals) {\n        /** @type {Map<string, Set<string>>} */\n        let selectorGroups = new Map();\n        let rules = variableNodeMap.get(universal.params) ?? [];\n\n        for (let rule of rules) {\n          for (let selector of extractElementSelector(rule.selector)) {\n            // If selector contains a vendor prefix after a pseudo element or class,\n            // we consider them separately because merging the declarations into\n            // a single rule will cause browsers that do not understand the\n            // vendor prefix to throw out the whole rule\n            let selectorGroupName = selector.includes(':-') || selector.includes('::-') ? selector : '__DEFAULT__';\n            let selectors = selectorGroups.get(selectorGroupName) ?? new Set();\n            selectorGroups.set(selectorGroupName, selectors);\n            selectors.add(selector);\n          }\n        }\n\n        if (flagEnabled(tailwindConfig, 'optimizeUniversalDefaults')) {\n          if (selectorGroups.size === 0) {\n            universal.remove();\n            continue;\n          }\n\n          for (let [, selectors] of selectorGroups) {\n            let universalRule = postcss.rule({\n              source: universal.source\n            });\n            universalRule.selectors = [...selectors];\n            universalRule.append(universal.nodes.map(node => node.clone()));\n            universal.before(universalRule);\n          }\n        }\n\n        universal.remove();\n      }\n    } else if (universals.size) {\n      let universalRule = postcss.rule({\n        selectors: ['*', '::before', '::after']\n      });\n\n      for (let universal of universals) {\n        universalRule.append(universal.nodes);\n\n        if (!universalRule.parent) {\n          universal.before(universalRule);\n        }\n\n        if (!universalRule.source) {\n          universalRule.source = universal.source;\n        }\n\n        universal.remove();\n      }\n\n      let backdropRule = universalRule.clone({\n        selectors: ['::backdrop']\n      });\n      universalRule.after(backdropRule);\n    }\n  };\n}","map":{"version":3,"names":["postcss","selectorParser","flagEnabled","getNode","id","node","attribute","operator","value","quoteMark","minimumImpactSelector","nodes","rest","filter","type","length","startsWith","includes","reverse","searchFor","Set","splitPointIdx","findIndex","n","has","join","trim","bestNode","slice","combinatorIdx","splice","unshift","universal","elementSelectorParser","selectors","map","s","split","pop","cache","Map","extractElementSelector","selector","set","transformSync","get","resolveDefaultsAtRules","tailwindConfig","root","variableNodeMap","universals","walkAtRules","rule","add","variable","params","parent","remove","selectorGroups","rules","selectorGroupName","size","universalRule","source","append","clone","before","backdropRule","after"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/lib/resolveDefaultsAtRules.js"],"sourcesContent":["import postcss from 'postcss'\nimport selectorParser from 'postcss-selector-parser'\nimport { flagEnabled } from '../featureFlags'\n\nlet getNode = {\n  id(node) {\n    return selectorParser.attribute({\n      attribute: 'id',\n      operator: '=',\n      value: node.value,\n      quoteMark: '\"',\n    })\n  },\n}\n\nfunction minimumImpactSelector(nodes) {\n  let rest = nodes\n    .filter((node) => {\n      // Keep non-pseudo nodes\n      if (node.type !== 'pseudo') return true\n\n      // Keep pseudo nodes that have subnodes\n      // E.g.: `:not()` contains subnodes inside the parentheses\n      if (node.nodes.length > 0) return true\n\n      // Keep pseudo `elements`\n      // This implicitly means that we ignore pseudo `classes`\n      return (\n        node.value.startsWith('::') ||\n        [':before', ':after', ':first-line', ':first-letter'].includes(node.value)\n      )\n    })\n    .reverse()\n\n  let searchFor = new Set(['tag', 'class', 'id', 'attribute'])\n\n  let splitPointIdx = rest.findIndex((n) => searchFor.has(n.type))\n  if (splitPointIdx === -1) return rest.reverse().join('').trim()\n\n  let node = rest[splitPointIdx]\n  let bestNode = getNode[node.type] ? getNode[node.type](node) : node\n\n  rest = rest.slice(0, splitPointIdx)\n\n  let combinatorIdx = rest.findIndex((n) => n.type === 'combinator' && n.value === '>')\n  if (combinatorIdx !== -1) {\n    rest.splice(0, combinatorIdx)\n    rest.unshift(selectorParser.universal())\n  }\n\n  return [bestNode, ...rest.reverse()].join('').trim()\n}\n\nexport let elementSelectorParser = selectorParser((selectors) => {\n  return selectors.map((s) => {\n    let nodes = s.split((n) => n.type === 'combinator' && n.value === ' ').pop()\n    return minimumImpactSelector(nodes)\n  })\n})\n\nlet cache = new Map()\n\nfunction extractElementSelector(selector) {\n  if (!cache.has(selector)) {\n    cache.set(selector, elementSelectorParser.transformSync(selector))\n  }\n\n  return cache.get(selector)\n}\n\nexport default function resolveDefaultsAtRules({ tailwindConfig }) {\n  return (root) => {\n    let variableNodeMap = new Map()\n\n    /** @type {Set<import('postcss').AtRule>} */\n    let universals = new Set()\n\n    root.walkAtRules('defaults', (rule) => {\n      if (rule.nodes && rule.nodes.length > 0) {\n        universals.add(rule)\n        return\n      }\n\n      let variable = rule.params\n      if (!variableNodeMap.has(variable)) {\n        variableNodeMap.set(variable, new Set())\n      }\n\n      variableNodeMap.get(variable).add(rule.parent)\n\n      rule.remove()\n    })\n\n    if (flagEnabled(tailwindConfig, 'optimizeUniversalDefaults')) {\n      for (let universal of universals) {\n        /** @type {Map<string, Set<string>>} */\n        let selectorGroups = new Map()\n\n        let rules = variableNodeMap.get(universal.params) ?? []\n\n        for (let rule of rules) {\n          for (let selector of extractElementSelector(rule.selector)) {\n            // If selector contains a vendor prefix after a pseudo element or class,\n            // we consider them separately because merging the declarations into\n            // a single rule will cause browsers that do not understand the\n            // vendor prefix to throw out the whole rule\n            let selectorGroupName =\n              selector.includes(':-') || selector.includes('::-') ? selector : '__DEFAULT__'\n\n            let selectors = selectorGroups.get(selectorGroupName) ?? new Set()\n            selectorGroups.set(selectorGroupName, selectors)\n\n            selectors.add(selector)\n          }\n        }\n\n        if (flagEnabled(tailwindConfig, 'optimizeUniversalDefaults')) {\n          if (selectorGroups.size === 0) {\n            universal.remove()\n            continue\n          }\n\n          for (let [, selectors] of selectorGroups) {\n            let universalRule = postcss.rule({\n              source: universal.source,\n            })\n\n            universalRule.selectors = [...selectors]\n\n            universalRule.append(universal.nodes.map((node) => node.clone()))\n            universal.before(universalRule)\n          }\n        }\n\n        universal.remove()\n      }\n    } else if (universals.size) {\n      let universalRule = postcss.rule({\n        selectors: ['*', '::before', '::after'],\n      })\n\n      for (let universal of universals) {\n        universalRule.append(universal.nodes)\n\n        if (!universalRule.parent) {\n          universal.before(universalRule)\n        }\n\n        if (!universalRule.source) {\n          universalRule.source = universal.source\n        }\n\n        universal.remove()\n      }\n\n      let backdropRule = universalRule.clone({\n        selectors: ['::backdrop'],\n      })\n\n      universalRule.after(backdropRule)\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}