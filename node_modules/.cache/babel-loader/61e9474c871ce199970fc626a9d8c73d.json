{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GlobalScope = void 0;\n\nconst types_1 = require(\"@typescript-eslint/types\");\n\nconst assert_1 = require(\"../assert\");\n\nconst ImplicitGlobalVariableDefinition_1 = require(\"../definition/ImplicitGlobalVariableDefinition\");\n\nconst variable_1 = require(\"../variable\");\n\nconst ScopeBase_1 = require(\"./ScopeBase\");\n\nconst ScopeType_1 = require(\"./ScopeType\");\n\nclass GlobalScope extends ScopeBase_1.ScopeBase {\n  constructor(scopeManager, block) {\n    super(scopeManager, ScopeType_1.ScopeType.global, null, block, false);\n    this.implicit = {\n      set: new Map(),\n      variables: [],\n      leftToBeResolved: []\n    };\n  }\n\n  defineImplicitVariable(name, options) {\n    this.defineVariable(new variable_1.ImplicitLibVariable(this, name, options), this.set, this.variables, null, null);\n  }\n\n  close(scopeManager) {\n    (0, assert_1.assert)(this.leftToResolve);\n\n    for (const ref of this.leftToResolve) {\n      if (ref.maybeImplicitGlobal && !this.set.has(ref.identifier.name)) {\n        // create an implicit global variable from assignment expression\n        const info = ref.maybeImplicitGlobal;\n        const node = info.pattern;\n\n        if (node && node.type === types_1.AST_NODE_TYPES.Identifier) {\n          this.defineVariable(node.name, this.implicit.set, this.implicit.variables, node, new ImplicitGlobalVariableDefinition_1.ImplicitGlobalVariableDefinition(info.pattern, info.node));\n        }\n      }\n    }\n\n    this.implicit.leftToBeResolved = this.leftToResolve;\n    return super.close(scopeManager);\n  }\n\n}\n\nexports.GlobalScope = GlobalScope;","map":{"version":3,"mappings":";;;;;;;AACA;;AAEA;;AACA;;AAIA;;AAEA;;AACA;;AAEA,MAAMA,WAAN,SAA0BC,qBAA1B,CAOC;EAYCC,YAAYC,YAAZ,EAAwCC,KAAxC,EAAmE;IACjE,MAAMD,YAAN,EAAoBE,sBAAUC,MAA9B,EAAsC,IAAtC,EAA4CF,KAA5C,EAAmD,KAAnD;IACA,KAAKG,QAAL,GAAgB;MACdC,GAAG,EAAE,IAAIC,GAAJ,EADS;MAEdC,SAAS,EAAE,EAFG;MAGdC,gBAAgB,EAAE;IAHJ,CAAhB;EAKD;;EAEMC,sBAAsB,CAC3BC,IAD2B,EAE3BC,OAF2B,EAEQ;IAEnC,KAAKC,cAAL,CACE,IAAIC,8BAAJ,CAAwB,IAAxB,EAA8BH,IAA9B,EAAoCC,OAApC,CADF,EAEE,KAAKN,GAFP,EAGE,KAAKE,SAHP,EAIE,IAJF,EAKE,IALF;EAOD;;EAEMO,KAAK,CAACd,YAAD,EAA2B;IACrC,qBAAO,KAAKe,aAAZ;;IAEA,KAAK,MAAMC,GAAX,IAAkB,KAAKD,aAAvB,EAAsC;MACpC,IAAIC,GAAG,CAACC,mBAAJ,IAA2B,CAAC,KAAKZ,GAAL,CAASa,GAAT,CAAaF,GAAG,CAACG,UAAJ,CAAeT,IAA5B,CAAhC,EAAmE;QACjE;QACA,MAAMU,IAAI,GAAGJ,GAAG,CAACC,mBAAjB;QACA,MAAMI,IAAI,GAAGD,IAAI,CAACE,OAAlB;;QACA,IAAID,IAAI,IAAIA,IAAI,CAACE,IAAL,KAAcC,uBAAeC,UAAzC,EAAqD;UACnD,KAAKb,cAAL,CACES,IAAI,CAACX,IADP,EAEE,KAAKN,QAAL,CAAcC,GAFhB,EAGE,KAAKD,QAAL,CAAcG,SAHhB,EAIEc,IAJF,EAKE,IAAIK,mEAAJ,CAAqCN,IAAI,CAACE,OAA1C,EAAmDF,IAAI,CAACC,IAAxD,CALF;QAOD;MACF;IACF;;IAED,KAAKjB,QAAL,CAAcI,gBAAd,GAAiC,KAAKO,aAAtC;IACA,OAAO,MAAMD,KAAN,CAAYd,YAAZ,CAAP;EACD;;AAxDF;;AA2DQ2B","names":["GlobalScope","ScopeBase_1","constructor","scopeManager","block","ScopeType_1","global","implicit","set","Map","variables","leftToBeResolved","defineImplicitVariable","name","options","defineVariable","variable_1","close","leftToResolve","ref","maybeImplicitGlobal","has","identifier","info","node","pattern","type","types_1","Identifier","ImplicitGlobalVariableDefinition_1","exports"],"sources":["../../src/scope/GlobalScope.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}