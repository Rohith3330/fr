{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n\n_export(exports, {\n  env: () => env,\n  contextMap: () => contextMap,\n  configContextMap: () => configContextMap,\n  contextSourcesMap: () => contextSourcesMap,\n  sourceHashMap: () => sourceHashMap,\n  NOT_ON_DEMAND: () => NOT_ON_DEMAND,\n  resolveDebug: () => resolveDebug\n});\n\nconst env = {\n  NODE_ENV: process.env.NODE_ENV,\n  DEBUG: resolveDebug(process.env.DEBUG)\n};\nconst contextMap = new Map();\nconst configContextMap = new Map();\nconst contextSourcesMap = new Map();\nconst sourceHashMap = new Map();\nconst NOT_ON_DEMAND = new String(\"*\");\n\nfunction resolveDebug(debug) {\n  if (debug === undefined) {\n    return false;\n  } // Environment variables are strings, so convert to boolean\n\n\n  if (debug === \"true\" || debug === \"1\") {\n    return true;\n  }\n\n  if (debug === \"false\" || debug === \"0\") {\n    return false;\n  } // Keep the debug convention into account:\n  // DEBUG=* -> This enables all debug modes\n  // DEBUG=projectA,projectB,projectC -> This enables debug for projectA, projectB and projectC\n  // DEBUG=projectA:* -> This enables all debug modes for projectA (if you have sub-types)\n  // DEBUG=projectA,-projectB -> This enables debug for projectA and explicitly disables it for projectB\n\n\n  if (debug === \"*\") {\n    return true;\n  }\n\n  let debuggers = debug.split(\",\").map(d => d.split(\":\")[0]); // Ignoring tailwindcss\n\n  if (debuggers.includes(\"-tailwindcss\")) {\n    return false;\n  } // Including tailwindcss\n\n\n  if (debuggers.includes(\"tailwindcss\")) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_export","target","all","name","enumerable","get","env","contextMap","configContextMap","contextSourcesMap","sourceHashMap","NOT_ON_DEMAND","resolveDebug","NODE_ENV","process","DEBUG","Map","String","debug","undefined","debuggers","split","map","d","includes"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/lib/lib/sharedState.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    env: ()=>env,\n    contextMap: ()=>contextMap,\n    configContextMap: ()=>configContextMap,\n    contextSourcesMap: ()=>contextSourcesMap,\n    sourceHashMap: ()=>sourceHashMap,\n    NOT_ON_DEMAND: ()=>NOT_ON_DEMAND,\n    resolveDebug: ()=>resolveDebug\n});\nconst env = {\n    NODE_ENV: process.env.NODE_ENV,\n    DEBUG: resolveDebug(process.env.DEBUG)\n};\nconst contextMap = new Map();\nconst configContextMap = new Map();\nconst contextSourcesMap = new Map();\nconst sourceHashMap = new Map();\nconst NOT_ON_DEMAND = new String(\"*\");\nfunction resolveDebug(debug) {\n    if (debug === undefined) {\n        return false;\n    }\n    // Environment variables are strings, so convert to boolean\n    if (debug === \"true\" || debug === \"1\") {\n        return true;\n    }\n    if (debug === \"false\" || debug === \"0\") {\n        return false;\n    }\n    // Keep the debug convention into account:\n    // DEBUG=* -> This enables all debug modes\n    // DEBUG=projectA,projectB,projectC -> This enables debug for projectA, projectB and projectC\n    // DEBUG=projectA:* -> This enables all debug modes for projectA (if you have sub-types)\n    // DEBUG=projectA,-projectB -> This enables debug for projectA and explicitly disables it for projectB\n    if (debug === \"*\") {\n        return true;\n    }\n    let debuggers = debug.split(\",\").map((d)=>d.split(\":\")[0]);\n    // Ignoring tailwindcss\n    if (debuggers.includes(\"-tailwindcss\")) {\n        return false;\n    }\n    // Including tailwindcss\n    if (debuggers.includes(\"tailwindcss\")) {\n        return true;\n    }\n    return false;\n}\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EACzCC,KAAK,EAAE;AADkC,CAA7C;;AAGA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8B;EAC1B,KAAI,IAAIC,IAAR,IAAgBD,GAAhB,EAAoBN,MAAM,CAACC,cAAP,CAAsBI,MAAtB,EAA8BE,IAA9B,EAAoC;IACpDC,UAAU,EAAE,IADwC;IAEpDC,GAAG,EAAEH,GAAG,CAACC,IAAD;EAF4C,CAApC;AAIvB;;AACDH,OAAO,CAACF,OAAD,EAAU;EACbQ,GAAG,EAAE,MAAIA,GADI;EAEbC,UAAU,EAAE,MAAIA,UAFH;EAGbC,gBAAgB,EAAE,MAAIA,gBAHT;EAIbC,iBAAiB,EAAE,MAAIA,iBAJV;EAKbC,aAAa,EAAE,MAAIA,aALN;EAMbC,aAAa,EAAE,MAAIA,aANN;EAObC,YAAY,EAAE,MAAIA;AAPL,CAAV,CAAP;;AASA,MAAMN,GAAG,GAAG;EACRO,QAAQ,EAAEC,OAAO,CAACR,GAAR,CAAYO,QADd;EAERE,KAAK,EAAEH,YAAY,CAACE,OAAO,CAACR,GAAR,CAAYS,KAAb;AAFX,CAAZ;AAIA,MAAMR,UAAU,GAAG,IAAIS,GAAJ,EAAnB;AACA,MAAMR,gBAAgB,GAAG,IAAIQ,GAAJ,EAAzB;AACA,MAAMP,iBAAiB,GAAG,IAAIO,GAAJ,EAA1B;AACA,MAAMN,aAAa,GAAG,IAAIM,GAAJ,EAAtB;AACA,MAAML,aAAa,GAAG,IAAIM,MAAJ,CAAW,GAAX,CAAtB;;AACA,SAASL,YAAT,CAAsBM,KAAtB,EAA6B;EACzB,IAAIA,KAAK,KAAKC,SAAd,EAAyB;IACrB,OAAO,KAAP;EACH,CAHwB,CAIzB;;;EACA,IAAID,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,GAAlC,EAAuC;IACnC,OAAO,IAAP;EACH;;EACD,IAAIA,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,GAAnC,EAAwC;IACpC,OAAO,KAAP;EACH,CAVwB,CAWzB;EACA;EACA;EACA;EACA;;;EACA,IAAIA,KAAK,KAAK,GAAd,EAAmB;IACf,OAAO,IAAP;EACH;;EACD,IAAIE,SAAS,GAAGF,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAsBC,CAAD,IAAKA,CAAC,CAACF,KAAF,CAAQ,GAAR,EAAa,CAAb,CAA1B,CAAhB,CAnByB,CAoBzB;;EACA,IAAID,SAAS,CAACI,QAAV,CAAmB,cAAnB,CAAJ,EAAwC;IACpC,OAAO,KAAP;EACH,CAvBwB,CAwBzB;;;EACA,IAAIJ,SAAS,CAACI,QAAV,CAAmB,aAAnB,CAAJ,EAAuC;IACnC,OAAO,IAAP;EACH;;EACD,OAAO,KAAP;AACH"},"metadata":{},"sourceType":"script"}