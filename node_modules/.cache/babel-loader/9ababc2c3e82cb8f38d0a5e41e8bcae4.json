{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.containsAllTypesByName = void 0;\n\nconst tsutils_1 = require(\"tsutils\");\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst typeFlagUtils_1 = require(\"./typeFlagUtils\");\n/**\n * @param type Type being checked by name.\n * @param allowedNames Symbol names checking on the type.\n * @returns Whether the type is, extends, or contains all of the allowed names.\n */\n\n\nfunction containsAllTypesByName(type, allowAny, allowedNames) {\n  if ((0, typeFlagUtils_1.isTypeFlagSet)(type, ts.TypeFlags.Any | ts.TypeFlags.Unknown)) {\n    return !allowAny;\n  }\n\n  if ((0, tsutils_1.isTypeReference)(type)) {\n    type = type.target;\n  }\n\n  const symbol = type.getSymbol();\n\n  if (symbol && allowedNames.has(symbol.name)) {\n    return true;\n  }\n\n  if ((0, tsutils_1.isUnionOrIntersectionType)(type)) {\n    return type.types.every(t => containsAllTypesByName(t, allowAny, allowedNames));\n  }\n\n  const bases = type.getBaseTypes();\n  return typeof bases !== 'undefined' && bases.length > 0 && bases.every(t => containsAllTypesByName(t, allowAny, allowedNames));\n}\n\nexports.containsAllTypesByName = containsAllTypesByName;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;AAEA;;;;;;;AAKA,SAAgBA,sBAAhB,CACEC,IADF,EAEEC,QAFF,EAGEC,YAHF,EAG2B;EAEzB,IAAI,mCAAcF,IAAd,EAAoBG,EAAE,CAACC,SAAH,CAAaC,GAAb,GAAmBF,EAAE,CAACC,SAAH,CAAaE,OAApD,CAAJ,EAAkE;IAChE,OAAO,CAACL,QAAR;EACD;;EAED,IAAI,+BAAgBD,IAAhB,CAAJ,EAA2B;IACzBA,IAAI,GAAGA,IAAI,CAACO,MAAZ;EACD;;EAED,MAAMC,MAAM,GAAGR,IAAI,CAACS,SAAL,EAAf;;EACA,IAAID,MAAM,IAAIN,YAAY,CAACQ,GAAb,CAAiBF,MAAM,CAACG,IAAxB,CAAd,EAA6C;IAC3C,OAAO,IAAP;EACD;;EAED,IAAI,yCAA0BX,IAA1B,CAAJ,EAAqC;IACnC,OAAOA,IAAI,CAACY,KAAL,CAAWC,KAAX,CAAiBC,CAAC,IACvBf,sBAAsB,CAACe,CAAD,EAAIb,QAAJ,EAAcC,YAAd,CADjB,CAAP;EAGD;;EAED,MAAMa,KAAK,GAAGf,IAAI,CAACgB,YAAL,EAAd;EACA,OACE,OAAOD,KAAP,KAAiB,WAAjB,IACAA,KAAK,CAACE,MAAN,GAAe,CADf,IAEAF,KAAK,CAACF,KAAN,CAAYC,CAAC,IAAIf,sBAAsB,CAACe,CAAD,EAAIb,QAAJ,EAAcC,YAAd,CAAvC,CAHF;AAKD;;AA9BDgB","names":["containsAllTypesByName","type","allowAny","allowedNames","ts","TypeFlags","Any","Unknown","target","symbol","getSymbol","has","name","types","every","t","bases","getBaseTypes","length","exports"],"sources":["../src/containsAllTypesByName.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}