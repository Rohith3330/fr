{"ast":null,"code":"/*:nodoc:*\n * class ActionAppendConstant\n *\n * This stores a list, and appends the value specified by\n * the const keyword argument to the list.\n * (Note that the const keyword argument defaults to null.)\n * The 'appendConst' action is typically useful when multiple\n * arguments need to store constants to the same list.\n *\n * This class inherited from [[Action]]\n **/\n'use strict';\n\nvar util = require('util');\n\nvar Action = require('../../action');\n/*:nodoc:*\n * new ActionAppendConstant(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\n\n\nvar ActionAppendConstant = module.exports = function ActionAppendConstant(options) {\n  options = options || {};\n  options.nargs = 0;\n\n  if (typeof options.constant === 'undefined') {\n    throw new Error('constant option is required for appendAction');\n  }\n\n  Action.call(this, options);\n};\n\nutil.inherits(ActionAppendConstant, Action);\n/*:nodoc:*\n * ActionAppendConstant#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Save result in namespace object\n **/\n\nActionAppendConstant.prototype.call = function (parser, namespace) {\n  var items = [].concat(namespace[this.dest] || []);\n  items.push(this.constant);\n  namespace.set(this.dest, items);\n};","map":{"version":3,"names":["util","require","Action","ActionAppendConstant","module","exports","options","nargs","constant","Error","call","inherits","prototype","parser","namespace","items","concat","dest","push","set"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/argparse/lib/action/append/constant.js"],"sourcesContent":["/*:nodoc:*\n * class ActionAppendConstant\n *\n * This stores a list, and appends the value specified by\n * the const keyword argument to the list.\n * (Note that the const keyword argument defaults to null.)\n * The 'appendConst' action is typically useful when multiple\n * arguments need to store constants to the same list.\n *\n * This class inherited from [[Action]]\n **/\n\n'use strict';\n\nvar util = require('util');\n\nvar Action = require('../../action');\n\n/*:nodoc:*\n * new ActionAppendConstant(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\nvar ActionAppendConstant = module.exports = function ActionAppendConstant(options) {\n  options = options || {};\n  options.nargs = 0;\n  if (typeof options.constant === 'undefined') {\n    throw new Error('constant option is required for appendAction');\n  }\n  Action.call(this, options);\n};\nutil.inherits(ActionAppendConstant, Action);\n\n/*:nodoc:*\n * ActionAppendConstant#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Save result in namespace object\n **/\nActionAppendConstant.prototype.call = function (parser, namespace) {\n  var items = [].concat(namespace[this.dest] || []);\n  items.push(this.constant);\n  namespace.set(this.dest, items);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,cAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,oBAAoB,GAAGC,MAAM,CAACC,OAAP,GAAiB,SAASF,oBAAT,CAA8BG,OAA9B,EAAuC;EACjFA,OAAO,GAAGA,OAAO,IAAI,EAArB;EACAA,OAAO,CAACC,KAAR,GAAgB,CAAhB;;EACA,IAAI,OAAOD,OAAO,CAACE,QAAf,KAA4B,WAAhC,EAA6C;IAC3C,MAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;EACD;;EACDP,MAAM,CAACQ,IAAP,CAAY,IAAZ,EAAkBJ,OAAlB;AACD,CAPD;;AAQAN,IAAI,CAACW,QAAL,CAAcR,oBAAd,EAAoCD,MAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,oBAAoB,CAACS,SAArB,CAA+BF,IAA/B,GAAsC,UAAUG,MAAV,EAAkBC,SAAlB,EAA6B;EACjE,IAAIC,KAAK,GAAG,GAAGC,MAAH,CAAUF,SAAS,CAAC,KAAKG,IAAN,CAAT,IAAwB,EAAlC,CAAZ;EACAF,KAAK,CAACG,IAAN,CAAW,KAAKV,QAAhB;EACAM,SAAS,CAACK,GAAV,CAAc,KAAKF,IAAnB,EAAyBF,KAAzB;AACD,CAJD"},"metadata":{},"sourceType":"script"}