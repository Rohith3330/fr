{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n/**\n * Returns true if all items in baseAttributes are found in attributes. Always\n * returns true if baseAttributes is empty.\n */\n\n\nfunction attributesComparator() {\n  var baseAttributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return baseAttributes.every(function (baseAttr) {\n    return attributes.some(function (attribute) {\n      // Guard against non-JSXAttribute nodes like JSXSpreadAttribute\n      if (attribute.type !== 'JSXAttribute') {\n        return false;\n      } // Attribute matches.\n\n\n      if (baseAttr.name !== (0, _jsxAstUtils.propName)(attribute)) {\n        return false;\n      } // Value exists and does not match.\n\n\n      if (baseAttr.value && baseAttr.value !== (0, _jsxAstUtils.getLiteralPropValue)(attribute)) {\n        return false;\n      }\n\n      return true;\n    });\n  });\n}\n\nvar _default = attributesComparator;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","_jsxAstUtils","require","attributesComparator","baseAttributes","arguments","length","undefined","attributes","every","baseAttr","some","attribute","type","name","propName","getLiteralPropValue","_default","module","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/lib/util/attributesComparator.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\n/**\n * Returns true if all items in baseAttributes are found in attributes. Always\n * returns true if baseAttributes is empty.\n */\nfunction attributesComparator() {\n  var baseAttributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return baseAttributes.every(function (baseAttr) {\n    return attributes.some(function (attribute) {\n      // Guard against non-JSXAttribute nodes like JSXSpreadAttribute\n      if (attribute.type !== 'JSXAttribute') {\n        return false;\n      } // Attribute matches.\n\n\n      if (baseAttr.name !== (0, _jsxAstUtils.propName)(attribute)) {\n        return false;\n      } // Value exists and does not match.\n\n\n      if (baseAttr.value && baseAttr.value !== (0, _jsxAstUtils.getLiteralPropValue)(attribute)) {\n        return false;\n      }\n\n      return true;\n    });\n  });\n}\n\nvar _default = attributesComparator;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;AAEA;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,GAAgC;EAC9B,IAAIC,cAAc,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAzF;EACA,IAAIG,UAAU,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAArF;EACA,OAAOD,cAAc,CAACK,KAAf,CAAqB,UAAUC,QAAV,EAAoB;IAC9C,OAAOF,UAAU,CAACG,IAAX,CAAgB,UAAUC,SAAV,EAAqB;MAC1C;MACA,IAAIA,SAAS,CAACC,IAAV,KAAmB,cAAvB,EAAuC;QACrC,OAAO,KAAP;MACD,CAJyC,CAIxC;;;MAGF,IAAIH,QAAQ,CAACI,IAAT,KAAkB,CAAC,GAAGb,YAAY,CAACc,QAAjB,EAA2BH,SAA3B,CAAtB,EAA6D;QAC3D,OAAO,KAAP;MACD,CATyC,CASxC;;;MAGF,IAAIF,QAAQ,CAACV,KAAT,IAAkBU,QAAQ,CAACV,KAAT,KAAmB,CAAC,GAAGC,YAAY,CAACe,mBAAjB,EAAsCJ,SAAtC,CAAzC,EAA2F;QACzF,OAAO,KAAP;MACD;;MAED,OAAO,IAAP;IACD,CAjBM,CAAP;EAkBD,CAnBM,CAAP;AAoBD;;AAED,IAAIK,QAAQ,GAAGd,oBAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBkB,QAArB;AACAC,MAAM,CAACnB,OAAP,GAAiBA,OAAO,CAACoB,OAAzB"},"metadata":{},"sourceType":"script"}