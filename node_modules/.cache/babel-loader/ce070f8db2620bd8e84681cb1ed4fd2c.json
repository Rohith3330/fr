{"ast":null,"code":"'use strict';\n\nvar functionsHaveNames = require('functions-have-names')();\n\nvar arrows = require('make-arrow-function').list();\n\nvar generators = require('make-generator-function')();\n\nvar asyncs = require('make-async-function').list();\n\nvar forEach = require('for-each');\n\nvar foo = Object(function foo() {});\nvar anon = Object(function () {});\nvar evalled = Object(Function()); // eslint-disable-line no-new-func\n\nmodule.exports = function (getName, t) {\n  t.test('functions', function (st) {\n    if (functionsHaveNames) {\n      st.equal(getName(foo), foo.name, 'foo has name \"foo\"');\n      st.equal(getName(anon), anon.name, 'anonymous function has name of empty string');\n      st.equal(getName(evalled), evalled.name, 'eval-d function has name \"anonymous\" (or empty string)');\n    }\n\n    st.equal(getName(foo), 'foo', 'foo has name \"foo\"');\n    st.equal(getName(anon), '', 'anonymous function has name of empty string');\n    var evalledName = getName(evalled);\n    st.equal(evalledName === 'anonymous' || evalledName === '', true, 'eval-d function has name \"anonymous\" (or empty string');\n    st.end();\n  });\n  t.test('arrow functions', {\n    skip: arrows.length === 0\n  }, function (st) {\n    st.equal(true, functionsHaveNames, 'functions have names in any env with arrow functions');\n    forEach(arrows, function (arrowFn) {\n      st.equal(getName(arrowFn), arrowFn.name, 'arrow function name matches for ' + arrowFn);\n    });\n    st.end();\n  });\n  t.test('generators', {\n    skip: generators.length === 0\n  }, function (st) {\n    st.equal(true, functionsHaveNames, 'functions have names in any env with generator functions');\n    forEach(generators, function (genFn) {\n      st.equal(getName(genFn), genFn.name, 'generator function name matches for ' + genFn);\n    });\n    st.end();\n  });\n  t.test('asyncs', {\n    skip: asyncs.length === 0\n  }, function (st) {\n    st.equal(true, functionsHaveNames, 'functions have names in any env with async functions');\n    forEach(asyncs, function (asyncFn) {\n      st.equal(getName(asyncFn), asyncFn.name, 'async function name matches for ' + asyncFn);\n    });\n    st.end();\n  });\n  t.test('Function.prototype.name', function (st) {\n    st.equal(getName(function before() {}), 'before', 'function prior to accessing Function.prototype has the right name');\n    var protoName = getName(Function.prototype); // on <= node v2.5, this is \"Empty\" - otherwise, the empty string\n\n    st.equal(protoName === '' || protoName === 'Empty', true, 'Function.prototype has the right name');\n    st.equal(getName(function after() {}), 'after', 'function after accessing Function.prototype has the right name');\n    st.end();\n  });\n};","map":{"version":3,"names":["functionsHaveNames","require","arrows","list","generators","asyncs","forEach","foo","Object","anon","evalled","Function","module","exports","getName","t","test","st","equal","name","evalledName","end","skip","length","arrowFn","genFn","asyncFn","before","protoName","prototype","after"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/function.prototype.name/test/tests.js"],"sourcesContent":["'use strict';\n\nvar functionsHaveNames = require('functions-have-names')();\nvar arrows = require('make-arrow-function').list();\nvar generators = require('make-generator-function')();\nvar asyncs = require('make-async-function').list();\nvar forEach = require('for-each');\n\nvar foo = Object(function foo() {});\nvar anon = Object(function () {});\nvar evalled = Object(Function()); // eslint-disable-line no-new-func\n\nmodule.exports = function (getName, t) {\n\tt.test('functions', function (st) {\n\t\tif (functionsHaveNames) {\n\t\t\tst.equal(getName(foo), foo.name, 'foo has name \"foo\"');\n\t\t\tst.equal(getName(anon), anon.name, 'anonymous function has name of empty string');\n\t\t\tst.equal(getName(evalled), evalled.name, 'eval-d function has name \"anonymous\" (or empty string)');\n\t\t}\n\t\tst.equal(getName(foo), 'foo', 'foo has name \"foo\"');\n\t\tst.equal(getName(anon), '', 'anonymous function has name of empty string');\n\t\tvar evalledName = getName(evalled);\n\t\tst.equal(evalledName === 'anonymous' || evalledName === '', true, 'eval-d function has name \"anonymous\" (or empty string');\n\t\tst.end();\n\t});\n\n\tt.test('arrow functions', { skip: arrows.length === 0 }, function (st) {\n\t\tst.equal(true, functionsHaveNames, 'functions have names in any env with arrow functions');\n\t\tforEach(arrows, function (arrowFn) {\n\t\t\tst.equal(getName(arrowFn), arrowFn.name, 'arrow function name matches for ' + arrowFn);\n\t\t});\n\t\tst.end();\n\t});\n\n\tt.test('generators', { skip: generators.length === 0 }, function (st) {\n\t\tst.equal(true, functionsHaveNames, 'functions have names in any env with generator functions');\n\t\tforEach(generators, function (genFn) {\n\t\t\tst.equal(getName(genFn), genFn.name, 'generator function name matches for ' + genFn);\n\t\t});\n\t\tst.end();\n\t});\n\n\tt.test('asyncs', { skip: asyncs.length === 0 }, function (st) {\n\t\tst.equal(true, functionsHaveNames, 'functions have names in any env with async functions');\n\t\tforEach(asyncs, function (asyncFn) {\n\t\t\tst.equal(getName(asyncFn), asyncFn.name, 'async function name matches for ' + asyncFn);\n\t\t});\n\t\tst.end();\n\t});\n\n\tt.test('Function.prototype.name', function (st) {\n\t\tst.equal(getName(function before() {}), 'before', 'function prior to accessing Function.prototype has the right name');\n\t\tvar protoName = getName(Function.prototype);\n\t\t// on <= node v2.5, this is \"Empty\" - otherwise, the empty string\n\t\tst.equal(protoName === '' || protoName === 'Empty', true, 'Function.prototype has the right name');\n\t\tst.equal(getName(function after() {}), 'after', 'function after accessing Function.prototype has the right name');\n\n\t\tst.end();\n\t});\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}