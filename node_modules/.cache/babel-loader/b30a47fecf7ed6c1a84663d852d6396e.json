{"ast":null,"code":"import browserslist from 'browserslist';\n\nconst plugin = opts => {\n  return {\n    postcssPlugin: 'postcss-browser-comments',\n\n    Once(root) {\n      // client browserslist\n      const clientBrowserList = browserslist(Object(opts).browsers || null, {\n        path: root.source && root.source.input && root.source.input.file\n      }); // root children references\n\n      const references = root.nodes.slice(0); // for each child node of the root children references\n\n      for (const node of references) {\n        // if the node is a comment browser comment node\n        if (isBrowserCommentNode(node)) {\n          // rule following the browser comment\n          const rule = node.next(); // browser data\n\n          const browserdata = getBrowserData(node.text);\n\n          if (browserdata.isNumbered) {\n            rule.nodes.filter(isBrowserReferenceCommentNode).map(comment => {\n              const browserdataIndex = parseFloat(comment.text) - 1;\n              const browserslistPart = browserdata.browserslist[browserdataIndex]; // whether to remove the rule if the comment browserslist does not match the client browserslist\n\n              const removeRule = !clientBrowserList.some(clientBrowser => browserslist(browserslistPart).some(commentBrowser => commentBrowser === clientBrowser)); // conditionally remove the declaration and reference comment\n\n              if (removeRule) {\n                comment.prev().remove();\n                comment.remove();\n              }\n            }); // conditionally remove the empty rule and comment\n\n            if (!rule.nodes.length) {\n              rule.remove();\n              node.remove();\n            }\n          } else {\n            // whether to remove the rule if the comment browserslist does not match the client browserslist\n            const removeRule = !clientBrowserList.some(clientBrowser => browserslist(browserdata.browserslist).some(commentBrowser => commentBrowser === clientBrowser)); // conditionally remove the rule and comment\n\n            if (removeRule) {\n              rule.remove();\n              node.remove();\n            }\n          }\n        }\n      }\n    }\n\n  };\n};\n\nplugin.postcss = true;\n\nconst isBrowserCommentNode = node => node.type === 'comment' && isBrowserCommentNodeRegExp.test(node.text) && node.next().type === 'rule';\n\nconst isBrowserCommentNodeRegExp = /^\\*\\n * /; // returns whether a node is a browser reference comment\n\nconst isBrowserReferenceCommentNode = node => node.type === 'comment' && isBrowserReferenceCommentNodeRegExp.test(node.text);\n\nconst isBrowserReferenceCommentNodeRegExp = /^\\d+$/; // returns browser data from comment text\n\nconst getBrowserData = text => {\n  const browserDataNumbered = text.match(browserDataMutliRegExp);\n  const isNumbered = Boolean(browserDataNumbered);\n  return {\n    browserslist: isNumbered ? browserDataNumbered.map(browserslistPart => getBrowsersList(browserslistPart.replace(browserDataNumberedNewlineRegExp, '$1'))) : getBrowsersList(text.replace(browserDataNewlineRegExp, '')),\n    isNumbered\n  };\n};\n\nconst browserDataMutliRegExp = /(\\n \\* \\d+\\. (?:[^\\n]+|\\n \\* {4,})+)/g;\nconst browserDataNewlineRegExp = /^\\*\\n \\* ?|\\n \\*/g;\nconst browserDataNumberedNewlineRegExp = /\\n \\* (?:( )\\s*)?/g; // returns a browserlist from comment text\n\nconst getBrowsersList = text => text.split(getBrowsersListInSplitRegExp).slice(1).map(part => part.split(getBrowsersListAndSplitRegExp).filter(part2 => part2)).reduce((acc, val) => acc.concat(val), []).map(part => part.replace(getBrowsersListQueryRegExp, ($0, browser, query) => browser === 'all' ? '> 0%' : `${browser}${query ? /^((?:\\d*\\.)?\\d+)-$/.test(query) ? ` <= ${query.slice(0, -1)}` : ` ${query}` : ' > 0'}`).toLowerCase());\n\nconst getBrowsersListInSplitRegExp = /\\s+in\\s+/;\nconst getBrowsersListAndSplitRegExp = /(?: and|, and|,)/;\nconst getBrowsersListQueryRegExp = /^\\s*(\\w+)(?: ((?:(?:\\d*\\.)?\\d+-)?(?:\\d*\\.)?\\d+[+-]?))?.*$/;\nexport default plugin;","map":{"version":3,"mappings":"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","names":["plugin","opts","postcssPlugin","Once","root","clientBrowserList","browserslist","Object","browsers","path","source","input","file","references","nodes","slice","node","isBrowserCommentNode","rule","next","browserdata","getBrowserData","text","isNumbered","filter","isBrowserReferenceCommentNode","map","comment","browserdataIndex","parseFloat","browserslistPart","removeRule","some","clientBrowser","commentBrowser","prev","remove","length","postcss","type","isBrowserCommentNodeRegExp","test","isBrowserReferenceCommentNodeRegExp","browserDataNumbered","match","browserDataMutliRegExp","Boolean","getBrowsersList","replace","browserDataNumberedNewlineRegExp","browserDataNewlineRegExp","split","getBrowsersListInSplitRegExp","part","getBrowsersListAndSplitRegExp","part2","reduce","acc","val","concat","getBrowsersListQueryRegExp","$0","browser","query","toLowerCase"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\postcss-browser-comments\\index.js"],"sourcesContent":["import browserslist from 'browserslist'\n\nconst plugin = opts => {\n\treturn {\n\t\tpostcssPlugin: 'postcss-browser-comments',\n\t\tOnce(root) {\n\t\t\t// client browserslist\n\t\t\tconst clientBrowserList = browserslist(\n\t\t\t\tObject(opts).browsers || null,\n\t\t\t\t{ path: root.source && root.source.input && root.source.input.file }\n\t\t\t)\n\n\t\t\t// root children references\n\t\t\tconst references = root.nodes.slice(0)\n\n\t\t\t// for each child node of the root children references\n\t\t\tfor (const node of references) {\n\t\t\t\t// if the node is a comment browser comment node\n\t\t\t\tif (isBrowserCommentNode(node)) {\n\t\t\t\t\t// rule following the browser comment\n\t\t\t\t\tconst rule = node.next()\n\n\t\t\t\t\t// browser data\n\t\t\t\t\tconst browserdata = getBrowserData(node.text)\n\n\t\t\t\t\tif (browserdata.isNumbered) {\n\t\t\t\t\t\trule.nodes.filter(isBrowserReferenceCommentNode).map(\n\t\t\t\t\t\t\tcomment => {\n\t\t\t\t\t\t\t\tconst browserdataIndex = parseFloat(comment.text) - 1\n\t\t\t\t\t\t\t\tconst browserslistPart = browserdata.browserslist[browserdataIndex]\n\n\t\t\t\t\t\t\t\t// whether to remove the rule if the comment browserslist does not match the client browserslist\n\t\t\t\t\t\t\t\tconst removeRule = !clientBrowserList.some(\n\t\t\t\t\t\t\t\t\tclientBrowser => browserslist(browserslistPart).some(\n\t\t\t\t\t\t\t\t\t\tcommentBrowser => commentBrowser === clientBrowser\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\t// conditionally remove the declaration and reference comment\n\t\t\t\t\t\t\t\tif (removeRule) {\n\t\t\t\t\t\t\t\t\tcomment.prev().remove()\n\t\t\t\t\t\t\t\t\tcomment.remove()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\n\t\t\t\t\t\t// conditionally remove the empty rule and comment\n\t\t\t\t\t\tif (!rule.nodes.length) {\n\t\t\t\t\t\t\trule.remove()\n\t\t\t\t\t\t\tnode.remove()\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// whether to remove the rule if the comment browserslist does not match the client browserslist\n\t\t\t\t\t\tconst removeRule = !clientBrowserList.some(\n\t\t\t\t\t\t\tclientBrowser => browserslist(browserdata.browserslist).some(\n\t\t\t\t\t\t\t\tcommentBrowser => commentBrowser === clientBrowser\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\n\t\t\t\t\t\t// conditionally remove the rule and comment\n\t\t\t\t\t\tif (removeRule) {\n\t\t\t\t\t\t\trule.remove()\n\t\t\t\t\t\t\tnode.remove()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nplugin.postcss = true\n\nexport default plugin\n\n// returns whether a node is a browser comment\nconst isBrowserCommentNode = node => node.type === 'comment' && isBrowserCommentNodeRegExp.test(node.text) && node.next().type === 'rule'\nconst isBrowserCommentNodeRegExp = /^\\*\\n * /\n\n// returns whether a node is a browser reference comment\nconst isBrowserReferenceCommentNode = node => node.type === 'comment' && isBrowserReferenceCommentNodeRegExp.test(node.text)\nconst isBrowserReferenceCommentNodeRegExp = /^\\d+$/\n\n// returns browser data from comment text\nconst getBrowserData = text => {\n\tconst browserDataNumbered = text.match(browserDataMutliRegExp)\n\tconst isNumbered = Boolean(browserDataNumbered)\n\n\treturn {\n\t\tbrowserslist: isNumbered\n\t\t\t? browserDataNumbered.map(\n\t\t\t\tbrowserslistPart => getBrowsersList(browserslistPart.replace(browserDataNumberedNewlineRegExp, '$1'))\n\t\t\t)\n\t\t: getBrowsersList(\n\t\t\ttext.replace(browserDataNewlineRegExp, '')\n\t\t),\n\t\tisNumbered\n\t}\n}\nconst browserDataMutliRegExp = /(\\n \\* \\d+\\. (?:[^\\n]+|\\n \\* {4,})+)/g\nconst browserDataNewlineRegExp = /^\\*\\n \\* ?|\\n \\*/g\nconst browserDataNumberedNewlineRegExp = /\\n \\* (?:( )\\s*)?/g\n\n// returns a browserlist from comment text\nconst getBrowsersList = text => text.split(getBrowsersListInSplitRegExp).slice(1).map(\n\tpart => part.split(getBrowsersListAndSplitRegExp).filter(part2 => part2)\n).reduce(\n\t(acc, val) => acc.concat(val), [])\n.map(\n\tpart => part.replace(\n\t\tgetBrowsersListQueryRegExp,\n\t\t($0, browser, query) => browser === 'all'\n\t\t\t? '> 0%'\n\t\t: `${browser}${\n\t\t\tquery\n\t\t\t\t? /^((?:\\d*\\.)?\\d+)-$/.test(query)\n\t\t\t\t\t? ` <= ${query.slice(0, -1)}`\n\t\t\t\t: ` ${query}`\n\t\t\t: ' > 0'\n\t\t}`\n\t).toLowerCase()\n)\nconst getBrowsersListInSplitRegExp = /\\s+in\\s+/\nconst getBrowsersListAndSplitRegExp = /(?: and|, and|,)/\nconst getBrowsersListQueryRegExp = /^\\s*(\\w+)(?: ((?:(?:\\d*\\.)?\\d+-)?(?:\\d*\\.)?\\d+[+-]?))?.*$/\n"]},"metadata":{},"sourceType":"module"}