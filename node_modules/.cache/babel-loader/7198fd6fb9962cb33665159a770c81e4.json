{"ast":null,"code":"'use strict';\n\nexports.type = 'visitor';\nexports.name = 'removeUnusedNS';\nexports.active = true;\nexports.description = 'removes unused namespaces declaration';\n/**\n * Remove unused namespaces declaration from svg element\n * which are not used in elements or attributes\n *\n * @author Kir Belevich\n *\n * @type {import('../lib/types').Plugin<void>}\n */\n\nexports.fn = () => {\n  /**\n   * @type {Set<string>}\n   */\n  const unusedNamespaces = new Set();\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // collect all namespaces from svg element\n        // (such as xmlns:xlink=\"http://www.w3.org/1999/xlink\")\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const name of Object.keys(node.attributes)) {\n            if (name.startsWith('xmlns:')) {\n              const local = name.slice('xmlns:'.length);\n              unusedNamespaces.add(local);\n            }\n          }\n        }\n\n        if (unusedNamespaces.size !== 0) {\n          // preserve namespace used in nested elements names\n          if (node.name.includes(':')) {\n            const [ns] = node.name.split(':');\n\n            if (unusedNamespaces.has(ns)) {\n              unusedNamespaces.delete(ns);\n            }\n          } // preserve namespace used in nested elements attributes\n\n\n          for (const name of Object.keys(node.attributes)) {\n            if (name.includes(':')) {\n              const [ns] = name.split(':');\n              unusedNamespaces.delete(ns);\n            }\n          }\n        }\n      },\n      exit: (node, parentNode) => {\n        // remove unused namespace attributes from svg element\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const name of unusedNamespaces) {\n            delete node.attributes[`xmlns:${name}`];\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["exports","type","name","active","description","fn","unusedNamespaces","Set","element","enter","node","parentNode","Object","keys","attributes","startsWith","local","slice","length","add","size","includes","ns","split","has","delete","exit"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-svgo/node_modules/svgo/plugins/removeUnusedNS.js"],"sourcesContent":["'use strict';\n\nexports.type = 'visitor';\nexports.name = 'removeUnusedNS';\nexports.active = true;\nexports.description = 'removes unused namespaces declaration';\n\n/**\n * Remove unused namespaces declaration from svg element\n * which are not used in elements or attributes\n *\n * @author Kir Belevich\n *\n * @type {import('../lib/types').Plugin<void>}\n */\nexports.fn = () => {\n  /**\n   * @type {Set<string>}\n   */\n  const unusedNamespaces = new Set();\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // collect all namespaces from svg element\n        // (such as xmlns:xlink=\"http://www.w3.org/1999/xlink\")\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const name of Object.keys(node.attributes)) {\n            if (name.startsWith('xmlns:')) {\n              const local = name.slice('xmlns:'.length);\n              unusedNamespaces.add(local);\n            }\n          }\n        }\n        if (unusedNamespaces.size !== 0) {\n          // preserve namespace used in nested elements names\n          if (node.name.includes(':')) {\n            const [ns] = node.name.split(':');\n            if (unusedNamespaces.has(ns)) {\n              unusedNamespaces.delete(ns);\n            }\n          }\n          // preserve namespace used in nested elements attributes\n          for (const name of Object.keys(node.attributes)) {\n            if (name.includes(':')) {\n              const [ns] = name.split(':');\n              unusedNamespaces.delete(ns);\n            }\n          }\n        }\n      },\n      exit: (node, parentNode) => {\n        // remove unused namespace attributes from svg element\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const name of unusedNamespaces) {\n            delete node.attributes[`xmlns:${name}`];\n          }\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,IAAR,GAAe,SAAf;AACAD,OAAO,CAACE,IAAR,GAAe,gBAAf;AACAF,OAAO,CAACG,MAAR,GAAiB,IAAjB;AACAH,OAAO,CAACI,WAAR,GAAsB,uCAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,OAAO,CAACK,EAAR,GAAa,MAAM;EACjB;AACF;AACA;EACE,MAAMC,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB;EACA,OAAO;IACLC,OAAO,EAAE;MACPC,KAAK,EAAE,CAACC,IAAD,EAAOC,UAAP,KAAsB;QAC3B;QACA;QACA,IAAID,IAAI,CAACR,IAAL,KAAc,KAAd,IAAuBS,UAAU,CAACV,IAAX,KAAoB,MAA/C,EAAuD;UACrD,KAAK,MAAMC,IAAX,IAAmBU,MAAM,CAACC,IAAP,CAAYH,IAAI,CAACI,UAAjB,CAAnB,EAAiD;YAC/C,IAAIZ,IAAI,CAACa,UAAL,CAAgB,QAAhB,CAAJ,EAA+B;cAC7B,MAAMC,KAAK,GAAGd,IAAI,CAACe,KAAL,CAAW,SAASC,MAApB,CAAd;cACAZ,gBAAgB,CAACa,GAAjB,CAAqBH,KAArB;YACD;UACF;QACF;;QACD,IAAIV,gBAAgB,CAACc,IAAjB,KAA0B,CAA9B,EAAiC;UAC/B;UACA,IAAIV,IAAI,CAACR,IAAL,CAAUmB,QAAV,CAAmB,GAAnB,CAAJ,EAA6B;YAC3B,MAAM,CAACC,EAAD,IAAOZ,IAAI,CAACR,IAAL,CAAUqB,KAAV,CAAgB,GAAhB,CAAb;;YACA,IAAIjB,gBAAgB,CAACkB,GAAjB,CAAqBF,EAArB,CAAJ,EAA8B;cAC5BhB,gBAAgB,CAACmB,MAAjB,CAAwBH,EAAxB;YACD;UACF,CAP8B,CAQ/B;;;UACA,KAAK,MAAMpB,IAAX,IAAmBU,MAAM,CAACC,IAAP,CAAYH,IAAI,CAACI,UAAjB,CAAnB,EAAiD;YAC/C,IAAIZ,IAAI,CAACmB,QAAL,CAAc,GAAd,CAAJ,EAAwB;cACtB,MAAM,CAACC,EAAD,IAAOpB,IAAI,CAACqB,KAAL,CAAW,GAAX,CAAb;cACAjB,gBAAgB,CAACmB,MAAjB,CAAwBH,EAAxB;YACD;UACF;QACF;MACF,CA5BM;MA6BPI,IAAI,EAAE,CAAChB,IAAD,EAAOC,UAAP,KAAsB;QAC1B;QACA,IAAID,IAAI,CAACR,IAAL,KAAc,KAAd,IAAuBS,UAAU,CAACV,IAAX,KAAoB,MAA/C,EAAuD;UACrD,KAAK,MAAMC,IAAX,IAAmBI,gBAAnB,EAAqC;YACnC,OAAOI,IAAI,CAACI,UAAL,CAAiB,SAAQZ,IAAK,EAA9B,CAAP;UACD;QACF;MACF;IApCM;EADJ,CAAP;AAwCD,CA7CD"},"metadata":{},"sourceType":"script"}