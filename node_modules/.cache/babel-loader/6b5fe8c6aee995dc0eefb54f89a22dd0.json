{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar config_loader_1 = require(\"../config-loader\");\n\nvar path_1 = require(\"path\");\n\ndescribe(\"config-loader\", function () {\n  it(\"should use explicitParams when set\", function () {\n    var result = (0, config_loader_1.configLoader)({\n      explicitParams: {\n        baseUrl: \"/foo/bar\",\n        paths: {\n          asd: [\"asd\"]\n        }\n      },\n      cwd: \"/baz\"\n    });\n    var successResult = result; // assert.equal(successResult.resultType, \"success\");\n    // assert.equal(successResult.absoluteBaseUrl, \"/foo/bar\");\n    // assert.equal(successResult.paths[\"asd\"][0], \"asd\");\n\n    expect(successResult.resultType).toBe(\"success\");\n    expect(successResult.absoluteBaseUrl).toBe(\"/foo/bar\");\n    expect(successResult.paths[\"asd\"][0]).toBe(\"asd\");\n  });\n  it(\"should use explicitParams when set and add cwd when path is relative\", function () {\n    var result = (0, config_loader_1.configLoader)({\n      explicitParams: {\n        baseUrl: \"bar/\",\n        paths: {\n          asd: [\"asd\"]\n        }\n      },\n      cwd: \"/baz\"\n    });\n    var successResult = result; // assert.equal(successResult.resultType, \"success\");\n    // assert.equal(successResult.absoluteBaseUrl, join(\"/baz\", \"bar/\"));\n\n    expect(successResult.resultType).toBe(\"success\");\n    expect(successResult.absoluteBaseUrl).toBe((0, path_1.join)(\"/baz\", \"bar/\"));\n  });\n  it(\"should fallback to tsConfigLoader when explicitParams is not set\", function () {\n    var result = (0, config_loader_1.configLoader)({\n      explicitParams: undefined,\n      cwd: \"/baz\",\n      // tslint:disable-next-line:no-any\n      tsConfigLoader: function (_) {\n        return {\n          tsConfigPath: \"/baz/tsconfig.json\",\n          baseUrl: \"./src\",\n          paths: {}\n        };\n      }\n    });\n    var successResult = result; // assert.equal(successResult.resultType, \"success\");\n    // assert.equal(successResult.absoluteBaseUrl, join(\"/baz\", \"src\"));\n\n    expect(successResult.resultType).toBe(\"success\");\n    expect(successResult.absoluteBaseUrl).toBe((0, path_1.join)(\"/baz\", \"src\"));\n  });\n  it(\"should show an error message when baseUrl is missing\", function () {\n    var result = (0, config_loader_1.configLoader)({\n      explicitParams: undefined,\n      cwd: \"/baz\",\n      // tslint:disable-next-line:no-any\n      tsConfigLoader: function (_) {\n        return {\n          tsConfigPath: \"/baz/tsconfig.json\",\n          baseUrl: undefined,\n          paths: {}\n        };\n      }\n    });\n    var failResult = result; // assert.equal(failResult.resultType, \"failed\");\n    // assert.isTrue(failResult.message.indexOf(\"baseUrl\") > -1);\n\n    expect(failResult.resultType).toBe(\"failed\");\n    expect(failResult.message.indexOf(\"baseUrl\") > -1).toBeTruthy();\n  });\n  it(\"should presume cwd to be a tsconfig file when loadConfig is called with absolute path to tsconfig.json\", function () {\n    // using tsconfig-named.json to ensure that future changes to fix\n    // https://github.com/dividab/tsconfig-paths/issues/31\n    // do not pass this test case just because of a directory walk looking\n    // for tsconfig.json\n    var configFile = (0, path_1.join)(__dirname, \"tsconfig-named.json\");\n    var result = (0, config_loader_1.loadConfig)(configFile);\n    var successResult = result; // assert.equal(successResult.resultType, \"success\");\n    // assert.equal(successResult.configFileAbsolutePath, configFile);\n\n    expect(successResult.resultType).toBe(\"success\");\n    expect(successResult.configFileAbsolutePath).toBe(configFile);\n  });\n});","map":{"version":3,"mappings":"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","names":["describe","it","result","explicitParams","baseUrl","paths","asd","cwd","successResult","expect","resultType","toBe","absoluteBaseUrl","undefined","tsConfigLoader","_","tsConfigPath","failResult","message","indexOf","toBeTruthy","configFile","__dirname","configFileAbsolutePath"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\tsconfig-paths\\src\\__tests__\\config-loader.test.ts"],"sourcesContent":["import {\n  configLoader,\n  loadConfig,\n  ConfigLoaderFailResult,\n  ConfigLoaderSuccessResult,\n} from \"../config-loader\";\nimport { join } from \"path\";\n\ndescribe(\"config-loader\", (): void => {\n  it(\"should use explicitParams when set\", () => {\n    const result = configLoader({\n      explicitParams: {\n        baseUrl: \"/foo/bar\",\n        paths: {\n          asd: [\"asd\"],\n        },\n      },\n      cwd: \"/baz\",\n    });\n\n    const successResult = result as ConfigLoaderSuccessResult;\n    // assert.equal(successResult.resultType, \"success\");\n    // assert.equal(successResult.absoluteBaseUrl, \"/foo/bar\");\n    // assert.equal(successResult.paths[\"asd\"][0], \"asd\");\n    expect(successResult.resultType).toBe(\"success\");\n    expect(successResult.absoluteBaseUrl).toBe(\"/foo/bar\");\n    expect(successResult.paths[\"asd\"][0]).toBe(\"asd\");\n  });\n\n  it(\"should use explicitParams when set and add cwd when path is relative\", () => {\n    const result = configLoader({\n      explicitParams: {\n        baseUrl: \"bar/\",\n        paths: {\n          asd: [\"asd\"],\n        },\n      },\n      cwd: \"/baz\",\n    });\n\n    const successResult = result as ConfigLoaderSuccessResult;\n    // assert.equal(successResult.resultType, \"success\");\n    // assert.equal(successResult.absoluteBaseUrl, join(\"/baz\", \"bar/\"));\n    expect(successResult.resultType).toBe(\"success\");\n    expect(successResult.absoluteBaseUrl).toBe(join(\"/baz\", \"bar/\"));\n  });\n\n  it(\"should fallback to tsConfigLoader when explicitParams is not set\", () => {\n    const result = configLoader({\n      explicitParams: undefined,\n      cwd: \"/baz\",\n      // tslint:disable-next-line:no-any\n      tsConfigLoader: (_: any) => ({\n        tsConfigPath: \"/baz/tsconfig.json\",\n        baseUrl: \"./src\",\n        paths: {},\n      }),\n    });\n\n    const successResult = result as ConfigLoaderSuccessResult;\n    // assert.equal(successResult.resultType, \"success\");\n    // assert.equal(successResult.absoluteBaseUrl, join(\"/baz\", \"src\"));\n    expect(successResult.resultType).toBe(\"success\");\n    expect(successResult.absoluteBaseUrl).toBe(join(\"/baz\", \"src\"));\n  });\n\n  it(\"should show an error message when baseUrl is missing\", () => {\n    const result = configLoader({\n      explicitParams: undefined,\n      cwd: \"/baz\",\n      // tslint:disable-next-line:no-any\n      tsConfigLoader: (_: any) => ({\n        tsConfigPath: \"/baz/tsconfig.json\",\n        baseUrl: undefined,\n        paths: {},\n      }),\n    });\n\n    const failResult = result as ConfigLoaderFailResult;\n    // assert.equal(failResult.resultType, \"failed\");\n    // assert.isTrue(failResult.message.indexOf(\"baseUrl\") > -1);\n    expect(failResult.resultType).toBe(\"failed\");\n    expect(failResult.message.indexOf(\"baseUrl\") > -1).toBeTruthy();\n  });\n\n  it(\"should presume cwd to be a tsconfig file when loadConfig is called with absolute path to tsconfig.json\", () => {\n    // using tsconfig-named.json to ensure that future changes to fix\n    // https://github.com/dividab/tsconfig-paths/issues/31\n    // do not pass this test case just because of a directory walk looking\n    // for tsconfig.json\n    const configFile = join(__dirname, \"tsconfig-named.json\");\n    const result = loadConfig(configFile);\n\n    const successResult = result as ConfigLoaderSuccessResult;\n    // assert.equal(successResult.resultType, \"success\");\n    // assert.equal(successResult.configFileAbsolutePath, configFile);\n    expect(successResult.resultType).toBe(\"success\");\n    expect(successResult.configFileAbsolutePath).toBe(configFile);\n  });\n});\n"]},"metadata":{},"sourceType":"script"}