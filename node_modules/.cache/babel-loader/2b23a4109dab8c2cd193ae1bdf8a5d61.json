{"ast":null,"code":"/**\n * Extractor function for a JSXElement type value node.\n *\n * Returns self-closing element with correct name.\n */\nexport default function extractValueFromJSXElement(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n\n  const Tag = value.openingElement.name.name;\n\n  if (value.openingElement.selfClosing) {\n    return `<${Tag} />`;\n  }\n\n  return `<${Tag}>${[].concat(value.children).map(x => getValue(x)).join('')}</${Tag}>`;\n}","map":{"version":3,"names":["extractValueFromJSXElement","value","getValue","require","default","Tag","openingElement","name","selfClosing","concat","children","map","x","join"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/src/values/JSXElement.js"],"sourcesContent":["/**\n * Extractor function for a JSXElement type value node.\n *\n * Returns self-closing element with correct name.\n */\nexport default function extractValueFromJSXElement(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n\n  const Tag = value.openingElement.name.name;\n  if (value.openingElement.selfClosing) {\n    return `<${Tag} />`;\n  }\n  return `<${Tag}>${[].concat(value.children).map((x) => getValue(x)).join('')}</${Tag}>`;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,0BAAT,CAAoCC,KAApC,EAA2C;EACxD;EACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,GAAD,CAAP,CAAaC,OAA9B;;EAEA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,cAAN,CAAqBC,IAArB,CAA0BA,IAAtC;;EACA,IAAIN,KAAK,CAACK,cAAN,CAAqBE,WAAzB,EAAsC;IACpC,OAAQ,IAAGH,GAAI,KAAf;EACD;;EACD,OAAQ,IAAGA,GAAI,IAAG,GAAGI,MAAH,CAAUR,KAAK,CAACS,QAAhB,EAA0BC,GAA1B,CAA+BC,CAAD,IAAOV,QAAQ,CAACU,CAAD,CAA7C,EAAkDC,IAAlD,CAAuD,EAAvD,CAA2D,KAAIR,GAAI,GAArF;AACD"},"metadata":{},"sourceType":"module"}