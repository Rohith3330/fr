{"ast":null,"code":"/*:nodoc:*\n * class ActionStore\n *\n * This action just stores the argument’s value. This is the default action.\n *\n * This class inherited from [[Action]]\n *\n **/\n'use strict';\n\nvar util = require('util');\n\nvar Action = require('../action'); // Constants\n\n\nvar c = require('../const');\n/*:nodoc:*\n * new ActionStore(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\n\n\nvar ActionStore = module.exports = function ActionStore(options) {\n  options = options || {};\n\n  if (this.nargs <= 0) {\n    throw new Error('nargs for store actions must be > 0; if you ' + 'have nothing to store, actions such as store ' + 'true or store const may be more appropriate');\n  }\n\n  if (typeof this.constant !== 'undefined' && this.nargs !== c.OPTIONAL) {\n    throw new Error('nargs must be OPTIONAL to supply const');\n  }\n\n  Action.call(this, options);\n};\n\nutil.inherits(ActionStore, Action);\n/*:nodoc:*\n * ActionStore#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Save result in namespace object\n **/\n\nActionStore.prototype.call = function (parser, namespace, values) {\n  namespace.set(this.dest, values);\n};","map":{"version":3,"names":["util","require","Action","c","ActionStore","module","exports","options","nargs","Error","constant","OPTIONAL","call","inherits","prototype","parser","namespace","values","set","dest"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/argparse/lib/action/store.js"],"sourcesContent":["/*:nodoc:*\n * class ActionStore\n *\n * This action just stores the argument’s value. This is the default action.\n *\n * This class inherited from [[Action]]\n *\n **/\n'use strict';\n\nvar util = require('util');\n\nvar Action = require('../action');\n\n// Constants\nvar c = require('../const');\n\n\n/*:nodoc:*\n * new ActionStore(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\nvar ActionStore = module.exports = function ActionStore(options) {\n  options = options || {};\n  if (this.nargs <= 0) {\n    throw new Error('nargs for store actions must be > 0; if you ' +\n        'have nothing to store, actions such as store ' +\n        'true or store const may be more appropriate');\n\n  }\n  if (typeof this.constant !== 'undefined' && this.nargs !== c.OPTIONAL) {\n    throw new Error('nargs must be OPTIONAL to supply const');\n  }\n  Action.call(this, options);\n};\nutil.inherits(ActionStore, Action);\n\n/*:nodoc:*\n * ActionStore#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Save result in namespace object\n **/\nActionStore.prototype.call = function (parser, namespace, values) {\n  namespace.set(this.dest, values);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAApB,C,CAEA;;;AACA,IAAIE,CAAC,GAAGF,OAAO,CAAC,UAAD,CAAf;AAGA;AACA;AACA;AACA;AACA;;;AACA,IAAIG,WAAW,GAAGC,MAAM,CAACC,OAAP,GAAiB,SAASF,WAAT,CAAqBG,OAArB,EAA8B;EAC/DA,OAAO,GAAGA,OAAO,IAAI,EAArB;;EACA,IAAI,KAAKC,KAAL,IAAc,CAAlB,EAAqB;IACnB,MAAM,IAAIC,KAAJ,CAAU,iDACZ,+CADY,GAEZ,6CAFE,CAAN;EAID;;EACD,IAAI,OAAO,KAAKC,QAAZ,KAAyB,WAAzB,IAAwC,KAAKF,KAAL,KAAeL,CAAC,CAACQ,QAA7D,EAAuE;IACrE,MAAM,IAAIF,KAAJ,CAAU,wCAAV,CAAN;EACD;;EACDP,MAAM,CAACU,IAAP,CAAY,IAAZ,EAAkBL,OAAlB;AACD,CAZD;;AAaAP,IAAI,CAACa,QAAL,CAAcT,WAAd,EAA2BF,MAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAE,WAAW,CAACU,SAAZ,CAAsBF,IAAtB,GAA6B,UAAUG,MAAV,EAAkBC,SAAlB,EAA6BC,MAA7B,EAAqC;EAChED,SAAS,CAACE,GAAV,CAAc,KAAKC,IAAnB,EAAyBF,MAAzB;AACD,CAFD"},"metadata":{},"sourceType":"script"}