{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Number = GetIntrinsic('%Number%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar $isNaN = require('../helpers/isNaN');\n\nvar IsStringPrefix = require('./IsStringPrefix');\n\nvar StringToBigInt = require('./StringToBigInt');\n\nvar ToNumeric = require('./ToNumeric');\n\nvar ToPrimitive = require('./ToPrimitive');\n\nvar Type = require('./Type');\n\nvar BigIntLessThan = require('./BigInt/lessThan');\n\nvar NumberLessThan = require('./Number/lessThan'); // https://262.ecma-international.org/9.0/#sec-abstract-relational-comparison\n// eslint-disable-next-line max-statements, max-lines-per-function\n\n\nmodule.exports = function AbstractRelationalComparison(x, y, LeftFirst) {\n  if (Type(LeftFirst) !== 'Boolean') {\n    throw new $TypeError('Assertion failed: LeftFirst argument must be a Boolean');\n  }\n\n  var px;\n  var py;\n\n  if (LeftFirst) {\n    px = ToPrimitive(x, $Number);\n    py = ToPrimitive(y, $Number);\n  } else {\n    py = ToPrimitive(y, $Number);\n    px = ToPrimitive(x, $Number);\n  }\n\n  if (Type(px) === 'String' && Type(py) === 'String') {\n    if (IsStringPrefix(py, px)) {\n      return false;\n    }\n\n    if (IsStringPrefix(px, py)) {\n      return true;\n    }\n\n    return px < py; // both strings, neither a prefix of the other. shortcut for steps 3 c-f\n  }\n\n  var pxType = Type(px);\n  var pyType = Type(py);\n  var nx;\n  var ny;\n\n  if (pxType === 'BigInt' && pyType === 'String') {\n    ny = StringToBigInt(py);\n\n    if ($isNaN(ny)) {\n      return void undefined;\n    }\n\n    return BigIntLessThan(px, ny);\n  }\n\n  if (pxType === 'String' && pyType === 'BigInt') {\n    nx = StringToBigInt(px);\n\n    if ($isNaN(nx)) {\n      return void undefined;\n    }\n\n    return BigIntLessThan(px, ny);\n  }\n\n  nx = ToNumeric(px);\n  ny = ToNumeric(py);\n  var nxType = Type(nx);\n\n  if (nxType === Type(ny)) {\n    return nxType === 'Number' ? NumberLessThan(nx, ny) : BigIntLessThan(nx, ny);\n  }\n\n  if ($isNaN(nx) || $isNaN(ny)) {\n    return void undefined;\n  }\n\n  if (nx === -Infinity || ny === Infinity) {\n    return true;\n  }\n\n  if (nx === Infinity || ny === -Infinity) {\n    return false;\n  }\n\n  return nx < ny; // by now, these are both nonzero, finite, and not equal\n};","map":{"version":3,"names":["GetIntrinsic","require","$Number","$TypeError","$isNaN","IsStringPrefix","StringToBigInt","ToNumeric","ToPrimitive","Type","BigIntLessThan","NumberLessThan","module","exports","AbstractRelationalComparison","x","y","LeftFirst","px","py","pxType","pyType","nx","ny","undefined","nxType","Infinity"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2021/AbstractRelationalComparison.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Number = GetIntrinsic('%Number%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar $isNaN = require('../helpers/isNaN');\n\nvar IsStringPrefix = require('./IsStringPrefix');\nvar StringToBigInt = require('./StringToBigInt');\nvar ToNumeric = require('./ToNumeric');\nvar ToPrimitive = require('./ToPrimitive');\nvar Type = require('./Type');\n\nvar BigIntLessThan = require('./BigInt/lessThan');\nvar NumberLessThan = require('./Number/lessThan');\n\n// https://262.ecma-international.org/9.0/#sec-abstract-relational-comparison\n\n// eslint-disable-next-line max-statements, max-lines-per-function\nmodule.exports = function AbstractRelationalComparison(x, y, LeftFirst) {\n\tif (Type(LeftFirst) !== 'Boolean') {\n\t\tthrow new $TypeError('Assertion failed: LeftFirst argument must be a Boolean');\n\t}\n\tvar px;\n\tvar py;\n\tif (LeftFirst) {\n\t\tpx = ToPrimitive(x, $Number);\n\t\tpy = ToPrimitive(y, $Number);\n\t} else {\n\t\tpy = ToPrimitive(y, $Number);\n\t\tpx = ToPrimitive(x, $Number);\n\t}\n\tif (Type(px) === 'String' && Type(py) === 'String') {\n\t\tif (IsStringPrefix(py, px)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (IsStringPrefix(px, py)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn px < py; // both strings, neither a prefix of the other. shortcut for steps 3 c-f\n\t}\n\n\tvar pxType = Type(px);\n\tvar pyType = Type(py);\n\tvar nx;\n\tvar ny;\n\tif (pxType === 'BigInt' && pyType === 'String') {\n\t\tny = StringToBigInt(py);\n\t\tif ($isNaN(ny)) {\n\t\t\treturn void undefined;\n\t\t}\n\t\treturn BigIntLessThan(px, ny);\n\t}\n\tif (pxType === 'String' && pyType === 'BigInt') {\n\t\tnx = StringToBigInt(px);\n\t\tif ($isNaN(nx)) {\n\t\t\treturn void undefined;\n\t\t}\n\t\treturn BigIntLessThan(px, ny);\n\t}\n\n\tnx = ToNumeric(px);\n\tny = ToNumeric(py);\n\tvar nxType = Type(nx);\n\tif (nxType === Type(ny)) {\n\t\treturn nxType === 'Number' ? NumberLessThan(nx, ny) : BigIntLessThan(nx, ny);\n\t}\n\n\tif ($isNaN(nx) || $isNaN(ny)) {\n\t\treturn void undefined;\n\t}\n\tif (nx === -Infinity || ny === Infinity) {\n\t\treturn true;\n\t}\n\tif (nx === Infinity || ny === -Infinity) {\n\t\treturn false;\n\t}\n\n\treturn nx < ny; // by now, these are both nonzero, finite, and not equal\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}