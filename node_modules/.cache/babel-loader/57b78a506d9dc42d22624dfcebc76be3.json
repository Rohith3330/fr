{"ast":null,"code":"import e from \"postcss-value-parser\";\nvar r = {\n  preserve: !0\n};\n\nconst t = /^place-(content|items|self)/,\n      s = s => (\"preserve\" in Object(s) && (r.preserve = Boolean(s.preserve)), {\n  postcssPlugin: \"postcss-place\",\n  Declaration: (s, _ref) => {\n    let {\n      result: o\n    } = _ref;\n    t.test(s.prop.toLowerCase()) && ((s, _ref2) => {\n      let {\n        result: o\n      } = _ref2;\n      const a = s.prop.toLowerCase().match(t)[1];\n      let l;\n\n      try {\n        l = e(s.value);\n      } catch (e) {\n        s.warn(o, `Failed to parse value '${s.value}'. Leaving the original value intact.`);\n      }\n\n      if (void 0 === l) return;\n      let p = [];\n      p = l.nodes.length ? l.nodes.filter(e => \"word\" === e.type || \"function\" === e.type).map(r => e.stringify(r)) : [e.stringify(l)], s.cloneBefore({\n        prop: `align-${a}`,\n        value: p[0]\n      }), s.cloneBefore({\n        prop: `justify-${a}`,\n        value: p[1] || p[0]\n      }), r.preserve || s.remove();\n    })(s, {\n      result: o\n    });\n  }\n});\n\ns.postcss = !0;\nexport { s as default };","map":{"version":3,"names":["e","r","preserve","t","s","Object","Boolean","postcssPlugin","Declaration","result","o","test","prop","toLowerCase","a","match","l","value","warn","p","nodes","length","filter","type","map","stringify","cloneBefore","remove","postcss","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-place/dist/index.mjs"],"sourcesContent":["import e from\"postcss-value-parser\";var r={preserve:!0};const t=/^place-(content|items|self)/,s=s=>(\"preserve\"in Object(s)&&(r.preserve=Boolean(s.preserve)),{postcssPlugin:\"postcss-place\",Declaration:(s,{result:o})=>{t.test(s.prop.toLowerCase())&&((s,{result:o})=>{const a=s.prop.toLowerCase().match(t)[1];let l;try{l=e(s.value)}catch(e){s.warn(o,`Failed to parse value '${s.value}'. Leaving the original value intact.`)}if(void 0===l)return;let p=[];p=l.nodes.length?l.nodes.filter((e=>\"word\"===e.type||\"function\"===e.type)).map((r=>e.stringify(r))):[e.stringify(l)],s.cloneBefore({prop:`align-${a}`,value:p[0]}),s.cloneBefore({prop:`justify-${a}`,value:p[1]||p[0]}),r.preserve||s.remove()})(s,{result:o})}});s.postcss=!0;export{s as default};\n"],"mappings":"AAAA,OAAOA,CAAP,MAAa,sBAAb;AAAoC,IAAIC,CAAC,GAAC;EAACC,QAAQ,EAAC,CAAC;AAAX,CAAN;;AAAoB,MAAMC,CAAC,GAAC,6BAAR;AAAA,MAAsCC,CAAC,GAACA,CAAC,KAAG,cAAaC,MAAM,CAACD,CAAD,CAAnB,KAAyBH,CAAC,CAACC,QAAF,GAAWI,OAAO,CAACF,CAAC,CAACF,QAAH,CAA3C,GAAyD;EAACK,aAAa,EAAC,eAAf;EAA+BC,WAAW,EAAC,CAACJ,CAAD,WAAgB;IAAA,IAAb;MAACK,MAAM,EAACC;IAAR,CAAa;IAACP,CAAC,CAACQ,IAAF,CAAOP,CAAC,CAACQ,IAAF,CAAOC,WAAP,EAAP,KAA8B,CAAC,CAACT,CAAD,YAAgB;MAAA,IAAb;QAACK,MAAM,EAACC;MAAR,CAAa;MAAC,MAAMI,CAAC,GAACV,CAAC,CAACQ,IAAF,CAAOC,WAAP,GAAqBE,KAArB,CAA2BZ,CAA3B,EAA8B,CAA9B,CAAR;MAAyC,IAAIa,CAAJ;;MAAM,IAAG;QAACA,CAAC,GAAChB,CAAC,CAACI,CAAC,CAACa,KAAH,CAAH;MAAa,CAAjB,CAAiB,OAAMjB,CAAN,EAAQ;QAACI,CAAC,CAACc,IAAF,CAAOR,CAAP,EAAU,0BAAyBN,CAAC,CAACa,KAAM,uCAA3C;MAAmF;;MAAA,IAAG,KAAK,CAAL,KAASD,CAAZ,EAAc;MAAO,IAAIG,CAAC,GAAC,EAAN;MAASA,CAAC,GAACH,CAAC,CAACI,KAAF,CAAQC,MAAR,GAAeL,CAAC,CAACI,KAAF,CAAQE,MAAR,CAAgBtB,CAAC,IAAE,WAASA,CAAC,CAACuB,IAAX,IAAiB,eAAavB,CAAC,CAACuB,IAAnD,EAA0DC,GAA1D,CAA+DvB,CAAC,IAAED,CAAC,CAACyB,SAAF,CAAYxB,CAAZ,CAAlE,CAAf,GAAkG,CAACD,CAAC,CAACyB,SAAF,CAAYT,CAAZ,CAAD,CAApG,EAAqHZ,CAAC,CAACsB,WAAF,CAAc;QAACd,IAAI,EAAE,SAAQE,CAAE,EAAjB;QAAmBG,KAAK,EAACE,CAAC,CAAC,CAAD;MAA1B,CAAd,CAArH,EAAmKf,CAAC,CAACsB,WAAF,CAAc;QAACd,IAAI,EAAE,WAAUE,CAAE,EAAnB;QAAqBG,KAAK,EAACE,CAAC,CAAC,CAAD,CAAD,IAAMA,CAAC,CAAC,CAAD;MAAlC,CAAd,CAAnK,EAAyNlB,CAAC,CAACC,QAAF,IAAYE,CAAC,CAACuB,MAAF,EAArO;IAAgP,CAA5b,EAA8bvB,CAA9b,EAAgc;MAACK,MAAM,EAACC;IAAR,CAAhc,CAA9B;EAA0e;AAAtiB,CAA5D,CAAzC;;AAA8oBN,CAAC,CAACwB,OAAF,GAAU,CAAC,CAAX;AAAa,SAAOxB,CAAC,IAAIyB,OAAZ"},"metadata":{},"sourceType":"module"}