{"ast":null,"code":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\nimport { AST_Array, AST_Arrow, AST_BlockStatement, AST_Call, AST_Class, AST_Const, AST_Constant, AST_DefClass, AST_Defun, AST_EmptyStatement, AST_Export, AST_False, AST_Function, AST_Import, AST_Infinity, AST_LabeledStatement, AST_Lambda, AST_Let, AST_LoopControl, AST_NaN, AST_Node, AST_Null, AST_Number, AST_Object, AST_ObjectKeyVal, AST_PropAccess, AST_RegExp, AST_Scope, AST_Sequence, AST_SimpleStatement, AST_Statement, AST_String, AST_SymbolRef, AST_True, AST_UnaryPrefix, AST_Undefined, TreeWalker, walk, walk_abort, walk_parent } from \"../ast.js\";\nimport { make_node, regexp_source_fix, string_template, makePredicate } from \"../utils/index.js\";\nimport { first_in_statement } from \"../utils/first_in_statement.js\";\nimport { has_flag, TOP } from \"./compressor-flags.js\";\nexport function merge_sequence(array, node) {\n  if (node instanceof AST_Sequence) {\n    array.push(...node.expressions);\n  } else {\n    array.push(node);\n  }\n\n  return array;\n}\nexport function make_sequence(orig, expressions) {\n  if (expressions.length == 1) return expressions[0];\n  if (expressions.length == 0) throw new Error(\"trying to create a sequence with length zero!\");\n  return make_node(AST_Sequence, orig, {\n    expressions: expressions.reduce(merge_sequence, [])\n  });\n}\nexport function make_node_from_constant(val, orig) {\n  switch (typeof val) {\n    case \"string\":\n      return make_node(AST_String, orig, {\n        value: val\n      });\n\n    case \"number\":\n      if (isNaN(val)) return make_node(AST_NaN, orig);\n\n      if (isFinite(val)) {\n        return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, {\n          operator: \"-\",\n          expression: make_node(AST_Number, orig, {\n            value: -val\n          })\n        }) : make_node(AST_Number, orig, {\n          value: val\n        });\n      }\n\n      return val < 0 ? make_node(AST_UnaryPrefix, orig, {\n        operator: \"-\",\n        expression: make_node(AST_Infinity, orig)\n      }) : make_node(AST_Infinity, orig);\n\n    case \"boolean\":\n      return make_node(val ? AST_True : AST_False, orig);\n\n    case \"undefined\":\n      return make_node(AST_Undefined, orig);\n\n    default:\n      if (val === null) {\n        return make_node(AST_Null, orig, {\n          value: null\n        });\n      }\n\n      if (val instanceof RegExp) {\n        return make_node(AST_RegExp, orig, {\n          value: {\n            source: regexp_source_fix(val.source),\n            flags: val.flags\n          }\n        });\n      }\n\n      throw new Error(string_template(\"Can't handle constant of type: {type}\", {\n        type: typeof val\n      }));\n  }\n}\nexport function best_of_expression(ast1, ast2) {\n  return ast1.size() > ast2.size() ? ast2 : ast1;\n}\nexport function best_of_statement(ast1, ast2) {\n  return best_of_expression(make_node(AST_SimpleStatement, ast1, {\n    body: ast1\n  }), make_node(AST_SimpleStatement, ast2, {\n    body: ast2\n  })).body;\n}\n/** Find which node is smaller, and return that */\n\nexport function best_of(compressor, ast1, ast2) {\n  if (first_in_statement(compressor)) {\n    return best_of_statement(ast1, ast2);\n  } else {\n    return best_of_expression(ast1, ast2);\n  }\n}\n/** Simplify an object property's key, if possible */\n\nexport function get_simple_key(key) {\n  if (key instanceof AST_Constant) {\n    return key.getValue();\n  }\n\n  if (key instanceof AST_UnaryPrefix && key.operator == \"void\" && key.expression instanceof AST_Constant) {\n    return;\n  }\n\n  return key;\n}\nexport function read_property(obj, key) {\n  key = get_simple_key(key);\n  if (key instanceof AST_Node) return;\n  var value;\n\n  if (obj instanceof AST_Array) {\n    var elements = obj.elements;\n    if (key == \"length\") return make_node_from_constant(elements.length, obj);\n    if (typeof key == \"number\" && key in elements) value = elements[key];\n  } else if (obj instanceof AST_Object) {\n    key = \"\" + key;\n    var props = obj.properties;\n\n    for (var i = props.length; --i >= 0;) {\n      var prop = props[i];\n      if (!(prop instanceof AST_ObjectKeyVal)) return;\n      if (!value && props[i].key === key) value = props[i].value;\n    }\n  }\n\n  return value instanceof AST_SymbolRef && value.fixed_value() || value;\n}\nexport function has_break_or_continue(loop, parent) {\n  var found = false;\n  var tw = new TreeWalker(function (node) {\n    if (found || node instanceof AST_Scope) return true;\n\n    if (node instanceof AST_LoopControl && tw.loopcontrol_target(node) === loop) {\n      return found = true;\n    }\n  });\n  if (parent instanceof AST_LabeledStatement) tw.push(parent);\n  tw.push(loop);\n  loop.body.walk(tw);\n  return found;\n} // we shouldn't compress (1,func)(something) to\n// func(something) because that changes the meaning of\n// the func (becomes lexical instead of global).\n\nexport function maintain_this_binding(parent, orig, val) {\n  if (parent instanceof AST_UnaryPrefix && parent.operator == \"delete\" || parent instanceof AST_Call && parent.expression === orig && (val instanceof AST_PropAccess || val instanceof AST_SymbolRef && val.name == \"eval\")) {\n    const zero = make_node(AST_Number, orig, {\n      value: 0\n    });\n    return make_sequence(orig, [zero, val]);\n  } else {\n    return val;\n  }\n}\nexport function is_func_expr(node) {\n  return node instanceof AST_Arrow || node instanceof AST_Function;\n}\nexport function is_iife_call(node) {\n  // Used to determine whether the node can benefit from negation.\n  // Not the case with arrow functions (you need an extra set of parens).\n  if (node.TYPE != \"Call\") return false;\n  return node.expression instanceof AST_Function || is_iife_call(node.expression);\n}\nexport function is_empty(thing) {\n  if (thing === null) return true;\n  if (thing instanceof AST_EmptyStatement) return true;\n  if (thing instanceof AST_BlockStatement) return thing.body.length == 0;\n  return false;\n}\nexport const identifier_atom = makePredicate(\"Infinity NaN undefined\");\nexport function is_identifier_atom(node) {\n  return node instanceof AST_Infinity || node instanceof AST_NaN || node instanceof AST_Undefined;\n}\n/** Check if this is a SymbolRef node which has one def of a certain AST type */\n\nexport function is_ref_of(ref, type) {\n  if (!(ref instanceof AST_SymbolRef)) return false;\n  var orig = ref.definition().orig;\n\n  for (var i = orig.length; --i >= 0;) {\n    if (orig[i] instanceof type) return true;\n  }\n} // Can we turn { block contents... } into just the block contents ?\n// Not if one of these is inside.\n\nexport function can_be_evicted_from_block(node) {\n  return !(node instanceof AST_DefClass || node instanceof AST_Defun || node instanceof AST_Let || node instanceof AST_Const || node instanceof AST_Export || node instanceof AST_Import);\n}\nexport function as_statement_array(thing) {\n  if (thing === null) return [];\n  if (thing instanceof AST_BlockStatement) return thing.body;\n  if (thing instanceof AST_EmptyStatement) return [];\n  if (thing instanceof AST_Statement) return [thing];\n  throw new Error(\"Can't convert thing to statement array\");\n}\nexport function is_reachable(scope_node, defs) {\n  const find_ref = node => {\n    if (node instanceof AST_SymbolRef && defs.includes(node.definition())) {\n      return walk_abort;\n    }\n  };\n\n  return walk_parent(scope_node, (node, info) => {\n    if (node instanceof AST_Scope && node !== scope_node) {\n      var parent = info.parent();\n\n      if (parent instanceof AST_Call && parent.expression === node // Async/Generators aren't guaranteed to sync evaluate all of\n      // their body steps, so it's possible they close over the variable.\n      && !(node.async || node.is_generator)) {\n        return;\n      }\n\n      if (walk(node, find_ref)) return walk_abort;\n      return true;\n    }\n  });\n}\n/** Check if a ref refers to the name of a function/class it's defined within */\n\nexport function is_recursive_ref(compressor, def) {\n  var node;\n\n  for (var i = 0; node = compressor.parent(i); i++) {\n    if (node instanceof AST_Lambda || node instanceof AST_Class) {\n      var name = node.name;\n\n      if (name && name.definition() === def) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n} // TODO this only works with AST_Defun, shouldn't it work for other ways of defining functions?\n\nexport function retain_top_func(fn, compressor) {\n  return compressor.top_retain && fn instanceof AST_Defun && has_flag(fn, TOP) && fn.name && compressor.top_retain(fn.name);\n}","map":{"version":3,"names":["AST_Array","AST_Arrow","AST_BlockStatement","AST_Call","AST_Class","AST_Const","AST_Constant","AST_DefClass","AST_Defun","AST_EmptyStatement","AST_Export","AST_False","AST_Function","AST_Import","AST_Infinity","AST_LabeledStatement","AST_Lambda","AST_Let","AST_LoopControl","AST_NaN","AST_Node","AST_Null","AST_Number","AST_Object","AST_ObjectKeyVal","AST_PropAccess","AST_RegExp","AST_Scope","AST_Sequence","AST_SimpleStatement","AST_Statement","AST_String","AST_SymbolRef","AST_True","AST_UnaryPrefix","AST_Undefined","TreeWalker","walk","walk_abort","walk_parent","make_node","regexp_source_fix","string_template","makePredicate","first_in_statement","has_flag","TOP","merge_sequence","array","node","push","expressions","make_sequence","orig","length","Error","reduce","make_node_from_constant","val","value","isNaN","isFinite","operator","expression","RegExp","source","flags","type","best_of_expression","ast1","ast2","size","best_of_statement","body","best_of","compressor","get_simple_key","key","getValue","read_property","obj","elements","props","properties","i","prop","fixed_value","has_break_or_continue","loop","parent","found","tw","loopcontrol_target","maintain_this_binding","name","zero","is_func_expr","is_iife_call","TYPE","is_empty","thing","identifier_atom","is_identifier_atom","is_ref_of","ref","definition","can_be_evicted_from_block","as_statement_array","is_reachable","scope_node","defs","find_ref","includes","info","async","is_generator","is_recursive_ref","def","retain_top_func","fn","top_retain"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/terser/lib/compress/common.js"],"sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n    AST_Array,\n    AST_Arrow,\n    AST_BlockStatement,\n    AST_Call,\n    AST_Class,\n    AST_Const,\n    AST_Constant,\n    AST_DefClass,\n    AST_Defun,\n    AST_EmptyStatement,\n    AST_Export,\n    AST_False,\n    AST_Function,\n    AST_Import,\n    AST_Infinity,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NaN,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectKeyVal,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_String,\n    AST_SymbolRef,\n    AST_True,\n    AST_UnaryPrefix,\n    AST_Undefined,\n\n    TreeWalker,\n    walk,\n    walk_abort,\n    walk_parent,\n} from \"../ast.js\";\nimport { make_node, regexp_source_fix, string_template, makePredicate } from \"../utils/index.js\";\nimport { first_in_statement } from \"../utils/first_in_statement.js\";\nimport { has_flag, TOP } from \"./compressor-flags.js\";\n\nexport function merge_sequence(array, node) {\n    if (node instanceof AST_Sequence) {\n        array.push(...node.expressions);\n    } else {\n        array.push(node);\n    }\n    return array;\n}\n\nexport function make_sequence(orig, expressions) {\n    if (expressions.length == 1) return expressions[0];\n    if (expressions.length == 0) throw new Error(\"trying to create a sequence with length zero!\");\n    return make_node(AST_Sequence, orig, {\n        expressions: expressions.reduce(merge_sequence, [])\n    });\n}\n\nexport function make_node_from_constant(val, orig) {\n    switch (typeof val) {\n      case \"string\":\n        return make_node(AST_String, orig, {\n            value: val\n        });\n      case \"number\":\n        if (isNaN(val)) return make_node(AST_NaN, orig);\n        if (isFinite(val)) {\n            return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                operator: \"-\",\n                expression: make_node(AST_Number, orig, { value: -val })\n            }) : make_node(AST_Number, orig, { value: val });\n        }\n        return val < 0 ? make_node(AST_UnaryPrefix, orig, {\n            operator: \"-\",\n            expression: make_node(AST_Infinity, orig)\n        }) : make_node(AST_Infinity, orig);\n      case \"boolean\":\n        return make_node(val ? AST_True : AST_False, orig);\n      case \"undefined\":\n        return make_node(AST_Undefined, orig);\n      default:\n        if (val === null) {\n            return make_node(AST_Null, orig, { value: null });\n        }\n        if (val instanceof RegExp) {\n            return make_node(AST_RegExp, orig, {\n                value: {\n                    source: regexp_source_fix(val.source),\n                    flags: val.flags\n                }\n            });\n        }\n        throw new Error(string_template(\"Can't handle constant of type: {type}\", {\n            type: typeof val\n        }));\n    }\n}\n\nexport function best_of_expression(ast1, ast2) {\n    return ast1.size() > ast2.size() ? ast2 : ast1;\n}\n\nexport function best_of_statement(ast1, ast2) {\n    return best_of_expression(\n        make_node(AST_SimpleStatement, ast1, {\n            body: ast1\n        }),\n        make_node(AST_SimpleStatement, ast2, {\n            body: ast2\n        })\n    ).body;\n}\n\n/** Find which node is smaller, and return that */\nexport function best_of(compressor, ast1, ast2) {\n    if (first_in_statement(compressor)) {\n        return best_of_statement(ast1, ast2);\n    } else {\n        return best_of_expression(ast1, ast2);\n    }\n}\n\n/** Simplify an object property's key, if possible */\nexport function get_simple_key(key) {\n    if (key instanceof AST_Constant) {\n        return key.getValue();\n    }\n    if (key instanceof AST_UnaryPrefix\n        && key.operator == \"void\"\n        && key.expression instanceof AST_Constant) {\n        return;\n    }\n    return key;\n}\n\nexport function read_property(obj, key) {\n    key = get_simple_key(key);\n    if (key instanceof AST_Node) return;\n\n    var value;\n    if (obj instanceof AST_Array) {\n        var elements = obj.elements;\n        if (key == \"length\") return make_node_from_constant(elements.length, obj);\n        if (typeof key == \"number\" && key in elements) value = elements[key];\n    } else if (obj instanceof AST_Object) {\n        key = \"\" + key;\n        var props = obj.properties;\n        for (var i = props.length; --i >= 0;) {\n            var prop = props[i];\n            if (!(prop instanceof AST_ObjectKeyVal)) return;\n            if (!value && props[i].key === key) value = props[i].value;\n        }\n    }\n\n    return value instanceof AST_SymbolRef && value.fixed_value() || value;\n}\n\nexport function has_break_or_continue(loop, parent) {\n    var found = false;\n    var tw = new TreeWalker(function(node) {\n        if (found || node instanceof AST_Scope) return true;\n        if (node instanceof AST_LoopControl && tw.loopcontrol_target(node) === loop) {\n            return found = true;\n        }\n    });\n    if (parent instanceof AST_LabeledStatement) tw.push(parent);\n    tw.push(loop);\n    loop.body.walk(tw);\n    return found;\n}\n\n// we shouldn't compress (1,func)(something) to\n// func(something) because that changes the meaning of\n// the func (becomes lexical instead of global).\nexport function maintain_this_binding(parent, orig, val) {\n    if (\n        parent instanceof AST_UnaryPrefix && parent.operator == \"delete\"\n        || parent instanceof AST_Call && parent.expression === orig\n            && (\n                val instanceof AST_PropAccess\n                || val instanceof AST_SymbolRef && val.name == \"eval\"\n            )\n    ) {\n        const zero = make_node(AST_Number, orig, { value: 0 });\n        return make_sequence(orig, [ zero, val ]);\n    } else {\n        return val;\n    }\n}\n\nexport function is_func_expr(node) {\n    return node instanceof AST_Arrow || node instanceof AST_Function;\n}\n\nexport function is_iife_call(node) {\n    // Used to determine whether the node can benefit from negation.\n    // Not the case with arrow functions (you need an extra set of parens).\n    if (node.TYPE != \"Call\") return false;\n    return node.expression instanceof AST_Function || is_iife_call(node.expression);\n}\n\nexport function is_empty(thing) {\n    if (thing === null) return true;\n    if (thing instanceof AST_EmptyStatement) return true;\n    if (thing instanceof AST_BlockStatement) return thing.body.length == 0;\n    return false;\n}\n\nexport const identifier_atom = makePredicate(\"Infinity NaN undefined\");\nexport function is_identifier_atom(node) {\n    return node instanceof AST_Infinity\n        || node instanceof AST_NaN\n        || node instanceof AST_Undefined;\n}\n\n/** Check if this is a SymbolRef node which has one def of a certain AST type */\nexport function is_ref_of(ref, type) {\n    if (!(ref instanceof AST_SymbolRef)) return false;\n    var orig = ref.definition().orig;\n    for (var i = orig.length; --i >= 0;) {\n        if (orig[i] instanceof type) return true;\n    }\n}\n\n// Can we turn { block contents... } into just the block contents ?\n// Not if one of these is inside.\nexport function can_be_evicted_from_block(node) {\n    return !(\n        node instanceof AST_DefClass ||\n        node instanceof AST_Defun ||\n        node instanceof AST_Let ||\n        node instanceof AST_Const ||\n        node instanceof AST_Export ||\n        node instanceof AST_Import\n    );\n}\n\nexport function as_statement_array(thing) {\n    if (thing === null) return [];\n    if (thing instanceof AST_BlockStatement) return thing.body;\n    if (thing instanceof AST_EmptyStatement) return [];\n    if (thing instanceof AST_Statement) return [ thing ];\n    throw new Error(\"Can't convert thing to statement array\");\n}\n\nexport function is_reachable(scope_node, defs) {\n    const find_ref = node => {\n        if (node instanceof AST_SymbolRef && defs.includes(node.definition())) {\n            return walk_abort;\n        }\n    };\n\n    return walk_parent(scope_node, (node, info) => {\n        if (node instanceof AST_Scope && node !== scope_node) {\n            var parent = info.parent();\n\n            if (\n                parent instanceof AST_Call\n                && parent.expression === node\n                // Async/Generators aren't guaranteed to sync evaluate all of\n                // their body steps, so it's possible they close over the variable.\n                && !(node.async || node.is_generator)\n            ) {\n                return;\n            }\n\n            if (walk(node, find_ref)) return walk_abort;\n\n            return true;\n        }\n    });\n}\n\n/** Check if a ref refers to the name of a function/class it's defined within */\nexport function is_recursive_ref(compressor, def) {\n    var node;\n    for (var i = 0; node = compressor.parent(i); i++) {\n        if (node instanceof AST_Lambda || node instanceof AST_Class) {\n            var name = node.name;\n            if (name && name.definition() === def) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n// TODO this only works with AST_Defun, shouldn't it work for other ways of defining functions?\nexport function retain_top_func(fn, compressor) {\n    return compressor.top_retain\n        && fn instanceof AST_Defun\n        && has_flag(fn, TOP)\n        && fn.name\n        && compressor.top_retain(fn.name);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}