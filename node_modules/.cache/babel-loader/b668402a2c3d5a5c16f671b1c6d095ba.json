{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(findPackageData),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(findRelativeConfig),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(findRootConfig),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(loadConfig),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(resolveShowConfigPath);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ROOT_CONFIG_FILENAMES = void 0;\nexports.findConfigUpwards = findConfigUpwards;\nexports.findPackageData = findPackageData;\nexports.findRelativeConfig = findRelativeConfig;\nexports.findRootConfig = findRootConfig;\nexports.loadConfig = loadConfig;\nexports.loadPlugin = loadPlugin;\nexports.loadPreset = loadPreset;\nexports.resolvePlugin = resolvePlugin;\nexports.resolvePreset = resolvePreset;\nexports.resolveShowConfigPath = resolveShowConfigPath;\n\nfunction findConfigUpwards(rootDir) {\n  return null;\n}\n\nfunction findPackageData(filepath) {\n  return _regeneratorRuntime().wrap(function findPackageData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {\n            filepath: filepath,\n            directories: [],\n            pkg: null,\n            isPackage: false\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction findRelativeConfig(pkgData, envName, caller) {\n  return _regeneratorRuntime().wrap(function findRelativeConfig$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", {\n            config: null,\n            ignore: null\n          });\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction findRootConfig(dirname, envName, caller) {\n  return _regeneratorRuntime().wrap(function findRootConfig$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", null);\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction loadConfig(name, dirname, envName, caller) {\n  return _regeneratorRuntime().wrap(function loadConfig$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          throw new Error(\"Cannot load \".concat(name, \" relative to \").concat(dirname, \" in a browser\"));\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction resolveShowConfigPath(dirname) {\n  return _regeneratorRuntime().wrap(function resolveShowConfigPath$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          return _context5.abrupt(\"return\", null);\n\n        case 1:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nvar ROOT_CONFIG_FILENAMES = [];\nexports.ROOT_CONFIG_FILENAMES = ROOT_CONFIG_FILENAMES;\n\nfunction resolvePlugin(name, dirname) {\n  return null;\n}\n\nfunction resolvePreset(name, dirname) {\n  return null;\n}\n\nfunction loadPlugin(name, dirname) {\n  throw new Error(\"Cannot load plugin \".concat(name, \" relative to \").concat(dirname, \" in a browser\"));\n}\n\nfunction loadPreset(name, dirname) {\n  throw new Error(\"Cannot load preset \".concat(name, \" relative to \").concat(dirname, \" in a browser\"));\n}\n\n0 && 0;","map":{"version":3,"mappings":";;;;sDAqBiBA,e;uDAUAC,kB;uDAYAC,c;uDAYAC,U;uDAYAC,qB;;;;;;;;;;;;;;;;;AAtDV,SAASC,iBAAT,CAELC,OAFK,EAGU;EACf,OAAO,IAAP;AACD;;AAGM,SAAUN,eAAV,CAA0BO,QAA1B;EAAA;IAAA;MAAA;QAAA;UAAA,iCACE;YACLA,QADK,EACLA,QADK;YAELC,WAAW,EAAE,EAFR;YAGLC,GAAG,EAAE,IAHA;YAILC,SAAS,EAAE;UAJN,CADF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAUA,SAAUT,kBAAV,CAELU,OAFK,EAILC,OAJK,EAMLC,MANK;EAAA;IAAA;MAAA;QAAA;UAAA,kCAQE;YAAEC,MAAM,EAAE,IAAV;YAAgBC,MAAM,EAAE;UAAxB,CARF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAYA,SAAUb,cAAV,CAELc,OAFK,EAILJ,OAJK,EAMLC,MANK;EAAA;IAAA;MAAA;QAAA;UAAA,kCAQE,IARF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAYA,SAAUV,UAAV,CACLc,IADK,EAELD,OAFK,EAILJ,OAJK,EAMLC,MANK;EAAA;IAAA;MAAA;QAAA;UAAA,MAQC,IAAIK,KAAJ,uBAAyBD,IAAzB,0BAA6CD,OAA7C,mBARD;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAYA,SAAUZ,qBAAV,CAELY,OAFK;EAAA;IAAA;MAAA;QAAA;UAAA,kCAIE,IAJF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAOA,IAAMG,qBAA+B,GAAG,EAAxC;;;AAGA,SAASC,aAAT,CAAuBH,IAAvB,EAAqCD,OAArC,EAAqE;EAC1E,OAAO,IAAP;AACD;;AAGM,SAASK,aAAT,CAAuBJ,IAAvB,EAAqCD,OAArC,EAAqE;EAC1E,OAAO,IAAP;AACD;;AAEM,SAASM,UAAT,CACLL,IADK,EAELD,OAFK,EAMJ;EACD,MAAM,IAAIE,KAAJ,8BACkBD,IADlB,0BACsCD,OADtC,mBAAN;AAGD;;AAEM,SAASO,UAAT,CACLN,IADK,EAELD,OAFK,EAMJ;EACD,MAAM,IAAIE,KAAJ,8BACkBD,IADlB,0BACsCD,OADtC,mBAAN;AAGD","names":["findPackageData","findRelativeConfig","findRootConfig","loadConfig","resolveShowConfigPath","findConfigUpwards","rootDir","filepath","directories","pkg","isPackage","pkgData","envName","caller","config","ignore","dirname","name","Error","ROOT_CONFIG_FILENAMES","resolvePlugin","resolvePreset","loadPlugin","loadPreset"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\config\\files\\index-browser.ts"],"sourcesContent":["import type { Handler } from \"gensync\";\n\nimport type {\n  ConfigFile,\n  IgnoreFile,\n  RelativeConfig,\n  FilePackageData,\n} from \"./types\";\n\nimport type { CallerMetadata } from \"../validation/options\";\n\nexport type { ConfigFile, IgnoreFile, RelativeConfig, FilePackageData };\n\nexport function findConfigUpwards(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  rootDir: string,\n): string | null {\n  return null;\n}\n\n// eslint-disable-next-line require-yield\nexport function* findPackageData(filepath: string): Handler<FilePackageData> {\n  return {\n    filepath,\n    directories: [],\n    pkg: null,\n    isPackage: false,\n  };\n}\n\n// eslint-disable-next-line require-yield\nexport function* findRelativeConfig(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  pkgData: FilePackageData,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  envName: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  caller: CallerMetadata | undefined,\n): Handler<RelativeConfig> {\n  return { config: null, ignore: null };\n}\n\n// eslint-disable-next-line require-yield\nexport function* findRootConfig(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  dirname: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  envName: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  caller: CallerMetadata | undefined,\n): Handler<ConfigFile | null> {\n  return null;\n}\n\n// eslint-disable-next-line require-yield\nexport function* loadConfig(\n  name: string,\n  dirname: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  envName: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  caller: CallerMetadata | undefined,\n): Handler<ConfigFile> {\n  throw new Error(`Cannot load ${name} relative to ${dirname} in a browser`);\n}\n\n// eslint-disable-next-line require-yield\nexport function* resolveShowConfigPath(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  dirname: string,\n): Handler<string | null> {\n  return null;\n}\n\nexport const ROOT_CONFIG_FILENAMES: string[] = [];\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function resolvePlugin(name: string, dirname: string): string | null {\n  return null;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function resolvePreset(name: string, dirname: string): string | null {\n  return null;\n}\n\nexport function loadPlugin(\n  name: string,\n  dirname: string,\n): Handler<{\n  filepath: string;\n  value: unknown;\n}> {\n  throw new Error(\n    `Cannot load plugin ${name} relative to ${dirname} in a browser`,\n  );\n}\n\nexport function loadPreset(\n  name: string,\n  dirname: string,\n): Handler<{\n  filepath: string;\n  value: unknown;\n}> {\n  throw new Error(\n    `Cannot load preset ${name} relative to ${dirname} in a browser`,\n  );\n}\n"]},"metadata":{},"sourceType":"script"}