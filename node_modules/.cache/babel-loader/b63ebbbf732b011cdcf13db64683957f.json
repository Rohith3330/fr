{"ast":null,"code":"import crypto from 'crypto';\nimport * as sharedState from './sharedState';\n/**\n * Calculate the hash of a string.\n *\n * This doesn't need to be cryptographically secure or\n * anything like that since it's used only to detect\n * when the CSS changes to invalidate the context.\n *\n * This is wrapped in a try/catch because it's really dependent\n * on how Node itself is build and the environment and OpenSSL\n * version / build that is installed on the user's machine.\n *\n * Based on the environment this can just outright fail.\n *\n * See https://github.com/nodejs/node/issues/40455\n *\n * @param {string} str\n */\n\nfunction getHash(str) {\n  try {\n    return crypto.createHash('md5').update(str, 'utf-8').digest('binary');\n  } catch (err) {\n    return '';\n  }\n}\n/**\n * Determine if the CSS tree is different from the\n * previous version for the given `sourcePath`.\n *\n * @param {string} sourcePath\n * @param {import('postcss').Node} root\n */\n\n\nexport function hasContentChanged(sourcePath, root) {\n  let css = root.toString(); // We only care about files with @tailwind directives\n  // Other files use an existing context\n\n  if (!css.includes('@tailwind')) {\n    return false;\n  }\n\n  let existingHash = sharedState.sourceHashMap.get(sourcePath);\n  let rootHash = getHash(css);\n  let didChange = existingHash !== rootHash;\n  sharedState.sourceHashMap.set(sourcePath, rootHash);\n  return didChange;\n}","map":{"version":3,"names":["crypto","sharedState","getHash","str","createHash","update","digest","err","hasContentChanged","sourcePath","root","css","toString","includes","existingHash","sourceHashMap","get","rootHash","didChange","set"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/lib/cacheInvalidation.js"],"sourcesContent":["import crypto from 'crypto'\nimport * as sharedState from './sharedState'\n\n/**\n * Calculate the hash of a string.\n *\n * This doesn't need to be cryptographically secure or\n * anything like that since it's used only to detect\n * when the CSS changes to invalidate the context.\n *\n * This is wrapped in a try/catch because it's really dependent\n * on how Node itself is build and the environment and OpenSSL\n * version / build that is installed on the user's machine.\n *\n * Based on the environment this can just outright fail.\n *\n * See https://github.com/nodejs/node/issues/40455\n *\n * @param {string} str\n */\nfunction getHash(str) {\n  try {\n    return crypto.createHash('md5').update(str, 'utf-8').digest('binary')\n  } catch (err) {\n    return ''\n  }\n}\n\n/**\n * Determine if the CSS tree is different from the\n * previous version for the given `sourcePath`.\n *\n * @param {string} sourcePath\n * @param {import('postcss').Node} root\n */\nexport function hasContentChanged(sourcePath, root) {\n  let css = root.toString()\n\n  // We only care about files with @tailwind directives\n  // Other files use an existing context\n  if (!css.includes('@tailwind')) {\n    return false\n  }\n\n  let existingHash = sharedState.sourceHashMap.get(sourcePath)\n  let rootHash = getHash(css)\n  let didChange = existingHash !== rootHash\n\n  sharedState.sourceHashMap.set(sourcePath, rootHash)\n\n  return didChange\n}\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;EACpB,IAAI;IACF,OAAOH,MAAM,CAACI,UAAP,CAAkB,KAAlB,EAAyBC,MAAzB,CAAgCF,GAAhC,EAAqC,OAArC,EAA8CG,MAA9C,CAAqD,QAArD,CAAP;EACD,CAFD,CAEE,OAAOC,GAAP,EAAY;IACZ,OAAO,EAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,iBAAT,CAA2BC,UAA3B,EAAuCC,IAAvC,EAA6C;EAClD,IAAIC,GAAG,GAAGD,IAAI,CAACE,QAAL,EAAV,CADkD,CAGlD;EACA;;EACA,IAAI,CAACD,GAAG,CAACE,QAAJ,CAAa,WAAb,CAAL,EAAgC;IAC9B,OAAO,KAAP;EACD;;EAED,IAAIC,YAAY,GAAGb,WAAW,CAACc,aAAZ,CAA0BC,GAA1B,CAA8BP,UAA9B,CAAnB;EACA,IAAIQ,QAAQ,GAAGf,OAAO,CAACS,GAAD,CAAtB;EACA,IAAIO,SAAS,GAAGJ,YAAY,KAAKG,QAAjC;EAEAhB,WAAW,CAACc,aAAZ,CAA0BI,GAA1B,CAA8BV,UAA9B,EAA0CQ,QAA1C;EAEA,OAAOC,SAAP;AACD"},"metadata":{},"sourceType":"module"}