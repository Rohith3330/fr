{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\src\\\\screens\\\\upload\\\\Upload.js\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport * as tf from \"@tensorflow/tfjs\";\nimport React, { useState, useEffect } from \"react\";\nimport Thumb from '../../components/Thumb';\n// import NavBar from \"./Navbar.js\";\n//import \"./App.css\";\nvar idx2class1 = {\n  0: 'baltoy',\n  1: 'braviary',\n  2: 'bronzor',\n  3: 'breloom',\n  4: 'bronzong',\n  5: 'budew',\n  6: 'buneary',\n  7: 'bruxish',\n  8: 'bulbasaur',\n  9: 'buizel',\n  10: 'brionne',\n  11: 'blitzle',\n  12: 'blissey',\n  13: 'bounsweet',\n  14: 'bouffalant',\n  15: 'boldore',\n  16: 'bonsly',\n  17: 'braixen',\n  18: 'blaziken',\n  19: 'blacephalon',\n  20: 'blastoise',\n  21: 'bergmite',\n  22: 'bellossom',\n  23: 'bewear',\n  24: 'bellsprout',\n  25: 'beldum',\n  26: 'bidoof',\n  27: 'bisharp',\n  28: 'bibarel',\n  29: 'binacle',\n  30: 'beheeyem',\n  31: 'beartic',\n  32: 'bastiodon',\n  33: 'barbaracle',\n  34: 'banette',\n  35: 'basculin-red-striped',\n  36: 'bayleef',\n  37: 'beautifly',\n  38: 'beedrill',\n  39: 'barboach',\n  40: 'chatot',\n  41: 'charmander',\n  42: 'celesteela',\n  43: 'cascoon',\n  44: 'chansey',\n  45: 'charjabug',\n  46: 'castform',\n  47: 'charizard',\n  48: 'caterpie',\n  49: 'chandelure',\n  50: 'celebi',\n  51: 'camerupt',\n  52: 'butterfree',\n  53: 'burmy',\n  54: 'cacturne',\n  55: 'carnivine',\n  56: 'cacnea',\n  57: 'carracosta',\n  58: 'carbink',\n  59: 'carvanha',\n  60: 'buzzwole',\n  61: 'bunnelby',\n  62: 'cosmog',\n  63: 'cofagrigus',\n  64: 'combee',\n  65: 'combusken',\n  66: 'cobalion',\n  67: 'conkeldurr',\n  68: 'corphish',\n  69: 'comfey',\n  70: 'corsola',\n  71: 'cosmoem',\n  72: 'cloyster',\n  73: 'claydol',\n  74: 'cleffa',\n  75: 'chingling',\n  76: 'clauncher',\n  77: 'clamperl',\n  78: 'clefairy',\n  79: 'cinccino',\n  80: 'clefable',\n  81: 'clawitzer',\n  82: 'chinchou',\n  83: 'cherubi',\n  84: 'chikorita',\n  85: 'cherrim',\n  86: 'chesnaught',\n  87: 'chimecho',\n  88: 'charmeleon',\n  89: 'chimchar',\n  90: 'chespin',\n  91: 'dewgong',\n  92: 'deino',\n  93: 'delcatty',\n  94: 'delphox',\n  95: 'deerling',\n  96: 'decidueye',\n  97: 'deoxys-normal',\n  98: 'dedenne',\n  99: 'delibird',\n  100: 'darumaka',\n  101: 'darmanitan-standard',\n  102: 'cryogonal',\n  103: 'crustle',\n  104: 'darkrai',\n  105: 'cubchoo',\n  106: 'cubone',\n  107: 'cutiefly',\n  108: 'cyndaquil',\n  109: 'dartrix',\n  110: 'croconaw',\n  111: 'crobat',\n  112: 'croagunk',\n  113: 'cranidos',\n  114: 'cresselia',\n  115: 'crabrawler',\n  116: 'cottonee',\n  117: 'cradily',\n  118: 'crabominable',\n  119: 'crawdaunt',\n  120: 'ducklett',\n  121: 'durant',\n  122: 'druddigon',\n  123: 'drowzee',\n  124: 'dusknoir',\n  125: 'dugtrio',\n  126: 'duosion',\n  127: 'dunsparce',\n  128: 'dusclops',\n  129: 'drilbur',\n  130: 'dratini',\n  131: 'drifblim',\n  132: 'dragonair',\n  133: 'drapion',\n  134: 'dragalge',\n  135: 'drampa',\n  136: 'doublade',\n  137: 'dragonite',\n  138: 'drifloon',\n  139: 'donphan',\n  140: 'dewpider',\n  141: 'dhelmise',\n  142: 'diancie',\n  143: 'doduo',\n  144: 'dialga',\n  145: 'diglett',\n  146: 'diggersby',\n  147: 'ditto',\n  148: 'dodrio',\n  149: 'dewott',\n  150: 'excadrill',\n  151: 'espurr',\n  152: 'elekid',\n  153: 'empoleon',\n  154: 'emolga',\n  155: 'escavalier',\n  156: 'espeon',\n  157: 'elgyem',\n  158: 'emboar',\n  159: 'entei',\n  160: 'electrode',\n  161: 'dwebble',\n  162: 'ekans',\n  163: 'dustox',\n  164: 'eevee',\n  165: 'eelektross',\n  166: 'electabuzz',\n  167: 'electrike',\n  168: 'eelektrik',\n  169: 'electivire',\n  170: 'duskull',\n  171: 'fomantis',\n  172: 'furfrou',\n  173: 'froakie',\n  174: 'forretress',\n  175: 'frogadier',\n  176: 'foongus',\n  177: 'fraxure',\n  178: 'froslass',\n  179: 'frillish',\n  180: 'flygon',\n  181: 'fletchling',\n  182: 'floatzel',\n  183: 'flaaffy',\n  184: 'finneon',\n  185: 'flareon',\n  186: 'flabebe',\n  187: 'florges',\n  188: 'floette',\n  189: 'fletchinder',\n  190: 'ferrothorn',\n  191: 'farfetchd',\n  192: 'fennekin',\n  193: 'exploud',\n  194: 'ferroseed',\n  195: 'feraligatr',\n  196: 'exeggcute',\n  197: 'feebas',\n  198: 'exeggutor',\n  199: 'fearow',\n  200: 'gliscor',\n  201: 'girafarig',\n  202: 'geodude',\n  203: 'giratina-altered',\n  204: 'gible',\n  205: 'glalie',\n  206: 'gligar',\n  207: 'glameow',\n  208: 'gigalith',\n  209: 'glaceon',\n  210: 'gengar',\n  211: 'garchomp',\n  212: 'gabite',\n  213: 'garbodor',\n  214: 'galvantula',\n  215: 'gastly',\n  216: 'genesect',\n  217: 'gastrodon',\n  218: 'gallade',\n  219: 'gardevoir',\n  220: 'furret',\n  221: 'grubbin',\n  222: 'growlithe',\n  223: 'gulpin',\n  224: 'grumpig',\n  225: 'groudon',\n  226: 'grovyle',\n  227: 'grotle',\n  228: 'gumshoos',\n  229: 'gurdurr',\n  230: 'grimer',\n  231: 'gothitelle',\n  232: 'graveler',\n  233: 'gothorita',\n  234: 'granbull',\n  235: 'gourgeist-average',\n  236: 'goodra',\n  237: 'greninja',\n  238: 'gothita',\n  239: 'gorebyss',\n  240: 'goomy',\n  241: 'golurk',\n  242: 'golbat',\n  243: 'gloom',\n  244: 'gogoat',\n  245: 'golett',\n  246: 'golisopod',\n  247: 'golduck',\n  248: 'golem',\n  249: 'goldeen',\n  250: 'helioptile',\n  251: 'hitmonlee',\n  252: 'hippopotas',\n  253: 'hitmonchan',\n  254: 'honchkrow',\n  255: 'hitmontop',\n  256: 'hippowdon',\n  257: 'heracross',\n  258: 'herdier',\n  259: 'heliolisk',\n  260: 'heatran',\n  261: 'happiny',\n  262: 'hariyama',\n  263: 'hawlucha',\n  264: 'heatmor',\n  265: 'haunter',\n  266: 'gyarados',\n  267: 'hakamo-o',\n  268: 'haxorus',\n  269: 'guzzlord',\n  270: 'hypno',\n  271: 'hoppip',\n  272: 'hoothoot',\n  273: 'honedge',\n  274: 'huntail',\n  275: 'hoopa-confined',\n  276: 'hydreigon',\n  277: 'houndour',\n  278: 'horsea',\n  279: 'houndoom',\n  280: 'ho-oh',\n  281: 'kingdra',\n  282: 'kecleon',\n  283: 'kartana',\n  284: 'kingler',\n  285: 'kirlia',\n  286: 'klefki',\n  287: 'keldeo-ordinary',\n  288: 'klang',\n  289: 'klink',\n  290: 'karrablast',\n  291: 'jynx',\n  292: 'kangaskhan',\n  293: 'jumpluff',\n  294: 'kabutops',\n  295: 'kadabra',\n  296: 'kabuto',\n  297: 'joltik',\n  298: 'jirachi',\n  299: 'kakuna',\n  300: 'jolteon',\n  301: 'jangmo-o',\n  302: 'infernape',\n  303: 'jellicent',\n  304: 'illumise',\n  305: 'ivysaur',\n  306: 'incineroar',\n  307: 'igglybuff',\n  308: 'jigglypuff',\n  309: 'inkay',\n  310: 'liepard',\n  311: 'lilligant',\n  312: 'lickitung',\n  313: 'lillipup',\n  314: 'lickilicky',\n  315: 'lileep',\n  316: 'ledyba',\n  317: 'ledian',\n  318: 'leavanny',\n  319: 'leafeon',\n  320: 'larvesta',\n  321: 'latios',\n  322: 'lapras',\n  323: 'lampent',\n  324: 'lairon',\n  325: 'larvitar',\n  326: 'latias',\n  327: 'lanturn',\n  328: 'landorus-incarnate',\n  329: 'kyurem',\n  330: 'komala',\n  331: 'kyogre',\n  332: 'kommo-o',\n  333: 'krabby',\n  334: 'kricketot',\n  335: 'krookodile',\n  336: 'krokorok',\n  337: 'kricketune',\n  338: 'koffing',\n  339: 'klinklang',\n  340: 'lunala',\n  341: 'lunatone',\n  342: 'luxray',\n  343: 'luvdisc',\n  344: 'lurantis',\n  345: 'machamp',\n  346: 'luxio',\n  347: 'lumineon',\n  348: 'lycanroc-midday',\n  349: 'lugia',\n  350: 'lombre',\n  351: 'ludicolo',\n  352: 'lotad',\n  353: 'loudred',\n  354: 'lopunny',\n  355: 'litwick',\n  356: 'lucario',\n  357: 'litleo',\n  358: 'litten',\n  359: 'linoone',\n  360: 'maractus',\n  361: 'mantyke',\n  362: 'makuhita',\n  363: 'mamoswine',\n  364: 'mankey',\n  365: 'manaphy',\n  366: 'mandibuzz',\n  367: 'mantine',\n  368: 'manectric',\n  369: 'malamar',\n  370: 'magnezone',\n  371: 'machop',\n  372: 'magby',\n  373: 'magcargo',\n  374: 'magneton',\n  375: 'magmar',\n  376: 'magmortar',\n  377: 'magnemite',\n  378: 'magikarp',\n  379: 'magearna',\n  380: 'machoke',\n  381: 'miltank',\n  382: 'mime-jr',\n  383: 'milotic',\n  384: 'mienshao',\n  385: 'mewtwo',\n  386: 'mienfoo',\n  387: 'mimikyu',\n  388: 'mew',\n  389: 'mightyena',\n  390: 'metapod',\n  391: 'metang',\n  392: 'meowth',\n  393: 'meltan',\n  394: 'meowstic-male',\n  395: 'meganium',\n  396: 'metagross',\n  397: 'mesprit',\n  398: 'melmetal',\n  399: 'meloetta-aria',\n  400: 'meditite',\n  401: 'marowak',\n  402: 'mareanie',\n  403: 'marshadow',\n  404: 'marshtomp',\n  405: 'mareep',\n  406: 'masquerain',\n  407: 'mawile',\n  408: 'marill',\n  409: 'medicham',\n  410: 'murkrow',\n  411: 'natu',\n  412: 'muk',\n  413: 'munna',\n  414: 'mudsdale',\n  415: 'mudkip',\n  416: 'musharna',\n  417: 'naganadel',\n  418: 'munchlax',\n  419: 'mudbray',\n  420: 'mothim',\n  421: 'moltres',\n  422: 'misdreavus',\n  423: 'minior-meteor',\n  424: 'mr-mime',\n  425: 'morelull',\n  426: 'minun',\n  427: 'mismagius',\n  428: 'monferno',\n  429: 'minccino',\n  430: 'nidoking',\n  431: 'nidoran-f',\n  432: 'nidorino',\n  433: 'nidoqueen',\n  434: 'nidoran-m',\n  435: 'nincada',\n  436: 'ninetales',\n  437: 'nihilego',\n  438: 'nidorina',\n  439: 'necrozma',\n  440: 'oricorio-baile',\n  441: 'pancham',\n  442: 'oshawott',\n  443: 'pachirisu',\n  444: 'onix',\n  445: 'oranguru',\n  446: 'palkia',\n  447: 'palossand',\n  448: 'omastar',\n  449: 'palpitoad',\n  450: 'noivern',\n  451: 'octillery',\n  452: 'nosepass',\n  453: 'noibat',\n  454: 'oddish',\n  455: 'numel',\n  456: 'noctowl',\n  457: 'omanyte',\n  458: 'nuzleaf',\n  459: 'ninjask',\n  460: 'pheromosa',\n  461: 'pidgeot',\n  462: 'phione',\n  463: 'petilil',\n  464: 'phantump',\n  465: 'pichu',\n  466: 'pidgeotto',\n  467: 'phanpy',\n  468: 'pidgey',\n  469: 'patrat',\n  470: 'panpour',\n  471: 'pansear',\n  472: 'passimian',\n  473: 'pansage',\n  474: 'pawniard',\n  475: 'paras',\n  476: 'pelipper',\n  477: 'parasect',\n  478: 'persian',\n  479: 'pangoro',\n  480: 'poliwrath',\n  481: 'popplio',\n  482: 'poliwhirl',\n  483: 'poliwag',\n  484: 'porygon2',\n  485: 'ponyta',\n  486: 'porygon-z',\n  487: 'porygon',\n  488: 'poochyena',\n  489: 'politoed',\n  490: 'piplup',\n  491: 'pineco',\n  492: 'pinsir',\n  493: 'pignite',\n  494: 'plusle',\n  495: 'piloswine',\n  496: 'poipole',\n  497: 'pidove',\n  498: 'pikipek',\n  499: 'pikachu',\n  500: 'pyukumuku',\n  501: 'pyroar',\n  502: 'psyduck',\n  503: 'probopass',\n  504: 'pupitar',\n  505: 'prinplup',\n  506: 'purrloin',\n  507: 'primeape',\n  508: 'pumpkaboo-average',\n  509: 'purugly',\n  510: 'primarina',\n  511: 'reshiram',\n  512: 'remoraid',\n  513: 'relicanth',\n  514: 'rayquaza',\n  515: 'regice',\n  516: 'regigigas',\n  517: 'rattata',\n  518: 'registeel',\n  519: 'regirock',\n  520: 'raticate',\n  521: 'raikou',\n  522: 'raichu',\n  523: 'ralts',\n  524: 'quagsire',\n  525: 'rampardos',\n  526: 'rapidash',\n  527: 'qwilfish',\n  528: 'quilladin',\n  529: 'quilava',\n  530: 'sableye',\n  531: 'salandit',\n  532: 'salamence',\n  533: 'rufflet',\n  534: 'rowlet',\n  535: 'sandshrew',\n  536: 'salazzle',\n  537: 'sandile',\n  538: 'samurott',\n  539: 'rotom',\n  540: 'rhyhorn',\n  541: 'riolu',\n  542: 'rhyperior',\n  543: 'rockruff',\n  544: 'roselia',\n  545: 'roserade',\n  546: 'roggenrola',\n  547: 'ribombee',\n  548: 'rhydon',\n  549: 'reuniclus',\n  550: 'seismitoad',\n  551: 'sealeo',\n  552: 'serperior',\n  553: 'seel',\n  554: 'seaking',\n  555: 'servine',\n  556: 'seadra',\n  557: 'sentret',\n  558: 'seedot',\n  559: 'scyther',\n  560: 'sandygast',\n  561: 'scrafty',\n  562: 'scolipede',\n  563: 'scizor',\n  564: 'scraggy',\n  565: 'sceptile',\n  566: 'sawsbuck',\n  567: 'sawk',\n  568: 'scatterbug',\n  569: 'sandslash',\n  570: 'shroomish',\n  571: 'sigilyph',\n  572: 'shuckle',\n  573: 'simipour',\n  574: 'shiftry',\n  575: 'silvally',\n  576: 'shuppet',\n  577: 'silcoon',\n  578: 'shinx',\n  579: 'shiinotic',\n  580: 'sewaddle',\n  581: 'shelmet',\n  582: 'sharpedo',\n  583: 'shedinja',\n  584: 'shelgon',\n  585: 'shieldon',\n  586: 'shellos',\n  587: 'shellder',\n  588: 'shaymin-land',\n  589: 'seviper',\n  590: 'slugma',\n  591: 'smeargle',\n  592: 'slowpoke',\n  593: 'smoochum',\n  594: 'sneasel',\n  595: 'slurpuff',\n  596: 'slowking',\n  597: 'slowbro',\n  598: 'sliggoo',\n  599: 'slakoth',\n  600: 'skarmory',\n  601: 'skrelp',\n  602: 'skitty',\n  603: 'skiploom',\n  604: 'skiddo',\n  605: 'skorupi',\n  606: 'skuntank',\n  607: 'slaking',\n  608: 'simisear',\n  609: 'simisage',\n  610: 'spinda',\n  611: 'stakataka',\n  612: 'spinarak',\n  613: 'spoink',\n  614: 'staraptor',\n  615: 'stantler',\n  616: 'spritzee',\n  617: 'spiritomb',\n  618: 'squirtle',\n  619: 'spheal',\n  620: 'spearow',\n  621: 'spewpa',\n  622: 'snorunt',\n  623: 'solgaleo',\n  624: 'solosis',\n  625: 'snorlax',\n  626: 'snover',\n  627: 'snubbull',\n  628: 'solrock',\n  629: 'snivy',\n  630: 'swablu',\n  631: 'swanna',\n  632: 'swampert',\n  633: 'sunflora',\n  634: 'surskit',\n  635: 'swalot',\n  636: 'swadloon',\n  637: 'suicune',\n  638: 'sunkern',\n  639: 'sudowoodo',\n  640: 'stufful',\n  641: 'stunky',\n  642: 'stunfisk',\n  643: 'starmie',\n  644: 'steelix',\n  645: 'stoutland',\n  646: 'starly',\n  647: 'steenee',\n  648: 'staryu',\n  649: 'staravia',\n  650: 'tornadus-incarnate',\n  651: 'torchic',\n  652: 'tirtouga',\n  653: 'torkoal',\n  654: 'togedemaru',\n  655: 'togetic',\n  656: 'timburr',\n  657: 'togekiss',\n  658: 'togepi',\n  659: 'thundurus-incarnate',\n  660: 'tentacool',\n  661: 'tentacruel',\n  662: 'tapu-lele',\n  663: 'teddiursa',\n  664: 'tepig',\n  665: 'throh',\n  666: 'tauros',\n  667: 'tapu-koko',\n  668: 'terrakion',\n  669: 'tapu-fini',\n  670: 'tangela',\n  671: 'tapu-bulu',\n  672: 'swinub',\n  673: 'tangrowth',\n  674: 'swoobat',\n  675: 'sylveon',\n  676: 'swirlix',\n  677: 'taillow',\n  678: 'talonflame',\n  679: 'swellow',\n  680: 'tynamo',\n  681: 'tsareena',\n  682: 'type-null',\n  683: 'typhlosion',\n  684: 'turtonator',\n  685: 'trubbish',\n  686: 'trumbeak',\n  687: 'tympole',\n  688: 'turtwig',\n  689: 'tropius',\n  690: 'toxicroak',\n  691: 'trapinch',\n  692: 'trevenant',\n  693: 'totodile',\n  694: 'torterra',\n  695: 'toucannon',\n  696: 'tranquill',\n  697: 'toxapex',\n  698: 'treecko',\n  699: 'torracat',\n  700: 'venomoth',\n  701: 'venonat',\n  702: 'vibrava',\n  703: 'vanilluxe',\n  704: 'victini',\n  705: 'vaporeon',\n  706: 'vespiquen',\n  707: 'venipede',\n  708: 'venusaur',\n  709: 'vanillite',\n  710: 'vanillish',\n  711: 'ursaring',\n  712: 'tyrogue',\n  713: 'umbreon',\n  714: 'unfezant',\n  715: 'uxie',\n  716: 'unown',\n  717: 'tyrunt',\n  718: 'tyrantrum',\n  719: 'tyranitar',\n  720: 'wartortle',\n  721: 'weepinbell',\n  722: 'watchog',\n  723: 'vulpix',\n  724: 'wailord',\n  725: 'weavile',\n  726: 'weedle',\n  727: 'walrein',\n  728: 'wailmer',\n  729: 'vullaby',\n  730: 'vivillon',\n  731: 'voltorb',\n  732: 'volbeat',\n  733: 'vigoroth',\n  734: 'virizion',\n  735: 'vikavolt',\n  736: 'volcarona',\n  737: 'vileplume',\n  738: 'volcanion',\n  739: 'victreebel',\n  740: 'wooper',\n  741: 'wynaut',\n  742: 'xurkitree',\n  743: 'yamask',\n  744: 'xatu',\n  745: 'xerneas',\n  746: 'wormadam-plant',\n  747: 'wurmple',\n  748: 'yanma',\n  749: 'woobat',\n  750: 'whimsicott',\n  751: 'wigglytuff',\n  752: 'wimpod',\n  753: 'whiscash',\n  754: 'wobbuffet',\n  755: 'wingull',\n  756: 'wishiwashi-solo',\n  757: 'whismur',\n  758: 'whirlipede',\n  759: 'weezing',\n  760: 'zweilous',\n  761: 'absol',\n  762: 'abra',\n  763: 'zygarde-50',\n  764: 'abomasnow',\n  765: 'aegislash-blade',\n  766: 'accelgor',\n  767: 'zubat',\n  768: 'aerodactyl',\n  769: 'zorua',\n  770: 'zoroark',\n  771: 'zigzagoon',\n  772: 'yveltal',\n  773: 'zekrom',\n  774: 'zapdos',\n  775: 'zeraora',\n  776: 'zangoose',\n  777: 'zebstrika',\n  778: 'yungoos',\n  779: 'yanmega',\n  780: 'azurill',\n  781: 'aurorus',\n  782: 'bagon',\n  783: 'azumarill',\n  784: 'axew',\n  785: 'avalugg',\n  786: 'azelf',\n  787: 'audino',\n  788: 'articuno',\n  789: 'aron',\n  790: 'aromatisse',\n  791: 'ariados',\n  792: 'archeops',\n  793: 'armaldo',\n  794: 'archen',\n  795: 'arceus',\n  796: 'arcanine',\n  797: 'araquanid',\n  798: 'arbok',\n  799: 'ambipom',\n  800: 'anorith',\n  801: 'aggron',\n  802: 'alakazam',\n  803: 'altaria',\n  804: 'ampharos',\n  805: 'alomomola',\n  806: 'amoonguss',\n  807: 'amaura',\n  808: 'aipom'\n};\nvar Upload = function Upload() {\n  // usestate for setting a javascript\n  // object for storing and using data\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    file = _useState2[0],\n    setFile = _useState2[1]; //   const [model, setModel] = useState(null);\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    processing = _useState4[0],\n    setProcessing = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    topkPredNames = _useState6[0],\n    setPrediction = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    imageLoaded = _useState8[0],\n    setImageLoaded = _useState8[1];\n  var _useState9 = useState([]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    allpokemon = _useState10[0],\n    setAllpoke = _useState10[1];\n  var _useState11 = useState(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    model = _useState12[0],\n    setModel = _useState12[1];\n  function readImage(file) {\n    // try{\n    return new Promise(function (rs, rj) {\n      var fileReader = new FileReader();\n      fileReader.onload = function () {\n        return rs(fileReader.result);\n      };\n      fileReader.onerror = function () {\n        return rj(fileReader.error);\n      };\n      if (!file) {\n        window.location.reload(false);\n      }\n      fileReader.readAsDataURL(file);\n    });\n  }\n  function createpoke(result) {\n    console.log(\"here\");\n    console.log(result);\n    console.log(\"here1\");\n    result.forEach( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(pokemon) {\n        var res, data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(pokemon);\n                _context.next = 3;\n                return fetch(\"https://pokeapi.co/api/v2/pokemon/\".concat(pokemon));\n              case 3:\n                res = _context.sent;\n                _context.next = 6;\n                return res.json();\n              case 6:\n                data = _context.sent;\n                console.log(\"lol\");\n                console.log(data);\n                // allpokemon.push(data)\n                setAllpoke(function (currentList) {\n                  return [].concat(_toConsumableArray(currentList), [data]);\n                });\n\n                // allpokemon.sort((a, b) => a.id - b.id)\n                console.log(\"lolol\");\n                console.log(allpokemon);\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  function handleImgUpload(_x2) {\n    return _handleImgUpload.apply(this, arguments);\n  }\n  function _handleImgUpload() {\n    _handleImgUpload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(event) {\n      var files, _file, fileData;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              setAllpoke([]);\n              setProcessing(true);\n              files = event.target.files;\n              _file = files[0];\n              _context5.next = 6;\n              return readImage(_file);\n            case 6:\n              fileData = _context5.sent;\n              setFile(fileData);\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleImgUpload.apply(this, arguments);\n  }\n  var MODEL_HTTP_URL = \"api/pokeml/classify\";\n  var MODEL_INDEXEDDB_URL = \"indexeddb://poke-model\";\n  var getTopKPred = function getTopKPred(pred, k) {\n    var predIdx = [];\n    var predNames = [];\n    var topkPred = _toConsumableArray(pred).sort(function (a, b) {\n      return b - a;\n    }).slice(0, k);\n    // console.log(\"hh\");\n    console.log(topkPred);\n    topkPred.map(function (i) {\n      return predIdx.push(pred.indexOf(i));\n    });\n    console.log(\"k\");\n    console.log(predIdx);\n    // console.log(idx2class1)\n    predIdx.map(function (i) {\n      return predNames.push(idx2class1[i]);\n    });\n    // console.log(predNames);\n    return predNames;\n  };\n  var getTopKPredPokeObj = function getTopKPredPokeObj(pred, k) {\n    var predPokeName = getTopKPred(pred, k);\n    console.log(predPokeName);\n    return predPokeName;\n  };\n  useEffect(function () {\n    function fetchModel() {\n      return _fetchModel.apply(this, arguments);\n    }\n    function _fetchModel() {\n      _fetchModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var localClassifierModel, classifierModel;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return tf.loadLayersModel(MODEL_INDEXEDDB_URL);\n              case 3:\n                localClassifierModel = _context2.sent;\n                setModel(localClassifierModel);\n                console.log(\"Model loaded from IndexedDB\");\n                _context2.next = 25;\n                break;\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                _context2.prev = 10;\n                _context2.next = 13;\n                return tf.loadLayersModel(MODEL_HTTP_URL);\n              case 13:\n                classifierModel = _context2.sent;\n                console.log(classifierModel);\n                setModel(classifierModel);\n                console.log(\"Model Loaded\");\n                _context2.next = 19;\n                return classifierModel.save(MODEL_INDEXEDDB_URL);\n              case 19:\n                console.log(\"Model saved to IndexedDB\");\n                _context2.next = 25;\n                break;\n              case 22:\n                _context2.prev = 22;\n                _context2.t1 = _context2[\"catch\"](10);\n                console.log(\"Unable to load model at all: \", _context2.t1);\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 8], [10, 22]]);\n      }));\n      return _fetchModel.apply(this, arguments);\n    }\n    fetchModel();\n  }, []);\n  useEffect(function () {\n    function predict() {\n      return _predict.apply(this, arguments);\n    }\n    function _predict() {\n      _predict = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var imageElement;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (imageLoaded && file) {\n                  imageElement = document.createElement(\"img\");\n                  imageElement.src = file;\n                  imageElement.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                    var tensor, y_pred, topkPredNames;\n                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            tensor = tf.browser.fromPixels(imageElement).resizeNearestNeighbor([120, 120]).toFloat().sub(127).div(127).expandDims();\n                            _context3.next = 3;\n                            return model.predict(tensor).data();\n                          case 3:\n                            y_pred = _context3.sent;\n                            // console.log(y_pred);\n                            // console.log(pokemonState);\n                            topkPredNames = getTopKPredPokeObj(y_pred, 3); //   dispatch(setePredictions({ predictions: topkPredNames }));\n                            setPrediction(topkPredNames);\n                            _context3.next = 8;\n                            return createpoke(topkPredNames);\n                          case 8:\n                            console.log(topkPredNames);\n                            // console.log(\"hh\")\n                            console.log(\"-----------\");\n                            //   console.log(prediction);\n                            setProcessing(false);\n                            setImageLoaded(false);\n                            return _context3.abrupt(\"return\", topkPredNames);\n                          case 13:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n                }\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      return _predict.apply(this, arguments);\n    }\n    predict();\n  }, [imageLoaded, model, file]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loginContainer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"Form\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"upload-image\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, \"Upload image\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"image-selector\",\n    type: \"file\",\n    name: \"upload-image\",\n    accept: \"image/*\",\n    onChange: handleImgUpload,\n    disabled: !model || processing,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    onLoad: function onLoad() {\n      setImageLoaded(true);\n    },\n    alt: \"\",\n    src: file,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, processing ? /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, \"Loading ...\") : topkPredNames !== null ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }, allpokemon && allpokemon.map(function (pokemonStats, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Thumb, {\n      key: index,\n      id: pokemonStats.id,\n      image: pokemonStats.sprites.other.dream_world.front_default,\n      name: pokemonStats.name,\n      type: pokemonStats.types[0].type.name,\n      base_experience: pokemonStats.base_experience,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    }));\n  })) : null));\n};\nexport default Upload;","map":{"version":3,"names":["tf","React","useState","useEffect","Thumb","idx2class1","Upload","file","setFile","processing","setProcessing","topkPredNames","setPrediction","imageLoaded","setImageLoaded","allpokemon","setAllpoke","model","setModel","readImage","Promise","rs","rj","fileReader","FileReader","onload","result","onerror","error","window","location","reload","readAsDataURL","createpoke","console","log","forEach","pokemon","fetch","res","json","data","currentList","handleImgUpload","event","files","target","_file","fileData","MODEL_HTTP_URL","MODEL_INDEXEDDB_URL","getTopKPred","pred","k","predIdx","predNames","topkPred","sort","a","b","slice","map","i","push","indexOf","getTopKPredPokeObj","predPokeName","fetchModel","loadLayersModel","localClassifierModel","classifierModel","save","predict","imageElement","document","createElement","src","tensor","browser","fromPixels","resizeNearestNeighbor","toFloat","sub","div","expandDims","y_pred","pokemonStats","index","id","sprites","other","dream_world","front_default","name","types","type","base_experience"],"sources":["C:/Users/Rohith/mern/frontend/src/screens/upload/Upload.js"],"sourcesContent":["import * as tf from \"@tensorflow/tfjs\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Thumb from '../../components/Thumb'\r\n// import NavBar from \"./Navbar.js\";\r\n//import \"./App.css\";\r\nconst idx2class1={0: 'baltoy', 1: 'braviary', 2: 'bronzor', 3: 'breloom', 4: 'bronzong', 5: 'budew', 6: 'buneary', 7: 'bruxish', 8: 'bulbasaur', 9: 'buizel', 10: 'brionne', 11: 'blitzle', 12: 'blissey', 13: 'bounsweet', 14: 'bouffalant', 15: 'boldore', 16: 'bonsly', 17: 'braixen', 18: 'blaziken', 19: 'blacephalon', 20: 'blastoise', 21: 'bergmite', 22: 'bellossom', 23: 'bewear', 24: 'bellsprout', 25: 'beldum', 26: 'bidoof', 27: 'bisharp', 28: 'bibarel', 29: 'binacle', 30: 'beheeyem', 31: 'beartic', 32: 'bastiodon', 33: 'barbaracle', 34: 'banette', 35: 'basculin-red-striped', 36: 'bayleef', 37: 'beautifly', 38: 'beedrill', 39: 'barboach', 40: 'chatot', 41: 'charmander', 42: 'celesteela', 43: 'cascoon', 44: 'chansey', 45: 'charjabug', 46: 'castform', 47: 'charizard', 48: 'caterpie', 49: 'chandelure', 50: 'celebi', 51: 'camerupt', 52: 'butterfree', 53: 'burmy', 54: 'cacturne', 55: 'carnivine', 56: 'cacnea', 57: 'carracosta', 58: 'carbink', 59: 'carvanha', 60: 'buzzwole', 61: 'bunnelby', 62: 'cosmog', 63: 'cofagrigus', 64: 'combee', 65: 'combusken', 66: 'cobalion', 67: 'conkeldurr', 68: 'corphish', 69: 'comfey', 70: 'corsola', 71: 'cosmoem', 72: 'cloyster', 73: 'claydol', 74: 'cleffa', 75: 'chingling', 76: 'clauncher', 77: 'clamperl', 78: 'clefairy', 79: 'cinccino', 80: 'clefable', 81: 'clawitzer', 82: 'chinchou', 83: 'cherubi', 84: 'chikorita', 85: 'cherrim', 86: 'chesnaught', 87: 'chimecho', 88: 'charmeleon', 89: 'chimchar', 90: 'chespin', 91: 'dewgong', 92: 'deino', 93: 'delcatty', 94: 'delphox', 95: 'deerling', 96: 'decidueye', 97: 'deoxys-normal', 98: 'dedenne', 99: 'delibird', 100: 'darumaka', 101: 'darmanitan-standard', 102: 'cryogonal', 103: 'crustle', 104: 'darkrai', 105: 'cubchoo', 106: 'cubone', 107: 'cutiefly', 108: 'cyndaquil', 109: 'dartrix', 110: 'croconaw', 111: 'crobat', 112: 'croagunk', 113: 'cranidos', 114: 'cresselia', 115: 'crabrawler', 116: 'cottonee', 117: 'cradily', 118: 'crabominable', 119: 'crawdaunt', 120: 'ducklett', 121: 'durant', 122: 'druddigon', 123: 'drowzee', 124: 'dusknoir', 125: 'dugtrio', 126: 'duosion', 127: 'dunsparce', 128: 'dusclops', 129: 'drilbur', 130: 'dratini', 131: 'drifblim', 132: 'dragonair', 133: 'drapion', 134: 'dragalge', 135: 'drampa', 136: 'doublade', 137: 'dragonite', 138: 'drifloon', 139: 'donphan', 140: 'dewpider', 141: 'dhelmise', 142: 'diancie', 143: 'doduo', 144: 'dialga', 145: 'diglett', 146: 'diggersby', 147: 'ditto', 148: 'dodrio', 149: 'dewott', 150: 'excadrill', 151: 'espurr', 152: 'elekid', 153: 'empoleon', 154: 'emolga', 155: 'escavalier', 156: 'espeon', 157: 'elgyem', 158: 'emboar', 159: 'entei', 160: 'electrode', 161: 'dwebble', 162: 'ekans', 163: 'dustox', 164: 'eevee', 165: 'eelektross', 166: 'electabuzz', 167: 'electrike', 168: 'eelektrik', 169: 'electivire', 170: 'duskull', 171: 'fomantis', 172: 'furfrou', 173: 'froakie', 174: 'forretress', 175: 'frogadier', 176: 'foongus', 177: 'fraxure', 178: 'froslass', 179: 'frillish', 180: 'flygon', 181: 'fletchling', 182: 'floatzel', 183: 'flaaffy', 184: 'finneon', 185: 'flareon', 186: 'flabebe', 187: 'florges', 188: 'floette', 189: 'fletchinder', 190: 'ferrothorn', 191: 'farfetchd', 192: 'fennekin', 193: 'exploud', 194: 'ferroseed', 195: 'feraligatr', 196: 'exeggcute', 197: 'feebas', 198: 'exeggutor', 199: 'fearow', 200: 'gliscor', 201: 'girafarig', 202: 'geodude', 203: 'giratina-altered', 204: 'gible', 205: 'glalie', 206: 'gligar', 207: 'glameow', 208: 'gigalith', 209: 'glaceon', 210: 'gengar', 211: 'garchomp', 212: 'gabite', 213: 'garbodor', 214: 'galvantula', 215: 'gastly', 216: 'genesect', 217: 'gastrodon', 218: 'gallade', 219: 'gardevoir', 220: 'furret', 221: 'grubbin', 222: 'growlithe', 223: 'gulpin', 224: 'grumpig', 225: 'groudon', 226: 'grovyle', 227: 'grotle', 228: 'gumshoos', 229: 'gurdurr', 230: 'grimer', 231: 'gothitelle', 232: 'graveler', 233: 'gothorita', 234: 'granbull', 235: 'gourgeist-average', 236: 'goodra', 237: 'greninja', 238: 'gothita', 239: 'gorebyss', 240: 'goomy', 241: 'golurk', 242: 'golbat', 243: 'gloom', 244: 'gogoat', 245: 'golett', 246: 'golisopod', 247: 'golduck', 248: 'golem', 249: 'goldeen', 250: 'helioptile', 251: 'hitmonlee', 252: 'hippopotas', 253: 'hitmonchan', 254: 'honchkrow', 255: 'hitmontop', 256: 'hippowdon', 257: 'heracross', 258: 'herdier', 259: 'heliolisk', 260: 'heatran', 261: 'happiny', 262: 'hariyama', 263: 'hawlucha', 264: 'heatmor', 265: 'haunter', 266: 'gyarados', 267: 'hakamo-o', 268: 'haxorus', 269: 'guzzlord', 270: 'hypno', 271: 'hoppip', 272: 'hoothoot', 273: 'honedge', 274: 'huntail', 275: 'hoopa-confined', 276: 'hydreigon', 277: 'houndour', 278: 'horsea', 279: 'houndoom', 280: 'ho-oh', 281: 'kingdra', 282: 'kecleon', 283: 'kartana', 284: 'kingler', 285: 'kirlia', 286: 'klefki', 287: 'keldeo-ordinary', 288: 'klang', 289: 'klink', 290: 'karrablast', 291: 'jynx', 292: 'kangaskhan', 293: 'jumpluff', 294: 'kabutops', 295: 'kadabra', 296: 'kabuto', 297: 'joltik', 298: 'jirachi', 299: 'kakuna', 300: 'jolteon', 301: 'jangmo-o', 302: 'infernape', 303: 'jellicent', 304: 'illumise', 305: 'ivysaur', 306: 'incineroar', 307: 'igglybuff', 308: 'jigglypuff', 309: 'inkay', 310: 'liepard', 311: 'lilligant', 312: 'lickitung', 313: 'lillipup', 314: 'lickilicky', 315: 'lileep', 316: 'ledyba', 317: 'ledian', 318: 'leavanny', 319: 'leafeon', 320: 'larvesta', 321: 'latios', 322: 'lapras', 323: 'lampent', 324: 'lairon', 325: 'larvitar', 326: 'latias', 327: 'lanturn', 328: 'landorus-incarnate', 329: 'kyurem', 330: 'komala', 331: 'kyogre', 332: 'kommo-o', 333: 'krabby', 334: 'kricketot', 335: 'krookodile', 336: 'krokorok', 337: 'kricketune', 338: 'koffing', 339: 'klinklang', 340: 'lunala', 341: 'lunatone', 342: 'luxray', 343: 'luvdisc', 344: 'lurantis', 345: 'machamp', 346: 'luxio', 347: 'lumineon', 348: 'lycanroc-midday', 349: 'lugia', 350: 'lombre', 351: 'ludicolo', 352: 'lotad', 353: 'loudred', 354: 'lopunny', 355: 'litwick', 356: 'lucario', 357: 'litleo', 358: 'litten', 359: 'linoone', 360: 'maractus', 361: 'mantyke', 362: 'makuhita', 363: 'mamoswine', 364: 'mankey', 365: 'manaphy', 366: 'mandibuzz', 367: 'mantine', 368: 'manectric', 369: 'malamar', 370: 'magnezone', 371: 'machop', 372: 'magby', 373: 'magcargo', 374: 'magneton', 375: 'magmar', 376: 'magmortar', 377: 'magnemite', 378: 'magikarp', 379: 'magearna', 380: 'machoke', 381: 'miltank', 382: 'mime-jr', 383: 'milotic', 384: 'mienshao', 385: 'mewtwo', 386: 'mienfoo', 387: 'mimikyu', 388: 'mew', 389: 'mightyena', 390: 'metapod', 391: 'metang', 392: 'meowth', 393: 'meltan', 394: 'meowstic-male', 395: 'meganium', 396: 'metagross', 397: 'mesprit', 398: 'melmetal', 399: 'meloetta-aria', 400: 'meditite', 401: 'marowak', 402: 'mareanie', 403: 'marshadow', 404: 'marshtomp', 405: 'mareep', 406: 'masquerain', 407: 'mawile', 408: 'marill', 409: 'medicham', 410: 'murkrow', 411: 'natu', 412: 'muk', 413: 'munna', 414: 'mudsdale', 415: 'mudkip', 416: 'musharna', 417: 'naganadel', 418: 'munchlax', 419: 'mudbray', 420: 'mothim', 421: 'moltres', 422: 'misdreavus', 423: 'minior-meteor', 424: 'mr-mime', 425: 'morelull', 426: 'minun', 427: 'mismagius', 428: 'monferno', 429: 'minccino', 430: 'nidoking', 431: 'nidoran-f', 432: 'nidorino', 433: 'nidoqueen', 434: 'nidoran-m', 435: 'nincada', 436: 'ninetales', 437: 'nihilego', 438: 'nidorina', 439: 'necrozma', 440: 'oricorio-baile', 441: 'pancham', 442: 'oshawott', 443: 'pachirisu', 444: 'onix', 445: 'oranguru', 446: 'palkia', 447: 'palossand', 448: 'omastar', 449: 'palpitoad', 450: 'noivern', 451: 'octillery', 452: 'nosepass', 453: 'noibat', 454: 'oddish', 455: 'numel', 456: 'noctowl', 457: 'omanyte', 458: 'nuzleaf', 459: 'ninjask', 460: 'pheromosa', 461: 'pidgeot', 462: 'phione', 463: 'petilil', 464: 'phantump', 465: 'pichu', 466: 'pidgeotto', 467: 'phanpy', 468: 'pidgey', 469: 'patrat', 470: 'panpour', 471: 'pansear', 472: 'passimian', 473: 'pansage', 474: 'pawniard', 475: 'paras', 476: 'pelipper', 477: 'parasect', 478: 'persian', 479: 'pangoro', 480: 'poliwrath', 481: 'popplio', 482: 'poliwhirl', 483: 'poliwag', 484: 'porygon2', 485: 'ponyta', 486: 'porygon-z', 487: 'porygon', 488: 'poochyena', 489: 'politoed', 490: 'piplup', 491: 'pineco', 492: 'pinsir', 493: 'pignite', 494: 'plusle', 495: 'piloswine', 496: 'poipole', 497: 'pidove', 498: 'pikipek', 499: 'pikachu', 500: 'pyukumuku', 501: 'pyroar', 502: 'psyduck', 503: 'probopass', 504: 'pupitar', 505: 'prinplup', 506: 'purrloin', 507: 'primeape', 508: 'pumpkaboo-average', 509: 'purugly', 510: 'primarina', 511: 'reshiram', 512: 'remoraid', 513: 'relicanth', 514: 'rayquaza', 515: 'regice', 516: 'regigigas', 517: 'rattata', 518: 'registeel', 519: 'regirock', 520: 'raticate', 521: 'raikou', 522: 'raichu', 523: 'ralts', 524: 'quagsire', 525: 'rampardos', 526: 'rapidash', 527: 'qwilfish', 528: 'quilladin', 529: 'quilava', 530: 'sableye', 531: 'salandit', 532: 'salamence', 533: 'rufflet', 534: 'rowlet', 535: 'sandshrew', 536: 'salazzle', 537: 'sandile', 538: 'samurott', 539: 'rotom', 540: 'rhyhorn', 541: 'riolu', 542: 'rhyperior', 543: 'rockruff', 544: 'roselia', 545: 'roserade', 546: 'roggenrola', 547: 'ribombee', 548: 'rhydon', 549: 'reuniclus', 550: 'seismitoad', 551: 'sealeo', 552: 'serperior', 553: 'seel', 554: 'seaking', 555: 'servine', 556: 'seadra', 557: 'sentret', 558: 'seedot', 559: 'scyther', 560: 'sandygast', 561: 'scrafty', 562: 'scolipede', 563: 'scizor', 564: 'scraggy', 565: 'sceptile', 566: 'sawsbuck', 567: 'sawk', 568: 'scatterbug', 569: 'sandslash', 570: 'shroomish', 571: 'sigilyph', 572: 'shuckle', 573: 'simipour', 574: 'shiftry', 575: 'silvally', 576: 'shuppet', 577: 'silcoon', 578: 'shinx', 579: 'shiinotic', 580: 'sewaddle', 581: 'shelmet', 582: 'sharpedo', 583: 'shedinja', 584: 'shelgon', 585: 'shieldon', 586: 'shellos', 587: 'shellder', 588: 'shaymin-land', 589: 'seviper', 590: 'slugma', 591: 'smeargle', 592: 'slowpoke', 593: 'smoochum', 594: 'sneasel', 595: 'slurpuff', 596: 'slowking', 597: 'slowbro', 598: 'sliggoo', 599: 'slakoth', 600: 'skarmory', 601: 'skrelp', 602: 'skitty', 603: 'skiploom', 604: 'skiddo', 605: 'skorupi', 606: 'skuntank', 607: 'slaking', 608: 'simisear', 609: 'simisage', 610: 'spinda', 611: 'stakataka', 612: 'spinarak', 613: 'spoink', 614: 'staraptor', 615: 'stantler', 616: 'spritzee', 617: 'spiritomb', 618: 'squirtle', 619: 'spheal', 620: 'spearow', 621: 'spewpa', 622: 'snorunt', 623: 'solgaleo', 624: 'solosis', 625: 'snorlax', 626: 'snover', 627: 'snubbull', 628: 'solrock', 629: 'snivy', 630: 'swablu', 631: 'swanna', 632: 'swampert', 633: 'sunflora', 634: 'surskit', 635: 'swalot', 636: 'swadloon', 637: 'suicune', 638: 'sunkern', 639: 'sudowoodo', 640: 'stufful', 641: 'stunky', 642: 'stunfisk', 643: 'starmie', 644: 'steelix', 645: 'stoutland', 646: 'starly', 647: 'steenee', 648: 'staryu', 649: 'staravia', 650: 'tornadus-incarnate', 651: 'torchic', 652: 'tirtouga', 653: 'torkoal', 654: 'togedemaru', 655: 'togetic', 656: 'timburr', 657: 'togekiss', 658: 'togepi', 659: 'thundurus-incarnate', 660: 'tentacool', 661: 'tentacruel', 662: 'tapu-lele', 663: 'teddiursa', 664: 'tepig', 665: 'throh', 666: 'tauros', 667: 'tapu-koko', 668: 'terrakion', 669: 'tapu-fini', 670: 'tangela', 671: 'tapu-bulu', 672: 'swinub', 673: 'tangrowth', 674: 'swoobat', 675: 'sylveon', 676: 'swirlix', 677: 'taillow', 678: 'talonflame', 679: 'swellow', 680: 'tynamo', 681: 'tsareena', 682: 'type-null', 683: 'typhlosion', 684: 'turtonator', 685: 'trubbish', 686: 'trumbeak', 687: 'tympole', 688: 'turtwig', 689: 'tropius', 690: 'toxicroak', 691: 'trapinch', 692: 'trevenant', 693: 'totodile', 694: 'torterra', 695: 'toucannon', 696: 'tranquill', 697: 'toxapex', 698: 'treecko', 699: 'torracat', 700: 'venomoth', 701: 'venonat', 702: 'vibrava', 703: 'vanilluxe', 704: 'victini', 705: 'vaporeon', 706: 'vespiquen', 707: 'venipede', 708: 'venusaur', 709: 'vanillite', 710: 'vanillish', 711: 'ursaring', 712: 'tyrogue', 713: 'umbreon', 714: 'unfezant', 715: 'uxie', 716: 'unown', 717: 'tyrunt', 718: 'tyrantrum', 719: 'tyranitar', 720: 'wartortle', 721: 'weepinbell', 722: 'watchog', 723: 'vulpix', 724: 'wailord', 725: 'weavile', 726: 'weedle', 727: 'walrein', 728: 'wailmer', 729: 'vullaby', 730: 'vivillon', 731: 'voltorb', 732: 'volbeat', 733: 'vigoroth', 734: 'virizion', 735: 'vikavolt', 736: 'volcarona', 737: 'vileplume', 738: 'volcanion', 739: 'victreebel', 740: 'wooper', 741: 'wynaut', 742: 'xurkitree', 743: 'yamask', 744: 'xatu', 745: 'xerneas', 746: 'wormadam-plant', 747: 'wurmple', 748: 'yanma', 749: 'woobat', 750: 'whimsicott', 751: 'wigglytuff', 752: 'wimpod', 753: 'whiscash', 754: 'wobbuffet', 755: 'wingull', 756: 'wishiwashi-solo', 757: 'whismur', 758: 'whirlipede', 759: 'weezing', 760: 'zweilous', 761: 'absol', 762: 'abra', 763: 'zygarde-50', 764: 'abomasnow', 765: 'aegislash-blade', 766: 'accelgor', 767: 'zubat', 768: 'aerodactyl', 769: 'zorua', 770: 'zoroark', 771: 'zigzagoon', 772: 'yveltal', 773: 'zekrom', 774: 'zapdos', 775: 'zeraora', 776: 'zangoose', 777: 'zebstrika', 778: 'yungoos', 779: 'yanmega', 780: 'azurill', 781: 'aurorus', 782: 'bagon', 783: 'azumarill', 784: 'axew', 785: 'avalugg', 786: 'azelf', 787: 'audino', 788: 'articuno', 789: 'aron', 790: 'aromatisse', 791: 'ariados', 792: 'archeops', 793: 'armaldo', 794: 'archen', 795: 'arceus', 796: 'arcanine', 797: 'araquanid', 798: 'arbok', 799: 'ambipom', 800: 'anorith', 801: 'aggron', 802: 'alakazam', 803: 'altaria', 804: 'ampharos', 805: 'alomomola', 806: 'amoonguss', 807: 'amaura', 808: 'aipom'}\r\n\r\nconst Upload = () => {\r\n  // usestate for setting a javascript\r\n  // object for storing and using data\r\n  const [file, setFile] = useState(null);\r\n  //   const [model, setModel] = useState(null);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [topkPredNames, setPrediction] = useState(null);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  const [allpokemon,setAllpoke]=useState([]);\r\n\r\n  const [model, setModel] = useState(null);\r\n  function readImage(file) {\r\n    // try{\r\n      return new Promise((rs, rj) => {\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = () => rs(fileReader.result);\r\n        fileReader.onerror = () => rj(fileReader.error);\r\n        if(!file){\r\n          window.location.reload(false);\r\n        }\r\n        fileReader.readAsDataURL(file);\r\n      });\r\n    \r\n   \r\n  }\r\n  function createpoke (result){\r\n    console.log(\"here\");\r\n    console.log(result)\r\n    console.log(\"here1\");\r\n    result.forEach( async(pokemon) => {\r\n      console.log(pokemon);\r\n      const res=await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemon}`)     \r\n      const data =await res.json()\r\n      console.log(\"lol\")\r\n      console.log(data);\r\n      // allpokemon.push(data)\r\n      setAllpoke(currentList=>[...currentList,data])\r\n      \r\n      // allpokemon.sort((a, b) => a.id - b.id)\r\n      console.log(\"lolol\")\r\n      console.log(allpokemon);\r\n    });\r\n  }\r\n  async function handleImgUpload(event) {\r\n    setAllpoke([]);\r\n    setProcessing(true);\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n\r\n    const _file = files[0];\r\n    const fileData = await readImage(_file);\r\n    setFile(fileData);\r\n\r\n  }\r\n\r\n  const MODEL_HTTP_URL = \"api/pokeml/classify\";\r\n  const MODEL_INDEXEDDB_URL = \"indexeddb://poke-model\";\r\n\r\n  const getTopKPred = (pred, k) => {\r\n    const predIdx = [];\r\n    const predNames = [];\r\n\r\n    const topkPred = [...pred].sort((a, b) => b - a).slice(0, k);\r\n    // console.log(\"hh\");\r\n    console.log(topkPred);\r\n    topkPred.map((i) => predIdx.push(pred.indexOf(i)));\r\n    console.log(\"k\");\r\n    console.log(predIdx)\r\n    // console.log(idx2class1)\r\n    predIdx.map((i) => predNames.push(idx2class1[i]));\r\n    // console.log(predNames);\r\n    return predNames;\r\n  };\r\n\r\n  const getTopKPredPokeObj = (pred, k) => {\r\n    const predPokeName = getTopKPred(pred, k);\r\n    console.log(predPokeName);\r\n\r\n    return predPokeName;\r\n  };\r\n  useEffect(() => {\r\n    async function fetchModel() {\r\n      try {\r\n        const localClassifierModel = await tf.loadLayersModel(\r\n          MODEL_INDEXEDDB_URL\r\n        );\r\n\r\n        setModel(localClassifierModel);\r\n        console.log(\"Model loaded from IndexedDB\");\r\n      } catch (e) {\r\n        try {\r\n          const classifierModel = await tf.loadLayersModel(MODEL_HTTP_URL);\r\n\r\n          console.log(classifierModel);\r\n          setModel(classifierModel);\r\n          console.log(\"Model Loaded\");\r\n          await classifierModel.save(MODEL_INDEXEDDB_URL);\r\n          console.log(\"Model saved to IndexedDB\");\r\n        } catch (e) {\r\n          console.log(\"Unable to load model at all: \", e);\r\n        }\r\n      }\r\n    }\r\n    fetchModel();\r\n  }, []);\r\n  useEffect(() => {\r\n    async function predict() {\r\n      if (imageLoaded && file) {\r\n        const imageElement = document.createElement(\"img\");\r\n        imageElement.src = file;\r\n\r\n        imageElement.onload = async () => {\r\n          const tensor = tf.browser\r\n            .fromPixels(imageElement)\r\n            .resizeNearestNeighbor([120, 120])\r\n            .toFloat()\r\n            .sub(127)\r\n            .div(127)\r\n            .expandDims();\r\n\r\n          const y_pred = await model.predict(tensor).data();\r\n            // console.log(y_pred);\r\n          // console.log(pokemonState);\r\n\r\n          const topkPredNames = getTopKPredPokeObj(y_pred, 3);\r\n\r\n          //   dispatch(setePredictions({ predictions: topkPredNames }));\r\n          setPrediction(topkPredNames);\r\n          await createpoke(topkPredNames);\r\n          console.log(topkPredNames);\r\n          // console.log(\"hh\")\r\n          console.log(\"-----------\");\r\n          //   console.log(prediction);\r\n          setProcessing(false);\r\n          setImageLoaded(false);\r\n          return topkPredNames;\r\n          //   setPrediction(parseInt(prediction, 10));\r\n        };\r\n      }\r\n    }\r\n\r\n    predict();\r\n  }, [imageLoaded, model, file]);\r\n\r\n  return (\r\n    <div className=\"loginContainer\">\r\n      <form className=\"Form\">\r\n        <label htmlFor=\"upload-image\">Upload image</label>\r\n        <br/>\r\n        <input id=\"image-selector\"\r\n          type=\"file\"\r\n          name=\"upload-image\"\r\n          accept=\"image/*\"\r\n          onChange={handleImgUpload}\r\n          disabled={!model || processing}/>\r\n      </form>\r\n      <div>\r\n        <img\r\n          onLoad={() => {\r\n            setImageLoaded(true);\r\n          }}\r\n          alt=\"\"\r\n          src={file}\r\n        />\r\n      </div>\r\n      <div>\r\n        {processing ? (\r\n          <h1>Loading ...</h1>\r\n        ) : topkPredNames !== null ? (\r\n          <div>\r\n            {allpokemon && allpokemon.map( (pokemonStats, index) => \r\n              <div>\r\n                <Thumb\r\n                key={index}\r\n                id={pokemonStats.id}\r\n                image={pokemonStats.sprites.other.dream_world.front_default}\r\n                name={pokemonStats.name}\r\n                type={pokemonStats.types[0].type.name}\r\n                base_experience={pokemonStats.base_experience}\r\n              />\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Upload;\r\n"],"mappings":"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AE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,YAAY;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,cAAc;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,YAAY;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,YAAY;EAAE,GAAG,EAAE,YAAY;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,YAAY;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EA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GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,mBAAmB;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,YAAY;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,YAAY;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,MAAM;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,MAAM;EAAE,GAAG,EAAE,YAAY;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,cAAc;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,WAAW;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,UAAU;EAAE,GAAG,EAAE,SAAS;EAAE,GAAG,EAAE,OAAO;EAAE,GAAG,EAAE,QAAQ;EAAE,GAAG,EAAE,QAAQ;EAA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"},"metadata":{},"sourceType":"module"}