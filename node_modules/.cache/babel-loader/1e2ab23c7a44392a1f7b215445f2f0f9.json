{"ast":null,"code":"/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\nconst PROJECT_DIR = process.env.PROJECT_DIR;\nconst JAKE_CMD = `${PROJECT_DIR}/bin/cli.js`;\n\nlet assert = require('assert');\n\nlet fs = require('fs');\n\nlet exec = require('child_process').execSync;\n\nlet {\n  rmRf\n} = require(`${PROJECT_DIR}/lib/jake`);\n\nlet cleanUpAndNext = function (callback) {\n  rmRf('./foo', {\n    silent: true\n  });\n  callback && callback();\n};\n\nsuite('fileTask', function () {\n  this.timeout(7000);\n  setup(function () {\n    cleanUpAndNext();\n  });\n  test('where a file-task prereq does not change with --always-make', function () {\n    let out;\n    out = exec(`${JAKE_CMD} -q fileTest:foo/from-src1.txt`).toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\nfileTest:foo/from-src1.txt task', out);\n    out = exec(`${JAKE_CMD} -q -B fileTest:foo/from-src1.txt`).toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\nfileTest:foo/from-src1.txt task', out);\n    cleanUpAndNext();\n  });\n  test('concating two files', function () {\n    let out;\n    out = exec(`${JAKE_CMD} -q fileTest:foo/concat.txt`).toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\ndefault task\\nfileTest:foo/src2.txt task\\n' + 'fileTest:foo/concat.txt task', out); // Check to see the two files got concat'd\n\n    let data = fs.readFileSync(process.cwd() + '/foo/concat.txt');\n    assert.equal('src1src2', data.toString());\n    cleanUpAndNext();\n  });\n  test('where a file-task prereq does not change', function () {\n    let out;\n    out = exec(`${JAKE_CMD} -q fileTest:foo/from-src1.txt`).toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\nfileTest:foo/from-src1.txt task', out);\n    out = exec(`${JAKE_CMD} -q fileTest:foo/from-src1.txt`).toString().trim(); // Second time should be a no-op\n\n    assert.equal('', out);\n    cleanUpAndNext();\n  });\n  test('where a file-task prereq does change, then does not', function (next) {\n    exec('mkdir -p ./foo');\n    exec('touch ./foo/from-src1.txt');\n    setTimeout(() => {\n      fs.writeFileSync('./foo/src1.txt', '-SRC'); // Task should run the first time\n\n      let out;\n      out = exec(`${JAKE_CMD} -q fileTest:foo/from-src1.txt`).toString().trim();\n      assert.equal('fileTest:foo/from-src1.txt task', out); // Task should not run on subsequent invocation\n\n      out = exec(`${JAKE_CMD} -q fileTest:foo/from-src1.txt`).toString().trim();\n      assert.equal('', out);\n      cleanUpAndNext(next);\n    }, 1000);\n  });\n  test('a preexisting file', function () {\n    let prereqData = 'howdy';\n    exec('mkdir -p ./foo');\n    fs.writeFileSync('foo/prereq.txt', prereqData);\n    let out;\n    out = exec(`${JAKE_CMD} -q fileTest:foo/from-prereq.txt`).toString().trim();\n    assert.equal('fileTest:foo/from-prereq.txt task', out);\n    let data = fs.readFileSync(process.cwd() + '/foo/from-prereq.txt');\n    assert.equal(prereqData, data.toString());\n    out = exec(`${JAKE_CMD} -q fileTest:foo/from-prereq.txt`).toString().trim(); // Second time should be a no-op\n\n    assert.equal('', out);\n    cleanUpAndNext();\n  });\n  test('a preexisting file with --always-make flag', function () {\n    let prereqData = 'howdy';\n    exec('mkdir -p ./foo');\n    fs.writeFileSync('foo/prereq.txt', prereqData);\n    let out;\n    out = exec(`${JAKE_CMD} -q fileTest:foo/from-prereq.txt`).toString().trim();\n    assert.equal('fileTest:foo/from-prereq.txt task', out);\n    let data = fs.readFileSync(process.cwd() + '/foo/from-prereq.txt');\n    assert.equal(prereqData, data.toString());\n    out = exec(`${JAKE_CMD} -q -B fileTest:foo/from-prereq.txt`).toString().trim();\n    assert.equal('fileTest:foo/from-prereq.txt task', out);\n    cleanUpAndNext();\n  });\n  test('nested directory-task', function () {\n    exec(`${JAKE_CMD} -q fileTest:foo/bar/baz/bamf.txt`);\n    let data = fs.readFileSync(process.cwd() + '/foo/bar/baz/bamf.txt');\n    assert.equal('w00t', data);\n    cleanUpAndNext();\n  });\n});","map":{"version":3,"names":["PROJECT_DIR","process","env","JAKE_CMD","assert","require","fs","exec","execSync","rmRf","cleanUpAndNext","callback","silent","suite","timeout","setup","test","out","toString","trim","equal","data","readFileSync","cwd","next","setTimeout","writeFileSync","prereqData"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jake/test/integration/file_task.js"],"sourcesContent":["/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\nconst PROJECT_DIR = process.env.PROJECT_DIR;\nconst JAKE_CMD = `${PROJECT_DIR}/bin/cli.js`;\n\nlet assert = require('assert');\nlet fs = require('fs');\nlet exec = require('child_process').execSync;\nlet { rmRf } = require(`${PROJECT_DIR}/lib/jake`);\n\nlet cleanUpAndNext = function (callback) {\n  rmRf('./foo', {\n    silent: true\n  });\n  callback && callback();\n};\n\nsuite('fileTask', function () {\n  this.timeout(7000);\n\n  setup(function () {\n    cleanUpAndNext();\n  });\n\n  test('where a file-task prereq does not change with --always-make', function () {\n    let out;\n    out = exec(`${JAKE_CMD} -q fileTest:foo/from-src1.txt`).toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\nfileTest:foo/from-src1.txt task',\n      out);\n    out = exec(`${JAKE_CMD} -q -B fileTest:foo/from-src1.txt`).toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\nfileTest:foo/from-src1.txt task',\n      out);\n    cleanUpAndNext();\n  });\n\n  test('concating two files', function () {\n    let out;\n    out = exec(`${JAKE_CMD} -q fileTest:foo/concat.txt`).toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\ndefault task\\nfileTest:foo/src2.txt task\\n' +\n          'fileTest:foo/concat.txt task', out);\n    // Check to see the two files got concat'd\n    let data = fs.readFileSync(process.cwd() + '/foo/concat.txt');\n    assert.equal('src1src2', data.toString());\n    cleanUpAndNext();\n  });\n\n  test('where a file-task prereq does not change', function () {\n    let out;\n    out = exec(`${JAKE_CMD} -q fileTest:foo/from-src1.txt`).toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\nfileTest:foo/from-src1.txt task', out);\n    out = exec(`${JAKE_CMD} -q fileTest:foo/from-src1.txt`).toString().trim();\n    // Second time should be a no-op\n    assert.equal('', out);\n    cleanUpAndNext();\n  });\n\n  test('where a file-task prereq does change, then does not', function (next) {\n    exec('mkdir -p ./foo');\n    exec('touch ./foo/from-src1.txt');\n    setTimeout(() => {\n      fs.writeFileSync('./foo/src1.txt', '-SRC');\n      // Task should run the first time\n      let out;\n      out = exec(`${JAKE_CMD} -q fileTest:foo/from-src1.txt`).toString().trim();\n      assert.equal('fileTest:foo/from-src1.txt task', out);\n      // Task should not run on subsequent invocation\n      out = exec(`${JAKE_CMD} -q fileTest:foo/from-src1.txt`).toString().trim();\n      assert.equal('', out);\n      cleanUpAndNext(next);\n    }, 1000);\n  });\n\n  test('a preexisting file', function () {\n    let prereqData = 'howdy';\n    exec('mkdir -p ./foo');\n    fs.writeFileSync('foo/prereq.txt', prereqData);\n    let out;\n    out = exec(`${JAKE_CMD} -q fileTest:foo/from-prereq.txt`).toString().trim();\n    assert.equal('fileTest:foo/from-prereq.txt task', out);\n    let data = fs.readFileSync(process.cwd() + '/foo/from-prereq.txt');\n    assert.equal(prereqData, data.toString());\n    out = exec(`${JAKE_CMD} -q fileTest:foo/from-prereq.txt`).toString().trim();\n    // Second time should be a no-op\n    assert.equal('', out);\n    cleanUpAndNext();\n  });\n\n  test('a preexisting file with --always-make flag', function () {\n    let prereqData = 'howdy';\n    exec('mkdir -p ./foo');\n    fs.writeFileSync('foo/prereq.txt', prereqData);\n    let out;\n    out = exec(`${JAKE_CMD} -q fileTest:foo/from-prereq.txt`).toString().trim();\n    assert.equal('fileTest:foo/from-prereq.txt task', out);\n    let data = fs.readFileSync(process.cwd() + '/foo/from-prereq.txt');\n    assert.equal(prereqData, data.toString());\n    out = exec(`${JAKE_CMD} -q -B fileTest:foo/from-prereq.txt`).toString().trim();\n    assert.equal('fileTest:foo/from-prereq.txt task', out);\n    cleanUpAndNext();\n  });\n\n  test('nested directory-task', function () {\n    exec(`${JAKE_CMD} -q fileTest:foo/bar/baz/bamf.txt`);\n    let data = fs.readFileSync(process.cwd() + '/foo/bar/baz/bamf.txt');\n    assert.equal('w00t', data);\n    cleanUpAndNext();\n  });\n\n});\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}