{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tsconfig_loader_1 = require(\"../tsconfig-loader\");\n\nvar path_1 = require(\"path\");\n\ndescribe(\"tsconfig-loader\", function () {\n  it(\"should find tsconfig in cwd\", function () {\n    var result = (0, tsconfig_loader_1.tsConfigLoader)({\n      cwd: \"/foo/bar\",\n      getEnv: function (_) {\n        return undefined;\n      },\n      loadSync: function (cwd) {\n        return {\n          tsConfigPath: \"\".concat(cwd, \"/tsconfig.json\"),\n          baseUrl: \"./\",\n          paths: {}\n        };\n      }\n    }); // assert.equal(result.tsConfigPath, \"/foo/bar/tsconfig.json\");\n\n    expect(result.tsConfigPath).toBe(\"/foo/bar/tsconfig.json\");\n  });\n  it(\"should return loaderResult.tsConfigPath as undefined when not found\", function () {\n    var result = (0, tsconfig_loader_1.tsConfigLoader)({\n      cwd: \"/foo/bar\",\n      getEnv: function (_) {\n        return undefined;\n      },\n      loadSync: function (_) {\n        return {\n          tsConfigPath: undefined,\n          baseUrl: \"./\",\n          paths: {}\n        };\n      }\n    }); // assert.isUndefined(result.tsConfigPath);\n\n    expect(result.tsConfigPath).toBeUndefined();\n  });\n  it(\"should use TS_NODE_PROJECT env if exists\", function () {\n    var result = (0, tsconfig_loader_1.tsConfigLoader)({\n      cwd: \"/foo/bar\",\n      getEnv: function (key) {\n        return key === \"TS_NODE_PROJECT\" ? \"/foo/baz\" : undefined;\n      },\n      loadSync: function (cwd, fileName) {\n        if (cwd === \"/foo/bar\" && fileName === \"/foo/baz\") {\n          return {\n            tsConfigPath: \"/foo/baz/tsconfig.json\",\n            baseUrl: \"./\",\n            paths: {}\n          };\n        }\n\n        return {\n          tsConfigPath: undefined,\n          baseUrl: \"./\",\n          paths: {}\n        };\n      }\n    }); // assert.equal(result.tsConfigPath, \"/foo/baz/tsconfig.json\");\n\n    expect(result.tsConfigPath).toBe(\"/foo/baz/tsconfig.json\");\n  });\n  it(\"should use TS_NODE_BASEURL env if exists\", function () {\n    var result = (0, tsconfig_loader_1.tsConfigLoader)({\n      cwd: \"/foo/bar\",\n      getEnv: function (key) {\n        return key === \"TS_NODE_BASEURL\" ? \"SOME_BASEURL\" : undefined;\n      },\n      loadSync: function (_0, _1, baseUrl) {\n        return {\n          tsConfigPath: undefined,\n          baseUrl: baseUrl,\n          paths: {}\n        };\n      }\n    }); // assert.equal(result.baseUrl, \"SOME_BASEURL\");\n\n    expect(result.baseUrl).toBe(\"SOME_BASEURL\");\n  });\n  it(\"should not use TS_NODE_BASEURL env if it does not exist\", function () {\n    var result = (0, tsconfig_loader_1.tsConfigLoader)({\n      cwd: \"/foo/bar\",\n      getEnv: function (_) {\n        return undefined;\n      },\n      loadSync: function (_0, _1, baseUrl) {\n        return {\n          tsConfigPath: undefined,\n          baseUrl: baseUrl,\n          paths: {}\n        };\n      }\n    }); // assert.equal(result.baseUrl, undefined);\n\n    expect(result.baseUrl).toBeUndefined();\n  });\n});\ndescribe(\"walkForTsConfig\", function () {\n  it(\"should find tsconfig in starting directory\", function () {\n    var pathToTsconfig = (0, path_1.join)(\"/root\", \"dir1\", \"tsconfig.json\");\n    var res = (0, tsconfig_loader_1.walkForTsConfig)((0, path_1.join)(\"/root\", \"dir1\"), function (path) {\n      return path === pathToTsconfig;\n    }); // assert.equal(res, pathToTsconfig);\n\n    expect(res).toBe(pathToTsconfig);\n  });\n  it(\"should find tsconfig in parent directory\", function () {\n    var pathToTsconfig = (0, path_1.join)(\"/root\", \"tsconfig.json\");\n    var res = (0, tsconfig_loader_1.walkForTsConfig)((0, path_1.join)(\"/root\", \"dir1\"), function (path) {\n      return path === pathToTsconfig;\n    }); // assert.equal(res, pathToTsconfig);\n\n    expect(res).toBe(pathToTsconfig);\n  });\n  it(\"should return undefined when reaching the top\", function () {\n    var res = (0, tsconfig_loader_1.walkForTsConfig)((0, path_1.join)(\"/root\", \"dir1\", \"kalle\"), function () {\n      return false;\n    }); // assert.equal(res, undefined);\n\n    expect(res).toBeUndefined();\n  });\n});\ndescribe(\"loadConfig\", function () {\n  it(\"It should load a config\", function () {\n    var config = {\n      compilerOptions: {\n        baseUrl: \"hej\"\n      }\n    };\n    var res = (0, tsconfig_loader_1.loadTsconfig)(\"/root/dir1/tsconfig.json\", function (path) {\n      return path === \"/root/dir1/tsconfig.json\";\n    }, function (_) {\n      return JSON.stringify(config);\n    }); // assert.deepEqual(res, config);\n\n    expect(res).toStrictEqual(config);\n  });\n  it(\"It should load a config with comments\", function () {\n    var config = {\n      compilerOptions: {\n        baseUrl: \"hej\"\n      }\n    };\n    var res = (0, tsconfig_loader_1.loadTsconfig)(\"/root/dir1/tsconfig.json\", function (path) {\n      return path === \"/root/dir1/tsconfig.json\";\n    }, function (_) {\n      return \"{\\n          // my comment\\n          \\\"compilerOptions\\\": { \\n            \\\"baseUrl\\\": \\\"hej\\\"\\n          }\\n        }\";\n    }); // assert.deepEqual(res, config);\n\n    expect(res).toStrictEqual(config);\n  });\n  it(\"It should load a config with trailing commas\", function () {\n    var config = {\n      compilerOptions: {\n        baseUrl: \"hej\"\n      }\n    };\n    var res = (0, tsconfig_loader_1.loadTsconfig)(\"/root/dir1/tsconfig.json\", function (path) {\n      return path === \"/root/dir1/tsconfig.json\";\n    }, function (_) {\n      return \"{\\n          \\\"compilerOptions\\\": { \\n            \\\"baseUrl\\\": \\\"hej\\\",\\n          },\\n        }\";\n    }); // assert.deepEqual(res, config);\n\n    expect(res).toStrictEqual(config);\n  });\n  it(\"It should load a config with extends and overwrite all options\", function () {\n    var firstConfig = {\n      extends: \"../base-config.json\",\n      compilerOptions: {\n        baseUrl: \"kalle\",\n        paths: {\n          foo: [\"bar2\"]\n        }\n      }\n    };\n    var firstConfigPath = (0, path_1.join)(\"/root\", \"dir1\", \"tsconfig.json\");\n    var baseConfig = {\n      compilerOptions: {\n        baseUrl: \"olle\",\n        paths: {\n          foo: [\"bar1\"]\n        },\n        strict: true\n      }\n    };\n    var baseConfigPath = (0, path_1.join)(\"/root\", \"base-config.json\");\n    var res = (0, tsconfig_loader_1.loadTsconfig)((0, path_1.join)(\"/root\", \"dir1\", \"tsconfig.json\"), function (path) {\n      return path === firstConfigPath || path === baseConfigPath;\n    }, function (path) {\n      if (path === firstConfigPath) {\n        return JSON.stringify(firstConfig);\n      }\n\n      if (path === baseConfigPath) {\n        return JSON.stringify(baseConfig);\n      }\n\n      return \"\";\n    }); // assert.deepEqual(res, {\n    //   extends: \"../base-config.json\",\n    //   compilerOptions: {\n    //     baseUrl: \"kalle\",\n    //     paths: { foo: [\"bar2\"] },\n    //     strict: true,\n    //   },\n    // });\n\n    expect(res).toEqual({\n      extends: \"../base-config.json\",\n      compilerOptions: {\n        baseUrl: \"kalle\",\n        paths: {\n          foo: [\"bar2\"]\n        },\n        strict: true\n      }\n    });\n  });\n  it(\"It should load a config with extends from node_modules and overwrite all options\", function () {\n    var firstConfig = {\n      extends: \"my-package/base-config.json\",\n      compilerOptions: {\n        baseUrl: \"kalle\",\n        paths: {\n          foo: [\"bar2\"]\n        }\n      }\n    };\n    var firstConfigPath = (0, path_1.join)(\"/root\", \"dir1\", \"tsconfig.json\");\n    var baseConfig = {\n      compilerOptions: {\n        baseUrl: \"olle\",\n        paths: {\n          foo: [\"bar1\"]\n        },\n        strict: true\n      }\n    };\n    var baseConfigPath = (0, path_1.join)(\"/root\", \"dir1\", \"node_modules\", \"my-package\", \"base-config.json\");\n    var res = (0, tsconfig_loader_1.loadTsconfig)((0, path_1.join)(\"/root\", \"dir1\", \"tsconfig.json\"), function (path) {\n      return path === firstConfigPath || path === baseConfigPath;\n    }, function (path) {\n      if (path === firstConfigPath) {\n        return JSON.stringify(firstConfig);\n      }\n\n      if (path === baseConfigPath) {\n        return JSON.stringify(baseConfig);\n      }\n\n      return \"\";\n    }); // assert.deepEqual(res, {\n    //   extends: \"my-package/base-config.json\",\n    //   compilerOptions: {\n    //     baseUrl: \"kalle\",\n    //     paths: { foo: [\"bar2\"] },\n    //     strict: true,\n    //   },\n    // });\n\n    expect(res).toEqual({\n      extends: \"my-package/base-config.json\",\n      compilerOptions: {\n        baseUrl: \"kalle\",\n        paths: {\n          foo: [\"bar2\"]\n        },\n        strict: true\n      }\n    });\n  });\n  it(\"Should use baseUrl relative to location of extended tsconfig\", function () {\n    var firstConfig = {\n      compilerOptions: {\n        baseUrl: \".\"\n      }\n    };\n    var firstConfigPath = (0, path_1.join)(\"/root\", \"first-config.json\");\n    var secondConfig = {\n      extends: \"../first-config.json\"\n    };\n    var secondConfigPath = (0, path_1.join)(\"/root\", \"dir1\", \"second-config.json\");\n    var thirdConfig = {\n      extends: \"../second-config.json\"\n    };\n    var thirdConfigPath = (0, path_1.join)(\"/root\", \"dir1\", \"dir2\", \"third-config.json\");\n    var res = (0, tsconfig_loader_1.loadTsconfig)((0, path_1.join)(\"/root\", \"dir1\", \"dir2\", \"third-config.json\"), function (path) {\n      return path === firstConfigPath || path === secondConfigPath || path === thirdConfigPath;\n    }, function (path) {\n      if (path === firstConfigPath) {\n        return JSON.stringify(firstConfig);\n      }\n\n      if (path === secondConfigPath) {\n        return JSON.stringify(secondConfig);\n      }\n\n      if (path === thirdConfigPath) {\n        return JSON.stringify(thirdConfig);\n      }\n\n      return \"\";\n    }); // assert.deepEqual(res, {\n    //   extends: \"../second-config.json\",\n    //   compilerOptions: { baseUrl: join(\"..\", \"..\") },\n    // });\n\n    expect(res).toEqual({\n      extends: \"../second-config.json\",\n      compilerOptions: {\n        baseUrl: (0, path_1.join)(\"..\", \"..\")\n      }\n    });\n  });\n});","map":{"version":3,"mappings":"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","names":["describe","it","result","cwd","getEnv","_","loadSync","tsConfigPath","baseUrl","paths","expect","toBe","undefined","toBeUndefined","key","fileName","_0","_1","pathToTsconfig","res","path","config","compilerOptions","stringify","toStrictEqual","firstConfig","extends","foo","firstConfigPath","baseConfig","strict","baseConfigPath","JSON","toEqual","secondConfig","secondConfigPath","thirdConfig","thirdConfigPath"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\tsconfig-paths\\src\\__tests__\\tsconfig-loader.test.ts"],"sourcesContent":["import {\n  loadTsconfig,\n  tsConfigLoader,\n  walkForTsConfig,\n} from \"../tsconfig-loader\";\nimport { join } from \"path\";\n\ndescribe(\"tsconfig-loader\", () => {\n  it(\"should find tsconfig in cwd\", () => {\n    const result = tsConfigLoader({\n      cwd: \"/foo/bar\",\n      getEnv: (_: string) => undefined,\n      loadSync: (cwd: string) => {\n        return {\n          tsConfigPath: `${cwd}/tsconfig.json`,\n          baseUrl: \"./\",\n          paths: {},\n        };\n      },\n    });\n\n    // assert.equal(result.tsConfigPath, \"/foo/bar/tsconfig.json\");\n    expect(result.tsConfigPath).toBe(\"/foo/bar/tsconfig.json\");\n  });\n\n  it(\"should return loaderResult.tsConfigPath as undefined when not found\", () => {\n    const result = tsConfigLoader({\n      cwd: \"/foo/bar\",\n      getEnv: (_: string) => undefined,\n      loadSync: (_: string) => {\n        return {\n          tsConfigPath: undefined,\n          baseUrl: \"./\",\n          paths: {},\n        };\n      },\n    });\n\n    // assert.isUndefined(result.tsConfigPath);\n    expect(result.tsConfigPath).toBeUndefined();\n  });\n\n  it(\"should use TS_NODE_PROJECT env if exists\", () => {\n    const result = tsConfigLoader({\n      cwd: \"/foo/bar\",\n      getEnv: (key: string) =>\n        key === \"TS_NODE_PROJECT\" ? \"/foo/baz\" : undefined,\n      loadSync: (cwd: string, fileName: string) => {\n        if (cwd === \"/foo/bar\" && fileName === \"/foo/baz\") {\n          return {\n            tsConfigPath: \"/foo/baz/tsconfig.json\",\n            baseUrl: \"./\",\n            paths: {},\n          };\n        }\n\n        return {\n          tsConfigPath: undefined,\n          baseUrl: \"./\",\n          paths: {},\n        };\n      },\n    });\n\n    // assert.equal(result.tsConfigPath, \"/foo/baz/tsconfig.json\");\n    expect(result.tsConfigPath).toBe(\"/foo/baz/tsconfig.json\");\n  });\n\n  it(\"should use TS_NODE_BASEURL env if exists\", () => {\n    const result = tsConfigLoader({\n      cwd: \"/foo/bar\",\n      getEnv: (key: string) =>\n        key === \"TS_NODE_BASEURL\" ? \"SOME_BASEURL\" : undefined,\n      loadSync: (_0: string, _1: string, baseUrl: string) => {\n        return {\n          tsConfigPath: undefined,\n          baseUrl,\n          paths: {},\n        };\n      },\n    });\n\n    // assert.equal(result.baseUrl, \"SOME_BASEURL\");\n    expect(result.baseUrl).toBe(\"SOME_BASEURL\");\n  });\n\n  it(\"should not use TS_NODE_BASEURL env if it does not exist\", () => {\n    const result = tsConfigLoader({\n      cwd: \"/foo/bar\",\n      getEnv: (_: string) => {\n        return undefined;\n      },\n      loadSync: (_0: string, _1: string, baseUrl: string) => {\n        return {\n          tsConfigPath: undefined,\n          baseUrl,\n          paths: {},\n        };\n      },\n    });\n\n    // assert.equal(result.baseUrl, undefined);\n    expect(result.baseUrl).toBeUndefined();\n  });\n});\n\ndescribe(\"walkForTsConfig\", () => {\n  it(\"should find tsconfig in starting directory\", () => {\n    const pathToTsconfig = join(\"/root\", \"dir1\", \"tsconfig.json\");\n    const res = walkForTsConfig(\n      join(\"/root\", \"dir1\"),\n      (path) => path === pathToTsconfig\n    );\n    // assert.equal(res, pathToTsconfig);\n    expect(res).toBe(pathToTsconfig);\n  });\n\n  it(\"should find tsconfig in parent directory\", () => {\n    const pathToTsconfig = join(\"/root\", \"tsconfig.json\");\n    const res = walkForTsConfig(\n      join(\"/root\", \"dir1\"),\n      (path) => path === pathToTsconfig\n    );\n    // assert.equal(res, pathToTsconfig);\n    expect(res).toBe(pathToTsconfig);\n  });\n\n  it(\"should return undefined when reaching the top\", () => {\n    const res = walkForTsConfig(join(\"/root\", \"dir1\", \"kalle\"), () => false);\n    // assert.equal(res, undefined);\n    expect(res).toBeUndefined();\n  });\n});\n\ndescribe(\"loadConfig\", () => {\n  it(\"It should load a config\", () => {\n    const config = { compilerOptions: { baseUrl: \"hej\" } };\n    const res = loadTsconfig(\n      \"/root/dir1/tsconfig.json\",\n      (path) => path === \"/root/dir1/tsconfig.json\",\n      (_) => JSON.stringify(config)\n    );\n    // assert.deepEqual(res, config);\n    expect(res).toStrictEqual(config);\n  });\n\n  it(\"It should load a config with comments\", () => {\n    const config = { compilerOptions: { baseUrl: \"hej\" } };\n    const res = loadTsconfig(\n      \"/root/dir1/tsconfig.json\",\n      (path) => path === \"/root/dir1/tsconfig.json\",\n      (_) => `{\n          // my comment\n          \"compilerOptions\": { \n            \"baseUrl\": \"hej\"\n          }\n        }`\n    );\n    // assert.deepEqual(res, config);\n    expect(res).toStrictEqual(config);\n  });\n\n  it(\"It should load a config with trailing commas\", () => {\n    const config = { compilerOptions: { baseUrl: \"hej\" } };\n    const res = loadTsconfig(\n      \"/root/dir1/tsconfig.json\",\n      (path) => path === \"/root/dir1/tsconfig.json\",\n      (_) => `{\n          \"compilerOptions\": { \n            \"baseUrl\": \"hej\",\n          },\n        }`\n    );\n    // assert.deepEqual(res, config);\n    expect(res).toStrictEqual(config);\n  });\n\n  it(\"It should load a config with extends and overwrite all options\", () => {\n    const firstConfig = {\n      extends: \"../base-config.json\",\n      compilerOptions: { baseUrl: \"kalle\", paths: { foo: [\"bar2\"] } },\n    };\n    const firstConfigPath = join(\"/root\", \"dir1\", \"tsconfig.json\");\n    const baseConfig = {\n      compilerOptions: {\n        baseUrl: \"olle\",\n        paths: { foo: [\"bar1\"] },\n        strict: true,\n      },\n    };\n    const baseConfigPath = join(\"/root\", \"base-config.json\");\n    const res = loadTsconfig(\n      join(\"/root\", \"dir1\", \"tsconfig.json\"),\n      (path) => path === firstConfigPath || path === baseConfigPath,\n      (path) => {\n        if (path === firstConfigPath) {\n          return JSON.stringify(firstConfig);\n        }\n        if (path === baseConfigPath) {\n          return JSON.stringify(baseConfig);\n        }\n        return \"\";\n      }\n    );\n\n    // assert.deepEqual(res, {\n    //   extends: \"../base-config.json\",\n    //   compilerOptions: {\n    //     baseUrl: \"kalle\",\n    //     paths: { foo: [\"bar2\"] },\n    //     strict: true,\n    //   },\n    // });\n    expect(res).toEqual({\n      extends: \"../base-config.json\",\n      compilerOptions: {\n        baseUrl: \"kalle\",\n        paths: { foo: [\"bar2\"] },\n        strict: true,\n      },\n    });\n  });\n\n  it(\"It should load a config with extends from node_modules and overwrite all options\", () => {\n    const firstConfig = {\n      extends: \"my-package/base-config.json\",\n      compilerOptions: { baseUrl: \"kalle\", paths: { foo: [\"bar2\"] } },\n    };\n    const firstConfigPath = join(\"/root\", \"dir1\", \"tsconfig.json\");\n    const baseConfig = {\n      compilerOptions: {\n        baseUrl: \"olle\",\n        paths: { foo: [\"bar1\"] },\n        strict: true,\n      },\n    };\n    const baseConfigPath = join(\n      \"/root\",\n      \"dir1\",\n      \"node_modules\",\n      \"my-package\",\n      \"base-config.json\"\n    );\n    const res = loadTsconfig(\n      join(\"/root\", \"dir1\", \"tsconfig.json\"),\n      (path) => path === firstConfigPath || path === baseConfigPath,\n      (path) => {\n        if (path === firstConfigPath) {\n          return JSON.stringify(firstConfig);\n        }\n        if (path === baseConfigPath) {\n          return JSON.stringify(baseConfig);\n        }\n        return \"\";\n      }\n    );\n\n    // assert.deepEqual(res, {\n    //   extends: \"my-package/base-config.json\",\n    //   compilerOptions: {\n    //     baseUrl: \"kalle\",\n    //     paths: { foo: [\"bar2\"] },\n    //     strict: true,\n    //   },\n    // });\n    expect(res).toEqual({\n      extends: \"my-package/base-config.json\",\n      compilerOptions: {\n        baseUrl: \"kalle\",\n        paths: { foo: [\"bar2\"] },\n        strict: true,\n      },\n    });\n  });\n\n  it(\"Should use baseUrl relative to location of extended tsconfig\", () => {\n    const firstConfig = { compilerOptions: { baseUrl: \".\" } };\n    const firstConfigPath = join(\"/root\", \"first-config.json\");\n    const secondConfig = { extends: \"../first-config.json\" };\n    const secondConfigPath = join(\"/root\", \"dir1\", \"second-config.json\");\n    const thirdConfig = { extends: \"../second-config.json\" };\n    const thirdConfigPath = join(\"/root\", \"dir1\", \"dir2\", \"third-config.json\");\n    const res = loadTsconfig(\n      join(\"/root\", \"dir1\", \"dir2\", \"third-config.json\"),\n      (path) =>\n        path === firstConfigPath ||\n        path === secondConfigPath ||\n        path === thirdConfigPath,\n      (path) => {\n        if (path === firstConfigPath) {\n          return JSON.stringify(firstConfig);\n        }\n        if (path === secondConfigPath) {\n          return JSON.stringify(secondConfig);\n        }\n        if (path === thirdConfigPath) {\n          return JSON.stringify(thirdConfig);\n        }\n        return \"\";\n      }\n    );\n\n    // assert.deepEqual(res, {\n    //   extends: \"../second-config.json\",\n    //   compilerOptions: { baseUrl: join(\"..\", \"..\") },\n    // });\n    expect(res).toEqual({\n      extends: \"../second-config.json\",\n      compilerOptions: { baseUrl: join(\"..\", \"..\") },\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}