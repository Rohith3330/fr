{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (worker, concurrency) {\n  // Start with a normal queue\n  var q = (0, _queue2.default)(worker, concurrency);\n  var {\n    push,\n    pushAsync\n  } = q;\n  q._tasks = new _Heap2.default();\n\n  q._createTaskItem = (_ref, callback) => {\n    let {\n      data,\n      priority\n    } = _ref;\n    return {\n      data,\n      priority,\n      callback\n    };\n  };\n\n  function createDataItems(tasks, priority) {\n    if (!Array.isArray(tasks)) {\n      return {\n        data: tasks,\n        priority\n      };\n    }\n\n    return tasks.map(data => {\n      return {\n        data,\n        priority\n      };\n    });\n  } // Override push to accept second parameter representing priority\n\n\n  q.push = function (data) {\n    let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let callback = arguments.length > 2 ? arguments[2] : undefined;\n    return push(createDataItems(data, priority), callback);\n  };\n\n  q.pushAsync = function (data) {\n    let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let callback = arguments.length > 2 ? arguments[2] : undefined;\n    return pushAsync(createDataItems(data, priority), callback);\n  }; // Remove unshift functions\n\n\n  delete q.unshift;\n  delete q.unshiftAsync;\n  return q;\n};\n\nvar _queue = require('./queue.js');\n\nvar _queue2 = _interopRequireDefault(_queue);\n\nvar _Heap = require('./internal/Heap.js');\n\nvar _Heap2 = _interopRequireDefault(_Heap);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nmodule.exports = exports['default'];\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are three\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * `pushAsync(task, priority, [callback])` - the same as `priorityQueue.push`,\n *   except this returns a promise that rejects if an error occurs.\n * * The `unshift` and `unshiftAsync` methods were removed.\n */","map":{"version":3,"names":["Object","defineProperty","exports","value","default","worker","concurrency","q","_queue2","push","pushAsync","_tasks","_Heap2","_createTaskItem","callback","data","priority","createDataItems","tasks","Array","isArray","map","unshift","unshiftAsync","_queue","require","_interopRequireDefault","_Heap","obj","__esModule","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/async/priorityQueue.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (worker, concurrency) {\n    // Start with a normal queue\n    var q = (0, _queue2.default)(worker, concurrency);\n\n    var {\n        push,\n        pushAsync\n    } = q;\n\n    q._tasks = new _Heap2.default();\n    q._createTaskItem = ({ data, priority }, callback) => {\n        return {\n            data,\n            priority,\n            callback\n        };\n    };\n\n    function createDataItems(tasks, priority) {\n        if (!Array.isArray(tasks)) {\n            return { data: tasks, priority };\n        }\n        return tasks.map(data => {\n            return { data, priority };\n        });\n    }\n\n    // Override push to accept second parameter representing priority\n    q.push = function (data, priority = 0, callback) {\n        return push(createDataItems(data, priority), callback);\n    };\n\n    q.pushAsync = function (data, priority = 0, callback) {\n        return pushAsync(createDataItems(data, priority), callback);\n    };\n\n    // Remove unshift functions\n    delete q.unshift;\n    delete q.unshiftAsync;\n\n    return q;\n};\n\nvar _queue = require('./queue.js');\n\nvar _queue2 = _interopRequireDefault(_queue);\n\nvar _Heap = require('./internal/Heap.js');\n\nvar _Heap2 = _interopRequireDefault(_Heap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports['default'];\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are three\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * `pushAsync(task, priority, [callback])` - the same as `priorityQueue.push`,\n *   except this returns a promise that rejects if an error occurs.\n * * The `unshift` and `unshiftAsync` methods were removed.\n */"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EACzCC,KAAK,EAAE;AADkC,CAA7C;;AAIAD,OAAO,CAACE,OAAR,GAAkB,UAAUC,MAAV,EAAkBC,WAAlB,EAA+B;EAC7C;EACA,IAAIC,CAAC,GAAG,CAAC,GAAGC,OAAO,CAACJ,OAAZ,EAAqBC,MAArB,EAA6BC,WAA7B,CAAR;EAEA,IAAI;IACAG,IADA;IAEAC;EAFA,IAGAH,CAHJ;EAKAA,CAAC,CAACI,MAAF,GAAW,IAAIC,MAAM,CAACR,OAAX,EAAX;;EACAG,CAAC,CAACM,eAAF,GAAoB,OAAqBC,QAArB,KAAkC;IAAA,IAAjC;MAAEC,IAAF;MAAQC;IAAR,CAAiC;IAClD,OAAO;MACHD,IADG;MAEHC,QAFG;MAGHF;IAHG,CAAP;EAKH,CAND;;EAQA,SAASG,eAAT,CAAyBC,KAAzB,EAAgCF,QAAhC,EAA0C;IACtC,IAAI,CAACG,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAL,EAA2B;MACvB,OAAO;QAAEH,IAAI,EAAEG,KAAR;QAAeF;MAAf,CAAP;IACH;;IACD,OAAOE,KAAK,CAACG,GAAN,CAAUN,IAAI,IAAI;MACrB,OAAO;QAAEA,IAAF;QAAQC;MAAR,CAAP;IACH,CAFM,CAAP;EAGH,CAzB4C,CA2B7C;;;EACAT,CAAC,CAACE,IAAF,GAAS,UAAUM,IAAV,EAAwC;IAAA,IAAxBC,QAAwB,uEAAb,CAAa;IAAA,IAAVF,QAAU;IAC7C,OAAOL,IAAI,CAACQ,eAAe,CAACF,IAAD,EAAOC,QAAP,CAAhB,EAAkCF,QAAlC,CAAX;EACH,CAFD;;EAIAP,CAAC,CAACG,SAAF,GAAc,UAAUK,IAAV,EAAwC;IAAA,IAAxBC,QAAwB,uEAAb,CAAa;IAAA,IAAVF,QAAU;IAClD,OAAOJ,SAAS,CAACO,eAAe,CAACF,IAAD,EAAOC,QAAP,CAAhB,EAAkCF,QAAlC,CAAhB;EACH,CAFD,CAhC6C,CAoC7C;;;EACA,OAAOP,CAAC,CAACe,OAAT;EACA,OAAOf,CAAC,CAACgB,YAAT;EAEA,OAAOhB,CAAP;AACH,CAzCD;;AA2CA,IAAIiB,MAAM,GAAGC,OAAO,CAAC,YAAD,CAApB;;AAEA,IAAIjB,OAAO,GAAGkB,sBAAsB,CAACF,MAAD,CAApC;;AAEA,IAAIG,KAAK,GAAGF,OAAO,CAAC,oBAAD,CAAnB;;AAEA,IAAIb,MAAM,GAAGc,sBAAsB,CAACC,KAAD,CAAnC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAExB,OAAO,EAAEwB;EAAX,CAArC;AAAwD;;AAE/FE,MAAM,CAAC5B,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}