{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrderedMapIterator = void 0;\n\nconst index_1 = require(\"../ContainerBase/index\");\n\nconst checkParams_1 = require(\"../../utils/checkParams\");\n\nconst index_2 = __importDefault(require(\"./Base/index\"));\n\nconst TreeIterator_1 = __importDefault(require(\"./Base/TreeIterator\"));\n\nclass OrderedMapIterator extends TreeIterator_1.default {\n  get pointer() {\n    if (this.node === this.header) {\n      throw new RangeError('OrderedMap iterator access denied');\n    }\n\n    return new Proxy([], {\n      get: (_, props) => {\n        if (props === '0') return this.node.key;else if (props === '1') return this.node.value;\n      },\n      set: (_, props, newValue) => {\n        if (props !== '1') {\n          throw new TypeError('props must be 1');\n        }\n\n        this.node.value = newValue;\n        return true;\n      }\n    });\n  }\n\n  copy() {\n    return new OrderedMapIterator(this.node, this.header, this.iteratorType);\n  }\n\n}\n\nexports.OrderedMapIterator = OrderedMapIterator;\n\nclass OrderedMap extends index_2.default {\n  constructor() {\n    let container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let cmp = arguments.length > 1 ? arguments[1] : undefined;\n    super(cmp);\n\n    this.iterationFunc = function* (curNode) {\n      if (curNode === undefined) return;\n      yield* this.iterationFunc(curNode.left);\n      yield [curNode.key, curNode.value];\n      yield* this.iterationFunc(curNode.right);\n    };\n\n    this.iterationFunc = this.iterationFunc.bind(this);\n    container.forEach(_ref => {\n      let [key, value] = _ref;\n      return this.setElement(key, value);\n    });\n  }\n\n  begin() {\n    return new OrderedMapIterator(this.header.left || this.header, this.header);\n  }\n\n  end() {\n    return new OrderedMapIterator(this.header, this.header);\n  }\n\n  rBegin() {\n    return new OrderedMapIterator(this.header.right || this.header, this.header, index_1.ContainerIterator.REVERSE);\n  }\n\n  rEnd() {\n    return new OrderedMapIterator(this.header, this.header, index_1.ContainerIterator.REVERSE);\n  }\n\n  front() {\n    if (!this.length) return undefined;\n    const minNode = this.header.left;\n    return [minNode.key, minNode.value];\n  }\n\n  back() {\n    if (!this.length) return undefined;\n    const maxNode = this.header.right;\n    return [maxNode.key, maxNode.value];\n  }\n\n  forEach(callback) {\n    let index = 0;\n\n    for (const pair of this) callback(pair, index++);\n  }\n\n  lowerBound(key) {\n    const resNode = this._lowerBound(this.root, key);\n\n    return new OrderedMapIterator(resNode, this.header);\n  }\n\n  upperBound(key) {\n    const resNode = this._upperBound(this.root, key);\n\n    return new OrderedMapIterator(resNode, this.header);\n  }\n\n  reverseLowerBound(key) {\n    const resNode = this._reverseLowerBound(this.root, key);\n\n    return new OrderedMapIterator(resNode, this.header);\n  }\n\n  reverseUpperBound(key) {\n    const resNode = this._reverseUpperBound(this.root, key);\n\n    return new OrderedMapIterator(resNode, this.header);\n  }\n  /**\n   * @description Insert a key-value pair or set value by the given key.\n   * @param key The key want to insert.\n   * @param value The value want to set.\n   * @param hint You can give an iterator hint to improve insertion efficiency.\n   */\n\n\n  setElement(key, value, hint) {\n    this.set(key, value, hint);\n  }\n\n  find(key) {\n    const curNode = this.findElementNode(this.root, key);\n\n    if (curNode !== undefined) {\n      return new OrderedMapIterator(curNode, this.header);\n    }\n\n    return this.end();\n  }\n  /**\n   * @description Get the value of the element of the specified key.\n   */\n\n\n  getElementByKey(key) {\n    const curNode = this.findElementNode(this.root, key);\n    return curNode ? curNode.value : undefined;\n  }\n\n  getElementByPos(pos) {\n    (0, checkParams_1.checkWithinAccessParams)(pos, 0, this.length - 1);\n    let res;\n    let index = 0;\n\n    for (const pair of this) {\n      if (index === pos) {\n        res = pair;\n        break;\n      }\n\n      index += 1;\n    }\n\n    return res;\n  }\n\n  union(other) {\n    other.forEach(_ref2 => {\n      let [key, value] = _ref2;\n      return this.setElement(key, value);\n    });\n  }\n\n  [Symbol.iterator]() {\n    return this.iterationFunc(this.root);\n  }\n\n}\n\nexports.default = OrderedMap;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","OrderedMapIterator","index_1","require","checkParams_1","index_2","TreeIterator_1","default","pointer","node","header","RangeError","Proxy","get","_","props","key","set","newValue","TypeError","copy","iteratorType","OrderedMap","constructor","container","cmp","iterationFunc","curNode","undefined","left","right","bind","forEach","setElement","begin","end","rBegin","ContainerIterator","REVERSE","rEnd","front","length","minNode","back","maxNode","callback","index","pair","lowerBound","resNode","_lowerBound","root","upperBound","_upperBound","reverseLowerBound","_reverseLowerBound","reverseUpperBound","_reverseUpperBound","hint","find","findElementNode","getElementByKey","getElementByPos","pos","checkWithinAccessParams","res","union","other","Symbol","iterator"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/js-sdsl/dist/cjs/container/TreeContainer/OrderedMap.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OrderedMapIterator = void 0;\nconst index_1 = require(\"../ContainerBase/index\");\nconst checkParams_1 = require(\"../../utils/checkParams\");\nconst index_2 = __importDefault(require(\"./Base/index\"));\nconst TreeIterator_1 = __importDefault(require(\"./Base/TreeIterator\"));\nclass OrderedMapIterator extends TreeIterator_1.default {\n    get pointer() {\n        if (this.node === this.header) {\n            throw new RangeError('OrderedMap iterator access denied');\n        }\n        return new Proxy([], {\n            get: (_, props) => {\n                if (props === '0')\n                    return this.node.key;\n                else if (props === '1')\n                    return this.node.value;\n            },\n            set: (_, props, newValue) => {\n                if (props !== '1') {\n                    throw new TypeError('props must be 1');\n                }\n                this.node.value = newValue;\n                return true;\n            }\n        });\n    }\n    copy() {\n        return new OrderedMapIterator(this.node, this.header, this.iteratorType);\n    }\n}\nexports.OrderedMapIterator = OrderedMapIterator;\nclass OrderedMap extends index_2.default {\n    constructor(container = [], cmp) {\n        super(cmp);\n        this.iterationFunc = function* (curNode) {\n            if (curNode === undefined)\n                return;\n            yield* this.iterationFunc(curNode.left);\n            yield [curNode.key, curNode.value];\n            yield* this.iterationFunc(curNode.right);\n        };\n        this.iterationFunc = this.iterationFunc.bind(this);\n        container.forEach(([key, value]) => this.setElement(key, value));\n    }\n    begin() {\n        return new OrderedMapIterator(this.header.left || this.header, this.header);\n    }\n    end() {\n        return new OrderedMapIterator(this.header, this.header);\n    }\n    rBegin() {\n        return new OrderedMapIterator(this.header.right || this.header, this.header, index_1.ContainerIterator.REVERSE);\n    }\n    rEnd() {\n        return new OrderedMapIterator(this.header, this.header, index_1.ContainerIterator.REVERSE);\n    }\n    front() {\n        if (!this.length)\n            return undefined;\n        const minNode = this.header.left;\n        return [minNode.key, minNode.value];\n    }\n    back() {\n        if (!this.length)\n            return undefined;\n        const maxNode = this.header.right;\n        return [maxNode.key, maxNode.value];\n    }\n    forEach(callback) {\n        let index = 0;\n        for (const pair of this)\n            callback(pair, index++);\n    }\n    lowerBound(key) {\n        const resNode = this._lowerBound(this.root, key);\n        return new OrderedMapIterator(resNode, this.header);\n    }\n    upperBound(key) {\n        const resNode = this._upperBound(this.root, key);\n        return new OrderedMapIterator(resNode, this.header);\n    }\n    reverseLowerBound(key) {\n        const resNode = this._reverseLowerBound(this.root, key);\n        return new OrderedMapIterator(resNode, this.header);\n    }\n    reverseUpperBound(key) {\n        const resNode = this._reverseUpperBound(this.root, key);\n        return new OrderedMapIterator(resNode, this.header);\n    }\n    /**\n     * @description Insert a key-value pair or set value by the given key.\n     * @param key The key want to insert.\n     * @param value The value want to set.\n     * @param hint You can give an iterator hint to improve insertion efficiency.\n     */\n    setElement(key, value, hint) {\n        this.set(key, value, hint);\n    }\n    find(key) {\n        const curNode = this.findElementNode(this.root, key);\n        if (curNode !== undefined) {\n            return new OrderedMapIterator(curNode, this.header);\n        }\n        return this.end();\n    }\n    /**\n     * @description Get the value of the element of the specified key.\n     */\n    getElementByKey(key) {\n        const curNode = this.findElementNode(this.root, key);\n        return curNode ? curNode.value : undefined;\n    }\n    getElementByPos(pos) {\n        (0, checkParams_1.checkWithinAccessParams)(pos, 0, this.length - 1);\n        let res;\n        let index = 0;\n        for (const pair of this) {\n            if (index === pos) {\n                res = pair;\n                break;\n            }\n            index += 1;\n        }\n        return res;\n    }\n    union(other) {\n        other.forEach(([key, value]) => this.setElement(key, value));\n    }\n    [Symbol.iterator]() {\n        return this.iterationFunc(this.root);\n    }\n}\nexports.default = OrderedMap;\n"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;IAAE,WAAWA;EAAb,CAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,yBAAD,CAA7B;;AACA,MAAME,OAAO,GAAGX,eAAe,CAACS,OAAO,CAAC,cAAD,CAAR,CAA/B;;AACA,MAAMG,cAAc,GAAGZ,eAAe,CAACS,OAAO,CAAC,qBAAD,CAAR,CAAtC;;AACA,MAAMF,kBAAN,SAAiCK,cAAc,CAACC,OAAhD,CAAwD;EACzC,IAAPC,OAAO,GAAG;IACV,IAAI,KAAKC,IAAL,KAAc,KAAKC,MAAvB,EAA+B;MAC3B,MAAM,IAAIC,UAAJ,CAAe,mCAAf,CAAN;IACH;;IACD,OAAO,IAAIC,KAAJ,CAAU,EAAV,EAAc;MACjBC,GAAG,EAAE,CAACC,CAAD,EAAIC,KAAJ,KAAc;QACf,IAAIA,KAAK,KAAK,GAAd,EACI,OAAO,KAAKN,IAAL,CAAUO,GAAjB,CADJ,KAEK,IAAID,KAAK,KAAK,GAAd,EACD,OAAO,KAAKN,IAAL,CAAUT,KAAjB;MACP,CANgB;MAOjBiB,GAAG,EAAE,CAACH,CAAD,EAAIC,KAAJ,EAAWG,QAAX,KAAwB;QACzB,IAAIH,KAAK,KAAK,GAAd,EAAmB;UACf,MAAM,IAAII,SAAJ,CAAc,iBAAd,CAAN;QACH;;QACD,KAAKV,IAAL,CAAUT,KAAV,GAAkBkB,QAAlB;QACA,OAAO,IAAP;MACH;IAbgB,CAAd,CAAP;EAeH;;EACDE,IAAI,GAAG;IACH,OAAO,IAAInB,kBAAJ,CAAuB,KAAKQ,IAA5B,EAAkC,KAAKC,MAAvC,EAA+C,KAAKW,YAApD,CAAP;EACH;;AAvBmD;;AAyBxDtB,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;;AACA,MAAMqB,UAAN,SAAyBjB,OAAO,CAACE,OAAjC,CAAyC;EACrCgB,WAAW,GAAsB;IAAA,IAArBC,SAAqB,uEAAT,EAAS;IAAA,IAALC,GAAK;IAC7B,MAAMA,GAAN;;IACA,KAAKC,aAAL,GAAqB,WAAWC,OAAX,EAAoB;MACrC,IAAIA,OAAO,KAAKC,SAAhB,EACI;MACJ,OAAO,KAAKF,aAAL,CAAmBC,OAAO,CAACE,IAA3B,CAAP;MACA,MAAM,CAACF,OAAO,CAACX,GAAT,EAAcW,OAAO,CAAC3B,KAAtB,CAAN;MACA,OAAO,KAAK0B,aAAL,CAAmBC,OAAO,CAACG,KAA3B,CAAP;IACH,CAND;;IAOA,KAAKJ,aAAL,GAAqB,KAAKA,aAAL,CAAmBK,IAAnB,CAAwB,IAAxB,CAArB;IACAP,SAAS,CAACQ,OAAV,CAAkB;MAAA,IAAC,CAAChB,GAAD,EAAMhB,KAAN,CAAD;MAAA,OAAkB,KAAKiC,UAAL,CAAgBjB,GAAhB,EAAqBhB,KAArB,CAAlB;IAAA,CAAlB;EACH;;EACDkC,KAAK,GAAG;IACJ,OAAO,IAAIjC,kBAAJ,CAAuB,KAAKS,MAAL,CAAYmB,IAAZ,IAAoB,KAAKnB,MAAhD,EAAwD,KAAKA,MAA7D,CAAP;EACH;;EACDyB,GAAG,GAAG;IACF,OAAO,IAAIlC,kBAAJ,CAAuB,KAAKS,MAA5B,EAAoC,KAAKA,MAAzC,CAAP;EACH;;EACD0B,MAAM,GAAG;IACL,OAAO,IAAInC,kBAAJ,CAAuB,KAAKS,MAAL,CAAYoB,KAAZ,IAAqB,KAAKpB,MAAjD,EAAyD,KAAKA,MAA9D,EAAsER,OAAO,CAACmC,iBAAR,CAA0BC,OAAhG,CAAP;EACH;;EACDC,IAAI,GAAG;IACH,OAAO,IAAItC,kBAAJ,CAAuB,KAAKS,MAA5B,EAAoC,KAAKA,MAAzC,EAAiDR,OAAO,CAACmC,iBAAR,CAA0BC,OAA3E,CAAP;EACH;;EACDE,KAAK,GAAG;IACJ,IAAI,CAAC,KAAKC,MAAV,EACI,OAAOb,SAAP;IACJ,MAAMc,OAAO,GAAG,KAAKhC,MAAL,CAAYmB,IAA5B;IACA,OAAO,CAACa,OAAO,CAAC1B,GAAT,EAAc0B,OAAO,CAAC1C,KAAtB,CAAP;EACH;;EACD2C,IAAI,GAAG;IACH,IAAI,CAAC,KAAKF,MAAV,EACI,OAAOb,SAAP;IACJ,MAAMgB,OAAO,GAAG,KAAKlC,MAAL,CAAYoB,KAA5B;IACA,OAAO,CAACc,OAAO,CAAC5B,GAAT,EAAc4B,OAAO,CAAC5C,KAAtB,CAAP;EACH;;EACDgC,OAAO,CAACa,QAAD,EAAW;IACd,IAAIC,KAAK,GAAG,CAAZ;;IACA,KAAK,MAAMC,IAAX,IAAmB,IAAnB,EACIF,QAAQ,CAACE,IAAD,EAAOD,KAAK,EAAZ,CAAR;EACP;;EACDE,UAAU,CAAChC,GAAD,EAAM;IACZ,MAAMiC,OAAO,GAAG,KAAKC,WAAL,CAAiB,KAAKC,IAAtB,EAA4BnC,GAA5B,CAAhB;;IACA,OAAO,IAAIf,kBAAJ,CAAuBgD,OAAvB,EAAgC,KAAKvC,MAArC,CAAP;EACH;;EACD0C,UAAU,CAACpC,GAAD,EAAM;IACZ,MAAMiC,OAAO,GAAG,KAAKI,WAAL,CAAiB,KAAKF,IAAtB,EAA4BnC,GAA5B,CAAhB;;IACA,OAAO,IAAIf,kBAAJ,CAAuBgD,OAAvB,EAAgC,KAAKvC,MAArC,CAAP;EACH;;EACD4C,iBAAiB,CAACtC,GAAD,EAAM;IACnB,MAAMiC,OAAO,GAAG,KAAKM,kBAAL,CAAwB,KAAKJ,IAA7B,EAAmCnC,GAAnC,CAAhB;;IACA,OAAO,IAAIf,kBAAJ,CAAuBgD,OAAvB,EAAgC,KAAKvC,MAArC,CAAP;EACH;;EACD8C,iBAAiB,CAACxC,GAAD,EAAM;IACnB,MAAMiC,OAAO,GAAG,KAAKQ,kBAAL,CAAwB,KAAKN,IAA7B,EAAmCnC,GAAnC,CAAhB;;IACA,OAAO,IAAIf,kBAAJ,CAAuBgD,OAAvB,EAAgC,KAAKvC,MAArC,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIuB,UAAU,CAACjB,GAAD,EAAMhB,KAAN,EAAa0D,IAAb,EAAmB;IACzB,KAAKzC,GAAL,CAASD,GAAT,EAAchB,KAAd,EAAqB0D,IAArB;EACH;;EACDC,IAAI,CAAC3C,GAAD,EAAM;IACN,MAAMW,OAAO,GAAG,KAAKiC,eAAL,CAAqB,KAAKT,IAA1B,EAAgCnC,GAAhC,CAAhB;;IACA,IAAIW,OAAO,KAAKC,SAAhB,EAA2B;MACvB,OAAO,IAAI3B,kBAAJ,CAAuB0B,OAAvB,EAAgC,KAAKjB,MAArC,CAAP;IACH;;IACD,OAAO,KAAKyB,GAAL,EAAP;EACH;EACD;AACJ;AACA;;;EACI0B,eAAe,CAAC7C,GAAD,EAAM;IACjB,MAAMW,OAAO,GAAG,KAAKiC,eAAL,CAAqB,KAAKT,IAA1B,EAAgCnC,GAAhC,CAAhB;IACA,OAAOW,OAAO,GAAGA,OAAO,CAAC3B,KAAX,GAAmB4B,SAAjC;EACH;;EACDkC,eAAe,CAACC,GAAD,EAAM;IACjB,CAAC,GAAG3D,aAAa,CAAC4D,uBAAlB,EAA2CD,GAA3C,EAAgD,CAAhD,EAAmD,KAAKtB,MAAL,GAAc,CAAjE;IACA,IAAIwB,GAAJ;IACA,IAAInB,KAAK,GAAG,CAAZ;;IACA,KAAK,MAAMC,IAAX,IAAmB,IAAnB,EAAyB;MACrB,IAAID,KAAK,KAAKiB,GAAd,EAAmB;QACfE,GAAG,GAAGlB,IAAN;QACA;MACH;;MACDD,KAAK,IAAI,CAAT;IACH;;IACD,OAAOmB,GAAP;EACH;;EACDC,KAAK,CAACC,KAAD,EAAQ;IACTA,KAAK,CAACnC,OAAN,CAAc;MAAA,IAAC,CAAChB,GAAD,EAAMhB,KAAN,CAAD;MAAA,OAAkB,KAAKiC,UAAL,CAAgBjB,GAAhB,EAAqBhB,KAArB,CAAlB;IAAA,CAAd;EACH;;EACe,CAAfoE,MAAM,CAACC,QAAQ,IAAI;IAChB,OAAO,KAAK3C,aAAL,CAAmB,KAAKyB,IAAxB,CAAP;EACH;;AAnGoC;;AAqGzCpD,OAAO,CAACQ,OAAR,GAAkBe,UAAlB"},"metadata":{},"sourceType":"script"}