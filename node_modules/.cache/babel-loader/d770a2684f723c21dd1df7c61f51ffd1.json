{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertAst = void 0;\n\nconst ts = require(\"typescript\");\n\nconst util_1 = require(\"./util\");\n/**\r\n * Takes a `ts.SourceFile` and creates data structures that are easier (or more performant) to traverse.\r\n * Note that there is only a performance gain if you can reuse these structures. It's not recommended for one-time AST walks.\r\n */\n\n\nfunction convertAst(sourceFile) {\n  const wrapped = {\n    node: sourceFile,\n    parent: undefined,\n    kind: ts.SyntaxKind.SourceFile,\n    children: [],\n    next: undefined,\n    skip: undefined\n  };\n  const flat = [];\n  let current = wrapped;\n\n  function collectChildren(node) {\n    current.children.push({\n      node,\n      parent: current,\n      kind: node.kind,\n      children: [],\n      next: undefined,\n      skip: undefined\n    });\n  }\n\n  const stack = [];\n\n  while (true) {\n    if (current.children.length === 0) {\n      ts.forEachChild(current.node, collectChildren);\n\n      if (current.children.length === 0) {\n        current = current.parent; // nothing to do here, go back to parent\n      } else {\n        // recurse into first child\n        const firstChild = current.children[0];\n        current.next = firstChild;\n        flat.push(firstChild.node);\n        if (util_1.isNodeKind(firstChild.kind)) current = firstChild;\n        stack.push(1); // set index in stack so we know where to continue processing children\n      }\n    } else {\n      const index = stack[stack.length - 1];\n\n      if (index < current.children.length) {\n        // handles 2nd child to the last\n        const currentChild = current.children[index];\n        flat.push(currentChild.node);\n        let previous = current.children[index - 1];\n\n        while (previous.children.length !== 0) {\n          previous.skip = currentChild;\n          previous = previous.children[previous.children.length - 1];\n        }\n\n        previous.skip = previous.next = currentChild;\n        ++stack[stack.length - 1];\n        if (util_1.isNodeKind(currentChild.kind)) current = currentChild; // recurse into child\n      } else {\n        // done on this node\n        if (stack.length === 1) break; // remove index from stack and go back to parent\n\n        stack.pop();\n        current = current.parent;\n      }\n    }\n  }\n\n  return {\n    wrapped,\n    flat\n  };\n}\n\nexports.convertAst = convertAst;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;AAgCA;;;;;;AAIA,SAAgBA,UAAhB,CAA2BC,UAA3B,EAAoD;EAChD,MAAMC,OAAO,GAAe;IACxBC,IAAI,EAAEF,UADkB;IAExBG,MAAM,EAAEC,SAFgB;IAGxBC,IAAI,EAAEC,EAAE,CAACC,UAAH,CAAcC,UAHI;IAIxBC,QAAQ,EAAE,EAJc;IAKxBC,IAAI,EAAON,SALa;IAMxBO,IAAI,EAAEP;EANkB,CAA5B;EAQA,MAAMQ,IAAI,GAAc,EAAxB;EACA,IAAIC,OAAO,GAAaZ,OAAxB;;EAEA,SAASa,eAAT,CAAyBZ,IAAzB,EAAsC;IAClCW,OAAO,CAACJ,QAAR,CAAiBM,IAAjB,CAAsB;MAClBb,IADkB;MAElBC,MAAM,EAAEU,OAFU;MAGlBR,IAAI,EAAEH,IAAI,CAACG,IAHO;MAIlBI,QAAQ,EAAE,EAJQ;MAKlBC,IAAI,EAAEN,SALY;MAMlBO,IAAI,EAAEP;IANY,CAAtB;EAQH;;EACD,MAAMY,KAAK,GAAG,EAAd;;EACA,OAAO,IAAP,EAAa;IACT,IAAIH,OAAO,CAACJ,QAAR,CAAiBQ,MAAjB,KAA4B,CAAhC,EAAmC;MAC/BX,EAAE,CAACY,YAAH,CAAgBL,OAAO,CAACX,IAAxB,EAA8BY,eAA9B;;MACA,IAAID,OAAO,CAACJ,QAAR,CAAiBQ,MAAjB,KAA4B,CAAhC,EAAmC;QAC/BJ,OAAO,GAAGA,OAAO,CAACV,MAAlB,CAD+B,CACJ;MAC9B,CAFD,MAEO;QACH;QACA,MAAMgB,UAAU,GAAGN,OAAO,CAACJ,QAAR,CAAiB,CAAjB,CAAnB;QACAI,OAAO,CAACH,IAAR,GAAeS,UAAf;QACAP,IAAI,CAACG,IAAL,CAAUI,UAAU,CAACjB,IAArB;QACA,IAAIkB,kBAAWD,UAAU,CAACd,IAAtB,CAAJ,EACIQ,OAAO,GAAGM,UAAV;QACJH,KAAK,CAACD,IAAN,CAAW,CAAX,EAPG,CAOY;MAClB;IACJ,CAbD,MAaO;MACH,MAAMM,KAAK,GAAGL,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAnB;;MACA,IAAII,KAAK,GAAGR,OAAO,CAACJ,QAAR,CAAiBQ,MAA7B,EAAqC;QAAE;QACnC,MAAMK,YAAY,GAAGT,OAAO,CAACJ,QAAR,CAAiBY,KAAjB,CAArB;QACAT,IAAI,CAACG,IAAL,CAAUO,YAAY,CAACpB,IAAvB;QACA,IAAIqB,QAAQ,GAAGV,OAAO,CAACJ,QAAR,CAAiBY,KAAK,GAAG,CAAzB,CAAf;;QACA,OAAOE,QAAQ,CAACd,QAAT,CAAkBQ,MAAlB,KAA6B,CAApC,EAAuC;UACnCM,QAAQ,CAACZ,IAAT,GAAgBW,YAAhB;UACAC,QAAQ,GAAGA,QAAQ,CAACd,QAAT,CAAkBc,QAAQ,CAACd,QAAT,CAAkBQ,MAAlB,GAA2B,CAA7C,CAAX;QACH;;QACDM,QAAQ,CAACZ,IAAT,GAAgBY,QAAQ,CAACb,IAAT,GAAgBY,YAAhC;QACA,EAAEN,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAP;QACA,IAAIG,kBAAWE,YAAY,CAACjB,IAAxB,CAAJ,EACIQ,OAAO,GAAGS,YAAV,CAX6B,CAWL;MAC/B,CAZD,MAYO;QACH;QACA,IAAIN,KAAK,CAACC,MAAN,KAAiB,CAArB,EACI,MAHD,CAIH;;QACAD,KAAK,CAACQ,GAAN;QACAX,OAAO,GAAGA,OAAO,CAACV,MAAlB;MACH;IACJ;EACJ;;EAED,OAAO;IACHF,OADG;IAEHW;EAFG,CAAP;AAIH;;AAlEDa","names":["convertAst","sourceFile","wrapped","node","parent","undefined","kind","ts","SyntaxKind","SourceFile","children","next","skip","flat","current","collectChildren","push","stack","length","forEachChild","firstChild","util_1","index","currentChild","previous","pop","exports"],"sources":["convert-ast.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}