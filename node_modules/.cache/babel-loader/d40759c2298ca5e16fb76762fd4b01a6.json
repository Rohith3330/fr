{"ast":null,"code":"import expect from 'expect';\nimport attributesComparator from '../../../src/util/attributesComparator';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\ndescribe('attributesComparator', () => {\n  describe('base attributes', () => {\n    let baseAttributes;\n    let attributes;\n    describe('are undefined', () => {\n      describe('and attributes are undefined', () => {\n        it('should return true', () => {\n          expect(attributesComparator()).toBe(true);\n        });\n      });\n    });\n    describe('are empty', () => {\n      beforeEach(() => {\n        baseAttributes = [];\n      });\n      describe('and attributes', () => {\n        describe('are empty', () => {\n          attributes = [];\n          it('should return true', () => {\n            expect(attributesComparator(baseAttributes, attributes)).toBe(true);\n          });\n        });\n        describe('have values', () => {\n          attributes = [JSXAttributeMock('foo', 0), JSXAttributeMock('bar', 'baz')];\n          it('should return true', () => {\n            expect(attributesComparator(baseAttributes, attributes)).toBe(true);\n          });\n        });\n      });\n    });\n    describe('have values', () => {\n      beforeEach(() => {\n        baseAttributes = [{\n          name: 'biz',\n          value: 1\n        }, {\n          name: 'fizz',\n          value: 'pop'\n        }, {\n          name: 'fuzz',\n          value: 'lolz'\n        }];\n      });\n      describe('and attributes', () => {\n        describe('are empty', () => {\n          attributes = [];\n          it('should return false', () => {\n            expect(attributesComparator(baseAttributes, attributes)).toBe(false);\n          });\n        });\n        describe('have values', () => {\n          describe('and the values are the different', () => {\n            it('should return false', () => {\n              attributes = [JSXElementMock(), JSXAttributeMock('biz', 2), JSXAttributeMock('ziff', 'opo'), JSXAttributeMock('far', 'lolz')];\n              expect(attributesComparator(baseAttributes, attributes)).toBe(false);\n            });\n          });\n          describe('and the values are a subset', () => {\n            it('should return true', () => {\n              attributes = [JSXAttributeMock('biz', 1), JSXAttributeMock('fizz', 'pop'), JSXAttributeMock('goo', 'gazz')];\n              expect(attributesComparator(baseAttributes, attributes)).toBe(false);\n            });\n          });\n          describe('and the values are the same', () => {\n            it('should return true', () => {\n              attributes = [JSXAttributeMock('biz', 1), JSXAttributeMock('fizz', 'pop'), JSXAttributeMock('fuzz', 'lolz')];\n              expect(attributesComparator(baseAttributes, attributes)).toBe(true);\n            });\n          });\n          describe('and the values are a superset', () => {\n            it('should return true', () => {\n              attributes = [JSXAttributeMock('biz', 1), JSXAttributeMock('fizz', 'pop'), JSXAttributeMock('fuzz', 'lolz'), JSXAttributeMock('dar', 'tee')];\n              expect(attributesComparator(baseAttributes, attributes)).toBe(true);\n            });\n          });\n        });\n      });\n    });\n  });\n});","map":{"version":3,"names":["expect","attributesComparator","JSXAttributeMock","JSXElementMock","describe","baseAttributes","attributes","it","toBe","beforeEach","name","value"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/attributesComparator-test.js"],"sourcesContent":["import expect from 'expect';\nimport attributesComparator from '../../../src/util/attributesComparator';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\n\ndescribe('attributesComparator', () => {\n  describe('base attributes', () => {\n    let baseAttributes;\n    let attributes;\n    describe('are undefined', () => {\n      describe('and attributes are undefined', () => {\n        it('should return true', () => {\n          expect(attributesComparator()).toBe(true);\n        });\n      });\n    });\n    describe('are empty', () => {\n      beforeEach(() => {\n        baseAttributes = [];\n      });\n      describe('and attributes', () => {\n        describe('are empty', () => {\n          attributes = [];\n          it('should return true', () => {\n            expect(attributesComparator(baseAttributes, attributes))\n              .toBe(true);\n          });\n        });\n        describe('have values', () => {\n          attributes = [\n            JSXAttributeMock('foo', 0),\n            JSXAttributeMock('bar', 'baz'),\n          ];\n          it('should return true', () => {\n            expect(attributesComparator(baseAttributes, attributes))\n              .toBe(true);\n          });\n        });\n      });\n    });\n    describe('have values', () => {\n      beforeEach(() => {\n        baseAttributes = [\n          {\n            name: 'biz',\n            value: 1,\n          }, {\n            name: 'fizz',\n            value: 'pop',\n          }, {\n            name: 'fuzz',\n            value: 'lolz',\n          },\n        ];\n      });\n      describe('and attributes', () => {\n        describe('are empty', () => {\n          attributes = [];\n          it('should return false', () => {\n            expect(attributesComparator(baseAttributes, attributes))\n              .toBe(false);\n          });\n        });\n        describe('have values', () => {\n          describe('and the values are the different', () => {\n            it('should return false', () => {\n              attributes = [\n                JSXElementMock(),\n                JSXAttributeMock('biz', 2),\n                JSXAttributeMock('ziff', 'opo'),\n                JSXAttributeMock('far', 'lolz'),\n              ];\n              expect(attributesComparator(baseAttributes, attributes))\n                .toBe(false);\n            });\n          });\n          describe('and the values are a subset', () => {\n            it('should return true', () => {\n              attributes = [\n                JSXAttributeMock('biz', 1),\n                JSXAttributeMock('fizz', 'pop'),\n                JSXAttributeMock('goo', 'gazz'),\n              ];\n              expect(attributesComparator(baseAttributes, attributes))\n                .toBe(false);\n            });\n          });\n          describe('and the values are the same', () => {\n            it('should return true', () => {\n              attributes = [\n                JSXAttributeMock('biz', 1),\n                JSXAttributeMock('fizz', 'pop'),\n                JSXAttributeMock('fuzz', 'lolz'),\n              ];\n              expect(attributesComparator(baseAttributes, attributes))\n                .toBe(true);\n            });\n          });\n          describe('and the values are a superset', () => {\n            it('should return true', () => {\n              attributes = [\n                JSXAttributeMock('biz', 1),\n                JSXAttributeMock('fizz', 'pop'),\n                JSXAttributeMock('fuzz', 'lolz'),\n                JSXAttributeMock('dar', 'tee'),\n              ];\n              expect(attributesComparator(baseAttributes, attributes))\n                .toBe(true);\n            });\n          });\n        });\n      });\n    });\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}