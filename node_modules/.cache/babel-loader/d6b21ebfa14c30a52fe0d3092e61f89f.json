{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Reference_flag, _Reference_referenceType;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReferenceTypeFlag = exports.ReferenceFlag = exports.Reference = void 0;\n\nconst ID_1 = require(\"../ID\");\n\nvar ReferenceFlag;\n\n(function (ReferenceFlag) {\n  ReferenceFlag[ReferenceFlag[\"Read\"] = 1] = \"Read\";\n  ReferenceFlag[ReferenceFlag[\"Write\"] = 2] = \"Write\";\n  ReferenceFlag[ReferenceFlag[\"ReadWrite\"] = 3] = \"ReadWrite\";\n})(ReferenceFlag || (ReferenceFlag = {}));\n\nexports.ReferenceFlag = ReferenceFlag;\nconst generator = (0, ID_1.createIdGenerator)();\nvar ReferenceTypeFlag;\n\n(function (ReferenceTypeFlag) {\n  ReferenceTypeFlag[ReferenceTypeFlag[\"Value\"] = 1] = \"Value\";\n  ReferenceTypeFlag[ReferenceTypeFlag[\"Type\"] = 2] = \"Type\";\n})(ReferenceTypeFlag || (ReferenceTypeFlag = {}));\n\nexports.ReferenceTypeFlag = ReferenceTypeFlag;\n/**\n * A Reference represents a single occurrence of an identifier in code.\n */\n\nclass Reference {\n  constructor(identifier, scope, flag, writeExpr, maybeImplicitGlobal, init) {\n    let referenceType = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ReferenceTypeFlag.Value;\n\n    /**\n     * A unique ID for this instance - primarily used to help debugging and testing\n     */\n    this.$id = generator();\n    /**\n     * The read-write mode of the reference.\n     */\n\n    _Reference_flag.set(this, void 0);\n    /**\n     * In some cases, a reference may be a type, value or both a type and value reference.\n     */\n\n\n    _Reference_referenceType.set(this, void 0);\n\n    this.identifier = identifier;\n    this.from = scope;\n    this.resolved = null;\n\n    __classPrivateFieldSet(this, _Reference_flag, flag, \"f\");\n\n    if (this.isWrite()) {\n      this.writeExpr = writeExpr;\n      this.init = init;\n    }\n\n    this.maybeImplicitGlobal = maybeImplicitGlobal;\n\n    __classPrivateFieldSet(this, _Reference_referenceType, referenceType, \"f\");\n  }\n  /**\n   * True if this reference can reference types\n   */\n\n\n  get isTypeReference() {\n    return (__classPrivateFieldGet(this, _Reference_referenceType, \"f\") & ReferenceTypeFlag.Type) !== 0;\n  }\n  /**\n   * True if this reference can reference values\n   */\n\n\n  get isValueReference() {\n    return (__classPrivateFieldGet(this, _Reference_referenceType, \"f\") & ReferenceTypeFlag.Value) !== 0;\n  }\n  /**\n   * Whether the reference is writeable.\n   * @public\n   */\n\n\n  isWrite() {\n    return !!(__classPrivateFieldGet(this, _Reference_flag, \"f\") & ReferenceFlag.Write);\n  }\n  /**\n   * Whether the reference is readable.\n   * @public\n   */\n\n\n  isRead() {\n    return !!(__classPrivateFieldGet(this, _Reference_flag, \"f\") & ReferenceFlag.Read);\n  }\n  /**\n   * Whether the reference is read-only.\n   * @public\n   */\n\n\n  isReadOnly() {\n    return __classPrivateFieldGet(this, _Reference_flag, \"f\") === ReferenceFlag.Read;\n  }\n  /**\n   * Whether the reference is write-only.\n   * @public\n   */\n\n\n  isWriteOnly() {\n    return __classPrivateFieldGet(this, _Reference_flag, \"f\") === ReferenceFlag.Write;\n  }\n  /**\n   * Whether the reference is read-write.\n   * @public\n   */\n\n\n  isReadWrite() {\n    return __classPrivateFieldGet(this, _Reference_flag, \"f\") === ReferenceFlag.ReadWrite;\n  }\n\n}\n\nexports.Reference = Reference;\n_Reference_flag = new WeakMap(), _Reference_referenceType = new WeakMap();","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA;;AAIA,IAAKA,aAAL;;AAAA,WAAKA,aAAL,EAAkB;EAChBA;EACAA;EACAA;AACD,CAJD,EAAKA,aAAa,KAAbA,aAAa,MAAlB;;AA8IoBC;AAlIpB,MAAMC,SAAS,GAAG,6BAAlB;AAEA,IAAKC,iBAAL;;AAAA,WAAKA,iBAAL,EAAsB;EACpBA;EACAA;AACD,CAHD,EAAKA,iBAAiB,KAAjBA,iBAAiB,MAAtB;;AAgImCF;AA3HnC;;;;AAGA,MAAMG,SAAN,CAAe;EAwDbC,YACEC,UADF,EAEEC,KAFF,EAGEC,IAHF,EAIEC,SAJF,EAKEC,mBALF,EAMEC,IANF,EAOyC;IAAA,IAAvCC,aAAuC,uEAAvBT,iBAAiB,CAACU,KAAK;;IA9DzC;;;IAGgB,WAAcX,SAAS,EAAvB;IAChB;;;;IAGAY;IA6BA;;;;;IAGAC;;IAyBE,KAAKT,UAAL,GAAkBA,UAAlB;IACA,KAAKU,IAAL,GAAYT,KAAZ;IACA,KAAKU,QAAL,GAAgB,IAAhB;;IACAC,6BAAIJ,eAAJ,EAAaN,IAAb,EAAiB,GAAjB;;IAEA,IAAI,KAAKW,OAAL,EAAJ,EAAoB;MAClB,KAAKV,SAAL,GAAiBA,SAAjB;MACA,KAAKE,IAAL,GAAYA,IAAZ;IACD;;IAED,KAAKD,mBAAL,GAA2BA,mBAA3B;;IACAQ,6BAAIH,wBAAJ,EAAsBH,aAAtB,EAAmC,GAAnC;EACD;EAnCD;;;;;EAG0B,IAAfQ,eAAe;IACxB,OAAO,CAACC,6BAAIN,wBAAJ,EAAI,GAAJ,IAAsBZ,iBAAiB,CAACmB,IAAzC,MAAmD,CAA1D;EACD;EAED;;;;;EAG2B,IAAhBC,gBAAgB;IACzB,OAAO,CAACF,6BAAIN,wBAAJ,EAAI,GAAJ,IAAsBZ,iBAAiB,CAACU,KAAzC,MAAoD,CAA3D;EACD;EAyBD;;;;;;EAIOM,OAAO;IACZ,OAAO,CAAC,EAAEE,6BAAIP,eAAJ,EAAI,GAAJ,IAAad,aAAa,CAACwB,KAA7B,CAAR;EACD;EAED;;;;;;EAIOC,MAAM;IACX,OAAO,CAAC,EAAEJ,6BAAIP,eAAJ,EAAI,GAAJ,IAAad,aAAa,CAAC0B,IAA7B,CAAR;EACD;EAED;;;;;;EAIOC,UAAU;IACf,OAAON,6BAAIP,eAAJ,EAAI,GAAJ,MAAed,aAAa,CAAC0B,IAApC;EACD;EAED;;;;;;EAIOE,WAAW;IAChB,OAAOP,6BAAIP,eAAJ,EAAI,GAAJ,MAAed,aAAa,CAACwB,KAApC;EACD;EAED;;;;;;EAIOK,WAAW;IAChB,OAAOR,6BAAIP,eAAJ,EAAI,GAAJ,MAAed,aAAa,CAAC8B,SAApC;EACD;;AArHY;;AAwHN7B","names":["ReferenceFlag","exports","generator","ReferenceTypeFlag","Reference","constructor","identifier","scope","flag","writeExpr","maybeImplicitGlobal","init","referenceType","Value","_Reference_flag","_Reference_referenceType","from","resolved","__classPrivateFieldSet","isWrite","isTypeReference","__classPrivateFieldGet","Type","isValueReference","Write","isRead","Read","isReadOnly","isWriteOnly","isReadWrite","ReadWrite"],"sources":["../../src/referencer/Reference.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}