{"ast":null,"code":"'use strict';\n\nvar _resolve = require('eslint-module-utils/resolve');\n\nvar _resolve2 = _interopRequireDefault(_resolve);\n\nvar _moduleVisitor = require('eslint-module-utils/moduleVisitor');\n\nvar _moduleVisitor2 = _interopRequireDefault(_moduleVisitor);\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction isImportingSelf(context, node, requireName) {\n  var filePath = context.getPhysicalFilename ? context.getPhysicalFilename() : context.getFilename(); // If the input is from stdin, this test can't fail\n\n  if (filePath !== '<text>' && filePath === (0, _resolve2['default'])(requireName, context)) {\n    context.report({\n      node: node,\n      message: 'Module imports itself.'\n    });\n  }\n}\n/**\n * @fileOverview Forbids a module from importing itself\n * @author Gio d'Amelio\n */\n\n\nmodule.exports = {\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Forbid a module from importing itself',\n      recommended: true,\n      url: (0, _docsUrl2['default'])('no-self-import')\n    },\n    schema: []\n  },\n  create: function () {\n    function create(context) {\n      return (0, _moduleVisitor2['default'])(function (source, node) {\n        isImportingSelf(context, node, source.value);\n      }, {\n        commonjs: true\n      });\n    }\n\n    return create;\n  }()\n};","map":{"version":3,"mappings":";;AAKA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,SAASA,eAAT,CAAyBC,OAAzB,EAAkCC,IAAlC,EAAwCC,WAAxC,EAAqD;EACnD,IAAMC,WAAWH,QAAQI,mBAARJ,GAA8BA,QAAQI,mBAARJ,EAA9BA,GAA8DA,QAAQK,WAARL,EAA/E,CADmD,CAGnD;;EACA,IAAIG,aAAa,QAAbA,IAAyBA,aAAa,0BAAQD,WAAR,EAAqBF,OAArB,CAA1C,EAAyE;IACvEA,QAAQM,MAARN,CAAe;MACbC,UADa;MAEbM,SAAS;IAFI,CAAfP;EAID;;AAlBH;;;;;;AAqBAQ,OAAOC,OAAPD,GAAiB;EACfE,MAAM;IACJC,MAAM,SADF;IAEJC,MAAM;MACJC,aAAa,uCADT;MAEJC,aAAa,IAFT;MAGJC,KAAK,0BAAQ,gBAAR;IAHD,CAFF;IAQJC,QAAQ;EARJ,CADS;EAWfC,MAXe;IAAA,gBAWRjB,OAXQ,EAWC;MACd,OAAO,gCAAc,UAACkB,MAAD,EAASjB,IAAT,EAAkB;QACrCF,gBAAgBC,OAAhBD,EAAyBE,IAAzBF,EAA+BmB,OAAOC,KAAtCpB;MADK,GAEJ;QAAEqB,UAAU;MAAZ,CAFI,CAAP;IAZa;;IAAA;EAAA;AAAA,CAAjBZ","names":["isImportingSelf","context","node","requireName","filePath","getPhysicalFilename","getFilename","report","message","module","exports","meta","type","docs","description","recommended","url","schema","create","source","value","commonjs"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\no-self-import.js"],"sourcesContent":["/**\n * @fileOverview Forbids a module from importing itself\n * @author Gio d'Amelio\n */\n\nimport resolve from 'eslint-module-utils/resolve';\nimport moduleVisitor from 'eslint-module-utils/moduleVisitor';\nimport docsUrl from '../docsUrl';\n\nfunction isImportingSelf(context, node, requireName) {\n  const filePath = context.getPhysicalFilename ? context.getPhysicalFilename() : context.getFilename();\n\n  // If the input is from stdin, this test can't fail\n  if (filePath !== '<text>' && filePath === resolve(requireName, context)) {\n    context.report({\n      node,\n      message: 'Module imports itself.',\n    });\n  }\n}\n\nmodule.exports = {\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Forbid a module from importing itself',\n      recommended: true,\n      url: docsUrl('no-self-import'),\n    },\n\n    schema: [],\n  },\n  create(context) {\n    return moduleVisitor((source, node) => {\n      isImportingSelf(context, node, source.value);\n    }, { commonjs: true });\n  },\n};\n"]},"metadata":{},"sourceType":"script"}