{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrderedSetIterator = void 0;\n\nconst index_1 = __importDefault(require(\"./Base/index\"));\n\nconst index_2 = require(\"../ContainerBase/index\");\n\nconst checkParams_1 = require(\"../../utils/checkParams\");\n\nconst TreeIterator_1 = __importDefault(require(\"./Base/TreeIterator\"));\n\nclass OrderedSetIterator extends TreeIterator_1.default {\n  get pointer() {\n    if (this.node === this.header) {\n      throw new RangeError('OrderedSet iterator access denied!');\n    }\n\n    return this.node.key;\n  }\n\n  copy() {\n    return new OrderedSetIterator(this.node, this.header, this.iteratorType);\n  }\n\n}\n\nexports.OrderedSetIterator = OrderedSetIterator;\n\nclass OrderedSet extends index_1.default {\n  constructor() {\n    let container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let cmp = arguments.length > 1 ? arguments[1] : undefined;\n    super(cmp);\n\n    this.iterationFunc = function* (curNode) {\n      if (curNode === undefined) return;\n      yield* this.iterationFunc(curNode.left);\n      yield curNode.key;\n      yield* this.iterationFunc(curNode.right);\n    };\n\n    container.forEach(element => this.insert(element));\n    this.iterationFunc = this.iterationFunc.bind(this);\n  }\n\n  begin() {\n    return new OrderedSetIterator(this.header.left || this.header, this.header);\n  }\n\n  end() {\n    return new OrderedSetIterator(this.header, this.header);\n  }\n\n  rBegin() {\n    return new OrderedSetIterator(this.header.right || this.header, this.header, index_2.ContainerIterator.REVERSE);\n  }\n\n  rEnd() {\n    return new OrderedSetIterator(this.header, this.header, index_2.ContainerIterator.REVERSE);\n  }\n\n  front() {\n    return this.header.left ? this.header.left.key : undefined;\n  }\n\n  back() {\n    return this.header.right ? this.header.right.key : undefined;\n  }\n\n  forEach(callback) {\n    let index = 0;\n\n    for (const element of this) callback(element, index++);\n  }\n\n  getElementByPos(pos) {\n    (0, checkParams_1.checkWithinAccessParams)(pos, 0, this.length - 1);\n    let res;\n    let index = 0;\n\n    for (const element of this) {\n      if (index === pos) {\n        res = element;\n      }\n\n      index += 1;\n    }\n\n    return res;\n  }\n  /**\n   * @description Insert element to set.\n   * @param key The key want to insert.\n   * @param hint You can give an iterator hint to improve insertion efficiency.\n   */\n\n\n  insert(key, hint) {\n    this.set(key, undefined, hint);\n  }\n\n  find(element) {\n    const curNode = this.findElementNode(this.root, element);\n\n    if (curNode !== undefined) {\n      return new OrderedSetIterator(curNode, this.header);\n    }\n\n    return this.end();\n  }\n\n  lowerBound(key) {\n    const resNode = this._lowerBound(this.root, key);\n\n    return new OrderedSetIterator(resNode, this.header);\n  }\n\n  upperBound(key) {\n    const resNode = this._upperBound(this.root, key);\n\n    return new OrderedSetIterator(resNode, this.header);\n  }\n\n  reverseLowerBound(key) {\n    const resNode = this._reverseLowerBound(this.root, key);\n\n    return new OrderedSetIterator(resNode, this.header);\n  }\n\n  reverseUpperBound(key) {\n    const resNode = this._reverseUpperBound(this.root, key);\n\n    return new OrderedSetIterator(resNode, this.header);\n  }\n\n  union(other) {\n    other.forEach(element => this.insert(element));\n  }\n\n  [Symbol.iterator]() {\n    return this.iterationFunc(this.root);\n  }\n\n}\n\nexports.default = OrderedSet;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","OrderedSetIterator","index_1","require","index_2","checkParams_1","TreeIterator_1","default","pointer","node","header","RangeError","key","copy","iteratorType","OrderedSet","constructor","container","cmp","iterationFunc","curNode","undefined","left","right","forEach","element","insert","bind","begin","end","rBegin","ContainerIterator","REVERSE","rEnd","front","back","callback","index","getElementByPos","pos","checkWithinAccessParams","length","res","hint","set","find","findElementNode","root","lowerBound","resNode","_lowerBound","upperBound","_upperBound","reverseLowerBound","_reverseLowerBound","reverseUpperBound","_reverseUpperBound","union","other","Symbol","iterator"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/js-sdsl/dist/cjs/container/TreeContainer/OrderedSet.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OrderedSetIterator = void 0;\nconst index_1 = __importDefault(require(\"./Base/index\"));\nconst index_2 = require(\"../ContainerBase/index\");\nconst checkParams_1 = require(\"../../utils/checkParams\");\nconst TreeIterator_1 = __importDefault(require(\"./Base/TreeIterator\"));\nclass OrderedSetIterator extends TreeIterator_1.default {\n    get pointer() {\n        if (this.node === this.header) {\n            throw new RangeError('OrderedSet iterator access denied!');\n        }\n        return this.node.key;\n    }\n    copy() {\n        return new OrderedSetIterator(this.node, this.header, this.iteratorType);\n    }\n}\nexports.OrderedSetIterator = OrderedSetIterator;\nclass OrderedSet extends index_1.default {\n    constructor(container = [], cmp) {\n        super(cmp);\n        this.iterationFunc = function* (curNode) {\n            if (curNode === undefined)\n                return;\n            yield* this.iterationFunc(curNode.left);\n            yield curNode.key;\n            yield* this.iterationFunc(curNode.right);\n        };\n        container.forEach((element) => this.insert(element));\n        this.iterationFunc = this.iterationFunc.bind(this);\n    }\n    begin() {\n        return new OrderedSetIterator(this.header.left || this.header, this.header);\n    }\n    end() {\n        return new OrderedSetIterator(this.header, this.header);\n    }\n    rBegin() {\n        return new OrderedSetIterator(this.header.right || this.header, this.header, index_2.ContainerIterator.REVERSE);\n    }\n    rEnd() {\n        return new OrderedSetIterator(this.header, this.header, index_2.ContainerIterator.REVERSE);\n    }\n    front() {\n        return this.header.left ? this.header.left.key : undefined;\n    }\n    back() {\n        return this.header.right ? this.header.right.key : undefined;\n    }\n    forEach(callback) {\n        let index = 0;\n        for (const element of this)\n            callback(element, index++);\n    }\n    getElementByPos(pos) {\n        (0, checkParams_1.checkWithinAccessParams)(pos, 0, this.length - 1);\n        let res;\n        let index = 0;\n        for (const element of this) {\n            if (index === pos) {\n                res = element;\n            }\n            index += 1;\n        }\n        return res;\n    }\n    /**\n     * @description Insert element to set.\n     * @param key The key want to insert.\n     * @param hint You can give an iterator hint to improve insertion efficiency.\n     */\n    insert(key, hint) {\n        this.set(key, undefined, hint);\n    }\n    find(element) {\n        const curNode = this.findElementNode(this.root, element);\n        if (curNode !== undefined) {\n            return new OrderedSetIterator(curNode, this.header);\n        }\n        return this.end();\n    }\n    lowerBound(key) {\n        const resNode = this._lowerBound(this.root, key);\n        return new OrderedSetIterator(resNode, this.header);\n    }\n    upperBound(key) {\n        const resNode = this._upperBound(this.root, key);\n        return new OrderedSetIterator(resNode, this.header);\n    }\n    reverseLowerBound(key) {\n        const resNode = this._reverseLowerBound(this.root, key);\n        return new OrderedSetIterator(resNode, this.header);\n    }\n    reverseUpperBound(key) {\n        const resNode = this._reverseUpperBound(this.root, key);\n        return new OrderedSetIterator(resNode, this.header);\n    }\n    union(other) {\n        other.forEach((element) => this.insert(element));\n    }\n    [Symbol.iterator]() {\n        return this.iterationFunc(this.root);\n    }\n}\nexports.default = OrderedSet;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}