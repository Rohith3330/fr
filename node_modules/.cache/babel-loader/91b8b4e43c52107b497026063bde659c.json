{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Suggest having hooks before any test cases',\n      recommended: false\n    },\n    messages: {\n      noHookOnTop: 'Hooks should come before test cases'\n    },\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    const hooksContext = [false];\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isHook)(node) && (0, _utils.isTestCaseCall)(node)) {\n          hooksContext[hooksContext.length - 1] = true;\n        }\n\n        if (hooksContext[hooksContext.length - 1] && (0, _utils.isHook)(node)) {\n          context.report({\n            messageId: 'noHookOnTop',\n            node\n          });\n        }\n\n        hooksContext.push(false);\n      },\n\n      'CallExpression:exit'() {\n        hooksContext.pop();\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utils","require","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","noHookOnTop","schema","type","defaultOptions","create","context","hooksContext","CallExpression","node","isHook","isTestCaseCall","length","report","messageId","push","pop"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/prefer-hooks-on-top.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Suggest having hooks before any test cases',\n      recommended: false\n    },\n    messages: {\n      noHookOnTop: 'Hooks should come before test cases'\n    },\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    const hooksContext = [false];\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isHook)(node) && (0, _utils.isTestCaseCall)(node)) {\n          hooksContext[hooksContext.length - 1] = true;\n        }\n\n        if (hooksContext[hooksContext.length - 1] && (0, _utils.isHook)(node)) {\n          context.report({\n            messageId: 'noHookOnTop',\n            node\n          });\n        }\n\n        hooksContext.push(false);\n      },\n\n      'CallExpression:exit'() {\n        hooksContext.pop();\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAG,CAAC,GAAGF,MAAM,CAACG,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,4CAFT;MAGJC,WAAW,EAAE;IAHT,CADF;IAMJC,QAAQ,EAAE;MACRC,WAAW,EAAE;IADL,CANN;IASJC,MAAM,EAAE,EATJ;IAUJC,IAAI,EAAE;EAVF,CAF8B;EAcpCC,cAAc,EAAE,EAdoB;;EAgBpCC,MAAM,CAACC,OAAD,EAAU;IACd,MAAMC,YAAY,GAAG,CAAC,KAAD,CAArB;IACA,OAAO;MACLC,cAAc,CAACC,IAAD,EAAO;QACnB,IAAI,CAAC,CAAC,GAAGpB,MAAM,CAACqB,MAAX,EAAmBD,IAAnB,CAAD,IAA6B,CAAC,GAAGpB,MAAM,CAACsB,cAAX,EAA2BF,IAA3B,CAAjC,EAAmE;UACjEF,YAAY,CAACA,YAAY,CAACK,MAAb,GAAsB,CAAvB,CAAZ,GAAwC,IAAxC;QACD;;QAED,IAAIL,YAAY,CAACA,YAAY,CAACK,MAAb,GAAsB,CAAvB,CAAZ,IAAyC,CAAC,GAAGvB,MAAM,CAACqB,MAAX,EAAmBD,IAAnB,CAA7C,EAAuE;UACrEH,OAAO,CAACO,MAAR,CAAe;YACbC,SAAS,EAAE,aADE;YAEbL;UAFa,CAAf;QAID;;QAEDF,YAAY,CAACQ,IAAb,CAAkB,KAAlB;MACD,CAdI;;MAgBL,wBAAwB;QACtBR,YAAY,CAACS,GAAb;MACD;;IAlBI,CAAP;EAqBD;;AAvCmC,CAAvB,CAAf;;AA2CA9B,OAAO,CAACE,OAAR,GAAkBG,QAAlB"},"metadata":{},"sourceType":"script"}