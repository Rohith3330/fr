{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst colors = require('picocolors');\n\nconst {\n  loadConfig,\n  optimize\n} = require('../svgo-node.js');\n\nconst pluginsMap = require('../../plugins/plugins.js');\n\nconst PKG = require('../../package.json');\n\nconst {\n  encodeSVGDatauri,\n  decodeSVGDatauri\n} = require('./tools.js');\n\nconst regSVGFile = /\\.svg$/i;\n/**\n * Synchronously check if path is a directory. Tolerant to errors like ENOENT.\n * @param {string} path\n */\n\nfunction checkIsDir(path) {\n  try {\n    return fs.lstatSync(path).isDirectory();\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = function makeProgram(program) {\n  program.name(PKG.name).description(PKG.description, {\n    INPUT: 'Alias to --input'\n  }).version(PKG.version, '-v, --version').arguments('[INPUT...]').option('-i, --input <INPUT...>', 'Input files, \"-\" for STDIN').option('-s, --string <STRING>', 'Input SVG data string').option('-f, --folder <FOLDER>', 'Input folder, optimize and rewrite all *.svg files').option('-o, --output <OUTPUT...>', 'Output file or folder (by default the same as the input), \"-\" for STDOUT').option('-p, --precision <INTEGER>', 'Set number of digits in the fractional part, overrides plugins params').option('--config <CONFIG>', 'Custom config file, only .js is supported').option('--datauri <FORMAT>', 'Output as Data URI string (base64), URI encoded (enc) or unencoded (unenc)').option('--multipass', 'Pass over SVGs multiple times to ensure all optimizations are applied').option('--pretty', 'Make SVG pretty printed').option('--indent <INTEGER>', 'Indent number when pretty printing SVGs').option('--eol <EOL>', 'Line break to use when outputting SVG: lf, crlf. If unspecified, uses platform default.').option('--final-newline', 'Ensure SVG ends with a line break').option('-r, --recursive', \"Use with '--folder'. Optimizes *.svg files in folders recursively.\").option('--exclude <PATTERN...>', \"Use with '--folder'. Exclude files matching regular expression pattern.\").option('-q, --quiet', 'Only output error messages, not regular status messages').option('--show-plugins', 'Show available plugins and exit') // used by picocolors internally\n  .option('--no-color', 'Output plain text without color').action(action);\n};\n\nasync function action(args, opts, command) {\n  var input = opts.input || args;\n  var output = opts.output;\n  var config = {};\n\n  if (opts.precision != null) {\n    const number = Number.parseInt(opts.precision, 10);\n\n    if (Number.isNaN(number)) {\n      console.error(\"error: option '-p, --precision' argument must be an integer number\");\n      process.exit(1);\n    } else {\n      opts.precision = number;\n    }\n  }\n\n  if (opts.datauri != null) {\n    if (opts.datauri !== 'base64' && opts.datauri !== 'enc' && opts.datauri !== 'unenc') {\n      console.error(\"error: option '--datauri' must have one of the following values: 'base64', 'enc' or 'unenc'\");\n      process.exit(1);\n    }\n  }\n\n  if (opts.indent != null) {\n    const number = Number.parseInt(opts.indent, 10);\n\n    if (Number.isNaN(number)) {\n      console.error(\"error: option '--indent' argument must be an integer number\");\n      process.exit(1);\n    } else {\n      opts.indent = number;\n    }\n  }\n\n  if (opts.eol != null && opts.eol !== 'lf' && opts.eol !== 'crlf') {\n    console.error(\"error: option '--eol' must have one of the following values: 'lf' or 'crlf'\");\n    process.exit(1);\n  } // --show-plugins\n\n\n  if (opts.showPlugins) {\n    showAvailablePlugins();\n    return;\n  } // w/o anything\n\n\n  if ((input.length === 0 || input[0] === '-') && !opts.string && !opts.stdin && !opts.folder && process.stdin.isTTY === true) {\n    return command.help();\n  }\n\n  if (typeof process == 'object' && process.versions && process.versions.node && PKG && PKG.engines.node) {\n    var nodeVersion = String(PKG.engines.node).match(/\\d*(\\.\\d+)*/)[0];\n\n    if (parseFloat(process.versions.node) < parseFloat(nodeVersion)) {\n      throw Error(`${PKG.name} requires Node.js version ${nodeVersion} or higher.`);\n    }\n  } // --config\n\n\n  const loadedConfig = await loadConfig(opts.config);\n\n  if (loadedConfig != null) {\n    config = loadedConfig;\n  } // --quiet\n\n\n  if (opts.quiet) {\n    config.quiet = opts.quiet;\n  } // --recursive\n\n\n  if (opts.recursive) {\n    config.recursive = opts.recursive;\n  } // --exclude\n\n\n  config.exclude = opts.exclude ? opts.exclude.map(pattern => RegExp(pattern)) : []; // --precision\n\n  if (opts.precision != null) {\n    var precision = Math.min(Math.max(0, opts.precision), 20);\n    config.floatPrecision = precision;\n  } // --multipass\n\n\n  if (opts.multipass) {\n    config.multipass = true;\n  } // --pretty\n\n\n  if (opts.pretty) {\n    config.js2svg = config.js2svg || {};\n    config.js2svg.pretty = true;\n\n    if (opts.indent != null) {\n      config.js2svg.indent = opts.indent;\n    }\n  } // --eol\n\n\n  if (opts.eol) {\n    config.js2svg = config.js2svg || {};\n    config.js2svg.eol = opts.eol;\n  } // --final-newline\n\n\n  if (opts.finalNewline) {\n    config.js2svg = config.js2svg || {};\n    config.js2svg.finalNewline = true;\n  } // --output\n\n\n  if (output) {\n    if (input.length && input[0] != '-') {\n      if (output.length == 1 && checkIsDir(output[0])) {\n        var dir = output[0];\n\n        for (var i = 0; i < input.length; i++) {\n          output[i] = checkIsDir(input[i]) ? input[i] : path.resolve(dir, path.basename(input[i]));\n        }\n      } else if (output.length < input.length) {\n        output = output.concat(input.slice(output.length));\n      }\n    }\n  } else if (input.length) {\n    output = input;\n  } else if (opts.string) {\n    output = '-';\n  }\n\n  if (opts.datauri) {\n    config.datauri = opts.datauri;\n  } // --folder\n\n\n  if (opts.folder) {\n    var ouputFolder = output && output[0] || opts.folder;\n    await optimizeFolder(config, opts.folder, ouputFolder);\n  } // --input\n\n\n  if (input.length !== 0) {\n    // STDIN\n    if (input[0] === '-') {\n      return new Promise((resolve, reject) => {\n        var data = '',\n            file = output[0];\n        process.stdin.on('data', chunk => data += chunk).once('end', () => processSVGData(config, {\n          input: 'string'\n        }, data, file).then(resolve, reject));\n      }); // file\n    } else {\n      await Promise.all(input.map((file, n) => optimizeFile(config, file, output[n])));\n    } // --string\n\n  } else if (opts.string) {\n    var data = decodeSVGDatauri(opts.string);\n    return processSVGData(config, {\n      input: 'string'\n    }, data, output[0]);\n  }\n}\n/**\n * Optimize SVG files in a directory.\n * @param {Object} config options\n * @param {string} dir input directory\n * @param {string} output output directory\n * @return {Promise}\n */\n\n\nfunction optimizeFolder(config, dir, output) {\n  if (!config.quiet) {\n    console.log(`Processing directory '${dir}':\\n`);\n  }\n\n  return fs.promises.readdir(dir).then(files => processDirectory(config, dir, files, output));\n}\n/**\n * Process given files, take only SVG.\n * @param {Object} config options\n * @param {string} dir input directory\n * @param {Array} files list of file names in the directory\n * @param {string} output output directory\n * @return {Promise}\n */\n\n\nfunction processDirectory(config, dir, files, output) {\n  // take only *.svg files, recursively if necessary\n  var svgFilesDescriptions = getFilesDescriptions(config, dir, files, output);\n  return svgFilesDescriptions.length ? Promise.all(svgFilesDescriptions.map(fileDescription => optimizeFile(config, fileDescription.inputPath, fileDescription.outputPath))) : Promise.reject(new Error(`No SVG files have been found in '${dir}' directory.`));\n}\n/**\n * Get svg files descriptions\n * @param {Object} config options\n * @param {string} dir input directory\n * @param {Array} files list of file names in the directory\n * @param {string} output output directory\n * @return {Array}\n */\n\n\nfunction getFilesDescriptions(config, dir, files, output) {\n  const filesInThisFolder = files.filter(name => regSVGFile.test(name) && !config.exclude.some(regExclude => regExclude.test(name))).map(name => ({\n    inputPath: path.resolve(dir, name),\n    outputPath: path.resolve(output, name)\n  }));\n  return config.recursive ? [].concat(filesInThisFolder, files.filter(name => checkIsDir(path.resolve(dir, name))).map(subFolderName => {\n    const subFolderPath = path.resolve(dir, subFolderName);\n    const subFolderFiles = fs.readdirSync(subFolderPath);\n    const subFolderOutput = path.resolve(output, subFolderName);\n    return getFilesDescriptions(config, subFolderPath, subFolderFiles, subFolderOutput);\n  }).reduce((a, b) => [].concat(a, b), [])) : filesInThisFolder;\n}\n/**\n * Read SVG file and pass to processing.\n * @param {Object} config options\n * @param {string} file\n * @param {string} output\n * @return {Promise}\n */\n\n\nfunction optimizeFile(config, file, output) {\n  return fs.promises.readFile(file, 'utf8').then(data => processSVGData(config, {\n    input: 'file',\n    path: file\n  }, data, output, file), error => checkOptimizeFileError(config, file, output, error));\n}\n/**\n * Optimize SVG data.\n * @param {Object} config options\n * @param {string} data SVG content to optimize\n * @param {string} output where to write optimized file\n * @param {string} [input] input file name (being used if output is a directory)\n * @return {Promise}\n */\n\n\nfunction processSVGData(config, info, data, output, input) {\n  var startTime = Date.now(),\n      prevFileSize = Buffer.byteLength(data, 'utf8');\n  const result = optimize(data, { ...config,\n    ...info\n  });\n\n  if (result.modernError) {\n    console.error(colors.red(result.modernError.toString()));\n    process.exit(1);\n  }\n\n  if (config.datauri) {\n    result.data = encodeSVGDatauri(result.data, config.datauri);\n  }\n\n  var resultFileSize = Buffer.byteLength(result.data, 'utf8'),\n      processingTime = Date.now() - startTime;\n  return writeOutput(input, output, result.data).then(function () {\n    if (!config.quiet && output != '-') {\n      if (input) {\n        console.log(`\\n${path.basename(input)}:`);\n      }\n\n      printTimeInfo(processingTime);\n      printProfitInfo(prevFileSize, resultFileSize);\n    }\n  }, error => Promise.reject(new Error(error.code === 'ENOTDIR' ? `Error: output '${output}' is not a directory.` : error)));\n}\n/**\n * Write result of an optimization.\n * @param {string} input\n * @param {string} output output file name. '-' for stdout\n * @param {string} data data to write\n * @return {Promise}\n */\n\n\nfunction writeOutput(input, output, data) {\n  if (output == '-') {\n    console.log(data);\n    return Promise.resolve();\n  }\n\n  fs.mkdirSync(path.dirname(output), {\n    recursive: true\n  });\n  return fs.promises.writeFile(output, data, 'utf8').catch(error => checkWriteFileError(input, output, data, error));\n}\n/**\n * Write a time taken by optimization.\n * @param {number} time time in milliseconds.\n */\n\n\nfunction printTimeInfo(time) {\n  console.log(`Done in ${time} ms!`);\n}\n/**\n * Write optimizing information in human readable format.\n * @param {number} inBytes size before optimization.\n * @param {number} outBytes size after optimization.\n */\n\n\nfunction printProfitInfo(inBytes, outBytes) {\n  var profitPercents = 100 - outBytes * 100 / inBytes;\n  console.log(Math.round(inBytes / 1024 * 1000) / 1000 + ' KiB' + (profitPercents < 0 ? ' + ' : ' - ') + colors.green(Math.abs(Math.round(profitPercents * 10) / 10) + '%') + ' = ' + Math.round(outBytes / 1024 * 1000) / 1000 + ' KiB');\n}\n/**\n * Check for errors, if it's a dir optimize the dir.\n * @param {Object} config\n * @param {string} input\n * @param {string} output\n * @param {Error} error\n * @return {Promise}\n */\n\n\nfunction checkOptimizeFileError(config, input, output, error) {\n  if (error.code == 'EISDIR') {\n    return optimizeFolder(config, input, output);\n  } else if (error.code == 'ENOENT') {\n    return Promise.reject(new Error(`Error: no such file or directory '${error.path}'.`));\n  }\n\n  return Promise.reject(error);\n}\n/**\n * Check for saving file error. If the output is a dir, then write file there.\n * @param {string} input\n * @param {string} output\n * @param {string} data\n * @param {Error} error\n * @return {Promise}\n */\n\n\nfunction checkWriteFileError(input, output, data, error) {\n  if (error.code == 'EISDIR' && input) {\n    return fs.promises.writeFile(path.resolve(output, path.basename(input)), data, 'utf8');\n  } else {\n    return Promise.reject(error);\n  }\n}\n/**\n * Show list of available plugins with short description.\n */\n\n\nfunction showAvailablePlugins() {\n  const list = Object.entries(pluginsMap).sort((_ref, _ref2) => {\n    let [a] = _ref;\n    let [b] = _ref2;\n    return a.localeCompare(b);\n  }).map(_ref3 => {\n    let [name, plugin] = _ref3;\n    return ` [ ${colors.green(name)} ] ${plugin.description}`;\n  }).join('\\n');\n  console.log('Currently available plugins:\\n' + list);\n}\n\nmodule.exports.checkIsDir = checkIsDir;","map":{"version":3,"names":["fs","require","path","colors","loadConfig","optimize","pluginsMap","PKG","encodeSVGDatauri","decodeSVGDatauri","regSVGFile","checkIsDir","lstatSync","isDirectory","e","module","exports","makeProgram","program","name","description","INPUT","version","arguments","option","action","args","opts","command","input","output","config","precision","number","Number","parseInt","isNaN","console","error","process","exit","datauri","indent","eol","showPlugins","showAvailablePlugins","length","string","stdin","folder","isTTY","help","versions","node","engines","nodeVersion","String","match","parseFloat","Error","loadedConfig","quiet","recursive","exclude","map","pattern","RegExp","Math","min","max","floatPrecision","multipass","pretty","js2svg","finalNewline","dir","i","resolve","basename","concat","slice","ouputFolder","optimizeFolder","Promise","reject","data","file","on","chunk","once","processSVGData","then","all","n","optimizeFile","log","promises","readdir","files","processDirectory","svgFilesDescriptions","getFilesDescriptions","fileDescription","inputPath","outputPath","filesInThisFolder","filter","test","some","regExclude","subFolderName","subFolderPath","subFolderFiles","readdirSync","subFolderOutput","reduce","a","b","readFile","checkOptimizeFileError","info","startTime","Date","now","prevFileSize","Buffer","byteLength","result","modernError","red","toString","resultFileSize","processingTime","writeOutput","printTimeInfo","printProfitInfo","code","mkdirSync","dirname","writeFile","catch","checkWriteFileError","time","inBytes","outBytes","profitPercents","round","green","abs","list","Object","entries","sort","localeCompare","plugin","join"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-svgo/node_modules/svgo/lib/svgo/coa.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst colors = require('picocolors');\nconst { loadConfig, optimize } = require('../svgo-node.js');\nconst pluginsMap = require('../../plugins/plugins.js');\nconst PKG = require('../../package.json');\nconst { encodeSVGDatauri, decodeSVGDatauri } = require('./tools.js');\n\nconst regSVGFile = /\\.svg$/i;\n\n/**\n * Synchronously check if path is a directory. Tolerant to errors like ENOENT.\n * @param {string} path\n */\nfunction checkIsDir(path) {\n  try {\n    return fs.lstatSync(path).isDirectory();\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = function makeProgram(program) {\n  program\n    .name(PKG.name)\n    .description(PKG.description, {\n      INPUT: 'Alias to --input',\n    })\n    .version(PKG.version, '-v, --version')\n    .arguments('[INPUT...]')\n    .option('-i, --input <INPUT...>', 'Input files, \"-\" for STDIN')\n    .option('-s, --string <STRING>', 'Input SVG data string')\n    .option(\n      '-f, --folder <FOLDER>',\n      'Input folder, optimize and rewrite all *.svg files'\n    )\n    .option(\n      '-o, --output <OUTPUT...>',\n      'Output file or folder (by default the same as the input), \"-\" for STDOUT'\n    )\n    .option(\n      '-p, --precision <INTEGER>',\n      'Set number of digits in the fractional part, overrides plugins params'\n    )\n    .option('--config <CONFIG>', 'Custom config file, only .js is supported')\n    .option(\n      '--datauri <FORMAT>',\n      'Output as Data URI string (base64), URI encoded (enc) or unencoded (unenc)'\n    )\n    .option(\n      '--multipass',\n      'Pass over SVGs multiple times to ensure all optimizations are applied'\n    )\n    .option('--pretty', 'Make SVG pretty printed')\n    .option('--indent <INTEGER>', 'Indent number when pretty printing SVGs')\n    .option(\n      '--eol <EOL>',\n      'Line break to use when outputting SVG: lf, crlf. If unspecified, uses platform default.'\n    )\n    .option('--final-newline', 'Ensure SVG ends with a line break')\n    .option(\n      '-r, --recursive',\n      \"Use with '--folder'. Optimizes *.svg files in folders recursively.\"\n    )\n    .option(\n      '--exclude <PATTERN...>',\n      \"Use with '--folder'. Exclude files matching regular expression pattern.\"\n    )\n    .option(\n      '-q, --quiet',\n      'Only output error messages, not regular status messages'\n    )\n    .option('--show-plugins', 'Show available plugins and exit')\n    // used by picocolors internally\n    .option('--no-color', 'Output plain text without color')\n    .action(action);\n};\n\nasync function action(args, opts, command) {\n  var input = opts.input || args;\n  var output = opts.output;\n  var config = {};\n\n  if (opts.precision != null) {\n    const number = Number.parseInt(opts.precision, 10);\n    if (Number.isNaN(number)) {\n      console.error(\n        \"error: option '-p, --precision' argument must be an integer number\"\n      );\n      process.exit(1);\n    } else {\n      opts.precision = number;\n    }\n  }\n\n  if (opts.datauri != null) {\n    if (\n      opts.datauri !== 'base64' &&\n      opts.datauri !== 'enc' &&\n      opts.datauri !== 'unenc'\n    ) {\n      console.error(\n        \"error: option '--datauri' must have one of the following values: 'base64', 'enc' or 'unenc'\"\n      );\n      process.exit(1);\n    }\n  }\n\n  if (opts.indent != null) {\n    const number = Number.parseInt(opts.indent, 10);\n    if (Number.isNaN(number)) {\n      console.error(\n        \"error: option '--indent' argument must be an integer number\"\n      );\n      process.exit(1);\n    } else {\n      opts.indent = number;\n    }\n  }\n\n  if (opts.eol != null && opts.eol !== 'lf' && opts.eol !== 'crlf') {\n    console.error(\n      \"error: option '--eol' must have one of the following values: 'lf' or 'crlf'\"\n    );\n    process.exit(1);\n  }\n\n  // --show-plugins\n  if (opts.showPlugins) {\n    showAvailablePlugins();\n    return;\n  }\n\n  // w/o anything\n  if (\n    (input.length === 0 || input[0] === '-') &&\n    !opts.string &&\n    !opts.stdin &&\n    !opts.folder &&\n    process.stdin.isTTY === true\n  ) {\n    return command.help();\n  }\n\n  if (\n    typeof process == 'object' &&\n    process.versions &&\n    process.versions.node &&\n    PKG &&\n    PKG.engines.node\n  ) {\n    var nodeVersion = String(PKG.engines.node).match(/\\d*(\\.\\d+)*/)[0];\n    if (parseFloat(process.versions.node) < parseFloat(nodeVersion)) {\n      throw Error(\n        `${PKG.name} requires Node.js version ${nodeVersion} or higher.`\n      );\n    }\n  }\n\n  // --config\n  const loadedConfig = await loadConfig(opts.config);\n  if (loadedConfig != null) {\n    config = loadedConfig;\n  }\n\n  // --quiet\n  if (opts.quiet) {\n    config.quiet = opts.quiet;\n  }\n\n  // --recursive\n  if (opts.recursive) {\n    config.recursive = opts.recursive;\n  }\n\n  // --exclude\n  config.exclude = opts.exclude\n    ? opts.exclude.map((pattern) => RegExp(pattern))\n    : [];\n\n  // --precision\n  if (opts.precision != null) {\n    var precision = Math.min(Math.max(0, opts.precision), 20);\n    config.floatPrecision = precision;\n  }\n\n  // --multipass\n  if (opts.multipass) {\n    config.multipass = true;\n  }\n\n  // --pretty\n  if (opts.pretty) {\n    config.js2svg = config.js2svg || {};\n    config.js2svg.pretty = true;\n    if (opts.indent != null) {\n      config.js2svg.indent = opts.indent;\n    }\n  }\n\n  // --eol\n  if (opts.eol) {\n    config.js2svg = config.js2svg || {};\n    config.js2svg.eol = opts.eol;\n  }\n\n  // --final-newline\n  if (opts.finalNewline) {\n    config.js2svg = config.js2svg || {};\n    config.js2svg.finalNewline = true;\n  }\n\n  // --output\n  if (output) {\n    if (input.length && input[0] != '-') {\n      if (output.length == 1 && checkIsDir(output[0])) {\n        var dir = output[0];\n        for (var i = 0; i < input.length; i++) {\n          output[i] = checkIsDir(input[i])\n            ? input[i]\n            : path.resolve(dir, path.basename(input[i]));\n        }\n      } else if (output.length < input.length) {\n        output = output.concat(input.slice(output.length));\n      }\n    }\n  } else if (input.length) {\n    output = input;\n  } else if (opts.string) {\n    output = '-';\n  }\n\n  if (opts.datauri) {\n    config.datauri = opts.datauri;\n  }\n\n  // --folder\n  if (opts.folder) {\n    var ouputFolder = (output && output[0]) || opts.folder;\n    await optimizeFolder(config, opts.folder, ouputFolder);\n  }\n\n  // --input\n  if (input.length !== 0) {\n    // STDIN\n    if (input[0] === '-') {\n      return new Promise((resolve, reject) => {\n        var data = '',\n          file = output[0];\n\n        process.stdin\n          .on('data', (chunk) => (data += chunk))\n          .once('end', () =>\n            processSVGData(config, { input: 'string' }, data, file).then(\n              resolve,\n              reject\n            )\n          );\n      });\n      // file\n    } else {\n      await Promise.all(\n        input.map((file, n) => optimizeFile(config, file, output[n]))\n      );\n    }\n\n    // --string\n  } else if (opts.string) {\n    var data = decodeSVGDatauri(opts.string);\n\n    return processSVGData(config, { input: 'string' }, data, output[0]);\n  }\n}\n\n/**\n * Optimize SVG files in a directory.\n * @param {Object} config options\n * @param {string} dir input directory\n * @param {string} output output directory\n * @return {Promise}\n */\nfunction optimizeFolder(config, dir, output) {\n  if (!config.quiet) {\n    console.log(`Processing directory '${dir}':\\n`);\n  }\n  return fs.promises\n    .readdir(dir)\n    .then((files) => processDirectory(config, dir, files, output));\n}\n\n/**\n * Process given files, take only SVG.\n * @param {Object} config options\n * @param {string} dir input directory\n * @param {Array} files list of file names in the directory\n * @param {string} output output directory\n * @return {Promise}\n */\nfunction processDirectory(config, dir, files, output) {\n  // take only *.svg files, recursively if necessary\n  var svgFilesDescriptions = getFilesDescriptions(config, dir, files, output);\n\n  return svgFilesDescriptions.length\n    ? Promise.all(\n        svgFilesDescriptions.map((fileDescription) =>\n          optimizeFile(\n            config,\n            fileDescription.inputPath,\n            fileDescription.outputPath\n          )\n        )\n      )\n    : Promise.reject(\n        new Error(`No SVG files have been found in '${dir}' directory.`)\n      );\n}\n\n/**\n * Get svg files descriptions\n * @param {Object} config options\n * @param {string} dir input directory\n * @param {Array} files list of file names in the directory\n * @param {string} output output directory\n * @return {Array}\n */\nfunction getFilesDescriptions(config, dir, files, output) {\n  const filesInThisFolder = files\n    .filter(\n      (name) =>\n        regSVGFile.test(name) &&\n        !config.exclude.some((regExclude) => regExclude.test(name))\n    )\n    .map((name) => ({\n      inputPath: path.resolve(dir, name),\n      outputPath: path.resolve(output, name),\n    }));\n\n  return config.recursive\n    ? [].concat(\n        filesInThisFolder,\n        files\n          .filter((name) => checkIsDir(path.resolve(dir, name)))\n          .map((subFolderName) => {\n            const subFolderPath = path.resolve(dir, subFolderName);\n            const subFolderFiles = fs.readdirSync(subFolderPath);\n            const subFolderOutput = path.resolve(output, subFolderName);\n            return getFilesDescriptions(\n              config,\n              subFolderPath,\n              subFolderFiles,\n              subFolderOutput\n            );\n          })\n          .reduce((a, b) => [].concat(a, b), [])\n      )\n    : filesInThisFolder;\n}\n\n/**\n * Read SVG file and pass to processing.\n * @param {Object} config options\n * @param {string} file\n * @param {string} output\n * @return {Promise}\n */\nfunction optimizeFile(config, file, output) {\n  return fs.promises.readFile(file, 'utf8').then(\n    (data) =>\n      processSVGData(config, { input: 'file', path: file }, data, output, file),\n    (error) => checkOptimizeFileError(config, file, output, error)\n  );\n}\n\n/**\n * Optimize SVG data.\n * @param {Object} config options\n * @param {string} data SVG content to optimize\n * @param {string} output where to write optimized file\n * @param {string} [input] input file name (being used if output is a directory)\n * @return {Promise}\n */\nfunction processSVGData(config, info, data, output, input) {\n  var startTime = Date.now(),\n    prevFileSize = Buffer.byteLength(data, 'utf8');\n\n  const result = optimize(data, { ...config, ...info });\n  if (result.modernError) {\n    console.error(colors.red(result.modernError.toString()));\n    process.exit(1);\n  }\n  if (config.datauri) {\n    result.data = encodeSVGDatauri(result.data, config.datauri);\n  }\n  var resultFileSize = Buffer.byteLength(result.data, 'utf8'),\n    processingTime = Date.now() - startTime;\n\n  return writeOutput(input, output, result.data).then(\n    function () {\n      if (!config.quiet && output != '-') {\n        if (input) {\n          console.log(`\\n${path.basename(input)}:`);\n        }\n        printTimeInfo(processingTime);\n        printProfitInfo(prevFileSize, resultFileSize);\n      }\n    },\n    (error) =>\n      Promise.reject(\n        new Error(\n          error.code === 'ENOTDIR'\n            ? `Error: output '${output}' is not a directory.`\n            : error\n        )\n      )\n  );\n}\n\n/**\n * Write result of an optimization.\n * @param {string} input\n * @param {string} output output file name. '-' for stdout\n * @param {string} data data to write\n * @return {Promise}\n */\nfunction writeOutput(input, output, data) {\n  if (output == '-') {\n    console.log(data);\n    return Promise.resolve();\n  }\n\n  fs.mkdirSync(path.dirname(output), { recursive: true });\n\n  return fs.promises\n    .writeFile(output, data, 'utf8')\n    .catch((error) => checkWriteFileError(input, output, data, error));\n}\n\n/**\n * Write a time taken by optimization.\n * @param {number} time time in milliseconds.\n */\nfunction printTimeInfo(time) {\n  console.log(`Done in ${time} ms!`);\n}\n\n/**\n * Write optimizing information in human readable format.\n * @param {number} inBytes size before optimization.\n * @param {number} outBytes size after optimization.\n */\nfunction printProfitInfo(inBytes, outBytes) {\n  var profitPercents = 100 - (outBytes * 100) / inBytes;\n\n  console.log(\n    Math.round((inBytes / 1024) * 1000) / 1000 +\n      ' KiB' +\n      (profitPercents < 0 ? ' + ' : ' - ') +\n      colors.green(Math.abs(Math.round(profitPercents * 10) / 10) + '%') +\n      ' = ' +\n      Math.round((outBytes / 1024) * 1000) / 1000 +\n      ' KiB'\n  );\n}\n\n/**\n * Check for errors, if it's a dir optimize the dir.\n * @param {Object} config\n * @param {string} input\n * @param {string} output\n * @param {Error} error\n * @return {Promise}\n */\nfunction checkOptimizeFileError(config, input, output, error) {\n  if (error.code == 'EISDIR') {\n    return optimizeFolder(config, input, output);\n  } else if (error.code == 'ENOENT') {\n    return Promise.reject(\n      new Error(`Error: no such file or directory '${error.path}'.`)\n    );\n  }\n  return Promise.reject(error);\n}\n\n/**\n * Check for saving file error. If the output is a dir, then write file there.\n * @param {string} input\n * @param {string} output\n * @param {string} data\n * @param {Error} error\n * @return {Promise}\n */\nfunction checkWriteFileError(input, output, data, error) {\n  if (error.code == 'EISDIR' && input) {\n    return fs.promises.writeFile(\n      path.resolve(output, path.basename(input)),\n      data,\n      'utf8'\n    );\n  } else {\n    return Promise.reject(error);\n  }\n}\n\n/**\n * Show list of available plugins with short description.\n */\nfunction showAvailablePlugins() {\n  const list = Object.entries(pluginsMap)\n    .sort(([a], [b]) => a.localeCompare(b))\n    .map(([name, plugin]) => ` [ ${colors.green(name)} ] ${plugin.description}`)\n    .join('\\n');\n  console.log('Currently available plugins:\\n' + list);\n}\n\nmodule.exports.checkIsDir = checkIsDir;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}