{"ast":null,"code":"/**\n * @fileoverview Utility to get information about the execution environment.\n * @author Kai Cataldo\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst path = require(\"path\");\n\nconst spawn = require(\"cross-spawn\");\n\nconst os = require(\"os\");\n\nconst log = require(\"../shared/logging\");\n\nconst packageJson = require(\"../../package.json\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Generates and returns execution environment information.\n * @returns {string} A string that contains execution environment information.\n */\n\n\nfunction environment() {\n  const cache = new Map();\n  /**\n   * Checks if a path is a child of a directory.\n   * @param {string} parentPath The parent path to check.\n   * @param {string} childPath The path to check.\n   * @returns {boolean} Whether or not the given path is a child of a directory.\n   */\n\n  function isChildOfDirectory(parentPath, childPath) {\n    return !path.relative(parentPath, childPath).startsWith(\"..\");\n  }\n  /**\n   * Synchronously executes a shell command and formats the result.\n   * @param {string} cmd The command to execute.\n   * @param {Array} args The arguments to be executed with the command.\n   * @throws {Error} As may be collected by `cross-spawn.sync`.\n   * @returns {string} The version returned by the command.\n   */\n\n\n  function execCommand(cmd, args) {\n    const key = [cmd, ...args].join(\" \");\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n\n    const process = spawn.sync(cmd, args, {\n      encoding: \"utf8\"\n    });\n\n    if (process.error) {\n      throw process.error;\n    }\n\n    const result = process.stdout.trim();\n    cache.set(key, result);\n    return result;\n  }\n  /**\n   * Normalizes a version number.\n   * @param {string} versionStr The string to normalize.\n   * @returns {string} The normalized version number.\n   */\n\n\n  function normalizeVersionStr(versionStr) {\n    return versionStr.startsWith(\"v\") ? versionStr : `v${versionStr}`;\n  }\n  /**\n   * Gets bin version.\n   * @param {string} bin The bin to check.\n   * @throws {Error} As may be collected by `cross-spawn.sync`.\n   * @returns {string} The normalized version returned by the command.\n   */\n\n\n  function getBinVersion(bin) {\n    const binArgs = [\"--version\"];\n\n    try {\n      return normalizeVersionStr(execCommand(bin, binArgs));\n    } catch (e) {\n      log.error(`Error finding ${bin} version running the command \\`${bin} ${binArgs.join(\" \")}\\``);\n      throw e;\n    }\n  }\n  /**\n   * Gets installed npm package version.\n   * @param {string} pkg The package to check.\n   * @param {boolean} global Whether to check globally or not.\n   * @throws {Error} As may be collected by `cross-spawn.sync`.\n   * @returns {string} The normalized version returned by the command.\n   */\n\n\n  function getNpmPackageVersion(pkg) {\n    let {\n      global = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const npmBinArgs = [\"bin\", \"-g\"];\n    const npmLsArgs = [\"ls\", \"--depth=0\", \"--json\", \"eslint\"];\n\n    if (global) {\n      npmLsArgs.push(\"-g\");\n    }\n\n    try {\n      const parsedStdout = JSON.parse(execCommand(\"npm\", npmLsArgs));\n      /*\n       * Checking globally returns an empty JSON object, while local checks\n       * include the name and version of the local project.\n       */\n\n      if (Object.keys(parsedStdout).length === 0 || !(parsedStdout.dependencies && parsedStdout.dependencies.eslint)) {\n        return \"Not found\";\n      }\n\n      const [, processBinPath] = process.argv;\n      let npmBinPath;\n\n      try {\n        npmBinPath = execCommand(\"npm\", npmBinArgs);\n      } catch (e) {\n        log.error(`Error finding npm binary path when running command \\`npm ${npmBinArgs.join(\" \")}\\``);\n        throw e;\n      }\n\n      const isGlobal = isChildOfDirectory(npmBinPath, processBinPath);\n      let pkgVersion = parsedStdout.dependencies.eslint.version;\n\n      if (global && isGlobal || !global && !isGlobal) {\n        pkgVersion += \" (Currently used)\";\n      }\n\n      return normalizeVersionStr(pkgVersion);\n    } catch (e) {\n      log.error(`Error finding ${pkg} version running the command \\`npm ${npmLsArgs.join(\" \")}\\``);\n      throw e;\n    }\n  }\n\n  return [\"Environment Info:\", \"\", `Node version: ${getBinVersion(\"node\")}`, `npm version: ${getBinVersion(\"npm\")}`, `Local ESLint version: ${getNpmPackageVersion(\"eslint\", {\n    global: false\n  })}`, `Global ESLint version: ${getNpmPackageVersion(\"eslint\", {\n    global: true\n  })}`, `Operating System: ${os.platform()} ${os.release()}`].join(\"\\n\");\n}\n/**\n * Returns version of currently executing ESLint.\n * @returns {string} The version from the currently executing ESLint's package.json.\n */\n\n\nfunction version() {\n  return `v${packageJson.version}`;\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  environment,\n  version\n};","map":{"version":3,"names":["path","require","spawn","os","log","packageJson","environment","cache","Map","isChildOfDirectory","parentPath","childPath","relative","startsWith","execCommand","cmd","args","key","join","has","get","process","sync","encoding","error","result","stdout","trim","set","normalizeVersionStr","versionStr","getBinVersion","bin","binArgs","e","getNpmPackageVersion","pkg","global","npmBinArgs","npmLsArgs","push","parsedStdout","JSON","parse","Object","keys","length","dependencies","eslint","processBinPath","argv","npmBinPath","isGlobal","pkgVersion","version","platform","release","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/shared/runtime-info.js"],"sourcesContent":["/**\n * @fileoverview Utility to get information about the execution environment.\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst path = require(\"path\");\nconst spawn = require(\"cross-spawn\");\nconst os = require(\"os\");\nconst log = require(\"../shared/logging\");\nconst packageJson = require(\"../../package.json\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Generates and returns execution environment information.\n * @returns {string} A string that contains execution environment information.\n */\nfunction environment() {\n    const cache = new Map();\n\n    /**\n     * Checks if a path is a child of a directory.\n     * @param {string} parentPath The parent path to check.\n     * @param {string} childPath The path to check.\n     * @returns {boolean} Whether or not the given path is a child of a directory.\n     */\n    function isChildOfDirectory(parentPath, childPath) {\n        return !path.relative(parentPath, childPath).startsWith(\"..\");\n    }\n\n    /**\n     * Synchronously executes a shell command and formats the result.\n     * @param {string} cmd The command to execute.\n     * @param {Array} args The arguments to be executed with the command.\n     * @throws {Error} As may be collected by `cross-spawn.sync`.\n     * @returns {string} The version returned by the command.\n     */\n    function execCommand(cmd, args) {\n        const key = [cmd, ...args].join(\" \");\n\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n\n        const process = spawn.sync(cmd, args, { encoding: \"utf8\" });\n\n        if (process.error) {\n            throw process.error;\n        }\n\n        const result = process.stdout.trim();\n\n        cache.set(key, result);\n        return result;\n    }\n\n    /**\n     * Normalizes a version number.\n     * @param {string} versionStr The string to normalize.\n     * @returns {string} The normalized version number.\n     */\n    function normalizeVersionStr(versionStr) {\n        return versionStr.startsWith(\"v\") ? versionStr : `v${versionStr}`;\n    }\n\n    /**\n     * Gets bin version.\n     * @param {string} bin The bin to check.\n     * @throws {Error} As may be collected by `cross-spawn.sync`.\n     * @returns {string} The normalized version returned by the command.\n     */\n    function getBinVersion(bin) {\n        const binArgs = [\"--version\"];\n\n        try {\n            return normalizeVersionStr(execCommand(bin, binArgs));\n        } catch (e) {\n            log.error(`Error finding ${bin} version running the command \\`${bin} ${binArgs.join(\" \")}\\``);\n            throw e;\n        }\n    }\n\n    /**\n     * Gets installed npm package version.\n     * @param {string} pkg The package to check.\n     * @param {boolean} global Whether to check globally or not.\n     * @throws {Error} As may be collected by `cross-spawn.sync`.\n     * @returns {string} The normalized version returned by the command.\n     */\n    function getNpmPackageVersion(pkg, { global = false } = {}) {\n        const npmBinArgs = [\"bin\", \"-g\"];\n        const npmLsArgs = [\"ls\", \"--depth=0\", \"--json\", \"eslint\"];\n\n        if (global) {\n            npmLsArgs.push(\"-g\");\n        }\n\n        try {\n            const parsedStdout = JSON.parse(execCommand(\"npm\", npmLsArgs));\n\n            /*\n             * Checking globally returns an empty JSON object, while local checks\n             * include the name and version of the local project.\n             */\n            if (Object.keys(parsedStdout).length === 0 || !(parsedStdout.dependencies && parsedStdout.dependencies.eslint)) {\n                return \"Not found\";\n            }\n\n            const [, processBinPath] = process.argv;\n            let npmBinPath;\n\n            try {\n                npmBinPath = execCommand(\"npm\", npmBinArgs);\n            } catch (e) {\n                log.error(`Error finding npm binary path when running command \\`npm ${npmBinArgs.join(\" \")}\\``);\n                throw e;\n            }\n\n            const isGlobal = isChildOfDirectory(npmBinPath, processBinPath);\n            let pkgVersion = parsedStdout.dependencies.eslint.version;\n\n            if ((global && isGlobal) || (!global && !isGlobal)) {\n                pkgVersion += \" (Currently used)\";\n            }\n\n            return normalizeVersionStr(pkgVersion);\n        } catch (e) {\n            log.error(`Error finding ${pkg} version running the command \\`npm ${npmLsArgs.join(\" \")}\\``);\n            throw e;\n        }\n    }\n\n    return [\n        \"Environment Info:\",\n        \"\",\n        `Node version: ${getBinVersion(\"node\")}`,\n        `npm version: ${getBinVersion(\"npm\")}`,\n        `Local ESLint version: ${getNpmPackageVersion(\"eslint\", { global: false })}`,\n        `Global ESLint version: ${getNpmPackageVersion(\"eslint\", { global: true })}`,\n        `Operating System: ${os.platform()} ${os.release()}`\n    ].join(\"\\n\");\n}\n\n/**\n * Returns version of currently executing ESLint.\n * @returns {string} The version from the currently executing ESLint's package.json.\n */\nfunction version() {\n    return `v${packageJson.version}`;\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    environment,\n    version\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}