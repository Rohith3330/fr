{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\src\\\\screens\\\\upload\\\\Upload.js\",\n    _s = $RefreshSig$();\n\nimport * as tf from \"@tensorflow/tfjs\";\nimport idx2class1 from \"./classIdxDict2\";\nimport React, { useState, useEffect } from \"react\";\nimport NavBar from \"./Navbar.js\"; //import \"./App.css\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Find = () => {\n  _s();\n\n  // usestate for setting a javascript\n  // object for storing and using data\n  const [file, setFile] = useState(null); //   const [model, setModel] = useState(null);\n\n  const [processing, setProcessing] = useState(false);\n  const [topkPredNames, setPrediction] = useState(null);\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [model, setModel] = useState(null);\n\n  function readImage(file) {\n    return new Promise((rs, rj) => {\n      const fileReader = new FileReader();\n\n      fileReader.onload = () => rs(fileReader.result);\n\n      fileReader.onerror = () => rj(fileReader.error);\n\n      fileReader.readAsDataURL(file);\n    });\n  }\n\n  async function handleImgUpload(event) {\n    const {\n      target: {\n        files\n      }\n    } = event;\n    const _file = files[0];\n    const fileData = await readImage(_file);\n    setFile(fileData);\n    setProcessing(true);\n  }\n\n  const MODEL_HTTP_URL = \"api/pokeml/classify\";\n  const MODEL_INDEXEDDB_URL = \"indexeddb://poke-model\";\n\n  const getTopKPred = (pred, k) => {\n    const predIdx = [];\n    const predNames = [];\n    const topkPred = [...pred].sort((a, b) => b - a).slice(0, k);\n    console.log(topkPred);\n    topkPred.map(i => predIdx.push(pred.indexOf(i)));\n    predIdx.map(i => predNames.push(idx2class1[i]));\n    console.log(predNames);\n    return predNames;\n  };\n\n  const getTopKPredPokeObj = (pred, k) => {\n    const foundPokeObj = [];\n    const predPokeName = getTopKPred(pred, k);\n    console.log(predPokeName); // predPokeName.map((name) =>\n    //   foundPokeObj.push(pokeObjFromName(name, pokeObjList))\n    // );\n\n    return predPokeName;\n  };\n\n  useEffect(() => {\n    async function fetchModel() {\n      try {\n        const localClassifierModel = await tf.loadLayersModel(MODEL_INDEXEDDB_URL);\n        setModel(localClassifierModel);\n        console.log(\"Model loaded from IndexedDB\");\n      } catch (e) {\n        try {\n          const classifierModel = await tf.loadLayersModel(MODEL_HTTP_URL);\n          console.log(classifierModel);\n          setModel(classifierModel);\n          console.log(\"Model Loaded\");\n          await classifierModel.save(MODEL_INDEXEDDB_URL);\n          console.log(\"Model saved to IndexedDB\");\n        } catch (e) {\n          console.log(\"Unable to load model at all: \", e);\n        }\n      }\n    }\n\n    fetchModel();\n  }, []);\n  useEffect(() => {\n    async function predict() {\n      if (imageLoaded && file) {\n        const imageElement = document.createElement(\"img\");\n        imageElement.src = file;\n\n        imageElement.onload = async () => {\n          const tensor = tf.browser.fromPixels(imageElement).resizeNearestNeighbor([120, 120]).toFloat().sub(127).div(127).expandDims();\n          console.log(\"fuck\");\n          const y_pred = await model.predict(tensor).data(); //   console.log(y_pred);\n          // console.log(pokemonState);\n\n          const topkPredNames = getTopKPredPokeObj(y_pred, 3); //   dispatch(setePredictions({ predictions: topkPredNames }));\n\n          setPrediction(topkPredNames);\n          console.log(topkPredNames);\n          console.log(\"-----------\"); //   console.log(prediction);\n\n          setProcessing(false);\n          setImageLoaded(false);\n          return topkPredNames; //   setPrediction(parseInt(prediction, 10));\n        };\n      }\n    }\n\n    predict();\n  }, [imageLoaded, model, file]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"File-input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"Form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"upload-image\",\n        children: \"Upload image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"image-selector\",\n        type: \"file\",\n        name: \"upload-image\",\n        accept: \"image/*\",\n        className: \"File-selector\",\n        onChange: handleImgUpload,\n        disabled: !model || processing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Img-display-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        onLoad: () => {\n          setImageLoaded(true);\n        },\n        alt: \"\",\n        src: file\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Img-processing-container\",\n      children: processing ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this) : topkPredNames !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: topkPredNames[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: topkPredNames[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: topkPredNames[2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Find, \"pqC20dV577bq3i4rzejJlgrgdVc=\");\n\n_c = Find;\nexport default Find;\n\nvar _c;\n\n$RefreshReg$(_c, \"Find\");","map":{"version":3,"names":["tf","idx2class1","React","useState","useEffect","NavBar","Find","file","setFile","processing","setProcessing","topkPredNames","setPrediction","imageLoaded","setImageLoaded","model","setModel","readImage","Promise","rs","rj","fileReader","FileReader","onload","result","onerror","error","readAsDataURL","handleImgUpload","event","target","files","_file","fileData","MODEL_HTTP_URL","MODEL_INDEXEDDB_URL","getTopKPred","pred","k","predIdx","predNames","topkPred","sort","a","b","slice","console","log","map","i","push","indexOf","getTopKPredPokeObj","foundPokeObj","predPokeName","fetchModel","localClassifierModel","loadLayersModel","e","classifierModel","save","predict","imageElement","document","createElement","src","tensor","browser","fromPixels","resizeNearestNeighbor","toFloat","sub","div","expandDims","y_pred","data"],"sources":["C:/Users/Rohith/mern/frontend/src/screens/upload/Upload.js"],"sourcesContent":["import * as tf from \"@tensorflow/tfjs\";\r\nimport idx2class1 from \"./classIdxDict2\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport NavBar from \"./Navbar.js\";\r\n//import \"./App.css\";\r\n\r\nconst Find = () => {\r\n  // usestate for setting a javascript\r\n  // object for storing and using data\r\n  const [file, setFile] = useState(null);\r\n  //   const [model, setModel] = useState(null);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [topkPredNames, setPrediction] = useState(null);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n\r\n  const [model, setModel] = useState(null);\r\n  function readImage(file) {\r\n    return new Promise((rs, rj) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.onload = () => rs(fileReader.result);\r\n      fileReader.onerror = () => rj(fileReader.error);\r\n      fileReader.readAsDataURL(file);\r\n    });\r\n  }\r\n\r\n  async function handleImgUpload(event) {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n\r\n    const _file = files[0];\r\n    const fileData = await readImage(_file);\r\n    setFile(fileData);\r\n    setProcessing(true);\r\n  }\r\n\r\n  const MODEL_HTTP_URL = \"api/pokeml/classify\";\r\n  const MODEL_INDEXEDDB_URL = \"indexeddb://poke-model\";\r\n\r\n  const getTopKPred = (pred, k) => {\r\n    const predIdx = [];\r\n    const predNames = [];\r\n\r\n    const topkPred = [...pred].sort((a, b) => b - a).slice(0, k);\r\n    console.log(topkPred);\r\n    topkPred.map((i) => predIdx.push(pred.indexOf(i)));\r\n    predIdx.map((i) => predNames.push(idx2class1[i]));\r\n    console.log(predNames);\r\n    return predNames;\r\n  };\r\n\r\n  const getTopKPredPokeObj = (pred, k) => {\r\n    const foundPokeObj = [];\r\n    const predPokeName = getTopKPred(pred, k);\r\n    console.log(predPokeName);\r\n    // predPokeName.map((name) =>\r\n    //   foundPokeObj.push(pokeObjFromName(name, pokeObjList))\r\n    // );\r\n\r\n    return predPokeName;\r\n  };\r\n  useEffect(() => {\r\n    async function fetchModel() {\r\n      try {\r\n        const localClassifierModel = await tf.loadLayersModel(\r\n          MODEL_INDEXEDDB_URL\r\n        );\r\n\r\n        setModel(localClassifierModel);\r\n        console.log(\"Model loaded from IndexedDB\");\r\n      } catch (e) {\r\n        try {\r\n          const classifierModel = await tf.loadLayersModel(MODEL_HTTP_URL);\r\n\r\n          console.log(classifierModel);\r\n          setModel(classifierModel);\r\n          console.log(\"Model Loaded\");\r\n          await classifierModel.save(MODEL_INDEXEDDB_URL);\r\n          console.log(\"Model saved to IndexedDB\");\r\n        } catch (e) {\r\n          console.log(\"Unable to load model at all: \", e);\r\n        }\r\n      }\r\n    }\r\n    fetchModel();\r\n  }, []);\r\n  useEffect(() => {\r\n    async function predict() {\r\n      if (imageLoaded && file) {\r\n        const imageElement = document.createElement(\"img\");\r\n        imageElement.src = file;\r\n\r\n        imageElement.onload = async () => {\r\n          const tensor = tf.browser\r\n            .fromPixels(imageElement)\r\n            .resizeNearestNeighbor([120, 120])\r\n            .toFloat()\r\n            .sub(127)\r\n            .div(127)\r\n            .expandDims();\r\n\r\n          console.log(\"fuck\");\r\n          const y_pred = await model.predict(tensor).data();\r\n          //   console.log(y_pred);\r\n          // console.log(pokemonState);\r\n\r\n          const topkPredNames = getTopKPredPokeObj(y_pred, 3);\r\n\r\n          //   dispatch(setePredictions({ predictions: topkPredNames }));\r\n          setPrediction(topkPredNames);\r\n          console.log(topkPredNames);\r\n          console.log(\"-----------\");\r\n          //   console.log(prediction);\r\n          setProcessing(false);\r\n          setImageLoaded(false);\r\n          return topkPredNames;\r\n          //   setPrediction(parseInt(prediction, 10));\r\n        };\r\n      }\r\n    }\r\n\r\n    predict();\r\n  }, [imageLoaded, model, file]);\r\n\r\n  return (\r\n    <div className=\"File-input-container\">\r\n      <form className=\"Form\">\r\n        <label htmlFor=\"upload-image\">Upload image</label>\r\n        <input\r\n          id=\"image-selector\"\r\n          type=\"file\"\r\n          name=\"upload-image\"\r\n          accept=\"image/*\"\r\n          className=\"File-selector\"\r\n          onChange={handleImgUpload}\r\n          disabled={!model || processing}\r\n        />\r\n      </form>\r\n      <div className=\"Img-display-container\">\r\n        <img\r\n          onLoad={() => {\r\n            setImageLoaded(true);\r\n          }}\r\n          alt=\"\"\r\n          src={file}\r\n        />\r\n      </div>\r\n      <div className=\"Img-processing-container\">\r\n        {processing ? (\r\n          <p>Loading ...</p>\r\n        ) : topkPredNames !== null ? (\r\n          <div>\r\n            <p>{topkPredNames[0]}</p>\r\n            <p>{topkPredNames[1]}</p>\r\n            <p>{topkPredNames[2]}</p>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Find;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}