{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  enum: ['bool', 'boolean'],\n  type: 'string'\n}];\n\nconst create = context => {\n  const longForm = (context.options[0] || 'boolean') === 'boolean';\n  return {\n    BooleanTypeAnnotation(node) {\n      const diff = node.range[1] - node.range[0];\n\n      if (longForm && diff === 4) {\n        context.report({\n          fix(fixer) {\n            return fixer.replaceText(node, 'boolean');\n          },\n\n          message: 'Use \"boolean\", not \"bool\"',\n          node\n        });\n      }\n\n      if (!longForm && diff !== 4) {\n        context.report({\n          fix(fixer) {\n            return fixer.replaceText(node, 'bool');\n          },\n\n          message: 'Use \"bool\", not \"boolean\"',\n          node\n        });\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  meta: {\n    fixable: 'code'\n  },\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","schema","enum","type","create","context","longForm","options","BooleanTypeAnnotation","node","diff","range","report","fix","fixer","replaceText","message","_default","meta","fixable","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/booleanStyle.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  enum: ['bool', 'boolean'],\n  type: 'string'\n}];\n\nconst create = context => {\n  const longForm = (context.options[0] || 'boolean') === 'boolean';\n  return {\n    BooleanTypeAnnotation(node) {\n      const diff = node.range[1] - node.range[0];\n\n      if (longForm && diff === 4) {\n        context.report({\n          fix(fixer) {\n            return fixer.replaceText(node, 'boolean');\n          },\n\n          message: 'Use \"boolean\", not \"bool\"',\n          node\n        });\n      }\n\n      if (!longForm && diff !== 4) {\n        context.report({\n          fix(fixer) {\n            return fixer.replaceText(node, 'bool');\n          },\n\n          message: 'Use \"bool\", not \"boolean\"',\n          node\n        });\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  meta: {\n    fixable: 'code'\n  },\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,MAAM,GAAG,CAAC;EACdC,IAAI,EAAE,CAAC,MAAD,EAAS,SAAT,CADQ;EAEdC,IAAI,EAAE;AAFQ,CAAD,CAAf;;AAKA,MAAMC,MAAM,GAAGC,OAAO,IAAI;EACxB,MAAMC,QAAQ,GAAG,CAACD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,SAAvB,MAAsC,SAAvD;EACA,OAAO;IACLC,qBAAqB,CAACC,IAAD,EAAO;MAC1B,MAAMC,IAAI,GAAGD,IAAI,CAACE,KAAL,CAAW,CAAX,IAAgBF,IAAI,CAACE,KAAL,CAAW,CAAX,CAA7B;;MAEA,IAAIL,QAAQ,IAAII,IAAI,KAAK,CAAzB,EAA4B;QAC1BL,OAAO,CAACO,MAAR,CAAe;UACbC,GAAG,CAACC,KAAD,EAAQ;YACT,OAAOA,KAAK,CAACC,WAAN,CAAkBN,IAAlB,EAAwB,SAAxB,CAAP;UACD,CAHY;;UAKbO,OAAO,EAAE,2BALI;UAMbP;QANa,CAAf;MAQD;;MAED,IAAI,CAACH,QAAD,IAAaI,IAAI,KAAK,CAA1B,EAA6B;QAC3BL,OAAO,CAACO,MAAR,CAAe;UACbC,GAAG,CAACC,KAAD,EAAQ;YACT,OAAOA,KAAK,CAACC,WAAN,CAAkBN,IAAlB,EAAwB,MAAxB,CAAP;UACD,CAHY;;UAKbO,OAAO,EAAE,2BALI;UAMbP;QANa,CAAf;MAQD;IACF;;EAzBI,CAAP;AA4BD,CA9BD;;AAgCA,IAAIQ,QAAQ,GAAG;EACbb,MADa;EAEbc,IAAI,EAAE;IACJC,OAAO,EAAE;EADL,CAFO;EAKblB;AALa,CAAf;AAOAH,OAAO,CAACE,OAAR,GAAkBiB,QAAlB;AACAG,MAAM,CAACtB,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}