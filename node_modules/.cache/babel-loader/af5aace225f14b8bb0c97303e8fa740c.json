{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n/**\n * @fileoverview Performs validity check on anchor hrefs. Warns when anchors are used as buttons.\n * @author Almero Steyn\n * \n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\n\nvar allAspects = ['noHref', 'invalidHref', 'preferButton'];\nvar preferButtonErrorMessage = 'Anchor used as a button. Anchors are primarily expected to navigate. Use the button element instead. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md';\nvar noHrefErrorMessage = 'The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md';\nvar invalidHrefErrorMessage = 'The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md';\nvar schema = (0, _schemas.generateObjSchema)({\n  components: _schemas.arraySchema,\n  specialLink: _schemas.arraySchema,\n  aspects: (0, _schemas.enumArraySchema)(allAspects, 1)\n});\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md',\n      description: 'Enforce all anchors are valid, navigable elements.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var attributes = node.attributes;\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typeCheck = ['a'].concat(componentOptions);\n        var nodeType = elementType(node); // Only check anchor elements and custom types.\n\n        if (typeCheck.indexOf(nodeType) === -1) {\n          return;\n        } // Set up the rule aspects to check.\n\n\n        var aspects = options.aspects || allAspects; // Create active aspect flag object. Failing checks will only report\n        // if the related flag is set to true.\n\n        var activeAspects = {};\n        allAspects.forEach(function (aspect) {\n          activeAspects[aspect] = aspects.indexOf(aspect) !== -1;\n        });\n        var propOptions = options.specialLink || [];\n        var propsToValidate = ['href'].concat(propOptions);\n        var values = propsToValidate.map(function (prop) {\n          return (0, _jsxAstUtils.getProp)(node.attributes, prop);\n        }).map(function (prop) {\n          return (0, _jsxAstUtils.getPropValue)(prop);\n        }); // Checks if any actual or custom href prop is provided.\n\n        var hasAnyHref = values.filter(function (value) {\n          return value === undefined || value === null;\n        }).length !== values.length; // Need to check for spread operator as props can be spread onto the element\n        // leading to an incorrect validation error.\n\n        var hasSpreadOperator = attributes.filter(function (prop) {\n          return prop.type === 'JSXSpreadAttribute';\n        }).length > 0;\n        var onClick = (0, _jsxAstUtils.getProp)(attributes, 'onClick'); // When there is no href at all, specific scenarios apply:\n\n        if (!hasAnyHref) {\n          // If no spread operator is found and no onClick event is present\n          // it is a link without href.\n          if (!hasSpreadOperator && activeAspects.noHref && (!onClick || onClick && !activeAspects.preferButton)) {\n            context.report({\n              node,\n              message: noHrefErrorMessage\n            });\n          } // If no spread operator is found but an onClick is preset it should be a button.\n\n\n          if (!hasSpreadOperator && onClick && activeAspects.preferButton) {\n            context.report({\n              node,\n              message: preferButtonErrorMessage\n            });\n          }\n\n          return;\n        } // Hrefs have been found, now check for validity.\n\n\n        var invalidHrefValues = values.filter(function (value) {\n          return value !== undefined && value !== null;\n        }).filter(function (value) {\n          return typeof value === 'string' && (!value.length || value === '#' || /^\\W*?javascript:/.test(value));\n        });\n\n        if (invalidHrefValues.length !== 0) {\n          // If an onClick is found it should be a button, otherwise it is an invalid link.\n          if (onClick && activeAspects.preferButton) {\n            context.report({\n              node,\n              message: preferButtonErrorMessage\n            });\n          } else if (activeAspects.invalidHref) {\n            context.report({\n              node,\n              message: invalidHrefErrorMessage\n            });\n          }\n        }\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_jsxAstUtils","_schemas","_getElementType","allAspects","preferButtonErrorMessage","noHrefErrorMessage","invalidHrefErrorMessage","schema","generateObjSchema","components","arraySchema","specialLink","aspects","enumArraySchema","_default","meta","docs","url","description","create","context","elementType","JSXOpeningElement","node","attributes","options","componentOptions","typeCheck","concat","nodeType","indexOf","activeAspects","forEach","aspect","propOptions","propsToValidate","values","map","prop","getProp","getPropValue","hasAnyHref","filter","undefined","length","hasSpreadOperator","type","onClick","noHref","preferButton","report","message","invalidHrefValues","test","invalidHref","module","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/lib/rules/anchor-is-valid.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\n/**\n * @fileoverview Performs validity check on anchor hrefs. Warns when anchors are used as buttons.\n * @author Almero Steyn\n * \n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\nvar allAspects = ['noHref', 'invalidHref', 'preferButton'];\nvar preferButtonErrorMessage = 'Anchor used as a button. Anchors are primarily expected to navigate. Use the button element instead. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md';\nvar noHrefErrorMessage = 'The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md';\nvar invalidHrefErrorMessage = 'The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md';\nvar schema = (0, _schemas.generateObjSchema)({\n  components: _schemas.arraySchema,\n  specialLink: _schemas.arraySchema,\n  aspects: (0, _schemas.enumArraySchema)(allAspects, 1)\n});\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md',\n      description: 'Enforce all anchors are valid, navigable elements.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var attributes = node.attributes;\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typeCheck = ['a'].concat(componentOptions);\n        var nodeType = elementType(node); // Only check anchor elements and custom types.\n\n        if (typeCheck.indexOf(nodeType) === -1) {\n          return;\n        } // Set up the rule aspects to check.\n\n\n        var aspects = options.aspects || allAspects; // Create active aspect flag object. Failing checks will only report\n        // if the related flag is set to true.\n\n        var activeAspects = {};\n        allAspects.forEach(function (aspect) {\n          activeAspects[aspect] = aspects.indexOf(aspect) !== -1;\n        });\n        var propOptions = options.specialLink || [];\n        var propsToValidate = ['href'].concat(propOptions);\n        var values = propsToValidate.map(function (prop) {\n          return (0, _jsxAstUtils.getProp)(node.attributes, prop);\n        }).map(function (prop) {\n          return (0, _jsxAstUtils.getPropValue)(prop);\n        }); // Checks if any actual or custom href prop is provided.\n\n        var hasAnyHref = values.filter(function (value) {\n          return value === undefined || value === null;\n        }).length !== values.length; // Need to check for spread operator as props can be spread onto the element\n        // leading to an incorrect validation error.\n\n        var hasSpreadOperator = attributes.filter(function (prop) {\n          return prop.type === 'JSXSpreadAttribute';\n        }).length > 0;\n        var onClick = (0, _jsxAstUtils.getProp)(attributes, 'onClick'); // When there is no href at all, specific scenarios apply:\n\n        if (!hasAnyHref) {\n          // If no spread operator is found and no onClick event is present\n          // it is a link without href.\n          if (!hasSpreadOperator && activeAspects.noHref && (!onClick || onClick && !activeAspects.preferButton)) {\n            context.report({\n              node,\n              message: noHrefErrorMessage\n            });\n          } // If no spread operator is found but an onClick is preset it should be a button.\n\n\n          if (!hasSpreadOperator && onClick && activeAspects.preferButton) {\n            context.report({\n              node,\n              message: preferButtonErrorMessage\n            });\n          }\n\n          return;\n        } // Hrefs have been found, now check for validity.\n\n\n        var invalidHrefValues = values.filter(function (value) {\n          return value !== undefined && value !== null;\n        }).filter(function (value) {\n          return typeof value === 'string' && (!value.length || value === '#' || /^\\W*?javascript:/.test(value));\n        });\n\n        if (invalidHrefValues.length !== 0) {\n          // If an onClick is found it should be a button, otherwise it is an invalid link.\n          if (onClick && activeAspects.preferButton) {\n            context.report({\n              node,\n              message: preferButtonErrorMessage\n            });\n          } else if (activeAspects.invalidHref) {\n            context.report({\n              node,\n              message: invalidHrefErrorMessage\n            });\n          }\n        }\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,YAAY,GAAGL,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIM,QAAQ,GAAGN,OAAO,CAAC,iBAAD,CAAtB;;AAEA,IAAIO,eAAe,GAAGR,sBAAsB,CAACC,OAAO,CAAC,wBAAD,CAAR,CAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIQ,UAAU,GAAG,CAAC,QAAD,EAAW,aAAX,EAA0B,cAA1B,CAAjB;AACA,IAAIC,wBAAwB,GAAG,+MAA/B;AACA,IAAIC,kBAAkB,GAAG,0WAAzB;AACA,IAAIC,uBAAuB,GAAG,mWAA9B;AACA,IAAIC,MAAM,GAAG,CAAC,GAAGN,QAAQ,CAACO,iBAAb,EAAgC;EAC3CC,UAAU,EAAER,QAAQ,CAACS,WADsB;EAE3CC,WAAW,EAAEV,QAAQ,CAACS,WAFqB;EAG3CE,OAAO,EAAE,CAAC,GAAGX,QAAQ,CAACY,eAAb,EAA8BV,UAA9B,EAA0C,CAA1C;AAHkC,CAAhC,CAAb;AAKA,IAAIW,QAAQ,GAAG;EACbC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,GAAG,EAAE,8FADD;MAEJC,WAAW,EAAE;IAFT,CADF;IAKJX,MAAM,EAAE,CAACA,MAAD;EALJ,CADO;EAQbY,MAAM,EAAE,SAASA,MAAT,CAAgBC,OAAhB,EAAyB;IAC/B,IAAIC,WAAW,GAAG,CAAC,GAAGnB,eAAe,CAAC,SAAD,CAAnB,EAAgCkB,OAAhC,CAAlB;IACA,OAAO;MACLE,iBAAiB,EAAE,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;QAClD,IAAIC,UAAU,GAAGD,IAAI,CAACC,UAAtB;QACA,IAAIC,OAAO,GAAGL,OAAO,CAACK,OAAR,CAAgB,CAAhB,KAAsB,EAApC;QACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAChB,UAAR,IAAsB,EAA7C;QACA,IAAIkB,SAAS,GAAG,CAAC,GAAD,EAAMC,MAAN,CAAaF,gBAAb,CAAhB;QACA,IAAIG,QAAQ,GAAGR,WAAW,CAACE,IAAD,CAA1B,CALkD,CAKhB;;QAElC,IAAII,SAAS,CAACG,OAAV,CAAkBD,QAAlB,MAAgC,CAAC,CAArC,EAAwC;UACtC;QACD,CATiD,CAShD;;;QAGF,IAAIjB,OAAO,GAAGa,OAAO,CAACb,OAAR,IAAmBT,UAAjC,CAZkD,CAYL;QAC7C;;QAEA,IAAI4B,aAAa,GAAG,EAApB;QACA5B,UAAU,CAAC6B,OAAX,CAAmB,UAAUC,MAAV,EAAkB;UACnCF,aAAa,CAACE,MAAD,CAAb,GAAwBrB,OAAO,CAACkB,OAAR,CAAgBG,MAAhB,MAA4B,CAAC,CAArD;QACD,CAFD;QAGA,IAAIC,WAAW,GAAGT,OAAO,CAACd,WAAR,IAAuB,EAAzC;QACA,IAAIwB,eAAe,GAAG,CAAC,MAAD,EAASP,MAAT,CAAgBM,WAAhB,CAAtB;QACA,IAAIE,MAAM,GAAGD,eAAe,CAACE,GAAhB,CAAoB,UAAUC,IAAV,EAAgB;UAC/C,OAAO,CAAC,GAAGtC,YAAY,CAACuC,OAAjB,EAA0BhB,IAAI,CAACC,UAA/B,EAA2Cc,IAA3C,CAAP;QACD,CAFY,EAEVD,GAFU,CAEN,UAAUC,IAAV,EAAgB;UACrB,OAAO,CAAC,GAAGtC,YAAY,CAACwC,YAAjB,EAA+BF,IAA/B,CAAP;QACD,CAJY,CAAb,CArBkD,CAyB9C;;QAEJ,IAAIG,UAAU,GAAGL,MAAM,CAACM,MAAP,CAAc,UAAU3C,KAAV,EAAiB;UAC9C,OAAOA,KAAK,KAAK4C,SAAV,IAAuB5C,KAAK,KAAK,IAAxC;QACD,CAFgB,EAEd6C,MAFc,KAEHR,MAAM,CAACQ,MAFrB,CA3BkD,CA6BrB;QAC7B;;QAEA,IAAIC,iBAAiB,GAAGrB,UAAU,CAACkB,MAAX,CAAkB,UAAUJ,IAAV,EAAgB;UACxD,OAAOA,IAAI,CAACQ,IAAL,KAAc,oBAArB;QACD,CAFuB,EAErBF,MAFqB,GAEZ,CAFZ;QAGA,IAAIG,OAAO,GAAG,CAAC,GAAG/C,YAAY,CAACuC,OAAjB,EAA0Bf,UAA1B,EAAsC,SAAtC,CAAd,CAnCkD,CAmCc;;QAEhE,IAAI,CAACiB,UAAL,EAAiB;UACf;UACA;UACA,IAAI,CAACI,iBAAD,IAAsBd,aAAa,CAACiB,MAApC,KAA+C,CAACD,OAAD,IAAYA,OAAO,IAAI,CAAChB,aAAa,CAACkB,YAArF,CAAJ,EAAwG;YACtG7B,OAAO,CAAC8B,MAAR,CAAe;cACb3B,IADa;cAEb4B,OAAO,EAAE9C;YAFI,CAAf;UAID,CARc,CAQb;;;UAGF,IAAI,CAACwC,iBAAD,IAAsBE,OAAtB,IAAiChB,aAAa,CAACkB,YAAnD,EAAiE;YAC/D7B,OAAO,CAAC8B,MAAR,CAAe;cACb3B,IADa;cAEb4B,OAAO,EAAE/C;YAFI,CAAf;UAID;;UAED;QACD,CAxDiD,CAwDhD;;;QAGF,IAAIgD,iBAAiB,GAAGhB,MAAM,CAACM,MAAP,CAAc,UAAU3C,KAAV,EAAiB;UACrD,OAAOA,KAAK,KAAK4C,SAAV,IAAuB5C,KAAK,KAAK,IAAxC;QACD,CAFuB,EAErB2C,MAFqB,CAEd,UAAU3C,KAAV,EAAiB;UACzB,OAAO,OAAOA,KAAP,KAAiB,QAAjB,KAA8B,CAACA,KAAK,CAAC6C,MAAP,IAAiB7C,KAAK,KAAK,GAA3B,IAAkC,mBAAmBsD,IAAnB,CAAwBtD,KAAxB,CAAhE,CAAP;QACD,CAJuB,CAAxB;;QAMA,IAAIqD,iBAAiB,CAACR,MAAlB,KAA6B,CAAjC,EAAoC;UAClC;UACA,IAAIG,OAAO,IAAIhB,aAAa,CAACkB,YAA7B,EAA2C;YACzC7B,OAAO,CAAC8B,MAAR,CAAe;cACb3B,IADa;cAEb4B,OAAO,EAAE/C;YAFI,CAAf;UAID,CALD,MAKO,IAAI2B,aAAa,CAACuB,WAAlB,EAA+B;YACpClC,OAAO,CAAC8B,MAAR,CAAe;cACb3B,IADa;cAEb4B,OAAO,EAAE7C;YAFI,CAAf;UAID;QACF;MACF;IAhFI,CAAP;EAkFD;AA5FY,CAAf;AA8FAR,OAAO,CAAC,SAAD,CAAP,GAAqBgB,QAArB;AACAyC,MAAM,CAACzD,OAAP,GAAiBA,OAAO,CAAC0D,OAAzB"},"metadata":{},"sourceType":"script"}