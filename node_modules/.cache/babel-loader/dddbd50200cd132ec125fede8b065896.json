{"ast":null,"code":"\"use strict\";\n/** @typedef {import('eslint').ESLint} ESLint */\n\n/** @typedef {import('eslint').ESLint.Options} ESLintOptions */\n\nObject.assign(module.exports, {\n  lintFiles,\n  setup\n});\n/** @type {{ new (arg0: import(\"eslint\").ESLint.Options): import(\"eslint\").ESLint; outputFixes: (arg0: import(\"eslint\").ESLint.LintResult[]) => any; }} */\n\nlet ESLint;\n/** @type {ESLint} */\n\nlet eslint;\n/** @type {boolean} */\n\nlet fix;\n/**\n * @typedef {object} setupOptions\n * @property {string=} eslintPath - import path of eslint\n * @property {ESLintOptions=} eslintOptions - linter options\n *\n * @param {setupOptions} arg0 - setup worker\n */\n\nfunction setup(_ref) {\n  let {\n    eslintPath,\n    eslintOptions = {}\n  } = _ref;\n  fix = !!(eslintOptions && eslintOptions.fix);\n  ({\n    ESLint\n  } = require(eslintPath || 'eslint'));\n  eslint = new ESLint(eslintOptions);\n}\n/**\n * @param {string | string[]} files\n */\n\n\nasync function lintFiles(files) {\n  const result = await eslint.lintFiles(files); // if enabled, use eslint autofixing where possible\n\n  if (fix) {\n    await ESLint.outputFixes(result);\n  }\n\n  return result;\n}","map":{"version":3,"names":["Object","assign","module","exports","lintFiles","setup","ESLint","eslint","fix","eslintPath","eslintOptions","require","files","result","outputFixes"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-webpack-plugin/dist/worker.js"],"sourcesContent":["\"use strict\";\n\n/** @typedef {import('eslint').ESLint} ESLint */\n\n/** @typedef {import('eslint').ESLint.Options} ESLintOptions */\nObject.assign(module.exports, {\n  lintFiles,\n  setup\n});\n/** @type {{ new (arg0: import(\"eslint\").ESLint.Options): import(\"eslint\").ESLint; outputFixes: (arg0: import(\"eslint\").ESLint.LintResult[]) => any; }} */\n\nlet ESLint;\n/** @type {ESLint} */\n\nlet eslint;\n/** @type {boolean} */\n\nlet fix;\n/**\n * @typedef {object} setupOptions\n * @property {string=} eslintPath - import path of eslint\n * @property {ESLintOptions=} eslintOptions - linter options\n *\n * @param {setupOptions} arg0 - setup worker\n */\n\nfunction setup({\n  eslintPath,\n  eslintOptions = {}\n}) {\n  fix = !!(eslintOptions && eslintOptions.fix);\n  ({\n    ESLint\n  } = require(eslintPath || 'eslint'));\n  eslint = new ESLint(eslintOptions);\n}\n/**\n * @param {string | string[]} files\n */\n\n\nasync function lintFiles(files) {\n  const result = await eslint.lintFiles(files); // if enabled, use eslint autofixing where possible\n\n  if (fix) {\n    await ESLint.outputFixes(result);\n  }\n\n  return result;\n}"],"mappings":"AAAA;AAEA;;AAEA;;AACAA,MAAM,CAACC,MAAP,CAAcC,MAAM,CAACC,OAArB,EAA8B;EAC5BC,SAD4B;EAE5BC;AAF4B,CAA9B;AAIA;;AAEA,IAAIC,MAAJ;AACA;;AAEA,IAAIC,MAAJ;AACA;;AAEA,IAAIC,GAAJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASH,KAAT,OAGG;EAAA,IAHY;IACbI,UADa;IAEbC,aAAa,GAAG;EAFH,CAGZ;EACDF,GAAG,GAAG,CAAC,EAAEE,aAAa,IAAIA,aAAa,CAACF,GAAjC,CAAP;EACA,CAAC;IACCF;EADD,IAEGK,OAAO,CAACF,UAAU,IAAI,QAAf,CAFX;EAGAF,MAAM,GAAG,IAAID,MAAJ,CAAWI,aAAX,CAAT;AACD;AACD;AACA;AACA;;;AAGA,eAAeN,SAAf,CAAyBQ,KAAzB,EAAgC;EAC9B,MAAMC,MAAM,GAAG,MAAMN,MAAM,CAACH,SAAP,CAAiBQ,KAAjB,CAArB,CAD8B,CACgB;;EAE9C,IAAIJ,GAAJ,EAAS;IACP,MAAMF,MAAM,CAACQ,WAAP,CAAmBD,MAAnB,CAAN;EACD;;EAED,OAAOA,MAAP;AACD"},"metadata":{},"sourceType":"script"}