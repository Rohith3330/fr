{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utilities = require(\"../../utilities\");\n\nconst hasLineBreak = (direction, colon, context) => {\n  const sourceCode = context.getSourceCode();\n\n  if (direction === 'before') {\n    return colon.loc.start.line !== sourceCode.getTokenBefore(colon).loc.end.line;\n  }\n\n  return sourceCode.getTokenAfter(colon).loc.start.line !== colon.loc.end.line;\n};\n\nconst getSpaces = (direction, colon, context) => {\n  const sourceCode = context.getSourceCode();\n\n  if (direction === 'before') {\n    return colon.range[0] - sourceCode.getTokenBefore(colon).range[1];\n  }\n\n  return sourceCode.getTokenAfter(colon).range[0] - colon.range[1];\n};\n\nvar _default = (direction, context, _ref) => {\n  let {\n    always,\n    allowLineBreak\n  } = _ref;\n  return _ref2 => {\n    let {\n      colon,\n      node,\n      name = '',\n      type = 'type annotation'\n    } = _ref2;\n    let lineBreak;\n    let spaces; // Support optional names\n    // type X = { [string]: a }\n    // type X = string => string\n\n    if (!colon || colon.value !== ':') {\n      return;\n    }\n\n    const data = {\n      direction,\n      name,\n      type\n    };\n\n    if (hasLineBreak(direction, colon, context)) {\n      if (allowLineBreak) {\n        spaces = 1;\n      } else {\n        lineBreak = true;\n        spaces = getSpaces(direction, colon, context);\n      }\n    } else {\n      spaces = getSpaces(direction, colon, context);\n    }\n\n    if (always && lineBreak) {\n      context.report({\n        data,\n        fix: _utilities.spacingFixers.replaceWithSpace(direction, colon, spaces),\n        message: 'There must not be a line break {{direction}} {{name}}{{type}} colon.',\n        node\n      });\n    } else if (always && spaces > 1) {\n      context.report({\n        data,\n        fix: _utilities.spacingFixers.stripSpaces(direction, colon, spaces - 1),\n        message: 'There must be 1 space {{direction}} {{name}}{{type}} colon.',\n        node\n      });\n    } else if (always && spaces === 0) {\n      context.report({\n        data,\n        fix: _utilities.spacingFixers.addSpace(direction, colon),\n        message: 'There must be a space {{direction}} {{name}}{{type}} colon.',\n        node\n      });\n    } else if (!always && spaces > 0) {\n      context.report({\n        data,\n        fix: _utilities.spacingFixers.stripSpaces(direction, colon, spaces),\n        message: 'There must be no space {{direction}} {{name}}{{type}} colon.',\n        node\n      });\n    }\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utilities","require","hasLineBreak","direction","colon","context","sourceCode","getSourceCode","loc","start","line","getTokenBefore","end","getTokenAfter","getSpaces","range","_default","always","allowLineBreak","node","name","type","lineBreak","spaces","data","report","fix","spacingFixers","replaceWithSpace","message","stripSpaces","addSpace","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/typeColonSpacing/reporter.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utilities = require(\"../../utilities\");\n\nconst hasLineBreak = (direction, colon, context) => {\n  const sourceCode = context.getSourceCode();\n\n  if (direction === 'before') {\n    return colon.loc.start.line !== sourceCode.getTokenBefore(colon).loc.end.line;\n  }\n\n  return sourceCode.getTokenAfter(colon).loc.start.line !== colon.loc.end.line;\n};\n\nconst getSpaces = (direction, colon, context) => {\n  const sourceCode = context.getSourceCode();\n\n  if (direction === 'before') {\n    return colon.range[0] - sourceCode.getTokenBefore(colon).range[1];\n  }\n\n  return sourceCode.getTokenAfter(colon).range[0] - colon.range[1];\n};\n\nvar _default = (direction, context, {\n  always,\n  allowLineBreak\n}) => {\n  return ({\n    colon,\n    node,\n    name = '',\n    type = 'type annotation'\n  }) => {\n    let lineBreak;\n    let spaces; // Support optional names\n    // type X = { [string]: a }\n    // type X = string => string\n\n    if (!colon || colon.value !== ':') {\n      return;\n    }\n\n    const data = {\n      direction,\n      name,\n      type\n    };\n\n    if (hasLineBreak(direction, colon, context)) {\n      if (allowLineBreak) {\n        spaces = 1;\n      } else {\n        lineBreak = true;\n        spaces = getSpaces(direction, colon, context);\n      }\n    } else {\n      spaces = getSpaces(direction, colon, context);\n    }\n\n    if (always && lineBreak) {\n      context.report({\n        data,\n        fix: _utilities.spacingFixers.replaceWithSpace(direction, colon, spaces),\n        message: 'There must not be a line break {{direction}} {{name}}{{type}} colon.',\n        node\n      });\n    } else if (always && spaces > 1) {\n      context.report({\n        data,\n        fix: _utilities.spacingFixers.stripSpaces(direction, colon, spaces - 1),\n        message: 'There must be 1 space {{direction}} {{name}}{{type}} colon.',\n        node\n      });\n    } else if (always && spaces === 0) {\n      context.report({\n        data,\n        fix: _utilities.spacingFixers.addSpace(direction, colon),\n        message: 'There must be a space {{direction}} {{name}}{{type}} colon.',\n        node\n      });\n    } else if (!always && spaces > 0) {\n      context.report({\n        data,\n        fix: _utilities.spacingFixers.stripSpaces(direction, colon, spaces),\n        message: 'There must be no space {{direction}} {{name}}{{type}} colon.',\n        node\n      });\n    }\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}