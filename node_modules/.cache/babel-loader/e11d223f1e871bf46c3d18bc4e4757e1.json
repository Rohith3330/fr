{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.hasMinVersion = hasMinVersion;\n\nvar _semver = _interopRequireDefault(require(\"semver\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction hasMinVersion(minVersion, runtimeVersion) {\n  // If the range is unavailable, we're running the script during Babel's\n  // build process, and we want to assume that all versions are satisfied so\n  // that the built output will include all definitions.\n  if (!runtimeVersion || !minVersion) return true; // semver.intersects() has some surprising behavior with comparing ranges\n  // with preprelease versions. We add '^' to ensure that we are always\n  // comparing ranges with ranges, which sidesteps this logic.\n  // For example:\n  //\n  //   semver.intersects(`<7.0.1`, \"7.0.0-beta.0\") // false - surprising\n  //   semver.intersects(`<7.0.1`, \"^7.0.0-beta.0\") // true - expected\n  //\n  // This is because the first falls back to\n  //\n  //   semver.satisfies(\"7.0.0-beta.0\", `<7.0.1`) // false - surprising\n  //\n  // and this fails because a prerelease version can only satisfy a range\n  // if it is a prerelease within the same major/minor/patch range.\n  //\n  // Note: If this is found to have issues, please also revist the logic in\n  // babel-core's availableHelper() API.\n\n  if (_semver.default.valid(runtimeVersion)) runtimeVersion = `^${runtimeVersion}`;\n  return !_semver.default.intersects(`<${minVersion}`, runtimeVersion) && !_semver.default.intersects(`>=8.0.0`, runtimeVersion);\n}","map":{"version":3,"names":["exports","__esModule","hasMinVersion","_semver","_interopRequireDefault","require","obj","default","minVersion","runtimeVersion","valid","intersects"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/babel-plugin-polyfill-corejs2/lib/helpers.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.hasMinVersion = hasMinVersion;\n\nvar _semver = _interopRequireDefault(require(\"semver\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction hasMinVersion(minVersion, runtimeVersion) {\n  // If the range is unavailable, we're running the script during Babel's\n  // build process, and we want to assume that all versions are satisfied so\n  // that the built output will include all definitions.\n  if (!runtimeVersion || !minVersion) return true; // semver.intersects() has some surprising behavior with comparing ranges\n  // with preprelease versions. We add '^' to ensure that we are always\n  // comparing ranges with ranges, which sidesteps this logic.\n  // For example:\n  //\n  //   semver.intersects(`<7.0.1`, \"7.0.0-beta.0\") // false - surprising\n  //   semver.intersects(`<7.0.1`, \"^7.0.0-beta.0\") // true - expected\n  //\n  // This is because the first falls back to\n  //\n  //   semver.satisfies(\"7.0.0-beta.0\", `<7.0.1`) // false - surprising\n  //\n  // and this fails because a prerelease version can only satisfy a range\n  // if it is a prerelease within the same major/minor/patch range.\n  //\n  // Note: If this is found to have issues, please also revist the logic in\n  // babel-core's availableHelper() API.\n\n  if (_semver.default.valid(runtimeVersion)) runtimeVersion = `^${runtimeVersion}`;\n  return !_semver.default.intersects(`<${minVersion}`, runtimeVersion) && !_semver.default.intersects(`>=8.0.0`, runtimeVersion);\n}"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;IAAEC,OAAO,EAAED;EAAX,CAArC;AAAwD;;AAE/F,SAASJ,aAAT,CAAuBM,UAAvB,EAAmCC,cAAnC,EAAmD;EACjD;EACA;EACA;EACA,IAAI,CAACA,cAAD,IAAmB,CAACD,UAAxB,EAAoC,OAAO,IAAP,CAJa,CAIA;EACjD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIL,OAAO,CAACI,OAAR,CAAgBG,KAAhB,CAAsBD,cAAtB,CAAJ,EAA2CA,cAAc,GAAI,IAAGA,cAAe,EAApC;EAC3C,OAAO,CAACN,OAAO,CAACI,OAAR,CAAgBI,UAAhB,CAA4B,IAAGH,UAAW,EAA1C,EAA6CC,cAA7C,CAAD,IAAiE,CAACN,OAAO,CAACI,OAAR,CAAgBI,UAAhB,CAA4B,SAA5B,EAAsCF,cAAtC,CAAzE;AACD"},"metadata":{},"sourceType":"script"}