{"ast":null,"code":"const {\n  InvalidArgumentError\n} = require('./error.js'); // @ts-check\n\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n  }\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Set environment variable to check for option value.\n   * Priority order of option values is default < env < cli\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n  env(name) {\n    this.envVar = name;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n  makeOptionMandatory() {\n    let mandatory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.mandatory = !!mandatory;\n    return this;\n  }\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n  hideHelp() {\n    let hide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.hidden = !!hide;\n    return this;\n  }\n\n  /**\n   * @api private\n   */\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n\n  choices(values) {\n    this.argChoices = values;\n\n    this.parseArg = (arg, previous) => {\n      if (!values.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n\n      return arg;\n    };\n\n    return this;\n  }\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n\n    return this.short.replace(/^-/, '');\n  }\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   * @api private\n   */\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  }\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @api private\n   */\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  }\n\n}\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @api private\n */\n\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @api private\n */\n\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag; // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift(); // Add support for lone short flag without significantly changing parsing!\n\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n\n  return {\n    shortFlag,\n    longFlag\n  };\n}\n\nexports.Option = Option;\nexports.splitOptionFlags = splitOptionFlags;","map":{"version":3,"names":["InvalidArgumentError","require","Option","constructor","flags","description","required","includes","optional","variadic","test","mandatory","optionFlags","splitOptionFlags","short","shortFlag","long","longFlag","negate","startsWith","defaultValue","undefined","defaultValueDescription","envVar","parseArg","hidden","argChoices","default","value","env","name","argParser","fn","makeOptionMandatory","hideHelp","hide","_concatValue","previous","Array","isArray","concat","choices","values","arg","join","replace","attributeName","camelcase","is","str","split","reduce","word","toUpperCase","slice","flagParts","length","shift","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/commander/lib/option.js"],"sourcesContent":["const { InvalidArgumentError } = require('./error.js');\n\n// @ts-check\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  };\n\n  /**\n   * Set environment variable to check for option value.\n   * Priority order of option values is default < env < cli\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  };\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  };\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  };\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  };\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values;\n    this.parseArg = (arg, previous) => {\n      if (!values.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  };\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  };\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   * @api private\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  };\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @api private\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  };\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @api private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @api private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.splitOptionFlags = splitOptionFlags;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}