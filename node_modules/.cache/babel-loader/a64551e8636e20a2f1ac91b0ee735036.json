{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"@sinonjs/referee-sinon\").assert;\n\nvar sinon = require(\"@sinonjs/referee-sinon\").sinon;\n\nvar every = require(\"./every\");\n\ndescribe(\"util/core/every\", function () {\n  it(\"returns true when the callback function returns true for every element in an iterable\", function () {\n    var obj = [true, true, true, true];\n    var allTrue = every(obj, function (val) {\n      return val;\n    });\n    assert(allTrue);\n  });\n  it(\"returns false when the callback function returns false for any element in an iterable\", function () {\n    var obj = [true, true, true, false];\n    var result = every(obj, function (val) {\n      return val;\n    });\n    assert.isFalse(result);\n  });\n  it(\"calls the given callback once for each item in an iterable until it returns false\", function () {\n    var iterableOne = [true, true, true, true];\n    var iterableTwo = [true, true, false, true];\n    var callback = sinon.spy(function (val) {\n      return val;\n    });\n    every(iterableOne, callback);\n    assert.equals(callback.callCount, 4);\n    callback.resetHistory();\n    every(iterableTwo, callback);\n    assert.equals(callback.callCount, 3);\n  });\n});","map":{"version":3,"names":["assert","require","sinon","every","describe","it","obj","allTrue","val","result","isFalse","iterableOne","iterableTwo","callback","spy","equals","callCount","resetHistory"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@sinonjs/commons/lib/every.test.js"],"sourcesContent":["\"use strict\";\n\nvar assert = require(\"@sinonjs/referee-sinon\").assert;\nvar sinon = require(\"@sinonjs/referee-sinon\").sinon;\nvar every = require(\"./every\");\n\ndescribe(\"util/core/every\", function() {\n    it(\"returns true when the callback function returns true for every element in an iterable\", function() {\n        var obj = [true, true, true, true];\n        var allTrue = every(obj, function(val) {\n            return val;\n        });\n\n        assert(allTrue);\n    });\n\n    it(\"returns false when the callback function returns false for any element in an iterable\", function() {\n        var obj = [true, true, true, false];\n        var result = every(obj, function(val) {\n            return val;\n        });\n\n        assert.isFalse(result);\n    });\n\n    it(\"calls the given callback once for each item in an iterable until it returns false\", function() {\n        var iterableOne = [true, true, true, true];\n        var iterableTwo = [true, true, false, true];\n        var callback = sinon.spy(function(val) {\n            return val;\n        });\n\n        every(iterableOne, callback);\n        assert.equals(callback.callCount, 4);\n\n        callback.resetHistory();\n\n        every(iterableTwo, callback);\n        assert.equals(callback.callCount, 3);\n    });\n});\n"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,wBAAD,CAAP,CAAkCD,MAA/C;;AACA,IAAIE,KAAK,GAAGD,OAAO,CAAC,wBAAD,CAAP,CAAkCC,KAA9C;;AACA,IAAIC,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEAG,QAAQ,CAAC,iBAAD,EAAoB,YAAW;EACnCC,EAAE,CAAC,uFAAD,EAA0F,YAAW;IACnG,IAAIC,GAAG,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAV;IACA,IAAIC,OAAO,GAAGJ,KAAK,CAACG,GAAD,EAAM,UAASE,GAAT,EAAc;MACnC,OAAOA,GAAP;IACH,CAFkB,CAAnB;IAIAR,MAAM,CAACO,OAAD,CAAN;EACH,CAPC,CAAF;EASAF,EAAE,CAAC,uFAAD,EAA0F,YAAW;IACnG,IAAIC,GAAG,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAV;IACA,IAAIG,MAAM,GAAGN,KAAK,CAACG,GAAD,EAAM,UAASE,GAAT,EAAc;MAClC,OAAOA,GAAP;IACH,CAFiB,CAAlB;IAIAR,MAAM,CAACU,OAAP,CAAeD,MAAf;EACH,CAPC,CAAF;EASAJ,EAAE,CAAC,mFAAD,EAAsF,YAAW;IAC/F,IAAIM,WAAW,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAlB;IACA,IAAIC,WAAW,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,EAAoB,IAApB,CAAlB;IACA,IAAIC,QAAQ,GAAGX,KAAK,CAACY,GAAN,CAAU,UAASN,GAAT,EAAc;MACnC,OAAOA,GAAP;IACH,CAFc,CAAf;IAIAL,KAAK,CAACQ,WAAD,EAAcE,QAAd,CAAL;IACAb,MAAM,CAACe,MAAP,CAAcF,QAAQ,CAACG,SAAvB,EAAkC,CAAlC;IAEAH,QAAQ,CAACI,YAAT;IAEAd,KAAK,CAACS,WAAD,EAAcC,QAAd,CAAL;IACAb,MAAM,CAACe,MAAP,CAAcF,QAAQ,CAACG,SAAvB,EAAkC,CAAlC;EACH,CAdC,CAAF;AAeH,CAlCO,CAAR"},"metadata":{},"sourceType":"script"}