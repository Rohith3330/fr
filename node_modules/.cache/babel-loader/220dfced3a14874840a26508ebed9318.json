{"ast":null,"code":"/**\n * Extractor function for a ConditionalExpression type value node.\n *\n * @param - value - AST Value object with type `ConditionalExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromConditionalExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n\n  const {\n    test,\n    alternate,\n    consequent\n  } = value;\n  return getValue(test) ? getValue(consequent) : getValue(alternate);\n}","map":{"version":3,"names":["extractValueFromConditionalExpression","value","getValue","require","default","test","alternate","consequent"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/src/values/expressions/ConditionalExpression.js"],"sourcesContent":["/**\n * Extractor function for a ConditionalExpression type value node.\n *\n * @param - value - AST Value object with type `ConditionalExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromConditionalExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n  const {\n    test,\n    alternate,\n    consequent,\n  } = value;\n\n  return getValue(test) ? getValue(consequent) : getValue(alternate);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,qCAAT,CAA+CC,KAA/C,EAAsD;EACnE;EACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,GAAD,CAAP,CAAaC,OAA9B;;EACA,MAAM;IACJC,IADI;IAEJC,SAFI;IAGJC;EAHI,IAIFN,KAJJ;EAMA,OAAOC,QAAQ,CAACG,IAAD,CAAR,GAAiBH,QAAQ,CAACK,UAAD,CAAzB,GAAwCL,QAAQ,CAACI,SAAD,CAAvD;AACD"},"metadata":{},"sourceType":"module"}