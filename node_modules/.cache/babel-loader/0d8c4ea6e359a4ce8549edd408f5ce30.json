{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _emojiRegex = _interopRequireDefault(require(\"emoji-regex\"));\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\nvar _isHiddenFromScreenReader = _interopRequireDefault(require(\"../util/isHiddenFromScreenReader\"));\n/**\n * @fileoverview Enforce emojis are wrapped in <span> and provide screenreader access.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\n\nvar errorMessage = 'Emojis should be wrapped in <span>, have role=\"img\", and have an accessible description with aria-label or aria-labelledby.';\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md'\n    },\n    deprecated: true,\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var literalChildValue = node.parent.children.find(function (child) {\n          return child.type === 'Literal' || child.type === 'JSXText';\n        });\n\n        if (literalChildValue && (0, _emojiRegex[\"default\"])().test(literalChildValue.value)) {\n          var elementIsHidden = (0, _isHiddenFromScreenReader[\"default\"])(elementType(node), node.attributes);\n\n          if (elementIsHidden) {\n            return; // emoji is decorative\n          }\n\n          var rolePropValue = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'role'));\n          var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n          var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n          var hasLabel = ariaLabelProp !== undefined || arialLabelledByProp !== undefined;\n          var isSpan = elementType(node) === 'span';\n\n          if (hasLabel === false || rolePropValue !== 'img' || isSpan === false) {\n            context.report({\n              node,\n              message: errorMessage\n            });\n          }\n        }\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_emojiRegex","_jsxAstUtils","_schemas","_getElementType","_isHiddenFromScreenReader","errorMessage","schema","generateObjSchema","_default","meta","docs","url","deprecated","create","context","elementType","JSXOpeningElement","node","literalChildValue","parent","children","find","child","type","test","elementIsHidden","attributes","rolePropValue","getLiteralPropValue","getProp","ariaLabelProp","arialLabelledByProp","hasLabel","undefined","isSpan","report","message","module","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/lib/rules/accessible-emoji.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _emojiRegex = _interopRequireDefault(require(\"emoji-regex\"));\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\nvar _isHiddenFromScreenReader = _interopRequireDefault(require(\"../util/isHiddenFromScreenReader\"));\n\n/**\n * @fileoverview Enforce emojis are wrapped in <span> and provide screenreader access.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\nvar errorMessage = 'Emojis should be wrapped in <span>, have role=\"img\", and have an accessible description with aria-label or aria-labelledby.';\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md'\n    },\n    deprecated: true,\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var literalChildValue = node.parent.children.find(function (child) {\n          return child.type === 'Literal' || child.type === 'JSXText';\n        });\n\n        if (literalChildValue && (0, _emojiRegex[\"default\"])().test(literalChildValue.value)) {\n          var elementIsHidden = (0, _isHiddenFromScreenReader[\"default\"])(elementType(node), node.attributes);\n\n          if (elementIsHidden) {\n            return; // emoji is decorative\n          }\n\n          var rolePropValue = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'role'));\n          var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n          var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n          var hasLabel = ariaLabelProp !== undefined || arialLabelledByProp !== undefined;\n          var isSpan = elementType(node) === 'span';\n\n          if (hasLabel === false || rolePropValue !== 'img' || isSpan === false) {\n            context.report({\n              node,\n              message: errorMessage\n            });\n          }\n        }\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}