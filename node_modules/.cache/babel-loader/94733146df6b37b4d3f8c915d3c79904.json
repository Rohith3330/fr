{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInclusionReasons = getInclusionReasons;\n\nvar _semver = require(\"semver\");\n\nvar _pretty = require(\"./pretty\");\n\nvar _utils = require(\"./utils\");\n\nfunction getInclusionReasons(item, targetVersions, list) {\n  const minVersions = list[item] || {};\n  return Object.keys(targetVersions).reduce((result, env) => {\n    const minVersion = (0, _utils.getLowestImplementedVersion)(minVersions, env);\n    const targetVersion = targetVersions[env];\n\n    if (!minVersion) {\n      result[env] = (0, _pretty.prettifyVersion)(targetVersion);\n    } else {\n      const minIsUnreleased = (0, _utils.isUnreleasedVersion)(minVersion, env);\n      const targetIsUnreleased = (0, _utils.isUnreleasedVersion)(targetVersion, env);\n\n      if (!targetIsUnreleased && (minIsUnreleased || _semver.lt(targetVersion.toString(), (0, _utils.semverify)(minVersion)))) {\n        result[env] = (0, _pretty.prettifyVersion)(targetVersion);\n      }\n    }\n\n    return result;\n  }, {});\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAOO,SAASA,mBAAT,CACLC,IADK,EAELC,cAFK,EAGLC,IAHK,EAIL;EACA,MAAMC,WAAW,GAAGD,IAAI,CAACF,IAAD,CAAJE,IAAe,EAAnC;EAEA,OAAQE,MAAM,CAACC,IAAPD,CAAYH,cAAZG,EAAyCE,MAAzCF,CAAgD,CAACG,MAAD,EAASC,GAAT,KAAiB;IACvE,MAAMC,UAAU,GAAG,wCAA4BN,WAA5B,EAAyCK,GAAzC,CAAnB;IACA,MAAME,aAAa,GAAGT,cAAc,CAACO,GAAD,CAApC;;IAEA,IAAI,CAACC,UAAL,EAAiB;MACfF,MAAM,CAACC,GAAD,CAAND,GAAc,6BAAgBG,aAAhB,CAAdH;IADF,OAEO;MACL,MAAMI,eAAe,GAAG,gCAAoBF,UAApB,EAAgCD,GAAhC,CAAxB;MACA,MAAMI,kBAAkB,GAAG,gCAAoBF,aAApB,EAAmCF,GAAnC,CAA3B;;MAEA,IACE,CAACI,kBAAD,KACCD,eAAe,IACdE,OAAM,CAACC,EAAPD,CAAUH,aAAa,CAACK,QAAdL,EAAVG,EAAoC,sBAAUJ,UAAV,CAApCI,CAFF,CADF,EAIE;QACAN,MAAM,CAACC,GAAD,CAAND,GAAc,6BAAgBG,aAAhB,CAAdH;MACD;IACF;;IAED,OAAOA,MAAP;EAnBK,CAACH,EAoBL,EApBKA,CAAR;AAqBD","names":["getInclusionReasons","item","targetVersions","list","minVersions","Object","keys","reduce","result","env","minVersion","targetVersion","minIsUnreleased","targetIsUnreleased","semver","lt","toString"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\helper-compilation-targets\\src\\debug.ts"],"sourcesContent":["import semver from \"semver\";\nimport { prettifyVersion } from \"./pretty\";\nimport {\n  semverify,\n  isUnreleasedVersion,\n  getLowestImplementedVersion,\n} from \"./utils\";\nimport type { Target, Targets } from \"./types\";\n\nexport function getInclusionReasons(\n  item: string,\n  targetVersions: Targets,\n  list: { [key: string]: Targets },\n) {\n  const minVersions = list[item] || ({} as Targets);\n\n  return (Object.keys(targetVersions) as Target[]).reduce((result, env) => {\n    const minVersion = getLowestImplementedVersion(minVersions, env);\n    const targetVersion = targetVersions[env];\n\n    if (!minVersion) {\n      result[env] = prettifyVersion(targetVersion);\n    } else {\n      const minIsUnreleased = isUnreleasedVersion(minVersion, env);\n      const targetIsUnreleased = isUnreleasedVersion(targetVersion, env);\n\n      if (\n        !targetIsUnreleased &&\n        (minIsUnreleased ||\n          semver.lt(targetVersion.toString(), semverify(minVersion)))\n      ) {\n        result[env] = prettifyVersion(targetVersion);\n      }\n    }\n\n    return result;\n  }, {} as Partial<Record<Target, string>>);\n}\n"]},"metadata":{},"sourceType":"script"}