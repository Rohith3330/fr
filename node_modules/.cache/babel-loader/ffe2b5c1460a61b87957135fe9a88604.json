{"ast":null,"code":"'use strict';\n\nconst assert = require('chai').assert;\n\nconst proxyquire = require('proxyquire');\n\nconst spooks = require('spooks');\n\nconst modulePath = '../../src/read';\nsuite('read:', () => {\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath);\n    });\n  });\n  test('require returns function', () => {\n    assert.isFunction(require(modulePath));\n  });\n  suite('require:', () => {\n    let log, results, read;\n    setup(() => {\n      log = {};\n      results = {\n        parse: [{}],\n        createReadStream: [{}]\n      };\n      read = proxyquire(modulePath, {\n        fs: {\n          createReadStream: spooks.fn({\n            name: 'createReadStream',\n            log: log,\n            results: results.createReadStream\n          })\n        },\n        './parse': spooks.fn({\n          name: 'parse',\n          log: log,\n          results: results.parse\n        })\n      });\n    });\n    test('read expects two arguments', () => {\n      assert.lengthOf(read, 2);\n    });\n    test('read does not throw', () => {\n      assert.doesNotThrow(() => {\n        read();\n      });\n    });\n    test('parse was not called', () => {\n      assert.strictEqual(log.counts.parse, 0);\n    });\n    test('fs.createReadStream was not called', () => {\n      assert.strictEqual(log.counts.createReadStream, 0);\n    });\n    suite('read:', () => {\n      let path, options, result;\n      setup(() => {\n        path = {};\n        options = {\n          foo: 'bar',\n          ndjson: true\n        };\n        result = read(path, options);\n      });\n      test('fs.createReadStream was called once', () => {\n        assert.strictEqual(log.counts.createReadStream, 1);\n      });\n      test('fs.createReadStream was called correctly', () => {\n        assert.lengthOf(log.args.createReadStream[0], 2);\n        assert.strictEqual(log.args.createReadStream[0][0], path);\n        assert.lengthOf(Object.keys(log.args.createReadStream[0][0]), 0);\n        assert.strictEqual(log.args.createReadStream[0][1], options);\n        assert.lengthOf(Object.keys(log.args.createReadStream[0][1]), 2);\n      });\n      test('parse was called once', () => {\n        assert.strictEqual(log.counts.parse, 1);\n      });\n      test('parse was called correctly', () => {\n        assert.isUndefined(log.these.parse[0]);\n        assert.lengthOf(log.args.parse[0], 2);\n        assert.strictEqual(log.args.parse[0][0], results.createReadStream[0]);\n        assert.lengthOf(Object.keys(log.args.parse[0][0]), 0);\n        assert.notStrictEqual(log.args.parse[0][1], options);\n        assert.deepEqual(log.args.parse[0][1], {\n          foo: 'bar',\n          ndjson: false\n        });\n      });\n      test('parse result was returned', () => {\n        assert.strictEqual(result, results.parse[0]);\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","proxyquire","spooks","modulePath","suite","test","doesNotThrow","isFunction","log","results","read","setup","parse","createReadStream","fs","fn","name","lengthOf","strictEqual","counts","path","options","result","foo","ndjson","args","Object","keys","isUndefined","these","notStrictEqual","deepEqual"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/bfj/test/unit/read.js"],"sourcesContent":["'use strict'\n\nconst assert = require('chai').assert\nconst proxyquire = require('proxyquire')\nconst spooks = require('spooks')\n\nconst modulePath = '../../src/read'\n\nsuite('read:', () => {\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath)\n    })\n  })\n\n  test('require returns function', () => {\n    assert.isFunction(require(modulePath))\n  })\n\n  suite('require:', () => {\n    let log, results, read\n\n    setup(() => {\n      log = {}\n      results = {\n        parse: [ {} ],\n        createReadStream: [ {} ]\n      }\n      read = proxyquire(modulePath, {\n        fs: {\n          createReadStream: spooks.fn({\n            name: 'createReadStream',\n            log: log,\n            results: results.createReadStream\n          })\n        },\n        './parse': spooks.fn({\n          name: 'parse',\n          log: log,\n          results: results.parse\n        })\n      })\n    })\n\n    test('read expects two arguments', () => {\n      assert.lengthOf(read, 2)\n    })\n\n    test('read does not throw', () => {\n      assert.doesNotThrow(() => {\n        read()\n      })\n    })\n\n    test('parse was not called', () => {\n      assert.strictEqual(log.counts.parse, 0)\n    })\n\n    test('fs.createReadStream was not called', () => {\n      assert.strictEqual(log.counts.createReadStream, 0)\n    })\n\n    suite('read:', () => {\n      let path, options, result\n\n      setup(() => {\n        path = {}\n        options = { foo: 'bar', ndjson: true }\n        result = read(path, options)\n      })\n\n      test('fs.createReadStream was called once', () => {\n        assert.strictEqual(log.counts.createReadStream, 1)\n      })\n\n      test('fs.createReadStream was called correctly', () => {\n        assert.lengthOf(log.args.createReadStream[0], 2)\n        assert.strictEqual(log.args.createReadStream[0][0], path)\n        assert.lengthOf(Object.keys(log.args.createReadStream[0][0]), 0)\n        assert.strictEqual(log.args.createReadStream[0][1], options)\n        assert.lengthOf(Object.keys(log.args.createReadStream[0][1]), 2)\n      })\n\n      test('parse was called once', () => {\n        assert.strictEqual(log.counts.parse, 1)\n      })\n\n      test('parse was called correctly', () => {\n        assert.isUndefined(log.these.parse[0])\n        assert.lengthOf(log.args.parse[0], 2)\n        assert.strictEqual(log.args.parse[0][0], results.createReadStream[0])\n        assert.lengthOf(Object.keys(log.args.parse[0][0]), 0)\n        assert.notStrictEqual(log.args.parse[0][1], options)\n        assert.deepEqual(log.args.parse[0][1], { foo: 'bar', ndjson: false })\n      })\n\n      test('parse result was returned', () => {\n        assert.strictEqual(result, results.parse[0])\n      })\n    })\n  })\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}