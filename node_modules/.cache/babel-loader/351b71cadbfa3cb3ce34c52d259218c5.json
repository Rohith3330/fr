{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow Jasmine globals',\n      recommended: 'error'\n    },\n    messages: {\n      illegalGlobal: 'Illegal usage of global `{{ global }}`, prefer `{{ replacement }}`',\n      illegalMethod: 'Illegal usage of `{{ method }}`, prefer `{{ replacement }}`',\n      illegalFail: 'Illegal usage of `fail`, prefer throwing an error, or the `done.fail` callback',\n      illegalPending: 'Illegal usage of `pending`, prefer explicitly skipping a test using `test.skip`',\n      illegalJasmine: 'Illegal usage of jasmine global'\n    },\n    fixable: 'code',\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        const {\n          callee\n        } = node;\n        const calleeName = (0, _utils.getNodeName)(callee);\n\n        if (!calleeName) {\n          return;\n        }\n\n        if (calleeName === 'spyOn' || calleeName === 'spyOnProperty' || calleeName === 'fail' || calleeName === 'pending') {\n          if ((0, _utils.scopeHasLocalReference)(context.getScope(), calleeName)) {\n            // It's a local variable, not a jasmine global.\n            return;\n          }\n\n          switch (calleeName) {\n            case 'spyOn':\n            case 'spyOnProperty':\n              context.report({\n                node,\n                messageId: 'illegalGlobal',\n                data: {\n                  global: calleeName,\n                  replacement: 'jest.spyOn'\n                }\n              });\n              break;\n\n            case 'fail':\n              context.report({\n                node,\n                messageId: 'illegalFail'\n              });\n              break;\n\n            case 'pending':\n              context.report({\n                node,\n                messageId: 'illegalPending'\n              });\n              break;\n          }\n\n          return;\n        }\n\n        if (callee.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression && calleeName.startsWith('jasmine.')) {\n          const functionName = calleeName.replace('jasmine.', '');\n\n          if (functionName === 'any' || functionName === 'anything' || functionName === 'arrayContaining' || functionName === 'objectContaining' || functionName === 'stringMatching') {\n            context.report({\n              fix: fixer => [fixer.replaceText(callee.object, 'expect')],\n              node,\n              messageId: 'illegalMethod',\n              data: {\n                method: calleeName,\n                replacement: `expect.${functionName}`\n              }\n            });\n            return;\n          }\n\n          if (functionName === 'addMatchers') {\n            context.report({\n              node,\n              messageId: 'illegalMethod',\n              data: {\n                method: calleeName,\n                replacement: 'expect.extend'\n              }\n            });\n            return;\n          }\n\n          if (functionName === 'createSpy') {\n            context.report({\n              node,\n              messageId: 'illegalMethod',\n              data: {\n                method: calleeName,\n                replacement: 'jest.fn'\n              }\n            });\n            return;\n          }\n\n          context.report({\n            node,\n            messageId: 'illegalJasmine'\n          });\n        }\n      },\n\n      MemberExpression(node) {\n        if ((0, _utils.isSupportedAccessor)(node.object, 'jasmine')) {\n          const {\n            parent,\n            property\n          } = node;\n\n          if (parent && parent.type === _experimentalUtils.AST_NODE_TYPES.AssignmentExpression) {\n            if ((0, _utils.isSupportedAccessor)(property, 'DEFAULT_TIMEOUT_INTERVAL')) {\n              const {\n                right\n              } = parent;\n\n              if (right.type === _experimentalUtils.AST_NODE_TYPES.Literal) {\n                context.report({\n                  fix: fixer => [fixer.replaceText(parent, `jest.setTimeout(${right.value})`)],\n                  node,\n                  messageId: 'illegalJasmine'\n                });\n                return;\n              }\n            }\n\n            context.report({\n              node,\n              messageId: 'illegalJasmine'\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","illegalGlobal","illegalMethod","illegalFail","illegalPending","illegalJasmine","fixable","schema","type","defaultOptions","create","context","CallExpression","node","callee","calleeName","getNodeName","scopeHasLocalReference","getScope","report","messageId","data","global","replacement","AST_NODE_TYPES","MemberExpression","startsWith","functionName","replace","fix","fixer","replaceText","object","method","isSupportedAccessor","parent","property","AssignmentExpression","right","Literal"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-jasmine-globals.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow Jasmine globals',\n      recommended: 'error'\n    },\n    messages: {\n      illegalGlobal: 'Illegal usage of global `{{ global }}`, prefer `{{ replacement }}`',\n      illegalMethod: 'Illegal usage of `{{ method }}`, prefer `{{ replacement }}`',\n      illegalFail: 'Illegal usage of `fail`, prefer throwing an error, or the `done.fail` callback',\n      illegalPending: 'Illegal usage of `pending`, prefer explicitly skipping a test using `test.skip`',\n      illegalJasmine: 'Illegal usage of jasmine global'\n    },\n    fixable: 'code',\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        const {\n          callee\n        } = node;\n        const calleeName = (0, _utils.getNodeName)(callee);\n\n        if (!calleeName) {\n          return;\n        }\n\n        if (calleeName === 'spyOn' || calleeName === 'spyOnProperty' || calleeName === 'fail' || calleeName === 'pending') {\n          if ((0, _utils.scopeHasLocalReference)(context.getScope(), calleeName)) {\n            // It's a local variable, not a jasmine global.\n            return;\n          }\n\n          switch (calleeName) {\n            case 'spyOn':\n            case 'spyOnProperty':\n              context.report({\n                node,\n                messageId: 'illegalGlobal',\n                data: {\n                  global: calleeName,\n                  replacement: 'jest.spyOn'\n                }\n              });\n              break;\n\n            case 'fail':\n              context.report({\n                node,\n                messageId: 'illegalFail'\n              });\n              break;\n\n            case 'pending':\n              context.report({\n                node,\n                messageId: 'illegalPending'\n              });\n              break;\n          }\n\n          return;\n        }\n\n        if (callee.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression && calleeName.startsWith('jasmine.')) {\n          const functionName = calleeName.replace('jasmine.', '');\n\n          if (functionName === 'any' || functionName === 'anything' || functionName === 'arrayContaining' || functionName === 'objectContaining' || functionName === 'stringMatching') {\n            context.report({\n              fix: fixer => [fixer.replaceText(callee.object, 'expect')],\n              node,\n              messageId: 'illegalMethod',\n              data: {\n                method: calleeName,\n                replacement: `expect.${functionName}`\n              }\n            });\n            return;\n          }\n\n          if (functionName === 'addMatchers') {\n            context.report({\n              node,\n              messageId: 'illegalMethod',\n              data: {\n                method: calleeName,\n                replacement: 'expect.extend'\n              }\n            });\n            return;\n          }\n\n          if (functionName === 'createSpy') {\n            context.report({\n              node,\n              messageId: 'illegalMethod',\n              data: {\n                method: calleeName,\n                replacement: 'jest.fn'\n              }\n            });\n            return;\n          }\n\n          context.report({\n            node,\n            messageId: 'illegalJasmine'\n          });\n        }\n      },\n\n      MemberExpression(node) {\n        if ((0, _utils.isSupportedAccessor)(node.object, 'jasmine')) {\n          const {\n            parent,\n            property\n          } = node;\n\n          if (parent && parent.type === _experimentalUtils.AST_NODE_TYPES.AssignmentExpression) {\n            if ((0, _utils.isSupportedAccessor)(property, 'DEFAULT_TIMEOUT_INTERVAL')) {\n              const {\n                right\n              } = parent;\n\n              if (right.type === _experimentalUtils.AST_NODE_TYPES.Literal) {\n                context.report({\n                  fix: fixer => [fixer.replaceText(parent, `jest.setTimeout(${right.value})`)],\n                  node,\n                  messageId: 'illegalJasmine'\n                });\n                return;\n              }\n            }\n\n            context.report({\n              node,\n              messageId: 'illegalJasmine'\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}