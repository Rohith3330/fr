{"ast":null,"code":"#!/usr/bin/env node --harmony\n\nconst path = require('path');\n\nconst fs = require('fs');\n\nconst {\n  exec\n} = require('child_process');\n\nconst argv = require('minimist')(process.argv.slice(2)); // eslint-disable-line import/no-extraneous-dependencies\n\n\nconst jscodeshiftJSON = require('jscodeshift/package.json'); // eslint-disable-line import/no-extraneous-dependencies\n\n\nconst ruleBoilerplateGenerator = require('./boilerplate/rule');\n\nconst testBoilerplateGenerator = require('./boilerplate/test');\n\nconst docBoilerplateGenerator = require('./boilerplate/doc');\n\nconst ruleName = argv._[0];\nconst author = argv.author || '$AUTHOR';\nconst description = argv.description || '$DESCRIPTION';\nconst rulePath = path.resolve(`src/rules/${ruleName}.js`);\nconst testPath = path.resolve(`__tests__/src/rules/${ruleName}-test.js`);\nconst docsPath = path.resolve(`docs/rules/${ruleName}.md`);\nconst jscodeshiftMain = jscodeshiftJSON.main;\n\nconst jscodeshiftPath = require.resolve('jscodeshift');\n\nconst jscodeshiftRoot = jscodeshiftPath.slice(0, jscodeshiftPath.indexOf(jscodeshiftMain)); // Validate\n\nif (!ruleName) {\n  throw new Error('Rule name is required');\n} else if (fs.existsSync(rulePath)) {\n  throw new Error('Rule already exists!');\n} // Generate file boilerplate\n\n\nconst ruleBoilerplate = ruleBoilerplateGenerator(author, description);\nconst testBoilerplate = testBoilerplateGenerator(ruleName, author, description);\nconst docBoilerplate = docBoilerplateGenerator(ruleName); // Create new files\n\nfs.writeFileSync(rulePath, ruleBoilerplate);\nfs.writeFileSync(testPath, testBoilerplate);\nfs.writeFileSync(docsPath, docBoilerplate); // Add the rule to the index\n\nexec([path.join(jscodeshiftRoot, jscodeshiftJSON.bin.jscodeshift), './src/index.js', '-t ./scripts/addRuleToIndex.js', '--extensions js', '--parser flow', `--ruleName=${ruleName}`, `--rulePath=${rulePath}`].join(' '), error => {\n  if (error) {\n    console.error(`exec error: ${error}`); // eslint-disable-line no-console\n  }\n});","map":{"version":3,"names":["path","require","fs","exec","argv","process","slice","jscodeshiftJSON","ruleBoilerplateGenerator","testBoilerplateGenerator","docBoilerplateGenerator","ruleName","_","author","description","rulePath","resolve","testPath","docsPath","jscodeshiftMain","main","jscodeshiftPath","jscodeshiftRoot","indexOf","Error","existsSync","ruleBoilerplate","testBoilerplate","docBoilerplate","writeFileSync","join","bin","jscodeshift","error","console"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/scripts/create-rule.js"],"sourcesContent":["#!/usr/bin/env node --harmony\nconst path = require('path');\nconst fs = require('fs');\nconst { exec } = require('child_process');\nconst argv = require('minimist')(process.argv.slice(2)); // eslint-disable-line import/no-extraneous-dependencies\nconst jscodeshiftJSON = require('jscodeshift/package.json'); // eslint-disable-line import/no-extraneous-dependencies\n\nconst ruleBoilerplateGenerator = require('./boilerplate/rule');\nconst testBoilerplateGenerator = require('./boilerplate/test');\nconst docBoilerplateGenerator = require('./boilerplate/doc');\n\nconst ruleName = argv._[0];\nconst author = argv.author || '$AUTHOR';\nconst description = argv.description || '$DESCRIPTION';\n\nconst rulePath = path.resolve(`src/rules/${ruleName}.js`);\nconst testPath = path.resolve(`__tests__/src/rules/${ruleName}-test.js`);\nconst docsPath = path.resolve(`docs/rules/${ruleName}.md`);\n\nconst jscodeshiftMain = jscodeshiftJSON.main;\nconst jscodeshiftPath = require.resolve('jscodeshift');\nconst jscodeshiftRoot = jscodeshiftPath.slice(0, jscodeshiftPath.indexOf(jscodeshiftMain));\n\n// Validate\nif (!ruleName) {\n  throw new Error('Rule name is required');\n} else if (fs.existsSync(rulePath)) {\n  throw new Error('Rule already exists!');\n}\n\n// Generate file boilerplate\nconst ruleBoilerplate = ruleBoilerplateGenerator(author, description);\nconst testBoilerplate = testBoilerplateGenerator(ruleName, author, description);\nconst docBoilerplate = docBoilerplateGenerator(ruleName);\n\n// Create new files\nfs.writeFileSync(rulePath, ruleBoilerplate);\nfs.writeFileSync(testPath, testBoilerplate);\nfs.writeFileSync(docsPath, docBoilerplate);\n\n// Add the rule to the index\nexec(\n  [\n    path.join(jscodeshiftRoot, jscodeshiftJSON.bin.jscodeshift),\n    './src/index.js',\n    '-t ./scripts/addRuleToIndex.js',\n    '--extensions js',\n    '--parser flow',\n    `--ruleName=${ruleName}`,\n    `--rulePath=${rulePath}`,\n  ].join(' '),\n  (error) => {\n    if (error) {\n      console.error(`exec error: ${error}`); // eslint-disable-line no-console\n    }\n  },\n);\n"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAM;EAAEE;AAAF,IAAWF,OAAO,CAAC,eAAD,CAAxB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBI,OAAO,CAACD,IAAR,CAAaE,KAAb,CAAmB,CAAnB,CAApB,CAAb,C,CAAyD;;;AACzD,MAAMC,eAAe,GAAGN,OAAO,CAAC,0BAAD,CAA/B,C,CAA6D;;;AAE7D,MAAMO,wBAAwB,GAAGP,OAAO,CAAC,oBAAD,CAAxC;;AACA,MAAMQ,wBAAwB,GAAGR,OAAO,CAAC,oBAAD,CAAxC;;AACA,MAAMS,uBAAuB,GAAGT,OAAO,CAAC,mBAAD,CAAvC;;AAEA,MAAMU,QAAQ,GAAGP,IAAI,CAACQ,CAAL,CAAO,CAAP,CAAjB;AACA,MAAMC,MAAM,GAAGT,IAAI,CAACS,MAAL,IAAe,SAA9B;AACA,MAAMC,WAAW,GAAGV,IAAI,CAACU,WAAL,IAAoB,cAAxC;AAEA,MAAMC,QAAQ,GAAGf,IAAI,CAACgB,OAAL,CAAc,aAAYL,QAAS,KAAnC,CAAjB;AACA,MAAMM,QAAQ,GAAGjB,IAAI,CAACgB,OAAL,CAAc,uBAAsBL,QAAS,UAA7C,CAAjB;AACA,MAAMO,QAAQ,GAAGlB,IAAI,CAACgB,OAAL,CAAc,cAAaL,QAAS,KAApC,CAAjB;AAEA,MAAMQ,eAAe,GAAGZ,eAAe,CAACa,IAAxC;;AACA,MAAMC,eAAe,GAAGpB,OAAO,CAACe,OAAR,CAAgB,aAAhB,CAAxB;;AACA,MAAMM,eAAe,GAAGD,eAAe,CAACf,KAAhB,CAAsB,CAAtB,EAAyBe,eAAe,CAACE,OAAhB,CAAwBJ,eAAxB,CAAzB,CAAxB,C,CAEA;;AACA,IAAI,CAACR,QAAL,EAAe;EACb,MAAM,IAAIa,KAAJ,CAAU,uBAAV,CAAN;AACD,CAFD,MAEO,IAAItB,EAAE,CAACuB,UAAH,CAAcV,QAAd,CAAJ,EAA6B;EAClC,MAAM,IAAIS,KAAJ,CAAU,sBAAV,CAAN;AACD,C,CAED;;;AACA,MAAME,eAAe,GAAGlB,wBAAwB,CAACK,MAAD,EAASC,WAAT,CAAhD;AACA,MAAMa,eAAe,GAAGlB,wBAAwB,CAACE,QAAD,EAAWE,MAAX,EAAmBC,WAAnB,CAAhD;AACA,MAAMc,cAAc,GAAGlB,uBAAuB,CAACC,QAAD,CAA9C,C,CAEA;;AACAT,EAAE,CAAC2B,aAAH,CAAiBd,QAAjB,EAA2BW,eAA3B;AACAxB,EAAE,CAAC2B,aAAH,CAAiBZ,QAAjB,EAA2BU,eAA3B;AACAzB,EAAE,CAAC2B,aAAH,CAAiBX,QAAjB,EAA2BU,cAA3B,E,CAEA;;AACAzB,IAAI,CACF,CACEH,IAAI,CAAC8B,IAAL,CAAUR,eAAV,EAA2Bf,eAAe,CAACwB,GAAhB,CAAoBC,WAA/C,CADF,EAEE,gBAFF,EAGE,gCAHF,EAIE,iBAJF,EAKE,eALF,EAMG,cAAarB,QAAS,EANzB,EAOG,cAAaI,QAAS,EAPzB,EAQEe,IARF,CAQO,GARP,CADE,EAUDG,KAAD,IAAW;EACT,IAAIA,KAAJ,EAAW;IACTC,OAAO,CAACD,KAAR,CAAe,eAAcA,KAAM,EAAnC,EADS,CAC8B;EACxC;AACF,CAdC,CAAJ"},"metadata":{},"sourceType":"script"}