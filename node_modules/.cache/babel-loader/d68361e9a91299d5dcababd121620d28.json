{"ast":null,"code":"'use strict';\n\nvar testArray = function testArray(t, actual, expected, msg) {\n  t.deepEqual(actual, expected, msg);\n  t.equal(actual.length, expected.length, 'expected ' + expected.length + ', got ' + actual.length);\n};\n\nmodule.exports = function (flat, t) {\n  t.test('flattens', function (st) {\n    testArray(st, flat([1, [2], [[3]], [[['four']]]]), [1, 2, [3], [['four']]], 'missing depth only flattens 1 deep');\n    testArray(st, flat([1, [2], [[3]], [[['four']]]], 1), [1, 2, [3], [['four']]], 'depth of 1 only flattens 1 deep');\n    st.notDeepEqual(flat([1, [2], [[3]], [[['four']]]], 1), [1, 2, 3, ['four']], 'depth of 1 only flattens 1 deep: sanity check');\n    testArray(st, flat([1, [2], [[3]], [[['four']]]], 2), [1, 2, 3, ['four']], 'depth of 2 only flattens 2 deep');\n    st.notDeepEqual(flat([1, [2], [[3]], [[['four']]]], 2), [1, 2, 3, 'four'], 'depth of 2 only flattens 2 deep: sanity check');\n    testArray(st, flat([1, [2], [[3]], [[['four']]]], 3), [1, 2, 3, 'four'], 'depth of 3 only flattens 3 deep');\n    testArray(st, flat([1, [2], [[3]], [[['four']]]], Infinity), [1, 2, 3, 'four'], 'depth of Infinity flattens all the way');\n    st.end();\n  });\n  t.test('sparse arrays', function (st) {\n    // eslint-disable-next-line no-sparse-arrays\n    st.deepEqual(flat([, [1]]), flat([[], [1]]), 'an array hole is treated the same as an empty array');\n    st.end();\n  });\n};","map":{"version":3,"names":["testArray","t","actual","expected","msg","deepEqual","equal","length","module","exports","flat","test","st","notDeepEqual","Infinity","end"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/array.prototype.flat/test/tests.js"],"sourcesContent":["'use strict';\n\nvar testArray = function testArray(t, actual, expected, msg) {\n\tt.deepEqual(actual, expected, msg);\n\tt.equal(actual.length, expected.length, 'expected ' + expected.length + ', got ' + actual.length);\n};\n\nmodule.exports = function (flat, t) {\n\tt.test('flattens', function (st) {\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]]), [1, 2, [3], [['four']]], 'missing depth only flattens 1 deep');\n\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]], 1), [1, 2, [3], [['four']]], 'depth of 1 only flattens 1 deep');\n\t\tst.notDeepEqual(flat([1, [2], [[3]], [[['four']]]], 1), [1, 2, 3, ['four']], 'depth of 1 only flattens 1 deep: sanity check');\n\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]], 2), [1, 2, 3, ['four']], 'depth of 2 only flattens 2 deep');\n\t\tst.notDeepEqual(flat([1, [2], [[3]], [[['four']]]], 2), [1, 2, 3, 'four'], 'depth of 2 only flattens 2 deep: sanity check');\n\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]], 3), [1, 2, 3, 'four'], 'depth of 3 only flattens 3 deep');\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]], Infinity), [1, 2, 3, 'four'], 'depth of Infinity flattens all the way');\n\n\t\tst.end();\n\t});\n\n\tt.test('sparse arrays', function (st) {\n\t\t// eslint-disable-next-line no-sparse-arrays\n\t\tst.deepEqual(flat([, [1]]), flat([[], [1]]), 'an array hole is treated the same as an empty array');\n\n\t\tst.end();\n\t});\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}