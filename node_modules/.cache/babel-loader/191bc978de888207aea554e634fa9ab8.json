{"ast":null,"code":"import expect from 'expect';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\ndescribe('parserOptionsMapper', () => {\n  it('should return an test case object', () => {\n    const testCase = {\n      code: '<div />',\n      errors: [],\n      options: {}\n    };\n    expect(parserOptionsMapper(testCase)).toEqual({\n      code: '<div />',\n      errors: [],\n      options: {},\n      parserOptions: {\n        ecmaVersion: 2018,\n        ecmaFeatures: {\n          experimentalObjectRestSpread: true,\n          jsx: true\n        }\n      }\n    });\n  });\n  it('should allow for overriding parserOptions', () => {\n    const testCase = {\n      code: '<div />',\n      errors: [],\n      options: {},\n      parserOptions: {\n        ecmaVersion: 5\n      }\n    };\n    expect(parserOptionsMapper(testCase)).toEqual({\n      code: '<div />',\n      errors: [],\n      options: {},\n      parserOptions: {\n        ecmaVersion: 5,\n        ecmaFeatures: {\n          experimentalObjectRestSpread: true,\n          jsx: true\n        }\n      }\n    });\n  });\n});","map":{"version":3,"names":["expect","parserOptionsMapper","describe","it","testCase","code","errors","options","toEqual","parserOptions","ecmaVersion","ecmaFeatures","experimentalObjectRestSpread","jsx"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/parserOptionsMapper-test.js"],"sourcesContent":["import expect from 'expect';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\n\ndescribe('parserOptionsMapper', () => {\n  it('should return an test case object', () => {\n    const testCase = {\n      code: '<div />',\n      errors: [],\n      options: {},\n    };\n    expect(parserOptionsMapper(testCase)).toEqual({\n      code: '<div />',\n      errors: [],\n      options: {},\n      parserOptions: {\n        ecmaVersion: 2018,\n        ecmaFeatures: {\n          experimentalObjectRestSpread: true,\n          jsx: true,\n        },\n      },\n    });\n  });\n  it('should allow for overriding parserOptions', () => {\n    const testCase = {\n      code: '<div />',\n      errors: [],\n      options: {},\n      parserOptions: {\n        ecmaVersion: 5,\n      },\n    };\n    expect(parserOptionsMapper(testCase)).toEqual({\n      code: '<div />',\n      errors: [],\n      options: {},\n      parserOptions: {\n        ecmaVersion: 5,\n        ecmaFeatures: {\n          experimentalObjectRestSpread: true,\n          jsx: true,\n        },\n      },\n    });\n  });\n});\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AAEAC,QAAQ,CAAC,qBAAD,EAAwB,MAAM;EACpCC,EAAE,CAAC,mCAAD,EAAsC,MAAM;IAC5C,MAAMC,QAAQ,GAAG;MACfC,IAAI,EAAE,SADS;MAEfC,MAAM,EAAE,EAFO;MAGfC,OAAO,EAAE;IAHM,CAAjB;IAKAP,MAAM,CAACC,mBAAmB,CAACG,QAAD,CAApB,CAAN,CAAsCI,OAAtC,CAA8C;MAC5CH,IAAI,EAAE,SADsC;MAE5CC,MAAM,EAAE,EAFoC;MAG5CC,OAAO,EAAE,EAHmC;MAI5CE,aAAa,EAAE;QACbC,WAAW,EAAE,IADA;QAEbC,YAAY,EAAE;UACZC,4BAA4B,EAAE,IADlB;UAEZC,GAAG,EAAE;QAFO;MAFD;IAJ6B,CAA9C;EAYD,CAlBC,CAAF;EAmBAV,EAAE,CAAC,2CAAD,EAA8C,MAAM;IACpD,MAAMC,QAAQ,GAAG;MACfC,IAAI,EAAE,SADS;MAEfC,MAAM,EAAE,EAFO;MAGfC,OAAO,EAAE,EAHM;MAIfE,aAAa,EAAE;QACbC,WAAW,EAAE;MADA;IAJA,CAAjB;IAQAV,MAAM,CAACC,mBAAmB,CAACG,QAAD,CAApB,CAAN,CAAsCI,OAAtC,CAA8C;MAC5CH,IAAI,EAAE,SADsC;MAE5CC,MAAM,EAAE,EAFoC;MAG5CC,OAAO,EAAE,EAHmC;MAI5CE,aAAa,EAAE;QACbC,WAAW,EAAE,CADA;QAEbC,YAAY,EAAE;UACZC,4BAA4B,EAAE,IADlB;UAEZC,GAAG,EAAE;QAFO;MAFD;IAJ6B,CAA9C;EAYD,CArBC,CAAF;AAsBD,CA1CO,CAAR"},"metadata":{},"sourceType":"module"}