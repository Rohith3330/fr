{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  enum: ['double', 'single'],\n  type: 'string'\n}];\nconst meta = {\n  fixable: 'code'\n};\n\nconst create = context => {\n  const double = (context.options[0] || 'double') === 'double';\n  const sourceCode = context.getSourceCode();\n  return {\n    StringLiteralTypeAnnotation(node) {\n      if (double && sourceCode.text[node.range[0]] !== '\"') {\n        // double\n        context.report({\n          fix: fixer => {\n            return [fixer.replaceTextRange([node.range[0], node.range[0] + 1], '\"'), fixer.replaceTextRange([node.range[1] - 1, node.range[1]], '\"')];\n          },\n          message: 'String literals must use double quote.',\n          node\n        });\n      } else if (!double && sourceCode.text[node.range[0]] !== '\\'') {\n        // single\n        context.report({\n          fix: fixer => {\n            return [fixer.replaceTextRange([node.range[0], node.range[0] + 1], '\\''), fixer.replaceTextRange([node.range[1] - 1, node.range[1]], '\\'')];\n          },\n          message: 'String literals must use single quote.',\n          node\n        });\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  meta,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","schema","enum","type","meta","fixable","create","context","double","options","sourceCode","getSourceCode","StringLiteralTypeAnnotation","node","text","range","report","fix","fixer","replaceTextRange","message","_default","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/quotes.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  enum: ['double', 'single'],\n  type: 'string'\n}];\nconst meta = {\n  fixable: 'code'\n};\n\nconst create = context => {\n  const double = (context.options[0] || 'double') === 'double';\n  const sourceCode = context.getSourceCode();\n  return {\n    StringLiteralTypeAnnotation(node) {\n      if (double && sourceCode.text[node.range[0]] !== '\"') {\n        // double\n        context.report({\n          fix: fixer => {\n            return [fixer.replaceTextRange([node.range[0], node.range[0] + 1], '\"'), fixer.replaceTextRange([node.range[1] - 1, node.range[1]], '\"')];\n          },\n          message: 'String literals must use double quote.',\n          node\n        });\n      } else if (!double && sourceCode.text[node.range[0]] !== '\\'') {\n        // single\n        context.report({\n          fix: fixer => {\n            return [fixer.replaceTextRange([node.range[0], node.range[0] + 1], '\\''), fixer.replaceTextRange([node.range[1] - 1, node.range[1]], '\\'')];\n          },\n          message: 'String literals must use single quote.',\n          node\n        });\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  meta,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,MAAM,GAAG,CAAC;EACdC,IAAI,EAAE,CAAC,QAAD,EAAW,QAAX,CADQ;EAEdC,IAAI,EAAE;AAFQ,CAAD,CAAf;AAIA,MAAMC,IAAI,GAAG;EACXC,OAAO,EAAE;AADE,CAAb;;AAIA,MAAMC,MAAM,GAAGC,OAAO,IAAI;EACxB,MAAMC,MAAM,GAAG,CAACD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,QAAvB,MAAqC,QAApD;EACA,MAAMC,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;EACA,OAAO;IACLC,2BAA2B,CAACC,IAAD,EAAO;MAChC,IAAIL,MAAM,IAAIE,UAAU,CAACI,IAAX,CAAgBD,IAAI,CAACE,KAAL,CAAW,CAAX,CAAhB,MAAmC,GAAjD,EAAsD;QACpD;QACAR,OAAO,CAACS,MAAR,CAAe;UACbC,GAAG,EAAEC,KAAK,IAAI;YACZ,OAAO,CAACA,KAAK,CAACC,gBAAN,CAAuB,CAACN,IAAI,CAACE,KAAL,CAAW,CAAX,CAAD,EAAgBF,IAAI,CAACE,KAAL,CAAW,CAAX,IAAgB,CAAhC,CAAvB,EAA2D,GAA3D,CAAD,EAAkEG,KAAK,CAACC,gBAAN,CAAuB,CAACN,IAAI,CAACE,KAAL,CAAW,CAAX,IAAgB,CAAjB,EAAoBF,IAAI,CAACE,KAAL,CAAW,CAAX,CAApB,CAAvB,EAA2D,GAA3D,CAAlE,CAAP;UACD,CAHY;UAIbK,OAAO,EAAE,wCAJI;UAKbP;QALa,CAAf;MAOD,CATD,MASO,IAAI,CAACL,MAAD,IAAWE,UAAU,CAACI,IAAX,CAAgBD,IAAI,CAACE,KAAL,CAAW,CAAX,CAAhB,MAAmC,IAAlD,EAAwD;QAC7D;QACAR,OAAO,CAACS,MAAR,CAAe;UACbC,GAAG,EAAEC,KAAK,IAAI;YACZ,OAAO,CAACA,KAAK,CAACC,gBAAN,CAAuB,CAACN,IAAI,CAACE,KAAL,CAAW,CAAX,CAAD,EAAgBF,IAAI,CAACE,KAAL,CAAW,CAAX,IAAgB,CAAhC,CAAvB,EAA2D,IAA3D,CAAD,EAAmEG,KAAK,CAACC,gBAAN,CAAuB,CAACN,IAAI,CAACE,KAAL,CAAW,CAAX,IAAgB,CAAjB,EAAoBF,IAAI,CAACE,KAAL,CAAW,CAAX,CAApB,CAAvB,EAA2D,IAA3D,CAAnE,CAAP;UACD,CAHY;UAIbK,OAAO,EAAE,wCAJI;UAKbP;QALa,CAAf;MAOD;IACF;;EArBI,CAAP;AAwBD,CA3BD;;AA6BA,IAAIQ,QAAQ,GAAG;EACbf,MADa;EAEbF,IAFa;EAGbH;AAHa,CAAf;AAKAH,OAAO,CAACE,OAAR,GAAkBqB,QAAlB;AACAC,MAAM,CAACxB,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}