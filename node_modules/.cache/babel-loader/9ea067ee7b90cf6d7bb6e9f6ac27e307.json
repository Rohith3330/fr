{"ast":null,"code":"import e from \"postcss-value-parser\";\nconst t = /calc\\(/gim;\n\nconst a = a => {\n  const r = Object.assign({\n    preserve: !0\n  }, a);\n  return {\n    postcssPlugin: \"postcss-nested-calc\",\n\n    Declaration(a, _ref) {\n      let {\n        result: s\n      } = _ref;\n      if ((a.value.match(t) || []).length < 2) return;\n      if (a.variable) return;\n      const n = a.value;\n      let o;\n\n      try {\n        o = e(n);\n      } catch (e) {\n        return void a.warn(s, `Failed to parse value '${n}'. Leaving the original value intact.`);\n      }\n\n      if (void 0 === o) return;\n      e.walk(o.nodes, t => {\n        t.type && \"function\" === t.type && \"calc\" === t.value.toLowerCase() && e.walk(t.nodes, e => {\n          if (e.type && \"function\" === e.type) return \"calc\" === e.value.toLowerCase() && void (e.value = \"\");\n        });\n      }, !0);\n      const c = String(o);\n      c !== n && (r.preserve ? a.cloneBefore({\n        value: c\n      }) : a.replaceWith(a.clone({\n        value: c\n      })));\n    }\n\n  };\n};\n\na.postcss = !0;\nexport { a as default };","map":{"version":3,"names":["e","t","a","r","Object","assign","preserve","postcssPlugin","Declaration","result","s","value","match","length","variable","n","o","warn","walk","nodes","type","toLowerCase","c","String","cloneBefore","replaceWith","clone","postcss","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@csstools/postcss-nested-calc/dist/index.mjs"],"sourcesContent":["import e from\"postcss-value-parser\";const t=/calc\\(/gim;const a=a=>{const r=Object.assign({preserve:!0},a);return{postcssPlugin:\"postcss-nested-calc\",Declaration(a,{result:s}){if((a.value.match(t)||[]).length<2)return;if(a.variable)return;const n=a.value;let o;try{o=e(n)}catch(e){return void a.warn(s,`Failed to parse value '${n}'. Leaving the original value intact.`)}if(void 0===o)return;e.walk(o.nodes,(t=>{t.type&&\"function\"===t.type&&\"calc\"===t.value.toLowerCase()&&e.walk(t.nodes,(e=>{if(e.type&&\"function\"===e.type)return\"calc\"===e.value.toLowerCase()&&void(e.value=\"\")}))}),!0);const c=String(o);c!==n&&(r.preserve?a.cloneBefore({value:c}):a.replaceWith(a.clone({value:c})))}}};a.postcss=!0;export{a as default};\n"],"mappings":"AAAA,OAAOA,CAAP,MAAa,sBAAb;AAAoC,MAAMC,CAAC,GAAC,WAAR;;AAAoB,MAAMC,CAAC,GAACA,CAAC,IAAE;EAAC,MAAMC,CAAC,GAACC,MAAM,CAACC,MAAP,CAAc;IAACC,QAAQ,EAAC,CAAC;EAAX,CAAd,EAA4BJ,CAA5B,CAAR;EAAuC,OAAM;IAACK,aAAa,EAAC,qBAAf;;IAAqCC,WAAW,CAACN,CAAD,QAAc;MAAA,IAAX;QAACO,MAAM,EAACC;MAAR,CAAW;MAAC,IAAG,CAACR,CAAC,CAACS,KAAF,CAAQC,KAAR,CAAcX,CAAd,KAAkB,EAAnB,EAAuBY,MAAvB,GAA8B,CAAjC,EAAmC;MAAO,IAAGX,CAAC,CAACY,QAAL,EAAc;MAAO,MAAMC,CAAC,GAACb,CAAC,CAACS,KAAV;MAAgB,IAAIK,CAAJ;;MAAM,IAAG;QAACA,CAAC,GAAChB,CAAC,CAACe,CAAD,CAAH;MAAO,CAAX,CAAW,OAAMf,CAAN,EAAQ;QAAC,OAAO,KAAKE,CAAC,CAACe,IAAF,CAAOP,CAAP,EAAU,0BAAyBK,CAAE,uCAArC,CAAZ;MAAyF;;MAAA,IAAG,KAAK,CAAL,KAASC,CAAZ,EAAc;MAAOhB,CAAC,CAACkB,IAAF,CAAOF,CAAC,CAACG,KAAT,EAAgBlB,CAAC,IAAE;QAACA,CAAC,CAACmB,IAAF,IAAQ,eAAanB,CAAC,CAACmB,IAAvB,IAA6B,WAASnB,CAAC,CAACU,KAAF,CAAQU,WAAR,EAAtC,IAA6DrB,CAAC,CAACkB,IAAF,CAAOjB,CAAC,CAACkB,KAAT,EAAgBnB,CAAC,IAAE;UAAC,IAAGA,CAAC,CAACoB,IAAF,IAAQ,eAAapB,CAAC,CAACoB,IAA1B,EAA+B,OAAM,WAASpB,CAAC,CAACW,KAAF,CAAQU,WAAR,EAAT,IAAgC,MAAKrB,CAAC,CAACW,KAAF,GAAQ,EAAb,CAAtC;QAAuD,CAA1G,CAA7D;MAA0K,CAA9L,EAAgM,CAAC,CAAjM;MAAoM,MAAMW,CAAC,GAACC,MAAM,CAACP,CAAD,CAAd;MAAkBM,CAAC,KAAGP,CAAJ,KAAQZ,CAAC,CAACG,QAAF,GAAWJ,CAAC,CAACsB,WAAF,CAAc;QAACb,KAAK,EAACW;MAAP,CAAd,CAAX,GAAoCpB,CAAC,CAACuB,WAAF,CAAcvB,CAAC,CAACwB,KAAF,CAAQ;QAACf,KAAK,EAACW;MAAP,CAAR,CAAd,CAA5C;IAA+E;;EAA3jB,CAAN;AAAmkB,CAAtnB;;AAAunBpB,CAAC,CAACyB,OAAF,GAAU,CAAC,CAAX;AAAa,SAAOzB,CAAC,IAAI0B,OAAZ"},"metadata":{},"sourceType":"module"}