{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = setupJestGlobals;\n\nvar _expect = require('expect');\n\nvar _jestSnapshot = require('jest-snapshot');\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Get suppressed errors form  jest-matchers that weren't throw during\n// test execution and add them to the test result, potentially failing\n// a passing test.\n\n\nconst addSuppressedErrors = result => {\n  const {\n    suppressedErrors\n  } = (0, _expect.getState)();\n  (0, _expect.setState)({\n    suppressedErrors: []\n  });\n\n  if (suppressedErrors.length) {\n    result.status = 'failed';\n    result.failedExpectations = suppressedErrors.map(error => ({\n      actual: '',\n      // passing error for custom test reporters\n      error,\n      expected: '',\n      matcherName: '',\n      message: error.message,\n      passed: false,\n      stack: error.stack\n    }));\n  }\n};\n\nconst addAssertionErrors = result => {\n  const assertionErrors = (0, _expect.extractExpectedAssertionsErrors)();\n\n  if (assertionErrors.length) {\n    const jasmineErrors = assertionErrors.map(_ref => {\n      let {\n        actual,\n        error,\n        expected\n      } = _ref;\n      return {\n        actual,\n        expected,\n        message: error.stack,\n        passed: false\n      };\n    });\n    result.status = 'failed';\n    result.failedExpectations = result.failedExpectations.concat(jasmineErrors);\n  }\n};\n\nconst patchJasmine = () => {\n  global.jasmine.Spec = (realSpec => {\n    class Spec extends realSpec {\n      constructor(attr) {\n        const resultCallback = attr.resultCallback;\n\n        attr.resultCallback = function (result) {\n          addSuppressedErrors(result);\n          addAssertionErrors(result);\n          resultCallback.call(attr, result);\n        };\n\n        const onStart = attr.onStart;\n\n        attr.onStart = context => {\n          (0, _expect.setState)({\n            currentTestName: context.getFullName()\n          });\n          onStart && onStart.call(attr, context);\n        };\n\n        super(attr);\n      }\n\n    }\n\n    return Spec;\n  })(global.jasmine.Spec);\n};\n\nasync function setupJestGlobals(_ref2) {\n  let {\n    config,\n    globalConfig,\n    localRequire,\n    testPath\n  } = _ref2;\n  // Jest tests snapshotSerializers in order preceding built-in serializers.\n  // Therefore, add in reverse because the last added is the first tested.\n  config.snapshotSerializers.concat().reverse().forEach(path => {\n    (0, _jestSnapshot.addSerializer)(localRequire(path));\n  });\n  patchJasmine();\n  const {\n    expand,\n    updateSnapshot\n  } = globalConfig;\n  const {\n    prettierPath,\n    snapshotFormat\n  } = config;\n  const snapshotResolver = await (0, _jestSnapshot.buildSnapshotResolver)(config, localRequire);\n  const snapshotPath = snapshotResolver.resolveSnapshotPath(testPath);\n  const snapshotState = new _jestSnapshot.SnapshotState(snapshotPath, {\n    expand,\n    prettierPath,\n    snapshotFormat,\n    updateSnapshot\n  }); // @ts-expect-error: snapshotState is a jest extension of `expect`\n\n  (0, _expect.setState)({\n    snapshotState,\n    testPath\n  }); // Return it back to the outer scope (test runner outside the VM).\n\n  return snapshotState;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","setupJestGlobals","_expect","require","_jestSnapshot","addSuppressedErrors","result","suppressedErrors","getState","setState","length","status","failedExpectations","map","error","actual","expected","matcherName","message","passed","stack","addAssertionErrors","assertionErrors","extractExpectedAssertionsErrors","jasmineErrors","concat","patchJasmine","global","jasmine","Spec","realSpec","constructor","attr","resultCallback","call","onStart","context","currentTestName","getFullName","config","globalConfig","localRequire","testPath","snapshotSerializers","reverse","forEach","path","addSerializer","expand","updateSnapshot","prettierPath","snapshotFormat","snapshotResolver","buildSnapshotResolver","snapshotPath","resolveSnapshotPath","snapshotState","SnapshotState"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jest-jasmine2/build/setup_jest_globals.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = setupJestGlobals;\n\nvar _expect = require('expect');\n\nvar _jestSnapshot = require('jest-snapshot');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Get suppressed errors form  jest-matchers that weren't throw during\n// test execution and add them to the test result, potentially failing\n// a passing test.\nconst addSuppressedErrors = result => {\n  const {suppressedErrors} = (0, _expect.getState)();\n  (0, _expect.setState)({\n    suppressedErrors: []\n  });\n\n  if (suppressedErrors.length) {\n    result.status = 'failed';\n    result.failedExpectations = suppressedErrors.map(error => ({\n      actual: '',\n      // passing error for custom test reporters\n      error,\n      expected: '',\n      matcherName: '',\n      message: error.message,\n      passed: false,\n      stack: error.stack\n    }));\n  }\n};\n\nconst addAssertionErrors = result => {\n  const assertionErrors = (0, _expect.extractExpectedAssertionsErrors)();\n\n  if (assertionErrors.length) {\n    const jasmineErrors = assertionErrors.map(({actual, error, expected}) => ({\n      actual,\n      expected,\n      message: error.stack,\n      passed: false\n    }));\n    result.status = 'failed';\n    result.failedExpectations = result.failedExpectations.concat(jasmineErrors);\n  }\n};\n\nconst patchJasmine = () => {\n  global.jasmine.Spec = (realSpec => {\n    class Spec extends realSpec {\n      constructor(attr) {\n        const resultCallback = attr.resultCallback;\n\n        attr.resultCallback = function (result) {\n          addSuppressedErrors(result);\n          addAssertionErrors(result);\n          resultCallback.call(attr, result);\n        };\n\n        const onStart = attr.onStart;\n\n        attr.onStart = context => {\n          (0, _expect.setState)({\n            currentTestName: context.getFullName()\n          });\n          onStart && onStart.call(attr, context);\n        };\n\n        super(attr);\n      }\n    }\n\n    return Spec;\n  })(global.jasmine.Spec);\n};\n\nasync function setupJestGlobals({\n  config,\n  globalConfig,\n  localRequire,\n  testPath\n}) {\n  // Jest tests snapshotSerializers in order preceding built-in serializers.\n  // Therefore, add in reverse because the last added is the first tested.\n  config.snapshotSerializers\n    .concat()\n    .reverse()\n    .forEach(path => {\n      (0, _jestSnapshot.addSerializer)(localRequire(path));\n    });\n  patchJasmine();\n  const {expand, updateSnapshot} = globalConfig;\n  const {prettierPath, snapshotFormat} = config;\n  const snapshotResolver = await (0, _jestSnapshot.buildSnapshotResolver)(\n    config,\n    localRequire\n  );\n  const snapshotPath = snapshotResolver.resolveSnapshotPath(testPath);\n  const snapshotState = new _jestSnapshot.SnapshotState(snapshotPath, {\n    expand,\n    prettierPath,\n    snapshotFormat,\n    updateSnapshot\n  }); // @ts-expect-error: snapshotState is a jest extension of `expect`\n\n  (0, _expect.setState)({\n    snapshotState,\n    testPath\n  }); // Return it back to the outer scope (test runner outside the VM).\n\n  return snapshotState;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}