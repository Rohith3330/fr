{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loadPrivatePartialConfig;\nexports.loadPartialConfig = void 0;\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _gensync() {\n  const data = require(\"gensync\");\n\n  _gensync = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _plugin = require(\"./plugin\");\n\nvar _util = require(\"./util\");\n\nvar _item = require(\"./item\");\n\nvar _configChain = require(\"./config-chain\");\n\nvar _environment = require(\"./helpers/environment\");\n\nvar _options = require(\"./validation/options\");\n\nvar _files = require(\"./files\");\n\nvar _resolveTargets = require(\"./resolve-targets\");\n\nconst _excluded = [\"showIgnoredFiles\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction resolveRootMode(rootDir, rootMode) {\n  switch (rootMode) {\n    case \"root\":\n      return rootDir;\n\n    case \"upward-optional\":\n      {\n        const upwardRootDir = (0, _files.findConfigUpwards)(rootDir);\n        return upwardRootDir === null ? rootDir : upwardRootDir;\n      }\n\n    case \"upward\":\n      {\n        const upwardRootDir = (0, _files.findConfigUpwards)(rootDir);\n        if (upwardRootDir !== null) return upwardRootDir;\n        throw Object.assign(new Error(`Babel was run with rootMode:\"upward\" but a root could not ` + `be found when searching upward from \"${rootDir}\".\\n` + `One of the following config files must be in the directory tree: ` + `\"${_files.ROOT_CONFIG_FILENAMES.join(\", \")}\".`), {\n          code: \"BABEL_ROOT_NOT_FOUND\",\n          dirname: rootDir\n        });\n      }\n\n    default:\n      throw new Error(`Assertion failure - unknown rootMode value.`);\n  }\n}\n\nfunction* loadPrivatePartialConfig(inputOpts) {\n  if (inputOpts != null && (typeof inputOpts !== \"object\" || Array.isArray(inputOpts))) {\n    throw new Error(\"Babel options must be an object, null, or undefined\");\n  }\n\n  const args = inputOpts ? (0, _options.validate)(\"arguments\", inputOpts) : {};\n  const {\n    envName = (0, _environment.getEnv)(),\n    cwd = \".\",\n    root: rootDir = \".\",\n    rootMode = \"root\",\n    caller,\n    cloneInputAst = true\n  } = args;\n\n  const absoluteCwd = _path().resolve(cwd);\n\n  const absoluteRootDir = resolveRootMode(_path().resolve(absoluteCwd, rootDir), rootMode);\n  const filename = typeof args.filename === \"string\" ? _path().resolve(cwd, args.filename) : undefined;\n  const showConfigPath = yield* (0, _files.resolveShowConfigPath)(absoluteCwd);\n  const context = {\n    filename,\n    cwd: absoluteCwd,\n    root: absoluteRootDir,\n    envName,\n    caller,\n    showConfig: showConfigPath === filename\n  };\n  const configChain = yield* (0, _configChain.buildRootChain)(args, context);\n  if (!configChain) return null;\n  const merged = {\n    assumptions: {}\n  };\n  configChain.options.forEach(opts => {\n    (0, _util.mergeOptions)(merged, opts);\n  });\n  const options = Object.assign({}, merged, {\n    targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir),\n    cloneInputAst,\n    babelrc: false,\n    configFile: false,\n    browserslistConfigFile: false,\n    passPerPreset: false,\n    envName: context.envName,\n    cwd: context.cwd,\n    root: context.root,\n    rootMode: \"root\",\n    filename: typeof context.filename === \"string\" ? context.filename : undefined,\n    plugins: configChain.plugins.map(descriptor => (0, _item.createItemFromDescriptor)(descriptor)),\n    presets: configChain.presets.map(descriptor => (0, _item.createItemFromDescriptor)(descriptor))\n  });\n  return {\n    options,\n    context,\n    fileHandling: configChain.fileHandling,\n    ignore: configChain.ignore,\n    babelrc: configChain.babelrc,\n    config: configChain.config,\n    files: configChain.files\n  };\n}\n\nconst loadPartialConfig = _gensync()(function* (opts) {\n  let showIgnoredFiles = false;\n\n  if (typeof opts === \"object\" && opts !== null && !Array.isArray(opts)) {\n    var _opts = opts;\n    ({\n      showIgnoredFiles\n    } = _opts);\n    opts = _objectWithoutPropertiesLoose(_opts, _excluded);\n    _opts;\n  }\n\n  const result = yield* loadPrivatePartialConfig(opts);\n  if (!result) return null;\n  const {\n    options,\n    babelrc,\n    ignore,\n    config,\n    fileHandling,\n    files\n  } = result;\n\n  if (fileHandling === \"ignored\" && !showIgnoredFiles) {\n    return null;\n  }\n\n  (options.plugins || []).forEach(item => {\n    if (item.value instanceof _plugin.default) {\n      throw new Error(\"Passing cached plugin instances is not supported in \" + \"babel.loadPartialConfig()\");\n    }\n  });\n  return new PartialConfig(options, babelrc ? babelrc.filepath : undefined, ignore ? ignore.filepath : undefined, config ? config.filepath : undefined, fileHandling, files);\n});\n\nexports.loadPartialConfig = loadPartialConfig;\n\nclass PartialConfig {\n  constructor(options, babelrc, ignore, config, fileHandling, files) {\n    this.options = void 0;\n    this.babelrc = void 0;\n    this.babelignore = void 0;\n    this.config = void 0;\n    this.fileHandling = void 0;\n    this.files = void 0;\n    this.options = options;\n    this.babelignore = ignore;\n    this.babelrc = babelrc;\n    this.config = config;\n    this.fileHandling = fileHandling;\n    this.files = files;\n    Object.freeze(this);\n  }\n\n  hasFilesystemConfig() {\n    return this.babelrc !== undefined || this.config !== undefined;\n  }\n\n}\n\nObject.freeze(PartialConfig.prototype);\n0 && 0;","map":{"version":3,"mappings":"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","names":["_path","_gensync","resolveRootMode","rootDir","rootMode","upwardRootDir","Object","assign","Error","ROOT_CONFIG_FILENAMES","join","code","dirname","loadPrivatePartialConfig","inputOpts","Array","isArray","args","envName","cwd","root","caller","cloneInputAst","absoluteCwd","path","resolve","absoluteRootDir","filename","undefined","showConfigPath","context","showConfig","configChain","merged","assumptions","options","forEach","opts","targets","babelrc","configFile","browserslistConfigFile","passPerPreset","plugins","map","descriptor","presets","fileHandling","ignore","config","files","loadPartialConfig","gensync","showIgnoredFiles","_opts","result","item","value","Plugin","PartialConfig","filepath","constructor","babelignore","freeze","hasFilesystemConfig","prototype"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\config\\partial.ts"],"sourcesContent":["import path from \"path\";\nimport gensync from \"gensync\";\nimport type { Handler } from \"gensync\";\nimport Plugin from \"./plugin\";\nimport { mergeOptions } from \"./util\";\nimport { createItemFromDescriptor } from \"./item\";\nimport { buildRootChain } from \"./config-chain\";\nimport type { ConfigContext, FileHandling } from \"./config-chain\";\nimport { getEnv } from \"./helpers/environment\";\nimport { validate } from \"./validation/options\";\n\nimport type {\n  ValidatedOptions,\n  NormalizedOptions,\n  RootMode,\n} from \"./validation/options\";\n\nimport {\n  findConfigUpwards,\n  resolveShowConfigPath,\n  ROOT_CONFIG_FILENAMES,\n} from \"./files\";\nimport type { ConfigFile, IgnoreFile } from \"./files\";\nimport { resolveTargets } from \"./resolve-targets\";\n\nfunction resolveRootMode(rootDir: string, rootMode: RootMode): string {\n  switch (rootMode) {\n    case \"root\":\n      return rootDir;\n\n    case \"upward-optional\": {\n      const upwardRootDir = findConfigUpwards(rootDir);\n      return upwardRootDir === null ? rootDir : upwardRootDir;\n    }\n\n    case \"upward\": {\n      const upwardRootDir = findConfigUpwards(rootDir);\n      if (upwardRootDir !== null) return upwardRootDir;\n\n      throw Object.assign(\n        new Error(\n          `Babel was run with rootMode:\"upward\" but a root could not ` +\n            `be found when searching upward from \"${rootDir}\".\\n` +\n            `One of the following config files must be in the directory tree: ` +\n            `\"${ROOT_CONFIG_FILENAMES.join(\", \")}\".`,\n        ) as any,\n        {\n          code: \"BABEL_ROOT_NOT_FOUND\",\n          dirname: rootDir,\n        },\n      );\n    }\n    default:\n      throw new Error(`Assertion failure - unknown rootMode value.`);\n  }\n}\n\ntype PrivPartialConfig = {\n  options: NormalizedOptions;\n  context: ConfigContext;\n  fileHandling: FileHandling;\n  ignore: IgnoreFile | void;\n  babelrc: ConfigFile | void;\n  config: ConfigFile | void;\n  files: Set<string>;\n};\n\nexport default function* loadPrivatePartialConfig(\n  inputOpts: unknown,\n): Handler<PrivPartialConfig | null> {\n  if (\n    inputOpts != null &&\n    (typeof inputOpts !== \"object\" || Array.isArray(inputOpts))\n  ) {\n    throw new Error(\"Babel options must be an object, null, or undefined\");\n  }\n\n  const args = inputOpts ? validate(\"arguments\", inputOpts) : {};\n\n  const {\n    envName = getEnv(),\n    cwd = \".\",\n    root: rootDir = \".\",\n    rootMode = \"root\",\n    caller,\n    cloneInputAst = true,\n  } = args;\n  const absoluteCwd = path.resolve(cwd);\n  const absoluteRootDir = resolveRootMode(\n    path.resolve(absoluteCwd, rootDir),\n    rootMode,\n  );\n\n  const filename =\n    typeof args.filename === \"string\"\n      ? path.resolve(cwd, args.filename)\n      : undefined;\n\n  const showConfigPath = yield* resolveShowConfigPath(absoluteCwd);\n\n  const context: ConfigContext = {\n    filename,\n    cwd: absoluteCwd,\n    root: absoluteRootDir,\n    envName,\n    caller,\n    showConfig: showConfigPath === filename,\n  };\n\n  const configChain = yield* buildRootChain(args, context);\n  if (!configChain) return null;\n\n  const merged: ValidatedOptions = {\n    assumptions: {},\n  };\n  configChain.options.forEach(opts => {\n    mergeOptions(merged as any, opts);\n  });\n\n  const options: NormalizedOptions = {\n    ...merged,\n    targets: resolveTargets(merged, absoluteRootDir),\n\n    // Tack the passes onto the object itself so that, if this object is\n    // passed back to Babel a second time, it will be in the right structure\n    // to not change behavior.\n    cloneInputAst,\n    babelrc: false,\n    configFile: false,\n    browserslistConfigFile: false,\n    passPerPreset: false,\n    envName: context.envName,\n    cwd: context.cwd,\n    root: context.root,\n    rootMode: \"root\",\n    filename:\n      typeof context.filename === \"string\" ? context.filename : undefined,\n\n    plugins: configChain.plugins.map(descriptor =>\n      createItemFromDescriptor(descriptor),\n    ),\n    presets: configChain.presets.map(descriptor =>\n      createItemFromDescriptor(descriptor),\n    ),\n  };\n\n  return {\n    options,\n    context,\n    fileHandling: configChain.fileHandling,\n    ignore: configChain.ignore,\n    babelrc: configChain.babelrc,\n    config: configChain.config,\n    files: configChain.files,\n  };\n}\n\ntype LoadPartialConfigOpts = {\n  showIgnoredFiles?: boolean;\n};\n\nexport const loadPartialConfig = gensync(function* (\n  opts?: LoadPartialConfigOpts,\n): Handler<PartialConfig | null> {\n  let showIgnoredFiles = false;\n  // We only extract showIgnoredFiles if opts is an object, so that\n  // loadPrivatePartialConfig can throw the appropriate error if it's not.\n  if (typeof opts === \"object\" && opts !== null && !Array.isArray(opts)) {\n    ({ showIgnoredFiles, ...opts } = opts);\n  }\n\n  const result: PrivPartialConfig | undefined | null =\n    yield* loadPrivatePartialConfig(opts);\n  if (!result) return null;\n\n  const { options, babelrc, ignore, config, fileHandling, files } = result;\n\n  if (fileHandling === \"ignored\" && !showIgnoredFiles) {\n    return null;\n  }\n\n  (options.plugins || []).forEach(item => {\n    // @ts-expect-error todo(flow->ts): better type annotation for `item.value`\n    if (item.value instanceof Plugin) {\n      throw new Error(\n        \"Passing cached plugin instances is not supported in \" +\n          \"babel.loadPartialConfig()\",\n      );\n    }\n  });\n\n  return new PartialConfig(\n    options,\n    babelrc ? babelrc.filepath : undefined,\n    ignore ? ignore.filepath : undefined,\n    config ? config.filepath : undefined,\n    fileHandling,\n    files,\n  );\n});\n\nexport type { PartialConfig };\n\nclass PartialConfig {\n  /**\n   * These properties are public, so any changes to them should be considered\n   * a breaking change to Babel's API.\n   */\n  options: NormalizedOptions;\n  babelrc: string | void;\n  babelignore: string | void;\n  config: string | void;\n  fileHandling: FileHandling;\n  files: Set<string>;\n\n  constructor(\n    options: NormalizedOptions,\n    babelrc: string | void,\n    ignore: string | void,\n    config: string | void,\n    fileHandling: FileHandling,\n    files: Set<string>,\n  ) {\n    this.options = options;\n    this.babelignore = ignore;\n    this.babelrc = babelrc;\n    this.config = config;\n    this.fileHandling = fileHandling;\n    this.files = files;\n\n    // Freeze since this is a public API and it should be extremely obvious that\n    // reassigning properties on here does nothing.\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns true if there is a config file in the filesystem for this config.\n   */\n  hasFilesystemConfig(): boolean {\n    return this.babelrc !== undefined || this.config !== undefined;\n  }\n}\nObject.freeze(PartialConfig.prototype);\n"]},"metadata":{},"sourceType":"script"}