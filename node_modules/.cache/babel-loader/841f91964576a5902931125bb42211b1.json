{"ast":null,"code":"\"use strict\";\n/*--------------------------------------------------------------------------\r\n\r\n@sinclair/typebox\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n---------------------------------------------------------------------------*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Type = exports.TypeBuilder = exports.Modifier = exports.Hint = exports.Kind = void 0; // --------------------------------------------------------------------------\n// Symbols\n// --------------------------------------------------------------------------\n\nexports.Kind = Symbol.for('TypeBox.Kind');\nexports.Hint = Symbol.for('TypeBox.Hint');\nexports.Modifier = Symbol.for('TypeBox.Modifier'); // --------------------------------------------------------------------------\n// TypeBuilder\n// --------------------------------------------------------------------------\n\nlet TypeOrdinal = 0;\n\nclass TypeBuilder {\n  // ----------------------------------------------------------------------\n  // Modifiers\n  // ----------------------------------------------------------------------\n\n  /** Creates a readonly optional property */\n  ReadonlyOptional(item) {\n    return {\n      [exports.Modifier]: 'ReadonlyOptional',\n      ...item\n    };\n  }\n  /** Creates a readonly property */\n\n\n  Readonly(item) {\n    return {\n      [exports.Modifier]: 'Readonly',\n      ...item\n    };\n  }\n  /** Creates a optional property */\n\n\n  Optional(item) {\n    return {\n      [exports.Modifier]: 'Optional',\n      ...item\n    };\n  } // ----------------------------------------------------------------------\n  // Types\n  // ----------------------------------------------------------------------\n\n  /** Creates a any type */\n\n\n  Any() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Any'\n    });\n  }\n  /** Creates a array type */\n\n\n  Array(items) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Array',\n      type: 'array',\n      items\n    });\n  }\n  /** Creates a boolean type */\n\n\n  Boolean() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Boolean',\n      type: 'boolean'\n    });\n  }\n  /** Creates a tuple type from this constructors parameters */\n\n\n  ConstructorParameters(schema) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.Tuple([...schema.parameters], { ...options\n    });\n  }\n  /** Creates a constructor type */\n\n\n  Constructor(parameters, returns) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (parameters[exports.Kind] === 'Tuple') {\n      const inner = parameters.items === undefined ? [] : parameters.items;\n      return this.Create({ ...options,\n        [exports.Kind]: 'Constructor',\n        type: 'constructor',\n        parameters: inner,\n        returns\n      });\n    } else if (globalThis.Array.isArray(parameters)) {\n      return this.Create({ ...options,\n        [exports.Kind]: 'Constructor',\n        type: 'constructor',\n        parameters,\n        returns\n      });\n    } else {\n      throw new Error('TypeBuilder.Constructor: Invalid parameters');\n    }\n  }\n  /** Creates a enum type */\n\n\n  Enum(item) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const values = Object.keys(item).filter(key => isNaN(key)).map(key => item[key]);\n    const anyOf = values.map(value => typeof value === 'string' ? {\n      [exports.Kind]: 'Literal',\n      type: 'string',\n      const: value\n    } : {\n      [exports.Kind]: 'Literal',\n      type: 'number',\n      const: value\n    });\n    return this.Create({ ...options,\n      [exports.Kind]: 'Union',\n      [exports.Hint]: 'Enum',\n      anyOf\n    });\n  }\n  /** Creates a function type */\n\n\n  Function(parameters, returns) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (parameters[exports.Kind] === 'Tuple') {\n      const inner = parameters.items === undefined ? [] : parameters.items;\n      return this.Create({ ...options,\n        [exports.Kind]: 'Function',\n        type: 'function',\n        parameters: inner,\n        returns\n      });\n    } else if (globalThis.Array.isArray(parameters)) {\n      return this.Create({ ...options,\n        [exports.Kind]: 'Function',\n        type: 'function',\n        parameters,\n        returns\n      });\n    } else {\n      throw new Error('TypeBuilder.Function: Invalid parameters');\n    }\n  }\n  /** Creates a type from this constructors instance type */\n\n\n  InstanceType(schema) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return { ...options,\n      ...this.Clone(schema.returns)\n    };\n  }\n  /** Creates a integer type */\n\n\n  Integer() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Integer',\n      type: 'integer'\n    });\n  }\n  /** Creates a intersect type. */\n\n\n  Intersect(objects) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    const isOptional = schema => schema[exports.Modifier] && schema[exports.Modifier] === 'Optional' || schema[exports.Modifier] === 'ReadonlyOptional';\n\n    const [required, optional] = [new Set(), new Set()];\n\n    for (const object of objects) {\n      for (const [key, schema] of Object.entries(object.properties)) {\n        if (isOptional(schema)) optional.add(key);\n      }\n    }\n\n    for (const object of objects) {\n      for (const key of Object.keys(object.properties)) {\n        if (!optional.has(key)) required.add(key);\n      }\n    }\n\n    const properties = {};\n\n    for (const object of objects) {\n      for (const [key, schema] of Object.entries(object.properties)) {\n        properties[key] = properties[key] === undefined ? schema : {\n          [exports.Kind]: 'Union',\n          anyOf: [properties[key], { ...schema\n          }]\n        };\n      }\n    }\n\n    if (required.size > 0) {\n      return this.Create({ ...options,\n        [exports.Kind]: 'Object',\n        type: 'object',\n        properties,\n        required: [...required]\n      });\n    } else {\n      return this.Create({ ...options,\n        [exports.Kind]: 'Object',\n        type: 'object',\n        properties\n      });\n    }\n  }\n  /** Creates a keyof type */\n\n\n  KeyOf(object) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const items = Object.keys(object.properties).map(key => this.Create({ ...options,\n      [exports.Kind]: 'Literal',\n      type: 'string',\n      const: key\n    }));\n    return this.Create({ ...options,\n      [exports.Kind]: 'Union',\n      [exports.Hint]: 'KeyOf',\n      anyOf: items\n    });\n  }\n  /** Creates a literal type. */\n\n\n  Literal(value) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Literal',\n      const: value,\n      type: typeof value\n    });\n  }\n  /** Creates a never type */\n\n\n  Never() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Never',\n      allOf: [{\n        type: 'number',\n        const: 0\n      }, {\n        type: 'number',\n        const: 1\n      }]\n    });\n  }\n  /** Creates a null type */\n\n\n  Null() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Null',\n      type: 'null'\n    });\n  }\n  /** Creates a number type */\n\n\n  Number() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Number',\n      type: 'number'\n    });\n  }\n  /** Creates an object type with the given properties */\n\n\n  Object(properties) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const property_names = Object.keys(properties);\n    const optional = property_names.filter(name => {\n      const property = properties[name];\n      const modifier = property[exports.Modifier];\n      return modifier && (modifier === 'Optional' || modifier === 'ReadonlyOptional');\n    });\n    const required = property_names.filter(name => !optional.includes(name));\n\n    if (required.length > 0) {\n      return this.Create({ ...options,\n        [exports.Kind]: 'Object',\n        type: 'object',\n        properties,\n        required\n      });\n    } else {\n      return this.Create({ ...options,\n        [exports.Kind]: 'Object',\n        type: 'object',\n        properties\n      });\n    }\n  }\n  /** Creates a new object whose properties are omitted from the given object */\n\n\n  Omit(schema, keys) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const select = keys[exports.Kind] === 'Union' ? keys.anyOf.map(schema => schema.const) : keys;\n    const next = { ...this.Clone(schema),\n      ...options,\n      [exports.Hint]: 'Omit'\n    };\n    next.required = next.required ? next.required.filter(key => !select.includes(key)) : undefined;\n\n    for (const key of Object.keys(next.properties)) {\n      if (select.includes(key)) delete next.properties[key];\n    }\n\n    return this.Create(next);\n  }\n  /** Creates a tuple type from this functions parameters */\n\n\n  Parameters(schema) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return exports.Type.Tuple(schema.parameters, { ...options\n    });\n  }\n  /** Creates an object type whose properties are all optional */\n\n\n  Partial(schema) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const next = { ...this.Clone(schema),\n      ...options,\n      [exports.Hint]: 'Partial'\n    };\n    delete next.required;\n\n    for (const key of Object.keys(next.properties)) {\n      const property = next.properties[key];\n      const modifer = property[exports.Modifier];\n\n      switch (modifer) {\n        case 'ReadonlyOptional':\n          property[exports.Modifier] = 'ReadonlyOptional';\n          break;\n\n        case 'Readonly':\n          property[exports.Modifier] = 'ReadonlyOptional';\n          break;\n\n        case 'Optional':\n          property[exports.Modifier] = 'Optional';\n          break;\n\n        default:\n          property[exports.Modifier] = 'Optional';\n          break;\n      }\n    }\n\n    return this.Create(next);\n  }\n  /** Creates a object whose properties are picked from the given object */\n\n\n  Pick(schema, keys) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const select = keys[exports.Kind] === 'Union' ? keys.anyOf.map(schema => schema.const) : keys;\n    const next = { ...this.Clone(schema),\n      ...options,\n      [exports.Hint]: 'Pick'\n    };\n    next.required = next.required ? next.required.filter(key => select.includes(key)) : undefined;\n\n    for (const key of Object.keys(next.properties)) {\n      if (!select.includes(key)) delete next.properties[key];\n    }\n\n    return this.Create(next);\n  }\n  /** Creates a promise type. This type cannot be represented in schema. */\n\n\n  Promise(item) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Promise',\n      type: 'promise',\n      item\n    });\n  }\n  /** Creates a record type */\n\n\n  Record(key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    // If string literal union return TObject with properties extracted from union.\n    if (key[exports.Kind] === 'Union') {\n      return this.Object(key.anyOf.reduce((acc, literal) => {\n        return { ...acc,\n          [literal.const]: value\n        };\n      }, {}), { ...options,\n        [exports.Hint]: 'Record'\n      });\n    } // otherwise return TRecord with patternProperties\n\n\n    const pattern = key[exports.Kind] === 'Number' ? '^(0|[1-9][0-9]*)$' : key[exports.Kind] === 'String' && key.pattern ? key.pattern : '^.*$';\n    return this.Create({ ...options,\n      [exports.Kind]: 'Record',\n      type: 'object',\n      patternProperties: {\n        [pattern]: value\n      },\n      additionalProperties: false\n    });\n  }\n  /** Creates a recursive object type */\n\n\n  Recursive(callback) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (options.$id === undefined) options.$id = `type-${TypeOrdinal++}`;\n    const self = callback({\n      [exports.Kind]: 'Self',\n      $ref: `${options.$id}`\n    });\n    self.$id = options.$id;\n    return this.Create({ ...options,\n      ...self\n    });\n  }\n  /** Creates a reference schema */\n\n\n  Ref(schema) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (schema.$id === undefined) throw Error('TypeBuilder.Ref: Referenced schema must specify an $id');\n    return this.Create({ ...options,\n      [exports.Kind]: 'Ref',\n      $ref: schema.$id\n    });\n  }\n  /** Creates a string type from a regular expression */\n\n\n  RegEx(regex) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'String',\n      type: 'string',\n      pattern: regex.source\n    });\n  }\n  /** Creates an object type whose properties are all required */\n\n\n  Required(schema) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const next = { ...this.Clone(schema),\n      ...options,\n      [exports.Hint]: 'Required'\n    };\n    next.required = Object.keys(next.properties);\n\n    for (const key of Object.keys(next.properties)) {\n      const property = next.properties[key];\n      const modifier = property[exports.Modifier];\n\n      switch (modifier) {\n        case 'ReadonlyOptional':\n          property[exports.Modifier] = 'Readonly';\n          break;\n\n        case 'Readonly':\n          property[exports.Modifier] = 'Readonly';\n          break;\n\n        case 'Optional':\n          delete property[exports.Modifier];\n          break;\n\n        default:\n          delete property[exports.Modifier];\n          break;\n      }\n    }\n\n    return this.Create(next);\n  }\n  /** Creates a type from this functions return type */\n\n\n  ReturnType(schema) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return { ...options,\n      ...this.Clone(schema.returns)\n    };\n  }\n  /** Removes Kind and Modifier symbol property keys from this schema */\n\n\n  Strict(schema) {\n    return JSON.parse(JSON.stringify(schema));\n  }\n  /** Creates a string type */\n\n\n  String() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'String',\n      type: 'string'\n    });\n  }\n  /** Creates a tuple type */\n\n\n  Tuple(items) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const additionalItems = false;\n    const minItems = items.length;\n    const maxItems = items.length;\n    const schema = items.length > 0 ? { ...options,\n      [exports.Kind]: 'Tuple',\n      type: 'array',\n      items,\n      additionalItems,\n      minItems,\n      maxItems\n    } : { ...options,\n      [exports.Kind]: 'Tuple',\n      type: 'array',\n      minItems,\n      maxItems\n    };\n    return this.Create(schema);\n  }\n  /** Creates a undefined type */\n\n\n  Undefined() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Undefined',\n      type: 'object',\n      specialized: 'Undefined'\n    });\n  }\n\n  Union(items) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return items.length === 0 ? exports.Type.Never({ ...options\n    }) : this.Create({ ...options,\n      [exports.Kind]: 'Union',\n      anyOf: items\n    });\n  }\n  /** Creates a Uint8Array type */\n\n\n  Uint8Array() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Uint8Array',\n      type: 'object',\n      specialized: 'Uint8Array'\n    });\n  }\n  /** Creates an unknown type */\n\n\n  Unknown() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Unknown'\n    });\n  }\n  /** Creates a user defined schema that infers as type T  */\n\n\n  Unsafe() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: options[exports.Kind] || 'Unsafe'\n    });\n  }\n  /** Creates a void type */\n\n\n  Void() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.Create({ ...options,\n      [exports.Kind]: 'Void',\n      type: 'null'\n    });\n  }\n  /** Use this function to return TSchema with static and params omitted */\n\n\n  Create(schema) {\n    return schema;\n  }\n  /** Clones the given value */\n\n\n  Clone(value) {\n    const isObject = object => typeof object === 'object' && object !== null && !Array.isArray(object);\n\n    const isArray = object => typeof object === 'object' && object !== null && Array.isArray(object);\n\n    if (isObject(value)) {\n      return Object.keys(value).reduce((acc, key) => ({ ...acc,\n        [key]: this.Clone(value[key])\n      }), Object.getOwnPropertySymbols(value).reduce((acc, key) => ({ ...acc,\n        [key]: this.Clone(value[key])\n      }), {}));\n    } else if (isArray(value)) {\n      return value.map(item => this.Clone(item));\n    } else {\n      return value;\n    }\n  }\n\n}\n\nexports.TypeBuilder = TypeBuilder;\n/** JSON Schema Type Builder with Static Type Resolution for TypeScript */\n\nexports.Type = new TypeBuilder();","map":{"version":3,"names":["Object","defineProperty","exports","value","Type","TypeBuilder","Modifier","Hint","Kind","Symbol","for","TypeOrdinal","ReadonlyOptional","item","Readonly","Optional","Any","options","Create","Array","items","type","Boolean","ConstructorParameters","schema","Tuple","parameters","Constructor","returns","inner","undefined","globalThis","isArray","Error","Enum","values","keys","filter","key","isNaN","map","anyOf","const","Function","InstanceType","Clone","Integer","Intersect","objects","isOptional","required","optional","Set","object","entries","properties","add","has","size","KeyOf","Literal","Never","allOf","Null","Number","property_names","name","property","modifier","includes","length","Omit","select","next","Parameters","Partial","modifer","Pick","Promise","Record","reduce","acc","literal","pattern","patternProperties","additionalProperties","Recursive","callback","$id","self","$ref","Ref","RegEx","regex","source","Required","ReturnType","Strict","JSON","parse","stringify","String","additionalItems","minItems","maxItems","Undefined","specialized","Union","Uint8Array","Unknown","Unsafe","Void","isObject","getOwnPropertySymbols"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@sinclair/typebox/typebox.js"],"sourcesContent":["\"use strict\";\r\n/*--------------------------------------------------------------------------\r\n\r\n@sinclair/typebox\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n---------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Type = exports.TypeBuilder = exports.Modifier = exports.Hint = exports.Kind = void 0;\r\n// --------------------------------------------------------------------------\r\n// Symbols\r\n// --------------------------------------------------------------------------\r\nexports.Kind = Symbol.for('TypeBox.Kind');\r\nexports.Hint = Symbol.for('TypeBox.Hint');\r\nexports.Modifier = Symbol.for('TypeBox.Modifier');\r\n// --------------------------------------------------------------------------\r\n// TypeBuilder\r\n// --------------------------------------------------------------------------\r\nlet TypeOrdinal = 0;\r\nclass TypeBuilder {\r\n    // ----------------------------------------------------------------------\r\n    // Modifiers\r\n    // ----------------------------------------------------------------------\r\n    /** Creates a readonly optional property */\r\n    ReadonlyOptional(item) {\r\n        return { [exports.Modifier]: 'ReadonlyOptional', ...item };\r\n    }\r\n    /** Creates a readonly property */\r\n    Readonly(item) {\r\n        return { [exports.Modifier]: 'Readonly', ...item };\r\n    }\r\n    /** Creates a optional property */\r\n    Optional(item) {\r\n        return { [exports.Modifier]: 'Optional', ...item };\r\n    }\r\n    // ----------------------------------------------------------------------\r\n    // Types\r\n    // ----------------------------------------------------------------------\r\n    /** Creates a any type */\r\n    Any(options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'Any' });\r\n    }\r\n    /** Creates a array type */\r\n    Array(items, options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'Array', type: 'array', items });\r\n    }\r\n    /** Creates a boolean type */\r\n    Boolean(options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'Boolean', type: 'boolean' });\r\n    }\r\n    /** Creates a tuple type from this constructors parameters */\r\n    ConstructorParameters(schema, options = {}) {\r\n        return this.Tuple([...schema.parameters], { ...options });\r\n    }\r\n    /** Creates a constructor type */\r\n    Constructor(parameters, returns, options = {}) {\r\n        if (parameters[exports.Kind] === 'Tuple') {\r\n            const inner = parameters.items === undefined ? [] : parameters.items;\r\n            return this.Create({ ...options, [exports.Kind]: 'Constructor', type: 'constructor', parameters: inner, returns });\r\n        }\r\n        else if (globalThis.Array.isArray(parameters)) {\r\n            return this.Create({ ...options, [exports.Kind]: 'Constructor', type: 'constructor', parameters, returns });\r\n        }\r\n        else {\r\n            throw new Error('TypeBuilder.Constructor: Invalid parameters');\r\n        }\r\n    }\r\n    /** Creates a enum type */\r\n    Enum(item, options = {}) {\r\n        const values = Object.keys(item)\r\n            .filter((key) => isNaN(key))\r\n            .map((key) => item[key]);\r\n        const anyOf = values.map((value) => (typeof value === 'string' ? { [exports.Kind]: 'Literal', type: 'string', const: value } : { [exports.Kind]: 'Literal', type: 'number', const: value }));\r\n        return this.Create({ ...options, [exports.Kind]: 'Union', [exports.Hint]: 'Enum', anyOf });\r\n    }\r\n    /** Creates a function type */\r\n    Function(parameters, returns, options = {}) {\r\n        if (parameters[exports.Kind] === 'Tuple') {\r\n            const inner = parameters.items === undefined ? [] : parameters.items;\r\n            return this.Create({ ...options, [exports.Kind]: 'Function', type: 'function', parameters: inner, returns });\r\n        }\r\n        else if (globalThis.Array.isArray(parameters)) {\r\n            return this.Create({ ...options, [exports.Kind]: 'Function', type: 'function', parameters, returns });\r\n        }\r\n        else {\r\n            throw new Error('TypeBuilder.Function: Invalid parameters');\r\n        }\r\n    }\r\n    /** Creates a type from this constructors instance type */\r\n    InstanceType(schema, options = {}) {\r\n        return { ...options, ...this.Clone(schema.returns) };\r\n    }\r\n    /** Creates a integer type */\r\n    Integer(options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'Integer', type: 'integer' });\r\n    }\r\n    /** Creates a intersect type. */\r\n    Intersect(objects, options = {}) {\r\n        const isOptional = (schema) => (schema[exports.Modifier] && schema[exports.Modifier] === 'Optional') || schema[exports.Modifier] === 'ReadonlyOptional';\r\n        const [required, optional] = [new Set(), new Set()];\r\n        for (const object of objects) {\r\n            for (const [key, schema] of Object.entries(object.properties)) {\r\n                if (isOptional(schema))\r\n                    optional.add(key);\r\n            }\r\n        }\r\n        for (const object of objects) {\r\n            for (const key of Object.keys(object.properties)) {\r\n                if (!optional.has(key))\r\n                    required.add(key);\r\n            }\r\n        }\r\n        const properties = {};\r\n        for (const object of objects) {\r\n            for (const [key, schema] of Object.entries(object.properties)) {\r\n                properties[key] = properties[key] === undefined ? schema : { [exports.Kind]: 'Union', anyOf: [properties[key], { ...schema }] };\r\n            }\r\n        }\r\n        if (required.size > 0) {\r\n            return this.Create({ ...options, [exports.Kind]: 'Object', type: 'object', properties, required: [...required] });\r\n        }\r\n        else {\r\n            return this.Create({ ...options, [exports.Kind]: 'Object', type: 'object', properties });\r\n        }\r\n    }\r\n    /** Creates a keyof type */\r\n    KeyOf(object, options = {}) {\r\n        const items = Object.keys(object.properties).map((key) => this.Create({ ...options, [exports.Kind]: 'Literal', type: 'string', const: key }));\r\n        return this.Create({ ...options, [exports.Kind]: 'Union', [exports.Hint]: 'KeyOf', anyOf: items });\r\n    }\r\n    /** Creates a literal type. */\r\n    Literal(value, options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'Literal', const: value, type: typeof value });\r\n    }\r\n    /** Creates a never type */\r\n    Never(options = {}) {\r\n        return this.Create({\r\n            ...options,\r\n            [exports.Kind]: 'Never',\r\n            allOf: [\r\n                { type: 'number', const: 0 },\r\n                { type: 'number', const: 1 },\r\n            ],\r\n        });\r\n    }\r\n    /** Creates a null type */\r\n    Null(options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'Null', type: 'null' });\r\n    }\r\n    /** Creates a number type */\r\n    Number(options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'Number', type: 'number' });\r\n    }\r\n    /** Creates an object type with the given properties */\r\n    Object(properties, options = {}) {\r\n        const property_names = Object.keys(properties);\r\n        const optional = property_names.filter((name) => {\r\n            const property = properties[name];\r\n            const modifier = property[exports.Modifier];\r\n            return modifier && (modifier === 'Optional' || modifier === 'ReadonlyOptional');\r\n        });\r\n        const required = property_names.filter((name) => !optional.includes(name));\r\n        if (required.length > 0) {\r\n            return this.Create({ ...options, [exports.Kind]: 'Object', type: 'object', properties, required });\r\n        }\r\n        else {\r\n            return this.Create({ ...options, [exports.Kind]: 'Object', type: 'object', properties });\r\n        }\r\n    }\r\n    /** Creates a new object whose properties are omitted from the given object */\r\n    Omit(schema, keys, options = {}) {\r\n        const select = keys[exports.Kind] === 'Union' ? keys.anyOf.map((schema) => schema.const) : keys;\r\n        const next = { ...this.Clone(schema), ...options, [exports.Hint]: 'Omit' };\r\n        next.required = next.required ? next.required.filter((key) => !select.includes(key)) : undefined;\r\n        for (const key of Object.keys(next.properties)) {\r\n            if (select.includes(key))\r\n                delete next.properties[key];\r\n        }\r\n        return this.Create(next);\r\n    }\r\n    /** Creates a tuple type from this functions parameters */\r\n    Parameters(schema, options = {}) {\r\n        return exports.Type.Tuple(schema.parameters, { ...options });\r\n    }\r\n    /** Creates an object type whose properties are all optional */\r\n    Partial(schema, options = {}) {\r\n        const next = { ...this.Clone(schema), ...options, [exports.Hint]: 'Partial' };\r\n        delete next.required;\r\n        for (const key of Object.keys(next.properties)) {\r\n            const property = next.properties[key];\r\n            const modifer = property[exports.Modifier];\r\n            switch (modifer) {\r\n                case 'ReadonlyOptional':\r\n                    property[exports.Modifier] = 'ReadonlyOptional';\r\n                    break;\r\n                case 'Readonly':\r\n                    property[exports.Modifier] = 'ReadonlyOptional';\r\n                    break;\r\n                case 'Optional':\r\n                    property[exports.Modifier] = 'Optional';\r\n                    break;\r\n                default:\r\n                    property[exports.Modifier] = 'Optional';\r\n                    break;\r\n            }\r\n        }\r\n        return this.Create(next);\r\n    }\r\n    /** Creates a object whose properties are picked from the given object */\r\n    Pick(schema, keys, options = {}) {\r\n        const select = keys[exports.Kind] === 'Union' ? keys.anyOf.map((schema) => schema.const) : keys;\r\n        const next = { ...this.Clone(schema), ...options, [exports.Hint]: 'Pick' };\r\n        next.required = next.required ? next.required.filter((key) => select.includes(key)) : undefined;\r\n        for (const key of Object.keys(next.properties)) {\r\n            if (!select.includes(key))\r\n                delete next.properties[key];\r\n        }\r\n        return this.Create(next);\r\n    }\r\n    /** Creates a promise type. This type cannot be represented in schema. */\r\n    Promise(item, options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'Promise', type: 'promise', item });\r\n    }\r\n    /** Creates a record type */\r\n    Record(key, value, options = {}) {\r\n        // If string literal union return TObject with properties extracted from union.\r\n        if (key[exports.Kind] === 'Union') {\r\n            return this.Object(key.anyOf.reduce((acc, literal) => {\r\n                return { ...acc, [literal.const]: value };\r\n            }, {}), { ...options, [exports.Hint]: 'Record' });\r\n        }\r\n        // otherwise return TRecord with patternProperties\r\n        const pattern = key[exports.Kind] === 'Number' ? '^(0|[1-9][0-9]*)$' : key[exports.Kind] === 'String' && key.pattern ? key.pattern : '^.*$';\r\n        return this.Create({\r\n            ...options,\r\n            [exports.Kind]: 'Record',\r\n            type: 'object',\r\n            patternProperties: { [pattern]: value },\r\n            additionalProperties: false,\r\n        });\r\n    }\r\n    /** Creates a recursive object type */\r\n    Recursive(callback, options = {}) {\r\n        if (options.$id === undefined)\r\n            options.$id = `type-${TypeOrdinal++}`;\r\n        const self = callback({ [exports.Kind]: 'Self', $ref: `${options.$id}` });\r\n        self.$id = options.$id;\r\n        return this.Create({ ...options, ...self });\r\n    }\r\n    /** Creates a reference schema */\r\n    Ref(schema, options = {}) {\r\n        if (schema.$id === undefined)\r\n            throw Error('TypeBuilder.Ref: Referenced schema must specify an $id');\r\n        return this.Create({ ...options, [exports.Kind]: 'Ref', $ref: schema.$id });\r\n    }\r\n    /** Creates a string type from a regular expression */\r\n    RegEx(regex, options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'String', type: 'string', pattern: regex.source });\r\n    }\r\n    /** Creates an object type whose properties are all required */\r\n    Required(schema, options = {}) {\r\n        const next = { ...this.Clone(schema), ...options, [exports.Hint]: 'Required' };\r\n        next.required = Object.keys(next.properties);\r\n        for (const key of Object.keys(next.properties)) {\r\n            const property = next.properties[key];\r\n            const modifier = property[exports.Modifier];\r\n            switch (modifier) {\r\n                case 'ReadonlyOptional':\r\n                    property[exports.Modifier] = 'Readonly';\r\n                    break;\r\n                case 'Readonly':\r\n                    property[exports.Modifier] = 'Readonly';\r\n                    break;\r\n                case 'Optional':\r\n                    delete property[exports.Modifier];\r\n                    break;\r\n                default:\r\n                    delete property[exports.Modifier];\r\n                    break;\r\n            }\r\n        }\r\n        return this.Create(next);\r\n    }\r\n    /** Creates a type from this functions return type */\r\n    ReturnType(schema, options = {}) {\r\n        return { ...options, ...this.Clone(schema.returns) };\r\n    }\r\n    /** Removes Kind and Modifier symbol property keys from this schema */\r\n    Strict(schema) {\r\n        return JSON.parse(JSON.stringify(schema));\r\n    }\r\n    /** Creates a string type */\r\n    String(options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'String', type: 'string' });\r\n    }\r\n    /** Creates a tuple type */\r\n    Tuple(items, options = {}) {\r\n        const additionalItems = false;\r\n        const minItems = items.length;\r\n        const maxItems = items.length;\r\n        const schema = (items.length > 0 ? { ...options, [exports.Kind]: 'Tuple', type: 'array', items, additionalItems, minItems, maxItems } : { ...options, [exports.Kind]: 'Tuple', type: 'array', minItems, maxItems });\r\n        return this.Create(schema);\r\n    }\r\n    /** Creates a undefined type */\r\n    Undefined(options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'Undefined', type: 'object', specialized: 'Undefined' });\r\n    }\r\n    Union(items, options = {}) {\r\n        return items.length === 0 ? exports.Type.Never({ ...options }) : this.Create({ ...options, [exports.Kind]: 'Union', anyOf: items });\r\n    }\r\n    /** Creates a Uint8Array type */\r\n    Uint8Array(options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'Uint8Array', type: 'object', specialized: 'Uint8Array' });\r\n    }\r\n    /** Creates an unknown type */\r\n    Unknown(options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'Unknown' });\r\n    }\r\n    /** Creates a user defined schema that infers as type T  */\r\n    Unsafe(options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: options[exports.Kind] || 'Unsafe' });\r\n    }\r\n    /** Creates a void type */\r\n    Void(options = {}) {\r\n        return this.Create({ ...options, [exports.Kind]: 'Void', type: 'null' });\r\n    }\r\n    /** Use this function to return TSchema with static and params omitted */\r\n    Create(schema) {\r\n        return schema;\r\n    }\r\n    /** Clones the given value */\r\n    Clone(value) {\r\n        const isObject = (object) => typeof object === 'object' && object !== null && !Array.isArray(object);\r\n        const isArray = (object) => typeof object === 'object' && object !== null && Array.isArray(object);\r\n        if (isObject(value)) {\r\n            return Object.keys(value).reduce((acc, key) => ({\r\n                ...acc,\r\n                [key]: this.Clone(value[key]),\r\n            }), Object.getOwnPropertySymbols(value).reduce((acc, key) => ({\r\n                ...acc,\r\n                [key]: this.Clone(value[key]),\r\n            }), {}));\r\n        }\r\n        else if (isArray(value)) {\r\n            return value.map((item) => this.Clone(item));\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n}\r\nexports.TypeBuilder = TypeBuilder;\r\n/** JSON Schema Type Builder with Static Type Resolution for TypeScript */\r\nexports.Type = new TypeBuilder();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}