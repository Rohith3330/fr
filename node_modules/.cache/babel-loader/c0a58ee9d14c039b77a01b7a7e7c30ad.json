{"ast":null,"code":"/* eslint-env mocha */\nimport fs from 'fs';\nimport path from 'path';\nimport assert from 'assert';\nimport core from '../../src/index';\nconst src = fs.readdirSync(path.resolve(__dirname, '../../src')).filter(f => f.indexOf('.js') >= 0).map(f => path.basename(f, '.js'));\ndescribe('main export', () => {\n  it('should export an object', () => {\n    const expected = 'object';\n    const actual = typeof core;\n    assert.equal(actual, expected);\n  });\n  src.filter(f => f !== 'index').forEach(f => {\n    it(`should export ${f}`, () => {\n      assert.equal(core[f], require(path.join('../../src/', f)).default // eslint-disable-line\n      );\n    });\n    it(`should export ${f} from root`, () => {\n      const file = `${f}.js`;\n      const expected = true;\n      const actual = fs.statSync(path.join(path.resolve('.'), file)).isFile();\n      assert.equal(actual, expected);\n    });\n  });\n});","map":{"version":3,"names":["fs","path","assert","core","src","readdirSync","resolve","__dirname","filter","f","indexOf","map","basename","describe","it","expected","actual","equal","forEach","require","join","default","file","statSync","isFile"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/__tests__/src/index-test.js"],"sourcesContent":["/* eslint-env mocha */\nimport fs from 'fs';\nimport path from 'path';\nimport assert from 'assert';\nimport core from '../../src/index';\n\nconst src = fs.readdirSync(path.resolve(__dirname, '../../src'))\n  .filter((f) => f.indexOf('.js') >= 0)\n  .map((f) => path.basename(f, '.js'));\n\ndescribe('main export', () => {\n  it('should export an object', () => {\n    const expected = 'object';\n    const actual = typeof core;\n\n    assert.equal(actual, expected);\n  });\n\n  src.filter((f) => f !== 'index').forEach((f) => {\n    it(`should export ${f}`, () => {\n      assert.equal(\n        core[f],\n        require(path.join('../../src/', f)).default // eslint-disable-line\n      );\n    });\n\n    it(`should export ${f} from root`, () => {\n      const file = `${f}.js`;\n      const expected = true;\n      const actual = fs.statSync(path.join(path.resolve('.'), file)).isFile();\n\n      assert.equal(actual, expected);\n    });\n  });\n});\n"],"mappings":"AAAA;AACA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,MAAMC,GAAG,GAAGJ,EAAE,CAACK,WAAH,CAAeJ,IAAI,CAACK,OAAL,CAAaC,SAAb,EAAwB,WAAxB,CAAf,EACTC,MADS,CACDC,CAAD,IAAOA,CAAC,CAACC,OAAF,CAAU,KAAV,KAAoB,CADzB,EAETC,GAFS,CAEJF,CAAD,IAAOR,IAAI,CAACW,QAAL,CAAcH,CAAd,EAAiB,KAAjB,CAFF,CAAZ;AAIAI,QAAQ,CAAC,aAAD,EAAgB,MAAM;EAC5BC,EAAE,CAAC,yBAAD,EAA4B,MAAM;IAClC,MAAMC,QAAQ,GAAG,QAAjB;IACA,MAAMC,MAAM,GAAG,OAAOb,IAAtB;IAEAD,MAAM,CAACe,KAAP,CAAaD,MAAb,EAAqBD,QAArB;EACD,CALC,CAAF;EAOAX,GAAG,CAACI,MAAJ,CAAYC,CAAD,IAAOA,CAAC,KAAK,OAAxB,EAAiCS,OAAjC,CAA0CT,CAAD,IAAO;IAC9CK,EAAE,CAAE,iBAAgBL,CAAE,EAApB,EAAuB,MAAM;MAC7BP,MAAM,CAACe,KAAP,CACEd,IAAI,CAACM,CAAD,CADN,EAEEU,OAAO,CAAClB,IAAI,CAACmB,IAAL,CAAU,YAAV,EAAwBX,CAAxB,CAAD,CAAP,CAAoCY,OAFtC,CAE8C;MAF9C;IAID,CALC,CAAF;IAOAP,EAAE,CAAE,iBAAgBL,CAAE,YAApB,EAAiC,MAAM;MACvC,MAAMa,IAAI,GAAI,GAAEb,CAAE,KAAlB;MACA,MAAMM,QAAQ,GAAG,IAAjB;MACA,MAAMC,MAAM,GAAGhB,EAAE,CAACuB,QAAH,CAAYtB,IAAI,CAACmB,IAAL,CAAUnB,IAAI,CAACK,OAAL,CAAa,GAAb,CAAV,EAA6BgB,IAA7B,CAAZ,EAAgDE,MAAhD,EAAf;MAEAtB,MAAM,CAACe,KAAP,CAAaD,MAAb,EAAqBD,QAArB;IACD,CANC,CAAF;EAOD,CAfD;AAgBD,CAxBO,CAAR"},"metadata":{},"sourceType":"module"}