{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst semver = __importStar(require(\"semver\"));\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst util = __importStar(require(\"../util\"));\n\nconst is3dot9 = semver.satisfies(ts.version, `>= 3.9.0 || >= 3.9.1-rc || >= 3.9.0-beta`, {\n  includePrerelease: true\n});\nexports.default = util.createRule({\n  name: 'no-non-null-asserted-optional-chain',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallow non-null assertions after an optional chain expression',\n      recommended: 'error'\n    },\n    hasSuggestions: true,\n    messages: {\n      noNonNullOptionalChain: 'Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.',\n      suggestRemovingNonNull: 'You should remove the non-null assertion.'\n    },\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    // TS3.9 made a breaking change to how non-null works with optional chains.\n    // Pre-3.9,  `x?.y!.z` means `(x?.y).z` - i.e. it essentially scrubbed the optionality from the chain\n    // Post-3.9, `x?.y!.z` means `x?.y!.z`  - i.e. it just asserts that the property `y` is non-null, not the result of `x?.y`.\n    // This means that for > 3.9, x?.y!.z is valid!\n    //\n    // NOTE: these cases are still invalid for 3.9:\n    // - x?.y.z!\n    // - (x?.y)!.z\n    const baseSelectors = {\n      // non-nulling a wrapped chain will scrub all nulls introduced by the chain\n      // (x?.y)!\n      // (x?.())!\n      'TSNonNullExpression > ChainExpression'(node) {\n        // selector guarantees this assertion\n        const parent = node.parent;\n        context.report({\n          node,\n          messageId: 'noNonNullOptionalChain',\n          // use a suggestion instead of a fixer, because this can obviously break type checks\n          suggest: [{\n            messageId: 'suggestRemovingNonNull',\n\n            fix(fixer) {\n              return fixer.removeRange([parent.range[1] - 1, parent.range[1]]);\n            }\n\n          }]\n        });\n      },\n\n      // non-nulling at the end of a chain will scrub all nulls introduced by the chain\n      // x?.y!\n      // x?.()!\n      'ChainExpression > TSNonNullExpression'(node) {\n        context.report({\n          node,\n          messageId: 'noNonNullOptionalChain',\n          // use a suggestion instead of a fixer, because this can obviously break type checks\n          suggest: [{\n            messageId: 'suggestRemovingNonNull',\n\n            fix(fixer) {\n              return fixer.removeRange([node.range[1] - 1, node.range[1]]);\n            }\n\n          }]\n        });\n      }\n\n    };\n\n    if (is3dot9) {\n      return baseSelectors;\n    }\n\n    return Object.assign(Object.assign({}, baseSelectors), {\n      [[// > :not(ChainExpression) because that case is handled by a previous selector\n      'MemberExpression > TSNonNullExpression.object > :not(ChainExpression)', 'CallExpression > TSNonNullExpression.callee > :not(ChainExpression)'].join(', ')](child) {\n        // selector guarantees this assertion\n        const node = child.parent;\n        let current = child;\n\n        while (current) {\n          switch (current.type) {\n            case utils_1.AST_NODE_TYPES.MemberExpression:\n              if (current.optional) {\n                // found an optional chain! stop traversing\n                break;\n              }\n\n              current = current.object;\n              continue;\n\n            case utils_1.AST_NODE_TYPES.CallExpression:\n              if (current.optional) {\n                // found an optional chain! stop traversing\n                break;\n              }\n\n              current = current.callee;\n              continue;\n\n            default:\n              // something that's not a ChainElement, which means this is not an optional chain we want to check\n              return;\n          }\n        }\n\n        context.report({\n          node,\n          messageId: 'noNonNullOptionalChain',\n          // use a suggestion instead of a fixer, because this can obviously break type checks\n          suggest: [{\n            messageId: 'suggestRemovingNonNull',\n\n            fix(fixer) {\n              return fixer.removeRange([node.range[1] - 1, node.range[1]]);\n            }\n\n          }]\n        });\n      }\n\n    });\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAEA;;AAEA,MAAMA,OAAO,GAAGC,MAAM,CAACC,SAAP,CACdC,EAAE,CAACC,OADW,EAEd,0CAFc,EAGd;EACEC,iBAAiB,EAAE;AADrB,CAHc,CAAhB;AAQAC,kBAAeC,IAAI,CAACC,UAAL,CAAgB;EAC7BC,IAAI,EAAE,qCADuB;EAE7BC,IAAI,EAAE;IACJC,IAAI,EAAE,SADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EACT,iEAFE;MAGJC,WAAW,EAAE;IAHT,CAFF;IAOJC,cAAc,EAAE,IAPZ;IAQJC,QAAQ,EAAE;MACRC,sBAAsB,EACpB,6GAFM;MAGRC,sBAAsB,EAAE;IAHhB,CARN;IAaJC,MAAM,EAAE;EAbJ,CAFuB;EAiB7BC,cAAc,EAAE,EAjBa;;EAkB7BC,MAAM,CAACC,OAAD,EAAQ;IACZ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,MAAMC,aAAa,GAAG;MACpB;MACA;MACA;MACA,wCACEC,IADF,EACgC;QAE9B;QACA,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;QACAH,OAAO,CAACI,MAAR,CAAe;UACbF,IADa;UAEbG,SAAS,EAAE,wBAFE;UAGb;UACAC,OAAO,EAAE,CACP;YACED,SAAS,EAAE,wBADb;;YAEEE,GAAG,CAACC,KAAD,EAAM;cACP,OAAOA,KAAK,CAACC,WAAN,CAAkB,CACvBN,MAAM,CAACO,KAAP,CAAa,CAAb,IAAkB,CADK,EAEvBP,MAAM,CAACO,KAAP,CAAa,CAAb,CAFuB,CAAlB,CAAP;YAID;;UAPH,CADO;QAJI,CAAf;MAgBD,CAzBmB;;MA2BpB;MACA;MACA;MACA,wCACER,IADF,EACoC;QAElCF,OAAO,CAACI,MAAR,CAAe;UACbF,IADa;UAEbG,SAAS,EAAE,wBAFE;UAGb;UACAC,OAAO,EAAE,CACP;YACED,SAAS,EAAE,wBADb;;YAEEE,GAAG,CAACC,KAAD,EAAM;cACP,OAAOA,KAAK,CAACC,WAAN,CAAkB,CAACP,IAAI,CAACQ,KAAL,CAAW,CAAX,IAAgB,CAAjB,EAAoBR,IAAI,CAACQ,KAAL,CAAW,CAAX,CAApB,CAAlB,CAAP;YACD;;UAJH,CADO;QAJI,CAAf;MAaD;;IA9CmB,CAAtB;;IAiDA,IAAIhC,OAAJ,EAAa;MACX,OAAOuB,aAAP;IACD;;IAED,uCACKA,aADL,GACkB;MAChB,CAAC,CACC;MACA,uEAFD,EAGC,qEAHD,EAICU,IAJD,CAIM,IAJN,CAAD,EAIcC,KAJd,EAIkC;QAChC;QACA,MAAMV,IAAI,GAAGU,KAAK,CAACT,MAAnB;QAEA,IAAIU,OAAO,GAAGD,KAAd;;QACA,OAAOC,OAAP,EAAgB;UACd,QAAQA,OAAO,CAACxB,IAAhB;YACE,KAAKyB,uBAAeC,gBAApB;cACE,IAAIF,OAAO,CAACG,QAAZ,EAAsB;gBACpB;gBACA;cACD;;cAEDH,OAAO,GAAGA,OAAO,CAACI,MAAlB;cACA;;YAEF,KAAKH,uBAAeI,cAApB;cACE,IAAIL,OAAO,CAACG,QAAZ,EAAsB;gBACpB;gBACA;cACD;;cAEDH,OAAO,GAAGA,OAAO,CAACM,MAAlB;cACA;;YAEF;cACE;cACA;UArBJ;QAuBD;;QAEDnB,OAAO,CAACI,MAAR,CAAe;UACbF,IADa;UAEbG,SAAS,EAAE,wBAFE;UAGb;UACAC,OAAO,EAAE,CACP;YACED,SAAS,EAAE,wBADb;;YAEEE,GAAG,CAACC,KAAD,EAAM;cACP,OAAOA,KAAK,CAACC,WAAN,CAAkB,CAACP,IAAI,CAACQ,KAAL,CAAW,CAAX,IAAgB,CAAjB,EAAoBR,IAAI,CAACQ,KAAL,CAAW,CAAX,CAApB,CAAlB,CAAP;YACD;;UAJH,CADO;QAJI,CAAf;MAaD;;IAjDe,CADlB;EAoDD;;AArI4B,CAAhB,CAAf","names":["is3dot9","semver","satisfies","ts","version","includePrerelease","exports","util","createRule","name","meta","type","docs","description","recommended","hasSuggestions","messages","noNonNullOptionalChain","suggestRemovingNonNull","schema","defaultOptions","create","context","baseSelectors","node","parent","report","messageId","suggest","fix","fixer","removeRange","range","join","child","current","utils_1","MemberExpression","optional","object","CallExpression","callee"],"sources":["../../src/rules/no-non-null-asserted-optional-chain.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}