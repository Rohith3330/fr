{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar try_path_1 = require(\"../try-path\");\n\nvar path_1 = require(\"path\");\n\ndescribe(\"mapping-entry\", function () {\n  var abosolutePathMappings = [{\n    pattern: \"longest/pre/fix/*\",\n    paths: [(0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\")]\n  }, {\n    pattern: \"pre/fix/*\",\n    paths: [(0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo3\")]\n  }, {\n    pattern: \"*\",\n    paths: [(0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1\")]\n  }];\n  var abosolutePathMappingsStarstWithSlash = [{\n    pattern: \"/opt/*\",\n    paths: [(0, path_1.join)(\"/absolute\", \"src\", \"aws-layer\")]\n  }, {\n    pattern: \"*\",\n    paths: [(0, path_1.join)(\"/absolute\", \"src\")]\n  }];\n  it(\"should return no paths for relative requested module\", function () {\n    var result = (0, try_path_1.getPathsToTry)([\".ts\", \"tsx\"], abosolutePathMappings, \"./requested-module\"); // assert.deepEqual(result, undefined);\n\n    expect(result).toBeUndefined();\n  });\n  it(\"should return no paths if no pattern match the requested module\", function () {\n    var result = (0, try_path_1.getPathsToTry)([\".ts\", \"tsx\"], [{\n      pattern: \"longest/pre/fix/*\",\n      paths: [(0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\")]\n    }, {\n      pattern: \"pre/fix/*\",\n      paths: [(0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo3\")]\n    }], \"requested-module\");\n    expect(result).toBeUndefined();\n  });\n  it(\"should get all paths that matches requested module\", function () {\n    var result = (0, try_path_1.getPathsToTry)([\".ts\", \".tsx\"], abosolutePathMappings, \"longest/pre/fix/requested-module\"); // assert.deepEqual(result, [\n    //   // \"longest/pre/fix/*\"\n    //   { type: \"file\", path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\") },\n    //   {\n    //     type: \"extension\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar.ts\"),\n    //   },\n    //   {\n    //     type: \"extension\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar.tsx\"),\n    //   },\n    //   {\n    //     type: \"package\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"package.json\"),\n    //   },\n    //   {\n    //     type: \"index\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"index.ts\"),\n    //   },\n    //   {\n    //     type: \"index\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"index.tsx\"),\n    //   },\n    //   // \"*\"\n    //   { type: \"file\", path: join(\"/absolute\", \"base\", \"url\", \"foo1\") },\n    //   { type: \"extension\", path: join(\"/absolute\", \"base\", \"url\", \"foo1.ts\") },\n    //   { type: \"extension\", path: join(\"/absolute\", \"base\", \"url\", \"foo1.tsx\") },\n    //   {\n    //     type: \"package\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo1\", \"package.json\"),\n    //   },\n    //   {\n    //     type: \"index\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo1\", \"index.ts\"),\n    //   },\n    //   {\n    //     type: \"index\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo1\", \"index.tsx\"),\n    //   },\n    // ]);\n\n    expect(result).toEqual([// \"longest/pre/fix/*\"\n    {\n      type: \"file\",\n      path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\")\n    }, {\n      type: \"extension\",\n      path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar.ts\")\n    }, {\n      type: \"extension\",\n      path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar.tsx\")\n    }, {\n      type: \"package\",\n      path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"package.json\")\n    }, {\n      type: \"index\",\n      path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"index.ts\")\n    }, {\n      type: \"index\",\n      path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"index.tsx\")\n    }, // \"*\"\n    {\n      type: \"file\",\n      path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1\")\n    }, {\n      type: \"extension\",\n      path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1.ts\")\n    }, {\n      type: \"extension\",\n      path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1.tsx\")\n    }, {\n      type: \"package\",\n      path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1\", \"package.json\")\n    }, {\n      type: \"index\",\n      path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1\", \"index.ts\")\n    }, {\n      type: \"index\",\n      path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1\", \"index.tsx\")\n    }]);\n  });\n  it(\"should resolve paths starting with a slash\", function () {\n    var result = (0, try_path_1.getPathsToTry)([\".ts\"], abosolutePathMappingsStarstWithSlash, \"/opt/utils\");\n    expect(result).toEqual([// \"opt/*\"\n    {\n      path: (0, path_1.join)(\"/absolute\", \"src\", \"aws-layer\"),\n      type: \"file\"\n    }, {\n      path: (0, path_1.join)(\"/absolute\", \"src\", \"aws-layer.ts\"),\n      type: \"extension\"\n    }, {\n      path: (0, path_1.join)(\"/absolute\", \"src\", \"aws-layer\", \"package.json\"),\n      type: \"package\"\n    }, {\n      path: (0, path_1.join)(\"/absolute\", \"src\", \"aws-layer\", \"index.ts\"),\n      type: \"index\"\n    }, // \"*\"\n    {\n      path: (0, path_1.join)(\"/absolute\", \"src\"),\n      type: \"file\"\n    }, {\n      path: (0, path_1.join)(\"/absolute\", \"src.ts\"),\n      type: \"extension\"\n    }, {\n      path: (0, path_1.join)(\"/absolute\", \"src\", \"package.json\"),\n      type: \"package\"\n    }, {\n      path: (0, path_1.join)(\"/absolute\", \"src\", \"index.ts\"),\n      type: \"index\"\n    }]);\n  });\n}); // describe(\"match-star\", () => {\n//   it(\"should match star in last position\", () => {\n//     const result = matchStar(\"lib/*\", \"lib/mylib\");\n//     assert.equal(result, \"mylib\");\n//   });\n//   it(\"should match star in first position\", () => {\n//     const result = matchStar(\"*/lib\", \"mylib/lib\");\n//     assert.equal(result, \"mylib\");\n//   });\n// });","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AAEAA,QAAQ,CAAC,eAAD,EAAkB;EACxB,IAAMC,qBAAqB,GAAG,CAC5B;IACEC,OAAO,EAAE,mBADX;IAEEC,KAAK,EAAE,CAAC,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,KAAzC,CAAD;EAFT,CAD4B,EAK5B;IAAED,OAAO,EAAE,WAAX;IAAwBC,KAAK,EAAE,CAAC,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,CAAD;EAA/B,CAL4B,EAM5B;IAAED,OAAO,EAAE,GAAX;IAAgBC,KAAK,EAAE,CAAC,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,CAAD;EAAvB,CAN4B,CAA9B;EAQA,IAAMC,oCAAoC,GAAG,CAC3C;IACEF,OAAO,EAAE,QADX;IAEEC,KAAK,EAAE,CAAC,iBAAK,WAAL,EAAkB,KAAlB,EAAyB,WAAzB,CAAD;EAFT,CAD2C,EAK3C;IACED,OAAO,EAAE,GADX;IAEEC,KAAK,EAAE,CAAC,iBAAK,WAAL,EAAkB,KAAlB,CAAD;EAFT,CAL2C,CAA7C;EAUAE,EAAE,CAAC,sDAAD,EAAyD;IACzD,IAAMC,MAAM,GAAG,8BACb,CAAC,KAAD,EAAQ,KAAR,CADa,EAEbL,qBAFa,EAGb,oBAHa,CAAf,CADyD,CAMzD;;IACAM,MAAM,CAACD,MAAD,CAAN,CAAeE,aAAf;EACD,CARC,CAAF;EAUAH,EAAE,CAAC,iEAAD,EAAoE;IACpE,IAAMC,MAAM,GAAG,8BACb,CAAC,KAAD,EAAQ,KAAR,CADa,EAEb,CACE;MACEJ,OAAO,EAAE,mBADX;MAEEC,KAAK,EAAE,CAAC,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,KAAzC,CAAD;IAFT,CADF,EAKE;MACED,OAAO,EAAE,WADX;MAEEC,KAAK,EAAE,CAAC,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,CAAD;IAFT,CALF,CAFa,EAYb,kBAZa,CAAf;IAcAI,MAAM,CAACD,MAAD,CAAN,CAAeE,aAAf;EACD,CAhBC,CAAF;EAkBAH,EAAE,CAAC,oDAAD,EAAuD;IACvD,IAAMC,MAAM,GAAG,8BACb,CAAC,KAAD,EAAQ,MAAR,CADa,EAEbL,qBAFa,EAGb,kCAHa,CAAf,CADuD,CAMvD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACAM,MAAM,CAACD,MAAD,CAAN,CAAeG,OAAf,CAAuB,CACrB;IACA;MAAEC,IAAI,EAAE,MAAR;MAAgBC,IAAI,EAAE,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,KAAzC;IAAtB,CAFqB,EAGrB;MACED,IAAI,EAAE,WADR;MAEEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,QAAzC;IAFR,CAHqB,EAOrB;MACED,IAAI,EAAE,WADR;MAEEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,SAAzC;IAFR,CAPqB,EAWrB;MACED,IAAI,EAAE,SADR;MAEEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,KAAzC,EAAgD,cAAhD;IAFR,CAXqB,EAerB;MACED,IAAI,EAAE,OADR;MAEEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,KAAzC,EAAgD,UAAhD;IAFR,CAfqB,EAmBrB;MACED,IAAI,EAAE,OADR;MAEEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,KAAzC,EAAgD,WAAhD;IAFR,CAnBqB,EAuBrB;IACA;MAAED,IAAI,EAAE,MAAR;MAAgBC,IAAI,EAAE,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC;IAAtB,CAxBqB,EAyBrB;MAAED,IAAI,EAAE,WAAR;MAAqBC,IAAI,EAAE,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,SAAjC;IAA3B,CAzBqB,EA0BrB;MAAED,IAAI,EAAE,WAAR;MAAqBC,IAAI,EAAE,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,UAAjC;IAA3B,CA1BqB,EA2BrB;MACED,IAAI,EAAE,SADR;MAEEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,cAAzC;IAFR,CA3BqB,EA+BrB;MACED,IAAI,EAAE,OADR;MAEEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,UAAzC;IAFR,CA/BqB,EAmCrB;MACED,IAAI,EAAE,OADR;MAEEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,MAAjC,EAAyC,WAAzC;IAFR,CAnCqB,CAAvB;EAwCD,CAtFC,CAAF;EAwFAN,EAAE,CAAC,4CAAD,EAA+C;IAC/C,IAAMC,MAAM,GAAG,8BACb,CAAC,KAAD,CADa,EAEbF,oCAFa,EAGb,YAHa,CAAf;IAKAG,MAAM,CAACD,MAAD,CAAN,CAAeG,OAAf,CAAuB,CACrB;IACA;MACEE,IAAI,EAAE,iBAAK,WAAL,EAAkB,KAAlB,EAAyB,WAAzB,CADR;MAEED,IAAI,EAAE;IAFR,CAFqB,EAMrB;MACEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,KAAlB,EAAyB,cAAzB,CADR;MAEED,IAAI,EAAE;IAFR,CANqB,EAUrB;MACEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,KAAlB,EAAyB,WAAzB,EAAsC,cAAtC,CADR;MAEED,IAAI,EAAE;IAFR,CAVqB,EAcrB;MACEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,KAAlB,EAAyB,WAAzB,EAAsC,UAAtC,CADR;MAEED,IAAI,EAAE;IAFR,CAdqB,EAkBrB;IACA;MACEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,KAAlB,CADR;MAEED,IAAI,EAAE;IAFR,CAnBqB,EAuBrB;MACEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,QAAlB,CADR;MAEED,IAAI,EAAE;IAFR,CAvBqB,EA2BrB;MACEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,KAAlB,EAAyB,cAAzB,CADR;MAEED,IAAI,EAAE;IAFR,CA3BqB,EA+BrB;MACEC,IAAI,EAAE,iBAAK,WAAL,EAAkB,KAAlB,EAAyB,UAAzB,CADR;MAEED,IAAI,EAAE;IAFR,CA/BqB,CAAvB;EAoCD,CA1CC,CAAF;AA2CD,CAlLO,CAAR,C,CAoLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":["describe","abosolutePathMappings","pattern","paths","abosolutePathMappingsStarstWithSlash","it","result","expect","toBeUndefined","toEqual","type","path"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\tsconfig-paths\\src\\__tests__\\try-path.test.ts"],"sourcesContent":["import { getPathsToTry } from \"../try-path\";\nimport { join } from \"path\";\n\ndescribe(\"mapping-entry\", () => {\n  const abosolutePathMappings = [\n    {\n      pattern: \"longest/pre/fix/*\",\n      paths: [join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\")],\n    },\n    { pattern: \"pre/fix/*\", paths: [join(\"/absolute\", \"base\", \"url\", \"foo3\")] },\n    { pattern: \"*\", paths: [join(\"/absolute\", \"base\", \"url\", \"foo1\")] },\n  ];\n  const abosolutePathMappingsStarstWithSlash = [\n    {\n      pattern: \"/opt/*\",\n      paths: [join(\"/absolute\", \"src\", \"aws-layer\")],\n    },\n    {\n      pattern: \"*\",\n      paths: [join(\"/absolute\", \"src\")],\n    },\n  ];\n  it(\"should return no paths for relative requested module\", () => {\n    const result = getPathsToTry(\n      [\".ts\", \"tsx\"],\n      abosolutePathMappings,\n      \"./requested-module\"\n    );\n    // assert.deepEqual(result, undefined);\n    expect(result).toBeUndefined();\n  });\n\n  it(\"should return no paths if no pattern match the requested module\", () => {\n    const result = getPathsToTry(\n      [\".ts\", \"tsx\"],\n      [\n        {\n          pattern: \"longest/pre/fix/*\",\n          paths: [join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\")],\n        },\n        {\n          pattern: \"pre/fix/*\",\n          paths: [join(\"/absolute\", \"base\", \"url\", \"foo3\")],\n        },\n      ],\n      \"requested-module\"\n    );\n    expect(result).toBeUndefined();\n  });\n\n  it(\"should get all paths that matches requested module\", () => {\n    const result = getPathsToTry(\n      [\".ts\", \".tsx\"],\n      abosolutePathMappings,\n      \"longest/pre/fix/requested-module\"\n    );\n    // assert.deepEqual(result, [\n    //   // \"longest/pre/fix/*\"\n    //   { type: \"file\", path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\") },\n    //   {\n    //     type: \"extension\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar.ts\"),\n    //   },\n    //   {\n    //     type: \"extension\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar.tsx\"),\n    //   },\n    //   {\n    //     type: \"package\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"package.json\"),\n    //   },\n    //   {\n    //     type: \"index\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"index.ts\"),\n    //   },\n    //   {\n    //     type: \"index\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"index.tsx\"),\n    //   },\n    //   // \"*\"\n    //   { type: \"file\", path: join(\"/absolute\", \"base\", \"url\", \"foo1\") },\n    //   { type: \"extension\", path: join(\"/absolute\", \"base\", \"url\", \"foo1.ts\") },\n    //   { type: \"extension\", path: join(\"/absolute\", \"base\", \"url\", \"foo1.tsx\") },\n    //   {\n    //     type: \"package\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo1\", \"package.json\"),\n    //   },\n    //   {\n    //     type: \"index\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo1\", \"index.ts\"),\n    //   },\n    //   {\n    //     type: \"index\",\n    //     path: join(\"/absolute\", \"base\", \"url\", \"foo1\", \"index.tsx\"),\n    //   },\n    // ]);\n    expect(result).toEqual([\n      // \"longest/pre/fix/*\"\n      { type: \"file\", path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\") },\n      {\n        type: \"extension\",\n        path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar.ts\"),\n      },\n      {\n        type: \"extension\",\n        path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar.tsx\"),\n      },\n      {\n        type: \"package\",\n        path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"package.json\"),\n      },\n      {\n        type: \"index\",\n        path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"index.ts\"),\n      },\n      {\n        type: \"index\",\n        path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"index.tsx\"),\n      },\n      // \"*\"\n      { type: \"file\", path: join(\"/absolute\", \"base\", \"url\", \"foo1\") },\n      { type: \"extension\", path: join(\"/absolute\", \"base\", \"url\", \"foo1.ts\") },\n      { type: \"extension\", path: join(\"/absolute\", \"base\", \"url\", \"foo1.tsx\") },\n      {\n        type: \"package\",\n        path: join(\"/absolute\", \"base\", \"url\", \"foo1\", \"package.json\"),\n      },\n      {\n        type: \"index\",\n        path: join(\"/absolute\", \"base\", \"url\", \"foo1\", \"index.ts\"),\n      },\n      {\n        type: \"index\",\n        path: join(\"/absolute\", \"base\", \"url\", \"foo1\", \"index.tsx\"),\n      },\n    ]);\n  });\n\n  it(\"should resolve paths starting with a slash\", () => {\n    const result = getPathsToTry(\n      [\".ts\"],\n      abosolutePathMappingsStarstWithSlash,\n      \"/opt/utils\"\n    );\n    expect(result).toEqual([\n      // \"opt/*\"\n      {\n        path: join(\"/absolute\", \"src\", \"aws-layer\"),\n        type: \"file\",\n      },\n      {\n        path: join(\"/absolute\", \"src\", \"aws-layer.ts\"),\n        type: \"extension\",\n      },\n      {\n        path: join(\"/absolute\", \"src\", \"aws-layer\", \"package.json\"),\n        type: \"package\",\n      },\n      {\n        path: join(\"/absolute\", \"src\", \"aws-layer\", \"index.ts\"),\n        type: \"index\",\n      },\n      // \"*\"\n      {\n        path: join(\"/absolute\", \"src\"),\n        type: \"file\",\n      },\n      {\n        path: join(\"/absolute\", \"src.ts\"),\n        type: \"extension\",\n      },\n      {\n        path: join(\"/absolute\", \"src\", \"package.json\"),\n        type: \"package\",\n      },\n      {\n        path: join(\"/absolute\", \"src\", \"index.ts\"),\n        type: \"index\",\n      },\n    ]);\n  });\n});\n\n// describe(\"match-star\", () => {\n//   it(\"should match star in last position\", () => {\n//     const result = matchStar(\"lib/*\", \"lib/mylib\");\n//     assert.equal(result, \"mylib\");\n//   });\n//   it(\"should match star in first position\", () => {\n//     const result = matchStar(\"*/lib\", \"mylib/lib\");\n//     assert.equal(result, \"mylib\");\n//   });\n// });\n"]},"metadata":{},"sourceType":"script"}