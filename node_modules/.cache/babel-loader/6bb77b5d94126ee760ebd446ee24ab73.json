{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $RegExpPrototype = GetIntrinsic('%RegExp.prototype%');\n\nvar SameValue = require('./SameValue');\n\nvar Type = require('./Type');\n\nvar $indexOf = callBound('String.prototype.indexOf');\n\nvar hasRegExpMatcher = require('is-regex');\n\nvar getFlags = require('regexp.prototype.flags'); // https://262.ecma-international.org/13.0/#sec-regexphasflag\n\n\nmodule.exports = function RegExpHasFlag(R, codeUnit) {\n  if (Type(codeUnit) !== 'String' || codeUnit.length !== 1) {\n    throw new $TypeError('Assertion failed: `string` must be a code unit - a String of length 1');\n  }\n\n  if (Type(R) !== 'Object') {\n    throw new $TypeError('Assertion failed: Type(R) is not Object');\n  }\n\n  if (!hasRegExpMatcher(R)) {\n    // step 2\n    if (SameValue(R, $RegExpPrototype)) {\n      return void undefined; // step 2.a\n    }\n\n    throw new $TypeError('`R` must be a RegExp object'); // step 2.b\n  }\n\n  var flags = getFlags(R); // step 3\n\n  return $indexOf(flags, codeUnit) > -1; // steps 4-5\n};","map":{"version":3,"names":["GetIntrinsic","require","callBound","$TypeError","$RegExpPrototype","SameValue","Type","$indexOf","hasRegExpMatcher","getFlags","module","exports","RegExpHasFlag","R","codeUnit","length","undefined","flags"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2022/RegExpHasFlag.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $RegExpPrototype = GetIntrinsic('%RegExp.prototype%');\n\nvar SameValue = require('./SameValue');\nvar Type = require('./Type');\n\nvar $indexOf = callBound('String.prototype.indexOf');\n\nvar hasRegExpMatcher = require('is-regex');\nvar getFlags = require('regexp.prototype.flags');\n\n// https://262.ecma-international.org/13.0/#sec-regexphasflag\n\nmodule.exports = function RegExpHasFlag(R, codeUnit) {\n\tif (Type(codeUnit) !== 'String' || codeUnit.length !== 1) {\n\t\tthrow new $TypeError('Assertion failed: `string` must be a code unit - a String of length 1');\n\t}\n\n\tif (Type(R) !== 'Object') {\n\t\tthrow new $TypeError('Assertion failed: Type(R) is not Object');\n\t}\n\n\tif (!hasRegExpMatcher(R)) { // step 2\n\t\tif (SameValue(R, $RegExpPrototype)) {\n\t\t\treturn void undefined; // step 2.a\n\t\t}\n\t\tthrow new $TypeError('`R` must be a RegExp object'); // step 2.b\n\t}\n\n\tvar flags = getFlags(R); // step 3\n\n\treturn $indexOf(flags, codeUnit) > -1; // steps 4-5\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIE,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;AACA,IAAII,gBAAgB,GAAGJ,YAAY,CAAC,oBAAD,CAAnC;;AAEA,IAAIK,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIM,QAAQ,GAAGL,SAAS,CAAC,0BAAD,CAAxB;;AAEA,IAAIM,gBAAgB,GAAGP,OAAO,CAAC,UAAD,CAA9B;;AACA,IAAIQ,QAAQ,GAAGR,OAAO,CAAC,wBAAD,CAAtB,C,CAEA;;;AAEAS,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,CAAvB,EAA0BC,QAA1B,EAAoC;EACpD,IAAIR,IAAI,CAACQ,QAAD,CAAJ,KAAmB,QAAnB,IAA+BA,QAAQ,CAACC,MAAT,KAAoB,CAAvD,EAA0D;IACzD,MAAM,IAAIZ,UAAJ,CAAe,uEAAf,CAAN;EACA;;EAED,IAAIG,IAAI,CAACO,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,MAAM,IAAIV,UAAJ,CAAe,yCAAf,CAAN;EACA;;EAED,IAAI,CAACK,gBAAgB,CAACK,CAAD,CAArB,EAA0B;IAAE;IAC3B,IAAIR,SAAS,CAACQ,CAAD,EAAIT,gBAAJ,CAAb,EAAoC;MACnC,OAAO,KAAKY,SAAZ,CADmC,CACZ;IACvB;;IACD,MAAM,IAAIb,UAAJ,CAAe,6BAAf,CAAN,CAJyB,CAI4B;EACrD;;EAED,IAAIc,KAAK,GAAGR,QAAQ,CAACI,CAAD,CAApB,CAhBoD,CAgB3B;;EAEzB,OAAON,QAAQ,CAACU,KAAD,EAAQH,QAAR,CAAR,GAA4B,CAAC,CAApC,CAlBoD,CAkBb;AACvC,CAnBD"},"metadata":{},"sourceType":"script"}