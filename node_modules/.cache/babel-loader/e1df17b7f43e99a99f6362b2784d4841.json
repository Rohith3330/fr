{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProjectProgram = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst node_utils_1 = require(\"../node-utils\");\n\nconst createWatchProgram_1 = require(\"./createWatchProgram\");\n\nconst shared_1 = require(\"./shared\");\n\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:createProjectProgram');\nconst DEFAULT_EXTRA_FILE_EXTENSIONS = [ts.Extension.Ts, ts.Extension.Tsx, ts.Extension.Js, ts.Extension.Jsx, ts.Extension.Mjs, ts.Extension.Mts, ts.Extension.Cjs, ts.Extension.Cts];\n/**\n * @param code The code of the file being linted\n * @param createDefaultProgram True if the default program should be created\n * @param extra The config object\n * @returns If found, returns the source file corresponding to the code and the containing program\n */\n\nfunction createProjectProgram(code, createDefaultProgram, extra) {\n  log('Creating project program for: %s', extra.filePath);\n  const astAndProgram = (0, node_utils_1.firstDefined)((0, createWatchProgram_1.getProgramsForProjects)(code, extra.filePath, extra), currentProgram => (0, shared_1.getAstFromProgram)(currentProgram, extra));\n\n  if (!astAndProgram && !createDefaultProgram) {\n    // the file was either not matched within the tsconfig, or the extension wasn't expected\n    const errorLines = ['\"parserOptions.project\" has been set for @typescript-eslint/parser.', `The file does not match your project config: ${path_1.default.relative(extra.tsconfigRootDir || process.cwd(), extra.filePath)}.`];\n    let hasMatchedAnError = false;\n    const extraFileExtensions = extra.extraFileExtensions || [];\n    extraFileExtensions.forEach(extraExtension => {\n      if (!extraExtension.startsWith('.')) {\n        errorLines.push(`Found unexpected extension \"${extraExtension}\" specified with the \"extraFileExtensions\" option. Did you mean \".${extraExtension}\"?`);\n      }\n\n      if (DEFAULT_EXTRA_FILE_EXTENSIONS.includes(extraExtension)) {\n        errorLines.push(`You unnecessarily included the extension \"${extraExtension}\" with the \"extraFileExtensions\" option. This extension is already handled by the parser by default.`);\n      }\n    });\n    const fileExtension = path_1.default.extname(extra.filePath);\n\n    if (!DEFAULT_EXTRA_FILE_EXTENSIONS.includes(fileExtension)) {\n      const nonStandardExt = `The extension for the file (${fileExtension}) is non-standard`;\n\n      if (extraFileExtensions.length > 0) {\n        if (!extraFileExtensions.includes(fileExtension)) {\n          errorLines.push(`${nonStandardExt}. It should be added to your existing \"parserOptions.extraFileExtensions\".`);\n          hasMatchedAnError = true;\n        }\n      } else {\n        errorLines.push(`${nonStandardExt}. You should add \"parserOptions.extraFileExtensions\" to your config.`);\n        hasMatchedAnError = true;\n      }\n    }\n\n    if (!hasMatchedAnError) {\n      errorLines.push('The file must be included in at least one of the projects provided.');\n    }\n\n    throw new Error(errorLines.join('\\n'));\n  }\n\n  return astAndProgram;\n}\n\nexports.createProjectProgram = createProjectProgram;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;AAEA;;AAEA,MAAMA,GAAG,GAAG,qBAAM,0DAAN,CAAZ;AAEA,MAAMC,6BAA6B,GAAG,CACpCC,EAAE,CAACC,SAAH,CAAaC,EADuB,EAEpCF,EAAE,CAACC,SAAH,CAAaE,GAFuB,EAGpCH,EAAE,CAACC,SAAH,CAAaG,EAHuB,EAIpCJ,EAAE,CAACC,SAAH,CAAaI,GAJuB,EAKpCL,EAAE,CAACC,SAAH,CAAaK,GALuB,EAMpCN,EAAE,CAACC,SAAH,CAAaM,GANuB,EAOpCP,EAAE,CAACC,SAAH,CAAaO,GAPuB,EAQpCR,EAAE,CAACC,SAAH,CAAaQ,GARuB,CAAtC;AAWA;;;;;;;AAMA,SAASC,oBAAT,CACEC,IADF,EAEEC,oBAFF,EAGEC,KAHF,EAGc;EAEZf,GAAG,CAAC,kCAAD,EAAqCe,KAAK,CAACC,QAA3C,CAAH;EAEA,MAAMC,aAAa,GAAG,+BACpB,iDAAuBJ,IAAvB,EAA6BE,KAAK,CAACC,QAAnC,EAA6CD,KAA7C,CADoB,EAEpBG,cAAc,IAAI,gCAAkBA,cAAlB,EAAkCH,KAAlC,CAFE,CAAtB;;EAKA,IAAI,CAACE,aAAD,IAAkB,CAACH,oBAAvB,EAA6C;IAC3C;IACA,MAAMK,UAAU,GAAG,CACjB,qEADiB,EAEjB,gDAAgDC,eAAKC,QAAL,CAC9CN,KAAK,CAACO,eAAN,IAAyBC,OAAO,CAACC,GAAR,EADqB,EAE9CT,KAAK,CAACC,QAFwC,CAG/C,GALgB,CAAnB;IAOA,IAAIS,iBAAiB,GAAG,KAAxB;IAEA,MAAMC,mBAAmB,GAAGX,KAAK,CAACW,mBAAN,IAA6B,EAAzD;IAEAA,mBAAmB,CAACC,OAApB,CAA4BC,cAAc,IAAG;MAC3C,IAAI,CAACA,cAAc,CAACC,UAAf,CAA0B,GAA1B,CAAL,EAAqC;QACnCV,UAAU,CAACW,IAAX,CACE,+BAA+BF,cAAc,qEAAqEA,cAAc,IADlI;MAGD;;MACD,IAAI3B,6BAA6B,CAAC8B,QAA9B,CAAuCH,cAAvC,CAAJ,EAA4D;QAC1DT,UAAU,CAACW,IAAX,CACE,6CAA6CF,cAAc,sGAD7D;MAGD;IACF,CAXD;IAaA,MAAMI,aAAa,GAAGZ,eAAKa,OAAL,CAAalB,KAAK,CAACC,QAAnB,CAAtB;;IACA,IAAI,CAACf,6BAA6B,CAAC8B,QAA9B,CAAuCC,aAAvC,CAAL,EAA4D;MAC1D,MAAME,cAAc,GAAG,+BAA+BF,aAAa,mBAAnE;;MACA,IAAIN,mBAAmB,CAACS,MAApB,GAA6B,CAAjC,EAAoC;QAClC,IAAI,CAACT,mBAAmB,CAACK,QAApB,CAA6BC,aAA7B,CAAL,EAAkD;UAChDb,UAAU,CAACW,IAAX,CACE,GAAGI,cAAc,4EADnB;UAGAT,iBAAiB,GAAG,IAApB;QACD;MACF,CAPD,MAOO;QACLN,UAAU,CAACW,IAAX,CACE,GAAGI,cAAc,sEADnB;QAGAT,iBAAiB,GAAG,IAApB;MACD;IACF;;IAED,IAAI,CAACA,iBAAL,EAAwB;MACtBN,UAAU,CAACW,IAAX,CACE,qEADF;IAGD;;IAED,MAAM,IAAIM,KAAJ,CAAUjB,UAAU,CAACkB,IAAX,CAAgB,IAAhB,CAAV,CAAN;EACD;;EAED,OAAOpB,aAAP;AACD;;AAEQqB","names":["log","DEFAULT_EXTRA_FILE_EXTENSIONS","ts","Extension","Ts","Tsx","Js","Jsx","Mjs","Mts","Cjs","Cts","createProjectProgram","code","createDefaultProgram","extra","filePath","astAndProgram","currentProgram","errorLines","path_1","relative","tsconfigRootDir","process","cwd","hasMatchedAnError","extraFileExtensions","forEach","extraExtension","startsWith","push","includes","fileExtension","extname","nonStandardExt","length","Error","join","exports"],"sources":["../../src/create-program/createProjectProgram.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}