{"ast":null,"code":"'use strict';\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nvar fs = require('fs');\n\nvar exec = require('child_process').exec;\n\nvar _which = require('which').sync;\n\nfunction which(command) {\n  try {\n    _which(command);\n\n    return command;\n  } catch (err) {\n    return false;\n  }\n} // Look for grep first (any OS). If not found (but on Windows) look for find,\n// which is Windows' horribly crippled grep alternative.\n\n\nvar grep = which('grep') || process.platform === 'win32' && which('find');\nexports['exit'] = {\n  setUp: function (done) {\n    this.origCwd = process.cwd();\n    process.chdir('test/fixtures');\n    done();\n  },\n  tearDown: function (done) {\n    process.chdir(this.origCwd);\n    done();\n  },\n  'grep': function (test) {\n    test.expect(1); // Many unit tests depend on this.\n\n    test.ok(grep, 'A suitable \"grep\" or \"find\" program was not found in the PATH.');\n    test.done();\n  } // The rest of the tests are built dynamically, to keep things sane.\n\n}; // A few helper functions.\n\nfunction normalizeLineEndings(s) {\n  return s.replace(/\\r?\\n/g, '\\n');\n} // Capture command output, normalizing captured stdout to unix file endings.\n\n\nfunction run(command, callback) {\n  exec(command, function (error, stdout) {\n    callback(error ? error.code : 0, normalizeLineEndings(stdout));\n  });\n} // Read a fixture file, normalizing file contents to unix file endings.\n\n\nfunction fixture(filename) {\n  return normalizeLineEndings(String(fs.readFileSync(filename)));\n}\n\nfunction buildTests() {\n  // Build individual unit tests for command output.\n  var counts = [10, 100, 1000];\n  var outputs = [' stdout stderr', ' stdout', ' stderr'];\n  var pipes = ['', ' | ' + grep + ' \"std\"'];\n  counts.forEach(function (count) {\n    outputs.forEach(function (output) {\n      pipes.forEach(function (pipe) {\n        var command = 'node log.js 0 ' + count + output + ' 2>&1' + pipe;\n\n        exports['exit']['output (' + command + ')'] = function (test) {\n          test.expect(2);\n          run(command, function (code, actual) {\n            var expected = fixture(count + output.replace(/ /g, '-') + '.txt'); // Sometimes, the actual file lines are out of order on Windows.\n            // But since the point of this lib is to drain the buffer and not\n            // guarantee output order, we only test the length.\n\n            test.equal(actual.length, expected.length, 'should be the same length.'); // The \"fail\" lines in log.js should NOT be output!\n\n            test.ok(actual.indexOf('fail') === -1, 'should not output after exit is called.');\n            test.done();\n          });\n        };\n      });\n    });\n  }); // Build individual unit tests for exit codes.\n\n  var codes = [0, 1, 123];\n  codes.forEach(function (code) {\n    var command = 'node log.js ' + code + ' 10 stdout stderr';\n\n    exports['exit']['exit code (' + command + ')'] = function (test) {\n      test.expect(1);\n      run(command, function (actual) {\n        // The specified exit code should be passed through.\n        test.equal(actual, code, 'should exit with ' + code + ' error code.');\n        test.done();\n      });\n    };\n  });\n} // Don't bother building tests if grep wasn't found, otherwise everything will\n// fail and the error will get lost.\n\n\nif (grep) {\n  buildTests();\n}","map":{"version":3,"names":["fs","require","exec","_which","sync","which","command","err","grep","process","platform","exports","setUp","done","origCwd","cwd","chdir","tearDown","test","expect","ok","normalizeLineEndings","s","replace","run","callback","error","stdout","code","fixture","filename","String","readFileSync","buildTests","counts","outputs","pipes","forEach","count","output","pipe","actual","expected","equal","length","indexOf","codes"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/exit/test/exit_test.js"],"sourcesContent":["'use strict';\n\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nvar fs = require('fs');\nvar exec = require('child_process').exec;\n\nvar _which = require('which').sync;\nfunction which(command) {\n  try {\n    _which(command);\n    return command;\n  } catch (err) {\n    return false;\n  }\n}\n\n// Look for grep first (any OS). If not found (but on Windows) look for find,\n// which is Windows' horribly crippled grep alternative.\nvar grep = which('grep') || process.platform === 'win32' && which('find');\n\nexports['exit'] = {\n  setUp: function(done) {\n    this.origCwd = process.cwd();\n    process.chdir('test/fixtures');\n    done();\n  },\n  tearDown: function(done) {\n    process.chdir(this.origCwd);\n    done();\n  },\n  'grep': function(test) {\n    test.expect(1);\n    // Many unit tests depend on this.\n    test.ok(grep, 'A suitable \"grep\" or \"find\" program was not found in the PATH.');\n    test.done();\n  },\n  // The rest of the tests are built dynamically, to keep things sane.\n};\n\n// A few helper functions.\nfunction normalizeLineEndings(s) {\n  return s.replace(/\\r?\\n/g, '\\n');\n}\n\n// Capture command output, normalizing captured stdout to unix file endings.\nfunction run(command, callback) {\n  exec(command, function(error, stdout) {\n    callback(error ? error.code : 0, normalizeLineEndings(stdout));\n  });\n}\n\n// Read a fixture file, normalizing file contents to unix file endings.\nfunction fixture(filename) {\n  return normalizeLineEndings(String(fs.readFileSync(filename)));\n}\n\nfunction buildTests() {\n  // Build individual unit tests for command output.\n  var counts = [10, 100, 1000];\n  var outputs = [' stdout stderr', ' stdout', ' stderr'];\n  var pipes = ['', ' | ' + grep + ' \"std\"'];\n  counts.forEach(function(count) {\n    outputs.forEach(function(output) {\n      pipes.forEach(function(pipe) {\n        var command = 'node log.js 0 ' + count + output + ' 2>&1' + pipe;\n        exports['exit']['output (' + command + ')'] = function(test) {\n          test.expect(2);\n          run(command, function(code, actual) {\n            var expected = fixture(count + output.replace(/ /g, '-') + '.txt');\n            // Sometimes, the actual file lines are out of order on Windows.\n            // But since the point of this lib is to drain the buffer and not\n            // guarantee output order, we only test the length.\n            test.equal(actual.length, expected.length, 'should be the same length.');\n            // The \"fail\" lines in log.js should NOT be output!\n            test.ok(actual.indexOf('fail') === -1, 'should not output after exit is called.');\n            test.done();\n          });\n        };\n      });\n    });\n  });\n\n  // Build individual unit tests for exit codes.\n  var codes = [0, 1, 123];\n  codes.forEach(function(code) {\n    var command = 'node log.js ' + code + ' 10 stdout stderr';\n    exports['exit']['exit code (' + command + ')'] = function(test) {\n      test.expect(1);\n      run(command, function(actual) {\n        // The specified exit code should be passed through.\n        test.equal(actual, code, 'should exit with ' + code + ' error code.');\n        test.done();\n      });\n    };\n  });\n}\n\n// Don't bother building tests if grep wasn't found, otherwise everything will\n// fail and the error will get lost.\nif (grep) {\n  buildTests();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}