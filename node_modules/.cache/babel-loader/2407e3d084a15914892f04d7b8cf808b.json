{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'no-implicit-any-catch',\n  meta: {\n    deprecated: true,\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow usage of the implicit `any` type in catch clauses',\n      recommended: false\n    },\n    fixable: 'code',\n    hasSuggestions: true,\n    messages: {\n      implicitAnyInCatch: 'Implicit any in catch clause.',\n      explicitAnyInCatch: 'Explicit any in catch clause.',\n      suggestExplicitUnknown: 'Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.'\n    },\n    schema: [{\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        allowExplicitAny: {\n          description: 'Whether to disallow specifying `: any` as the error type as well. See also `no-explicit-any`.',\n          type: 'boolean'\n        }\n      }\n    }]\n  },\n  defaultOptions: [{\n    allowExplicitAny: false\n  }],\n\n  create(context, _ref) {\n    let [{\n      allowExplicitAny\n    }] = _ref;\n    return {\n      CatchClause(node) {\n        if (!node.param) {\n          return; // ignore catch without variable\n        }\n\n        if (!node.param.typeAnnotation) {\n          context.report({\n            node,\n            messageId: 'implicitAnyInCatch',\n            suggest: [{\n              messageId: 'suggestExplicitUnknown',\n\n              fix(fixer) {\n                return fixer.insertTextAfter(node.param, ': unknown');\n              }\n\n            }]\n          });\n        } else if (!allowExplicitAny && node.param.typeAnnotation.typeAnnotation.type === utils_1.AST_NODE_TYPES.TSAnyKeyword) {\n          context.report({\n            node,\n            messageId: 'explicitAnyInCatch',\n            suggest: [{\n              messageId: 'suggestExplicitUnknown',\n\n              fix(fixer) {\n                return fixer.replaceText(node.param.typeAnnotation, ': unknown');\n              }\n\n            }]\n          });\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AAYAA,kBAAeC,IAAI,CAACC,UAAL,CAAqC;EAClDC,IAAI,EAAE,uBAD4C;EAElDC,IAAI,EAAE;IACJC,UAAU,EAAE,IADR;IAEJC,IAAI,EAAE,YAFF;IAGJC,IAAI,EAAE;MACJC,WAAW,EAAE,4DADT;MAEJC,WAAW,EAAE;IAFT,CAHF;IAOJC,OAAO,EAAE,MAPL;IAQJC,cAAc,EAAE,IARZ;IASJC,QAAQ,EAAE;MACRC,kBAAkB,EAAE,+BADZ;MAERC,kBAAkB,EAAE,+BAFZ;MAGRC,sBAAsB,EACpB;IAJM,CATN;IAeJC,MAAM,EAAE,CACN;MACEV,IAAI,EAAE,QADR;MAEEW,oBAAoB,EAAE,KAFxB;MAGEC,UAAU,EAAE;QACVC,gBAAgB,EAAE;UAChBX,WAAW,EACT,+FAFc;UAGhBF,IAAI,EAAE;QAHU;MADR;IAHd,CADM;EAfJ,CAF4C;EA+BlDc,cAAc,EAAE,CACd;IACED,gBAAgB,EAAE;EADpB,CADc,CA/BkC;;EAoClDE,MAAM,CAACC,OAAD,QAAgC;IAAA,IAAtB,CAAC;MAAEH;IAAF,CAAD,CAAsB;IACpC,OAAO;MACLI,WAAW,CAACC,IAAD,EAAK;QACd,IAAI,CAACA,IAAI,CAACC,KAAV,EAAiB;UACf,OADe,CACP;QACT;;QAED,IAAI,CAACD,IAAI,CAACC,KAAL,CAAWC,cAAhB,EAAgC;UAC9BJ,OAAO,CAACK,MAAR,CAAe;YACbH,IADa;YAEbI,SAAS,EAAE,oBAFE;YAGbC,OAAO,EAAE,CACP;cACED,SAAS,EAAE,wBADb;;cAEEE,GAAG,CAACC,KAAD,EAAM;gBACP,OAAOA,KAAK,CAACC,eAAN,CAAsBR,IAAI,CAACC,KAA3B,EAAmC,WAAnC,CAAP;cACD;;YAJH,CADO;UAHI,CAAf;QAYD,CAbD,MAaO,IACL,CAACN,gBAAD,IACAK,IAAI,CAACC,KAAL,CAAWC,cAAX,CAA0BA,cAA1B,CAAyCpB,IAAzC,KACE2B,uBAAeC,YAHZ,EAIL;UACAZ,OAAO,CAACK,MAAR,CAAe;YACbH,IADa;YAEbI,SAAS,EAAE,oBAFE;YAGbC,OAAO,EAAE,CACP;cACED,SAAS,EAAE,wBADb;;cAEEE,GAAG,CAACC,KAAD,EAAM;gBACP,OAAOA,KAAK,CAACI,WAAN,CACLX,IAAI,CAACC,KAAL,CAAYC,cADP,EAEL,WAFK,CAAP;cAID;;YAPH,CADO;UAHI,CAAf;QAeD;MACF;;IAxCI,CAAP;EA0CD;;AA/EiD,CAArC,CAAf","names":["exports","util","createRule","name","meta","deprecated","type","docs","description","recommended","fixable","hasSuggestions","messages","implicitAnyInCatch","explicitAnyInCatch","suggestExplicitUnknown","schema","additionalProperties","properties","allowExplicitAny","defaultOptions","create","context","CatchClause","node","param","typeAnnotation","report","messageId","suggest","fix","fixer","insertTextAfter","utils_1","TSAnyKeyword","replaceText"],"sources":["../../src/rules/no-implicit-any-catch.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}