{"ast":null,"code":"'use strict';\n\nconst {\n  unit,\n  stringify\n} = require('postcss-value-parser');\n\nconst mathFunctions = require('../lib/mathfunctions.js'); // border: <line-width> || <line-style> || <color>\n// outline: <outline-color> || <outline-style> || <outline-width>\n\n\nconst borderWidths = new Set(['thin', 'medium', 'thick']);\nconst borderStyles = new Set(['none', 'auto', // only in outline-style\n'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset']);\n/**\n * @param {import('postcss-value-parser').ParsedValue} border\n * @return {string}\n */\n\nmodule.exports = function normalizeBorder(border) {\n  const order = {\n    width: '',\n    style: '',\n    color: ''\n  };\n  border.walk(node => {\n    const {\n      type,\n      value\n    } = node;\n\n    if (type === 'word') {\n      if (borderStyles.has(value.toLowerCase())) {\n        order.style = value;\n        return false;\n      }\n\n      if (borderWidths.has(value.toLowerCase()) || unit(value.toLowerCase())) {\n        if (order.width !== '') {\n          order.width = `${order.width} ${value}`;\n          return false;\n        }\n\n        order.width = value;\n        return false;\n      }\n\n      order.color = value;\n      return false;\n    }\n\n    if (type === 'function') {\n      if (mathFunctions.has(value.toLowerCase())) {\n        order.width = stringify(node);\n      } else {\n        order.color = stringify(node);\n      }\n\n      return false;\n    }\n  });\n  return `${order.width} ${order.style} ${order.color}`.trim();\n};","map":{"version":3,"names":["unit","stringify","require","mathFunctions","borderWidths","Set","borderStyles","module","exports","normalizeBorder","border","order","width","style","color","walk","node","type","value","has","toLowerCase","trim"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-ordered-values/src/rules/border.js"],"sourcesContent":["'use strict';\nconst { unit, stringify } = require('postcss-value-parser');\nconst mathFunctions = require('../lib/mathfunctions.js');\n\n// border: <line-width> || <line-style> || <color>\n// outline: <outline-color> || <outline-style> || <outline-width>\n\nconst borderWidths = new Set(['thin', 'medium', 'thick']);\n\nconst borderStyles = new Set([\n  'none',\n  'auto', // only in outline-style\n  'hidden',\n  'dotted',\n  'dashed',\n  'solid',\n  'double',\n  'groove',\n  'ridge',\n  'inset',\n  'outset',\n]);\n\n/**\n * @param {import('postcss-value-parser').ParsedValue} border\n * @return {string}\n */\nmodule.exports = function normalizeBorder(border) {\n  const order = { width: '', style: '', color: '' };\n\n  border.walk((node) => {\n    const { type, value } = node;\n    if (type === 'word') {\n      if (borderStyles.has(value.toLowerCase())) {\n        order.style = value;\n        return false;\n      }\n      if (borderWidths.has(value.toLowerCase()) || unit(value.toLowerCase())) {\n        if (order.width !== '') {\n          order.width = `${order.width} ${value}`;\n          return false;\n        }\n        order.width = value;\n        return false;\n      }\n      order.color = value;\n      return false;\n    }\n    if (type === 'function') {\n      if (mathFunctions.has(value.toLowerCase())) {\n        order.width = stringify(node);\n      } else {\n        order.color = stringify(node);\n      }\n      return false;\n    }\n  });\n\n  return `${order.width} ${order.style} ${order.color}`.trim();\n};\n"],"mappings":"AAAA;;AACA,MAAM;EAAEA,IAAF;EAAQC;AAAR,IAAsBC,OAAO,CAAC,sBAAD,CAAnC;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,yBAAD,CAA7B,C,CAEA;AACA;;;AAEA,MAAME,YAAY,GAAG,IAAIC,GAAJ,CAAQ,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,CAAR,CAArB;AAEA,MAAMC,YAAY,GAAG,IAAID,GAAJ,CAAQ,CAC3B,MAD2B,EAE3B,MAF2B,EAEnB;AACR,QAH2B,EAI3B,QAJ2B,EAK3B,QAL2B,EAM3B,OAN2B,EAO3B,QAP2B,EAQ3B,QAR2B,EAS3B,OAT2B,EAU3B,OAV2B,EAW3B,QAX2B,CAAR,CAArB;AAcA;AACA;AACA;AACA;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;EAChD,MAAMC,KAAK,GAAG;IAAEC,KAAK,EAAE,EAAT;IAAaC,KAAK,EAAE,EAApB;IAAwBC,KAAK,EAAE;EAA/B,CAAd;EAEAJ,MAAM,CAACK,IAAP,CAAaC,IAAD,IAAU;IACpB,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAkBF,IAAxB;;IACA,IAAIC,IAAI,KAAK,MAAb,EAAqB;MACnB,IAAIX,YAAY,CAACa,GAAb,CAAiBD,KAAK,CAACE,WAAN,EAAjB,CAAJ,EAA2C;QACzCT,KAAK,CAACE,KAAN,GAAcK,KAAd;QACA,OAAO,KAAP;MACD;;MACD,IAAId,YAAY,CAACe,GAAb,CAAiBD,KAAK,CAACE,WAAN,EAAjB,KAAyCpB,IAAI,CAACkB,KAAK,CAACE,WAAN,EAAD,CAAjD,EAAwE;QACtE,IAAIT,KAAK,CAACC,KAAN,KAAgB,EAApB,EAAwB;UACtBD,KAAK,CAACC,KAAN,GAAe,GAAED,KAAK,CAACC,KAAM,IAAGM,KAAM,EAAtC;UACA,OAAO,KAAP;QACD;;QACDP,KAAK,CAACC,KAAN,GAAcM,KAAd;QACA,OAAO,KAAP;MACD;;MACDP,KAAK,CAACG,KAAN,GAAcI,KAAd;MACA,OAAO,KAAP;IACD;;IACD,IAAID,IAAI,KAAK,UAAb,EAAyB;MACvB,IAAId,aAAa,CAACgB,GAAd,CAAkBD,KAAK,CAACE,WAAN,EAAlB,CAAJ,EAA4C;QAC1CT,KAAK,CAACC,KAAN,GAAcX,SAAS,CAACe,IAAD,CAAvB;MACD,CAFD,MAEO;QACLL,KAAK,CAACG,KAAN,GAAcb,SAAS,CAACe,IAAD,CAAvB;MACD;;MACD,OAAO,KAAP;IACD;EACF,CA1BD;EA4BA,OAAQ,GAAEL,KAAK,CAACC,KAAM,IAAGD,KAAK,CAACE,KAAM,IAAGF,KAAK,CAACG,KAAM,EAA7C,CAA+CO,IAA/C,EAAP;AACD,CAhCD"},"metadata":{},"sourceType":"script"}