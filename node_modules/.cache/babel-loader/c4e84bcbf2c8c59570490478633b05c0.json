{"ast":null,"code":"/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\n\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n\n/*\r\n * The maximum number of decimal places (DP) of the results of operations involving division:\r\n * div and sqrt, and pow with negative exponents.\r\n */\nvar DP = 20,\n    // 0 to MAX_DP\n\n/*\r\n * The rounding mode (RM) used when rounding to the above decimal places.\r\n *\r\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n *  3  Away from zero.                                  (ROUND_UP)\r\n */\nRM = 1,\n    // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6,\n    // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6,\n    // 1 to 1000000\n\n/*\r\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n * (JavaScript numbers: -7)\r\n * -1000000 is the minimum recommended exponent value of a Big.\r\n */\nNE = -7,\n    // 0 to -1000000\n\n/*\r\n * The positive exponent (PE) at and above which toString returns exponential notation.\r\n * (JavaScript numbers: 21)\r\n * 1000000 is the maximum recommended exponent value of a Big.\r\n * (This limit is not enforced or checked.)\r\n */\nPE = 21,\n    // 0 to 1000000\n\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ',\n    INVALID = NAME + 'Invalid ',\n    INVALID_DP = INVALID + 'decimal places',\n    INVALID_RM = INVALID + 'rounding mode',\n    DIV_BY_ZERO = NAME + 'Division by zero',\n    // The shared prototype object.\nP = {},\n    UNDEFINED = void 0,\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\r\n * Create and return a Big constructor.\r\n *\r\n */\n\nfunction _Big_() {\n  /*\r\n   * The Big constructor and exported function.\r\n   * Create and return a new instance of a Big number object.\r\n   *\r\n   * n {number|string|Big} A numeric value.\r\n   */\n  function Big(n) {\n    var x = this; // Enable constructor usage without new.\n\n    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n); // Duplicate.\n\n    if (n instanceof Big) {\n      x.s = n.s;\n      x.e = n.e;\n      x.c = n.c.slice();\n    } else {\n      parse(x, n);\n    }\n    /*\r\n     * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n     * points to Object.\r\n     */\n\n\n    x.constructor = Big;\n  }\n\n  Big.prototype = P;\n  Big.DP = DP;\n  Big.RM = RM;\n  Big.NE = NE;\n  Big.PE = PE;\n  Big.version = '5.2.2';\n  return Big;\n}\n/*\r\n * Parse the number or string value passed to a Big constructor.\r\n *\r\n * x {Big} A Big number instance.\r\n * n {number|string} A numeric value.\r\n */\n\n\nfunction parse(x, n) {\n  var e, i, nl; // Minus zero?\n\n  if (n === 0 && 1 / n < 0) n = '-0';else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number'); // Determine sign.\n\n  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1; // Decimal point?\n\n  if ((e = n.indexOf('.')) > -1) n = n.replace('.', ''); // Exponential form?\n\n  if ((i = n.search(/e/i)) > 0) {\n    // Determine exponent.\n    if (e < 0) e = i;\n    e += +n.slice(i + 1);\n    n = n.substring(0, i);\n  } else if (e < 0) {\n    // Integer.\n    e = n.length;\n  }\n\n  nl = n.length; // Determine leading zeros.\n\n  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n\n  if (i == nl) {\n    // Zero.\n    x.c = [x.e = 0];\n  } else {\n    // Determine trailing zeros.\n    for (; nl > 0 && n.charAt(--nl) == '0';);\n\n    x.e = e - i - 1;\n    x.c = []; // Convert string to array of digits without leading/trailing zeros.\n\n    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n  }\n\n  return x;\n}\n/*\r\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n * Called by stringify, P.div, P.round and P.sqrt.\r\n *\r\n * x {Big} The Big to round.\r\n * dp {number} Integer, 0 to MAX_DP inclusive.\r\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n * [more] {boolean} Whether the result of division was truncated.\r\n */\n\n\nfunction round(x, dp, rm, more) {\n  var xc = x.c,\n      i = x.e + dp + 1;\n\n  if (i < xc.length) {\n    if (rm === 1) {\n      // xc[i] is the digit after the digit that may be rounded up.\n      more = xc[i] >= 5;\n    } else if (rm === 2) {\n      more = xc[i] > 5 || xc[i] == 5 && (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n    } else if (rm === 3) {\n      more = more || !!xc[0];\n    } else {\n      more = false;\n      if (rm !== 0) throw Error(INVALID_RM);\n    }\n\n    if (i < 1) {\n      xc.length = 1;\n\n      if (more) {\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n        x.e = -dp;\n        xc[0] = 1;\n      } else {\n        // Zero.\n        xc[0] = x.e = 0;\n      }\n    } else {\n      // Remove any digits after the required decimal places.\n      xc.length = i--; // Round up?\n\n      if (more) {\n        // Rounding up may mean the previous digit has to be rounded up.\n        for (; ++xc[i] > 9;) {\n          xc[i] = 0;\n\n          if (!i--) {\n            ++x.e;\n            xc.unshift(1);\n          }\n        }\n      } // Remove trailing zeros.\n\n\n      for (i = xc.length; !xc[--i];) xc.pop();\n    }\n  } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n    throw Error(INVALID_RM);\n  }\n\n  return x;\n}\n/*\r\n * Return a string representing the value of Big x in normal or exponential notation.\r\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n *\r\n * x {Big}\r\n * id? {number} Caller id.\r\n *         1 toExponential\r\n *         2 toFixed\r\n *         3 toPrecision\r\n *         4 valueOf\r\n * n? {number|undefined} Caller's argument.\r\n * k? {number|undefined}\r\n */\n\n\nfunction stringify(x, id, n, k) {\n  var e,\n      s,\n      Big = x.constructor,\n      z = !x.c[0];\n\n  if (n !== UNDEFINED) {\n    if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n      throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n    }\n\n    x = new Big(x); // The index of the digit that may be rounded up.\n\n    n = k - x.e; // Round?\n\n    if (x.c.length > ++k) round(x, n, Big.RM); // toFixed: recalculate k as x.e may have changed if value rounded up.\n\n    if (id == 2) k = x.e + n + 1; // Append zeros?\n\n    for (; x.c.length < k;) x.c.push(0);\n  }\n\n  e = x.e;\n  s = x.c.join('');\n  n = s.length; // Exponential notation?\n\n  if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e; // Normal notation.\n  } else if (e < 0) {\n    for (; ++e;) s = '0' + s;\n\n    s = '0.' + s;\n  } else if (e > 0) {\n    if (++e > n) for (e -= n; e--;) s += '0';else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\n  } else if (n > 1) {\n    s = s.charAt(0) + '.' + s.slice(1);\n  }\n\n  return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n} // Prototype/instance methods\n\n/*\r\n * Return a new Big whose value is the absolute value of this Big.\r\n */\n\n\nP.abs = function () {\n  var x = new this.constructor(this);\n  x.s = 1;\n  return x;\n};\n/*\r\n * Return 1 if the value of this Big is greater than the value of Big y,\r\n *       -1 if the value of this Big is less than the value of Big y, or\r\n *        0 if they have the same value.\r\n*/\n\n\nP.cmp = function (y) {\n  var isneg,\n      x = this,\n      xc = x.c,\n      yc = (y = new x.constructor(y)).c,\n      i = x.s,\n      j = y.s,\n      k = x.e,\n      l = y.e; // Either zero?\n\n  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i; // Signs differ?\n\n  if (i != j) return i;\n  isneg = i < 0; // Compare exponents.\n\n  if (k != l) return k > l ^ isneg ? 1 : -1;\n  j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n  for (i = -1; ++i < j;) {\n    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n  } // Compare lengths.\n\n\n  return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\r\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\n\n\nP.div = function (y) {\n  var x = this,\n      Big = x.constructor,\n      a = x.c,\n      // dividend\n  b = (y = new Big(y)).c,\n      // divisor\n  k = x.s == y.s ? 1 : -1,\n      dp = Big.DP;\n  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP); // Divisor is zero?\n\n  if (!b[0]) throw Error(DIV_BY_ZERO); // Dividend is 0? Return +-0.\n\n  if (!a[0]) return new Big(k * 0);\n  var bl,\n      bt,\n      n,\n      cmp,\n      ri,\n      bz = b.slice(),\n      ai = bl = b.length,\n      al = a.length,\n      r = a.slice(0, bl),\n      // remainder\n  rl = r.length,\n      q = y,\n      // quotient\n  qc = q.c = [],\n      qi = 0,\n      d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n\n  q.s = k;\n  k = d < 0 ? 0 : d; // Create version of divisor with leading zero.\n\n  bz.unshift(0); // Add zeros to make remainder as long as divisor.\n\n  for (; rl++ < bl;) r.push(0);\n\n  do {\n    // n is how many times the divisor goes into current remainder.\n    for (n = 0; n < 10; n++) {\n      // Compare divisor and remainder.\n      if (bl != (rl = r.length)) {\n        cmp = bl > rl ? 1 : -1;\n      } else {\n        for (ri = -1, cmp = 0; ++ri < bl;) {\n          if (b[ri] != r[ri]) {\n            cmp = b[ri] > r[ri] ? 1 : -1;\n            break;\n          }\n        }\n      } // If divisor < remainder, subtract divisor from remainder.\n\n\n      if (cmp < 0) {\n        // Remainder can't be more than 1 digit longer than divisor.\n        // Equalise lengths using divisor with extra leading zero?\n        for (bt = rl == bl ? b : bz; rl;) {\n          if (r[--rl] < bt[rl]) {\n            ri = rl;\n\n            for (; ri && !r[--ri];) r[ri] = 9;\n\n            --r[ri];\n            r[rl] += 10;\n          }\n\n          r[rl] -= bt[rl];\n        }\n\n        for (; !r[0];) r.shift();\n      } else {\n        break;\n      }\n    } // Add the digit n to the result array.\n\n\n    qc[qi++] = cmp ? n : ++n; // Update the remainder.\n\n    if (r[0] && cmp) r[rl] = a[ai] || 0;else r = [a[ai]];\n  } while ((ai++ < al || r[0] !== UNDEFINED) && k--); // Leading zero? Do not remove if result is simply zero (qi == 1).\n\n\n  if (!qc[0] && qi != 1) {\n    // There can't be more than one zero.\n    qc.shift();\n    q.e--;\n  } // Round?\n\n\n  if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\n  return q;\n};\n/*\r\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n */\n\n\nP.eq = function (y) {\n  return !this.cmp(y);\n};\n/*\r\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n * false.\r\n */\n\n\nP.gt = function (y) {\n  return this.cmp(y) > 0;\n};\n/*\r\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\n\n\nP.gte = function (y) {\n  return this.cmp(y) > -1;\n};\n/*\r\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n */\n\n\nP.lt = function (y) {\n  return this.cmp(y) < 0;\n};\n/*\r\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\n\n\nP.lte = function (y) {\n  return this.cmp(y) < 1;\n};\n/*\r\n * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n */\n\n\nP.minus = P.sub = function (y) {\n  var i,\n      j,\n      t,\n      xlty,\n      x = this,\n      Big = x.constructor,\n      a = x.s,\n      b = (y = new Big(y)).s; // Signs differ?\n\n  if (a != b) {\n    y.s = -b;\n    return x.plus(y);\n  }\n\n  var xc = x.c.slice(),\n      xe = x.e,\n      yc = y.c,\n      ye = y.e; // Either zero?\n\n  if (!xc[0] || !yc[0]) {\n    // y is non-zero? x is non-zero? Or both are zero.\n    return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n  } // Determine which is the bigger number. Prepend zeros to equalise exponents.\n\n\n  if (a = xe - ye) {\n    if (xlty = a < 0) {\n      a = -a;\n      t = xc;\n    } else {\n      ye = xe;\n      t = yc;\n    }\n\n    t.reverse();\n\n    for (b = a; b--;) t.push(0);\n\n    t.reverse();\n  } else {\n    // Exponents equal. Check digit by digit.\n    j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n\n    for (a = b = 0; b < j; b++) {\n      if (xc[b] != yc[b]) {\n        xlty = xc[b] < yc[b];\n        break;\n      }\n    }\n  } // x < y? Point xc to the array of the bigger number.\n\n\n  if (xlty) {\n    t = xc;\n    xc = yc;\n    yc = t;\n    y.s = -y.s;\n  }\n  /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n   * needs to start at yc.length.\r\n   */\n\n\n  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0; // Subtract yc from xc.\n\n  for (b = i; j > a;) {\n    if (xc[--j] < yc[j]) {\n      for (i = j; i && !xc[--i];) xc[i] = 9;\n\n      --xc[i];\n      xc[j] += 10;\n    }\n\n    xc[j] -= yc[j];\n  } // Remove trailing zeros.\n\n\n  for (; xc[--b] === 0;) xc.pop(); // Remove leading zeros and adjust exponent accordingly.\n\n\n  for (; xc[0] === 0;) {\n    xc.shift();\n    --ye;\n  }\n\n  if (!xc[0]) {\n    // n - n = +0\n    y.s = 1; // Result must be zero.\n\n    xc = [ye = 0];\n  }\n\n  y.c = xc;\n  y.e = ye;\n  return y;\n};\n/*\r\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n */\n\n\nP.mod = function (y) {\n  var ygtx,\n      x = this,\n      Big = x.constructor,\n      a = x.s,\n      b = (y = new Big(y)).s;\n  if (!y.c[0]) throw Error(DIV_BY_ZERO);\n  x.s = y.s = 1;\n  ygtx = y.cmp(x) == 1;\n  x.s = a;\n  y.s = b;\n  if (ygtx) return new Big(x);\n  a = Big.DP;\n  b = Big.RM;\n  Big.DP = Big.RM = 0;\n  x = x.div(y);\n  Big.DP = a;\n  Big.RM = b;\n  return this.minus(x.times(y));\n};\n/*\r\n * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n */\n\n\nP.plus = P.add = function (y) {\n  var t,\n      x = this,\n      Big = x.constructor,\n      a = x.s,\n      b = (y = new Big(y)).s; // Signs differ?\n\n  if (a != b) {\n    y.s = -b;\n    return x.minus(y);\n  }\n\n  var xe = x.e,\n      xc = x.c,\n      ye = y.e,\n      yc = y.c; // Either zero? y is non-zero? x is non-zero? Or both are zero.\n\n  if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n  xc = xc.slice(); // Prepend zeros to equalise exponents.\n  // Note: reverse faster than unshifts.\n\n  if (a = xe - ye) {\n    if (a > 0) {\n      ye = xe;\n      t = yc;\n    } else {\n      a = -a;\n      t = xc;\n    }\n\n    t.reverse();\n\n    for (; a--;) t.push(0);\n\n    t.reverse();\n  } // Point xc to the longer array.\n\n\n  if (xc.length - yc.length < 0) {\n    t = yc;\n    yc = xc;\n    xc = t;\n  }\n\n  a = yc.length; // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n\n  for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0; // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n\n\n  if (b) {\n    xc.unshift(b);\n    ++ye;\n  } // Remove trailing zeros.\n\n\n  for (a = xc.length; xc[--a] === 0;) xc.pop();\n\n  y.c = xc;\n  y.e = ye;\n  return y;\n};\n/*\r\n * Return a Big whose value is the value of this Big raised to the power n.\r\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n * mode Big.RM.\r\n *\r\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\n\n\nP.pow = function (n) {\n  var x = this,\n      one = new x.constructor(1),\n      y = one,\n      isneg = n < 0;\n  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\n  if (isneg) n = -n;\n\n  for (;;) {\n    if (n & 1) y = y.times(x);\n    n >>= 1;\n    if (!n) break;\n    x = x.times(x);\n  }\n\n  return isneg ? one.div(y) : y;\n};\n/*\r\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n * multiple of 10**-dp.\r\n * If dp is not specified, round to 0 decimal places.\r\n * If rm is not specified, use Big.RM.\r\n *\r\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n */\n\n\nP.round = function (dp, rm) {\n  var Big = this.constructor;\n  if (dp === UNDEFINED) dp = 0;else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\n  return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\r\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\n\n\nP.sqrt = function () {\n  var r,\n      c,\n      t,\n      x = this,\n      Big = x.constructor,\n      s = x.s,\n      e = x.e,\n      half = new Big(0.5); // Zero?\n\n  if (!x.c[0]) return new Big(x); // Negative?\n\n  if (s < 0) throw Error(NAME + 'No square root'); // Estimate.\n\n  s = Math.sqrt(x + ''); // Math.sqrt underflow/overflow?\n  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n\n  if (s === 0 || s === 1 / 0) {\n    c = x.c.join('');\n    if (!(c.length + e & 1)) c += '0';\n    s = Math.sqrt(c);\n    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n    r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n  } else {\n    r = new Big(s);\n  }\n\n  e = r.e + (Big.DP += 4); // Newton-Raphson iteration.\n\n  do {\n    t = r;\n    r = half.times(t.plus(x.div(t)));\n  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n\n  return round(r, Big.DP -= 4, Big.RM);\n};\n/*\r\n * Return a new Big whose value is the value of this Big times the value of Big y.\r\n */\n\n\nP.times = P.mul = function (y) {\n  var c,\n      x = this,\n      Big = x.constructor,\n      xc = x.c,\n      yc = (y = new Big(y)).c,\n      a = xc.length,\n      b = yc.length,\n      i = x.e,\n      j = y.e; // Determine sign of result.\n\n  y.s = x.s == y.s ? 1 : -1; // Return signed 0 if either 0.\n\n  if (!xc[0] || !yc[0]) return new Big(y.s * 0); // Initialise exponent of result as x.e + y.e.\n\n  y.e = i + j; // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n\n  if (a < b) {\n    c = xc;\n    xc = yc;\n    yc = c;\n    j = a;\n    a = b;\n    b = j;\n  } // Initialise coefficient array of result with zeros.\n\n\n  for (c = new Array(j = a + b); j--;) c[j] = 0; // Multiply.\n  // i is initially xc.length.\n\n\n  for (i = b; i--;) {\n    b = 0; // a is yc.length.\n\n    for (j = a + i; j > i;) {\n      // Current sum of products at this digit position, plus carry.\n      b = c[j] + yc[i] * xc[j - i - 1] + b;\n      c[j--] = b % 10; // carry\n\n      b = b / 10 | 0;\n    }\n\n    c[j] = (c[j] + b) % 10;\n  } // Increment result exponent if there is a final carry, otherwise remove leading zero.\n\n\n  if (b) ++y.e;else c.shift(); // Remove trailing zeros.\n\n  for (i = c.length; !c[--i];) c.pop();\n\n  y.c = c;\n  return y;\n};\n/*\r\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n */\n\n\nP.toExponential = function (dp) {\n  return stringify(this, 1, dp, dp);\n};\n/*\r\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n */\n\n\nP.toFixed = function (dp) {\n  return stringify(this, 2, dp, this.e + dp);\n};\n/*\r\n * Return a string representing the value of this Big rounded to sd significant digits using\r\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * sd {number} Integer, 1 to MAX_DP inclusive.\r\n */\n\n\nP.toPrecision = function (sd) {\n  return stringify(this, 3, sd, sd - 1);\n};\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Omit the sign for negative zero.\r\n */\n\n\nP.toString = function () {\n  return stringify(this);\n};\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Include the sign for negative zero.\r\n */\n\n\nP.valueOf = P.toJSON = function () {\n  return stringify(this, 4);\n}; // Export\n\n\nexport var Big = _Big_();\nexport default Big;","map":{"version":3,"names":["DP","RM","MAX_DP","MAX_POWER","NE","PE","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","P","UNDEFINED","NUMERIC","_Big_","Big","n","x","s","e","c","slice","parse","constructor","prototype","version","i","nl","test","Error","charAt","indexOf","replace","search","substring","length","round","dp","rm","more","xc","unshift","pop","stringify","id","k","z","push","join","abs","cmp","y","isneg","yc","j","l","div","a","b","bl","bt","ri","bz","ai","al","r","rl","q","qc","qi","d","shift","eq","gt","gte","lt","lte","minus","sub","t","xlty","plus","xe","ye","reverse","mod","ygtx","times","add","pow","one","sqrt","half","Math","toExponential","mul","Array","toFixed","toPrecision","sd","toString","valueOf","toJSON"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/big.js/big.mjs"],"sourcesContent":["/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n  // The default values below must be integers within the stated ranges.\r\n\r\n  /*\r\n   * The maximum number of decimal places (DP) of the results of operations involving division:\r\n   * div and sqrt, and pow with negative exponents.\r\n   */\r\nvar DP = 20,          // 0 to MAX_DP\r\n\r\n  /*\r\n   * The rounding mode (RM) used when rounding to the above decimal places.\r\n   *\r\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   *  3  Away from zero.                                  (ROUND_UP)\r\n   */\r\n  RM = 1,             // 0, 1, 2 or 3\r\n\r\n  // The maximum value of DP and Big.DP.\r\n  MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n  // The maximum magnitude of the exponent argument to the pow method.\r\n  MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n  /*\r\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n   * (JavaScript numbers: -7)\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */\r\n  NE = -7,            // 0 to -1000000\r\n\r\n  /*\r\n   * The positive exponent (PE) at and above which toString returns exponential notation.\r\n   * (JavaScript numbers: 21)\r\n   * 1000000 is the maximum recommended exponent value of a Big.\r\n   * (This limit is not enforced or checked.)\r\n   */\r\n  PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n  // Error messages.\r\n  NAME = '[big.js] ',\r\n  INVALID = NAME + 'Invalid ',\r\n  INVALID_DP = INVALID + 'decimal places',\r\n  INVALID_RM = INVALID + 'rounding mode',\r\n  DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n  // The shared prototype object.\r\n  P = {},\r\n  UNDEFINED = void 0,\r\n  NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n/*\r\n * Create and return a Big constructor.\r\n *\r\n */\r\nfunction _Big_() {\r\n\r\n  /*\r\n   * The Big constructor and exported function.\r\n   * Create and return a new instance of a Big number object.\r\n   *\r\n   * n {number|string|Big} A numeric value.\r\n   */\r\n  function Big(n) {\r\n    var x = this;\r\n\r\n    // Enable constructor usage without new.\r\n    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n    // Duplicate.\r\n    if (n instanceof Big) {\r\n      x.s = n.s;\r\n      x.e = n.e;\r\n      x.c = n.c.slice();\r\n    } else {\r\n      parse(x, n);\r\n    }\r\n\r\n    /*\r\n     * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n     * points to Object.\r\n     */\r\n    x.constructor = Big;\r\n  }\r\n\r\n  Big.prototype = P;\r\n  Big.DP = DP;\r\n  Big.RM = RM;\r\n  Big.NE = NE;\r\n  Big.PE = PE;\r\n  Big.version = '5.2.2';\r\n\r\n  return Big;\r\n}\r\n\r\n\r\n/*\r\n * Parse the number or string value passed to a Big constructor.\r\n *\r\n * x {Big} A Big number instance.\r\n * n {number|string} A numeric value.\r\n */\r\nfunction parse(x, n) {\r\n  var e, i, nl;\r\n\r\n  // Minus zero?\r\n  if (n === 0 && 1 / n < 0) n = '-0';\r\n  else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n  // Determine sign.\r\n  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n  // Decimal point?\r\n  if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = n.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +n.slice(i + 1);\r\n    n = n.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = n.length;\r\n  }\r\n\r\n  nl = n.length;\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n  if (i == nl) {\r\n\r\n    // Zero.\r\n    x.c = [x.e = 0];\r\n  } else {\r\n\r\n    // Determine trailing zeros.\r\n    for (; nl > 0 && n.charAt(--nl) == '0';);\r\n    x.e = e - i - 1;\r\n    x.c = [];\r\n\r\n    // Convert string to array of digits without leading/trailing zeros.\r\n    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n * Called by stringify, P.div, P.round and P.sqrt.\r\n *\r\n * x {Big} The Big to round.\r\n * dp {number} Integer, 0 to MAX_DP inclusive.\r\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n * [more] {boolean} Whether the result of division was truncated.\r\n */\r\nfunction round(x, dp, rm, more) {\r\n  var xc = x.c,\r\n    i = x.e + dp + 1;\r\n\r\n  if (i < xc.length) {\r\n    if (rm === 1) {\r\n\r\n      // xc[i] is the digit after the digit that may be rounded up.\r\n      more = xc[i] >= 5;\r\n    } else if (rm === 2) {\r\n      more = xc[i] > 5 || xc[i] == 5 &&\r\n        (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n    } else if (rm === 3) {\r\n      more = more || !!xc[0];\r\n    } else {\r\n      more = false;\r\n      if (rm !== 0) throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (i < 1) {\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = -dp;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else {\r\n\r\n      // Remove any digits after the required decimal places.\r\n      xc.length = i--;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[i] > 9;) {\r\n          xc[i] = 0;\r\n          if (!i--) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xc.length; !xc[--i];) xc.pop();\r\n    }\r\n  } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n    throw Error(INVALID_RM);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a string representing the value of Big x in normal or exponential notation.\r\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n *\r\n * x {Big}\r\n * id? {number} Caller id.\r\n *         1 toExponential\r\n *         2 toFixed\r\n *         3 toPrecision\r\n *         4 valueOf\r\n * n? {number|undefined} Caller's argument.\r\n * k? {number|undefined}\r\n */\r\nfunction stringify(x, id, n, k) {\r\n  var e, s,\r\n    Big = x.constructor,\r\n    z = !x.c[0];\r\n\r\n  if (n !== UNDEFINED) {\r\n    if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n      throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n    }\r\n\r\n    x = new Big(x);\r\n\r\n    // The index of the digit that may be rounded up.\r\n    n = k - x.e;\r\n\r\n    // Round?\r\n    if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n    // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n    if (id == 2) k = x.e + n + 1;\r\n\r\n    // Append zeros?\r\n    for (; x.c.length < k;) x.c.push(0);\r\n  }\r\n\r\n  e = x.e;\r\n  s = x.c.join('');\r\n  n = s.length;\r\n\r\n  // Exponential notation?\r\n  if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n  // Normal notation.\r\n  } else if (e < 0) {\r\n    for (; ++e;) s = '0' + s;\r\n    s = '0.' + s;\r\n  } else if (e > 0) {\r\n    if (++e > n) for (e -= n; e--;) s += '0';\r\n    else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n  } else if (n > 1) {\r\n    s = s.charAt(0) + '.' + s.slice(1);\r\n  }\r\n\r\n  return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n}\r\n\r\n\r\n// Prototype/instance methods\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the absolute value of this Big.\r\n */\r\nP.abs = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return 1 if the value of this Big is greater than the value of Big y,\r\n *       -1 if the value of this Big is less than the value of Big y, or\r\n *        0 if they have the same value.\r\n*/\r\nP.cmp = function (y) {\r\n  var isneg,\r\n    x = this,\r\n    xc = x.c,\r\n    yc = (y = new x.constructor(y)).c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  isneg = i < 0;\r\n\r\n  // Compare exponents.\r\n  if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = -1; ++i < j;) {\r\n    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.div = function (y) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    a = x.c,                  // dividend\r\n    b = (y = new Big(y)).c,   // divisor\r\n    k = x.s == y.s ? 1 : -1,\r\n    dp = Big.DP;\r\n\r\n  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n  // Divisor is zero?\r\n  if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n  // Dividend is 0? Return +-0.\r\n  if (!a[0]) return new Big(k * 0);\r\n\r\n  var bl, bt, n, cmp, ri,\r\n    bz = b.slice(),\r\n    ai = bl = b.length,\r\n    al = a.length,\r\n    r = a.slice(0, bl),   // remainder\r\n    rl = r.length,\r\n    q = y,                // quotient\r\n    qc = q.c = [],\r\n    qi = 0,\r\n    d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n  q.s = k;\r\n  k = d < 0 ? 0 : d;\r\n\r\n  // Create version of divisor with leading zero.\r\n  bz.unshift(0);\r\n\r\n  // Add zeros to make remainder as long as divisor.\r\n  for (; rl++ < bl;) r.push(0);\r\n\r\n  do {\r\n\r\n    // n is how many times the divisor goes into current remainder.\r\n    for (n = 0; n < 10; n++) {\r\n\r\n      // Compare divisor and remainder.\r\n      if (bl != (rl = r.length)) {\r\n        cmp = bl > rl ? 1 : -1;\r\n      } else {\r\n        for (ri = -1, cmp = 0; ++ri < bl;) {\r\n          if (b[ri] != r[ri]) {\r\n            cmp = b[ri] > r[ri] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // If divisor < remainder, subtract divisor from remainder.\r\n      if (cmp < 0) {\r\n\r\n        // Remainder can't be more than 1 digit longer than divisor.\r\n        // Equalise lengths using divisor with extra leading zero?\r\n        for (bt = rl == bl ? b : bz; rl;) {\r\n          if (r[--rl] < bt[rl]) {\r\n            ri = rl;\r\n            for (; ri && !r[--ri];) r[ri] = 9;\r\n            --r[ri];\r\n            r[rl] += 10;\r\n          }\r\n          r[rl] -= bt[rl];\r\n        }\r\n\r\n        for (; !r[0];) r.shift();\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Add the digit n to the result array.\r\n    qc[qi++] = cmp ? n : ++n;\r\n\r\n    // Update the remainder.\r\n    if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n    else r = [a[ai]];\r\n\r\n  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n  // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n  if (!qc[0] && qi != 1) {\r\n\r\n    // There can't be more than one zero.\r\n    qc.shift();\r\n    q.e--;\r\n  }\r\n\r\n  // Round?\r\n  if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n  return q;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n */\r\nP.eq = function (y) {\r\n  return !this.cmp(y);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n * false.\r\n */\r\nP.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.gte = function (y) {\r\n  return this.cmp(y) > -1;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n */\r\nP.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var i, j, t, xlty,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.plus(y);\r\n  }\r\n\r\n  var xc = x.c.slice(),\r\n    xe = x.e,\r\n    yc = y.c,\r\n    ye = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n\r\n    // y is non-zero? x is non-zero? Or both are zero.\r\n    return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n  }\r\n\r\n  // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n  if (a = xe - ye) {\r\n\r\n    if (xlty = a < 0) {\r\n      a = -a;\r\n      t = xc;\r\n    } else {\r\n      ye = xe;\r\n      t = yc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (b = a; b--;) t.push(0);\r\n    t.reverse();\r\n  } else {\r\n\r\n    // Exponents equal. Check digit by digit.\r\n    j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n    for (a = b = 0; b < j; b++) {\r\n      if (xc[b] != yc[b]) {\r\n        xlty = xc[b] < yc[b];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // x < y? Point xc to the array of the bigger number.\r\n  if (xlty) {\r\n    t = xc;\r\n    xc = yc;\r\n    yc = t;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n   * needs to start at yc.length.\r\n   */\r\n  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n  // Subtract yc from xc.\r\n  for (b = i; j > a;) {\r\n    if (xc[--j] < yc[j]) {\r\n      for (i = j; i && !xc[--i];) xc[i] = 9;\r\n      --xc[i];\r\n      xc[j] += 10;\r\n    }\r\n\r\n    xc[j] -= yc[j];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xc[--b] === 0;) xc.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xc[0] === 0;) {\r\n    xc.shift();\r\n    --ye;\r\n  }\r\n\r\n  if (!xc[0]) {\r\n\r\n    // n - n = +0\r\n    y.s = 1;\r\n\r\n    // Result must be zero.\r\n    xc = [ye = 0];\r\n  }\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n */\r\nP.mod = function (y) {\r\n  var ygtx,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n  x.s = y.s = 1;\r\n  ygtx = y.cmp(x) == 1;\r\n  x.s = a;\r\n  y.s = b;\r\n\r\n  if (ygtx) return new Big(x);\r\n\r\n  a = Big.DP;\r\n  b = Big.RM;\r\n  Big.DP = Big.RM = 0;\r\n  x = x.div(y);\r\n  Big.DP = a;\r\n  Big.RM = b;\r\n\r\n  return this.minus(x.times(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n */\r\nP.plus = P.add = function (y) {\r\n  var t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.minus(y);\r\n  }\r\n\r\n  var xe = x.e,\r\n    xc = x.c,\r\n    ye = y.e,\r\n    yc = y.c;\r\n\r\n  // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n  if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n  xc = xc.slice();\r\n\r\n  // Prepend zeros to equalise exponents.\r\n  // Note: reverse faster than unshifts.\r\n  if (a = xe - ye) {\r\n    if (a > 0) {\r\n      ye = xe;\r\n      t = yc;\r\n    } else {\r\n      a = -a;\r\n      t = xc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (; a--;) t.push(0);\r\n    t.reverse();\r\n  }\r\n\r\n  // Point xc to the longer array.\r\n  if (xc.length - yc.length < 0) {\r\n    t = yc;\r\n    yc = xc;\r\n    xc = t;\r\n  }\r\n\r\n  a = yc.length;\r\n\r\n  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n  for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n  if (b) {\r\n    xc.unshift(b);\r\n    ++ye;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a Big whose value is the value of this Big raised to the power n.\r\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n * mode Big.RM.\r\n *\r\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\r\nP.pow = function (n) {\r\n  var x = this,\r\n    one = new x.constructor(1),\r\n    y = one,\r\n    isneg = n < 0;\r\n\r\n  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n  if (isneg) n = -n;\r\n\r\n  for (;;) {\r\n    if (n & 1) y = y.times(x);\r\n    n >>= 1;\r\n    if (!n) break;\r\n    x = x.times(x);\r\n  }\r\n\r\n  return isneg ? one.div(y) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n * multiple of 10**-dp.\r\n * If dp is not specified, round to 0 decimal places.\r\n * If rm is not specified, use Big.RM.\r\n *\r\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n */\r\nP.round = function (dp, rm) {\r\n  var Big = this.constructor;\r\n  if (dp === UNDEFINED) dp = 0;\r\n  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\r\n  return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.sqrt = function () {\r\n  var r, c, t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    s = x.s,\r\n    e = x.e,\r\n    half = new Big(0.5);\r\n\r\n  // Zero?\r\n  if (!x.c[0]) return new Big(x);\r\n\r\n  // Negative?\r\n  if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n  // Estimate.\r\n  s = Math.sqrt(x + '');\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n  if (s === 0 || s === 1 / 0) {\r\n    c = x.c.join('');\r\n    if (!(c.length + e & 1)) c += '0';\r\n    s = Math.sqrt(c);\r\n    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n    r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n  } else {\r\n    r = new Big(s);\r\n  }\r\n\r\n  e = r.e + (Big.DP += 4);\r\n\r\n  // Newton-Raphson iteration.\r\n  do {\r\n    t = r;\r\n    r = half.times(t.plus(x.div(t)));\r\n  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n  return round(r, Big.DP -= 4, Big.RM);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big times the value of Big y.\r\n */\r\nP.times = P.mul = function (y) {\r\n  var c,\r\n    x = this,\r\n    Big = x.constructor,\r\n    xc = x.c,\r\n    yc = (y = new Big(y)).c,\r\n    a = xc.length,\r\n    b = yc.length,\r\n    i = x.e,\r\n    j = y.e;\r\n\r\n  // Determine sign of result.\r\n  y.s = x.s == y.s ? 1 : -1;\r\n\r\n  // Return signed 0 if either 0.\r\n  if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n  // Initialise exponent of result as x.e + y.e.\r\n  y.e = i + j;\r\n\r\n  // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n  if (a < b) {\r\n    c = xc;\r\n    xc = yc;\r\n    yc = c;\r\n    j = a;\r\n    a = b;\r\n    b = j;\r\n  }\r\n\r\n  // Initialise coefficient array of result with zeros.\r\n  for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n  // Multiply.\r\n\r\n  // i is initially xc.length.\r\n  for (i = b; i--;) {\r\n    b = 0;\r\n\r\n    // a is yc.length.\r\n    for (j = a + i; j > i;) {\r\n\r\n      // Current sum of products at this digit position, plus carry.\r\n      b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n      c[j--] = b % 10;\r\n\r\n      // carry\r\n      b = b / 10 | 0;\r\n    }\r\n\r\n    c[j] = (c[j] + b) % 10;\r\n  }\r\n\r\n  // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n  if (b) ++y.e;\r\n  else c.shift();\r\n\r\n  // Remove trailing zeros.\r\n  for (i = c.length; !c[--i];) c.pop();\r\n  y.c = c;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n */\r\nP.toExponential = function (dp) {\r\n  return stringify(this, 1, dp, dp);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n */\r\nP.toFixed = function (dp) {\r\n  return stringify(this, 2, dp, this.e + dp);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big rounded to sd significant digits using\r\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * sd {number} Integer, 1 to MAX_DP inclusive.\r\n */\r\nP.toPrecision = function (sd) {\r\n  return stringify(this, 3, sd, sd - 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Omit the sign for negative zero.\r\n */\r\nP.toString = function () {\r\n  return stringify(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Include the sign for negative zero.\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  return stringify(this, 4);\r\n};\r\n\r\n\r\n// Export\r\n\r\n\r\nexport var Big = _Big_();\r\n\r\nexport default Big;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAGE;;AAEA;AACF;AACA;AACA;AACA,IAAIA,EAAE,GAAG,EAAT;AAAA,IAAsB;;AAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAE,GAAG,CAVP;AAAA,IAUsB;AAEpB;AACAC,MAAM,GAAG,GAbX;AAAA,IAasB;AAEpB;AACAC,SAAS,GAAG,GAhBd;AAAA,IAgBsB;;AAEpB;AACF;AACA;AACA;AACA;AACEC,EAAE,GAAG,CAAC,CAvBR;AAAA,IAuBsB;;AAEpB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAE,GAAG,EA/BP;AAAA,IA+BsB;;AAGtB;AAGE;AACAC,IAAI,GAAG,WAtCT;AAAA,IAuCEC,OAAO,GAAGD,IAAI,GAAG,UAvCnB;AAAA,IAwCEE,UAAU,GAAGD,OAAO,GAAG,gBAxCzB;AAAA,IAyCEE,UAAU,GAAGF,OAAO,GAAG,eAzCzB;AAAA,IA0CEG,WAAW,GAAGJ,IAAI,GAAG,kBA1CvB;AAAA,IA4CE;AACAK,CAAC,GAAG,EA7CN;AAAA,IA8CEC,SAAS,GAAG,KAAK,CA9CnB;AAAA,IA+CEC,OAAO,GAAG,sCA/CZ;AAkDA;AACA;AACA;AACA;;AACA,SAASC,KAAT,GAAiB;EAEf;AACF;AACA;AACA;AACA;AACA;EACE,SAASC,GAAT,CAAaC,CAAb,EAAgB;IACd,IAAIC,CAAC,GAAG,IAAR,CADc,CAGd;;IACA,IAAI,EAAEA,CAAC,YAAYF,GAAf,CAAJ,EAAyB,OAAOC,CAAC,KAAKJ,SAAN,GAAkBE,KAAK,EAAvB,GAA4B,IAAIC,GAAJ,CAAQC,CAAR,CAAnC,CAJX,CAMd;;IACA,IAAIA,CAAC,YAAYD,GAAjB,EAAsB;MACpBE,CAAC,CAACC,CAAF,GAAMF,CAAC,CAACE,CAAR;MACAD,CAAC,CAACE,CAAF,GAAMH,CAAC,CAACG,CAAR;MACAF,CAAC,CAACG,CAAF,GAAMJ,CAAC,CAACI,CAAF,CAAIC,KAAJ,EAAN;IACD,CAJD,MAIO;MACLC,KAAK,CAACL,CAAD,EAAID,CAAJ,CAAL;IACD;IAED;AACJ;AACA;AACA;;;IACIC,CAAC,CAACM,WAAF,GAAgBR,GAAhB;EACD;;EAEDA,GAAG,CAACS,SAAJ,GAAgBb,CAAhB;EACAI,GAAG,CAACf,EAAJ,GAASA,EAAT;EACAe,GAAG,CAACd,EAAJ,GAASA,EAAT;EACAc,GAAG,CAACX,EAAJ,GAASA,EAAT;EACAW,GAAG,CAACV,EAAJ,GAASA,EAAT;EACAU,GAAG,CAACU,OAAJ,GAAc,OAAd;EAEA,OAAOV,GAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,KAAT,CAAeL,CAAf,EAAkBD,CAAlB,EAAqB;EACnB,IAAIG,CAAJ,EAAOO,CAAP,EAAUC,EAAV,CADmB,CAGnB;;EACA,IAAIX,CAAC,KAAK,CAAN,IAAW,IAAIA,CAAJ,GAAQ,CAAvB,EAA0BA,CAAC,GAAG,IAAJ,CAA1B,KACK,IAAI,CAACH,OAAO,CAACe,IAAR,CAAaZ,CAAC,IAAI,EAAlB,CAAL,EAA4B,MAAMa,KAAK,CAACtB,OAAO,GAAG,QAAX,CAAX,CALd,CAOnB;;EACAU,CAAC,CAACC,CAAF,GAAMF,CAAC,CAACc,MAAF,CAAS,CAAT,KAAe,GAAf,IAAsBd,CAAC,GAAGA,CAAC,CAACK,KAAF,CAAQ,CAAR,CAAJ,EAAgB,CAAC,CAAvC,IAA4C,CAAlD,CARmB,CAUnB;;EACA,IAAI,CAACF,CAAC,GAAGH,CAAC,CAACe,OAAF,CAAU,GAAV,CAAL,IAAuB,CAAC,CAA5B,EAA+Bf,CAAC,GAAGA,CAAC,CAACgB,OAAF,CAAU,GAAV,EAAe,EAAf,CAAJ,CAXZ,CAanB;;EACA,IAAI,CAACN,CAAC,GAAGV,CAAC,CAACiB,MAAF,CAAS,IAAT,CAAL,IAAuB,CAA3B,EAA8B;IAE5B;IACA,IAAId,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGO,CAAJ;IACXP,CAAC,IAAI,CAACH,CAAC,CAACK,KAAF,CAAQK,CAAC,GAAG,CAAZ,CAAN;IACAV,CAAC,GAAGA,CAAC,CAACkB,SAAF,CAAY,CAAZ,EAAeR,CAAf,CAAJ;EACD,CAND,MAMO,IAAIP,CAAC,GAAG,CAAR,EAAW;IAEhB;IACAA,CAAC,GAAGH,CAAC,CAACmB,MAAN;EACD;;EAEDR,EAAE,GAAGX,CAAC,CAACmB,MAAP,CA1BmB,CA4BnB;;EACA,KAAKT,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,EAAJ,IAAUX,CAAC,CAACc,MAAF,CAASJ,CAAT,KAAe,GAArC,GAA2C,EAAEA,CAAF;;EAE3C,IAAIA,CAAC,IAAIC,EAAT,EAAa;IAEX;IACAV,CAAC,CAACG,CAAF,GAAM,CAACH,CAAC,CAACE,CAAF,GAAM,CAAP,CAAN;EACD,CAJD,MAIO;IAEL;IACA,OAAOQ,EAAE,GAAG,CAAL,IAAUX,CAAC,CAACc,MAAF,CAAS,EAAEH,EAAX,KAAkB,GAAnC,EAAwC;;IACxCV,CAAC,CAACE,CAAF,GAAMA,CAAC,GAAGO,CAAJ,GAAQ,CAAd;IACAT,CAAC,CAACG,CAAF,GAAM,EAAN,CALK,CAOL;;IACA,KAAKD,CAAC,GAAG,CAAT,EAAYO,CAAC,IAAIC,EAAjB,GAAsBV,CAAC,CAACG,CAAF,CAAID,CAAC,EAAL,IAAW,CAACH,CAAC,CAACc,MAAF,CAASJ,CAAC,EAAV,CAAZ;EACvB;;EAED,OAAOT,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmB,KAAT,CAAenB,CAAf,EAAkBoB,EAAlB,EAAsBC,EAAtB,EAA0BC,IAA1B,EAAgC;EAC9B,IAAIC,EAAE,GAAGvB,CAAC,CAACG,CAAX;EAAA,IACEM,CAAC,GAAGT,CAAC,CAACE,CAAF,GAAMkB,EAAN,GAAW,CADjB;;EAGA,IAAIX,CAAC,GAAGc,EAAE,CAACL,MAAX,EAAmB;IACjB,IAAIG,EAAE,KAAK,CAAX,EAAc;MAEZ;MACAC,IAAI,GAAGC,EAAE,CAACd,CAAD,CAAF,IAAS,CAAhB;IACD,CAJD,MAIO,IAAIY,EAAE,KAAK,CAAX,EAAc;MACnBC,IAAI,GAAGC,EAAE,CAACd,CAAD,CAAF,GAAQ,CAAR,IAAac,EAAE,CAACd,CAAD,CAAF,IAAS,CAAT,KACjBa,IAAI,IAAIb,CAAC,GAAG,CAAZ,IAAiBc,EAAE,CAACd,CAAC,GAAG,CAAL,CAAF,KAAcd,SAA/B,IAA4C4B,EAAE,CAACd,CAAC,GAAG,CAAL,CAAF,GAAY,CADvC,CAApB;IAED,CAHM,MAGA,IAAIY,EAAE,KAAK,CAAX,EAAc;MACnBC,IAAI,GAAGA,IAAI,IAAI,CAAC,CAACC,EAAE,CAAC,CAAD,CAAnB;IACD,CAFM,MAEA;MACLD,IAAI,GAAG,KAAP;MACA,IAAID,EAAE,KAAK,CAAX,EAAc,MAAMT,KAAK,CAACpB,UAAD,CAAX;IACf;;IAED,IAAIiB,CAAC,GAAG,CAAR,EAAW;MACTc,EAAE,CAACL,MAAH,GAAY,CAAZ;;MAEA,IAAII,IAAJ,EAAU;QAER;QACAtB,CAAC,CAACE,CAAF,GAAM,CAACkB,EAAP;QACAG,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR;MACD,CALD,MAKO;QAEL;QACAA,EAAE,CAAC,CAAD,CAAF,GAAQvB,CAAC,CAACE,CAAF,GAAM,CAAd;MACD;IACF,CAbD,MAaO;MAEL;MACAqB,EAAE,CAACL,MAAH,GAAYT,CAAC,EAAb,CAHK,CAKL;;MACA,IAAIa,IAAJ,EAAU;QAER;QACA,OAAO,EAAEC,EAAE,CAACd,CAAD,CAAJ,GAAU,CAAjB,GAAqB;UACnBc,EAAE,CAACd,CAAD,CAAF,GAAQ,CAAR;;UACA,IAAI,CAACA,CAAC,EAAN,EAAU;YACR,EAAET,CAAC,CAACE,CAAJ;YACAqB,EAAE,CAACC,OAAH,CAAW,CAAX;UACD;QACF;MACF,CAhBI,CAkBL;;;MACA,KAAKf,CAAC,GAAGc,EAAE,CAACL,MAAZ,EAAoB,CAACK,EAAE,CAAC,EAAEd,CAAH,CAAvB,GAA+Bc,EAAE,CAACE,GAAH;IAChC;EACF,CAjDD,MAiDO,IAAIJ,EAAE,GAAG,CAAL,IAAUA,EAAE,GAAG,CAAf,IAAoBA,EAAE,KAAK,CAAC,CAACA,EAAjC,EAAqC;IAC1C,MAAMT,KAAK,CAACpB,UAAD,CAAX;EACD;;EAED,OAAOQ,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0B,SAAT,CAAmB1B,CAAnB,EAAsB2B,EAAtB,EAA0B5B,CAA1B,EAA6B6B,CAA7B,EAAgC;EAC9B,IAAI1B,CAAJ;EAAA,IAAOD,CAAP;EAAA,IACEH,GAAG,GAAGE,CAAC,CAACM,WADV;EAAA,IAEEuB,CAAC,GAAG,CAAC7B,CAAC,CAACG,CAAF,CAAI,CAAJ,CAFP;;EAIA,IAAIJ,CAAC,KAAKJ,SAAV,EAAqB;IACnB,IAAII,CAAC,KAAK,CAAC,CAACA,CAAR,IAAaA,CAAC,IAAI4B,EAAE,IAAI,CAAV,CAAd,IAA8B5B,CAAC,GAAGd,MAAtC,EAA8C;MAC5C,MAAM2B,KAAK,CAACe,EAAE,IAAI,CAAN,GAAUrC,OAAO,GAAG,WAApB,GAAkCC,UAAnC,CAAX;IACD;;IAEDS,CAAC,GAAG,IAAIF,GAAJ,CAAQE,CAAR,CAAJ,CALmB,CAOnB;;IACAD,CAAC,GAAG6B,CAAC,GAAG5B,CAAC,CAACE,CAAV,CARmB,CAUnB;;IACA,IAAIF,CAAC,CAACG,CAAF,CAAIe,MAAJ,GAAa,EAAEU,CAAnB,EAAsBT,KAAK,CAACnB,CAAD,EAAID,CAAJ,EAAOD,GAAG,CAACd,EAAX,CAAL,CAXH,CAanB;;IACA,IAAI2C,EAAE,IAAI,CAAV,EAAaC,CAAC,GAAG5B,CAAC,CAACE,CAAF,GAAMH,CAAN,GAAU,CAAd,CAdM,CAgBnB;;IACA,OAAOC,CAAC,CAACG,CAAF,CAAIe,MAAJ,GAAaU,CAApB,GAAwB5B,CAAC,CAACG,CAAF,CAAI2B,IAAJ,CAAS,CAAT;EACzB;;EAED5B,CAAC,GAAGF,CAAC,CAACE,CAAN;EACAD,CAAC,GAAGD,CAAC,CAACG,CAAF,CAAI4B,IAAJ,CAAS,EAAT,CAAJ;EACAhC,CAAC,GAAGE,CAAC,CAACiB,MAAN,CA3B8B,CA6B9B;;EACA,IAAIS,EAAE,IAAI,CAAN,KAAYA,EAAE,IAAI,CAAN,IAAWA,EAAE,IAAI,CAAN,IAAWC,CAAC,IAAI1B,CAA3B,IAAgCA,CAAC,IAAIJ,GAAG,CAACX,EAAzC,IAA+Ce,CAAC,IAAIJ,GAAG,CAACV,EAApE,CAAJ,EAA6E;IAC3Ea,CAAC,GAAGA,CAAC,CAACY,MAAF,CAAS,CAAT,KAAed,CAAC,GAAG,CAAJ,GAAQ,MAAME,CAAC,CAACG,KAAF,CAAQ,CAAR,CAAd,GAA2B,EAA1C,KAAiDF,CAAC,GAAG,CAAJ,GAAQ,GAAR,GAAc,IAA/D,IAAuEA,CAA3E,CAD2E,CAG7E;EACC,CAJD,MAIO,IAAIA,CAAC,GAAG,CAAR,EAAW;IAChB,OAAO,EAAEA,CAAT,GAAaD,CAAC,GAAG,MAAMA,CAAV;;IACbA,CAAC,GAAG,OAAOA,CAAX;EACD,CAHM,MAGA,IAAIC,CAAC,GAAG,CAAR,EAAW;IAChB,IAAI,EAAEA,CAAF,GAAMH,CAAV,EAAa,KAAKG,CAAC,IAAIH,CAAV,EAAaG,CAAC,EAAd,GAAmBD,CAAC,IAAI,GAAL,CAAhC,KACK,IAAIC,CAAC,GAAGH,CAAR,EAAWE,CAAC,GAAGA,CAAC,CAACG,KAAF,CAAQ,CAAR,EAAWF,CAAX,IAAgB,GAAhB,GAAsBD,CAAC,CAACG,KAAF,CAAQF,CAAR,CAA1B;EACjB,CAHM,MAGA,IAAIH,CAAC,GAAG,CAAR,EAAW;IAChBE,CAAC,GAAGA,CAAC,CAACY,MAAF,CAAS,CAAT,IAAc,GAAd,GAAoBZ,CAAC,CAACG,KAAF,CAAQ,CAAR,CAAxB;EACD;;EAED,OAAOJ,CAAC,CAACC,CAAF,GAAM,CAAN,KAAY,CAAC4B,CAAD,IAAMF,EAAE,IAAI,CAAxB,IAA6B,MAAM1B,CAAnC,GAAuCA,CAA9C;AACD,C,CAGD;;AAGA;AACA;AACA;;;AACAP,CAAC,CAACsC,GAAF,GAAQ,YAAY;EAClB,IAAIhC,CAAC,GAAG,IAAI,KAAKM,WAAT,CAAqB,IAArB,CAAR;EACAN,CAAC,CAACC,CAAF,GAAM,CAAN;EACA,OAAOD,CAAP;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;;;AACAN,CAAC,CAACuC,GAAF,GAAQ,UAAUC,CAAV,EAAa;EACnB,IAAIC,KAAJ;EAAA,IACEnC,CAAC,GAAG,IADN;EAAA,IAEEuB,EAAE,GAAGvB,CAAC,CAACG,CAFT;EAAA,IAGEiC,EAAE,GAAG,CAACF,CAAC,GAAG,IAAIlC,CAAC,CAACM,WAAN,CAAkB4B,CAAlB,CAAL,EAA2B/B,CAHlC;EAAA,IAIEM,CAAC,GAAGT,CAAC,CAACC,CAJR;EAAA,IAKEoC,CAAC,GAAGH,CAAC,CAACjC,CALR;EAAA,IAME2B,CAAC,GAAG5B,CAAC,CAACE,CANR;EAAA,IAOEoC,CAAC,GAAGJ,CAAC,CAAChC,CAPR,CADmB,CAUnB;;EACA,IAAI,CAACqB,EAAE,CAAC,CAAD,CAAH,IAAU,CAACa,EAAE,CAAC,CAAD,CAAjB,EAAsB,OAAO,CAACb,EAAE,CAAC,CAAD,CAAH,GAAS,CAACa,EAAE,CAAC,CAAD,CAAH,GAAS,CAAT,GAAa,CAACC,CAAvB,GAA2B5B,CAAlC,CAXH,CAanB;;EACA,IAAIA,CAAC,IAAI4B,CAAT,EAAY,OAAO5B,CAAP;EAEZ0B,KAAK,GAAG1B,CAAC,GAAG,CAAZ,CAhBmB,CAkBnB;;EACA,IAAImB,CAAC,IAAIU,CAAT,EAAY,OAAOV,CAAC,GAAGU,CAAJ,GAAQH,KAAR,GAAgB,CAAhB,GAAoB,CAAC,CAA5B;EAEZE,CAAC,GAAG,CAACT,CAAC,GAAGL,EAAE,CAACL,MAAR,KAAmBoB,CAAC,GAAGF,EAAE,CAAClB,MAA1B,IAAoCU,CAApC,GAAwCU,CAA5C,CArBmB,CAuBnB;;EACA,KAAK7B,CAAC,GAAG,CAAC,CAAV,EAAa,EAAEA,CAAF,GAAM4B,CAAnB,GAAuB;IACrB,IAAId,EAAE,CAACd,CAAD,CAAF,IAAS2B,EAAE,CAAC3B,CAAD,CAAf,EAAoB,OAAOc,EAAE,CAACd,CAAD,CAAF,GAAQ2B,EAAE,CAAC3B,CAAD,CAAV,GAAgB0B,KAAhB,GAAwB,CAAxB,GAA4B,CAAC,CAApC;EACrB,CA1BkB,CA4BnB;;;EACA,OAAOP,CAAC,IAAIU,CAAL,GAAS,CAAT,GAAaV,CAAC,GAAGU,CAAJ,GAAQH,KAAR,GAAgB,CAAhB,GAAoB,CAAC,CAAzC;AACD,CA9BD;AAiCA;AACA;AACA;AACA;;;AACAzC,CAAC,CAAC6C,GAAF,GAAQ,UAAUL,CAAV,EAAa;EACnB,IAAIlC,CAAC,GAAG,IAAR;EAAA,IACEF,GAAG,GAAGE,CAAC,CAACM,WADV;EAAA,IAEEkC,CAAC,GAAGxC,CAAC,CAACG,CAFR;EAAA,IAE4B;EAC1BsC,CAAC,GAAG,CAACP,CAAC,GAAG,IAAIpC,GAAJ,CAAQoC,CAAR,CAAL,EAAiB/B,CAHvB;EAAA,IAG4B;EAC1ByB,CAAC,GAAG5B,CAAC,CAACC,CAAF,IAAOiC,CAAC,CAACjC,CAAT,GAAa,CAAb,GAAiB,CAAC,CAJxB;EAAA,IAKEmB,EAAE,GAAGtB,GAAG,CAACf,EALX;EAOA,IAAIqC,EAAE,KAAK,CAAC,CAACA,EAAT,IAAeA,EAAE,GAAG,CAApB,IAAyBA,EAAE,GAAGnC,MAAlC,EAA0C,MAAM2B,KAAK,CAACrB,UAAD,CAAX,CARvB,CAUnB;;EACA,IAAI,CAACkD,CAAC,CAAC,CAAD,CAAN,EAAW,MAAM7B,KAAK,CAACnB,WAAD,CAAX,CAXQ,CAanB;;EACA,IAAI,CAAC+C,CAAC,CAAC,CAAD,CAAN,EAAW,OAAO,IAAI1C,GAAJ,CAAQ8B,CAAC,GAAG,CAAZ,CAAP;EAEX,IAAIc,EAAJ;EAAA,IAAQC,EAAR;EAAA,IAAY5C,CAAZ;EAAA,IAAekC,GAAf;EAAA,IAAoBW,EAApB;EAAA,IACEC,EAAE,GAAGJ,CAAC,CAACrC,KAAF,EADP;EAAA,IAEE0C,EAAE,GAAGJ,EAAE,GAAGD,CAAC,CAACvB,MAFd;EAAA,IAGE6B,EAAE,GAAGP,CAAC,CAACtB,MAHT;EAAA,IAIE8B,CAAC,GAAGR,CAAC,CAACpC,KAAF,CAAQ,CAAR,EAAWsC,EAAX,CAJN;EAAA,IAIwB;EACtBO,EAAE,GAAGD,CAAC,CAAC9B,MALT;EAAA,IAMEgC,CAAC,GAAGhB,CANN;EAAA,IAMwB;EACtBiB,EAAE,GAAGD,CAAC,CAAC/C,CAAF,GAAM,EAPb;EAAA,IAQEiD,EAAE,GAAG,CARP;EAAA,IASEC,CAAC,GAAGjC,EAAE,IAAI8B,CAAC,CAAChD,CAAF,GAAMF,CAAC,CAACE,CAAF,GAAMgC,CAAC,CAAChC,CAAlB,CAAF,GAAyB,CAT/B,CAhBmB,CAyBkB;;EAErCgD,CAAC,CAACjD,CAAF,GAAM2B,CAAN;EACAA,CAAC,GAAGyB,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAYA,CAAhB,CA5BmB,CA8BnB;;EACAR,EAAE,CAACrB,OAAH,CAAW,CAAX,EA/BmB,CAiCnB;;EACA,OAAOyB,EAAE,KAAKP,EAAd,GAAmBM,CAAC,CAAClB,IAAF,CAAO,CAAP;;EAEnB,GAAG;IAED;IACA,KAAK/B,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;MAEvB;MACA,IAAI2C,EAAE,KAAKO,EAAE,GAAGD,CAAC,CAAC9B,MAAZ,CAAN,EAA2B;QACzBe,GAAG,GAAGS,EAAE,GAAGO,EAAL,GAAU,CAAV,GAAc,CAAC,CAArB;MACD,CAFD,MAEO;QACL,KAAKL,EAAE,GAAG,CAAC,CAAN,EAASX,GAAG,GAAG,CAApB,EAAuB,EAAEW,EAAF,GAAOF,EAA9B,GAAmC;UACjC,IAAID,CAAC,CAACG,EAAD,CAAD,IAASI,CAAC,CAACJ,EAAD,CAAd,EAAoB;YAClBX,GAAG,GAAGQ,CAAC,CAACG,EAAD,CAAD,GAAQI,CAAC,CAACJ,EAAD,CAAT,GAAgB,CAAhB,GAAoB,CAAC,CAA3B;YACA;UACD;QACF;MACF,CAZsB,CAcvB;;;MACA,IAAIX,GAAG,GAAG,CAAV,EAAa;QAEX;QACA;QACA,KAAKU,EAAE,GAAGM,EAAE,IAAIP,EAAN,GAAWD,CAAX,GAAeI,EAAzB,EAA6BI,EAA7B,GAAkC;UAChC,IAAID,CAAC,CAAC,EAAEC,EAAH,CAAD,GAAUN,EAAE,CAACM,EAAD,CAAhB,EAAsB;YACpBL,EAAE,GAAGK,EAAL;;YACA,OAAOL,EAAE,IAAI,CAACI,CAAC,CAAC,EAAEJ,EAAH,CAAf,GAAwBI,CAAC,CAACJ,EAAD,CAAD,GAAQ,CAAR;;YACxB,EAAEI,CAAC,CAACJ,EAAD,CAAH;YACAI,CAAC,CAACC,EAAD,CAAD,IAAS,EAAT;UACD;;UACDD,CAAC,CAACC,EAAD,CAAD,IAASN,EAAE,CAACM,EAAD,CAAX;QACD;;QAED,OAAO,CAACD,CAAC,CAAC,CAAD,CAAT,GAAeA,CAAC,CAACM,KAAF;MAChB,CAfD,MAeO;QACL;MACD;IACF,CApCA,CAsCD;;;IACAH,EAAE,CAACC,EAAE,EAAH,CAAF,GAAWnB,GAAG,GAAGlC,CAAH,GAAO,EAAEA,CAAvB,CAvCC,CAyCD;;IACA,IAAIiD,CAAC,CAAC,CAAD,CAAD,IAAQf,GAAZ,EAAiBe,CAAC,CAACC,EAAD,CAAD,GAAQT,CAAC,CAACM,EAAD,CAAD,IAAS,CAAjB,CAAjB,KACKE,CAAC,GAAG,CAACR,CAAC,CAACM,EAAD,CAAF,CAAJ;EAEN,CA7CD,QA6CS,CAACA,EAAE,KAAKC,EAAP,IAAaC,CAAC,CAAC,CAAD,CAAD,KAASrD,SAAvB,KAAqCiC,CAAC,EA7C/C,EApCmB,CAmFnB;;;EACA,IAAI,CAACuB,EAAE,CAAC,CAAD,CAAH,IAAUC,EAAE,IAAI,CAApB,EAAuB;IAErB;IACAD,EAAE,CAACG,KAAH;IACAJ,CAAC,CAAChD,CAAF;EACD,CAzFkB,CA2FnB;;;EACA,IAAIkD,EAAE,GAAGC,CAAT,EAAYlC,KAAK,CAAC+B,CAAD,EAAI9B,EAAJ,EAAQtB,GAAG,CAACd,EAAZ,EAAgBgE,CAAC,CAAC,CAAD,CAAD,KAASrD,SAAzB,CAAL;EAEZ,OAAOuD,CAAP;AACD,CA/FD;AAkGA;AACA;AACA;;;AACAxD,CAAC,CAAC6D,EAAF,GAAO,UAAUrB,CAAV,EAAa;EAClB,OAAO,CAAC,KAAKD,GAAL,CAASC,CAAT,CAAR;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAxC,CAAC,CAAC8D,EAAF,GAAO,UAAUtB,CAAV,EAAa;EAClB,OAAO,KAAKD,GAAL,CAASC,CAAT,IAAc,CAArB;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAxC,CAAC,CAAC+D,GAAF,GAAQ,UAAUvB,CAAV,EAAa;EACnB,OAAO,KAAKD,GAAL,CAASC,CAAT,IAAc,CAAC,CAAtB;AACD,CAFD;AAKA;AACA;AACA;;;AACAxC,CAAC,CAACgE,EAAF,GAAO,UAAUxB,CAAV,EAAa;EAClB,OAAO,KAAKD,GAAL,CAASC,CAAT,IAAc,CAArB;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAxC,CAAC,CAACiE,GAAF,GAAQ,UAAUzB,CAAV,EAAa;EACnB,OAAO,KAAKD,GAAL,CAASC,CAAT,IAAc,CAArB;AACD,CAFD;AAKA;AACA;AACA;;;AACAxC,CAAC,CAACkE,KAAF,GAAUlE,CAAC,CAACmE,GAAF,GAAQ,UAAU3B,CAAV,EAAa;EAC7B,IAAIzB,CAAJ;EAAA,IAAO4B,CAAP;EAAA,IAAUyB,CAAV;EAAA,IAAaC,IAAb;EAAA,IACE/D,CAAC,GAAG,IADN;EAAA,IAEEF,GAAG,GAAGE,CAAC,CAACM,WAFV;EAAA,IAGEkC,CAAC,GAAGxC,CAAC,CAACC,CAHR;EAAA,IAIEwC,CAAC,GAAG,CAACP,CAAC,GAAG,IAAIpC,GAAJ,CAAQoC,CAAR,CAAL,EAAiBjC,CAJvB,CAD6B,CAO7B;;EACA,IAAIuC,CAAC,IAAIC,CAAT,EAAY;IACVP,CAAC,CAACjC,CAAF,GAAM,CAACwC,CAAP;IACA,OAAOzC,CAAC,CAACgE,IAAF,CAAO9B,CAAP,CAAP;EACD;;EAED,IAAIX,EAAE,GAAGvB,CAAC,CAACG,CAAF,CAAIC,KAAJ,EAAT;EAAA,IACE6D,EAAE,GAAGjE,CAAC,CAACE,CADT;EAAA,IAEEkC,EAAE,GAAGF,CAAC,CAAC/B,CAFT;EAAA,IAGE+D,EAAE,GAAGhC,CAAC,CAAChC,CAHT,CAb6B,CAkB7B;;EACA,IAAI,CAACqB,EAAE,CAAC,CAAD,CAAH,IAAU,CAACa,EAAE,CAAC,CAAD,CAAjB,EAAsB;IAEpB;IACA,OAAOA,EAAE,CAAC,CAAD,CAAF,IAASF,CAAC,CAACjC,CAAF,GAAM,CAACwC,CAAP,EAAUP,CAAnB,IAAwB,IAAIpC,GAAJ,CAAQyB,EAAE,CAAC,CAAD,CAAF,GAAQvB,CAAR,GAAY,CAApB,CAA/B;EACD,CAvB4B,CAyB7B;;;EACA,IAAIwC,CAAC,GAAGyB,EAAE,GAAGC,EAAb,EAAiB;IAEf,IAAIH,IAAI,GAAGvB,CAAC,GAAG,CAAf,EAAkB;MAChBA,CAAC,GAAG,CAACA,CAAL;MACAsB,CAAC,GAAGvC,EAAJ;IACD,CAHD,MAGO;MACL2C,EAAE,GAAGD,EAAL;MACAH,CAAC,GAAG1B,EAAJ;IACD;;IAED0B,CAAC,CAACK,OAAF;;IACA,KAAK1B,CAAC,GAAGD,CAAT,EAAYC,CAAC,EAAb,GAAkBqB,CAAC,CAAChC,IAAF,CAAO,CAAP;;IAClBgC,CAAC,CAACK,OAAF;EACD,CAbD,MAaO;IAEL;IACA9B,CAAC,GAAG,CAAC,CAAC0B,IAAI,GAAGxC,EAAE,CAACL,MAAH,GAAYkB,EAAE,CAAClB,MAAvB,IAAiCK,EAAjC,GAAsCa,EAAvC,EAA2ClB,MAA/C;;IAEA,KAAKsB,CAAC,GAAGC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;MAC1B,IAAIlB,EAAE,CAACkB,CAAD,CAAF,IAASL,EAAE,CAACK,CAAD,CAAf,EAAoB;QAClBsB,IAAI,GAAGxC,EAAE,CAACkB,CAAD,CAAF,GAAQL,EAAE,CAACK,CAAD,CAAjB;QACA;MACD;IACF;EACF,CAlD4B,CAoD7B;;;EACA,IAAIsB,IAAJ,EAAU;IACRD,CAAC,GAAGvC,EAAJ;IACAA,EAAE,GAAGa,EAAL;IACAA,EAAE,GAAG0B,CAAL;IACA5B,CAAC,CAACjC,CAAF,GAAM,CAACiC,CAAC,CAACjC,CAAT;EACD;EAED;AACF;AACA;AACA;;;EACE,IAAI,CAACwC,CAAC,GAAG,CAACJ,CAAC,GAAGD,EAAE,CAAClB,MAAR,KAAmBT,CAAC,GAAGc,EAAE,CAACL,MAA1B,CAAL,IAA0C,CAA9C,EAAiD,OAAOuB,CAAC,EAAR,GAAalB,EAAE,CAACd,CAAC,EAAF,CAAF,GAAU,CAAV,CAhEjC,CAkE7B;;EACA,KAAKgC,CAAC,GAAGhC,CAAT,EAAY4B,CAAC,GAAGG,CAAhB,GAAoB;IAClB,IAAIjB,EAAE,CAAC,EAAEc,CAAH,CAAF,GAAUD,EAAE,CAACC,CAAD,CAAhB,EAAqB;MACnB,KAAK5B,CAAC,GAAG4B,CAAT,EAAY5B,CAAC,IAAI,CAACc,EAAE,CAAC,EAAEd,CAAH,CAApB,GAA4Bc,EAAE,CAACd,CAAD,CAAF,GAAQ,CAAR;;MAC5B,EAAEc,EAAE,CAACd,CAAD,CAAJ;MACAc,EAAE,CAACc,CAAD,CAAF,IAAS,EAAT;IACD;;IAEDd,EAAE,CAACc,CAAD,CAAF,IAASD,EAAE,CAACC,CAAD,CAAX;EACD,CA3E4B,CA6E7B;;;EACA,OAAOd,EAAE,CAAC,EAAEkB,CAAH,CAAF,KAAY,CAAnB,GAAuBlB,EAAE,CAACE,GAAH,GA9EM,CAgF7B;;;EACA,OAAOF,EAAE,CAAC,CAAD,CAAF,KAAU,CAAjB,GAAqB;IACnBA,EAAE,CAAC+B,KAAH;IACA,EAAEY,EAAF;EACD;;EAED,IAAI,CAAC3C,EAAE,CAAC,CAAD,CAAP,EAAY;IAEV;IACAW,CAAC,CAACjC,CAAF,GAAM,CAAN,CAHU,CAKV;;IACAsB,EAAE,GAAG,CAAC2C,EAAE,GAAG,CAAN,CAAL;EACD;;EAEDhC,CAAC,CAAC/B,CAAF,GAAMoB,EAAN;EACAW,CAAC,CAAChC,CAAF,GAAMgE,EAAN;EAEA,OAAOhC,CAAP;AACD,CAnGD;AAsGA;AACA;AACA;;;AACAxC,CAAC,CAAC0E,GAAF,GAAQ,UAAUlC,CAAV,EAAa;EACnB,IAAImC,IAAJ;EAAA,IACErE,CAAC,GAAG,IADN;EAAA,IAEEF,GAAG,GAAGE,CAAC,CAACM,WAFV;EAAA,IAGEkC,CAAC,GAAGxC,CAAC,CAACC,CAHR;EAAA,IAIEwC,CAAC,GAAG,CAACP,CAAC,GAAG,IAAIpC,GAAJ,CAAQoC,CAAR,CAAL,EAAiBjC,CAJvB;EAMA,IAAI,CAACiC,CAAC,CAAC/B,CAAF,CAAI,CAAJ,CAAL,EAAa,MAAMS,KAAK,CAACnB,WAAD,CAAX;EAEbO,CAAC,CAACC,CAAF,GAAMiC,CAAC,CAACjC,CAAF,GAAM,CAAZ;EACAoE,IAAI,GAAGnC,CAAC,CAACD,GAAF,CAAMjC,CAAN,KAAY,CAAnB;EACAA,CAAC,CAACC,CAAF,GAAMuC,CAAN;EACAN,CAAC,CAACjC,CAAF,GAAMwC,CAAN;EAEA,IAAI4B,IAAJ,EAAU,OAAO,IAAIvE,GAAJ,CAAQE,CAAR,CAAP;EAEVwC,CAAC,GAAG1C,GAAG,CAACf,EAAR;EACA0D,CAAC,GAAG3C,GAAG,CAACd,EAAR;EACAc,GAAG,CAACf,EAAJ,GAASe,GAAG,CAACd,EAAJ,GAAS,CAAlB;EACAgB,CAAC,GAAGA,CAAC,CAACuC,GAAF,CAAML,CAAN,CAAJ;EACApC,GAAG,CAACf,EAAJ,GAASyD,CAAT;EACA1C,GAAG,CAACd,EAAJ,GAASyD,CAAT;EAEA,OAAO,KAAKmB,KAAL,CAAW5D,CAAC,CAACsE,KAAF,CAAQpC,CAAR,CAAX,CAAP;AACD,CAxBD;AA2BA;AACA;AACA;;;AACAxC,CAAC,CAACsE,IAAF,GAAStE,CAAC,CAAC6E,GAAF,GAAQ,UAAUrC,CAAV,EAAa;EAC5B,IAAI4B,CAAJ;EAAA,IACE9D,CAAC,GAAG,IADN;EAAA,IAEEF,GAAG,GAAGE,CAAC,CAACM,WAFV;EAAA,IAGEkC,CAAC,GAAGxC,CAAC,CAACC,CAHR;EAAA,IAIEwC,CAAC,GAAG,CAACP,CAAC,GAAG,IAAIpC,GAAJ,CAAQoC,CAAR,CAAL,EAAiBjC,CAJvB,CAD4B,CAO5B;;EACA,IAAIuC,CAAC,IAAIC,CAAT,EAAY;IACVP,CAAC,CAACjC,CAAF,GAAM,CAACwC,CAAP;IACA,OAAOzC,CAAC,CAAC4D,KAAF,CAAQ1B,CAAR,CAAP;EACD;;EAED,IAAI+B,EAAE,GAAGjE,CAAC,CAACE,CAAX;EAAA,IACEqB,EAAE,GAAGvB,CAAC,CAACG,CADT;EAAA,IAEE+D,EAAE,GAAGhC,CAAC,CAAChC,CAFT;EAAA,IAGEkC,EAAE,GAAGF,CAAC,CAAC/B,CAHT,CAb4B,CAkB5B;;EACA,IAAI,CAACoB,EAAE,CAAC,CAAD,CAAH,IAAU,CAACa,EAAE,CAAC,CAAD,CAAjB,EAAsB,OAAOA,EAAE,CAAC,CAAD,CAAF,GAAQF,CAAR,GAAY,IAAIpC,GAAJ,CAAQyB,EAAE,CAAC,CAAD,CAAF,GAAQvB,CAAR,GAAYwC,CAAC,GAAG,CAAxB,CAAnB;EAEtBjB,EAAE,GAAGA,EAAE,CAACnB,KAAH,EAAL,CArB4B,CAuB5B;EACA;;EACA,IAAIoC,CAAC,GAAGyB,EAAE,GAAGC,EAAb,EAAiB;IACf,IAAI1B,CAAC,GAAG,CAAR,EAAW;MACT0B,EAAE,GAAGD,EAAL;MACAH,CAAC,GAAG1B,EAAJ;IACD,CAHD,MAGO;MACLI,CAAC,GAAG,CAACA,CAAL;MACAsB,CAAC,GAAGvC,EAAJ;IACD;;IAEDuC,CAAC,CAACK,OAAF;;IACA,OAAO3B,CAAC,EAAR,GAAasB,CAAC,CAAChC,IAAF,CAAO,CAAP;;IACbgC,CAAC,CAACK,OAAF;EACD,CArC2B,CAuC5B;;;EACA,IAAI5C,EAAE,CAACL,MAAH,GAAYkB,EAAE,CAAClB,MAAf,GAAwB,CAA5B,EAA+B;IAC7B4C,CAAC,GAAG1B,EAAJ;IACAA,EAAE,GAAGb,EAAL;IACAA,EAAE,GAAGuC,CAAL;EACD;;EAEDtB,CAAC,GAAGJ,EAAE,CAAClB,MAAP,CA9C4B,CAgD5B;;EACA,KAAKuB,CAAC,GAAG,CAAT,EAAYD,CAAZ,EAAejB,EAAE,CAACiB,CAAD,CAAF,IAAS,EAAxB,EAA4BC,CAAC,GAAG,CAAClB,EAAE,CAAC,EAAEiB,CAAH,CAAF,GAAUjB,EAAE,CAACiB,CAAD,CAAF,GAAQJ,EAAE,CAACI,CAAD,CAAV,GAAgBC,CAA3B,IAAgC,EAAhC,GAAqC,CAAzC,CAjDA,CAmD5B;;;EAEA,IAAIA,CAAJ,EAAO;IACLlB,EAAE,CAACC,OAAH,CAAWiB,CAAX;IACA,EAAEyB,EAAF;EACD,CAxD2B,CA0D5B;;;EACA,KAAK1B,CAAC,GAAGjB,EAAE,CAACL,MAAZ,EAAoBK,EAAE,CAAC,EAAEiB,CAAH,CAAF,KAAY,CAAhC,GAAoCjB,EAAE,CAACE,GAAH;;EAEpCS,CAAC,CAAC/B,CAAF,GAAMoB,EAAN;EACAW,CAAC,CAAChC,CAAF,GAAMgE,EAAN;EAEA,OAAOhC,CAAP;AACD,CAjED;AAoEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAxC,CAAC,CAAC8E,GAAF,GAAQ,UAAUzE,CAAV,EAAa;EACnB,IAAIC,CAAC,GAAG,IAAR;EAAA,IACEyE,GAAG,GAAG,IAAIzE,CAAC,CAACM,WAAN,CAAkB,CAAlB,CADR;EAAA,IAEE4B,CAAC,GAAGuC,GAFN;EAAA,IAGEtC,KAAK,GAAGpC,CAAC,GAAG,CAHd;EAKA,IAAIA,CAAC,KAAK,CAAC,CAACA,CAAR,IAAaA,CAAC,GAAG,CAACb,SAAlB,IAA+Ba,CAAC,GAAGb,SAAvC,EAAkD,MAAM0B,KAAK,CAACtB,OAAO,GAAG,UAAX,CAAX;EAClD,IAAI6C,KAAJ,EAAWpC,CAAC,GAAG,CAACA,CAAL;;EAEX,SAAS;IACP,IAAIA,CAAC,GAAG,CAAR,EAAWmC,CAAC,GAAGA,CAAC,CAACoC,KAAF,CAAQtE,CAAR,CAAJ;IACXD,CAAC,KAAK,CAAN;IACA,IAAI,CAACA,CAAL,EAAQ;IACRC,CAAC,GAAGA,CAAC,CAACsE,KAAF,CAAQtE,CAAR,CAAJ;EACD;;EAED,OAAOmC,KAAK,GAAGsC,GAAG,CAAClC,GAAJ,CAAQL,CAAR,CAAH,GAAgBA,CAA5B;AACD,CAjBD;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAxC,CAAC,CAACyB,KAAF,GAAU,UAAUC,EAAV,EAAcC,EAAd,EAAkB;EAC1B,IAAIvB,GAAG,GAAG,KAAKQ,WAAf;EACA,IAAIc,EAAE,KAAKzB,SAAX,EAAsByB,EAAE,GAAG,CAAL,CAAtB,KACK,IAAIA,EAAE,KAAK,CAAC,CAACA,EAAT,IAAeA,EAAE,GAAG,CAACnC,MAArB,IAA+BmC,EAAE,GAAGnC,MAAxC,EAAgD,MAAM2B,KAAK,CAACrB,UAAD,CAAX;EACrD,OAAO4B,KAAK,CAAC,IAAIrB,GAAJ,CAAQ,IAAR,CAAD,EAAgBsB,EAAhB,EAAoBC,EAAE,KAAK1B,SAAP,GAAmBG,GAAG,CAACd,EAAvB,GAA4BqC,EAAhD,CAAZ;AACD,CALD;AAQA;AACA;AACA;AACA;;;AACA3B,CAAC,CAACgF,IAAF,GAAS,YAAY;EACnB,IAAI1B,CAAJ;EAAA,IAAO7C,CAAP;EAAA,IAAU2D,CAAV;EAAA,IACE9D,CAAC,GAAG,IADN;EAAA,IAEEF,GAAG,GAAGE,CAAC,CAACM,WAFV;EAAA,IAGEL,CAAC,GAAGD,CAAC,CAACC,CAHR;EAAA,IAIEC,CAAC,GAAGF,CAAC,CAACE,CAJR;EAAA,IAKEyE,IAAI,GAAG,IAAI7E,GAAJ,CAAQ,GAAR,CALT,CADmB,CAQnB;;EACA,IAAI,CAACE,CAAC,CAACG,CAAF,CAAI,CAAJ,CAAL,EAAa,OAAO,IAAIL,GAAJ,CAAQE,CAAR,CAAP,CATM,CAWnB;;EACA,IAAIC,CAAC,GAAG,CAAR,EAAW,MAAMW,KAAK,CAACvB,IAAI,GAAG,gBAAR,CAAX,CAZQ,CAcnB;;EACAY,CAAC,GAAG2E,IAAI,CAACF,IAAL,CAAU1E,CAAC,GAAG,EAAd,CAAJ,CAfmB,CAiBnB;EACA;;EACA,IAAIC,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAK,IAAI,CAAzB,EAA4B;IAC1BE,CAAC,GAAGH,CAAC,CAACG,CAAF,CAAI4B,IAAJ,CAAS,EAAT,CAAJ;IACA,IAAI,EAAE5B,CAAC,CAACe,MAAF,GAAWhB,CAAX,GAAe,CAAjB,CAAJ,EAAyBC,CAAC,IAAI,GAAL;IACzBF,CAAC,GAAG2E,IAAI,CAACF,IAAL,CAAUvE,CAAV,CAAJ;IACAD,CAAC,GAAG,CAAC,CAACA,CAAC,GAAG,CAAL,IAAU,CAAV,GAAc,CAAf,KAAqBA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,CAAlC,CAAJ;IACA8C,CAAC,GAAG,IAAIlD,GAAJ,CAAQ,CAACG,CAAC,IAAI,IAAI,CAAT,GAAa,IAAb,GAAoB,CAACA,CAAC,GAAGA,CAAC,CAAC4E,aAAF,EAAL,EAAwBzE,KAAxB,CAA8B,CAA9B,EAAiCH,CAAC,CAACa,OAAF,CAAU,GAAV,IAAiB,CAAlD,CAArB,IAA6EZ,CAArF,CAAJ;EACD,CAND,MAMO;IACL8C,CAAC,GAAG,IAAIlD,GAAJ,CAAQG,CAAR,CAAJ;EACD;;EAEDC,CAAC,GAAG8C,CAAC,CAAC9C,CAAF,IAAOJ,GAAG,CAACf,EAAJ,IAAU,CAAjB,CAAJ,CA7BmB,CA+BnB;;EACA,GAAG;IACD+E,CAAC,GAAGd,CAAJ;IACAA,CAAC,GAAG2B,IAAI,CAACL,KAAL,CAAWR,CAAC,CAACE,IAAF,CAAOhE,CAAC,CAACuC,GAAF,CAAMuB,CAAN,CAAP,CAAX,CAAJ;EACD,CAHD,QAGSA,CAAC,CAAC3D,CAAF,CAAIC,KAAJ,CAAU,CAAV,EAAaF,CAAb,EAAgB6B,IAAhB,CAAqB,EAArB,MAA6BiB,CAAC,CAAC7C,CAAF,CAAIC,KAAJ,CAAU,CAAV,EAAaF,CAAb,EAAgB6B,IAAhB,CAAqB,EAArB,CAHtC;;EAKA,OAAOZ,KAAK,CAAC6B,CAAD,EAAIlD,GAAG,CAACf,EAAJ,IAAU,CAAd,EAAiBe,GAAG,CAACd,EAArB,CAAZ;AACD,CAtCD;AAyCA;AACA;AACA;;;AACAU,CAAC,CAAC4E,KAAF,GAAU5E,CAAC,CAACoF,GAAF,GAAQ,UAAU5C,CAAV,EAAa;EAC7B,IAAI/B,CAAJ;EAAA,IACEH,CAAC,GAAG,IADN;EAAA,IAEEF,GAAG,GAAGE,CAAC,CAACM,WAFV;EAAA,IAGEiB,EAAE,GAAGvB,CAAC,CAACG,CAHT;EAAA,IAIEiC,EAAE,GAAG,CAACF,CAAC,GAAG,IAAIpC,GAAJ,CAAQoC,CAAR,CAAL,EAAiB/B,CAJxB;EAAA,IAKEqC,CAAC,GAAGjB,EAAE,CAACL,MALT;EAAA,IAMEuB,CAAC,GAAGL,EAAE,CAAClB,MANT;EAAA,IAOET,CAAC,GAAGT,CAAC,CAACE,CAPR;EAAA,IAQEmC,CAAC,GAAGH,CAAC,CAAChC,CARR,CAD6B,CAW7B;;EACAgC,CAAC,CAACjC,CAAF,GAAMD,CAAC,CAACC,CAAF,IAAOiC,CAAC,CAACjC,CAAT,GAAa,CAAb,GAAiB,CAAC,CAAxB,CAZ6B,CAc7B;;EACA,IAAI,CAACsB,EAAE,CAAC,CAAD,CAAH,IAAU,CAACa,EAAE,CAAC,CAAD,CAAjB,EAAsB,OAAO,IAAItC,GAAJ,CAAQoC,CAAC,CAACjC,CAAF,GAAM,CAAd,CAAP,CAfO,CAiB7B;;EACAiC,CAAC,CAAChC,CAAF,GAAMO,CAAC,GAAG4B,CAAV,CAlB6B,CAoB7B;;EACA,IAAIG,CAAC,GAAGC,CAAR,EAAW;IACTtC,CAAC,GAAGoB,EAAJ;IACAA,EAAE,GAAGa,EAAL;IACAA,EAAE,GAAGjC,CAAL;IACAkC,CAAC,GAAGG,CAAJ;IACAA,CAAC,GAAGC,CAAJ;IACAA,CAAC,GAAGJ,CAAJ;EACD,CA5B4B,CA8B7B;;;EACA,KAAKlC,CAAC,GAAG,IAAI4E,KAAJ,CAAU1C,CAAC,GAAGG,CAAC,GAAGC,CAAlB,CAAT,EAA+BJ,CAAC,EAAhC,GAAqClC,CAAC,CAACkC,CAAD,CAAD,GAAO,CAAP,CA/BR,CAiC7B;EAEA;;;EACA,KAAK5B,CAAC,GAAGgC,CAAT,EAAYhC,CAAC,EAAb,GAAkB;IAChBgC,CAAC,GAAG,CAAJ,CADgB,CAGhB;;IACA,KAAKJ,CAAC,GAAGG,CAAC,GAAG/B,CAAb,EAAgB4B,CAAC,GAAG5B,CAApB,GAAwB;MAEtB;MACAgC,CAAC,GAAGtC,CAAC,CAACkC,CAAD,CAAD,GAAOD,EAAE,CAAC3B,CAAD,CAAF,GAAQc,EAAE,CAACc,CAAC,GAAG5B,CAAJ,GAAQ,CAAT,CAAjB,GAA+BgC,CAAnC;MACAtC,CAAC,CAACkC,CAAC,EAAF,CAAD,GAASI,CAAC,GAAG,EAAb,CAJsB,CAMtB;;MACAA,CAAC,GAAGA,CAAC,GAAG,EAAJ,GAAS,CAAb;IACD;;IAEDtC,CAAC,CAACkC,CAAD,CAAD,GAAO,CAAClC,CAAC,CAACkC,CAAD,CAAD,GAAOI,CAAR,IAAa,EAApB;EACD,CAnD4B,CAqD7B;;;EACA,IAAIA,CAAJ,EAAO,EAAEP,CAAC,CAAChC,CAAJ,CAAP,KACKC,CAAC,CAACmD,KAAF,GAvDwB,CAyD7B;;EACA,KAAK7C,CAAC,GAAGN,CAAC,CAACe,MAAX,EAAmB,CAACf,CAAC,CAAC,EAAEM,CAAH,CAArB,GAA6BN,CAAC,CAACsB,GAAF;;EAC7BS,CAAC,CAAC/B,CAAF,GAAMA,CAAN;EAEA,OAAO+B,CAAP;AACD,CA9DD;AAiEA;AACA;AACA;AACA;AACA;AACA;;;AACAxC,CAAC,CAACmF,aAAF,GAAkB,UAAUzD,EAAV,EAAc;EAC9B,OAAOM,SAAS,CAAC,IAAD,EAAO,CAAP,EAAUN,EAAV,EAAcA,EAAd,CAAhB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1B,CAAC,CAACsF,OAAF,GAAY,UAAU5D,EAAV,EAAc;EACxB,OAAOM,SAAS,CAAC,IAAD,EAAO,CAAP,EAAUN,EAAV,EAAc,KAAKlB,CAAL,GAASkB,EAAvB,CAAhB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1B,CAAC,CAACuF,WAAF,GAAgB,UAAUC,EAAV,EAAc;EAC5B,OAAOxD,SAAS,CAAC,IAAD,EAAO,CAAP,EAAUwD,EAAV,EAAcA,EAAE,GAAG,CAAnB,CAAhB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACAxF,CAAC,CAACyF,QAAF,GAAa,YAAY;EACvB,OAAOzD,SAAS,CAAC,IAAD,CAAhB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACAhC,CAAC,CAAC0F,OAAF,GAAY1F,CAAC,CAAC2F,MAAF,GAAW,YAAY;EACjC,OAAO3D,SAAS,CAAC,IAAD,EAAO,CAAP,CAAhB;AACD,CAFD,C,CAKA;;;AAGA,OAAO,IAAI5B,GAAG,GAAGD,KAAK,EAAf;AAEP,eAAeC,GAAf"},"metadata":{},"sourceType":"module"}