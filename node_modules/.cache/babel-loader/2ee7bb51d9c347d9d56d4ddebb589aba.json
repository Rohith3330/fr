{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow using `exports` in files containing tests',\n      recommended: 'error'\n    },\n    messages: {\n      unexpectedExport: `Do not export from a test file.`\n    },\n    type: 'suggestion',\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    const exportNodes = [];\n    let hasTestCase = false;\n    return {\n      'Program:exit'() {\n        if (hasTestCase && exportNodes.length > 0) {\n          for (const node of exportNodes) {\n            context.report({\n              node,\n              messageId: 'unexpectedExport'\n            });\n          }\n        }\n      },\n\n      CallExpression(node) {\n        if ((0, _utils.isTestCaseCall)(node)) {\n          hasTestCase = true;\n        }\n      },\n\n      'ExportNamedDeclaration, ExportDefaultDeclaration'(node) {\n        exportNodes.push(node);\n      },\n\n      'AssignmentExpression > MemberExpression'(node) {\n        let {\n          object,\n          property\n        } = node;\n\n        if (object.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression) {\n          ({\n            object,\n            property\n          } = object);\n        }\n\n        if ('name' in object && object.name === 'module' && property.type === _experimentalUtils.AST_NODE_TYPES.Identifier && /^exports?$/u.test(property.name)) {\n          exportNodes.push(node);\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","unexpectedExport","type","schema","defaultOptions","create","context","exportNodes","hasTestCase","length","node","report","messageId","CallExpression","isTestCaseCall","push","object","property","AST_NODE_TYPES","MemberExpression","Identifier","test"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-export.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow using `exports` in files containing tests',\n      recommended: 'error'\n    },\n    messages: {\n      unexpectedExport: `Do not export from a test file.`\n    },\n    type: 'suggestion',\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    const exportNodes = [];\n    let hasTestCase = false;\n    return {\n      'Program:exit'() {\n        if (hasTestCase && exportNodes.length > 0) {\n          for (const node of exportNodes) {\n            context.report({\n              node,\n              messageId: 'unexpectedExport'\n            });\n          }\n        }\n      },\n\n      CallExpression(node) {\n        if ((0, _utils.isTestCaseCall)(node)) {\n          hasTestCase = true;\n        }\n      },\n\n      'ExportNamedDeclaration, ExportDefaultDeclaration'(node) {\n        exportNodes.push(node);\n      },\n\n      'AssignmentExpression > MemberExpression'(node) {\n        let {\n          object,\n          property\n        } = node;\n\n        if (object.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression) {\n          ({\n            object,\n            property\n          } = object);\n        }\n\n        if ('name' in object && object.name === 'module' && property.type === _experimentalUtils.AST_NODE_TYPES.Identifier && /^exports?$/u.test(property.name)) {\n          exportNodes.push(node);\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,uCAAD,CAAhC;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIE,QAAQ,GAAG,CAAC,GAAGD,MAAM,CAACE,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,oDAFT;MAGJC,WAAW,EAAE;IAHT,CADF;IAMJC,QAAQ,EAAE;MACRC,gBAAgB,EAAG;IADX,CANN;IASJC,IAAI,EAAE,YATF;IAUJC,MAAM,EAAE;EAVJ,CAF8B;EAcpCC,cAAc,EAAE,EAdoB;;EAgBpCC,MAAM,CAACC,OAAD,EAAU;IACd,MAAMC,WAAW,GAAG,EAApB;IACA,IAAIC,WAAW,GAAG,KAAlB;IACA,OAAO;MACL,iBAAiB;QACf,IAAIA,WAAW,IAAID,WAAW,CAACE,MAAZ,GAAqB,CAAxC,EAA2C;UACzC,KAAK,MAAMC,IAAX,IAAmBH,WAAnB,EAAgC;YAC9BD,OAAO,CAACK,MAAR,CAAe;cACbD,IADa;cAEbE,SAAS,EAAE;YAFE,CAAf;UAID;QACF;MACF,CAVI;;MAYLC,cAAc,CAACH,IAAD,EAAO;QACnB,IAAI,CAAC,GAAGpB,MAAM,CAACwB,cAAX,EAA2BJ,IAA3B,CAAJ,EAAsC;UACpCF,WAAW,GAAG,IAAd;QACD;MACF,CAhBI;;MAkBL,mDAAmDE,IAAnD,EAAyD;QACvDH,WAAW,CAACQ,IAAZ,CAAiBL,IAAjB;MACD,CApBI;;MAsBL,0CAA0CA,IAA1C,EAAgD;QAC9C,IAAI;UACFM,MADE;UAEFC;QAFE,IAGAP,IAHJ;;QAKA,IAAIM,MAAM,CAACd,IAAP,KAAgBd,kBAAkB,CAAC8B,cAAnB,CAAkCC,gBAAtD,EAAwE;UACtE,CAAC;YACCH,MADD;YAECC;UAFD,IAGGD,MAHJ;QAID;;QAED,IAAI,UAAUA,MAAV,IAAoBA,MAAM,CAACvB,IAAP,KAAgB,QAApC,IAAgDwB,QAAQ,CAACf,IAAT,KAAkBd,kBAAkB,CAAC8B,cAAnB,CAAkCE,UAApG,IAAkH,cAAcC,IAAd,CAAmBJ,QAAQ,CAACxB,IAA5B,CAAtH,EAAyJ;UACvJc,WAAW,CAACQ,IAAZ,CAAiBL,IAAjB;QACD;MACF;;IAtCI,CAAP;EAyCD;;AA5DmC,CAAvB,CAAf;;AAgEAzB,OAAO,CAACE,OAAR,GAAkBI,QAAlB"},"metadata":{},"sourceType":"script"}