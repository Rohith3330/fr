{"ast":null,"code":"/**\n * @fileoverview Enforce default props alphabetical sorting\n * @author Vladimir Kattsov\n */\n'use strict';\n\nconst variableUtil = require('../util/variable');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  propsNotSorted: 'Default prop types declarations should be sorted alphabetically'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce defaultProps declarations alphabetical sorting',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-sort-default-props')\n    },\n    // fixable: 'code',\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        ignoreCase: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const ignoreCase = configuration.ignoreCase || false;\n    /**\n     * Get properties name\n     * @param {Object} node - Property.\n     * @returns {String} Property name.\n     */\n\n    function getPropertyName(node) {\n      if (node.key || ['MethodDefinition', 'Property'].indexOf(node.type) !== -1) {\n        return node.key.name;\n      }\n\n      if (node.type === 'MemberExpression') {\n        return node.property.name; // Special case for class properties\n        // (babel-eslint@5 does not expose property name so we have to rely on tokens)\n      }\n\n      if (node.type === 'ClassProperty') {\n        const tokens = context.getSourceCode().getFirstTokens(node, 2);\n        return tokens[1] && tokens[1].type === 'Identifier' ? tokens[1].value : tokens[0].value;\n      }\n\n      return '';\n    }\n    /**\n     * Checks if the Identifier node passed in looks like a defaultProps declaration.\n     * @param   {ASTNode}  node The node to check. Must be an Identifier node.\n     * @returns {Boolean}       `true` if the node is a defaultProps declaration, `false` if not\n     */\n\n\n    function isDefaultPropsDeclaration(node) {\n      const propName = getPropertyName(node);\n      return propName === 'defaultProps' || propName === 'getDefaultProps';\n    }\n\n    function getKey(node) {\n      return context.getSourceCode().getText(node.key || node.argument);\n    }\n    /**\n     * Find a variable by name in the current scope.\n     * @param  {string} name Name of the variable to look for.\n     * @returns {ASTNode|null} Return null if the variable could not be found, ASTNode otherwise.\n     */\n\n\n    function findVariableByName(name) {\n      const variable = variableUtil.variablesInScope(context).find(item => item.name === name);\n\n      if (!variable || !variable.defs[0] || !variable.defs[0].node) {\n        return null;\n      }\n\n      if (variable.defs[0].node.type === 'TypeAlias') {\n        return variable.defs[0].node.right;\n      }\n\n      return variable.defs[0].node.init;\n    }\n    /**\n     * Checks if defaultProps declarations are sorted\n     * @param {Array} declarations The array of AST nodes being checked.\n     * @returns {void}\n     */\n\n\n    function checkSorted(declarations) {\n      // function fix(fixer) {\n      //   return propTypesSortUtil.fixPropTypesSort(fixer, context, declarations, ignoreCase);\n      // }\n      declarations.reduce((prev, curr, idx, decls) => {\n        if (/Spread(?:Property|Element)$/.test(curr.type)) {\n          return decls[idx + 1];\n        }\n\n        let prevPropName = getKey(prev);\n        let currentPropName = getKey(curr);\n\n        if (ignoreCase) {\n          prevPropName = prevPropName.toLowerCase();\n          currentPropName = currentPropName.toLowerCase();\n        }\n\n        if (currentPropName < prevPropName) {\n          report(context, messages.propsNotSorted, 'propsNotSorted', {\n            node: curr // fix\n\n          });\n          return prev;\n        }\n\n        return curr;\n      }, declarations[0]);\n    }\n\n    function checkNode(node) {\n      if (!node) {\n        return;\n      }\n\n      if (node.type === 'ObjectExpression') {\n        checkSorted(node.properties);\n      } else if (node.type === 'Identifier') {\n        const propTypesObject = findVariableByName(node.name);\n\n        if (propTypesObject && propTypesObject.properties) {\n          checkSorted(propTypesObject.properties);\n        }\n      }\n    } // --------------------------------------------------------------------------\n    // Public API\n    // --------------------------------------------------------------------------\n\n\n    return {\n      'ClassProperty, PropertyDefinition'(node) {\n        if (!isDefaultPropsDeclaration(node)) {\n          return;\n        }\n\n        checkNode(node.value);\n      },\n\n      MemberExpression(node) {\n        if (!isDefaultPropsDeclaration(node)) {\n          return;\n        }\n\n        checkNode(node.parent.right);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["variableUtil","require","docsUrl","report","messages","propsNotSorted","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","ignoreCase","additionalProperties","create","context","configuration","options","getPropertyName","node","key","indexOf","name","property","tokens","getSourceCode","getFirstTokens","value","isDefaultPropsDeclaration","propName","getKey","getText","argument","findVariableByName","variable","variablesInScope","find","item","defs","right","init","checkSorted","declarations","reduce","prev","curr","idx","decls","test","prevPropName","currentPropName","toLowerCase","checkNode","propTypesObject","MemberExpression","parent"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-sort-default-props.js"],"sourcesContent":["/**\n * @fileoverview Enforce default props alphabetical sorting\n * @author Vladimir Kattsov\n */\n\n'use strict';\n\nconst variableUtil = require('../util/variable');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  propsNotSorted: 'Default prop types declarations should be sorted alphabetically',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce defaultProps declarations alphabetical sorting',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-sort-default-props'),\n    },\n    // fixable: 'code',\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        ignoreCase: {\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const ignoreCase = configuration.ignoreCase || false;\n\n    /**\n     * Get properties name\n     * @param {Object} node - Property.\n     * @returns {String} Property name.\n     */\n    function getPropertyName(node) {\n      if (node.key || ['MethodDefinition', 'Property'].indexOf(node.type) !== -1) {\n        return node.key.name;\n      }\n      if (node.type === 'MemberExpression') {\n        return node.property.name;\n      // Special case for class properties\n      // (babel-eslint@5 does not expose property name so we have to rely on tokens)\n      }\n      if (node.type === 'ClassProperty') {\n        const tokens = context.getSourceCode().getFirstTokens(node, 2);\n        return tokens[1] && tokens[1].type === 'Identifier' ? tokens[1].value : tokens[0].value;\n      }\n      return '';\n    }\n\n    /**\n     * Checks if the Identifier node passed in looks like a defaultProps declaration.\n     * @param   {ASTNode}  node The node to check. Must be an Identifier node.\n     * @returns {Boolean}       `true` if the node is a defaultProps declaration, `false` if not\n     */\n    function isDefaultPropsDeclaration(node) {\n      const propName = getPropertyName(node);\n      return (propName === 'defaultProps' || propName === 'getDefaultProps');\n    }\n\n    function getKey(node) {\n      return context.getSourceCode().getText(node.key || node.argument);\n    }\n\n    /**\n     * Find a variable by name in the current scope.\n     * @param  {string} name Name of the variable to look for.\n     * @returns {ASTNode|null} Return null if the variable could not be found, ASTNode otherwise.\n     */\n    function findVariableByName(name) {\n      const variable = variableUtil.variablesInScope(context).find((item) => item.name === name);\n\n      if (!variable || !variable.defs[0] || !variable.defs[0].node) {\n        return null;\n      }\n\n      if (variable.defs[0].node.type === 'TypeAlias') {\n        return variable.defs[0].node.right;\n      }\n\n      return variable.defs[0].node.init;\n    }\n\n    /**\n     * Checks if defaultProps declarations are sorted\n     * @param {Array} declarations The array of AST nodes being checked.\n     * @returns {void}\n     */\n    function checkSorted(declarations) {\n      // function fix(fixer) {\n      //   return propTypesSortUtil.fixPropTypesSort(fixer, context, declarations, ignoreCase);\n      // }\n\n      declarations.reduce((prev, curr, idx, decls) => {\n        if (/Spread(?:Property|Element)$/.test(curr.type)) {\n          return decls[idx + 1];\n        }\n\n        let prevPropName = getKey(prev);\n        let currentPropName = getKey(curr);\n\n        if (ignoreCase) {\n          prevPropName = prevPropName.toLowerCase();\n          currentPropName = currentPropName.toLowerCase();\n        }\n\n        if (currentPropName < prevPropName) {\n          report(context, messages.propsNotSorted, 'propsNotSorted', {\n            node: curr,\n            // fix\n          });\n\n          return prev;\n        }\n\n        return curr;\n      }, declarations[0]);\n    }\n\n    function checkNode(node) {\n      if (!node) {\n        return;\n      }\n      if (node.type === 'ObjectExpression') {\n        checkSorted(node.properties);\n      } else if (node.type === 'Identifier') {\n        const propTypesObject = findVariableByName(node.name);\n        if (propTypesObject && propTypesObject.properties) {\n          checkSorted(propTypesObject.properties);\n        }\n      }\n    }\n\n    // --------------------------------------------------------------------------\n    // Public API\n    // --------------------------------------------------------------------------\n\n    return {\n      'ClassProperty, PropertyDefinition'(node) {\n        if (!isDefaultPropsDeclaration(node)) {\n          return;\n        }\n\n        checkNode(node.value);\n      },\n\n      MemberExpression(node) {\n        if (!isDefaultPropsDeclaration(node)) {\n          return;\n        }\n\n        checkNode(node.parent.right);\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}