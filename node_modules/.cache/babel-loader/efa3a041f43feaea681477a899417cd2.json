{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = mayHaveAccessibleLabel;\n\nvar _arrayIncludes = _interopRequireDefault(require(\"array-includes\"));\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n/**\n * Returns true if a labelling element is found or if it cannot determine if\n * a label is present because of expression containers or spread attributes.\n * A false return value means that the node definitely does not have a label,\n * but a true return return value means that the node may or may not have a\n * label.\n *\n * \n */\n\n\nfunction hasLabellingProp(openingElement) {\n  var additionalLabellingProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var labellingProps = [].concat('alt', // Assume alt is used correctly on an image\n  'aria-label', 'aria-labelledby', additionalLabellingProps);\n  return openingElement.attributes.some(function (attribute) {\n    // We must assume that a spread value contains a labelling prop.\n    if (attribute.type !== 'JSXAttribute') {\n      return true;\n    } // Attribute matches.\n\n\n    if ((0, _arrayIncludes[\"default\"])(labellingProps, (0, _jsxAstUtils.propName)(attribute)) && !!(0, _jsxAstUtils.getPropValue)(attribute)) {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nfunction mayHaveAccessibleLabel(root) {\n  var maxDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var additionalLabellingProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  function checkElement(node, depth) {\n    // Bail when maxDepth is exceeded.\n    if (depth > maxDepth) {\n      return false;\n    } // Check for literal text.\n\n\n    if (node.type === 'Literal' && !!node.value) {\n      return true;\n    } // Assume an expression container renders a label. It is the best we can\n    // do in this case.\n\n\n    if (node.type === 'JSXExpressionContainer') {\n      return true;\n    } // Check for JSXText.\n    // $FlowFixMe Remove after updating ast-types-flow\n\n\n    if (node.type === 'JSXText' && !!node.value) {\n      return true;\n    } // Check for labelling props.\n\n\n    if (node.openingElement\n    /* $FlowFixMe */\n    && hasLabellingProp(node.openingElement, additionalLabellingProps)) {\n      return true;\n    } // Recurse into the child element nodes.\n\n\n    if (node.children) {\n      /* $FlowFixMe */\n      for (var i = 0; i < node.children.length; i += 1) {\n        /* $FlowFixMe */\n        if (checkElement(node.children[i], depth + 1)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return checkElement(root, 0);\n}\n\nmodule.exports = exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","mayHaveAccessibleLabel","_arrayIncludes","_jsxAstUtils","hasLabellingProp","openingElement","additionalLabellingProps","arguments","length","undefined","labellingProps","concat","attributes","some","attribute","type","propName","getPropValue","root","maxDepth","checkElement","node","depth","children","i","module","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/lib/util/mayHaveAccessibleLabel.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = mayHaveAccessibleLabel;\n\nvar _arrayIncludes = _interopRequireDefault(require(\"array-includes\"));\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\n/**\n * Returns true if a labelling element is found or if it cannot determine if\n * a label is present because of expression containers or spread attributes.\n * A false return value means that the node definitely does not have a label,\n * but a true return return value means that the node may or may not have a\n * label.\n *\n * \n */\nfunction hasLabellingProp(openingElement) {\n  var additionalLabellingProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var labellingProps = [].concat('alt', // Assume alt is used correctly on an image\n  'aria-label', 'aria-labelledby', additionalLabellingProps);\n  return openingElement.attributes.some(function (attribute) {\n    // We must assume that a spread value contains a labelling prop.\n    if (attribute.type !== 'JSXAttribute') {\n      return true;\n    } // Attribute matches.\n\n\n    if ((0, _arrayIncludes[\"default\"])(labellingProps, (0, _jsxAstUtils.propName)(attribute)) && !!(0, _jsxAstUtils.getPropValue)(attribute)) {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nfunction mayHaveAccessibleLabel(root) {\n  var maxDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var additionalLabellingProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  function checkElement(node, depth) {\n    // Bail when maxDepth is exceeded.\n    if (depth > maxDepth) {\n      return false;\n    } // Check for literal text.\n\n\n    if (node.type === 'Literal' && !!node.value) {\n      return true;\n    } // Assume an expression container renders a label. It is the best we can\n    // do in this case.\n\n\n    if (node.type === 'JSXExpressionContainer') {\n      return true;\n    } // Check for JSXText.\n    // $FlowFixMe Remove after updating ast-types-flow\n\n\n    if (node.type === 'JSXText' && !!node.value) {\n      return true;\n    } // Check for labelling props.\n\n\n    if (node.openingElement\n    /* $FlowFixMe */\n    && hasLabellingProp(node.openingElement, additionalLabellingProps)) {\n      return true;\n    } // Recurse into the child element nodes.\n\n\n    if (node.children) {\n      /* $FlowFixMe */\n      for (var i = 0; i < node.children.length; i += 1) {\n        /* $FlowFixMe */\n        if (checkElement(node.children[i], depth + 1)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return checkElement(root, 0);\n}\n\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,sBAArB;;AAEA,IAAIC,cAAc,GAAGP,sBAAsB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAA3C;;AAEA,IAAIO,YAAY,GAAGP,OAAO,CAAC,eAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,gBAAT,CAA0BC,cAA1B,EAA0C;EACxC,IAAIC,wBAAwB,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAnG;EACA,IAAIG,cAAc,GAAG,GAAGC,MAAH,CAAU,KAAV,EAAiB;EACtC,YADqB,EACP,iBADO,EACYL,wBADZ,CAArB;EAEA,OAAOD,cAAc,CAACO,UAAf,CAA0BC,IAA1B,CAA+B,UAAUC,SAAV,EAAqB;IACzD;IACA,IAAIA,SAAS,CAACC,IAAV,KAAmB,cAAvB,EAAuC;MACrC,OAAO,IAAP;IACD,CAJwD,CAIvD;;;IAGF,IAAI,CAAC,GAAGb,cAAc,CAAC,SAAD,CAAlB,EAA+BQ,cAA/B,EAA+C,CAAC,GAAGP,YAAY,CAACa,QAAjB,EAA2BF,SAA3B,CAA/C,KAAyF,CAAC,CAAC,CAAC,GAAGX,YAAY,CAACc,YAAjB,EAA+BH,SAA/B,CAA/F,EAA0I;MACxI,OAAO,IAAP;IACD;;IAED,OAAO,KAAP;EACD,CAZM,CAAP;AAaD;;AAED,SAASb,sBAAT,CAAgCiB,IAAhC,EAAsC;EACpC,IAAIC,QAAQ,GAAGZ,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAnF;EACA,IAAID,wBAAwB,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAnG;;EAEA,SAASa,YAAT,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;IACjC;IACA,IAAIA,KAAK,GAAGH,QAAZ,EAAsB;MACpB,OAAO,KAAP;IACD,CAJgC,CAI/B;;;IAGF,IAAIE,IAAI,CAACN,IAAL,KAAc,SAAd,IAA2B,CAAC,CAACM,IAAI,CAACrB,KAAtC,EAA6C;MAC3C,OAAO,IAAP;IACD,CATgC,CAS/B;IACF;;;IAGA,IAAIqB,IAAI,CAACN,IAAL,KAAc,wBAAlB,EAA4C;MAC1C,OAAO,IAAP;IACD,CAfgC,CAe/B;IACF;;;IAGA,IAAIM,IAAI,CAACN,IAAL,KAAc,SAAd,IAA2B,CAAC,CAACM,IAAI,CAACrB,KAAtC,EAA6C;MAC3C,OAAO,IAAP;IACD,CArBgC,CAqB/B;;;IAGF,IAAIqB,IAAI,CAAChB;IACT;IADI,GAEDD,gBAAgB,CAACiB,IAAI,CAAChB,cAAN,EAAsBC,wBAAtB,CAFnB,EAEoE;MAClE,OAAO,IAAP;IACD,CA5BgC,CA4B/B;;;IAGF,IAAIe,IAAI,CAACE,QAAT,EAAmB;MACjB;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACE,QAAL,CAAcf,MAAlC,EAA0CgB,CAAC,IAAI,CAA/C,EAAkD;QAChD;QACA,IAAIJ,YAAY,CAACC,IAAI,CAACE,QAAL,CAAcC,CAAd,CAAD,EAAmBF,KAAK,GAAG,CAA3B,CAAhB,EAA+C;UAC7C,OAAO,IAAP;QACD;MACF;IACF;;IAED,OAAO,KAAP;EACD;;EAED,OAAOF,YAAY,CAACF,IAAD,EAAO,CAAP,CAAnB;AACD;;AAEDO,MAAM,CAAC1B,OAAP,GAAiBA,OAAO,CAAC2B,OAAzB"},"metadata":{},"sourceType":"script"}