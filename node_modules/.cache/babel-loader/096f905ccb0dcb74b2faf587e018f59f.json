{"ast":null,"code":"/**\n * Converts destructured parameters with default values to non-shorthand syntax.\n * This fixes the only arguments-related bug in ES Modules-supporting browsers (Edge 16 & 17).\n * Use this plugin instead of @babel/plugin-transform-parameters when targeting ES Modules.\n */\nexport default (_ref => {\n  let {\n    types: t\n  } = _ref;\n\n  const isArrowParent = p => p.parentKey === \"params\" && p.parentPath && t.isArrowFunctionExpression(p.parentPath);\n\n  return {\n    name: \"transform-edge-default-parameters\",\n    visitor: {\n      AssignmentPattern(path) {\n        const arrowArgParent = path.find(isArrowParent);\n\n        if (arrowArgParent && path.parent.shorthand) {\n          // In Babel 7+, there is no way to force non-shorthand properties.\n          path.parent.shorthand = false;\n          (path.parent.extra || {}).shorthand = false; // So, to ensure non-shorthand, rename the local identifier so it no longer matches:\n\n          path.scope.rename(path.parent.key.name);\n        }\n      }\n\n    }\n  };\n});","map":{"version":3,"names":["types","t","isArrowParent","p","parentKey","parentPath","isArrowFunctionExpression","name","visitor","AssignmentPattern","path","arrowArgParent","find","parent","shorthand","extra","scope","rename","key"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@babel/preset-modules/src/plugins/transform-edge-default-parameters/index.js"],"sourcesContent":["/**\n * Converts destructured parameters with default values to non-shorthand syntax.\n * This fixes the only arguments-related bug in ES Modules-supporting browsers (Edge 16 & 17).\n * Use this plugin instead of @babel/plugin-transform-parameters when targeting ES Modules.\n */\n\nexport default ({ types: t }) => {\n  const isArrowParent = p =>\n    p.parentKey === \"params\" &&\n    p.parentPath &&\n    t.isArrowFunctionExpression(p.parentPath);\n\n  return {\n    name: \"transform-edge-default-parameters\",\n    visitor: {\n      AssignmentPattern(path) {\n        const arrowArgParent = path.find(isArrowParent);\n        if (arrowArgParent && path.parent.shorthand) {\n          // In Babel 7+, there is no way to force non-shorthand properties.\n          path.parent.shorthand = false;\n          (path.parent.extra || {}).shorthand = false;\n\n          // So, to ensure non-shorthand, rename the local identifier so it no longer matches:\n          path.scope.rename(path.parent.key.name);\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,gBAAe,QAAkB;EAAA,IAAjB;IAAEA,KAAK,EAAEC;EAAT,CAAiB;;EAC/B,MAAMC,aAAa,GAAGC,CAAC,IACrBA,CAAC,CAACC,SAAF,KAAgB,QAAhB,IACAD,CAAC,CAACE,UADF,IAEAJ,CAAC,CAACK,yBAAF,CAA4BH,CAAC,CAACE,UAA9B,CAHF;;EAKA,OAAO;IACLE,IAAI,EAAE,mCADD;IAELC,OAAO,EAAE;MACPC,iBAAiB,CAACC,IAAD,EAAO;QACtB,MAAMC,cAAc,GAAGD,IAAI,CAACE,IAAL,CAAUV,aAAV,CAAvB;;QACA,IAAIS,cAAc,IAAID,IAAI,CAACG,MAAL,CAAYC,SAAlC,EAA6C;UAC3C;UACAJ,IAAI,CAACG,MAAL,CAAYC,SAAZ,GAAwB,KAAxB;UACA,CAACJ,IAAI,CAACG,MAAL,CAAYE,KAAZ,IAAqB,EAAtB,EAA0BD,SAA1B,GAAsC,KAAtC,CAH2C,CAK3C;;UACAJ,IAAI,CAACM,KAAL,CAAWC,MAAX,CAAkBP,IAAI,CAACG,MAAL,CAAYK,GAAZ,CAAgBX,IAAlC;QACD;MACF;;IAXM;EAFJ,CAAP;AAgBD,CAtBD"},"metadata":{},"sourceType":"module"}