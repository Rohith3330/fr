{"ast":null,"code":"'use strict';\n\nconst {\n  removeLeadingZero\n} = require('../lib/svgo/tools.js');\n\nexports.name = 'cleanupListOfValues';\nexports.type = 'visitor';\nexports.active = false;\nexports.description = 'rounds list of values to the fixed precision';\nconst regNumericValues = /^([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;\nconst regSeparator = /\\s+,?\\s*|,\\s*/;\nconst absoluteLengths = {\n  // relative to px\n  cm: 96 / 2.54,\n  mm: 96 / 25.4,\n  in: 96,\n  pt: 4 / 3,\n  pc: 16,\n  px: 1\n};\n/**\n * Round list of values to the fixed precision.\n *\n * @example\n * <svg viewBox=\"0 0 200.28423 200.28423\" enable-background=\"new 0 0 200.28423 200.28423\">\n *         ⬇\n * <svg viewBox=\"0 0 200.284 200.284\" enable-background=\"new 0 0 200.284 200.284\">\n *\n * <polygon points=\"208.250977 77.1308594 223.069336 ... \"/>\n *         ⬇\n * <polygon points=\"208.251 77.131 223.069 ... \"/>\n *\n * @author kiyopikko\n *\n * @type {import('../lib/types').Plugin<{\n *   floatPrecision?: number,\n *   leadingZero?: boolean,\n *   defaultPx?: boolean,\n *   convertToPx?: boolean\n * }>}\n */\n\nexports.fn = (_root, params) => {\n  const {\n    floatPrecision = 3,\n    leadingZero = true,\n    defaultPx = true,\n    convertToPx = true\n  } = params;\n  /**\n   * @type {(lists: string) => string}\n   */\n\n  const roundValues = lists => {\n    const roundedList = [];\n\n    for (const elem of lists.split(regSeparator)) {\n      const match = elem.match(regNumericValues);\n      const matchNew = elem.match(/new/); // if attribute value matches regNumericValues\n\n      if (match) {\n        // round it to the fixed precision\n        let num = Number(Number(match[1]).toFixed(floatPrecision));\n        /**\n         * @type {any}\n         */\n\n        let matchedUnit = match[3] || '';\n        /**\n         * @type{'' | keyof typeof absoluteLengths}\n         */\n\n        let units = matchedUnit; // convert absolute values to pixels\n\n        if (convertToPx && units && units in absoluteLengths) {\n          const pxNum = Number((absoluteLengths[units] * Number(match[1])).toFixed(floatPrecision));\n\n          if (pxNum.toString().length < match[0].length) {\n            num = pxNum;\n            units = 'px';\n          }\n        } // and remove leading zero\n\n\n        let str;\n\n        if (leadingZero) {\n          str = removeLeadingZero(num);\n        } else {\n          str = num.toString();\n        } // remove default 'px' units\n\n\n        if (defaultPx && units === 'px') {\n          units = '';\n        }\n\n        roundedList.push(str + units);\n      } // if attribute value is \"new\"(only enable-background).\n      else if (matchNew) {\n        roundedList.push('new');\n      } else if (elem) {\n        roundedList.push(elem);\n      }\n    }\n\n    return roundedList.join(' ');\n  };\n\n  return {\n    element: {\n      enter: node => {\n        if (node.attributes.points != null) {\n          node.attributes.points = roundValues(node.attributes.points);\n        }\n\n        if (node.attributes['enable-background'] != null) {\n          node.attributes['enable-background'] = roundValues(node.attributes['enable-background']);\n        }\n\n        if (node.attributes.viewBox != null) {\n          node.attributes.viewBox = roundValues(node.attributes.viewBox);\n        }\n\n        if (node.attributes['stroke-dasharray'] != null) {\n          node.attributes['stroke-dasharray'] = roundValues(node.attributes['stroke-dasharray']);\n        }\n\n        if (node.attributes.dx != null) {\n          node.attributes.dx = roundValues(node.attributes.dx);\n        }\n\n        if (node.attributes.dy != null) {\n          node.attributes.dy = roundValues(node.attributes.dy);\n        }\n\n        if (node.attributes.x != null) {\n          node.attributes.x = roundValues(node.attributes.x);\n        }\n\n        if (node.attributes.y != null) {\n          node.attributes.y = roundValues(node.attributes.y);\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["removeLeadingZero","require","exports","name","type","active","description","regNumericValues","regSeparator","absoluteLengths","cm","mm","in","pt","pc","px","fn","_root","params","floatPrecision","leadingZero","defaultPx","convertToPx","roundValues","lists","roundedList","elem","split","match","matchNew","num","Number","toFixed","matchedUnit","units","pxNum","toString","length","str","push","join","element","enter","node","attributes","points","viewBox","dx","dy","x","y"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-svgo/node_modules/svgo/plugins/cleanupListOfValues.js"],"sourcesContent":["'use strict';\n\nconst { removeLeadingZero } = require('../lib/svgo/tools.js');\n\nexports.name = 'cleanupListOfValues';\nexports.type = 'visitor';\nexports.active = false;\nexports.description = 'rounds list of values to the fixed precision';\n\nconst regNumericValues =\n  /^([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;\nconst regSeparator = /\\s+,?\\s*|,\\s*/;\nconst absoluteLengths = {\n  // relative to px\n  cm: 96 / 2.54,\n  mm: 96 / 25.4,\n  in: 96,\n  pt: 4 / 3,\n  pc: 16,\n  px: 1,\n};\n\n/**\n * Round list of values to the fixed precision.\n *\n * @example\n * <svg viewBox=\"0 0 200.28423 200.28423\" enable-background=\"new 0 0 200.28423 200.28423\">\n *         ⬇\n * <svg viewBox=\"0 0 200.284 200.284\" enable-background=\"new 0 0 200.284 200.284\">\n *\n * <polygon points=\"208.250977 77.1308594 223.069336 ... \"/>\n *         ⬇\n * <polygon points=\"208.251 77.131 223.069 ... \"/>\n *\n * @author kiyopikko\n *\n * @type {import('../lib/types').Plugin<{\n *   floatPrecision?: number,\n *   leadingZero?: boolean,\n *   defaultPx?: boolean,\n *   convertToPx?: boolean\n * }>}\n */\nexports.fn = (_root, params) => {\n  const {\n    floatPrecision = 3,\n    leadingZero = true,\n    defaultPx = true,\n    convertToPx = true,\n  } = params;\n\n  /**\n   * @type {(lists: string) => string}\n   */\n  const roundValues = (lists) => {\n    const roundedList = [];\n\n    for (const elem of lists.split(regSeparator)) {\n      const match = elem.match(regNumericValues);\n      const matchNew = elem.match(/new/);\n\n      // if attribute value matches regNumericValues\n      if (match) {\n        // round it to the fixed precision\n        let num = Number(Number(match[1]).toFixed(floatPrecision));\n        /**\n         * @type {any}\n         */\n        let matchedUnit = match[3] || '';\n        /**\n         * @type{'' | keyof typeof absoluteLengths}\n         */\n        let units = matchedUnit;\n\n        // convert absolute values to pixels\n        if (convertToPx && units && units in absoluteLengths) {\n          const pxNum = Number(\n            (absoluteLengths[units] * Number(match[1])).toFixed(floatPrecision)\n          );\n\n          if (pxNum.toString().length < match[0].length) {\n            num = pxNum;\n            units = 'px';\n          }\n        }\n\n        // and remove leading zero\n        let str;\n        if (leadingZero) {\n          str = removeLeadingZero(num);\n        } else {\n          str = num.toString();\n        }\n\n        // remove default 'px' units\n        if (defaultPx && units === 'px') {\n          units = '';\n        }\n\n        roundedList.push(str + units);\n      }\n      // if attribute value is \"new\"(only enable-background).\n      else if (matchNew) {\n        roundedList.push('new');\n      } else if (elem) {\n        roundedList.push(elem);\n      }\n    }\n\n    return roundedList.join(' ');\n  };\n\n  return {\n    element: {\n      enter: (node) => {\n        if (node.attributes.points != null) {\n          node.attributes.points = roundValues(node.attributes.points);\n        }\n\n        if (node.attributes['enable-background'] != null) {\n          node.attributes['enable-background'] = roundValues(\n            node.attributes['enable-background']\n          );\n        }\n\n        if (node.attributes.viewBox != null) {\n          node.attributes.viewBox = roundValues(node.attributes.viewBox);\n        }\n\n        if (node.attributes['stroke-dasharray'] != null) {\n          node.attributes['stroke-dasharray'] = roundValues(\n            node.attributes['stroke-dasharray']\n          );\n        }\n\n        if (node.attributes.dx != null) {\n          node.attributes.dx = roundValues(node.attributes.dx);\n        }\n\n        if (node.attributes.dy != null) {\n          node.attributes.dy = roundValues(node.attributes.dy);\n        }\n\n        if (node.attributes.x != null) {\n          node.attributes.x = roundValues(node.attributes.x);\n        }\n\n        if (node.attributes.y != null) {\n          node.attributes.y = roundValues(node.attributes.y);\n        }\n      },\n    },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}