{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util_1 = require(\"../util\");\n\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\n\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('init-declarations');\nexports.default = (0, util_1.createRule)({\n  name: 'init-declarations',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Require or disallow initialization in variable declarations',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: baseRule.meta.schema,\n    messages: baseRule.meta.messages\n  },\n  defaultOptions: ['always'],\n\n  create(context, _ref) {\n    let [mode] = _ref;\n    const rules = baseRule.create(context);\n    return {\n      'VariableDeclaration:exit'(node) {\n        if (mode === 'always') {\n          if (node.declare) {\n            return;\n          }\n\n          if (isAncestorNamespaceDeclared(node)) {\n            return;\n          }\n        }\n\n        rules['VariableDeclaration:exit'](node);\n      }\n\n    };\n\n    function isAncestorNamespaceDeclared(node) {\n      let ancestor = node.parent;\n\n      while (ancestor) {\n        if (ancestor.type === utils_1.AST_NODE_TYPES.TSModuleDeclaration && ancestor.declare) {\n          return true;\n        }\n\n        ancestor = ancestor.parent;\n      }\n\n      return false;\n    }\n  }\n\n});","map":{"version":3,"mappings":";;;;;;AACA;;AAMA;;AACA;;AAEA,MAAMA,QAAQ,GAAG,2CAAkB,mBAAlB,CAAjB;AAKAC,kBAAe,uBAAgC;EAC7CC,IAAI,EAAE,mBADuC;EAE7CC,IAAI,EAAE;IACJC,IAAI,EAAE,YADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EACT,6DAFE;MAGJC,WAAW,EAAE,KAHT;MAIJC,eAAe,EAAE;IAJb,CAFF;IAQJC,cAAc,EAAET,QAAQ,CAACG,IAAT,CAAcM,cAR1B;IASJC,MAAM,EAAEV,QAAQ,CAACG,IAAT,CAAcO,MATlB;IAUJC,QAAQ,EAAEX,QAAQ,CAACG,IAAT,CAAcQ;EAVpB,CAFuC;EAc7CC,cAAc,EAAE,CAAC,QAAD,CAd6B;;EAe7CC,MAAM,CAACC,OAAD,QAAgB;IAAA,IAAN,CAACC,IAAD,CAAM;IACpB,MAAMC,KAAK,GAAGhB,QAAQ,CAACa,MAAT,CAAgBC,OAAhB,CAAd;IAEA,OAAO;MACL,2BAA2BG,IAA3B,EAA6D;QAC3D,IAAIF,IAAI,KAAK,QAAb,EAAuB;UACrB,IAAIE,IAAI,CAACC,OAAT,EAAkB;YAChB;UACD;;UACD,IAAIC,2BAA2B,CAACF,IAAD,CAA/B,EAAuC;YACrC;UACD;QACF;;QAEDD,KAAK,CAAC,0BAAD,CAAL,CAAkCC,IAAlC;MACD;;IAZI,CAAP;;IAeA,SAASE,2BAAT,CACEF,IADF,EACoC;MAElC,IAAIG,QAAQ,GAAGH,IAAI,CAACI,MAApB;;MAEA,OAAOD,QAAP,EAAiB;QACf,IACEA,QAAQ,CAAChB,IAAT,KAAkBkB,uBAAeC,mBAAjC,IACAH,QAAQ,CAACF,OAFX,EAGE;UACA,OAAO,IAAP;QACD;;QAEDE,QAAQ,GAAGA,QAAQ,CAACC,MAApB;MACD;;MAED,OAAO,KAAP;IACD;EACF;;AAnD4C,CAAhC,CAAf","names":["baseRule","exports","name","meta","type","docs","description","recommended","extendsBaseRule","hasSuggestions","schema","messages","defaultOptions","create","context","mode","rules","node","declare","isAncestorNamespaceDeclared","ancestor","parent","utils_1","TSModuleDeclaration"],"sources":["../../src/rules/init-declarations.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}