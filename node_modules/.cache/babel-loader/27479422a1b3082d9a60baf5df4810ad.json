{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst create = context => {\n  return {\n    ObjectTypeAnnotation(node) {\n      const {\n        properties\n      } = node;\n\n      for (const property of properties) {\n        const {\n          type\n        } = property;\n\n        if (type === 'ObjectTypeSpreadProperty') {\n          const {\n            argument: {\n              type: argumentType,\n              id: argumentId\n            }\n          } = property;\n\n          if (argumentType !== 'GenericTypeAnnotation' || argumentId.name !== '$Exact') {\n            context.report({\n              message: 'Use $Exact to make type spreading safe.',\n              node\n            });\n          }\n        }\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","schema","enum","type","create","context","ObjectTypeAnnotation","node","properties","property","argument","argumentType","id","argumentId","name","report","message","_default","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/spreadExactType.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst create = context => {\n  return {\n    ObjectTypeAnnotation(node) {\n      const {\n        properties\n      } = node;\n\n      for (const property of properties) {\n        const {\n          type\n        } = property;\n\n        if (type === 'ObjectTypeSpreadProperty') {\n          const {\n            argument: {\n              type: argumentType,\n              id: argumentId\n            }\n          } = property;\n\n          if (argumentType !== 'GenericTypeAnnotation' || argumentId.name !== '$Exact') {\n            context.report({\n              message: 'Use $Exact to make type spreading safe.',\n              node\n            });\n          }\n        }\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,MAAM,GAAG,CAAC;EACdC,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX,CADQ;EAEdC,IAAI,EAAE;AAFQ,CAAD,CAAf;;AAKA,MAAMC,MAAM,GAAGC,OAAO,IAAI;EACxB,OAAO;IACLC,oBAAoB,CAACC,IAAD,EAAO;MACzB,MAAM;QACJC;MADI,IAEFD,IAFJ;;MAIA,KAAK,MAAME,QAAX,IAAuBD,UAAvB,EAAmC;QACjC,MAAM;UACJL;QADI,IAEFM,QAFJ;;QAIA,IAAIN,IAAI,KAAK,0BAAb,EAAyC;UACvC,MAAM;YACJO,QAAQ,EAAE;cACRP,IAAI,EAAEQ,YADE;cAERC,EAAE,EAAEC;YAFI;UADN,IAKFJ,QALJ;;UAOA,IAAIE,YAAY,KAAK,uBAAjB,IAA4CE,UAAU,CAACC,IAAX,KAAoB,QAApE,EAA8E;YAC5ET,OAAO,CAACU,MAAR,CAAe;cACbC,OAAO,EAAE,yCADI;cAEbT;YAFa,CAAf;UAID;QACF;MACF;IACF;;EA3BI,CAAP;AA8BD,CA/BD;;AAiCA,IAAIU,QAAQ,GAAG;EACbb,MADa;EAEbH;AAFa,CAAf;AAIAH,OAAO,CAACE,OAAR,GAAkBiB,QAAlB;AACAC,MAAM,CAACpB,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}