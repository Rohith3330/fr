{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;\n\nconst core_1 = require(\"./core\");\n\nconst draft7_1 = require(\"./vocabularies/draft7\");\n\nconst discriminator_1 = require(\"./vocabularies/discriminator\");\n\nconst draft7MetaSchema = require(\"./refs/json-schema-draft-07.json\");\n\nconst META_SUPPORT_DATA = [\"/properties\"];\nconst META_SCHEMA_ID = \"http://json-schema.org/draft-07/schema\";\n\nclass Ajv extends core_1.default {\n  _addVocabularies() {\n    super._addVocabularies();\n\n    draft7_1.default.forEach(v => this.addVocabulary(v));\n    if (this.opts.discriminator) this.addKeyword(discriminator_1.default);\n  }\n\n  _addDefaultMetaSchema() {\n    super._addDefaultMetaSchema();\n\n    if (!this.opts.meta) return;\n    const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;\n    this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);\n    this.refs[\"http://json-schema.org/schema\"] = META_SCHEMA_ID;\n  }\n\n  defaultMeta() {\n    return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined);\n  }\n\n}\n\nmodule.exports = exports = Ajv;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Ajv;\n\nvar validate_1 = require(\"./compile/validate\");\n\nObject.defineProperty(exports, \"KeywordCxt\", {\n  enumerable: true,\n  get: function () {\n    return validate_1.KeywordCxt;\n  }\n});\n\nvar codegen_1 = require(\"./compile/codegen\");\n\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.str;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.stringify;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.nil;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.Name;\n  }\n});\nObject.defineProperty(exports, \"CodeGen\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.CodeGen;\n  }\n});","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,iBAAiB,GAAG,CAAC,aAAD,CAA1B;AAEA,MAAMC,cAAc,GAAG,wCAAvB;;AAEA,MAAMC,GAAN,SAAkBC,cAAlB,CAAyB;EACvBC,gBAAgB;IACd,MAAMA,gBAAN;;IACAC,iBAAmBC,OAAnB,CAA4BC,CAAD,IAAO,KAAKC,aAAL,CAAmBD,CAAnB,CAAlC;IACA,IAAI,KAAKE,IAAL,CAAUC,aAAd,EAA6B,KAAKC,UAAL,CAAgBC,uBAAhB;EAC9B;;EAEDC,qBAAqB;IACnB,MAAMA,qBAAN;;IACA,IAAI,CAAC,KAAKJ,IAAL,CAAUK,IAAf,EAAqB;IACrB,MAAMC,UAAU,GAAG,KAAKN,IAAL,CAAUO,KAAV,GACf,KAAKC,eAAL,CAAqBC,gBAArB,EAAuClB,iBAAvC,CADe,GAEfkB,gBAFJ;IAGA,KAAKC,aAAL,CAAmBJ,UAAnB,EAA+Bd,cAA/B,EAA+C,KAA/C;IACA,KAAKmB,IAAL,CAAU,+BAAV,IAA6CnB,cAA7C;EACD;;EAEDoB,WAAW;IACT,OAAQ,KAAKZ,IAAL,CAAUY,WAAV,GACN,MAAMA,WAAN,OAAwB,KAAKC,SAAL,CAAerB,cAAf,IAAiCA,cAAjC,GAAkDsB,SAA1E,CADF;EAED;;AApBsB;;AAuBzBC,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGvB,GAA3B;AACAwB,MAAM,CAACC,cAAP,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C;EAACG,KAAK,EAAE;AAAR,CAA7C;AAEAH,kBAAevB,GAAf;;AA0BA;;AAAQwB;EAAAG;EAAAC;IAAA;EAAU;AAAV;;AAIR;;AAAQJ;EAAAG;EAAAC;IAAA;EAAC;AAAD;AAAGJ;EAAAG;EAAAC;IAAA;EAAG;AAAH;AAAKJ;EAAAG;EAAAC;IAAA;EAAS;AAAT;AAAWJ;EAAAG;EAAAC;IAAA;EAAG;AAAH;AAAKJ;EAAAG;EAAAC;IAAA;EAAI;AAAJ;AAAYJ;EAAAG;EAAAC;IAAA;EAAO;AAAP","names":["META_SUPPORT_DATA","META_SCHEMA_ID","Ajv","core_1","_addVocabularies","draft7_1","forEach","v","addVocabulary","opts","discriminator","addKeyword","discriminator_1","_addDefaultMetaSchema","meta","metaSchema","$data","$dataMetaSchema","draft7MetaSchema","addMetaSchema","refs","defaultMeta","getSchema","undefined","module","exports","Object","defineProperty","value","enumerable","get"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\mini-css-extract-plugin\\node_modules\\ajv\\lib\\ajv.ts"],"sourcesContent":["import type {AnySchemaObject} from \"./types\"\nimport AjvCore from \"./core\"\nimport draft7Vocabularies from \"./vocabularies/draft7\"\nimport discriminator from \"./vocabularies/discriminator\"\nimport * as draft7MetaSchema from \"./refs/json-schema-draft-07.json\"\n\nconst META_SUPPORT_DATA = [\"/properties\"]\n\nconst META_SCHEMA_ID = \"http://json-schema.org/draft-07/schema\"\n\nclass Ajv extends AjvCore {\n  _addVocabularies(): void {\n    super._addVocabularies()\n    draft7Vocabularies.forEach((v) => this.addVocabulary(v))\n    if (this.opts.discriminator) this.addKeyword(discriminator)\n  }\n\n  _addDefaultMetaSchema(): void {\n    super._addDefaultMetaSchema()\n    if (!this.opts.meta) return\n    const metaSchema = this.opts.$data\n      ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)\n      : draft7MetaSchema\n    this.addMetaSchema(metaSchema, META_SCHEMA_ID, false)\n    this.refs[\"http://json-schema.org/schema\"] = META_SCHEMA_ID\n  }\n\n  defaultMeta(): string | AnySchemaObject | undefined {\n    return (this.opts.defaultMeta =\n      super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined))\n  }\n}\n\nmodule.exports = exports = Ajv\nObject.defineProperty(exports, \"__esModule\", {value: true})\n\nexport default Ajv\n\nexport {\n  Format,\n  FormatDefinition,\n  AsyncFormatDefinition,\n  KeywordDefinition,\n  KeywordErrorDefinition,\n  CodeKeywordDefinition,\n  MacroKeywordDefinition,\n  FuncKeywordDefinition,\n  Vocabulary,\n  Schema,\n  SchemaObject,\n  AnySchemaObject,\n  AsyncSchema,\n  AnySchema,\n  ValidateFunction,\n  AsyncValidateFunction,\n  SchemaValidateFunction,\n  ErrorObject,\n  ErrorNoParams,\n} from \"./types\"\n\nexport {Plugin, Options, CodeOptions, InstanceOptions, Logger, ErrorsTextOptions} from \"./core\"\nexport {SchemaCxt, SchemaObjCxt} from \"./compile\"\nexport {KeywordCxt} from \"./compile/validate\"\nexport {DefinedError} from \"./vocabularies/errors\"\nexport {JSONType} from \"./compile/rules\"\nexport {JSONSchemaType} from \"./types/json-schema\"\nexport {_, str, stringify, nil, Name, Code, CodeGen, CodeGenOptions} from \"./compile/codegen\"\n"]},"metadata":{},"sourceType":"script"}