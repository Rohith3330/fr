{"ast":null,"code":"'use strict';\n\nconst assert = require('chai').assert;\n\nconst modulePath = '../../src/error';\nsuite('error:', () => {\n  let log;\n  setup(() => {\n    log = {};\n  });\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath);\n    });\n  });\n  test('require returns object', () => {\n    assert.isObject(require(modulePath));\n  });\n  suite('require:', () => {\n    let error;\n    setup(() => {\n      error = require(modulePath);\n    });\n    test('error has create method', () => {\n      assert.isFunction(error.create);\n    });\n    test('error has no other methods', () => {\n      assert.lengthOf(Object.keys(error), 1);\n    });\n    test('create expects four arguments', () => {\n      assert.lengthOf(error.create, 4);\n    });\n    test('create does not throw', () => {\n      assert.doesNotThrow(() => {\n        error.create();\n      });\n    });\n    test('create returns Error', () => {\n      assert.instanceOf(error.create(), Error);\n    });\n    suite('create:', () => {\n      let created;\n      setup(() => {\n        created = error.create('foo', 'bar', 'baz', 'qux');\n      });\n      test('created has correct actual property', () => {\n        assert.strictEqual(created.actual, 'foo');\n      });\n      test('created has correct expected property', () => {\n        assert.strictEqual(created.expected, 'bar');\n      });\n      test('created has correct lineNumber property', () => {\n        assert.strictEqual(created.lineNumber, 'baz');\n      });\n      test('created has correct columnNumber property', () => {\n        assert.strictEqual(created.columnNumber, 'qux');\n      });\n      test('created has correct message property', () => {\n        assert.strictEqual(created.message, 'JSON error: encountered `foo` at line baz, column qux where `bar` was expected.');\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","modulePath","suite","log","setup","test","doesNotThrow","isObject","error","isFunction","create","lengthOf","Object","keys","instanceOf","Error","created","strictEqual","actual","expected","lineNumber","columnNumber","message"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/bfj/test/unit/error.js"],"sourcesContent":["'use strict'\n\nconst assert = require('chai').assert\nconst modulePath = '../../src/error'\n\nsuite('error:', () => {\n  let log\n\n  setup(() => {\n    log = {}\n  })\n\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath)\n    })\n  })\n\n  test('require returns object', () => {\n    assert.isObject(require(modulePath))\n  })\n\n  suite('require:', () => {\n    let error\n\n    setup(() => {\n      error = require(modulePath)\n    })\n\n    test('error has create method', () => {\n      assert.isFunction(error.create)\n    })\n\n    test('error has no other methods', () => {\n      assert.lengthOf(Object.keys(error), 1)\n    })\n\n    test('create expects four arguments', () => {\n      assert.lengthOf(error.create, 4)\n    })\n\n    test('create does not throw', () => {\n      assert.doesNotThrow(() => {\n        error.create()\n      })\n    })\n\n    test('create returns Error', () => {\n      assert.instanceOf(error.create(), Error)\n    })\n\n    suite('create:', () => {\n      let created\n\n      setup(() => {\n        created = error.create('foo', 'bar', 'baz', 'qux')\n      })\n\n      test('created has correct actual property', () => {\n        assert.strictEqual(created.actual, 'foo')\n      })\n\n      test('created has correct expected property', () => {\n        assert.strictEqual(created.expected, 'bar')\n      })\n\n      test('created has correct lineNumber property', () => {\n        assert.strictEqual(created.lineNumber, 'baz')\n      })\n\n      test('created has correct columnNumber property', () => {\n        assert.strictEqual(created.columnNumber, 'qux')\n      })\n\n      test('created has correct message property', () => {\n        assert.strictEqual(created.message, 'JSON error: encountered `foo` at line baz, column qux where `bar` was expected.')\n      })\n    })\n  })\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAA/B;;AACA,MAAME,UAAU,GAAG,iBAAnB;AAEAC,KAAK,CAAC,QAAD,EAAW,MAAM;EACpB,IAAIC,GAAJ;EAEAC,KAAK,CAAC,MAAM;IACVD,GAAG,GAAG,EAAN;EACD,CAFI,CAAL;EAIAE,IAAI,CAAC,wBAAD,EAA2B,MAAM;IACnCN,MAAM,CAACO,YAAP,CAAoB,MAAM;MACxBN,OAAO,CAACC,UAAD,CAAP;IACD,CAFD;EAGD,CAJG,CAAJ;EAMAI,IAAI,CAAC,wBAAD,EAA2B,MAAM;IACnCN,MAAM,CAACQ,QAAP,CAAgBP,OAAO,CAACC,UAAD,CAAvB;EACD,CAFG,CAAJ;EAIAC,KAAK,CAAC,UAAD,EAAa,MAAM;IACtB,IAAIM,KAAJ;IAEAJ,KAAK,CAAC,MAAM;MACVI,KAAK,GAAGR,OAAO,CAACC,UAAD,CAAf;IACD,CAFI,CAAL;IAIAI,IAAI,CAAC,yBAAD,EAA4B,MAAM;MACpCN,MAAM,CAACU,UAAP,CAAkBD,KAAK,CAACE,MAAxB;IACD,CAFG,CAAJ;IAIAL,IAAI,CAAC,4BAAD,EAA+B,MAAM;MACvCN,MAAM,CAACY,QAAP,CAAgBC,MAAM,CAACC,IAAP,CAAYL,KAAZ,CAAhB,EAAoC,CAApC;IACD,CAFG,CAAJ;IAIAH,IAAI,CAAC,+BAAD,EAAkC,MAAM;MAC1CN,MAAM,CAACY,QAAP,CAAgBH,KAAK,CAACE,MAAtB,EAA8B,CAA9B;IACD,CAFG,CAAJ;IAIAL,IAAI,CAAC,uBAAD,EAA0B,MAAM;MAClCN,MAAM,CAACO,YAAP,CAAoB,MAAM;QACxBE,KAAK,CAACE,MAAN;MACD,CAFD;IAGD,CAJG,CAAJ;IAMAL,IAAI,CAAC,sBAAD,EAAyB,MAAM;MACjCN,MAAM,CAACe,UAAP,CAAkBN,KAAK,CAACE,MAAN,EAAlB,EAAkCK,KAAlC;IACD,CAFG,CAAJ;IAIAb,KAAK,CAAC,SAAD,EAAY,MAAM;MACrB,IAAIc,OAAJ;MAEAZ,KAAK,CAAC,MAAM;QACVY,OAAO,GAAGR,KAAK,CAACE,MAAN,CAAa,KAAb,EAAoB,KAApB,EAA2B,KAA3B,EAAkC,KAAlC,CAAV;MACD,CAFI,CAAL;MAIAL,IAAI,CAAC,qCAAD,EAAwC,MAAM;QAChDN,MAAM,CAACkB,WAAP,CAAmBD,OAAO,CAACE,MAA3B,EAAmC,KAAnC;MACD,CAFG,CAAJ;MAIAb,IAAI,CAAC,uCAAD,EAA0C,MAAM;QAClDN,MAAM,CAACkB,WAAP,CAAmBD,OAAO,CAACG,QAA3B,EAAqC,KAArC;MACD,CAFG,CAAJ;MAIAd,IAAI,CAAC,yCAAD,EAA4C,MAAM;QACpDN,MAAM,CAACkB,WAAP,CAAmBD,OAAO,CAACI,UAA3B,EAAuC,KAAvC;MACD,CAFG,CAAJ;MAIAf,IAAI,CAAC,2CAAD,EAA8C,MAAM;QACtDN,MAAM,CAACkB,WAAP,CAAmBD,OAAO,CAACK,YAA3B,EAAyC,KAAzC;MACD,CAFG,CAAJ;MAIAhB,IAAI,CAAC,sCAAD,EAAyC,MAAM;QACjDN,MAAM,CAACkB,WAAP,CAAmBD,OAAO,CAACM,OAA3B,EAAoC,iFAApC;MACD,CAFG,CAAJ;IAGD,CA1BI,CAAL;EA2BD,CAxDI,CAAL;AAyDD,CA1EI,CAAL"},"metadata":{},"sourceType":"script"}