{"ast":null,"code":"/**\n * @fileoverview Rule to flag blocks with no reason to exist\n * @author Brandon Mills\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow unnecessary nested blocks\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-lone-blocks\"\n    },\n    schema: [],\n    messages: {\n      redundantBlock: \"Block is redundant.\",\n      redundantNestedBlock: \"Nested block is redundant.\"\n    }\n  },\n\n  create(context) {\n    // A stack of lone blocks to be checked for block-level bindings\n    const loneBlocks = [];\n    let ruleDef;\n    /**\n     * Reports a node as invalid.\n     * @param {ASTNode} node The node to be reported.\n     * @returns {void}\n     */\n\n    function report(node) {\n      const messageId = node.parent.type === \"BlockStatement\" || node.parent.type === \"StaticBlock\" ? \"redundantNestedBlock\" : \"redundantBlock\";\n      context.report({\n        node,\n        messageId\n      });\n    }\n    /**\n     * Checks for any occurrence of a BlockStatement in a place where lists of statements can appear\n     * @param {ASTNode} node The node to check\n     * @returns {boolean} True if the node is a lone block.\n     */\n\n\n    function isLoneBlock(node) {\n      return node.parent.type === \"BlockStatement\" || node.parent.type === \"StaticBlock\" || node.parent.type === \"Program\" || // Don't report blocks in switch cases if the block is the only statement of the case.\n      node.parent.type === \"SwitchCase\" && !(node.parent.consequent[0] === node && node.parent.consequent.length === 1);\n    }\n    /**\n     * Checks the enclosing block of the current node for block-level bindings,\n     * and \"marks it\" as valid if any.\n     * @returns {void}\n     */\n\n\n    function markLoneBlock() {\n      if (loneBlocks.length === 0) {\n        return;\n      }\n\n      const block = context.getAncestors().pop();\n\n      if (loneBlocks[loneBlocks.length - 1] === block) {\n        loneBlocks.pop();\n      }\n    } // Default rule definition: report all lone blocks\n\n\n    ruleDef = {\n      BlockStatement(node) {\n        if (isLoneBlock(node)) {\n          report(node);\n        }\n      }\n\n    }; // ES6: report blocks without block-level bindings, or that's only child of another block\n\n    if (context.languageOptions.ecmaVersion >= 2015) {\n      ruleDef = {\n        BlockStatement(node) {\n          if (isLoneBlock(node)) {\n            loneBlocks.push(node);\n          }\n        },\n\n        \"BlockStatement:exit\"(node) {\n          if (loneBlocks.length > 0 && loneBlocks[loneBlocks.length - 1] === node) {\n            loneBlocks.pop();\n            report(node);\n          } else if ((node.parent.type === \"BlockStatement\" || node.parent.type === \"StaticBlock\") && node.parent.body.length === 1) {\n            report(node);\n          }\n        }\n\n      };\n\n      ruleDef.VariableDeclaration = function (node) {\n        if (node.kind === \"let\" || node.kind === \"const\") {\n          markLoneBlock();\n        }\n      };\n\n      ruleDef.FunctionDeclaration = function () {\n        if (context.getScope().isStrict) {\n          markLoneBlock();\n        }\n      };\n\n      ruleDef.ClassDeclaration = markLoneBlock;\n    }\n\n    return ruleDef;\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","redundantBlock","redundantNestedBlock","create","context","loneBlocks","ruleDef","report","node","messageId","parent","isLoneBlock","consequent","length","markLoneBlock","block","getAncestors","pop","BlockStatement","languageOptions","ecmaVersion","push","body","VariableDeclaration","kind","FunctionDeclaration","getScope","isStrict","ClassDeclaration"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-lone-blocks.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag blocks with no reason to exist\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow unnecessary nested blocks\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-lone-blocks\"\n        },\n\n        schema: [],\n\n        messages: {\n            redundantBlock: \"Block is redundant.\",\n            redundantNestedBlock: \"Nested block is redundant.\"\n        }\n    },\n\n    create(context) {\n\n        // A stack of lone blocks to be checked for block-level bindings\n        const loneBlocks = [];\n        let ruleDef;\n\n        /**\n         * Reports a node as invalid.\n         * @param {ASTNode} node The node to be reported.\n         * @returns {void}\n         */\n        function report(node) {\n            const messageId = node.parent.type === \"BlockStatement\" || node.parent.type === \"StaticBlock\"\n                ? \"redundantNestedBlock\"\n                : \"redundantBlock\";\n\n            context.report({\n                node,\n                messageId\n            });\n        }\n\n        /**\n         * Checks for any occurrence of a BlockStatement in a place where lists of statements can appear\n         * @param {ASTNode} node The node to check\n         * @returns {boolean} True if the node is a lone block.\n         */\n        function isLoneBlock(node) {\n            return node.parent.type === \"BlockStatement\" ||\n                node.parent.type === \"StaticBlock\" ||\n                node.parent.type === \"Program\" ||\n\n                // Don't report blocks in switch cases if the block is the only statement of the case.\n                node.parent.type === \"SwitchCase\" && !(node.parent.consequent[0] === node && node.parent.consequent.length === 1);\n        }\n\n        /**\n         * Checks the enclosing block of the current node for block-level bindings,\n         * and \"marks it\" as valid if any.\n         * @returns {void}\n         */\n        function markLoneBlock() {\n            if (loneBlocks.length === 0) {\n                return;\n            }\n\n            const block = context.getAncestors().pop();\n\n            if (loneBlocks[loneBlocks.length - 1] === block) {\n                loneBlocks.pop();\n            }\n        }\n\n        // Default rule definition: report all lone blocks\n        ruleDef = {\n            BlockStatement(node) {\n                if (isLoneBlock(node)) {\n                    report(node);\n                }\n            }\n        };\n\n        // ES6: report blocks without block-level bindings, or that's only child of another block\n        if (context.languageOptions.ecmaVersion >= 2015) {\n            ruleDef = {\n                BlockStatement(node) {\n                    if (isLoneBlock(node)) {\n                        loneBlocks.push(node);\n                    }\n                },\n                \"BlockStatement:exit\"(node) {\n                    if (loneBlocks.length > 0 && loneBlocks[loneBlocks.length - 1] === node) {\n                        loneBlocks.pop();\n                        report(node);\n                    } else if (\n                        (\n                            node.parent.type === \"BlockStatement\" ||\n                            node.parent.type === \"StaticBlock\"\n                        ) &&\n                        node.parent.body.length === 1\n                    ) {\n                        report(node);\n                    }\n                }\n            };\n\n            ruleDef.VariableDeclaration = function(node) {\n                if (node.kind === \"let\" || node.kind === \"const\") {\n                    markLoneBlock();\n                }\n            };\n\n            ruleDef.FunctionDeclaration = function() {\n                if (context.getScope().isStrict) {\n                    markLoneBlock();\n                }\n            };\n\n            ruleDef.ClassDeclaration = markLoneBlock;\n        }\n\n        return ruleDef;\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,oCADX;MAEFC,WAAW,EAAE,KAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAWFC,QAAQ,EAAE;MACNC,cAAc,EAAE,qBADV;MAENC,oBAAoB,EAAE;IAFhB;EAXR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;IACA,MAAMC,UAAU,GAAG,EAAnB;IACA,IAAIC,OAAJ;IAEA;AACR;AACA;AACA;AACA;;IACQ,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;MAClB,MAAMC,SAAS,GAAGD,IAAI,CAACE,MAAL,CAAYhB,IAAZ,KAAqB,gBAArB,IAAyCc,IAAI,CAACE,MAAL,CAAYhB,IAAZ,KAAqB,aAA9D,GACZ,sBADY,GAEZ,gBAFN;MAIAU,OAAO,CAACG,MAAR,CAAe;QACXC,IADW;QAEXC;MAFW,CAAf;IAIH;IAED;AACR;AACA;AACA;AACA;;;IACQ,SAASE,WAAT,CAAqBH,IAArB,EAA2B;MACvB,OAAOA,IAAI,CAACE,MAAL,CAAYhB,IAAZ,KAAqB,gBAArB,IACHc,IAAI,CAACE,MAAL,CAAYhB,IAAZ,KAAqB,aADlB,IAEHc,IAAI,CAACE,MAAL,CAAYhB,IAAZ,KAAqB,SAFlB,IAIH;MACAc,IAAI,CAACE,MAAL,CAAYhB,IAAZ,KAAqB,YAArB,IAAqC,EAAEc,IAAI,CAACE,MAAL,CAAYE,UAAZ,CAAuB,CAAvB,MAA8BJ,IAA9B,IAAsCA,IAAI,CAACE,MAAL,CAAYE,UAAZ,CAAuBC,MAAvB,KAAkC,CAA1E,CALzC;IAMH;IAED;AACR;AACA;AACA;AACA;;;IACQ,SAASC,aAAT,GAAyB;MACrB,IAAIT,UAAU,CAACQ,MAAX,KAAsB,CAA1B,EAA6B;QACzB;MACH;;MAED,MAAME,KAAK,GAAGX,OAAO,CAACY,YAAR,GAAuBC,GAAvB,EAAd;;MAEA,IAAIZ,UAAU,CAACA,UAAU,CAACQ,MAAX,GAAoB,CAArB,CAAV,KAAsCE,KAA1C,EAAiD;QAC7CV,UAAU,CAACY,GAAX;MACH;IACJ,CAnDW,CAqDZ;;;IACAX,OAAO,GAAG;MACNY,cAAc,CAACV,IAAD,EAAO;QACjB,IAAIG,WAAW,CAACH,IAAD,CAAf,EAAuB;UACnBD,MAAM,CAACC,IAAD,CAAN;QACH;MACJ;;IALK,CAAV,CAtDY,CA8DZ;;IACA,IAAIJ,OAAO,CAACe,eAAR,CAAwBC,WAAxB,IAAuC,IAA3C,EAAiD;MAC7Cd,OAAO,GAAG;QACNY,cAAc,CAACV,IAAD,EAAO;UACjB,IAAIG,WAAW,CAACH,IAAD,CAAf,EAAuB;YACnBH,UAAU,CAACgB,IAAX,CAAgBb,IAAhB;UACH;QACJ,CALK;;QAMN,sBAAsBA,IAAtB,EAA4B;UACxB,IAAIH,UAAU,CAACQ,MAAX,GAAoB,CAApB,IAAyBR,UAAU,CAACA,UAAU,CAACQ,MAAX,GAAoB,CAArB,CAAV,KAAsCL,IAAnE,EAAyE;YACrEH,UAAU,CAACY,GAAX;YACAV,MAAM,CAACC,IAAD,CAAN;UACH,CAHD,MAGO,IACH,CACIA,IAAI,CAACE,MAAL,CAAYhB,IAAZ,KAAqB,gBAArB,IACAc,IAAI,CAACE,MAAL,CAAYhB,IAAZ,KAAqB,aAFzB,KAIAc,IAAI,CAACE,MAAL,CAAYY,IAAZ,CAAiBT,MAAjB,KAA4B,CALzB,EAML;YACEN,MAAM,CAACC,IAAD,CAAN;UACH;QACJ;;MAnBK,CAAV;;MAsBAF,OAAO,CAACiB,mBAAR,GAA8B,UAASf,IAAT,EAAe;QACzC,IAAIA,IAAI,CAACgB,IAAL,KAAc,KAAd,IAAuBhB,IAAI,CAACgB,IAAL,KAAc,OAAzC,EAAkD;UAC9CV,aAAa;QAChB;MACJ,CAJD;;MAMAR,OAAO,CAACmB,mBAAR,GAA8B,YAAW;QACrC,IAAIrB,OAAO,CAACsB,QAAR,GAAmBC,QAAvB,EAAiC;UAC7Bb,aAAa;QAChB;MACJ,CAJD;;MAMAR,OAAO,CAACsB,gBAAR,GAA2Bd,aAA3B;IACH;;IAED,OAAOR,OAAP;EACH;;AAxHY,CAAjB"},"metadata":{},"sourceType":"script"}