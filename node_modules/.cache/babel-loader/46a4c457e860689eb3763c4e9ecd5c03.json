{"ast":null,"code":"'use strict';\n\nconst assert = require('chai').assert;\n\nconst spooks = require('spooks');\n\nconst modulePath = '../../src/datastream';\nsuite('datastream:', () => {\n  let log;\n  setup(() => {\n    log = {};\n  });\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath);\n    });\n  });\n  test('require returns function', () => {\n    assert.isFunction(require(modulePath));\n  });\n  suite('require:', () => {\n    let Stream;\n    setup(() => {\n      Stream = require(modulePath);\n    });\n    test('Stream expects two arguments', () => {\n      assert.lengthOf(Stream, 2);\n    });\n    test('calling Stream with function argument doesNotThrow', () => {\n      assert.doesNotThrow(() => {\n        Stream(() => {});\n      });\n    });\n    test('calling Stream with object argument throws', () => {\n      assert.throws(() => {\n        Stream({\n          read: () => {}\n        });\n      });\n    });\n    test('calling Stream with new returns Stream instance', () => {\n      assert.instanceOf(new Stream(() => {}), Stream);\n    });\n    test('calling Stream with new returns Readable instance', () => {\n      assert.instanceOf(new Stream(() => {}), require('stream').Readable);\n    });\n    test('calling Stream without new returns Stream instance', () => {\n      assert.instanceOf(Stream(() => {}), Stream);\n    });\n    suite('instantiate:', () => {\n      let datastream;\n      setup(() => {\n        datastream = new Stream(spooks.fn({\n          name: 'read',\n          log: log\n        }));\n      });\n      test('datastream has _read method', () => {\n        assert.isFunction(datastream._read);\n      });\n      test('_read expects no arguments', () => {\n        assert.lengthOf(datastream._read, 0);\n      });\n      test('read was not called', () => {\n        assert.strictEqual(log.counts.read, 0);\n      });\n      suite('datastream._read:', () => {\n        setup(() => {\n          datastream._read();\n        });\n        test('read was called once', () => {\n          assert.strictEqual(log.counts.read, 1);\n          assert.isUndefined(log.these.read[0]);\n        });\n        test('read was called correctly', () => {\n          assert.lengthOf(log.args.read[0], 0);\n        });\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","spooks","modulePath","suite","log","setup","test","doesNotThrow","isFunction","Stream","lengthOf","throws","read","instanceOf","Readable","datastream","fn","name","_read","strictEqual","counts","isUndefined","these","args"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/bfj/test/unit/datastream.js"],"sourcesContent":["'use strict'\n\nconst assert = require('chai').assert\nconst spooks = require('spooks')\n\nconst modulePath = '../../src/datastream'\n\nsuite('datastream:', () => {\n  let log\n\n  setup(() => {\n    log = {}\n  })\n\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath)\n    })\n  })\n\n  test('require returns function', () => {\n    assert.isFunction(require(modulePath))\n  })\n\n  suite('require:', () => {\n    let Stream\n\n    setup(() => {\n      Stream = require(modulePath)\n    })\n\n    test('Stream expects two arguments', () => {\n      assert.lengthOf(Stream, 2)\n    })\n\n    test('calling Stream with function argument doesNotThrow', () => {\n      assert.doesNotThrow(() => {\n        Stream(() => {})\n      })\n    })\n\n    test('calling Stream with object argument throws', () => {\n      assert.throws(() => {\n        Stream({ read: () => {} })\n      })\n    })\n\n    test('calling Stream with new returns Stream instance', () => {\n      assert.instanceOf(new Stream(() => {}), Stream)\n    })\n\n    test('calling Stream with new returns Readable instance', () => {\n      assert.instanceOf(new Stream(() => {}), require('stream').Readable)\n    })\n\n    test('calling Stream without new returns Stream instance', () => {\n      assert.instanceOf(Stream(() => {}), Stream)\n    })\n\n    suite('instantiate:', () => {\n      let datastream\n\n      setup(() => {\n        datastream = new Stream(spooks.fn({ name: 'read', log: log }))\n      })\n\n      test('datastream has _read method', () => {\n        assert.isFunction(datastream._read)\n      })\n\n      test('_read expects no arguments', () => {\n        assert.lengthOf(datastream._read, 0)\n      })\n\n      test('read was not called', () => {\n        assert.strictEqual(log.counts.read, 0)\n      })\n\n      suite('datastream._read:', () => {\n        setup(() => {\n          datastream._read()\n        })\n\n        test('read was called once', () => {\n          assert.strictEqual(log.counts.read, 1)\n          assert.isUndefined(log.these.read[0])\n        })\n\n        test('read was called correctly', () => {\n          assert.lengthOf(log.args.read[0], 0)\n        })\n      })\n    })\n  })\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}