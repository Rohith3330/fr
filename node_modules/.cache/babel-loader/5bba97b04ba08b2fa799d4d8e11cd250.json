{"ast":null,"code":"'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst browserslist = require('browserslist');\n\nconst convert = require('./lib/convert.js');\n\nconst LENGTH_UNITS = new Set(['em', 'ex', 'ch', 'rem', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm', 'q', 'in', 'pt', 'pc', 'px']); // These properties only accept percentages, so no point in trying to transform\n\nconst notALength = new Set(['descent-override', 'ascent-override', 'font-stretch', 'size-adjust', 'line-gap-override']); // Can't change the unit on these properties when they're 0\n\nconst keepWhenZero = new Set(['stroke-dashoffset', 'stroke-width', 'line-height']); // Can't remove the % on these properties when they're 0 on IE 11\n\nconst keepZeroPercent = new Set(['max-height', 'height', 'min-width']);\n/**\n * Numbers without digits after the dot are technically invalid,\n * but in that case css-value-parser returns the dot as part of the unit,\n * so we use this to remove the dot.\n *\n * @param {string} item\n * @return {string}\n */\n\nfunction stripLeadingDot(item) {\n  if (item.charCodeAt(0) === '.'.charCodeAt(0)) {\n    return item.slice(1);\n  } else {\n    return item;\n  }\n}\n/**\n * @param {valueParser.Node} node\n * @param {Options} opts\n * @param {boolean} keepZeroUnit\n * @return {void}\n */\n\n\nfunction parseWord(node, opts, keepZeroUnit) {\n  const pair = valueParser.unit(node.value);\n\n  if (pair) {\n    const num = Number(pair.number);\n    const u = stripLeadingDot(pair.unit);\n\n    if (num === 0) {\n      node.value = 0 + (keepZeroUnit || !LENGTH_UNITS.has(u.toLowerCase()) && u !== '%' ? u : '');\n    } else {\n      node.value = convert(num, u, opts);\n\n      if (typeof opts.precision === 'number' && u.toLowerCase() === 'px' && pair.number.includes('.')) {\n        const precision = Math.pow(10, opts.precision);\n        node.value = Math.round(parseFloat(node.value) * precision) / precision + u;\n      }\n    }\n  }\n}\n/**\n * @param {valueParser.WordNode} node\n * @return {void}\n */\n\n\nfunction clampOpacity(node) {\n  const pair = valueParser.unit(node.value);\n\n  if (!pair) {\n    return;\n  }\n\n  let num = Number(pair.number);\n\n  if (num > 1) {\n    node.value = pair.unit === '%' ? num + pair.unit : 1 + pair.unit;\n  } else if (num < 0) {\n    node.value = 0 + pair.unit;\n  }\n}\n/**\n * @param {import('postcss').Declaration} decl\n * @param {string[]} browsers\n * @return {boolean}\n */\n\n\nfunction shouldKeepZeroUnit(decl, browsers) {\n  const {\n    parent\n  } = decl;\n  const lowerCasedProp = decl.prop.toLowerCase();\n  return decl.value.includes('%') && keepZeroPercent.has(lowerCasedProp) && browsers.includes('ie 11') || parent && parent.parent && parent.parent.type === 'atrule' &&\n  /** @type {import('postcss').AtRule} */\n  parent.parent.name.toLowerCase() === 'keyframes' && lowerCasedProp === 'stroke-dasharray' || keepWhenZero.has(lowerCasedProp);\n}\n/**\n * @param {Options} opts\n * @param {string[]} browsers\n * @param {import('postcss').Declaration} decl\n * @return {void}\n */\n\n\nfunction transform(opts, browsers, decl) {\n  const lowerCasedProp = decl.prop.toLowerCase();\n\n  if (lowerCasedProp.includes('flex') || lowerCasedProp.indexOf('--') === 0 || notALength.has(lowerCasedProp)) {\n    return;\n  }\n\n  decl.value = valueParser(decl.value).walk(node => {\n    const lowerCasedValue = node.value.toLowerCase();\n\n    if (node.type === 'word') {\n      parseWord(node, opts, shouldKeepZeroUnit(decl, browsers));\n\n      if (lowerCasedProp === 'opacity' || lowerCasedProp === 'shape-image-threshold') {\n        clampOpacity(node);\n      }\n    } else if (node.type === 'function') {\n      if (lowerCasedValue === 'calc' || lowerCasedValue === 'min' || lowerCasedValue === 'max' || lowerCasedValue === 'clamp' || lowerCasedValue === 'hsl' || lowerCasedValue === 'hsla') {\n        valueParser.walk(node.nodes, n => {\n          if (n.type === 'word') {\n            parseWord(n, opts, true);\n          }\n        });\n        return false;\n      }\n\n      if (lowerCasedValue === 'url') {\n        return false;\n      }\n    }\n  }).toString();\n}\n\nconst plugin = 'postcss-convert-values';\n/**\n * @typedef {{precision: boolean | number, angle?: boolean, time?: boolean, length?: boolean} & browserslist.Options} Options */\n\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options} opts\n * @return {import('postcss').Plugin}\n */\n\nfunction pluginCreator() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    precision: false\n  };\n  const browsers = browserslist(null, {\n    stats: opts.stats,\n    path: __dirname,\n    env: opts.env\n  });\n  return {\n    postcssPlugin: plugin,\n\n    OnceExit(css) {\n      css.walkDecls(decl => transform(opts, browsers, decl));\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"names":["valueParser","require","browserslist","convert","LENGTH_UNITS","Set","notALength","keepWhenZero","keepZeroPercent","stripLeadingDot","item","charCodeAt","slice","parseWord","node","opts","keepZeroUnit","pair","unit","value","num","Number","number","u","has","toLowerCase","precision","includes","Math","pow","round","parseFloat","clampOpacity","shouldKeepZeroUnit","decl","browsers","parent","lowerCasedProp","prop","type","name","transform","indexOf","walk","lowerCasedValue","nodes","n","toString","plugin","pluginCreator","stats","path","__dirname","env","postcssPlugin","OnceExit","css","walkDecls","postcss","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-convert-values/src/index.js"],"sourcesContent":["'use strict';\nconst valueParser = require('postcss-value-parser');\nconst browserslist = require('browserslist');\nconst convert = require('./lib/convert.js');\n\nconst LENGTH_UNITS = new Set([\n  'em',\n  'ex',\n  'ch',\n  'rem',\n  'vw',\n  'vh',\n  'vmin',\n  'vmax',\n  'cm',\n  'mm',\n  'q',\n  'in',\n  'pt',\n  'pc',\n  'px',\n]);\n\n// These properties only accept percentages, so no point in trying to transform\nconst notALength = new Set([\n  'descent-override',\n  'ascent-override',\n  'font-stretch',\n  'size-adjust',\n  'line-gap-override',\n]);\n\n// Can't change the unit on these properties when they're 0\nconst keepWhenZero = new Set([\n  'stroke-dashoffset',\n  'stroke-width',\n  'line-height',\n]);\n\n// Can't remove the % on these properties when they're 0 on IE 11\nconst keepZeroPercent = new Set(['max-height', 'height', 'min-width']);\n\n/**\n * Numbers without digits after the dot are technically invalid,\n * but in that case css-value-parser returns the dot as part of the unit,\n * so we use this to remove the dot.\n *\n * @param {string} item\n * @return {string}\n */\nfunction stripLeadingDot(item) {\n  if (item.charCodeAt(0) === '.'.charCodeAt(0)) {\n    return item.slice(1);\n  } else {\n    return item;\n  }\n}\n\n/**\n * @param {valueParser.Node} node\n * @param {Options} opts\n * @param {boolean} keepZeroUnit\n * @return {void}\n */\nfunction parseWord(node, opts, keepZeroUnit) {\n  const pair = valueParser.unit(node.value);\n  if (pair) {\n    const num = Number(pair.number);\n    const u = stripLeadingDot(pair.unit);\n    if (num === 0) {\n      node.value =\n        0 +\n        (keepZeroUnit || (!LENGTH_UNITS.has(u.toLowerCase()) && u !== '%')\n          ? u\n          : '');\n    } else {\n      node.value = convert(num, u, opts);\n\n      if (\n        typeof opts.precision === 'number' &&\n        u.toLowerCase() === 'px' &&\n        pair.number.includes('.')\n      ) {\n        const precision = Math.pow(10, opts.precision);\n        node.value =\n          Math.round(parseFloat(node.value) * precision) / precision + u;\n      }\n    }\n  }\n}\n\n/**\n * @param {valueParser.WordNode} node\n * @return {void}\n */\nfunction clampOpacity(node) {\n  const pair = valueParser.unit(node.value);\n  if (!pair) {\n    return;\n  }\n  let num = Number(pair.number);\n  if (num > 1) {\n    node.value = pair.unit === '%' ? num + pair.unit : 1 + pair.unit;\n  } else if (num < 0) {\n    node.value = 0 + pair.unit;\n  }\n}\n\n/**\n * @param {import('postcss').Declaration} decl\n * @param {string[]} browsers\n * @return {boolean}\n */\nfunction shouldKeepZeroUnit(decl, browsers) {\n  const { parent } = decl;\n  const lowerCasedProp = decl.prop.toLowerCase();\n  return (\n    (decl.value.includes('%') &&\n      keepZeroPercent.has(lowerCasedProp) &&\n      browsers.includes('ie 11')) ||\n    (parent &&\n      parent.parent &&\n      parent.parent.type === 'atrule' &&\n      /** @type {import('postcss').AtRule} */ (\n        parent.parent\n      ).name.toLowerCase() === 'keyframes' &&\n      lowerCasedProp === 'stroke-dasharray') ||\n    keepWhenZero.has(lowerCasedProp)\n  );\n}\n/**\n * @param {Options} opts\n * @param {string[]} browsers\n * @param {import('postcss').Declaration} decl\n * @return {void}\n */\nfunction transform(opts, browsers, decl) {\n  const lowerCasedProp = decl.prop.toLowerCase();\n  if (\n    lowerCasedProp.includes('flex') ||\n    lowerCasedProp.indexOf('--') === 0 ||\n    notALength.has(lowerCasedProp)\n  ) {\n    return;\n  }\n\n  decl.value = valueParser(decl.value)\n    .walk((node) => {\n      const lowerCasedValue = node.value.toLowerCase();\n\n      if (node.type === 'word') {\n        parseWord(node, opts, shouldKeepZeroUnit(decl, browsers));\n        if (\n          lowerCasedProp === 'opacity' ||\n          lowerCasedProp === 'shape-image-threshold'\n        ) {\n          clampOpacity(node);\n        }\n      } else if (node.type === 'function') {\n        if (\n          lowerCasedValue === 'calc' ||\n          lowerCasedValue === 'min' ||\n          lowerCasedValue === 'max' ||\n          lowerCasedValue === 'clamp' ||\n          lowerCasedValue === 'hsl' ||\n          lowerCasedValue === 'hsla'\n        ) {\n          valueParser.walk(node.nodes, (n) => {\n            if (n.type === 'word') {\n              parseWord(n, opts, true);\n            }\n          });\n          return false;\n        }\n        if (lowerCasedValue === 'url') {\n          return false;\n        }\n      }\n    })\n    .toString();\n}\n\nconst plugin = 'postcss-convert-values';\n/**\n * @typedef {{precision: boolean | number, angle?: boolean, time?: boolean, length?: boolean} & browserslist.Options} Options */\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options} opts\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator(opts = { precision: false }) {\n  const browsers = browserslist(null, {\n    stats: opts.stats,\n    path: __dirname,\n    env: opts.env,\n  });\n\n  return {\n    postcssPlugin: plugin,\n    OnceExit(css) {\n      css.walkDecls((decl) => transform(opts, browsers, decl));\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}