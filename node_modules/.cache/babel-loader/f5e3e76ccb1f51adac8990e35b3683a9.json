{"ast":null,"code":"/**\n * @fileoverview Enforce boolean attributes notation in JSX\n * @author Yannick Croissant\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst exceptionsSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n    minLength: 1\n  },\n  uniqueItems: true\n};\nconst ALWAYS = 'always';\nconst NEVER = 'never';\nconst errorData = new WeakMap();\n/**\n * @param {object} exceptions\n * @returns {object}\n */\n\nfunction getErrorData(exceptions) {\n  if (!errorData.has(exceptions)) {\n    const exceptionProps = Array.from(exceptions, name => `\\`${name}\\``).join(', ');\n    const exceptionsMessage = exceptions.size > 0 ? ` for the following props: ${exceptionProps}` : '';\n    errorData.set(exceptions, {\n      exceptionsMessage\n    });\n  }\n\n  return errorData.get(exceptions);\n}\n/**\n * @param {string} configuration\n * @param {Set<string>} exceptions\n * @param {string} propName\n * @returns {boolean} propName\n*/\n\n\nfunction isAlways(configuration, exceptions, propName) {\n  const isException = exceptions.has(propName);\n\n  if (configuration === ALWAYS) {\n    return !isException;\n  }\n\n  return isException;\n}\n/**\n * @param {string} configuration\n * @param {Set<string>} exceptions\n * @param {string} propName\n * @returns {boolean} propName\n */\n\n\nfunction isNever(configuration, exceptions, propName) {\n  const isException = exceptions.has(propName);\n\n  if (configuration === NEVER) {\n    return !isException;\n  }\n\n  return isException;\n}\n\nconst messages = {\n  omitBoolean: 'Value must be omitted for boolean attributes{{exceptionsMessage}}',\n  omitBoolean_noMessage: 'Value must be omitted for boolean attributes',\n  setBoolean: 'Value must be set for boolean attributes{{exceptionsMessage}}',\n  setBoolean_noMessage: 'Value must be set for boolean attributes'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce boolean attributes notation in JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-boolean-value')\n    },\n    fixable: 'code',\n    messages,\n    schema: {\n      anyOf: [{\n        type: 'array',\n        items: [{\n          enum: [ALWAYS, NEVER]\n        }],\n        additionalItems: false\n      }, {\n        type: 'array',\n        items: [{\n          enum: [ALWAYS]\n        }, {\n          type: 'object',\n          additionalProperties: false,\n          properties: {\n            [NEVER]: exceptionsSchema\n          }\n        }],\n        additionalItems: false\n      }, {\n        type: 'array',\n        items: [{\n          enum: [NEVER]\n        }, {\n          type: 'object',\n          additionalProperties: false,\n          properties: {\n            [ALWAYS]: exceptionsSchema\n          }\n        }],\n        additionalItems: false\n      }]\n    }\n  },\n\n  create(context) {\n    const configuration = context.options[0] || NEVER;\n    const configObject = context.options[1] || {};\n    const exceptions = new Set((configuration === ALWAYS ? configObject[NEVER] : configObject[ALWAYS]) || []);\n    return {\n      JSXAttribute(node) {\n        const propName = node.name && node.name.name;\n        const value = node.value;\n\n        if (isAlways(configuration, exceptions, propName) && value === null) {\n          const data = getErrorData(exceptions);\n          const messageId = data.exceptionsMessage ? 'setBoolean' : 'setBoolean_noMessage';\n          report(context, messages[messageId], messageId, {\n            node,\n            data,\n\n            fix(fixer) {\n              return fixer.insertTextAfter(node, '={true}');\n            }\n\n          });\n        }\n\n        if (isNever(configuration, exceptions, propName) && value && value.type === 'JSXExpressionContainer' && value.expression.value === true) {\n          const data = getErrorData(exceptions);\n          const messageId = data.exceptionsMessage ? 'omitBoolean' : 'omitBoolean_noMessage';\n          report(context, messages[messageId], messageId, {\n            node,\n            data,\n\n            fix(fixer) {\n              return fixer.removeRange([node.name.range[1], value.range[1]]);\n            }\n\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","report","exceptionsSchema","type","items","minLength","uniqueItems","ALWAYS","NEVER","errorData","WeakMap","getErrorData","exceptions","has","exceptionProps","Array","from","name","join","exceptionsMessage","size","set","get","isAlways","configuration","propName","isException","isNever","messages","omitBoolean","omitBoolean_noMessage","setBoolean","setBoolean_noMessage","module","exports","meta","docs","description","category","recommended","url","fixable","schema","anyOf","enum","additionalItems","additionalProperties","properties","create","context","options","configObject","Set","JSXAttribute","node","value","data","messageId","fix","fixer","insertTextAfter","expression","removeRange","range"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-boolean-value.js"],"sourcesContent":["/**\n * @fileoverview Enforce boolean attributes notation in JSX\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst exceptionsSchema = {\n  type: 'array',\n  items: { type: 'string', minLength: 1 },\n  uniqueItems: true,\n};\n\nconst ALWAYS = 'always';\nconst NEVER = 'never';\n\nconst errorData = new WeakMap();\n/**\n * @param {object} exceptions\n * @returns {object}\n */\nfunction getErrorData(exceptions) {\n  if (!errorData.has(exceptions)) {\n    const exceptionProps = Array.from(exceptions, (name) => `\\`${name}\\``).join(', ');\n    const exceptionsMessage = exceptions.size > 0 ? ` for the following props: ${exceptionProps}` : '';\n    errorData.set(exceptions, { exceptionsMessage });\n  }\n  return errorData.get(exceptions);\n}\n/**\n * @param {string} configuration\n * @param {Set<string>} exceptions\n * @param {string} propName\n * @returns {boolean} propName\n*/\nfunction isAlways(configuration, exceptions, propName) {\n  const isException = exceptions.has(propName);\n  if (configuration === ALWAYS) {\n    return !isException;\n  }\n  return isException;\n}\n/**\n * @param {string} configuration\n * @param {Set<string>} exceptions\n * @param {string} propName\n * @returns {boolean} propName\n */\nfunction isNever(configuration, exceptions, propName) {\n  const isException = exceptions.has(propName);\n  if (configuration === NEVER) {\n    return !isException;\n  }\n  return isException;\n}\n\nconst messages = {\n  omitBoolean: 'Value must be omitted for boolean attributes{{exceptionsMessage}}',\n  omitBoolean_noMessage: 'Value must be omitted for boolean attributes',\n  setBoolean: 'Value must be set for boolean attributes{{exceptionsMessage}}',\n  setBoolean_noMessage: 'Value must be set for boolean attributes',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce boolean attributes notation in JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-boolean-value'),\n    },\n    fixable: 'code',\n\n    messages,\n\n    schema: {\n      anyOf: [{\n        type: 'array',\n        items: [{ enum: [ALWAYS, NEVER] }],\n        additionalItems: false,\n      }, {\n        type: 'array',\n        items: [{\n          enum: [ALWAYS],\n        }, {\n          type: 'object',\n          additionalProperties: false,\n          properties: {\n            [NEVER]: exceptionsSchema,\n          },\n        }],\n        additionalItems: false,\n      }, {\n        type: 'array',\n        items: [{\n          enum: [NEVER],\n        }, {\n          type: 'object',\n          additionalProperties: false,\n          properties: {\n            [ALWAYS]: exceptionsSchema,\n          },\n        }],\n        additionalItems: false,\n      }],\n    },\n  },\n\n  create(context) {\n    const configuration = context.options[0] || NEVER;\n    const configObject = context.options[1] || {};\n    const exceptions = new Set((configuration === ALWAYS ? configObject[NEVER] : configObject[ALWAYS]) || []);\n\n    return {\n      JSXAttribute(node) {\n        const propName = node.name && node.name.name;\n        const value = node.value;\n\n        if (\n          isAlways(configuration, exceptions, propName)\n          && value === null\n        ) {\n          const data = getErrorData(exceptions);\n          const messageId = data.exceptionsMessage ? 'setBoolean' : 'setBoolean_noMessage';\n          report(context, messages[messageId], messageId, {\n            node,\n            data,\n            fix(fixer) {\n              return fixer.insertTextAfter(node, '={true}');\n            },\n          });\n        }\n        if (\n          isNever(configuration, exceptions, propName)\n          && value\n          && value.type === 'JSXExpressionContainer'\n          && value.expression.value === true\n        ) {\n          const data = getErrorData(exceptions);\n          const messageId = data.exceptionsMessage ? 'omitBoolean' : 'omitBoolean_noMessage';\n          report(context, messages[messageId], messageId, {\n            node,\n            data,\n            fix(fixer) {\n              return fixer.removeRange([node.name.range[1], value.range[1]]);\n            },\n          });\n        }\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}