{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TYPE_KEYWORDS = void 0;\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nfunction removeSpaces(str) {\n  return str.replace(/\\s/g, '');\n}\n\nfunction stringifyNode(node, sourceCode) {\n  return removeSpaces(sourceCode.getText(node));\n}\n\nfunction getCustomMessage(bannedType) {\n  if (bannedType === null) {\n    return '';\n  }\n\n  if (typeof bannedType === 'string') {\n    return ` ${bannedType}`;\n  }\n\n  if (bannedType.message) {\n    return ` ${bannedType.message}`;\n  }\n\n  return '';\n}\n\nconst defaultTypes = {\n  String: {\n    message: 'Use string instead',\n    fixWith: 'string'\n  },\n  Boolean: {\n    message: 'Use boolean instead',\n    fixWith: 'boolean'\n  },\n  Number: {\n    message: 'Use number instead',\n    fixWith: 'number'\n  },\n  Symbol: {\n    message: 'Use symbol instead',\n    fixWith: 'symbol'\n  },\n  BigInt: {\n    message: 'Use bigint instead',\n    fixWith: 'bigint'\n  },\n  Function: {\n    message: ['The `Function` type accepts any function-like value.', 'It provides no type safety when calling the function, which can be a common source of bugs.', 'It also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.', 'If you are expecting the function to accept certain arguments, you should explicitly define the function shape.'].join('\\n')\n  },\n  // object typing\n  Object: {\n    message: ['The `Object` type actually means \"any non-nullish value\", so it is marginally better than `unknown`.', '- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.', '- If you want a type meaning \"any value\", you probably want `unknown` instead.'].join('\\n')\n  },\n  '{}': {\n    message: ['`{}` actually means \"any non-nullish value\".', '- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.', '- If you want a type meaning \"any value\", you probably want `unknown` instead.', '- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.'].join('\\n')\n  }\n};\nexports.TYPE_KEYWORDS = {\n  bigint: utils_1.AST_NODE_TYPES.TSBigIntKeyword,\n  boolean: utils_1.AST_NODE_TYPES.TSBooleanKeyword,\n  never: utils_1.AST_NODE_TYPES.TSNeverKeyword,\n  null: utils_1.AST_NODE_TYPES.TSNullKeyword,\n  number: utils_1.AST_NODE_TYPES.TSNumberKeyword,\n  object: utils_1.AST_NODE_TYPES.TSObjectKeyword,\n  string: utils_1.AST_NODE_TYPES.TSStringKeyword,\n  symbol: utils_1.AST_NODE_TYPES.TSSymbolKeyword,\n  undefined: utils_1.AST_NODE_TYPES.TSUndefinedKeyword,\n  unknown: utils_1.AST_NODE_TYPES.TSUnknownKeyword,\n  void: utils_1.AST_NODE_TYPES.TSVoidKeyword\n};\nexports.default = util.createRule({\n  name: 'ban-types',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow certain types',\n      recommended: 'error'\n    },\n    fixable: 'code',\n    messages: {\n      bannedTypeMessage: \"Don't use `{{name}}` as a type.{{customMessage}}\"\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        types: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [{\n              type: 'null'\n            }, {\n              type: 'boolean'\n            }, {\n              type: 'string'\n            }, {\n              type: 'object',\n              properties: {\n                message: {\n                  type: 'string'\n                },\n                fixWith: {\n                  type: 'string'\n                }\n              },\n              additionalProperties: false\n            }]\n          }\n        },\n        extendDefaults: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{}],\n\n  create(context, _ref) {\n    let [options] = _ref;\n\n    var _a, _b;\n\n    const extendDefaults = (_a = options.extendDefaults) !== null && _a !== void 0 ? _a : true;\n    const customTypes = (_b = options.types) !== null && _b !== void 0 ? _b : {};\n    const types = Object.assign({}, extendDefaults ? defaultTypes : {}, customTypes);\n    const bannedTypes = new Map(Object.entries(types).map(_ref2 => {\n      let [type, data] = _ref2;\n      return [removeSpaces(type), data];\n    }));\n\n    function checkBannedTypes(typeNode) {\n      let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stringifyNode(typeNode, context.getSourceCode());\n      const bannedType = bannedTypes.get(name);\n\n      if (bannedType === undefined || bannedType === false) {\n        return;\n      }\n\n      const customMessage = getCustomMessage(bannedType);\n      const fixWith = bannedType && typeof bannedType === 'object' && bannedType.fixWith;\n      context.report({\n        node: typeNode,\n        messageId: 'bannedTypeMessage',\n        data: {\n          name,\n          customMessage\n        },\n        fix: fixWith ? fixer => fixer.replaceText(typeNode, fixWith) : null\n      });\n    }\n\n    const keywordSelectors = util.objectReduceKey(exports.TYPE_KEYWORDS, (acc, keyword) => {\n      if (bannedTypes.has(keyword)) {\n        acc[exports.TYPE_KEYWORDS[keyword]] = node => checkBannedTypes(node, keyword);\n      }\n\n      return acc;\n    }, {});\n    return Object.assign(Object.assign({}, keywordSelectors), {\n      TSTypeLiteral(node) {\n        if (node.members.length) {\n          return;\n        }\n\n        checkBannedTypes(node);\n      },\n\n      TSTupleType(node) {\n        if (node.elementTypes.length === 0) {\n          checkBannedTypes(node);\n        }\n      },\n\n      TSTypeReference(node) {\n        checkBannedTypes(node.typeName);\n\n        if (node.typeParameters) {\n          checkBannedTypes(node);\n        }\n      }\n\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["removeSpaces","str","replace","stringifyNode","node","sourceCode","getText","getCustomMessage","bannedType","message","defaultTypes","String","fixWith","Boolean","Number","Symbol","BigInt","Function","join","Object","exports","bigint","utils_1","TSBigIntKeyword","boolean","TSBooleanKeyword","never","TSNeverKeyword","null","TSNullKeyword","number","TSNumberKeyword","object","TSObjectKeyword","string","TSStringKeyword","symbol","TSSymbolKeyword","undefined","TSUndefinedKeyword","unknown","TSUnknownKeyword","void","TSVoidKeyword","util","createRule","name","meta","type","docs","description","recommended","fixable","messages","bannedTypeMessage","schema","properties","types","additionalProperties","oneOf","extendDefaults","defaultOptions","create","context","options","_a","customTypes","_b","assign","bannedTypes","Map","entries","map","data","checkBannedTypes","typeNode","getSourceCode","get","customMessage","report","messageId","fix","fixer","replaceText","keywordSelectors","objectReduceKey","acc","keyword","has","TSTypeLiteral","members","length","TSTupleType","elementTypes","TSTypeReference","typeName","typeParameters"],"sources":["../../src/rules/ban-types.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}