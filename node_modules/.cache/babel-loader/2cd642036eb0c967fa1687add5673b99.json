{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromUpdateExpression;\n/**\n * Extractor function for an UpdateExpression type value node.\n * An update expression is an expression with an update operator.\n * For example, foo++ will evaluate to foo + 1.\n *\n * @param - value - AST Value object with type `UpdateExpression`\n * @returns - The extracted value converted to correct type.\n */\n\nfunction extractValueFromUpdateExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n\n  var operator = value.operator,\n      argument = value.argument,\n      prefix = value.prefix;\n  var val = getValue(argument);\n\n  switch (operator) {\n    case '++':\n      return prefix ? ++val : val++;\n    // eslint-disable-line no-plusplus\n\n    case '--':\n      return prefix ? --val : val--;\n    // eslint-disable-line no-plusplus\n\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","extractValueFromUpdateExpression","getValue","require","operator","argument","prefix","val","undefined"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/lib/values/expressions/UpdateExpression.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromUpdateExpression;\n/**\n * Extractor function for an UpdateExpression type value node.\n * An update expression is an expression with an update operator.\n * For example, foo++ will evaluate to foo + 1.\n *\n * @param - value - AST Value object with type `UpdateExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromUpdateExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  var operator = value.operator,\n      argument = value.argument,\n      prefix = value.prefix;\n\n\n  var val = getValue(argument);\n\n  switch (operator) {\n    case '++':\n      return prefix ? ++val : val++; // eslint-disable-line no-plusplus\n    case '--':\n      return prefix ? --val : val--; // eslint-disable-line no-plusplus\n    default:\n      return undefined;\n  }\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,gCAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,gCAAT,CAA0CF,KAA1C,EAAiD;EAC/C;EACA,IAAIG,QAAQ,GAAGC,OAAO,CAAC,GAAD,CAAP,CAAaH,OAA5B;;EACA,IAAII,QAAQ,GAAGL,KAAK,CAACK,QAArB;EAAA,IACIC,QAAQ,GAAGN,KAAK,CAACM,QADrB;EAAA,IAEIC,MAAM,GAAGP,KAAK,CAACO,MAFnB;EAKA,IAAIC,GAAG,GAAGL,QAAQ,CAACG,QAAD,CAAlB;;EAEA,QAAQD,QAAR;IACE,KAAK,IAAL;MACE,OAAOE,MAAM,GAAG,EAAEC,GAAL,GAAWA,GAAG,EAA3B;IAA+B;;IACjC,KAAK,IAAL;MACE,OAAOD,MAAM,GAAG,EAAEC,GAAL,GAAWA,GAAG,EAA3B;IAA+B;;IACjC;MACE,OAAOC,SAAP;EANJ;AAQD"},"metadata":{},"sourceType":"script"}