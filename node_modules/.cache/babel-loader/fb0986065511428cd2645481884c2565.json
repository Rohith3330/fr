{"ast":null,"code":"#!/usr/bin/env node\n\n/**\n * @file This script is used to inline assertions into the README.md documents.\n */\n\"use strict\";\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _glob = _interopRequireDefault(require(\"glob\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst formatCodeSnippet = setup => {\n  const paragraphs = [];\n\n  if (setup.options) {\n    paragraphs.push('// Options: ' + JSON.stringify(setup.options));\n  }\n\n  if (setup.settings) {\n    paragraphs.push('// Settings: ' + JSON.stringify(setup.settings));\n  }\n\n  paragraphs.push(setup.code);\n\n  if (setup.errors) {\n    for (const message of setup.errors) {\n      paragraphs.push('// Message: ' + message.message);\n    }\n  }\n\n  if (setup.rules) {\n    paragraphs.push('// Additional rules: ' + JSON.stringify(setup.rules));\n  }\n\n  return paragraphs.join('\\n');\n};\n\nconst getAssertions = () => {\n  const assertionFiles = _glob.default.sync(_path.default.resolve(__dirname, '../../tests/rules/assertions/*.js'));\n\n  const assertionNames = _lodash.default.map(assertionFiles, filePath => {\n    return _path.default.basename(filePath, '.js');\n  });\n\n  const assertionCodes = _lodash.default.map(assertionFiles, filePath => {\n    // eslint-disable-next-line import/no-dynamic-require\n    const codes = require(filePath);\n\n    return {\n      invalid: _lodash.default.map(codes.invalid, formatCodeSnippet),\n      valid: _lodash.default.map(codes.valid, formatCodeSnippet)\n    };\n  });\n\n  return _lodash.default.zipObject(assertionNames, assertionCodes);\n};\n\nconst updateDocuments = assertions => {\n  const readmeDocumentPath = _path.default.join(__dirname, '../../README.md');\n\n  let documentBody;\n  documentBody = _fs.default.readFileSync(readmeDocumentPath, 'utf8');\n  documentBody = documentBody.replace(/<!-- assertions ([a-z]+?) -->/ugi, assertionsBlock => {\n    let exampleBody;\n    const ruleName = assertionsBlock.match(/assertions ([a-z]+)/ui)[1];\n    const ruleAssertions = assertions[ruleName];\n\n    if (!ruleAssertions) {\n      throw new Error('No assertions available for rule \"' + ruleName + '\".');\n    }\n\n    exampleBody = '';\n\n    if (ruleAssertions.invalid.length) {\n      exampleBody += 'The following patterns are considered problems:\\n\\n```js\\n' + ruleAssertions.invalid.join('\\n\\n') + '\\n```\\n\\n';\n    }\n\n    if (ruleAssertions.valid.length) {\n      exampleBody += 'The following patterns are not considered problems:\\n\\n```js\\n' + ruleAssertions.valid.join('\\n\\n') + '\\n```\\n\\n';\n    }\n\n    return exampleBody;\n  });\n\n  _fs.default.writeFileSync(readmeDocumentPath, documentBody);\n};\n\nupdateDocuments(getAssertions());","map":{"version":3,"names":["_fs","_interopRequireDefault","require","_path","_glob","_lodash","obj","__esModule","default","formatCodeSnippet","setup","paragraphs","options","push","JSON","stringify","settings","code","errors","message","rules","join","getAssertions","assertionFiles","sync","resolve","__dirname","assertionNames","map","filePath","basename","assertionCodes","codes","invalid","valid","zipObject","updateDocuments","assertions","readmeDocumentPath","documentBody","readFileSync","replace","assertionsBlock","exampleBody","ruleName","match","ruleAssertions","Error","length","writeFileSync"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/bin/addAssertions.js"],"sourcesContent":["#!/usr/bin/env node\n\n/**\n * @file This script is used to inline assertions into the README.md documents.\n */\n\"use strict\";\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _glob = _interopRequireDefault(require(\"glob\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst formatCodeSnippet = setup => {\n  const paragraphs = [];\n\n  if (setup.options) {\n    paragraphs.push('// Options: ' + JSON.stringify(setup.options));\n  }\n\n  if (setup.settings) {\n    paragraphs.push('// Settings: ' + JSON.stringify(setup.settings));\n  }\n\n  paragraphs.push(setup.code);\n\n  if (setup.errors) {\n    for (const message of setup.errors) {\n      paragraphs.push('// Message: ' + message.message);\n    }\n  }\n\n  if (setup.rules) {\n    paragraphs.push('// Additional rules: ' + JSON.stringify(setup.rules));\n  }\n\n  return paragraphs.join('\\n');\n};\n\nconst getAssertions = () => {\n  const assertionFiles = _glob.default.sync(_path.default.resolve(__dirname, '../../tests/rules/assertions/*.js'));\n\n  const assertionNames = _lodash.default.map(assertionFiles, filePath => {\n    return _path.default.basename(filePath, '.js');\n  });\n\n  const assertionCodes = _lodash.default.map(assertionFiles, filePath => {\n    // eslint-disable-next-line import/no-dynamic-require\n    const codes = require(filePath);\n\n    return {\n      invalid: _lodash.default.map(codes.invalid, formatCodeSnippet),\n      valid: _lodash.default.map(codes.valid, formatCodeSnippet)\n    };\n  });\n\n  return _lodash.default.zipObject(assertionNames, assertionCodes);\n};\n\nconst updateDocuments = assertions => {\n  const readmeDocumentPath = _path.default.join(__dirname, '../../README.md');\n\n  let documentBody;\n  documentBody = _fs.default.readFileSync(readmeDocumentPath, 'utf8');\n  documentBody = documentBody.replace(/<!-- assertions ([a-z]+?) -->/ugi, assertionsBlock => {\n    let exampleBody;\n    const ruleName = assertionsBlock.match(/assertions ([a-z]+)/ui)[1];\n    const ruleAssertions = assertions[ruleName];\n\n    if (!ruleAssertions) {\n      throw new Error('No assertions available for rule \"' + ruleName + '\".');\n    }\n\n    exampleBody = '';\n\n    if (ruleAssertions.invalid.length) {\n      exampleBody += 'The following patterns are considered problems:\\n\\n```js\\n' + ruleAssertions.invalid.join('\\n\\n') + '\\n```\\n\\n';\n    }\n\n    if (ruleAssertions.valid.length) {\n      exampleBody += 'The following patterns are not considered problems:\\n\\n```js\\n' + ruleAssertions.valid.join('\\n\\n') + '\\n```\\n\\n';\n    }\n\n    return exampleBody;\n  });\n\n  _fs.default.writeFileSync(readmeDocumentPath, documentBody);\n};\n\nupdateDocuments(getAssertions());"],"mappings":"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"},"metadata":{},"sourceType":"script"}