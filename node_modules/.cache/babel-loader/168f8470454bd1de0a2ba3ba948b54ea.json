{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow alias methods',\n      recommended: false\n    },\n    messages: {\n      replaceAlias: `Replace {{ alias }}() with its canonical name of {{ canonical }}()`\n    },\n    fixable: 'code',\n    type: 'suggestion',\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    // map of jest matcher aliases & their canonical names\n    const methodNames = {\n      toBeCalled: 'toHaveBeenCalled',\n      toBeCalledTimes: 'toHaveBeenCalledTimes',\n      toBeCalledWith: 'toHaveBeenCalledWith',\n      lastCalledWith: 'toHaveBeenLastCalledWith',\n      nthCalledWith: 'toHaveBeenNthCalledWith',\n      toReturn: 'toHaveReturned',\n      toReturnTimes: 'toHaveReturnedTimes',\n      toReturnWith: 'toHaveReturnedWith',\n      lastReturnedWith: 'toHaveLastReturnedWith',\n      nthReturnedWith: 'toHaveNthReturnedWith',\n      toThrowError: 'toThrow'\n    };\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          matcher\n        } = (0, _utils.parseExpectCall)(node);\n\n        if (!matcher) {\n          return;\n        }\n\n        const alias = matcher.name;\n\n        if (alias in methodNames) {\n          const canonical = methodNames[alias];\n          context.report({\n            messageId: 'replaceAlias',\n            data: {\n              alias,\n              canonical\n            },\n            node: matcher.node.property,\n            fix: fixer => [fixer.replaceText(matcher.node.property, canonical)]\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utils","require","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","replaceAlias","fixable","type","schema","defaultOptions","create","context","methodNames","toBeCalled","toBeCalledTimes","toBeCalledWith","lastCalledWith","nthCalledWith","toReturn","toReturnTimes","toReturnWith","lastReturnedWith","nthReturnedWith","toThrowError","CallExpression","node","isExpectCall","matcher","parseExpectCall","alias","canonical","report","messageId","data","property","fix","fixer","replaceText"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-alias-methods.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow alias methods',\n      recommended: false\n    },\n    messages: {\n      replaceAlias: `Replace {{ alias }}() with its canonical name of {{ canonical }}()`\n    },\n    fixable: 'code',\n    type: 'suggestion',\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    // map of jest matcher aliases & their canonical names\n    const methodNames = {\n      toBeCalled: 'toHaveBeenCalled',\n      toBeCalledTimes: 'toHaveBeenCalledTimes',\n      toBeCalledWith: 'toHaveBeenCalledWith',\n      lastCalledWith: 'toHaveBeenLastCalledWith',\n      nthCalledWith: 'toHaveBeenNthCalledWith',\n      toReturn: 'toHaveReturned',\n      toReturnTimes: 'toHaveReturnedTimes',\n      toReturnWith: 'toHaveReturnedWith',\n      lastReturnedWith: 'toHaveLastReturnedWith',\n      nthReturnedWith: 'toHaveNthReturnedWith',\n      toThrowError: 'toThrow'\n    };\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          matcher\n        } = (0, _utils.parseExpectCall)(node);\n\n        if (!matcher) {\n          return;\n        }\n\n        const alias = matcher.name;\n\n        if (alias in methodNames) {\n          const canonical = methodNames[alias];\n          context.report({\n            messageId: 'replaceAlias',\n            data: {\n              alias,\n              canonical\n            },\n            node: matcher.node.property,\n            fix: fixer => [fixer.replaceText(matcher.node.property, canonical)]\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAG,CAAC,GAAGF,MAAM,CAACG,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,wBAFT;MAGJC,WAAW,EAAE;IAHT,CADF;IAMJC,QAAQ,EAAE;MACRC,YAAY,EAAG;IADP,CANN;IASJC,OAAO,EAAE,MATL;IAUJC,IAAI,EAAE,YAVF;IAWJC,MAAM,EAAE;EAXJ,CAF8B;EAepCC,cAAc,EAAE,EAfoB;;EAiBpCC,MAAM,CAACC,OAAD,EAAU;IACd;IACA,MAAMC,WAAW,GAAG;MAClBC,UAAU,EAAE,kBADM;MAElBC,eAAe,EAAE,uBAFC;MAGlBC,cAAc,EAAE,sBAHE;MAIlBC,cAAc,EAAE,0BAJE;MAKlBC,aAAa,EAAE,yBALG;MAMlBC,QAAQ,EAAE,gBANQ;MAOlBC,aAAa,EAAE,qBAPG;MAQlBC,YAAY,EAAE,oBARI;MASlBC,gBAAgB,EAAE,wBATA;MAUlBC,eAAe,EAAE,uBAVC;MAWlBC,YAAY,EAAE;IAXI,CAApB;IAaA,OAAO;MACLC,cAAc,CAACC,IAAD,EAAO;QACnB,IAAI,CAAC,CAAC,GAAGhC,MAAM,CAACiC,YAAX,EAAyBD,IAAzB,CAAL,EAAqC;UACnC;QACD;;QAED,MAAM;UACJE;QADI,IAEF,CAAC,GAAGlC,MAAM,CAACmC,eAAX,EAA4BH,IAA5B,CAFJ;;QAIA,IAAI,CAACE,OAAL,EAAc;UACZ;QACD;;QAED,MAAME,KAAK,GAAGF,OAAO,CAAC9B,IAAtB;;QAEA,IAAIgC,KAAK,IAAIjB,WAAb,EAA0B;UACxB,MAAMkB,SAAS,GAAGlB,WAAW,CAACiB,KAAD,CAA7B;UACAlB,OAAO,CAACoB,MAAR,CAAe;YACbC,SAAS,EAAE,cADE;YAEbC,IAAI,EAAE;cACJJ,KADI;cAEJC;YAFI,CAFO;YAMbL,IAAI,EAAEE,OAAO,CAACF,IAAR,CAAaS,QANN;YAObC,GAAG,EAAEC,KAAK,IAAI,CAACA,KAAK,CAACC,WAAN,CAAkBV,OAAO,CAACF,IAAR,CAAaS,QAA/B,EAAyCJ,SAAzC,CAAD;UAPD,CAAf;QASD;MACF;;IA5BI,CAAP;EA+BD;;AA/DmC,CAAvB,CAAf;;AAmEAxC,OAAO,CAACE,OAAR,GAAkBG,QAAlB"},"metadata":{},"sourceType":"script"}