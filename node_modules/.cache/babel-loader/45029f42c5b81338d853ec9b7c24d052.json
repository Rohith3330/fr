{"ast":null,"code":"/**\n * @typedef {import('./index.js').VisitorKeys} VisitorKeys\n */\n\n/**\n * @type {VisitorKeys}\n */\nconst KEYS = {\n  AssignmentExpression: [\"left\", \"right\"],\n  AssignmentPattern: [\"left\", \"right\"],\n  ArrayExpression: [\"elements\"],\n  ArrayPattern: [\"elements\"],\n  ArrowFunctionExpression: [\"params\", \"body\"],\n  AwaitExpression: [\"argument\"],\n  BlockStatement: [\"body\"],\n  BinaryExpression: [\"left\", \"right\"],\n  BreakStatement: [\"label\"],\n  CallExpression: [\"callee\", \"arguments\"],\n  CatchClause: [\"param\", \"body\"],\n  ChainExpression: [\"expression\"],\n  ClassBody: [\"body\"],\n  ClassDeclaration: [\"id\", \"superClass\", \"body\"],\n  ClassExpression: [\"id\", \"superClass\", \"body\"],\n  ConditionalExpression: [\"test\", \"consequent\", \"alternate\"],\n  ContinueStatement: [\"label\"],\n  DebuggerStatement: [],\n  DoWhileStatement: [\"body\", \"test\"],\n  EmptyStatement: [],\n  ExportAllDeclaration: [\"exported\", \"source\"],\n  ExportDefaultDeclaration: [\"declaration\"],\n  ExportNamedDeclaration: [\"declaration\", \"specifiers\", \"source\"],\n  ExportSpecifier: [\"exported\", \"local\"],\n  ExpressionStatement: [\"expression\"],\n  ExperimentalRestProperty: [\"argument\"],\n  ExperimentalSpreadProperty: [\"argument\"],\n  ForStatement: [\"init\", \"test\", \"update\", \"body\"],\n  ForInStatement: [\"left\", \"right\", \"body\"],\n  ForOfStatement: [\"left\", \"right\", \"body\"],\n  FunctionDeclaration: [\"id\", \"params\", \"body\"],\n  FunctionExpression: [\"id\", \"params\", \"body\"],\n  Identifier: [],\n  IfStatement: [\"test\", \"consequent\", \"alternate\"],\n  ImportDeclaration: [\"specifiers\", \"source\"],\n  ImportDefaultSpecifier: [\"local\"],\n  ImportExpression: [\"source\"],\n  ImportNamespaceSpecifier: [\"local\"],\n  ImportSpecifier: [\"imported\", \"local\"],\n  JSXAttribute: [\"name\", \"value\"],\n  JSXClosingElement: [\"name\"],\n  JSXElement: [\"openingElement\", \"children\", \"closingElement\"],\n  JSXEmptyExpression: [],\n  JSXExpressionContainer: [\"expression\"],\n  JSXIdentifier: [],\n  JSXMemberExpression: [\"object\", \"property\"],\n  JSXNamespacedName: [\"namespace\", \"name\"],\n  JSXOpeningElement: [\"name\", \"attributes\"],\n  JSXSpreadAttribute: [\"argument\"],\n  JSXText: [],\n  JSXFragment: [\"openingFragment\", \"children\", \"closingFragment\"],\n  JSXClosingFragment: [],\n  JSXOpeningFragment: [],\n  Literal: [],\n  LabeledStatement: [\"label\", \"body\"],\n  LogicalExpression: [\"left\", \"right\"],\n  MemberExpression: [\"object\", \"property\"],\n  MetaProperty: [\"meta\", \"property\"],\n  MethodDefinition: [\"key\", \"value\"],\n  NewExpression: [\"callee\", \"arguments\"],\n  ObjectExpression: [\"properties\"],\n  ObjectPattern: [\"properties\"],\n  PrivateIdentifier: [],\n  Program: [\"body\"],\n  Property: [\"key\", \"value\"],\n  PropertyDefinition: [\"key\", \"value\"],\n  RestElement: [\"argument\"],\n  ReturnStatement: [\"argument\"],\n  SequenceExpression: [\"expressions\"],\n  SpreadElement: [\"argument\"],\n  StaticBlock: [\"body\"],\n  Super: [],\n  SwitchStatement: [\"discriminant\", \"cases\"],\n  SwitchCase: [\"test\", \"consequent\"],\n  TaggedTemplateExpression: [\"tag\", \"quasi\"],\n  TemplateElement: [],\n  TemplateLiteral: [\"quasis\", \"expressions\"],\n  ThisExpression: [],\n  ThrowStatement: [\"argument\"],\n  TryStatement: [\"block\", \"handler\", \"finalizer\"],\n  UnaryExpression: [\"argument\"],\n  UpdateExpression: [\"argument\"],\n  VariableDeclaration: [\"declarations\"],\n  VariableDeclarator: [\"id\", \"init\"],\n  WhileStatement: [\"test\", \"body\"],\n  WithStatement: [\"object\", \"body\"],\n  YieldExpression: [\"argument\"]\n}; // Types.\n\nconst NODE_TYPES = Object.keys(KEYS); // Freeze the keys.\n\nfor (const type of NODE_TYPES) {\n  Object.freeze(KEYS[type]);\n}\n\nObject.freeze(KEYS);\nexport default KEYS;","map":{"version":3,"names":["KEYS","AssignmentExpression","AssignmentPattern","ArrayExpression","ArrayPattern","ArrowFunctionExpression","AwaitExpression","BlockStatement","BinaryExpression","BreakStatement","CallExpression","CatchClause","ChainExpression","ClassBody","ClassDeclaration","ClassExpression","ConditionalExpression","ContinueStatement","DebuggerStatement","DoWhileStatement","EmptyStatement","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExportSpecifier","ExpressionStatement","ExperimentalRestProperty","ExperimentalSpreadProperty","ForStatement","ForInStatement","ForOfStatement","FunctionDeclaration","FunctionExpression","Identifier","IfStatement","ImportDeclaration","ImportDefaultSpecifier","ImportExpression","ImportNamespaceSpecifier","ImportSpecifier","JSXAttribute","JSXClosingElement","JSXElement","JSXEmptyExpression","JSXExpressionContainer","JSXIdentifier","JSXMemberExpression","JSXNamespacedName","JSXOpeningElement","JSXSpreadAttribute","JSXText","JSXFragment","JSXClosingFragment","JSXOpeningFragment","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","NewExpression","ObjectExpression","ObjectPattern","PrivateIdentifier","Program","Property","PropertyDefinition","RestElement","ReturnStatement","SequenceExpression","SpreadElement","StaticBlock","Super","SwitchStatement","SwitchCase","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","NODE_TYPES","Object","keys","type","freeze"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-visitor-keys/lib/visitor-keys.js"],"sourcesContent":["/**\n * @typedef {import('./index.js').VisitorKeys} VisitorKeys\n */\n\n/**\n * @type {VisitorKeys}\n */\nconst KEYS = {\n    AssignmentExpression: [\n        \"left\",\n        \"right\"\n    ],\n    AssignmentPattern: [\n        \"left\",\n        \"right\"\n    ],\n    ArrayExpression: [\n        \"elements\"\n    ],\n    ArrayPattern: [\n        \"elements\"\n    ],\n    ArrowFunctionExpression: [\n        \"params\",\n        \"body\"\n    ],\n    AwaitExpression: [\n        \"argument\"\n    ],\n    BlockStatement: [\n        \"body\"\n    ],\n    BinaryExpression: [\n        \"left\",\n        \"right\"\n    ],\n    BreakStatement: [\n        \"label\"\n    ],\n    CallExpression: [\n        \"callee\",\n        \"arguments\"\n    ],\n    CatchClause: [\n        \"param\",\n        \"body\"\n    ],\n    ChainExpression: [\n        \"expression\"\n    ],\n    ClassBody: [\n        \"body\"\n    ],\n    ClassDeclaration: [\n        \"id\",\n        \"superClass\",\n        \"body\"\n    ],\n    ClassExpression: [\n        \"id\",\n        \"superClass\",\n        \"body\"\n    ],\n    ConditionalExpression: [\n        \"test\",\n        \"consequent\",\n        \"alternate\"\n    ],\n    ContinueStatement: [\n        \"label\"\n    ],\n    DebuggerStatement: [],\n    DoWhileStatement: [\n        \"body\",\n        \"test\"\n    ],\n    EmptyStatement: [],\n    ExportAllDeclaration: [\n        \"exported\",\n        \"source\"\n    ],\n    ExportDefaultDeclaration: [\n        \"declaration\"\n    ],\n    ExportNamedDeclaration: [\n        \"declaration\",\n        \"specifiers\",\n        \"source\"\n    ],\n    ExportSpecifier: [\n        \"exported\",\n        \"local\"\n    ],\n    ExpressionStatement: [\n        \"expression\"\n    ],\n    ExperimentalRestProperty: [\n        \"argument\"\n    ],\n    ExperimentalSpreadProperty: [\n        \"argument\"\n    ],\n    ForStatement: [\n        \"init\",\n        \"test\",\n        \"update\",\n        \"body\"\n    ],\n    ForInStatement: [\n        \"left\",\n        \"right\",\n        \"body\"\n    ],\n    ForOfStatement: [\n        \"left\",\n        \"right\",\n        \"body\"\n    ],\n    FunctionDeclaration: [\n        \"id\",\n        \"params\",\n        \"body\"\n    ],\n    FunctionExpression: [\n        \"id\",\n        \"params\",\n        \"body\"\n    ],\n    Identifier: [],\n    IfStatement: [\n        \"test\",\n        \"consequent\",\n        \"alternate\"\n    ],\n    ImportDeclaration: [\n        \"specifiers\",\n        \"source\"\n    ],\n    ImportDefaultSpecifier: [\n        \"local\"\n    ],\n    ImportExpression: [\n        \"source\"\n    ],\n    ImportNamespaceSpecifier: [\n        \"local\"\n    ],\n    ImportSpecifier: [\n        \"imported\",\n        \"local\"\n    ],\n    JSXAttribute: [\n        \"name\",\n        \"value\"\n    ],\n    JSXClosingElement: [\n        \"name\"\n    ],\n    JSXElement: [\n        \"openingElement\",\n        \"children\",\n        \"closingElement\"\n    ],\n    JSXEmptyExpression: [],\n    JSXExpressionContainer: [\n        \"expression\"\n    ],\n    JSXIdentifier: [],\n    JSXMemberExpression: [\n        \"object\",\n        \"property\"\n    ],\n    JSXNamespacedName: [\n        \"namespace\",\n        \"name\"\n    ],\n    JSXOpeningElement: [\n        \"name\",\n        \"attributes\"\n    ],\n    JSXSpreadAttribute: [\n        \"argument\"\n    ],\n    JSXText: [],\n    JSXFragment: [\n        \"openingFragment\",\n        \"children\",\n        \"closingFragment\"\n    ],\n    JSXClosingFragment: [],\n    JSXOpeningFragment: [],\n    Literal: [],\n    LabeledStatement: [\n        \"label\",\n        \"body\"\n    ],\n    LogicalExpression: [\n        \"left\",\n        \"right\"\n    ],\n    MemberExpression: [\n        \"object\",\n        \"property\"\n    ],\n    MetaProperty: [\n        \"meta\",\n        \"property\"\n    ],\n    MethodDefinition: [\n        \"key\",\n        \"value\"\n    ],\n    NewExpression: [\n        \"callee\",\n        \"arguments\"\n    ],\n    ObjectExpression: [\n        \"properties\"\n    ],\n    ObjectPattern: [\n        \"properties\"\n    ],\n    PrivateIdentifier: [],\n    Program: [\n        \"body\"\n    ],\n    Property: [\n        \"key\",\n        \"value\"\n    ],\n    PropertyDefinition: [\n        \"key\",\n        \"value\"\n    ],\n    RestElement: [\n        \"argument\"\n    ],\n    ReturnStatement: [\n        \"argument\"\n    ],\n    SequenceExpression: [\n        \"expressions\"\n    ],\n    SpreadElement: [\n        \"argument\"\n    ],\n    StaticBlock: [\n        \"body\"\n    ],\n    Super: [],\n    SwitchStatement: [\n        \"discriminant\",\n        \"cases\"\n    ],\n    SwitchCase: [\n        \"test\",\n        \"consequent\"\n    ],\n    TaggedTemplateExpression: [\n        \"tag\",\n        \"quasi\"\n    ],\n    TemplateElement: [],\n    TemplateLiteral: [\n        \"quasis\",\n        \"expressions\"\n    ],\n    ThisExpression: [],\n    ThrowStatement: [\n        \"argument\"\n    ],\n    TryStatement: [\n        \"block\",\n        \"handler\",\n        \"finalizer\"\n    ],\n    UnaryExpression: [\n        \"argument\"\n    ],\n    UpdateExpression: [\n        \"argument\"\n    ],\n    VariableDeclaration: [\n        \"declarations\"\n    ],\n    VariableDeclarator: [\n        \"id\",\n        \"init\"\n    ],\n    WhileStatement: [\n        \"test\",\n        \"body\"\n    ],\n    WithStatement: [\n        \"object\",\n        \"body\"\n    ],\n    YieldExpression: [\n        \"argument\"\n    ]\n};\n\n// Types.\nconst NODE_TYPES = Object.keys(KEYS);\n\n// Freeze the keys.\nfor (const type of NODE_TYPES) {\n    Object.freeze(KEYS[type]);\n}\nObject.freeze(KEYS);\n\nexport default KEYS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}