{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ConcatProgram } from '../concat_gpu';\nimport { ConcatPackedProgram } from '../concat_packed_gpu';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { CLONE, UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nimport { complex } from './Complex';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concatImpl(inputs, axis, backend) {\n  var dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    var reals = inputs.map(function (t) {\n      return real({\n        inputs: {\n          input: t\n        },\n        backend: backend\n      });\n    });\n    var imags = inputs.map(function (t) {\n      return imag({\n        inputs: {\n          input: t\n        },\n        backend: backend\n      });\n    });\n    var realConcated = concatImpl(reals, axis, backend);\n    var imagConcated = concatImpl(imags, axis, backend);\n    var _result = complex({\n      inputs: {\n        real: realConcated,\n        imag: imagConcated\n      },\n      backend: backend\n    });\n    reals.forEach(function (r) {\n      return backend.disposeIntermediateTensorInfo(r);\n    });\n    imags.forEach(function (i) {\n      return backend.disposeIntermediateTensorInfo(i);\n    });\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n    return _result;\n  }\n  var runOnCpu = backend.shouldExecuteOnCPU(inputs);\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    var _tensors2D = inputs.map(function (t) {\n      var innerSize = util.sizeFromShape(t.shape.slice(axis));\n      var shape = [-1, innerSize];\n      return reshape({\n        inputs: {\n          x: t\n        },\n        backend: backend,\n        attrs: {\n          shape: shape\n        }\n      });\n    });\n    var inputsValShapes = _tensors2D.map(function (t) {\n      return {\n        vals: backend.readSync(t.dataId),\n        shape: t.shape\n      };\n    });\n    // Concats 2d tensors along axis=1.\n    var _outShape = backend_util.computeOutShape(_tensors2D.map(function (t) {\n      return t.shape;\n    }), 1 /* axis */);\n    var simplyConcat = _tensors2D[0].shape[0] === 1;\n    var outVals = concatImplCPU(inputsValShapes, _outShape, dtype, simplyConcat);\n    var finalOutShape = backend_util.computeOutShape(inputs.map(function (t) {\n      return t.shape;\n    }), axis);\n    var outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n    _tensors2D.forEach(function (t) {\n      return backend.disposeIntermediateTensorInfo(t);\n    });\n    return outInfo;\n  }\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  var $inputs = inputs.filter(function (t) {\n    return util.sizeFromShape(t.shape) > 0;\n  });\n  var shouldPack = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && $inputs[0].shape.length > 1;\n  if ($inputs.length === 1) {\n    // Clone tensor.\n    var _program = shouldPack ? new UnaryOpProgram(inputs[0].shape, CLONE) : new UnaryOpPackedProgram(inputs[0].shape, CLONE);\n    return backend.runWebGLProgram(_program, inputs, dtype);\n  }\n  var maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n  if ($inputs.length > maxTexturesInShader) {\n    var reducedInputs = [];\n    for (var i = 0; i < $inputs.length; i += maxTexturesInShader) {\n      var subArray = $inputs.slice(i, i + maxTexturesInShader);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    var _result2 = concatImpl(reducedInputs, axis, backend);\n    for (var _i = 0, _reducedInputs = reducedInputs; _i < _reducedInputs.length; _i++) {\n      var _i2 = _reducedInputs[_i];\n      backend.disposeIntermediateTensorInfo(_i2);\n    }\n    return _result2;\n  }\n  if (shouldPack) {\n    var _program2 = new ConcatPackedProgram($inputs.map(function (t) {\n      return t.shape;\n    }), axis);\n    return backend.runWebGLProgram(_program2, $inputs, dtype);\n  }\n  var _computeTensors2D = computeTensors2D($inputs, axis, backend),\n    tensors2D = _computeTensors2D.tensors2D,\n    outShape = _computeTensors2D.outShape;\n  var program = new ConcatProgram(tensors2D.map(function (t) {\n    return t.shape;\n  }));\n  var result = backend.runWebGLProgram(program, tensors2D, dtype);\n  tensors2D.forEach(function (r) {\n    return backend.disposeIntermediateTensorInfo(r);\n  });\n  var reshapedResult = reshape({\n    inputs: {\n      x: result\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend: backend\n  });\n  backend.disposeIntermediateTensorInfo(result);\n  return reshapedResult;\n}\nfunction computeTensors2D(inputs, axis, backend) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  var outShape = backend_util.computeOutShape(inputs.map(function (t) {\n    return t.shape;\n  }), axis);\n  var tensors2D = inputs.map(function (x) {\n    return reshape({\n      inputs: {\n        x: x\n      },\n      attrs: {\n        shape: [-1, util.sizeFromShape(x.shape.slice(axis))]\n      },\n      backend: backend\n    });\n  });\n  return {\n    tensors2D: tensors2D,\n    outShape: outShape\n  };\n}","map":null,"metadata":{},"sourceType":"module"}