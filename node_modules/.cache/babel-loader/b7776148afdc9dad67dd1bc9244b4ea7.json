{"ast":null,"code":"'use strict';\n\nconst assert = require('chai').assert;\n\nconst proxyquire = require('proxyquire');\n\nconst spooks = require('spooks');\n\nconst Promise = require('bluebird');\n\nconst modulePath = '../../src/unpipe';\nsuite('unpipe:', () => {\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath);\n    });\n  });\n  test('require returns function', () => {\n    assert.isFunction(require(modulePath));\n  });\n  suite('require:', () => {\n    let log, results, unpipe;\n    setup(() => {\n      log = {};\n      results = {\n        parse: [Promise.resolve()]\n      };\n      unpipe = proxyquire(modulePath, {\n        './parse': spooks.fn({\n          name: 'parse',\n          log: log,\n          results: results.parse\n        })\n      });\n    });\n    test('unpipe expects two arguments', () => {\n      assert.lengthOf(unpipe, 2);\n    });\n    test('unpipe does not throw', () => {\n      assert.doesNotThrow(() => {\n        unpipe(() => {});\n      });\n    });\n    test('unpipe throws if callback is not provided', () => {\n      assert.throws(() => {\n        unpipe();\n      });\n    });\n    test('parse was not called', () => {\n      assert.strictEqual(log.counts.parse, 0);\n    });\n    suite('unpipe success:', () => {\n      let result, error, options;\n      setup(done => {\n        results.parse[0] = Promise.resolve('foo');\n        options = {\n          foo: 'bar',\n          ndjson: true\n        };\n        unpipe((err, res) => {\n          error = err;\n          result = res;\n          done();\n        }, options);\n      });\n      test('parse was called once', () => {\n        assert.strictEqual(log.counts.parse, 1);\n      });\n      test('parse was called correctly', () => {\n        assert.isUndefined(log.these.parse[0]);\n        assert.lengthOf(log.args.parse[0], 2);\n        assert.isObject(log.args.parse[0][0]);\n        assert.isTrue(log.args.parse[0][0].readable);\n        assert.isTrue(log.args.parse[0][0].writable);\n        assert.isFunction(log.args.parse[0][0].pipe);\n        assert.isFunction(log.args.parse[0][0].read);\n        assert.isFunction(log.args.parse[0][0]._read);\n        assert.isFunction(log.args.parse[0][0].write);\n        assert.isFunction(log.args.parse[0][0]._write);\n        assert.notStrictEqual(log.args.parse[0][1], options);\n        assert.deepEqual(log.args.parse[0][1], {\n          foo: 'bar',\n          ndjson: false\n        });\n      });\n      test('parse result was returned', () => {\n        assert.strictEqual(result, 'foo');\n      });\n      test('did not fail', () => {\n        assert.isNull(error);\n      });\n    });\n    suite('unpipe error:', () => {\n      let result, error, options;\n      setup(done => {\n        results.parse[0] = Promise.reject('bar');\n        options = {};\n        unpipe((err, res) => {\n          error = err;\n          result = res;\n          done();\n        }, options);\n      });\n      test('parse was called once', () => {\n        assert.strictEqual(log.counts.parse, 1);\n      });\n      test('parse result was not returned', () => {\n        assert.isUndefined(result);\n      });\n      test('failed', () => {\n        assert.strictEqual(error, 'bar');\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","proxyquire","spooks","Promise","modulePath","suite","test","doesNotThrow","isFunction","log","results","unpipe","setup","parse","resolve","fn","name","lengthOf","throws","strictEqual","counts","result","error","options","done","foo","ndjson","err","res","isUndefined","these","args","isObject","isTrue","readable","writable","pipe","read","_read","write","_write","notStrictEqual","deepEqual","isNull","reject"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/bfj/test/unit/unpipe.js"],"sourcesContent":["'use strict'\n\nconst assert = require('chai').assert\nconst proxyquire = require('proxyquire')\nconst spooks = require('spooks')\nconst Promise = require('bluebird')\n\nconst modulePath = '../../src/unpipe'\n\nsuite('unpipe:', () => {\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath)\n    })\n  })\n\n  test('require returns function', () => {\n    assert.isFunction(require(modulePath))\n  })\n\n  suite('require:', () => {\n    let log, results, unpipe\n\n    setup(() => {\n      log = {}\n      results = {\n        parse: [ Promise.resolve() ]\n      }\n      unpipe = proxyquire(modulePath, {\n        './parse': spooks.fn({\n          name: 'parse',\n          log: log,\n          results: results.parse\n        })\n      })\n    })\n\n    test('unpipe expects two arguments', () => {\n      assert.lengthOf(unpipe, 2)\n    })\n\n    test('unpipe does not throw', () => {\n      assert.doesNotThrow(() => {\n        unpipe(() => {})\n      })\n    })\n\n    test('unpipe throws if callback is not provided', () => {\n      assert.throws(() => {\n        unpipe()\n      })\n    })\n\n    test('parse was not called', () => {\n      assert.strictEqual(log.counts.parse, 0)\n    })\n\n    suite('unpipe success:', () => {\n      let result, error, options\n\n      setup(done => {\n        results.parse[0] = Promise.resolve('foo')\n        options = { foo: 'bar', ndjson: true }\n        unpipe((err, res) => {\n          error = err\n          result = res\n          done()\n        }, options)\n      })\n\n      test('parse was called once', () => {\n        assert.strictEqual(log.counts.parse, 1)\n      })\n\n      test('parse was called correctly', () => {\n        assert.isUndefined(log.these.parse[0])\n        assert.lengthOf(log.args.parse[0], 2)\n        assert.isObject(log.args.parse[0][0])\n        assert.isTrue(log.args.parse[0][0].readable)\n        assert.isTrue(log.args.parse[0][0].writable)\n        assert.isFunction(log.args.parse[0][0].pipe)\n        assert.isFunction(log.args.parse[0][0].read)\n        assert.isFunction(log.args.parse[0][0]._read)\n        assert.isFunction(log.args.parse[0][0].write)\n        assert.isFunction(log.args.parse[0][0]._write)\n        assert.notStrictEqual(log.args.parse[0][1], options)\n        assert.deepEqual(log.args.parse[0][1], { foo: 'bar', ndjson: false })\n      })\n\n      test('parse result was returned', () => {\n        assert.strictEqual(result, 'foo')\n      })\n\n      test('did not fail', () => {\n        assert.isNull(error)\n      })\n    })\n\n    suite('unpipe error:', () => {\n      let result, error, options\n\n      setup(done => {\n        results.parse[0] = Promise.reject('bar')\n        options = {}\n        unpipe((err, res) => {\n          error = err\n          result = res\n          done()\n        }, options)\n      })\n\n      test('parse was called once', () => {\n        assert.strictEqual(log.counts.parse, 1)\n      })\n\n      test('parse result was not returned', () => {\n        assert.isUndefined(result)\n      })\n\n      test('failed', () => {\n        assert.strictEqual(error, 'bar')\n      })\n    })\n  })\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAA/B;;AACA,MAAME,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAMI,UAAU,GAAG,kBAAnB;AAEAC,KAAK,CAAC,SAAD,EAAY,MAAM;EACrBC,IAAI,CAAC,wBAAD,EAA2B,MAAM;IACnCP,MAAM,CAACQ,YAAP,CAAoB,MAAM;MACxBP,OAAO,CAACI,UAAD,CAAP;IACD,CAFD;EAGD,CAJG,CAAJ;EAMAE,IAAI,CAAC,0BAAD,EAA6B,MAAM;IACrCP,MAAM,CAACS,UAAP,CAAkBR,OAAO,CAACI,UAAD,CAAzB;EACD,CAFG,CAAJ;EAIAC,KAAK,CAAC,UAAD,EAAa,MAAM;IACtB,IAAII,GAAJ,EAASC,OAAT,EAAkBC,MAAlB;IAEAC,KAAK,CAAC,MAAM;MACVH,GAAG,GAAG,EAAN;MACAC,OAAO,GAAG;QACRG,KAAK,EAAE,CAAEV,OAAO,CAACW,OAAR,EAAF;MADC,CAAV;MAGAH,MAAM,GAAGV,UAAU,CAACG,UAAD,EAAa;QAC9B,WAAWF,MAAM,CAACa,EAAP,CAAU;UACnBC,IAAI,EAAE,OADa;UAEnBP,GAAG,EAAEA,GAFc;UAGnBC,OAAO,EAAEA,OAAO,CAACG;QAHE,CAAV;MADmB,CAAb,CAAnB;IAOD,CAZI,CAAL;IAcAP,IAAI,CAAC,8BAAD,EAAiC,MAAM;MACzCP,MAAM,CAACkB,QAAP,CAAgBN,MAAhB,EAAwB,CAAxB;IACD,CAFG,CAAJ;IAIAL,IAAI,CAAC,uBAAD,EAA0B,MAAM;MAClCP,MAAM,CAACQ,YAAP,CAAoB,MAAM;QACxBI,MAAM,CAAC,MAAM,CAAE,CAAT,CAAN;MACD,CAFD;IAGD,CAJG,CAAJ;IAMAL,IAAI,CAAC,2CAAD,EAA8C,MAAM;MACtDP,MAAM,CAACmB,MAAP,CAAc,MAAM;QAClBP,MAAM;MACP,CAFD;IAGD,CAJG,CAAJ;IAMAL,IAAI,CAAC,sBAAD,EAAyB,MAAM;MACjCP,MAAM,CAACoB,WAAP,CAAmBV,GAAG,CAACW,MAAJ,CAAWP,KAA9B,EAAqC,CAArC;IACD,CAFG,CAAJ;IAIAR,KAAK,CAAC,iBAAD,EAAoB,MAAM;MAC7B,IAAIgB,MAAJ,EAAYC,KAAZ,EAAmBC,OAAnB;MAEAX,KAAK,CAACY,IAAI,IAAI;QACZd,OAAO,CAACG,KAAR,CAAc,CAAd,IAAmBV,OAAO,CAACW,OAAR,CAAgB,KAAhB,CAAnB;QACAS,OAAO,GAAG;UAAEE,GAAG,EAAE,KAAP;UAAcC,MAAM,EAAE;QAAtB,CAAV;QACAf,MAAM,CAAC,CAACgB,GAAD,EAAMC,GAAN,KAAc;UACnBN,KAAK,GAAGK,GAAR;UACAN,MAAM,GAAGO,GAAT;UACAJ,IAAI;QACL,CAJK,EAIHD,OAJG,CAAN;MAKD,CARI,CAAL;MAUAjB,IAAI,CAAC,uBAAD,EAA0B,MAAM;QAClCP,MAAM,CAACoB,WAAP,CAAmBV,GAAG,CAACW,MAAJ,CAAWP,KAA9B,EAAqC,CAArC;MACD,CAFG,CAAJ;MAIAP,IAAI,CAAC,4BAAD,EAA+B,MAAM;QACvCP,MAAM,CAAC8B,WAAP,CAAmBpB,GAAG,CAACqB,KAAJ,CAAUjB,KAAV,CAAgB,CAAhB,CAAnB;QACAd,MAAM,CAACkB,QAAP,CAAgBR,GAAG,CAACsB,IAAJ,CAASlB,KAAT,CAAe,CAAf,CAAhB,EAAmC,CAAnC;QACAd,MAAM,CAACiC,QAAP,CAAgBvB,GAAG,CAACsB,IAAJ,CAASlB,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAhB;QACAd,MAAM,CAACkC,MAAP,CAAcxB,GAAG,CAACsB,IAAJ,CAASlB,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqBqB,QAAnC;QACAnC,MAAM,CAACkC,MAAP,CAAcxB,GAAG,CAACsB,IAAJ,CAASlB,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqBsB,QAAnC;QACApC,MAAM,CAACS,UAAP,CAAkBC,GAAG,CAACsB,IAAJ,CAASlB,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqBuB,IAAvC;QACArC,MAAM,CAACS,UAAP,CAAkBC,GAAG,CAACsB,IAAJ,CAASlB,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqBwB,IAAvC;QACAtC,MAAM,CAACS,UAAP,CAAkBC,GAAG,CAACsB,IAAJ,CAASlB,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqByB,KAAvC;QACAvC,MAAM,CAACS,UAAP,CAAkBC,GAAG,CAACsB,IAAJ,CAASlB,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqB0B,KAAvC;QACAxC,MAAM,CAACS,UAAP,CAAkBC,GAAG,CAACsB,IAAJ,CAASlB,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqB2B,MAAvC;QACAzC,MAAM,CAAC0C,cAAP,CAAsBhC,GAAG,CAACsB,IAAJ,CAASlB,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAtB,EAA4CU,OAA5C;QACAxB,MAAM,CAAC2C,SAAP,CAAiBjC,GAAG,CAACsB,IAAJ,CAASlB,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAjB,EAAuC;UAAEY,GAAG,EAAE,KAAP;UAAcC,MAAM,EAAE;QAAtB,CAAvC;MACD,CAbG,CAAJ;MAeApB,IAAI,CAAC,2BAAD,EAA8B,MAAM;QACtCP,MAAM,CAACoB,WAAP,CAAmBE,MAAnB,EAA2B,KAA3B;MACD,CAFG,CAAJ;MAIAf,IAAI,CAAC,cAAD,EAAiB,MAAM;QACzBP,MAAM,CAAC4C,MAAP,CAAcrB,KAAd;MACD,CAFG,CAAJ;IAGD,CAvCI,CAAL;IAyCAjB,KAAK,CAAC,eAAD,EAAkB,MAAM;MAC3B,IAAIgB,MAAJ,EAAYC,KAAZ,EAAmBC,OAAnB;MAEAX,KAAK,CAACY,IAAI,IAAI;QACZd,OAAO,CAACG,KAAR,CAAc,CAAd,IAAmBV,OAAO,CAACyC,MAAR,CAAe,KAAf,CAAnB;QACArB,OAAO,GAAG,EAAV;QACAZ,MAAM,CAAC,CAACgB,GAAD,EAAMC,GAAN,KAAc;UACnBN,KAAK,GAAGK,GAAR;UACAN,MAAM,GAAGO,GAAT;UACAJ,IAAI;QACL,CAJK,EAIHD,OAJG,CAAN;MAKD,CARI,CAAL;MAUAjB,IAAI,CAAC,uBAAD,EAA0B,MAAM;QAClCP,MAAM,CAACoB,WAAP,CAAmBV,GAAG,CAACW,MAAJ,CAAWP,KAA9B,EAAqC,CAArC;MACD,CAFG,CAAJ;MAIAP,IAAI,CAAC,+BAAD,EAAkC,MAAM;QAC1CP,MAAM,CAAC8B,WAAP,CAAmBR,MAAnB;MACD,CAFG,CAAJ;MAIAf,IAAI,CAAC,QAAD,EAAW,MAAM;QACnBP,MAAM,CAACoB,WAAP,CAAmBG,KAAnB,EAA0B,KAA1B;MACD,CAFG,CAAJ;IAGD,CAxBI,CAAL;EAyBD,CAvGI,CAAL;AAwGD,CAnHI,CAAL"},"metadata":{},"sourceType":"script"}