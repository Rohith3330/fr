{"ast":null,"code":"/**\n * @fileoverview Stylish reporter\n * @author Sindre Sorhus\n */\n\"use strict\";\n\nconst chalk = require(\"chalk\"),\n      stripAnsi = require(\"strip-ansi\"),\n      table = require(\"text-table\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Given a word and a count, append an s if count is not one.\n * @param {string} word A word in its singular form.\n * @param {int} count A number controlling whether word should be pluralized.\n * @returns {string} The original word with an s on the end if count is not one.\n */\n\n\nfunction pluralize(word, count) {\n  return count === 1 ? word : `${word}s`;\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nmodule.exports = function (results) {\n  let output = \"\\n\",\n      errorCount = 0,\n      warningCount = 0,\n      fixableErrorCount = 0,\n      fixableWarningCount = 0,\n      summaryColor = \"yellow\";\n  results.forEach(result => {\n    const messages = result.messages;\n\n    if (messages.length === 0) {\n      return;\n    }\n\n    errorCount += result.errorCount;\n    warningCount += result.warningCount;\n    fixableErrorCount += result.fixableErrorCount;\n    fixableWarningCount += result.fixableWarningCount;\n    output += `${chalk.underline(result.filePath)}\\n`;\n    output += `${table(messages.map(message => {\n      let messageType;\n\n      if (message.fatal || message.severity === 2) {\n        messageType = chalk.red(\"error\");\n        summaryColor = \"red\";\n      } else {\n        messageType = chalk.yellow(\"warning\");\n      }\n\n      return [\"\", message.line || 0, message.column || 0, messageType, message.message.replace(/([^ ])\\.$/u, \"$1\"), chalk.dim(message.ruleId || \"\")];\n    }), {\n      align: [\"\", \"r\", \"l\"],\n\n      stringLength(str) {\n        return stripAnsi(str).length;\n      }\n\n    }).split(\"\\n\").map(el => el.replace(/(\\d+)\\s+(\\d+)/u, (m, p1, p2) => chalk.dim(`${p1}:${p2}`))).join(\"\\n\")}\\n\\n`;\n  });\n  const total = errorCount + warningCount;\n\n  if (total > 0) {\n    output += chalk[summaryColor].bold([\"\\u2716 \", total, pluralize(\" problem\", total), \" (\", errorCount, pluralize(\" error\", errorCount), \", \", warningCount, pluralize(\" warning\", warningCount), \")\\n\"].join(\"\"));\n\n    if (fixableErrorCount > 0 || fixableWarningCount > 0) {\n      output += chalk[summaryColor].bold([\"  \", fixableErrorCount, pluralize(\" error\", fixableErrorCount), \" and \", fixableWarningCount, pluralize(\" warning\", fixableWarningCount), \" potentially fixable with the `--fix` option.\\n\"].join(\"\"));\n    }\n  } // Resets output color, for prevent change on top level\n\n\n  return total > 0 ? chalk.reset(output) : \"\";\n};","map":{"version":3,"names":["chalk","require","stripAnsi","table","pluralize","word","count","module","exports","results","output","errorCount","warningCount","fixableErrorCount","fixableWarningCount","summaryColor","forEach","result","messages","length","underline","filePath","map","message","messageType","fatal","severity","red","yellow","line","column","replace","dim","ruleId","align","stringLength","str","split","el","m","p1","p2","join","total","bold","reset"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/cli-engine/formatters/stylish.js"],"sourcesContent":["/**\n * @fileoverview Stylish reporter\n * @author Sindre Sorhus\n */\n\"use strict\";\n\nconst chalk = require(\"chalk\"),\n    stripAnsi = require(\"strip-ansi\"),\n    table = require(\"text-table\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Given a word and a count, append an s if count is not one.\n * @param {string} word A word in its singular form.\n * @param {int} count A number controlling whether word should be pluralized.\n * @returns {string} The original word with an s on the end if count is not one.\n */\nfunction pluralize(word, count) {\n    return (count === 1 ? word : `${word}s`);\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = function(results) {\n\n    let output = \"\\n\",\n        errorCount = 0,\n        warningCount = 0,\n        fixableErrorCount = 0,\n        fixableWarningCount = 0,\n        summaryColor = \"yellow\";\n\n    results.forEach(result => {\n        const messages = result.messages;\n\n        if (messages.length === 0) {\n            return;\n        }\n\n        errorCount += result.errorCount;\n        warningCount += result.warningCount;\n        fixableErrorCount += result.fixableErrorCount;\n        fixableWarningCount += result.fixableWarningCount;\n\n        output += `${chalk.underline(result.filePath)}\\n`;\n\n        output += `${table(\n            messages.map(message => {\n                let messageType;\n\n                if (message.fatal || message.severity === 2) {\n                    messageType = chalk.red(\"error\");\n                    summaryColor = \"red\";\n                } else {\n                    messageType = chalk.yellow(\"warning\");\n                }\n\n                return [\n                    \"\",\n                    message.line || 0,\n                    message.column || 0,\n                    messageType,\n                    message.message.replace(/([^ ])\\.$/u, \"$1\"),\n                    chalk.dim(message.ruleId || \"\")\n                ];\n            }),\n            {\n                align: [\"\", \"r\", \"l\"],\n                stringLength(str) {\n                    return stripAnsi(str).length;\n                }\n            }\n        ).split(\"\\n\").map(el => el.replace(/(\\d+)\\s+(\\d+)/u, (m, p1, p2) => chalk.dim(`${p1}:${p2}`))).join(\"\\n\")}\\n\\n`;\n    });\n\n    const total = errorCount + warningCount;\n\n    if (total > 0) {\n        output += chalk[summaryColor].bold([\n            \"\\u2716 \", total, pluralize(\" problem\", total),\n            \" (\", errorCount, pluralize(\" error\", errorCount), \", \",\n            warningCount, pluralize(\" warning\", warningCount), \")\\n\"\n        ].join(\"\"));\n\n        if (fixableErrorCount > 0 || fixableWarningCount > 0) {\n            output += chalk[summaryColor].bold([\n                \"  \", fixableErrorCount, pluralize(\" error\", fixableErrorCount), \" and \",\n                fixableWarningCount, pluralize(\" warning\", fixableWarningCount),\n                \" potentially fixable with the `--fix` option.\\n\"\n            ].join(\"\"));\n        }\n    }\n\n    // Resets output color, for prevent change on top level\n    return total > 0 ? chalk.reset(output) : \"\";\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}