{"ast":null,"code":"'use strict';\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: (0, _docsUrl2['default'])('no-default-export')\n    },\n    schema: []\n  },\n  create: function () {\n    function create(context) {\n      // ignore non-modules\n      if (context.parserOptions.sourceType !== 'module') {\n        return {};\n      }\n\n      var preferNamed = 'Prefer named exports.';\n\n      var noAliasDefault = function () {\n        function noAliasDefault(_ref) {\n          var local = _ref.local;\n          return 'Do not alias `' + String(local.name) + '` as `default`. Just export `' + String(local.name) + '` itself instead.';\n        }\n\n        return noAliasDefault;\n      }();\n\n      return {\n        ExportDefaultDeclaration: function () {\n          function ExportDefaultDeclaration(node) {\n            var _ref2 = context.getSourceCode().getFirstTokens(node)[1] || {},\n                loc = _ref2.loc;\n\n            context.report({\n              node: node,\n              message: preferNamed,\n              loc: loc\n            });\n          }\n\n          return ExportDefaultDeclaration;\n        }(),\n        ExportNamedDeclaration: function () {\n          function ExportNamedDeclaration(node) {\n            node.specifiers.filter(function (specifier) {\n              return (specifier.exported.name || specifier.exported.value) === 'default';\n            }).forEach(function (specifier) {\n              var _ref3 = context.getSourceCode().getFirstTokens(node)[1] || {},\n                  loc = _ref3.loc;\n\n              if (specifier.type === 'ExportDefaultSpecifier') {\n                context.report({\n                  node: node,\n                  message: preferNamed,\n                  loc: loc\n                });\n              } else if (specifier.type === 'ExportSpecifier') {\n                context.report({\n                  node: node,\n                  message: noAliasDefault(specifier),\n                  loc: loc\n                });\n              }\n            });\n          }\n\n          return ExportNamedDeclaration;\n        }()\n      };\n    }\n\n    return create;\n  }()\n};","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;AAEAA,OAAOC,OAAPD,GAAiB;EACfE,MAAM;IACJC,MAAM,YADF;IAEJC,MAAM;MACJC,KAAK,0BAAQ,mBAAR;IADD,CAFF;IAKJC,QAAQ;EALJ,CADS;EASfC,MATe;IAAA,gBASRC,OATQ,EASC;MACd;MACA,IAAIA,QAAQC,aAARD,CAAsBE,UAAtBF,KAAqC,QAAzC,EAAmD;QACjD,OAAO,EAAP;MACD;;MAED,IAAMG,cAAc,uBAApB;;MACA,IAAMC;QAAiB,SAAjBA,cAAiB;UAAA,IAAGC,KAAH,QAAGA,KAAH;UAAA,iCAAiCA,MAAMC,IAAvC,6CAA+ED,MAAMC,IAArF;QAAjB;;QAAA;MAAA,GAAN;;MAEA,OAAO;QACLC,wBADK;UAAA,kCACoBC,IADpB,EAC0B;YAAA,YACbR,QAAQS,aAART,GAAwBU,cAAxBV,CAAuCQ,IAAvCR,EAA6C,CAA7CA,KAAmD,EADtC;YAAA,IACrBW,GADqB,SACrBA,GADqB;;YAE7BX,QAAQY,MAARZ,CAAe;cAAEQ,UAAF;cAAQK,SAASV,WAAjB;cAA8BQ;YAA9B,CAAfX;UAHG;;UAAA;QAAA;QAMLc,sBANK;UAAA,gCAMkBN,IANlB,EAMwB;YAC3BA,KAAKO,UAALP,CAAgBQ,MAAhBR,CAAuB;cAAA,OAAa,CAACS,UAAUC,QAAVD,CAAmBX,IAAnBW,IAA2BA,UAAUC,QAAVD,CAAmBE,KAA/C,MAA0D,SAAvE;YAAvB,GAAyGC,OAAzGZ,CAAiH,qBAAa;cAAA,YAC5GR,QAAQS,aAART,GAAwBU,cAAxBV,CAAuCQ,IAAvCR,EAA6C,CAA7CA,KAAmD,EADyD;cAAA,IACpHW,GADoH,SACpHA,GADoH;;cAE5H,IAAIM,UAAUtB,IAAVsB,KAAmB,wBAAvB,EAAiD;gBAC/CjB,QAAQY,MAARZ,CAAe;kBAAEQ,UAAF;kBAAQK,SAASV,WAAjB;kBAA8BQ;gBAA9B,CAAfX;cADF,OAEO,IAAIiB,UAAUtB,IAAVsB,KAAmB,iBAAvB,EAA0C;gBAC/CjB,QAAQY,MAARZ,CAAe;kBAAEQ,UAAF;kBAAQK,SAAST,eAAea,SAAfb,CAAjB;kBAA4CO;gBAA5C,CAAfX;cACD;YANH;UAPG;;UAAA;QAAA;MAAA,CAAP;IAlBa;;IAAA;EAAA;AAAA,CAAjBR","names":["module","exports","meta","type","docs","url","schema","create","context","parserOptions","sourceType","preferNamed","noAliasDefault","local","name","ExportDefaultDeclaration","node","getSourceCode","getFirstTokens","loc","report","message","ExportNamedDeclaration","specifiers","filter","specifier","exported","value","forEach"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\no-default-export.js"],"sourcesContent":["import docsUrl from '../docsUrl';\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: docsUrl('no-default-export'),\n    },\n    schema: [],\n  },\n\n  create(context) {\n    // ignore non-modules\n    if (context.parserOptions.sourceType !== 'module') {\n      return {};\n    }\n\n    const preferNamed = 'Prefer named exports.';\n    const noAliasDefault = ({ local }) => `Do not alias \\`${local.name}\\` as \\`default\\`. Just export \\`${local.name}\\` itself instead.`;\n\n    return {\n      ExportDefaultDeclaration(node) {\n        const { loc } = context.getSourceCode().getFirstTokens(node)[1] || {};\n        context.report({ node, message: preferNamed, loc });\n      },\n\n      ExportNamedDeclaration(node) {\n        node.specifiers.filter(specifier => (specifier.exported.name || specifier.exported.value) === 'default').forEach(specifier => {\n          const { loc } = context.getSourceCode().getFirstTokens(node)[1] || {};\n          if (specifier.type === 'ExportDefaultSpecifier') {\n            context.report({ node, message: preferNamed, loc });\n          } else if (specifier.type === 'ExportSpecifier') {\n            context.report({ node, message: noAliasDefault(specifier), loc  });\n          }\n        });\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}