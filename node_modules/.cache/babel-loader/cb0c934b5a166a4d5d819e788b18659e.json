{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'no-array-constructor',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow generic `Array` constructors',\n      recommended: 'error',\n      extendsBaseRule: true\n    },\n    fixable: 'code',\n    messages: {\n      useLiteral: 'The array literal notation [] is preferable.'\n    },\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    /**\n     * Disallow construction of dense arrays using the Array constructor\n     * @param node node to evaluate\n     */\n    function check(node) {\n      if (node.arguments.length !== 1 && node.callee.type === utils_1.AST_NODE_TYPES.Identifier && node.callee.name === 'Array' && !node.typeParameters && !util.isOptionalCallExpression(node)) {\n        context.report({\n          node,\n          messageId: 'useLiteral',\n\n          fix(fixer) {\n            if (node.arguments.length === 0) {\n              return fixer.replaceText(node, '[]');\n            }\n\n            const fullText = context.getSourceCode().getText(node);\n            const preambleLength = node.callee.range[1] - node.range[0];\n            return fixer.replaceText(node, `[${fullText.slice(preambleLength + 1, -1)}]`);\n          }\n\n        });\n      }\n    }\n\n    return {\n      CallExpression: check,\n      NewExpression: check\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AAEAA,kBAAeC,IAAI,CAACC,UAAL,CAAgB;EAC7BC,IAAI,EAAE,sBADuB;EAE7BC,IAAI,EAAE;IACJC,IAAI,EAAE,YADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EAAE,uCADT;MAEJC,WAAW,EAAE,OAFT;MAGJC,eAAe,EAAE;IAHb,CAFF;IAOJC,OAAO,EAAE,MAPL;IAQJC,QAAQ,EAAE;MACRC,UAAU,EAAE;IADJ,CARN;IAWJC,MAAM,EAAE;EAXJ,CAFuB;EAe7BC,cAAc,EAAE,EAfa;;EAgB7BC,MAAM,CAACC,OAAD,EAAQ;IACZ;;;;IAIA,SAASC,KAAT,CACEC,IADF,EACwD;MAEtD,IACEA,IAAI,CAACC,SAAL,CAAeC,MAAf,KAA0B,CAA1B,IACAF,IAAI,CAACG,MAAL,CAAYhB,IAAZ,KAAqBiB,uBAAeC,UADpC,IAEAL,IAAI,CAACG,MAAL,CAAYlB,IAAZ,KAAqB,OAFrB,IAGA,CAACe,IAAI,CAACM,cAHN,IAIA,CAACvB,IAAI,CAACwB,wBAAL,CAA8BP,IAA9B,CALH,EAME;QACAF,OAAO,CAACU,MAAR,CAAe;UACbR,IADa;UAEbS,SAAS,EAAE,YAFE;;UAGbC,GAAG,CAACC,KAAD,EAAM;YACP,IAAIX,IAAI,CAACC,SAAL,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;cAC/B,OAAOS,KAAK,CAACC,WAAN,CAAkBZ,IAAlB,EAAwB,IAAxB,CAAP;YACD;;YACD,MAAMa,QAAQ,GAAGf,OAAO,CAACgB,aAAR,GAAwBC,OAAxB,CAAgCf,IAAhC,CAAjB;YACA,MAAMgB,cAAc,GAAGhB,IAAI,CAACG,MAAL,CAAYc,KAAZ,CAAkB,CAAlB,IAAuBjB,IAAI,CAACiB,KAAL,CAAW,CAAX,CAA9C;YAEA,OAAON,KAAK,CAACC,WAAN,CACLZ,IADK,EAEL,IAAIa,QAAQ,CAACK,KAAT,CAAeF,cAAc,GAAG,CAAhC,EAAmC,CAAC,CAApC,CAAsC,GAFrC,CAAP;UAID;;QAdY,CAAf;MAgBD;IACF;;IAED,OAAO;MACLG,cAAc,EAAEpB,KADX;MAELqB,aAAa,EAAErB;IAFV,CAAP;EAID;;AAtD4B,CAAhB,CAAf","names":["exports","util","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","messages","useLiteral","schema","defaultOptions","create","context","check","node","arguments","length","callee","utils_1","Identifier","typeParameters","isOptionalCallExpression","report","messageId","fix","fixer","replaceText","fullText","getSourceCode","getText","preambleLength","range","slice","CallExpression","NewExpression"],"sources":["../../src/rules/no-array-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}