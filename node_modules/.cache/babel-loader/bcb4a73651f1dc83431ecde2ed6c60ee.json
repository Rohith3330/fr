{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\n\nfunction getDef() {\n  return {\n    keyword: \"deepRequired\",\n    type: \"object\",\n    schemaType: \"array\",\n\n    code(ctx) {\n      const {\n        schema,\n        data\n      } = ctx;\n      const props = schema.map(jp => (0, codegen_1._)`(${getData(jp)}) === undefined`);\n      ctx.fail((0, codegen_1.or)(...props));\n\n      function getData(jsonPointer) {\n        if (jsonPointer === \"\") throw new Error(\"empty JSON pointer not allowed\");\n        const segments = jsonPointer.split(\"/\");\n        let x = data;\n        const xs = segments.map((s, i) => i ? x = (0, codegen_1._)`${x}${(0, codegen_1.getProperty)(unescapeJPSegment(s))}` : x);\n        return (0, codegen_1.and)(...xs);\n      }\n    },\n\n    metaSchema: {\n      type: \"array\",\n      items: {\n        type: \"string\",\n        format: \"json-pointer\"\n      }\n    }\n  };\n}\n\nexports.default = getDef;\n\nfunction unescapeJPSegment(s) {\n  return s.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\n\nmodule.exports = getDef;","map":{"version":3,"mappings":";;;;;;AACA;;AAEA,SAAwBA,MAAxB,GAA8B;EAC5B,OAAO;IACLC,OAAO,EAAE,cADJ;IAELC,IAAI,EAAE,QAFD;IAGLC,UAAU,EAAE,OAHP;;IAILC,IAAI,CAACC,GAAD,EAAgB;MAClB,MAAM;QAACC,MAAD;QAASC;MAAT,IAAiBF,GAAvB;MACA,MAAMG,KAAK,GAAIF,MAAmB,CAACG,GAApB,CAAyBC,EAAD,IAAgB,gBAAC,IAAIC,OAAO,CAACD,EAAD,CAAI,iBAAxD,CAAf;MACAL,GAAG,CAACO,IAAJ,CAAS,kBAAG,GAAGJ,KAAN,CAAT;;MAEA,SAASG,OAAT,CAAiBE,WAAjB,EAAoC;QAClC,IAAIA,WAAW,KAAK,EAApB,EAAwB,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;QACxB,MAAMC,QAAQ,GAAGF,WAAW,CAACG,KAAZ,CAAkB,GAAlB,CAAjB;QACA,IAAIC,CAAC,GAASV,IAAd;QACA,MAAMW,EAAE,GAAGH,QAAQ,CAACN,GAAT,CAAa,CAACU,CAAD,EAAIC,CAAJ,KACtBA,CAAC,GAAIH,CAAC,GAAG,gBAAC,GAAGA,CAAC,GAAG,2BAAYI,iBAAiB,CAACF,CAAD,CAA7B,CAAiC,EAAjD,GAAuDF,CAD/C,CAAX;QAGA,OAAO,mBAAI,GAAGC,EAAP,CAAP;MACD;IACF,CAlBI;;IAmBLI,UAAU,EAAE;MACVpB,IAAI,EAAE,OADI;MAEVqB,KAAK,EAAE;QAACrB,IAAI,EAAE,QAAP;QAAiBsB,MAAM,EAAE;MAAzB;IAFG;EAnBP,CAAP;AAwBD;;AAzBDC;;AA2BA,SAASJ,iBAAT,CAA2BF,CAA3B,EAAoC;EAClC,OAAOA,CAAC,CAACO,OAAF,CAAU,KAAV,EAAiB,GAAjB,EAAsBA,OAAtB,CAA8B,KAA9B,EAAqC,GAArC,CAAP;AACD;;AAEDC,MAAM,CAACF,OAAP,GAAiBzB,MAAjB","names":["getDef","keyword","type","schemaType","code","ctx","schema","data","props","map","jp","getData","fail","jsonPointer","Error","segments","split","x","xs","s","i","unescapeJPSegment","metaSchema","items","format","exports","replace","module"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\mini-css-extract-plugin\\node_modules\\ajv-keywords\\src\\definitions\\deepRequired.ts"],"sourcesContent":["import type {CodeKeywordDefinition, KeywordCxt} from \"ajv\"\nimport {_, or, and, getProperty, Code} from \"ajv/dist/compile/codegen\"\n\nexport default function getDef(): CodeKeywordDefinition {\n  return {\n    keyword: \"deepRequired\",\n    type: \"object\",\n    schemaType: \"array\",\n    code(ctx: KeywordCxt) {\n      const {schema, data} = ctx\n      const props = (schema as string[]).map((jp: string) => _`(${getData(jp)}) === undefined`)\n      ctx.fail(or(...props))\n\n      function getData(jsonPointer: string): Code {\n        if (jsonPointer === \"\") throw new Error(\"empty JSON pointer not allowed\")\n        const segments = jsonPointer.split(\"/\")\n        let x: Code = data\n        const xs = segments.map((s, i) =>\n          i ? (x = _`${x}${getProperty(unescapeJPSegment(s))}`) : x\n        )\n        return and(...xs)\n      }\n    },\n    metaSchema: {\n      type: \"array\",\n      items: {type: \"string\", format: \"json-pointer\"},\n    },\n  }\n}\n\nfunction unescapeJPSegment(s: string): string {\n  return s.replace(/~1/g, \"/\").replace(/~0/g, \"~\")\n}\n\nmodule.exports = getDef\n"]},"metadata":{},"sourceType":"script"}