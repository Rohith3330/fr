{"ast":null,"code":"var assert = require('assert');\n\nvar Int64 = require('./Int64');\n\nexports.setUp = function (done) {\n  done();\n};\n\nexports.testBufferToString = function (test) {\n  var int = new Int64(0xfffaffff, 0xfffff700);\n  test.equal(int.toBuffer().toString('hex'), 'fffafffffffff700', 'Buffer to string conversion');\n  test.done();\n};\n\nexports.testBufferCopy = function (test) {\n  var src = new Int64(0xfffaffff, 0xfffff700);\n  var dst = new Buffer(8);\n  src.copy(dst);\n  test.deepEqual(dst, new Buffer([0xff, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x00]), 'Copy to buffer');\n  test.done();\n};\n\nexports.testValueRepresentation = function (test) {\n  var args = [[0], '0000000000000000', 0, [1], '0000000000000001', 1, [-1], 'ffffffffffffffff', -1, [1e18], '0de0b6b3a7640000', 1e18, ['0001234500654321'], '0001234500654321', 0x1234500654321, ['0ff1234500654321'], '0ff1234500654321', 0xff1234500654300, // Imprecise!\n  [0xff12345, 0x654321], '0ff1234500654321', 0xff1234500654300, // Imprecise!\n  [0xfffaffff, 0xfffff700], 'fffafffffffff700', -0x5000000000900, [0xafffffff, 0xfffff700], 'affffffffffff700', -0x5000000000000800, // Imprecise!\n  ['0x0000123450654321'], '0000123450654321', 0x123450654321, ['0xFFFFFFFFFFFFFFFF'], 'ffffffffffffffff', -1]; // Test constructor argments\n\n  for (var i = 0; i < args.length; i += 3) {\n    var a = args[i],\n        octets = args[i + 1],\n        number = args[i + 2]; // Create instance\n\n    var x = new Int64();\n    Int64.apply(x, a);\n    test.equal(x.toOctetString(), octets, 'Constuctor with ' + args.join(', '));\n    test.equal(x.toNumber(true), number);\n  }\n\n  test.done();\n};\n\nexports.testBufferOffsets = function (test) {\n  var sourceBuffer = new Buffer(16);\n  sourceBuffer.writeUInt32BE(0xfffaffff, 2);\n  sourceBuffer.writeUInt32BE(0xfffff700, 6);\n  var int = new Int64(sourceBuffer, 2);\n  assert.equal(int.toBuffer().toString('hex'), 'fffafffffffff700', 'Construct from offset');\n  var targetBuffer = new Buffer(16);\n  int.copy(targetBuffer, 4);\n  assert.equal(targetBuffer.slice(4, 12).toString('hex'), 'fffafffffffff700', 'Copy to offset');\n  test.done();\n};\n\nexports.testInstanceOf = function (test) {\n  var x = new Int64();\n  assert(x instanceof Int64, 'Variable is not instance of Int64');\n  var y = {};\n  assert(!(y instanceof Int64), 'Object is an instance of Int64');\n  test.done();\n};\n\nexports.testCompare = function (test) {\n  var intMin = new Int64(2147483648, 0);\n  var intMinPlusOne = new Int64(2147483648, 1);\n  var zero = new Int64(0, 0);\n  var intMaxMinusOne = new Int64(2147483647, 4294967294);\n  var intMax = new Int64(2147483647, 4294967295);\n  assert(intMin.compare(intMinPlusOne) < 0, \"INT64_MIN is not less than INT64_MIN+1\");\n  assert(intMin.compare(zero) < 0, \"INT64_MIN is not less than 0\");\n  assert(intMin.compare(zero) < intMax, \"INT64_MIN is not less than INT64_MAX\");\n  assert(intMax.compare(intMaxMinusOne) > 0, \"INT64_MAX is not greater than INT64_MAX-1\");\n  assert(intMax.compare(zero) > 0, \"INT64_MAX is not greater than 0\");\n  assert(intMax.compare(intMin) > 0, \"INT64_MAX is not greater than INT_MIN\");\n  test.done();\n};\n\nexports.testEquals = function (test) {\n  var intMin = new Int64(2147483648, 0);\n  var zero = new Int64(0, 0);\n  var intMax = new Int64(2147483647, 4294967295);\n  assert(intMin.equals(intMin), \"INT64_MIN !== INT64_MIN\");\n  assert(intMax.equals(intMax), \"INT64_MAX !== INT64_MAX\");\n  assert(zero.equals(zero), \"0 !== 0\");\n  assert(!intMin.equals(zero), \"INT64_MIN === 0\");\n  assert(!intMin.equals(intMax), \"INT64_MIN === INT64_MAX\");\n  assert(!intMax.equals(zero), \"INT64_MAX === 0\");\n  assert(!intMax.equals(intMin), \"INT64_MAX === INT64_MIN\");\n  test.done();\n};","map":{"version":3,"names":["assert","require","Int64","exports","setUp","done","testBufferToString","test","int","equal","toBuffer","toString","testBufferCopy","src","dst","Buffer","copy","deepEqual","testValueRepresentation","args","i","length","a","octets","number","x","apply","toOctetString","join","toNumber","testBufferOffsets","sourceBuffer","writeUInt32BE","targetBuffer","slice","testInstanceOf","y","testCompare","intMin","intMinPlusOne","zero","intMaxMinusOne","intMax","compare","testEquals","equals"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/node-int64/test.js"],"sourcesContent":["var assert = require('assert');\nvar Int64 = require('./Int64');\n\nexports.setUp = function(done) {\n  done();\n};\n\nexports.testBufferToString = function(test) {\n  var int = new Int64(0xfffaffff, 0xfffff700);\n  test.equal(\n    int.toBuffer().toString('hex'),\n    'fffafffffffff700',\n    'Buffer to string conversion'\n  );\n  test.done();\n};\n\nexports.testBufferCopy = function(test) {\n  var src = new Int64(0xfffaffff, 0xfffff700);\n  var dst = new Buffer(8);\n\n  src.copy(dst);\n\n  test.deepEqual(\n    dst,\n    new Buffer([0xff, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x00]),\n    'Copy to buffer'\n  );\n\n  test.done();\n};\n\nexports.testValueRepresentation = function(test) {\n  var args = [\n    [0],                     '0000000000000000', 0,\n    [1],                     '0000000000000001', 1,\n    [-1],                    'ffffffffffffffff', -1,\n    [1e18],                  '0de0b6b3a7640000', 1e18,\n    ['0001234500654321'],    '0001234500654321',     0x1234500654321,\n    ['0ff1234500654321'],    '0ff1234500654321',   0xff1234500654300, // Imprecise!\n    [0xff12345, 0x654321],   '0ff1234500654321',   0xff1234500654300, // Imprecise!\n    [0xfffaffff, 0xfffff700],'fffafffffffff700',    -0x5000000000900,\n    [0xafffffff, 0xfffff700],'affffffffffff700', -0x5000000000000800, // Imprecise!\n    ['0x0000123450654321'],  '0000123450654321',      0x123450654321,\n    ['0xFFFFFFFFFFFFFFFF'],  'ffffffffffffffff', -1\n  ];\n\n  // Test constructor argments\n\n  for (var i = 0; i < args.length; i += 3) {\n    var a = args[i], octets = args[i+1], number = args[i+2];\n\n    // Create instance\n    var x = new Int64();\n    Int64.apply(x, a);\n\n    test.equal(x.toOctetString(), octets, 'Constuctor with ' + args.join(', '));\n    test.equal(x.toNumber(true), number);\n  }\n\n  test.done();\n};\n\nexports.testBufferOffsets = function(test) {\n  var sourceBuffer = new Buffer(16);\n  sourceBuffer.writeUInt32BE(0xfffaffff, 2);\n  sourceBuffer.writeUInt32BE(0xfffff700, 6);\n\n  var int = new Int64(sourceBuffer, 2);\n  assert.equal(\n    int.toBuffer().toString('hex'), 'fffafffffffff700',\n    'Construct from offset'\n  );\n\n  var targetBuffer = new Buffer(16);\n  int.copy(targetBuffer, 4);\n  assert.equal(\n    targetBuffer.slice(4, 12).toString('hex'), 'fffafffffffff700',\n    'Copy to offset'\n  );\n\n  test.done();\n};\n\nexports.testInstanceOf = function(test) {\n  var x = new Int64();\n  assert(x instanceof Int64, 'Variable is not instance of Int64');\n  var y = {};\n  assert(!(y instanceof Int64), 'Object is an instance of Int64');\n  test.done();\n};\n\nexports.testCompare = function(test) {\n  var intMin = new Int64(2147483648, 0);\n  var intMinPlusOne = new Int64(2147483648, 1);\n  var zero = new Int64(0, 0);\n  var intMaxMinusOne = new Int64(2147483647, 4294967294);\n  var intMax = new Int64(2147483647, 4294967295);\n  assert(intMin.compare(intMinPlusOne) < 0, \"INT64_MIN is not less than INT64_MIN+1\");\n  assert(intMin.compare(zero) < 0, \"INT64_MIN is not less than 0\");\n  assert(intMin.compare(zero) < intMax, \"INT64_MIN is not less than INT64_MAX\");\n  assert(intMax.compare(intMaxMinusOne) > 0, \"INT64_MAX is not greater than INT64_MAX-1\");\n  assert(intMax.compare(zero) > 0, \"INT64_MAX is not greater than 0\");\n  assert(intMax.compare(intMin) > 0, \"INT64_MAX is not greater than INT_MIN\");\n  test.done();\n};\n\nexports.testEquals = function(test) {\n  var intMin = new Int64(2147483648, 0);\n  var zero = new Int64(0, 0);\n  var intMax = new Int64(2147483647, 4294967295);\n  assert(intMin.equals(intMin), \"INT64_MIN !== INT64_MIN\");\n  assert(intMax.equals(intMax), \"INT64_MAX !== INT64_MAX\");\n  assert(zero.equals(zero), \"0 !== 0\");\n  assert(!intMin.equals(zero), \"INT64_MIN === 0\");\n  assert(!intMin.equals(intMax), \"INT64_MIN === INT64_MAX\");\n  assert(!intMax.equals(zero), \"INT64_MAX === 0\");\n  assert(!intMax.equals(intMin), \"INT64_MAX === INT64_MIN\");\n  test.done();\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}