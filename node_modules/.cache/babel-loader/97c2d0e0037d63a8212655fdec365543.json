{"ast":null,"code":"'use strict';\n\nconst {\n  list\n} = require('postcss');\n\nconst {\n  unit\n} = require('postcss-value-parser');\n\nconst stylehacks = require('stylehacks');\n\nconst canMerge = require('../canMerge.js');\n\nconst getDecls = require('../getDecls.js');\n\nconst getValue = require('../getValue.js');\n\nconst mergeRules = require('../mergeRules.js');\n\nconst insertCloned = require('../insertCloned.js');\n\nconst isCustomProp = require('../isCustomProp.js');\n\nconst canExplode = require('../canExplode.js');\n\nconst properties = ['column-width', 'column-count'];\nconst auto = 'auto';\nconst inherit = 'inherit';\n/**\n * Normalize a columns shorthand definition. Both of the longhand\n * properties' initial values are 'auto', and as per the spec,\n * omitted values are set to their initial values. Thus, we can\n * remove any 'auto' definition when there are two values.\n *\n * Specification link: https://www.w3.org/TR/css3-multicol/\n *\n * @param {[string, string]} values\n * @return {string}\n */\n\nfunction normalize(values) {\n  if (values[0].toLowerCase() === auto) {\n    return values[1];\n  }\n\n  if (values[1].toLowerCase() === auto) {\n    return values[0];\n  }\n\n  if (values[0].toLowerCase() === inherit && values[1].toLowerCase() === inherit) {\n    return inherit;\n  }\n\n  return values.join(' ');\n}\n/**\n * @param {import('postcss').Rule} rule\n * @return {void}\n */\n\n\nfunction explode(rule) {\n  rule.walkDecls(/^columns$/i, decl => {\n    if (!canExplode(decl)) {\n      return;\n    }\n\n    if (stylehacks.detect(decl)) {\n      return;\n    }\n\n    let values = list.space(decl.value);\n\n    if (values.length === 1) {\n      values.push(auto);\n    }\n\n    values.forEach((value, i) => {\n      let prop = properties[1];\n      const dimension = unit(value);\n\n      if (value.toLowerCase() === auto) {\n        prop = properties[i];\n      } else if (dimension && dimension.unit !== '') {\n        prop = properties[0];\n      }\n\n      insertCloned(\n      /** @type {import('postcss').Rule} */\n      decl.parent, decl, {\n        prop,\n        value\n      });\n    });\n    decl.remove();\n  });\n}\n/**\n * @param {import('postcss').Rule} rule\n * @return {void}\n */\n\n\nfunction cleanup(rule) {\n  let decls = getDecls(rule, ['columns'].concat(properties));\n\n  while (decls.length) {\n    const lastNode = decls[decls.length - 1]; // remove properties of lower precedence\n\n    const lesser = decls.filter(node => !stylehacks.detect(lastNode) && !stylehacks.detect(node) && node !== lastNode && node.important === lastNode.important && lastNode.prop === 'columns' && node.prop !== lastNode.prop);\n\n    for (const node of lesser) {\n      node.remove();\n    }\n\n    decls = decls.filter(node => !lesser.includes(node)); // get duplicate properties\n\n    let duplicates = decls.filter(node => !stylehacks.detect(lastNode) && !stylehacks.detect(node) && node !== lastNode && node.important === lastNode.important && node.prop === lastNode.prop && !(!isCustomProp(node) && isCustomProp(lastNode)));\n\n    for (const node of duplicates) {\n      node.remove();\n    }\n\n    decls = decls.filter(node => node !== lastNode && !duplicates.includes(node));\n  }\n}\n/**\n * @param {import('postcss').Rule} rule\n * @return {void}\n */\n\n\nfunction merge(rule) {\n  mergeRules(rule, properties, (rules, lastNode) => {\n    if (canMerge(rules) && !rules.some(stylehacks.detect)) {\n      insertCloned(\n      /** @type {import('postcss').Rule} */\n      lastNode.parent, lastNode, {\n        prop: 'columns',\n        value: normalize(\n        /** @type [string, string] */\n        rules.map(getValue))\n      });\n\n      for (const node of rules) {\n        node.remove();\n      }\n\n      return true;\n    }\n\n    return false;\n  });\n  cleanup(rule);\n}\n\nmodule.exports = {\n  explode,\n  merge\n};","map":{"version":3,"names":["list","require","unit","stylehacks","canMerge","getDecls","getValue","mergeRules","insertCloned","isCustomProp","canExplode","properties","auto","inherit","normalize","values","toLowerCase","join","explode","rule","walkDecls","decl","detect","space","value","length","push","forEach","i","prop","dimension","parent","remove","cleanup","decls","concat","lastNode","lesser","filter","node","important","includes","duplicates","merge","rules","some","map","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-merge-longhand/src/lib/decl/columns.js"],"sourcesContent":["'use strict';\nconst { list } = require('postcss');\nconst { unit } = require('postcss-value-parser');\nconst stylehacks = require('stylehacks');\nconst canMerge = require('../canMerge.js');\nconst getDecls = require('../getDecls.js');\nconst getValue = require('../getValue.js');\nconst mergeRules = require('../mergeRules.js');\nconst insertCloned = require('../insertCloned.js');\nconst isCustomProp = require('../isCustomProp.js');\nconst canExplode = require('../canExplode.js');\n\nconst properties = ['column-width', 'column-count'];\nconst auto = 'auto';\nconst inherit = 'inherit';\n\n/**\n * Normalize a columns shorthand definition. Both of the longhand\n * properties' initial values are 'auto', and as per the spec,\n * omitted values are set to their initial values. Thus, we can\n * remove any 'auto' definition when there are two values.\n *\n * Specification link: https://www.w3.org/TR/css3-multicol/\n *\n * @param {[string, string]} values\n * @return {string}\n */\nfunction normalize(values) {\n  if (values[0].toLowerCase() === auto) {\n    return values[1];\n  }\n\n  if (values[1].toLowerCase() === auto) {\n    return values[0];\n  }\n\n  if (\n    values[0].toLowerCase() === inherit &&\n    values[1].toLowerCase() === inherit\n  ) {\n    return inherit;\n  }\n\n  return values.join(' ');\n}\n/**\n * @param {import('postcss').Rule} rule\n * @return {void}\n */\nfunction explode(rule) {\n  rule.walkDecls(/^columns$/i, (decl) => {\n    if (!canExplode(decl)) {\n      return;\n    }\n\n    if (stylehacks.detect(decl)) {\n      return;\n    }\n\n    let values = list.space(decl.value);\n\n    if (values.length === 1) {\n      values.push(auto);\n    }\n\n    values.forEach((value, i) => {\n      let prop = properties[1];\n      const dimension = unit(value);\n      if (value.toLowerCase() === auto) {\n        prop = properties[i];\n      } else if (dimension && dimension.unit !== '') {\n        prop = properties[0];\n      }\n\n      insertCloned(/** @type {import('postcss').Rule} */ (decl.parent), decl, {\n        prop,\n        value,\n      });\n    });\n\n    decl.remove();\n  });\n}\n\n/**\n * @param {import('postcss').Rule} rule\n * @return {void}\n */\nfunction cleanup(rule) {\n  let decls = getDecls(rule, ['columns'].concat(properties));\n\n  while (decls.length) {\n    const lastNode = decls[decls.length - 1];\n\n    // remove properties of lower precedence\n    const lesser = decls.filter(\n      (node) =>\n        !stylehacks.detect(lastNode) &&\n        !stylehacks.detect(node) &&\n        node !== lastNode &&\n        node.important === lastNode.important &&\n        lastNode.prop === 'columns' &&\n        node.prop !== lastNode.prop\n    );\n\n    for (const node of lesser) {\n      node.remove();\n    }\n    decls = decls.filter((node) => !lesser.includes(node));\n\n    // get duplicate properties\n    let duplicates = decls.filter(\n      (node) =>\n        !stylehacks.detect(lastNode) &&\n        !stylehacks.detect(node) &&\n        node !== lastNode &&\n        node.important === lastNode.important &&\n        node.prop === lastNode.prop &&\n        !(!isCustomProp(node) && isCustomProp(lastNode))\n    );\n\n    for (const node of duplicates) {\n      node.remove();\n    }\n    decls = decls.filter(\n      (node) => node !== lastNode && !duplicates.includes(node)\n    );\n  }\n}\n\n/**\n * @param {import('postcss').Rule} rule\n * @return {void}\n */\nfunction merge(rule) {\n  mergeRules(rule, properties, (rules, lastNode) => {\n    if (canMerge(rules) && !rules.some(stylehacks.detect)) {\n      insertCloned(\n        /** @type {import('postcss').Rule} */ (lastNode.parent),\n        lastNode,\n        {\n          prop: 'columns',\n          value: normalize(/** @type [string, string] */ (rules.map(getValue))),\n        }\n      );\n\n      for (const node of rules) {\n        node.remove();\n      }\n\n      return true;\n    }\n    return false;\n  });\n\n  cleanup(rule);\n}\n\nmodule.exports = {\n  explode,\n  merge,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}