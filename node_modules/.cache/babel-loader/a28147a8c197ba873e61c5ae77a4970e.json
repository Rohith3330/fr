{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfigPrinter = exports.ChainFormatter = void 0;\n\nfunction _gensync() {\n  const data = require(\"gensync\");\n\n  _gensync = function () {\n    return data;\n  };\n\n  return data;\n}\n\nconst ChainFormatter = {\n  Programmatic: 0,\n  Config: 1\n};\nexports.ChainFormatter = ChainFormatter;\nconst Formatter = {\n  title(type, callerName, filepath) {\n    let title = \"\";\n\n    if (type === ChainFormatter.Programmatic) {\n      title = \"programmatic options\";\n\n      if (callerName) {\n        title += \" from \" + callerName;\n      }\n    } else {\n      title = \"config \" + filepath;\n    }\n\n    return title;\n  },\n\n  loc(index, envName) {\n    let loc = \"\";\n\n    if (index != null) {\n      loc += `.overrides[${index}]`;\n    }\n\n    if (envName != null) {\n      loc += `.env[\"${envName}\"]`;\n    }\n\n    return loc;\n  },\n\n  *optionsAndDescriptors(opt) {\n    const content = Object.assign({}, opt.options);\n    delete content.overrides;\n    delete content.env;\n    const pluginDescriptors = [...(yield* opt.plugins())];\n\n    if (pluginDescriptors.length) {\n      content.plugins = pluginDescriptors.map(d => descriptorToConfig(d));\n    }\n\n    const presetDescriptors = [...(yield* opt.presets())];\n\n    if (presetDescriptors.length) {\n      content.presets = [...presetDescriptors].map(d => descriptorToConfig(d));\n    }\n\n    return JSON.stringify(content, undefined, 2);\n  }\n\n};\n\nfunction descriptorToConfig(d) {\n  var _d$file;\n\n  let name = (_d$file = d.file) == null ? void 0 : _d$file.request;\n\n  if (name == null) {\n    if (typeof d.value === \"object\") {\n      name = d.value;\n    } else if (typeof d.value === \"function\") {\n      name = `[Function: ${d.value.toString().slice(0, 50)} ... ]`;\n    }\n  }\n\n  if (name == null) {\n    name = \"[Unknown]\";\n  }\n\n  if (d.options === undefined) {\n    return name;\n  } else if (d.name == null) {\n    return [name, d.options];\n  } else {\n    return [name, d.options, d.name];\n  }\n}\n\nclass ConfigPrinter {\n  constructor() {\n    this._stack = [];\n  }\n\n  configure(enabled, type, _ref) {\n    let {\n      callerName,\n      filepath\n    } = _ref;\n    if (!enabled) return () => {};\n    return (content, index, envName) => {\n      this._stack.push({\n        type,\n        callerName,\n        filepath,\n        content,\n        index,\n        envName\n      });\n    };\n  }\n\n  static *format(config) {\n    let title = Formatter.title(config.type, config.callerName, config.filepath);\n    const loc = Formatter.loc(config.index, config.envName);\n    if (loc) title += ` ${loc}`;\n    const content = yield* Formatter.optionsAndDescriptors(config.content);\n    return `${title}\\n${content}`;\n  }\n\n  *output() {\n    if (this._stack.length === 0) return \"\";\n    const configs = yield* _gensync().all(this._stack.map(s => ConfigPrinter.format(s)));\n    return configs.join(\"\\n\\n\");\n  }\n\n}\n\nexports.ConfigPrinter = ConfigPrinter;\n0 && 0;","map":{"version":3,"mappings":"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","names":["_gensync","ChainFormatter","Programmatic","Config","Formatter","title","type","callerName","filepath","loc","index","envName","optionsAndDescriptors","opt","content","options","overrides","env","pluginDescriptors","plugins","length","map","d","descriptorToConfig","presetDescriptors","presets","JSON","stringify","undefined","name","file","_d$file","request","value","toString","slice","ConfigPrinter","constructor","_stack","configure","enabled","push","format","config","output","configs","gensync","all","s","join"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\config\\printer.ts"],"sourcesContent":["import gensync from \"gensync\";\n\nimport type { Handler } from \"gensync\";\n\nimport type {\n  OptionsAndDescriptors,\n  UnloadedDescriptor,\n} from \"./config-descriptors\";\n\n// todo: Use flow enums when @babel/transform-flow-types supports it\nexport const ChainFormatter = {\n  Programmatic: 0,\n  Config: 1,\n};\n\ntype PrintableConfig = {\n  content: OptionsAndDescriptors;\n  type: typeof ChainFormatter[keyof typeof ChainFormatter];\n  callerName: string | undefined | null;\n  filepath: string | undefined | null;\n  index: number | undefined | null;\n  envName: string | undefined | null;\n};\n\nconst Formatter = {\n  title(\n    type: typeof ChainFormatter[keyof typeof ChainFormatter],\n    callerName?: string | null,\n    filepath?: string | null,\n  ): string {\n    let title = \"\";\n    if (type === ChainFormatter.Programmatic) {\n      title = \"programmatic options\";\n      if (callerName) {\n        title += \" from \" + callerName;\n      }\n    } else {\n      title = \"config \" + filepath;\n    }\n    return title;\n  },\n  loc(index?: number | null, envName?: string | null): string {\n    let loc = \"\";\n    if (index != null) {\n      loc += `.overrides[${index}]`;\n    }\n    if (envName != null) {\n      loc += `.env[\"${envName}\"]`;\n    }\n    return loc;\n  },\n\n  *optionsAndDescriptors(opt: OptionsAndDescriptors) {\n    const content = { ...opt.options };\n    // overrides and env will be printed as separated config items\n    delete content.overrides;\n    delete content.env;\n    // resolve to descriptors\n    const pluginDescriptors = [...(yield* opt.plugins())];\n    if (pluginDescriptors.length) {\n      content.plugins = pluginDescriptors.map(d => descriptorToConfig(d));\n    }\n    const presetDescriptors = [...(yield* opt.presets())];\n    if (presetDescriptors.length) {\n      content.presets = [...presetDescriptors].map(d => descriptorToConfig(d));\n    }\n    return JSON.stringify(content, undefined, 2);\n  },\n};\n\nfunction descriptorToConfig(\n  d: UnloadedDescriptor,\n): string | {} | Array<unknown> {\n  let name = d.file?.request;\n  if (name == null) {\n    if (typeof d.value === \"object\") {\n      name = d.value;\n    } else if (typeof d.value === \"function\") {\n      // If the unloaded descriptor is a function, i.e. `plugins: [ require(\"my-plugin\") ]`,\n      // we print the first 50 characters of the function source code and hopefully we can see\n      // `name: 'my-plugin'` in the source\n      name = `[Function: ${d.value.toString().slice(0, 50)} ... ]`;\n    }\n  }\n  if (name == null) {\n    name = \"[Unknown]\";\n  }\n  if (d.options === undefined) {\n    return name;\n  } else if (d.name == null) {\n    return [name, d.options];\n  } else {\n    return [name, d.options, d.name];\n  }\n}\n\nexport class ConfigPrinter {\n  _stack: Array<PrintableConfig> = [];\n  configure(\n    enabled: boolean,\n    type: typeof ChainFormatter[keyof typeof ChainFormatter],\n    {\n      callerName,\n      filepath,\n    }: {\n      callerName?: string;\n      filepath?: string;\n    },\n  ) {\n    if (!enabled) return () => {};\n    return (\n      content: OptionsAndDescriptors,\n      index?: number | null,\n      envName?: string | null,\n    ) => {\n      this._stack.push({\n        type,\n        callerName,\n        filepath,\n        content,\n        index,\n        envName,\n      });\n    };\n  }\n  static *format(config: PrintableConfig): Handler<string> {\n    let title = Formatter.title(\n      config.type,\n      config.callerName,\n      config.filepath,\n    );\n    const loc = Formatter.loc(config.index, config.envName);\n    if (loc) title += ` ${loc}`;\n    const content = yield* Formatter.optionsAndDescriptors(config.content);\n    return `${title}\\n${content}`;\n  }\n\n  *output(): Handler<string> {\n    if (this._stack.length === 0) return \"\";\n    const configs = yield* gensync.all(\n      this._stack.map(s => ConfigPrinter.format(s)),\n    );\n    return configs.join(\"\\n\\n\");\n  }\n}\n"]},"metadata":{},"sourceType":"script"}