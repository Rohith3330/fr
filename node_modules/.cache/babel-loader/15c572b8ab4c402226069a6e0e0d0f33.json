{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\n\nclass DLL {\n  constructor() {\n    this.head = this.tail = null;\n    this.length = 0;\n  }\n\n  removeLink(node) {\n    if (node.prev) node.prev.next = node.next;else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n  }\n\n  empty() {\n    while (this.head) this.shift();\n\n    return this;\n  }\n\n  insertAfter(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n  }\n\n  insertBefore(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n  }\n\n  unshift(node) {\n    if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n  }\n\n  push(node) {\n    if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n  }\n\n  shift() {\n    return this.head && this.removeLink(this.head);\n  }\n\n  pop() {\n    return this.tail && this.removeLink(this.tail);\n  }\n\n  toArray() {\n    return [...this];\n  }\n\n  *[Symbol.iterator]() {\n    var cur = this.head;\n\n    while (cur) {\n      yield cur.data;\n      cur = cur.next;\n    }\n  }\n\n  remove(testFn) {\n    var curr = this.head;\n\n    while (curr) {\n      var {\n        next\n      } = curr;\n\n      if (testFn(curr)) {\n        this.removeLink(curr);\n      }\n\n      curr = next;\n    }\n\n    return this;\n  }\n\n}\n\nexports.default = DLL;\n\nfunction setInitial(dll, node) {\n  dll.length = 1;\n  dll.head = dll.tail = node;\n}\n\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["Object","defineProperty","exports","value","DLL","constructor","head","tail","length","removeLink","node","prev","next","empty","shift","insertAfter","newNode","insertBefore","unshift","setInitial","push","pop","toArray","Symbol","iterator","cur","data","remove","testFn","curr","default","dll","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/async/internal/DoublyLinkedList.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty() {\n        while (this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator]() {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove(testFn) {\n        var curr = this.head;\n        while (curr) {\n            var { next } = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nexports.default = DLL;\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\nmodule.exports = exports[\"default\"];"],"mappings":"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"},"metadata":{},"sourceType":"script"}