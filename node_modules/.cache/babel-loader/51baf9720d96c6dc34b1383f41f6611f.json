{"ast":null,"code":"'use strict';\n/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst {\n  ReportBase\n} = require('istanbul-lib-report');\n\nconst HtmlReport = require('../html');\n\nconst standardLinkMapper = {\n  getPath(node) {\n    if (typeof node === 'string') {\n      return node;\n    }\n\n    let filePath = node.getQualifiedName();\n\n    if (node.isSummary()) {\n      if (filePath !== '') {\n        filePath += '/index.html';\n      } else {\n        filePath = 'index.html';\n      }\n    } else {\n      filePath += '.html';\n    }\n\n    return filePath;\n  },\n\n  relativePath(source, target) {\n    const targetPath = this.getPath(target);\n    const sourcePath = path.dirname(this.getPath(source));\n    return path.relative(sourcePath, targetPath);\n  },\n\n  assetPath(node, name) {\n    return this.relativePath(this.getPath(node), name);\n  }\n\n};\n\nclass HtmlSpaReport extends ReportBase {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      // force the summarizer to nested for html-spa\n      summarizer: 'nested'\n    });\n    this.verbose = opts.verbose || false;\n    this.linkMapper = opts.linkMapper || standardLinkMapper;\n    this.subdir = opts.subdir || '';\n    this.date = Date();\n    this.skipEmpty = opts.skipEmpty;\n    this.htmlReport = new HtmlReport(opts);\n\n    this.htmlReport.getBreadcrumbHtml = function () {\n      return '<a href=\"javascript:history.back()\">Back</a>';\n    };\n\n    this.metricsToShow = opts.metricsToShow || ['lines', 'branches', 'functions'];\n  }\n\n  getWriter(context) {\n    if (!this.subdir) {\n      return context.writer;\n    }\n\n    return context.writer.writerForDir(this.subdir);\n  }\n\n  onStart(root, context) {\n    this.htmlReport.onStart(root, context);\n    const writer = this.getWriter(context);\n    const srcDir = path.resolve(__dirname, './assets');\n    fs.readdirSync(srcDir).forEach(f => {\n      const resolvedSource = path.resolve(srcDir, f);\n      const resolvedDestination = '.';\n      const stat = fs.statSync(resolvedSource);\n      let dest;\n\n      if (stat.isFile()) {\n        dest = resolvedDestination + '/' + f;\n\n        if (this.verbose) {\n          console.log('Write asset: ' + dest);\n        }\n\n        writer.copyFile(resolvedSource, dest);\n      }\n    });\n  }\n\n  onDetail(node, context) {\n    this.htmlReport.onDetail(node, context);\n  }\n\n  getMetric(metric, type, context) {\n    const isEmpty = metric.total === 0;\n    return {\n      total: metric.total,\n      covered: metric.covered,\n      skipped: metric.skipped,\n      missed: metric.total - metric.covered,\n      pct: isEmpty ? 0 : metric.pct,\n      classForPercent: isEmpty ? 'empty' : context.classForPercent(type, metric.pct)\n    };\n  }\n\n  toDataStructure(node, context) {\n    const coverageSummary = node.getCoverageSummary();\n    const metrics = {\n      statements: this.getMetric(coverageSummary.statements, 'statements', context),\n      branches: this.getMetric(coverageSummary.branches, 'branches', context),\n      functions: this.getMetric(coverageSummary.functions, 'functions', context),\n      lines: this.getMetric(coverageSummary.lines, 'lines', context)\n    };\n    return {\n      file: node.getRelativeName(),\n      isEmpty: coverageSummary.isEmpty(),\n      metrics,\n      children: node.isSummary() && node.getChildren().map(child => this.toDataStructure(child, context))\n    };\n  }\n\n  onEnd(rootNode, context) {\n    const data = this.toDataStructure(rootNode, context);\n    const cw = this.getWriter(context).writeFile(this.linkMapper.getPath(rootNode));\n    cw.write(`<!doctype html>\n            <html lang=\"en\">\n                <head>\n                    <link rel=\"stylesheet\" href=\"spa.css\" />\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                </head>\n                <body>\n                    <div id=\"app\" class=\"app\"></div>\n                    <script>\n                        window.data = ${JSON.stringify(data)};\n                        window.generatedDatetime = ${JSON.stringify(String(Date()))};\n                        window.metricsToShow = ${JSON.stringify(this.metricsToShow)};\n                    </script>\n                    <script src=\"bundle.js\"></script>\n                </body>\n            </html>`);\n    cw.close();\n  }\n\n}\n\nmodule.exports = HtmlSpaReport;","map":{"version":3,"names":["fs","require","path","ReportBase","HtmlReport","standardLinkMapper","getPath","node","filePath","getQualifiedName","isSummary","relativePath","source","target","targetPath","sourcePath","dirname","relative","assetPath","name","HtmlSpaReport","constructor","opts","summarizer","verbose","linkMapper","subdir","date","Date","skipEmpty","htmlReport","getBreadcrumbHtml","metricsToShow","getWriter","context","writer","writerForDir","onStart","root","srcDir","resolve","__dirname","readdirSync","forEach","f","resolvedSource","resolvedDestination","stat","statSync","dest","isFile","console","log","copyFile","onDetail","getMetric","metric","type","isEmpty","total","covered","skipped","missed","pct","classForPercent","toDataStructure","coverageSummary","getCoverageSummary","metrics","statements","branches","functions","lines","file","getRelativeName","children","getChildren","map","child","onEnd","rootNode","data","cw","writeFile","write","JSON","stringify","String","close","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/istanbul-reports/lib/html-spa/index.js"],"sourcesContent":["'use strict';\n/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nconst fs = require('fs');\nconst path = require('path');\nconst { ReportBase } = require('istanbul-lib-report');\nconst HtmlReport = require('../html');\n\nconst standardLinkMapper = {\n    getPath(node) {\n        if (typeof node === 'string') {\n            return node;\n        }\n        let filePath = node.getQualifiedName();\n        if (node.isSummary()) {\n            if (filePath !== '') {\n                filePath += '/index.html';\n            } else {\n                filePath = 'index.html';\n            }\n        } else {\n            filePath += '.html';\n        }\n        return filePath;\n    },\n\n    relativePath(source, target) {\n        const targetPath = this.getPath(target);\n        const sourcePath = path.dirname(this.getPath(source));\n        return path.relative(sourcePath, targetPath);\n    },\n\n    assetPath(node, name) {\n        return this.relativePath(this.getPath(node), name);\n    }\n};\n\nclass HtmlSpaReport extends ReportBase {\n    constructor(opts = {}) {\n        super({\n            // force the summarizer to nested for html-spa\n            summarizer: 'nested'\n        });\n\n        this.verbose = opts.verbose || false;\n        this.linkMapper = opts.linkMapper || standardLinkMapper;\n        this.subdir = opts.subdir || '';\n        this.date = Date();\n        this.skipEmpty = opts.skipEmpty;\n        this.htmlReport = new HtmlReport(opts);\n        this.htmlReport.getBreadcrumbHtml = function() {\n            return '<a href=\"javascript:history.back()\">Back</a>';\n        };\n\n        this.metricsToShow = opts.metricsToShow || [\n            'lines',\n            'branches',\n            'functions'\n        ];\n    }\n\n    getWriter(context) {\n        if (!this.subdir) {\n            return context.writer;\n        }\n        return context.writer.writerForDir(this.subdir);\n    }\n\n    onStart(root, context) {\n        this.htmlReport.onStart(root, context);\n\n        const writer = this.getWriter(context);\n        const srcDir = path.resolve(__dirname, './assets');\n        fs.readdirSync(srcDir).forEach(f => {\n            const resolvedSource = path.resolve(srcDir, f);\n            const resolvedDestination = '.';\n            const stat = fs.statSync(resolvedSource);\n            let dest;\n\n            if (stat.isFile()) {\n                dest = resolvedDestination + '/' + f;\n                if (this.verbose) {\n                    console.log('Write asset: ' + dest);\n                }\n                writer.copyFile(resolvedSource, dest);\n            }\n        });\n    }\n\n    onDetail(node, context) {\n        this.htmlReport.onDetail(node, context);\n    }\n\n    getMetric(metric, type, context) {\n        const isEmpty = metric.total === 0;\n        return {\n            total: metric.total,\n            covered: metric.covered,\n            skipped: metric.skipped,\n            missed: metric.total - metric.covered,\n            pct: isEmpty ? 0 : metric.pct,\n            classForPercent: isEmpty\n                ? 'empty'\n                : context.classForPercent(type, metric.pct)\n        };\n    }\n\n    toDataStructure(node, context) {\n        const coverageSummary = node.getCoverageSummary();\n        const metrics = {\n            statements: this.getMetric(\n                coverageSummary.statements,\n                'statements',\n                context\n            ),\n            branches: this.getMetric(\n                coverageSummary.branches,\n                'branches',\n                context\n            ),\n            functions: this.getMetric(\n                coverageSummary.functions,\n                'functions',\n                context\n            ),\n            lines: this.getMetric(coverageSummary.lines, 'lines', context)\n        };\n\n        return {\n            file: node.getRelativeName(),\n            isEmpty: coverageSummary.isEmpty(),\n            metrics,\n            children:\n                node.isSummary() &&\n                node\n                    .getChildren()\n                    .map(child => this.toDataStructure(child, context))\n        };\n    }\n\n    onEnd(rootNode, context) {\n        const data = this.toDataStructure(rootNode, context);\n\n        const cw = this.getWriter(context).writeFile(\n            this.linkMapper.getPath(rootNode)\n        );\n\n        cw.write(\n            `<!doctype html>\n            <html lang=\"en\">\n                <head>\n                    <link rel=\"stylesheet\" href=\"spa.css\" />\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                </head>\n                <body>\n                    <div id=\"app\" class=\"app\"></div>\n                    <script>\n                        window.data = ${JSON.stringify(data)};\n                        window.generatedDatetime = ${JSON.stringify(\n                            String(Date())\n                        )};\n                        window.metricsToShow = ${JSON.stringify(\n                            this.metricsToShow\n                        )};\n                    </script>\n                    <script src=\"bundle.js\"></script>\n                </body>\n            </html>`\n        );\n        cw.close();\n    }\n}\n\nmodule.exports = HtmlSpaReport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}