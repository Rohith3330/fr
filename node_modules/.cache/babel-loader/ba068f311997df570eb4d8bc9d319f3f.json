{"ast":null,"code":"/**\n * @fileoverview Rule to enforce spacing before and after keywords.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"),\n      keywords = require(\"./utils/keywords\"); //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n\nconst PREV_TOKEN = /^[)\\]}>]$/u;\nconst NEXT_TOKEN = /^(?:[([{<~!]|\\+\\+?|--?)$/u;\nconst PREV_TOKEN_M = /^[)\\]}>*]$/u;\nconst NEXT_TOKEN_M = /^[{*]$/u;\nconst TEMPLATE_OPEN_PAREN = /\\$\\{$/u;\nconst TEMPLATE_CLOSE_PAREN = /^\\}/u;\nconst CHECK_TYPE = /^(?:JSXElement|RegularExpression|String|Template|PrivateIdentifier)$/u;\nconst KEYS = keywords.concat([\"as\", \"async\", \"await\", \"from\", \"get\", \"let\", \"of\", \"set\", \"yield\"]); // check duplications.\n\n(function () {\n  KEYS.sort();\n\n  for (let i = 1; i < KEYS.length; ++i) {\n    if (KEYS[i] === KEYS[i - 1]) {\n      throw new Error(`Duplication was found in the keyword list: ${KEYS[i]}`);\n    }\n  }\n})(); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given token is a \"Template\" token ends with \"${\".\n * @param {Token} token A token to check.\n * @returns {boolean} `true` if the token is a \"Template\" token ends with \"${\".\n */\n\n\nfunction isOpenParenOfTemplate(token) {\n  return token.type === \"Template\" && TEMPLATE_OPEN_PAREN.test(token.value);\n}\n/**\n * Checks whether or not a given token is a \"Template\" token starts with \"}\".\n * @param {Token} token A token to check.\n * @returns {boolean} `true` if the token is a \"Template\" token starts with \"}\".\n */\n\n\nfunction isCloseParenOfTemplate(token) {\n  return token.type === \"Template\" && TEMPLATE_CLOSE_PAREN.test(token.value);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"Enforce consistent spacing before and after keywords\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/keyword-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        before: {\n          type: \"boolean\",\n          default: true\n        },\n        after: {\n          type: \"boolean\",\n          default: true\n        },\n        overrides: {\n          type: \"object\",\n          properties: KEYS.reduce((retv, key) => {\n            retv[key] = {\n              type: \"object\",\n              properties: {\n                before: {\n                  type: \"boolean\"\n                },\n                after: {\n                  type: \"boolean\"\n                }\n              },\n              additionalProperties: false\n            };\n            return retv;\n          }, {}),\n          additionalProperties: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      expectedBefore: \"Expected space(s) before \\\"{{value}}\\\".\",\n      expectedAfter: \"Expected space(s) after \\\"{{value}}\\\".\",\n      unexpectedBefore: \"Unexpected space(s) before \\\"{{value}}\\\".\",\n      unexpectedAfter: \"Unexpected space(s) after \\\"{{value}}\\\".\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const tokensToIgnore = new WeakSet();\n    /**\n     * Reports a given token if there are not space(s) before the token.\n     * @param {Token} token A token to report.\n     * @param {RegExp} pattern A pattern of the previous token to check.\n     * @returns {void}\n     */\n\n    function expectSpaceBefore(token, pattern) {\n      const prevToken = sourceCode.getTokenBefore(token);\n\n      if (prevToken && (CHECK_TYPE.test(prevToken.type) || pattern.test(prevToken.value)) && !isOpenParenOfTemplate(prevToken) && !tokensToIgnore.has(prevToken) && astUtils.isTokenOnSameLine(prevToken, token) && !sourceCode.isSpaceBetweenTokens(prevToken, token)) {\n        context.report({\n          loc: token.loc,\n          messageId: \"expectedBefore\",\n          data: token,\n\n          fix(fixer) {\n            return fixer.insertTextBefore(token, \" \");\n          }\n\n        });\n      }\n    }\n    /**\n     * Reports a given token if there are space(s) before the token.\n     * @param {Token} token A token to report.\n     * @param {RegExp} pattern A pattern of the previous token to check.\n     * @returns {void}\n     */\n\n\n    function unexpectSpaceBefore(token, pattern) {\n      const prevToken = sourceCode.getTokenBefore(token);\n\n      if (prevToken && (CHECK_TYPE.test(prevToken.type) || pattern.test(prevToken.value)) && !isOpenParenOfTemplate(prevToken) && !tokensToIgnore.has(prevToken) && astUtils.isTokenOnSameLine(prevToken, token) && sourceCode.isSpaceBetweenTokens(prevToken, token)) {\n        context.report({\n          loc: {\n            start: prevToken.loc.end,\n            end: token.loc.start\n          },\n          messageId: \"unexpectedBefore\",\n          data: token,\n\n          fix(fixer) {\n            return fixer.removeRange([prevToken.range[1], token.range[0]]);\n          }\n\n        });\n      }\n    }\n    /**\n     * Reports a given token if there are not space(s) after the token.\n     * @param {Token} token A token to report.\n     * @param {RegExp} pattern A pattern of the next token to check.\n     * @returns {void}\n     */\n\n\n    function expectSpaceAfter(token, pattern) {\n      const nextToken = sourceCode.getTokenAfter(token);\n\n      if (nextToken && (CHECK_TYPE.test(nextToken.type) || pattern.test(nextToken.value)) && !isCloseParenOfTemplate(nextToken) && !tokensToIgnore.has(nextToken) && astUtils.isTokenOnSameLine(token, nextToken) && !sourceCode.isSpaceBetweenTokens(token, nextToken)) {\n        context.report({\n          loc: token.loc,\n          messageId: \"expectedAfter\",\n          data: token,\n\n          fix(fixer) {\n            return fixer.insertTextAfter(token, \" \");\n          }\n\n        });\n      }\n    }\n    /**\n     * Reports a given token if there are space(s) after the token.\n     * @param {Token} token A token to report.\n     * @param {RegExp} pattern A pattern of the next token to check.\n     * @returns {void}\n     */\n\n\n    function unexpectSpaceAfter(token, pattern) {\n      const nextToken = sourceCode.getTokenAfter(token);\n\n      if (nextToken && (CHECK_TYPE.test(nextToken.type) || pattern.test(nextToken.value)) && !isCloseParenOfTemplate(nextToken) && !tokensToIgnore.has(nextToken) && astUtils.isTokenOnSameLine(token, nextToken) && sourceCode.isSpaceBetweenTokens(token, nextToken)) {\n        context.report({\n          loc: {\n            start: token.loc.end,\n            end: nextToken.loc.start\n          },\n          messageId: \"unexpectedAfter\",\n          data: token,\n\n          fix(fixer) {\n            return fixer.removeRange([token.range[1], nextToken.range[0]]);\n          }\n\n        });\n      }\n    }\n    /**\n     * Parses the option object and determines check methods for each keyword.\n     * @param {Object|undefined} options The option object to parse.\n     * @returns {Object} - Normalized option object.\n     *      Keys are keywords (there are for every keyword).\n     *      Values are instances of `{\"before\": function, \"after\": function}`.\n     */\n\n\n    function parseOptions() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const before = options.before !== false;\n      const after = options.after !== false;\n      const defaultValue = {\n        before: before ? expectSpaceBefore : unexpectSpaceBefore,\n        after: after ? expectSpaceAfter : unexpectSpaceAfter\n      };\n      const overrides = options && options.overrides || {};\n      const retv = Object.create(null);\n\n      for (let i = 0; i < KEYS.length; ++i) {\n        const key = KEYS[i];\n        const override = overrides[key];\n\n        if (override) {\n          const thisBefore = \"before\" in override ? override.before : before;\n          const thisAfter = \"after\" in override ? override.after : after;\n          retv[key] = {\n            before: thisBefore ? expectSpaceBefore : unexpectSpaceBefore,\n            after: thisAfter ? expectSpaceAfter : unexpectSpaceAfter\n          };\n        } else {\n          retv[key] = defaultValue;\n        }\n      }\n\n      return retv;\n    }\n\n    const checkMethodMap = parseOptions(context.options[0]);\n    /**\n     * Reports a given token if usage of spacing followed by the token is\n     * invalid.\n     * @param {Token} token A token to report.\n     * @param {RegExp} [pattern] Optional. A pattern of the previous\n     *      token to check.\n     * @returns {void}\n     */\n\n    function checkSpacingBefore(token, pattern) {\n      checkMethodMap[token.value].before(token, pattern || PREV_TOKEN);\n    }\n    /**\n     * Reports a given token if usage of spacing preceded by the token is\n     * invalid.\n     * @param {Token} token A token to report.\n     * @param {RegExp} [pattern] Optional. A pattern of the next\n     *      token to check.\n     * @returns {void}\n     */\n\n\n    function checkSpacingAfter(token, pattern) {\n      checkMethodMap[token.value].after(token, pattern || NEXT_TOKEN);\n    }\n    /**\n     * Reports a given token if usage of spacing around the token is invalid.\n     * @param {Token} token A token to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingAround(token) {\n      checkSpacingBefore(token);\n      checkSpacingAfter(token);\n    }\n    /**\n     * Reports the first token of a given node if the first token is a keyword\n     * and usage of spacing around the token is invalid.\n     * @param {ASTNode|null} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingAroundFirstToken(node) {\n      const firstToken = node && sourceCode.getFirstToken(node);\n\n      if (firstToken && firstToken.type === \"Keyword\") {\n        checkSpacingAround(firstToken);\n      }\n    }\n    /**\n     * Reports the first token of a given node if the first token is a keyword\n     * and usage of spacing followed by the token is invalid.\n     *\n     * This is used for unary operators (e.g. `typeof`), `function`, and `super`.\n     * Other rules are handling usage of spacing preceded by those keywords.\n     * @param {ASTNode|null} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingBeforeFirstToken(node) {\n      const firstToken = node && sourceCode.getFirstToken(node);\n\n      if (firstToken && firstToken.type === \"Keyword\") {\n        checkSpacingBefore(firstToken);\n      }\n    }\n    /**\n     * Reports the previous token of a given node if the token is a keyword and\n     * usage of spacing around the token is invalid.\n     * @param {ASTNode|null} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingAroundTokenBefore(node) {\n      if (node) {\n        const token = sourceCode.getTokenBefore(node, astUtils.isKeywordToken);\n        checkSpacingAround(token);\n      }\n    }\n    /**\n     * Reports `async` or `function` keywords of a given node if usage of\n     * spacing around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForFunction(node) {\n      const firstToken = node && sourceCode.getFirstToken(node);\n\n      if (firstToken && (firstToken.type === \"Keyword\" && firstToken.value === \"function\" || firstToken.value === \"async\")) {\n        checkSpacingBefore(firstToken);\n      }\n    }\n    /**\n     * Reports `class` and `extends` keywords of a given node if usage of\n     * spacing around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForClass(node) {\n      checkSpacingAroundFirstToken(node);\n      checkSpacingAroundTokenBefore(node.superClass);\n    }\n    /**\n     * Reports `if` and `else` keywords of a given node if usage of spacing\n     * around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForIfStatement(node) {\n      checkSpacingAroundFirstToken(node);\n      checkSpacingAroundTokenBefore(node.alternate);\n    }\n    /**\n     * Reports `try`, `catch`, and `finally` keywords of a given node if usage\n     * of spacing around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForTryStatement(node) {\n      checkSpacingAroundFirstToken(node);\n      checkSpacingAroundFirstToken(node.handler);\n      checkSpacingAroundTokenBefore(node.finalizer);\n    }\n    /**\n     * Reports `do` and `while` keywords of a given node if usage of spacing\n     * around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForDoWhileStatement(node) {\n      checkSpacingAroundFirstToken(node);\n      checkSpacingAroundTokenBefore(node.test);\n    }\n    /**\n     * Reports `for` and `in` keywords of a given node if usage of spacing\n     * around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForForInStatement(node) {\n      checkSpacingAroundFirstToken(node);\n      const inToken = sourceCode.getTokenBefore(node.right, astUtils.isNotOpeningParenToken);\n      const previousToken = sourceCode.getTokenBefore(inToken);\n\n      if (previousToken.type !== \"PrivateIdentifier\") {\n        checkSpacingBefore(inToken);\n      }\n\n      checkSpacingAfter(inToken);\n    }\n    /**\n     * Reports `for` and `of` keywords of a given node if usage of spacing\n     * around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForForOfStatement(node) {\n      if (node.await) {\n        checkSpacingBefore(sourceCode.getFirstToken(node, 0));\n        checkSpacingAfter(sourceCode.getFirstToken(node, 1));\n      } else {\n        checkSpacingAroundFirstToken(node);\n      }\n\n      const ofToken = sourceCode.getTokenBefore(node.right, astUtils.isNotOpeningParenToken);\n      const previousToken = sourceCode.getTokenBefore(ofToken);\n\n      if (previousToken.type !== \"PrivateIdentifier\") {\n        checkSpacingBefore(ofToken);\n      }\n\n      checkSpacingAfter(ofToken);\n    }\n    /**\n     * Reports `import`, `export`, `as`, and `from` keywords of a given node if\n     * usage of spacing around those keywords is invalid.\n     *\n     * This rule handles the `*` token in module declarations.\n     *\n     *     import*as A from \"./a\"; /*error Expected space(s) after \"import\".\n     *                               error Expected space(s) before \"as\".\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForModuleDeclaration(node) {\n      const firstToken = sourceCode.getFirstToken(node);\n      checkSpacingBefore(firstToken, PREV_TOKEN_M);\n      checkSpacingAfter(firstToken, NEXT_TOKEN_M);\n\n      if (node.type === \"ExportDefaultDeclaration\") {\n        checkSpacingAround(sourceCode.getTokenAfter(firstToken));\n      }\n\n      if (node.type === \"ExportAllDeclaration\" && node.exported) {\n        const asToken = sourceCode.getTokenBefore(node.exported);\n        checkSpacingBefore(asToken, PREV_TOKEN_M);\n        checkSpacingAfter(asToken, NEXT_TOKEN_M);\n      }\n\n      if (node.source) {\n        const fromToken = sourceCode.getTokenBefore(node.source);\n        checkSpacingBefore(fromToken, PREV_TOKEN_M);\n        checkSpacingAfter(fromToken, NEXT_TOKEN_M);\n      }\n    }\n    /**\n     * Reports `as` keyword of a given node if usage of spacing around this\n     * keyword is invalid.\n     * @param {ASTNode} node An `ImportSpecifier` node to check.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForImportSpecifier(node) {\n      if (node.imported.range[0] !== node.local.range[0]) {\n        const asToken = sourceCode.getTokenBefore(node.local);\n        checkSpacingBefore(asToken, PREV_TOKEN_M);\n      }\n    }\n    /**\n     * Reports `as` keyword of a given node if usage of spacing around this\n     * keyword is invalid.\n     * @param {ASTNode} node An `ExportSpecifier` node to check.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForExportSpecifier(node) {\n      if (node.local.range[0] !== node.exported.range[0]) {\n        const asToken = sourceCode.getTokenBefore(node.exported);\n        checkSpacingBefore(asToken, PREV_TOKEN_M);\n        checkSpacingAfter(asToken, NEXT_TOKEN_M);\n      }\n    }\n    /**\n     * Reports `as` keyword of a given node if usage of spacing around this\n     * keyword is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForImportNamespaceSpecifier(node) {\n      const asToken = sourceCode.getFirstToken(node, 1);\n      checkSpacingBefore(asToken, PREV_TOKEN_M);\n    }\n    /**\n     * Reports `static`, `get`, and `set` keywords of a given node if usage of\n     * spacing around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @throws {Error} If unable to find token get, set, or async beside method name.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForProperty(node) {\n      if (node.static) {\n        checkSpacingAroundFirstToken(node);\n      }\n\n      if (node.kind === \"get\" || node.kind === \"set\" || (node.method || node.type === \"MethodDefinition\") && node.value.async) {\n        const token = sourceCode.getTokenBefore(node.key, tok => {\n          switch (tok.value) {\n            case \"get\":\n            case \"set\":\n            case \"async\":\n              return true;\n\n            default:\n              return false;\n          }\n        });\n\n        if (!token) {\n          throw new Error(\"Failed to find token get, set, or async beside method name\");\n        }\n\n        checkSpacingAround(token);\n      }\n    }\n    /**\n     * Reports `await` keyword of a given node if usage of spacing before\n     * this keyword is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForAwaitExpression(node) {\n      checkSpacingBefore(sourceCode.getFirstToken(node));\n    }\n\n    return {\n      // Statements\n      DebuggerStatement: checkSpacingAroundFirstToken,\n      WithStatement: checkSpacingAroundFirstToken,\n      // Statements - Control flow\n      BreakStatement: checkSpacingAroundFirstToken,\n      ContinueStatement: checkSpacingAroundFirstToken,\n      ReturnStatement: checkSpacingAroundFirstToken,\n      ThrowStatement: checkSpacingAroundFirstToken,\n      TryStatement: checkSpacingForTryStatement,\n      // Statements - Choice\n      IfStatement: checkSpacingForIfStatement,\n      SwitchStatement: checkSpacingAroundFirstToken,\n      SwitchCase: checkSpacingAroundFirstToken,\n      // Statements - Loops\n      DoWhileStatement: checkSpacingForDoWhileStatement,\n      ForInStatement: checkSpacingForForInStatement,\n      ForOfStatement: checkSpacingForForOfStatement,\n      ForStatement: checkSpacingAroundFirstToken,\n      WhileStatement: checkSpacingAroundFirstToken,\n      // Statements - Declarations\n      ClassDeclaration: checkSpacingForClass,\n      ExportNamedDeclaration: checkSpacingForModuleDeclaration,\n      ExportDefaultDeclaration: checkSpacingForModuleDeclaration,\n      ExportAllDeclaration: checkSpacingForModuleDeclaration,\n      FunctionDeclaration: checkSpacingForFunction,\n      ImportDeclaration: checkSpacingForModuleDeclaration,\n      VariableDeclaration: checkSpacingAroundFirstToken,\n      // Expressions\n      ArrowFunctionExpression: checkSpacingForFunction,\n      AwaitExpression: checkSpacingForAwaitExpression,\n      ClassExpression: checkSpacingForClass,\n      FunctionExpression: checkSpacingForFunction,\n      NewExpression: checkSpacingBeforeFirstToken,\n      Super: checkSpacingBeforeFirstToken,\n      ThisExpression: checkSpacingBeforeFirstToken,\n      UnaryExpression: checkSpacingBeforeFirstToken,\n      YieldExpression: checkSpacingBeforeFirstToken,\n      // Others\n      ImportSpecifier: checkSpacingForImportSpecifier,\n      ExportSpecifier: checkSpacingForExportSpecifier,\n      ImportNamespaceSpecifier: checkSpacingForImportNamespaceSpecifier,\n      MethodDefinition: checkSpacingForProperty,\n      PropertyDefinition: checkSpacingForProperty,\n      StaticBlock: checkSpacingAroundFirstToken,\n      Property: checkSpacingForProperty,\n\n      // To avoid conflicts with `space-infix-ops`, e.g. `a > this.b`\n      \"BinaryExpression[operator='>']\"(node) {\n        const operatorToken = sourceCode.getTokenBefore(node.right, astUtils.isNotOpeningParenToken);\n        tokensToIgnore.add(operatorToken);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","keywords","PREV_TOKEN","NEXT_TOKEN","PREV_TOKEN_M","NEXT_TOKEN_M","TEMPLATE_OPEN_PAREN","TEMPLATE_CLOSE_PAREN","CHECK_TYPE","KEYS","concat","sort","i","length","Error","isOpenParenOfTemplate","token","type","test","value","isCloseParenOfTemplate","module","exports","meta","docs","description","recommended","url","fixable","schema","properties","before","default","after","overrides","reduce","retv","key","additionalProperties","messages","expectedBefore","expectedAfter","unexpectedBefore","unexpectedAfter","create","context","sourceCode","getSourceCode","tokensToIgnore","WeakSet","expectSpaceBefore","pattern","prevToken","getTokenBefore","has","isTokenOnSameLine","isSpaceBetweenTokens","report","loc","messageId","data","fix","fixer","insertTextBefore","unexpectSpaceBefore","start","end","removeRange","range","expectSpaceAfter","nextToken","getTokenAfter","insertTextAfter","unexpectSpaceAfter","parseOptions","options","defaultValue","Object","override","thisBefore","thisAfter","checkMethodMap","checkSpacingBefore","checkSpacingAfter","checkSpacingAround","checkSpacingAroundFirstToken","node","firstToken","getFirstToken","checkSpacingBeforeFirstToken","checkSpacingAroundTokenBefore","isKeywordToken","checkSpacingForFunction","checkSpacingForClass","superClass","checkSpacingForIfStatement","alternate","checkSpacingForTryStatement","handler","finalizer","checkSpacingForDoWhileStatement","checkSpacingForForInStatement","inToken","right","isNotOpeningParenToken","previousToken","checkSpacingForForOfStatement","await","ofToken","checkSpacingForModuleDeclaration","exported","asToken","source","fromToken","checkSpacingForImportSpecifier","imported","local","checkSpacingForExportSpecifier","checkSpacingForImportNamespaceSpecifier","checkSpacingForProperty","static","kind","method","async","tok","checkSpacingForAwaitExpression","DebuggerStatement","WithStatement","BreakStatement","ContinueStatement","ReturnStatement","ThrowStatement","TryStatement","IfStatement","SwitchStatement","SwitchCase","DoWhileStatement","ForInStatement","ForOfStatement","ForStatement","WhileStatement","ClassDeclaration","ExportNamedDeclaration","ExportDefaultDeclaration","ExportAllDeclaration","FunctionDeclaration","ImportDeclaration","VariableDeclaration","ArrowFunctionExpression","AwaitExpression","ClassExpression","FunctionExpression","NewExpression","Super","ThisExpression","UnaryExpression","YieldExpression","ImportSpecifier","ExportSpecifier","ImportNamespaceSpecifier","MethodDefinition","PropertyDefinition","StaticBlock","Property","operatorToken","add"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/keyword-spacing.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce spacing before and after keywords.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"),\n    keywords = require(\"./utils/keywords\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst PREV_TOKEN = /^[)\\]}>]$/u;\nconst NEXT_TOKEN = /^(?:[([{<~!]|\\+\\+?|--?)$/u;\nconst PREV_TOKEN_M = /^[)\\]}>*]$/u;\nconst NEXT_TOKEN_M = /^[{*]$/u;\nconst TEMPLATE_OPEN_PAREN = /\\$\\{$/u;\nconst TEMPLATE_CLOSE_PAREN = /^\\}/u;\nconst CHECK_TYPE = /^(?:JSXElement|RegularExpression|String|Template|PrivateIdentifier)$/u;\nconst KEYS = keywords.concat([\"as\", \"async\", \"await\", \"from\", \"get\", \"let\", \"of\", \"set\", \"yield\"]);\n\n// check duplications.\n(function() {\n    KEYS.sort();\n    for (let i = 1; i < KEYS.length; ++i) {\n        if (KEYS[i] === KEYS[i - 1]) {\n            throw new Error(`Duplication was found in the keyword list: ${KEYS[i]}`);\n        }\n    }\n}());\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given token is a \"Template\" token ends with \"${\".\n * @param {Token} token A token to check.\n * @returns {boolean} `true` if the token is a \"Template\" token ends with \"${\".\n */\nfunction isOpenParenOfTemplate(token) {\n    return token.type === \"Template\" && TEMPLATE_OPEN_PAREN.test(token.value);\n}\n\n/**\n * Checks whether or not a given token is a \"Template\" token starts with \"}\".\n * @param {Token} token A token to check.\n * @returns {boolean} `true` if the token is a \"Template\" token starts with \"}\".\n */\nfunction isCloseParenOfTemplate(token) {\n    return token.type === \"Template\" && TEMPLATE_CLOSE_PAREN.test(token.value);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"Enforce consistent spacing before and after keywords\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/keyword-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    before: { type: \"boolean\", default: true },\n                    after: { type: \"boolean\", default: true },\n                    overrides: {\n                        type: \"object\",\n                        properties: KEYS.reduce((retv, key) => {\n                            retv[key] = {\n                                type: \"object\",\n                                properties: {\n                                    before: { type: \"boolean\" },\n                                    after: { type: \"boolean\" }\n                                },\n                                additionalProperties: false\n                            };\n                            return retv;\n                        }, {}),\n                        additionalProperties: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            expectedBefore: \"Expected space(s) before \\\"{{value}}\\\".\",\n            expectedAfter: \"Expected space(s) after \\\"{{value}}\\\".\",\n            unexpectedBefore: \"Unexpected space(s) before \\\"{{value}}\\\".\",\n            unexpectedAfter: \"Unexpected space(s) after \\\"{{value}}\\\".\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        const tokensToIgnore = new WeakSet();\n\n        /**\n         * Reports a given token if there are not space(s) before the token.\n         * @param {Token} token A token to report.\n         * @param {RegExp} pattern A pattern of the previous token to check.\n         * @returns {void}\n         */\n        function expectSpaceBefore(token, pattern) {\n            const prevToken = sourceCode.getTokenBefore(token);\n\n            if (prevToken &&\n                (CHECK_TYPE.test(prevToken.type) || pattern.test(prevToken.value)) &&\n                !isOpenParenOfTemplate(prevToken) &&\n                !tokensToIgnore.has(prevToken) &&\n                astUtils.isTokenOnSameLine(prevToken, token) &&\n                !sourceCode.isSpaceBetweenTokens(prevToken, token)\n            ) {\n                context.report({\n                    loc: token.loc,\n                    messageId: \"expectedBefore\",\n                    data: token,\n                    fix(fixer) {\n                        return fixer.insertTextBefore(token, \" \");\n                    }\n                });\n            }\n        }\n\n        /**\n         * Reports a given token if there are space(s) before the token.\n         * @param {Token} token A token to report.\n         * @param {RegExp} pattern A pattern of the previous token to check.\n         * @returns {void}\n         */\n        function unexpectSpaceBefore(token, pattern) {\n            const prevToken = sourceCode.getTokenBefore(token);\n\n            if (prevToken &&\n                (CHECK_TYPE.test(prevToken.type) || pattern.test(prevToken.value)) &&\n                !isOpenParenOfTemplate(prevToken) &&\n                !tokensToIgnore.has(prevToken) &&\n                astUtils.isTokenOnSameLine(prevToken, token) &&\n                sourceCode.isSpaceBetweenTokens(prevToken, token)\n            ) {\n                context.report({\n                    loc: { start: prevToken.loc.end, end: token.loc.start },\n                    messageId: \"unexpectedBefore\",\n                    data: token,\n                    fix(fixer) {\n                        return fixer.removeRange([prevToken.range[1], token.range[0]]);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Reports a given token if there are not space(s) after the token.\n         * @param {Token} token A token to report.\n         * @param {RegExp} pattern A pattern of the next token to check.\n         * @returns {void}\n         */\n        function expectSpaceAfter(token, pattern) {\n            const nextToken = sourceCode.getTokenAfter(token);\n\n            if (nextToken &&\n                (CHECK_TYPE.test(nextToken.type) || pattern.test(nextToken.value)) &&\n                !isCloseParenOfTemplate(nextToken) &&\n                !tokensToIgnore.has(nextToken) &&\n                astUtils.isTokenOnSameLine(token, nextToken) &&\n                !sourceCode.isSpaceBetweenTokens(token, nextToken)\n            ) {\n                context.report({\n                    loc: token.loc,\n                    messageId: \"expectedAfter\",\n                    data: token,\n                    fix(fixer) {\n                        return fixer.insertTextAfter(token, \" \");\n                    }\n                });\n            }\n        }\n\n        /**\n         * Reports a given token if there are space(s) after the token.\n         * @param {Token} token A token to report.\n         * @param {RegExp} pattern A pattern of the next token to check.\n         * @returns {void}\n         */\n        function unexpectSpaceAfter(token, pattern) {\n            const nextToken = sourceCode.getTokenAfter(token);\n\n            if (nextToken &&\n                (CHECK_TYPE.test(nextToken.type) || pattern.test(nextToken.value)) &&\n                !isCloseParenOfTemplate(nextToken) &&\n                !tokensToIgnore.has(nextToken) &&\n                astUtils.isTokenOnSameLine(token, nextToken) &&\n                sourceCode.isSpaceBetweenTokens(token, nextToken)\n            ) {\n\n                context.report({\n                    loc: { start: token.loc.end, end: nextToken.loc.start },\n                    messageId: \"unexpectedAfter\",\n                    data: token,\n                    fix(fixer) {\n                        return fixer.removeRange([token.range[1], nextToken.range[0]]);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Parses the option object and determines check methods for each keyword.\n         * @param {Object|undefined} options The option object to parse.\n         * @returns {Object} - Normalized option object.\n         *      Keys are keywords (there are for every keyword).\n         *      Values are instances of `{\"before\": function, \"after\": function}`.\n         */\n        function parseOptions(options = {}) {\n            const before = options.before !== false;\n            const after = options.after !== false;\n            const defaultValue = {\n                before: before ? expectSpaceBefore : unexpectSpaceBefore,\n                after: after ? expectSpaceAfter : unexpectSpaceAfter\n            };\n            const overrides = (options && options.overrides) || {};\n            const retv = Object.create(null);\n\n            for (let i = 0; i < KEYS.length; ++i) {\n                const key = KEYS[i];\n                const override = overrides[key];\n\n                if (override) {\n                    const thisBefore = (\"before\" in override) ? override.before : before;\n                    const thisAfter = (\"after\" in override) ? override.after : after;\n\n                    retv[key] = {\n                        before: thisBefore ? expectSpaceBefore : unexpectSpaceBefore,\n                        after: thisAfter ? expectSpaceAfter : unexpectSpaceAfter\n                    };\n                } else {\n                    retv[key] = defaultValue;\n                }\n            }\n\n            return retv;\n        }\n\n        const checkMethodMap = parseOptions(context.options[0]);\n\n        /**\n         * Reports a given token if usage of spacing followed by the token is\n         * invalid.\n         * @param {Token} token A token to report.\n         * @param {RegExp} [pattern] Optional. A pattern of the previous\n         *      token to check.\n         * @returns {void}\n         */\n        function checkSpacingBefore(token, pattern) {\n            checkMethodMap[token.value].before(token, pattern || PREV_TOKEN);\n        }\n\n        /**\n         * Reports a given token if usage of spacing preceded by the token is\n         * invalid.\n         * @param {Token} token A token to report.\n         * @param {RegExp} [pattern] Optional. A pattern of the next\n         *      token to check.\n         * @returns {void}\n         */\n        function checkSpacingAfter(token, pattern) {\n            checkMethodMap[token.value].after(token, pattern || NEXT_TOKEN);\n        }\n\n        /**\n         * Reports a given token if usage of spacing around the token is invalid.\n         * @param {Token} token A token to report.\n         * @returns {void}\n         */\n        function checkSpacingAround(token) {\n            checkSpacingBefore(token);\n            checkSpacingAfter(token);\n        }\n\n        /**\n         * Reports the first token of a given node if the first token is a keyword\n         * and usage of spacing around the token is invalid.\n         * @param {ASTNode|null} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingAroundFirstToken(node) {\n            const firstToken = node && sourceCode.getFirstToken(node);\n\n            if (firstToken && firstToken.type === \"Keyword\") {\n                checkSpacingAround(firstToken);\n            }\n        }\n\n        /**\n         * Reports the first token of a given node if the first token is a keyword\n         * and usage of spacing followed by the token is invalid.\n         *\n         * This is used for unary operators (e.g. `typeof`), `function`, and `super`.\n         * Other rules are handling usage of spacing preceded by those keywords.\n         * @param {ASTNode|null} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingBeforeFirstToken(node) {\n            const firstToken = node && sourceCode.getFirstToken(node);\n\n            if (firstToken && firstToken.type === \"Keyword\") {\n                checkSpacingBefore(firstToken);\n            }\n        }\n\n        /**\n         * Reports the previous token of a given node if the token is a keyword and\n         * usage of spacing around the token is invalid.\n         * @param {ASTNode|null} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingAroundTokenBefore(node) {\n            if (node) {\n                const token = sourceCode.getTokenBefore(node, astUtils.isKeywordToken);\n\n                checkSpacingAround(token);\n            }\n        }\n\n        /**\n         * Reports `async` or `function` keywords of a given node if usage of\n         * spacing around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForFunction(node) {\n            const firstToken = node && sourceCode.getFirstToken(node);\n\n            if (firstToken &&\n                ((firstToken.type === \"Keyword\" && firstToken.value === \"function\") ||\n                firstToken.value === \"async\")\n            ) {\n                checkSpacingBefore(firstToken);\n            }\n        }\n\n        /**\n         * Reports `class` and `extends` keywords of a given node if usage of\n         * spacing around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForClass(node) {\n            checkSpacingAroundFirstToken(node);\n            checkSpacingAroundTokenBefore(node.superClass);\n        }\n\n        /**\n         * Reports `if` and `else` keywords of a given node if usage of spacing\n         * around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForIfStatement(node) {\n            checkSpacingAroundFirstToken(node);\n            checkSpacingAroundTokenBefore(node.alternate);\n        }\n\n        /**\n         * Reports `try`, `catch`, and `finally` keywords of a given node if usage\n         * of spacing around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForTryStatement(node) {\n            checkSpacingAroundFirstToken(node);\n            checkSpacingAroundFirstToken(node.handler);\n            checkSpacingAroundTokenBefore(node.finalizer);\n        }\n\n        /**\n         * Reports `do` and `while` keywords of a given node if usage of spacing\n         * around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForDoWhileStatement(node) {\n            checkSpacingAroundFirstToken(node);\n            checkSpacingAroundTokenBefore(node.test);\n        }\n\n        /**\n         * Reports `for` and `in` keywords of a given node if usage of spacing\n         * around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForForInStatement(node) {\n            checkSpacingAroundFirstToken(node);\n\n            const inToken = sourceCode.getTokenBefore(node.right, astUtils.isNotOpeningParenToken);\n            const previousToken = sourceCode.getTokenBefore(inToken);\n\n            if (previousToken.type !== \"PrivateIdentifier\") {\n                checkSpacingBefore(inToken);\n            }\n\n            checkSpacingAfter(inToken);\n        }\n\n        /**\n         * Reports `for` and `of` keywords of a given node if usage of spacing\n         * around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForForOfStatement(node) {\n            if (node.await) {\n                checkSpacingBefore(sourceCode.getFirstToken(node, 0));\n                checkSpacingAfter(sourceCode.getFirstToken(node, 1));\n            } else {\n                checkSpacingAroundFirstToken(node);\n            }\n\n            const ofToken = sourceCode.getTokenBefore(node.right, astUtils.isNotOpeningParenToken);\n            const previousToken = sourceCode.getTokenBefore(ofToken);\n\n            if (previousToken.type !== \"PrivateIdentifier\") {\n                checkSpacingBefore(ofToken);\n            }\n\n            checkSpacingAfter(ofToken);\n        }\n\n        /**\n         * Reports `import`, `export`, `as`, and `from` keywords of a given node if\n         * usage of spacing around those keywords is invalid.\n         *\n         * This rule handles the `*` token in module declarations.\n         *\n         *     import*as A from \"./a\"; /*error Expected space(s) after \"import\".\n         *                               error Expected space(s) before \"as\".\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForModuleDeclaration(node) {\n            const firstToken = sourceCode.getFirstToken(node);\n\n            checkSpacingBefore(firstToken, PREV_TOKEN_M);\n            checkSpacingAfter(firstToken, NEXT_TOKEN_M);\n\n            if (node.type === \"ExportDefaultDeclaration\") {\n                checkSpacingAround(sourceCode.getTokenAfter(firstToken));\n            }\n\n            if (node.type === \"ExportAllDeclaration\" && node.exported) {\n                const asToken = sourceCode.getTokenBefore(node.exported);\n\n                checkSpacingBefore(asToken, PREV_TOKEN_M);\n                checkSpacingAfter(asToken, NEXT_TOKEN_M);\n            }\n\n            if (node.source) {\n                const fromToken = sourceCode.getTokenBefore(node.source);\n\n                checkSpacingBefore(fromToken, PREV_TOKEN_M);\n                checkSpacingAfter(fromToken, NEXT_TOKEN_M);\n            }\n        }\n\n        /**\n         * Reports `as` keyword of a given node if usage of spacing around this\n         * keyword is invalid.\n         * @param {ASTNode} node An `ImportSpecifier` node to check.\n         * @returns {void}\n         */\n        function checkSpacingForImportSpecifier(node) {\n            if (node.imported.range[0] !== node.local.range[0]) {\n                const asToken = sourceCode.getTokenBefore(node.local);\n\n                checkSpacingBefore(asToken, PREV_TOKEN_M);\n            }\n        }\n\n        /**\n         * Reports `as` keyword of a given node if usage of spacing around this\n         * keyword is invalid.\n         * @param {ASTNode} node An `ExportSpecifier` node to check.\n         * @returns {void}\n         */\n        function checkSpacingForExportSpecifier(node) {\n            if (node.local.range[0] !== node.exported.range[0]) {\n                const asToken = sourceCode.getTokenBefore(node.exported);\n\n                checkSpacingBefore(asToken, PREV_TOKEN_M);\n                checkSpacingAfter(asToken, NEXT_TOKEN_M);\n            }\n        }\n\n        /**\n         * Reports `as` keyword of a given node if usage of spacing around this\n         * keyword is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForImportNamespaceSpecifier(node) {\n            const asToken = sourceCode.getFirstToken(node, 1);\n\n            checkSpacingBefore(asToken, PREV_TOKEN_M);\n        }\n\n        /**\n         * Reports `static`, `get`, and `set` keywords of a given node if usage of\n         * spacing around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @throws {Error} If unable to find token get, set, or async beside method name.\n         * @returns {void}\n         */\n        function checkSpacingForProperty(node) {\n            if (node.static) {\n                checkSpacingAroundFirstToken(node);\n            }\n            if (node.kind === \"get\" ||\n                node.kind === \"set\" ||\n                (\n                    (node.method || node.type === \"MethodDefinition\") &&\n                    node.value.async\n                )\n            ) {\n                const token = sourceCode.getTokenBefore(\n                    node.key,\n                    tok => {\n                        switch (tok.value) {\n                            case \"get\":\n                            case \"set\":\n                            case \"async\":\n                                return true;\n                            default:\n                                return false;\n                        }\n                    }\n                );\n\n                if (!token) {\n                    throw new Error(\"Failed to find token get, set, or async beside method name\");\n                }\n\n\n                checkSpacingAround(token);\n            }\n        }\n\n        /**\n         * Reports `await` keyword of a given node if usage of spacing before\n         * this keyword is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForAwaitExpression(node) {\n            checkSpacingBefore(sourceCode.getFirstToken(node));\n        }\n\n        return {\n\n            // Statements\n            DebuggerStatement: checkSpacingAroundFirstToken,\n            WithStatement: checkSpacingAroundFirstToken,\n\n            // Statements - Control flow\n            BreakStatement: checkSpacingAroundFirstToken,\n            ContinueStatement: checkSpacingAroundFirstToken,\n            ReturnStatement: checkSpacingAroundFirstToken,\n            ThrowStatement: checkSpacingAroundFirstToken,\n            TryStatement: checkSpacingForTryStatement,\n\n            // Statements - Choice\n            IfStatement: checkSpacingForIfStatement,\n            SwitchStatement: checkSpacingAroundFirstToken,\n            SwitchCase: checkSpacingAroundFirstToken,\n\n            // Statements - Loops\n            DoWhileStatement: checkSpacingForDoWhileStatement,\n            ForInStatement: checkSpacingForForInStatement,\n            ForOfStatement: checkSpacingForForOfStatement,\n            ForStatement: checkSpacingAroundFirstToken,\n            WhileStatement: checkSpacingAroundFirstToken,\n\n            // Statements - Declarations\n            ClassDeclaration: checkSpacingForClass,\n            ExportNamedDeclaration: checkSpacingForModuleDeclaration,\n            ExportDefaultDeclaration: checkSpacingForModuleDeclaration,\n            ExportAllDeclaration: checkSpacingForModuleDeclaration,\n            FunctionDeclaration: checkSpacingForFunction,\n            ImportDeclaration: checkSpacingForModuleDeclaration,\n            VariableDeclaration: checkSpacingAroundFirstToken,\n\n            // Expressions\n            ArrowFunctionExpression: checkSpacingForFunction,\n            AwaitExpression: checkSpacingForAwaitExpression,\n            ClassExpression: checkSpacingForClass,\n            FunctionExpression: checkSpacingForFunction,\n            NewExpression: checkSpacingBeforeFirstToken,\n            Super: checkSpacingBeforeFirstToken,\n            ThisExpression: checkSpacingBeforeFirstToken,\n            UnaryExpression: checkSpacingBeforeFirstToken,\n            YieldExpression: checkSpacingBeforeFirstToken,\n\n            // Others\n            ImportSpecifier: checkSpacingForImportSpecifier,\n            ExportSpecifier: checkSpacingForExportSpecifier,\n            ImportNamespaceSpecifier: checkSpacingForImportNamespaceSpecifier,\n            MethodDefinition: checkSpacingForProperty,\n            PropertyDefinition: checkSpacingForProperty,\n            StaticBlock: checkSpacingAroundFirstToken,\n            Property: checkSpacingForProperty,\n\n            // To avoid conflicts with `space-infix-ops`, e.g. `a > this.b`\n            \"BinaryExpression[operator='>']\"(node) {\n                const operatorToken = sourceCode.getTokenBefore(node.right, astUtils.isNotOpeningParenToken);\n\n                tokensToIgnore.add(operatorToken);\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}