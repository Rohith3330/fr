{"ast":null,"code":"/**\n * @fileoverview <audio> and <video> elements must have a <track> for captions.\n * @author Ethan Cohen\n */\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/media-has-caption'; // -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\nconst expectedError = {\n  message: 'Media elements such as <audio> and <video> must have a <track> for captions.',\n  type: 'JSXOpeningElement'\n};\nconst customSchema = [{\n  audio: ['Audio'],\n  video: ['Video'],\n  track: ['Track']\n}];\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Audio: 'audio',\n      Video: 'video',\n      Track: 'track'\n    }\n  }\n};\nruleTester.run('media-has-caption', rule, {\n  valid: [{\n    code: '<div />;'\n  }, {\n    code: '<MyDiv />;'\n  }, {\n    code: '<audio><track kind=\"captions\" /></audio>'\n  }, {\n    code: '<audio><track kind=\"Captions\" /></audio>'\n  }, {\n    code: '<audio><track kind=\"Captions\" /><track kind=\"subtitles\" /></audio>'\n  }, {\n    code: '<video><track kind=\"captions\" /></video>'\n  }, {\n    code: '<video><track kind=\"Captions\" /></video>'\n  }, {\n    code: '<video><track kind=\"Captions\" /><track kind=\"subtitles\" /></video>'\n  }, {\n    code: '<audio muted={true}></audio>'\n  }, {\n    code: '<video muted={true}></video>'\n  }, {\n    code: '<video muted></video>'\n  }, {\n    code: '<Audio><track kind=\"captions\" /></Audio>',\n    options: customSchema\n  }, {\n    code: '<audio><Track kind=\"captions\" /></audio>',\n    options: customSchema\n  }, {\n    code: '<Video><track kind=\"captions\" /></Video>',\n    options: customSchema\n  }, {\n    code: '<video><Track kind=\"captions\" /></video>',\n    options: customSchema\n  }, {\n    code: '<Audio><Track kind=\"captions\" /></Audio>',\n    options: customSchema\n  }, {\n    code: '<Video><Track kind=\"captions\" /></Video>',\n    options: customSchema\n  }, {\n    code: '<Video muted></Video>',\n    options: customSchema\n  }, {\n    code: '<Video muted={true}></Video>',\n    options: customSchema\n  }, {\n    code: '<Audio muted></Audio>',\n    options: customSchema\n  }, {\n    code: '<Audio muted={true}></Audio>',\n    options: customSchema\n  }, {\n    code: '<Audio><track kind=\"captions\" /></Audio>',\n    settings: componentsSettings\n  }, {\n    code: '<audio><Track kind=\"captions\" /></audio>',\n    settings: componentsSettings\n  }, {\n    code: '<Video><track kind=\"captions\" /></Video>',\n    settings: componentsSettings\n  }, {\n    code: '<video><Track kind=\"captions\" /></video>',\n    settings: componentsSettings\n  }, {\n    code: '<Audio><Track kind=\"captions\" /></Audio>',\n    settings: componentsSettings\n  }, {\n    code: '<Video><Track kind=\"captions\" /></Video>',\n    settings: componentsSettings\n  }, {\n    code: '<Video muted></Video>',\n    settings: componentsSettings\n  }, {\n    code: '<Video muted={true}></Video>',\n    settings: componentsSettings\n  }, {\n    code: '<Audio muted></Audio>',\n    settings: componentsSettings\n  }, {\n    code: '<Audio muted={true}></Audio>',\n    settings: componentsSettings\n  }].map(parserOptionsMapper),\n  invalid: [{\n    code: '<audio><track /></audio>',\n    errors: [expectedError]\n  }, {\n    code: '<audio><track kind=\"subtitles\" /></audio>',\n    errors: [expectedError]\n  }, {\n    code: '<audio />',\n    errors: [expectedError]\n  }, {\n    code: '<video><track /></video>',\n    errors: [expectedError]\n  }, {\n    code: '<video><track kind=\"subtitles\" /></video>',\n    errors: [expectedError]\n  }, {\n    code: '<Audio muted={false}></Audio>',\n    options: customSchema,\n    errors: [expectedError]\n  }, {\n    code: '<Video muted={false}></Video>',\n    options: customSchema,\n    errors: [expectedError]\n  }, {\n    code: '<Audio muted={false}></Audio>',\n    settings: componentsSettings,\n    errors: [expectedError]\n  }, {\n    code: '<Video muted={false}></Video>',\n    settings: componentsSettings,\n    errors: [expectedError]\n  }, {\n    code: '<video />',\n    errors: [expectedError]\n  }, {\n    code: '<audio>Foo</audio>',\n    errors: [expectedError]\n  }, {\n    code: '<video>Foo</video>',\n    errors: [expectedError]\n  }, {\n    code: '<Audio />',\n    options: customSchema,\n    errors: [expectedError]\n  }, {\n    code: '<Video />',\n    options: customSchema,\n    errors: [expectedError]\n  }, {\n    code: '<Audio />',\n    settings: componentsSettings,\n    errors: [expectedError]\n  }, {\n    code: '<Video />',\n    settings: componentsSettings,\n    errors: [expectedError]\n  }, {\n    code: '<audio><Track /></audio>',\n    options: customSchema,\n    errors: [expectedError]\n  }, {\n    code: '<video><Track /></video>',\n    options: customSchema,\n    errors: [expectedError]\n  }, {\n    code: '<Audio><Track kind=\"subtitles\" /></Audio>',\n    options: customSchema,\n    errors: [expectedError]\n  }, {\n    code: '<Video><Track kind=\"subtitles\" /></Video>',\n    options: customSchema,\n    errors: [expectedError]\n  }, {\n    code: '<Audio><Track kind=\"subtitles\" /></Audio>',\n    settings: componentsSettings,\n    errors: [expectedError]\n  }, {\n    code: '<Video><Track kind=\"subtitles\" /></Video>',\n    settings: componentsSettings,\n    errors: [expectedError]\n  }].map(parserOptionsMapper)\n});","map":{"version":3,"names":["RuleTester","parserOptionsMapper","rule","ruleTester","expectedError","message","type","customSchema","audio","video","track","componentsSettings","components","Audio","Video","Track","run","valid","code","options","settings","map","invalid","errors"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/media-has-caption-test.js"],"sourcesContent":["/**\n * @fileoverview <audio> and <video> elements must have a <track> for captions.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/media-has-caption';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst expectedError = {\n  message: 'Media elements such as <audio> and <video> must have a <track> for captions.',\n  type: 'JSXOpeningElement',\n};\n\nconst customSchema = [\n  {\n    audio: ['Audio'],\n    video: ['Video'],\n    track: ['Track'],\n  },\n];\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Audio: 'audio',\n      Video: 'video',\n      Track: 'track',\n    },\n  },\n};\n\nruleTester.run('media-has-caption', rule, {\n  valid: [\n    { code: '<div />;' },\n    { code: '<MyDiv />;' },\n    { code: '<audio><track kind=\"captions\" /></audio>' },\n    { code: '<audio><track kind=\"Captions\" /></audio>' },\n    {\n      code: '<audio><track kind=\"Captions\" /><track kind=\"subtitles\" /></audio>',\n    },\n    { code: '<video><track kind=\"captions\" /></video>' },\n    { code: '<video><track kind=\"Captions\" /></video>' },\n    {\n      code: '<video><track kind=\"Captions\" /><track kind=\"subtitles\" /></video>',\n    },\n    {\n      code: '<audio muted={true}></audio>',\n    },\n    {\n      code: '<video muted={true}></video>',\n    },\n    {\n      code: '<video muted></video>',\n    },\n    {\n      code: '<Audio><track kind=\"captions\" /></Audio>',\n      options: customSchema,\n    },\n    {\n      code: '<audio><Track kind=\"captions\" /></audio>',\n      options: customSchema,\n    },\n    {\n      code: '<Video><track kind=\"captions\" /></Video>',\n      options: customSchema,\n    },\n    {\n      code: '<video><Track kind=\"captions\" /></video>',\n      options: customSchema,\n    },\n    {\n      code: '<Audio><Track kind=\"captions\" /></Audio>',\n      options: customSchema,\n    },\n    {\n      code: '<Video><Track kind=\"captions\" /></Video>',\n      options: customSchema,\n    },\n    {\n      code: '<Video muted></Video>',\n      options: customSchema,\n    },\n    {\n      code: '<Video muted={true}></Video>',\n      options: customSchema,\n    },\n    {\n      code: '<Audio muted></Audio>',\n      options: customSchema,\n    },\n    {\n      code: '<Audio muted={true}></Audio>',\n      options: customSchema,\n    },\n    {\n      code: '<Audio><track kind=\"captions\" /></Audio>',\n      settings: componentsSettings,\n    },\n    {\n      code: '<audio><Track kind=\"captions\" /></audio>',\n      settings: componentsSettings,\n    },\n    {\n      code: '<Video><track kind=\"captions\" /></Video>',\n      settings: componentsSettings,\n    },\n    {\n      code: '<video><Track kind=\"captions\" /></video>',\n      settings: componentsSettings,\n    },\n    {\n      code: '<Audio><Track kind=\"captions\" /></Audio>',\n      settings: componentsSettings,\n    },\n    {\n      code: '<Video><Track kind=\"captions\" /></Video>',\n      settings: componentsSettings,\n    },\n    {\n      code: '<Video muted></Video>',\n      settings: componentsSettings,\n    },\n    {\n      code: '<Video muted={true}></Video>',\n      settings: componentsSettings,\n    },\n    {\n      code: '<Audio muted></Audio>',\n      settings: componentsSettings,\n    },\n    {\n      code: '<Audio muted={true}></Audio>',\n      settings: componentsSettings,\n    },\n  ].map(parserOptionsMapper),\n  invalid: [\n    { code: '<audio><track /></audio>', errors: [expectedError] },\n    {\n      code: '<audio><track kind=\"subtitles\" /></audio>',\n      errors: [expectedError],\n    },\n    { code: '<audio />', errors: [expectedError] },\n    { code: '<video><track /></video>', errors: [expectedError] },\n    {\n      code: '<video><track kind=\"subtitles\" /></video>',\n      errors: [expectedError],\n    },\n    {\n      code: '<Audio muted={false}></Audio>',\n      options: customSchema,\n      errors: [expectedError],\n    },\n    {\n      code: '<Video muted={false}></Video>',\n      options: customSchema,\n      errors: [expectedError],\n    },\n    {\n      code: '<Audio muted={false}></Audio>',\n      settings: componentsSettings,\n      errors: [expectedError],\n    },\n    {\n      code: '<Video muted={false}></Video>',\n      settings: componentsSettings,\n      errors: [expectedError],\n    },\n    { code: '<video />', errors: [expectedError] },\n    { code: '<audio>Foo</audio>', errors: [expectedError] },\n    { code: '<video>Foo</video>', errors: [expectedError] },\n    { code: '<Audio />', options: customSchema, errors: [expectedError] },\n    { code: '<Video />', options: customSchema, errors: [expectedError] },\n    { code: '<Audio />', settings: componentsSettings, errors: [expectedError] },\n    { code: '<Video />', settings: componentsSettings, errors: [expectedError] },\n    { code: '<audio><Track /></audio>', options: customSchema, errors: [expectedError] },\n    { code: '<video><Track /></video>', options: customSchema, errors: [expectedError] },\n    {\n      code: '<Audio><Track kind=\"subtitles\" /></Audio>',\n      options: customSchema,\n      errors: [expectedError],\n    },\n    {\n      code: '<Video><Track kind=\"subtitles\" /></Video>',\n      options: customSchema,\n      errors: [expectedError],\n    },\n    {\n      code: '<Audio><Track kind=\"subtitles\" /></Audio>',\n      settings: componentsSettings,\n      errors: [expectedError],\n    },\n    {\n      code: '<Video><Track kind=\"subtitles\" /></Video>',\n      settings: componentsSettings,\n      errors: [expectedError],\n    },\n  ].map(parserOptionsMapper),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}