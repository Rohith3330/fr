{"ast":null,"code":"/**\n * @fileoverview A rule to disallow modifying variables that are declared using `const`\n * @author Toru Nagashima\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow reassigning `const` variables\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-const-assign\"\n    },\n    schema: [],\n    messages: {\n      const: \"'{{name}}' is constant.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Finds and reports references that are non initializer and writable.\n     * @param {Variable} variable A variable to check.\n     * @returns {void}\n     */\n    function checkVariable(variable) {\n      astUtils.getModifyingReferences(variable.references).forEach(reference => {\n        context.report({\n          node: reference.identifier,\n          messageId: \"const\",\n          data: {\n            name: reference.identifier.name\n          }\n        });\n      });\n    }\n\n    return {\n      VariableDeclaration(node) {\n        if (node.kind === \"const\") {\n          context.getDeclaredVariables(node).forEach(checkVariable);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","messages","const","create","context","checkVariable","variable","getModifyingReferences","references","forEach","reference","report","node","identifier","messageId","data","name","VariableDeclaration","kind","getDeclaredVariables"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-const-assign.js"],"sourcesContent":["/**\n * @fileoverview A rule to disallow modifying variables that are declared using `const`\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow reassigning `const` variables\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-const-assign\"\n        },\n\n        schema: [],\n\n        messages: {\n            const: \"'{{name}}' is constant.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Finds and reports references that are non initializer and writable.\n         * @param {Variable} variable A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            astUtils.getModifyingReferences(variable.references).forEach(reference => {\n                context.report({ node: reference.identifier, messageId: \"const\", data: { name: reference.identifier.name } });\n            });\n        }\n\n        return {\n            VariableDeclaration(node) {\n                if (node.kind === \"const\") {\n                    context.getDeclaredVariables(node).forEach(checkVariable);\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,wCADX;MAEFC,WAAW,EAAE,IAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAWFC,QAAQ,EAAE;MACNC,KAAK,EAAE;IADD;EAXR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;MAC7BhB,QAAQ,CAACiB,sBAAT,CAAgCD,QAAQ,CAACE,UAAzC,EAAqDC,OAArD,CAA6DC,SAAS,IAAI;QACtEN,OAAO,CAACO,MAAR,CAAe;UAAEC,IAAI,EAAEF,SAAS,CAACG,UAAlB;UAA8BC,SAAS,EAAE,OAAzC;UAAkDC,IAAI,EAAE;YAAEC,IAAI,EAAEN,SAAS,CAACG,UAAV,CAAqBG;UAA7B;QAAxD,CAAf;MACH,CAFD;IAGH;;IAED,OAAO;MACHC,mBAAmB,CAACL,IAAD,EAAO;QACtB,IAAIA,IAAI,CAACM,IAAL,KAAc,OAAlB,EAA2B;UACvBd,OAAO,CAACe,oBAAR,CAA6BP,IAA7B,EAAmCH,OAAnC,CAA2CJ,aAA3C;QACH;MACJ;;IALE,CAAP;EAQH;;AAtCY,CAAjB"},"metadata":{},"sourceType":"script"}