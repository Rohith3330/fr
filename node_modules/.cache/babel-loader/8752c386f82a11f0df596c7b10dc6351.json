{"ast":null,"code":"'use strict';\n/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nconst {\n  ReportBase\n} = require('istanbul-lib-report');\n\nclass CloverReport extends ReportBase {\n  constructor(opts) {\n    super();\n    this.cw = null;\n    this.xml = null;\n    this.projectRoot = opts.projectRoot || process.cwd();\n    this.file = opts.file || 'clover.xml';\n  }\n\n  onStart(root, context) {\n    this.cw = context.writer.writeFile(this.file);\n    this.xml = context.getXMLWriter(this.cw);\n    this.writeRootStats(root, context);\n  }\n\n  onEnd() {\n    this.xml.closeAll();\n    this.cw.close();\n  }\n\n  getTreeStats(node, context) {\n    const state = {\n      packages: 0,\n      files: 0,\n      classes: 0\n    };\n    const visitor = {\n      onSummary(node, state) {\n        const metrics = node.getCoverageSummary(true);\n\n        if (metrics) {\n          state.packages += 1;\n        }\n      },\n\n      onDetail(node, state) {\n        state.classes += 1;\n        state.files += 1;\n      }\n\n    };\n    node.visit(context.getVisitor(visitor), state);\n    return state;\n  }\n\n  writeRootStats(node, context) {\n    this.cw.println('<?xml version=\"1.0\" encoding=\"UTF-8\"?>');\n    this.xml.openTag('coverage', {\n      generated: Date.now().toString(),\n      clover: '3.2.0'\n    });\n    this.xml.openTag('project', {\n      timestamp: Date.now().toString(),\n      name: 'All files'\n    });\n    const metrics = node.getCoverageSummary();\n    this.xml.inlineTag('metrics', {\n      statements: metrics.lines.total,\n      coveredstatements: metrics.lines.covered,\n      conditionals: metrics.branches.total,\n      coveredconditionals: metrics.branches.covered,\n      methods: metrics.functions.total,\n      coveredmethods: metrics.functions.covered,\n      elements: metrics.lines.total + metrics.branches.total + metrics.functions.total,\n      coveredelements: metrics.lines.covered + metrics.branches.covered + metrics.functions.covered,\n      complexity: 0,\n      loc: metrics.lines.total,\n      ncloc: metrics.lines.total,\n      // what? copied as-is from old report\n      ...this.getTreeStats(node, context)\n    });\n  }\n\n  writeMetrics(metrics) {\n    this.xml.inlineTag('metrics', {\n      statements: metrics.lines.total,\n      coveredstatements: metrics.lines.covered,\n      conditionals: metrics.branches.total,\n      coveredconditionals: metrics.branches.covered,\n      methods: metrics.functions.total,\n      coveredmethods: metrics.functions.covered\n    });\n  }\n\n  onSummary(node) {\n    if (node.isRoot()) {\n      return;\n    }\n\n    const metrics = node.getCoverageSummary(true);\n\n    if (!metrics) {\n      return;\n    }\n\n    this.xml.openTag('package', {\n      name: asJavaPackage(node)\n    });\n    this.writeMetrics(metrics);\n  }\n\n  onSummaryEnd(node) {\n    if (node.isRoot()) {\n      return;\n    }\n\n    this.xml.closeTag('package');\n  }\n\n  onDetail(node) {\n    const fileCoverage = node.getFileCoverage();\n    const metrics = node.getCoverageSummary();\n    const branchByLine = fileCoverage.getBranchCoverageByLine();\n    this.xml.openTag('file', {\n      name: asClassName(node),\n      path: fileCoverage.path\n    });\n    this.writeMetrics(metrics);\n    const lines = fileCoverage.getLineCoverage();\n    Object.entries(lines).forEach(_ref => {\n      let [k, count] = _ref;\n      const attrs = {\n        num: k,\n        count,\n        type: 'stmt'\n      };\n      const branchDetail = branchByLine[k];\n\n      if (branchDetail) {\n        attrs.type = 'cond';\n        attrs.truecount = branchDetail.covered;\n        attrs.falsecount = branchDetail.total - branchDetail.covered;\n      }\n\n      this.xml.inlineTag('line', attrs);\n    });\n    this.xml.closeTag('file');\n  }\n\n}\n\nfunction asJavaPackage(node) {\n  return node.getRelativeName().replace(/\\//g, '.').replace(/\\\\/g, '.').replace(/\\.$/, '');\n}\n\nfunction asClassName(node) {\n  return node.getRelativeName().replace(/.*[\\\\/]/, '');\n}\n\nmodule.exports = CloverReport;","map":{"version":3,"names":["ReportBase","require","CloverReport","constructor","opts","cw","xml","projectRoot","process","cwd","file","onStart","root","context","writer","writeFile","getXMLWriter","writeRootStats","onEnd","closeAll","close","getTreeStats","node","state","packages","files","classes","visitor","onSummary","metrics","getCoverageSummary","onDetail","visit","getVisitor","println","openTag","generated","Date","now","toString","clover","timestamp","name","inlineTag","statements","lines","total","coveredstatements","covered","conditionals","branches","coveredconditionals","methods","functions","coveredmethods","elements","coveredelements","complexity","loc","ncloc","writeMetrics","isRoot","asJavaPackage","onSummaryEnd","closeTag","fileCoverage","getFileCoverage","branchByLine","getBranchCoverageByLine","asClassName","path","getLineCoverage","Object","entries","forEach","k","count","attrs","num","type","branchDetail","truecount","falsecount","getRelativeName","replace","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/istanbul-reports/lib/clover/index.js"],"sourcesContent":["'use strict';\n/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nconst { ReportBase } = require('istanbul-lib-report');\n\nclass CloverReport extends ReportBase {\n    constructor(opts) {\n        super();\n\n        this.cw = null;\n        this.xml = null;\n        this.projectRoot = opts.projectRoot || process.cwd();\n        this.file = opts.file || 'clover.xml';\n    }\n\n    onStart(root, context) {\n        this.cw = context.writer.writeFile(this.file);\n        this.xml = context.getXMLWriter(this.cw);\n        this.writeRootStats(root, context);\n    }\n\n    onEnd() {\n        this.xml.closeAll();\n        this.cw.close();\n    }\n\n    getTreeStats(node, context) {\n        const state = {\n            packages: 0,\n            files: 0,\n            classes: 0\n        };\n        const visitor = {\n            onSummary(node, state) {\n                const metrics = node.getCoverageSummary(true);\n                if (metrics) {\n                    state.packages += 1;\n                }\n            },\n            onDetail(node, state) {\n                state.classes += 1;\n                state.files += 1;\n            }\n        };\n        node.visit(context.getVisitor(visitor), state);\n        return state;\n    }\n\n    writeRootStats(node, context) {\n        this.cw.println('<?xml version=\"1.0\" encoding=\"UTF-8\"?>');\n        this.xml.openTag('coverage', {\n            generated: Date.now().toString(),\n            clover: '3.2.0'\n        });\n\n        this.xml.openTag('project', {\n            timestamp: Date.now().toString(),\n            name: 'All files'\n        });\n\n        const metrics = node.getCoverageSummary();\n        this.xml.inlineTag('metrics', {\n            statements: metrics.lines.total,\n            coveredstatements: metrics.lines.covered,\n            conditionals: metrics.branches.total,\n            coveredconditionals: metrics.branches.covered,\n            methods: metrics.functions.total,\n            coveredmethods: metrics.functions.covered,\n            elements:\n                metrics.lines.total +\n                metrics.branches.total +\n                metrics.functions.total,\n            coveredelements:\n                metrics.lines.covered +\n                metrics.branches.covered +\n                metrics.functions.covered,\n            complexity: 0,\n            loc: metrics.lines.total,\n            ncloc: metrics.lines.total, // what? copied as-is from old report\n            ...this.getTreeStats(node, context)\n        });\n    }\n\n    writeMetrics(metrics) {\n        this.xml.inlineTag('metrics', {\n            statements: metrics.lines.total,\n            coveredstatements: metrics.lines.covered,\n            conditionals: metrics.branches.total,\n            coveredconditionals: metrics.branches.covered,\n            methods: metrics.functions.total,\n            coveredmethods: metrics.functions.covered\n        });\n    }\n\n    onSummary(node) {\n        if (node.isRoot()) {\n            return;\n        }\n        const metrics = node.getCoverageSummary(true);\n        if (!metrics) {\n            return;\n        }\n\n        this.xml.openTag('package', {\n            name: asJavaPackage(node)\n        });\n        this.writeMetrics(metrics);\n    }\n\n    onSummaryEnd(node) {\n        if (node.isRoot()) {\n            return;\n        }\n        this.xml.closeTag('package');\n    }\n\n    onDetail(node) {\n        const fileCoverage = node.getFileCoverage();\n        const metrics = node.getCoverageSummary();\n        const branchByLine = fileCoverage.getBranchCoverageByLine();\n\n        this.xml.openTag('file', {\n            name: asClassName(node),\n            path: fileCoverage.path\n        });\n\n        this.writeMetrics(metrics);\n\n        const lines = fileCoverage.getLineCoverage();\n        Object.entries(lines).forEach(([k, count]) => {\n            const attrs = {\n                num: k,\n                count,\n                type: 'stmt'\n            };\n            const branchDetail = branchByLine[k];\n\n            if (branchDetail) {\n                attrs.type = 'cond';\n                attrs.truecount = branchDetail.covered;\n                attrs.falsecount = branchDetail.total - branchDetail.covered;\n            }\n            this.xml.inlineTag('line', attrs);\n        });\n\n        this.xml.closeTag('file');\n    }\n}\n\nfunction asJavaPackage(node) {\n    return node\n        .getRelativeName()\n        .replace(/\\//g, '.')\n        .replace(/\\\\/g, '.')\n        .replace(/\\.$/, '');\n}\n\nfunction asClassName(node) {\n    return node.getRelativeName().replace(/.*[\\\\/]/, '');\n}\n\nmodule.exports = CloverReport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}