{"ast":null,"code":"/**\n * @fileoverview Rule to forbid control characters from regular expressions.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\nconst RegExpValidator = require(\"regexpp\").RegExpValidator;\n\nconst collector = new class {\n  constructor() {\n    this._source = \"\";\n    this._controlChars = [];\n    this._validator = new RegExpValidator(this);\n  }\n\n  onPatternEnter() {\n    this._controlChars = [];\n  }\n\n  onCharacter(start, end, cp) {\n    if (cp >= 0x00 && cp <= 0x1F && (this._source.codePointAt(start) === cp || this._source.slice(start, end).startsWith(\"\\\\x\") || this._source.slice(start, end).startsWith(\"\\\\u\"))) {\n      this._controlChars.push(`\\\\x${`0${cp.toString(16)}`.slice(-2)}`);\n    }\n  }\n\n  collectControlChars(regexpStr, flags) {\n    const uFlag = typeof flags === \"string\" && flags.includes(\"u\");\n\n    try {\n      this._source = regexpStr;\n\n      this._validator.validatePattern(regexpStr, void 0, void 0, uFlag); // Call onCharacter hook\n\n    } catch {// Ignore syntax errors in RegExp.\n    }\n\n    return this._controlChars;\n  }\n\n}(); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow control characters in regular expressions\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-control-regex\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Unexpected control character(s) in regular expression: {{controlChars}}.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Get the regex expression\n     * @param {ASTNode} node `Literal` node to evaluate\n     * @returns {{ pattern: string, flags: string | null } | null} Regex if found (the given node is either a regex literal\n     * or a string literal that is the pattern argument of a RegExp constructor call). Otherwise `null`. If flags cannot be determined,\n     * the `flags` property will be `null`.\n     * @private\n     */\n    function getRegExp(node) {\n      if (node.regex) {\n        return node.regex;\n      }\n\n      if (typeof node.value === \"string\" && (node.parent.type === \"NewExpression\" || node.parent.type === \"CallExpression\") && node.parent.callee.type === \"Identifier\" && node.parent.callee.name === \"RegExp\" && node.parent.arguments[0] === node) {\n        const pattern = node.value;\n        const flags = node.parent.arguments.length > 1 && node.parent.arguments[1].type === \"Literal\" && typeof node.parent.arguments[1].value === \"string\" ? node.parent.arguments[1].value : null;\n        return {\n          pattern,\n          flags\n        };\n      }\n\n      return null;\n    }\n\n    return {\n      Literal(node) {\n        const regExp = getRegExp(node);\n\n        if (regExp) {\n          const {\n            pattern,\n            flags\n          } = regExp;\n          const controlCharacters = collector.collectControlChars(pattern, flags);\n\n          if (controlCharacters.length > 0) {\n            context.report({\n              node,\n              messageId: \"unexpected\",\n              data: {\n                controlChars: controlCharacters.join(\", \")\n              }\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["RegExpValidator","require","collector","constructor","_source","_controlChars","_validator","onPatternEnter","onCharacter","start","end","cp","codePointAt","slice","startsWith","push","toString","collectControlChars","regexpStr","flags","uFlag","includes","validatePattern","module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpected","create","context","getRegExp","node","regex","value","parent","callee","name","arguments","pattern","length","Literal","regExp","controlCharacters","report","messageId","data","controlChars","join"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-control-regex.js"],"sourcesContent":["/**\n * @fileoverview Rule to forbid control characters from regular expressions.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\nconst RegExpValidator = require(\"regexpp\").RegExpValidator;\nconst collector = new (class {\n    constructor() {\n        this._source = \"\";\n        this._controlChars = [];\n        this._validator = new RegExpValidator(this);\n    }\n\n    onPatternEnter() {\n        this._controlChars = [];\n    }\n\n    onCharacter(start, end, cp) {\n        if (cp >= 0x00 &&\n            cp <= 0x1F &&\n            (\n                this._source.codePointAt(start) === cp ||\n                this._source.slice(start, end).startsWith(\"\\\\x\") ||\n                this._source.slice(start, end).startsWith(\"\\\\u\")\n            )\n        ) {\n            this._controlChars.push(`\\\\x${`0${cp.toString(16)}`.slice(-2)}`);\n        }\n    }\n\n    collectControlChars(regexpStr, flags) {\n        const uFlag = typeof flags === \"string\" && flags.includes(\"u\");\n\n        try {\n            this._source = regexpStr;\n            this._validator.validatePattern(regexpStr, void 0, void 0, uFlag); // Call onCharacter hook\n        } catch {\n\n            // Ignore syntax errors in RegExp.\n        }\n        return this._controlChars;\n    }\n})();\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow control characters in regular expressions\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-control-regex\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Unexpected control character(s) in regular expression: {{controlChars}}.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Get the regex expression\n         * @param {ASTNode} node `Literal` node to evaluate\n         * @returns {{ pattern: string, flags: string | null } | null} Regex if found (the given node is either a regex literal\n         * or a string literal that is the pattern argument of a RegExp constructor call). Otherwise `null`. If flags cannot be determined,\n         * the `flags` property will be `null`.\n         * @private\n         */\n        function getRegExp(node) {\n            if (node.regex) {\n                return node.regex;\n            }\n            if (typeof node.value === \"string\" &&\n                (node.parent.type === \"NewExpression\" || node.parent.type === \"CallExpression\") &&\n                node.parent.callee.type === \"Identifier\" &&\n                node.parent.callee.name === \"RegExp\" &&\n                node.parent.arguments[0] === node\n            ) {\n                const pattern = node.value;\n                const flags =\n                    node.parent.arguments.length > 1 &&\n                    node.parent.arguments[1].type === \"Literal\" &&\n                    typeof node.parent.arguments[1].value === \"string\"\n                        ? node.parent.arguments[1].value\n                        : null;\n\n                return { pattern, flags };\n            }\n\n            return null;\n        }\n\n        return {\n            Literal(node) {\n                const regExp = getRegExp(node);\n\n                if (regExp) {\n                    const { pattern, flags } = regExp;\n                    const controlCharacters = collector.collectControlChars(pattern, flags);\n\n                    if (controlCharacters.length > 0) {\n                        context.report({\n                            node,\n                            messageId: \"unexpected\",\n                            data: {\n                                controlChars: controlCharacters.join(\", \")\n                            }\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,eAA3C;;AACA,MAAME,SAAS,GAAG,IAAK,MAAM;EACzBC,WAAW,GAAG;IACV,KAAKC,OAAL,GAAe,EAAf;IACA,KAAKC,aAAL,GAAqB,EAArB;IACA,KAAKC,UAAL,GAAkB,IAAIN,eAAJ,CAAoB,IAApB,CAAlB;EACH;;EAEDO,cAAc,GAAG;IACb,KAAKF,aAAL,GAAqB,EAArB;EACH;;EAEDG,WAAW,CAACC,KAAD,EAAQC,GAAR,EAAaC,EAAb,EAAiB;IACxB,IAAIA,EAAE,IAAI,IAAN,IACAA,EAAE,IAAI,IADN,KAGI,KAAKP,OAAL,CAAaQ,WAAb,CAAyBH,KAAzB,MAAoCE,EAApC,IACA,KAAKP,OAAL,CAAaS,KAAb,CAAmBJ,KAAnB,EAA0BC,GAA1B,EAA+BI,UAA/B,CAA0C,KAA1C,CADA,IAEA,KAAKV,OAAL,CAAaS,KAAb,CAAmBJ,KAAnB,EAA0BC,GAA1B,EAA+BI,UAA/B,CAA0C,KAA1C,CALJ,CAAJ,EAOE;MACE,KAAKT,aAAL,CAAmBU,IAAnB,CAAyB,MAAM,IAAGJ,EAAE,CAACK,QAAH,CAAY,EAAZ,CAAgB,EAApB,CAAsBH,KAAtB,CAA4B,CAAC,CAA7B,CAAgC,EAA9D;IACH;EACJ;;EAEDI,mBAAmB,CAACC,SAAD,EAAYC,KAAZ,EAAmB;IAClC,MAAMC,KAAK,GAAG,OAAOD,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACE,QAAN,CAAe,GAAf,CAA3C;;IAEA,IAAI;MACA,KAAKjB,OAAL,GAAec,SAAf;;MACA,KAAKZ,UAAL,CAAgBgB,eAAhB,CAAgCJ,SAAhC,EAA2C,KAAK,CAAhD,EAAmD,KAAK,CAAxD,EAA2DE,KAA3D,EAFA,CAEmE;;IACtE,CAHD,CAGE,MAAM,CAEJ;IACH;;IACD,OAAO,KAAKf,aAAZ;EACH;;AAnCwB,CAAX,EAAlB,C,CAsCA;AACA;AACA;;AAEA;;AACAkB,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,oDADX;MAEFC,WAAW,EAAE,IAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAWFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAXR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;MACrB,IAAIA,IAAI,CAACC,KAAT,EAAgB;QACZ,OAAOD,IAAI,CAACC,KAAZ;MACH;;MACD,IAAI,OAAOD,IAAI,CAACE,KAAZ,KAAsB,QAAtB,KACCF,IAAI,CAACG,MAAL,CAAYd,IAAZ,KAAqB,eAArB,IAAwCW,IAAI,CAACG,MAAL,CAAYd,IAAZ,KAAqB,gBAD9D,KAEAW,IAAI,CAACG,MAAL,CAAYC,MAAZ,CAAmBf,IAAnB,KAA4B,YAF5B,IAGAW,IAAI,CAACG,MAAL,CAAYC,MAAZ,CAAmBC,IAAnB,KAA4B,QAH5B,IAIAL,IAAI,CAACG,MAAL,CAAYG,SAAZ,CAAsB,CAAtB,MAA6BN,IAJjC,EAKE;QACE,MAAMO,OAAO,GAAGP,IAAI,CAACE,KAArB;QACA,MAAMpB,KAAK,GACPkB,IAAI,CAACG,MAAL,CAAYG,SAAZ,CAAsBE,MAAtB,GAA+B,CAA/B,IACAR,IAAI,CAACG,MAAL,CAAYG,SAAZ,CAAsB,CAAtB,EAAyBjB,IAAzB,KAAkC,SADlC,IAEA,OAAOW,IAAI,CAACG,MAAL,CAAYG,SAAZ,CAAsB,CAAtB,EAAyBJ,KAAhC,KAA0C,QAF1C,GAGMF,IAAI,CAACG,MAAL,CAAYG,SAAZ,CAAsB,CAAtB,EAAyBJ,KAH/B,GAIM,IALV;QAOA,OAAO;UAAEK,OAAF;UAAWzB;QAAX,CAAP;MACH;;MAED,OAAO,IAAP;IACH;;IAED,OAAO;MACH2B,OAAO,CAACT,IAAD,EAAO;QACV,MAAMU,MAAM,GAAGX,SAAS,CAACC,IAAD,CAAxB;;QAEA,IAAIU,MAAJ,EAAY;UACR,MAAM;YAAEH,OAAF;YAAWzB;UAAX,IAAqB4B,MAA3B;UACA,MAAMC,iBAAiB,GAAG9C,SAAS,CAACe,mBAAV,CAA8B2B,OAA9B,EAAuCzB,KAAvC,CAA1B;;UAEA,IAAI6B,iBAAiB,CAACH,MAAlB,GAA2B,CAA/B,EAAkC;YAC9BV,OAAO,CAACc,MAAR,CAAe;cACXZ,IADW;cAEXa,SAAS,EAAE,YAFA;cAGXC,IAAI,EAAE;gBACFC,YAAY,EAAEJ,iBAAiB,CAACK,IAAlB,CAAuB,IAAvB;cADZ;YAHK,CAAf;UAOH;QACJ;MACJ;;IAlBE,CAAP;EAqBH;;AAxEY,CAAjB"},"metadata":{},"sourceType":"script"}