{"ast":null,"code":"'use strict';\n\nconst {\n  selectAll,\n  selectOne,\n  is\n} = require('css-select');\n\nconst svgoCssSelectAdapter = require('./css-select-adapter');\n\nconst CSSClassList = require('./css-class-list');\n\nconst CSSStyleDeclaration = require('./css-style-declaration');\n/**\n * @type {(name: string) => { prefix: string, local: string }}\n */\n\n\nconst parseName = name => {\n  if (name == null) {\n    return {\n      prefix: '',\n      local: ''\n    };\n  }\n\n  if (name === 'xmlns') {\n    return {\n      prefix: 'xmlns',\n      local: ''\n    };\n  }\n\n  const chunks = name.split(':');\n\n  if (chunks.length === 1) {\n    return {\n      prefix: '',\n      local: chunks[0]\n    };\n  }\n\n  return {\n    prefix: chunks[0],\n    local: chunks[1]\n  };\n};\n\nvar cssSelectOpts = {\n  xmlMode: true,\n  adapter: svgoCssSelectAdapter\n};\nconst attrsHandler = {\n  get: (attributes, name) => {\n    // eslint-disable-next-line no-prototype-builtins\n    if (attributes.hasOwnProperty(name)) {\n      return {\n        name,\n\n        get value() {\n          return attributes[name];\n        },\n\n        set value(value) {\n          attributes[name] = value;\n        }\n\n      };\n    }\n  },\n  set: (attributes, name, attr) => {\n    attributes[name] = attr.value;\n    return true;\n  }\n};\n\nvar JSAPI = function (data, parentNode) {\n  Object.assign(this, data);\n\n  if (this.type === 'element') {\n    if (this.attributes == null) {\n      this.attributes = {};\n    }\n\n    if (this.children == null) {\n      this.children = [];\n    }\n\n    Object.defineProperty(this, 'class', {\n      writable: true,\n      configurable: true,\n      value: new CSSClassList(this)\n    });\n    Object.defineProperty(this, 'style', {\n      writable: true,\n      configurable: true,\n      value: new CSSStyleDeclaration(this)\n    });\n    Object.defineProperty(this, 'parentNode', {\n      writable: true,\n      value: parentNode\n    }); // temporary attrs polyfill\n    // TODO remove after migration\n\n    const element = this;\n    Object.defineProperty(this, 'attrs', {\n      configurable: true,\n\n      get() {\n        return new Proxy(element.attributes, attrsHandler);\n      },\n\n      set(value) {\n        const newAttributes = {};\n\n        for (const attr of Object.values(value)) {\n          newAttributes[attr.name] = attr.value;\n        }\n\n        element.attributes = newAttributes;\n      }\n\n    });\n  }\n};\n\nmodule.exports = JSAPI;\n/**\n * Perform a deep clone of this node.\n *\n * @return {Object} element\n */\n\nJSAPI.prototype.clone = function () {\n  const {\n    children,\n    ...nodeData\n  } = this; // Deep-clone node data.\n\n  const clonedNode = new JSAPI(JSON.parse(JSON.stringify(nodeData)), null);\n\n  if (children) {\n    clonedNode.children = children.map(child => {\n      const clonedChild = child.clone();\n      clonedChild.parentNode = clonedNode;\n      return clonedChild;\n    });\n  }\n\n  return clonedNode;\n};\n/**\n * Determine if item is an element\n * (any, with a specific name or in a names array).\n *\n * @param {String|Array} [param] element name or names arrays\n * @return {Boolean}\n */\n\n\nJSAPI.prototype.isElem = function (param) {\n  if (this.type !== 'element') {\n    return false;\n  }\n\n  if (param == null) {\n    return true;\n  }\n\n  if (Array.isArray(param)) {\n    return param.includes(this.name);\n  }\n\n  return this.name === param;\n};\n/**\n * Renames an element\n *\n * @param {String} name new element name\n * @return {Object} element\n */\n\n\nJSAPI.prototype.renameElem = function (name) {\n  if (name && typeof name === 'string') this.name = name;\n  return this;\n};\n/**\n * Determine if element is empty.\n *\n * @return {Boolean}\n */\n\n\nJSAPI.prototype.isEmpty = function () {\n  return !this.children || !this.children.length;\n};\n/**\n * Find the closest ancestor of the current element.\n * @param elemName\n *\n * @return {?Object}\n */\n\n\nJSAPI.prototype.closestElem = function (elemName) {\n  var elem = this;\n\n  while ((elem = elem.parentNode) && !elem.isElem(elemName));\n\n  return elem;\n};\n/**\n * Changes children by removing elements and/or adding new elements.\n *\n * @param {Number} start Index at which to start changing the children.\n * @param {Number} n Number of elements to remove.\n * @param {Array|Object} [insertion] Elements to add to the children.\n * @return {Array} Removed elements.\n */\n\n\nJSAPI.prototype.spliceContent = function (start, n, insertion) {\n  if (arguments.length < 2) return [];\n  if (!Array.isArray(insertion)) insertion = Array.apply(null, arguments).slice(2);\n  insertion.forEach(function (inner) {\n    inner.parentNode = this;\n  }, this);\n  return this.children.splice.apply(this.children, [start, n].concat(insertion));\n};\n/**\n * Determine if element has an attribute\n * (any, or by name or by name + value).\n *\n * @param {String} [name] attribute name\n * @param {String} [val] attribute value (will be toString()'ed)\n * @return {Boolean}\n */\n\n\nJSAPI.prototype.hasAttr = function (name, val) {\n  if (this.type !== 'element') {\n    return false;\n  }\n\n  if (Object.keys(this.attributes).length === 0) {\n    return false;\n  }\n\n  if (name == null) {\n    return true;\n  } // eslint-disable-next-line no-prototype-builtins\n\n\n  if (this.attributes.hasOwnProperty(name) === false) {\n    return false;\n  }\n\n  if (val !== undefined) {\n    return this.attributes[name] === val.toString();\n  }\n\n  return true;\n};\n/**\n * Determine if element has an attribute by local name\n * (any, or by name or by name + value).\n *\n * @param {String} [localName] local attribute name\n * @param {Number|String|RegExp|Function} [val] attribute value (will be toString()'ed or executed, otherwise ignored)\n * @return {Boolean}\n */\n\n\nJSAPI.prototype.hasAttrLocal = function (localName, val) {\n  if (!this.attrs || !Object.keys(this.attrs).length) return false;\n  if (!arguments.length) return !!this.attrs;\n  var callback;\n\n  switch (val != null && val.constructor && val.constructor.name) {\n    case 'Number': // same as String\n\n    case 'String':\n      callback = stringValueTest;\n      break;\n\n    case 'RegExp':\n      callback = regexpValueTest;\n      break;\n\n    case 'Function':\n      callback = funcValueTest;\n      break;\n\n    default:\n      callback = nameTest;\n  }\n\n  return this.someAttr(callback);\n\n  function nameTest(attr) {\n    const {\n      local\n    } = parseName(attr.name);\n    return local === localName;\n  }\n\n  function stringValueTest(attr) {\n    const {\n      local\n    } = parseName(attr.name);\n    return local === localName && val == attr.value;\n  }\n\n  function regexpValueTest(attr) {\n    const {\n      local\n    } = parseName(attr.name);\n    return local === localName && val.test(attr.value);\n  }\n\n  function funcValueTest(attr) {\n    const {\n      local\n    } = parseName(attr.name);\n    return local === localName && val(attr.value);\n  }\n};\n/**\n * Get a specific attribute from an element\n * (by name or name + value).\n *\n * @param {String} name attribute name\n * @param {String} [val] attribute value (will be toString()'ed)\n * @return {Object|Undefined}\n */\n\n\nJSAPI.prototype.attr = function (name, val) {\n  if (this.hasAttr(name, val)) {\n    return this.attrs[name];\n  }\n};\n/**\n * Get computed attribute value from an element\n *\n * @param {String} name attribute name\n * @return {Object|Undefined}\n */\n\n\nJSAPI.prototype.computedAttr = function (name, val) {\n  if (!arguments.length) return;\n\n  for (var elem = this; elem && (!elem.hasAttr(name) || !elem.attributes[name]); elem = elem.parentNode);\n\n  if (val != null) {\n    return elem ? elem.hasAttr(name, val) : false;\n  } else if (elem && elem.hasAttr(name)) {\n    return elem.attributes[name];\n  }\n};\n/**\n * Remove a specific attribute.\n *\n * @param {String|Array} name attribute name\n * @param {String} [val] attribute value\n * @return {Boolean}\n */\n\n\nJSAPI.prototype.removeAttr = function (name, val) {\n  if (this.type !== 'element') {\n    return false;\n  }\n\n  if (arguments.length === 0) {\n    return false;\n  }\n\n  if (Array.isArray(name)) {\n    for (const nameItem of name) {\n      this.removeAttr(nameItem, val);\n    }\n\n    return false;\n  }\n\n  if (this.hasAttr(name, val) === false) {\n    return false;\n  }\n\n  delete this.attributes[name];\n  return true;\n};\n/**\n * Add attribute.\n *\n * @param {Object} [attr={}] attribute object\n * @return {Object|Boolean} created attribute or false if no attr was passed in\n */\n\n\nJSAPI.prototype.addAttr = function (attr) {\n  attr = attr || {};\n  if (attr.name === undefined) return false;\n  this.attributes[attr.name] = attr.value;\n\n  if (attr.name === 'class') {\n    // newly added class attribute\n    this.class.addClassValueHandler();\n  }\n\n  if (attr.name === 'style') {\n    // newly added style attribute\n    this.style.addStyleValueHandler();\n  }\n\n  return this.attrs[attr.name];\n};\n/**\n * Iterates over all attributes.\n *\n * @param {Function} callback callback\n * @param {Object} [context] callback context\n * @return {Boolean} false if there are no any attributes\n */\n\n\nJSAPI.prototype.eachAttr = function (callback, context) {\n  if (this.type !== 'element') {\n    return false;\n  }\n\n  if (callback == null) {\n    return false;\n  }\n\n  for (const attr of Object.values(this.attrs)) {\n    callback.call(context, attr);\n  }\n\n  return true;\n};\n/**\n * Tests whether some attribute passes the test.\n *\n * @param {Function} callback callback\n * @param {Object} [context] callback context\n * @return {Boolean} false if there are no any attributes\n */\n\n\nJSAPI.prototype.someAttr = function (callback, context) {\n  if (this.type !== 'element') {\n    return false;\n  }\n\n  for (const attr of Object.values(this.attrs)) {\n    if (callback.call(context, attr)) return true;\n  }\n\n  return false;\n};\n/**\n * Evaluate a string of CSS selectors against the element and returns matched elements.\n *\n * @param {String} selectors CSS selector(s) string\n * @return {Array} null if no elements matched\n */\n\n\nJSAPI.prototype.querySelectorAll = function (selectors) {\n  var matchedEls = selectAll(selectors, this, cssSelectOpts);\n  return matchedEls.length > 0 ? matchedEls : null;\n};\n/**\n * Evaluate a string of CSS selectors against the element and returns only the first matched element.\n *\n * @param {String} selectors CSS selector(s) string\n * @return {Array} null if no element matched\n */\n\n\nJSAPI.prototype.querySelector = function (selectors) {\n  return selectOne(selectors, this, cssSelectOpts);\n};\n/**\n * Test if a selector matches a given element.\n *\n * @param {String} selector CSS selector string\n * @return {Boolean} true if element would be selected by selector string, false if it does not\n */\n\n\nJSAPI.prototype.matches = function (selector) {\n  return is(this, selector, cssSelectOpts);\n};","map":{"version":3,"names":["selectAll","selectOne","is","require","svgoCssSelectAdapter","CSSClassList","CSSStyleDeclaration","parseName","name","prefix","local","chunks","split","length","cssSelectOpts","xmlMode","adapter","attrsHandler","get","attributes","hasOwnProperty","value","set","attr","JSAPI","data","parentNode","Object","assign","type","children","defineProperty","writable","configurable","element","Proxy","newAttributes","values","module","exports","prototype","clone","nodeData","clonedNode","JSON","parse","stringify","map","child","clonedChild","isElem","param","Array","isArray","includes","renameElem","isEmpty","closestElem","elemName","elem","spliceContent","start","n","insertion","arguments","apply","slice","forEach","inner","splice","concat","hasAttr","val","keys","undefined","toString","hasAttrLocal","localName","attrs","callback","constructor","stringValueTest","regexpValueTest","funcValueTest","nameTest","someAttr","test","computedAttr","removeAttr","nameItem","addAttr","class","addClassValueHandler","style","addStyleValueHandler","eachAttr","context","call","querySelectorAll","selectors","matchedEls","querySelector","matches","selector"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-svgo/node_modules/svgo/lib/svgo/jsAPI.js"],"sourcesContent":["'use strict';\n\nconst { selectAll, selectOne, is } = require('css-select');\nconst svgoCssSelectAdapter = require('./css-select-adapter');\nconst CSSClassList = require('./css-class-list');\nconst CSSStyleDeclaration = require('./css-style-declaration');\n\n/**\n * @type {(name: string) => { prefix: string, local: string }}\n */\nconst parseName = (name) => {\n  if (name == null) {\n    return {\n      prefix: '',\n      local: '',\n    };\n  }\n  if (name === 'xmlns') {\n    return {\n      prefix: 'xmlns',\n      local: '',\n    };\n  }\n  const chunks = name.split(':');\n  if (chunks.length === 1) {\n    return {\n      prefix: '',\n      local: chunks[0],\n    };\n  }\n  return {\n    prefix: chunks[0],\n    local: chunks[1],\n  };\n};\n\nvar cssSelectOpts = {\n  xmlMode: true,\n  adapter: svgoCssSelectAdapter,\n};\n\nconst attrsHandler = {\n  get: (attributes, name) => {\n    // eslint-disable-next-line no-prototype-builtins\n    if (attributes.hasOwnProperty(name)) {\n      return {\n        name,\n        get value() {\n          return attributes[name];\n        },\n        set value(value) {\n          attributes[name] = value;\n        },\n      };\n    }\n  },\n  set: (attributes, name, attr) => {\n    attributes[name] = attr.value;\n    return true;\n  },\n};\n\nvar JSAPI = function (data, parentNode) {\n  Object.assign(this, data);\n  if (this.type === 'element') {\n    if (this.attributes == null) {\n      this.attributes = {};\n    }\n    if (this.children == null) {\n      this.children = [];\n    }\n    Object.defineProperty(this, 'class', {\n      writable: true,\n      configurable: true,\n      value: new CSSClassList(this),\n    });\n    Object.defineProperty(this, 'style', {\n      writable: true,\n      configurable: true,\n      value: new CSSStyleDeclaration(this),\n    });\n    Object.defineProperty(this, 'parentNode', {\n      writable: true,\n      value: parentNode,\n    });\n\n    // temporary attrs polyfill\n    // TODO remove after migration\n    const element = this;\n    Object.defineProperty(this, 'attrs', {\n      configurable: true,\n      get() {\n        return new Proxy(element.attributes, attrsHandler);\n      },\n      set(value) {\n        const newAttributes = {};\n        for (const attr of Object.values(value)) {\n          newAttributes[attr.name] = attr.value;\n        }\n        element.attributes = newAttributes;\n      },\n    });\n  }\n};\nmodule.exports = JSAPI;\n\n/**\n * Perform a deep clone of this node.\n *\n * @return {Object} element\n */\nJSAPI.prototype.clone = function () {\n  const { children, ...nodeData } = this;\n  // Deep-clone node data.\n  const clonedNode = new JSAPI(JSON.parse(JSON.stringify(nodeData)), null);\n  if (children) {\n    clonedNode.children = children.map((child) => {\n      const clonedChild = child.clone();\n      clonedChild.parentNode = clonedNode;\n      return clonedChild;\n    });\n  }\n  return clonedNode;\n};\n\n/**\n * Determine if item is an element\n * (any, with a specific name or in a names array).\n *\n * @param {String|Array} [param] element name or names arrays\n * @return {Boolean}\n */\nJSAPI.prototype.isElem = function (param) {\n  if (this.type !== 'element') {\n    return false;\n  }\n  if (param == null) {\n    return true;\n  }\n  if (Array.isArray(param)) {\n    return param.includes(this.name);\n  }\n  return this.name === param;\n};\n\n/**\n * Renames an element\n *\n * @param {String} name new element name\n * @return {Object} element\n */\nJSAPI.prototype.renameElem = function (name) {\n  if (name && typeof name === 'string') this.name = name;\n\n  return this;\n};\n\n/**\n * Determine if element is empty.\n *\n * @return {Boolean}\n */\nJSAPI.prototype.isEmpty = function () {\n  return !this.children || !this.children.length;\n};\n\n/**\n * Find the closest ancestor of the current element.\n * @param elemName\n *\n * @return {?Object}\n */\nJSAPI.prototype.closestElem = function (elemName) {\n  var elem = this;\n\n  while ((elem = elem.parentNode) && !elem.isElem(elemName));\n\n  return elem;\n};\n\n/**\n * Changes children by removing elements and/or adding new elements.\n *\n * @param {Number} start Index at which to start changing the children.\n * @param {Number} n Number of elements to remove.\n * @param {Array|Object} [insertion] Elements to add to the children.\n * @return {Array} Removed elements.\n */\nJSAPI.prototype.spliceContent = function (start, n, insertion) {\n  if (arguments.length < 2) return [];\n\n  if (!Array.isArray(insertion))\n    insertion = Array.apply(null, arguments).slice(2);\n\n  insertion.forEach(function (inner) {\n    inner.parentNode = this;\n  }, this);\n\n  return this.children.splice.apply(\n    this.children,\n    [start, n].concat(insertion)\n  );\n};\n\n/**\n * Determine if element has an attribute\n * (any, or by name or by name + value).\n *\n * @param {String} [name] attribute name\n * @param {String} [val] attribute value (will be toString()'ed)\n * @return {Boolean}\n */\nJSAPI.prototype.hasAttr = function (name, val) {\n  if (this.type !== 'element') {\n    return false;\n  }\n  if (Object.keys(this.attributes).length === 0) {\n    return false;\n  }\n  if (name == null) {\n    return true;\n  }\n  // eslint-disable-next-line no-prototype-builtins\n  if (this.attributes.hasOwnProperty(name) === false) {\n    return false;\n  }\n  if (val !== undefined) {\n    return this.attributes[name] === val.toString();\n  }\n  return true;\n};\n\n/**\n * Determine if element has an attribute by local name\n * (any, or by name or by name + value).\n *\n * @param {String} [localName] local attribute name\n * @param {Number|String|RegExp|Function} [val] attribute value (will be toString()'ed or executed, otherwise ignored)\n * @return {Boolean}\n */\nJSAPI.prototype.hasAttrLocal = function (localName, val) {\n  if (!this.attrs || !Object.keys(this.attrs).length) return false;\n\n  if (!arguments.length) return !!this.attrs;\n\n  var callback;\n\n  switch (val != null && val.constructor && val.constructor.name) {\n    case 'Number': // same as String\n    case 'String':\n      callback = stringValueTest;\n      break;\n    case 'RegExp':\n      callback = regexpValueTest;\n      break;\n    case 'Function':\n      callback = funcValueTest;\n      break;\n    default:\n      callback = nameTest;\n  }\n  return this.someAttr(callback);\n\n  function nameTest(attr) {\n    const { local } = parseName(attr.name);\n    return local === localName;\n  }\n\n  function stringValueTest(attr) {\n    const { local } = parseName(attr.name);\n    return local === localName && val == attr.value;\n  }\n\n  function regexpValueTest(attr) {\n    const { local } = parseName(attr.name);\n    return local === localName && val.test(attr.value);\n  }\n\n  function funcValueTest(attr) {\n    const { local } = parseName(attr.name);\n    return local === localName && val(attr.value);\n  }\n};\n\n/**\n * Get a specific attribute from an element\n * (by name or name + value).\n *\n * @param {String} name attribute name\n * @param {String} [val] attribute value (will be toString()'ed)\n * @return {Object|Undefined}\n */\nJSAPI.prototype.attr = function (name, val) {\n  if (this.hasAttr(name, val)) {\n    return this.attrs[name];\n  }\n};\n\n/**\n * Get computed attribute value from an element\n *\n * @param {String} name attribute name\n * @return {Object|Undefined}\n */\nJSAPI.prototype.computedAttr = function (name, val) {\n  if (!arguments.length) return;\n\n  for (\n    var elem = this;\n    elem && (!elem.hasAttr(name) || !elem.attributes[name]);\n    elem = elem.parentNode\n  );\n\n  if (val != null) {\n    return elem ? elem.hasAttr(name, val) : false;\n  } else if (elem && elem.hasAttr(name)) {\n    return elem.attributes[name];\n  }\n};\n\n/**\n * Remove a specific attribute.\n *\n * @param {String|Array} name attribute name\n * @param {String} [val] attribute value\n * @return {Boolean}\n */\nJSAPI.prototype.removeAttr = function (name, val) {\n  if (this.type !== 'element') {\n    return false;\n  }\n  if (arguments.length === 0) {\n    return false;\n  }\n  if (Array.isArray(name)) {\n    for (const nameItem of name) {\n      this.removeAttr(nameItem, val);\n    }\n    return false;\n  }\n  if (this.hasAttr(name, val) === false) {\n    return false;\n  }\n  delete this.attributes[name];\n  return true;\n};\n\n/**\n * Add attribute.\n *\n * @param {Object} [attr={}] attribute object\n * @return {Object|Boolean} created attribute or false if no attr was passed in\n */\nJSAPI.prototype.addAttr = function (attr) {\n  attr = attr || {};\n\n  if (attr.name === undefined) return false;\n\n  this.attributes[attr.name] = attr.value;\n\n  if (attr.name === 'class') {\n    // newly added class attribute\n    this.class.addClassValueHandler();\n  }\n\n  if (attr.name === 'style') {\n    // newly added style attribute\n    this.style.addStyleValueHandler();\n  }\n\n  return this.attrs[attr.name];\n};\n\n/**\n * Iterates over all attributes.\n *\n * @param {Function} callback callback\n * @param {Object} [context] callback context\n * @return {Boolean} false if there are no any attributes\n */\nJSAPI.prototype.eachAttr = function (callback, context) {\n  if (this.type !== 'element') {\n    return false;\n  }\n  if (callback == null) {\n    return false;\n  }\n  for (const attr of Object.values(this.attrs)) {\n    callback.call(context, attr);\n  }\n  return true;\n};\n\n/**\n * Tests whether some attribute passes the test.\n *\n * @param {Function} callback callback\n * @param {Object} [context] callback context\n * @return {Boolean} false if there are no any attributes\n */\nJSAPI.prototype.someAttr = function (callback, context) {\n  if (this.type !== 'element') {\n    return false;\n  }\n\n  for (const attr of Object.values(this.attrs)) {\n    if (callback.call(context, attr)) return true;\n  }\n\n  return false;\n};\n\n/**\n * Evaluate a string of CSS selectors against the element and returns matched elements.\n *\n * @param {String} selectors CSS selector(s) string\n * @return {Array} null if no elements matched\n */\nJSAPI.prototype.querySelectorAll = function (selectors) {\n  var matchedEls = selectAll(selectors, this, cssSelectOpts);\n\n  return matchedEls.length > 0 ? matchedEls : null;\n};\n\n/**\n * Evaluate a string of CSS selectors against the element and returns only the first matched element.\n *\n * @param {String} selectors CSS selector(s) string\n * @return {Array} null if no element matched\n */\nJSAPI.prototype.querySelector = function (selectors) {\n  return selectOne(selectors, this, cssSelectOpts);\n};\n\n/**\n * Test if a selector matches a given element.\n *\n * @param {String} selector CSS selector string\n * @return {Boolean} true if element would be selected by selector string, false if it does not\n */\nJSAPI.prototype.matches = function (selector) {\n  return is(this, selector, cssSelectOpts);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}