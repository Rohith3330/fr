{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\n\nconst _util_1 = require(\"./_util\");\n\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        missingPattern\n      }\n    } = _ref;\n    return (0, codegen_1.str)`should have property matching pattern '${missingPattern}'`;\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        missingPattern\n      }\n    } = _ref2;\n    return (0, codegen_1._)`{missingPattern: ${missingPattern}}`;\n  }\n};\n\nfunction getDef() {\n  return {\n    keyword: \"patternRequired\",\n    type: \"object\",\n    schemaType: \"array\",\n    error,\n\n    code(cxt) {\n      const {\n        gen,\n        schema,\n        data\n      } = cxt;\n      if (schema.length === 0) return;\n      const valid = gen.let(\"valid\", true);\n\n      for (const pat of schema) validateProperties(pat);\n\n      function validateProperties(pattern) {\n        const matched = gen.let(\"matched\", false);\n        gen.forIn(\"key\", data, key => {\n          gen.assign(matched, (0, codegen_1._)`${(0, _util_1.usePattern)(cxt, pattern)}.test(${key})`);\n          gen.if(matched, () => gen.break());\n        });\n        cxt.setParams({\n          missingPattern: pattern\n        });\n        gen.assign(valid, (0, codegen_1.and)(valid, matched));\n        cxt.pass(valid);\n      }\n    },\n\n    metaSchema: {\n      type: \"array\",\n      items: {\n        type: \"string\",\n        format: \"regex\"\n      },\n      uniqueItems: true\n    }\n  };\n}\n\nexports.default = getDef;\nmodule.exports = getDef;","map":{"version":3,"mappings":";;;;;;AACA;;AACA;;AAIA,MAAMA,KAAK,GAA2B;EACpCC,OAAO,EAAE;IAAA,IAAC;MAACC,MAAM,EAAE;QAACC;MAAD;IAAT,CAAD;IAAA,OACP,kBAAG,0CAA0CA,cAAc,GADpD;EAAA,CAD2B;EAGpCD,MAAM,EAAE;IAAA,IAAC;MAACA,MAAM,EAAE;QAACC;MAAD;IAAT,CAAD;IAAA,OAAgC,gBAAC,oBAAoBA,cAAc,GAAnE;EAAA;AAH4B,CAAtC;;AAMA,SAAwBC,MAAxB,GAA8B;EAC5B,OAAO;IACLC,OAAO,EAAE,iBADJ;IAELC,IAAI,EAAE,QAFD;IAGLC,UAAU,EAAE,OAHP;IAILP,KAJK;;IAKLQ,IAAI,CAACC,GAAD,EAAgB;MAClB,MAAM;QAACC,GAAD;QAAMC,MAAN;QAAcC;MAAd,IAAsBH,GAA5B;MACA,IAAIE,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;MACzB,MAAMC,KAAK,GAAGJ,GAAG,CAACK,GAAJ,CAAQ,OAAR,EAAiB,IAAjB,CAAd;;MACA,KAAK,MAAMC,GAAX,IAAkBL,MAAlB,EAA0BM,kBAAkB,CAACD,GAAD,CAAlB;;MAE1B,SAASC,kBAAT,CAA4BC,OAA5B,EAA2C;QACzC,MAAMC,OAAO,GAAGT,GAAG,CAACK,GAAJ,CAAQ,SAAR,EAAmB,KAAnB,CAAhB;QAEAL,GAAG,CAACU,KAAJ,CAAU,KAAV,EAAiBR,IAAjB,EAAwBS,GAAD,IAAQ;UAC7BX,GAAG,CAACY,MAAJ,CAAWH,OAAX,EAAoB,gBAAC,GAAG,wBAAWV,GAAX,EAAgBS,OAAhB,CAAwB,SAASG,GAAG,GAA5D;UACAX,GAAG,CAACa,EAAJ,CAAOJ,OAAP,EAAgB,MAAMT,GAAG,CAACc,KAAJ,EAAtB;QACD,CAHD;QAKAf,GAAG,CAACgB,SAAJ,CAAc;UAACtB,cAAc,EAAEe;QAAjB,CAAd;QACAR,GAAG,CAACY,MAAJ,CAAWR,KAAX,EAAkB,mBAAIA,KAAJ,EAAWK,OAAX,CAAlB;QACAV,GAAG,CAACiB,IAAJ,CAASZ,KAAT;MACD;IACF,CAvBI;;IAwBLa,UAAU,EAAE;MACVrB,IAAI,EAAE,OADI;MAEVsB,KAAK,EAAE;QAACtB,IAAI,EAAE,QAAP;QAAiBuB,MAAM,EAAE;MAAzB,CAFG;MAGVC,WAAW,EAAE;IAHH;EAxBP,CAAP;AA8BD;;AA/BDC;AAiCAC,MAAM,CAACD,OAAP,GAAiB3B,MAAjB","names":["error","message","params","missingPattern","getDef","keyword","type","schemaType","code","cxt","gen","schema","data","length","valid","let","pat","validateProperties","pattern","matched","forIn","key","assign","if","break","setParams","pass","metaSchema","items","format","uniqueItems","exports","module"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\mini-css-extract-plugin\\node_modules\\ajv-keywords\\src\\definitions\\patternRequired.ts"],"sourcesContent":["import type {CodeKeywordDefinition, KeywordCxt, KeywordErrorDefinition, ErrorObject} from \"ajv\"\nimport {_, str, and} from \"ajv/dist/compile/codegen\"\nimport {usePattern} from \"./_util\"\n\nexport type PatternRequiredError = ErrorObject<\"patternRequired\", {missingPattern: string}>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {missingPattern}}) =>\n    str`should have property matching pattern '${missingPattern}'`,\n  params: ({params: {missingPattern}}) => _`{missingPattern: ${missingPattern}}`,\n}\n\nexport default function getDef(): CodeKeywordDefinition {\n  return {\n    keyword: \"patternRequired\",\n    type: \"object\",\n    schemaType: \"array\",\n    error,\n    code(cxt: KeywordCxt) {\n      const {gen, schema, data} = cxt\n      if (schema.length === 0) return\n      const valid = gen.let(\"valid\", true)\n      for (const pat of schema) validateProperties(pat)\n\n      function validateProperties(pattern: string): void {\n        const matched = gen.let(\"matched\", false)\n\n        gen.forIn(\"key\", data, (key) => {\n          gen.assign(matched, _`${usePattern(cxt, pattern)}.test(${key})`)\n          gen.if(matched, () => gen.break())\n        })\n\n        cxt.setParams({missingPattern: pattern})\n        gen.assign(valid, and(valid, matched))\n        cxt.pass(valid)\n      }\n    },\n    metaSchema: {\n      type: \"array\",\n      items: {type: \"string\", format: \"regex\"},\n      uniqueItems: true,\n    },\n  }\n}\n\nmodule.exports = getDef\n"]},"metadata":{},"sourceType":"script"}