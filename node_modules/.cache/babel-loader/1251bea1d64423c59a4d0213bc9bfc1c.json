{"ast":null,"code":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\"use strict\";\n\nimport { defaults, keep_name, mergeSort, push_uniq, make_node, return_false, return_this, return_true, string_template } from \"./utils/index.js\";\nimport { AST_Arrow, AST_Block, AST_Call, AST_Catch, AST_Class, AST_Conditional, AST_DefClass, AST_Defun, AST_Destructuring, AST_Dot, AST_DotHash, AST_Export, AST_For, AST_ForIn, AST_Function, AST_Import, AST_IterationStatement, AST_Label, AST_LabeledStatement, AST_LabelRef, AST_Lambda, AST_LoopControl, AST_NameMapping, AST_Node, AST_Scope, AST_Sequence, AST_String, AST_Sub, AST_Switch, AST_SwitchBranch, AST_Symbol, AST_SymbolBlockDeclaration, AST_SymbolCatch, AST_SymbolClass, AST_SymbolConst, AST_SymbolDefClass, AST_SymbolDefun, AST_SymbolExport, AST_SymbolFunarg, AST_SymbolImport, AST_SymbolLambda, AST_SymbolLet, AST_SymbolMethod, AST_SymbolRef, AST_SymbolVar, AST_Toplevel, AST_VarDef, AST_With, TreeWalker, walk } from \"./ast.js\";\nimport { ALL_RESERVED_WORDS, js_error } from \"./parse.js\";\nconst MASK_EXPORT_DONT_MANGLE = 1 << 0;\nconst MASK_EXPORT_WANT_MANGLE = 1 << 1;\nlet function_defs = null;\nlet unmangleable_names = null;\n/**\n * When defined, there is a function declaration somewhere that's inside of a block.\n * See https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-block-level-function-declarations-web-legacy-compatibility-semantics\n*/\n\nlet scopes_with_block_defuns = null;\n\nclass SymbolDef {\n  constructor(scope, orig, init) {\n    this.name = orig.name;\n    this.orig = [orig];\n    this.init = init;\n    this.eliminated = 0;\n    this.assignments = 0;\n    this.scope = scope;\n    this.replaced = 0;\n    this.global = false;\n    this.export = 0;\n    this.mangled_name = null;\n    this.undeclared = false;\n    this.id = SymbolDef.next_id++;\n    this.chained = false;\n    this.direct_access = false;\n    this.escaped = 0;\n    this.recursive_refs = 0;\n    this.references = [];\n    this.should_replace = undefined;\n    this.single_use = false;\n    this.fixed = false;\n    Object.seal(this);\n  }\n\n  fixed_value() {\n    if (!this.fixed || this.fixed instanceof AST_Node) return this.fixed;\n    return this.fixed();\n  }\n\n  unmangleable(options) {\n    if (!options) options = {};\n    if (function_defs && function_defs.has(this.id) && keep_name(options.keep_fnames, this.orig[0].name)) return true;\n    return this.global && !options.toplevel || this.export & MASK_EXPORT_DONT_MANGLE || this.undeclared || !options.eval && this.scope.pinned() || (this.orig[0] instanceof AST_SymbolLambda || this.orig[0] instanceof AST_SymbolDefun) && keep_name(options.keep_fnames, this.orig[0].name) || this.orig[0] instanceof AST_SymbolMethod || (this.orig[0] instanceof AST_SymbolClass || this.orig[0] instanceof AST_SymbolDefClass) && keep_name(options.keep_classnames, this.orig[0].name);\n  }\n\n  mangle(options) {\n    const cache = options.cache && options.cache.props;\n\n    if (this.global && cache && cache.has(this.name)) {\n      this.mangled_name = cache.get(this.name);\n    } else if (!this.mangled_name && !this.unmangleable(options)) {\n      var s = this.scope;\n      var sym = this.orig[0];\n      if (options.ie8 && sym instanceof AST_SymbolLambda) s = s.parent_scope;\n      const redefinition = redefined_catch_def(this);\n      this.mangled_name = redefinition ? redefinition.mangled_name || redefinition.name : s.next_mangled(options, this);\n\n      if (this.global && cache) {\n        cache.set(this.name, this.mangled_name);\n      }\n    }\n  }\n\n}\n\nSymbolDef.next_id = 1;\n\nfunction redefined_catch_def(def) {\n  if (def.orig[0] instanceof AST_SymbolCatch && def.scope.is_block_scope()) {\n    return def.scope.get_defun_scope().variables.get(def.name);\n  }\n}\n\nAST_Scope.DEFMETHOD(\"figure_out_scope\", function (options) {\n  let {\n    parent_scope = null,\n    toplevel = this\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = defaults(options, {\n    cache: null,\n    ie8: false,\n    safari10: false\n  });\n\n  if (!(toplevel instanceof AST_Toplevel)) {\n    throw new Error(\"Invalid toplevel scope\");\n  } // pass 1: setup scope chaining and handle definitions\n\n\n  var scope = this.parent_scope = parent_scope;\n  var labels = new Map();\n  var defun = null;\n  var in_destructuring = null;\n  var for_scopes = [];\n  var tw = new TreeWalker((node, descend) => {\n    if (node.is_block_scope()) {\n      const save_scope = scope;\n      node.block_scope = scope = new AST_Scope(node);\n      scope._block_scope = true; // AST_Try in the AST sadly *is* (not has) a body itself,\n      // and its catch and finally branches are children of the AST_Try itself\n\n      const parent_scope = node instanceof AST_Catch ? save_scope.parent_scope : save_scope;\n      scope.init_scope_vars(parent_scope);\n      scope.uses_with = save_scope.uses_with;\n      scope.uses_eval = save_scope.uses_eval;\n\n      if (options.safari10) {\n        if (node instanceof AST_For || node instanceof AST_ForIn) {\n          for_scopes.push(scope);\n        }\n      }\n\n      if (node instanceof AST_Switch) {\n        // XXX: HACK! Ensure the switch expression gets the correct scope (the parent scope) and the body gets the contained scope\n        // AST_Switch has a scope within the body, but it itself \"is a block scope\"\n        // This means the switched expression has to belong to the outer scope\n        // while the body inside belongs to the switch itself.\n        // This is pretty nasty and warrants an AST change similar to AST_Try (read above)\n        const the_block_scope = scope;\n        scope = save_scope;\n        node.expression.walk(tw);\n        scope = the_block_scope;\n\n        for (let i = 0; i < node.body.length; i++) {\n          node.body[i].walk(tw);\n        }\n      } else {\n        descend();\n      }\n\n      scope = save_scope;\n      return true;\n    }\n\n    if (node instanceof AST_Destructuring) {\n      const save_destructuring = in_destructuring;\n      in_destructuring = node;\n      descend();\n      in_destructuring = save_destructuring;\n      return true;\n    }\n\n    if (node instanceof AST_Scope) {\n      node.init_scope_vars(scope);\n      var save_scope = scope;\n      var save_defun = defun;\n      var save_labels = labels;\n      defun = scope = node;\n      labels = new Map();\n      descend();\n      scope = save_scope;\n      defun = save_defun;\n      labels = save_labels;\n      return true; // don't descend again in TreeWalker\n    }\n\n    if (node instanceof AST_LabeledStatement) {\n      var l = node.label;\n\n      if (labels.has(l.name)) {\n        throw new Error(string_template(\"Label {name} defined twice\", l));\n      }\n\n      labels.set(l.name, l);\n      descend();\n      labels.delete(l.name);\n      return true; // no descend again\n    }\n\n    if (node instanceof AST_With) {\n      for (var s = scope; s; s = s.parent_scope) s.uses_with = true;\n\n      return;\n    }\n\n    if (node instanceof AST_Symbol) {\n      node.scope = scope;\n    }\n\n    if (node instanceof AST_Label) {\n      node.thedef = node;\n      node.references = [];\n    }\n\n    if (node instanceof AST_SymbolLambda) {\n      defun.def_function(node, node.name == \"arguments\" ? undefined : defun);\n    } else if (node instanceof AST_SymbolDefun) {\n      // Careful here, the scope where this should be defined is\n      // the parent scope.  The reason is that we enter a new\n      // scope when we encounter the AST_Defun node (which is\n      // instanceof AST_Scope) but we get to the symbol a bit\n      // later.\n      const closest_scope = defun.parent_scope; // In strict mode, function definitions are block-scoped\n\n      node.scope = tw.directives[\"use strict\"] ? closest_scope : closest_scope.get_defun_scope();\n      mark_export(node.scope.def_function(node, defun), 1);\n    } else if (node instanceof AST_SymbolClass) {\n      mark_export(defun.def_variable(node, defun), 1);\n    } else if (node instanceof AST_SymbolImport) {\n      scope.def_variable(node);\n    } else if (node instanceof AST_SymbolDefClass) {\n      // This deals with the name of the class being available\n      // inside the class.\n      mark_export((node.scope = defun.parent_scope).def_function(node, defun), 1);\n    } else if (node instanceof AST_SymbolVar || node instanceof AST_SymbolLet || node instanceof AST_SymbolConst || node instanceof AST_SymbolCatch) {\n      var def;\n\n      if (node instanceof AST_SymbolBlockDeclaration) {\n        def = scope.def_variable(node, null);\n      } else {\n        def = defun.def_variable(node, node.TYPE == \"SymbolVar\" ? null : undefined);\n      }\n\n      if (!def.orig.every(sym => {\n        if (sym === node) return true;\n\n        if (node instanceof AST_SymbolBlockDeclaration) {\n          return sym instanceof AST_SymbolLambda;\n        }\n\n        return !(sym instanceof AST_SymbolLet || sym instanceof AST_SymbolConst);\n      })) {\n        js_error(`\"${node.name}\" is redeclared`, node.start.file, node.start.line, node.start.col, node.start.pos);\n      }\n\n      if (!(node instanceof AST_SymbolFunarg)) mark_export(def, 2);\n\n      if (defun !== scope) {\n        node.mark_enclosed();\n        var def = scope.find_variable(node);\n\n        if (node.thedef !== def) {\n          node.thedef = def;\n          node.reference();\n        }\n      }\n    } else if (node instanceof AST_LabelRef) {\n      var sym = labels.get(node.name);\n      if (!sym) throw new Error(string_template(\"Undefined label {name} [{line},{col}]\", {\n        name: node.name,\n        line: node.start.line,\n        col: node.start.col\n      }));\n      node.thedef = sym;\n    }\n\n    if (!(scope instanceof AST_Toplevel) && (node instanceof AST_Export || node instanceof AST_Import)) {\n      js_error(`\"${node.TYPE}\" statement may only appear at the top level`, node.start.file, node.start.line, node.start.col, node.start.pos);\n    }\n  });\n  this.walk(tw);\n\n  function mark_export(def, level) {\n    if (in_destructuring) {\n      var i = 0;\n\n      do {\n        level++;\n      } while (tw.parent(i++) !== in_destructuring);\n    }\n\n    var node = tw.parent(level);\n\n    if (def.export = node instanceof AST_Export ? MASK_EXPORT_DONT_MANGLE : 0) {\n      var exported = node.exported_definition;\n\n      if ((exported instanceof AST_Defun || exported instanceof AST_DefClass) && node.is_default) {\n        def.export = MASK_EXPORT_WANT_MANGLE;\n      }\n    }\n  } // pass 2: find back references and eval\n\n\n  const is_toplevel = this instanceof AST_Toplevel;\n\n  if (is_toplevel) {\n    this.globals = new Map();\n  }\n\n  var tw = new TreeWalker(node => {\n    if (node instanceof AST_LoopControl && node.label) {\n      node.label.thedef.references.push(node);\n      return true;\n    }\n\n    if (node instanceof AST_SymbolRef) {\n      var name = node.name;\n\n      if (name == \"eval\" && tw.parent() instanceof AST_Call) {\n        for (var s = node.scope; s && !s.uses_eval; s = s.parent_scope) {\n          s.uses_eval = true;\n        }\n      }\n\n      var sym;\n\n      if (tw.parent() instanceof AST_NameMapping && tw.parent(1).module_name || !(sym = node.scope.find_variable(name))) {\n        sym = toplevel.def_global(node);\n        if (node instanceof AST_SymbolExport) sym.export = MASK_EXPORT_DONT_MANGLE;\n      } else if (sym.scope instanceof AST_Lambda && name == \"arguments\") {\n        sym.scope.uses_arguments = true;\n      }\n\n      node.thedef = sym;\n      node.reference();\n\n      if (node.scope.is_block_scope() && !(sym.orig[0] instanceof AST_SymbolBlockDeclaration)) {\n        node.scope = node.scope.get_defun_scope();\n      }\n\n      return true;\n    } // ensure mangling works if catch reuses a scope variable\n\n\n    var def;\n\n    if (node instanceof AST_SymbolCatch && (def = redefined_catch_def(node.definition()))) {\n      var s = node.scope;\n\n      while (s) {\n        push_uniq(s.enclosed, def);\n        if (s === def.scope) break;\n        s = s.parent_scope;\n      }\n    }\n  });\n  this.walk(tw); // pass 3: work around IE8 and Safari catch scope bugs\n\n  if (options.ie8 || options.safari10) {\n    walk(this, node => {\n      if (node instanceof AST_SymbolCatch) {\n        var name = node.name;\n        var refs = node.thedef.references;\n        var scope = node.scope.get_defun_scope();\n        var def = scope.find_variable(name) || toplevel.globals.get(name) || scope.def_variable(node);\n        refs.forEach(function (ref) {\n          ref.thedef = def;\n          ref.reference();\n        });\n        node.thedef = def;\n        node.reference();\n        return true;\n      }\n    });\n  } // pass 4: add symbol definitions to loop scopes\n  // Safari/Webkit bug workaround - loop init let variable shadowing argument.\n  // https://github.com/mishoo/UglifyJS2/issues/1753\n  // https://bugs.webkit.org/show_bug.cgi?id=171041\n\n\n  if (options.safari10) {\n    for (const scope of for_scopes) {\n      scope.parent_scope.variables.forEach(function (def) {\n        push_uniq(scope.enclosed, def);\n      });\n    }\n  }\n});\nAST_Toplevel.DEFMETHOD(\"def_global\", function (node) {\n  var globals = this.globals,\n      name = node.name;\n\n  if (globals.has(name)) {\n    return globals.get(name);\n  } else {\n    var g = new SymbolDef(this, node);\n    g.undeclared = true;\n    g.global = true;\n    globals.set(name, g);\n    return g;\n  }\n});\nAST_Scope.DEFMETHOD(\"init_scope_vars\", function (parent_scope) {\n  this.variables = new Map(); // map name to AST_SymbolVar (variables defined in this scope; includes functions)\n\n  this.uses_with = false; // will be set to true if this or some nested scope uses the `with` statement\n\n  this.uses_eval = false; // will be set to true if this or nested scope uses the global `eval`\n\n  this.parent_scope = parent_scope; // the parent scope\n\n  this.enclosed = []; // a list of variables from this or outer scope(s) that are referenced from this or inner scopes\n\n  this.cname = -1; // the current index for mangling functions/variables\n});\nAST_Scope.DEFMETHOD(\"conflicting_def\", function (name) {\n  return this.enclosed.find(def => def.name === name) || this.variables.has(name) || this.parent_scope && this.parent_scope.conflicting_def(name);\n});\nAST_Scope.DEFMETHOD(\"conflicting_def_shallow\", function (name) {\n  return this.enclosed.find(def => def.name === name) || this.variables.has(name);\n});\nAST_Scope.DEFMETHOD(\"add_child_scope\", function (scope) {\n  // `scope` is going to be moved into `this` right now.\n  // Update the required scopes' information\n  if (scope.parent_scope === this) return;\n  scope.parent_scope = this; // TODO uses_with, uses_eval, etc\n\n  const scope_ancestry = (() => {\n    const ancestry = [];\n    let cur = this;\n\n    do {\n      ancestry.push(cur);\n    } while (cur = cur.parent_scope);\n\n    ancestry.reverse();\n    return ancestry;\n  })();\n\n  const new_scope_enclosed_set = new Set(scope.enclosed);\n  const to_enclose = [];\n\n  for (const scope_topdown of scope_ancestry) {\n    to_enclose.forEach(e => push_uniq(scope_topdown.enclosed, e));\n\n    for (const def of scope_topdown.variables.values()) {\n      if (new_scope_enclosed_set.has(def)) {\n        push_uniq(to_enclose, def);\n        push_uniq(scope_topdown.enclosed, def);\n      }\n    }\n  }\n});\n\nfunction find_scopes_visible_from(scopes) {\n  const found_scopes = new Set();\n\n  for (const scope of new Set(scopes)) {\n    (function bubble_up(scope) {\n      if (scope == null || found_scopes.has(scope)) return;\n      found_scopes.add(scope);\n      bubble_up(scope.parent_scope);\n    })(scope);\n  }\n\n  return [...found_scopes];\n} // Creates a symbol during compression\n\n\nAST_Scope.DEFMETHOD(\"create_symbol\", function (SymClass) {\n  let {\n    source,\n    tentative_name,\n    scope,\n    conflict_scopes = [scope],\n    init = null\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let symbol_name;\n  conflict_scopes = find_scopes_visible_from(conflict_scopes);\n\n  if (tentative_name) {\n    // Implement hygiene (no new names are conflicting with existing names)\n    tentative_name = symbol_name = tentative_name.replace(/(?:^[^a-z_$]|[^a-z0-9_$])/ig, \"_\");\n    let i = 0;\n\n    while (conflict_scopes.find(s => s.conflicting_def_shallow(symbol_name))) {\n      symbol_name = tentative_name + \"$\" + i++;\n    }\n  }\n\n  if (!symbol_name) {\n    throw new Error(\"No symbol name could be generated in create_symbol()\");\n  }\n\n  const symbol = make_node(SymClass, source, {\n    name: symbol_name,\n    scope\n  });\n  this.def_variable(symbol, init || null);\n  symbol.mark_enclosed();\n  return symbol;\n});\nAST_Node.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Class.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Lambda.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Toplevel.DEFMETHOD(\"is_block_scope\", return_false);\nAST_SwitchBranch.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Block.DEFMETHOD(\"is_block_scope\", return_true);\nAST_Scope.DEFMETHOD(\"is_block_scope\", function () {\n  return this._block_scope || false;\n});\nAST_IterationStatement.DEFMETHOD(\"is_block_scope\", return_true);\nAST_Lambda.DEFMETHOD(\"init_scope_vars\", function () {\n  AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n  this.uses_arguments = false;\n  this.def_variable(new AST_SymbolFunarg({\n    name: \"arguments\",\n    start: this.start,\n    end: this.end\n  }));\n});\nAST_Arrow.DEFMETHOD(\"init_scope_vars\", function () {\n  AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n  this.uses_arguments = false;\n});\nAST_Symbol.DEFMETHOD(\"mark_enclosed\", function () {\n  var def = this.definition();\n  var s = this.scope;\n\n  while (s) {\n    push_uniq(s.enclosed, def);\n    if (s === def.scope) break;\n    s = s.parent_scope;\n  }\n});\nAST_Symbol.DEFMETHOD(\"reference\", function () {\n  this.definition().references.push(this);\n  this.mark_enclosed();\n});\nAST_Scope.DEFMETHOD(\"find_variable\", function (name) {\n  if (name instanceof AST_Symbol) name = name.name;\n  return this.variables.get(name) || this.parent_scope && this.parent_scope.find_variable(name);\n});\nAST_Scope.DEFMETHOD(\"def_function\", function (symbol, init) {\n  var def = this.def_variable(symbol, init);\n  if (!def.init || def.init instanceof AST_Defun) def.init = init;\n  return def;\n});\nAST_Scope.DEFMETHOD(\"def_variable\", function (symbol, init) {\n  var def = this.variables.get(symbol.name);\n\n  if (def) {\n    def.orig.push(symbol);\n\n    if (def.init && (def.scope !== symbol.scope || def.init instanceof AST_Function)) {\n      def.init = init;\n    }\n  } else {\n    def = new SymbolDef(this, symbol, init);\n    this.variables.set(symbol.name, def);\n    def.global = !this.parent_scope;\n  }\n\n  return symbol.thedef = def;\n});\n\nfunction next_mangled(scope, options) {\n  let defun_scope;\n\n  if (scopes_with_block_defuns && (defun_scope = scope.get_defun_scope()) && scopes_with_block_defuns.has(defun_scope)) {\n    scope = defun_scope;\n  }\n\n  var ext = scope.enclosed;\n  var nth_identifier = options.nth_identifier;\n\n  out: while (true) {\n    var m = nth_identifier.get(++scope.cname);\n    if (ALL_RESERVED_WORDS.has(m)) continue; // skip over \"do\"\n    // https://github.com/mishoo/UglifyJS2/issues/242 -- do not\n    // shadow a name reserved from mangling.\n\n    if (options.reserved.has(m)) continue; // Functions with short names might collide with base54 output\n    // and therefore cause collisions when keep_fnames is true.\n\n    if (unmangleable_names && unmangleable_names.has(m)) continue out; // we must ensure that the mangled name does not shadow a name\n    // from some parent scope that is referenced in this or in\n    // inner scopes.\n\n    for (let i = ext.length; --i >= 0;) {\n      const def = ext[i];\n      const name = def.mangled_name || def.unmangleable(options) && def.name;\n      if (m == name) continue out;\n    }\n\n    return m;\n  }\n}\n\nAST_Scope.DEFMETHOD(\"next_mangled\", function (options) {\n  return next_mangled(this, options);\n});\nAST_Toplevel.DEFMETHOD(\"next_mangled\", function (options) {\n  let name;\n  const mangled_names = this.mangled_names;\n\n  do {\n    name = next_mangled(this, options);\n  } while (mangled_names.has(name));\n\n  return name;\n});\nAST_Function.DEFMETHOD(\"next_mangled\", function (options, def) {\n  // #179, #326\n  // in Safari strict mode, something like (function x(x){...}) is a syntax error;\n  // a function expression's argument cannot shadow the function expression's name\n  var tricky_def = def.orig[0] instanceof AST_SymbolFunarg && this.name && this.name.definition(); // the function's mangled_name is null when keep_fnames is true\n\n  var tricky_name = tricky_def ? tricky_def.mangled_name || tricky_def.name : null;\n\n  while (true) {\n    var name = next_mangled(this, options);\n    if (!tricky_name || tricky_name != name) return name;\n  }\n});\nAST_Symbol.DEFMETHOD(\"unmangleable\", function (options) {\n  var def = this.definition();\n  return !def || def.unmangleable(options);\n}); // labels are always mangleable\n\nAST_Label.DEFMETHOD(\"unmangleable\", return_false);\nAST_Symbol.DEFMETHOD(\"unreferenced\", function () {\n  return !this.definition().references.length && !this.scope.pinned();\n});\nAST_Symbol.DEFMETHOD(\"definition\", function () {\n  return this.thedef;\n});\nAST_Symbol.DEFMETHOD(\"global\", function () {\n  return this.thedef.global;\n});\nAST_Toplevel.DEFMETHOD(\"_default_mangler_options\", function (options) {\n  options = defaults(options, {\n    eval: false,\n    nth_identifier: base54,\n    ie8: false,\n    keep_classnames: false,\n    keep_fnames: false,\n    module: false,\n    reserved: [],\n    toplevel: false\n  });\n  if (options.module) options.toplevel = true;\n\n  if (!Array.isArray(options.reserved) && !(options.reserved instanceof Set)) {\n    options.reserved = [];\n  }\n\n  options.reserved = new Set(options.reserved); // Never mangle arguments\n\n  options.reserved.add(\"arguments\");\n  return options;\n});\nAST_Toplevel.DEFMETHOD(\"mangle_names\", function (options) {\n  options = this._default_mangler_options(options);\n  var nth_identifier = options.nth_identifier; // We only need to mangle declaration nodes.  Special logic wired\n  // into the code generator will display the mangled name if it's\n  // present (and for AST_SymbolRef-s it'll use the mangled name of\n  // the AST_SymbolDeclaration that it points to).\n\n  var lname = -1;\n  var to_mangle = [];\n\n  if (options.keep_fnames) {\n    function_defs = new Set();\n  }\n\n  const mangled_names = this.mangled_names = new Set();\n  unmangleable_names = new Set();\n\n  if (options.cache) {\n    this.globals.forEach(collect);\n\n    if (options.cache.props) {\n      options.cache.props.forEach(function (mangled_name) {\n        mangled_names.add(mangled_name);\n      });\n    }\n  }\n\n  var tw = new TreeWalker(function (node, descend) {\n    if (node instanceof AST_LabeledStatement) {\n      // lname is incremented when we get to the AST_Label\n      var save_nesting = lname;\n      descend();\n      lname = save_nesting;\n      return true; // don't descend again in TreeWalker\n    }\n\n    if (node instanceof AST_Defun && !(tw.parent() instanceof AST_Scope)) {\n      scopes_with_block_defuns = scopes_with_block_defuns || new Set();\n      scopes_with_block_defuns.add(node.parent_scope.get_defun_scope());\n    }\n\n    if (node instanceof AST_Scope) {\n      node.variables.forEach(collect);\n      return;\n    }\n\n    if (node.is_block_scope()) {\n      node.block_scope.variables.forEach(collect);\n      return;\n    }\n\n    if (function_defs && node instanceof AST_VarDef && node.value instanceof AST_Lambda && !node.value.name && keep_name(options.keep_fnames, node.name.name)) {\n      function_defs.add(node.name.definition().id);\n      return;\n    }\n\n    if (node instanceof AST_Label) {\n      let name;\n\n      do {\n        name = nth_identifier.get(++lname);\n      } while (ALL_RESERVED_WORDS.has(name));\n\n      node.mangled_name = name;\n      return true;\n    }\n\n    if (!(options.ie8 || options.safari10) && node instanceof AST_SymbolCatch) {\n      to_mangle.push(node.definition());\n      return;\n    }\n  });\n  this.walk(tw);\n\n  if (options.keep_fnames || options.keep_classnames) {\n    // Collect a set of short names which are unmangleable,\n    // for use in avoiding collisions in next_mangled.\n    to_mangle.forEach(def => {\n      if (def.name.length < 6 && def.unmangleable(options)) {\n        unmangleable_names.add(def.name);\n      }\n    });\n  }\n\n  to_mangle.forEach(def => {\n    def.mangle(options);\n  });\n  function_defs = null;\n  unmangleable_names = null;\n  scopes_with_block_defuns = null;\n\n  function collect(symbol) {\n    if (symbol.export & MASK_EXPORT_DONT_MANGLE) {\n      unmangleable_names.add(symbol.name);\n    } else if (!options.reserved.has(symbol.name)) {\n      to_mangle.push(symbol);\n    }\n  }\n});\nAST_Toplevel.DEFMETHOD(\"find_colliding_names\", function (options) {\n  const cache = options.cache && options.cache.props;\n  const avoid = new Set();\n  options.reserved.forEach(to_avoid);\n  this.globals.forEach(add_def);\n  this.walk(new TreeWalker(function (node) {\n    if (node instanceof AST_Scope) node.variables.forEach(add_def);\n    if (node instanceof AST_SymbolCatch) add_def(node.definition());\n  }));\n  return avoid;\n\n  function to_avoid(name) {\n    avoid.add(name);\n  }\n\n  function add_def(def) {\n    var name = def.name;\n    if (def.global && cache && cache.has(name)) name = cache.get(name);else if (!def.unmangleable(options)) return;\n    to_avoid(name);\n  }\n});\nAST_Toplevel.DEFMETHOD(\"expand_names\", function (options) {\n  options = this._default_mangler_options(options);\n  var nth_identifier = options.nth_identifier;\n\n  if (nth_identifier.reset && nth_identifier.sort) {\n    nth_identifier.reset();\n    nth_identifier.sort();\n  }\n\n  var avoid = this.find_colliding_names(options);\n  var cname = 0;\n  this.globals.forEach(rename);\n  this.walk(new TreeWalker(function (node) {\n    if (node instanceof AST_Scope) node.variables.forEach(rename);\n    if (node instanceof AST_SymbolCatch) rename(node.definition());\n  }));\n\n  function next_name() {\n    var name;\n\n    do {\n      name = nth_identifier.get(cname++);\n    } while (avoid.has(name) || ALL_RESERVED_WORDS.has(name));\n\n    return name;\n  }\n\n  function rename(def) {\n    if (def.global && options.cache) return;\n    if (def.unmangleable(options)) return;\n    if (options.reserved.has(def.name)) return;\n    const redefinition = redefined_catch_def(def);\n    const name = def.name = redefinition ? redefinition.name : next_name();\n    def.orig.forEach(function (sym) {\n      sym.name = name;\n    });\n    def.references.forEach(function (sym) {\n      sym.name = name;\n    });\n  }\n});\nAST_Node.DEFMETHOD(\"tail_node\", return_this);\nAST_Sequence.DEFMETHOD(\"tail_node\", function () {\n  return this.expressions[this.expressions.length - 1];\n});\nAST_Toplevel.DEFMETHOD(\"compute_char_frequency\", function (options) {\n  options = this._default_mangler_options(options);\n  var nth_identifier = options.nth_identifier;\n\n  if (!nth_identifier.reset || !nth_identifier.consider || !nth_identifier.sort) {\n    // If the identifier mangler is invariant, skip computing character frequency.\n    return;\n  }\n\n  nth_identifier.reset();\n\n  try {\n    AST_Node.prototype.print = function (stream, force_parens) {\n      this._print(stream, force_parens);\n\n      if (this instanceof AST_Symbol && !this.unmangleable(options)) {\n        nth_identifier.consider(this.name, -1);\n      } else if (options.properties) {\n        if (this instanceof AST_DotHash) {\n          nth_identifier.consider(\"#\" + this.property, -1);\n        } else if (this instanceof AST_Dot) {\n          nth_identifier.consider(this.property, -1);\n        } else if (this instanceof AST_Sub) {\n          skip_string(this.property);\n        }\n      }\n    };\n\n    nth_identifier.consider(this.print_to_string(), 1);\n  } finally {\n    AST_Node.prototype.print = AST_Node.prototype._print;\n  }\n\n  nth_identifier.sort();\n\n  function skip_string(node) {\n    if (node instanceof AST_String) {\n      nth_identifier.consider(node.value, -1);\n    } else if (node instanceof AST_Conditional) {\n      skip_string(node.consequent);\n      skip_string(node.alternative);\n    } else if (node instanceof AST_Sequence) {\n      skip_string(node.tail_node());\n    }\n  }\n});\n\nconst base54 = (() => {\n  const leading = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_\".split(\"\");\n  const digits = \"0123456789\".split(\"\");\n  let chars;\n  let frequency;\n\n  function reset() {\n    frequency = new Map();\n    leading.forEach(function (ch) {\n      frequency.set(ch, 0);\n    });\n    digits.forEach(function (ch) {\n      frequency.set(ch, 0);\n    });\n  }\n\n  function consider(str, delta) {\n    for (var i = str.length; --i >= 0;) {\n      frequency.set(str[i], frequency.get(str[i]) + delta);\n    }\n  }\n\n  function compare(a, b) {\n    return frequency.get(b) - frequency.get(a);\n  }\n\n  function sort() {\n    chars = mergeSort(leading, compare).concat(mergeSort(digits, compare));\n  } // Ensure this is in a usable initial state.\n\n\n  reset();\n  sort();\n\n  function base54(num) {\n    var ret = \"\",\n        base = 54;\n    num++;\n\n    do {\n      num--;\n      ret += chars[num % base];\n      num = Math.floor(num / base);\n      base = 64;\n    } while (num > 0);\n\n    return ret;\n  }\n\n  return {\n    get: base54,\n    consider,\n    reset,\n    sort\n  };\n})();\n\nexport { base54, SymbolDef };","map":{"version":3,"names":["defaults","keep_name","mergeSort","push_uniq","make_node","return_false","return_this","return_true","string_template","AST_Arrow","AST_Block","AST_Call","AST_Catch","AST_Class","AST_Conditional","AST_DefClass","AST_Defun","AST_Destructuring","AST_Dot","AST_DotHash","AST_Export","AST_For","AST_ForIn","AST_Function","AST_Import","AST_IterationStatement","AST_Label","AST_LabeledStatement","AST_LabelRef","AST_Lambda","AST_LoopControl","AST_NameMapping","AST_Node","AST_Scope","AST_Sequence","AST_String","AST_Sub","AST_Switch","AST_SwitchBranch","AST_Symbol","AST_SymbolBlockDeclaration","AST_SymbolCatch","AST_SymbolClass","AST_SymbolConst","AST_SymbolDefClass","AST_SymbolDefun","AST_SymbolExport","AST_SymbolFunarg","AST_SymbolImport","AST_SymbolLambda","AST_SymbolLet","AST_SymbolMethod","AST_SymbolRef","AST_SymbolVar","AST_Toplevel","AST_VarDef","AST_With","TreeWalker","walk","ALL_RESERVED_WORDS","js_error","MASK_EXPORT_DONT_MANGLE","MASK_EXPORT_WANT_MANGLE","function_defs","unmangleable_names","scopes_with_block_defuns","SymbolDef","constructor","scope","orig","init","name","eliminated","assignments","replaced","global","export","mangled_name","undeclared","id","next_id","chained","direct_access","escaped","recursive_refs","references","should_replace","undefined","single_use","fixed","Object","seal","fixed_value","unmangleable","options","has","keep_fnames","toplevel","eval","pinned","keep_classnames","mangle","cache","props","get","s","sym","ie8","parent_scope","redefinition","redefined_catch_def","next_mangled","set","def","is_block_scope","get_defun_scope","variables","DEFMETHOD","safari10","Error","labels","Map","defun","in_destructuring","for_scopes","tw","node","descend","save_scope","block_scope","_block_scope","init_scope_vars","uses_with","uses_eval","push","the_block_scope","expression","i","body","length","save_destructuring","save_defun","save_labels","l","label","delete","thedef","def_function","closest_scope","directives","mark_export","def_variable","TYPE","every","start","file","line","col","pos","mark_enclosed","find_variable","reference","level","parent","exported","exported_definition","is_default","is_toplevel","globals","module_name","def_global","uses_arguments","definition","enclosed","refs","forEach","ref","g","cname","find","conflicting_def","scope_ancestry","ancestry","cur","reverse","new_scope_enclosed_set","Set","to_enclose","scope_topdown","e","values","find_scopes_visible_from","scopes","found_scopes","bubble_up","add","SymClass","source","tentative_name","conflict_scopes","symbol_name","replace","conflicting_def_shallow","symbol","prototype","apply","arguments","end","defun_scope","ext","nth_identifier","out","m","reserved","mangled_names","tricky_def","tricky_name","base54","module","Array","isArray","_default_mangler_options","lname","to_mangle","collect","save_nesting","value","avoid","to_avoid","add_def","reset","sort","find_colliding_names","rename","next_name","expressions","consider","print","stream","force_parens","_print","properties","property","skip_string","print_to_string","consequent","alternative","tail_node","leading","split","digits","chars","frequency","ch","str","delta","compare","a","b","concat","num","ret","base","Math","floor"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/terser/lib/scope.js"],"sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    defaults,\n    keep_name,\n    mergeSort,\n    push_uniq,\n    make_node,\n    return_false,\n    return_this,\n    return_true,\n    string_template,\n} from \"./utils/index.js\";\nimport {\n    AST_Arrow,\n    AST_Block,\n    AST_Call,\n    AST_Catch,\n    AST_Class,\n    AST_Conditional,\n    AST_DefClass,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Dot,\n    AST_DotHash,\n    AST_Export,\n    AST_For,\n    AST_ForIn,\n    AST_Function,\n    AST_Import,\n    AST_IterationStatement,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_Node,\n    AST_Scope,\n    AST_Sequence,\n    AST_String,\n    AST_Sub,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_Toplevel,\n    AST_VarDef,\n    AST_With,\n    TreeWalker,\n    walk\n} from \"./ast.js\";\nimport {\n    ALL_RESERVED_WORDS,\n    js_error,\n} from \"./parse.js\";\n\nconst MASK_EXPORT_DONT_MANGLE = 1 << 0;\nconst MASK_EXPORT_WANT_MANGLE = 1 << 1;\n\nlet function_defs = null;\nlet unmangleable_names = null;\n/**\n * When defined, there is a function declaration somewhere that's inside of a block.\n * See https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-block-level-function-declarations-web-legacy-compatibility-semantics\n*/\nlet scopes_with_block_defuns = null;\n\nclass SymbolDef {\n    constructor(scope, orig, init) {\n        this.name = orig.name;\n        this.orig = [ orig ];\n        this.init = init;\n        this.eliminated = 0;\n        this.assignments = 0;\n        this.scope = scope;\n        this.replaced = 0;\n        this.global = false;\n        this.export = 0;\n        this.mangled_name = null;\n        this.undeclared = false;\n        this.id = SymbolDef.next_id++;\n        this.chained = false;\n        this.direct_access = false;\n        this.escaped = 0;\n        this.recursive_refs = 0;\n        this.references = [];\n        this.should_replace = undefined;\n        this.single_use = false;\n        this.fixed = false;\n        Object.seal(this);\n    }\n    fixed_value() {\n        if (!this.fixed || this.fixed instanceof AST_Node) return this.fixed;\n        return this.fixed();\n    }\n    unmangleable(options) {\n        if (!options) options = {};\n\n        if (\n            function_defs &&\n            function_defs.has(this.id) &&\n            keep_name(options.keep_fnames, this.orig[0].name)\n        ) return true;\n\n        return this.global && !options.toplevel\n            || (this.export & MASK_EXPORT_DONT_MANGLE)\n            || this.undeclared\n            || !options.eval && this.scope.pinned()\n            || (this.orig[0] instanceof AST_SymbolLambda\n                  || this.orig[0] instanceof AST_SymbolDefun) && keep_name(options.keep_fnames, this.orig[0].name)\n            || this.orig[0] instanceof AST_SymbolMethod\n            || (this.orig[0] instanceof AST_SymbolClass\n                  || this.orig[0] instanceof AST_SymbolDefClass) && keep_name(options.keep_classnames, this.orig[0].name);\n    }\n    mangle(options) {\n        const cache = options.cache && options.cache.props;\n        if (this.global && cache && cache.has(this.name)) {\n            this.mangled_name = cache.get(this.name);\n        } else if (!this.mangled_name && !this.unmangleable(options)) {\n            var s = this.scope;\n            var sym = this.orig[0];\n            if (options.ie8 && sym instanceof AST_SymbolLambda)\n                s = s.parent_scope;\n            const redefinition = redefined_catch_def(this);\n            this.mangled_name = redefinition\n                ? redefinition.mangled_name || redefinition.name\n                : s.next_mangled(options, this);\n            if (this.global && cache) {\n                cache.set(this.name, this.mangled_name);\n            }\n        }\n    }\n}\n\nSymbolDef.next_id = 1;\n\nfunction redefined_catch_def(def) {\n    if (def.orig[0] instanceof AST_SymbolCatch\n        && def.scope.is_block_scope()\n    ) {\n        return def.scope.get_defun_scope().variables.get(def.name);\n    }\n}\n\nAST_Scope.DEFMETHOD(\"figure_out_scope\", function(options, { parent_scope = null, toplevel = this } = {}) {\n    options = defaults(options, {\n        cache: null,\n        ie8: false,\n        safari10: false,\n    });\n\n    if (!(toplevel instanceof AST_Toplevel)) {\n        throw new Error(\"Invalid toplevel scope\");\n    }\n\n    // pass 1: setup scope chaining and handle definitions\n    var scope = this.parent_scope = parent_scope;\n    var labels = new Map();\n    var defun = null;\n    var in_destructuring = null;\n    var for_scopes = [];\n    var tw = new TreeWalker((node, descend) => {\n        if (node.is_block_scope()) {\n            const save_scope = scope;\n            node.block_scope = scope = new AST_Scope(node);\n            scope._block_scope = true;\n            // AST_Try in the AST sadly *is* (not has) a body itself,\n            // and its catch and finally branches are children of the AST_Try itself\n            const parent_scope = node instanceof AST_Catch\n                ? save_scope.parent_scope\n                : save_scope;\n            scope.init_scope_vars(parent_scope);\n            scope.uses_with = save_scope.uses_with;\n            scope.uses_eval = save_scope.uses_eval;\n            if (options.safari10) {\n                if (node instanceof AST_For || node instanceof AST_ForIn) {\n                    for_scopes.push(scope);\n                }\n            }\n\n            if (node instanceof AST_Switch) {\n                // XXX: HACK! Ensure the switch expression gets the correct scope (the parent scope) and the body gets the contained scope\n                // AST_Switch has a scope within the body, but it itself \"is a block scope\"\n                // This means the switched expression has to belong to the outer scope\n                // while the body inside belongs to the switch itself.\n                // This is pretty nasty and warrants an AST change similar to AST_Try (read above)\n                const the_block_scope = scope;\n                scope = save_scope;\n                node.expression.walk(tw);\n                scope = the_block_scope;\n                for (let i = 0; i < node.body.length; i++) {\n                    node.body[i].walk(tw);\n                }\n            } else {\n                descend();\n            }\n            scope = save_scope;\n            return true;\n        }\n        if (node instanceof AST_Destructuring) {\n            const save_destructuring = in_destructuring;\n            in_destructuring = node;\n            descend();\n            in_destructuring = save_destructuring;\n            return true;\n        }\n        if (node instanceof AST_Scope) {\n            node.init_scope_vars(scope);\n            var save_scope = scope;\n            var save_defun = defun;\n            var save_labels = labels;\n            defun = scope = node;\n            labels = new Map();\n            descend();\n            scope = save_scope;\n            defun = save_defun;\n            labels = save_labels;\n            return true;        // don't descend again in TreeWalker\n        }\n        if (node instanceof AST_LabeledStatement) {\n            var l = node.label;\n            if (labels.has(l.name)) {\n                throw new Error(string_template(\"Label {name} defined twice\", l));\n            }\n            labels.set(l.name, l);\n            descend();\n            labels.delete(l.name);\n            return true;        // no descend again\n        }\n        if (node instanceof AST_With) {\n            for (var s = scope; s; s = s.parent_scope)\n                s.uses_with = true;\n            return;\n        }\n        if (node instanceof AST_Symbol) {\n            node.scope = scope;\n        }\n        if (node instanceof AST_Label) {\n            node.thedef = node;\n            node.references = [];\n        }\n        if (node instanceof AST_SymbolLambda) {\n            defun.def_function(node, node.name == \"arguments\" ? undefined : defun);\n        } else if (node instanceof AST_SymbolDefun) {\n            // Careful here, the scope where this should be defined is\n            // the parent scope.  The reason is that we enter a new\n            // scope when we encounter the AST_Defun node (which is\n            // instanceof AST_Scope) but we get to the symbol a bit\n            // later.\n            const closest_scope = defun.parent_scope;\n\n            // In strict mode, function definitions are block-scoped\n            node.scope = tw.directives[\"use strict\"]\n                ? closest_scope\n                : closest_scope.get_defun_scope();\n\n            mark_export(node.scope.def_function(node, defun), 1);\n        } else if (node instanceof AST_SymbolClass) {\n            mark_export(defun.def_variable(node, defun), 1);\n        } else if (node instanceof AST_SymbolImport) {\n            scope.def_variable(node);\n        } else if (node instanceof AST_SymbolDefClass) {\n            // This deals with the name of the class being available\n            // inside the class.\n            mark_export((node.scope = defun.parent_scope).def_function(node, defun), 1);\n        } else if (\n            node instanceof AST_SymbolVar\n            || node instanceof AST_SymbolLet\n            || node instanceof AST_SymbolConst\n            || node instanceof AST_SymbolCatch\n        ) {\n            var def;\n            if (node instanceof AST_SymbolBlockDeclaration) {\n                def = scope.def_variable(node, null);\n            } else {\n                def = defun.def_variable(node, node.TYPE == \"SymbolVar\" ? null : undefined);\n            }\n            if (!def.orig.every((sym) => {\n                if (sym === node) return true;\n                if (node instanceof AST_SymbolBlockDeclaration) {\n                    return sym instanceof AST_SymbolLambda;\n                }\n                return !(sym instanceof AST_SymbolLet || sym instanceof AST_SymbolConst);\n            })) {\n                js_error(\n                    `\"${node.name}\" is redeclared`,\n                    node.start.file,\n                    node.start.line,\n                    node.start.col,\n                    node.start.pos\n                );\n            }\n            if (!(node instanceof AST_SymbolFunarg)) mark_export(def, 2);\n            if (defun !== scope) {\n                node.mark_enclosed();\n                var def = scope.find_variable(node);\n                if (node.thedef !== def) {\n                    node.thedef = def;\n                    node.reference();\n                }\n            }\n        } else if (node instanceof AST_LabelRef) {\n            var sym = labels.get(node.name);\n            if (!sym) throw new Error(string_template(\"Undefined label {name} [{line},{col}]\", {\n                name: node.name,\n                line: node.start.line,\n                col: node.start.col\n            }));\n            node.thedef = sym;\n        }\n        if (!(scope instanceof AST_Toplevel) && (node instanceof AST_Export || node instanceof AST_Import)) {\n            js_error(\n                `\"${node.TYPE}\" statement may only appear at the top level`,\n                node.start.file,\n                node.start.line,\n                node.start.col,\n                node.start.pos\n            );\n        }\n    });\n    this.walk(tw);\n\n    function mark_export(def, level) {\n        if (in_destructuring) {\n            var i = 0;\n            do {\n                level++;\n            } while (tw.parent(i++) !== in_destructuring);\n        }\n        var node = tw.parent(level);\n        if (def.export = node instanceof AST_Export ? MASK_EXPORT_DONT_MANGLE : 0) {\n            var exported = node.exported_definition;\n            if ((exported instanceof AST_Defun || exported instanceof AST_DefClass) && node.is_default) {\n                def.export = MASK_EXPORT_WANT_MANGLE;\n            }\n        }\n    }\n\n    // pass 2: find back references and eval\n    const is_toplevel = this instanceof AST_Toplevel;\n    if (is_toplevel) {\n        this.globals = new Map();\n    }\n\n    var tw = new TreeWalker(node => {\n        if (node instanceof AST_LoopControl && node.label) {\n            node.label.thedef.references.push(node);\n            return true;\n        }\n        if (node instanceof AST_SymbolRef) {\n            var name = node.name;\n            if (name == \"eval\" && tw.parent() instanceof AST_Call) {\n                for (var s = node.scope; s && !s.uses_eval; s = s.parent_scope) {\n                    s.uses_eval = true;\n                }\n            }\n            var sym;\n            if (tw.parent() instanceof AST_NameMapping && tw.parent(1).module_name\n                || !(sym = node.scope.find_variable(name))) {\n\n                sym = toplevel.def_global(node);\n                if (node instanceof AST_SymbolExport) sym.export = MASK_EXPORT_DONT_MANGLE;\n            } else if (sym.scope instanceof AST_Lambda && name == \"arguments\") {\n                sym.scope.uses_arguments = true;\n            }\n            node.thedef = sym;\n            node.reference();\n            if (node.scope.is_block_scope()\n                && !(sym.orig[0] instanceof AST_SymbolBlockDeclaration)) {\n                node.scope = node.scope.get_defun_scope();\n            }\n            return true;\n        }\n        // ensure mangling works if catch reuses a scope variable\n        var def;\n        if (node instanceof AST_SymbolCatch && (def = redefined_catch_def(node.definition()))) {\n            var s = node.scope;\n            while (s) {\n                push_uniq(s.enclosed, def);\n                if (s === def.scope) break;\n                s = s.parent_scope;\n            }\n        }\n    });\n    this.walk(tw);\n\n    // pass 3: work around IE8 and Safari catch scope bugs\n    if (options.ie8 || options.safari10) {\n        walk(this, node => {\n            if (node instanceof AST_SymbolCatch) {\n                var name = node.name;\n                var refs = node.thedef.references;\n                var scope = node.scope.get_defun_scope();\n                var def = scope.find_variable(name)\n                    || toplevel.globals.get(name)\n                    || scope.def_variable(node);\n                refs.forEach(function(ref) {\n                    ref.thedef = def;\n                    ref.reference();\n                });\n                node.thedef = def;\n                node.reference();\n                return true;\n            }\n        });\n    }\n\n    // pass 4: add symbol definitions to loop scopes\n    // Safari/Webkit bug workaround - loop init let variable shadowing argument.\n    // https://github.com/mishoo/UglifyJS2/issues/1753\n    // https://bugs.webkit.org/show_bug.cgi?id=171041\n    if (options.safari10) {\n        for (const scope of for_scopes) {\n            scope.parent_scope.variables.forEach(function(def) {\n                push_uniq(scope.enclosed, def);\n            });\n        }\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"def_global\", function(node) {\n    var globals = this.globals, name = node.name;\n    if (globals.has(name)) {\n        return globals.get(name);\n    } else {\n        var g = new SymbolDef(this, node);\n        g.undeclared = true;\n        g.global = true;\n        globals.set(name, g);\n        return g;\n    }\n});\n\nAST_Scope.DEFMETHOD(\"init_scope_vars\", function(parent_scope) {\n    this.variables = new Map();         // map name to AST_SymbolVar (variables defined in this scope; includes functions)\n    this.uses_with = false;             // will be set to true if this or some nested scope uses the `with` statement\n    this.uses_eval = false;             // will be set to true if this or nested scope uses the global `eval`\n    this.parent_scope = parent_scope;   // the parent scope\n    this.enclosed = [];                 // a list of variables from this or outer scope(s) that are referenced from this or inner scopes\n    this.cname = -1;                    // the current index for mangling functions/variables\n});\n\nAST_Scope.DEFMETHOD(\"conflicting_def\", function (name) {\n    return (\n        this.enclosed.find(def => def.name === name)\n        || this.variables.has(name)\n        || (this.parent_scope && this.parent_scope.conflicting_def(name))\n    );\n});\n\nAST_Scope.DEFMETHOD(\"conflicting_def_shallow\", function (name) {\n    return (\n        this.enclosed.find(def => def.name === name)\n        || this.variables.has(name)\n    );\n});\n\nAST_Scope.DEFMETHOD(\"add_child_scope\", function (scope) {\n    // `scope` is going to be moved into `this` right now.\n    // Update the required scopes' information\n\n    if (scope.parent_scope === this) return;\n\n    scope.parent_scope = this;\n\n    // TODO uses_with, uses_eval, etc\n\n    const scope_ancestry = (() => {\n        const ancestry = [];\n        let cur = this;\n        do {\n            ancestry.push(cur);\n        } while ((cur = cur.parent_scope));\n        ancestry.reverse();\n        return ancestry;\n    })();\n\n    const new_scope_enclosed_set = new Set(scope.enclosed);\n    const to_enclose = [];\n    for (const scope_topdown of scope_ancestry) {\n        to_enclose.forEach(e => push_uniq(scope_topdown.enclosed, e));\n        for (const def of scope_topdown.variables.values()) {\n            if (new_scope_enclosed_set.has(def)) {\n                push_uniq(to_enclose, def);\n                push_uniq(scope_topdown.enclosed, def);\n            }\n        }\n    }\n});\n\nfunction find_scopes_visible_from(scopes) {\n    const found_scopes = new Set();\n\n    for (const scope of new Set(scopes)) {\n        (function bubble_up(scope) {\n            if (scope == null || found_scopes.has(scope)) return;\n\n            found_scopes.add(scope);\n\n            bubble_up(scope.parent_scope);\n        })(scope);\n    }\n\n    return [...found_scopes];\n}\n\n// Creates a symbol during compression\nAST_Scope.DEFMETHOD(\"create_symbol\", function(SymClass, {\n    source,\n    tentative_name,\n    scope,\n    conflict_scopes = [scope],\n    init = null\n} = {}) {\n    let symbol_name;\n\n    conflict_scopes = find_scopes_visible_from(conflict_scopes);\n\n    if (tentative_name) {\n        // Implement hygiene (no new names are conflicting with existing names)\n        tentative_name =\n            symbol_name =\n            tentative_name.replace(/(?:^[^a-z_$]|[^a-z0-9_$])/ig, \"_\");\n\n        let i = 0;\n        while (conflict_scopes.find(s => s.conflicting_def_shallow(symbol_name))) {\n            symbol_name = tentative_name + \"$\" + i++;\n        }\n    }\n\n    if (!symbol_name) {\n        throw new Error(\"No symbol name could be generated in create_symbol()\");\n    }\n\n    const symbol = make_node(SymClass, source, {\n        name: symbol_name,\n        scope\n    });\n\n    this.def_variable(symbol, init || null);\n\n    symbol.mark_enclosed();\n\n    return symbol;\n});\n\n\nAST_Node.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Class.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Lambda.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Toplevel.DEFMETHOD(\"is_block_scope\", return_false);\nAST_SwitchBranch.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Block.DEFMETHOD(\"is_block_scope\", return_true);\nAST_Scope.DEFMETHOD(\"is_block_scope\", function () {\n    return this._block_scope || false;\n});\nAST_IterationStatement.DEFMETHOD(\"is_block_scope\", return_true);\n\nAST_Lambda.DEFMETHOD(\"init_scope_vars\", function() {\n    AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n    this.uses_arguments = false;\n    this.def_variable(new AST_SymbolFunarg({\n        name: \"arguments\",\n        start: this.start,\n        end: this.end\n    }));\n});\n\nAST_Arrow.DEFMETHOD(\"init_scope_vars\", function() {\n    AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n    this.uses_arguments = false;\n});\n\nAST_Symbol.DEFMETHOD(\"mark_enclosed\", function() {\n    var def = this.definition();\n    var s = this.scope;\n    while (s) {\n        push_uniq(s.enclosed, def);\n        if (s === def.scope) break;\n        s = s.parent_scope;\n    }\n});\n\nAST_Symbol.DEFMETHOD(\"reference\", function() {\n    this.definition().references.push(this);\n    this.mark_enclosed();\n});\n\nAST_Scope.DEFMETHOD(\"find_variable\", function(name) {\n    if (name instanceof AST_Symbol) name = name.name;\n    return this.variables.get(name)\n        || (this.parent_scope && this.parent_scope.find_variable(name));\n});\n\nAST_Scope.DEFMETHOD(\"def_function\", function(symbol, init) {\n    var def = this.def_variable(symbol, init);\n    if (!def.init || def.init instanceof AST_Defun) def.init = init;\n    return def;\n});\n\nAST_Scope.DEFMETHOD(\"def_variable\", function(symbol, init) {\n    var def = this.variables.get(symbol.name);\n    if (def) {\n        def.orig.push(symbol);\n        if (def.init && (def.scope !== symbol.scope || def.init instanceof AST_Function)) {\n            def.init = init;\n        }\n    } else {\n        def = new SymbolDef(this, symbol, init);\n        this.variables.set(symbol.name, def);\n        def.global = !this.parent_scope;\n    }\n    return symbol.thedef = def;\n});\n\nfunction next_mangled(scope, options) {\n    let defun_scope;\n    if (\n        scopes_with_block_defuns\n        && (defun_scope = scope.get_defun_scope())\n        && scopes_with_block_defuns.has(defun_scope)\n    ) {\n        scope = defun_scope;\n    }\n\n    var ext = scope.enclosed;\n    var nth_identifier = options.nth_identifier;\n    out: while (true) {\n        var m = nth_identifier.get(++scope.cname);\n        if (ALL_RESERVED_WORDS.has(m)) continue; // skip over \"do\"\n\n        // https://github.com/mishoo/UglifyJS2/issues/242 -- do not\n        // shadow a name reserved from mangling.\n        if (options.reserved.has(m)) continue;\n\n        // Functions with short names might collide with base54 output\n        // and therefore cause collisions when keep_fnames is true.\n        if (unmangleable_names && unmangleable_names.has(m)) continue out;\n\n        // we must ensure that the mangled name does not shadow a name\n        // from some parent scope that is referenced in this or in\n        // inner scopes.\n        for (let i = ext.length; --i >= 0;) {\n            const def = ext[i];\n            const name = def.mangled_name || (def.unmangleable(options) && def.name);\n            if (m == name) continue out;\n        }\n        return m;\n    }\n}\n\nAST_Scope.DEFMETHOD(\"next_mangled\", function(options) {\n    return next_mangled(this, options);\n});\n\nAST_Toplevel.DEFMETHOD(\"next_mangled\", function(options) {\n    let name;\n    const mangled_names = this.mangled_names;\n    do {\n        name = next_mangled(this, options);\n    } while (mangled_names.has(name));\n    return name;\n});\n\nAST_Function.DEFMETHOD(\"next_mangled\", function(options, def) {\n    // #179, #326\n    // in Safari strict mode, something like (function x(x){...}) is a syntax error;\n    // a function expression's argument cannot shadow the function expression's name\n\n    var tricky_def = def.orig[0] instanceof AST_SymbolFunarg && this.name && this.name.definition();\n\n    // the function's mangled_name is null when keep_fnames is true\n    var tricky_name = tricky_def ? tricky_def.mangled_name || tricky_def.name : null;\n\n    while (true) {\n        var name = next_mangled(this, options);\n        if (!tricky_name || tricky_name != name)\n            return name;\n    }\n});\n\nAST_Symbol.DEFMETHOD(\"unmangleable\", function(options) {\n    var def = this.definition();\n    return !def || def.unmangleable(options);\n});\n\n// labels are always mangleable\nAST_Label.DEFMETHOD(\"unmangleable\", return_false);\n\nAST_Symbol.DEFMETHOD(\"unreferenced\", function() {\n    return !this.definition().references.length && !this.scope.pinned();\n});\n\nAST_Symbol.DEFMETHOD(\"definition\", function() {\n    return this.thedef;\n});\n\nAST_Symbol.DEFMETHOD(\"global\", function() {\n    return this.thedef.global;\n});\n\nAST_Toplevel.DEFMETHOD(\"_default_mangler_options\", function(options) {\n    options = defaults(options, {\n        eval        : false,\n        nth_identifier : base54,\n        ie8         : false,\n        keep_classnames: false,\n        keep_fnames : false,\n        module      : false,\n        reserved    : [],\n        toplevel    : false,\n    });\n    if (options.module) options.toplevel = true;\n    if (!Array.isArray(options.reserved)\n        && !(options.reserved instanceof Set)\n    ) {\n        options.reserved = [];\n    }\n    options.reserved = new Set(options.reserved);\n    // Never mangle arguments\n    options.reserved.add(\"arguments\");\n    return options;\n});\n\nAST_Toplevel.DEFMETHOD(\"mangle_names\", function(options) {\n    options = this._default_mangler_options(options);\n    var nth_identifier = options.nth_identifier;\n\n    // We only need to mangle declaration nodes.  Special logic wired\n    // into the code generator will display the mangled name if it's\n    // present (and for AST_SymbolRef-s it'll use the mangled name of\n    // the AST_SymbolDeclaration that it points to).\n    var lname = -1;\n    var to_mangle = [];\n\n    if (options.keep_fnames) {\n        function_defs = new Set();\n    }\n\n    const mangled_names = this.mangled_names = new Set();\n    unmangleable_names = new Set();\n\n    if (options.cache) {\n        this.globals.forEach(collect);\n        if (options.cache.props) {\n            options.cache.props.forEach(function(mangled_name) {\n                mangled_names.add(mangled_name);\n            });\n        }\n    }\n\n    var tw = new TreeWalker(function(node, descend) {\n        if (node instanceof AST_LabeledStatement) {\n            // lname is incremented when we get to the AST_Label\n            var save_nesting = lname;\n            descend();\n            lname = save_nesting;\n            return true;        // don't descend again in TreeWalker\n        }\n        if (\n            node instanceof AST_Defun\n            && !(tw.parent() instanceof AST_Scope)\n        ) {\n            scopes_with_block_defuns = scopes_with_block_defuns || new Set();\n            scopes_with_block_defuns.add(node.parent_scope.get_defun_scope());\n        }\n        if (node instanceof AST_Scope) {\n            node.variables.forEach(collect);\n            return;\n        }\n        if (node.is_block_scope()) {\n            node.block_scope.variables.forEach(collect);\n            return;\n        }\n        if (\n            function_defs\n            && node instanceof AST_VarDef\n            && node.value instanceof AST_Lambda\n            && !node.value.name\n            && keep_name(options.keep_fnames, node.name.name)\n        ) {\n            function_defs.add(node.name.definition().id);\n            return;\n        }\n        if (node instanceof AST_Label) {\n            let name;\n            do {\n                name = nth_identifier.get(++lname);\n            } while (ALL_RESERVED_WORDS.has(name));\n            node.mangled_name = name;\n            return true;\n        }\n        if (!(options.ie8 || options.safari10) && node instanceof AST_SymbolCatch) {\n            to_mangle.push(node.definition());\n            return;\n        }\n    });\n\n    this.walk(tw);\n\n    if (options.keep_fnames || options.keep_classnames) {\n        // Collect a set of short names which are unmangleable,\n        // for use in avoiding collisions in next_mangled.\n        to_mangle.forEach(def => {\n            if (def.name.length < 6 && def.unmangleable(options)) {\n                unmangleable_names.add(def.name);\n            }\n        });\n    }\n\n    to_mangle.forEach(def => { def.mangle(options); });\n\n    function_defs = null;\n    unmangleable_names = null;\n    scopes_with_block_defuns = null;\n\n    function collect(symbol) {\n        if (symbol.export & MASK_EXPORT_DONT_MANGLE) {\n            unmangleable_names.add(symbol.name);\n        } else if (!options.reserved.has(symbol.name)) {\n            to_mangle.push(symbol);\n        }\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"find_colliding_names\", function(options) {\n    const cache = options.cache && options.cache.props;\n    const avoid = new Set();\n    options.reserved.forEach(to_avoid);\n    this.globals.forEach(add_def);\n    this.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Scope) node.variables.forEach(add_def);\n        if (node instanceof AST_SymbolCatch) add_def(node.definition());\n    }));\n    return avoid;\n\n    function to_avoid(name) {\n        avoid.add(name);\n    }\n\n    function add_def(def) {\n        var name = def.name;\n        if (def.global && cache && cache.has(name)) name = cache.get(name);\n        else if (!def.unmangleable(options)) return;\n        to_avoid(name);\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"expand_names\", function(options) {\n    options = this._default_mangler_options(options);\n    var nth_identifier = options.nth_identifier;\n    if (nth_identifier.reset && nth_identifier.sort) {\n        nth_identifier.reset();\n        nth_identifier.sort();\n    }\n    var avoid = this.find_colliding_names(options);\n    var cname = 0;\n    this.globals.forEach(rename);\n    this.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Scope) node.variables.forEach(rename);\n        if (node instanceof AST_SymbolCatch) rename(node.definition());\n    }));\n\n    function next_name() {\n        var name;\n        do {\n            name = nth_identifier.get(cname++);\n        } while (avoid.has(name) || ALL_RESERVED_WORDS.has(name));\n        return name;\n    }\n\n    function rename(def) {\n        if (def.global && options.cache) return;\n        if (def.unmangleable(options)) return;\n        if (options.reserved.has(def.name)) return;\n        const redefinition = redefined_catch_def(def);\n        const name = def.name = redefinition ? redefinition.name : next_name();\n        def.orig.forEach(function(sym) {\n            sym.name = name;\n        });\n        def.references.forEach(function(sym) {\n            sym.name = name;\n        });\n    }\n});\n\nAST_Node.DEFMETHOD(\"tail_node\", return_this);\nAST_Sequence.DEFMETHOD(\"tail_node\", function() {\n    return this.expressions[this.expressions.length - 1];\n});\n\nAST_Toplevel.DEFMETHOD(\"compute_char_frequency\", function(options) {\n    options = this._default_mangler_options(options);\n    var nth_identifier = options.nth_identifier;\n    if (!nth_identifier.reset || !nth_identifier.consider || !nth_identifier.sort) {\n        // If the identifier mangler is invariant, skip computing character frequency.\n        return;\n    }\n    nth_identifier.reset();\n\n    try {\n        AST_Node.prototype.print = function(stream, force_parens) {\n            this._print(stream, force_parens);\n            if (this instanceof AST_Symbol && !this.unmangleable(options)) {\n                nth_identifier.consider(this.name, -1);\n            } else if (options.properties) {\n                if (this instanceof AST_DotHash) {\n                    nth_identifier.consider(\"#\" + this.property, -1);\n                } else if (this instanceof AST_Dot) {\n                    nth_identifier.consider(this.property, -1);\n                } else if (this instanceof AST_Sub) {\n                    skip_string(this.property);\n                }\n            }\n        };\n        nth_identifier.consider(this.print_to_string(), 1);\n    } finally {\n        AST_Node.prototype.print = AST_Node.prototype._print;\n    }\n    nth_identifier.sort();\n\n    function skip_string(node) {\n        if (node instanceof AST_String) {\n            nth_identifier.consider(node.value, -1);\n        } else if (node instanceof AST_Conditional) {\n            skip_string(node.consequent);\n            skip_string(node.alternative);\n        } else if (node instanceof AST_Sequence) {\n            skip_string(node.tail_node());\n        }\n    }\n});\n\nconst base54 = (() => {\n    const leading = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_\".split(\"\");\n    const digits = \"0123456789\".split(\"\");\n    let chars;\n    let frequency;\n    function reset() {\n        frequency = new Map();\n        leading.forEach(function(ch) {\n            frequency.set(ch, 0);\n        });\n        digits.forEach(function(ch) {\n            frequency.set(ch, 0);\n        });\n    }\n    function consider(str, delta) {\n        for (var i = str.length; --i >= 0;) {\n            frequency.set(str[i], frequency.get(str[i]) + delta);\n        }\n    }\n    function compare(a, b) {\n        return frequency.get(b) - frequency.get(a);\n    }\n    function sort() {\n        chars = mergeSort(leading, compare).concat(mergeSort(digits, compare));\n    }\n    // Ensure this is in a usable initial state.\n    reset();\n    sort();\n    function base54(num) {\n        var ret = \"\", base = 54;\n        num++;\n        do {\n            num--;\n            ret += chars[num % base];\n            num = Math.floor(num / base);\n            base = 64;\n        } while (num > 0);\n        return ret;\n    }\n\n    return {\n        get: base54,\n        consider,\n        reset,\n        sort\n    };\n})();\n\nexport {\n    base54,\n    SymbolDef,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}