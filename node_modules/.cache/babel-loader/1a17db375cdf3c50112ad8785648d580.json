{"ast":null,"code":"var hpack = require('../hpack');\n\nvar utils = hpack.utils;\nvar huffman = hpack.huffman.decode;\nvar assert = utils.assert;\n\nvar OffsetBuffer = require('obuf');\n\nfunction Decoder() {\n  this.buffer = new OffsetBuffer();\n  this.bitOffset = 0; // Used internally in decodeStr\n\n  this._huffmanNode = null;\n}\n\nmodule.exports = Decoder;\n\nDecoder.create = function create() {\n  return new Decoder();\n};\n\nDecoder.prototype.isEmpty = function isEmpty() {\n  return this.buffer.isEmpty();\n};\n\nDecoder.prototype.push = function push(chunk) {\n  this.buffer.push(chunk);\n};\n\nDecoder.prototype.decodeBit = function decodeBit() {\n  // Need at least one octet\n  assert(this.buffer.has(1), 'Buffer too small for an int');\n  var octet;\n  var offset = this.bitOffset;\n\n  if (++this.bitOffset === 8) {\n    octet = this.buffer.readUInt8();\n    this.bitOffset = 0;\n  } else {\n    octet = this.buffer.peekUInt8();\n  }\n\n  return octet >>> 7 - offset & 1;\n}; // Just for testing\n\n\nDecoder.prototype.skipBits = function skipBits(n) {\n  this.bitOffset += n;\n  this.buffer.skip(this.bitOffset >> 3);\n  this.bitOffset &= 0x7;\n};\n\nDecoder.prototype.decodeInt = function decodeInt() {\n  // Need at least one octet\n  assert(this.buffer.has(1), 'Buffer too small for an int');\n  var prefix = 8 - this.bitOffset; // We are going to end up octet-aligned\n\n  this.bitOffset = 0;\n  var max = (1 << prefix) - 1;\n  var octet = this.buffer.readUInt8() & max; // Fast case - int fits into the prefix\n\n  if (octet !== max) return octet; // TODO(indutny): what about > 32bit numbers?\n\n  var res = 0;\n  var isLast = false;\n  var len = 0;\n\n  do {\n    octet = this.buffer.readUInt8();\n    isLast = (octet & 0x80) === 0;\n    res <<= 7;\n    res |= octet & 0x7f;\n    len++;\n  } while (!isLast);\n\n  assert(isLast, 'Incomplete data for multi-octet integer');\n  assert(len <= 4, 'Integer does not fit into 32 bits'); // Reverse bits\n\n  res = res >>> 21 | (res >> 14 & 0x7f) << 7 | (res >> 7 & 0x7f) << 14 | (res & 0x7f) << 21;\n  res >>= (4 - len) * 7; // Append prefix max\n\n  res += max;\n  return res;\n};\n\nDecoder.prototype.decodeHuffmanWord = function decodeHuffmanWord(input, inputBits, out) {\n  var root = huffman;\n  var node = this._huffmanNode;\n  var word = input;\n  var bits = inputBits;\n\n  for (; bits > 0; word &= (1 << bits) - 1) {\n    // Nudge the word bit length to match it\n    for (var i = Math.max(0, bits - 8); i < bits; i++) {\n      var subnode = node[word >>> i];\n\n      if (typeof subnode !== 'number') {\n        node = subnode;\n        bits = i;\n        break;\n      }\n\n      if (subnode === 0) continue; // Word bit length should match\n\n      if (subnode >>> 9 !== bits - i) {\n        subnode = 0;\n        continue;\n      }\n\n      var octet = subnode & 0x1ff;\n      assert(octet !== 256, 'EOS in encoding');\n      out.push(octet);\n      node = root;\n      bits = i;\n      break;\n    }\n\n    if (subnode === 0) break;\n  }\n\n  this._huffmanNode = node;\n  return bits;\n};\n\nDecoder.prototype.decodeStr = function decodeStr() {\n  var isHuffman = this.decodeBit();\n  var len = this.decodeInt();\n  assert(this.buffer.has(len), 'Not enough octets for string');\n  if (!isHuffman) return this.buffer.take(len);\n  this._huffmanNode = huffman;\n  var out = [];\n  var word = 0;\n  var bits = 0;\n  var lastKey = 0;\n\n  for (var i = 0; i < len; i++) {\n    word <<= 8;\n    word |= this.buffer.readUInt8();\n    bits += 8;\n    bits = this.decodeHuffmanWord(word, bits, out);\n    lastKey = word >> bits;\n    word &= (1 << bits) - 1;\n  }\n\n  assert(this._huffmanNode === huffman, '8-bit EOS');\n  assert(word + 1 === 1 << bits, 'Final sequence is not EOS');\n  this._huffmanNode = null;\n  return out;\n};","map":{"version":3,"names":["hpack","require","utils","huffman","decode","assert","OffsetBuffer","Decoder","buffer","bitOffset","_huffmanNode","module","exports","create","prototype","isEmpty","push","chunk","decodeBit","has","octet","offset","readUInt8","peekUInt8","skipBits","n","skip","decodeInt","prefix","max","res","isLast","len","decodeHuffmanWord","input","inputBits","out","root","node","word","bits","i","Math","subnode","decodeStr","isHuffman","take","lastKey"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/hpack.js/lib/hpack/decoder.js"],"sourcesContent":["var hpack = require('../hpack');\nvar utils = hpack.utils;\nvar huffman = hpack.huffman.decode;\nvar assert = utils.assert;\n\nvar OffsetBuffer = require('obuf');\n\nfunction Decoder() {\n  this.buffer = new OffsetBuffer();\n  this.bitOffset = 0;\n\n  // Used internally in decodeStr\n  this._huffmanNode = null;\n}\nmodule.exports = Decoder;\n\nDecoder.create = function create() {\n  return new Decoder();\n};\n\nDecoder.prototype.isEmpty = function isEmpty() {\n  return this.buffer.isEmpty();\n};\n\nDecoder.prototype.push = function push(chunk) {\n  this.buffer.push(chunk);\n};\n\nDecoder.prototype.decodeBit = function decodeBit() {\n  // Need at least one octet\n  assert(this.buffer.has(1), 'Buffer too small for an int');\n\n  var octet;\n  var offset = this.bitOffset;\n\n  if (++this.bitOffset === 8) {\n    octet = this.buffer.readUInt8();\n    this.bitOffset = 0;\n  } else {\n    octet = this.buffer.peekUInt8();\n  }\n  return (octet >>> (7 - offset)) & 1;\n};\n\n// Just for testing\nDecoder.prototype.skipBits = function skipBits(n) {\n  this.bitOffset += n;\n  this.buffer.skip(this.bitOffset >> 3);\n  this.bitOffset &= 0x7;\n};\n\nDecoder.prototype.decodeInt = function decodeInt() {\n  // Need at least one octet\n  assert(this.buffer.has(1), 'Buffer too small for an int');\n\n  var prefix = 8 - this.bitOffset;\n\n  // We are going to end up octet-aligned\n  this.bitOffset = 0;\n\n  var max = (1 << prefix) - 1;\n  var octet = this.buffer.readUInt8() & max;\n\n  // Fast case - int fits into the prefix\n  if (octet !== max)\n    return octet;\n\n  // TODO(indutny): what about > 32bit numbers?\n  var res = 0;\n  var isLast = false;\n  var len = 0;\n  do {\n    octet = this.buffer.readUInt8();\n    isLast = (octet & 0x80) === 0;\n\n    res <<= 7;\n    res |= octet & 0x7f;\n    len++;\n  } while (!isLast);\n  assert(isLast, 'Incomplete data for multi-octet integer');\n  assert(len <= 4, 'Integer does not fit into 32 bits');\n\n  // Reverse bits\n  res = (res >>> 21) |\n        (((res >> 14) & 0x7f) << 7) |\n        (((res >> 7) & 0x7f) << 14) |\n        ((res & 0x7f) << 21);\n  res >>= (4 - len) * 7;\n\n  // Append prefix max\n  res += max;\n\n  return res;\n};\n\nDecoder.prototype.decodeHuffmanWord = function decodeHuffmanWord(input,\n                                                                 inputBits,\n                                                                 out) {\n  var root = huffman;\n  var node = this._huffmanNode;\n  var word = input;\n  var bits = inputBits;\n\n  for (; bits > 0; word &= (1 << bits) - 1) {\n    // Nudge the word bit length to match it\n    for (var i = Math.max(0, bits - 8); i < bits; i++) {\n      var subnode = node[word >>> i];\n      if (typeof subnode !== 'number') {\n        node = subnode;\n        bits = i;\n        break;\n      }\n\n      if (subnode === 0)\n        continue;\n\n      // Word bit length should match\n      if ((subnode >>> 9) !== bits - i) {\n        subnode = 0;\n        continue;\n      }\n\n      var octet = subnode & 0x1ff;\n      assert(octet !== 256, 'EOS in encoding');\n      out.push(octet);\n      node = root;\n\n      bits = i;\n      break;\n    }\n    if (subnode === 0)\n      break;\n  }\n  this._huffmanNode = node;\n\n  return bits;\n};\n\nDecoder.prototype.decodeStr = function decodeStr() {\n  var isHuffman = this.decodeBit();\n  var len = this.decodeInt();\n  assert(this.buffer.has(len), 'Not enough octets for string');\n\n  if (!isHuffman)\n    return this.buffer.take(len);\n\n  this._huffmanNode = huffman;\n\n  var out = [];\n\n  var word = 0;\n  var bits = 0;\n  var lastKey = 0;\n  for (var i = 0; i < len; i++) {\n    word <<= 8;\n    word |= this.buffer.readUInt8();\n    bits += 8;\n\n    bits = this.decodeHuffmanWord(word, bits, out);\n    lastKey = word >> bits;\n    word &= (1 << bits) - 1;\n  }\n  assert(this._huffmanNode === huffman, '8-bit EOS');\n  assert(word + 1 === (1 << bits), 'Final sequence is not EOS');\n\n  this._huffmanNode = null;\n\n  return out;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}