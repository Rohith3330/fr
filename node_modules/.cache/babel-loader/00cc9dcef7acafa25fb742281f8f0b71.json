{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RULE_NAME = void 0;\n\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\n\nconst node_utils_1 = require(\"../node-utils\");\n\nexports.RULE_NAME = 'prefer-presence-queries';\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n  name: exports.RULE_NAME,\n  meta: {\n    docs: {\n      description: 'Ensure appropriate `get*`/`query*` queries are used with their respective matchers',\n      recommendedConfig: {\n        dom: 'error',\n        angular: 'error',\n        react: 'error',\n        vue: 'error',\n        marko: 'error'\n      }\n    },\n    messages: {\n      wrongPresenceQuery: 'Use `getBy*` queries rather than `queryBy*` for checking element is present',\n      wrongAbsenceQuery: 'Use `queryBy*` queries rather than `getBy*` for checking element is NOT present'\n    },\n    schema: [{\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        presence: {\n          type: 'boolean'\n        },\n        absence: {\n          type: 'boolean'\n        }\n      }\n    }],\n    type: 'suggestion'\n  },\n  defaultOptions: [{\n    presence: true,\n    absence: true\n  }],\n\n  create(context, _ref, helpers) {\n    let [{\n      absence = true,\n      presence = true\n    }] = _ref;\n    return {\n      'CallExpression Identifier'(node) {\n        const expectCallNode = (0, node_utils_1.findClosestCallNode)(node, 'expect');\n\n        if (!expectCallNode || !(0, node_utils_1.isMemberExpression)(expectCallNode.parent)) {\n          return;\n        }\n\n        if (!helpers.isSyncQuery(node)) {\n          return;\n        }\n\n        const isPresenceQuery = helpers.isGetQueryVariant(node);\n        const expectStatement = expectCallNode.parent;\n        const isPresenceAssert = helpers.isPresenceAssert(expectStatement);\n        const isAbsenceAssert = helpers.isAbsenceAssert(expectStatement);\n\n        if (!isPresenceAssert && !isAbsenceAssert) {\n          return;\n        }\n\n        if (presence && isPresenceAssert && !isPresenceQuery) {\n          context.report({\n            node,\n            messageId: 'wrongPresenceQuery'\n          });\n        } else if (absence && isAbsenceAssert && isPresenceQuery) {\n          context.report({\n            node,\n            messageId: 'wrongAbsenceQuery'\n          });\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","RULE_NAME","create_testing_library_rule_1","require","node_utils_1","default","createTestingLibraryRule","name","meta","docs","description","recommendedConfig","dom","angular","react","vue","marko","messages","wrongPresenceQuery","wrongAbsenceQuery","schema","type","additionalProperties","properties","presence","absence","defaultOptions","create","context","helpers","node","expectCallNode","findClosestCallNode","isMemberExpression","parent","isSyncQuery","isPresenceQuery","isGetQueryVariant","expectStatement","isPresenceAssert","isAbsenceAssert","report","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-testing-library/rules/prefer-presence-queries.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RULE_NAME = void 0;\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\nconst node_utils_1 = require(\"../node-utils\");\nexports.RULE_NAME = 'prefer-presence-queries';\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n    name: exports.RULE_NAME,\n    meta: {\n        docs: {\n            description: 'Ensure appropriate `get*`/`query*` queries are used with their respective matchers',\n            recommendedConfig: {\n                dom: 'error',\n                angular: 'error',\n                react: 'error',\n                vue: 'error',\n                marko: 'error',\n            },\n        },\n        messages: {\n            wrongPresenceQuery: 'Use `getBy*` queries rather than `queryBy*` for checking element is present',\n            wrongAbsenceQuery: 'Use `queryBy*` queries rather than `getBy*` for checking element is NOT present',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    presence: {\n                        type: 'boolean',\n                    },\n                    absence: {\n                        type: 'boolean',\n                    },\n                },\n            },\n        ],\n        type: 'suggestion',\n    },\n    defaultOptions: [\n        {\n            presence: true,\n            absence: true,\n        },\n    ],\n    create(context, [{ absence = true, presence = true }], helpers) {\n        return {\n            'CallExpression Identifier'(node) {\n                const expectCallNode = (0, node_utils_1.findClosestCallNode)(node, 'expect');\n                if (!expectCallNode || !(0, node_utils_1.isMemberExpression)(expectCallNode.parent)) {\n                    return;\n                }\n                if (!helpers.isSyncQuery(node)) {\n                    return;\n                }\n                const isPresenceQuery = helpers.isGetQueryVariant(node);\n                const expectStatement = expectCallNode.parent;\n                const isPresenceAssert = helpers.isPresenceAssert(expectStatement);\n                const isAbsenceAssert = helpers.isAbsenceAssert(expectStatement);\n                if (!isPresenceAssert && !isAbsenceAssert) {\n                    return;\n                }\n                if (presence && isPresenceAssert && !isPresenceQuery) {\n                    context.report({ node, messageId: 'wrongPresenceQuery' });\n                }\n                else if (absence && isAbsenceAssert && isPresenceQuery) {\n                    context.report({ node, messageId: 'wrongAbsenceQuery' });\n                }\n            },\n        };\n    },\n});\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,6BAA6B,GAAGC,OAAO,CAAC,gCAAD,CAA7C;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACAJ,OAAO,CAACE,SAAR,GAAoB,yBAApB;AACAF,OAAO,CAACM,OAAR,GAAkB,CAAC,GAAGH,6BAA6B,CAACI,wBAAlC,EAA4D;EAC1EC,IAAI,EAAER,OAAO,CAACE,SAD4D;EAE1EO,IAAI,EAAE;IACFC,IAAI,EAAE;MACFC,WAAW,EAAE,oFADX;MAEFC,iBAAiB,EAAE;QACfC,GAAG,EAAE,OADU;QAEfC,OAAO,EAAE,OAFM;QAGfC,KAAK,EAAE,OAHQ;QAIfC,GAAG,EAAE,OAJU;QAKfC,KAAK,EAAE;MALQ;IAFjB,CADJ;IAWFC,QAAQ,EAAE;MACNC,kBAAkB,EAAE,6EADd;MAENC,iBAAiB,EAAE;IAFb,CAXR;IAeFC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,QADV;MAEIC,oBAAoB,EAAE,KAF1B;MAGIC,UAAU,EAAE;QACRC,QAAQ,EAAE;UACNH,IAAI,EAAE;QADA,CADF;QAIRI,OAAO,EAAE;UACLJ,IAAI,EAAE;QADD;MAJD;IAHhB,CADI,CAfN;IA6BFA,IAAI,EAAE;EA7BJ,CAFoE;EAiC1EK,cAAc,EAAE,CACZ;IACIF,QAAQ,EAAE,IADd;IAEIC,OAAO,EAAE;EAFb,CADY,CAjC0D;;EAuC1EE,MAAM,CAACC,OAAD,QAAiDC,OAAjD,EAA0D;IAAA,IAAhD,CAAC;MAAEJ,OAAO,GAAG,IAAZ;MAAkBD,QAAQ,GAAG;IAA7B,CAAD,CAAgD;IAC5D,OAAO;MACH,4BAA4BM,IAA5B,EAAkC;QAC9B,MAAMC,cAAc,GAAG,CAAC,GAAG3B,YAAY,CAAC4B,mBAAjB,EAAsCF,IAAtC,EAA4C,QAA5C,CAAvB;;QACA,IAAI,CAACC,cAAD,IAAmB,CAAC,CAAC,GAAG3B,YAAY,CAAC6B,kBAAjB,EAAqCF,cAAc,CAACG,MAApD,CAAxB,EAAqF;UACjF;QACH;;QACD,IAAI,CAACL,OAAO,CAACM,WAAR,CAAoBL,IAApB,CAAL,EAAgC;UAC5B;QACH;;QACD,MAAMM,eAAe,GAAGP,OAAO,CAACQ,iBAAR,CAA0BP,IAA1B,CAAxB;QACA,MAAMQ,eAAe,GAAGP,cAAc,CAACG,MAAvC;QACA,MAAMK,gBAAgB,GAAGV,OAAO,CAACU,gBAAR,CAAyBD,eAAzB,CAAzB;QACA,MAAME,eAAe,GAAGX,OAAO,CAACW,eAAR,CAAwBF,eAAxB,CAAxB;;QACA,IAAI,CAACC,gBAAD,IAAqB,CAACC,eAA1B,EAA2C;UACvC;QACH;;QACD,IAAIhB,QAAQ,IAAIe,gBAAZ,IAAgC,CAACH,eAArC,EAAsD;UAClDR,OAAO,CAACa,MAAR,CAAe;YAAEX,IAAF;YAAQY,SAAS,EAAE;UAAnB,CAAf;QACH,CAFD,MAGK,IAAIjB,OAAO,IAAIe,eAAX,IAA8BJ,eAAlC,EAAmD;UACpDR,OAAO,CAACa,MAAR,CAAe;YAAEX,IAAF;YAAQY,SAAS,EAAE;UAAnB,CAAf;QACH;MACJ;;IAtBE,CAAP;EAwBH;;AAhEyE,CAA5D,CAAlB"},"metadata":{},"sourceType":"script"}