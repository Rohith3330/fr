{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  type: 'string'\n}];\n\nconst create = context => {\n  const pattern = new RegExp(context.options[0] || '^([A-Z][a-z0-9]*)+Type$', 'u');\n\n  const checkType = typeAliasNode => {\n    const typeIdentifierName = typeAliasNode.id.name;\n\n    if (!pattern.test(typeIdentifierName)) {\n      context.report({\n        data: {\n          name: typeIdentifierName,\n          pattern: pattern.toString()\n        },\n        message: 'Type identifier \\'{{name}}\\' does not match pattern \\'{{pattern}}\\'.',\n        node: typeAliasNode\n      });\n    }\n  };\n\n  return {\n    OpaqueType: checkType,\n    TypeAlias: checkType\n  };\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","schema","type","create","context","pattern","RegExp","options","checkType","typeAliasNode","typeIdentifierName","id","name","test","report","data","toString","message","node","OpaqueType","TypeAlias","_default","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/typeIdMatch.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  type: 'string'\n}];\n\nconst create = context => {\n  const pattern = new RegExp(context.options[0] || '^([A-Z][a-z0-9]*)+Type$', 'u');\n\n  const checkType = typeAliasNode => {\n    const typeIdentifierName = typeAliasNode.id.name;\n\n    if (!pattern.test(typeIdentifierName)) {\n      context.report({\n        data: {\n          name: typeIdentifierName,\n          pattern: pattern.toString()\n        },\n        message: 'Type identifier \\'{{name}}\\' does not match pattern \\'{{pattern}}\\'.',\n        node: typeAliasNode\n      });\n    }\n  };\n\n  return {\n    OpaqueType: checkType,\n    TypeAlias: checkType\n  };\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,MAAM,GAAG,CAAC;EACdC,IAAI,EAAE;AADQ,CAAD,CAAf;;AAIA,MAAMC,MAAM,GAAGC,OAAO,IAAI;EACxB,MAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAWF,OAAO,CAACG,OAAR,CAAgB,CAAhB,KAAsB,yBAAjC,EAA4D,GAA5D,CAAhB;;EAEA,MAAMC,SAAS,GAAGC,aAAa,IAAI;IACjC,MAAMC,kBAAkB,GAAGD,aAAa,CAACE,EAAd,CAAiBC,IAA5C;;IAEA,IAAI,CAACP,OAAO,CAACQ,IAAR,CAAaH,kBAAb,CAAL,EAAuC;MACrCN,OAAO,CAACU,MAAR,CAAe;QACbC,IAAI,EAAE;UACJH,IAAI,EAAEF,kBADF;UAEJL,OAAO,EAAEA,OAAO,CAACW,QAAR;QAFL,CADO;QAKbC,OAAO,EAAE,sEALI;QAMbC,IAAI,EAAET;MANO,CAAf;IAQD;EACF,CAbD;;EAeA,OAAO;IACLU,UAAU,EAAEX,SADP;IAELY,SAAS,EAAEZ;EAFN,CAAP;AAID,CAtBD;;AAwBA,IAAIa,QAAQ,GAAG;EACblB,MADa;EAEbF;AAFa,CAAf;AAIAH,OAAO,CAACE,OAAR,GAAkBqB,QAAlB;AACAC,MAAM,CAACxB,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}