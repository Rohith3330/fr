{"ast":null,"code":"/**\n * @fileoverview Rule to flag the generator functions that does not have yield.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Require generator functions to contain `yield`\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/require-yield\"\n    },\n    schema: [],\n    messages: {\n      missingYield: \"This generator function does not have 'yield'.\"\n    }\n  },\n\n  create(context) {\n    const stack = [];\n    /**\n     * If the node is a generator function, start counting `yield` keywords.\n     * @param {Node} node A function node to check.\n     * @returns {void}\n     */\n\n    function beginChecking(node) {\n      if (node.generator) {\n        stack.push(0);\n      }\n    }\n    /**\n     * If the node is a generator function, end counting `yield` keywords, then\n     * reports result.\n     * @param {Node} node A function node to check.\n     * @returns {void}\n     */\n\n\n    function endChecking(node) {\n      if (!node.generator) {\n        return;\n      }\n\n      const countYield = stack.pop();\n\n      if (countYield === 0 && node.body.body.length > 0) {\n        context.report({\n          node,\n          messageId: \"missingYield\"\n        });\n      }\n    }\n\n    return {\n      FunctionDeclaration: beginChecking,\n      \"FunctionDeclaration:exit\": endChecking,\n      FunctionExpression: beginChecking,\n      \"FunctionExpression:exit\": endChecking,\n\n      // Increases the count of `yield` keyword.\n      YieldExpression() {\n        if (stack.length > 0) {\n          stack[stack.length - 1] += 1;\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","missingYield","create","context","stack","beginChecking","node","generator","push","endChecking","countYield","pop","body","length","report","messageId","FunctionDeclaration","FunctionExpression","YieldExpression"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/require-yield.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag the generator functions that does not have yield.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Require generator functions to contain `yield`\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/require-yield\"\n        },\n\n        schema: [],\n\n        messages: {\n            missingYield: \"This generator function does not have 'yield'.\"\n        }\n    },\n\n    create(context) {\n        const stack = [];\n\n        /**\n         * If the node is a generator function, start counting `yield` keywords.\n         * @param {Node} node A function node to check.\n         * @returns {void}\n         */\n        function beginChecking(node) {\n            if (node.generator) {\n                stack.push(0);\n            }\n        }\n\n        /**\n         * If the node is a generator function, end counting `yield` keywords, then\n         * reports result.\n         * @param {Node} node A function node to check.\n         * @returns {void}\n         */\n        function endChecking(node) {\n            if (!node.generator) {\n                return;\n            }\n\n            const countYield = stack.pop();\n\n            if (countYield === 0 && node.body.body.length > 0) {\n                context.report({ node, messageId: \"missingYield\" });\n            }\n        }\n\n        return {\n            FunctionDeclaration: beginChecking,\n            \"FunctionDeclaration:exit\": endChecking,\n            FunctionExpression: beginChecking,\n            \"FunctionExpression:exit\": endChecking,\n\n            // Increases the count of `yield` keyword.\n            YieldExpression() {\n\n                if (stack.length > 0) {\n                    stack[stack.length - 1] += 1;\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,gDADX;MAEFC,WAAW,EAAE,IAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAWFC,QAAQ,EAAE;MACNC,YAAY,EAAE;IADR;EAXR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,KAAK,GAAG,EAAd;IAEA;AACR;AACA;AACA;AACA;;IACQ,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;MACzB,IAAIA,IAAI,CAACC,SAAT,EAAoB;QAChBH,KAAK,CAACI,IAAN,CAAW,CAAX;MACH;IACJ;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAASC,WAAT,CAAqBH,IAArB,EAA2B;MACvB,IAAI,CAACA,IAAI,CAACC,SAAV,EAAqB;QACjB;MACH;;MAED,MAAMG,UAAU,GAAGN,KAAK,CAACO,GAAN,EAAnB;;MAEA,IAAID,UAAU,KAAK,CAAf,IAAoBJ,IAAI,CAACM,IAAL,CAAUA,IAAV,CAAeC,MAAf,GAAwB,CAAhD,EAAmD;QAC/CV,OAAO,CAACW,MAAR,CAAe;UAAER,IAAF;UAAQS,SAAS,EAAE;QAAnB,CAAf;MACH;IACJ;;IAED,OAAO;MACHC,mBAAmB,EAAEX,aADlB;MAEH,4BAA4BI,WAFzB;MAGHQ,kBAAkB,EAAEZ,aAHjB;MAIH,2BAA2BI,WAJxB;;MAMH;MACAS,eAAe,GAAG;QAEd,IAAId,KAAK,CAACS,MAAN,GAAe,CAAnB,EAAsB;UAClBT,KAAK,CAACA,KAAK,CAACS,MAAN,GAAe,CAAhB,CAAL,IAA2B,CAA3B;QACH;MACJ;;IAZE,CAAP;EAcH;;AA/DY,CAAjB"},"metadata":{},"sourceType":"script"}