{"ast":null,"code":"'use strict';\n\nvar isGlob = require('is-glob');\n\nvar pathPosixDirname = require('path').posix.dirname;\n\nvar isWin32 = require('os').platform() === 'win32';\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar escaped = /\\\\([!*?|[\\](){}])/g;\n/**\n * @param {string} str\n * @param {Object} opts\n * @param {boolean} [opts.flipBackslashes=true]\n */\n\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({\n    flipBackslashes: true\n  }, opts); // flip windows path separators\n\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  } // special case for strings ending in enclosure containing path separator\n\n\n  if (isEnclosure(str)) {\n    str += slash;\n  } // preserves full path in case of trailing path separator\n\n\n  str += 'a'; // remove path parts that are globby\n\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlobby(str)); // remove escape chars and return result\n\n\n  return str.replace(escaped, '$1');\n};\n\nfunction isEnclosure(str) {\n  var lastChar = str.slice(-1);\n  var enclosureStart;\n\n  switch (lastChar) {\n    case '}':\n      enclosureStart = '{';\n      break;\n\n    case ']':\n      enclosureStart = '[';\n      break;\n\n    default:\n      return false;\n  }\n\n  var foundIndex = str.indexOf(enclosureStart);\n\n  if (foundIndex < 0) {\n    return false;\n  }\n\n  return str.slice(foundIndex + 1, -1).includes(slash);\n}\n\nfunction isGlobby(str) {\n  if (/\\([^()]+$/.test(str)) {\n    return true;\n  }\n\n  if (str[0] === '{' || str[0] === '[') {\n    return true;\n  }\n\n  if (/[^\\\\][{[]/.test(str)) {\n    return true;\n  }\n\n  return isGlob(str);\n}","map":{"version":3,"names":["isGlob","require","pathPosixDirname","posix","dirname","isWin32","platform","slash","backslash","escaped","module","exports","globParent","str","opts","options","Object","assign","flipBackslashes","indexOf","replace","isEnclosure","isGlobby","lastChar","slice","enclosureStart","foundIndex","includes","test"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/glob-parent/index.js"],"sourcesContent":["'use strict';\n\nvar isGlob = require('is-glob');\nvar pathPosixDirname = require('path').posix.dirname;\nvar isWin32 = require('os').platform() === 'win32';\n\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar escaped = /\\\\([!*?|[\\](){}])/g;\n\n/**\n * @param {string} str\n * @param {Object} opts\n * @param {boolean} [opts.flipBackslashes=true]\n */\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({ flipBackslashes: true }, opts);\n\n  // flip windows path separators\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  }\n\n  // special case for strings ending in enclosure containing path separator\n  if (isEnclosure(str)) {\n    str += slash;\n  }\n\n  // preserves full path in case of trailing path separator\n  str += 'a';\n\n  // remove path parts that are globby\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlobby(str));\n\n  // remove escape chars and return result\n  return str.replace(escaped, '$1');\n};\n\nfunction isEnclosure(str) {\n  var lastChar = str.slice(-1);\n\n  var enclosureStart;\n  switch (lastChar) {\n    case '}':\n      enclosureStart = '{';\n      break;\n    case ']':\n      enclosureStart = '[';\n      break;\n    default:\n      return false;\n  }\n\n  var foundIndex = str.indexOf(enclosureStart);\n  if (foundIndex < 0) {\n    return false;\n  }\n\n  return str.slice(foundIndex + 1, -1).includes(slash);\n}\n\nfunction isGlobby(str) {\n  if (/\\([^()]+$/.test(str)) {\n    return true;\n  }\n  if (str[0] === '{' || str[0] === '[') {\n    return true;\n  }\n  if (/[^\\\\][{[]/.test(str)) {\n    return true;\n  }\n  return isGlob(str);\n}\n"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,MAAD,CAAP,CAAgBE,KAAhB,CAAsBC,OAA7C;;AACA,IAAIC,OAAO,GAAGJ,OAAO,CAAC,IAAD,CAAP,CAAcK,QAAd,OAA6B,OAA3C;AAEA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,SAAS,GAAG,KAAhB;AACA,IAAIC,OAAO,GAAG,oBAAd;AAEA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;EAC9C,IAAIC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;IAAEC,eAAe,EAAE;EAAnB,CAAd,EAAyCJ,IAAzC,CAAd,CAD8C,CAG9C;;EACA,IAAIC,OAAO,CAACG,eAAR,IAA2Bb,OAA3B,IAAsCQ,GAAG,CAACM,OAAJ,CAAYZ,KAAZ,IAAqB,CAA/D,EAAkE;IAChEM,GAAG,GAAGA,GAAG,CAACO,OAAJ,CAAYZ,SAAZ,EAAuBD,KAAvB,CAAN;EACD,CAN6C,CAQ9C;;;EACA,IAAIc,WAAW,CAACR,GAAD,CAAf,EAAsB;IACpBA,GAAG,IAAIN,KAAP;EACD,CAX6C,CAa9C;;;EACAM,GAAG,IAAI,GAAP,CAd8C,CAgB9C;;EACA,GAAG;IACDA,GAAG,GAAGX,gBAAgB,CAACW,GAAD,CAAtB;EACD,CAFD,QAESS,QAAQ,CAACT,GAAD,CAFjB,EAjB8C,CAqB9C;;;EACA,OAAOA,GAAG,CAACO,OAAJ,CAAYX,OAAZ,EAAqB,IAArB,CAAP;AACD,CAvBD;;AAyBA,SAASY,WAAT,CAAqBR,GAArB,EAA0B;EACxB,IAAIU,QAAQ,GAAGV,GAAG,CAACW,KAAJ,CAAU,CAAC,CAAX,CAAf;EAEA,IAAIC,cAAJ;;EACA,QAAQF,QAAR;IACE,KAAK,GAAL;MACEE,cAAc,GAAG,GAAjB;MACA;;IACF,KAAK,GAAL;MACEA,cAAc,GAAG,GAAjB;MACA;;IACF;MACE,OAAO,KAAP;EARJ;;EAWA,IAAIC,UAAU,GAAGb,GAAG,CAACM,OAAJ,CAAYM,cAAZ,CAAjB;;EACA,IAAIC,UAAU,GAAG,CAAjB,EAAoB;IAClB,OAAO,KAAP;EACD;;EAED,OAAOb,GAAG,CAACW,KAAJ,CAAUE,UAAU,GAAG,CAAvB,EAA0B,CAAC,CAA3B,EAA8BC,QAA9B,CAAuCpB,KAAvC,CAAP;AACD;;AAED,SAASe,QAAT,CAAkBT,GAAlB,EAAuB;EACrB,IAAI,YAAYe,IAAZ,CAAiBf,GAAjB,CAAJ,EAA2B;IACzB,OAAO,IAAP;EACD;;EACD,IAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAX,IAAkBA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAjC,EAAsC;IACpC,OAAO,IAAP;EACD;;EACD,IAAI,YAAYe,IAAZ,CAAiBf,GAAjB,CAAJ,EAA2B;IACzB,OAAO,IAAP;EACD;;EACD,OAAOb,MAAM,CAACa,GAAD,CAAb;AACD"},"metadata":{},"sourceType":"script"}