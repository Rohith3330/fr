{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Creates a deep copy of a process coverage.\n *\n * @param processCov Process coverage to clone.\n * @return Cloned process coverage.\n */\n\nfunction cloneProcessCov(processCov) {\n  const result = [];\n\n  for (const scriptCov of processCov.result) {\n    result.push(cloneScriptCov(scriptCov));\n  }\n\n  return {\n    result\n  };\n}\n\nexports.cloneProcessCov = cloneProcessCov;\n/**\n * Creates a deep copy of a script coverage.\n *\n * @param scriptCov Script coverage to clone.\n * @return Cloned script coverage.\n */\n\nfunction cloneScriptCov(scriptCov) {\n  const functions = [];\n\n  for (const functionCov of scriptCov.functions) {\n    functions.push(cloneFunctionCov(functionCov));\n  }\n\n  return {\n    scriptId: scriptCov.scriptId,\n    url: scriptCov.url,\n    functions\n  };\n}\n\nexports.cloneScriptCov = cloneScriptCov;\n/**\n * Creates a deep copy of a function coverage.\n *\n * @param functionCov Function coverage to clone.\n * @return Cloned function coverage.\n */\n\nfunction cloneFunctionCov(functionCov) {\n  const ranges = [];\n\n  for (const rangeCov of functionCov.ranges) {\n    ranges.push(cloneRangeCov(rangeCov));\n  }\n\n  return {\n    functionName: functionCov.functionName,\n    ranges,\n    isBlockCoverage: functionCov.isBlockCoverage\n  };\n}\n\nexports.cloneFunctionCov = cloneFunctionCov;\n/**\n * Creates a deep copy of a function coverage.\n *\n * @param rangeCov Range coverage to clone.\n * @return Cloned range coverage.\n */\n\nfunction cloneRangeCov(rangeCov) {\n  return {\n    startOffset: rangeCov.startOffset,\n    endOffset: rangeCov.endOffset,\n    count: rangeCov.count\n  };\n}\n\nexports.cloneRangeCov = cloneRangeCov;","map":{"version":3,"mappings":";;;;;AAEA;;;;;;;AAMA,SAAgBA,eAAhB,CAAgCC,UAAhC,EAAgE;EAC9D,MAAMC,MAAM,GAAgB,EAA5B;;EACA,KAAK,MAAMC,SAAX,IAAwBF,UAAU,CAACC,MAAnC,EAA2C;IACzCA,MAAM,CAACE,IAAP,CAAYC,cAAc,CAACF,SAAD,CAA1B;EACD;;EAED,OAAO;IACLD;EADK,CAAP;AAGD;;AATDI;AAWA;;;;;;;AAMA,SAAgBD,cAAhB,CAA+BF,SAA/B,EAA6D;EAC3D,MAAMI,SAAS,GAAkB,EAAjC;;EACA,KAAK,MAAMC,WAAX,IAA0BL,SAAS,CAACI,SAApC,EAA+C;IAC7CA,SAAS,CAACH,IAAV,CAAeK,gBAAgB,CAACD,WAAD,CAA/B;EACD;;EAED,OAAO;IACLE,QAAQ,EAAEP,SAAS,CAACO,QADf;IAELC,GAAG,EAAER,SAAS,CAACQ,GAFV;IAGLJ;EAHK,CAAP;AAKD;;AAXDD;AAaA;;;;;;;AAMA,SAAgBG,gBAAhB,CAAiCD,WAAjC,EAAmE;EACjE,MAAMI,MAAM,GAAe,EAA3B;;EACA,KAAK,MAAMC,QAAX,IAAuBL,WAAW,CAACI,MAAnC,EAA2C;IACzCA,MAAM,CAACR,IAAP,CAAYU,aAAa,CAACD,QAAD,CAAzB;EACD;;EAED,OAAO;IACLE,YAAY,EAAEP,WAAW,CAACO,YADrB;IAELH,MAFK;IAGLI,eAAe,EAAER,WAAW,CAACQ;EAHxB,CAAP;AAKD;;AAXDV;AAaA;;;;;;;AAMA,SAAgBQ,aAAhB,CAA8BD,QAA9B,EAA0D;EACxD,OAAO;IACLI,WAAW,EAAEJ,QAAQ,CAACI,WADjB;IAELC,SAAS,EAAEL,QAAQ,CAACK,SAFf;IAGLC,KAAK,EAAEN,QAAQ,CAACM;EAHX,CAAP;AAKD;;AANDb","names":["cloneProcessCov","processCov","result","scriptCov","push","cloneScriptCov","exports","functions","functionCov","cloneFunctionCov","scriptId","url","ranges","rangeCov","cloneRangeCov","functionName","isBlockCoverage","startOffset","endOffset","count"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\_src\\clone.ts"],"sourcesContent":["import { FunctionCov, ProcessCov, RangeCov, ScriptCov } from \"./types\";\n\n/**\n * Creates a deep copy of a process coverage.\n *\n * @param processCov Process coverage to clone.\n * @return Cloned process coverage.\n */\nexport function cloneProcessCov(processCov: Readonly<ProcessCov>): ProcessCov {\n  const result: ScriptCov[] = [];\n  for (const scriptCov of processCov.result) {\n    result.push(cloneScriptCov(scriptCov));\n  }\n\n  return {\n    result,\n  };\n}\n\n/**\n * Creates a deep copy of a script coverage.\n *\n * @param scriptCov Script coverage to clone.\n * @return Cloned script coverage.\n */\nexport function cloneScriptCov(scriptCov: Readonly<ScriptCov>): ScriptCov {\n  const functions: FunctionCov[] = [];\n  for (const functionCov of scriptCov.functions) {\n    functions.push(cloneFunctionCov(functionCov));\n  }\n\n  return {\n    scriptId: scriptCov.scriptId,\n    url: scriptCov.url,\n    functions,\n  };\n}\n\n/**\n * Creates a deep copy of a function coverage.\n *\n * @param functionCov Function coverage to clone.\n * @return Cloned function coverage.\n */\nexport function cloneFunctionCov(functionCov: Readonly<FunctionCov>): FunctionCov {\n  const ranges: RangeCov[] = [];\n  for (const rangeCov of functionCov.ranges) {\n    ranges.push(cloneRangeCov(rangeCov));\n  }\n\n  return {\n    functionName: functionCov.functionName,\n    ranges,\n    isBlockCoverage: functionCov.isBlockCoverage,\n  };\n}\n\n/**\n * Creates a deep copy of a function coverage.\n *\n * @param rangeCov Range coverage to clone.\n * @return Cloned range coverage.\n */\nexport function cloneRangeCov(rangeCov: Readonly<RangeCov>): RangeCov {\n  return {\n    startOffset: rangeCov.startOffset,\n    endOffset: rangeCov.endOffset,\n    count: rangeCov.count,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}