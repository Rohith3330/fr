{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeErrorParams = exports.typeErrorMessage = exports.typeError = void 0;\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nfunction typeError(t) {\n  return {\n    message: cxt => typeErrorMessage(cxt, t),\n    params: cxt => typeErrorParams(cxt, t)\n  };\n}\n\nexports.typeError = typeError;\n\nfunction typeErrorMessage(_ref, t) {\n  let {\n    parentSchema\n  } = _ref;\n  return (parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.nullable) ? `must be ${t} or null` : `must be ${t}`;\n}\n\nexports.typeErrorMessage = typeErrorMessage;\n\nfunction typeErrorParams(_ref2, t) {\n  let {\n    parentSchema\n  } = _ref2;\n  return (0, codegen_1._)`{type: ${t}, nullable: ${!!(parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.nullable)}}`;\n}\n\nexports.typeErrorParams = typeErrorParams;","map":{"version":3,"mappings":";;;;;;;AACA;;AAQA,SAAgBA,SAAhB,CAA0BC,CAA1B,EAAmC;EACjC,OAAO;IACLC,OAAO,EAAGC,GAAD,IAASC,gBAAgB,CAACD,GAAD,EAAMF,CAAN,CAD7B;IAELI,MAAM,EAAGF,GAAD,IAASG,eAAe,CAACH,GAAD,EAAMF,CAAN;EAF3B,CAAP;AAID;;AALDM;;AAOA,SAAgBH,gBAAhB,OAAkEH,CAAlE,EAA2E;EAAA,IAA1C;IAACO;EAAD,CAA0C;EACzE,OAAO,aAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEC,QAAd,IAAyB,WAAWR,CAAC,UAArC,GAAkD,WAAWA,CAAC,EAArE;AACD;;AAFDM;;AAIA,SAAgBD,eAAhB,QAAiEL,CAAjE,EAA0E;EAAA,IAA1C;IAACO;EAAD,CAA0C;EACxE,OAAO,gBAAC,UAAUP,CAAC,eAAe,CAAC,EAACO,YAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEC,QAAf,CAAuB,GAA1D;AACD;;AAFDF","names":["typeError","t","message","cxt","typeErrorMessage","params","typeErrorParams","exports","parentSchema","nullable"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\vocabularies\\jtd\\error.ts"],"sourcesContent":["import type {KeywordErrorDefinition, KeywordErrorCxt, ErrorObject} from \"../../types\"\nimport {_, Code} from \"../../compile/codegen\"\n\nexport type _JTDTypeError<K extends string, T extends string, S> = ErrorObject<\n  K,\n  {type: T; nullable: boolean},\n  S\n>\n\nexport function typeError(t: string): KeywordErrorDefinition {\n  return {\n    message: (cxt) => typeErrorMessage(cxt, t),\n    params: (cxt) => typeErrorParams(cxt, t),\n  }\n}\n\nexport function typeErrorMessage({parentSchema}: KeywordErrorCxt, t: string): string {\n  return parentSchema?.nullable ? `must be ${t} or null` : `must be ${t}`\n}\n\nexport function typeErrorParams({parentSchema}: KeywordErrorCxt, t: string): Code {\n  return _`{type: ${t}, nullable: ${!!parentSchema?.nullable}}`\n}\n"]},"metadata":{},"sourceType":"script"}