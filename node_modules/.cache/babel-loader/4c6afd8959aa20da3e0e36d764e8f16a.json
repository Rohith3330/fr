{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RULE_NAME = void 0;\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\n\nconst node_utils_1 = require(\"../node-utils\");\n\nexports.RULE_NAME = 'no-global-regexp-flag-in-query';\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n  name: exports.RULE_NAME,\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow the use of the global RegExp flag (/g) in queries',\n      recommendedConfig: {\n        dom: false,\n        angular: false,\n        react: false,\n        vue: false,\n        marko: false\n      }\n    },\n    messages: {\n      noGlobalRegExpFlagInQuery: 'Avoid using the global RegExp flag (/g) in queries'\n    },\n    fixable: 'code',\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context, _, helpers) {\n    function report(literalNode) {\n      if ((0, node_utils_1.isLiteral)(literalNode) && 'regex' in literalNode && literalNode.regex.flags.includes('g')) {\n        context.report({\n          node: literalNode,\n          messageId: 'noGlobalRegExpFlagInQuery',\n\n          fix(fixer) {\n            const splitter = literalNode.raw.lastIndexOf('/');\n            const raw = literalNode.raw.substring(0, splitter);\n            const flags = literalNode.raw.substring(splitter + 1);\n            const flagsWithoutGlobal = flags.replace('g', '');\n            return fixer.replaceText(literalNode, `${raw}/${flagsWithoutGlobal}`);\n          }\n\n        });\n        return true;\n      }\n\n      return false;\n    }\n\n    function getArguments(identifierNode) {\n      if ((0, node_utils_1.isCallExpression)(identifierNode.parent)) {\n        return identifierNode.parent.arguments;\n      } else if ((0, node_utils_1.isMemberExpression)(identifierNode.parent) && (0, node_utils_1.isCallExpression)(identifierNode.parent.parent)) {\n        return identifierNode.parent.parent.arguments;\n      }\n\n      return [];\n    }\n\n    return {\n      CallExpression(node) {\n        const identifierNode = (0, node_utils_1.getDeepestIdentifierNode)(node);\n\n        if (!identifierNode || !helpers.isQuery(identifierNode)) {\n          return;\n        }\n\n        const [firstArg, secondArg] = getArguments(identifierNode);\n        const firstArgumentHasError = report(firstArg);\n\n        if (firstArgumentHasError) {\n          return;\n        }\n\n        if ((0, node_utils_1.isObjectExpression)(secondArg)) {\n          const namePropertyNode = secondArg.properties.find(p => (0, node_utils_1.isProperty)(p) && utils_1.ASTUtils.isIdentifier(p.key) && p.key.name === 'name' && (0, node_utils_1.isLiteral)(p.value));\n\n          if (namePropertyNode) {\n            report(namePropertyNode.value);\n          }\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","RULE_NAME","utils_1","require","create_testing_library_rule_1","node_utils_1","default","createTestingLibraryRule","name","meta","type","docs","description","recommendedConfig","dom","angular","react","vue","marko","messages","noGlobalRegExpFlagInQuery","fixable","schema","defaultOptions","create","context","_","helpers","report","literalNode","isLiteral","regex","flags","includes","node","messageId","fix","fixer","splitter","raw","lastIndexOf","substring","flagsWithoutGlobal","replace","replaceText","getArguments","identifierNode","isCallExpression","parent","arguments","isMemberExpression","CallExpression","getDeepestIdentifierNode","isQuery","firstArg","secondArg","firstArgumentHasError","isObjectExpression","namePropertyNode","properties","find","p","isProperty","ASTUtils","isIdentifier","key"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-testing-library/rules/no-global-regexp-flag-in-query.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RULE_NAME = void 0;\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\nconst node_utils_1 = require(\"../node-utils\");\nexports.RULE_NAME = 'no-global-regexp-flag-in-query';\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n    name: exports.RULE_NAME,\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow the use of the global RegExp flag (/g) in queries',\n            recommendedConfig: {\n                dom: false,\n                angular: false,\n                react: false,\n                vue: false,\n                marko: false,\n            },\n        },\n        messages: {\n            noGlobalRegExpFlagInQuery: 'Avoid using the global RegExp flag (/g) in queries',\n        },\n        fixable: 'code',\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context, _, helpers) {\n        function report(literalNode) {\n            if ((0, node_utils_1.isLiteral)(literalNode) &&\n                'regex' in literalNode &&\n                literalNode.regex.flags.includes('g')) {\n                context.report({\n                    node: literalNode,\n                    messageId: 'noGlobalRegExpFlagInQuery',\n                    fix(fixer) {\n                        const splitter = literalNode.raw.lastIndexOf('/');\n                        const raw = literalNode.raw.substring(0, splitter);\n                        const flags = literalNode.raw.substring(splitter + 1);\n                        const flagsWithoutGlobal = flags.replace('g', '');\n                        return fixer.replaceText(literalNode, `${raw}/${flagsWithoutGlobal}`);\n                    },\n                });\n                return true;\n            }\n            return false;\n        }\n        function getArguments(identifierNode) {\n            if ((0, node_utils_1.isCallExpression)(identifierNode.parent)) {\n                return identifierNode.parent.arguments;\n            }\n            else if ((0, node_utils_1.isMemberExpression)(identifierNode.parent) &&\n                (0, node_utils_1.isCallExpression)(identifierNode.parent.parent)) {\n                return identifierNode.parent.parent.arguments;\n            }\n            return [];\n        }\n        return {\n            CallExpression(node) {\n                const identifierNode = (0, node_utils_1.getDeepestIdentifierNode)(node);\n                if (!identifierNode || !helpers.isQuery(identifierNode)) {\n                    return;\n                }\n                const [firstArg, secondArg] = getArguments(identifierNode);\n                const firstArgumentHasError = report(firstArg);\n                if (firstArgumentHasError) {\n                    return;\n                }\n                if ((0, node_utils_1.isObjectExpression)(secondArg)) {\n                    const namePropertyNode = secondArg.properties.find((p) => (0, node_utils_1.isProperty)(p) &&\n                        utils_1.ASTUtils.isIdentifier(p.key) &&\n                        p.key.name === 'name' &&\n                        (0, node_utils_1.isLiteral)(p.value));\n                    if (namePropertyNode) {\n                        report(namePropertyNode.value);\n                    }\n                }\n            },\n        };\n    },\n});\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,0BAAD,CAAvB;;AACA,MAAMC,6BAA6B,GAAGD,OAAO,CAAC,gCAAD,CAA7C;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA5B;;AACAJ,OAAO,CAACE,SAAR,GAAoB,gCAApB;AACAF,OAAO,CAACO,OAAR,GAAkB,CAAC,GAAGF,6BAA6B,CAACG,wBAAlC,EAA4D;EAC1EC,IAAI,EAAET,OAAO,CAACE,SAD4D;EAE1EQ,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAEFC,IAAI,EAAE;MACFC,WAAW,EAAE,4DADX;MAEFC,iBAAiB,EAAE;QACfC,GAAG,EAAE,KADU;QAEfC,OAAO,EAAE,KAFM;QAGfC,KAAK,EAAE,KAHQ;QAIfC,GAAG,EAAE,KAJU;QAKfC,KAAK,EAAE;MALQ;IAFjB,CAFJ;IAYFC,QAAQ,EAAE;MACNC,yBAAyB,EAAE;IADrB,CAZR;IAeFC,OAAO,EAAE,MAfP;IAgBFC,MAAM,EAAE;EAhBN,CAFoE;EAoB1EC,cAAc,EAAE,EApB0D;;EAqB1EC,MAAM,CAACC,OAAD,EAAUC,CAAV,EAAaC,OAAb,EAAsB;IACxB,SAASC,MAAT,CAAgBC,WAAhB,EAA6B;MACzB,IAAI,CAAC,GAAGxB,YAAY,CAACyB,SAAjB,EAA4BD,WAA5B,KACA,WAAWA,WADX,IAEAA,WAAW,CAACE,KAAZ,CAAkBC,KAAlB,CAAwBC,QAAxB,CAAiC,GAAjC,CAFJ,EAE2C;QACvCR,OAAO,CAACG,MAAR,CAAe;UACXM,IAAI,EAAEL,WADK;UAEXM,SAAS,EAAE,2BAFA;;UAGXC,GAAG,CAACC,KAAD,EAAQ;YACP,MAAMC,QAAQ,GAAGT,WAAW,CAACU,GAAZ,CAAgBC,WAAhB,CAA4B,GAA5B,CAAjB;YACA,MAAMD,GAAG,GAAGV,WAAW,CAACU,GAAZ,CAAgBE,SAAhB,CAA0B,CAA1B,EAA6BH,QAA7B,CAAZ;YACA,MAAMN,KAAK,GAAGH,WAAW,CAACU,GAAZ,CAAgBE,SAAhB,CAA0BH,QAAQ,GAAG,CAArC,CAAd;YACA,MAAMI,kBAAkB,GAAGV,KAAK,CAACW,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAA3B;YACA,OAAON,KAAK,CAACO,WAAN,CAAkBf,WAAlB,EAAgC,GAAEU,GAAI,IAAGG,kBAAmB,EAA5D,CAAP;UACH;;QATU,CAAf;QAWA,OAAO,IAAP;MACH;;MACD,OAAO,KAAP;IACH;;IACD,SAASG,YAAT,CAAsBC,cAAtB,EAAsC;MAClC,IAAI,CAAC,GAAGzC,YAAY,CAAC0C,gBAAjB,EAAmCD,cAAc,CAACE,MAAlD,CAAJ,EAA+D;QAC3D,OAAOF,cAAc,CAACE,MAAf,CAAsBC,SAA7B;MACH,CAFD,MAGK,IAAI,CAAC,GAAG5C,YAAY,CAAC6C,kBAAjB,EAAqCJ,cAAc,CAACE,MAApD,KACL,CAAC,GAAG3C,YAAY,CAAC0C,gBAAjB,EAAmCD,cAAc,CAACE,MAAf,CAAsBA,MAAzD,CADC,EACiE;QAClE,OAAOF,cAAc,CAACE,MAAf,CAAsBA,MAAtB,CAA6BC,SAApC;MACH;;MACD,OAAO,EAAP;IACH;;IACD,OAAO;MACHE,cAAc,CAACjB,IAAD,EAAO;QACjB,MAAMY,cAAc,GAAG,CAAC,GAAGzC,YAAY,CAAC+C,wBAAjB,EAA2ClB,IAA3C,CAAvB;;QACA,IAAI,CAACY,cAAD,IAAmB,CAACnB,OAAO,CAAC0B,OAAR,CAAgBP,cAAhB,CAAxB,EAAyD;UACrD;QACH;;QACD,MAAM,CAACQ,QAAD,EAAWC,SAAX,IAAwBV,YAAY,CAACC,cAAD,CAA1C;QACA,MAAMU,qBAAqB,GAAG5B,MAAM,CAAC0B,QAAD,CAApC;;QACA,IAAIE,qBAAJ,EAA2B;UACvB;QACH;;QACD,IAAI,CAAC,GAAGnD,YAAY,CAACoD,kBAAjB,EAAqCF,SAArC,CAAJ,EAAqD;UACjD,MAAMG,gBAAgB,GAAGH,SAAS,CAACI,UAAV,CAAqBC,IAArB,CAA2BC,CAAD,IAAO,CAAC,GAAGxD,YAAY,CAACyD,UAAjB,EAA6BD,CAA7B,KACtD3D,OAAO,CAAC6D,QAAR,CAAiBC,YAAjB,CAA8BH,CAAC,CAACI,GAAhC,CADsD,IAEtDJ,CAAC,CAACI,GAAF,CAAMzD,IAAN,KAAe,MAFuC,IAGtD,CAAC,GAAGH,YAAY,CAACyB,SAAjB,EAA4B+B,CAAC,CAAC7D,KAA9B,CAHqB,CAAzB;;UAIA,IAAI0D,gBAAJ,EAAsB;YAClB9B,MAAM,CAAC8B,gBAAgB,CAAC1D,KAAlB,CAAN;UACH;QACJ;MACJ;;IApBE,CAAP;EAsBH;;AAzEyE,CAA5D,CAAlB"},"metadata":{},"sourceType":"script"}