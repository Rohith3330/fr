{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util_1 = require(\"../util\");\n\nexports.default = (0, util_1.createRule)({\n  name: 'consistent-indexed-object-style',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Require or disallow the `Record` type',\n      recommended: 'strict'\n    },\n    messages: {\n      preferRecord: 'A record is preferred over an index signature.',\n      preferIndexSignature: 'An index signature is preferred over a record.'\n    },\n    fixable: 'code',\n    schema: [{\n      enum: ['record', 'index-signature']\n    }]\n  },\n  defaultOptions: ['record'],\n\n  create(context, _ref) {\n    let [mode] = _ref;\n    const sourceCode = context.getSourceCode();\n\n    function checkMembers(members, node, parentId, prefix, postfix) {\n      let safeFix = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n\n      if (members.length !== 1) {\n        return;\n      }\n\n      const [member] = members;\n\n      if (member.type !== utils_1.AST_NODE_TYPES.TSIndexSignature) {\n        return;\n      }\n\n      const [parameter] = member.parameters;\n\n      if (!parameter) {\n        return;\n      }\n\n      if (parameter.type !== utils_1.AST_NODE_TYPES.Identifier) {\n        return;\n      }\n\n      const keyType = parameter.typeAnnotation;\n\n      if (!keyType) {\n        return;\n      }\n\n      const valueType = member.typeAnnotation;\n\n      if (!valueType) {\n        return;\n      }\n\n      if (parentId) {\n        const scope = context.getScope();\n        const superVar = scope.set.get(parentId.name);\n\n        if (superVar) {\n          const isCircular = superVar.references.some(item => item.isTypeReference && node.range[0] <= item.identifier.range[0] && node.range[1] >= item.identifier.range[1]);\n\n          if (isCircular) {\n            return;\n          }\n        }\n      }\n\n      context.report({\n        node,\n        messageId: 'preferRecord',\n        fix: safeFix ? fixer => {\n          const key = sourceCode.getText(keyType.typeAnnotation);\n          const value = sourceCode.getText(valueType.typeAnnotation);\n          const record = member.readonly ? `Readonly<Record<${key}, ${value}>>` : `Record<${key}, ${value}>`;\n          return fixer.replaceText(node, `${prefix}${record}${postfix}`);\n        } : null\n      });\n    }\n\n    return Object.assign(Object.assign({}, mode === 'index-signature' && {\n      TSTypeReference(node) {\n        var _a;\n\n        const typeName = node.typeName;\n\n        if (typeName.type !== utils_1.AST_NODE_TYPES.Identifier) {\n          return;\n        }\n\n        if (typeName.name !== 'Record') {\n          return;\n        }\n\n        const params = (_a = node.typeParameters) === null || _a === void 0 ? void 0 : _a.params;\n\n        if ((params === null || params === void 0 ? void 0 : params.length) !== 2) {\n          return;\n        }\n\n        context.report({\n          node,\n          messageId: 'preferIndexSignature',\n\n          fix(fixer) {\n            const key = sourceCode.getText(params[0]);\n            const type = sourceCode.getText(params[1]);\n            return fixer.replaceText(node, `{ [key: ${key}]: ${type} }`);\n          }\n\n        });\n      }\n\n    }), mode === 'record' && {\n      TSTypeLiteral(node) {\n        const parent = findParentDeclaration(node);\n        checkMembers(node.members, node, parent === null || parent === void 0 ? void 0 : parent.id, '', '');\n      },\n\n      TSInterfaceDeclaration(node) {\n        var _a, _b, _c, _d;\n\n        let genericTypes = '';\n\n        if (((_b = (_a = node.typeParameters) === null || _a === void 0 ? void 0 : _a.params) !== null && _b !== void 0 ? _b : []).length > 0) {\n          genericTypes = `<${(_c = node.typeParameters) === null || _c === void 0 ? void 0 : _c.params.map(p => sourceCode.getText(p)).join(', ')}>`;\n        }\n\n        checkMembers(node.body.body, node, node.id, `type ${node.id.name}${genericTypes} = `, ';', !((_d = node.extends) === null || _d === void 0 ? void 0 : _d.length));\n      }\n\n    });\n  }\n\n});\n\nfunction findParentDeclaration(node) {\n  if (node.parent && node.parent.type !== utils_1.AST_NODE_TYPES.TSTypeAnnotation) {\n    if (node.parent.type === utils_1.AST_NODE_TYPES.TSTypeAliasDeclaration) {\n      return node.parent;\n    }\n\n    return findParentDeclaration(node.parent);\n  }\n\n  return undefined;\n}","map":{"version":3,"mappings":"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","names":["exports","name","meta","type","docs","description","recommended","messages","preferRecord","preferIndexSignature","fixable","schema","enum","defaultOptions","create","context","mode","sourceCode","getSourceCode","checkMembers","members","node","parentId","prefix","postfix","safeFix","length","member","utils_1","TSIndexSignature","parameter","parameters","Identifier","keyType","typeAnnotation","valueType","scope","getScope","superVar","set","get","isCircular","references","some","item","isTypeReference","range","identifier","report","messageId","fix","fixer","key","getText","value","record","readonly","replaceText","TSTypeReference","typeName","params","typeParameters","_a","TSTypeLiteral","parent","findParentDeclaration","id","TSInterfaceDeclaration","genericTypes","_b","_c","map","p","join","body","extends","_d","TSTypeAnnotation","TSTypeAliasDeclaration","undefined"],"sources":["../../src/rules/consistent-indexed-object-style.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}