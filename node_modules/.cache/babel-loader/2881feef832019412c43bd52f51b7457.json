{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst address = require('address');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst url = require('url');\n\nconst chalk = require('chalk');\n\nconst detect = require('detect-port-alt');\n\nconst isRoot = require('is-root');\n\nconst prompts = require('prompts');\n\nconst clearConsole = require('./clearConsole');\n\nconst formatWebpackMessages = require('./formatWebpackMessages');\n\nconst getProcessForPort = require('./getProcessForPort');\n\nconst forkTsCheckerWebpackPlugin = require('./ForkTsCheckerWebpackPlugin');\n\nconst isInteractive = process.stdout.isTTY;\n\nfunction prepareUrls(protocol, host, port) {\n  let pathname = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';\n\n  const formatUrl = hostname => url.format({\n    protocol,\n    hostname,\n    port,\n    pathname\n  });\n\n  const prettyPrintUrl = hostname => url.format({\n    protocol,\n    hostname,\n    port: chalk.bold(port),\n    pathname\n  });\n\n  const isUnspecifiedHost = host === '0.0.0.0' || host === '::';\n  let prettyHost, lanUrlForConfig, lanUrlForTerminal;\n\n  if (isUnspecifiedHost) {\n    prettyHost = 'localhost';\n\n    try {\n      // This can only return an IPv4 address\n      lanUrlForConfig = address.ip();\n\n      if (lanUrlForConfig) {\n        // Check if the address is a private ip\n        // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n        if (/^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(lanUrlForConfig)) {\n          // Address is private, format it for later use\n          lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig);\n        } else {\n          // Address is not private, so we will discard it\n          lanUrlForConfig = undefined;\n        }\n      }\n    } catch (_e) {// ignored\n    }\n  } else {\n    prettyHost = host;\n  }\n\n  const localUrlForTerminal = prettyPrintUrl(prettyHost);\n  const localUrlForBrowser = formatUrl(prettyHost);\n  return {\n    lanUrlForConfig,\n    lanUrlForTerminal,\n    localUrlForTerminal,\n    localUrlForBrowser\n  };\n}\n\nfunction printInstructions(appName, urls, useYarn) {\n  console.log();\n  console.log(`You can now view ${chalk.bold(appName)} in the browser.`);\n  console.log();\n\n  if (urls.lanUrlForTerminal) {\n    console.log(`  ${chalk.bold('Local:')}            ${urls.localUrlForTerminal}`);\n    console.log(`  ${chalk.bold('On Your Network:')}  ${urls.lanUrlForTerminal}`);\n  } else {\n    console.log(`  ${urls.localUrlForTerminal}`);\n  }\n\n  console.log();\n  console.log('Note that the development build is not optimized.');\n  console.log(`To create a production build, use ` + `${chalk.cyan(`${useYarn ? 'yarn' : 'npm run'} build`)}.`);\n  console.log();\n}\n\nfunction createCompiler(_ref) {\n  let {\n    appName,\n    config,\n    urls,\n    useYarn,\n    useTypeScript,\n    webpack\n  } = _ref;\n  // \"Compiler\" is a low-level interface to webpack.\n  // It lets us listen to some events and provide our own custom messages.\n  let compiler;\n\n  try {\n    compiler = webpack(config);\n  } catch (err) {\n    console.log(chalk.red('Failed to compile.'));\n    console.log();\n    console.log(err.message || err);\n    console.log();\n    process.exit(1);\n  } // \"invalid\" event fires when you have changed a file, and webpack is\n  // recompiling a bundle. WebpackDevServer takes care to pause serving the\n  // bundle, so if you refresh, it'll wait instead of serving the old one.\n  // \"invalid\" is short for \"bundle invalidated\", it doesn't imply any errors.\n\n\n  compiler.hooks.invalid.tap('invalid', () => {\n    if (isInteractive) {\n      clearConsole();\n    }\n\n    console.log('Compiling...');\n  });\n  let isFirstCompile = true;\n  let tsMessagesPromise;\n\n  if (useTypeScript) {\n    forkTsCheckerWebpackPlugin.getCompilerHooks(compiler).waiting.tap('awaitingTypeScriptCheck', () => {\n      console.log(chalk.yellow('Files successfully emitted, waiting for typecheck results...'));\n    });\n  } // \"done\" event fires when webpack has finished recompiling the bundle.\n  // Whether or not you have warnings or errors, you will get this event.\n\n\n  compiler.hooks.done.tap('done', async stats => {\n    if (isInteractive) {\n      clearConsole();\n    } // We have switched off the default webpack output in WebpackDevServer\n    // options so we are going to \"massage\" the warnings and errors and present\n    // them in a readable focused way.\n    // We only construct the warnings and errors for speed:\n    // https://github.com/facebook/create-react-app/issues/4492#issuecomment-421959548\n\n\n    const statsData = stats.toJson({\n      all: false,\n      warnings: true,\n      errors: true\n    });\n    const messages = formatWebpackMessages(statsData);\n    const isSuccessful = !messages.errors.length && !messages.warnings.length;\n\n    if (isSuccessful) {\n      console.log(chalk.green('Compiled successfully!'));\n    }\n\n    if (isSuccessful && (isInteractive || isFirstCompile)) {\n      printInstructions(appName, urls, useYarn);\n    }\n\n    isFirstCompile = false; // If errors exist, only show errors.\n\n    if (messages.errors.length) {\n      // Only keep the first error. Others are often indicative\n      // of the same problem, but confuse the reader with noise.\n      if (messages.errors.length > 1) {\n        messages.errors.length = 1;\n      }\n\n      console.log(chalk.red('Failed to compile.\\n'));\n      console.log(messages.errors.join('\\n\\n'));\n      return;\n    } // Show warnings if no errors were found.\n\n\n    if (messages.warnings.length) {\n      console.log(chalk.yellow('Compiled with warnings.\\n'));\n      console.log(messages.warnings.join('\\n\\n')); // Teach some ESLint tricks.\n\n      console.log('\\nSearch for the ' + chalk.underline(chalk.yellow('keywords')) + ' to learn more about each warning.');\n      console.log('To ignore, add ' + chalk.cyan('// eslint-disable-next-line') + ' to the line before.\\n');\n    }\n  }); // You can safely remove this after ejecting.\n  // We only use this block for testing of Create React App itself:\n\n  const isSmokeTest = process.argv.some(arg => arg.indexOf('--smoke-test') > -1);\n\n  if (isSmokeTest) {\n    compiler.hooks.failed.tap('smokeTest', async () => {\n      await tsMessagesPromise;\n      process.exit(1);\n    });\n    compiler.hooks.done.tap('smokeTest', async stats => {\n      await tsMessagesPromise;\n\n      if (stats.hasErrors() || stats.hasWarnings()) {\n        process.exit(1);\n      } else {\n        process.exit(0);\n      }\n    });\n  }\n\n  return compiler;\n}\n\nfunction resolveLoopback(proxy) {\n  const o = url.parse(proxy);\n  o.host = undefined;\n\n  if (o.hostname !== 'localhost') {\n    return proxy;\n  } // Unfortunately, many languages (unlike node) do not yet support IPv6.\n  // This means even though localhost resolves to ::1, the application\n  // must fall back to IPv4 (on 127.0.0.1).\n  // We can re-enable this in a few years.\n\n  /*try {\n    o.hostname = address.ipv6() ? '::1' : '127.0.0.1';\n  } catch (_ignored) {\n    o.hostname = '127.0.0.1';\n  }*/\n\n\n  try {\n    // Check if we're on a network; if we are, chances are we can resolve\n    // localhost. Otherwise, we can just be safe and assume localhost is\n    // IPv4 for maximum compatibility.\n    if (!address.ip()) {\n      o.hostname = '127.0.0.1';\n    }\n  } catch (_ignored) {\n    o.hostname = '127.0.0.1';\n  }\n\n  return url.format(o);\n} // We need to provide a custom onError function for httpProxyMiddleware.\n// It allows us to log custom error messages on the console.\n\n\nfunction onProxyError(proxy) {\n  return (err, req, res) => {\n    const host = req.headers && req.headers.host;\n    console.log(chalk.red('Proxy error:') + ' Could not proxy request ' + chalk.cyan(req.url) + ' from ' + chalk.cyan(host) + ' to ' + chalk.cyan(proxy) + '.');\n    console.log('See https://nodejs.org/api/errors.html#errors_common_system_errors for more information (' + chalk.cyan(err.code) + ').');\n    console.log(); // And immediately send the proper error response to the client.\n    // Otherwise, the request will eventually timeout with ERR_EMPTY_RESPONSE on the client side.\n\n    if (res.writeHead && !res.headersSent) {\n      res.writeHead(500);\n    }\n\n    res.end('Proxy error: Could not proxy request ' + req.url + ' from ' + host + ' to ' + proxy + ' (' + err.code + ').');\n  };\n}\n\nfunction prepareProxy(proxy, appPublicFolder, servedPathname) {\n  // `proxy` lets you specify alternate servers for specific requests.\n  if (!proxy) {\n    return undefined;\n  }\n\n  if (typeof proxy !== 'string') {\n    console.log(chalk.red('When specified, \"proxy\" in package.json must be a string.'));\n    console.log(chalk.red('Instead, the type of \"proxy\" was \"' + typeof proxy + '\".'));\n    console.log(chalk.red('Either remove \"proxy\" from package.json, or make it a string.'));\n    process.exit(1);\n  } // If proxy is specified, let it handle any request except for\n  // files in the public folder and requests to the WebpackDevServer socket endpoint.\n  // https://github.com/facebook/create-react-app/issues/6720\n\n\n  const sockPath = process.env.WDS_SOCKET_PATH || '/ws';\n  const isDefaultSockHost = !process.env.WDS_SOCKET_HOST;\n\n  function mayProxy(pathname) {\n    const maybePublicPath = path.resolve(appPublicFolder, pathname.replace(new RegExp('^' + servedPathname), ''));\n    const isPublicFileRequest = fs.existsSync(maybePublicPath); // used by webpackHotDevClient\n\n    const isWdsEndpointRequest = isDefaultSockHost && pathname.startsWith(sockPath);\n    return !(isPublicFileRequest || isWdsEndpointRequest);\n  }\n\n  if (!/^http(s)?:\\/\\//.test(proxy)) {\n    console.log(chalk.red('When \"proxy\" is specified in package.json it must start with either http:// or https://'));\n    process.exit(1);\n  }\n\n  let target;\n\n  if (process.platform === 'win32') {\n    target = resolveLoopback(proxy);\n  } else {\n    target = proxy;\n  }\n\n  return [{\n    target,\n    logLevel: 'silent',\n    // For single page apps, we generally want to fallback to /index.html.\n    // However we also want to respect `proxy` for API calls.\n    // So if `proxy` is specified as a string, we need to decide which fallback to use.\n    // We use a heuristic: We want to proxy all the requests that are not meant\n    // for static assets and as all the requests for static assets will be using\n    // `GET` method, we can proxy all non-`GET` requests.\n    // For `GET` requests, if request `accept`s text/html, we pick /index.html.\n    // Modern browsers include text/html into `accept` header when navigating.\n    // However API calls like `fetch()` won’t generally accept text/html.\n    // If this heuristic doesn’t work well for you, use `src/setupProxy.js`.\n    context: function (pathname, req) {\n      return req.method !== 'GET' || mayProxy(pathname) && req.headers.accept && req.headers.accept.indexOf('text/html') === -1;\n    },\n    onProxyReq: proxyReq => {\n      // Browsers may send Origin headers even with same-origin\n      // requests. To prevent CORS issues, we have to change\n      // the Origin to match the target URL.\n      if (proxyReq.getHeader('origin')) {\n        proxyReq.setHeader('origin', target);\n      }\n    },\n    onError: onProxyError(target),\n    secure: false,\n    changeOrigin: true,\n    ws: true,\n    xfwd: true\n  }];\n}\n\nfunction choosePort(host, defaultPort) {\n  return detect(defaultPort, host).then(port => new Promise(resolve => {\n    if (port === defaultPort) {\n      return resolve(port);\n    }\n\n    const message = process.platform !== 'win32' && defaultPort < 1024 && !isRoot() ? `Admin permissions are required to run a server on a port below 1024.` : `Something is already running on port ${defaultPort}.`;\n\n    if (isInteractive) {\n      clearConsole();\n      const existingProcess = getProcessForPort(defaultPort);\n      const question = {\n        type: 'confirm',\n        name: 'shouldChangePort',\n        message: chalk.yellow(message + `${existingProcess ? ` Probably:\\n  ${existingProcess}` : ''}`) + '\\n\\nWould you like to run the app on another port instead?',\n        initial: true\n      };\n      prompts(question).then(answer => {\n        if (answer.shouldChangePort) {\n          resolve(port);\n        } else {\n          resolve(null);\n        }\n      });\n    } else {\n      console.log(chalk.red(message));\n      resolve(null);\n    }\n  }), err => {\n    throw new Error(chalk.red(`Could not find an open port at ${chalk.bold(host)}.`) + '\\n' + ('Network error message: ' + err.message || err) + '\\n');\n  });\n}\n\nmodule.exports = {\n  choosePort,\n  createCompiler,\n  prepareProxy,\n  prepareUrls\n};","map":{"version":3,"names":["address","require","fs","path","url","chalk","detect","isRoot","prompts","clearConsole","formatWebpackMessages","getProcessForPort","forkTsCheckerWebpackPlugin","isInteractive","process","stdout","isTTY","prepareUrls","protocol","host","port","pathname","formatUrl","hostname","format","prettyPrintUrl","bold","isUnspecifiedHost","prettyHost","lanUrlForConfig","lanUrlForTerminal","ip","test","undefined","_e","localUrlForTerminal","localUrlForBrowser","printInstructions","appName","urls","useYarn","console","log","cyan","createCompiler","config","useTypeScript","webpack","compiler","err","red","message","exit","hooks","invalid","tap","isFirstCompile","tsMessagesPromise","getCompilerHooks","waiting","yellow","done","stats","statsData","toJson","all","warnings","errors","messages","isSuccessful","length","green","join","underline","isSmokeTest","argv","some","arg","indexOf","failed","hasErrors","hasWarnings","resolveLoopback","proxy","o","parse","_ignored","onProxyError","req","res","headers","code","writeHead","headersSent","end","prepareProxy","appPublicFolder","servedPathname","sockPath","env","WDS_SOCKET_PATH","isDefaultSockHost","WDS_SOCKET_HOST","mayProxy","maybePublicPath","resolve","replace","RegExp","isPublicFileRequest","existsSync","isWdsEndpointRequest","startsWith","target","platform","logLevel","context","method","accept","onProxyReq","proxyReq","getHeader","setHeader","onError","secure","changeOrigin","ws","xfwd","choosePort","defaultPort","then","Promise","existingProcess","question","type","name","initial","answer","shouldChangePort","Error","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/react-dev-utils/WebpackDevServerUtils.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst address = require('address');\nconst fs = require('fs');\nconst path = require('path');\nconst url = require('url');\nconst chalk = require('chalk');\nconst detect = require('detect-port-alt');\nconst isRoot = require('is-root');\nconst prompts = require('prompts');\nconst clearConsole = require('./clearConsole');\nconst formatWebpackMessages = require('./formatWebpackMessages');\nconst getProcessForPort = require('./getProcessForPort');\nconst forkTsCheckerWebpackPlugin = require('./ForkTsCheckerWebpackPlugin');\n\nconst isInteractive = process.stdout.isTTY;\n\nfunction prepareUrls(protocol, host, port, pathname = '/') {\n  const formatUrl = hostname =>\n    url.format({\n      protocol,\n      hostname,\n      port,\n      pathname,\n    });\n  const prettyPrintUrl = hostname =>\n    url.format({\n      protocol,\n      hostname,\n      port: chalk.bold(port),\n      pathname,\n    });\n\n  const isUnspecifiedHost = host === '0.0.0.0' || host === '::';\n  let prettyHost, lanUrlForConfig, lanUrlForTerminal;\n  if (isUnspecifiedHost) {\n    prettyHost = 'localhost';\n    try {\n      // This can only return an IPv4 address\n      lanUrlForConfig = address.ip();\n      if (lanUrlForConfig) {\n        // Check if the address is a private ip\n        // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n        if (\n          /^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(\n            lanUrlForConfig\n          )\n        ) {\n          // Address is private, format it for later use\n          lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig);\n        } else {\n          // Address is not private, so we will discard it\n          lanUrlForConfig = undefined;\n        }\n      }\n    } catch (_e) {\n      // ignored\n    }\n  } else {\n    prettyHost = host;\n  }\n  const localUrlForTerminal = prettyPrintUrl(prettyHost);\n  const localUrlForBrowser = formatUrl(prettyHost);\n  return {\n    lanUrlForConfig,\n    lanUrlForTerminal,\n    localUrlForTerminal,\n    localUrlForBrowser,\n  };\n}\n\nfunction printInstructions(appName, urls, useYarn) {\n  console.log();\n  console.log(`You can now view ${chalk.bold(appName)} in the browser.`);\n  console.log();\n\n  if (urls.lanUrlForTerminal) {\n    console.log(\n      `  ${chalk.bold('Local:')}            ${urls.localUrlForTerminal}`\n    );\n    console.log(\n      `  ${chalk.bold('On Your Network:')}  ${urls.lanUrlForTerminal}`\n    );\n  } else {\n    console.log(`  ${urls.localUrlForTerminal}`);\n  }\n\n  console.log();\n  console.log('Note that the development build is not optimized.');\n  console.log(\n    `To create a production build, use ` +\n      `${chalk.cyan(`${useYarn ? 'yarn' : 'npm run'} build`)}.`\n  );\n  console.log();\n}\n\nfunction createCompiler({\n  appName,\n  config,\n  urls,\n  useYarn,\n  useTypeScript,\n  webpack,\n}) {\n  // \"Compiler\" is a low-level interface to webpack.\n  // It lets us listen to some events and provide our own custom messages.\n  let compiler;\n  try {\n    compiler = webpack(config);\n  } catch (err) {\n    console.log(chalk.red('Failed to compile.'));\n    console.log();\n    console.log(err.message || err);\n    console.log();\n    process.exit(1);\n  }\n\n  // \"invalid\" event fires when you have changed a file, and webpack is\n  // recompiling a bundle. WebpackDevServer takes care to pause serving the\n  // bundle, so if you refresh, it'll wait instead of serving the old one.\n  // \"invalid\" is short for \"bundle invalidated\", it doesn't imply any errors.\n  compiler.hooks.invalid.tap('invalid', () => {\n    if (isInteractive) {\n      clearConsole();\n    }\n    console.log('Compiling...');\n  });\n\n  let isFirstCompile = true;\n  let tsMessagesPromise;\n\n  if (useTypeScript) {\n    forkTsCheckerWebpackPlugin\n      .getCompilerHooks(compiler)\n      .waiting.tap('awaitingTypeScriptCheck', () => {\n        console.log(\n          chalk.yellow(\n            'Files successfully emitted, waiting for typecheck results...'\n          )\n        );\n      });\n  }\n\n  // \"done\" event fires when webpack has finished recompiling the bundle.\n  // Whether or not you have warnings or errors, you will get this event.\n  compiler.hooks.done.tap('done', async stats => {\n    if (isInteractive) {\n      clearConsole();\n    }\n\n    // We have switched off the default webpack output in WebpackDevServer\n    // options so we are going to \"massage\" the warnings and errors and present\n    // them in a readable focused way.\n    // We only construct the warnings and errors for speed:\n    // https://github.com/facebook/create-react-app/issues/4492#issuecomment-421959548\n    const statsData = stats.toJson({\n      all: false,\n      warnings: true,\n      errors: true,\n    });\n\n    const messages = formatWebpackMessages(statsData);\n    const isSuccessful = !messages.errors.length && !messages.warnings.length;\n    if (isSuccessful) {\n      console.log(chalk.green('Compiled successfully!'));\n    }\n    if (isSuccessful && (isInteractive || isFirstCompile)) {\n      printInstructions(appName, urls, useYarn);\n    }\n    isFirstCompile = false;\n\n    // If errors exist, only show errors.\n    if (messages.errors.length) {\n      // Only keep the first error. Others are often indicative\n      // of the same problem, but confuse the reader with noise.\n      if (messages.errors.length > 1) {\n        messages.errors.length = 1;\n      }\n      console.log(chalk.red('Failed to compile.\\n'));\n      console.log(messages.errors.join('\\n\\n'));\n      return;\n    }\n\n    // Show warnings if no errors were found.\n    if (messages.warnings.length) {\n      console.log(chalk.yellow('Compiled with warnings.\\n'));\n      console.log(messages.warnings.join('\\n\\n'));\n\n      // Teach some ESLint tricks.\n      console.log(\n        '\\nSearch for the ' +\n          chalk.underline(chalk.yellow('keywords')) +\n          ' to learn more about each warning.'\n      );\n      console.log(\n        'To ignore, add ' +\n          chalk.cyan('// eslint-disable-next-line') +\n          ' to the line before.\\n'\n      );\n    }\n  });\n\n  // You can safely remove this after ejecting.\n  // We only use this block for testing of Create React App itself:\n  const isSmokeTest = process.argv.some(\n    arg => arg.indexOf('--smoke-test') > -1\n  );\n  if (isSmokeTest) {\n    compiler.hooks.failed.tap('smokeTest', async () => {\n      await tsMessagesPromise;\n      process.exit(1);\n    });\n    compiler.hooks.done.tap('smokeTest', async stats => {\n      await tsMessagesPromise;\n      if (stats.hasErrors() || stats.hasWarnings()) {\n        process.exit(1);\n      } else {\n        process.exit(0);\n      }\n    });\n  }\n\n  return compiler;\n}\n\nfunction resolveLoopback(proxy) {\n  const o = url.parse(proxy);\n  o.host = undefined;\n  if (o.hostname !== 'localhost') {\n    return proxy;\n  }\n  // Unfortunately, many languages (unlike node) do not yet support IPv6.\n  // This means even though localhost resolves to ::1, the application\n  // must fall back to IPv4 (on 127.0.0.1).\n  // We can re-enable this in a few years.\n  /*try {\n    o.hostname = address.ipv6() ? '::1' : '127.0.0.1';\n  } catch (_ignored) {\n    o.hostname = '127.0.0.1';\n  }*/\n\n  try {\n    // Check if we're on a network; if we are, chances are we can resolve\n    // localhost. Otherwise, we can just be safe and assume localhost is\n    // IPv4 for maximum compatibility.\n    if (!address.ip()) {\n      o.hostname = '127.0.0.1';\n    }\n  } catch (_ignored) {\n    o.hostname = '127.0.0.1';\n  }\n  return url.format(o);\n}\n\n// We need to provide a custom onError function for httpProxyMiddleware.\n// It allows us to log custom error messages on the console.\nfunction onProxyError(proxy) {\n  return (err, req, res) => {\n    const host = req.headers && req.headers.host;\n    console.log(\n      chalk.red('Proxy error:') +\n        ' Could not proxy request ' +\n        chalk.cyan(req.url) +\n        ' from ' +\n        chalk.cyan(host) +\n        ' to ' +\n        chalk.cyan(proxy) +\n        '.'\n    );\n    console.log(\n      'See https://nodejs.org/api/errors.html#errors_common_system_errors for more information (' +\n        chalk.cyan(err.code) +\n        ').'\n    );\n    console.log();\n\n    // And immediately send the proper error response to the client.\n    // Otherwise, the request will eventually timeout with ERR_EMPTY_RESPONSE on the client side.\n    if (res.writeHead && !res.headersSent) {\n      res.writeHead(500);\n    }\n    res.end(\n      'Proxy error: Could not proxy request ' +\n        req.url +\n        ' from ' +\n        host +\n        ' to ' +\n        proxy +\n        ' (' +\n        err.code +\n        ').'\n    );\n  };\n}\n\nfunction prepareProxy(proxy, appPublicFolder, servedPathname) {\n  // `proxy` lets you specify alternate servers for specific requests.\n  if (!proxy) {\n    return undefined;\n  }\n  if (typeof proxy !== 'string') {\n    console.log(\n      chalk.red('When specified, \"proxy\" in package.json must be a string.')\n    );\n    console.log(\n      chalk.red('Instead, the type of \"proxy\" was \"' + typeof proxy + '\".')\n    );\n    console.log(\n      chalk.red('Either remove \"proxy\" from package.json, or make it a string.')\n    );\n    process.exit(1);\n  }\n\n  // If proxy is specified, let it handle any request except for\n  // files in the public folder and requests to the WebpackDevServer socket endpoint.\n  // https://github.com/facebook/create-react-app/issues/6720\n  const sockPath = process.env.WDS_SOCKET_PATH || '/ws';\n  const isDefaultSockHost = !process.env.WDS_SOCKET_HOST;\n  function mayProxy(pathname) {\n    const maybePublicPath = path.resolve(\n      appPublicFolder,\n      pathname.replace(new RegExp('^' + servedPathname), '')\n    );\n    const isPublicFileRequest = fs.existsSync(maybePublicPath);\n    // used by webpackHotDevClient\n    const isWdsEndpointRequest =\n      isDefaultSockHost && pathname.startsWith(sockPath);\n    return !(isPublicFileRequest || isWdsEndpointRequest);\n  }\n\n  if (!/^http(s)?:\\/\\//.test(proxy)) {\n    console.log(\n      chalk.red(\n        'When \"proxy\" is specified in package.json it must start with either http:// or https://'\n      )\n    );\n    process.exit(1);\n  }\n\n  let target;\n  if (process.platform === 'win32') {\n    target = resolveLoopback(proxy);\n  } else {\n    target = proxy;\n  }\n  return [\n    {\n      target,\n      logLevel: 'silent',\n      // For single page apps, we generally want to fallback to /index.html.\n      // However we also want to respect `proxy` for API calls.\n      // So if `proxy` is specified as a string, we need to decide which fallback to use.\n      // We use a heuristic: We want to proxy all the requests that are not meant\n      // for static assets and as all the requests for static assets will be using\n      // `GET` method, we can proxy all non-`GET` requests.\n      // For `GET` requests, if request `accept`s text/html, we pick /index.html.\n      // Modern browsers include text/html into `accept` header when navigating.\n      // However API calls like `fetch()` won’t generally accept text/html.\n      // If this heuristic doesn’t work well for you, use `src/setupProxy.js`.\n      context: function (pathname, req) {\n        return (\n          req.method !== 'GET' ||\n          (mayProxy(pathname) &&\n            req.headers.accept &&\n            req.headers.accept.indexOf('text/html') === -1)\n        );\n      },\n      onProxyReq: proxyReq => {\n        // Browsers may send Origin headers even with same-origin\n        // requests. To prevent CORS issues, we have to change\n        // the Origin to match the target URL.\n        if (proxyReq.getHeader('origin')) {\n          proxyReq.setHeader('origin', target);\n        }\n      },\n      onError: onProxyError(target),\n      secure: false,\n      changeOrigin: true,\n      ws: true,\n      xfwd: true,\n    },\n  ];\n}\n\nfunction choosePort(host, defaultPort) {\n  return detect(defaultPort, host).then(\n    port =>\n      new Promise(resolve => {\n        if (port === defaultPort) {\n          return resolve(port);\n        }\n        const message =\n          process.platform !== 'win32' && defaultPort < 1024 && !isRoot()\n            ? `Admin permissions are required to run a server on a port below 1024.`\n            : `Something is already running on port ${defaultPort}.`;\n        if (isInteractive) {\n          clearConsole();\n          const existingProcess = getProcessForPort(defaultPort);\n          const question = {\n            type: 'confirm',\n            name: 'shouldChangePort',\n            message:\n              chalk.yellow(\n                message +\n                  `${existingProcess ? ` Probably:\\n  ${existingProcess}` : ''}`\n              ) + '\\n\\nWould you like to run the app on another port instead?',\n            initial: true,\n          };\n          prompts(question).then(answer => {\n            if (answer.shouldChangePort) {\n              resolve(port);\n            } else {\n              resolve(null);\n            }\n          });\n        } else {\n          console.log(chalk.red(message));\n          resolve(null);\n        }\n      }),\n    err => {\n      throw new Error(\n        chalk.red(`Could not find an open port at ${chalk.bold(host)}.`) +\n          '\\n' +\n          ('Network error message: ' + err.message || err) +\n          '\\n'\n      );\n    }\n  );\n}\n\nmodule.exports = {\n  choosePort,\n  createCompiler,\n  prepareProxy,\n  prepareUrls,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}