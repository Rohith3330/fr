{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.isNumeric = isNumeric;\nexports.hyphenToCamelCase = hyphenToCamelCase;\nexports.trimEnd = trimEnd;\nexports.kebabCase = kebabCase;\nexports.replaceSpaces = replaceSpaces;\n/**\n * Determines if the specified string consists entirely of numeric characters.\n *\n * @param {*} [value]\n * @returns {boolean}\n */\n\nfunction isNumeric(value) {\n  return !Number.isNaN(value - parseFloat(value));\n}\n/**\n * Convert a hyphenated string to camelCase.\n *\n * @param {string} string\n * @returns {string}\n */\n\n\nfunction hyphenToCamelCase(string) {\n  return string.replace(/-(.)/g, (match, chr) => chr.toUpperCase());\n}\n/**\n * Trim the specified substring off the string. If the string does not end\n * with the specified substring, this is a no-op.\n *\n * @param {string} haystack String to search in\n * @param {string} needle   String to search for\n * @return {string}\n */\n\n\nfunction trimEnd(haystack, needle) {\n  return haystack.endsWith(needle) ? haystack.slice(0, -needle.length) : haystack;\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n\nfunction kebabCase(str) {\n  return str.replace(KEBAB_REGEX, match => `-${match.toLowerCase()}`);\n}\n\nconst SPACES_REGEXP = /[\\t\\r\\n\\u0085\\u2028\\u2029]+/g;\n\nfunction replaceSpaces(str) {\n  return str.replace(SPACES_REGEXP, ' ');\n}","map":{"version":3,"names":["exports","__esModule","isNumeric","hyphenToCamelCase","trimEnd","kebabCase","replaceSpaces","value","Number","isNaN","parseFloat","string","replace","match","chr","toUpperCase","haystack","needle","endsWith","slice","length","KEBAB_REGEX","str","toLowerCase","SPACES_REGEXP"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@svgr/hast-util-to-babel-ast/lib/util.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.isNumeric = isNumeric;\nexports.hyphenToCamelCase = hyphenToCamelCase;\nexports.trimEnd = trimEnd;\nexports.kebabCase = kebabCase;\nexports.replaceSpaces = replaceSpaces;\n\n/**\n * Determines if the specified string consists entirely of numeric characters.\n *\n * @param {*} [value]\n * @returns {boolean}\n */\nfunction isNumeric(value) {\n  return !Number.isNaN(value - parseFloat(value));\n}\n/**\n * Convert a hyphenated string to camelCase.\n *\n * @param {string} string\n * @returns {string}\n */\n\n\nfunction hyphenToCamelCase(string) {\n  return string.replace(/-(.)/g, (match, chr) => chr.toUpperCase());\n}\n/**\n * Trim the specified substring off the string. If the string does not end\n * with the specified substring, this is a no-op.\n *\n * @param {string} haystack String to search in\n * @param {string} needle   String to search for\n * @return {string}\n */\n\n\nfunction trimEnd(haystack, needle) {\n  return haystack.endsWith(needle) ? haystack.slice(0, -needle.length) : haystack;\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n\nfunction kebabCase(str) {\n  return str.replace(KEBAB_REGEX, match => `-${match.toLowerCase()}`);\n}\n\nconst SPACES_REGEXP = /[\\t\\r\\n\\u0085\\u2028\\u2029]+/g;\n\nfunction replaceSpaces(str) {\n  return str.replace(SPACES_REGEXP, ' ');\n}"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;AACAF,OAAO,CAACG,iBAAR,GAA4BA,iBAA5B;AACAH,OAAO,CAACI,OAAR,GAAkBA,OAAlB;AACAJ,OAAO,CAACK,SAAR,GAAoBA,SAApB;AACAL,OAAO,CAACM,aAAR,GAAwBA,aAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASJ,SAAT,CAAmBK,KAAnB,EAA0B;EACxB,OAAO,CAACC,MAAM,CAACC,KAAP,CAAaF,KAAK,GAAGG,UAAU,CAACH,KAAD,CAA/B,CAAR;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASJ,iBAAT,CAA2BQ,MAA3B,EAAmC;EACjC,OAAOA,MAAM,CAACC,OAAP,CAAe,OAAf,EAAwB,CAACC,KAAD,EAAQC,GAAR,KAAgBA,GAAG,CAACC,WAAJ,EAAxC,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASX,OAAT,CAAiBY,QAAjB,EAA2BC,MAA3B,EAAmC;EACjC,OAAOD,QAAQ,CAACE,QAAT,CAAkBD,MAAlB,IAA4BD,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkB,CAACF,MAAM,CAACG,MAA1B,CAA5B,GAAgEJ,QAAvE;AACD;;AAED,MAAMK,WAAW,GAAG,kCAApB;;AAEA,SAAShB,SAAT,CAAmBiB,GAAnB,EAAwB;EACtB,OAAOA,GAAG,CAACV,OAAJ,CAAYS,WAAZ,EAAyBR,KAAK,IAAK,IAAGA,KAAK,CAACU,WAAN,EAAoB,EAA1D,CAAP;AACD;;AAED,MAAMC,aAAa,GAAG,8BAAtB;;AAEA,SAASlB,aAAT,CAAuBgB,GAAvB,EAA4B;EAC1B,OAAOA,GAAG,CAACV,OAAJ,CAAYY,aAAZ,EAA2B,GAA3B,CAAP;AACD"},"metadata":{},"sourceType":"script"}