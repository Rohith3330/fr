{"ast":null,"code":"var parse = require('../');\n\nvar test = require('tape');\n\ntest('-', function (t) {\n  t.plan(5);\n  t.deepEqual(parse(['-n', '-']), {\n    n: '-',\n    _: []\n  });\n  t.deepEqual(parse(['-']), {\n    _: ['-']\n  });\n  t.deepEqual(parse(['-f-']), {\n    f: '-',\n    _: []\n  });\n  t.deepEqual(parse(['-b', '-'], {\n    boolean: 'b'\n  }), {\n    b: true,\n    _: ['-']\n  });\n  t.deepEqual(parse(['-s', '-'], {\n    string: 's'\n  }), {\n    s: '-',\n    _: []\n  });\n});\ntest('-a -- b', function (t) {\n  t.plan(3);\n  t.deepEqual(parse(['-a', '--', 'b']), {\n    a: true,\n    _: ['b']\n  });\n  t.deepEqual(parse(['--a', '--', 'b']), {\n    a: true,\n    _: ['b']\n  });\n  t.deepEqual(parse(['--a', '--', 'b']), {\n    a: true,\n    _: ['b']\n  });\n});\ntest('move arguments after the -- into their own `--` array', function (t) {\n  t.plan(1);\n  t.deepEqual(parse(['--name', 'John', 'before', '--', 'after'], {\n    '--': true\n  }), {\n    name: 'John',\n    _: ['before'],\n    '--': ['after']\n  });\n});","map":{"version":3,"names":["parse","require","test","t","plan","deepEqual","n","_","f","boolean","b","string","s","a","name"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/minimist/test/dash.js"],"sourcesContent":["var parse = require('../');\nvar test = require('tape');\n\ntest('-', function (t) {\n    t.plan(5);\n    t.deepEqual(parse([ '-n', '-' ]), { n: '-', _: [] });\n    t.deepEqual(parse([ '-' ]), { _: [ '-' ] });\n    t.deepEqual(parse([ '-f-' ]), { f: '-', _: [] });\n    t.deepEqual(\n        parse([ '-b', '-' ], { boolean: 'b' }),\n        { b: true, _: [ '-' ] }\n    );\n    t.deepEqual(\n        parse([ '-s', '-' ], { string: 's' }),\n        { s: '-', _: [] }\n    );\n});\n\ntest('-a -- b', function (t) {\n    t.plan(3);\n    t.deepEqual(parse([ '-a', '--', 'b' ]), { a: true, _: [ 'b' ] });\n    t.deepEqual(parse([ '--a', '--', 'b' ]), { a: true, _: [ 'b' ] });\n    t.deepEqual(parse([ '--a', '--', 'b' ]), { a: true, _: [ 'b' ] });\n});\n\ntest('move arguments after the -- into their own `--` array', function(t) {\n    t.plan(1);\n    t.deepEqual(\n        parse([ '--name', 'John', 'before', '--', 'after' ], { '--': true }),\n        { name: 'John', _: [ 'before' ], '--': [ 'after' ] });\n});\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AAEAC,IAAI,CAAC,GAAD,EAAM,UAAUC,CAAV,EAAa;EACnBA,CAAC,CAACC,IAAF,CAAO,CAAP;EACAD,CAAC,CAACE,SAAF,CAAYL,KAAK,CAAC,CAAE,IAAF,EAAQ,GAAR,CAAD,CAAjB,EAAkC;IAAEM,CAAC,EAAE,GAAL;IAAUC,CAAC,EAAE;EAAb,CAAlC;EACAJ,CAAC,CAACE,SAAF,CAAYL,KAAK,CAAC,CAAE,GAAF,CAAD,CAAjB,EAA4B;IAAEO,CAAC,EAAE,CAAE,GAAF;EAAL,CAA5B;EACAJ,CAAC,CAACE,SAAF,CAAYL,KAAK,CAAC,CAAE,KAAF,CAAD,CAAjB,EAA8B;IAAEQ,CAAC,EAAE,GAAL;IAAUD,CAAC,EAAE;EAAb,CAA9B;EACAJ,CAAC,CAACE,SAAF,CACIL,KAAK,CAAC,CAAE,IAAF,EAAQ,GAAR,CAAD,EAAgB;IAAES,OAAO,EAAE;EAAX,CAAhB,CADT,EAEI;IAAEC,CAAC,EAAE,IAAL;IAAWH,CAAC,EAAE,CAAE,GAAF;EAAd,CAFJ;EAIAJ,CAAC,CAACE,SAAF,CACIL,KAAK,CAAC,CAAE,IAAF,EAAQ,GAAR,CAAD,EAAgB;IAAEW,MAAM,EAAE;EAAV,CAAhB,CADT,EAEI;IAAEC,CAAC,EAAE,GAAL;IAAUL,CAAC,EAAE;EAAb,CAFJ;AAIH,CAbG,CAAJ;AAeAL,IAAI,CAAC,SAAD,EAAY,UAAUC,CAAV,EAAa;EACzBA,CAAC,CAACC,IAAF,CAAO,CAAP;EACAD,CAAC,CAACE,SAAF,CAAYL,KAAK,CAAC,CAAE,IAAF,EAAQ,IAAR,EAAc,GAAd,CAAD,CAAjB,EAAwC;IAAEa,CAAC,EAAE,IAAL;IAAWN,CAAC,EAAE,CAAE,GAAF;EAAd,CAAxC;EACAJ,CAAC,CAACE,SAAF,CAAYL,KAAK,CAAC,CAAE,KAAF,EAAS,IAAT,EAAe,GAAf,CAAD,CAAjB,EAAyC;IAAEa,CAAC,EAAE,IAAL;IAAWN,CAAC,EAAE,CAAE,GAAF;EAAd,CAAzC;EACAJ,CAAC,CAACE,SAAF,CAAYL,KAAK,CAAC,CAAE,KAAF,EAAS,IAAT,EAAe,GAAf,CAAD,CAAjB,EAAyC;IAAEa,CAAC,EAAE,IAAL;IAAWN,CAAC,EAAE,CAAE,GAAF;EAAd,CAAzC;AACH,CALG,CAAJ;AAOAL,IAAI,CAAC,uDAAD,EAA0D,UAASC,CAAT,EAAY;EACtEA,CAAC,CAACC,IAAF,CAAO,CAAP;EACAD,CAAC,CAACE,SAAF,CACIL,KAAK,CAAC,CAAE,QAAF,EAAY,MAAZ,EAAoB,QAApB,EAA8B,IAA9B,EAAoC,OAApC,CAAD,EAAgD;IAAE,MAAM;EAAR,CAAhD,CADT,EAEI;IAAEc,IAAI,EAAE,MAAR;IAAgBP,CAAC,EAAE,CAAE,QAAF,CAAnB;IAAiC,MAAM,CAAE,OAAF;EAAvC,CAFJ;AAGH,CALG,CAAJ"},"metadata":{},"sourceType":"script"}