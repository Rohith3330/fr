{"ast":null,"code":"'use strict';\n\nconst assert = require('chai').assert;\n\nconst proxyquire = require('proxyquire');\n\nconst spooks = require('spooks');\n\nconst Promise = require('bluebird');\n\nconst modulePath = '../../src/stringify';\nsuite('stringify:', () => {\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath);\n    });\n  });\n  test('require returns function', () => {\n    assert.isFunction(require(modulePath));\n  });\n  suite('require:', () => {\n    let log, stringify;\n    setup(() => {\n      log = {};\n      stringify = proxyquire(modulePath, {\n        './streamify': spooks.fn({\n          name: 'streamify',\n          log: log,\n          results: [{\n            on: spooks.fn({\n              name: 'on',\n              log: log\n            })\n          }]\n        })\n      });\n    });\n    test('stringify expects two arguments', () => {\n      assert.lengthOf(stringify, 2);\n    });\n    test('stringify does not throw', () => {\n      assert.doesNotThrow(() => {\n        stringify();\n      });\n    });\n    test('stringify returns promise', () => {\n      assert.instanceOf(stringify(), Promise);\n    });\n    test('streamify was not called', () => {\n      assert.strictEqual(log.counts.streamify, 0);\n    });\n    suite('stringify:', () => {\n      let data, options, resolved, rejected, result, done;\n      setup(() => {\n        data = {};\n        options = {};\n        stringify(data, options).then(res => {\n          resolved = res;\n          done();\n        }).catch(rej => {\n          rejected = rej;\n          done();\n        });\n      });\n      teardown(() => {\n        resolved = rejected = undefined;\n      });\n      test('streamify was called once', () => {\n        assert.strictEqual(log.counts.streamify, 1);\n        assert.isUndefined(log.these.streamify[0]);\n      });\n      test('streamify was called correctly', () => {\n        assert.lengthOf(log.args.streamify[0], 2);\n        assert.strictEqual(log.args.streamify[0][0], data);\n        assert.lengthOf(Object.keys(log.args.streamify[0][0]), 0);\n        assert.strictEqual(log.args.streamify[0][1], options);\n        assert.lengthOf(Object.keys(log.args.streamify[0][1]), 0);\n      });\n      test('stream.on was called four times', () => {\n        assert.strictEqual(log.counts.on, 4);\n      });\n      test('stream.on was called correctly first time', () => {\n        assert.lengthOf(log.args.on[0], 2);\n        assert.strictEqual(log.args.on[0][0], 'data');\n        assert.isFunction(log.args.on[0][1]);\n      });\n      test('stream.on was called correctly second time', () => {\n        assert.strictEqual(log.args.on[1][0], 'end');\n        assert.isFunction(log.args.on[1][1]);\n        assert.notStrictEqual(log.args.on[1][1], log.args.on[0][1]);\n      });\n      test('stream.on was called correctly third time', () => {\n        assert.strictEqual(log.args.on[2][0], 'error');\n        assert.isFunction(log.args.on[2][1]);\n        assert.notStrictEqual(log.args.on[2][1], log.args.on[0][1]);\n        assert.notStrictEqual(log.args.on[2][1], log.args.on[1][1]);\n      });\n      test('stream.on was called correctly fourth time', () => {\n        assert.strictEqual(log.args.on[3][0], 'dataError');\n        assert.isFunction(log.args.on[3][1]);\n        assert.strictEqual(log.args.on[3][1], log.args.on[2][1]);\n      });\n      test('promise is unfulfilled', () => {\n        assert.isUndefined(resolved);\n        assert.isUndefined(rejected);\n      });\n      suite('data event:', () => {\n        setup(() => {\n          log.args.on[0][1]('foo');\n        });\n        test('promise is unfulfilled', () => {\n          assert.isUndefined(resolved);\n          assert.isUndefined(rejected);\n        });\n        suite('end event:', () => {\n          setup(d => {\n            done = d;\n            log.args.on[1][1]();\n          });\n          test('promise is resolved', () => {\n            assert.strictEqual(resolved, 'foo');\n          });\n          test('promise is not rejected', () => {\n            assert.isUndefined(rejected);\n          });\n        });\n        suite('data event:', () => {\n          setup(() => {\n            log.args.on[0][1]('bar');\n          });\n          test('promise is unfulfilled', () => {\n            assert.isUndefined(resolved);\n            assert.isUndefined(rejected);\n          });\n          suite('end event:', () => {\n            setup(d => {\n              done = d;\n              log.args.on[1][1]();\n            });\n            test('promise is resolved', () => {\n              assert.strictEqual(resolved, 'foobar');\n            });\n          });\n          suite('error event:', () => {\n            setup(d => {\n              done = d;\n              log.args.on[2][1]('wibble');\n            });\n            test('promise is rejected', () => {\n              assert.strictEqual(rejected, 'wibble');\n            });\n          });\n          suite('dataError event:', () => {\n            setup(d => {\n              done = d;\n              log.args.on[3][1]('wibble');\n            });\n            test('promise is rejected', () => {\n              assert.strictEqual(rejected, 'wibble');\n            });\n          });\n        });\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","proxyquire","spooks","Promise","modulePath","suite","test","doesNotThrow","isFunction","log","stringify","setup","fn","name","results","on","lengthOf","instanceOf","strictEqual","counts","streamify","data","options","resolved","rejected","result","done","then","res","catch","rej","teardown","undefined","isUndefined","these","args","Object","keys","notStrictEqual","d"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/bfj/test/unit/stringify.js"],"sourcesContent":["'use strict'\n\nconst assert = require('chai').assert\nconst proxyquire = require('proxyquire')\nconst spooks = require('spooks')\nconst Promise = require('bluebird')\n\nconst modulePath = '../../src/stringify'\n\nsuite('stringify:', () => {\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath)\n    })\n  })\n\n  test('require returns function', () => {\n    assert.isFunction(require(modulePath))\n  })\n\n  suite('require:', () => {\n    let log, stringify\n\n    setup(() => {\n      log = {}\n\n      stringify = proxyquire(modulePath, {\n        './streamify': spooks.fn({\n          name: 'streamify',\n          log: log,\n          results: [\n            { on: spooks.fn({ name: 'on', log: log }) }\n          ]\n        })\n      })\n    })\n\n    test('stringify expects two arguments', () => {\n      assert.lengthOf(stringify, 2)\n    })\n\n    test('stringify does not throw', () => {\n      assert.doesNotThrow(() => {\n        stringify()\n      })\n    })\n\n    test('stringify returns promise', () => {\n      assert.instanceOf(stringify(), Promise)\n    })\n\n    test('streamify was not called', () => {\n      assert.strictEqual(log.counts.streamify, 0)\n    })\n\n    suite('stringify:', () => {\n      let data, options, resolved, rejected, result, done\n\n      setup(() => {\n        data = {}\n        options = {}\n        stringify(data, options)\n          .then(res => {\n            resolved = res\n            done()\n          })\n          .catch(rej => {\n            rejected = rej\n            done()\n          })\n      })\n\n      teardown(() => {\n        resolved = rejected = undefined\n      })\n\n      test('streamify was called once', () => {\n        assert.strictEqual(log.counts.streamify, 1)\n        assert.isUndefined(log.these.streamify[0])\n      })\n\n      test('streamify was called correctly', () => {\n        assert.lengthOf(log.args.streamify[0], 2)\n        assert.strictEqual(log.args.streamify[0][0], data)\n        assert.lengthOf(Object.keys(log.args.streamify[0][0]), 0)\n        assert.strictEqual(log.args.streamify[0][1], options)\n        assert.lengthOf(Object.keys(log.args.streamify[0][1]), 0)\n      })\n\n      test('stream.on was called four times', () => {\n        assert.strictEqual(log.counts.on, 4)\n      })\n\n      test('stream.on was called correctly first time', () => {\n        assert.lengthOf(log.args.on[0], 2)\n        assert.strictEqual(log.args.on[0][0], 'data')\n        assert.isFunction(log.args.on[0][1])\n      })\n\n      test('stream.on was called correctly second time', () => {\n        assert.strictEqual(log.args.on[1][0], 'end')\n        assert.isFunction(log.args.on[1][1])\n        assert.notStrictEqual(log.args.on[1][1], log.args.on[0][1])\n      })\n\n      test('stream.on was called correctly third time', () => {\n        assert.strictEqual(log.args.on[2][0], 'error')\n        assert.isFunction(log.args.on[2][1])\n        assert.notStrictEqual(log.args.on[2][1], log.args.on[0][1])\n        assert.notStrictEqual(log.args.on[2][1], log.args.on[1][1])\n      })\n\n      test('stream.on was called correctly fourth time', () => {\n        assert.strictEqual(log.args.on[3][0], 'dataError')\n        assert.isFunction(log.args.on[3][1])\n        assert.strictEqual(log.args.on[3][1], log.args.on[2][1])\n      })\n\n      test('promise is unfulfilled', () => {\n        assert.isUndefined(resolved)\n        assert.isUndefined(rejected)\n      })\n\n      suite('data event:', () => {\n        setup(() => {\n          log.args.on[0][1]('foo')\n        })\n\n        test('promise is unfulfilled', () => {\n          assert.isUndefined(resolved)\n          assert.isUndefined(rejected)\n        })\n\n        suite('end event:', () => {\n          setup(d => {\n            done = d\n            log.args.on[1][1]()\n          })\n\n          test('promise is resolved', () => {\n            assert.strictEqual(resolved, 'foo')\n          })\n\n          test('promise is not rejected', () => {\n            assert.isUndefined(rejected)\n          })\n        })\n\n        suite('data event:', () => {\n          setup(() => {\n            log.args.on[0][1]('bar')\n          })\n\n          test('promise is unfulfilled', () => {\n            assert.isUndefined(resolved)\n            assert.isUndefined(rejected)\n          })\n\n          suite('end event:', () => {\n            setup(d => {\n              done = d\n              log.args.on[1][1]()\n            })\n\n            test('promise is resolved', () => {\n              assert.strictEqual(resolved, 'foobar')\n            })\n          })\n\n          suite('error event:', () => {\n            setup(d => {\n              done = d\n              log.args.on[2][1]('wibble')\n            })\n\n            test('promise is rejected', () => {\n              assert.strictEqual(rejected, 'wibble')\n            })\n          })\n\n          suite('dataError event:', () => {\n            setup(d => {\n              done = d\n              log.args.on[3][1]('wibble')\n            })\n\n            test('promise is rejected', () => {\n              assert.strictEqual(rejected, 'wibble')\n            })\n          })\n        })\n      })\n    })\n  })\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}