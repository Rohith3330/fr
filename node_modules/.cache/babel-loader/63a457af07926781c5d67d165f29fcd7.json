{"ast":null,"code":"/**\n * @fileoverview Restrict file extensions that may contain JSX\n * @author Joe Lencioni\n */\n'use strict';\n\nconst path = require('path');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\n\nconst DEFAULTS = {\n  allow: 'always',\n  extensions: ['.jsx']\n}; // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noJSXWithExtension: 'JSX not allowed in files with extension \\'{{ext}}\\'',\n  extensionOnlyForJSX: 'Only files containing JSX may use the extension \\'{{ext}}\\''\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow file extensions that may contain JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-filename-extension')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        allow: {\n          enum: ['always', 'as-needed']\n        },\n        extensions: {\n          type: 'array',\n          items: {\n            type: 'string'\n          }\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const filename = context.getFilename();\n    let jsxNode;\n\n    if (filename === '<text>') {\n      // No need to traverse any nodes.\n      return {};\n    }\n\n    const allow = context.options[0] && context.options[0].allow || DEFAULTS.allow;\n    const allowedExtensions = context.options[0] && context.options[0].extensions || DEFAULTS.extensions;\n    const isAllowedExtension = allowedExtensions.some(extension => filename.slice(-extension.length) === extension);\n\n    function handleJSX(node) {\n      if (!jsxNode) {\n        jsxNode = node;\n      }\n    } // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n\n    return {\n      JSXElement: handleJSX,\n      JSXFragment: handleJSX,\n\n      'Program:exit'(node) {\n        if (jsxNode) {\n          if (!isAllowedExtension) {\n            report(context, messages.noJSXWithExtension, 'noJSXWithExtension', {\n              node: jsxNode,\n              data: {\n                ext: path.extname(filename)\n              }\n            });\n          }\n\n          return;\n        }\n\n        if (isAllowedExtension && allow === 'as-needed') {\n          report(context, messages.extensionOnlyForJSX, 'extensionOnlyForJSX', {\n            node,\n            data: {\n              ext: path.extname(filename)\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["path","require","docsUrl","report","DEFAULTS","allow","extensions","messages","noJSXWithExtension","extensionOnlyForJSX","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","enum","items","additionalProperties","create","context","filename","getFilename","jsxNode","options","allowedExtensions","isAllowedExtension","some","extension","slice","length","handleJSX","node","JSXElement","JSXFragment","data","ext","extname"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-filename-extension.js"],"sourcesContent":["/**\n * @fileoverview Restrict file extensions that may contain JSX\n * @author Joe Lencioni\n */\n\n'use strict';\n\nconst path = require('path');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\nconst DEFAULTS = {\n  allow: 'always',\n  extensions: ['.jsx'],\n};\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noJSXWithExtension: 'JSX not allowed in files with extension \\'{{ext}}\\'',\n  extensionOnlyForJSX: 'Only files containing JSX may use the extension \\'{{ext}}\\'',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow file extensions that may contain JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-filename-extension'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        allow: {\n          enum: ['always', 'as-needed'],\n        },\n        extensions: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const filename = context.getFilename();\n\n    let jsxNode;\n\n    if (filename === '<text>') {\n      // No need to traverse any nodes.\n      return {};\n    }\n\n    const allow = (context.options[0] && context.options[0].allow) || DEFAULTS.allow;\n    const allowedExtensions = (context.options[0] && context.options[0].extensions) || DEFAULTS.extensions;\n    const isAllowedExtension = allowedExtensions.some((extension) => filename.slice(-extension.length) === extension);\n\n    function handleJSX(node) {\n      if (!jsxNode) {\n        jsxNode = node;\n      }\n    }\n\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      JSXElement: handleJSX,\n      JSXFragment: handleJSX,\n\n      'Program:exit'(node) {\n        if (jsxNode) {\n          if (!isAllowedExtension) {\n            report(context, messages.noJSXWithExtension, 'noJSXWithExtension', {\n              node: jsxNode,\n              data: {\n                ext: path.extname(filename),\n              },\n            });\n          }\n          return;\n        }\n\n        if (isAllowedExtension && allow === 'as-needed') {\n          report(context, messages.extensionOnlyForJSX, 'extensionOnlyForJSX', {\n            node,\n            data: {\n              ext: path.extname(filename),\n            },\n          });\n        }\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}