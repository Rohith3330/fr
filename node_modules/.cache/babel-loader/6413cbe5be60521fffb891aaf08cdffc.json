{"ast":null,"code":"/* jshint quotmark: false */\n'use strict';\n\nvar FS = require('fs'),\n    PATH = require('path'),\n    chalk = require('chalk'),\n    mkdirp = require('mkdirp'),\n    promisify = require('util.promisify'),\n    readdir = promisify(FS.readdir),\n    readFile = promisify(FS.readFile),\n    writeFile = promisify(FS.writeFile),\n    SVGO = require('../svgo.js'),\n    YAML = require('js-yaml'),\n    PKG = require('../../package.json'),\n    encodeSVGDatauri = require('./tools.js').encodeSVGDatauri,\n    decodeSVGDatauri = require('./tools.js').decodeSVGDatauri,\n    checkIsDir = require('./tools.js').checkIsDir,\n    regSVGFile = /\\.svg$/,\n    noop = () => {},\n    svgo;\n/**\n * Command-Option-Argument.\n *\n * @see https://github.com/veged/coa\n */\n\n\nmodule.exports = require('coa').Cmd().helpful().name(PKG.name).title(PKG.description).opt().name('version').title('Version').short('v').long('version').only().flag().act(function () {\n  // output the version to stdout instead of stderr if returned\n  process.stdout.write(PKG.version + '\\n'); // coa will run `.toString` on the returned value and send it to stderr\n\n  return '';\n}).end().opt().name('input').title('Input file, \"-\" for STDIN').short('i').long('input').arr().val(function (val) {\n  return val || this.reject(\"Option '--input' must have a value.\");\n}).end().opt().name('string').title('Input SVG data string').short('s').long('string').end().opt().name('folder').title('Input folder, optimize and rewrite all *.svg files').short('f').long('folder').val(function (val) {\n  return val || this.reject(\"Option '--folder' must have a value.\");\n}).end().opt().name('output').title('Output file or folder (by default the same as the input), \"-\" for STDOUT').short('o').long('output').arr().val(function (val) {\n  return val || this.reject(\"Option '--output' must have a value.\");\n}).end().opt().name('precision').title('Set number of digits in the fractional part, overrides plugins params').short('p').long('precision').val(function (val) {\n  return !isNaN(val) ? val : this.reject(\"Option '--precision' must be an integer number\");\n}).end().opt().name('config').title('Config file or JSON string to extend or replace default').long('config').val(function (val) {\n  return val || this.reject(\"Option '--config' must have a value.\");\n}).end().opt().name('disable').title('Disable plugin by name, \"--disable={PLUGIN1,PLUGIN2}\" for multiple plugins (*nix)').long('disable').arr().val(function (val) {\n  return val || this.reject(\"Option '--disable' must have a value.\");\n}).end().opt().name('enable').title('Enable plugin by name, \"--enable={PLUGIN3,PLUGIN4}\" for multiple plugins (*nix)').long('enable').arr().val(function (val) {\n  return val || this.reject(\"Option '--enable' must have a value.\");\n}).end().opt().name('datauri').title('Output as Data URI string (base64, URI encoded or unencoded)').long('datauri').val(function (val) {\n  return val || this.reject(\"Option '--datauri' must have one of the following values: 'base64', 'enc' or 'unenc'\");\n}).end().opt().name('multipass').title('Pass over SVGs multiple times to ensure all optimizations are applied').long('multipass').flag().end().opt().name('pretty').title('Make SVG pretty printed').long('pretty').flag().end().opt().name('indent').title('Indent number when pretty printing SVGs').long('indent').val(function (val) {\n  return !isNaN(val) ? val : this.reject(\"Option '--indent' must be an integer number\");\n}).end().opt().name('recursive').title('Use with \\'-f\\'. Optimizes *.svg files in folders recursively.').short('r').long('recursive').flag().end().opt().name('quiet').title('Only output error messages, not regular status messages').short('q').long('quiet').flag().end().opt().name('show-plugins').title('Show available plugins and exit').long('show-plugins').flag().end().arg().name('input').title('Alias to --input').arr().end().act(function (opts, args) {\n  var input = opts.input || args.input,\n      output = opts.output,\n      config = {}; // --show-plugins\n\n  if (opts['show-plugins']) {\n    showAvailablePlugins();\n    return;\n  } // w/o anything\n\n\n  if ((!input || input[0] === '-') && !opts.string && !opts.stdin && !opts.folder && process.stdin.isTTY === true) return this.usage();\n\n  if (typeof process == 'object' && process.versions && process.versions.node && PKG && PKG.engines.node) {\n    var nodeVersion = String(PKG.engines.node).match(/\\d*(\\.\\d+)*/)[0];\n\n    if (parseFloat(process.versions.node) < parseFloat(nodeVersion)) {\n      return printErrorAndExit(`Error: ${PKG.name} requires Node.js version ${nodeVersion} or higher.`);\n    }\n  } // --config\n\n\n  if (opts.config) {\n    // string\n    if (opts.config.charAt(0) === '{') {\n      try {\n        config = JSON.parse(opts.config);\n      } catch (e) {\n        return printErrorAndExit(`Error: Couldn't parse config JSON.\\n${String(e)}`);\n      } // external file\n\n    } else {\n      var configPath = PATH.resolve(opts.config),\n          configData;\n\n      try {\n        // require() adds some weird output on YML files\n        configData = FS.readFileSync(configPath, 'utf8');\n        config = JSON.parse(configData);\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          return printErrorAndExit(`Error: couldn't find config file '${opts.config}'.`);\n        } else if (err.code === 'EISDIR') {\n          return printErrorAndExit(`Error: directory '${opts.config}' is not a config file.`);\n        }\n\n        config = YAML.safeLoad(configData);\n        config.__DIR = PATH.dirname(configPath); // will use it to resolve custom plugins defined via path\n\n        if (!config || Array.isArray(config)) {\n          return printErrorAndExit(`Error: invalid config file '${opts.config}'.`);\n        }\n      }\n    }\n  } // --quiet\n\n\n  if (opts.quiet) {\n    config.quiet = opts.quiet;\n  } // --recursive\n\n\n  if (opts.recursive) {\n    config.recursive = opts.recursive;\n  } // --precision\n\n\n  if (opts.precision) {\n    var precision = Math.min(Math.max(0, parseInt(opts.precision)), 20);\n\n    if (!isNaN(precision)) {\n      config.floatPrecision = precision;\n    }\n  } // --disable\n\n\n  if (opts.disable) {\n    changePluginsState(opts.disable, false, config);\n  } // --enable\n\n\n  if (opts.enable) {\n    changePluginsState(opts.enable, true, config);\n  } // --multipass\n\n\n  if (opts.multipass) {\n    config.multipass = true;\n  } // --pretty\n\n\n  if (opts.pretty) {\n    config.js2svg = config.js2svg || {};\n    config.js2svg.pretty = true;\n    var indent;\n\n    if (opts.indent && !isNaN(indent = parseInt(opts.indent))) {\n      config.js2svg.indent = indent;\n    }\n  }\n\n  svgo = new SVGO(config); // --output\n\n  if (output) {\n    if (input && input[0] != '-') {\n      if (output.length == 1 && checkIsDir(output[0])) {\n        var dir = output[0];\n\n        for (var i = 0; i < input.length; i++) {\n          output[i] = checkIsDir(input[i]) ? input[i] : PATH.resolve(dir, PATH.basename(input[i]));\n        }\n      } else if (output.length < input.length) {\n        output = output.concat(input.slice(output.length));\n      }\n    }\n  } else if (input) {\n    output = input;\n  } else if (opts.string) {\n    output = '-';\n  }\n\n  if (opts.datauri) {\n    config.datauri = opts.datauri;\n  } // --folder\n\n\n  if (opts.folder) {\n    var ouputFolder = output && output[0] || opts.folder;\n    return optimizeFolder(config, opts.folder, ouputFolder).then(noop, printErrorAndExit);\n  } // --input\n\n\n  if (input) {\n    // STDIN\n    if (input[0] === '-') {\n      return new Promise((resolve, reject) => {\n        var data = '',\n            file = output[0];\n        process.stdin.on('data', chunk => data += chunk).once('end', () => processSVGData(config, {\n          input: 'string'\n        }, data, file).then(resolve, reject));\n      }); // file\n    } else {\n      return Promise.all(input.map((file, n) => optimizeFile(config, file, output[n]))).then(noop, printErrorAndExit);\n    } // --string\n\n  } else if (opts.string) {\n    var data = decodeSVGDatauri(opts.string);\n    return processSVGData(config, {\n      input: 'string'\n    }, data, output[0]);\n  }\n});\n/**\n * Change plugins state by names array.\n *\n * @param {Array} names plugins names\n * @param {Boolean} state active state\n * @param {Object} config original config\n * @return {Object} changed config\n */\n\nfunction changePluginsState(names, state, config) {\n  names.forEach(flattenPluginsCbk); // extend config\n\n  if (config.plugins) {\n    for (var name of names) {\n      var matched = false,\n          key;\n\n      for (var plugin of config.plugins) {\n        // get plugin name\n        if (typeof plugin === 'object') {\n          key = Object.keys(plugin)[0];\n        } else {\n          key = plugin;\n        } // if there is such a plugin name\n\n\n        if (key === name) {\n          // don't replace plugin's params with true\n          if (typeof plugin[key] !== 'object' || !state) {\n            plugin[key] = state;\n          } // mark it as matched\n\n\n          matched = true;\n        }\n      } // if not matched and current config is not full\n\n\n      if (!matched && !config.full) {\n        // push new plugin Object\n        config.plugins.push({\n          [name]: state\n        });\n        matched = true;\n      }\n    } // just push\n\n  } else {\n    config.plugins = names.map(name => ({\n      [name]: state\n    }));\n  }\n\n  return config;\n}\n/**\n * Flatten an array of plugins by invoking this callback on each element\n * whose value may be a comma separated list of plugins.\n *\n * @param {String} name Plugin name\n * @param {Number} index Plugin index\n * @param {Array} names Plugins being traversed\n */\n\n\nfunction flattenPluginsCbk(name, index, names) {\n  var split = name.split(',');\n\n  if (split.length > 1) {\n    names[index] = split.shift();\n    names.push.apply(names, split);\n  }\n}\n/**\n * Optimize SVG files in a directory.\n * @param {Object} config options\n * @param {string} dir input directory\n * @param {string} output output directory\n * @return {Promise}\n */\n\n\nfunction optimizeFolder(config, dir, output) {\n  if (!config.quiet) {\n    console.log(`Processing directory '${dir}':\\n`);\n  }\n\n  return readdir(dir).then(files => processDirectory(config, dir, files, output));\n}\n/**\n * Process given files, take only SVG.\n * @param {Object} config options\n * @param {string} dir input directory\n * @param {Array} files list of file names in the directory\n * @param {string} output output directory\n * @return {Promise}\n */\n\n\nfunction processDirectory(config, dir, files, output) {\n  // take only *.svg files, recursively if necessary\n  var svgFilesDescriptions = getFilesDescriptions(config, dir, files, output);\n  return svgFilesDescriptions.length ? Promise.all(svgFilesDescriptions.map(fileDescription => optimizeFile(config, fileDescription.inputPath, fileDescription.outputPath))) : Promise.reject(new Error(`No SVG files have been found in '${dir}' directory.`));\n}\n/**\n * Get svg files descriptions\n * @param {Object} config options\n * @param {string} dir input directory\n * @param {Array} files list of file names in the directory\n * @param {string} output output directory\n * @return {Array}\n */\n\n\nfunction getFilesDescriptions(config, dir, files, output) {\n  const filesInThisFolder = files.filter(name => regSVGFile.test(name)).map(name => ({\n    inputPath: PATH.resolve(dir, name),\n    outputPath: PATH.resolve(output, name)\n  }));\n  return config.recursive ? [].concat(filesInThisFolder, files.filter(name => checkIsDir(PATH.resolve(dir, name))).map(subFolderName => {\n    const subFolderPath = PATH.resolve(dir, subFolderName);\n    const subFolderFiles = FS.readdirSync(subFolderPath);\n    const subFolderOutput = PATH.resolve(output, subFolderName);\n    return getFilesDescriptions(config, subFolderPath, subFolderFiles, subFolderOutput);\n  }).reduce((a, b) => [].concat(a, b), [])) : filesInThisFolder;\n}\n/**\n * Read SVG file and pass to processing.\n * @param {Object} config options\n * @param {string} file\n * @param {string} output\n * @return {Promise}\n */\n\n\nfunction optimizeFile(config, file, output) {\n  return readFile(file, 'utf8').then(data => processSVGData(config, {\n    input: 'file',\n    path: file\n  }, data, output, file), error => checkOptimizeFileError(config, file, output, error));\n}\n/**\n * Optimize SVG data.\n * @param {Object} config options\n * @param {string} data SVG content to optimize\n * @param {string} output where to write optimized file\n * @param {string} [input] input file name (being used if output is a directory)\n * @return {Promise}\n */\n\n\nfunction processSVGData(config, info, data, output, input) {\n  var startTime = Date.now(),\n      prevFileSize = Buffer.byteLength(data, 'utf8');\n  return svgo.optimize(data, info).then(function (result) {\n    if (config.datauri) {\n      result.data = encodeSVGDatauri(result.data, config.datauri);\n    }\n\n    var resultFileSize = Buffer.byteLength(result.data, 'utf8'),\n        processingTime = Date.now() - startTime;\n    return writeOutput(input, output, result.data).then(function () {\n      if (!config.quiet && output != '-') {\n        if (input) {\n          console.log(`\\n${PATH.basename(input)}:`);\n        }\n\n        printTimeInfo(processingTime);\n        printProfitInfo(prevFileSize, resultFileSize);\n      }\n    }, error => Promise.reject(new Error(error.code === 'ENOTDIR' ? `Error: output '${output}' is not a directory.` : error)));\n  });\n}\n/**\n * Write result of an optimization.\n * @param {string} input\n * @param {string} output output file name. '-' for stdout\n * @param {string} data data to write\n * @return {Promise}\n */\n\n\nfunction writeOutput(input, output, data) {\n  if (output == '-') {\n    console.log(data);\n    return Promise.resolve();\n  }\n\n  mkdirp.sync(PATH.dirname(output));\n  return writeFile(output, data, 'utf8').catch(error => checkWriteFileError(input, output, data, error));\n}\n/**\n * Write a time taken by optimization.\n * @param {number} time time in milliseconds.\n */\n\n\nfunction printTimeInfo(time) {\n  console.log(`Done in ${time} ms!`);\n}\n/**\n * Write optimizing information in human readable format.\n * @param {number} inBytes size before optimization.\n * @param {number} outBytes size after optimization.\n */\n\n\nfunction printProfitInfo(inBytes, outBytes) {\n  var profitPercents = 100 - outBytes * 100 / inBytes;\n  console.log(Math.round(inBytes / 1024 * 1000) / 1000 + ' KiB' + (profitPercents < 0 ? ' + ' : ' - ') + chalk.green(Math.abs(Math.round(profitPercents * 10) / 10) + '%') + ' = ' + Math.round(outBytes / 1024 * 1000) / 1000 + ' KiB');\n}\n/**\n * Check for errors, if it's a dir optimize the dir.\n * @param {Object} config\n * @param {string} input\n * @param {string} output\n * @param {Error} error\n * @return {Promise}\n */\n\n\nfunction checkOptimizeFileError(config, input, output, error) {\n  if (error.code == 'EISDIR') {\n    return optimizeFolder(config, input, output);\n  } else if (error.code == 'ENOENT') {\n    return Promise.reject(new Error(`Error: no such file or directory '${error.path}'.`));\n  }\n\n  return Promise.reject(error);\n}\n/**\n * Check for saving file error. If the output is a dir, then write file there.\n * @param {string} input\n * @param {string} output\n * @param {string} data\n * @param {Error} error\n * @return {Promise}\n */\n\n\nfunction checkWriteFileError(input, output, data, error) {\n  if (error.code == 'EISDIR' && input) {\n    return writeFile(PATH.resolve(output, PATH.basename(input)), data, 'utf8');\n  } else {\n    return Promise.reject(error);\n  }\n}\n/**\n * Show list of available plugins with short description.\n */\n\n\nfunction showAvailablePlugins() {\n  console.log('Currently available plugins:'); // Flatten an array of plugins grouped per type, sort and write output\n\n  var list = [].concat.apply([], new SVGO().config.plugins).sort((a, b) => a.name.localeCompare(b.name)).map(plugin => ` [ ${chalk.green(plugin.name)} ] ${plugin.description}`).join('\\n');\n  console.log(list);\n}\n/**\n * Write an error and exit.\n * @param {Error} error\n * @return {Promise} a promise for running tests\n */\n\n\nfunction printErrorAndExit(error) {\n  console.error(chalk.red(error));\n  process.exit(1);\n  return Promise.reject(error); // for tests\n}","map":{"version":3,"names":["FS","require","PATH","chalk","mkdirp","promisify","readdir","readFile","writeFile","SVGO","YAML","PKG","encodeSVGDatauri","decodeSVGDatauri","checkIsDir","regSVGFile","noop","svgo","module","exports","Cmd","helpful","name","title","description","opt","short","long","only","flag","act","process","stdout","write","version","end","arr","val","reject","isNaN","arg","opts","args","input","output","config","showAvailablePlugins","string","stdin","folder","isTTY","usage","versions","node","engines","nodeVersion","String","match","parseFloat","printErrorAndExit","charAt","JSON","parse","e","configPath","resolve","configData","readFileSync","err","code","safeLoad","__DIR","dirname","Array","isArray","quiet","recursive","precision","Math","min","max","parseInt","floatPrecision","disable","changePluginsState","enable","multipass","pretty","js2svg","indent","length","dir","i","basename","concat","slice","datauri","ouputFolder","optimizeFolder","then","Promise","data","file","on","chunk","once","processSVGData","all","map","n","optimizeFile","names","state","forEach","flattenPluginsCbk","plugins","matched","key","plugin","Object","keys","full","push","index","split","shift","apply","console","log","files","processDirectory","svgFilesDescriptions","getFilesDescriptions","fileDescription","inputPath","outputPath","Error","filesInThisFolder","filter","test","subFolderName","subFolderPath","subFolderFiles","readdirSync","subFolderOutput","reduce","a","b","path","error","checkOptimizeFileError","info","startTime","Date","now","prevFileSize","Buffer","byteLength","optimize","result","resultFileSize","processingTime","writeOutput","printTimeInfo","printProfitInfo","sync","catch","checkWriteFileError","time","inBytes","outBytes","profitPercents","round","green","abs","list","sort","localeCompare","join","red","exit"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/svgo/lib/svgo/coa.js"],"sourcesContent":["/* jshint quotmark: false */\n'use strict';\n\nvar FS = require('fs'),\n    PATH = require('path'),\n    chalk = require('chalk'),\n    mkdirp = require('mkdirp'),\n    promisify = require('util.promisify'),\n    readdir = promisify(FS.readdir),\n    readFile = promisify(FS.readFile),\n    writeFile = promisify(FS.writeFile),\n    SVGO = require('../svgo.js'),\n    YAML = require('js-yaml'),\n    PKG = require('../../package.json'),\n    encodeSVGDatauri = require('./tools.js').encodeSVGDatauri,\n    decodeSVGDatauri = require('./tools.js').decodeSVGDatauri,\n    checkIsDir = require('./tools.js').checkIsDir,\n    regSVGFile = /\\.svg$/,\n    noop = () => {},\n    svgo;\n\n/**\n * Command-Option-Argument.\n *\n * @see https://github.com/veged/coa\n */\nmodule.exports = require('coa').Cmd()\n    .helpful()\n    .name(PKG.name)\n    .title(PKG.description)\n    .opt()\n        .name('version').title('Version')\n        .short('v').long('version')\n        .only()\n        .flag()\n        .act(function() {\n            // output the version to stdout instead of stderr if returned\n            process.stdout.write(PKG.version + '\\n');\n            // coa will run `.toString` on the returned value and send it to stderr\n            return '';\n        })\n        .end()\n    .opt()\n        .name('input').title('Input file, \"-\" for STDIN')\n        .short('i').long('input')\n        .arr()\n        .val(function(val) {\n            return val || this.reject(\"Option '--input' must have a value.\");\n        })\n        .end()\n    .opt()\n        .name('string').title('Input SVG data string')\n        .short('s').long('string')\n        .end()\n    .opt()\n        .name('folder').title('Input folder, optimize and rewrite all *.svg files')\n        .short('f').long('folder')\n        .val(function(val) {\n            return val || this.reject(\"Option '--folder' must have a value.\");\n        })\n        .end()\n    .opt()\n        .name('output').title('Output file or folder (by default the same as the input), \"-\" for STDOUT')\n        .short('o').long('output')\n        .arr()\n        .val(function(val) {\n            return val || this.reject(\"Option '--output' must have a value.\");\n        })\n        .end()\n    .opt()\n        .name('precision').title('Set number of digits in the fractional part, overrides plugins params')\n        .short('p').long('precision')\n        .val(function(val) {\n            return !isNaN(val) ? val : this.reject(\"Option '--precision' must be an integer number\");\n        })\n        .end()\n    .opt()\n        .name('config').title('Config file or JSON string to extend or replace default')\n        .long('config')\n        .val(function(val) {\n            return val || this.reject(\"Option '--config' must have a value.\");\n        })\n        .end()\n    .opt()\n        .name('disable').title('Disable plugin by name, \"--disable={PLUGIN1,PLUGIN2}\" for multiple plugins (*nix)')\n        .long('disable')\n        .arr()\n        .val(function(val) {\n            return val || this.reject(\"Option '--disable' must have a value.\");\n        })\n        .end()\n    .opt()\n        .name('enable').title('Enable plugin by name, \"--enable={PLUGIN3,PLUGIN4}\" for multiple plugins (*nix)')\n        .long('enable')\n        .arr()\n        .val(function(val) {\n            return val || this.reject(\"Option '--enable' must have a value.\");\n        })\n        .end()\n    .opt()\n        .name('datauri').title('Output as Data URI string (base64, URI encoded or unencoded)')\n        .long('datauri')\n        .val(function(val) {\n            return val || this.reject(\"Option '--datauri' must have one of the following values: 'base64', 'enc' or 'unenc'\");\n        })\n        .end()\n    .opt()\n        .name('multipass').title('Pass over SVGs multiple times to ensure all optimizations are applied')\n        .long('multipass')\n        .flag()\n        .end()\n    .opt()\n        .name('pretty').title('Make SVG pretty printed')\n        .long('pretty')\n        .flag()\n        .end()\n    .opt()\n        .name('indent').title('Indent number when pretty printing SVGs')\n        .long('indent')\n        .val(function(val) {\n            return !isNaN(val) ? val : this.reject(\"Option '--indent' must be an integer number\");\n        })\n        .end()\n    .opt()\n        .name('recursive').title('Use with \\'-f\\'. Optimizes *.svg files in folders recursively.')\n        .short('r').long('recursive')\n        .flag()\n        .end()\n    .opt()\n        .name('quiet').title('Only output error messages, not regular status messages')\n        .short('q').long('quiet')\n        .flag()\n        .end()\n    .opt()\n        .name('show-plugins').title('Show available plugins and exit')\n        .long('show-plugins')\n        .flag()\n        .end()\n    .arg()\n        .name('input').title('Alias to --input')\n        .arr()\n        .end()\n    .act(function(opts, args) {\n        var input = opts.input || args.input,\n            output = opts.output,\n            config = {};\n\n        // --show-plugins\n        if (opts['show-plugins']) {\n            showAvailablePlugins();\n            return;\n        }\n\n        // w/o anything\n        if (\n            (!input || input[0] === '-') &&\n            !opts.string &&\n            !opts.stdin &&\n            !opts.folder &&\n            process.stdin.isTTY === true\n        ) return this.usage();\n\n        if (typeof process == 'object' && process.versions && process.versions.node && PKG && PKG.engines.node) {\n            var nodeVersion = String(PKG.engines.node).match(/\\d*(\\.\\d+)*/)[0];\n            if (parseFloat(process.versions.node) < parseFloat(nodeVersion)) {\n                return printErrorAndExit(`Error: ${PKG.name} requires Node.js version ${nodeVersion} or higher.`);\n            }\n        }\n\n        // --config\n        if (opts.config) {\n            // string\n            if (opts.config.charAt(0) === '{') {\n                try {\n                    config = JSON.parse(opts.config);\n                } catch (e) {\n                    return printErrorAndExit(`Error: Couldn't parse config JSON.\\n${String(e)}`);\n                }\n            // external file\n            } else {\n                var configPath = PATH.resolve(opts.config),\n                    configData;\n                try {\n                    // require() adds some weird output on YML files\n                    configData = FS.readFileSync(configPath, 'utf8');\n                    config = JSON.parse(configData);\n                } catch (err) {\n                    if (err.code === 'ENOENT') {\n                        return printErrorAndExit(`Error: couldn't find config file '${opts.config}'.`);\n                    } else if (err.code === 'EISDIR') {\n                        return printErrorAndExit(`Error: directory '${opts.config}' is not a config file.`);\n                    }\n                    config = YAML.safeLoad(configData);\n                    config.__DIR = PATH.dirname(configPath); // will use it to resolve custom plugins defined via path\n\n                    if (!config || Array.isArray(config)) {\n                        return printErrorAndExit(`Error: invalid config file '${opts.config}'.`);\n                    }\n                }\n            }\n        }\n\n        // --quiet\n        if (opts.quiet) {\n            config.quiet = opts.quiet;\n        }\n\n        // --recursive\n        if (opts.recursive) {\n            config.recursive = opts.recursive;\n        }\n\n        // --precision\n        if (opts.precision) {\n            var precision = Math.min(Math.max(0, parseInt(opts.precision)), 20);\n            if (!isNaN(precision)) {\n                config.floatPrecision = precision;\n            }\n        }\n\n        // --disable\n        if (opts.disable) {\n            changePluginsState(opts.disable, false, config);\n        }\n\n        // --enable\n        if (opts.enable) {\n            changePluginsState(opts.enable, true, config);\n        }\n\n        // --multipass\n        if (opts.multipass) {\n            config.multipass = true;\n        }\n\n        // --pretty\n        if (opts.pretty) {\n            config.js2svg = config.js2svg || {};\n            config.js2svg.pretty = true;\n            var indent;\n            if (opts.indent && !isNaN(indent = parseInt(opts.indent))) {\n                config.js2svg.indent = indent;\n            }\n        }\n\n        svgo = new SVGO(config);\n\n        // --output\n        if (output) {\n            if (input && input[0] != '-') {\n                if (output.length == 1 && checkIsDir(output[0])) {\n                    var dir = output[0];\n                    for (var i = 0; i < input.length; i++) {\n                        output[i] = checkIsDir(input[i]) ? input[i] : PATH.resolve(dir, PATH.basename(input[i]));\n                    }\n                } else if (output.length < input.length) {\n                    output = output.concat(input.slice(output.length));\n                }\n            }\n        } else if (input) {\n            output = input;\n        } else if (opts.string) {\n            output = '-';\n        }\n\n        if (opts.datauri) {\n            config.datauri = opts.datauri;\n        }\n\n        // --folder\n        if (opts.folder) {\n            var ouputFolder = output && output[0] || opts.folder;\n            return optimizeFolder(config, opts.folder, ouputFolder).then(noop, printErrorAndExit);\n        }\n\n        // --input\n        if (input) {\n            // STDIN\n            if (input[0] === '-') {\n                return new Promise((resolve, reject) => {\n                    var data = '',\n                        file = output[0];\n\n                    process.stdin\n                        .on('data', chunk => data += chunk)\n                        .once('end', () => processSVGData(config, {input: 'string'}, data, file).then(resolve, reject));\n                });\n            // file\n            } else {\n                return Promise.all(input.map((file, n) => optimizeFile(config, file, output[n])))\n                    .then(noop, printErrorAndExit);\n            }\n\n        // --string\n        } else if (opts.string) {\n            var data = decodeSVGDatauri(opts.string);\n\n            return processSVGData(config, {input: 'string'}, data, output[0]);\n        }\n    });\n\n/**\n * Change plugins state by names array.\n *\n * @param {Array} names plugins names\n * @param {Boolean} state active state\n * @param {Object} config original config\n * @return {Object} changed config\n */\nfunction changePluginsState(names, state, config) {\n    names.forEach(flattenPluginsCbk);\n\n    // extend config\n    if (config.plugins) {\n        for (var name of names) {\n            var matched = false,\n                key;\n\n            for (var plugin of config.plugins) {\n                // get plugin name\n                if (typeof plugin === 'object') {\n                    key = Object.keys(plugin)[0];\n                } else {\n                    key = plugin;\n                }\n\n                // if there is such a plugin name\n                if (key === name) {\n                    // don't replace plugin's params with true\n                    if (typeof plugin[key] !== 'object' || !state) {\n                        plugin[key] = state;\n                    }\n                    // mark it as matched\n                    matched = true;\n                }\n            }\n\n            // if not matched and current config is not full\n            if (!matched && !config.full) {\n                // push new plugin Object\n                config.plugins.push({ [name]: state });\n                matched = true;\n            }\n        }\n    // just push\n    } else {\n        config.plugins = names.map(name => ({ [name]: state }));\n    }\n    return config;\n}\n\n/**\n * Flatten an array of plugins by invoking this callback on each element\n * whose value may be a comma separated list of plugins.\n *\n * @param {String} name Plugin name\n * @param {Number} index Plugin index\n * @param {Array} names Plugins being traversed\n */\nfunction flattenPluginsCbk(name, index, names)\n{\n    var split = name.split(',');\n\n    if(split.length > 1) {\n        names[index] = split.shift();\n        names.push.apply(names, split);\n    }\n\n}\n\n/**\n * Optimize SVG files in a directory.\n * @param {Object} config options\n * @param {string} dir input directory\n * @param {string} output output directory\n * @return {Promise}\n */\nfunction optimizeFolder(config, dir, output) {\n    if (!config.quiet) {\n        console.log(`Processing directory '${dir}':\\n`);\n    }\n    return readdir(dir).then(files => processDirectory(config, dir, files, output));\n}\n\n/**\n * Process given files, take only SVG.\n * @param {Object} config options\n * @param {string} dir input directory\n * @param {Array} files list of file names in the directory\n * @param {string} output output directory\n * @return {Promise}\n */\nfunction processDirectory(config, dir, files, output) {\n    // take only *.svg files, recursively if necessary\n    var svgFilesDescriptions = getFilesDescriptions(config, dir, files, output);\n\n    return svgFilesDescriptions.length ?\n        Promise.all(svgFilesDescriptions.map(fileDescription => optimizeFile(config, fileDescription.inputPath, fileDescription.outputPath))) :\n        Promise.reject(new Error(`No SVG files have been found in '${dir}' directory.`));\n}\n\n/**\n * Get svg files descriptions\n * @param {Object} config options\n * @param {string} dir input directory\n * @param {Array} files list of file names in the directory\n * @param {string} output output directory\n * @return {Array}\n */\nfunction getFilesDescriptions(config, dir, files, output) {\n    const filesInThisFolder = files\n        .filter(name => regSVGFile.test(name))\n        .map(name => ({\n            inputPath: PATH.resolve(dir, name),\n            outputPath: PATH.resolve(output, name),\n        }));\n\n    return config.recursive ?\n        [].concat(\n            filesInThisFolder,\n            files\n                .filter(name => checkIsDir(PATH.resolve(dir, name)))\n                .map(subFolderName => {\n                    const subFolderPath = PATH.resolve(dir, subFolderName);\n                    const subFolderFiles = FS.readdirSync(subFolderPath);\n                    const subFolderOutput = PATH.resolve(output, subFolderName);\n                    return getFilesDescriptions(config, subFolderPath, subFolderFiles, subFolderOutput);\n                })\n                .reduce((a, b) => [].concat(a, b), [])\n        ) :\n        filesInThisFolder;\n}\n\n/**\n * Read SVG file and pass to processing.\n * @param {Object} config options\n * @param {string} file\n * @param {string} output\n * @return {Promise}\n */\nfunction optimizeFile(config, file, output) {\n    return readFile(file, 'utf8').then(\n        data => processSVGData(config, {input: 'file', path: file}, data, output, file),\n        error => checkOptimizeFileError(config, file, output, error)\n    );\n}\n\n/**\n * Optimize SVG data.\n * @param {Object} config options\n * @param {string} data SVG content to optimize\n * @param {string} output where to write optimized file\n * @param {string} [input] input file name (being used if output is a directory)\n * @return {Promise}\n */\nfunction processSVGData(config, info, data, output, input) {\n    var startTime = Date.now(),\n        prevFileSize = Buffer.byteLength(data, 'utf8');\n\n    return svgo.optimize(data, info).then(function(result) {\n        if (config.datauri) {\n            result.data = encodeSVGDatauri(result.data, config.datauri);\n        }\n        var resultFileSize = Buffer.byteLength(result.data, 'utf8'),\n            processingTime = Date.now() - startTime;\n\n        return writeOutput(input, output, result.data).then(function() {\n            if (!config.quiet && output != '-') {\n                if (input) {\n                    console.log(`\\n${PATH.basename(input)}:`);\n                }\n                printTimeInfo(processingTime);\n                printProfitInfo(prevFileSize, resultFileSize);\n            }\n        },\n        error => Promise.reject(new Error(error.code === 'ENOTDIR' ? `Error: output '${output}' is not a directory.` : error)));\n    });\n}\n\n/**\n * Write result of an optimization.\n * @param {string} input\n * @param {string} output output file name. '-' for stdout\n * @param {string} data data to write\n * @return {Promise}\n */\nfunction writeOutput(input, output, data) {\n    if (output == '-') {\n        console.log(data);\n        return Promise.resolve();\n    }\n\n    mkdirp.sync(PATH.dirname(output));\n\n    return writeFile(output, data, 'utf8').catch(error => checkWriteFileError(input, output, data, error));\n}\n\n\n/**\n * Write a time taken by optimization.\n * @param {number} time time in milliseconds.\n */\nfunction printTimeInfo(time) {\n    console.log(`Done in ${time} ms!`);\n}\n\n/**\n * Write optimizing information in human readable format.\n * @param {number} inBytes size before optimization.\n * @param {number} outBytes size after optimization.\n */\nfunction printProfitInfo(inBytes, outBytes) {\n    var profitPercents = 100 - outBytes * 100 / inBytes;\n\n    console.log(\n        (Math.round((inBytes / 1024) * 1000) / 1000) + ' KiB' +\n        (profitPercents < 0 ? ' + ' : ' - ') +\n        chalk.green(Math.abs((Math.round(profitPercents * 10) / 10)) + '%') + ' = ' +\n        (Math.round((outBytes / 1024) * 1000) / 1000) + ' KiB'\n    );\n}\n\n/**\n * Check for errors, if it's a dir optimize the dir.\n * @param {Object} config\n * @param {string} input\n * @param {string} output\n * @param {Error} error\n * @return {Promise}\n */\nfunction checkOptimizeFileError(config, input, output, error) {\n    if (error.code == 'EISDIR') {\n        return optimizeFolder(config, input, output);\n    } else if (error.code == 'ENOENT') {\n        return Promise.reject(new Error(`Error: no such file or directory '${error.path}'.`));\n    }\n    return Promise.reject(error);\n}\n\n/**\n * Check for saving file error. If the output is a dir, then write file there.\n * @param {string} input\n * @param {string} output\n * @param {string} data\n * @param {Error} error\n * @return {Promise}\n */\nfunction checkWriteFileError(input, output, data, error) {\n    if (error.code == 'EISDIR' && input) {\n        return writeFile(PATH.resolve(output, PATH.basename(input)), data, 'utf8');\n    } else {\n        return Promise.reject(error);\n    }\n}\n\n/**\n * Show list of available plugins with short description.\n */\nfunction showAvailablePlugins() {\n    console.log('Currently available plugins:');\n\n    // Flatten an array of plugins grouped per type, sort and write output\n    var list = [].concat.apply([], new SVGO().config.plugins)\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map(plugin => ` [ ${chalk.green(plugin.name)} ] ${plugin.description}`)\n        .join('\\n');\n    console.log(list);\n}\n\n/**\n * Write an error and exit.\n * @param {Error} error\n * @return {Promise} a promise for running tests\n */\nfunction printErrorAndExit(error) {\n    console.error(chalk.red(error));\n    process.exit(1);\n    return Promise.reject(error); // for tests\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}