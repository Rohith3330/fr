{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Type = require('../Type'); // https://262.ecma-international.org/11.0/#sec-numeric-types-bigint-bitwiseNOT\n\n\nmodule.exports = function BigIntBitwiseNOT(x) {\n  if (Type(x) !== 'BigInt') {\n    throw new $TypeError('Assertion failed: `x` argument must be a BigInt');\n  }\n\n  return -x - $BigInt(1);\n};","map":{"version":3,"names":["GetIntrinsic","require","$BigInt","$TypeError","Type","module","exports","BigIntBitwiseNOT","x"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2021/BigInt/bitwiseNOT.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Type = require('../Type');\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-bigint-bitwiseNOT\n\nmodule.exports = function BigIntBitwiseNOT(x) {\n\tif (Type(x) !== 'BigInt') {\n\t\tthrow new $TypeError('Assertion failed: `x` argument must be a BigInt');\n\t}\n\treturn -x - $BigInt(1);\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,OAAO,GAAGF,YAAY,CAAC,UAAD,EAAa,IAAb,CAA1B;AACA,IAAIG,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAII,IAAI,GAAGH,OAAO,CAAC,SAAD,CAAlB,C,CAEA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,CAA1B,EAA6B;EAC7C,IAAIJ,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,MAAM,IAAIL,UAAJ,CAAe,iDAAf,CAAN;EACA;;EACD,OAAO,CAACK,CAAD,GAAKN,OAAO,CAAC,CAAD,CAAnB;AACA,CALD"},"metadata":{},"sourceType":"script"}