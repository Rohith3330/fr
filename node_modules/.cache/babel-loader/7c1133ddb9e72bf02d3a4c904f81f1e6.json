{"ast":null,"code":"var OMIT_PLUSSIGN = /^(?:\\+|(-))?0*(\\d*)(?:\\.0*|(\\.\\d*?)0*)?$/;\nvar KEEP_PLUSSIGN = /^([\\+\\-])?0*(\\d*)(?:\\.0*|(\\.\\d*?)0*)?$/;\nvar unsafeToRemovePlusSignAfter = {\n  Dimension: true,\n  Hash: true,\n  Identifier: true,\n  Number: true,\n  Raw: true,\n  UnicodeRange: true\n};\n\nfunction packNumber(value, item) {\n  // omit plus sign only if no prev or prev is safe type\n  var regexp = item && item.prev !== null && unsafeToRemovePlusSignAfter.hasOwnProperty(item.prev.data.type) ? KEEP_PLUSSIGN : OMIT_PLUSSIGN; // 100 -> '100'\n  // 00100 -> '100'\n  // +100 -> '100' (only when safe, e.g. omitting plus sign for 1px+1px leads to single dimension instead of two)\n  // -100 -> '-100'\n  // 0.123 -> '.123'\n  // 0.12300 -> '.123'\n  // 0.0 -> ''\n  // 0 -> ''\n  // -0 -> '-'\n\n  value = String(value).replace(regexp, '$1$2$3');\n\n  if (value === '' || value === '-') {\n    value = '0';\n  }\n\n  return value;\n}\n\nmodule.exports = function (node, item) {\n  node.value = packNumber(node.value, item);\n};\n\nmodule.exports.pack = packNumber;","map":{"version":3,"names":["OMIT_PLUSSIGN","KEEP_PLUSSIGN","unsafeToRemovePlusSignAfter","Dimension","Hash","Identifier","Number","Raw","UnicodeRange","packNumber","value","item","regexp","prev","hasOwnProperty","data","type","String","replace","module","exports","node","pack"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/csso/lib/replace/Number.js"],"sourcesContent":["var OMIT_PLUSSIGN = /^(?:\\+|(-))?0*(\\d*)(?:\\.0*|(\\.\\d*?)0*)?$/;\nvar KEEP_PLUSSIGN = /^([\\+\\-])?0*(\\d*)(?:\\.0*|(\\.\\d*?)0*)?$/;\nvar unsafeToRemovePlusSignAfter = {\n    Dimension: true,\n    Hash: true,\n    Identifier: true,\n    Number: true,\n    Raw: true,\n    UnicodeRange: true\n};\n\nfunction packNumber(value, item) {\n    // omit plus sign only if no prev or prev is safe type\n    var regexp = item && item.prev !== null && unsafeToRemovePlusSignAfter.hasOwnProperty(item.prev.data.type)\n        ? KEEP_PLUSSIGN\n        : OMIT_PLUSSIGN;\n\n    // 100 -> '100'\n    // 00100 -> '100'\n    // +100 -> '100' (only when safe, e.g. omitting plus sign for 1px+1px leads to single dimension instead of two)\n    // -100 -> '-100'\n    // 0.123 -> '.123'\n    // 0.12300 -> '.123'\n    // 0.0 -> ''\n    // 0 -> ''\n    // -0 -> '-'\n    value = String(value).replace(regexp, '$1$2$3');\n\n    if (value === '' || value === '-') {\n        value = '0';\n    }\n\n    return value;\n}\n\nmodule.exports = function(node, item) {\n    node.value = packNumber(node.value, item);\n};\nmodule.exports.pack = packNumber;\n"],"mappings":"AAAA,IAAIA,aAAa,GAAG,0CAApB;AACA,IAAIC,aAAa,GAAG,wCAApB;AACA,IAAIC,2BAA2B,GAAG;EAC9BC,SAAS,EAAE,IADmB;EAE9BC,IAAI,EAAE,IAFwB;EAG9BC,UAAU,EAAE,IAHkB;EAI9BC,MAAM,EAAE,IAJsB;EAK9BC,GAAG,EAAE,IALyB;EAM9BC,YAAY,EAAE;AANgB,CAAlC;;AASA,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiC;EAC7B;EACA,IAAIC,MAAM,GAAGD,IAAI,IAAIA,IAAI,CAACE,IAAL,KAAc,IAAtB,IAA8BX,2BAA2B,CAACY,cAA5B,CAA2CH,IAAI,CAACE,IAAL,CAAUE,IAAV,CAAeC,IAA1D,CAA9B,GACPf,aADO,GAEPD,aAFN,CAF6B,CAM7B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACAU,KAAK,GAAGO,MAAM,CAACP,KAAD,CAAN,CAAcQ,OAAd,CAAsBN,MAAtB,EAA8B,QAA9B,CAAR;;EAEA,IAAIF,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAK,GAA9B,EAAmC;IAC/BA,KAAK,GAAG,GAAR;EACH;;EAED,OAAOA,KAAP;AACH;;AAEDS,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAeV,IAAf,EAAqB;EAClCU,IAAI,CAACX,KAAL,GAAaD,UAAU,CAACY,IAAI,CAACX,KAAN,EAAaC,IAAb,CAAvB;AACH,CAFD;;AAGAQ,MAAM,CAACC,OAAP,CAAeE,IAAf,GAAsBb,UAAtB"},"metadata":{},"sourceType":"script"}