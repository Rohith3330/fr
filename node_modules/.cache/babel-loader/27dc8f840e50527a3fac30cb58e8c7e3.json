{"ast":null,"code":"const {\n  validate: validateOptions\n} = require('schema-utils');\n\nconst {\n  getRefreshGlobalScope,\n  getWebpackVersion\n} = require('./globals');\n\nconst {\n  getAdditionalEntries,\n  getIntegrationEntry,\n  getRefreshGlobal,\n  getSocketIntegration,\n  injectRefreshEntry,\n  injectRefreshLoader,\n  makeRefreshRuntimeModule,\n  normalizeOptions\n} = require('./utils');\n\nconst schema = require('./options.json');\n\nclass ReactRefreshPlugin {\n  /**\n   * @param {import('./types').ReactRefreshPluginOptions} [options] Options for react-refresh-plugin.\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    validateOptions(schema, options, {\n      name: 'React Refresh Plugin',\n      baseDataPath: 'options'\n    });\n    /**\n     * @readonly\n     * @type {import('./types').NormalizedPluginOptions}\n     */\n\n    this.options = normalizeOptions(options);\n  }\n  /**\n   * Applies the plugin.\n   * @param {import('webpack').Compiler} compiler A webpack compiler object.\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    // Skip processing in non-development mode, but allow manual force-enabling\n    if ( // Webpack do not set process.env.NODE_ENV, so we need to check for mode.\n    // Ref: https://github.com/webpack/webpack/issues/7074\n    (compiler.options.mode !== 'development' || // We also check for production process.env.NODE_ENV,\n    // in case it was set and mode is non-development (e.g. 'none')\n    process.env.NODE_ENV && process.env.NODE_ENV === 'production') && !this.options.forceEnable) {\n      return;\n    }\n\n    const webpackVersion = getWebpackVersion(compiler);\n    const logger = compiler.getInfrastructureLogger(this.constructor.name); // Get Webpack imports from compiler instance (if available) -\n    // this allow mono-repos to use different versions of Webpack without conflicts.\n\n    const webpack = compiler.webpack || require('webpack');\n\n    const {\n      DefinePlugin,\n      EntryDependency,\n      EntryPlugin,\n      ModuleFilenameHelpers,\n      NormalModule,\n      ProvidePlugin,\n      RuntimeGlobals,\n      Template\n    } = webpack; // Inject react-refresh context to all Webpack entry points.\n    // This should create `EntryDependency` objects when available,\n    // and fallback to patching the `entry` object for legacy workflows.\n\n    const addEntries = getAdditionalEntries({\n      devServer: compiler.options.devServer,\n      options: this.options\n    });\n\n    if (EntryPlugin) {\n      // Prepended entries does not care about injection order,\n      // so we can utilise EntryPlugin for simpler logic.\n      addEntries.prependEntries.forEach(entry => {\n        new EntryPlugin(compiler.context, entry, {\n          name: undefined\n        }).apply(compiler);\n      });\n      const integrationEntry = getIntegrationEntry(this.options.overlay.sockIntegration);\n      const socketEntryData = [];\n      compiler.hooks.make.tap({\n        name: this.constructor.name,\n        stage: Number.POSITIVE_INFINITY\n      }, compilation => {\n        // Exhaustively search all entries for `integrationEntry`.\n        // If found, mark those entries and the index of `integrationEntry`.\n        for (const [name, entryData] of compilation.entries.entries()) {\n          const index = entryData.dependencies.findIndex(dep => dep.request && dep.request.includes(integrationEntry));\n\n          if (index !== -1) {\n            socketEntryData.push({\n              name,\n              index\n            });\n          }\n        }\n      }); // Overlay entries need to be injected AFTER integration's entry,\n      // so we will loop through everything in `finishMake` instead of `make`.\n      // This ensures we can traverse all entry points and inject stuff with the correct order.\n\n      addEntries.overlayEntries.forEach((entry, idx, arr) => {\n        compiler.hooks.finishMake.tapPromise({\n          name: this.constructor.name,\n          stage: Number.MIN_SAFE_INTEGER + (arr.length - idx - 1)\n        }, compilation => {\n          // Only hook into the current compiler\n          if (compilation.compiler !== compiler) {\n            return Promise.resolve();\n          }\n\n          const injectData = socketEntryData.length ? socketEntryData : [{\n            name: undefined\n          }];\n          return Promise.all(injectData.map(_ref => {\n            let {\n              name,\n              index\n            } = _ref;\n            return new Promise((resolve, reject) => {\n              const options = {\n                name\n              };\n              const dep = EntryPlugin.createDependency(entry, options);\n              compilation.addEntry(compiler.context, dep, options, err => {\n                if (err) return reject(err); // If the entry is not a global one,\n                // and we have registered the index for integration entry,\n                // we will reorder all entry dependencies to our desired order.\n                // That is, to have additional entries DIRECTLY behind integration entry.\n\n                if (name && typeof index !== 'undefined') {\n                  const entryData = compilation.entries.get(name);\n                  entryData.dependencies.splice(index + 1, 0, entryData.dependencies.splice(entryData.dependencies.length - 1, 1)[0]);\n                }\n\n                resolve();\n              });\n            });\n          })).then(() => {});\n        });\n      });\n    } else {\n      compiler.options.entry = injectRefreshEntry(compiler.options.entry, addEntries);\n    } // Inject necessary modules and variables to bundle's global scope\n\n\n    const refreshGlobal = getRefreshGlobalScope(RuntimeGlobals || {});\n    /** @type {Record<string, string | boolean>}*/\n\n    const definedModules = {\n      // Mapping of react-refresh globals to Webpack runtime globals\n      $RefreshReg$: `${refreshGlobal}.register`,\n      $RefreshSig$: `${refreshGlobal}.signature`,\n      'typeof $RefreshReg$': 'function',\n      'typeof $RefreshSig$': 'function',\n      // Library mode\n      __react_refresh_library__: JSON.stringify(Template.toIdentifier(this.options.library || compiler.options.output.uniqueName || compiler.options.output.library))\n    };\n    /** @type {Record<string, string>} */\n\n    const providedModules = {\n      __react_refresh_utils__: require.resolve('./runtime/RefreshUtils')\n    };\n\n    if (this.options.overlay === false) {\n      // Stub errorOverlay module so their calls can be erased\n      definedModules.__react_refresh_error_overlay__ = false;\n      definedModules.__react_refresh_polyfill_url__ = false;\n      definedModules.__react_refresh_socket__ = false;\n    } else {\n      definedModules.__react_refresh_polyfill_url__ = this.options.overlay.useURLPolyfill || false;\n\n      if (this.options.overlay.module) {\n        providedModules.__react_refresh_error_overlay__ = require.resolve(this.options.overlay.module);\n      }\n\n      if (this.options.overlay.sockIntegration) {\n        providedModules.__react_refresh_socket__ = getSocketIntegration(this.options.overlay.sockIntegration);\n      }\n    }\n\n    new DefinePlugin(definedModules).apply(compiler);\n    new ProvidePlugin(providedModules).apply(compiler);\n    const match = ModuleFilenameHelpers.matchObject.bind(undefined, this.options);\n    let loggedHotWarning = false;\n    compiler.hooks.compilation.tap(this.constructor.name, (compilation, _ref2) => {\n      let {\n        normalModuleFactory\n      } = _ref2;\n\n      // Only hook into the current compiler\n      if (compilation.compiler !== compiler) {\n        return;\n      } // Tap into version-specific compilation hooks\n\n\n      switch (webpackVersion) {\n        case 4:\n          {\n            const outputOptions = compilation.mainTemplate.outputOptions;\n\n            compilation.mainTemplate.hooks.require.tap(this.constructor.name, // Constructs the module template for react-refresh\n            (source, chunk, hash) => {\n              // Check for the output filename\n              // This is to ensure we are processing a JS-related chunk\n              let filename = outputOptions.filename;\n\n              if (typeof filename === 'function') {\n                // Only usage of the `chunk` property is documented by Webpack.\n                // However, some internal Webpack plugins uses other properties,\n                // so we also pass them through to be on the safe side.\n                filename = filename({\n                  contentHashType: 'javascript',\n                  chunk,\n                  hash\n                });\n              } // Check whether the current compilation is outputting to JS,\n              // since other plugins can trigger compilations for other file types too.\n              // If we apply the transform to them, their compilation will break fatally.\n              // One prominent example of this is the HTMLWebpackPlugin.\n              // If filename is falsy, something is terribly wrong and there's nothing we can do.\n\n\n              if (!filename || !filename.includes('.js')) {\n                return source;\n              } // Split template source code into lines for easier processing\n\n\n              const lines = source.split('\\n'); // Webpack generates this line when the MainTemplate is called\n\n              const moduleInitializationLineNumber = lines.findIndex(line => line.includes('modules[moduleId].call(')); // Unable to find call to module execution -\n              // this happens if the current module does not call MainTemplate.\n              // In this case, we will return the original source and won't mess with it.\n\n              if (moduleInitializationLineNumber === -1) {\n                return source;\n              }\n\n              const moduleInterceptor = Template.asString([`${refreshGlobal}.setup(moduleId);`, 'try {', Template.indent(lines[moduleInitializationLineNumber]), '} finally {', Template.indent(`${refreshGlobal}.cleanup(moduleId);`), '}']);\n              return Template.asString([...lines.slice(0, moduleInitializationLineNumber), '', outputOptions.strictModuleExceptionHandling ? Template.indent(moduleInterceptor) : moduleInterceptor, '', ...lines.slice(moduleInitializationLineNumber + 1, lines.length)]);\n            });\n\n            compilation.mainTemplate.hooks.requireExtensions.tap(this.constructor.name, // Setup react-refresh globals as extensions to Webpack's require function\n            source => {\n              return Template.asString([source, '', getRefreshGlobal(Template)]);\n            });\n            normalModuleFactory.hooks.afterResolve.tap(this.constructor.name, // Add react-refresh loader to process files that matches specified criteria\n            data => {\n              return injectRefreshLoader(data, {\n                match,\n                options: {\n                  const: false,\n                  esModule: false\n                }\n              });\n            });\n            compilation.hooks.normalModuleLoader.tap( // `Number.POSITIVE_INFINITY` ensures this check will run only after all other taps\n            {\n              name: this.constructor.name,\n              stage: Number.POSITIVE_INFINITY\n            }, // Check for existence of the HMR runtime -\n            // it is the foundation to this plugin working correctly\n            context => {\n              if (!context.hot && !loggedHotWarning) {\n                logger.warn(['Hot Module Replacement (HMR) is not enabled!', 'React Refresh requires HMR to function properly.'].join(' '));\n                loggedHotWarning = true;\n              }\n            });\n            break;\n          }\n\n        case 5:\n          {\n            // Set factory for EntryDependency which is used to initialise the module\n            compilation.dependencyFactories.set(EntryDependency, normalModuleFactory);\n            const ReactRefreshRuntimeModule = makeRefreshRuntimeModule(webpack);\n            compilation.hooks.additionalTreeRuntimeRequirements.tap(this.constructor.name, // Setup react-refresh globals with a Webpack runtime module\n            (chunk, runtimeRequirements) => {\n              runtimeRequirements.add(RuntimeGlobals.interceptModuleExecution);\n              runtimeRequirements.add(RuntimeGlobals.moduleCache);\n              runtimeRequirements.add(refreshGlobal);\n              compilation.addRuntimeModule(chunk, new ReactRefreshRuntimeModule());\n            });\n            normalModuleFactory.hooks.afterResolve.tap(this.constructor.name, // Add react-refresh loader to process files that matches specified criteria\n            resolveData => {\n              injectRefreshLoader(resolveData.createData, {\n                match,\n                options: {\n                  const: compilation.runtimeTemplate.supportsConst(),\n                  esModule: this.options.esModule\n                }\n              });\n            });\n            NormalModule.getCompilationHooks(compilation).loader.tap( // `Infinity` ensures this check will run only after all other taps\n            {\n              name: this.constructor.name,\n              stage: Infinity\n            }, // Check for existence of the HMR runtime -\n            // it is the foundation to this plugin working correctly\n            context => {\n              if (!context.hot && !loggedHotWarning) {\n                logger.warn(['Hot Module Replacement (HMR) is not enabled!', 'React Refresh requires HMR to function properly.'].join(' '));\n                loggedHotWarning = true;\n              }\n            });\n            break;\n          }\n\n        default:\n          {// Do nothing - this should be an impossible case\n          }\n      }\n    });\n  }\n\n}\n\nmodule.exports.ReactRefreshPlugin = ReactRefreshPlugin;\nmodule.exports = ReactRefreshPlugin;","map":{"version":3,"names":["validate","validateOptions","require","getRefreshGlobalScope","getWebpackVersion","getAdditionalEntries","getIntegrationEntry","getRefreshGlobal","getSocketIntegration","injectRefreshEntry","injectRefreshLoader","makeRefreshRuntimeModule","normalizeOptions","schema","ReactRefreshPlugin","constructor","options","name","baseDataPath","apply","compiler","mode","process","env","NODE_ENV","forceEnable","webpackVersion","logger","getInfrastructureLogger","webpack","DefinePlugin","EntryDependency","EntryPlugin","ModuleFilenameHelpers","NormalModule","ProvidePlugin","RuntimeGlobals","Template","addEntries","devServer","prependEntries","forEach","entry","context","undefined","integrationEntry","overlay","sockIntegration","socketEntryData","hooks","make","tap","stage","Number","POSITIVE_INFINITY","compilation","entryData","entries","index","dependencies","findIndex","dep","request","includes","push","overlayEntries","idx","arr","finishMake","tapPromise","MIN_SAFE_INTEGER","length","Promise","resolve","injectData","all","map","reject","createDependency","addEntry","err","get","splice","then","refreshGlobal","definedModules","$RefreshReg$","$RefreshSig$","__react_refresh_library__","JSON","stringify","toIdentifier","library","output","uniqueName","providedModules","__react_refresh_utils__","__react_refresh_error_overlay__","__react_refresh_polyfill_url__","__react_refresh_socket__","useURLPolyfill","module","match","matchObject","bind","loggedHotWarning","normalModuleFactory","outputOptions","mainTemplate","source","chunk","hash","filename","contentHashType","lines","split","moduleInitializationLineNumber","line","moduleInterceptor","asString","indent","slice","strictModuleExceptionHandling","requireExtensions","afterResolve","data","const","esModule","normalModuleLoader","hot","warn","join","dependencyFactories","set","ReactRefreshRuntimeModule","additionalTreeRuntimeRequirements","runtimeRequirements","add","interceptModuleExecution","moduleCache","addRuntimeModule","resolveData","createData","runtimeTemplate","supportsConst","getCompilationHooks","loader","Infinity","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/index.js"],"sourcesContent":["const { validate: validateOptions } = require('schema-utils');\nconst { getRefreshGlobalScope, getWebpackVersion } = require('./globals');\nconst {\n  getAdditionalEntries,\n  getIntegrationEntry,\n  getRefreshGlobal,\n  getSocketIntegration,\n  injectRefreshEntry,\n  injectRefreshLoader,\n  makeRefreshRuntimeModule,\n  normalizeOptions,\n} = require('./utils');\nconst schema = require('./options.json');\n\nclass ReactRefreshPlugin {\n  /**\n   * @param {import('./types').ReactRefreshPluginOptions} [options] Options for react-refresh-plugin.\n   */\n  constructor(options = {}) {\n    validateOptions(schema, options, {\n      name: 'React Refresh Plugin',\n      baseDataPath: 'options',\n    });\n\n    /**\n     * @readonly\n     * @type {import('./types').NormalizedPluginOptions}\n     */\n    this.options = normalizeOptions(options);\n  }\n\n  /**\n   * Applies the plugin.\n   * @param {import('webpack').Compiler} compiler A webpack compiler object.\n   * @returns {void}\n   */\n  apply(compiler) {\n    // Skip processing in non-development mode, but allow manual force-enabling\n    if (\n      // Webpack do not set process.env.NODE_ENV, so we need to check for mode.\n      // Ref: https://github.com/webpack/webpack/issues/7074\n      (compiler.options.mode !== 'development' ||\n        // We also check for production process.env.NODE_ENV,\n        // in case it was set and mode is non-development (e.g. 'none')\n        (process.env.NODE_ENV && process.env.NODE_ENV === 'production')) &&\n      !this.options.forceEnable\n    ) {\n      return;\n    }\n\n    const webpackVersion = getWebpackVersion(compiler);\n    const logger = compiler.getInfrastructureLogger(this.constructor.name);\n\n    // Get Webpack imports from compiler instance (if available) -\n    // this allow mono-repos to use different versions of Webpack without conflicts.\n    const webpack = compiler.webpack || require('webpack');\n    const {\n      DefinePlugin,\n      EntryDependency,\n      EntryPlugin,\n      ModuleFilenameHelpers,\n      NormalModule,\n      ProvidePlugin,\n      RuntimeGlobals,\n      Template,\n    } = webpack;\n\n    // Inject react-refresh context to all Webpack entry points.\n    // This should create `EntryDependency` objects when available,\n    // and fallback to patching the `entry` object for legacy workflows.\n    const addEntries = getAdditionalEntries({\n      devServer: compiler.options.devServer,\n      options: this.options,\n    });\n    if (EntryPlugin) {\n      // Prepended entries does not care about injection order,\n      // so we can utilise EntryPlugin for simpler logic.\n      addEntries.prependEntries.forEach((entry) => {\n        new EntryPlugin(compiler.context, entry, { name: undefined }).apply(compiler);\n      });\n\n      const integrationEntry = getIntegrationEntry(this.options.overlay.sockIntegration);\n      const socketEntryData = [];\n      compiler.hooks.make.tap(\n        { name: this.constructor.name, stage: Number.POSITIVE_INFINITY },\n        (compilation) => {\n          // Exhaustively search all entries for `integrationEntry`.\n          // If found, mark those entries and the index of `integrationEntry`.\n          for (const [name, entryData] of compilation.entries.entries()) {\n            const index = entryData.dependencies.findIndex(\n              (dep) => dep.request && dep.request.includes(integrationEntry)\n            );\n            if (index !== -1) {\n              socketEntryData.push({ name, index });\n            }\n          }\n        }\n      );\n\n      // Overlay entries need to be injected AFTER integration's entry,\n      // so we will loop through everything in `finishMake` instead of `make`.\n      // This ensures we can traverse all entry points and inject stuff with the correct order.\n      addEntries.overlayEntries.forEach((entry, idx, arr) => {\n        compiler.hooks.finishMake.tapPromise(\n          { name: this.constructor.name, stage: Number.MIN_SAFE_INTEGER + (arr.length - idx - 1) },\n          (compilation) => {\n            // Only hook into the current compiler\n            if (compilation.compiler !== compiler) {\n              return Promise.resolve();\n            }\n\n            const injectData = socketEntryData.length ? socketEntryData : [{ name: undefined }];\n            return Promise.all(\n              injectData.map(({ name, index }) => {\n                return new Promise((resolve, reject) => {\n                  const options = { name };\n                  const dep = EntryPlugin.createDependency(entry, options);\n                  compilation.addEntry(compiler.context, dep, options, (err) => {\n                    if (err) return reject(err);\n\n                    // If the entry is not a global one,\n                    // and we have registered the index for integration entry,\n                    // we will reorder all entry dependencies to our desired order.\n                    // That is, to have additional entries DIRECTLY behind integration entry.\n                    if (name && typeof index !== 'undefined') {\n                      const entryData = compilation.entries.get(name);\n                      entryData.dependencies.splice(\n                        index + 1,\n                        0,\n                        entryData.dependencies.splice(entryData.dependencies.length - 1, 1)[0]\n                      );\n                    }\n\n                    resolve();\n                  });\n                });\n              })\n            ).then(() => {});\n          }\n        );\n      });\n    } else {\n      compiler.options.entry = injectRefreshEntry(compiler.options.entry, addEntries);\n    }\n\n    // Inject necessary modules and variables to bundle's global scope\n    const refreshGlobal = getRefreshGlobalScope(RuntimeGlobals || {});\n    /** @type {Record<string, string | boolean>}*/\n    const definedModules = {\n      // Mapping of react-refresh globals to Webpack runtime globals\n      $RefreshReg$: `${refreshGlobal}.register`,\n      $RefreshSig$: `${refreshGlobal}.signature`,\n      'typeof $RefreshReg$': 'function',\n      'typeof $RefreshSig$': 'function',\n\n      // Library mode\n      __react_refresh_library__: JSON.stringify(\n        Template.toIdentifier(\n          this.options.library ||\n            compiler.options.output.uniqueName ||\n            compiler.options.output.library\n        )\n      ),\n    };\n    /** @type {Record<string, string>} */\n    const providedModules = {\n      __react_refresh_utils__: require.resolve('./runtime/RefreshUtils'),\n    };\n\n    if (this.options.overlay === false) {\n      // Stub errorOverlay module so their calls can be erased\n      definedModules.__react_refresh_error_overlay__ = false;\n      definedModules.__react_refresh_polyfill_url__ = false;\n      definedModules.__react_refresh_socket__ = false;\n    } else {\n      definedModules.__react_refresh_polyfill_url__ = this.options.overlay.useURLPolyfill || false;\n\n      if (this.options.overlay.module) {\n        providedModules.__react_refresh_error_overlay__ = require.resolve(\n          this.options.overlay.module\n        );\n      }\n      if (this.options.overlay.sockIntegration) {\n        providedModules.__react_refresh_socket__ = getSocketIntegration(\n          this.options.overlay.sockIntegration\n        );\n      }\n    }\n\n    new DefinePlugin(definedModules).apply(compiler);\n    new ProvidePlugin(providedModules).apply(compiler);\n\n    const match = ModuleFilenameHelpers.matchObject.bind(undefined, this.options);\n    let loggedHotWarning = false;\n    compiler.hooks.compilation.tap(\n      this.constructor.name,\n      (compilation, { normalModuleFactory }) => {\n        // Only hook into the current compiler\n        if (compilation.compiler !== compiler) {\n          return;\n        }\n\n        // Tap into version-specific compilation hooks\n        switch (webpackVersion) {\n          case 4: {\n            const outputOptions = compilation.mainTemplate.outputOptions;\n            compilation.mainTemplate.hooks.require.tap(\n              this.constructor.name,\n              // Constructs the module template for react-refresh\n              (source, chunk, hash) => {\n                // Check for the output filename\n                // This is to ensure we are processing a JS-related chunk\n                let filename = outputOptions.filename;\n                if (typeof filename === 'function') {\n                  // Only usage of the `chunk` property is documented by Webpack.\n                  // However, some internal Webpack plugins uses other properties,\n                  // so we also pass them through to be on the safe side.\n                  filename = filename({\n                    contentHashType: 'javascript',\n                    chunk,\n                    hash,\n                  });\n                }\n\n                // Check whether the current compilation is outputting to JS,\n                // since other plugins can trigger compilations for other file types too.\n                // If we apply the transform to them, their compilation will break fatally.\n                // One prominent example of this is the HTMLWebpackPlugin.\n                // If filename is falsy, something is terribly wrong and there's nothing we can do.\n                if (!filename || !filename.includes('.js')) {\n                  return source;\n                }\n\n                // Split template source code into lines for easier processing\n                const lines = source.split('\\n');\n                // Webpack generates this line when the MainTemplate is called\n                const moduleInitializationLineNumber = lines.findIndex((line) =>\n                  line.includes('modules[moduleId].call(')\n                );\n                // Unable to find call to module execution -\n                // this happens if the current module does not call MainTemplate.\n                // In this case, we will return the original source and won't mess with it.\n                if (moduleInitializationLineNumber === -1) {\n                  return source;\n                }\n\n                const moduleInterceptor = Template.asString([\n                  `${refreshGlobal}.setup(moduleId);`,\n                  'try {',\n                  Template.indent(lines[moduleInitializationLineNumber]),\n                  '} finally {',\n                  Template.indent(`${refreshGlobal}.cleanup(moduleId);`),\n                  '}',\n                ]);\n\n                return Template.asString([\n                  ...lines.slice(0, moduleInitializationLineNumber),\n                  '',\n                  outputOptions.strictModuleExceptionHandling\n                    ? Template.indent(moduleInterceptor)\n                    : moduleInterceptor,\n                  '',\n                  ...lines.slice(moduleInitializationLineNumber + 1, lines.length),\n                ]);\n              }\n            );\n\n            compilation.mainTemplate.hooks.requireExtensions.tap(\n              this.constructor.name,\n              // Setup react-refresh globals as extensions to Webpack's require function\n              (source) => {\n                return Template.asString([source, '', getRefreshGlobal(Template)]);\n              }\n            );\n\n            normalModuleFactory.hooks.afterResolve.tap(\n              this.constructor.name,\n              // Add react-refresh loader to process files that matches specified criteria\n              (data) => {\n                return injectRefreshLoader(data, {\n                  match,\n                  options: { const: false, esModule: false },\n                });\n              }\n            );\n\n            compilation.hooks.normalModuleLoader.tap(\n              // `Number.POSITIVE_INFINITY` ensures this check will run only after all other taps\n              { name: this.constructor.name, stage: Number.POSITIVE_INFINITY },\n              // Check for existence of the HMR runtime -\n              // it is the foundation to this plugin working correctly\n              (context) => {\n                if (!context.hot && !loggedHotWarning) {\n                  logger.warn(\n                    [\n                      'Hot Module Replacement (HMR) is not enabled!',\n                      'React Refresh requires HMR to function properly.',\n                    ].join(' ')\n                  );\n                  loggedHotWarning = true;\n                }\n              }\n            );\n\n            break;\n          }\n          case 5: {\n            // Set factory for EntryDependency which is used to initialise the module\n            compilation.dependencyFactories.set(EntryDependency, normalModuleFactory);\n\n            const ReactRefreshRuntimeModule = makeRefreshRuntimeModule(webpack);\n            compilation.hooks.additionalTreeRuntimeRequirements.tap(\n              this.constructor.name,\n              // Setup react-refresh globals with a Webpack runtime module\n              (chunk, runtimeRequirements) => {\n                runtimeRequirements.add(RuntimeGlobals.interceptModuleExecution);\n                runtimeRequirements.add(RuntimeGlobals.moduleCache);\n                runtimeRequirements.add(refreshGlobal);\n                compilation.addRuntimeModule(chunk, new ReactRefreshRuntimeModule());\n              }\n            );\n\n            normalModuleFactory.hooks.afterResolve.tap(\n              this.constructor.name,\n              // Add react-refresh loader to process files that matches specified criteria\n              (resolveData) => {\n                injectRefreshLoader(resolveData.createData, {\n                  match,\n                  options: {\n                    const: compilation.runtimeTemplate.supportsConst(),\n                    esModule: this.options.esModule,\n                  },\n                });\n              }\n            );\n\n            NormalModule.getCompilationHooks(compilation).loader.tap(\n              // `Infinity` ensures this check will run only after all other taps\n              { name: this.constructor.name, stage: Infinity },\n              // Check for existence of the HMR runtime -\n              // it is the foundation to this plugin working correctly\n              (context) => {\n                if (!context.hot && !loggedHotWarning) {\n                  logger.warn(\n                    [\n                      'Hot Module Replacement (HMR) is not enabled!',\n                      'React Refresh requires HMR to function properly.',\n                    ].join(' ')\n                  );\n                  loggedHotWarning = true;\n                }\n              }\n            );\n\n            break;\n          }\n          default: {\n            // Do nothing - this should be an impossible case\n          }\n        }\n      }\n    );\n  }\n}\n\nmodule.exports.ReactRefreshPlugin = ReactRefreshPlugin;\nmodule.exports = ReactRefreshPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}