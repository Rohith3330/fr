{"ast":null,"code":"/**\n * @fileoverview Disallow shadowing of NaN, undefined, and Infinity (ES5 section 15.1.1)\n * @author Michael Ficarra\n */\n\"use strict\";\n/**\n * Determines if a variable safely shadows undefined.\n * This is the case when a variable named `undefined` is never assigned to a value (i.e. it always shares the same value\n * as the global).\n * @param {eslintScope.Variable} variable The variable to check\n * @returns {boolean} true if this variable safely shadows `undefined`\n */\n\nfunction safelyShadowsUndefined(variable) {\n  return variable.name === \"undefined\" && variable.references.every(ref => !ref.isWrite()) && variable.defs.every(def => def.node.type === \"VariableDeclarator\" && def.node.init === null);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow identifiers from shadowing restricted names\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-shadow-restricted-names\"\n    },\n    schema: [],\n    messages: {\n      shadowingRestrictedName: \"Shadowing of global property '{{name}}'.\"\n    }\n  },\n\n  create(context) {\n    const RESTRICTED = new Set([\"undefined\", \"NaN\", \"Infinity\", \"arguments\", \"eval\"]);\n    return {\n      \"VariableDeclaration, :function, CatchClause\"(node) {\n        for (const variable of context.getDeclaredVariables(node)) {\n          if (variable.defs.length > 0 && RESTRICTED.has(variable.name) && !safelyShadowsUndefined(variable)) {\n            context.report({\n              node: variable.defs[0].name,\n              messageId: \"shadowingRestrictedName\",\n              data: {\n                name: variable.name\n              }\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["safelyShadowsUndefined","variable","name","references","every","ref","isWrite","defs","def","node","type","init","module","exports","meta","docs","description","recommended","url","schema","messages","shadowingRestrictedName","create","context","RESTRICTED","Set","getDeclaredVariables","length","has","report","messageId","data"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-shadow-restricted-names.js"],"sourcesContent":["/**\n * @fileoverview Disallow shadowing of NaN, undefined, and Infinity (ES5 section 15.1.1)\n * @author Michael Ficarra\n */\n\"use strict\";\n\n/**\n * Determines if a variable safely shadows undefined.\n * This is the case when a variable named `undefined` is never assigned to a value (i.e. it always shares the same value\n * as the global).\n * @param {eslintScope.Variable} variable The variable to check\n * @returns {boolean} true if this variable safely shadows `undefined`\n */\nfunction safelyShadowsUndefined(variable) {\n    return variable.name === \"undefined\" &&\n        variable.references.every(ref => !ref.isWrite()) &&\n        variable.defs.every(def => def.node.type === \"VariableDeclarator\" && def.node.init === null);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow identifiers from shadowing restricted names\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-shadow-restricted-names\"\n        },\n\n        schema: [],\n\n        messages: {\n            shadowingRestrictedName: \"Shadowing of global property '{{name}}'.\"\n        }\n    },\n\n    create(context) {\n\n\n        const RESTRICTED = new Set([\"undefined\", \"NaN\", \"Infinity\", \"arguments\", \"eval\"]);\n\n        return {\n            \"VariableDeclaration, :function, CatchClause\"(node) {\n                for (const variable of context.getDeclaredVariables(node)) {\n                    if (variable.defs.length > 0 && RESTRICTED.has(variable.name) && !safelyShadowsUndefined(variable)) {\n                        context.report({\n                            node: variable.defs[0].name,\n                            messageId: \"shadowingRestrictedName\",\n                            data: {\n                                name: variable.name\n                            }\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,sBAAT,CAAgCC,QAAhC,EAA0C;EACtC,OAAOA,QAAQ,CAACC,IAAT,KAAkB,WAAlB,IACHD,QAAQ,CAACE,UAAT,CAAoBC,KAApB,CAA0BC,GAAG,IAAI,CAACA,GAAG,CAACC,OAAJ,EAAlC,CADG,IAEHL,QAAQ,CAACM,IAAT,CAAcH,KAAd,CAAoBI,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASC,IAAT,KAAkB,oBAAlB,IAA0CF,GAAG,CAACC,IAAJ,CAASE,IAAT,KAAkB,IAAvF,CAFJ;AAGH,C,CAED;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFJ,IAAI,EAAE,YADJ;IAGFK,IAAI,EAAE;MACFC,WAAW,EAAE,sDADX;MAEFC,WAAW,EAAE,IAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAWFC,QAAQ,EAAE;MACNC,uBAAuB,EAAE;IADnB;EAXR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IAGZ,MAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAAC,WAAD,EAAc,KAAd,EAAqB,UAArB,EAAiC,WAAjC,EAA8C,MAA9C,CAAR,CAAnB;IAEA,OAAO;MACH,8CAA8ChB,IAA9C,EAAoD;QAChD,KAAK,MAAMR,QAAX,IAAuBsB,OAAO,CAACG,oBAAR,CAA6BjB,IAA7B,CAAvB,EAA2D;UACvD,IAAIR,QAAQ,CAACM,IAAT,CAAcoB,MAAd,GAAuB,CAAvB,IAA4BH,UAAU,CAACI,GAAX,CAAe3B,QAAQ,CAACC,IAAxB,CAA5B,IAA6D,CAACF,sBAAsB,CAACC,QAAD,CAAxF,EAAoG;YAChGsB,OAAO,CAACM,MAAR,CAAe;cACXpB,IAAI,EAAER,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBL,IADZ;cAEX4B,SAAS,EAAE,yBAFA;cAGXC,IAAI,EAAE;gBACF7B,IAAI,EAAED,QAAQ,CAACC;cADb;YAHK,CAAf;UAOH;QACJ;MACJ;;IAbE,CAAP;EAgBH;;AAtCY,CAAjB"},"metadata":{},"sourceType":"script"}