{"ast":null,"code":"// @ts-check\n\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n'use strict';\n/**\n * @type {{[sortmode: string] : (entryPointNames: Array<string>, compilation, htmlWebpackPluginOptions) => Array<string> }}\n * This file contains different sort methods for the entry chunks names\n */\n\nmodule.exports = {};\n/**\n * Performs identity mapping (no-sort).\n * @param  {Array} chunks the chunks to sort\n * @return {Array} The sorted chunks\n */\n\nmodule.exports.none = chunks => chunks;\n/**\n * Sort manually by the chunks\n * @param  {string[]} entryPointNames the chunks to sort\n * @param  {WebpackCompilation} compilation the webpack compilation\n * @param  htmlWebpackPluginOptions the plugin options\n * @return {string[]} The sorted chunks\n */\n\n\nmodule.exports.manual = (entryPointNames, compilation, htmlWebpackPluginOptions) => {\n  const chunks = htmlWebpackPluginOptions.chunks;\n\n  if (!Array.isArray(chunks)) {\n    return entryPointNames;\n  } // Remove none existing entries from\n  // htmlWebpackPluginOptions.chunks\n\n\n  return chunks.filter(entryPointName => {\n    return compilation.entrypoints.has(entryPointName);\n  });\n};\n/**\n * Defines the default sorter.\n */\n\n\nmodule.exports.auto = module.exports.none;","map":{"version":3,"names":["module","exports","none","chunks","manual","entryPointNames","compilation","htmlWebpackPluginOptions","Array","isArray","filter","entryPointName","entrypoints","has","auto"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/html-webpack-plugin/lib/chunksorter.js"],"sourcesContent":["// @ts-check\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n'use strict';\n\n/**\n * @type {{[sortmode: string] : (entryPointNames: Array<string>, compilation, htmlWebpackPluginOptions) => Array<string> }}\n * This file contains different sort methods for the entry chunks names\n */\nmodule.exports = {};\n\n/**\n * Performs identity mapping (no-sort).\n * @param  {Array} chunks the chunks to sort\n * @return {Array} The sorted chunks\n */\nmodule.exports.none = chunks => chunks;\n\n/**\n * Sort manually by the chunks\n * @param  {string[]} entryPointNames the chunks to sort\n * @param  {WebpackCompilation} compilation the webpack compilation\n * @param  htmlWebpackPluginOptions the plugin options\n * @return {string[]} The sorted chunks\n */\nmodule.exports.manual = (entryPointNames, compilation, htmlWebpackPluginOptions) => {\n  const chunks = htmlWebpackPluginOptions.chunks;\n  if (!Array.isArray(chunks)) {\n    return entryPointNames;\n  }\n  // Remove none existing entries from\n  // htmlWebpackPluginOptions.chunks\n  return chunks.filter((entryPointName) => {\n    return compilation.entrypoints.has(entryPointName);\n  });\n};\n\n/**\n * Defines the default sorter.\n */\nmodule.exports.auto = module.exports.none;\n"],"mappings":"AAAA;;AACA;AACA;AAEA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,EAAjB;AAEA;AACA;AACA;AACA;AACA;;AACAD,MAAM,CAACC,OAAP,CAAeC,IAAf,GAAsBC,MAAM,IAAIA,MAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAH,MAAM,CAACC,OAAP,CAAeG,MAAf,GAAwB,CAACC,eAAD,EAAkBC,WAAlB,EAA+BC,wBAA/B,KAA4D;EAClF,MAAMJ,MAAM,GAAGI,wBAAwB,CAACJ,MAAxC;;EACA,IAAI,CAACK,KAAK,CAACC,OAAN,CAAcN,MAAd,CAAL,EAA4B;IAC1B,OAAOE,eAAP;EACD,CAJiF,CAKlF;EACA;;;EACA,OAAOF,MAAM,CAACO,MAAP,CAAeC,cAAD,IAAoB;IACvC,OAAOL,WAAW,CAACM,WAAZ,CAAwBC,GAAxB,CAA4BF,cAA5B,CAAP;EACD,CAFM,CAAP;AAGD,CAVD;AAYA;AACA;AACA;;;AACAX,MAAM,CAACC,OAAP,CAAea,IAAf,GAAsBd,MAAM,CAACC,OAAP,CAAeC,IAArC"},"metadata":{},"sourceType":"script"}