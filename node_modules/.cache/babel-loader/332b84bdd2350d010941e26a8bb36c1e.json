{"ast":null,"code":"#!/usr/bin/env node\n\nlet {\n  readFileSync\n} = require('fs');\n\nlet {\n  join\n} = require('path');\n\nrequire('./check-npm-version');\n\nlet updateDb = require('./');\n\nconst ROOT = __dirname;\n\nfunction getPackage() {\n  return JSON.parse(readFileSync(join(ROOT, 'package.json')));\n}\n\nlet args = process.argv.slice(2);\nlet USAGE = 'Usage:\\n  npx update-browserslist-db\\n';\n\nfunction isArg(arg) {\n  return args.some(i => i === arg);\n}\n\nfunction error(msg) {\n  process.stderr.write('update-browserslist-db: ' + msg + '\\n');\n  process.exit(1);\n}\n\nif (isArg('--help') || isArg('-h')) {\n  process.stdout.write(getPackage().description + '.\\n\\n' + USAGE + '\\n');\n} else if (isArg('--version') || isArg('-v')) {\n  process.stdout.write('browserslist-lint ' + getPackage().version + '\\n');\n} else {\n  try {\n    updateDb();\n  } catch (e) {\n    if (e.name === 'BrowserslistUpdateError') {\n      error(e.message);\n    } else {\n      throw e;\n    }\n  }\n}","map":{"version":3,"names":["readFileSync","require","join","updateDb","ROOT","__dirname","getPackage","JSON","parse","args","process","argv","slice","USAGE","isArg","arg","some","i","error","msg","stderr","write","exit","stdout","description","version","e","name","message"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/update-browserslist-db/cli.js"],"sourcesContent":["#!/usr/bin/env node\n\nlet { readFileSync } = require('fs')\nlet { join } = require('path')\n\nrequire('./check-npm-version')\nlet updateDb = require('./')\n\nconst ROOT = __dirname\n\nfunction getPackage() {\n  return JSON.parse(readFileSync(join(ROOT, 'package.json')))\n}\n\nlet args = process.argv.slice(2)\n\nlet USAGE = 'Usage:\\n  npx update-browserslist-db\\n'\n\nfunction isArg(arg) {\n  return args.some(i => i === arg)\n}\n\nfunction error(msg) {\n  process.stderr.write('update-browserslist-db: ' + msg + '\\n')\n  process.exit(1)\n}\n\nif (isArg('--help') || isArg('-h')) {\n  process.stdout.write(getPackage().description + '.\\n\\n' + USAGE + '\\n')\n} else if (isArg('--version') || isArg('-v')) {\n  process.stdout.write('browserslist-lint ' + getPackage().version + '\\n')\n} else {\n  try {\n    updateDb()\n  } catch (e) {\n    if (e.name === 'BrowserslistUpdateError') {\n      error(e.message)\n    } else {\n      throw e\n    }\n  }\n}\n"],"mappings":"AAAA;;AAEA,IAAI;EAAEA;AAAF,IAAmBC,OAAO,CAAC,IAAD,CAA9B;;AACA,IAAI;EAAEC;AAAF,IAAWD,OAAO,CAAC,MAAD,CAAtB;;AAEAA,OAAO,CAAC,qBAAD,CAAP;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,IAAD,CAAtB;;AAEA,MAAMG,IAAI,GAAGC,SAAb;;AAEA,SAASC,UAAT,GAAsB;EACpB,OAAOC,IAAI,CAACC,KAAL,CAAWR,YAAY,CAACE,IAAI,CAACE,IAAD,EAAO,cAAP,CAAL,CAAvB,CAAP;AACD;;AAED,IAAIK,IAAI,GAAGC,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAX;AAEA,IAAIC,KAAK,GAAG,wCAAZ;;AAEA,SAASC,KAAT,CAAeC,GAAf,EAAoB;EAClB,OAAON,IAAI,CAACO,IAAL,CAAUC,CAAC,IAAIA,CAAC,KAAKF,GAArB,CAAP;AACD;;AAED,SAASG,KAAT,CAAeC,GAAf,EAAoB;EAClBT,OAAO,CAACU,MAAR,CAAeC,KAAf,CAAqB,6BAA6BF,GAA7B,GAAmC,IAAxD;EACAT,OAAO,CAACY,IAAR,CAAa,CAAb;AACD;;AAED,IAAIR,KAAK,CAAC,QAAD,CAAL,IAAmBA,KAAK,CAAC,IAAD,CAA5B,EAAoC;EAClCJ,OAAO,CAACa,MAAR,CAAeF,KAAf,CAAqBf,UAAU,GAAGkB,WAAb,GAA2B,OAA3B,GAAqCX,KAArC,GAA6C,IAAlE;AACD,CAFD,MAEO,IAAIC,KAAK,CAAC,WAAD,CAAL,IAAsBA,KAAK,CAAC,IAAD,CAA/B,EAAuC;EAC5CJ,OAAO,CAACa,MAAR,CAAeF,KAAf,CAAqB,uBAAuBf,UAAU,GAAGmB,OAApC,GAA8C,IAAnE;AACD,CAFM,MAEA;EACL,IAAI;IACFtB,QAAQ;EACT,CAFD,CAEE,OAAOuB,CAAP,EAAU;IACV,IAAIA,CAAC,CAACC,IAAF,KAAW,yBAAf,EAA0C;MACxCT,KAAK,CAACQ,CAAC,CAACE,OAAH,CAAL;IACD,CAFD,MAEO;MACL,MAAMF,CAAN;IACD;EACF;AACF"},"metadata":{},"sourceType":"script"}