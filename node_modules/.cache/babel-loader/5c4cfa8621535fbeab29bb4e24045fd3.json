{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util = __importStar(require(\"../util\"));\n\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\n\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('space-before-blocks');\nexports.default = util.createRule({\n  name: 'space-before-blocks',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Enforce consistent spacing before blocks',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: baseRule.meta.fixable,\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: baseRule.meta.schema,\n    messages: Object.assign({\n      // @ts-expect-error -- we report on this messageId so we need to ensure it's there in case ESLint changes in future\n      unexpectedSpace: 'Unexpected space before opening brace.',\n      // @ts-expect-error -- we report on this messageId so we need to ensure it's there in case ESLint changes in future\n      missingSpace: 'Missing space before opening brace.'\n    }, baseRule.meta.messages)\n  },\n  defaultOptions: ['always'],\n\n  create(context) {\n    const rules = baseRule.create(context);\n    const config = context.options[0];\n    const sourceCode = context.getSourceCode();\n    let requireSpace = true;\n\n    if (typeof config === 'object') {\n      requireSpace = config.classes === 'always';\n    } else if (config === 'never') {\n      requireSpace = false;\n    }\n\n    function checkPrecedingSpace(node) {\n      const precedingToken = sourceCode.getTokenBefore(node);\n\n      if (precedingToken && util.isTokenOnSameLine(precedingToken, node)) {\n        // eslint-disable-next-line deprecation/deprecation -- TODO - switch once our min ESLint version is 6.7.0\n        const hasSpace = sourceCode.isSpaceBetweenTokens(precedingToken, node);\n\n        if (requireSpace && !hasSpace) {\n          context.report({\n            node,\n            messageId: 'missingSpace',\n\n            fix(fixer) {\n              return fixer.insertTextBefore(node, ' ');\n            }\n\n          });\n        } else if (!requireSpace && hasSpace) {\n          context.report({\n            node,\n            messageId: 'unexpectedSpace',\n\n            fix(fixer) {\n              return fixer.removeRange([precedingToken.range[1], node.range[0]]);\n            }\n\n          });\n        }\n      }\n    }\n\n    function checkSpaceAfterEnum(node) {\n      const punctuator = sourceCode.getTokenAfter(node.id);\n\n      if (punctuator) {\n        checkPrecedingSpace(punctuator);\n      }\n    }\n\n    return Object.assign(Object.assign({}, rules), {\n      TSEnumDeclaration: checkSpaceAfterEnum,\n      TSInterfaceBody: checkPrecedingSpace\n    });\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AAEA,MAAMA,QAAQ,GAAG,2CAAkB,qBAAlB,CAAjB;AAKAC,kBAAeC,IAAI,CAACC,UAAL,CAAqC;EAClDC,IAAI,EAAE,qBAD4C;EAElDC,IAAI,EAAE;IACJC,IAAI,EAAE,QADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EAAE,0CADT;MAEJC,WAAW,EAAE,KAFT;MAGJC,eAAe,EAAE;IAHb,CAFF;IAOJC,OAAO,EAAEX,QAAQ,CAACK,IAAT,CAAcM,OAPnB;IAQJC,cAAc,EAAEZ,QAAQ,CAACK,IAAT,CAAcO,cAR1B;IASJC,MAAM,EAAEb,QAAQ,CAACK,IAAT,CAAcQ,MATlB;IAUJC,QAAQ;MACN;MACAC,eAAe,EAAE,wCAFX;MAGN;MACAC,YAAY,EAAE;IAJR,GAKHhB,QAAQ,CAACK,IAAT,CAAcS,QALX;EAVJ,CAF4C;EAoBlDG,cAAc,EAAE,CAAC,QAAD,CApBkC;;EAqBlDC,MAAM,CAACC,OAAD,EAAQ;IACZ,MAAMC,KAAK,GAAGpB,QAAQ,CAACkB,MAAT,CAAgBC,OAAhB,CAAd;IACA,MAAME,MAAM,GAAGF,OAAO,CAACG,OAAR,CAAgB,CAAhB,CAAf;IACA,MAAMC,UAAU,GAAGJ,OAAO,CAACK,aAAR,EAAnB;IAEA,IAAIC,YAAY,GAAG,IAAnB;;IAEA,IAAI,OAAOJ,MAAP,KAAkB,QAAtB,EAAgC;MAC9BI,YAAY,GAAGJ,MAAM,CAACK,OAAP,KAAmB,QAAlC;IACD,CAFD,MAEO,IAAIL,MAAM,KAAK,OAAf,EAAwB;MAC7BI,YAAY,GAAG,KAAf;IACD;;IAED,SAASE,mBAAT,CACEC,IADF,EACiD;MAE/C,MAAMC,cAAc,GAAGN,UAAU,CAACO,cAAX,CAA0BF,IAA1B,CAAvB;;MACA,IAAIC,cAAc,IAAI3B,IAAI,CAAC6B,iBAAL,CAAuBF,cAAvB,EAAuCD,IAAvC,CAAtB,EAAoE;QAClE;QACA,MAAMI,QAAQ,GAAGT,UAAU,CAACU,oBAAX,CACfJ,cADe,EAEfD,IAFe,CAAjB;;QAKA,IAAIH,YAAY,IAAI,CAACO,QAArB,EAA+B;UAC7Bb,OAAO,CAACe,MAAR,CAAe;YACbN,IADa;YAEbO,SAAS,EAAE,cAFE;;YAGbC,GAAG,CAACC,KAAD,EAAM;cACP,OAAOA,KAAK,CAACC,gBAAN,CAAuBV,IAAvB,EAA6B,GAA7B,CAAP;YACD;;UALY,CAAf;QAOD,CARD,MAQO,IAAI,CAACH,YAAD,IAAiBO,QAArB,EAA+B;UACpCb,OAAO,CAACe,MAAR,CAAe;YACbN,IADa;YAEbO,SAAS,EAAE,iBAFE;;YAGbC,GAAG,CAACC,KAAD,EAAM;cACP,OAAOA,KAAK,CAACE,WAAN,CAAkB,CACvBV,cAAc,CAACW,KAAf,CAAqB,CAArB,CADuB,EAEvBZ,IAAI,CAACY,KAAL,CAAW,CAAX,CAFuB,CAAlB,CAAP;YAID;;UARY,CAAf;QAUD;MACF;IACF;;IAED,SAASC,mBAAT,CAA6Bb,IAA7B,EAA6D;MAC3D,MAAMc,UAAU,GAAGnB,UAAU,CAACoB,aAAX,CAAyBf,IAAI,CAACgB,EAA9B,CAAnB;;MACA,IAAIF,UAAJ,EAAgB;QACdf,mBAAmB,CAACe,UAAD,CAAnB;MACD;IACF;;IAED,uCACKtB,KADL,GACU;MACRyB,iBAAiB,EAAEJ,mBADX;MAERK,eAAe,EAAEnB;IAFT,CADV;EAKD;;AAhFiD,CAArC,CAAf","names":["baseRule","exports","util","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","hasSuggestions","schema","messages","unexpectedSpace","missingSpace","defaultOptions","create","context","rules","config","options","sourceCode","getSourceCode","requireSpace","classes","checkPrecedingSpace","node","precedingToken","getTokenBefore","isTokenOnSameLine","hasSpace","isSpaceBetweenTokens","report","messageId","fix","fixer","insertTextBefore","removeRange","range","checkSpaceAfterEnum","punctuator","getTokenAfter","id","TSEnumDeclaration","TSInterfaceBody"],"sources":["../../src/rules/space-before-blocks.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}