{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst path = require('path');\n\nconst chalk = require('chalk');\n\nconst stripAnsi = require('strip-ansi');\n\nconst table = require('text-table');\n\nconst cwd = process.cwd();\nconst emitErrorsAsWarnings = process.env.NODE_ENV === 'development' && process.env.ESLINT_NO_DEV_ERRORS === 'true';\n\nfunction isError(message) {\n  if (message.fatal || message.severity === 2) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getRelativePath(filePath) {\n  return path.relative(cwd, filePath);\n}\n\nfunction formatter(results) {\n  let output = '\\n';\n  let hasErrors = false;\n  let reportContainsErrorRuleIDs = false;\n  results.forEach(result => {\n    let messages = result.messages;\n\n    if (messages.length === 0) {\n      return;\n    }\n\n    messages = messages.map(message => {\n      let messageType;\n\n      if (isError(message) && !emitErrorsAsWarnings) {\n        messageType = 'error';\n        hasErrors = true;\n\n        if (message.ruleId) {\n          reportContainsErrorRuleIDs = true;\n        }\n      } else {\n        messageType = 'warn';\n      }\n\n      let line = message.line || 0;\n\n      if (message.column) {\n        line += ':' + message.column;\n      }\n\n      let position = chalk.bold('Line ' + line + ':');\n      return ['', position, messageType, message.message.replace(/\\.$/, ''), chalk.underline(message.ruleId || '')];\n    }); // if there are error messages, we want to show only errors\n\n    if (hasErrors) {\n      messages = messages.filter(m => m[2] === 'error');\n    } // add color to rule keywords\n\n\n    messages.forEach(m => {\n      m[4] = m[2] === 'error' ? chalk.red(m[4]) : chalk.yellow(m[4]);\n      m.splice(2, 1);\n    });\n    let outputTable = table(messages, {\n      align: ['l', 'l', 'l'],\n\n      stringLength(str) {\n        return stripAnsi(str).length;\n      }\n\n    }); // print the filename and relative path\n\n    output += `${getRelativePath(result.filePath)}\\n`; // print the errors\n\n    output += `${outputTable}\\n\\n`;\n  });\n\n  if (reportContainsErrorRuleIDs) {\n    // Unlike with warnings, we have to do it here.\n    // We have similar code in react-scripts for warnings,\n    // but warnings can appear in multiple files so we only\n    // print it once at the end. For errors, however, we print\n    // it here because we always show at most one error, and\n    // we can only be sure it's an ESLint error before exiting\n    // this function.\n    output += 'Search for the ' + chalk.underline(chalk.red('keywords')) + ' to learn more about each error.';\n  }\n\n  return output;\n}\n\nmodule.exports = formatter;","map":{"version":3,"names":["path","require","chalk","stripAnsi","table","cwd","process","emitErrorsAsWarnings","env","NODE_ENV","ESLINT_NO_DEV_ERRORS","isError","message","fatal","severity","getRelativePath","filePath","relative","formatter","results","output","hasErrors","reportContainsErrorRuleIDs","forEach","result","messages","length","map","messageType","ruleId","line","column","position","bold","replace","underline","filter","m","red","yellow","splice","outputTable","align","stringLength","str","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/react-dev-utils/eslintFormatter.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst path = require('path');\nconst chalk = require('chalk');\nconst stripAnsi = require('strip-ansi');\nconst table = require('text-table');\n\nconst cwd = process.cwd();\n\nconst emitErrorsAsWarnings =\n  process.env.NODE_ENV === 'development' &&\n  process.env.ESLINT_NO_DEV_ERRORS === 'true';\n\nfunction isError(message) {\n  if (message.fatal || message.severity === 2) {\n    return true;\n  }\n  return false;\n}\n\nfunction getRelativePath(filePath) {\n  return path.relative(cwd, filePath);\n}\n\nfunction formatter(results) {\n  let output = '\\n';\n  let hasErrors = false;\n  let reportContainsErrorRuleIDs = false;\n\n  results.forEach(result => {\n    let messages = result.messages;\n    if (messages.length === 0) {\n      return;\n    }\n\n    messages = messages.map(message => {\n      let messageType;\n      if (isError(message) && !emitErrorsAsWarnings) {\n        messageType = 'error';\n        hasErrors = true;\n        if (message.ruleId) {\n          reportContainsErrorRuleIDs = true;\n        }\n      } else {\n        messageType = 'warn';\n      }\n\n      let line = message.line || 0;\n      if (message.column) {\n        line += ':' + message.column;\n      }\n      let position = chalk.bold('Line ' + line + ':');\n      return [\n        '',\n        position,\n        messageType,\n        message.message.replace(/\\.$/, ''),\n        chalk.underline(message.ruleId || ''),\n      ];\n    });\n\n    // if there are error messages, we want to show only errors\n    if (hasErrors) {\n      messages = messages.filter(m => m[2] === 'error');\n    }\n\n    // add color to rule keywords\n    messages.forEach(m => {\n      m[4] = m[2] === 'error' ? chalk.red(m[4]) : chalk.yellow(m[4]);\n      m.splice(2, 1);\n    });\n\n    let outputTable = table(messages, {\n      align: ['l', 'l', 'l'],\n      stringLength(str) {\n        return stripAnsi(str).length;\n      },\n    });\n\n    // print the filename and relative path\n    output += `${getRelativePath(result.filePath)}\\n`;\n\n    // print the errors\n    output += `${outputTable}\\n\\n`;\n  });\n\n  if (reportContainsErrorRuleIDs) {\n    // Unlike with warnings, we have to do it here.\n    // We have similar code in react-scripts for warnings,\n    // but warnings can appear in multiple files so we only\n    // print it once at the end. For errors, however, we print\n    // it here because we always show at most one error, and\n    // we can only be sure it's an ESLint error before exiting\n    // this function.\n    output +=\n      'Search for the ' +\n      chalk.underline(chalk.red('keywords')) +\n      ' to learn more about each error.';\n  }\n\n  return output;\n}\n\nmodule.exports = formatter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}