{"ast":null,"code":"/**\n * @license Fraction.js v4.2.0 23/05/2021\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2021, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * let f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n(function (root) {\n  \"use strict\"; // Set Identity function to downgrade BigInt to Number if needed\n\n  if (!BigInt) BigInt = function (n) {\n    if (isNaN(n)) throw new Error(\"\");\n    return n;\n  };\n  const C_ONE = BigInt(1);\n  const C_ZERO = BigInt(0);\n  const C_TEN = BigInt(10);\n  const C_TWO = BigInt(2);\n  const C_FIVE = BigInt(5); // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n\n  const MAX_CYCLE_LEN = 2000; // Parsed data to avoid calling \"new\" all the time\n\n  const P = {\n    \"s\": C_ONE,\n    \"n\": C_ZERO,\n    \"d\": C_ONE\n  };\n\n  function assign(n, s) {\n    try {\n      n = BigInt(n);\n    } catch (e) {\n      throw Fraction['InvalidParameter'];\n    }\n\n    return n * s;\n  } // Creates a new Fraction internally without the need of the bulky constructor\n\n\n  function newFraction(n, d) {\n    if (d === C_ZERO) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    const f = Object.create(Fraction.prototype);\n    f[\"s\"] = n < C_ZERO ? -C_ONE : C_ONE;\n    n = n < C_ZERO ? -n : n;\n    const a = gcd(n, d);\n    f[\"n\"] = n / a;\n    f[\"d\"] = d / a;\n    return f;\n  }\n\n  function factorize(num) {\n    const factors = {};\n    let n = num;\n    let i = C_TWO;\n    let s = C_FIVE - C_ONE;\n\n    while (s <= n) {\n      while (n % i === C_ZERO) {\n        n /= i;\n        factors[i] = (factors[i] || C_ZERO) + C_ONE;\n      }\n\n      s += C_ONE + C_TWO * i++;\n    }\n\n    if (n !== num) {\n      if (n > 1) factors[n] = (factors[n] || C_ZERO) + C_ONE;\n    } else {\n      factors[num] = (factors[num] || C_ZERO) + C_ONE;\n    }\n\n    return factors;\n  }\n\n  const parse = function (p1, p2) {\n    let n = C_ZERO,\n        d = C_ONE,\n        s = C_ONE;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = BigInt(p1);\n      d = BigInt(p2);\n      s = n * d;\n\n      if (n % C_ONE !== C_ZERO || d % C_ONE !== C_ZERO) {\n        throw Fraction['NonIntegerParameter'];\n      }\n    } else if (typeof p1 === \"object\") {\n      if (\"d\" in p1 && \"n\" in p1) {\n        n = BigInt(p1[\"n\"]);\n        d = BigInt(p1[\"d\"]);\n        if (\"s\" in p1) n *= BigInt(p1[\"s\"]);\n      } else if (0 in p1) {\n        n = BigInt(p1[0]);\n        if (1 in p1) d = BigInt(p1[1]);\n      } else if (p1 instanceof BigInt) {\n        n = BigInt(p1);\n      } else {\n        throw Fraction['InvalidParameter'];\n      }\n\n      s = n * d;\n    } else if (typeof p1 === \"bigint\") {\n      n = p1;\n      s = p1;\n      d = BigInt(1);\n    } else if (typeof p1 === \"number\") {\n      if (isNaN(p1)) {\n        throw Fraction['InvalidParameter'];\n      }\n\n      if (p1 < 0) {\n        s = -C_ONE;\n        p1 = -p1;\n      }\n\n      if (p1 % 1 === 0) {\n        n = BigInt(p1);\n      } else if (p1 > 0) {\n        // check for != 0, scale would become NaN (log(0)), which converges really slow\n        let z = 1;\n        let A = 0,\n            B = 1;\n        let C = 1,\n            D = 1;\n        let N = 10000000;\n\n        if (p1 >= 1) {\n          z = 10 ** Math.floor(1 + Math.log10(p1));\n          p1 /= z;\n        } // Using Farey Sequences\n\n\n        while (B <= N && D <= N) {\n          let M = (A + C) / (B + D);\n\n          if (p1 === M) {\n            if (B + D <= N) {\n              n = A + C;\n              d = B + D;\n            } else if (D > B) {\n              n = C;\n              d = D;\n            } else {\n              n = A;\n              d = B;\n            }\n\n            break;\n          } else {\n            if (p1 > M) {\n              A += C;\n              B += D;\n            } else {\n              C += A;\n              D += B;\n            }\n\n            if (B > N) {\n              n = C;\n              d = D;\n            } else {\n              n = A;\n              d = B;\n            }\n          }\n        }\n\n        n = BigInt(n) * BigInt(z);\n        d = BigInt(d);\n      }\n    } else if (typeof p1 === \"string\") {\n      let ndx = 0;\n      let v = C_ZERO,\n          w = C_ZERO,\n          x = C_ZERO,\n          y = C_ONE,\n          z = C_ONE;\n      let match = p1.match(/\\d+|./g);\n      if (match === null) throw Fraction['InvalidParameter'];\n\n      if (match[ndx] === '-') {\n        // Check for minus sign at the beginning\n        s = -C_ONE;\n        ndx++;\n      } else if (match[ndx] === '+') {\n        // Check for plus sign at the beginning\n        ndx++;\n      }\n\n      if (match.length === ndx + 1) {\n        // Check if it's just a simple number \"1234\"\n        w = assign(match[ndx++], s);\n      } else if (match[ndx + 1] === '.' || match[ndx] === '.') {\n        // Check if it's a decimal number\n        if (match[ndx] !== '.') {\n          // Handle 0.5 and .5\n          v = assign(match[ndx++], s);\n        }\n\n        ndx++; // Check for decimal places\n\n        if (ndx + 1 === match.length || match[ndx + 1] === '(' && match[ndx + 3] === ')' || match[ndx + 1] === \"'\" && match[ndx + 3] === \"'\") {\n          w = assign(match[ndx], s);\n          y = C_TEN ** BigInt(match[ndx].length);\n          ndx++;\n        } // Check for repeating places\n\n\n        if (match[ndx] === '(' && match[ndx + 2] === ')' || match[ndx] === \"'\" && match[ndx + 2] === \"'\") {\n          x = assign(match[ndx + 1], s);\n          z = C_TEN ** BigInt(match[ndx + 1].length) - C_ONE;\n          ndx += 3;\n        }\n      } else if (match[ndx + 1] === '/' || match[ndx + 1] === ':') {\n        // Check for a simple fraction \"123/456\" or \"123:456\"\n        w = assign(match[ndx], s);\n        y = assign(match[ndx + 2], C_ONE);\n        ndx += 3;\n      } else if (match[ndx + 3] === '/' && match[ndx + 1] === ' ') {\n        // Check for a complex fraction \"123 1/2\"\n        v = assign(match[ndx], s);\n        w = assign(match[ndx + 2], s);\n        y = assign(match[ndx + 4], C_ONE);\n        ndx += 5;\n      }\n\n      if (match.length <= ndx) {\n        // Check for more tokens on the stack\n        d = y * z;\n        s =\n        /* void */\n        n = x + d * v + z * w;\n      } else {\n        throw Fraction['InvalidParameter'];\n      }\n    } else {\n      throw Fraction['InvalidParameter'];\n    }\n\n    if (d === C_ZERO) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    P[\"s\"] = s < C_ZERO ? -C_ONE : C_ONE;\n    P[\"n\"] = n < C_ZERO ? -n : n;\n    P[\"d\"] = d < C_ZERO ? -d : d;\n  };\n\n  function modpow(b, e, m) {\n    let r = C_ONE;\n\n    for (; e > C_ZERO; b = b * b % m, e >>= C_ONE) {\n      if (e & C_ONE) {\n        r = r * b % m;\n      }\n    }\n\n    return r;\n  }\n\n  function cycleLen(n, d) {\n    for (; d % C_TWO === C_ZERO; d /= C_TWO) {}\n\n    for (; d % C_FIVE === C_ZERO; d /= C_FIVE) {}\n\n    if (d === C_ONE) // Catch non-cyclic numbers\n      return C_ZERO; // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    let rem = C_TEN % d;\n    let t = 1;\n\n    for (; rem !== C_ONE; t++) {\n      rem = rem * C_TEN % d;\n      if (t > MAX_CYCLE_LEN) return C_ZERO; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n\n    return BigInt(t);\n  }\n\n  function cycleStart(n, d, len) {\n    let rem1 = C_ONE;\n    let rem2 = modpow(C_TEN, len, d);\n\n    for (let t = 0; t < 300; t++) {\n      // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n      if (rem1 === rem2) return BigInt(t);\n      rem1 = rem1 * C_TEN % d;\n      rem2 = rem2 * C_TEN % d;\n    }\n\n    return 0;\n  }\n\n  function gcd(a, b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    while (1) {\n      a %= b;\n      if (!a) return b;\n      b %= a;\n      if (!b) return a;\n    }\n  }\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n\n\n  function Fraction(a, b) {\n    parse(a, b);\n\n    if (this instanceof Fraction) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n\n      this[\"s\"] = P[\"s\"];\n      this[\"n\"] = P[\"n\"] / a;\n      this[\"d\"] = P[\"d\"] / a;\n    } else {\n      return newFraction(P['s'] * P['n'], P['d']);\n    }\n  }\n\n  Fraction['DivisionByZero'] = new Error(\"Division by Zero\");\n  Fraction['InvalidParameter'] = new Error(\"Invalid argument\");\n  Fraction['NonIntegerParameter'] = new Error(\"Parameters must be integer\");\n  Fraction.prototype = {\n    \"s\": C_ONE,\n    \"n\": C_ZERO,\n    \"d\": C_ONE,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function () {\n      return newFraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function () {\n      return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function (a, b) {\n      parse(a, b);\n      return newFraction(this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function (a, b) {\n      parse(a, b);\n      return newFraction(this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function (a, b) {\n      parse(a, b);\n      return newFraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function (a, b) {\n      parse(a, b);\n      return newFraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"], this[\"d\"] * P[\"n\"]);\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function () {\n      return newFraction(this['s'] * this['n'], this['d']);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function (a, b) {\n      if (a === undefined) {\n        return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], C_ONE);\n      }\n\n      parse(a, b);\n\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        throw Fraction['DivisionByZero'];\n      }\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n\n\n      return newFraction(this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function (a, b) {\n      parse(a, b); // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function (a, b) {\n      parse(a, b); // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === C_ZERO && this[\"n\"] === C_ZERO) {\n        return newFraction(C_ZERO, C_ONE);\n      }\n\n      return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function () {\n      return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function (a, b) {\n      parse(a, b); // Trivial case when exp is an integer\n\n      if (P['d'] === C_ONE) {\n        if (P['s'] < C_ZERO) {\n          return newFraction((this['s'] * this[\"d\"]) ** P['n'], this[\"n\"] ** P['n']);\n        } else {\n          return newFraction((this['s'] * this[\"n\"]) ** P['n'], this[\"d\"] ** P['n']);\n        }\n      } // Negative roots become complex\n      //     (-a/b)^(c/d) = x\n      // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula\n      // From which follows that only for c=0 the root is non-complex\n\n\n      if (this['s'] < C_ZERO) return null; // Now prime factor n and d\n\n      let N = factorize(this['n']);\n      let D = factorize(this['d']); // Exponentiate and take root for n and d individually\n\n      let n = C_ONE;\n      let d = C_ONE;\n\n      for (let k in N) {\n        if (k === '1') continue;\n\n        if (k === '0') {\n          n = C_ZERO;\n          break;\n        }\n\n        N[k] *= P['n'];\n\n        if (N[k] % P['d'] === C_ZERO) {\n          N[k] /= P['d'];\n        } else return null;\n\n        n *= BigInt(k) ** N[k];\n      }\n\n      for (let k in D) {\n        if (k === '1') continue;\n        D[k] *= P['n'];\n\n        if (D[k] % P['d'] === C_ZERO) {\n          D[k] /= P['d'];\n        } else return null;\n\n        d *= BigInt(k) ** D[k];\n      }\n\n      if (P['s'] < C_ZERO) {\n        return newFraction(d, n);\n      }\n\n      return newFraction(n, d);\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function (a, b) {\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function (a, b) {\n      parse(a, b);\n      let t = this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"];\n      return (C_ZERO < t) - (t < C_ZERO);\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function (places) {\n      places = C_TEN ** BigInt(places || 0);\n      return newFraction(this[\"s\"] * places * this[\"n\"] / this[\"d\"] + (places * this[\"n\"] % this[\"d\"] > C_ZERO && this[\"s\"] >= C_ZERO ? C_ONE : C_ZERO), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function (places) {\n      places = C_TEN ** BigInt(places || 0);\n      return newFraction(this[\"s\"] * places * this[\"n\"] / this[\"d\"] - (places * this[\"n\"] % this[\"d\"] > C_ZERO && this[\"s\"] < C_ZERO ? C_ONE : C_ZERO), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function (places) {\n      places = C_TEN ** BigInt(places || 0);\n      /* Derivation:\n       s >= 0:\n        round(n / d) = trunc(n / d) + (n % d) / d >= 0.5 ? 1 : 0\n                     = trunc(n / d) + 2(n % d) >= d ? 1 : 0\n      s < 0:\n        round(n / d) =-trunc(n / d) - (n % d) / d > 0.5 ? 1 : 0\n                     =-trunc(n / d) - 2(n % d) > d ? 1 : 0\n       =>:\n       round(s * n / d) = s * trunc(n / d) + s * (C + 2(n % d) > d ? 1 : 0)\n          where C = s >= 0 ? 1 : 0, to fix the >= for the positve case.\n      */\n\n      return newFraction(this[\"s\"] * places * this[\"n\"] / this[\"d\"] + this[\"s\"] * ((this[\"s\"] >= C_ZERO ? C_ONE : C_ZERO) + C_TWO * (places * this[\"n\"] % this[\"d\"]) > this[\"d\"] ? C_ONE : C_ZERO), places);\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function (a, b) {\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || this[\"n\"] * P[\"d\"] % (P[\"n\"] * this[\"d\"]));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function () {\n      // Best we can do so far\n      return Number(this[\"s\"] * this[\"n\"]) / Number(this[\"d\"]);\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function (dec) {\n      let N = this[\"n\"];\n      let D = this[\"d\"];\n      dec = dec || 15; // 15 = decimal places when no repitation\n\n      let cycLen = cycleLen(N, D); // Cycle length\n\n      let cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      let str = this['s'] < C_ZERO ? \"-\" : \"\"; // Append integer part\n\n      str += N / D;\n      N %= D;\n      N *= C_TEN;\n      if (N) str += \".\";\n\n      if (cycLen) {\n        for (let i = cycOff; i--;) {\n          str += N / D;\n          N %= D;\n          N *= C_TEN;\n        }\n\n        str += \"(\";\n\n        for (let i = cycLen; i--;) {\n          str += N / D;\n          N %= D;\n          N *= C_TEN;\n        }\n\n        str += \")\";\n      } else {\n        for (let i = dec; N && i--;) {\n          str += N / D;\n          N %= D;\n          N *= C_TEN;\n        }\n      }\n\n      return str;\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    'toFraction': function (excludeWhole) {\n      let n = this[\"n\"];\n      let d = this[\"d\"];\n      let str = this['s'] < C_ZERO ? \"-\" : \"\";\n\n      if (d === C_ONE) {\n        str += n;\n      } else {\n        let whole = n / d;\n\n        if (excludeWhole && whole > C_ZERO) {\n          str += whole;\n          str += \" \";\n          n %= d;\n        }\n\n        str += n;\n        str += '/';\n        str += d;\n      }\n\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function (excludeWhole) {\n      let n = this[\"n\"];\n      let d = this[\"d\"];\n      let str = this['s'] < C_ZERO ? \"-\" : \"\";\n\n      if (d === C_ONE) {\n        str += n;\n      } else {\n        let whole = n / d;\n\n        if (excludeWhole && whole > C_ZERO) {\n          str += whole;\n          n %= d;\n        }\n\n        str += \"\\\\frac{\";\n        str += n;\n        str += '}{';\n        str += d;\n        str += '}';\n      }\n\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function () {\n      let a = this['n'];\n      let b = this['d'];\n      let res = [];\n\n      do {\n        res.push(a / b);\n        let t = a % b;\n        a = b;\n        b = t;\n      } while (a !== C_ONE);\n\n      return res;\n    },\n    \"simplify\": function (eps) {\n      eps = eps || 0.001;\n      const thisABS = this['abs']();\n      const cont = thisABS['toContinued']();\n\n      for (let i = 1; i < cont.length; i++) {\n        let s = newFraction(cont[i - 1], C_ONE);\n\n        for (let k = i - 2; k >= 0; k--) {\n          s = s['inverse']()['add'](cont[k]);\n        }\n\n        if (s['sub'](thisABS)['abs']().valueOf() < eps) {\n          return s['mul'](this['s']);\n        }\n      }\n\n      return this;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function () {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(exports, \"__esModule\", {\n      'value': true\n    });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n})(this);","map":{"version":3,"names":["root","BigInt","n","isNaN","Error","C_ONE","C_ZERO","C_TEN","C_TWO","C_FIVE","MAX_CYCLE_LEN","P","assign","s","e","Fraction","newFraction","d","f","Object","create","prototype","a","gcd","factorize","num","factors","i","parse","p1","p2","undefined","z","A","B","C","D","N","Math","floor","log10","M","ndx","v","w","x","y","match","length","modpow","b","m","r","cycleLen","rem","t","cycleStart","len","rem1","rem2","k","places","Number","dec","cycLen","cycOff","str","excludeWhole","whole","res","push","eps","thisABS","cont","valueOf","define","exports","defineProperty","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/fraction.js/bigfraction.js"],"sourcesContent":["/**\n * @license Fraction.js v4.2.0 23/05/2021\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2021, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * let f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Set Identity function to downgrade BigInt to Number if needed\n  if (!BigInt) BigInt = function(n) { if (isNaN(n)) throw new Error(\"\"); return n; };\n\n  const C_ONE = BigInt(1);\n  const C_ZERO = BigInt(0);\n  const C_TEN = BigInt(10);\n  const C_TWO = BigInt(2);\n  const C_FIVE = BigInt(5);\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  const MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  const P = {\n    \"s\": C_ONE,\n    \"n\": C_ZERO,\n    \"d\": C_ONE\n  };\n\n  function assign(n, s) {\n\n    try {\n      n = BigInt(n);\n    } catch (e) {\n      throw Fraction['InvalidParameter'];\n    }\n    return n * s;\n  }\n\n  // Creates a new Fraction internally without the need of the bulky constructor\n  function newFraction(n, d) {\n\n    if (d === C_ZERO) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    const f = Object.create(Fraction.prototype);\n    f[\"s\"] = n < C_ZERO ? -C_ONE : C_ONE;\n\n    n = n < C_ZERO ? -n : n;\n\n    const a = gcd(n, d);\n\n    f[\"n\"] = n / a;\n    f[\"d\"] = d / a;\n    return f;\n  }\n\n  function factorize(num) {\n\n    const factors = {};\n\n    let n = num;\n    let i = C_TWO;\n    let s = C_FIVE - C_ONE;\n\n    while (s <= n) {\n\n      while (n % i === C_ZERO) {\n        n/= i;\n        factors[i] = (factors[i] || C_ZERO) + C_ONE;\n      }\n      s+= C_ONE + C_TWO * i++;\n    }\n\n    if (n !== num) {\n      if (n > 1)\n        factors[n] = (factors[n] || C_ZERO) + C_ONE;\n    } else {\n      factors[num] = (factors[num] || C_ZERO) + C_ONE;\n    }\n    return factors;\n  }\n\n  const parse = function(p1, p2) {\n\n    let n = C_ZERO, d = C_ONE, s = C_ONE;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = BigInt(p1);\n      d = BigInt(p2);\n      s = n * d;\n\n      if (n % C_ONE !== C_ZERO || d % C_ONE !== C_ZERO) {\n        throw Fraction['NonIntegerParameter'];\n      }\n\n    } else if (typeof p1 === \"object\") {\n      if (\"d\" in p1 && \"n\" in p1) {\n        n = BigInt(p1[\"n\"]);\n        d = BigInt(p1[\"d\"]);\n        if (\"s\" in p1)\n          n*= BigInt(p1[\"s\"]);\n      } else if (0 in p1) {\n        n = BigInt(p1[0]);\n        if (1 in p1)\n          d = BigInt(p1[1]);\n      } else if (p1 instanceof BigInt) {\n        n = BigInt(p1);\n      } else {\n        throw Fraction['InvalidParameter'];\n      }\n      s = n * d;\n    } else if (typeof p1 === \"bigint\") {\n      n = p1;\n      s = p1;\n      d = BigInt(1);\n    } else if (typeof p1 === \"number\") {\n\n      if (isNaN(p1)) {\n        throw Fraction['InvalidParameter'];\n      }\n\n      if (p1 < 0) {\n        s = -C_ONE;\n        p1 = -p1;\n      }\n\n      if (p1 % 1 === 0) {\n        n = BigInt(p1);\n      } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n        let z = 1;\n\n        let A = 0, B = 1;\n        let C = 1, D = 1;\n\n        let N = 10000000;\n\n        if (p1 >= 1) {\n          z = 10 ** Math.floor(1 + Math.log10(p1));\n          p1/= z;\n        }\n\n        // Using Farey Sequences\n\n        while (B <= N && D <= N) {\n          let M = (A + C) / (B + D);\n\n          if (p1 === M) {\n            if (B + D <= N) {\n              n = A + C;\n              d = B + D;\n            } else if (D > B) {\n              n = C;\n              d = D;\n            } else {\n              n = A;\n              d = B;\n            }\n            break;\n\n          } else {\n\n            if (p1 > M) {\n              A+= C;\n              B+= D;\n            } else {\n              C+= A;\n              D+= B;\n            }\n\n            if (B > N) {\n              n = C;\n              d = D;\n            } else {\n              n = A;\n              d = B;\n            }\n          }\n        }\n        n = BigInt(n) * BigInt(z);\n        d = BigInt(d);\n\n      }\n\n    } else if (typeof p1 === \"string\") {\n\n      let ndx = 0;\n\n      let v = C_ZERO, w = C_ZERO, x = C_ZERO, y = C_ONE, z = C_ONE;\n\n      let match = p1.match(/\\d+|./g);\n\n      if (match === null)\n        throw Fraction['InvalidParameter'];\n\n      if (match[ndx] === '-') {// Check for minus sign at the beginning\n        s = -C_ONE;\n        ndx++;\n      } else if (match[ndx] === '+') {// Check for plus sign at the beginning\n        ndx++;\n      }\n\n      if (match.length === ndx + 1) { // Check if it's just a simple number \"1234\"\n        w = assign(match[ndx++], s);\n      } else if (match[ndx + 1] === '.' || match[ndx] === '.') { // Check if it's a decimal number\n\n        if (match[ndx] !== '.') { // Handle 0.5 and .5\n          v = assign(match[ndx++], s);\n        }\n        ndx++;\n\n        // Check for decimal places\n        if (ndx + 1 === match.length || match[ndx + 1] === '(' && match[ndx + 3] === ')' || match[ndx + 1] === \"'\" && match[ndx + 3] === \"'\") {\n          w = assign(match[ndx], s);\n          y = C_TEN ** BigInt(match[ndx].length);\n          ndx++;\n        }\n\n        // Check for repeating places\n        if (match[ndx] === '(' && match[ndx + 2] === ')' || match[ndx] === \"'\" && match[ndx + 2] === \"'\") {\n          x = assign(match[ndx + 1], s);\n          z = C_TEN ** BigInt(match[ndx + 1].length) - C_ONE;\n          ndx+= 3;\n        }\n\n      } else if (match[ndx + 1] === '/' || match[ndx + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n        w = assign(match[ndx], s);\n        y = assign(match[ndx + 2], C_ONE);\n        ndx+= 3;\n      } else if (match[ndx + 3] === '/' && match[ndx + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n        v = assign(match[ndx], s);\n        w = assign(match[ndx + 2], s);\n        y = assign(match[ndx + 4], C_ONE);\n        ndx+= 5;\n      }\n\n      if (match.length <= ndx) { // Check for more tokens on the stack\n        d = y * z;\n        s = /* void */\n        n = x + d * v + z * w;\n      } else {\n        throw Fraction['InvalidParameter'];\n      }\n\n    } else {\n      throw Fraction['InvalidParameter'];\n    }\n\n    if (d === C_ZERO) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    P[\"s\"] = s < C_ZERO ? -C_ONE : C_ONE;\n    P[\"n\"] = n < C_ZERO ? -n : n;\n    P[\"d\"] = d < C_ZERO ? -d : d;\n  };\n\n  function modpow(b, e, m) {\n\n    let r = C_ONE;\n    for (; e > C_ZERO; b = (b * b) % m, e >>= C_ONE) {\n\n      if (e & C_ONE) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n  function cycleLen(n, d) {\n\n    for (; d % C_TWO === C_ZERO;\n      d/= C_TWO) {\n    }\n\n    for (; d % C_FIVE === C_ZERO;\n      d/= C_FIVE) {\n    }\n\n    if (d === C_ONE) // Catch non-cyclic numbers\n      return C_ZERO;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    let rem = C_TEN % d;\n    let t = 1;\n\n    for (; rem !== C_ONE; t++) {\n      rem = rem * C_TEN % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return C_ZERO; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return BigInt(t);\n  }\n\n  function cycleStart(n, d, len) {\n\n    let rem1 = C_ONE;\n    let rem2 = modpow(C_TEN, len, d);\n\n    for (let t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return BigInt(t);\n\n      rem1 = rem1 * C_TEN % d;\n      rem2 = rem2 * C_TEN % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a%= b;\n      if (!a)\n        return b;\n      b%= a;\n      if (!b)\n        return a;\n    }\n  }\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    parse(a, b);\n\n    if (this instanceof Fraction) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n      this[\"s\"] = P[\"s\"];\n      this[\"n\"] = P[\"n\"] / a;\n      this[\"d\"] = P[\"d\"] / a;\n    } else {\n      return newFraction(P['s'] * P['n'], P['d']);\n    }\n  }\n\n  Fraction['DivisionByZero'] = new Error(\"Division by Zero\");\n  Fraction['InvalidParameter'] = new Error(\"Invalid argument\");\n  Fraction['NonIntegerParameter'] = new Error(\"Parameters must be integer\");\n\n  Fraction.prototype = {\n\n    \"s\": C_ONE,\n    \"n\": C_ZERO,\n    \"d\": C_ONE,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return newFraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n        this[\"d\"] * P[\"n\"]\n      );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return newFraction(this['s'] * this['n'], this['d']);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (a === undefined) {\n        return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], C_ONE);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        throw Fraction['DivisionByZero'];\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return newFraction(\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n        P[\"d\"] * this[\"d\"]\n      );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === C_ZERO && this[\"n\"] === C_ZERO) {\n        return newFraction(C_ZERO, C_ONE);\n      }\n      return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n      return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(a, b) {\n\n      parse(a, b);\n\n      // Trivial case when exp is an integer\n\n      if (P['d'] === C_ONE) {\n\n        if (P['s'] < C_ZERO) {\n          return newFraction((this['s'] * this[\"d\"]) ** P['n'], this[\"n\"] ** P['n']);\n        } else {\n          return newFraction((this['s'] * this[\"n\"]) ** P['n'], this[\"d\"] ** P['n']);\n        }\n      }\n\n      // Negative roots become complex\n      //     (-a/b)^(c/d) = x\n      // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula\n      // From which follows that only for c=0 the root is non-complex\n      if (this['s'] < C_ZERO) return null;\n\n      // Now prime factor n and d\n      let N = factorize(this['n']);\n      let D = factorize(this['d']);\n\n      // Exponentiate and take root for n and d individually\n      let n = C_ONE;\n      let d = C_ONE;\n      for (let k in N) {\n        if (k === '1') continue;\n        if (k === '0') {\n          n = C_ZERO;\n          break;\n        }\n        N[k]*= P['n'];\n\n        if (N[k] % P['d'] === C_ZERO) {\n          N[k]/= P['d'];\n        } else return null;\n        n*= BigInt(k) ** N[k];\n      }\n\n      for (let k in D) {\n        if (k === '1') continue;\n        D[k]*= P['n'];\n\n        if (D[k] % P['d'] === C_ZERO) {\n          D[k]/= P['d'];\n        } else return null;\n        d*= BigInt(k) ** D[k];\n      }\n\n      if (P['s'] < C_ZERO) {\n        return newFraction(d, n);\n      }\n      return newFraction(n, d);\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      let t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n\n      return (C_ZERO < t) - (t < C_ZERO);\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = C_TEN ** BigInt(places || 0);\n\n      return newFraction(this[\"s\"] * places * this[\"n\"] / this[\"d\"] +\n        (places * this[\"n\"] % this[\"d\"] > C_ZERO && this[\"s\"] >= C_ZERO ? C_ONE : C_ZERO),\n        places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = C_TEN ** BigInt(places || 0);\n\n      return newFraction(this[\"s\"] * places * this[\"n\"] / this[\"d\"] -\n        (places * this[\"n\"] % this[\"d\"] > C_ZERO && this[\"s\"] < C_ZERO ? C_ONE : C_ZERO),\n        places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = C_TEN ** BigInt(places || 0);\n\n      /* Derivation:\n\n      s >= 0:\n        round(n / d) = trunc(n / d) + (n % d) / d >= 0.5 ? 1 : 0\n                     = trunc(n / d) + 2(n % d) >= d ? 1 : 0\n      s < 0:\n        round(n / d) =-trunc(n / d) - (n % d) / d > 0.5 ? 1 : 0\n                     =-trunc(n / d) - 2(n % d) > d ? 1 : 0\n\n      =>:\n\n      round(s * n / d) = s * trunc(n / d) + s * (C + 2(n % d) > d ? 1 : 0)\n          where C = s >= 0 ? 1 : 0, to fix the >= for the positve case.\n      */\n\n      return newFraction(this[\"s\"] * places * this[\"n\"] / this[\"d\"] +\n        this[\"s\"] * ((this[\"s\"] >= C_ZERO ? C_ONE : C_ZERO) + C_TWO * (places * this[\"n\"] % this[\"d\"]) > this[\"d\"] ? C_ONE : C_ZERO),\n        places);\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n      // Best we can do so far\n      return Number(this[\"s\"] * this[\"n\"]) / Number(this[\"d\"]);\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      let N = this[\"n\"];\n      let D = this[\"d\"];\n\n      dec = dec || 15; // 15 = decimal places when no repitation\n\n      let cycLen = cycleLen(N, D); // Cycle length\n      let cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      let str = this['s'] < C_ZERO ? \"-\" : \"\";\n\n      // Append integer part\n      str+= N / D;\n\n      N%= D;\n      N*= C_TEN;\n\n      if (N)\n        str+= \".\";\n\n      if (cycLen) {\n\n        for (let i = cycOff; i--;) {\n          str+= N / D;\n          N%= D;\n          N*= C_TEN;\n        }\n        str+= \"(\";\n        for (let i = cycLen; i--;) {\n          str+= N / D;\n          N%= D;\n          N*= C_TEN;\n        }\n        str+= \")\";\n      } else {\n        for (let i = dec; N && i--;) {\n          str+= N / D;\n          N%= D;\n          N*= C_TEN;\n        }\n      }\n      return str;\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      let n = this[\"n\"];\n      let d = this[\"d\"];\n      let str = this['s'] < C_ZERO ? \"-\" : \"\";\n\n      if (d === C_ONE) {\n        str+= n;\n      } else {\n        let whole = n / d;\n        if (excludeWhole && whole > C_ZERO) {\n          str+= whole;\n          str+= \" \";\n          n%= d;\n        }\n\n        str+= n;\n        str+= '/';\n        str+= d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      let n = this[\"n\"];\n      let d = this[\"d\"];\n      let str = this['s'] < C_ZERO ? \"-\" : \"\";\n\n      if (d === C_ONE) {\n        str+= n;\n      } else {\n        let whole = n / d;\n        if (excludeWhole && whole > C_ZERO) {\n          str+= whole;\n          n%= d;\n        }\n\n        str+= \"\\\\frac{\";\n        str+= n;\n        str+= '}{';\n        str+= d;\n        str+= '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      let a = this['n'];\n      let b = this['d'];\n      let res = [];\n\n      do {\n        res.push(a / b);\n        let t = a % b;\n        a = b;\n        b = t;\n      } while (a !== C_ONE);\n\n      return res;\n    },\n\n    \"simplify\": function(eps) {\n\n      eps = eps || 0.001;\n\n      const thisABS = this['abs']();\n      const cont = thisABS['toContinued']();\n\n      for (let i = 1; i < cont.length; i++) {\n\n        let s = newFraction(cont[i - 1], C_ONE);\n        for (let k = i - 2; k >= 0; k--) {\n          s = s['inverse']()['add'](cont[k]);\n        }\n\n        if (s['sub'](thisABS)['abs']().valueOf() < eps) {\n          return s['mul'](this['s']);\n        }\n      }\n      return this;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function() {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(exports, \"__esModule\", { 'value': true });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC,UAASA,IAAT,EAAe;EAEd,aAFc,CAId;;EACA,IAAI,CAACC,MAAL,EAAaA,MAAM,GAAG,UAASC,CAAT,EAAY;IAAE,IAAIC,KAAK,CAACD,CAAD,CAAT,EAAc,MAAM,IAAIE,KAAJ,CAAU,EAAV,CAAN;IAAqB,OAAOF,CAAP;EAAW,CAArE;EAEb,MAAMG,KAAK,GAAGJ,MAAM,CAAC,CAAD,CAApB;EACA,MAAMK,MAAM,GAAGL,MAAM,CAAC,CAAD,CAArB;EACA,MAAMM,KAAK,GAAGN,MAAM,CAAC,EAAD,CAApB;EACA,MAAMO,KAAK,GAAGP,MAAM,CAAC,CAAD,CAApB;EACA,MAAMQ,MAAM,GAAGR,MAAM,CAAC,CAAD,CAArB,CAXc,CAad;EACA;EACA;;EACA,MAAMS,aAAa,GAAG,IAAtB,CAhBc,CAkBd;;EACA,MAAMC,CAAC,GAAG;IACR,KAAKN,KADG;IAER,KAAKC,MAFG;IAGR,KAAKD;EAHG,CAAV;;EAMA,SAASO,MAAT,CAAgBV,CAAhB,EAAmBW,CAAnB,EAAsB;IAEpB,IAAI;MACFX,CAAC,GAAGD,MAAM,CAACC,CAAD,CAAV;IACD,CAFD,CAEE,OAAOY,CAAP,EAAU;MACV,MAAMC,QAAQ,CAAC,kBAAD,CAAd;IACD;;IACD,OAAOb,CAAC,GAAGW,CAAX;EACD,CAjCa,CAmCd;;;EACA,SAASG,WAAT,CAAqBd,CAArB,EAAwBe,CAAxB,EAA2B;IAEzB,IAAIA,CAAC,KAAKX,MAAV,EAAkB;MAChB,MAAMS,QAAQ,CAAC,gBAAD,CAAd;IACD;;IAED,MAAMG,CAAC,GAAGC,MAAM,CAACC,MAAP,CAAcL,QAAQ,CAACM,SAAvB,CAAV;IACAH,CAAC,CAAC,GAAD,CAAD,GAAShB,CAAC,GAAGI,MAAJ,GAAa,CAACD,KAAd,GAAsBA,KAA/B;IAEAH,CAAC,GAAGA,CAAC,GAAGI,MAAJ,GAAa,CAACJ,CAAd,GAAkBA,CAAtB;IAEA,MAAMoB,CAAC,GAAGC,GAAG,CAACrB,CAAD,EAAIe,CAAJ,CAAb;IAEAC,CAAC,CAAC,GAAD,CAAD,GAAShB,CAAC,GAAGoB,CAAb;IACAJ,CAAC,CAAC,GAAD,CAAD,GAASD,CAAC,GAAGK,CAAb;IACA,OAAOJ,CAAP;EACD;;EAED,SAASM,SAAT,CAAmBC,GAAnB,EAAwB;IAEtB,MAAMC,OAAO,GAAG,EAAhB;IAEA,IAAIxB,CAAC,GAAGuB,GAAR;IACA,IAAIE,CAAC,GAAGnB,KAAR;IACA,IAAIK,CAAC,GAAGJ,MAAM,GAAGJ,KAAjB;;IAEA,OAAOQ,CAAC,IAAIX,CAAZ,EAAe;MAEb,OAAOA,CAAC,GAAGyB,CAAJ,KAAUrB,MAAjB,EAAyB;QACvBJ,CAAC,IAAGyB,CAAJ;QACAD,OAAO,CAACC,CAAD,CAAP,GAAa,CAACD,OAAO,CAACC,CAAD,CAAP,IAAcrB,MAAf,IAAyBD,KAAtC;MACD;;MACDQ,CAAC,IAAGR,KAAK,GAAGG,KAAK,GAAGmB,CAAC,EAArB;IACD;;IAED,IAAIzB,CAAC,KAAKuB,GAAV,EAAe;MACb,IAAIvB,CAAC,GAAG,CAAR,EACEwB,OAAO,CAACxB,CAAD,CAAP,GAAa,CAACwB,OAAO,CAACxB,CAAD,CAAP,IAAcI,MAAf,IAAyBD,KAAtC;IACH,CAHD,MAGO;MACLqB,OAAO,CAACD,GAAD,CAAP,GAAe,CAACC,OAAO,CAACD,GAAD,CAAP,IAAgBnB,MAAjB,IAA2BD,KAA1C;IACD;;IACD,OAAOqB,OAAP;EACD;;EAED,MAAME,KAAK,GAAG,UAASC,EAAT,EAAaC,EAAb,EAAiB;IAE7B,IAAI5B,CAAC,GAAGI,MAAR;IAAA,IAAgBW,CAAC,GAAGZ,KAApB;IAAA,IAA2BQ,CAAC,GAAGR,KAA/B;;IAEA,IAAIwB,EAAE,KAAKE,SAAP,IAAoBF,EAAE,KAAK,IAA/B,EAAqC;MACnC;IACD,CAFD,MAEO,IAAIC,EAAE,KAAKC,SAAX,EAAsB;MAC3B7B,CAAC,GAAGD,MAAM,CAAC4B,EAAD,CAAV;MACAZ,CAAC,GAAGhB,MAAM,CAAC6B,EAAD,CAAV;MACAjB,CAAC,GAAGX,CAAC,GAAGe,CAAR;;MAEA,IAAIf,CAAC,GAAGG,KAAJ,KAAcC,MAAd,IAAwBW,CAAC,GAAGZ,KAAJ,KAAcC,MAA1C,EAAkD;QAChD,MAAMS,QAAQ,CAAC,qBAAD,CAAd;MACD;IAEF,CATM,MASA,IAAI,OAAOc,EAAP,KAAc,QAAlB,EAA4B;MACjC,IAAI,OAAOA,EAAP,IAAa,OAAOA,EAAxB,EAA4B;QAC1B3B,CAAC,GAAGD,MAAM,CAAC4B,EAAE,CAAC,GAAD,CAAH,CAAV;QACAZ,CAAC,GAAGhB,MAAM,CAAC4B,EAAE,CAAC,GAAD,CAAH,CAAV;QACA,IAAI,OAAOA,EAAX,EACE3B,CAAC,IAAGD,MAAM,CAAC4B,EAAE,CAAC,GAAD,CAAH,CAAV;MACH,CALD,MAKO,IAAI,KAAKA,EAAT,EAAa;QAClB3B,CAAC,GAAGD,MAAM,CAAC4B,EAAE,CAAC,CAAD,CAAH,CAAV;QACA,IAAI,KAAKA,EAAT,EACEZ,CAAC,GAAGhB,MAAM,CAAC4B,EAAE,CAAC,CAAD,CAAH,CAAV;MACH,CAJM,MAIA,IAAIA,EAAE,YAAY5B,MAAlB,EAA0B;QAC/BC,CAAC,GAAGD,MAAM,CAAC4B,EAAD,CAAV;MACD,CAFM,MAEA;QACL,MAAMd,QAAQ,CAAC,kBAAD,CAAd;MACD;;MACDF,CAAC,GAAGX,CAAC,GAAGe,CAAR;IACD,CAhBM,MAgBA,IAAI,OAAOY,EAAP,KAAc,QAAlB,EAA4B;MACjC3B,CAAC,GAAG2B,EAAJ;MACAhB,CAAC,GAAGgB,EAAJ;MACAZ,CAAC,GAAGhB,MAAM,CAAC,CAAD,CAAV;IACD,CAJM,MAIA,IAAI,OAAO4B,EAAP,KAAc,QAAlB,EAA4B;MAEjC,IAAI1B,KAAK,CAAC0B,EAAD,CAAT,EAAe;QACb,MAAMd,QAAQ,CAAC,kBAAD,CAAd;MACD;;MAED,IAAIc,EAAE,GAAG,CAAT,EAAY;QACVhB,CAAC,GAAG,CAACR,KAAL;QACAwB,EAAE,GAAG,CAACA,EAAN;MACD;;MAED,IAAIA,EAAE,GAAG,CAAL,KAAW,CAAf,EAAkB;QAChB3B,CAAC,GAAGD,MAAM,CAAC4B,EAAD,CAAV;MACD,CAFD,MAEO,IAAIA,EAAE,GAAG,CAAT,EAAY;QAAE;QAEnB,IAAIG,CAAC,GAAG,CAAR;QAEA,IAAIC,CAAC,GAAG,CAAR;QAAA,IAAWC,CAAC,GAAG,CAAf;QACA,IAAIC,CAAC,GAAG,CAAR;QAAA,IAAWC,CAAC,GAAG,CAAf;QAEA,IAAIC,CAAC,GAAG,QAAR;;QAEA,IAAIR,EAAE,IAAI,CAAV,EAAa;UACXG,CAAC,GAAG,MAAMM,IAAI,CAACC,KAAL,CAAW,IAAID,IAAI,CAACE,KAAL,CAAWX,EAAX,CAAf,CAAV;UACAA,EAAE,IAAGG,CAAL;QACD,CAZgB,CAcjB;;;QAEA,OAAOE,CAAC,IAAIG,CAAL,IAAUD,CAAC,IAAIC,CAAtB,EAAyB;UACvB,IAAII,CAAC,GAAG,CAACR,CAAC,GAAGE,CAAL,KAAWD,CAAC,GAAGE,CAAf,CAAR;;UAEA,IAAIP,EAAE,KAAKY,CAAX,EAAc;YACZ,IAAIP,CAAC,GAAGE,CAAJ,IAASC,CAAb,EAAgB;cACdnC,CAAC,GAAG+B,CAAC,GAAGE,CAAR;cACAlB,CAAC,GAAGiB,CAAC,GAAGE,CAAR;YACD,CAHD,MAGO,IAAIA,CAAC,GAAGF,CAAR,EAAW;cAChBhC,CAAC,GAAGiC,CAAJ;cACAlB,CAAC,GAAGmB,CAAJ;YACD,CAHM,MAGA;cACLlC,CAAC,GAAG+B,CAAJ;cACAhB,CAAC,GAAGiB,CAAJ;YACD;;YACD;UAED,CAbD,MAaO;YAEL,IAAIL,EAAE,GAAGY,CAAT,EAAY;cACVR,CAAC,IAAGE,CAAJ;cACAD,CAAC,IAAGE,CAAJ;YACD,CAHD,MAGO;cACLD,CAAC,IAAGF,CAAJ;cACAG,CAAC,IAAGF,CAAJ;YACD;;YAED,IAAIA,CAAC,GAAGG,CAAR,EAAW;cACTnC,CAAC,GAAGiC,CAAJ;cACAlB,CAAC,GAAGmB,CAAJ;YACD,CAHD,MAGO;cACLlC,CAAC,GAAG+B,CAAJ;cACAhB,CAAC,GAAGiB,CAAJ;YACD;UACF;QACF;;QACDhC,CAAC,GAAGD,MAAM,CAACC,CAAD,CAAN,GAAYD,MAAM,CAAC+B,CAAD,CAAtB;QACAf,CAAC,GAAGhB,MAAM,CAACgB,CAAD,CAAV;MAED;IAEF,CArEM,MAqEA,IAAI,OAAOY,EAAP,KAAc,QAAlB,EAA4B;MAEjC,IAAIa,GAAG,GAAG,CAAV;MAEA,IAAIC,CAAC,GAAGrC,MAAR;MAAA,IAAgBsC,CAAC,GAAGtC,MAApB;MAAA,IAA4BuC,CAAC,GAAGvC,MAAhC;MAAA,IAAwCwC,CAAC,GAAGzC,KAA5C;MAAA,IAAmD2B,CAAC,GAAG3B,KAAvD;MAEA,IAAI0C,KAAK,GAAGlB,EAAE,CAACkB,KAAH,CAAS,QAAT,CAAZ;MAEA,IAAIA,KAAK,KAAK,IAAd,EACE,MAAMhC,QAAQ,CAAC,kBAAD,CAAd;;MAEF,IAAIgC,KAAK,CAACL,GAAD,CAAL,KAAe,GAAnB,EAAwB;QAAC;QACvB7B,CAAC,GAAG,CAACR,KAAL;QACAqC,GAAG;MACJ,CAHD,MAGO,IAAIK,KAAK,CAACL,GAAD,CAAL,KAAe,GAAnB,EAAwB;QAAC;QAC9BA,GAAG;MACJ;;MAED,IAAIK,KAAK,CAACC,MAAN,KAAiBN,GAAG,GAAG,CAA3B,EAA8B;QAAE;QAC9BE,CAAC,GAAGhC,MAAM,CAACmC,KAAK,CAACL,GAAG,EAAJ,CAAN,EAAe7B,CAAf,CAAV;MACD,CAFD,MAEO,IAAIkC,KAAK,CAACL,GAAG,GAAG,CAAP,CAAL,KAAmB,GAAnB,IAA0BK,KAAK,CAACL,GAAD,CAAL,KAAe,GAA7C,EAAkD;QAAE;QAEzD,IAAIK,KAAK,CAACL,GAAD,CAAL,KAAe,GAAnB,EAAwB;UAAE;UACxBC,CAAC,GAAG/B,MAAM,CAACmC,KAAK,CAACL,GAAG,EAAJ,CAAN,EAAe7B,CAAf,CAAV;QACD;;QACD6B,GAAG,GALoD,CAOvD;;QACA,IAAIA,GAAG,GAAG,CAAN,KAAYK,KAAK,CAACC,MAAlB,IAA4BD,KAAK,CAACL,GAAG,GAAG,CAAP,CAAL,KAAmB,GAAnB,IAA0BK,KAAK,CAACL,GAAG,GAAG,CAAP,CAAL,KAAmB,GAAzE,IAAgFK,KAAK,CAACL,GAAG,GAAG,CAAP,CAAL,KAAmB,GAAnB,IAA0BK,KAAK,CAACL,GAAG,GAAG,CAAP,CAAL,KAAmB,GAAjI,EAAsI;UACpIE,CAAC,GAAGhC,MAAM,CAACmC,KAAK,CAACL,GAAD,CAAN,EAAa7B,CAAb,CAAV;UACAiC,CAAC,GAAGvC,KAAK,IAAIN,MAAM,CAAC8C,KAAK,CAACL,GAAD,CAAL,CAAWM,MAAZ,CAAnB;UACAN,GAAG;QACJ,CAZsD,CAcvD;;;QACA,IAAIK,KAAK,CAACL,GAAD,CAAL,KAAe,GAAf,IAAsBK,KAAK,CAACL,GAAG,GAAG,CAAP,CAAL,KAAmB,GAAzC,IAAgDK,KAAK,CAACL,GAAD,CAAL,KAAe,GAAf,IAAsBK,KAAK,CAACL,GAAG,GAAG,CAAP,CAAL,KAAmB,GAA7F,EAAkG;UAChGG,CAAC,GAAGjC,MAAM,CAACmC,KAAK,CAACL,GAAG,GAAG,CAAP,CAAN,EAAiB7B,CAAjB,CAAV;UACAmB,CAAC,GAAGzB,KAAK,IAAIN,MAAM,CAAC8C,KAAK,CAACL,GAAG,GAAG,CAAP,CAAL,CAAeM,MAAhB,CAAf,GAAyC3C,KAA7C;UACAqC,GAAG,IAAG,CAAN;QACD;MAEF,CArBM,MAqBA,IAAIK,KAAK,CAACL,GAAG,GAAG,CAAP,CAAL,KAAmB,GAAnB,IAA0BK,KAAK,CAACL,GAAG,GAAG,CAAP,CAAL,KAAmB,GAAjD,EAAsD;QAAE;QAC7DE,CAAC,GAAGhC,MAAM,CAACmC,KAAK,CAACL,GAAD,CAAN,EAAa7B,CAAb,CAAV;QACAiC,CAAC,GAAGlC,MAAM,CAACmC,KAAK,CAACL,GAAG,GAAG,CAAP,CAAN,EAAiBrC,KAAjB,CAAV;QACAqC,GAAG,IAAG,CAAN;MACD,CAJM,MAIA,IAAIK,KAAK,CAACL,GAAG,GAAG,CAAP,CAAL,KAAmB,GAAnB,IAA0BK,KAAK,CAACL,GAAG,GAAG,CAAP,CAAL,KAAmB,GAAjD,EAAsD;QAAE;QAC7DC,CAAC,GAAG/B,MAAM,CAACmC,KAAK,CAACL,GAAD,CAAN,EAAa7B,CAAb,CAAV;QACA+B,CAAC,GAAGhC,MAAM,CAACmC,KAAK,CAACL,GAAG,GAAG,CAAP,CAAN,EAAiB7B,CAAjB,CAAV;QACAiC,CAAC,GAAGlC,MAAM,CAACmC,KAAK,CAACL,GAAG,GAAG,CAAP,CAAN,EAAiBrC,KAAjB,CAAV;QACAqC,GAAG,IAAG,CAAN;MACD;;MAED,IAAIK,KAAK,CAACC,MAAN,IAAgBN,GAApB,EAAyB;QAAE;QACzBzB,CAAC,GAAG6B,CAAC,GAAGd,CAAR;QACAnB,CAAC;QAAG;QACJX,CAAC,GAAG2C,CAAC,GAAG5B,CAAC,GAAG0B,CAAR,GAAYX,CAAC,GAAGY,CADpB;MAED,CAJD,MAIO;QACL,MAAM7B,QAAQ,CAAC,kBAAD,CAAd;MACD;IAEF,CA5DM,MA4DA;MACL,MAAMA,QAAQ,CAAC,kBAAD,CAAd;IACD;;IAED,IAAIE,CAAC,KAAKX,MAAV,EAAkB;MAChB,MAAMS,QAAQ,CAAC,gBAAD,CAAd;IACD;;IAEDJ,CAAC,CAAC,GAAD,CAAD,GAASE,CAAC,GAAGP,MAAJ,GAAa,CAACD,KAAd,GAAsBA,KAA/B;IACAM,CAAC,CAAC,GAAD,CAAD,GAAST,CAAC,GAAGI,MAAJ,GAAa,CAACJ,CAAd,GAAkBA,CAA3B;IACAS,CAAC,CAAC,GAAD,CAAD,GAASM,CAAC,GAAGX,MAAJ,GAAa,CAACW,CAAd,GAAkBA,CAA3B;EACD,CA/KD;;EAiLA,SAASgC,MAAT,CAAgBC,CAAhB,EAAmBpC,CAAnB,EAAsBqC,CAAtB,EAAyB;IAEvB,IAAIC,CAAC,GAAG/C,KAAR;;IACA,OAAOS,CAAC,GAAGR,MAAX,EAAmB4C,CAAC,GAAIA,CAAC,GAAGA,CAAL,GAAUC,CAAd,EAAiBrC,CAAC,KAAKT,KAA1C,EAAiD;MAE/C,IAAIS,CAAC,GAAGT,KAAR,EAAe;QACb+C,CAAC,GAAIA,CAAC,GAAGF,CAAL,GAAUC,CAAd;MACD;IACF;;IACD,OAAOC,CAAP;EACD;;EAED,SAASC,QAAT,CAAkBnD,CAAlB,EAAqBe,CAArB,EAAwB;IAEtB,OAAOA,CAAC,GAAGT,KAAJ,KAAcF,MAArB,EACEW,CAAC,IAAGT,KADN,EACa,CACZ;;IAED,OAAOS,CAAC,GAAGR,MAAJ,KAAeH,MAAtB,EACEW,CAAC,IAAGR,MADN,EACc,CACb;;IAED,IAAIQ,CAAC,KAAKZ,KAAV,EAAiB;MACf,OAAOC,MAAP,CAXoB,CAatB;IACA;IACA;IACA;;IAEA,IAAIgD,GAAG,GAAG/C,KAAK,GAAGU,CAAlB;IACA,IAAIsC,CAAC,GAAG,CAAR;;IAEA,OAAOD,GAAG,KAAKjD,KAAf,EAAsBkD,CAAC,EAAvB,EAA2B;MACzBD,GAAG,GAAGA,GAAG,GAAG/C,KAAN,GAAcU,CAApB;MAEA,IAAIsC,CAAC,GAAG7C,aAAR,EACE,OAAOJ,MAAP,CAJuB,CAIR;IAClB;;IACD,OAAOL,MAAM,CAACsD,CAAD,CAAb;EACD;;EAED,SAASC,UAAT,CAAoBtD,CAApB,EAAuBe,CAAvB,EAA0BwC,GAA1B,EAA+B;IAE7B,IAAIC,IAAI,GAAGrD,KAAX;IACA,IAAIsD,IAAI,GAAGV,MAAM,CAAC1C,KAAD,EAAQkD,GAAR,EAAaxC,CAAb,CAAjB;;IAEA,KAAK,IAAIsC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;MAAE;MAC9B;MAEA,IAAIG,IAAI,KAAKC,IAAb,EACE,OAAO1D,MAAM,CAACsD,CAAD,CAAb;MAEFG,IAAI,GAAGA,IAAI,GAAGnD,KAAP,GAAeU,CAAtB;MACA0C,IAAI,GAAGA,IAAI,GAAGpD,KAAP,GAAeU,CAAtB;IACD;;IACD,OAAO,CAAP;EACD;;EAED,SAASM,GAAT,CAAaD,CAAb,EAAgB4B,CAAhB,EAAmB;IAEjB,IAAI,CAAC5B,CAAL,EACE,OAAO4B,CAAP;IACF,IAAI,CAACA,CAAL,EACE,OAAO5B,CAAP;;IAEF,OAAO,CAAP,EAAU;MACRA,CAAC,IAAG4B,CAAJ;MACA,IAAI,CAAC5B,CAAL,EACE,OAAO4B,CAAP;MACFA,CAAC,IAAG5B,CAAJ;MACA,IAAI,CAAC4B,CAAL,EACE,OAAO5B,CAAP;IACH;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACE,SAASP,QAAT,CAAkBO,CAAlB,EAAqB4B,CAArB,EAAwB;IAEtBtB,KAAK,CAACN,CAAD,EAAI4B,CAAJ,CAAL;;IAEA,IAAI,gBAAgBnC,QAApB,EAA8B;MAC5BO,CAAC,GAAGC,GAAG,CAACZ,CAAC,CAAC,GAAD,CAAF,EAASA,CAAC,CAAC,GAAD,CAAV,CAAP,CAD4B,CACH;;MACzB,KAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAAb;MACA,KAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAAD,GAASW,CAArB;MACA,KAAK,GAAL,IAAYX,CAAC,CAAC,GAAD,CAAD,GAASW,CAArB;IACD,CALD,MAKO;MACL,OAAON,WAAW,CAACL,CAAC,CAAC,GAAD,CAAD,GAASA,CAAC,CAAC,GAAD,CAAX,EAAkBA,CAAC,CAAC,GAAD,CAAnB,CAAlB;IACD;EACF;;EAEDI,QAAQ,CAAC,gBAAD,CAAR,GAA6B,IAAIX,KAAJ,CAAU,kBAAV,CAA7B;EACAW,QAAQ,CAAC,kBAAD,CAAR,GAA+B,IAAIX,KAAJ,CAAU,kBAAV,CAA/B;EACAW,QAAQ,CAAC,qBAAD,CAAR,GAAkC,IAAIX,KAAJ,CAAU,4BAAV,CAAlC;EAEAW,QAAQ,CAACM,SAAT,GAAqB;IAEnB,KAAKhB,KAFc;IAGnB,KAAKC,MAHc;IAInB,KAAKD,KAJc;;IAMnB;AACJ;AACA;AACA;AACA;IACI,OAAO,YAAW;MAEhB,OAAOW,WAAW,CAAC,KAAK,GAAL,CAAD,EAAY,KAAK,GAAL,CAAZ,CAAlB;IACD,CAdkB;;IAgBnB;AACJ;AACA;AACA;AACA;IACI,OAAO,YAAW;MAEhB,OAAOA,WAAW,CAAC,CAAC,KAAK,GAAL,CAAD,GAAa,KAAK,GAAL,CAAd,EAAyB,KAAK,GAAL,CAAzB,CAAlB;IACD,CAxBkB;;IA0BnB;AACJ;AACA;AACA;AACA;IACI,OAAO,UAASM,CAAT,EAAY4B,CAAZ,EAAe;MAEpBtB,KAAK,CAACN,CAAD,EAAI4B,CAAJ,CAAL;MACA,OAAOlC,WAAW,CAChB,KAAK,GAAL,IAAY,KAAK,GAAL,CAAZ,GAAwBL,CAAC,CAAC,GAAD,CAAzB,GAAiCA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAAT,GAAqBA,CAAC,CAAC,GAAD,CADvC,EAEhB,KAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAFG,CAAlB;IAID,CAtCkB;;IAwCnB;AACJ;AACA;AACA;AACA;IACI,OAAO,UAASW,CAAT,EAAY4B,CAAZ,EAAe;MAEpBtB,KAAK,CAACN,CAAD,EAAI4B,CAAJ,CAAL;MACA,OAAOlC,WAAW,CAChB,KAAK,GAAL,IAAY,KAAK,GAAL,CAAZ,GAAwBL,CAAC,CAAC,GAAD,CAAzB,GAAiCA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAAT,GAAqBA,CAAC,CAAC,GAAD,CADvC,EAEhB,KAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAFG,CAAlB;IAID,CApDkB;;IAsDnB;AACJ;AACA;AACA;AACA;IACI,OAAO,UAASW,CAAT,EAAY4B,CAAZ,EAAe;MAEpBtB,KAAK,CAACN,CAAD,EAAI4B,CAAJ,CAAL;MACA,OAAOlC,WAAW,CAChB,KAAK,GAAL,IAAYL,CAAC,CAAC,GAAD,CAAb,GAAqB,KAAK,GAAL,CAArB,GAAiCA,CAAC,CAAC,GAAD,CADlB,EAEhB,KAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAFG,CAAlB;IAID,CAlEkB;;IAoEnB;AACJ;AACA;AACA;AACA;IACI,OAAO,UAASW,CAAT,EAAY4B,CAAZ,EAAe;MAEpBtB,KAAK,CAACN,CAAD,EAAI4B,CAAJ,CAAL;MACA,OAAOlC,WAAW,CAChB,KAAK,GAAL,IAAYL,CAAC,CAAC,GAAD,CAAb,GAAqB,KAAK,GAAL,CAArB,GAAiCA,CAAC,CAAC,GAAD,CADlB,EAEhB,KAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAFG,CAAlB;IAID,CAhFkB;;IAkFnB;AACJ;AACA;AACA;AACA;IACI,SAAS,YAAW;MAClB,OAAOK,WAAW,CAAC,KAAK,GAAL,IAAY,KAAK,GAAL,CAAb,EAAwB,KAAK,GAAL,CAAxB,CAAlB;IACD,CAzFkB;;IA2FnB;AACJ;AACA;AACA;AACA;IACI,OAAO,UAASM,CAAT,EAAY4B,CAAZ,EAAe;MAEpB,IAAI5B,CAAC,KAAKS,SAAV,EAAqB;QACnB,OAAOf,WAAW,CAAC,KAAK,GAAL,IAAY,KAAK,GAAL,CAAZ,GAAwB,KAAK,GAAL,CAAzB,EAAoCX,KAApC,CAAlB;MACD;;MAEDuB,KAAK,CAACN,CAAD,EAAI4B,CAAJ,CAAL;;MACA,IAAI,MAAMvC,CAAC,CAAC,GAAD,CAAP,IAAgB,MAAM,KAAK,GAAL,CAA1B,EAAqC;QACnC,MAAMI,QAAQ,CAAC,gBAAD,CAAd;MACD;MAED;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;MAEM;AACN;AACA;AACA;AACA;;;MACM,OAAOC,WAAW,CAChB,KAAK,GAAL,KAAaL,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAAtB,KAAoCA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAA7C,CADgB,EAEhBA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAFO,CAAlB;IAID,CA7HkB;;IA+HnB;AACJ;AACA;AACA;AACA;IACI,OAAO,UAASW,CAAT,EAAY4B,CAAZ,EAAe;MAEpBtB,KAAK,CAACN,CAAD,EAAI4B,CAAJ,CAAL,CAFoB,CAIpB;;MAEA,OAAOlC,WAAW,CAACO,GAAG,CAACZ,CAAC,CAAC,GAAD,CAAF,EAAS,KAAK,GAAL,CAAT,CAAH,GAAyBY,GAAG,CAACZ,CAAC,CAAC,GAAD,CAAF,EAAS,KAAK,GAAL,CAAT,CAA7B,EAAkDA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAA3D,CAAlB;IACD,CA3IkB;;IA6InB;AACJ;AACA;AACA;AACA;IACI,OAAO,UAASW,CAAT,EAAY4B,CAAZ,EAAe;MAEpBtB,KAAK,CAACN,CAAD,EAAI4B,CAAJ,CAAL,CAFoB,CAIpB;;MAEA,IAAIvC,CAAC,CAAC,GAAD,CAAD,KAAWL,MAAX,IAAqB,KAAK,GAAL,MAAcA,MAAvC,EAA+C;QAC7C,OAAOU,WAAW,CAACV,MAAD,EAASD,KAAT,CAAlB;MACD;;MACD,OAAOW,WAAW,CAACL,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAAV,EAAqBY,GAAG,CAACZ,CAAC,CAAC,GAAD,CAAF,EAAS,KAAK,GAAL,CAAT,CAAH,GAAyBY,GAAG,CAACZ,CAAC,CAAC,GAAD,CAAF,EAAS,KAAK,GAAL,CAAT,CAAjD,CAAlB;IACD,CA5JkB;;IA8JnB;AACJ;AACA;AACA;AACA;IACI,WAAW,YAAW;MACpB,OAAOK,WAAW,CAAC,KAAK,GAAL,IAAY,KAAK,GAAL,CAAb,EAAwB,KAAK,GAAL,CAAxB,CAAlB;IACD,CArKkB;;IAuKnB;AACJ;AACA;AACA;AACA;IACI,OAAO,UAASM,CAAT,EAAY4B,CAAZ,EAAe;MAEpBtB,KAAK,CAACN,CAAD,EAAI4B,CAAJ,CAAL,CAFoB,CAIpB;;MAEA,IAAIvC,CAAC,CAAC,GAAD,CAAD,KAAWN,KAAf,EAAsB;QAEpB,IAAIM,CAAC,CAAC,GAAD,CAAD,GAASL,MAAb,EAAqB;UACnB,OAAOU,WAAW,CAAC,CAAC,KAAK,GAAL,IAAY,KAAK,GAAL,CAAb,KAA2BL,CAAC,CAAC,GAAD,CAA7B,EAAoC,KAAK,GAAL,KAAaA,CAAC,CAAC,GAAD,CAAlD,CAAlB;QACD,CAFD,MAEO;UACL,OAAOK,WAAW,CAAC,CAAC,KAAK,GAAL,IAAY,KAAK,GAAL,CAAb,KAA2BL,CAAC,CAAC,GAAD,CAA7B,EAAoC,KAAK,GAAL,KAAaA,CAAC,CAAC,GAAD,CAAlD,CAAlB;QACD;MACF,CAbmB,CAepB;MACA;MACA;MACA;MACA;MACA;;;MACA,IAAI,KAAK,GAAL,IAAYL,MAAhB,EAAwB,OAAO,IAAP,CArBJ,CAuBpB;;MACA,IAAI+B,CAAC,GAAGb,SAAS,CAAC,KAAK,GAAL,CAAD,CAAjB;MACA,IAAIY,CAAC,GAAGZ,SAAS,CAAC,KAAK,GAAL,CAAD,CAAjB,CAzBoB,CA2BpB;;MACA,IAAItB,CAAC,GAAGG,KAAR;MACA,IAAIY,CAAC,GAAGZ,KAAR;;MACA,KAAK,IAAIuD,CAAT,IAAcvB,CAAd,EAAiB;QACf,IAAIuB,CAAC,KAAK,GAAV,EAAe;;QACf,IAAIA,CAAC,KAAK,GAAV,EAAe;UACb1D,CAAC,GAAGI,MAAJ;UACA;QACD;;QACD+B,CAAC,CAACuB,CAAD,CAAD,IAAOjD,CAAC,CAAC,GAAD,CAAR;;QAEA,IAAI0B,CAAC,CAACuB,CAAD,CAAD,GAAOjD,CAAC,CAAC,GAAD,CAAR,KAAkBL,MAAtB,EAA8B;UAC5B+B,CAAC,CAACuB,CAAD,CAAD,IAAOjD,CAAC,CAAC,GAAD,CAAR;QACD,CAFD,MAEO,OAAO,IAAP;;QACPT,CAAC,IAAGD,MAAM,CAAC2D,CAAD,CAAN,IAAavB,CAAC,CAACuB,CAAD,CAAlB;MACD;;MAED,KAAK,IAAIA,CAAT,IAAcxB,CAAd,EAAiB;QACf,IAAIwB,CAAC,KAAK,GAAV,EAAe;QACfxB,CAAC,CAACwB,CAAD,CAAD,IAAOjD,CAAC,CAAC,GAAD,CAAR;;QAEA,IAAIyB,CAAC,CAACwB,CAAD,CAAD,GAAOjD,CAAC,CAAC,GAAD,CAAR,KAAkBL,MAAtB,EAA8B;UAC5B8B,CAAC,CAACwB,CAAD,CAAD,IAAOjD,CAAC,CAAC,GAAD,CAAR;QACD,CAFD,MAEO,OAAO,IAAP;;QACPM,CAAC,IAAGhB,MAAM,CAAC2D,CAAD,CAAN,IAAaxB,CAAC,CAACwB,CAAD,CAAlB;MACD;;MAED,IAAIjD,CAAC,CAAC,GAAD,CAAD,GAASL,MAAb,EAAqB;QACnB,OAAOU,WAAW,CAACC,CAAD,EAAIf,CAAJ,CAAlB;MACD;;MACD,OAAOc,WAAW,CAACd,CAAD,EAAIe,CAAJ,CAAlB;IACD,CAtOkB;;IAwOnB;AACJ;AACA;AACA;AACA;IACI,UAAU,UAASK,CAAT,EAAY4B,CAAZ,EAAe;MAEvBtB,KAAK,CAACN,CAAD,EAAI4B,CAAJ,CAAL;MACA,OAAO,KAAK,GAAL,IAAY,KAAK,GAAL,CAAZ,GAAwBvC,CAAC,CAAC,GAAD,CAAzB,KAAmCA,CAAC,CAAC,GAAD,CAAD,GAASA,CAAC,CAAC,GAAD,CAAV,GAAkB,KAAK,GAAL,CAA5D,CAHuB,CAGgD;IACxE,CAjPkB;;IAmPnB;AACJ;AACA;AACA;AACA;IACI,WAAW,UAASW,CAAT,EAAY4B,CAAZ,EAAe;MAExBtB,KAAK,CAACN,CAAD,EAAI4B,CAAJ,CAAL;MACA,IAAIK,CAAC,GAAI,KAAK,GAAL,IAAY,KAAK,GAAL,CAAZ,GAAwB5C,CAAC,CAAC,GAAD,CAAzB,GAAiCA,CAAC,CAAC,GAAD,CAAD,GAASA,CAAC,CAAC,GAAD,CAAV,GAAkB,KAAK,GAAL,CAA5D;MAEA,OAAO,CAACL,MAAM,GAAGiD,CAAV,KAAgBA,CAAC,GAAGjD,MAApB,CAAP;IACD,CA9PkB;;IAgQnB;AACJ;AACA;AACA;AACA;IACI,QAAQ,UAASuD,MAAT,EAAiB;MAEvBA,MAAM,GAAGtD,KAAK,IAAIN,MAAM,CAAC4D,MAAM,IAAI,CAAX,CAAxB;MAEA,OAAO7C,WAAW,CAAC,KAAK,GAAL,IAAY6C,MAAZ,GAAqB,KAAK,GAAL,CAArB,GAAiC,KAAK,GAAL,CAAjC,IAChBA,MAAM,GAAG,KAAK,GAAL,CAAT,GAAqB,KAAK,GAAL,CAArB,GAAiCvD,MAAjC,IAA2C,KAAK,GAAL,KAAaA,MAAxD,GAAiED,KAAjE,GAAyEC,MADzD,CAAD,EAEhBuD,MAFgB,CAAlB;IAGD,CA5QkB;;IA8QnB;AACJ;AACA;AACA;AACA;IACI,SAAS,UAASA,MAAT,EAAiB;MAExBA,MAAM,GAAGtD,KAAK,IAAIN,MAAM,CAAC4D,MAAM,IAAI,CAAX,CAAxB;MAEA,OAAO7C,WAAW,CAAC,KAAK,GAAL,IAAY6C,MAAZ,GAAqB,KAAK,GAAL,CAArB,GAAiC,KAAK,GAAL,CAAjC,IAChBA,MAAM,GAAG,KAAK,GAAL,CAAT,GAAqB,KAAK,GAAL,CAArB,GAAiCvD,MAAjC,IAA2C,KAAK,GAAL,IAAYA,MAAvD,GAAgED,KAAhE,GAAwEC,MADxD,CAAD,EAEhBuD,MAFgB,CAAlB;IAGD,CA1RkB;;IA4RnB;AACJ;AACA;AACA;AACA;IACI,SAAS,UAASA,MAAT,EAAiB;MAExBA,MAAM,GAAGtD,KAAK,IAAIN,MAAM,CAAC4D,MAAM,IAAI,CAAX,CAAxB;MAEA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAKM,OAAO7C,WAAW,CAAC,KAAK,GAAL,IAAY6C,MAAZ,GAAqB,KAAK,GAAL,CAArB,GAAiC,KAAK,GAAL,CAAjC,GACjB,KAAK,GAAL,KAAa,CAAC,KAAK,GAAL,KAAavD,MAAb,GAAsBD,KAAtB,GAA8BC,MAA/B,IAAyCE,KAAK,IAAIqD,MAAM,GAAG,KAAK,GAAL,CAAT,GAAqB,KAAK,GAAL,CAAzB,CAA9C,GAAoF,KAAK,GAAL,CAApF,GAAgGxD,KAAhG,GAAwGC,MAArH,CADgB,EAEhBuD,MAFgB,CAAlB;IAGD,CAvTkB;;IAyTnB;AACJ;AACA;AACA;AACA;IACI,aAAa,UAASvC,CAAT,EAAY4B,CAAZ,EAAe;MAE1BtB,KAAK,CAACN,CAAD,EAAI4B,CAAJ,CAAL;MACA,OAAO,EAAE,EAAEvC,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAAX,KAA2B,KAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAAd,IAAwBA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAAjC,CAA5B,CAAP;IACD,CAlUkB;;IAoUnB;AACJ;AACA;AACA;AACA;IACI,WAAW,YAAW;MACpB;MACA,OAAOmD,MAAM,CAAC,KAAK,GAAL,IAAY,KAAK,GAAL,CAAb,CAAN,GAAgCA,MAAM,CAAC,KAAK,GAAL,CAAD,CAA7C;IACD,CA5UkB;;IA8UnB;AACJ;AACA;AACA;AACA;IACI,YAAY,UAASC,GAAT,EAAc;MAExB,IAAI1B,CAAC,GAAG,KAAK,GAAL,CAAR;MACA,IAAID,CAAC,GAAG,KAAK,GAAL,CAAR;MAEA2B,GAAG,GAAGA,GAAG,IAAI,EAAb,CALwB,CAKP;;MAEjB,IAAIC,MAAM,GAAGX,QAAQ,CAAChB,CAAD,EAAID,CAAJ,CAArB,CAPwB,CAOK;;MAC7B,IAAI6B,MAAM,GAAGT,UAAU,CAACnB,CAAD,EAAID,CAAJ,EAAO4B,MAAP,CAAvB,CARwB,CAQe;;MAEvC,IAAIE,GAAG,GAAG,KAAK,GAAL,IAAY5D,MAAZ,GAAqB,GAArB,GAA2B,EAArC,CAVwB,CAYxB;;MACA4D,GAAG,IAAG7B,CAAC,GAAGD,CAAV;MAEAC,CAAC,IAAGD,CAAJ;MACAC,CAAC,IAAG9B,KAAJ;MAEA,IAAI8B,CAAJ,EACE6B,GAAG,IAAG,GAAN;;MAEF,IAAIF,MAAJ,EAAY;QAEV,KAAK,IAAIrC,CAAC,GAAGsC,MAAb,EAAqBtC,CAAC,EAAtB,GAA2B;UACzBuC,GAAG,IAAG7B,CAAC,GAAGD,CAAV;UACAC,CAAC,IAAGD,CAAJ;UACAC,CAAC,IAAG9B,KAAJ;QACD;;QACD2D,GAAG,IAAG,GAAN;;QACA,KAAK,IAAIvC,CAAC,GAAGqC,MAAb,EAAqBrC,CAAC,EAAtB,GAA2B;UACzBuC,GAAG,IAAG7B,CAAC,GAAGD,CAAV;UACAC,CAAC,IAAGD,CAAJ;UACAC,CAAC,IAAG9B,KAAJ;QACD;;QACD2D,GAAG,IAAG,GAAN;MACD,CAdD,MAcO;QACL,KAAK,IAAIvC,CAAC,GAAGoC,GAAb,EAAkB1B,CAAC,IAAIV,CAAC,EAAxB,GAA6B;UAC3BuC,GAAG,IAAG7B,CAAC,GAAGD,CAAV;UACAC,CAAC,IAAGD,CAAJ;UACAC,CAAC,IAAG9B,KAAJ;QACD;MACF;;MACD,OAAO2D,GAAP;IACD,CA9XkB;;IAgYnB;AACJ;AACA;AACA;AACA;IACI,cAAc,UAASC,YAAT,EAAuB;MAEnC,IAAIjE,CAAC,GAAG,KAAK,GAAL,CAAR;MACA,IAAIe,CAAC,GAAG,KAAK,GAAL,CAAR;MACA,IAAIiD,GAAG,GAAG,KAAK,GAAL,IAAY5D,MAAZ,GAAqB,GAArB,GAA2B,EAArC;;MAEA,IAAIW,CAAC,KAAKZ,KAAV,EAAiB;QACf6D,GAAG,IAAGhE,CAAN;MACD,CAFD,MAEO;QACL,IAAIkE,KAAK,GAAGlE,CAAC,GAAGe,CAAhB;;QACA,IAAIkD,YAAY,IAAIC,KAAK,GAAG9D,MAA5B,EAAoC;UAClC4D,GAAG,IAAGE,KAAN;UACAF,GAAG,IAAG,GAAN;UACAhE,CAAC,IAAGe,CAAJ;QACD;;QAEDiD,GAAG,IAAGhE,CAAN;QACAgE,GAAG,IAAG,GAAN;QACAA,GAAG,IAAGjD,CAAN;MACD;;MACD,OAAOiD,GAAP;IACD,CA1ZkB;;IA4ZnB;AACJ;AACA;AACA;AACA;IACI,WAAW,UAASC,YAAT,EAAuB;MAEhC,IAAIjE,CAAC,GAAG,KAAK,GAAL,CAAR;MACA,IAAIe,CAAC,GAAG,KAAK,GAAL,CAAR;MACA,IAAIiD,GAAG,GAAG,KAAK,GAAL,IAAY5D,MAAZ,GAAqB,GAArB,GAA2B,EAArC;;MAEA,IAAIW,CAAC,KAAKZ,KAAV,EAAiB;QACf6D,GAAG,IAAGhE,CAAN;MACD,CAFD,MAEO;QACL,IAAIkE,KAAK,GAAGlE,CAAC,GAAGe,CAAhB;;QACA,IAAIkD,YAAY,IAAIC,KAAK,GAAG9D,MAA5B,EAAoC;UAClC4D,GAAG,IAAGE,KAAN;UACAlE,CAAC,IAAGe,CAAJ;QACD;;QAEDiD,GAAG,IAAG,SAAN;QACAA,GAAG,IAAGhE,CAAN;QACAgE,GAAG,IAAG,IAAN;QACAA,GAAG,IAAGjD,CAAN;QACAiD,GAAG,IAAG,GAAN;MACD;;MACD,OAAOA,GAAP;IACD,CAvbkB;;IAybnB;AACJ;AACA;AACA;AACA;IACI,eAAe,YAAW;MAExB,IAAI5C,CAAC,GAAG,KAAK,GAAL,CAAR;MACA,IAAI4B,CAAC,GAAG,KAAK,GAAL,CAAR;MACA,IAAImB,GAAG,GAAG,EAAV;;MAEA,GAAG;QACDA,GAAG,CAACC,IAAJ,CAAShD,CAAC,GAAG4B,CAAb;QACA,IAAIK,CAAC,GAAGjC,CAAC,GAAG4B,CAAZ;QACA5B,CAAC,GAAG4B,CAAJ;QACAA,CAAC,GAAGK,CAAJ;MACD,CALD,QAKSjC,CAAC,KAAKjB,KALf;;MAOA,OAAOgE,GAAP;IACD,CA5ckB;IA8cnB,YAAY,UAASE,GAAT,EAAc;MAExBA,GAAG,GAAGA,GAAG,IAAI,KAAb;MAEA,MAAMC,OAAO,GAAG,KAAK,KAAL,GAAhB;MACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,aAAD,CAAP,EAAb;;MAEA,KAAK,IAAI7C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8C,IAAI,CAACzB,MAAzB,EAAiCrB,CAAC,EAAlC,EAAsC;QAEpC,IAAId,CAAC,GAAGG,WAAW,CAACyD,IAAI,CAAC9C,CAAC,GAAG,CAAL,CAAL,EAActB,KAAd,CAAnB;;QACA,KAAK,IAAIuD,CAAC,GAAGjC,CAAC,GAAG,CAAjB,EAAoBiC,CAAC,IAAI,CAAzB,EAA4BA,CAAC,EAA7B,EAAiC;UAC/B/C,CAAC,GAAGA,CAAC,CAAC,SAAD,CAAD,GAAe,KAAf,EAAsB4D,IAAI,CAACb,CAAD,CAA1B,CAAJ;QACD;;QAED,IAAI/C,CAAC,CAAC,KAAD,CAAD,CAAS2D,OAAT,EAAkB,KAAlB,IAA2BE,OAA3B,KAAuCH,GAA3C,EAAgD;UAC9C,OAAO1D,CAAC,CAAC,KAAD,CAAD,CAAS,KAAK,GAAL,CAAT,CAAP;QACD;MACF;;MACD,OAAO,IAAP;IACD;EAjekB,CAArB;;EAoeA,IAAI,OAAO8D,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAAC,KAAD,CAA1C,EAAmD;IACjDA,MAAM,CAAC,EAAD,EAAK,YAAW;MACpB,OAAO5D,QAAP;IACD,CAFK,CAAN;EAGD,CAJD,MAIO,IAAI,OAAO6D,OAAP,KAAmB,QAAvB,EAAiC;IACtCzD,MAAM,CAAC0D,cAAP,CAAsBD,OAAtB,EAA+B,YAA/B,EAA6C;MAAE,SAAS;IAAX,CAA7C;IACA7D,QAAQ,CAAC,SAAD,CAAR,GAAsBA,QAAtB;IACAA,QAAQ,CAAC,UAAD,CAAR,GAAuBA,QAAvB;IACA+D,MAAM,CAAC,SAAD,CAAN,GAAoB/D,QAApB;EACD,CALM,MAKA;IACLf,IAAI,CAAC,UAAD,CAAJ,GAAmBe,QAAnB;EACD;AAEF,CAv1BD,EAu1BG,IAv1BH"},"metadata":{},"sourceType":"script"}