{"ast":null,"code":"var {\n  assert\n} = require('chai');\n\nvar forge = require('node-forge');\n\nvar fs = require('fs');\n\nvar exec = require('child_process').exec;\n\ndescribe('generate', function () {\n  var generate = require('../index').generate;\n\n  it('should work without attrs/options', function (done) {\n    var pems = generate();\n    assert.ok(!!pems.private, 'has a private key');\n    assert.ok(!!pems.fingerprint, 'has fingerprint');\n    assert.ok(!!pems.public, 'has a public key');\n    assert.ok(!!pems.cert, 'has a certificate');\n    assert.ok(!pems.pkcs7, 'should not include a pkcs7 by default');\n    assert.ok(!pems.clientcert, 'should not include a client cert by default');\n    assert.ok(!pems.clientprivate, 'should not include a client private key by default');\n    assert.ok(!pems.clientpublic, 'should not include a client public key by default');\n    var caStore = forge.pki.createCaStore();\n    caStore.addCertificate(pems.cert);\n    done();\n  });\n  it('should generate client cert', function (done) {\n    var pems = generate(null, {\n      clientCertificate: true\n    });\n    assert.ok(!!pems.clientcert, 'should include a client cert when requested');\n    assert.ok(!!pems.clientprivate, 'should include a client private key when requested');\n    assert.ok(!!pems.clientpublic, 'should include a client public key when requested');\n    done();\n  });\n  it('should include pkcs7', function (done) {\n    var pems = generate([{\n      name: 'commonName',\n      value: 'contoso.com'\n    }], {\n      pkcs7: true\n    });\n    assert.ok(!!pems.pkcs7, 'has a pkcs7');\n\n    try {\n      fs.unlinkSync('/tmp/tmp.pkcs7');\n    } catch (er) {}\n\n    fs.writeFileSync('/tmp/tmp.pkcs7', pems.pkcs7);\n    exec('openssl pkcs7 -print_certs -in /tmp/tmp.pkcs7', function (err, stdout, stderr) {\n      if (err) {\n        return done(err);\n      }\n\n      const errorMessage = stderr.toString();\n\n      if (errorMessage.length) {\n        return done(new Error(errorMessage));\n      }\n\n      const expected = stdout.toString();\n      let [subjectLine, issuerLine, ...cert] = expected.split(/\\r?\\n/).filter(c => c);\n      cert = cert.filter(c => c);\n      assert.match(subjectLine, /subject=\\/?CN\\s?=\\s?contoso.com/i);\n      assert.match(issuerLine, /issuer=\\/?CN\\s?=\\s?contoso.com/i);\n      assert.strictEqual(pems.cert, cert.join('\\r\\n') + '\\r\\n');\n      done();\n    });\n  });\n  it('should support sha1 algorithm', function (done) {\n    var pems_sha1 = generate(null, {\n      algorithm: 'sha1'\n    });\n    assert.ok(forge.pki.certificateFromPem(pems_sha1.cert).siginfo.algorithmOid === forge.pki.oids['sha1WithRSAEncryption'], 'can generate sha1 certs');\n    done();\n  });\n  it('should support sha256 algorithm', function (done) {\n    var pems_sha256 = generate(null, {\n      algorithm: 'sha256'\n    });\n    assert.ok(forge.pki.certificateFromPem(pems_sha256.cert).siginfo.algorithmOid === forge.pki.oids['sha256WithRSAEncryption'], 'can generate sha256 certs');\n    done();\n  });\n  describe('with callback', function () {\n    it('should work without attrs/options', function (done) {\n      generate(function (err, pems) {\n        if (err) done(err);\n        assert.ok(!!pems.private, 'has a private key');\n        assert.ok(!!pems.public, 'has a public key');\n        assert.ok(!!pems.cert, 'has a certificate');\n        assert.ok(!pems.pkcs7, 'should not include a pkcs7 by default');\n        assert.ok(!pems.clientcert, 'should not include a client cert by default');\n        assert.ok(!pems.clientprivate, 'should not include a client private key by default');\n        assert.ok(!pems.clientpublic, 'should not include a client public key by default');\n        done();\n      });\n    });\n    it('should generate client cert', function (done) {\n      generate(null, {\n        clientCertificate: true\n      }, function (err, pems) {\n        if (err) done(err);\n        assert.ok(!!pems.clientcert, 'should include a client cert when requested');\n        assert.ok(!!pems.clientprivate, 'should include a client private key when requested');\n        assert.ok(!!pems.clientpublic, 'should include a client public key when requested');\n        done();\n      });\n    });\n    it('should include pkcs7', function (done) {\n      generate([{\n        name: 'commonName',\n        value: 'contoso.com'\n      }], {\n        pkcs7: true\n      }, function (err, pems) {\n        if (err) done(err);\n        assert.ok(!!pems.pkcs7, 'has a pkcs7');\n\n        try {\n          fs.unlinkSync('/tmp/tmp.pkcs7');\n        } catch (er) {}\n\n        fs.writeFileSync('/tmp/tmp.pkcs7', pems.pkcs7);\n        exec('openssl pkcs7 -print_certs -in /tmp/tmp.pkcs7', function (err, stdout, stderr) {\n          if (err) {\n            return done(err);\n          }\n\n          const errorMessage = stderr.toString();\n\n          if (errorMessage.length) {\n            return done(new Error(errorMessage));\n          }\n\n          const expected = stdout.toString();\n          let [subjectLine, issuerLine, ...cert] = expected.split(/\\r?\\n/).filter(c => c);\n          assert.match(subjectLine, /subject=\\/?CN\\s?=\\s?contoso.com/i);\n          assert.match(issuerLine, /issuer=\\/?CN\\s?=\\s?contoso.com/i);\n          assert.strictEqual(pems.cert, cert.join('\\r\\n') + '\\r\\n');\n          done();\n        });\n      });\n    });\n    it('should support sha1 algorithm', function (done) {\n      generate(null, {\n        algorithm: 'sha1'\n      }, function (err, pems_sha1) {\n        if (err) done(err);\n        assert.ok(forge.pki.certificateFromPem(pems_sha1.cert).siginfo.algorithmOid === forge.pki.oids['sha1WithRSAEncryption'], 'can generate sha1 certs');\n        done();\n      });\n    });\n    it('should support sha256 algorithm', function (done) {\n      generate(null, {\n        algorithm: 'sha256'\n      }, function (err, pems_sha256) {\n        if (err) done(err);\n        assert.ok(forge.pki.certificateFromPem(pems_sha256.cert).siginfo.algorithmOid === forge.pki.oids['sha256WithRSAEncryption'], 'can generate sha256 certs');\n        done();\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","forge","fs","exec","describe","generate","it","done","pems","ok","private","fingerprint","public","cert","pkcs7","clientcert","clientprivate","clientpublic","caStore","pki","createCaStore","addCertificate","clientCertificate","name","value","unlinkSync","er","writeFileSync","err","stdout","stderr","errorMessage","toString","length","Error","expected","subjectLine","issuerLine","split","filter","c","match","strictEqual","join","pems_sha1","algorithm","certificateFromPem","siginfo","algorithmOid","oids","pems_sha256"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/selfsigned/test/tests.js"],"sourcesContent":["var { assert } = require('chai');\nvar forge      = require('node-forge');\nvar fs         = require('fs');\nvar exec       = require('child_process').exec;\n\ndescribe('generate', function () {\n\n  var generate = require('../index').generate;\n\n  it('should work without attrs/options', function (done) {\n    var pems = generate();\n    assert.ok(!!pems.private, 'has a private key');\n    assert.ok(!!pems.fingerprint, 'has fingerprint');\n    assert.ok(!!pems.public, 'has a public key');\n    assert.ok(!!pems.cert, 'has a certificate');\n    assert.ok(!pems.pkcs7, 'should not include a pkcs7 by default');\n    assert.ok(!pems.clientcert, 'should not include a client cert by default');\n    assert.ok(!pems.clientprivate, 'should not include a client private key by default');\n    assert.ok(!pems.clientpublic, 'should not include a client public key by default');\n\n    var caStore = forge.pki.createCaStore();\n    caStore.addCertificate(pems.cert);\n    done();\n  });\n\n  it('should generate client cert', function (done) {\n    var pems = generate(null, {clientCertificate: true});\n\n    assert.ok(!!pems.clientcert, 'should include a client cert when requested');\n    assert.ok(!!pems.clientprivate, 'should include a client private key when requested');\n    assert.ok(!!pems.clientpublic, 'should include a client public key when requested');\n    done();\n  });\n\n  it('should include pkcs7', function (done) {\n    var pems = generate([{ name: 'commonName', value: 'contoso.com' }], {pkcs7: true});\n\n    assert.ok(!!pems.pkcs7, 'has a pkcs7');\n\n    try {\n      fs.unlinkSync('/tmp/tmp.pkcs7');\n    } catch (er) {}\n\n    fs.writeFileSync('/tmp/tmp.pkcs7', pems.pkcs7);\n    exec('openssl pkcs7 -print_certs -in /tmp/tmp.pkcs7', function (err, stdout, stderr) {\n      if (err) {\n        return done(err);\n      }\n\n      const errorMessage = stderr.toString();\n      if (errorMessage.length) {\n        return done(new Error(errorMessage));\n      }\n\n      const expected = stdout.toString();\n      let [ subjectLine,issuerLine, ...cert ] = expected.split(/\\r?\\n/).filter(c => c);\n      cert = cert.filter(c => c);\n      assert.match(subjectLine, /subject=\\/?CN\\s?=\\s?contoso.com/i);\n      assert.match(issuerLine, /issuer=\\/?CN\\s?=\\s?contoso.com/i);\n      assert.strictEqual(\n        pems.cert,\n        cert.join('\\r\\n') + '\\r\\n'\n      );\n\n      done();\n    });\n  });\n\n  it('should support sha1 algorithm', function (done) {\n    var pems_sha1 = generate(null, { algorithm: 'sha1' });\n    assert.ok(forge.pki.certificateFromPem(pems_sha1.cert).siginfo.algorithmOid === forge.pki.oids['sha1WithRSAEncryption'], 'can generate sha1 certs');\n    done();\n  });\n\n  it('should support sha256 algorithm', function (done) {\n    var pems_sha256 = generate(null, { algorithm: 'sha256' });\n    assert.ok(forge.pki.certificateFromPem(pems_sha256.cert).siginfo.algorithmOid === forge.pki.oids['sha256WithRSAEncryption'], 'can generate sha256 certs');\n    done();\n  });\n\n  describe('with callback', function () {\n    it('should work without attrs/options', function (done) {\n      generate(function (err, pems) {\n        if (err) done(err);\n        assert.ok(!!pems.private, 'has a private key');\n        assert.ok(!!pems.public, 'has a public key');\n        assert.ok(!!pems.cert, 'has a certificate');\n        assert.ok(!pems.pkcs7, 'should not include a pkcs7 by default');\n        assert.ok(!pems.clientcert, 'should not include a client cert by default');\n        assert.ok(!pems.clientprivate, 'should not include a client private key by default');\n        assert.ok(!pems.clientpublic, 'should not include a client public key by default');\n        done();\n      });\n    });\n\n    it('should generate client cert', function (done) {\n      generate(null, {clientCertificate: true}, function (err, pems) {\n        if (err) done(err);\n        assert.ok(!!pems.clientcert, 'should include a client cert when requested');\n        assert.ok(!!pems.clientprivate, 'should include a client private key when requested');\n        assert.ok(!!pems.clientpublic, 'should include a client public key when requested');\n        done();\n      });\n    });\n\n    it('should include pkcs7', function (done) {\n      generate([{ name: 'commonName', value: 'contoso.com' }], {pkcs7: true}, function (err, pems) {\n        if (err) done(err);\n        assert.ok(!!pems.pkcs7, 'has a pkcs7');\n\n        try {\n          fs.unlinkSync('/tmp/tmp.pkcs7');\n        } catch (er) {}\n\n        fs.writeFileSync('/tmp/tmp.pkcs7', pems.pkcs7);\n        exec('openssl pkcs7 -print_certs -in /tmp/tmp.pkcs7', function (err, stdout, stderr) {\n          if (err) {\n            return done(err);\n          }\n\n          const errorMessage = stderr.toString();\n          if (errorMessage.length) {\n            return done(new Error(errorMessage));\n          }\n\n          const expected = stdout.toString();\n          let [ subjectLine,issuerLine, ...cert ] = expected.split(/\\r?\\n/).filter(c => c);\n          assert.match(subjectLine, /subject=\\/?CN\\s?=\\s?contoso.com/i);\n          assert.match(issuerLine, /issuer=\\/?CN\\s?=\\s?contoso.com/i);\n          assert.strictEqual(\n            pems.cert,\n            cert.join('\\r\\n') + '\\r\\n'\n          );\n\n          done();\n        });\n      });\n    });\n\n    it('should support sha1 algorithm', function (done) {\n      generate(null, { algorithm: 'sha1' }, function (err, pems_sha1) {\n        if (err) done(err);\n        assert.ok(forge.pki.certificateFromPem(pems_sha1.cert).siginfo.algorithmOid === forge.pki.oids['sha1WithRSAEncryption'], 'can generate sha1 certs');\n        done();\n      });\n    });\n\n    it('should support sha256 algorithm', function (done) {\n      generate(null, { algorithm: 'sha256' }, function (err, pems_sha256) {\n        if (err) done(err);\n        assert.ok(forge.pki.certificateFromPem(pems_sha256.cert).siginfo.algorithmOid === forge.pki.oids['sha256WithRSAEncryption'], 'can generate sha256 certs');\n        done();\n      });\n    });\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}