{"ast":null,"code":"function resolveMemberExpressions() {\n  let object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let property = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (object.type === 'JSXMemberExpression') {\n    return `${resolveMemberExpressions(object.object, object.property)}.${property.name}`;\n  }\n\n  return `${object.name}.${property.name}`;\n}\n/**\n * Returns the tagName associated with a JSXElement.\n */\n\n\nexport default function elementType() {\n  let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    name\n  } = node;\n\n  if (node.type === 'JSXOpeningFragment') {\n    return '<>';\n  }\n\n  if (!name) {\n    throw new Error('The argument provided is not a JSXElement node.');\n  }\n\n  if (name.type === 'JSXMemberExpression') {\n    const {\n      object = {},\n      property = {}\n    } = name;\n    return resolveMemberExpressions(object, property);\n  }\n\n  if (name.type === 'JSXNamespacedName') {\n    return `${name.namespace.name}:${name.name.name}`;\n  }\n\n  return node.name.name;\n}","map":{"version":3,"names":["resolveMemberExpressions","object","property","type","name","elementType","node","Error","namespace"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/src/elementType.js"],"sourcesContent":["function resolveMemberExpressions(object = {}, property = {}) {\n  if (object.type === 'JSXMemberExpression') {\n    return `${resolveMemberExpressions(object.object, object.property)}.${property.name}`;\n  }\n\n  return `${object.name}.${property.name}`;\n}\n\n/**\n * Returns the tagName associated with a JSXElement.\n */\nexport default function elementType(node = {}) {\n  const { name } = node;\n\n  if (node.type === 'JSXOpeningFragment') {\n    return '<>';\n  }\n\n  if (!name) {\n    throw new Error('The argument provided is not a JSXElement node.');\n  }\n\n  if (name.type === 'JSXMemberExpression') {\n    const { object = {}, property = {} } = name;\n    return resolveMemberExpressions(object, property);\n  }\n\n  if (name.type === 'JSXNamespacedName') {\n    return `${name.namespace.name}:${name.name.name}`;\n  }\n\n  return node.name.name;\n}\n"],"mappings":"AAAA,SAASA,wBAAT,GAA8D;EAAA,IAA5BC,MAA4B,uEAAnB,EAAmB;EAAA,IAAfC,QAAe,uEAAJ,EAAI;;EAC5D,IAAID,MAAM,CAACE,IAAP,KAAgB,qBAApB,EAA2C;IACzC,OAAQ,GAAEH,wBAAwB,CAACC,MAAM,CAACA,MAAR,EAAgBA,MAAM,CAACC,QAAvB,CAAiC,IAAGA,QAAQ,CAACE,IAAK,EAApF;EACD;;EAED,OAAQ,GAAEH,MAAM,CAACG,IAAK,IAAGF,QAAQ,CAACE,IAAK,EAAvC;AACD;AAED;AACA;AACA;;;AACA,eAAe,SAASC,WAAT,GAAgC;EAAA,IAAXC,IAAW,uEAAJ,EAAI;EAC7C,MAAM;IAAEF;EAAF,IAAWE,IAAjB;;EAEA,IAAIA,IAAI,CAACH,IAAL,KAAc,oBAAlB,EAAwC;IACtC,OAAO,IAAP;EACD;;EAED,IAAI,CAACC,IAAL,EAAW;IACT,MAAM,IAAIG,KAAJ,CAAU,iDAAV,CAAN;EACD;;EAED,IAAIH,IAAI,CAACD,IAAL,KAAc,qBAAlB,EAAyC;IACvC,MAAM;MAAEF,MAAM,GAAG,EAAX;MAAeC,QAAQ,GAAG;IAA1B,IAAiCE,IAAvC;IACA,OAAOJ,wBAAwB,CAACC,MAAD,EAASC,QAAT,CAA/B;EACD;;EAED,IAAIE,IAAI,CAACD,IAAL,KAAc,mBAAlB,EAAuC;IACrC,OAAQ,GAAEC,IAAI,CAACI,SAAL,CAAeJ,IAAK,IAAGA,IAAI,CAACA,IAAL,CAAUA,IAAK,EAAhD;EACD;;EAED,OAAOE,IAAI,CAACF,IAAL,CAAUA,IAAjB;AACD"},"metadata":{},"sourceType":"module"}