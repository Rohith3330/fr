{"ast":null,"code":"import expect from 'expect';\nimport isDisabledElement from '../../../src/util/isDisabledElement';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\ndescribe('isDisabledElement', () => {\n  describe('HTML5', () => {\n    describe('disabled', () => {\n      it('should identify HTML5 disabled elements', () => {\n        const attributes = [JSXAttributeMock('disabled', 'disabled')];\n        expect(isDisabledElement(attributes)).toBe(true);\n      });\n    });\n    describe('not disabled', () => {\n      it('should identify HTML5 disabled elements with null as the value', () => {\n        const attributes = [JSXAttributeMock('disabled', null)];\n        expect(isDisabledElement(attributes)).toBe(true);\n      });\n      it('should not identify HTML5 disabled elements with undefined as the value', () => {\n        const attributes = [JSXAttributeMock('disabled', undefined)];\n        expect(isDisabledElement(attributes)).toBe(false);\n      });\n    });\n  });\n  describe('ARIA', () => {\n    describe('disabled', () => {\n      it('should not identify ARIA disabled elements', () => {\n        const attributes = [JSXAttributeMock('aria-disabled', 'true')];\n        expect(isDisabledElement(attributes)).toBe(true);\n      });\n      it('should not identify ARIA disabled elements', () => {\n        const attributes = [JSXAttributeMock('aria-disabled', true)];\n        expect(isDisabledElement(attributes)).toBe(true);\n      });\n    });\n    describe('not disabled', () => {\n      it('should not identify ARIA disabled elements', () => {\n        const attributes = [JSXAttributeMock('aria-disabled', 'false')];\n        expect(isDisabledElement(attributes)).toBe(false);\n      });\n      it('should not identify ARIA disabled elements', () => {\n        const attributes = [JSXAttributeMock('aria-disabled', false)];\n        expect(isDisabledElement(attributes)).toBe(false);\n      });\n      it('should not identify ARIA disabled elements with null as the value', () => {\n        const attributes = [JSXAttributeMock('aria-disabled', null)];\n        expect(isDisabledElement(attributes)).toBe(false);\n      });\n      it('should not identify ARIA disabled elements with undefined as the value', () => {\n        const attributes = [JSXAttributeMock('aria-disabled', undefined)];\n        expect(isDisabledElement(attributes)).toBe(false);\n      });\n    });\n  });\n});","map":{"version":3,"names":["expect","isDisabledElement","JSXAttributeMock","describe","it","attributes","toBe","undefined"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/isDisabledElement-test.js"],"sourcesContent":["import expect from 'expect';\nimport isDisabledElement from '../../../src/util/isDisabledElement';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\n\ndescribe('isDisabledElement', () => {\n  describe('HTML5', () => {\n    describe('disabled', () => {\n      it('should identify HTML5 disabled elements', () => {\n        const attributes = [\n          JSXAttributeMock('disabled', 'disabled'),\n        ];\n        expect(isDisabledElement(attributes))\n          .toBe(true);\n      });\n    });\n    describe('not disabled', () => {\n      it('should identify HTML5 disabled elements with null as the value', () => {\n        const attributes = [\n          JSXAttributeMock('disabled', null),\n        ];\n        expect(isDisabledElement(attributes))\n          .toBe(true);\n      });\n      it('should not identify HTML5 disabled elements with undefined as the value', () => {\n        const attributes = [\n          JSXAttributeMock('disabled', undefined),\n        ];\n        expect(isDisabledElement(attributes))\n          .toBe(false);\n      });\n    });\n  });\n  describe('ARIA', () => {\n    describe('disabled', () => {\n      it('should not identify ARIA disabled elements', () => {\n        const attributes = [\n          JSXAttributeMock('aria-disabled', 'true'),\n        ];\n        expect(isDisabledElement(attributes))\n          .toBe(true);\n      });\n      it('should not identify ARIA disabled elements', () => {\n        const attributes = [\n          JSXAttributeMock('aria-disabled', true),\n        ];\n        expect(isDisabledElement(attributes))\n          .toBe(true);\n      });\n    });\n    describe('not disabled', () => {\n      it('should not identify ARIA disabled elements', () => {\n        const attributes = [\n          JSXAttributeMock('aria-disabled', 'false'),\n        ];\n        expect(isDisabledElement(attributes))\n          .toBe(false);\n      });\n      it('should not identify ARIA disabled elements', () => {\n        const attributes = [\n          JSXAttributeMock('aria-disabled', false),\n        ];\n        expect(isDisabledElement(attributes))\n          .toBe(false);\n      });\n      it('should not identify ARIA disabled elements with null as the value', () => {\n        const attributes = [\n          JSXAttributeMock('aria-disabled', null),\n        ];\n        expect(isDisabledElement(attributes))\n          .toBe(false);\n      });\n      it('should not identify ARIA disabled elements with undefined as the value', () => {\n        const attributes = [\n          JSXAttributeMock('aria-disabled', undefined),\n        ];\n        expect(isDisabledElement(attributes))\n          .toBe(false);\n      });\n    });\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}