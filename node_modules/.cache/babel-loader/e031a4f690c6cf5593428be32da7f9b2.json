{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Service = void 0;\n\nconst os_1 = __importDefault(require(\"os\"));\n\nconst dns_txt_1 = __importDefault(require(\"./dns-txt\"));\n\nconst events_1 = require(\"events\");\n\nconst service_types_1 = require(\"./service-types\");\n\nconst TLD = '.local';\n\nclass Service extends events_1.EventEmitter {\n  constructor(config) {\n    super();\n    this.probe = true;\n    this.published = false;\n    this.activated = false;\n    this.destroyed = false;\n    this.txtService = new dns_txt_1.default();\n    if (!config.name) throw new Error('ServiceConfig requires `name` property to be set');\n    if (!config.type) throw new Error('ServiceConfig requires `type` property to be set');\n    if (!config.port) throw new Error('ServiceConfig requires `port` property to be set');\n    this.name = config.name;\n    this.protocol = config.protocol || 'tcp';\n    this.type = (0, service_types_1.toString)({\n      name: config.type,\n      protocol: this.protocol\n    });\n    this.port = config.port;\n    this.host = config.host || os_1.default.hostname();\n    this.fqdn = `${this.name}.${this.type}${TLD}`;\n    this.txt = config.txt;\n    this.subtypes = config.subtypes;\n  }\n\n  records() {\n    var records = [this.RecordPTR(this), this.RecordSRV(this), this.RecordTXT(this)];\n    let ifaces = Object.values(os_1.default.networkInterfaces());\n\n    for (let iface of ifaces) {\n      let addrs = iface;\n\n      for (let addr of addrs) {\n        if (addr.internal || addr.mac === '00:00:00:00:00:00') continue;\n\n        switch (addr.family) {\n          case 'IPv4':\n            records.push(this.RecordA(this, addr.address));\n            break;\n\n          case 'IPv6':\n            records.push(this.RecordAAAA(this, addr.address));\n            break;\n        }\n      }\n    }\n\n    return records;\n  }\n\n  RecordPTR(service) {\n    return {\n      name: `${service.type}${TLD}`,\n      type: 'PTR',\n      ttl: 28800,\n      data: service.fqdn\n    };\n  }\n\n  RecordSRV(service) {\n    return {\n      name: service.fqdn,\n      type: 'SRV',\n      ttl: 120,\n      data: {\n        port: service.port,\n        target: service.host\n      }\n    };\n  }\n\n  RecordTXT(service) {\n    return {\n      name: service.fqdn,\n      type: 'TXT',\n      ttl: 4500,\n      data: this.txtService.encode(service.txt)\n    };\n  }\n\n  RecordA(service, ip) {\n    return {\n      name: service.host,\n      type: 'A',\n      ttl: 120,\n      data: ip\n    };\n  }\n\n  RecordAAAA(service, ip) {\n    return {\n      name: service.host,\n      type: 'AAAA',\n      ttl: 120,\n      data: ip\n    };\n  }\n\n}\n\nexports.Service = Service;\nexports.default = Service;","map":{"version":3,"mappings":"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","names":["TLD","Service","events_1","constructor","config","txtService","dns_txt_1","name","Error","type","port","protocol","host","os_1","hostname","fqdn","txt","subtypes","records","RecordPTR","RecordSRV","RecordTXT","ifaces","Object","values","networkInterfaces","iface","addrs","addr","internal","mac","family","push","RecordA","address","RecordAAAA","service","ttl","data","target","encode","ip","exports"],"sources":["../../src/lib/service.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}