{"ast":null,"code":"'use strict';\n\nconst assert = require('chai').assert;\n\nconst proxyquire = require('proxyquire');\n\nconst spooks = require('spooks');\n\nconst modulePath = '../../src/streamify';\nsuite('streamify:', () => {\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath);\n    });\n  });\n  test('require returns function', () => {\n    assert.isFunction(require(modulePath));\n  });\n  suite('require:', () => {\n    let log, results, streamify;\n    setup(() => {\n      log = {};\n      results = {\n        eventify: [{\n          on: spooks.fn({\n            name: 'on',\n            log: log\n          })\n        }],\n        push: [true]\n      };\n      streamify = proxyquire(modulePath, {\n        './eventify': spooks.fn({\n          name: 'eventify',\n          log: log,\n          results: results.eventify\n        }),\n        './jsonstream': spooks.ctor({\n          name: 'JsonStream',\n          log: log,\n          archetype: {\n            instance: {\n              push: () => {},\n              emit: () => {}\n            }\n          },\n          results: results\n        })\n      });\n    });\n    test('streamify expects one argument', () => {\n      assert.lengthOf(streamify, 1);\n    });\n    test('streamify does not throw', () => {\n      assert.doesNotThrow(() => {\n        streamify();\n      });\n    });\n    test('streamify returns stream', () => {\n      assert.isFunction(streamify().push);\n      assert.isFunction(streamify().emit);\n    });\n    test('JsonStream was not called', () => {\n      assert.strictEqual(log.counts.JsonStream, 0);\n    });\n    test('eventify was not called', () => {\n      assert.strictEqual(log.counts.eventify, 0);\n    });\n    test('EventEmitter.on was not called', () => {\n      assert.strictEqual(log.counts.on, 0);\n    });\n    suite('streamify:', () => {\n      let data, options, result;\n      setup(() => {\n        data = {};\n        options = {\n          foo: 'bar',\n          highWaterMark: 42\n        };\n        result = streamify(data, options);\n      });\n      test('JsonStream was called once', () => {\n        assert.strictEqual(log.counts.JsonStream, 1);\n        assert.isObject(log.these.JsonStream[0]);\n      });\n      test('JsonStream was called correctly', () => {\n        assert.lengthOf(log.args.JsonStream[0], 2);\n        assert.isFunction(log.args.JsonStream[0][0]);\n        assert.deepEqual(log.args.JsonStream[0][1], {\n          highWaterMark: 42\n        });\n      });\n      test('eventify was called once', () => {\n        assert.strictEqual(log.counts.eventify, 1);\n        assert.isUndefined(log.these.eventify[0]);\n      });\n      test('eventify was called correctly', () => {\n        assert.lengthOf(log.args.eventify[0], 2);\n        assert.strictEqual(log.args.eventify[0][0], data);\n        assert.lengthOf(Object.keys(log.args.eventify[0][0]), 0);\n        assert.strictEqual(log.args.eventify[0][1], options);\n        assert.lengthOf(Object.keys(log.args.eventify[0][1]), 2);\n      });\n      test('EventEmitter.on was called eleven times', () => {\n        assert.strictEqual(log.counts.on, 11);\n        assert.strictEqual(log.these.on[0], results.eventify[0]);\n        assert.strictEqual(log.these.on[1], results.eventify[0]);\n        assert.strictEqual(log.these.on[2], results.eventify[0]);\n        assert.strictEqual(log.these.on[3], results.eventify[0]);\n        assert.strictEqual(log.these.on[4], results.eventify[0]);\n        assert.strictEqual(log.these.on[5], results.eventify[0]);\n        assert.strictEqual(log.these.on[6], results.eventify[0]);\n        assert.strictEqual(log.these.on[7], results.eventify[0]);\n        assert.strictEqual(log.these.on[8], results.eventify[0]);\n        assert.strictEqual(log.these.on[9], results.eventify[0]);\n        assert.strictEqual(log.these.on[10], results.eventify[0]);\n      });\n      test('EventEmitter.on was called correctly first time', () => {\n        assert.lengthOf(log.args.on[0], 2);\n        assert.strictEqual(log.args.on[0][0], 'arr');\n        assert.isFunction(log.args.on[0][1]);\n      });\n      test('EventEmitter.on was called correctly second time', () => {\n        assert.lengthOf(log.args.on[1], 2);\n        assert.strictEqual(log.args.on[1][0], 'obj');\n        assert.isFunction(log.args.on[1][1]);\n      });\n      test('EventEmitter.on was called correctly third time', () => {\n        assert.lengthOf(log.args.on[2], 2);\n        assert.strictEqual(log.args.on[2][0], 'pro');\n        assert.isFunction(log.args.on[2][1]);\n      });\n      test('EventEmitter.on was called correctly fourth time', () => {\n        assert.lengthOf(log.args.on[3], 2);\n        assert.strictEqual(log.args.on[3][0], 'str');\n        assert.isFunction(log.args.on[3][1]);\n      });\n      test('EventEmitter.on was called correctly fifth time', () => {\n        assert.lengthOf(log.args.on[4], 2);\n        assert.strictEqual(log.args.on[4][0], 'num');\n        assert.isFunction(log.args.on[4][1]);\n      });\n      test('EventEmitter.on was called correctly sixth time', () => {\n        assert.lengthOf(log.args.on[5], 2);\n        assert.strictEqual(log.args.on[5][0], 'lit');\n        assert.isFunction(log.args.on[5][1]);\n      });\n      test('EventEmitter.on was called correctly seventh time', () => {\n        assert.lengthOf(log.args.on[6], 2);\n        assert.strictEqual(log.args.on[6][0], 'end-arr');\n        assert.isFunction(log.args.on[6][1]);\n      });\n      test('EventEmitter.on was called correctly eighth time', () => {\n        assert.lengthOf(log.args.on[7], 2);\n        assert.strictEqual(log.args.on[7][0], 'end-obj');\n        assert.isFunction(log.args.on[7][1]);\n      });\n      test('EventEmitter.on was called correctly ninth time', () => {\n        assert.lengthOf(log.args.on[8], 2);\n        assert.strictEqual(log.args.on[8][0], 'end');\n        assert.isFunction(log.args.on[8][1]);\n      });\n      test('EventEmitter.on was called correctly tenth time', () => {\n        assert.lengthOf(log.args.on[9], 2);\n        assert.strictEqual(log.args.on[9][0], 'err');\n        assert.isFunction(log.args.on[9][1]);\n      });\n      test('EventEmitter.on was called correctly eleventh time', () => {\n        assert.lengthOf(log.args.on[10], 2);\n        assert.strictEqual(log.args.on[10][0], 'err-data');\n        assert.isFunction(log.args.on[10][1]);\n      });\n      suite('array event:', () => {\n        setup(() => {\n          return log.args.on[0][1]();\n        });\n        test('stream.push was not called', () => {\n          assert.strictEqual(log.counts.push, 0);\n        });\n        suite('end event:', () => {\n          setup(() => {\n            return log.args.on[8][1]();\n          });\n          test('stream.push was not called', () => {\n            assert.strictEqual(log.counts.push, 0);\n          });\n          suite('read stream:', () => {\n            setup(() => {\n              log.args.JsonStream[0][0]();\n            });\n            test('stream.push was called twice', () => {\n              assert.strictEqual(log.counts.push, 2);\n            });\n            test('stream.push was called correctly first time', () => {\n              assert.lengthOf(log.args.push[0], 2);\n              assert.strictEqual(log.args.push[0][0], '[');\n              assert.strictEqual(log.args.push[0][1], 'utf8');\n            });\n            test('stream.push was called correctly second time', () => {\n              assert.lengthOf(log.args.push[1], 1);\n              assert.isNull(log.args.push[1][0]);\n            });\n            test('stream.emit was not called', () => {\n              assert.strictEqual(log.counts.emit, 0);\n            });\n          });\n        });\n        suite('read stream:', () => {\n          setup(() => {\n            log.args.JsonStream[0][0]();\n          });\n          test('stream.push was not called', () => {\n            assert.strictEqual(log.counts.push, 0);\n          });\n          suite('end event:', () => {\n            setup(() => {\n              return log.args.on[8][1]();\n            });\n            test('stream.push was called twice', () => {\n              assert.strictEqual(log.counts.push, 2);\n            });\n            test('stream.push was called correctly first time', () => {\n              assert.strictEqual(log.args.push[0][0], '[');\n            });\n            test('stream.push was called correctly second time', () => {\n              assert.isNull(log.args.push[1][0]);\n            });\n            test('stream.emit was not called', () => {\n              assert.strictEqual(log.counts.emit, 0);\n            });\n          });\n          suite('string event:', () => {\n            setup(() => {\n              return log.args.on[3][1]('foo');\n            });\n            test('stream.push was called twice', () => {\n              assert.strictEqual(log.counts.push, 2);\n            });\n            test('stream.push was called correctly', () => {\n              assert.strictEqual(log.args.push[0][0], '[');\n              assert.strictEqual(log.args.push[1][0], '\"foo\"');\n            });\n            suite('string event:', () => {\n              setup(() => {\n                return log.args.on[3][1]('bar');\n              });\n              test('stream.push was called twice', () => {\n                assert.strictEqual(log.counts.push, 4);\n              });\n              test('stream.push was called correctly', () => {\n                assert.strictEqual(log.args.push[2][0], ',');\n                assert.strictEqual(log.args.push[3][0], '\"bar\"');\n              });\n            });\n            suite('array event:', () => {\n              setup(() => {\n                return log.args.on[0][1]();\n              });\n              test('stream.push was called twice', () => {\n                assert.strictEqual(log.counts.push, 4);\n              });\n              test('stream.push was called correctly', () => {\n                assert.strictEqual(log.args.push[2][0], ',');\n                assert.strictEqual(log.args.push[3][0], '[');\n              });\n              suite('array event:', () => {\n                setup(() => {\n                  return log.args.on[0][1]();\n                });\n                test('stream.push was called once', () => {\n                  assert.strictEqual(log.counts.push, 5);\n                });\n                test('stream.push was called correctly', () => {\n                  assert.strictEqual(log.args.push[4][0], '[');\n                });\n                suite('endArray event:', () => {\n                  setup(() => {\n                    return log.args.on[6][1]();\n                  });\n                  test('stream.push was called once', () => {\n                    assert.strictEqual(log.counts.push, 6);\n                  });\n                  test('stream.push was called correctly', () => {\n                    assert.strictEqual(log.args.push[5][0], ']');\n                  });\n                  suite('string event:', () => {\n                    setup(() => {\n                      return log.args.on[3][1]('bar');\n                    });\n                    test('stream.push was called twice', () => {\n                      assert.strictEqual(log.counts.push, 8);\n                    });\n                    test('stream.push was called correctly', () => {\n                      assert.strictEqual(log.args.push[6][0], ',');\n                      assert.strictEqual(log.args.push[7][0], '\"bar\"');\n                    });\n                    suite('string event:', () => {\n                      setup(() => {\n                        return log.args.on[3][1]('baz');\n                      });\n                      test('stream.push was called twice', () => {\n                        assert.strictEqual(log.counts.push, 10);\n                      });\n                      test('stream.push was called correctly', () => {\n                        assert.strictEqual(log.args.push[8][0], ',');\n                        assert.strictEqual(log.args.push[9][0], '\"baz\"');\n                      });\n                    });\n                    suite('endArray event:', () => {\n                      setup(() => {\n                        return log.args.on[6][1]();\n                      });\n                      test('stream.push was called once', () => {\n                        assert.strictEqual(log.counts.push, 9);\n                      });\n                      test('stream.push was called correctly', () => {\n                        assert.strictEqual(log.args.push[8][0], ']');\n                      });\n                      suite('string event:', () => {\n                        setup(() => {\n                          return log.args.on[3][1]('baz');\n                        });\n                        test('stream.push was called twice', () => {\n                          assert.strictEqual(log.counts.push, 11);\n                        });\n                        test('stream.push was called correctly', () => {\n                          assert.strictEqual(log.args.push[9][0], ',');\n                          assert.strictEqual(log.args.push[10][0], '\"baz\"');\n                        });\n                        test('stream.emit was not called', () => {\n                          assert.strictEqual(log.counts.emit, 0);\n                        });\n                      });\n                    });\n                  });\n                });\n              });\n            });\n            suite('object event:', () => {\n              setup(() => {\n                return log.args.on[1][1]();\n              });\n              test('stream.push was called twice', () => {\n                assert.strictEqual(log.counts.push, 4);\n              });\n              test('stream.push was called correctly', () => {\n                assert.strictEqual(log.args.push[2][0], ',');\n                assert.strictEqual(log.args.push[3][0], '{');\n              });\n              suite('property event:', () => {\n                setup(() => {\n                  return log.args.on[2][1]('bar');\n                });\n                test('stream.push was called once', () => {\n                  assert.strictEqual(log.counts.push, 5);\n                });\n                test('stream.push was called correctly', () => {\n                  assert.strictEqual(log.args.push[4][0], '\"bar\":');\n                });\n                suite('string event:', () => {\n                  setup(() => {\n                    return log.args.on[3][1]('baz');\n                  });\n                  test('stream.push was called once', () => {\n                    assert.strictEqual(log.counts.push, 6);\n                  });\n                  test('stream.push was called correctly', () => {\n                    assert.strictEqual(log.args.push[5][0], '\"baz\"');\n                  });\n                  suite('property event:', () => {\n                    setup(() => {\n                      return log.args.on[2][1]('nested');\n                    });\n                    test('stream.push was called twice', () => {\n                      assert.strictEqual(log.counts.push, 8);\n                    });\n                    test('stream.push was called correctly', () => {\n                      assert.strictEqual(log.args.push[6][0], ',');\n                      assert.strictEqual(log.args.push[7][0], '\"nested\":');\n                    });\n                    suite('object event:', () => {\n                      setup(() => {\n                        return log.args.on[1][1]();\n                      });\n                      test('stream.push was called once', () => {\n                        assert.strictEqual(log.counts.push, 9);\n                      });\n                      test('stream.push was called correctly', () => {\n                        assert.strictEqual(log.args.push[8][0], '{');\n                      });\n                      suite('endObject event:', () => {\n                        setup(() => {\n                          return log.args.on[7][1]();\n                        });\n                        test('stream.push was called once', () => {\n                          assert.strictEqual(log.counts.push, 10);\n                        });\n                        test('stream.push was called correctly', () => {\n                          assert.strictEqual(log.args.push[9][0], '}');\n                        });\n                        suite('property event:', () => {\n                          setup(() => {\n                            return log.args.on[2][1]('qux');\n                          });\n                          test('stream.push was called twice', () => {\n                            assert.strictEqual(log.counts.push, 12);\n                          });\n                          test('stream.push was called correctly', () => {\n                            assert.strictEqual(log.args.push[10][0], ',');\n                            assert.strictEqual(log.args.push[11][0], '\"qux\":');\n                          });\n                          suite('string event:', () => {\n                            setup(() => {\n                              return log.args.on[3][1]('wibble');\n                            });\n                            test('stream.push was called once', () => {\n                              assert.strictEqual(log.counts.push, 13);\n                            });\n                            test('stream.push was called correctly', () => {\n                              assert.strictEqual(log.args.push[12][0], '\"wibble\"');\n                            });\n                          });\n                        });\n                        suite('endObject event:', () => {\n                          setup(() => {\n                            return log.args.on[7][1]();\n                          });\n                          test('stream.push was called once', () => {\n                            assert.strictEqual(log.counts.push, 11);\n                          });\n                          test('stream.push was called correctly', () => {\n                            assert.strictEqual(log.args.push[10][0], '}');\n                          });\n                          suite('string event:', () => {\n                            setup(() => {\n                              return log.args.on[3][1]('wibble');\n                            });\n                            test('stream.push was called twice', () => {\n                              assert.strictEqual(log.counts.push, 13);\n                            });\n                            test('stream.push was called correctly', () => {\n                              assert.strictEqual(log.args.push[11][0], ',');\n                              assert.strictEqual(log.args.push[12][0], '\"wibble\"');\n                            });\n                            test('stream.emit was not called', () => {\n                              assert.strictEqual(log.counts.emit, 0);\n                            });\n                          });\n                        });\n                      });\n                    });\n                  });\n                });\n              });\n            });\n          });\n          suite('string event, push returns false:', () => {\n            setup(() => {\n              results.push[0] = false;\n              return log.args.on[3][1]('foo');\n            });\n            teardown(() => {\n              results.push[0] = true;\n            });\n            test('stream.push was called once', () => {\n              assert.strictEqual(log.counts.push, 1);\n            });\n            test('stream.push was called correctly', () => {\n              assert.strictEqual(log.args.push[0][0], '[');\n            });\n            suite('string event:', () => {\n              setup(() => {\n                return log.args.on[3][1]('bar');\n              });\n              test('stream.push was not called', () => {\n                assert.strictEqual(log.counts.push, 1);\n              });\n              suite('read stream, endArrayEvent:', () => {\n                setup(() => {\n                  log.args.JsonStream[0][0]();\n                  return log.args.on[6][1]();\n                });\n                test('stream.push was called once', () => {\n                  assert.strictEqual(log.counts.push, 2);\n                });\n                test('stream.push was called correctly', () => {\n                  assert.strictEqual(log.args.push[1][0], '\"foo\"');\n                });\n                suite('read stream:', () => {\n                  setup(() => {\n                    log.args.JsonStream[0][0]();\n                  });\n                  test('stream.push was not called', () => {\n                    assert.strictEqual(log.counts.push, 2);\n                  });\n                  test('stream.emit was not called', () => {\n                    assert.strictEqual(log.counts.emit, 0);\n                  });\n                });\n              });\n              suite('end event:', () => {\n                setup(() => {\n                  return log.args.on[8][1]();\n                });\n                test('stream.push was not called', () => {\n                  assert.strictEqual(log.counts.push, 1);\n                });\n                suite('read stream:', () => {\n                  setup(() => {\n                    log.args.JsonStream[0][0]();\n                  });\n                  test('stream.push was called once', () => {\n                    assert.strictEqual(log.counts.push, 2);\n                  });\n                  test('stream.push was called correctly', () => {\n                    assert.strictEqual(log.args.push[1][0], '\"foo\"');\n                  });\n                  suite('read stream:', () => {\n                    setup(() => {\n                      log.args.JsonStream[0][0]();\n                    });\n                    test('stream.push was called once', () => {\n                      assert.strictEqual(log.counts.push, 3);\n                    });\n                    test('stream.push was called correctly', () => {\n                      assert.strictEqual(log.args.push[2][0], ',');\n                    });\n                    suite('read stream:', () => {\n                      setup(() => {\n                        log.args.JsonStream[0][0]();\n                      });\n                      test('stream.push was called once', () => {\n                        assert.strictEqual(log.counts.push, 4);\n                      });\n                      test('stream.push was called correctly', () => {\n                        assert.strictEqual(log.args.push[3][0], '\"bar\"');\n                      });\n                      suite('read stream:', () => {\n                        setup(() => {\n                          log.args.JsonStream[0][0]();\n                        });\n                        test('stream.push was called once', () => {\n                          assert.strictEqual(log.counts.push, 5);\n                        });\n                        test('stream.push was called correctly', () => {\n                          assert.isNull(log.args.push[4][0]);\n                        });\n                      });\n                    });\n                  });\n                });\n                suite('read stream, push returns true:', () => {\n                  setup(() => {\n                    results.push[0] = true;\n                    log.args.JsonStream[0][0]();\n                  });\n                  test('stream.push was called four times', () => {\n                    assert.strictEqual(log.counts.push, 5);\n                  });\n                  test('stream.push was called correctly', () => {\n                    assert.strictEqual(log.args.push[1][0], '\"foo\"');\n                    assert.strictEqual(log.args.push[2][0], ',');\n                    assert.strictEqual(log.args.push[3][0], '\"bar\"');\n                    assert.isNull(log.args.push[4][0]);\n                  });\n                  suite('read stream:', () => {\n                    setup(() => {\n                      log.args.JsonStream[0][0]();\n                    });\n                    test('stream.push was not called', () => {\n                      assert.strictEqual(log.counts.push, 5);\n                    });\n                    test('stream.emit was not called', () => {\n                      assert.strictEqual(log.counts.emit, 0);\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n        suite('object event:', () => {\n          setup(() => {\n            log.args.JsonStream[0][0]();\n            return log.args.on[1][1]();\n          });\n          test('stream.push was called twice', () => {\n            assert.strictEqual(log.counts.push, 2);\n          });\n          test('stream.push was called correctly', () => {\n            assert.strictEqual(log.args.push[0][0], '[');\n            assert.strictEqual(log.args.push[1][0], '{');\n          });\n          test('stream.emit was not called', () => {\n            assert.strictEqual(log.counts.emit, 0);\n          });\n        });\n      });\n    });\n    suite('streamify with space option:', () => {\n      let data, options, result;\n      setup(() => {\n        data = {};\n        options = {\n          space: 2\n        };\n        result = streamify(data, options);\n      });\n      test('JsonStream was called once', () => {\n        assert.strictEqual(log.counts.JsonStream, 1);\n      });\n      test('eventify was called once', () => {\n        assert.strictEqual(log.counts.eventify, 1);\n      });\n      test('EventEmitter.on was called eleven times', () => {\n        assert.strictEqual(log.counts.on, 11);\n      });\n      test('stream.push was not called', () => {\n        assert.strictEqual(log.counts.push, 0);\n      });\n      suite('read stream, object event:', () => {\n        setup(() => {\n          log.args.JsonStream[0][0]();\n          return log.args.on[1][1]();\n        });\n        test('stream.push was called once', () => {\n          assert.strictEqual(log.counts.push, 1);\n        });\n        test('stream.push was called correctly', () => {\n          assert.strictEqual(log.args.push[0][0], '{');\n        });\n        suite('property event:', () => {\n          setup(() => {\n            return log.args.on[2][1]('foo');\n          });\n          test('stream.push was called twice', () => {\n            assert.strictEqual(log.counts.push, 3);\n          });\n          test('stream.push was called correctly', () => {\n            assert.strictEqual(log.args.push[1][0], '\\n  ');\n            assert.strictEqual(log.args.push[2][0], '\"foo\":');\n          });\n          suite('string event:', () => {\n            setup(() => {\n              return log.args.on[3][1]('bar');\n            });\n            test('stream.push was called twice', () => {\n              assert.strictEqual(log.counts.push, 5);\n            });\n            test('stream.push was called correctly', () => {\n              assert.strictEqual(log.args.push[3][0], ' ');\n              assert.strictEqual(log.args.push[4][0], '\"bar\"');\n            });\n            suite('property event:', () => {\n              setup(() => {\n                return log.args.on[2][1]('baz');\n              });\n              test('stream.push was called three times', () => {\n                assert.strictEqual(log.counts.push, 8);\n              });\n              test('stream.push was called correctly', () => {\n                assert.strictEqual(log.args.push[5][0], ',');\n                assert.strictEqual(log.args.push[6][0], '\\n  ');\n                assert.strictEqual(log.args.push[7][0], '\"baz\":');\n              });\n              suite('string event:', () => {\n                setup(() => {\n                  return log.args.on[3][1]('qux');\n                });\n                test('stream.push was called twice', () => {\n                  assert.strictEqual(log.counts.push, 10);\n                });\n                test('stream.push was called correctly', () => {\n                  assert.strictEqual(log.args.push[8][0], ' ');\n                  assert.strictEqual(log.args.push[9][0], '\"qux\"');\n                });\n                suite('property event:', () => {\n                  setup(() => {\n                    return log.args.on[2][1]('wibble');\n                  });\n                  test('stream.push was called three times', () => {\n                    assert.strictEqual(log.counts.push, 13);\n                  });\n                  test('stream.push was called correctly', () => {\n                    assert.strictEqual(log.args.push[10][0], ',');\n                    assert.strictEqual(log.args.push[11][0], '\\n  ');\n                    assert.strictEqual(log.args.push[12][0], '\"wibble\":');\n                  });\n                  suite('array event:', () => {\n                    setup(() => {\n                      return log.args.on[0][1]();\n                    });\n                    test('stream.push was called twice', () => {\n                      assert.strictEqual(log.counts.push, 15);\n                    });\n                    test('stream.push was called correctly', () => {\n                      assert.strictEqual(log.args.push[13][0], ' ');\n                      assert.strictEqual(log.args.push[14][0], '[');\n                    });\n                    suite('string event:', () => {\n                      setup(() => {\n                        return log.args.on[3][1]('0');\n                      });\n                      test('stream.push was called twice', () => {\n                        assert.strictEqual(log.counts.push, 17);\n                      });\n                      test('stream.push was called correctly', () => {\n                        assert.strictEqual(log.args.push[15][0], '\\n    ');\n                        assert.strictEqual(log.args.push[16][0], '\"0\"');\n                      });\n                      suite('string event:', () => {\n                        setup(() => {\n                          return log.args.on[3][1]('1');\n                        });\n                        test('stream.push was called three times', () => {\n                          assert.strictEqual(log.counts.push, 20);\n                        });\n                        test('stream.push was called correctly', () => {\n                          assert.strictEqual(log.args.push[17][0], ',');\n                          assert.strictEqual(log.args.push[18][0], '\\n    ');\n                          assert.strictEqual(log.args.push[19][0], '\"1\"');\n                        });\n                        suite('endArray event:', () => {\n                          setup(() => {\n                            return log.args.on[6][1]();\n                          });\n                          test('stream.push was called twice', () => {\n                            assert.strictEqual(log.counts.push, 22);\n                          });\n                          test('stream.push was called correctly', () => {\n                            assert.strictEqual(log.args.push[20][0], '\\n  ');\n                            assert.strictEqual(log.args.push[21][0], ']');\n                          });\n                          suite('property event:', () => {\n                            setup(() => {\n                              return log.args.on[2][1]('a');\n                            });\n                            test('stream.push was called three times', () => {\n                              assert.strictEqual(log.counts.push, 25);\n                            });\n                            test('stream.push was called correctly', () => {\n                              assert.strictEqual(log.args.push[22][0], ',');\n                              assert.strictEqual(log.args.push[23][0], '\\n  ');\n                              assert.strictEqual(log.args.push[24][0], '\"a\":');\n                            });\n                            suite('string event:', () => {\n                              setup(() => {\n                                return log.args.on[3][1]('b');\n                              });\n                              test('stream.push was called twice', () => {\n                                assert.strictEqual(log.counts.push, 27);\n                              });\n                              test('stream.push was called correctly', () => {\n                                assert.strictEqual(log.args.push[25][0], ' ');\n                                assert.strictEqual(log.args.push[26][0], '\"b\"');\n                              });\n                              suite('endObject event:', () => {\n                                setup(() => {\n                                  return log.args.on[7][1]();\n                                });\n                                test('stream.push was called twice', () => {\n                                  assert.strictEqual(log.counts.push, 29);\n                                });\n                                test('stream.push was called correctly', () => {\n                                  assert.strictEqual(log.args.push[27][0], '\\n');\n                                  assert.strictEqual(log.args.push[28][0], '}');\n                                });\n                                test('stream.emit was not called', () => {\n                                  assert.strictEqual(log.counts.emit, 0);\n                                });\n                              });\n                            });\n                          });\n                        });\n                      });\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n      suite('read stream, end event:', () => {\n        setup(() => {\n          log.args.JsonStream[0][0]();\n          return log.args.on[8][1]();\n        });\n        test('stream.push was called once', () => {\n          assert.strictEqual(log.counts.push, 1);\n        });\n        test('stream.push was called correctly', () => {\n          assert.isNull(log.args.push[0][0]);\n        });\n        test('stream.emit was not called', () => {\n          assert.strictEqual(log.counts.emit, 0);\n        });\n      });\n      suite('error event:', () => {\n        setup(() => {\n          return log.args.on[9][1]('foo');\n        });\n        test('stream.emit was called once', () => {\n          assert.strictEqual(log.counts.emit, 1);\n        });\n        test('stream.emit was called correctly', () => {\n          assert.lengthOf(log.args.emit[0], 2);\n          assert.strictEqual(log.args.emit[0][0], 'error');\n          assert.strictEqual(log.args.emit[0][1], 'foo');\n        });\n      });\n      suite('dataError event:', () => {\n        setup(() => {\n          return log.args.on[10][1]('bar');\n        });\n        test('stream.emit was called once', () => {\n          assert.strictEqual(log.counts.emit, 1);\n        });\n        test('stream.emit was called correctly', () => {\n          assert.lengthOf(log.args.emit[0], 2);\n          assert.strictEqual(log.args.emit[0][0], 'dataError');\n          assert.strictEqual(log.args.emit[0][1], 'bar');\n        });\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","proxyquire","spooks","modulePath","suite","test","doesNotThrow","isFunction","log","results","streamify","setup","eventify","on","fn","name","push","ctor","archetype","instance","emit","lengthOf","strictEqual","counts","JsonStream","data","options","result","foo","highWaterMark","isObject","these","args","deepEqual","isUndefined","Object","keys","isNull","teardown","space"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/bfj/test/unit/streamify.js"],"sourcesContent":["'use strict'\n\nconst assert = require('chai').assert\nconst proxyquire = require('proxyquire')\nconst spooks = require('spooks')\n\nconst modulePath = '../../src/streamify'\n\nsuite('streamify:', () => {\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath)\n    })\n  })\n\n  test('require returns function', () => {\n    assert.isFunction(require(modulePath))\n  })\n\n  suite('require:', () => {\n    let log, results, streamify\n\n    setup(() => {\n      log = {}\n      results = {\n        eventify: [\n          { on: spooks.fn({ name: 'on', log: log }) }\n        ],\n        push: [ true ]\n      }\n      streamify = proxyquire(modulePath, {\n        './eventify': spooks.fn({\n          name: 'eventify',\n          log: log,\n          results: results.eventify\n        }),\n        './jsonstream': spooks.ctor({\n          name: 'JsonStream',\n          log: log,\n          archetype: { instance: { push: () => {}, emit: () => {} } },\n          results: results\n        })\n      })\n    })\n\n    test('streamify expects one argument', () => {\n      assert.lengthOf(streamify, 1)\n    })\n\n    test('streamify does not throw', () => {\n      assert.doesNotThrow(() => {\n        streamify()\n      })\n    })\n\n    test('streamify returns stream', () => {\n      assert.isFunction(streamify().push)\n      assert.isFunction(streamify().emit)\n    })\n\n    test('JsonStream was not called', () => {\n      assert.strictEqual(log.counts.JsonStream, 0)\n    })\n\n    test('eventify was not called', () => {\n      assert.strictEqual(log.counts.eventify, 0)\n    })\n\n    test('EventEmitter.on was not called', () => {\n      assert.strictEqual(log.counts.on, 0)\n    })\n\n    suite('streamify:', () => {\n      let data, options, result\n\n      setup(() => {\n        data = {}\n        options = { foo: 'bar', highWaterMark: 42 }\n        result = streamify(data, options)\n      })\n\n      test('JsonStream was called once', () => {\n        assert.strictEqual(log.counts.JsonStream, 1)\n        assert.isObject(log.these.JsonStream[0])\n      })\n\n      test('JsonStream was called correctly', () => {\n        assert.lengthOf(log.args.JsonStream[0], 2)\n        assert.isFunction(log.args.JsonStream[0][0])\n        assert.deepEqual(log.args.JsonStream[0][1], { highWaterMark: 42 })\n      })\n\n      test('eventify was called once', () => {\n        assert.strictEqual(log.counts.eventify, 1)\n        assert.isUndefined(log.these.eventify[0])\n      })\n\n      test('eventify was called correctly', () => {\n        assert.lengthOf(log.args.eventify[0], 2)\n        assert.strictEqual(log.args.eventify[0][0], data)\n        assert.lengthOf(Object.keys(log.args.eventify[0][0]), 0)\n        assert.strictEqual(log.args.eventify[0][1], options)\n        assert.lengthOf(Object.keys(log.args.eventify[0][1]), 2)\n      })\n\n      test('EventEmitter.on was called eleven times', () => {\n        assert.strictEqual(log.counts.on, 11)\n        assert.strictEqual(log.these.on[0], results.eventify[0])\n        assert.strictEqual(log.these.on[1], results.eventify[0])\n        assert.strictEqual(log.these.on[2], results.eventify[0])\n        assert.strictEqual(log.these.on[3], results.eventify[0])\n        assert.strictEqual(log.these.on[4], results.eventify[0])\n        assert.strictEqual(log.these.on[5], results.eventify[0])\n        assert.strictEqual(log.these.on[6], results.eventify[0])\n        assert.strictEqual(log.these.on[7], results.eventify[0])\n        assert.strictEqual(log.these.on[8], results.eventify[0])\n        assert.strictEqual(log.these.on[9], results.eventify[0])\n        assert.strictEqual(log.these.on[10], results.eventify[0])\n      })\n\n      test('EventEmitter.on was called correctly first time', () => {\n        assert.lengthOf(log.args.on[0], 2)\n        assert.strictEqual(log.args.on[0][0], 'arr')\n        assert.isFunction(log.args.on[0][1])\n      })\n\n      test('EventEmitter.on was called correctly second time', () => {\n        assert.lengthOf(log.args.on[1], 2)\n        assert.strictEqual(log.args.on[1][0], 'obj')\n        assert.isFunction(log.args.on[1][1])\n      })\n\n      test('EventEmitter.on was called correctly third time', () => {\n        assert.lengthOf(log.args.on[2], 2)\n        assert.strictEqual(log.args.on[2][0], 'pro')\n        assert.isFunction(log.args.on[2][1])\n      })\n\n      test('EventEmitter.on was called correctly fourth time', () => {\n        assert.lengthOf(log.args.on[3], 2)\n        assert.strictEqual(log.args.on[3][0], 'str')\n        assert.isFunction(log.args.on[3][1])\n      })\n\n      test('EventEmitter.on was called correctly fifth time', () => {\n        assert.lengthOf(log.args.on[4], 2)\n        assert.strictEqual(log.args.on[4][0], 'num')\n        assert.isFunction(log.args.on[4][1])\n      })\n\n      test('EventEmitter.on was called correctly sixth time', () => {\n        assert.lengthOf(log.args.on[5], 2)\n        assert.strictEqual(log.args.on[5][0], 'lit')\n        assert.isFunction(log.args.on[5][1])\n      })\n\n      test('EventEmitter.on was called correctly seventh time', () => {\n        assert.lengthOf(log.args.on[6], 2)\n        assert.strictEqual(log.args.on[6][0], 'end-arr')\n        assert.isFunction(log.args.on[6][1])\n      })\n\n      test('EventEmitter.on was called correctly eighth time', () => {\n        assert.lengthOf(log.args.on[7], 2)\n        assert.strictEqual(log.args.on[7][0], 'end-obj')\n        assert.isFunction(log.args.on[7][1])\n      })\n\n      test('EventEmitter.on was called correctly ninth time', () => {\n        assert.lengthOf(log.args.on[8], 2)\n        assert.strictEqual(log.args.on[8][0], 'end')\n        assert.isFunction(log.args.on[8][1])\n      })\n\n      test('EventEmitter.on was called correctly tenth time', () => {\n        assert.lengthOf(log.args.on[9], 2)\n        assert.strictEqual(log.args.on[9][0], 'err')\n        assert.isFunction(log.args.on[9][1])\n      })\n\n      test('EventEmitter.on was called correctly eleventh time', () => {\n        assert.lengthOf(log.args.on[10], 2)\n        assert.strictEqual(log.args.on[10][0], 'err-data')\n        assert.isFunction(log.args.on[10][1])\n      })\n\n      suite('array event:', () => {\n        setup(() => {\n          return log.args.on[0][1]()\n        })\n\n        test('stream.push was not called', () => {\n          assert.strictEqual(log.counts.push, 0)\n        })\n\n        suite('end event:', () => {\n          setup(() => {\n            return log.args.on[8][1]()\n          })\n\n          test('stream.push was not called', () => {\n            assert.strictEqual(log.counts.push, 0)\n          })\n\n          suite('read stream:', () => {\n            setup(() => {\n              log.args.JsonStream[0][0]()\n            })\n\n            test('stream.push was called twice', () => {\n              assert.strictEqual(log.counts.push, 2)\n            })\n\n            test('stream.push was called correctly first time', () => {\n              assert.lengthOf(log.args.push[0], 2)\n              assert.strictEqual(log.args.push[0][0], '[')\n              assert.strictEqual(log.args.push[0][1], 'utf8')\n            })\n\n            test('stream.push was called correctly second time', () => {\n              assert.lengthOf(log.args.push[1], 1)\n              assert.isNull(log.args.push[1][0])\n            })\n\n            test('stream.emit was not called', () => {\n              assert.strictEqual(log.counts.emit, 0)\n            })\n          })\n        })\n\n        suite('read stream:', () => {\n          setup(() => {\n            log.args.JsonStream[0][0]()\n          })\n\n          test('stream.push was not called', () => {\n            assert.strictEqual(log.counts.push, 0)\n          })\n\n          suite('end event:', () => {\n            setup(() => {\n              return log.args.on[8][1]()\n            })\n\n            test('stream.push was called twice', () => {\n              assert.strictEqual(log.counts.push, 2)\n            })\n\n            test('stream.push was called correctly first time', () => {\n              assert.strictEqual(log.args.push[0][0], '[')\n            })\n\n            test('stream.push was called correctly second time', () => {\n              assert.isNull(log.args.push[1][0])\n            })\n\n            test('stream.emit was not called', () => {\n              assert.strictEqual(log.counts.emit, 0)\n            })\n          })\n\n          suite('string event:', () => {\n            setup(() => {\n              return log.args.on[3][1]('foo')\n            })\n\n            test('stream.push was called twice', () => {\n              assert.strictEqual(log.counts.push, 2)\n            })\n\n            test('stream.push was called correctly', () => {\n              assert.strictEqual(log.args.push[0][0], '[')\n              assert.strictEqual(log.args.push[1][0], '\"foo\"')\n            })\n\n            suite('string event:', () => {\n              setup(() => {\n                return log.args.on[3][1]('bar')\n              })\n\n              test('stream.push was called twice', () => {\n                assert.strictEqual(log.counts.push, 4)\n              })\n\n              test('stream.push was called correctly', () => {\n                assert.strictEqual(log.args.push[2][0], ',')\n                assert.strictEqual(log.args.push[3][0], '\"bar\"')\n              })\n            })\n\n            suite('array event:', () => {\n              setup(() => {\n                return log.args.on[0][1]()\n              })\n\n              test('stream.push was called twice', () => {\n                assert.strictEqual(log.counts.push, 4)\n              })\n\n              test('stream.push was called correctly', () => {\n                assert.strictEqual(log.args.push[2][0], ',')\n                assert.strictEqual(log.args.push[3][0], '[')\n              })\n\n              suite('array event:', () => {\n                setup(() => {\n                  return log.args.on[0][1]()\n                })\n\n                test('stream.push was called once', () => {\n                  assert.strictEqual(log.counts.push, 5)\n                })\n\n                test('stream.push was called correctly', () => {\n                  assert.strictEqual(log.args.push[4][0], '[')\n                })\n\n                suite('endArray event:', () => {\n                  setup(() => {\n                    return log.args.on[6][1]()\n                  })\n\n                  test('stream.push was called once', () => {\n                    assert.strictEqual(log.counts.push, 6)\n                  })\n\n                  test('stream.push was called correctly', () => {\n                    assert.strictEqual(log.args.push[5][0], ']')\n                  })\n\n                  suite('string event:', () => {\n                    setup(() => {\n                      return log.args.on[3][1]('bar')\n                    })\n\n                    test('stream.push was called twice', () => {\n                      assert.strictEqual(log.counts.push, 8)\n                    })\n\n                    test('stream.push was called correctly', () => {\n                      assert.strictEqual(log.args.push[6][0], ',')\n                      assert.strictEqual(log.args.push[7][0], '\"bar\"')\n                    })\n\n                    suite('string event:', () => {\n                      setup(() => {\n                        return log.args.on[3][1]('baz')\n                      })\n\n                      test('stream.push was called twice', () => {\n                        assert.strictEqual(log.counts.push, 10)\n                      })\n\n                      test('stream.push was called correctly', () => {\n                        assert.strictEqual(log.args.push[8][0], ',')\n                        assert.strictEqual(log.args.push[9][0], '\"baz\"')\n                      })\n                    })\n\n                    suite('endArray event:', () => {\n                      setup(() => {\n                        return log.args.on[6][1]()\n                      })\n\n                      test('stream.push was called once', () => {\n                        assert.strictEqual(log.counts.push, 9)\n                      })\n\n                      test('stream.push was called correctly', () => {\n                        assert.strictEqual(log.args.push[8][0], ']')\n                      })\n\n                      suite('string event:', () => {\n                        setup(() => {\n                          return log.args.on[3][1]('baz')\n                        })\n\n                        test('stream.push was called twice', () => {\n                          assert.strictEqual(log.counts.push, 11)\n                        })\n\n                        test('stream.push was called correctly', () => {\n                          assert.strictEqual(log.args.push[9][0], ',')\n                          assert.strictEqual(log.args.push[10][0], '\"baz\"')\n                        })\n\n                        test('stream.emit was not called', () => {\n                          assert.strictEqual(log.counts.emit, 0)\n                        })\n                      })\n                    })\n                  })\n                })\n              })\n            })\n\n            suite('object event:', () => {\n              setup(() => {\n                return log.args.on[1][1]()\n              })\n\n              test('stream.push was called twice', () => {\n                assert.strictEqual(log.counts.push, 4)\n              })\n\n              test('stream.push was called correctly', () => {\n                assert.strictEqual(log.args.push[2][0], ',')\n                assert.strictEqual(log.args.push[3][0], '{')\n              })\n\n              suite('property event:', () => {\n                setup(() => {\n                  return log.args.on[2][1]('bar')\n                })\n\n                test('stream.push was called once', () => {\n                  assert.strictEqual(log.counts.push, 5)\n                })\n\n                test('stream.push was called correctly', () => {\n                  assert.strictEqual(log.args.push[4][0], '\"bar\":')\n                })\n\n                suite('string event:', () => {\n                  setup(() => {\n                    return log.args.on[3][1]('baz')\n                  })\n\n                  test('stream.push was called once', () => {\n                    assert.strictEqual(log.counts.push, 6)\n                  })\n\n                  test('stream.push was called correctly', () => {\n                    assert.strictEqual(log.args.push[5][0], '\"baz\"')\n                  })\n\n                  suite('property event:', () => {\n                    setup(() => {\n                      return log.args.on[2][1]('nested')\n                    })\n\n                    test('stream.push was called twice', () => {\n                      assert.strictEqual(log.counts.push, 8)\n                    })\n\n                    test('stream.push was called correctly', () => {\n                      assert.strictEqual(log.args.push[6][0], ',')\n                      assert.strictEqual(log.args.push[7][0], '\"nested\":')\n                    })\n\n                    suite('object event:', () => {\n                      setup(() => {\n                        return log.args.on[1][1]()\n                      })\n\n                      test('stream.push was called once', () => {\n                        assert.strictEqual(log.counts.push, 9)\n                      })\n\n                      test('stream.push was called correctly', () => {\n                        assert.strictEqual(log.args.push[8][0], '{')\n                      })\n\n                      suite('endObject event:', () => {\n                        setup(() => {\n                          return log.args.on[7][1]()\n                        })\n\n                        test('stream.push was called once', () => {\n                          assert.strictEqual(log.counts.push, 10)\n                        })\n\n                        test('stream.push was called correctly', () => {\n                          assert.strictEqual(log.args.push[9][0], '}')\n                        })\n\n                        suite('property event:', () => {\n                          setup(() => {\n                            return log.args.on[2][1]('qux')\n                          })\n\n                          test('stream.push was called twice', () => {\n                            assert.strictEqual(log.counts.push, 12)\n                          })\n\n                          test('stream.push was called correctly', () => {\n                            assert.strictEqual(log.args.push[10][0], ',')\n                            assert.strictEqual(log.args.push[11][0], '\"qux\":')\n                          })\n\n                          suite('string event:', () => {\n                            setup(() => {\n                              return log.args.on[3][1]('wibble')\n                            })\n\n                            test('stream.push was called once', () => {\n                              assert.strictEqual(log.counts.push, 13)\n                            })\n\n                            test('stream.push was called correctly', () => {\n                              assert.strictEqual(log.args.push[12][0], '\"wibble\"')\n                            })\n                          })\n                        })\n\n                        suite('endObject event:', () => {\n                          setup(() => {\n                            return log.args.on[7][1]()\n                          })\n\n                          test('stream.push was called once', () => {\n                            assert.strictEqual(log.counts.push, 11)\n                          })\n\n                          test('stream.push was called correctly', () => {\n                            assert.strictEqual(log.args.push[10][0], '}')\n                          })\n\n                          suite('string event:', () => {\n                            setup(() => {\n                              return log.args.on[3][1]('wibble')\n                            })\n\n                            test('stream.push was called twice', () => {\n                              assert.strictEqual(log.counts.push, 13)\n                            })\n\n                            test('stream.push was called correctly', () => {\n                              assert.strictEqual(log.args.push[11][0], ',')\n                              assert.strictEqual(log.args.push[12][0], '\"wibble\"')\n                            })\n\n                            test('stream.emit was not called', () => {\n                              assert.strictEqual(log.counts.emit, 0)\n                            })\n                          })\n                        })\n                      })\n                    })\n                  })\n                })\n              })\n            })\n          })\n\n          suite('string event, push returns false:', () => {\n            setup(() => {\n              results.push[0] = false\n              return log.args.on[3][1]('foo')\n            })\n\n            teardown(() => {\n              results.push[0] = true\n            })\n\n            test('stream.push was called once', () => {\n              assert.strictEqual(log.counts.push, 1)\n            })\n\n            test('stream.push was called correctly', () => {\n              assert.strictEqual(log.args.push[0][0], '[')\n            })\n\n            suite('string event:', () => {\n              setup(() => {\n                return log.args.on[3][1]('bar')\n              })\n\n              test('stream.push was not called', () => {\n                assert.strictEqual(log.counts.push, 1)\n              })\n\n              suite('read stream, endArrayEvent:', () => {\n                setup(() => {\n                  log.args.JsonStream[0][0]()\n                  return log.args.on[6][1]()\n                })\n\n                test('stream.push was called once', () => {\n                  assert.strictEqual(log.counts.push, 2)\n                })\n\n                test('stream.push was called correctly', () => {\n                  assert.strictEqual(log.args.push[1][0], '\"foo\"')\n                })\n\n                suite('read stream:', () => {\n                  setup(() => {\n                    log.args.JsonStream[0][0]()\n                  })\n\n                  test('stream.push was not called', () => {\n                    assert.strictEqual(log.counts.push, 2)\n                  })\n\n                  test('stream.emit was not called', () => {\n                    assert.strictEqual(log.counts.emit, 0)\n                  })\n                })\n              })\n\n              suite('end event:', () => {\n                setup(() => {\n                  return log.args.on[8][1]()\n                })\n\n                test('stream.push was not called', () => {\n                  assert.strictEqual(log.counts.push, 1)\n                })\n\n                suite('read stream:', () => {\n                  setup(() => {\n                    log.args.JsonStream[0][0]()\n                  })\n\n                  test('stream.push was called once', () => {\n                    assert.strictEqual(log.counts.push, 2)\n                  })\n\n                  test('stream.push was called correctly', () => {\n                    assert.strictEqual(log.args.push[1][0], '\"foo\"')\n                  })\n\n                  suite('read stream:', () => {\n                    setup(() => {\n                      log.args.JsonStream[0][0]()\n                    })\n\n                    test('stream.push was called once', () => {\n                      assert.strictEqual(log.counts.push, 3)\n                    })\n\n                    test('stream.push was called correctly', () => {\n                      assert.strictEqual(log.args.push[2][0], ',')\n                    })\n\n                    suite('read stream:', () => {\n                      setup(() => {\n                        log.args.JsonStream[0][0]()\n                      })\n\n                      test('stream.push was called once', () => {\n                        assert.strictEqual(log.counts.push, 4)\n                      })\n\n                      test('stream.push was called correctly', () => {\n                        assert.strictEqual(log.args.push[3][0], '\"bar\"')\n                      })\n\n                      suite('read stream:', () => {\n                        setup(() => {\n                          log.args.JsonStream[0][0]()\n                        })\n\n                        test('stream.push was called once', () => {\n                          assert.strictEqual(log.counts.push, 5)\n                        })\n\n                        test('stream.push was called correctly', () => {\n                          assert.isNull(log.args.push[4][0])\n                        })\n                      })\n                    })\n                  })\n                })\n\n                suite('read stream, push returns true:', () => {\n                  setup(() => {\n                    results.push[0] = true\n                    log.args.JsonStream[0][0]()\n                  })\n\n                  test('stream.push was called four times', () => {\n                    assert.strictEqual(log.counts.push, 5)\n                  })\n\n                  test('stream.push was called correctly', () => {\n                    assert.strictEqual(log.args.push[1][0], '\"foo\"')\n                    assert.strictEqual(log.args.push[2][0], ',')\n                    assert.strictEqual(log.args.push[3][0], '\"bar\"')\n                    assert.isNull(log.args.push[4][0])\n                  })\n\n                  suite('read stream:', () => {\n                    setup(() => {\n                      log.args.JsonStream[0][0]()\n                    })\n\n                    test('stream.push was not called', () => {\n                      assert.strictEqual(log.counts.push, 5)\n                    })\n\n                    test('stream.emit was not called', () => {\n                      assert.strictEqual(log.counts.emit, 0)\n                    })\n                  })\n                })\n              })\n            })\n          })\n        })\n\n        suite('object event:', () => {\n          setup(() => {\n            log.args.JsonStream[0][0]()\n            return log.args.on[1][1]()\n          })\n\n          test('stream.push was called twice', () => {\n            assert.strictEqual(log.counts.push, 2)\n          })\n\n          test('stream.push was called correctly', () => {\n            assert.strictEqual(log.args.push[0][0], '[')\n            assert.strictEqual(log.args.push[1][0], '{')\n          })\n\n          test('stream.emit was not called', () => {\n            assert.strictEqual(log.counts.emit, 0)\n          })\n        })\n      })\n    })\n\n    suite('streamify with space option:', () => {\n      let data, options, result\n\n      setup(() => {\n        data = {}\n        options = { space: 2 }\n        result = streamify(data, options)\n      })\n\n      test('JsonStream was called once', () => {\n        assert.strictEqual(log.counts.JsonStream, 1)\n      })\n\n      test('eventify was called once', () => {\n        assert.strictEqual(log.counts.eventify, 1)\n      })\n\n      test('EventEmitter.on was called eleven times', () => {\n        assert.strictEqual(log.counts.on, 11)\n      })\n\n      test('stream.push was not called', () => {\n        assert.strictEqual(log.counts.push, 0)\n      })\n\n      suite('read stream, object event:', () => {\n        setup(() => {\n          log.args.JsonStream[0][0]()\n          return log.args.on[1][1]()\n        })\n\n        test('stream.push was called once', () => {\n          assert.strictEqual(log.counts.push, 1)\n        })\n\n        test('stream.push was called correctly', () => {\n          assert.strictEqual(log.args.push[0][0], '{')\n        })\n\n        suite('property event:', () => {\n          setup(() => {\n            return log.args.on[2][1]('foo')\n          })\n\n          test('stream.push was called twice', () => {\n            assert.strictEqual(log.counts.push, 3)\n          })\n\n          test('stream.push was called correctly', () => {\n            assert.strictEqual(log.args.push[1][0], '\\n  ')\n            assert.strictEqual(log.args.push[2][0], '\"foo\":')\n          })\n\n          suite('string event:', () => {\n            setup(() => {\n              return log.args.on[3][1]('bar')\n            })\n\n            test('stream.push was called twice', () => {\n              assert.strictEqual(log.counts.push, 5)\n            })\n\n            test('stream.push was called correctly', () => {\n              assert.strictEqual(log.args.push[3][0], ' ')\n              assert.strictEqual(log.args.push[4][0], '\"bar\"')\n            })\n\n            suite('property event:', () => {\n              setup(() => {\n                return log.args.on[2][1]('baz')\n              })\n\n              test('stream.push was called three times', () => {\n                assert.strictEqual(log.counts.push, 8)\n              })\n\n              test('stream.push was called correctly', () => {\n                assert.strictEqual(log.args.push[5][0], ',')\n                assert.strictEqual(log.args.push[6][0], '\\n  ')\n                assert.strictEqual(log.args.push[7][0], '\"baz\":')\n              })\n\n              suite('string event:', () => {\n                setup(() => {\n                  return log.args.on[3][1]('qux')\n                })\n\n                test('stream.push was called twice', () => {\n                  assert.strictEqual(log.counts.push, 10)\n                })\n\n                test('stream.push was called correctly', () => {\n                  assert.strictEqual(log.args.push[8][0], ' ')\n                  assert.strictEqual(log.args.push[9][0], '\"qux\"')\n                })\n\n                suite('property event:', () => {\n                  setup(() => {\n                    return log.args.on[2][1]('wibble')\n                  })\n\n                  test('stream.push was called three times', () => {\n                    assert.strictEqual(log.counts.push, 13)\n                  })\n\n                  test('stream.push was called correctly', () => {\n                    assert.strictEqual(log.args.push[10][0], ',')\n                    assert.strictEqual(log.args.push[11][0], '\\n  ')\n                    assert.strictEqual(log.args.push[12][0], '\"wibble\":')\n                  })\n\n                  suite('array event:', () => {\n                    setup(() => {\n                      return log.args.on[0][1]()\n                    })\n\n                    test('stream.push was called twice', () => {\n                      assert.strictEqual(log.counts.push, 15)\n                    })\n\n                    test('stream.push was called correctly', () => {\n                      assert.strictEqual(log.args.push[13][0], ' ')\n                      assert.strictEqual(log.args.push[14][0], '[')\n                    })\n\n                    suite('string event:', () => {\n                      setup(() => {\n                        return log.args.on[3][1]('0')\n                      })\n\n                      test('stream.push was called twice', () => {\n                        assert.strictEqual(log.counts.push, 17)\n                      })\n\n                      test('stream.push was called correctly', () => {\n                        assert.strictEqual(log.args.push[15][0], '\\n    ')\n                        assert.strictEqual(log.args.push[16][0], '\"0\"')\n                      })\n\n                      suite('string event:', () => {\n                        setup(() => {\n                          return log.args.on[3][1]('1')\n                        })\n\n                        test('stream.push was called three times', () => {\n                          assert.strictEqual(log.counts.push, 20)\n                        })\n\n                        test('stream.push was called correctly', () => {\n                          assert.strictEqual(log.args.push[17][0], ',')\n                          assert.strictEqual(log.args.push[18][0], '\\n    ')\n                          assert.strictEqual(log.args.push[19][0], '\"1\"')\n                        })\n\n                        suite('endArray event:', () => {\n                          setup(() => {\n                            return log.args.on[6][1]()\n                          })\n\n                          test('stream.push was called twice', () => {\n                            assert.strictEqual(log.counts.push, 22)\n                          })\n\n                          test('stream.push was called correctly', () => {\n                            assert.strictEqual(log.args.push[20][0], '\\n  ')\n                            assert.strictEqual(log.args.push[21][0], ']')\n                          })\n\n                          suite('property event:', () => {\n                            setup(() => {\n                              return log.args.on[2][1]('a')\n                            })\n\n                            test('stream.push was called three times', () => {\n                              assert.strictEqual(log.counts.push, 25)\n                            })\n\n                            test('stream.push was called correctly', () => {\n                              assert.strictEqual(log.args.push[22][0], ',')\n                              assert.strictEqual(log.args.push[23][0], '\\n  ')\n                              assert.strictEqual(log.args.push[24][0], '\"a\":')\n                            })\n\n                            suite('string event:', () => {\n                              setup(() => {\n                                return log.args.on[3][1]('b')\n                              })\n\n                              test('stream.push was called twice', () => {\n                                assert.strictEqual(log.counts.push, 27)\n                              })\n\n                              test('stream.push was called correctly', () => {\n                                assert.strictEqual(log.args.push[25][0], ' ')\n                                assert.strictEqual(log.args.push[26][0], '\"b\"')\n                              })\n\n                              suite('endObject event:', () => {\n                                setup(() => {\n                                  return log.args.on[7][1]()\n                                })\n\n                                test('stream.push was called twice', () => {\n                                  assert.strictEqual(log.counts.push, 29)\n                                })\n\n                                test('stream.push was called correctly', () => {\n                                  assert.strictEqual(log.args.push[27][0], '\\n')\n                                  assert.strictEqual(log.args.push[28][0], '}')\n                                })\n\n                                test('stream.emit was not called', () => {\n                                  assert.strictEqual(log.counts.emit, 0)\n                                })\n                              })\n                            })\n                          })\n                        })\n                      })\n                    })\n                  })\n                })\n              })\n            })\n          })\n        })\n      })\n\n      suite('read stream, end event:', () => {\n        setup(() => {\n          log.args.JsonStream[0][0]()\n          return log.args.on[8][1]()\n        })\n\n        test('stream.push was called once', () => {\n          assert.strictEqual(log.counts.push, 1)\n        })\n\n        test('stream.push was called correctly', () => {\n          assert.isNull(log.args.push[0][0])\n        })\n\n        test('stream.emit was not called', () => {\n          assert.strictEqual(log.counts.emit, 0)\n        })\n      })\n\n      suite('error event:', () => {\n        setup(() => {\n          return log.args.on[9][1]('foo')\n        })\n\n        test('stream.emit was called once', () => {\n          assert.strictEqual(log.counts.emit, 1)\n        })\n\n        test('stream.emit was called correctly', () => {\n          assert.lengthOf(log.args.emit[0], 2)\n          assert.strictEqual(log.args.emit[0][0], 'error')\n          assert.strictEqual(log.args.emit[0][1], 'foo')\n        })\n      })\n\n      suite('dataError event:', () => {\n        setup(() => {\n          return log.args.on[10][1]('bar')\n        })\n\n        test('stream.emit was called once', () => {\n          assert.strictEqual(log.counts.emit, 1)\n        })\n\n        test('stream.emit was called correctly', () => {\n          assert.lengthOf(log.args.emit[0], 2)\n          assert.strictEqual(log.args.emit[0][0], 'dataError')\n          assert.strictEqual(log.args.emit[0][1], 'bar')\n        })\n      })\n    })\n  })\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}