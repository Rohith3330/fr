{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-empty-function */\n\nvar assert = require(\"@sinonjs/referee\").assert;\n\nvar className = require(\"./class-name\");\n\ndescribe(\"className\", function () {\n  it(\"returns the class name of an instance\", function () {\n    // Because eslint-config-sinon disables es6, we can't\n    // use a class definition here\n    // https://github.com/sinonjs/eslint-config-sinon/blob/master/index.js\n    // var instance = new (class TestClass {})();\n    var instance = new function TestClass() {}();\n    var name = className(instance);\n    assert.equals(name, \"TestClass\");\n  });\n  it(\"returns 'Object' for {}\", function () {\n    var name = className({});\n    assert.equals(name, \"Object\");\n  });\n  it(\"returns null for an object that has no prototype\", function () {\n    var obj = Object.create(null);\n    var name = className(obj);\n    assert.equals(name, null);\n  });\n  it(\"returns null for an object whose prototype was mangled\", function () {\n    // This is what Node v6 and v7 do for objects returned by querystring.parse()\n    function MangledObject() {}\n\n    MangledObject.prototype = Object.create(null);\n    var obj = new MangledObject();\n    var name = className(obj);\n    assert.equals(name, null);\n  });\n});","map":{"version":3,"names":["assert","require","className","describe","it","instance","TestClass","name","equals","obj","Object","create","MangledObject","prototype"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@sinonjs/commons/lib/class-name.test.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable no-empty-function */\n\nvar assert = require(\"@sinonjs/referee\").assert;\nvar className = require(\"./class-name\");\n\ndescribe(\"className\", function() {\n    it(\"returns the class name of an instance\", function() {\n        // Because eslint-config-sinon disables es6, we can't\n        // use a class definition here\n        // https://github.com/sinonjs/eslint-config-sinon/blob/master/index.js\n        // var instance = new (class TestClass {})();\n        var instance = new (function TestClass() {})();\n        var name = className(instance);\n        assert.equals(name, \"TestClass\");\n    });\n\n    it(\"returns 'Object' for {}\", function() {\n        var name = className({});\n        assert.equals(name, \"Object\");\n    });\n\n    it(\"returns null for an object that has no prototype\", function() {\n        var obj = Object.create(null);\n        var name = className(obj);\n        assert.equals(name, null);\n    });\n\n    it(\"returns null for an object whose prototype was mangled\", function() {\n        // This is what Node v6 and v7 do for objects returned by querystring.parse()\n        function MangledObject() {}\n        MangledObject.prototype = Object.create(null);\n        var obj = new MangledObject();\n        var name = className(obj);\n        assert.equals(name, null);\n    });\n});\n"],"mappings":"AAAA;AACA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAP,CAA4BD,MAAzC;;AACA,IAAIE,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAvB;;AAEAE,QAAQ,CAAC,WAAD,EAAc,YAAW;EAC7BC,EAAE,CAAC,uCAAD,EAA0C,YAAW;IACnD;IACA;IACA;IACA;IACA,IAAIC,QAAQ,GAAG,IAAK,SAASC,SAAT,GAAqB,CAAE,CAA5B,EAAf;IACA,IAAIC,IAAI,GAAGL,SAAS,CAACG,QAAD,CAApB;IACAL,MAAM,CAACQ,MAAP,CAAcD,IAAd,EAAoB,WAApB;EACH,CARC,CAAF;EAUAH,EAAE,CAAC,yBAAD,EAA4B,YAAW;IACrC,IAAIG,IAAI,GAAGL,SAAS,CAAC,EAAD,CAApB;IACAF,MAAM,CAACQ,MAAP,CAAcD,IAAd,EAAoB,QAApB;EACH,CAHC,CAAF;EAKAH,EAAE,CAAC,kDAAD,EAAqD,YAAW;IAC9D,IAAIK,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAV;IACA,IAAIJ,IAAI,GAAGL,SAAS,CAACO,GAAD,CAApB;IACAT,MAAM,CAACQ,MAAP,CAAcD,IAAd,EAAoB,IAApB;EACH,CAJC,CAAF;EAMAH,EAAE,CAAC,wDAAD,EAA2D,YAAW;IACpE;IACA,SAASQ,aAAT,GAAyB,CAAE;;IAC3BA,aAAa,CAACC,SAAd,GAA0BH,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1B;IACA,IAAIF,GAAG,GAAG,IAAIG,aAAJ,EAAV;IACA,IAAIL,IAAI,GAAGL,SAAS,CAACO,GAAD,CAApB;IACAT,MAAM,CAACQ,MAAP,CAAcD,IAAd,EAAoB,IAApB;EACH,CAPC,CAAF;AAQH,CA9BO,CAAR"},"metadata":{},"sourceType":"script"}