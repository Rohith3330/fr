{"ast":null,"code":"/**\n * @fileoverview A class of identifiers generator for code path segments.\n *\n * Each rule uses the identifier of code path segments to store additional\n * information of the code path.\n *\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * A generator for unique ids.\n */\n\nclass IdGenerator {\n  /**\n   * @param {string} prefix Optional. A prefix of generated ids.\n   */\n  constructor(prefix) {\n    this.prefix = String(prefix);\n    this.n = 0;\n  }\n  /**\n   * Generates id.\n   * @returns {string} A generated id.\n   */\n\n\n  next() {\n    this.n = 1 + this.n | 0;\n    /* c8 ignore start */\n\n    if (this.n < 0) {\n      this.n = 1;\n    }\n    /* c8 ignore stop */\n\n\n    return this.prefix + this.n;\n  }\n\n}\n\nmodule.exports = IdGenerator;","map":{"version":3,"names":["IdGenerator","constructor","prefix","String","n","next","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/linter/code-path-analysis/id-generator.js"],"sourcesContent":["/**\n * @fileoverview A class of identifiers generator for code path segments.\n *\n * Each rule uses the identifier of code path segments to store additional\n * information of the code path.\n *\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * A generator for unique ids.\n */\nclass IdGenerator {\n\n    /**\n     * @param {string} prefix Optional. A prefix of generated ids.\n     */\n    constructor(prefix) {\n        this.prefix = String(prefix);\n        this.n = 0;\n    }\n\n    /**\n     * Generates id.\n     * @returns {string} A generated id.\n     */\n    next() {\n        this.n = 1 + this.n | 0;\n\n        /* c8 ignore start */\n        if (this.n < 0) {\n            this.n = 1;\n        }/* c8 ignore stop */\n\n        return this.prefix + this.n;\n    }\n}\n\nmodule.exports = IdGenerator;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMA,WAAN,CAAkB;EAEd;AACJ;AACA;EACIC,WAAW,CAACC,MAAD,EAAS;IAChB,KAAKA,MAAL,GAAcC,MAAM,CAACD,MAAD,CAApB;IACA,KAAKE,CAAL,GAAS,CAAT;EACH;EAED;AACJ;AACA;AACA;;;EACIC,IAAI,GAAG;IACH,KAAKD,CAAL,GAAS,IAAI,KAAKA,CAAT,GAAa,CAAtB;IAEA;;IACA,IAAI,KAAKA,CAAL,GAAS,CAAb,EAAgB;MACZ,KAAKA,CAAL,GAAS,CAAT;IACH;IAAA;;;IAED,OAAO,KAAKF,MAAL,GAAc,KAAKE,CAA1B;EACH;;AAvBa;;AA0BlBE,MAAM,CAACC,OAAP,GAAiBP,WAAjB"},"metadata":{},"sourceType":"script"}