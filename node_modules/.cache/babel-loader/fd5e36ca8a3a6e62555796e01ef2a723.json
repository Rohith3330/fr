{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.noCase = void 0;\n\nvar lower_case_1 = require(\"lower-case\"); // Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\n\n\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g]; // Remove all non-word characters.\n\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\n\nfunction noCase(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.splitRegexp,\n      splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a,\n      _b = options.stripRegexp,\n      stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b,\n      _c = options.transform,\n      transform = _c === void 0 ? lower_case_1.lowerCase : _c,\n      _d = options.delimiter,\n      delimiter = _d === void 0 ? \" \" : _d;\n  var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n  var start = 0;\n  var end = result.length; // Trim the delimiter from around the output string.\n\n  while (result.charAt(start) === \"\\0\") start++;\n\n  while (result.charAt(end - 1) === \"\\0\") end--; // Transform each token independently.\n\n\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\nexports.noCase = noCase;\n/**\n * Replace `re` in the input string with the replacement value.\n */\n\nfunction replace(input, re, value) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce(function (input, re) {\n    return input.replace(re, value);\n  }, input);\n}","map":{"version":3,"mappings":";;;;;;;AAAA,yC,CASA;;;AACA,IAAMA,oBAAoB,GAAG,CAAC,oBAAD,EAAuB,sBAAvB,CAA7B,C,CAEA;;AACA,IAAMC,oBAAoB,GAAG,cAA7B;AAEA;;;;AAGA,SAAgBC,MAAhB,CAAuBC,KAAvB,EAAsCC,OAAtC,EAA2D;EAArB;IAAAA;EAAqB;;EAEvD,SAIEA,OAAO,YAJT;EAAA,eAAW,mBAAGJ,oBAAH,GAAuBK,EAAlC;EAAA,IACAC,KAGEF,OAAO,YAJT;EAAA,IACAG,WAAW,mBAAGN,oBAAH,GAAuBK,EADlC;EAAA,IAEAE,KAEEJ,OAAO,UAJT;EAAA,IAEAK,SAAS,mBAAGC,sBAAH,GAAYF,EAFrB;EAAA,IAGAG,KACEP,OAAO,UAJT;EAAA,IAGAQ,SAAS,mBAAG,GAAH,GAAMD,EAHf;EAMF,IAAIE,MAAM,GAAGC,OAAO,CAClBA,OAAO,CAACX,KAAD,EAAQY,WAAR,EAAqB,QAArB,CADW,EAElBR,WAFkB,EAGlB,IAHkB,CAApB;EAKA,IAAIS,KAAK,GAAG,CAAZ;EACA,IAAIC,GAAG,GAAGJ,MAAM,CAACK,MAAjB,CAdyD,CAgBzD;;EACA,OAAOL,MAAM,CAACM,MAAP,CAAcH,KAAd,MAAyB,IAAhC,EAAsCA,KAAK;;EAC3C,OAAOH,MAAM,CAACM,MAAP,CAAcF,GAAG,GAAG,CAApB,MAA2B,IAAlC,EAAwCA,GAAG,GAlBc,CAoBzD;;;EACA,OAAOJ,MAAM,CAACO,KAAP,CAAaJ,KAAb,EAAoBC,GAApB,EAAyBI,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,CAAyCb,SAAzC,EAAoDc,IAApD,CAAyDX,SAAzD,CAAP;AACD;;AAtBDY;AAwBA;;;;AAGA,SAASV,OAAT,CAAiBX,KAAjB,EAAgCsB,EAAhC,EAAuDC,KAAvD,EAAoE;EAClE,IAAID,EAAE,YAAYE,MAAlB,EAA0B,OAAOxB,KAAK,CAACW,OAAN,CAAcW,EAAd,EAAkBC,KAAlB,CAAP;EAC1B,OAAOD,EAAE,CAACG,MAAH,CAAU,UAACzB,KAAD,EAAQsB,EAAR,EAAU;IAAK,YAAK,CAACX,OAAN,CAAcW,EAAd,EAAkBC,KAAlB;EAAwB,CAAjD,EAAmDvB,KAAnD,CAAP;AACD","names":["DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","noCase","input","options","_a","_b","stripRegexp","_c","transform","lower_case_1","_d","delimiter","result","replace","splitRegexp","start","end","length","charAt","slice","split","map","join","exports","re","value","RegExp","reduce"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\no-case\\src\\index.ts"],"sourcesContent":["import { lowerCase } from \"lower-case\";\n\nexport interface Options {\n  splitRegexp?: RegExp | RegExp[];\n  stripRegexp?: RegExp | RegExp[];\n  delimiter?: string;\n  transform?: (part: string, index: number, parts: string[]) => string;\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input: string, options: Options = {}) {\n  const {\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase,\n    delimiter = \" \",\n  } = options;\n\n  let result = replace(\n    replace(input, splitRegexp, \"$1\\0$2\"),\n    stripRegexp,\n    \"\\0\"\n  );\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input: string, re: RegExp | RegExp[], value: string) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce((input, re) => input.replace(re, value), input);\n}\n"]},"metadata":{},"sourceType":"script"}