{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromLogicalExpression;\n/**\n * Extractor function for a LogicalExpression type value node.\n * A logical expression is `a && b` or `a || b`, so we evaluate both sides\n * and return the extracted value of the expression.\n *\n * @param - value - AST Value object with type `LogicalExpression`\n * @returns - The extracted value converted to correct type.\n */\n\nfunction extractValueFromLogicalExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n\n  var operator = value.operator,\n      left = value.left,\n      right = value.right;\n  var leftVal = getValue(left);\n  var rightVal = getValue(right);\n\n  if (operator === '&&') {\n    return leftVal && rightVal;\n  }\n\n  if (operator === '??') {\n    // return leftVal ?? rightVal; // TODO: update to babel 7\n    return leftVal === null || typeof leftVal === 'undefined' ? rightVal : leftVal;\n  }\n\n  return leftVal || rightVal;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","extractValueFromLogicalExpression","getValue","require","operator","left","right","leftVal","rightVal"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/lib/values/expressions/LogicalExpression.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromLogicalExpression;\n/**\n * Extractor function for a LogicalExpression type value node.\n * A logical expression is `a && b` or `a || b`, so we evaluate both sides\n * and return the extracted value of the expression.\n *\n * @param - value - AST Value object with type `LogicalExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromLogicalExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  var operator = value.operator,\n      left = value.left,\n      right = value.right;\n\n  var leftVal = getValue(left);\n  var rightVal = getValue(right);\n\n  if (operator === '&&') {\n    return leftVal && rightVal;\n  }\n  if (operator === '??') {\n    // return leftVal ?? rightVal; // TODO: update to babel 7\n    return leftVal === null || typeof leftVal === 'undefined' ? rightVal : leftVal;\n  }\n  return leftVal || rightVal;\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,iCAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,iCAAT,CAA2CF,KAA3C,EAAkD;EAChD;EACA,IAAIG,QAAQ,GAAGC,OAAO,CAAC,GAAD,CAAP,CAAaH,OAA5B;;EACA,IAAII,QAAQ,GAAGL,KAAK,CAACK,QAArB;EAAA,IACIC,IAAI,GAAGN,KAAK,CAACM,IADjB;EAAA,IAEIC,KAAK,GAAGP,KAAK,CAACO,KAFlB;EAIA,IAAIC,OAAO,GAAGL,QAAQ,CAACG,IAAD,CAAtB;EACA,IAAIG,QAAQ,GAAGN,QAAQ,CAACI,KAAD,CAAvB;;EAEA,IAAIF,QAAQ,KAAK,IAAjB,EAAuB;IACrB,OAAOG,OAAO,IAAIC,QAAlB;EACD;;EACD,IAAIJ,QAAQ,KAAK,IAAjB,EAAuB;IACrB;IACA,OAAOG,OAAO,KAAK,IAAZ,IAAoB,OAAOA,OAAP,KAAmB,WAAvC,GAAqDC,QAArD,GAAgED,OAAvE;EACD;;EACD,OAAOA,OAAO,IAAIC,QAAlB;AACD"},"metadata":{},"sourceType":"script"}