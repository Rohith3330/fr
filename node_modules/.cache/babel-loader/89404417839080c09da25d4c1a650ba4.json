{"ast":null,"code":"/**\n * Fixes block-shadowed let/const bindings in Safari 10/11.\n * https://kangax.github.io/compat-table/es6/#test-let_scope_shadow_resolution\n */\nexport default function (_ref) {\n  let {\n    types: t\n  } = _ref;\n  return {\n    name: \"transform-safari-block-shadowing\",\n    visitor: {\n      VariableDeclarator(path) {\n        // the issue only affects let and const bindings:\n        const kind = path.parent.kind;\n        if (kind !== \"let\" && kind !== \"const\") return; // ignore non-block-scoped bindings:\n\n        const block = path.scope.block;\n        if (t.isFunction(block) || t.isProgram(block)) return;\n        const bindings = t.getOuterBindingIdentifiers(path.node.id);\n\n        for (const name of Object.keys(bindings)) {\n          let scope = path.scope; // ignore parent bindings (note: impossible due to let/const?)\n\n          if (!scope.hasOwnBinding(name)) continue; // check if shadowed within the nearest function/program boundary\n\n          while (scope = scope.parent) {\n            if (scope.hasOwnBinding(name)) {\n              path.scope.rename(name);\n              break;\n            }\n\n            if (t.isFunction(scope.block) || t.isProgram(scope.block)) {\n              break;\n            }\n          }\n        }\n      }\n\n    }\n  };\n}","map":{"version":3,"names":["types","t","name","visitor","VariableDeclarator","path","kind","parent","block","scope","isFunction","isProgram","bindings","getOuterBindingIdentifiers","node","id","Object","keys","hasOwnBinding","rename"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@babel/preset-modules/src/plugins/transform-safari-block-shadowing/index.js"],"sourcesContent":["/**\n * Fixes block-shadowed let/const bindings in Safari 10/11.\n * https://kangax.github.io/compat-table/es6/#test-let_scope_shadow_resolution\n */\nexport default function({ types: t }) {\n  return {\n    name: \"transform-safari-block-shadowing\",\n    visitor: {\n      VariableDeclarator(path) {\n        // the issue only affects let and const bindings:\n        const kind = path.parent.kind;\n        if (kind !== \"let\" && kind !== \"const\") return;\n\n        // ignore non-block-scoped bindings:\n        const block = path.scope.block;\n        if (t.isFunction(block) || t.isProgram(block)) return;\n\n        const bindings = t.getOuterBindingIdentifiers(path.node.id);\n        for (const name of Object.keys(bindings)) {\n          let scope = path.scope;\n\n          // ignore parent bindings (note: impossible due to let/const?)\n          if (!scope.hasOwnBinding(name)) continue;\n\n          // check if shadowed within the nearest function/program boundary\n          while ((scope = scope.parent)) {\n            if (scope.hasOwnBinding(name)) {\n              path.scope.rename(name);\n              break;\n            }\n            if (t.isFunction(scope.block) || t.isProgram(scope.block)) {\n              break;\n            }\n          }\n        }\n      },\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,gBAAuB;EAAA,IAAd;IAAEA,KAAK,EAAEC;EAAT,CAAc;EACpC,OAAO;IACLC,IAAI,EAAE,kCADD;IAELC,OAAO,EAAE;MACPC,kBAAkB,CAACC,IAAD,EAAO;QACvB;QACA,MAAMC,IAAI,GAAGD,IAAI,CAACE,MAAL,CAAYD,IAAzB;QACA,IAAIA,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,OAA/B,EAAwC,OAHjB,CAKvB;;QACA,MAAME,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAWD,KAAzB;QACA,IAAIP,CAAC,CAACS,UAAF,CAAaF,KAAb,KAAuBP,CAAC,CAACU,SAAF,CAAYH,KAAZ,CAA3B,EAA+C;QAE/C,MAAMI,QAAQ,GAAGX,CAAC,CAACY,0BAAF,CAA6BR,IAAI,CAACS,IAAL,CAAUC,EAAvC,CAAjB;;QACA,KAAK,MAAMb,IAAX,IAAmBc,MAAM,CAACC,IAAP,CAAYL,QAAZ,CAAnB,EAA0C;UACxC,IAAIH,KAAK,GAAGJ,IAAI,CAACI,KAAjB,CADwC,CAGxC;;UACA,IAAI,CAACA,KAAK,CAACS,aAAN,CAAoBhB,IAApB,CAAL,EAAgC,SAJQ,CAMxC;;UACA,OAAQO,KAAK,GAAGA,KAAK,CAACF,MAAtB,EAA+B;YAC7B,IAAIE,KAAK,CAACS,aAAN,CAAoBhB,IAApB,CAAJ,EAA+B;cAC7BG,IAAI,CAACI,KAAL,CAAWU,MAAX,CAAkBjB,IAAlB;cACA;YACD;;YACD,IAAID,CAAC,CAACS,UAAF,CAAaD,KAAK,CAACD,KAAnB,KAA6BP,CAAC,CAACU,SAAF,CAAYF,KAAK,CAACD,KAAlB,CAAjC,EAA2D;cACzD;YACD;UACF;QACF;MACF;;IA5BM;EAFJ,CAAP;AAiCD"},"metadata":{},"sourceType":"module"}