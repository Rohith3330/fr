{"ast":null,"code":"'use strict';\n\nvar test = require('tape');\n\nvar hasBigInts = require('..');\n\ntest('interface', function (t) {\n  t.equal(typeof hasBigInts, 'function', 'is a function');\n  t.equal(typeof hasBigInts(), 'boolean', 'returns a boolean');\n  t.end();\n});\ntest('BigInts are supported', {\n  skip: !hasBigInts()\n}, function (t) {\n  t.equal(typeof BigInt, 'function', 'global BigInt is a function');\n\n  if (typeof BigInt !== 'function') {\n    return;\n  }\n\n  t.equal(BigInt(42), BigInt(42), '42n === 42n');\n  t['throws'](function () {\n    BigInt(NaN);\n  }, RangeError, 'NaN is not an integer; BigInt(NaN) throws');\n  t['throws'](function () {\n    BigInt(Infinity);\n  }, RangeError, 'Infinity is not an integer; BigInt(Infinity) throws');\n  t['throws'](function () {\n    BigInt(1.1);\n  }, RangeError, '1.1 is not an integer; BigInt(1.1) throws');\n  t.end();\n});\ntest('BigInts are not supported', {\n  skip: hasBigInts()\n}, function (t) {\n  t.equal(typeof BigInt, 'undefined', 'global BigInt is undefined');\n  t.end();\n});","map":{"version":3,"names":["test","require","hasBigInts","t","equal","end","skip","BigInt","NaN","RangeError","Infinity"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/has-bigints/test/index.js"],"sourcesContent":["'use strict';\n\nvar test = require('tape');\nvar hasBigInts = require('..');\n\ntest('interface', function (t) {\n\tt.equal(typeof hasBigInts, 'function', 'is a function');\n\tt.equal(typeof hasBigInts(), 'boolean', 'returns a boolean');\n\tt.end();\n});\n\ntest('BigInts are supported', { skip: !hasBigInts() }, function (t) {\n\tt.equal(typeof BigInt, 'function', 'global BigInt is a function');\n\tif (typeof BigInt !== 'function') {\n\t\treturn;\n\t}\n\n\tt.equal(BigInt(42), BigInt(42), '42n === 42n');\n\tt['throws'](\n\t\tfunction () { BigInt(NaN); },\n\t\tRangeError,\n\t\t'NaN is not an integer; BigInt(NaN) throws'\n\t);\n\n\tt['throws'](\n\t\tfunction () { BigInt(Infinity); },\n\t\tRangeError,\n\t\t'Infinity is not an integer; BigInt(Infinity) throws'\n\t);\n\n\tt['throws'](\n\t\tfunction () { BigInt(1.1); },\n\t\tRangeError,\n\t\t'1.1 is not an integer; BigInt(1.1) throws'\n\t);\n\n\tt.end();\n});\n\ntest('BigInts are not supported', { skip: hasBigInts() }, function (t) {\n\tt.equal(typeof BigInt, 'undefined', 'global BigInt is undefined');\n\n\tt.end();\n});\n"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,IAAD,CAAxB;;AAEAD,IAAI,CAAC,WAAD,EAAc,UAAUG,CAAV,EAAa;EAC9BA,CAAC,CAACC,KAAF,CAAQ,OAAOF,UAAf,EAA2B,UAA3B,EAAuC,eAAvC;EACAC,CAAC,CAACC,KAAF,CAAQ,OAAOF,UAAU,EAAzB,EAA6B,SAA7B,EAAwC,mBAAxC;EACAC,CAAC,CAACE,GAAF;AACA,CAJG,CAAJ;AAMAL,IAAI,CAAC,uBAAD,EAA0B;EAAEM,IAAI,EAAE,CAACJ,UAAU;AAAnB,CAA1B,EAAmD,UAAUC,CAAV,EAAa;EACnEA,CAAC,CAACC,KAAF,CAAQ,OAAOG,MAAf,EAAuB,UAAvB,EAAmC,6BAAnC;;EACA,IAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;IACjC;EACA;;EAEDJ,CAAC,CAACC,KAAF,CAAQG,MAAM,CAAC,EAAD,CAAd,EAAoBA,MAAM,CAAC,EAAD,CAA1B,EAAgC,aAAhC;EACAJ,CAAC,CAAC,QAAD,CAAD,CACC,YAAY;IAAEI,MAAM,CAACC,GAAD,CAAN;EAAc,CAD7B,EAECC,UAFD,EAGC,2CAHD;EAMAN,CAAC,CAAC,QAAD,CAAD,CACC,YAAY;IAAEI,MAAM,CAACG,QAAD,CAAN;EAAmB,CADlC,EAECD,UAFD,EAGC,qDAHD;EAMAN,CAAC,CAAC,QAAD,CAAD,CACC,YAAY;IAAEI,MAAM,CAAC,GAAD,CAAN;EAAc,CAD7B,EAECE,UAFD,EAGC,2CAHD;EAMAN,CAAC,CAACE,GAAF;AACA,CA1BG,CAAJ;AA4BAL,IAAI,CAAC,2BAAD,EAA8B;EAAEM,IAAI,EAAEJ,UAAU;AAAlB,CAA9B,EAAsD,UAAUC,CAAV,EAAa;EACtEA,CAAC,CAACC,KAAF,CAAQ,OAAOG,MAAf,EAAuB,WAAvB,EAAoC,4BAApC;EAEAJ,CAAC,CAACE,GAAF;AACA,CAJG,CAAJ"},"metadata":{},"sourceType":"script"}