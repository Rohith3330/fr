{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  type: 'string'\n}];\nconst message = '$FlowFixMe is treated as `any` and must be fixed.';\n\nconst isIdentifier = function (node, name) {\n  return node && node.type === 'Identifier' && node.name.match(name);\n};\n\nconst create = context => {\n  const allowedPattern = context.options[0] ? new RegExp(context.options[0], 'u') : null;\n  const extraMessage = allowedPattern ? ' Fix it or match `' + allowedPattern.toString() + '`.' : '';\n\n  const passesExtraRegex = function (value) {\n    if (!allowedPattern) {\n      return false;\n    }\n\n    return value.match(allowedPattern);\n  };\n\n  const handleComment = function (comment) {\n    const value = comment.value.trim();\n\n    if (/\\$FlowFixMe/u.test(value) && !passesExtraRegex(value)) {\n      context.report({\n        message: message + extraMessage,\n        node: comment\n      });\n    }\n  };\n\n  return {\n    GenericTypeAnnotation(node) {\n      if (isIdentifier(node.id, /\\$FlowFixMe/u)) {\n        context.report({\n          message,\n          node: node.id\n        });\n      }\n    },\n\n    Program() {\n      for (const comment of context.getSourceCode().getAllComments().filter(node => {\n        return node.type === 'Block' || node.type === 'Line';\n      })) {\n        handleComment(comment);\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","schema","type","message","isIdentifier","node","name","match","create","context","allowedPattern","options","RegExp","extraMessage","toString","passesExtraRegex","handleComment","comment","trim","test","report","GenericTypeAnnotation","id","Program","getSourceCode","getAllComments","filter","_default","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/noFlowFixMeComments.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  type: 'string'\n}];\nconst message = '$FlowFixMe is treated as `any` and must be fixed.';\n\nconst isIdentifier = function (node, name) {\n  return node && node.type === 'Identifier' && node.name.match(name);\n};\n\nconst create = context => {\n  const allowedPattern = context.options[0] ? new RegExp(context.options[0], 'u') : null;\n  const extraMessage = allowedPattern ? ' Fix it or match `' + allowedPattern.toString() + '`.' : '';\n\n  const passesExtraRegex = function (value) {\n    if (!allowedPattern) {\n      return false;\n    }\n\n    return value.match(allowedPattern);\n  };\n\n  const handleComment = function (comment) {\n    const value = comment.value.trim();\n\n    if (/\\$FlowFixMe/u.test(value) && !passesExtraRegex(value)) {\n      context.report({\n        message: message + extraMessage,\n        node: comment\n      });\n    }\n  };\n\n  return {\n    GenericTypeAnnotation(node) {\n      if (isIdentifier(node.id, /\\$FlowFixMe/u)) {\n        context.report({\n          message,\n          node: node.id\n        });\n      }\n    },\n\n    Program() {\n      for (const comment of context.getSourceCode().getAllComments().filter(node => {\n        return node.type === 'Block' || node.type === 'Line';\n      })) {\n        handleComment(comment);\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,MAAM,GAAG,CAAC;EACdC,IAAI,EAAE;AADQ,CAAD,CAAf;AAGA,MAAMC,OAAO,GAAG,mDAAhB;;AAEA,MAAMC,YAAY,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;EACzC,OAAOD,IAAI,IAAIA,IAAI,CAACH,IAAL,KAAc,YAAtB,IAAsCG,IAAI,CAACC,IAAL,CAAUC,KAAV,CAAgBD,IAAhB,CAA7C;AACD,CAFD;;AAIA,MAAME,MAAM,GAAGC,OAAO,IAAI;EACxB,MAAMC,cAAc,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,IAAqB,IAAIC,MAAJ,CAAWH,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAX,EAA+B,GAA/B,CAArB,GAA2D,IAAlF;EACA,MAAME,YAAY,GAAGH,cAAc,GAAG,uBAAuBA,cAAc,CAACI,QAAf,EAAvB,GAAmD,IAAtD,GAA6D,EAAhG;;EAEA,MAAMC,gBAAgB,GAAG,UAAUhB,KAAV,EAAiB;IACxC,IAAI,CAACW,cAAL,EAAqB;MACnB,OAAO,KAAP;IACD;;IAED,OAAOX,KAAK,CAACQ,KAAN,CAAYG,cAAZ,CAAP;EACD,CAND;;EAQA,MAAMM,aAAa,GAAG,UAAUC,OAAV,EAAmB;IACvC,MAAMlB,KAAK,GAAGkB,OAAO,CAAClB,KAAR,CAAcmB,IAAd,EAAd;;IAEA,IAAI,eAAeC,IAAf,CAAoBpB,KAApB,KAA8B,CAACgB,gBAAgB,CAAChB,KAAD,CAAnD,EAA4D;MAC1DU,OAAO,CAACW,MAAR,CAAe;QACbjB,OAAO,EAAEA,OAAO,GAAGU,YADN;QAEbR,IAAI,EAAEY;MAFO,CAAf;IAID;EACF,CATD;;EAWA,OAAO;IACLI,qBAAqB,CAAChB,IAAD,EAAO;MAC1B,IAAID,YAAY,CAACC,IAAI,CAACiB,EAAN,EAAU,cAAV,CAAhB,EAA2C;QACzCb,OAAO,CAACW,MAAR,CAAe;UACbjB,OADa;UAEbE,IAAI,EAAEA,IAAI,CAACiB;QAFE,CAAf;MAID;IACF,CARI;;IAULC,OAAO,GAAG;MACR,KAAK,MAAMN,OAAX,IAAsBR,OAAO,CAACe,aAAR,GAAwBC,cAAxB,GAAyCC,MAAzC,CAAgDrB,IAAI,IAAI;QAC5E,OAAOA,IAAI,CAACH,IAAL,KAAc,OAAd,IAAyBG,IAAI,CAACH,IAAL,KAAc,MAA9C;MACD,CAFqB,CAAtB,EAEI;QACFc,aAAa,CAACC,OAAD,CAAb;MACD;IACF;;EAhBI,CAAP;AAmBD,CA1CD;;AA4CA,IAAIU,QAAQ,GAAG;EACbnB,MADa;EAEbP;AAFa,CAAf;AAIAH,OAAO,CAACE,OAAR,GAAkB2B,QAAlB;AACAC,MAAM,CAAC9B,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}