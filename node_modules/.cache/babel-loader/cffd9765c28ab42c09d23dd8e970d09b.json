{"ast":null,"code":"/**\n * @fileoverview Rule to enforce declarations in program or function body root.\n * @author Brandon Mills\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nconst validParent = new Set([\"Program\", \"StaticBlock\", \"ExportNamedDeclaration\", \"ExportDefaultDeclaration\"]);\nconst validBlockStatementParent = new Set([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"]);\n/**\n * Finds the nearest enclosing context where this rule allows declarations and returns its description.\n * @param {ASTNode} node Node to search from.\n * @returns {string} Description. One of \"program\", \"function body\", \"class static block body\".\n */\n\nfunction getAllowedBodyDescription(node) {\n  let {\n    parent\n  } = node;\n\n  while (parent) {\n    if (parent.type === \"StaticBlock\") {\n      return \"class static block body\";\n    }\n\n    if (astUtils.isFunction(parent)) {\n      return \"function body\";\n    }\n\n    ({\n      parent\n    } = parent);\n  }\n\n  return \"program\";\n}\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow variable or `function` declarations in nested blocks\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-inner-declarations\"\n    },\n    schema: [{\n      enum: [\"functions\", \"both\"]\n    }],\n    messages: {\n      moveDeclToRoot: \"Move {{type}} declaration to {{body}} root.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Ensure that a given node is at a program or function body's root.\n     * @param {ASTNode} node Declaration node to check.\n     * @returns {void}\n     */\n    function check(node) {\n      const parent = node.parent;\n\n      if (parent.type === \"BlockStatement\" && validBlockStatementParent.has(parent.parent.type)) {\n        return;\n      }\n\n      if (validParent.has(parent.type)) {\n        return;\n      }\n\n      context.report({\n        node,\n        messageId: \"moveDeclToRoot\",\n        data: {\n          type: node.type === \"FunctionDeclaration\" ? \"function\" : \"variable\",\n          body: getAllowedBodyDescription(node)\n        }\n      });\n    }\n\n    return {\n      FunctionDeclaration: check,\n\n      VariableDeclaration(node) {\n        if (context.options[0] === \"both\" && node.kind === \"var\") {\n          check(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","validParent","Set","validBlockStatementParent","getAllowedBodyDescription","node","parent","type","isFunction","module","exports","meta","docs","description","recommended","url","schema","enum","messages","moveDeclToRoot","create","context","check","has","report","messageId","data","body","FunctionDeclaration","VariableDeclaration","options","kind"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-inner-declarations.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce declarations in program or function body root.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst validParent = new Set([\"Program\", \"StaticBlock\", \"ExportNamedDeclaration\", \"ExportDefaultDeclaration\"]);\nconst validBlockStatementParent = new Set([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"]);\n\n/**\n * Finds the nearest enclosing context where this rule allows declarations and returns its description.\n * @param {ASTNode} node Node to search from.\n * @returns {string} Description. One of \"program\", \"function body\", \"class static block body\".\n */\nfunction getAllowedBodyDescription(node) {\n    let { parent } = node;\n\n    while (parent) {\n\n        if (parent.type === \"StaticBlock\") {\n            return \"class static block body\";\n        }\n\n        if (astUtils.isFunction(parent)) {\n            return \"function body\";\n        }\n\n        ({ parent } = parent);\n    }\n\n    return \"program\";\n}\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow variable or `function` declarations in nested blocks\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-inner-declarations\"\n        },\n\n        schema: [\n            {\n                enum: [\"functions\", \"both\"]\n            }\n        ],\n\n        messages: {\n            moveDeclToRoot: \"Move {{type}} declaration to {{body}} root.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Ensure that a given node is at a program or function body's root.\n         * @param {ASTNode} node Declaration node to check.\n         * @returns {void}\n         */\n        function check(node) {\n            const parent = node.parent;\n\n            if (\n                parent.type === \"BlockStatement\" && validBlockStatementParent.has(parent.parent.type)\n            ) {\n                return;\n            }\n\n            if (validParent.has(parent.type)) {\n                return;\n            }\n\n            context.report({\n                node,\n                messageId: \"moveDeclToRoot\",\n                data: {\n                    type: (node.type === \"FunctionDeclaration\" ? \"function\" : \"variable\"),\n                    body: getAllowedBodyDescription(node)\n                }\n            });\n        }\n\n\n        return {\n\n            FunctionDeclaration: check,\n            VariableDeclaration(node) {\n                if (context.options[0] === \"both\" && node.kind === \"var\") {\n                    check(node);\n                }\n            }\n\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CAAC,SAAD,EAAY,aAAZ,EAA2B,wBAA3B,EAAqD,0BAArD,CAAR,CAApB;AACA,MAAMC,yBAAyB,GAAG,IAAID,GAAJ,CAAQ,CAAC,qBAAD,EAAwB,oBAAxB,EAA8C,yBAA9C,CAAR,CAAlC;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASE,yBAAT,CAAmCC,IAAnC,EAAyC;EACrC,IAAI;IAAEC;EAAF,IAAaD,IAAjB;;EAEA,OAAOC,MAAP,EAAe;IAEX,IAAIA,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC;MAC/B,OAAO,yBAAP;IACH;;IAED,IAAIR,QAAQ,CAACS,UAAT,CAAoBF,MAApB,CAAJ,EAAiC;MAC7B,OAAO,eAAP;IACH;;IAED,CAAC;MAAEA;IAAF,IAAaA,MAAd;EACH;;EAED,OAAO,SAAP;AACH;AAED;;;AACAG,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFJ,IAAI,EAAE,SADJ;IAGFK,IAAI,EAAE;MACFC,WAAW,EAAE,+DADX;MAEFC,WAAW,EAAE,IAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,WAAD,EAAc,MAAd;IADV,CADI,CATN;IAeFC,QAAQ,EAAE;MACNC,cAAc,EAAE;IADV;EAfR,CADO;;EAqBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,KAAT,CAAejB,IAAf,EAAqB;MACjB,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;;MAEA,IACIA,MAAM,CAACC,IAAP,KAAgB,gBAAhB,IAAoCJ,yBAAyB,CAACoB,GAA1B,CAA8BjB,MAAM,CAACA,MAAP,CAAcC,IAA5C,CADxC,EAEE;QACE;MACH;;MAED,IAAIN,WAAW,CAACsB,GAAZ,CAAgBjB,MAAM,CAACC,IAAvB,CAAJ,EAAkC;QAC9B;MACH;;MAEDc,OAAO,CAACG,MAAR,CAAe;QACXnB,IADW;QAEXoB,SAAS,EAAE,gBAFA;QAGXC,IAAI,EAAE;UACFnB,IAAI,EAAGF,IAAI,CAACE,IAAL,KAAc,qBAAd,GAAsC,UAAtC,GAAmD,UADxD;UAEFoB,IAAI,EAAEvB,yBAAyB,CAACC,IAAD;QAF7B;MAHK,CAAf;IAQH;;IAGD,OAAO;MAEHuB,mBAAmB,EAAEN,KAFlB;;MAGHO,mBAAmB,CAACxB,IAAD,EAAO;QACtB,IAAIgB,OAAO,CAACS,OAAR,CAAgB,CAAhB,MAAuB,MAAvB,IAAiCzB,IAAI,CAAC0B,IAAL,KAAc,KAAnD,EAA0D;UACtDT,KAAK,CAACjB,IAAD,CAAL;QACH;MACJ;;IAPE,CAAP;EAWH;;AA/DY,CAAjB"},"metadata":{},"sourceType":"script"}