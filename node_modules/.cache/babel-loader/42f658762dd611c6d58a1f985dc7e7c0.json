{"ast":null,"code":"/**\n * Create a valid URL from parsed URL parts.\n * @param {import('./getSocketUrlParts').SocketUrlParts} urlParts The parsed URL parts.\n * @param {import('./getWDSMetadata').WDSMetaObj} [metadata] The parsed WDS metadata object.\n * @returns {string} The generated URL.\n */\nfunction urlFromParts(urlParts, metadata) {\n  if (typeof metadata === 'undefined') {\n    metadata = {};\n  }\n\n  let fullProtocol = 'http:';\n\n  if (urlParts.protocol) {\n    fullProtocol = urlParts.protocol;\n  }\n\n  if (metadata.enforceWs) {\n    fullProtocol = fullProtocol.replace(/^(?:http|.+-extension|file)/i, 'ws');\n  }\n\n  fullProtocol = fullProtocol + '//';\n  let fullHost = urlParts.hostname;\n\n  if (urlParts.auth) {\n    const fullAuth = urlParts.auth.split(':').map(encodeURIComponent).join(':') + '@';\n    fullHost = fullAuth + fullHost;\n  }\n\n  if (urlParts.port) {\n    fullHost = fullHost + ':' + urlParts.port;\n  }\n\n  const url = new URL(urlParts.pathname, fullProtocol + fullHost);\n  return url.href;\n}\n\nmodule.exports = urlFromParts;","map":{"version":3,"names":["urlFromParts","urlParts","metadata","fullProtocol","protocol","enforceWs","replace","fullHost","hostname","auth","fullAuth","split","map","encodeURIComponent","join","port","url","URL","pathname","href","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getUrlFromParts.js"],"sourcesContent":["/**\n * Create a valid URL from parsed URL parts.\n * @param {import('./getSocketUrlParts').SocketUrlParts} urlParts The parsed URL parts.\n * @param {import('./getWDSMetadata').WDSMetaObj} [metadata] The parsed WDS metadata object.\n * @returns {string} The generated URL.\n */\nfunction urlFromParts(urlParts, metadata) {\n  if (typeof metadata === 'undefined') {\n    metadata = {};\n  }\n\n  let fullProtocol = 'http:';\n  if (urlParts.protocol) {\n    fullProtocol = urlParts.protocol;\n  }\n  if (metadata.enforceWs) {\n    fullProtocol = fullProtocol.replace(/^(?:http|.+-extension|file)/i, 'ws');\n  }\n\n  fullProtocol = fullProtocol + '//';\n\n  let fullHost = urlParts.hostname;\n  if (urlParts.auth) {\n    const fullAuth = urlParts.auth.split(':').map(encodeURIComponent).join(':') + '@';\n    fullHost = fullAuth + fullHost;\n  }\n  if (urlParts.port) {\n    fullHost = fullHost + ':' + urlParts.port;\n  }\n\n  const url = new URL(urlParts.pathname, fullProtocol + fullHost);\n  return url.href;\n}\n\nmodule.exports = urlFromParts;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,CAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C;EACxC,IAAI,OAAOA,QAAP,KAAoB,WAAxB,EAAqC;IACnCA,QAAQ,GAAG,EAAX;EACD;;EAED,IAAIC,YAAY,GAAG,OAAnB;;EACA,IAAIF,QAAQ,CAACG,QAAb,EAAuB;IACrBD,YAAY,GAAGF,QAAQ,CAACG,QAAxB;EACD;;EACD,IAAIF,QAAQ,CAACG,SAAb,EAAwB;IACtBF,YAAY,GAAGA,YAAY,CAACG,OAAb,CAAqB,8BAArB,EAAqD,IAArD,CAAf;EACD;;EAEDH,YAAY,GAAGA,YAAY,GAAG,IAA9B;EAEA,IAAII,QAAQ,GAAGN,QAAQ,CAACO,QAAxB;;EACA,IAAIP,QAAQ,CAACQ,IAAb,EAAmB;IACjB,MAAMC,QAAQ,GAAGT,QAAQ,CAACQ,IAAT,CAAcE,KAAd,CAAoB,GAApB,EAAyBC,GAAzB,CAA6BC,kBAA7B,EAAiDC,IAAjD,CAAsD,GAAtD,IAA6D,GAA9E;IACAP,QAAQ,GAAGG,QAAQ,GAAGH,QAAtB;EACD;;EACD,IAAIN,QAAQ,CAACc,IAAb,EAAmB;IACjBR,QAAQ,GAAGA,QAAQ,GAAG,GAAX,GAAiBN,QAAQ,CAACc,IAArC;EACD;;EAED,MAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQhB,QAAQ,CAACiB,QAAjB,EAA2Bf,YAAY,GAAGI,QAA1C,CAAZ;EACA,OAAOS,GAAG,CAACG,IAAX;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBrB,YAAjB"},"metadata":{},"sourceType":"script"}