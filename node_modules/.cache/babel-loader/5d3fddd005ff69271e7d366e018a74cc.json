{"ast":null,"code":"/**\n * Module dependencies.\n */\ntry {\n  var EventEmitter = require('events').EventEmitter;\n\n  if (!EventEmitter) throw new Error();\n} catch (err) {\n  var Emitter = require('emitter');\n}\n/**\n * Defer.\n */\n\n\nvar defer = typeof process !== 'undefined' && process && typeof process.nextTick === 'function' ? process.nextTick : function (fn) {\n  setTimeout(fn);\n};\n/**\n * Noop.\n */\n\nfunction noop() {}\n/**\n * Expose `Batch`.\n */\n\n\nmodule.exports = Batch;\n/**\n * Create a new Batch.\n */\n\nfunction Batch() {\n  if (!(this instanceof Batch)) return new Batch();\n  this.fns = [];\n  this.concurrency(Infinity);\n  this.throws(true);\n\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    this.push(arguments[i]);\n  }\n}\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\n\nif (EventEmitter) {\n  Batch.prototype.__proto__ = EventEmitter.prototype;\n} else {\n  Emitter(Batch.prototype);\n}\n/**\n * Set concurrency to `n`.\n *\n * @param {Number} n\n * @return {Batch}\n * @api public\n */\n\n\nBatch.prototype.concurrency = function (n) {\n  this.n = n;\n  return this;\n};\n/**\n * Queue a function.\n *\n * @param {Function} fn\n * @return {Batch}\n * @api public\n */\n\n\nBatch.prototype.push = function (fn) {\n  this.fns.push(fn);\n  return this;\n};\n/**\n * Set wether Batch will or will not throw up.\n *\n * @param  {Boolean} throws\n * @return {Batch}\n * @api public\n */\n\n\nBatch.prototype.throws = function (throws) {\n  this.e = !!throws;\n  return this;\n};\n/**\n * Execute all queued functions in parallel,\n * executing `cb(err, results)`.\n *\n * @param {Function} cb\n * @return {Batch}\n * @api public\n */\n\n\nBatch.prototype.end = function (cb) {\n  var self = this,\n      total = this.fns.length,\n      pending = total,\n      results = [],\n      errors = [],\n      cb = cb || noop,\n      fns = this.fns,\n      max = this.n,\n      throws = this.e,\n      index = 0,\n      done; // empty\n\n  if (!fns.length) return defer(function () {\n    cb(null, results);\n  }); // process\n\n  function next() {\n    var i = index++;\n    var fn = fns[i];\n    if (!fn) return;\n    var start = new Date();\n\n    try {\n      fn(callback);\n    } catch (err) {\n      callback(err);\n    }\n\n    function callback(err, res) {\n      if (done) return;\n      if (err && throws) return done = true, defer(function () {\n        cb(err);\n      });\n      var complete = total - pending + 1;\n      var end = new Date();\n      results[i] = res;\n      errors[i] = err;\n      self.emit('progress', {\n        index: i,\n        value: res,\n        error: err,\n        pending: pending,\n        total: total,\n        complete: complete,\n        percent: complete / total * 100 | 0,\n        start: start,\n        end: end,\n        duration: end - start\n      });\n      if (--pending) next();else defer(function () {\n        if (!throws) cb(errors, results);else cb(null, results);\n      });\n    }\n  } // concurrency\n\n\n  for (var i = 0; i < fns.length; i++) {\n    if (i == max) break;\n    next();\n  }\n\n  return this;\n};","map":{"version":3,"names":["EventEmitter","require","Error","err","Emitter","defer","process","nextTick","fn","setTimeout","noop","module","exports","Batch","fns","concurrency","Infinity","throws","i","len","arguments","length","push","prototype","__proto__","n","e","end","cb","self","total","pending","results","errors","max","index","done","next","start","Date","callback","res","complete","emit","value","error","percent","duration"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/batch/index.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\ntry {\n  var EventEmitter = require('events').EventEmitter;\n  if (!EventEmitter) throw new Error();\n} catch (err) {\n  var Emitter = require('emitter');\n}\n\n/**\n * Defer.\n */\n\nvar defer = typeof process !== 'undefined' && process && typeof process.nextTick === 'function'\n  ? process.nextTick\n  : function(fn){ setTimeout(fn); };\n\n/**\n * Noop.\n */\n\nfunction noop(){}\n\n/**\n * Expose `Batch`.\n */\n\nmodule.exports = Batch;\n\n/**\n * Create a new Batch.\n */\n\nfunction Batch() {\n  if (!(this instanceof Batch)) return new Batch;\n  this.fns = [];\n  this.concurrency(Infinity);\n  this.throws(true);\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    this.push(arguments[i]);\n  }\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nif (EventEmitter) {\n  Batch.prototype.__proto__ = EventEmitter.prototype;\n} else {\n  Emitter(Batch.prototype);\n}\n\n/**\n * Set concurrency to `n`.\n *\n * @param {Number} n\n * @return {Batch}\n * @api public\n */\n\nBatch.prototype.concurrency = function(n){\n  this.n = n;\n  return this;\n};\n\n/**\n * Queue a function.\n *\n * @param {Function} fn\n * @return {Batch}\n * @api public\n */\n\nBatch.prototype.push = function(fn){\n  this.fns.push(fn);\n  return this;\n};\n\n/**\n * Set wether Batch will or will not throw up.\n *\n * @param  {Boolean} throws\n * @return {Batch}\n * @api public\n */\nBatch.prototype.throws = function(throws) {\n  this.e = !!throws;\n  return this;\n};\n\n/**\n * Execute all queued functions in parallel,\n * executing `cb(err, results)`.\n *\n * @param {Function} cb\n * @return {Batch}\n * @api public\n */\n\nBatch.prototype.end = function(cb){\n  var self = this\n    , total = this.fns.length\n    , pending = total\n    , results = []\n    , errors = []\n    , cb = cb || noop\n    , fns = this.fns\n    , max = this.n\n    , throws = this.e\n    , index = 0\n    , done;\n\n  // empty\n  if (!fns.length) return defer(function(){\n    cb(null, results);\n  });\n\n  // process\n  function next() {\n    var i = index++;\n    var fn = fns[i];\n    if (!fn) return;\n    var start = new Date;\n\n    try {\n      fn(callback);\n    } catch (err) {\n      callback(err);\n    }\n\n    function callback(err, res){\n      if (done) return;\n      if (err && throws) return done = true, defer(function(){\n        cb(err);\n      });\n      var complete = total - pending + 1;\n      var end = new Date;\n\n      results[i] = res;\n      errors[i] = err;\n\n      self.emit('progress', {\n        index: i,\n        value: res,\n        error: err,\n        pending: pending,\n        total: total,\n        complete: complete,\n        percent: complete / total * 100 | 0,\n        start: start,\n        end: end,\n        duration: end - start\n      });\n\n      if (--pending) next();\n      else defer(function(){\n        if(!throws) cb(errors, results);\n        else cb(null, results);\n      });\n    }\n  }\n\n  // concurrency\n  for (var i = 0; i < fns.length; i++) {\n    if (i == max) break;\n    next();\n  }\n\n  return this;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}