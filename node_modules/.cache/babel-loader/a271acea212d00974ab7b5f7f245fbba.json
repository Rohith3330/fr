{"ast":null,"code":"/**\n * @fileoverview A rule to choose between single and double quote marks\n * @author Matt DuVall <http://www.mattduvall.com/>, Brandon Payton\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n\nconst QUOTE_SETTINGS = {\n  double: {\n    quote: \"\\\"\",\n    alternateQuote: \"'\",\n    description: \"doublequote\"\n  },\n  single: {\n    quote: \"'\",\n    alternateQuote: \"\\\"\",\n    description: \"singlequote\"\n  },\n  backtick: {\n    quote: \"`\",\n    alternateQuote: \"\\\"\",\n    description: \"backtick\"\n  }\n}; // An unescaped newline is a newline preceded by an even number of backslashes.\n\nconst UNESCAPED_LINEBREAK_PATTERN = new RegExp(String.raw`(^|[^\\\\])(\\\\\\\\)*[${Array.from(astUtils.LINEBREAKS).join(\"\")}]`, \"u\");\n/**\n * Switches quoting of javascript string between ' \" and `\n * escaping and unescaping as necessary.\n * Only escaping of the minimal set of characters is changed.\n * Note: escaping of newlines when switching from backtick to other quotes is not handled.\n * @param {string} str A string to convert.\n * @returns {string} The string with changed quotes.\n * @private\n */\n\nQUOTE_SETTINGS.double.convert = QUOTE_SETTINGS.single.convert = QUOTE_SETTINGS.backtick.convert = function (str) {\n  const newQuote = this.quote;\n  const oldQuote = str[0];\n\n  if (newQuote === oldQuote) {\n    return str;\n  }\n\n  return newQuote + str.slice(1, -1).replace(/\\\\(\\$\\{|\\r\\n?|\\n|.)|[\"'`]|\\$\\{|(\\r\\n?|\\n)/gu, (match, escaped, newline) => {\n    if (escaped === oldQuote || oldQuote === \"`\" && escaped === \"${\") {\n      return escaped; // unescape\n    }\n\n    if (match === newQuote || newQuote === \"`\" && match === \"${\") {\n      return `\\\\${match}`; // escape\n    }\n\n    if (newline && oldQuote === \"`\") {\n      return \"\\\\n\"; // escape newlines\n    }\n\n    return match;\n  }) + newQuote;\n};\n\nconst AVOID_ESCAPE = \"avoid-escape\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"Enforce the consistent use of either backticks, double, or single quotes\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/quotes\"\n    },\n    fixable: \"code\",\n    schema: [{\n      enum: [\"single\", \"double\", \"backtick\"]\n    }, {\n      anyOf: [{\n        enum: [\"avoid-escape\"]\n      }, {\n        type: \"object\",\n        properties: {\n          avoidEscape: {\n            type: \"boolean\"\n          },\n          allowTemplateLiterals: {\n            type: \"boolean\"\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      wrongQuotes: \"Strings must use {{description}}.\"\n    }\n  },\n\n  create(context) {\n    const quoteOption = context.options[0],\n          settings = QUOTE_SETTINGS[quoteOption || \"double\"],\n          options = context.options[1],\n          allowTemplateLiterals = options && options.allowTemplateLiterals === true,\n          sourceCode = context.getSourceCode();\n    let avoidEscape = options && options.avoidEscape === true; // deprecated\n\n    if (options === AVOID_ESCAPE) {\n      avoidEscape = true;\n    }\n    /**\n     * Determines if a given node is part of JSX syntax.\n     *\n     * This function returns `true` in the following cases:\n     *\n     * - `<div className=\"foo\"></div>` ... If the literal is an attribute value, the parent of the literal is `JSXAttribute`.\n     * - `<div>foo</div>` ... If the literal is a text content, the parent of the literal is `JSXElement`.\n     * - `<>foo</>` ... If the literal is a text content, the parent of the literal is `JSXFragment`.\n     *\n     * In particular, this function returns `false` in the following cases:\n     *\n     * - `<div className={\"foo\"}></div>`\n     * - `<div>{\"foo\"}</div>`\n     *\n     * In both cases, inside of the braces is handled as normal JavaScript.\n     * The braces are `JSXExpressionContainer` nodes.\n     * @param {ASTNode} node The Literal node to check.\n     * @returns {boolean} True if the node is a part of JSX, false if not.\n     * @private\n     */\n\n\n    function isJSXLiteral(node) {\n      return node.parent.type === \"JSXAttribute\" || node.parent.type === \"JSXElement\" || node.parent.type === \"JSXFragment\";\n    }\n    /**\n     * Checks whether or not a given node is a directive.\n     * The directive is a `ExpressionStatement` which has only a string literal.\n     * @param {ASTNode} node A node to check.\n     * @returns {boolean} Whether or not the node is a directive.\n     * @private\n     */\n\n\n    function isDirective(node) {\n      return node.type === \"ExpressionStatement\" && node.expression.type === \"Literal\" && typeof node.expression.value === \"string\";\n    }\n    /**\n     * Checks whether or not a given node is a part of directive prologues.\n     * See also: http://www.ecma-international.org/ecma-262/6.0/#sec-directive-prologues-and-the-use-strict-directive\n     * @param {ASTNode} node A node to check.\n     * @returns {boolean} Whether or not the node is a part of directive prologues.\n     * @private\n     */\n\n\n    function isPartOfDirectivePrologue(node) {\n      const block = node.parent.parent;\n\n      if (block.type !== \"Program\" && (block.type !== \"BlockStatement\" || !astUtils.isFunction(block.parent))) {\n        return false;\n      } // Check the node is at a prologue.\n\n\n      for (let i = 0; i < block.body.length; ++i) {\n        const statement = block.body[i];\n\n        if (statement === node.parent) {\n          return true;\n        }\n\n        if (!isDirective(statement)) {\n          break;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Checks whether or not a given node is allowed as non backtick.\n     * @param {ASTNode} node A node to check.\n     * @returns {boolean} Whether or not the node is allowed as non backtick.\n     * @private\n     */\n\n\n    function isAllowedAsNonBacktick(node) {\n      const parent = node.parent;\n\n      switch (parent.type) {\n        // Directive Prologues.\n        case \"ExpressionStatement\":\n          return isPartOfDirectivePrologue(node);\n        // LiteralPropertyName.\n\n        case \"Property\":\n        case \"PropertyDefinition\":\n        case \"MethodDefinition\":\n          return parent.key === node && !parent.computed;\n        // ModuleSpecifier.\n\n        case \"ImportDeclaration\":\n        case \"ExportNamedDeclaration\":\n          return parent.source === node;\n        // ModuleExportName or ModuleSpecifier.\n\n        case \"ExportAllDeclaration\":\n          return parent.exported === node || parent.source === node;\n        // ModuleExportName.\n\n        case \"ImportSpecifier\":\n          return parent.imported === node;\n        // ModuleExportName.\n\n        case \"ExportSpecifier\":\n          return parent.local === node || parent.exported === node;\n        // Others don't allow.\n\n        default:\n          return false;\n      }\n    }\n    /**\n     * Checks whether or not a given TemplateLiteral node is actually using any of the special features provided by template literal strings.\n     * @param {ASTNode} node A TemplateLiteral node to check.\n     * @returns {boolean} Whether or not the TemplateLiteral node is using any of the special features provided by template literal strings.\n     * @private\n     */\n\n\n    function isUsingFeatureOfTemplateLiteral(node) {\n      const hasTag = node.parent.type === \"TaggedTemplateExpression\" && node === node.parent.quasi;\n\n      if (hasTag) {\n        return true;\n      }\n\n      const hasStringInterpolation = node.expressions.length > 0;\n\n      if (hasStringInterpolation) {\n        return true;\n      }\n\n      const isMultilineString = node.quasis.length >= 1 && UNESCAPED_LINEBREAK_PATTERN.test(node.quasis[0].value.raw);\n\n      if (isMultilineString) {\n        return true;\n      }\n\n      return false;\n    }\n\n    return {\n      Literal(node) {\n        const val = node.value,\n              rawVal = node.raw;\n\n        if (settings && typeof val === \"string\") {\n          let isValid = quoteOption === \"backtick\" && isAllowedAsNonBacktick(node) || isJSXLiteral(node) || astUtils.isSurroundedBy(rawVal, settings.quote);\n\n          if (!isValid && avoidEscape) {\n            isValid = astUtils.isSurroundedBy(rawVal, settings.alternateQuote) && rawVal.includes(settings.quote);\n          }\n\n          if (!isValid) {\n            context.report({\n              node,\n              messageId: \"wrongQuotes\",\n              data: {\n                description: settings.description\n              },\n\n              fix(fixer) {\n                if (quoteOption === \"backtick\" && astUtils.hasOctalOrNonOctalDecimalEscapeSequence(rawVal)) {\n                  /*\n                   * An octal or non-octal decimal escape sequence in a template literal would\n                   * produce syntax error, even in non-strict mode.\n                   */\n                  return null;\n                }\n\n                return fixer.replaceText(node, settings.convert(node.raw));\n              }\n\n            });\n          }\n        }\n      },\n\n      TemplateLiteral(node) {\n        // Don't throw an error if backticks are expected or a template literal feature is in use.\n        if (allowTemplateLiterals || quoteOption === \"backtick\" || isUsingFeatureOfTemplateLiteral(node)) {\n          return;\n        }\n\n        context.report({\n          node,\n          messageId: \"wrongQuotes\",\n          data: {\n            description: settings.description\n          },\n\n          fix(fixer) {\n            if (isPartOfDirectivePrologue(node)) {\n              /*\n               * TemplateLiterals in a directive prologue aren't actually directives, but if they're\n               * in the directive prologue, then fixing them might turn them into directives and change\n               * the behavior of the code.\n               */\n              return null;\n            }\n\n            return fixer.replaceText(node, settings.convert(sourceCode.getText(node)));\n          }\n\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","QUOTE_SETTINGS","double","quote","alternateQuote","description","single","backtick","UNESCAPED_LINEBREAK_PATTERN","RegExp","String","raw","Array","from","LINEBREAKS","join","convert","str","newQuote","oldQuote","slice","replace","match","escaped","newline","AVOID_ESCAPE","module","exports","meta","type","docs","recommended","url","fixable","schema","enum","anyOf","properties","avoidEscape","allowTemplateLiterals","additionalProperties","messages","wrongQuotes","create","context","quoteOption","options","settings","sourceCode","getSourceCode","isJSXLiteral","node","parent","isDirective","expression","value","isPartOfDirectivePrologue","block","isFunction","i","body","length","statement","isAllowedAsNonBacktick","key","computed","source","exported","imported","local","isUsingFeatureOfTemplateLiteral","hasTag","quasi","hasStringInterpolation","expressions","isMultilineString","quasis","test","Literal","val","rawVal","isValid","isSurroundedBy","includes","report","messageId","data","fix","fixer","hasOctalOrNonOctalDecimalEscapeSequence","replaceText","TemplateLiteral","getText"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/quotes.js"],"sourcesContent":["/**\n * @fileoverview A rule to choose between single and double quote marks\n * @author Matt DuVall <http://www.mattduvall.com/>, Brandon Payton\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst QUOTE_SETTINGS = {\n    double: {\n        quote: \"\\\"\",\n        alternateQuote: \"'\",\n        description: \"doublequote\"\n    },\n    single: {\n        quote: \"'\",\n        alternateQuote: \"\\\"\",\n        description: \"singlequote\"\n    },\n    backtick: {\n        quote: \"`\",\n        alternateQuote: \"\\\"\",\n        description: \"backtick\"\n    }\n};\n\n// An unescaped newline is a newline preceded by an even number of backslashes.\nconst UNESCAPED_LINEBREAK_PATTERN = new RegExp(String.raw`(^|[^\\\\])(\\\\\\\\)*[${Array.from(astUtils.LINEBREAKS).join(\"\")}]`, \"u\");\n\n/**\n * Switches quoting of javascript string between ' \" and `\n * escaping and unescaping as necessary.\n * Only escaping of the minimal set of characters is changed.\n * Note: escaping of newlines when switching from backtick to other quotes is not handled.\n * @param {string} str A string to convert.\n * @returns {string} The string with changed quotes.\n * @private\n */\nQUOTE_SETTINGS.double.convert =\nQUOTE_SETTINGS.single.convert =\nQUOTE_SETTINGS.backtick.convert = function(str) {\n    const newQuote = this.quote;\n    const oldQuote = str[0];\n\n    if (newQuote === oldQuote) {\n        return str;\n    }\n    return newQuote + str.slice(1, -1).replace(/\\\\(\\$\\{|\\r\\n?|\\n|.)|[\"'`]|\\$\\{|(\\r\\n?|\\n)/gu, (match, escaped, newline) => {\n        if (escaped === oldQuote || oldQuote === \"`\" && escaped === \"${\") {\n            return escaped; // unescape\n        }\n        if (match === newQuote || newQuote === \"`\" && match === \"${\") {\n            return `\\\\${match}`; // escape\n        }\n        if (newline && oldQuote === \"`\") {\n            return \"\\\\n\"; // escape newlines\n        }\n        return match;\n    }) + newQuote;\n};\n\nconst AVOID_ESCAPE = \"avoid-escape\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"Enforce the consistent use of either backticks, double, or single quotes\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/quotes\"\n        },\n\n        fixable: \"code\",\n\n        schema: [\n            {\n                enum: [\"single\", \"double\", \"backtick\"]\n            },\n            {\n                anyOf: [\n                    {\n                        enum: [\"avoid-escape\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            avoidEscape: {\n                                type: \"boolean\"\n                            },\n                            allowTemplateLiterals: {\n                                type: \"boolean\"\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n\n        messages: {\n            wrongQuotes: \"Strings must use {{description}}.\"\n        }\n    },\n\n    create(context) {\n\n        const quoteOption = context.options[0],\n            settings = QUOTE_SETTINGS[quoteOption || \"double\"],\n            options = context.options[1],\n            allowTemplateLiterals = options && options.allowTemplateLiterals === true,\n            sourceCode = context.getSourceCode();\n        let avoidEscape = options && options.avoidEscape === true;\n\n        // deprecated\n        if (options === AVOID_ESCAPE) {\n            avoidEscape = true;\n        }\n\n        /**\n         * Determines if a given node is part of JSX syntax.\n         *\n         * This function returns `true` in the following cases:\n         *\n         * - `<div className=\"foo\"></div>` ... If the literal is an attribute value, the parent of the literal is `JSXAttribute`.\n         * - `<div>foo</div>` ... If the literal is a text content, the parent of the literal is `JSXElement`.\n         * - `<>foo</>` ... If the literal is a text content, the parent of the literal is `JSXFragment`.\n         *\n         * In particular, this function returns `false` in the following cases:\n         *\n         * - `<div className={\"foo\"}></div>`\n         * - `<div>{\"foo\"}</div>`\n         *\n         * In both cases, inside of the braces is handled as normal JavaScript.\n         * The braces are `JSXExpressionContainer` nodes.\n         * @param {ASTNode} node The Literal node to check.\n         * @returns {boolean} True if the node is a part of JSX, false if not.\n         * @private\n         */\n        function isJSXLiteral(node) {\n            return node.parent.type === \"JSXAttribute\" || node.parent.type === \"JSXElement\" || node.parent.type === \"JSXFragment\";\n        }\n\n        /**\n         * Checks whether or not a given node is a directive.\n         * The directive is a `ExpressionStatement` which has only a string literal.\n         * @param {ASTNode} node A node to check.\n         * @returns {boolean} Whether or not the node is a directive.\n         * @private\n         */\n        function isDirective(node) {\n            return (\n                node.type === \"ExpressionStatement\" &&\n                node.expression.type === \"Literal\" &&\n                typeof node.expression.value === \"string\"\n            );\n        }\n\n        /**\n         * Checks whether or not a given node is a part of directive prologues.\n         * See also: http://www.ecma-international.org/ecma-262/6.0/#sec-directive-prologues-and-the-use-strict-directive\n         * @param {ASTNode} node A node to check.\n         * @returns {boolean} Whether or not the node is a part of directive prologues.\n         * @private\n         */\n        function isPartOfDirectivePrologue(node) {\n            const block = node.parent.parent;\n\n            if (block.type !== \"Program\" && (block.type !== \"BlockStatement\" || !astUtils.isFunction(block.parent))) {\n                return false;\n            }\n\n            // Check the node is at a prologue.\n            for (let i = 0; i < block.body.length; ++i) {\n                const statement = block.body[i];\n\n                if (statement === node.parent) {\n                    return true;\n                }\n                if (!isDirective(statement)) {\n                    break;\n                }\n            }\n\n            return false;\n        }\n\n        /**\n         * Checks whether or not a given node is allowed as non backtick.\n         * @param {ASTNode} node A node to check.\n         * @returns {boolean} Whether or not the node is allowed as non backtick.\n         * @private\n         */\n        function isAllowedAsNonBacktick(node) {\n            const parent = node.parent;\n\n            switch (parent.type) {\n\n                // Directive Prologues.\n                case \"ExpressionStatement\":\n                    return isPartOfDirectivePrologue(node);\n\n                // LiteralPropertyName.\n                case \"Property\":\n                case \"PropertyDefinition\":\n                case \"MethodDefinition\":\n                    return parent.key === node && !parent.computed;\n\n                // ModuleSpecifier.\n                case \"ImportDeclaration\":\n                case \"ExportNamedDeclaration\":\n                    return parent.source === node;\n\n                // ModuleExportName or ModuleSpecifier.\n                case \"ExportAllDeclaration\":\n                    return parent.exported === node || parent.source === node;\n\n                // ModuleExportName.\n                case \"ImportSpecifier\":\n                    return parent.imported === node;\n\n                // ModuleExportName.\n                case \"ExportSpecifier\":\n                    return parent.local === node || parent.exported === node;\n\n                // Others don't allow.\n                default:\n                    return false;\n            }\n        }\n\n        /**\n         * Checks whether or not a given TemplateLiteral node is actually using any of the special features provided by template literal strings.\n         * @param {ASTNode} node A TemplateLiteral node to check.\n         * @returns {boolean} Whether or not the TemplateLiteral node is using any of the special features provided by template literal strings.\n         * @private\n         */\n        function isUsingFeatureOfTemplateLiteral(node) {\n            const hasTag = node.parent.type === \"TaggedTemplateExpression\" && node === node.parent.quasi;\n\n            if (hasTag) {\n                return true;\n            }\n\n            const hasStringInterpolation = node.expressions.length > 0;\n\n            if (hasStringInterpolation) {\n                return true;\n            }\n\n            const isMultilineString = node.quasis.length >= 1 && UNESCAPED_LINEBREAK_PATTERN.test(node.quasis[0].value.raw);\n\n            if (isMultilineString) {\n                return true;\n            }\n\n            return false;\n        }\n\n        return {\n\n            Literal(node) {\n                const val = node.value,\n                    rawVal = node.raw;\n\n                if (settings && typeof val === \"string\") {\n                    let isValid = (quoteOption === \"backtick\" && isAllowedAsNonBacktick(node)) ||\n                        isJSXLiteral(node) ||\n                        astUtils.isSurroundedBy(rawVal, settings.quote);\n\n                    if (!isValid && avoidEscape) {\n                        isValid = astUtils.isSurroundedBy(rawVal, settings.alternateQuote) && rawVal.includes(settings.quote);\n                    }\n\n                    if (!isValid) {\n                        context.report({\n                            node,\n                            messageId: \"wrongQuotes\",\n                            data: {\n                                description: settings.description\n                            },\n                            fix(fixer) {\n                                if (quoteOption === \"backtick\" && astUtils.hasOctalOrNonOctalDecimalEscapeSequence(rawVal)) {\n\n                                    /*\n                                     * An octal or non-octal decimal escape sequence in a template literal would\n                                     * produce syntax error, even in non-strict mode.\n                                     */\n                                    return null;\n                                }\n\n                                return fixer.replaceText(node, settings.convert(node.raw));\n                            }\n                        });\n                    }\n                }\n            },\n\n            TemplateLiteral(node) {\n\n                // Don't throw an error if backticks are expected or a template literal feature is in use.\n                if (\n                    allowTemplateLiterals ||\n                    quoteOption === \"backtick\" ||\n                    isUsingFeatureOfTemplateLiteral(node)\n                ) {\n                    return;\n                }\n\n                context.report({\n                    node,\n                    messageId: \"wrongQuotes\",\n                    data: {\n                        description: settings.description\n                    },\n                    fix(fixer) {\n                        if (isPartOfDirectivePrologue(node)) {\n\n                            /*\n                             * TemplateLiterals in a directive prologue aren't actually directives, but if they're\n                             * in the directive prologue, then fixing them might turn them into directives and change\n                             * the behavior of the code.\n                             */\n                            return null;\n                        }\n                        return fixer.replaceText(node, settings.convert(sourceCode.getText(node)));\n                    }\n                });\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}