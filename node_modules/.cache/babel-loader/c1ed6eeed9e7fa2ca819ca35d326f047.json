{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass TreeNode {\n  constructor(key, value) {\n    this.color = true;\n    this.key = undefined;\n    this.value = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.parent = undefined;\n    this.key = key;\n    this.value = value;\n  }\n  /**\n   * @description Get the pre node.\n   * @return TreeNode about the pre node.\n   */\n\n\n  pre() {\n    let preNode = this;\n\n    if (preNode.color === TreeNode.RED && preNode.parent.parent === preNode) {\n      preNode = preNode.right;\n    } else if (preNode.left) {\n      preNode = preNode.left;\n\n      while (preNode.right) {\n        preNode = preNode.right;\n      }\n    } else {\n      let pre = preNode.parent;\n\n      while (pre.left === preNode) {\n        preNode = pre;\n        pre = preNode.parent;\n      }\n\n      preNode = pre;\n    }\n\n    return preNode;\n  }\n  /**\n   * @description Get the next node.\n   * @return TreeNode about the next node.\n   */\n\n\n  next() {\n    let nextNode = this;\n\n    if (nextNode.right) {\n      nextNode = nextNode.right;\n\n      while (nextNode.left) {\n        nextNode = nextNode.left;\n      }\n    } else {\n      let pre = nextNode.parent;\n\n      while (pre.right === nextNode) {\n        nextNode = pre;\n        pre = nextNode.parent;\n      }\n\n      if (nextNode.right !== pre) {\n        nextNode = pre;\n      }\n    }\n\n    return nextNode;\n  }\n  /**\n   * @description Rotate left.\n   * @return TreeNode about moved to original position after rotation.\n   */\n\n\n  rotateLeft() {\n    const PP = this.parent;\n    const V = this.right;\n    const R = V.left;\n    if (PP.parent === this) PP.parent = V;else if (PP.left === this) PP.left = V;else PP.right = V;\n    V.parent = PP;\n    V.left = this;\n    this.parent = V;\n    this.right = R;\n    if (R) R.parent = this;\n    return V;\n  }\n  /**\n   * @description Rotate left.\n   * @return TreeNode about moved to original position after rotation.\n   */\n\n\n  rotateRight() {\n    const PP = this.parent;\n    const F = this.left;\n    const K = F.right;\n    if (PP.parent === this) PP.parent = F;else if (PP.left === this) PP.left = F;else PP.right = F;\n    F.parent = PP;\n    F.right = this;\n    this.parent = F;\n    this.left = K;\n    if (K) K.parent = this;\n    return F;\n  }\n  /**\n   * @description Remove this.\n   */\n\n\n  remove() {\n    const parent = this.parent;\n\n    if (this === parent.left) {\n      parent.left = undefined;\n    } else parent.right = undefined;\n  }\n\n}\n\nTreeNode.RED = true;\nTreeNode.BLACK = false;\nexports.default = TreeNode;","map":{"version":3,"names":["Object","defineProperty","exports","value","TreeNode","constructor","key","color","undefined","left","right","parent","pre","preNode","RED","next","nextNode","rotateLeft","PP","V","R","rotateRight","F","K","remove","BLACK","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/js-sdsl/dist/cjs/container/TreeContainer/Base/TreeNode.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass TreeNode {\n    constructor(key, value) {\n        this.color = true;\n        this.key = undefined;\n        this.value = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.parent = undefined;\n        this.key = key;\n        this.value = value;\n    }\n    /**\n     * @description Get the pre node.\n     * @return TreeNode about the pre node.\n     */\n    pre() {\n        let preNode = this;\n        if (preNode.color === TreeNode.RED &&\n            preNode.parent.parent === preNode) {\n            preNode = preNode.right;\n        }\n        else if (preNode.left) {\n            preNode = preNode.left;\n            while (preNode.right) {\n                preNode = preNode.right;\n            }\n        }\n        else {\n            let pre = preNode.parent;\n            while (pre.left === preNode) {\n                preNode = pre;\n                pre = preNode.parent;\n            }\n            preNode = pre;\n        }\n        return preNode;\n    }\n    /**\n     * @description Get the next node.\n     * @return TreeNode about the next node.\n     */\n    next() {\n        let nextNode = this;\n        if (nextNode.right) {\n            nextNode = nextNode.right;\n            while (nextNode.left) {\n                nextNode = nextNode.left;\n            }\n        }\n        else {\n            let pre = nextNode.parent;\n            while (pre.right === nextNode) {\n                nextNode = pre;\n                pre = nextNode.parent;\n            }\n            if (nextNode.right !== pre) {\n                nextNode = pre;\n            }\n        }\n        return nextNode;\n    }\n    /**\n     * @description Rotate left.\n     * @return TreeNode about moved to original position after rotation.\n     */\n    rotateLeft() {\n        const PP = this.parent;\n        const V = this.right;\n        const R = V.left;\n        if (PP.parent === this)\n            PP.parent = V;\n        else if (PP.left === this)\n            PP.left = V;\n        else\n            PP.right = V;\n        V.parent = PP;\n        V.left = this;\n        this.parent = V;\n        this.right = R;\n        if (R)\n            R.parent = this;\n        return V;\n    }\n    /**\n     * @description Rotate left.\n     * @return TreeNode about moved to original position after rotation.\n     */\n    rotateRight() {\n        const PP = this.parent;\n        const F = this.left;\n        const K = F.right;\n        if (PP.parent === this)\n            PP.parent = F;\n        else if (PP.left === this)\n            PP.left = F;\n        else\n            PP.right = F;\n        F.parent = PP;\n        F.right = this;\n        this.parent = F;\n        this.left = K;\n        if (K)\n            K.parent = this;\n        return F;\n    }\n    /**\n     * @description Remove this.\n     */\n    remove() {\n        const parent = this.parent;\n        if (this === parent.left) {\n            parent.left = undefined;\n        }\n        else\n            parent.right = undefined;\n    }\n}\nTreeNode.RED = true;\nTreeNode.BLACK = false;\nexports.default = TreeNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}