{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'no-extra-non-null-assertion',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallow extra non-null assertion',\n      recommended: 'error'\n    },\n    fixable: 'code',\n    schema: [],\n    messages: {\n      noExtraNonNullAssertion: 'Forbidden extra non-null assertion.'\n    }\n  },\n  defaultOptions: [],\n\n  create(context) {\n    function checkExtraNonNullAssertion(node) {\n      context.report({\n        node,\n        messageId: 'noExtraNonNullAssertion',\n\n        fix(fixer) {\n          return fixer.removeRange([node.range[1] - 1, node.range[1]]);\n        }\n\n      });\n    }\n\n    return {\n      'TSNonNullExpression > TSNonNullExpression': checkExtraNonNullAssertion,\n      'MemberExpression[optional = true] > TSNonNullExpression.object': checkExtraNonNullAssertion,\n      'CallExpression[optional = true] > TSNonNullExpression.callee': checkExtraNonNullAssertion\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAEAA,kBAAeC,IAAI,CAACC,UAAL,CAAgB;EAC7BC,IAAI,EAAE,6BADuB;EAE7BC,IAAI,EAAE;IACJC,IAAI,EAAE,SADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EAAE,mCADT;MAEJC,WAAW,EAAE;IAFT,CAFF;IAMJC,OAAO,EAAE,MANL;IAOJC,MAAM,EAAE,EAPJ;IAQJC,QAAQ,EAAE;MACRC,uBAAuB,EAAE;IADjB;EARN,CAFuB;EAc7BC,cAAc,EAAE,EAda;;EAe7BC,MAAM,CAACC,OAAD,EAAQ;IACZ,SAASC,0BAAT,CACEC,IADF,EACoC;MAElCF,OAAO,CAACG,MAAR,CAAe;QACbD,IADa;QAEbE,SAAS,EAAE,yBAFE;;QAGbC,GAAG,CAACC,KAAD,EAAM;UACP,OAAOA,KAAK,CAACC,WAAN,CAAkB,CAACL,IAAI,CAACM,KAAL,CAAW,CAAX,IAAgB,CAAjB,EAAoBN,IAAI,CAACM,KAAL,CAAW,CAAX,CAApB,CAAlB,CAAP;QACD;;MALY,CAAf;IAOD;;IAED,OAAO;MACL,6CAA6CP,0BADxC;MAEL,kEACEA,0BAHG;MAIL,gEACEA;IALG,CAAP;EAOD;;AAnC4B,CAAhB,CAAf","names":["exports","util","createRule","name","meta","type","docs","description","recommended","fixable","schema","messages","noExtraNonNullAssertion","defaultOptions","create","context","checkExtraNonNullAssertion","node","report","messageId","fix","fixer","removeRange","range"],"sources":["../../src/rules/no-extra-non-null-assertion.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}