{"ast":null,"code":"/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\nexport default trimResultTransformer;","map":{"version":3,"mappings":"AAAA;;;;;AAKA,IAAMA,wBAAwB,SAAxBA,qBAAwB;EAAA,IAACC,IAAD,uEAAQ,EAAR;EAAA,OAAgB;IAC5CC,WAD4C,uBAChCC,SADgC,EACrB;MACrB,IAAIF,SAAS,EAAb,EAAiB;QACf,OAAOE,UAAUC,IAAVD,EAAP;MACD;;MAEDF,OAAOA,KAAKI,WAALJ,EAAPA;;MAEA,IAAIA,SAAS,OAATA,IAAoBA,SAAS,MAAjC,EAAyC;QACvC,OAAOE,UAAUG,OAAVH,CAAkB,MAAlBA,EAA0B,EAA1BA,CAAP;MACD;;MAED,IAAIF,SAAS,KAATA,IAAkBA,SAAS,OAA/B,EAAwC;QACtC,OAAOE,UAAUG,OAAVH,CAAkB,MAAlBA,EAA0B,EAA1BA,CAAP;MACD;;MAED,MAAM,IAAII,KAAJ,0BAAiCN,IAAjC,CAAN;IACD;EAjB2C,CAAhB;AAA9B;;AAoBA,eAAeD,qBAAf","names":["trimResultTransformer","side","onEndResult","endResult","trim","toLowerCase","replace","Error"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\common-tags\\src\\trimResultTransformer\\trimResultTransformer.js"],"sourcesContent":["/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nconst trimResultTransformer = (side = '') => ({\n  onEndResult(endResult) {\n    if (side === '') {\n      return endResult.trim();\n    }\n\n    side = side.toLowerCase();\n\n    if (side === 'start' || side === 'left') {\n      return endResult.replace(/^\\s*/, '');\n    }\n\n    if (side === 'end' || side === 'right') {\n      return endResult.replace(/\\s*$/, '');\n    }\n\n    throw new Error(`Side not supported: ${side}`);\n  },\n});\n\nexport default trimResultTransformer;\n"]},"metadata":{},"sourceType":"module"}