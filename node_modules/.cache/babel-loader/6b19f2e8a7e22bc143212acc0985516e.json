{"ast":null,"code":"/**\n * @fileoverview Prevent JSX prop spreading\n * @author Ashish Gambhir\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\n\nconst OPTIONS = {\n  ignore: 'ignore',\n  enforce: 'enforce'\n};\nconst DEFAULTS = {\n  html: OPTIONS.enforce,\n  custom: OPTIONS.enforce,\n  explicitSpread: OPTIONS.enforce,\n  exceptions: []\n};\n\nconst isException = (tag, allExceptions) => allExceptions.indexOf(tag) !== -1;\n\nconst isProperty = property => property.type === 'Property';\n\nconst getTagNameFromMemberExpression = node => {\n  if (node.property.parent) {\n    return `${node.property.parent.object.name}.${node.property.name}`;\n  } // for eslint 3\n\n\n  return `${node.object.name}.${node.property.name}`;\n}; // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  noSpreading: 'Prop spreading is forbidden'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow JSX prop spreading',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('jsx-props-no-spreading')\n    },\n    messages,\n    schema: [{\n      allOf: [{\n        type: 'object',\n        properties: {\n          html: {\n            enum: [OPTIONS.enforce, OPTIONS.ignore]\n          },\n          custom: {\n            enum: [OPTIONS.enforce, OPTIONS.ignore]\n          },\n          exceptions: {\n            type: 'array',\n            items: {\n              type: 'string',\n              uniqueItems: true\n            }\n          }\n        }\n      }, {\n        not: {\n          type: 'object',\n          required: ['html', 'custom'],\n          properties: {\n            html: {\n              enum: [OPTIONS.ignore]\n            },\n            custom: {\n              enum: [OPTIONS.ignore]\n            },\n            exceptions: {\n              type: 'array',\n              minItems: 0,\n              maxItems: 0\n            }\n          }\n        }\n      }]\n    }]\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const ignoreHtmlTags = (configuration.html || DEFAULTS.html) === OPTIONS.ignore;\n    const ignoreCustomTags = (configuration.custom || DEFAULTS.custom) === OPTIONS.ignore;\n    const ignoreExplicitSpread = (configuration.explicitSpread || DEFAULTS.explicitSpread) === OPTIONS.ignore;\n    const exceptions = configuration.exceptions || DEFAULTS.exceptions;\n    return {\n      JSXSpreadAttribute(node) {\n        const jsxOpeningElement = node.parent.name;\n        const type = jsxOpeningElement.type;\n        let tagName;\n\n        if (type === 'JSXIdentifier') {\n          tagName = jsxOpeningElement.name;\n        } else if (type === 'JSXMemberExpression') {\n          tagName = getTagNameFromMemberExpression(jsxOpeningElement);\n        } else {\n          tagName = undefined;\n        }\n\n        const isHTMLTag = tagName && tagName[0] !== tagName[0].toUpperCase();\n        const isCustomTag = tagName && (tagName[0] === tagName[0].toUpperCase() || tagName.includes('.'));\n\n        if (isHTMLTag && (ignoreHtmlTags && !isException(tagName, exceptions) || !ignoreHtmlTags && isException(tagName, exceptions))) {\n          return;\n        }\n\n        if (isCustomTag && (ignoreCustomTags && !isException(tagName, exceptions) || !ignoreCustomTags && isException(tagName, exceptions))) {\n          return;\n        }\n\n        if (ignoreExplicitSpread && node.argument.type === 'ObjectExpression' && node.argument.properties.every(isProperty)) {\n          return;\n        }\n\n        report(context, messages.noSpreading, 'noSpreading', {\n          node\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","report","OPTIONS","ignore","enforce","DEFAULTS","html","custom","explicitSpread","exceptions","isException","tag","allExceptions","indexOf","isProperty","property","type","getTagNameFromMemberExpression","node","parent","object","name","messages","noSpreading","module","exports","meta","docs","description","category","recommended","url","schema","allOf","properties","enum","items","uniqueItems","not","required","minItems","maxItems","create","context","configuration","options","ignoreHtmlTags","ignoreCustomTags","ignoreExplicitSpread","JSXSpreadAttribute","jsxOpeningElement","tagName","undefined","isHTMLTag","toUpperCase","isCustomTag","includes","argument","every"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-props-no-spreading.js"],"sourcesContent":["/**\n * @fileoverview Prevent JSX prop spreading\n * @author Ashish Gambhir\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\nconst OPTIONS = { ignore: 'ignore', enforce: 'enforce' };\nconst DEFAULTS = {\n  html: OPTIONS.enforce,\n  custom: OPTIONS.enforce,\n  explicitSpread: OPTIONS.enforce,\n  exceptions: [],\n};\n\nconst isException = (tag, allExceptions) => allExceptions.indexOf(tag) !== -1;\nconst isProperty = (property) => property.type === 'Property';\nconst getTagNameFromMemberExpression = (node) => {\n  if (node.property.parent) {\n    return `${node.property.parent.object.name}.${node.property.name}`;\n  }\n  // for eslint 3\n  return `${node.object.name}.${node.property.name}`;\n};\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noSpreading: 'Prop spreading is forbidden',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow JSX prop spreading',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('jsx-props-no-spreading'),\n    },\n\n    messages,\n\n    schema: [{\n      allOf: [{\n        type: 'object',\n        properties: {\n          html: {\n            enum: [OPTIONS.enforce, OPTIONS.ignore],\n          },\n          custom: {\n            enum: [OPTIONS.enforce, OPTIONS.ignore],\n          },\n          exceptions: {\n            type: 'array',\n            items: {\n              type: 'string',\n              uniqueItems: true,\n            },\n          },\n        },\n      }, {\n        not: {\n          type: 'object',\n          required: ['html', 'custom'],\n          properties: {\n            html: {\n              enum: [OPTIONS.ignore],\n            },\n            custom: {\n              enum: [OPTIONS.ignore],\n            },\n            exceptions: {\n              type: 'array',\n              minItems: 0,\n              maxItems: 0,\n            },\n          },\n        },\n      }],\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const ignoreHtmlTags = (configuration.html || DEFAULTS.html) === OPTIONS.ignore;\n    const ignoreCustomTags = (configuration.custom || DEFAULTS.custom) === OPTIONS.ignore;\n    const ignoreExplicitSpread = (configuration.explicitSpread || DEFAULTS.explicitSpread) === OPTIONS.ignore;\n    const exceptions = configuration.exceptions || DEFAULTS.exceptions;\n    return {\n      JSXSpreadAttribute(node) {\n        const jsxOpeningElement = node.parent.name;\n        const type = jsxOpeningElement.type;\n\n        let tagName;\n        if (type === 'JSXIdentifier') {\n          tagName = jsxOpeningElement.name;\n        } else if (type === 'JSXMemberExpression') {\n          tagName = getTagNameFromMemberExpression(jsxOpeningElement);\n        } else {\n          tagName = undefined;\n        }\n\n        const isHTMLTag = tagName && tagName[0] !== tagName[0].toUpperCase();\n        const isCustomTag = tagName && (tagName[0] === tagName[0].toUpperCase() || tagName.includes('.'));\n        if (\n          isHTMLTag\n          && ((ignoreHtmlTags && !isException(tagName, exceptions))\n          || (!ignoreHtmlTags && isException(tagName, exceptions)))\n        ) {\n          return;\n        }\n        if (\n          isCustomTag\n          && ((ignoreCustomTags && !isException(tagName, exceptions))\n          || (!ignoreCustomTags && isException(tagName, exceptions)))\n        ) {\n          return;\n        }\n        if (\n          ignoreExplicitSpread\n          && node.argument.type === 'ObjectExpression'\n          && node.argument.properties.every(isProperty)\n        ) {\n          return;\n        }\n        report(context, messages.noSpreading, 'noSpreading', {\n          node,\n        });\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}