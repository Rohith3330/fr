{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { serialization, unstack, stack, tensor, tidy, range, image } from '@tensorflow/tfjs-core';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../../utils/types_utils';\nimport { Layer } from '../../engine/topology';\nimport * as K from '../../backend/tfjs_backend';\nvar resizeBilinear = image.resizeBilinear,\n  cropAndResize = image.cropAndResize;\nexport var CenterCrop = /*#__PURE__*/function (_Layer) {\n  _inherits(CenterCrop, _Layer);\n  function CenterCrop(args) {\n    var _this;\n    _classCallCheck(this, CenterCrop);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CenterCrop).call(this, args));\n    _this.height = args.height;\n    _this.width = args.width;\n    return _this;\n  }\n  _createClass(CenterCrop, [{\n    key: \"centerCrop\",\n    value: function centerCrop(inputs, hBuffer, wBuffer, height, width, inputHeight, inputWidth, dtype) {\n      return tidy(function () {\n        var input;\n        var isRank3 = false;\n        var top = hBuffer / inputHeight;\n        var left = wBuffer / inputWidth;\n        var bottom = (height + hBuffer) / inputHeight;\n        var right = (width + wBuffer) / inputWidth;\n        var bound = [top, left, bottom, right];\n        var boxesArr = [];\n        if (inputs.rank === 3) {\n          isRank3 = true;\n          input = stack([inputs]);\n        } else {\n          input = inputs;\n        }\n        for (var i = 0; i < input.shape[0]; i++) {\n          boxesArr.push(bound);\n        }\n        var boxes = tensor(boxesArr, [boxesArr.length, 4]);\n        var boxInd = range(0, boxesArr.length, 1, 'int32');\n        var cropSize = [height, width];\n        var cropped = cropAndResize(input, boxes, boxInd, cropSize, 'nearest');\n        if (isRank3) {\n          return K.cast(getExactlyOneTensor(unstack(cropped)), dtype);\n        }\n        return K.cast(cropped, dtype);\n      });\n    }\n  }, {\n    key: \"upsize\",\n    value: function upsize(inputs, height, width, dtype) {\n      return tidy(function () {\n        var outputs = resizeBilinear(inputs, [height, width]);\n        return K.cast(outputs, dtype);\n      });\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n      return tidy(function () {\n        var rankedInputs = getExactlyOneTensor(inputs);\n        var dtype = rankedInputs.dtype;\n        var inputShape = rankedInputs.shape;\n        var inputHeight = inputShape[inputShape.length - 3];\n        var inputWidth = inputShape[inputShape.length - 2];\n        var hBuffer = 0;\n        if (inputHeight !== _this2.height) {\n          hBuffer = Math.floor((inputHeight - _this2.height) / 2);\n        }\n        var wBuffer = 0;\n        if (inputWidth !== _this2.width) {\n          wBuffer = Math.floor((inputWidth - _this2.width) / 2);\n          if (wBuffer === 0) {\n            wBuffer = 1;\n          }\n        }\n        if (hBuffer >= 0 && wBuffer >= 0) {\n          return _this2.centerCrop(rankedInputs, hBuffer, wBuffer, _this2.height, _this2.width, inputHeight, inputWidth, dtype);\n        } else {\n          return _this2.upsize(inputs, _this2.height, _this2.width, dtype);\n        }\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        'height': this.height,\n        'width': this.width\n      };\n      var baseConfig = _get(_getPrototypeOf(CenterCrop.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var hAxis = inputShape.length - 3;\n      var wAxis = inputShape.length - 2;\n      inputShape[hAxis] = this.height;\n      inputShape[wAxis] = this.width;\n      return inputShape;\n    }\n  }]);\n  return CenterCrop;\n}(Layer);\n/** @nocollapse */\nCenterCrop.className = 'CenterCrop';\nserialization.registerClass(CenterCrop);","map":null,"metadata":{},"sourceType":"module"}