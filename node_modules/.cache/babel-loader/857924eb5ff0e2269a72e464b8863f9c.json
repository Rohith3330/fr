{"ast":null,"code":"'use strict';\n\nvar format = require('util').format;\n\nvar ERR_CODE = 'ARGError';\n/*:nodoc:*\n * argumentError(argument, message) -> TypeError\n * - argument (Object): action with broken argument\n * - message (String): error message\n *\n * Error format helper. An error from creating or using an argument\n * (optional or positional). The string value of this exception\n * is the message, augmented with information\n * about the argument that caused it.\n *\n * #####Example\n *\n *      var argumentErrorHelper = require('./argument/error');\n *      if (conflictOptionals.length > 0) {\n *        throw argumentErrorHelper(\n *          action,\n *          format('Conflicting option string(s): %s', conflictOptionals.join(', '))\n *        );\n *      }\n *\n **/\n\nmodule.exports = function (argument, message) {\n  var argumentName = null;\n  var errMessage;\n  var err;\n\n  if (argument.getName) {\n    argumentName = argument.getName();\n  } else {\n    argumentName = '' + argument;\n  }\n\n  if (!argumentName) {\n    errMessage = message;\n  } else {\n    errMessage = format('argument \"%s\": %s', argumentName, message);\n  }\n\n  err = new TypeError(errMessage);\n  err.code = ERR_CODE;\n  return err;\n};","map":{"version":3,"names":["format","require","ERR_CODE","module","exports","argument","message","argumentName","errMessage","err","getName","TypeError","code"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/argparse/lib/argument/error.js"],"sourcesContent":["'use strict';\n\n\nvar format  = require('util').format;\n\n\nvar ERR_CODE = 'ARGError';\n\n/*:nodoc:*\n * argumentError(argument, message) -> TypeError\n * - argument (Object): action with broken argument\n * - message (String): error message\n *\n * Error format helper. An error from creating or using an argument\n * (optional or positional). The string value of this exception\n * is the message, augmented with information\n * about the argument that caused it.\n *\n * #####Example\n *\n *      var argumentErrorHelper = require('./argument/error');\n *      if (conflictOptionals.length > 0) {\n *        throw argumentErrorHelper(\n *          action,\n *          format('Conflicting option string(s): %s', conflictOptionals.join(', '))\n *        );\n *      }\n *\n **/\nmodule.exports = function (argument, message) {\n  var argumentName = null;\n  var errMessage;\n  var err;\n\n  if (argument.getName) {\n    argumentName = argument.getName();\n  } else {\n    argumentName = '' + argument;\n  }\n\n  if (!argumentName) {\n    errMessage = message;\n  } else {\n    errMessage = format('argument \"%s\": %s', argumentName, message);\n  }\n\n  err = new TypeError(errMessage);\n  err.code = ERR_CODE;\n  return err;\n};\n"],"mappings":"AAAA;;AAGA,IAAIA,MAAM,GAAIC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAA9B;;AAGA,IAAIE,QAAQ,GAAG,UAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,QAAV,EAAoBC,OAApB,EAA6B;EAC5C,IAAIC,YAAY,GAAG,IAAnB;EACA,IAAIC,UAAJ;EACA,IAAIC,GAAJ;;EAEA,IAAIJ,QAAQ,CAACK,OAAb,EAAsB;IACpBH,YAAY,GAAGF,QAAQ,CAACK,OAAT,EAAf;EACD,CAFD,MAEO;IACLH,YAAY,GAAG,KAAKF,QAApB;EACD;;EAED,IAAI,CAACE,YAAL,EAAmB;IACjBC,UAAU,GAAGF,OAAb;EACD,CAFD,MAEO;IACLE,UAAU,GAAGR,MAAM,CAAC,mBAAD,EAAsBO,YAAtB,EAAoCD,OAApC,CAAnB;EACD;;EAEDG,GAAG,GAAG,IAAIE,SAAJ,CAAcH,UAAd,CAAN;EACAC,GAAG,CAACG,IAAJ,GAAWV,QAAX;EACA,OAAOO,GAAP;AACD,CApBD"},"metadata":{},"sourceType":"script"}