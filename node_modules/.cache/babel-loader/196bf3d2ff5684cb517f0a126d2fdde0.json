{"ast":null,"code":"/**\n * @fileoverview Prevent definitions of unused prop types\n * @author Evgueni Naverniouk\n */\n'use strict'; // As for exceptions for props.children or props.className (and alike) look at\n// https://github.com/jsx-eslint/eslint-plugin-react/issues/7\n\nconst Components = require('../util/Components');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  unusedPropType: '\\'{{name}}\\' PropType is defined but prop is never used'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow definitions of unused propTypes',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-unused-prop-types')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        ignore: {\n          type: 'array',\n          items: {\n            type: 'string'\n          },\n          uniqueItems: true\n        },\n        customValidators: {\n          type: 'array',\n          items: {\n            type: 'string'\n          }\n        },\n        skipShapeProps: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  create: Components.detect((context, components) => {\n    const defaults = {\n      skipShapeProps: true,\n      customValidators: [],\n      ignore: []\n    };\n    const configuration = Object.assign({}, defaults, context.options[0] || {});\n    /**\n     * Checks if the prop is ignored\n     * @param {String} name Name of the prop to check.\n     * @returns {Boolean} True if the prop is ignored, false if not.\n     */\n\n    function isIgnored(name) {\n      return configuration.ignore.indexOf(name) !== -1;\n    }\n    /**\n     * Checks if the component must be validated\n     * @param {Object} component The component to process\n     * @returns {Boolean} True if the component must be validated, false if not.\n     */\n\n\n    function mustBeValidated(component) {\n      return Boolean(component && !component.ignoreUnusedPropTypesValidation);\n    }\n    /**\n     * Checks if a prop is used\n     * @param {ASTNode} node The AST node being checked.\n     * @param {Object} prop Declared prop object\n     * @returns {Boolean} True if the prop is used, false if not.\n     */\n\n\n    function isPropUsed(node, prop) {\n      const usedPropTypes = node.usedPropTypes || [];\n\n      for (let i = 0, l = usedPropTypes.length; i < l; i++) {\n        const usedProp = usedPropTypes[i];\n\n        if (prop.type === 'shape' || prop.type === 'exact' || prop.name === '__ANY_KEY__' || usedProp.name === prop.name) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Used to recursively loop through each declared prop type\n     * @param {Object} component The component to process\n     * @param {ASTNode[]|true} props List of props to validate\n     */\n\n\n    function reportUnusedPropType(component, props) {\n      // Skip props that check instances\n      if (props === true) {\n        return;\n      }\n\n      Object.keys(props || {}).forEach(key => {\n        const prop = props[key]; // Skip props that check instances\n\n        if (prop === true) {\n          return;\n        }\n\n        if ((prop.type === 'shape' || prop.type === 'exact') && configuration.skipShapeProps) {\n          return;\n        }\n\n        if (prop.node && prop.node.typeAnnotation && prop.node.typeAnnotation.typeAnnotation && prop.node.typeAnnotation.typeAnnotation.type === 'TSNeverKeyword') {\n          return;\n        }\n\n        if (prop.node && !isIgnored(prop.fullName) && !isPropUsed(component, prop)) {\n          report(context, messages.unusedPropType, 'unusedPropType', {\n            node: prop.node.key || prop.node,\n            data: {\n              name: prop.fullName\n            }\n          });\n        }\n\n        if (prop.children) {\n          reportUnusedPropType(component, prop.children);\n        }\n      });\n    }\n    /**\n     * Reports unused proptypes for a given component\n     * @param {Object} component The component to process\n     */\n\n\n    function reportUnusedPropTypes(component) {\n      reportUnusedPropType(component, component.declaredPropTypes);\n    } // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n\n    return {\n      'Program:exit'() {\n        const list = components.list(); // Report undeclared proptypes for all classes\n\n        Object.keys(list).filter(component => mustBeValidated(list[component])).forEach(component => {\n          if (!mustBeValidated(list[component])) {\n            return;\n          }\n\n          reportUnusedPropTypes(list[component]);\n        });\n      }\n\n    };\n  })\n};","map":{"version":3,"names":["Components","require","docsUrl","report","messages","unusedPropType","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","ignore","items","uniqueItems","customValidators","skipShapeProps","additionalProperties","create","detect","context","components","defaults","configuration","Object","assign","options","isIgnored","name","indexOf","mustBeValidated","component","Boolean","ignoreUnusedPropTypesValidation","isPropUsed","node","prop","usedPropTypes","i","l","length","usedProp","reportUnusedPropType","props","keys","forEach","key","typeAnnotation","fullName","data","children","reportUnusedPropTypes","declaredPropTypes","list","filter"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js"],"sourcesContent":["/**\n * @fileoverview Prevent definitions of unused prop types\n * @author Evgueni Naverniouk\n */\n\n'use strict';\n\n// As for exceptions for props.children or props.className (and alike) look at\n// https://github.com/jsx-eslint/eslint-plugin-react/issues/7\n\nconst Components = require('../util/Components');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  unusedPropType: '\\'{{name}}\\' PropType is defined but prop is never used',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow definitions of unused propTypes',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-unused-prop-types'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        ignore: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n          uniqueItems: true,\n        },\n        customValidators: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        skipShapeProps: {\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create: Components.detect((context, components) => {\n    const defaults = { skipShapeProps: true, customValidators: [], ignore: [] };\n    const configuration = Object.assign({}, defaults, context.options[0] || {});\n\n    /**\n     * Checks if the prop is ignored\n     * @param {String} name Name of the prop to check.\n     * @returns {Boolean} True if the prop is ignored, false if not.\n     */\n    function isIgnored(name) {\n      return configuration.ignore.indexOf(name) !== -1;\n    }\n\n    /**\n     * Checks if the component must be validated\n     * @param {Object} component The component to process\n     * @returns {Boolean} True if the component must be validated, false if not.\n     */\n    function mustBeValidated(component) {\n      return Boolean(\n        component\n        && !component.ignoreUnusedPropTypesValidation\n      );\n    }\n\n    /**\n     * Checks if a prop is used\n     * @param {ASTNode} node The AST node being checked.\n     * @param {Object} prop Declared prop object\n     * @returns {Boolean} True if the prop is used, false if not.\n     */\n    function isPropUsed(node, prop) {\n      const usedPropTypes = node.usedPropTypes || [];\n      for (let i = 0, l = usedPropTypes.length; i < l; i++) {\n        const usedProp = usedPropTypes[i];\n        if (\n          prop.type === 'shape'\n          || prop.type === 'exact'\n          || prop.name === '__ANY_KEY__'\n          || usedProp.name === prop.name\n        ) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Used to recursively loop through each declared prop type\n     * @param {Object} component The component to process\n     * @param {ASTNode[]|true} props List of props to validate\n     */\n    function reportUnusedPropType(component, props) {\n      // Skip props that check instances\n      if (props === true) {\n        return;\n      }\n\n      Object.keys(props || {}).forEach((key) => {\n        const prop = props[key];\n        // Skip props that check instances\n        if (prop === true) {\n          return;\n        }\n\n        if ((prop.type === 'shape' || prop.type === 'exact') && configuration.skipShapeProps) {\n          return;\n        }\n\n        if (prop.node && prop.node.typeAnnotation && prop.node.typeAnnotation.typeAnnotation\n          && prop.node.typeAnnotation.typeAnnotation.type === 'TSNeverKeyword') {\n          return;\n        }\n\n        if (prop.node && !isIgnored(prop.fullName) && !isPropUsed(component, prop)) {\n          report(context, messages.unusedPropType, 'unusedPropType', {\n            node: prop.node.key || prop.node,\n            data: {\n              name: prop.fullName,\n            },\n          });\n        }\n\n        if (prop.children) {\n          reportUnusedPropType(component, prop.children);\n        }\n      });\n    }\n\n    /**\n     * Reports unused proptypes for a given component\n     * @param {Object} component The component to process\n     */\n    function reportUnusedPropTypes(component) {\n      reportUnusedPropType(component, component.declaredPropTypes);\n    }\n\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      'Program:exit'() {\n        const list = components.list();\n        // Report undeclared proptypes for all classes\n        Object.keys(list).filter((component) => mustBeValidated(list[component])).forEach((component) => {\n          if (!mustBeValidated(list[component])) {\n            return;\n          }\n          reportUnusedPropTypes(list[component]);\n        });\n      },\n    };\n  }),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}