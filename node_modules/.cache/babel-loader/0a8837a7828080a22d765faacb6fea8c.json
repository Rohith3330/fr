{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar helperPluginUtils = require('@babel/helper-plugin-utils');\n\nvar transformTypeScript = require('@babel/plugin-transform-typescript');\n\nvar helperValidatorOption = require('@babel/helper-validator-option');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar transformTypeScript__default = /*#__PURE__*/_interopDefaultLegacy(transformTypeScript);\n\nconst v = new helperValidatorOption.OptionValidator(\"@babel/preset-typescript\");\n\nfunction normalizeOptions() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    allowNamespaces = true,\n    jsxPragma,\n    onlyRemoveTypeImports\n  } = options;\n  const TopLevelOptions = {\n    allExtensions: \"allExtensions\",\n    allowNamespaces: \"allowNamespaces\",\n    disallowAmbiguousJSXLike: \"disallowAmbiguousJSXLike\",\n    isTSX: \"isTSX\",\n    jsxPragma: \"jsxPragma\",\n    jsxPragmaFrag: \"jsxPragmaFrag\",\n    onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    optimizeConstEnums: \"optimizeConstEnums\"\n  };\n  const jsxPragmaFrag = v.validateStringOption(TopLevelOptions.jsxPragmaFrag, options.jsxPragmaFrag, \"React.Fragment\");\n  const allExtensions = v.validateBooleanOption(TopLevelOptions.allExtensions, options.allExtensions, false);\n  const isTSX = v.validateBooleanOption(TopLevelOptions.isTSX, options.isTSX, false);\n\n  if (isTSX) {\n    v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n  }\n\n  const disallowAmbiguousJSXLike = v.validateBooleanOption(TopLevelOptions.disallowAmbiguousJSXLike, options.disallowAmbiguousJSXLike, false);\n\n  if (disallowAmbiguousJSXLike) {\n    v.invariant(allExtensions, \"disallowAmbiguousJSXLike:true requires allExtensions:true\");\n  }\n\n  const optimizeConstEnums = v.validateBooleanOption(TopLevelOptions.optimizeConstEnums, options.optimizeConstEnums, false);\n  return {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums\n  };\n}\n\nvar index = helperPluginUtils.declarePreset((api, opts) => {\n  api.assertVersion(7);\n  const {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums\n  } = normalizeOptions(opts);\n\n  const pluginOptions = (isTSX, disallowAmbiguousJSXLike) => ({\n    allowDeclareFields: opts.allowDeclareFields,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums\n  });\n\n  return {\n    overrides: allExtensions ? [{\n      plugins: [[transformTypeScript__default[\"default\"], pluginOptions(isTSX, disallowAmbiguousJSXLike)]]\n    }] : [{\n      test: /\\.ts$/,\n      plugins: [[transformTypeScript__default[\"default\"], pluginOptions(false, false)]]\n    }, {\n      test: /\\.mts$/,\n      sourceType: \"module\",\n      plugins: [[transformTypeScript__default[\"default\"], pluginOptions(false, true)]]\n    }, {\n      test: /\\.cts$/,\n      sourceType: \"script\",\n      plugins: [[transformTypeScript__default[\"default\"], pluginOptions(false, true)]]\n    }, {\n      test: /\\.tsx$/,\n      plugins: [[transformTypeScript__default[\"default\"], pluginOptions(true, false)]]\n    }]\n  };\n});\nexports[\"default\"] = index;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AACA,MAAMA,CAAC,GAAG,IAAIC,qCAAJ,CAAoB,0BAApB,CAAV;;AAce,SAASC,gBAAT,GAAiD;EAAA,IAAvBC,OAAuB,uEAAJ,EAAI;EAC9D,IAAI;IAAEC,eAAe,GAAG,IAApB;IAA0BC,SAA1B;IAAqCC;EAArC,IAA+DH,OAAnE;EAEA,MAAMI,eAAe,GAAG;IACtBC,aAAa,EAAE,eADO;IAEtBJ,eAAe,EAAE,iBAFK;IAGtBK,wBAAwB,EAAE,0BAHJ;IAItBC,KAAK,EAAE,OAJe;IAKtBL,SAAS,EAAE,WALW;IAMtBM,aAAa,EAAE,eANO;IAOtBL,qBAAqB,EAAE,uBAPD;IAQtBM,kBAAkB,EAAE;EARE,CAAxB;EA8BA,MAAMD,aAAa,GAAGX,CAAC,CAACa,oBAAFb,CACpBO,eAAe,CAACI,aADIX,EAEpBG,OAAO,CAACQ,aAFYX,EAGpB,gBAHoBA,CAAtB;EAMA,MAAMQ,aAAa,GAAGR,CAAC,CAACc,qBAAFd,CACpBO,eAAe,CAACC,aADIR,EAEpBG,OAAO,CAACK,aAFYR,EAGpB,KAHoBA,CAAtB;EAMA,MAAMU,KAAK,GAAGV,CAAC,CAACc,qBAAFd,CACZO,eAAe,CAACG,KADJV,EAEZG,OAAO,CAACO,KAFIV,EAGZ,KAHYA,CAAd;;EAKA,IAAIU,KAAJ,EAAW;IACTV,CAAC,CAACe,SAAFf,CAAYQ,aAAZR,EAA2B,wCAA3BA;EACD;;EAED,MAAMS,wBAAwB,GAAGT,CAAC,CAACc,qBAAFd,CAC/BO,eAAe,CAACE,wBADeT,EAE/BG,OAAO,CAACM,wBAFuBT,EAG/B,KAH+BA,CAAjC;;EAKA,IAAIS,wBAAJ,EAA8B;IAC5BT,CAAC,CAACe,SAAFf,CACEQ,aADFR,EAEE,2DAFFA;EAID;;EAED,MAAMY,kBAAkB,GAAGZ,CAAC,CAACc,qBAAFd,CACzBO,eAAe,CAACK,kBADSZ,EAEzBG,OAAO,CAACS,kBAFiBZ,EAGzB,KAHyBA,CAA3B;EAMA,OAAO;IACLQ,aADK;IAELJ,eAFK;IAGLK,wBAHK;IAILC,KAJK;IAKLL,SALK;IAMLM,aANK;IAOLL,qBAPK;IAQLM;EARK,CAAP;AAUD;;AC5FD,YAAeI,gCAAc,CAACC,GAAD,EAAMC,IAAN,KAAwB;EACnDD,GAAG,CAACE,aAAJF,CAAkB,CAAlBA;EAEA,MAAM;IACJT,aADI;IAEJJ,eAFI;IAGJK,wBAHI;IAIJC,KAJI;IAKJL,SALI;IAMJM,aANI;IAOJL,qBAPI;IAQJM;EARI,IASFV,gBAAgB,CAACgB,IAAD,CATpB;;EAWA,MAAME,aAAa,GAUf,CAACV,KAAD,EAAiBD,wBAAjB,MAAwD;IACtDY,kBAAkB,EAAEH,IAAI,CAACG,kBAD6B;IAEtDjB,eAFsD;IAGtDK,wBAHsD;IAItDC,KAJsD;IAKtDL,SALsD;IAMtDM,aANsD;IAOtDL,qBAPsD;IAQtDM;EARsD,CAAxD,CAVJ;;EAqBA,OAAO;IACLU,SAAS,EAAEd,aAAa,GACpB,CACE;MACEe,OAAO,EAAE,CACP,CACEC,uCADF,EAEEJ,aAAa,CAACV,KAAD,EAAQD,wBAAR,CAFf,CADO;IADX,CADF,CADoB,GAapB,CACE;MACEgB,IAAI,EAAE,OADR;MAEEF,OAAO,EAAE,CAAC,CAACC,uCAAD,EAAsBJ,aAAa,CAAC,KAAD,EAAQ,KAAR,CAAnC,CAAD;IAFX,CADF,EAKE;MACEK,IAAI,EAAE,QADR;MAEEC,UAAU,EAAE,QAFd;MAGEH,OAAO,EAAE,CAAC,CAACC,uCAAD,EAAsBJ,aAAa,CAAC,KAAD,EAAQ,IAAR,CAAnC,CAAD;IAHX,CALF,EAUE;MACEK,IAAI,EAAE,QADR;MAEEC,UAAU,EAAE,QAFd;MAGEH,OAAO,EAAE,CAAC,CAACC,uCAAD,EAAsBJ,aAAa,CAAC,KAAD,EAAQ,IAAR,CAAnC,CAAD;IAHX,CAVF,EAeE;MACEK,IAAI,EAAE,QADR;MAIEF,OAAO,EAAE,CAAC,CAACC,uCAAD,EAAsBJ,aAAa,CAAC,IAAD,EAAO,KAAP,CAAnC,CAAD;IAJX,CAfF;EAdC,CAAP;AAnC0B,CAAbJ,CAAf","names":["v","OptionValidator","normalizeOptions","options","allowNamespaces","jsxPragma","onlyRemoveTypeImports","TopLevelOptions","allExtensions","disallowAmbiguousJSXLike","isTSX","jsxPragmaFrag","optimizeConstEnums","validateStringOption","validateBooleanOption","invariant","declarePreset","api","opts","assertVersion","pluginOptions","allowDeclareFields","overrides","plugins","transformTypeScript","test","sourceType"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\preset-typescript\\src\\normalize-options.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\preset-typescript\\src\\index.ts"],"sourcesContent":["import { OptionValidator } from \"@babel/helper-validator-option\";\nconst v = new OptionValidator(\"@babel/preset-typescript\");\n\nexport interface Options {\n  allExtensions?: boolean;\n  allowDeclareFields?: boolean;\n  allowNamespaces?: boolean;\n  disallowAmbiguousJSXLike?: boolean;\n  isTSX?: boolean;\n  jsxPragma?: string;\n  jsxPragmaFrag?: string;\n  onlyRemoveTypeImports?: boolean;\n  optimizeConstEnums?: boolean;\n}\n\nexport default function normalizeOptions(options: Options = {}) {\n  let { allowNamespaces = true, jsxPragma, onlyRemoveTypeImports } = options;\n\n  const TopLevelOptions = {\n    allExtensions: \"allExtensions\",\n    allowNamespaces: \"allowNamespaces\",\n    disallowAmbiguousJSXLike: \"disallowAmbiguousJSXLike\",\n    isTSX: \"isTSX\",\n    jsxPragma: \"jsxPragma\",\n    jsxPragmaFrag: \"jsxPragmaFrag\",\n    onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    optimizeConstEnums: \"optimizeConstEnums\",\n  };\n\n  if (process.env.BABEL_8_BREAKING) {\n    v.validateTopLevelOptions(options, TopLevelOptions);\n    allowNamespaces = v.validateBooleanOption(\n      TopLevelOptions.allowNamespaces,\n      options.allowNamespaces,\n      true,\n    );\n    jsxPragma = v.validateStringOption(\n      TopLevelOptions.jsxPragma,\n      options.jsxPragma,\n      \"React\",\n    );\n    onlyRemoveTypeImports = v.validateBooleanOption(\n      TopLevelOptions.onlyRemoveTypeImports,\n      options.onlyRemoveTypeImports,\n      true,\n    );\n  }\n\n  const jsxPragmaFrag = v.validateStringOption(\n    TopLevelOptions.jsxPragmaFrag,\n    options.jsxPragmaFrag,\n    \"React.Fragment\",\n  );\n\n  const allExtensions = v.validateBooleanOption(\n    TopLevelOptions.allExtensions,\n    options.allExtensions,\n    false,\n  );\n\n  const isTSX = v.validateBooleanOption(\n    TopLevelOptions.isTSX,\n    options.isTSX,\n    false,\n  );\n  if (isTSX) {\n    v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n  }\n\n  const disallowAmbiguousJSXLike = v.validateBooleanOption(\n    TopLevelOptions.disallowAmbiguousJSXLike,\n    options.disallowAmbiguousJSXLike,\n    false,\n  );\n  if (disallowAmbiguousJSXLike) {\n    v.invariant(\n      allExtensions,\n      \"disallowAmbiguousJSXLike:true requires allExtensions:true\",\n    );\n  }\n\n  const optimizeConstEnums = v.validateBooleanOption(\n    TopLevelOptions.optimizeConstEnums,\n    options.optimizeConstEnums,\n    false,\n  );\n\n  return {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  };\n}\n","import { declarePreset } from \"@babel/helper-plugin-utils\";\nimport transformTypeScript from \"@babel/plugin-transform-typescript\";\nimport normalizeOptions from \"./normalize-options\";\nimport type { Options } from \"./normalize-options\";\n\nexport default declarePreset((api, opts: Options) => {\n  api.assertVersion(7);\n\n  const {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  } = normalizeOptions(opts);\n\n  const pluginOptions = process.env.BABEL_8_BREAKING\n    ? (isTSX: boolean, disallowAmbiguousJSXLike: boolean) => ({\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        isTSX,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      })\n    : (isTSX: boolean, disallowAmbiguousJSXLike: boolean) => ({\n        allowDeclareFields: opts.allowDeclareFields,\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        isTSX,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      });\n\n  return {\n    overrides: allExtensions\n      ? [\n          {\n            plugins: [\n              [\n                transformTypeScript,\n                pluginOptions(isTSX, disallowAmbiguousJSXLike),\n              ],\n            ],\n          },\n        ]\n      : // Only set 'test' if explicitly requested, since it requires that\n        // Babel is being called`\n        [\n          {\n            test: /\\.ts$/,\n            plugins: [[transformTypeScript, pluginOptions(false, false)]],\n          },\n          {\n            test: /\\.mts$/,\n            sourceType: \"module\",\n            plugins: [[transformTypeScript, pluginOptions(false, true)]],\n          },\n          {\n            test: /\\.cts$/,\n            sourceType: \"script\",\n            plugins: [[transformTypeScript, pluginOptions(false, true)]],\n          },\n          {\n            test: /\\.tsx$/,\n            // disallowAmbiguousJSXLike is a no-op when parsing TSX, since it's\n            // always disallowed.\n            plugins: [[transformTypeScript, pluginOptions(true, false)]],\n          },\n        ],\n  };\n});\n"]},"metadata":{},"sourceType":"script"}