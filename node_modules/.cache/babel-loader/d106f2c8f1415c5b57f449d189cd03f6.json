{"ast":null,"code":"/**\n * @fileoverview Ensure autocomplete attribute is correct.\n * @author Wilco Fiers\n */\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport { axeFailMessage } from '../../__util__/axeMapping';\nimport rule from '../../../src/rules/autocomplete-valid'; // -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\nconst invalidAutocomplete = [{\n  message: axeFailMessage('autocomplete-valid'),\n  type: 'JSXOpeningElement'\n}];\nconst inappropriateAutocomplete = [{\n  message: axeFailMessage('autocomplete-appropriate'),\n  type: 'JSXOpeningElement'\n}];\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Input: 'input'\n    }\n  }\n};\nruleTester.run('autocomplete-valid', rule, {\n  valid: [// INAPPLICABLE\n  {\n    code: '<input type=\"text\" />;'\n  }, // // PASSED AUTOCOMPLETE\n  {\n    code: '<input type=\"text\" autocomplete=\"name\" />;'\n  }, {\n    code: '<input type=\"text\" autocomplete=\"\" />;'\n  }, {\n    code: '<input type=\"text\" autocomplete=\"off\" />;'\n  }, {\n    code: '<input type=\"text\" autocomplete=\"on\" />;'\n  }, {\n    code: '<input type=\"text\" autocomplete=\"billing family-name\" />;'\n  }, {\n    code: '<input type=\"text\" autocomplete=\"section-blue shipping street-address\" />;'\n  }, {\n    code: '<input type=\"text\" autocomplete=\"section-somewhere shipping work email\" />;'\n  }, {\n    code: '<input type=\"text\" autocomplete />;'\n  }, {\n    code: '<input type=\"text\" autocomplete={autocompl} />;'\n  }, {\n    code: '<input type=\"text\" autocomplete={autocompl || \"name\"} />;'\n  }, {\n    code: '<input type=\"text\" autocomplete={autocompl || \"foo\"} />;'\n  }, {\n    code: '<Foo autocomplete=\"bar\"></Foo>;'\n  }, {\n    code: '<input type={isEmail ? \"email\" : \"text\"} autocomplete=\"none\" />;'\n  }, {\n    code: '<Input type=\"text\" autocomplete=\"name\" />',\n    settings: componentsSettings\n  }, {\n    code: '<Input type=\"text\" autocomplete=\"baz\" />'\n  }, // PASSED \"autocomplete-appropriate\"\n  // see also: https://github.com/dequelabs/axe-core/issues/2912\n  {\n    code: '<input type=\"date\" autocomplete=\"email\" />;',\n    errors: inappropriateAutocomplete\n  }, {\n    code: '<input type=\"number\" autocomplete=\"url\" />;',\n    errors: inappropriateAutocomplete\n  }, {\n    code: '<input type=\"month\" autocomplete=\"tel\" />;',\n    errors: inappropriateAutocomplete\n  }, {\n    code: '<Foo type=\"month\" autocomplete=\"tel\"></Foo>;',\n    errors: inappropriateAutocomplete,\n    options: [{\n      inputComponents: ['Foo']\n    }]\n  }].map(parserOptionsMapper),\n  invalid: [// FAILED \"autocomplete-valid\"\n  {\n    code: '<input type=\"text\" autocomplete=\"foo\" />;',\n    errors: invalidAutocomplete\n  }, {\n    code: '<input type=\"text\" autocomplete=\"name invalid\" />;',\n    errors: invalidAutocomplete\n  }, {\n    code: '<input type=\"text\" autocomplete=\"invalid name\" />;',\n    errors: invalidAutocomplete\n  }, {\n    code: '<input type=\"text\" autocomplete=\"home url\" />;',\n    errors: invalidAutocomplete\n  }, {\n    code: '<Bar autocomplete=\"baz\"></Bar>;',\n    errors: invalidAutocomplete,\n    options: [{\n      inputComponents: ['Bar']\n    }]\n  }, {\n    code: '<Input type=\"text\" autocomplete=\"baz\" />',\n    errors: invalidAutocomplete,\n    settings: componentsSettings\n  }].map(parserOptionsMapper)\n});","map":{"version":3,"names":["RuleTester","parserOptionsMapper","axeFailMessage","rule","ruleTester","invalidAutocomplete","message","type","inappropriateAutocomplete","componentsSettings","components","Input","run","valid","code","settings","errors","options","inputComponents","map","invalid"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/autocomplete-valid-test.js"],"sourcesContent":["/**\n * @fileoverview Ensure autocomplete attribute is correct.\n * @author Wilco Fiers\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport { axeFailMessage } from '../../__util__/axeMapping';\nimport rule from '../../../src/rules/autocomplete-valid';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst invalidAutocomplete = [{\n  message: axeFailMessage('autocomplete-valid'),\n  type: 'JSXOpeningElement',\n}];\n\nconst inappropriateAutocomplete = [{\n  message: axeFailMessage('autocomplete-appropriate'),\n  type: 'JSXOpeningElement',\n}];\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Input: 'input',\n    },\n  },\n};\n\nruleTester.run('autocomplete-valid', rule, {\n  valid: [\n    // INAPPLICABLE\n    { code: '<input type=\"text\" />;' },\n    // // PASSED AUTOCOMPLETE\n    { code: '<input type=\"text\" autocomplete=\"name\" />;' },\n    { code: '<input type=\"text\" autocomplete=\"\" />;' },\n    { code: '<input type=\"text\" autocomplete=\"off\" />;' },\n    { code: '<input type=\"text\" autocomplete=\"on\" />;' },\n    { code: '<input type=\"text\" autocomplete=\"billing family-name\" />;' },\n    { code: '<input type=\"text\" autocomplete=\"section-blue shipping street-address\" />;' },\n    { code: '<input type=\"text\" autocomplete=\"section-somewhere shipping work email\" />;' },\n    { code: '<input type=\"text\" autocomplete />;' },\n    { code: '<input type=\"text\" autocomplete={autocompl} />;' },\n    { code: '<input type=\"text\" autocomplete={autocompl || \"name\"} />;' },\n    { code: '<input type=\"text\" autocomplete={autocompl || \"foo\"} />;' },\n    { code: '<Foo autocomplete=\"bar\"></Foo>;' },\n    { code: '<input type={isEmail ? \"email\" : \"text\"} autocomplete=\"none\" />;' },\n    { code: '<Input type=\"text\" autocomplete=\"name\" />', settings: componentsSettings },\n    { code: '<Input type=\"text\" autocomplete=\"baz\" />' },\n\n    // PASSED \"autocomplete-appropriate\"\n    // see also: https://github.com/dequelabs/axe-core/issues/2912\n    { code: '<input type=\"date\" autocomplete=\"email\" />;', errors: inappropriateAutocomplete },\n    { code: '<input type=\"number\" autocomplete=\"url\" />;', errors: inappropriateAutocomplete },\n    { code: '<input type=\"month\" autocomplete=\"tel\" />;', errors: inappropriateAutocomplete },\n    { code: '<Foo type=\"month\" autocomplete=\"tel\"></Foo>;', errors: inappropriateAutocomplete, options: [{ inputComponents: ['Foo'] }] },\n  ].map(parserOptionsMapper),\n  invalid: [\n    // FAILED \"autocomplete-valid\"\n    { code: '<input type=\"text\" autocomplete=\"foo\" />;', errors: invalidAutocomplete },\n    { code: '<input type=\"text\" autocomplete=\"name invalid\" />;', errors: invalidAutocomplete },\n    { code: '<input type=\"text\" autocomplete=\"invalid name\" />;', errors: invalidAutocomplete },\n    { code: '<input type=\"text\" autocomplete=\"home url\" />;', errors: invalidAutocomplete },\n    { code: '<Bar autocomplete=\"baz\"></Bar>;', errors: invalidAutocomplete, options: [{ inputComponents: ['Bar'] }] },\n    { code: '<Input type=\"text\" autocomplete=\"baz\" />', errors: invalidAutocomplete, settings: componentsSettings },\n  ].map(parserOptionsMapper),\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,SAASA,UAAT,QAA2B,QAA3B;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,OAAOC,IAAP,MAAiB,uCAAjB,C,CAEA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG,IAAIJ,UAAJ,EAAnB;AAEA,MAAMK,mBAAmB,GAAG,CAAC;EAC3BC,OAAO,EAAEJ,cAAc,CAAC,oBAAD,CADI;EAE3BK,IAAI,EAAE;AAFqB,CAAD,CAA5B;AAKA,MAAMC,yBAAyB,GAAG,CAAC;EACjCF,OAAO,EAAEJ,cAAc,CAAC,0BAAD,CADU;EAEjCK,IAAI,EAAE;AAF2B,CAAD,CAAlC;AAKA,MAAME,kBAAkB,GAAG;EACzB,YAAY;IACVC,UAAU,EAAE;MACVC,KAAK,EAAE;IADG;EADF;AADa,CAA3B;AAQAP,UAAU,CAACQ,GAAX,CAAe,oBAAf,EAAqCT,IAArC,EAA2C;EACzCU,KAAK,EAAE,CACL;EACA;IAAEC,IAAI,EAAE;EAAR,CAFK,EAGL;EACA;IAAEA,IAAI,EAAE;EAAR,CAJK,EAKL;IAAEA,IAAI,EAAE;EAAR,CALK,EAML;IAAEA,IAAI,EAAE;EAAR,CANK,EAOL;IAAEA,IAAI,EAAE;EAAR,CAPK,EAQL;IAAEA,IAAI,EAAE;EAAR,CARK,EASL;IAAEA,IAAI,EAAE;EAAR,CATK,EAUL;IAAEA,IAAI,EAAE;EAAR,CAVK,EAWL;IAAEA,IAAI,EAAE;EAAR,CAXK,EAYL;IAAEA,IAAI,EAAE;EAAR,CAZK,EAaL;IAAEA,IAAI,EAAE;EAAR,CAbK,EAcL;IAAEA,IAAI,EAAE;EAAR,CAdK,EAeL;IAAEA,IAAI,EAAE;EAAR,CAfK,EAgBL;IAAEA,IAAI,EAAE;EAAR,CAhBK,EAiBL;IAAEA,IAAI,EAAE,2CAAR;IAAqDC,QAAQ,EAAEN;EAA/D,CAjBK,EAkBL;IAAEK,IAAI,EAAE;EAAR,CAlBK,EAoBL;EACA;EACA;IAAEA,IAAI,EAAE,6CAAR;IAAuDE,MAAM,EAAER;EAA/D,CAtBK,EAuBL;IAAEM,IAAI,EAAE,6CAAR;IAAuDE,MAAM,EAAER;EAA/D,CAvBK,EAwBL;IAAEM,IAAI,EAAE,4CAAR;IAAsDE,MAAM,EAAER;EAA9D,CAxBK,EAyBL;IAAEM,IAAI,EAAE,8CAAR;IAAwDE,MAAM,EAAER,yBAAhE;IAA2FS,OAAO,EAAE,CAAC;MAAEC,eAAe,EAAE,CAAC,KAAD;IAAnB,CAAD;EAApG,CAzBK,EA0BLC,GA1BK,CA0BDlB,mBA1BC,CADkC;EA4BzCmB,OAAO,EAAE,CACP;EACA;IAAEN,IAAI,EAAE,2CAAR;IAAqDE,MAAM,EAAEX;EAA7D,CAFO,EAGP;IAAES,IAAI,EAAE,oDAAR;IAA8DE,MAAM,EAAEX;EAAtE,CAHO,EAIP;IAAES,IAAI,EAAE,oDAAR;IAA8DE,MAAM,EAAEX;EAAtE,CAJO,EAKP;IAAES,IAAI,EAAE,gDAAR;IAA0DE,MAAM,EAAEX;EAAlE,CALO,EAMP;IAAES,IAAI,EAAE,iCAAR;IAA2CE,MAAM,EAAEX,mBAAnD;IAAwEY,OAAO,EAAE,CAAC;MAAEC,eAAe,EAAE,CAAC,KAAD;IAAnB,CAAD;EAAjF,CANO,EAOP;IAAEJ,IAAI,EAAE,0CAAR;IAAoDE,MAAM,EAAEX,mBAA5D;IAAiFU,QAAQ,EAAEN;EAA3F,CAPO,EAQPU,GARO,CAQHlB,mBARG;AA5BgC,CAA3C"},"metadata":{},"sourceType":"module"}