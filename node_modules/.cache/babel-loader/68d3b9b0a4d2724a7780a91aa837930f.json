{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildNamespaceInitStatements = buildNamespaceInitStatements;\nexports.ensureStatementsHoisted = ensureStatementsHoisted;\nObject.defineProperty(exports, \"getModuleName\", {\n  enumerable: true,\n  get: function () {\n    return _getModuleName.default;\n  }\n});\nObject.defineProperty(exports, \"hasExports\", {\n  enumerable: true,\n  get: function () {\n    return _normalizeAndLoadMetadata.hasExports;\n  }\n});\nObject.defineProperty(exports, \"isModule\", {\n  enumerable: true,\n  get: function () {\n    return _helperModuleImports.isModule;\n  }\n});\nObject.defineProperty(exports, \"isSideEffectImport\", {\n  enumerable: true,\n  get: function () {\n    return _normalizeAndLoadMetadata.isSideEffectImport;\n  }\n});\nexports.rewriteModuleStatementsAndPrepareHeader = rewriteModuleStatementsAndPrepareHeader;\nObject.defineProperty(exports, \"rewriteThis\", {\n  enumerable: true,\n  get: function () {\n    return _rewriteThis.default;\n  }\n});\nexports.wrapInterop = wrapInterop;\n\nvar _assert = require(\"assert\");\n\nvar _t = require(\"@babel/types\");\n\nvar _template = require(\"@babel/template\");\n\nvar _helperModuleImports = require(\"@babel/helper-module-imports\");\n\nvar _rewriteThis = require(\"./rewrite-this\");\n\nvar _rewriteLiveReferences = require(\"./rewrite-live-references\");\n\nvar _normalizeAndLoadMetadata = require(\"./normalize-and-load-metadata\");\n\nvar _getModuleName = require(\"./get-module-name\");\n\nconst {\n  booleanLiteral,\n  callExpression,\n  cloneNode,\n  directive,\n  directiveLiteral,\n  expressionStatement,\n  identifier,\n  isIdentifier,\n  memberExpression,\n  stringLiteral,\n  valueToNode,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nfunction rewriteModuleStatementsAndPrepareHeader(path, _ref) {\n  let {\n    loose,\n    exportName,\n    strict,\n    allowTopLevelThis,\n    strictMode,\n    noInterop,\n    importInterop = noInterop ? \"none\" : \"babel\",\n    lazy,\n    esNamespaceOnly,\n    filename,\n    constantReexports = loose,\n    enumerableModuleMeta = loose,\n    noIncompleteNsImportDetection\n  } = _ref;\n  (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop);\n\n  _assert((0, _helperModuleImports.isModule)(path), \"Cannot process module statements in a script\");\n\n  path.node.sourceType = \"script\";\n  const meta = (0, _normalizeAndLoadMetadata.default)(path, exportName, {\n    importInterop,\n    initializeReexports: constantReexports,\n    lazy,\n    esNamespaceOnly,\n    filename\n  });\n\n  if (!allowTopLevelThis) {\n    (0, _rewriteThis.default)(path);\n  }\n\n  (0, _rewriteLiveReferences.default)(path, meta);\n\n  if (strictMode !== false) {\n    const hasStrict = path.node.directives.some(directive => {\n      return directive.value.value === \"use strict\";\n    });\n\n    if (!hasStrict) {\n      path.unshiftContainer(\"directives\", directive(directiveLiteral(\"use strict\")));\n    }\n  }\n\n  const headers = [];\n\n  if ((0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict) {\n    headers.push(buildESModuleHeader(meta, enumerableModuleMeta));\n  }\n\n  const nameList = buildExportNameListDeclaration(path, meta);\n\n  if (nameList) {\n    meta.exportNameListName = nameList.name;\n    headers.push(nameList.statement);\n  }\n\n  headers.push(...buildExportInitializationStatements(path, meta, constantReexports, noIncompleteNsImportDetection));\n  return {\n    meta,\n    headers\n  };\n}\n\nfunction ensureStatementsHoisted(statements) {\n  statements.forEach(header => {\n    header._blockHoist = 3;\n  });\n}\n\nfunction wrapInterop(programPath, expr, type) {\n  if (type === \"none\") {\n    return null;\n  }\n\n  if (type === \"node-namespace\") {\n    return callExpression(programPath.hub.addHelper(\"interopRequireWildcard\"), [expr, booleanLiteral(true)]);\n  } else if (type === \"node-default\") {\n    return null;\n  }\n\n  let helper;\n\n  if (type === \"default\") {\n    helper = \"interopRequireDefault\";\n  } else if (type === \"namespace\") {\n    helper = \"interopRequireWildcard\";\n  } else {\n    throw new Error(`Unknown interop: ${type}`);\n  }\n\n  return callExpression(programPath.hub.addHelper(helper), [expr]);\n}\n\nfunction buildNamespaceInitStatements(metadata, sourceMetadata) {\n  let constantReexports = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const statements = [];\n  let srcNamespace = identifier(sourceMetadata.name);\n  if (sourceMetadata.lazy) srcNamespace = callExpression(srcNamespace, []);\n\n  for (const localName of sourceMetadata.importsNamespace) {\n    if (localName === sourceMetadata.name) continue;\n    statements.push(_template.default.statement`var NAME = SOURCE;`({\n      NAME: localName,\n      SOURCE: cloneNode(srcNamespace)\n    }));\n  }\n\n  if (constantReexports) {\n    statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, true));\n  }\n\n  for (const exportName of sourceMetadata.reexportNamespace) {\n    statements.push((sourceMetadata.lazy ? _template.default.statement`\n            Object.defineProperty(EXPORTS, \"NAME\", {\n              enumerable: true,\n              get: function() {\n                return NAMESPACE;\n              }\n            });\n          ` : _template.default.statement`EXPORTS.NAME = NAMESPACE;`)({\n      EXPORTS: metadata.exportName,\n      NAME: exportName,\n      NAMESPACE: cloneNode(srcNamespace)\n    }));\n  }\n\n  if (sourceMetadata.reexportAll) {\n    const statement = buildNamespaceReexport(metadata, cloneNode(srcNamespace), constantReexports);\n    statement.loc = sourceMetadata.reexportAll.loc;\n    statements.push(statement);\n  }\n\n  return statements;\n}\n\nconst ReexportTemplate = {\n  constant: _template.default.statement`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;`,\n  constantComputed: _template.default.statement`EXPORTS[\"EXPORT_NAME\"] = NAMESPACE_IMPORT;`,\n  spec: _template.default.statement`\n    Object.defineProperty(EXPORTS, \"EXPORT_NAME\", {\n      enumerable: true,\n      get: function() {\n        return NAMESPACE_IMPORT;\n      },\n    });\n    `\n};\n\nconst buildReexportsFromMeta = (meta, metadata, constantReexports) => {\n  const namespace = metadata.lazy ? callExpression(identifier(metadata.name), []) : identifier(metadata.name);\n  const {\n    stringSpecifiers\n  } = meta;\n  return Array.from(metadata.reexports, _ref2 => {\n    let [exportName, importName] = _ref2;\n    let NAMESPACE_IMPORT = cloneNode(namespace);\n\n    if (importName === \"default\" && metadata.interop === \"node-default\") {} else if (stringSpecifiers.has(importName)) {\n      NAMESPACE_IMPORT = memberExpression(NAMESPACE_IMPORT, stringLiteral(importName), true);\n    } else {\n      NAMESPACE_IMPORT = memberExpression(NAMESPACE_IMPORT, identifier(importName));\n    }\n\n    const astNodes = {\n      EXPORTS: meta.exportName,\n      EXPORT_NAME: exportName,\n      NAMESPACE_IMPORT\n    };\n\n    if (constantReexports || isIdentifier(NAMESPACE_IMPORT)) {\n      if (stringSpecifiers.has(exportName)) {\n        return ReexportTemplate.constantComputed(astNodes);\n      } else {\n        return ReexportTemplate.constant(astNodes);\n      }\n    } else {\n      return ReexportTemplate.spec(astNodes);\n    }\n  });\n};\n\nfunction buildESModuleHeader(metadata) {\n  let enumerableModuleMeta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return (enumerableModuleMeta ? _template.default.statement`\n        EXPORTS.__esModule = true;\n      ` : _template.default.statement`\n        Object.defineProperty(EXPORTS, \"__esModule\", {\n          value: true,\n        });\n      `)({\n    EXPORTS: metadata.exportName\n  });\n}\n\nfunction buildNamespaceReexport(metadata, namespace, constantReexports) {\n  return (constantReexports ? _template.default.statement`\n        Object.keys(NAMESPACE).forEach(function(key) {\n          if (key === \"default\" || key === \"__esModule\") return;\n          VERIFY_NAME_LIST;\n          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;\n\n          EXPORTS[key] = NAMESPACE[key];\n        });\n      ` : _template.default.statement`\n        Object.keys(NAMESPACE).forEach(function(key) {\n          if (key === \"default\" || key === \"__esModule\") return;\n          VERIFY_NAME_LIST;\n          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;\n\n          Object.defineProperty(EXPORTS, key, {\n            enumerable: true,\n            get: function() {\n              return NAMESPACE[key];\n            },\n          });\n        });\n    `)({\n    NAMESPACE: namespace,\n    EXPORTS: metadata.exportName,\n    VERIFY_NAME_LIST: metadata.exportNameListName ? (0, _template.default)`\n            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;\n          `({\n      EXPORTS_LIST: metadata.exportNameListName\n    }) : null\n  });\n}\n\nfunction buildExportNameListDeclaration(programPath, metadata) {\n  const exportedVars = Object.create(null);\n\n  for (const data of metadata.local.values()) {\n    for (const name of data.names) {\n      exportedVars[name] = true;\n    }\n  }\n\n  let hasReexport = false;\n\n  for (const data of metadata.source.values()) {\n    for (const exportName of data.reexports.keys()) {\n      exportedVars[exportName] = true;\n    }\n\n    for (const exportName of data.reexportNamespace) {\n      exportedVars[exportName] = true;\n    }\n\n    hasReexport = hasReexport || !!data.reexportAll;\n  }\n\n  if (!hasReexport || Object.keys(exportedVars).length === 0) return null;\n  const name = programPath.scope.generateUidIdentifier(\"exportNames\");\n  delete exportedVars.default;\n  return {\n    name: name.name,\n    statement: variableDeclaration(\"var\", [variableDeclarator(name, valueToNode(exportedVars))])\n  };\n}\n\nfunction buildExportInitializationStatements(programPath, metadata) {\n  let constantReexports = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let noIncompleteNsImportDetection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const initStatements = [];\n\n  for (const [localName, data] of metadata.local) {\n    if (data.kind === \"import\") {} else if (data.kind === \"hoisted\") {\n      initStatements.push([data.names[0], buildInitStatement(metadata, data.names, identifier(localName))]);\n    } else if (!noIncompleteNsImportDetection) {\n      for (const exportName of data.names) {\n        initStatements.push([exportName, null]);\n      }\n    }\n  }\n\n  for (const data of metadata.source.values()) {\n    if (!constantReexports) {\n      const reexportsStatements = buildReexportsFromMeta(metadata, data, false);\n      const reexports = [...data.reexports.keys()];\n\n      for (let i = 0; i < reexportsStatements.length; i++) {\n        initStatements.push([reexports[i], reexportsStatements[i]]);\n      }\n    }\n\n    if (!noIncompleteNsImportDetection) {\n      for (const exportName of data.reexportNamespace) {\n        initStatements.push([exportName, null]);\n      }\n    }\n  }\n\n  initStatements.sort((_ref3, _ref4) => {\n    let [a] = _ref3;\n    let [b] = _ref4;\n    if (a < b) return -1;\n    if (b < a) return 1;\n    return 0;\n  });\n  const results = [];\n\n  if (noIncompleteNsImportDetection) {\n    for (const [, initStatement] of initStatements) {\n      results.push(initStatement);\n    }\n  } else {\n    const chunkSize = 100;\n\n    for (let i = 0; i < initStatements.length; i += chunkSize) {\n      let uninitializedExportNames = [];\n\n      for (let j = 0; j < chunkSize && i + j < initStatements.length; j++) {\n        const [exportName, initStatement] = initStatements[i + j];\n\n        if (initStatement !== null) {\n          if (uninitializedExportNames.length > 0) {\n            results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));\n            uninitializedExportNames = [];\n          }\n\n          results.push(initStatement);\n        } else {\n          uninitializedExportNames.push(exportName);\n        }\n      }\n\n      if (uninitializedExportNames.length > 0) {\n        results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));\n      }\n    }\n  }\n\n  return results;\n}\n\nconst InitTemplate = {\n  computed: _template.default.expression`EXPORTS[\"NAME\"] = VALUE`,\n  default: _template.default.expression`EXPORTS.NAME = VALUE`\n};\n\nfunction buildInitStatement(metadata, exportNames, initExpr) {\n  const {\n    stringSpecifiers,\n    exportName: EXPORTS\n  } = metadata;\n  return expressionStatement(exportNames.reduce((acc, exportName) => {\n    const params = {\n      EXPORTS,\n      NAME: exportName,\n      VALUE: acc\n    };\n\n    if (stringSpecifiers.has(exportName)) {\n      return InitTemplate.computed(params);\n    } else {\n      return InitTemplate.default(params);\n    }\n  }, initExpr));\n}","map":{"version":3,"mappings":"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","names":["booleanLiteral","callExpression","cloneNode","directive","directiveLiteral","expressionStatement","identifier","isIdentifier","memberExpression","stringLiteral","valueToNode","variableDeclaration","variableDeclarator","rewriteModuleStatementsAndPrepareHeader","path","loose","exportName","strict","allowTopLevelThis","strictMode","noInterop","importInterop","lazy","esNamespaceOnly","filename","constantReexports","enumerableModuleMeta","noIncompleteNsImportDetection","assert","node","sourceType","meta","initializeReexports","hasStrict","directives","some","value","unshiftContainer","headers","push","buildESModuleHeader","nameList","buildExportNameListDeclaration","exportNameListName","name","statement","buildExportInitializationStatements","ensureStatementsHoisted","statements","forEach","header","_blockHoist","wrapInterop","programPath","expr","type","hub","addHelper","helper","Error","buildNamespaceInitStatements","metadata","sourceMetadata","srcNamespace","localName","importsNamespace","template","NAME","SOURCE","buildReexportsFromMeta","reexportNamespace","EXPORTS","NAMESPACE","reexportAll","buildNamespaceReexport","loc","ReexportTemplate","constant","constantComputed","spec","namespace","stringSpecifiers","Array","from","reexports","importName","NAMESPACE_IMPORT","interop","has","astNodes","EXPORT_NAME","VERIFY_NAME_LIST","EXPORTS_LIST","exportedVars","Object","create","data","local","values","names","hasReexport","source","keys","length","scope","generateUidIdentifier","default","initStatements","kind","buildInitStatement","reexportsStatements","i","sort","a","b","results","initStatement","chunkSize","uninitializedExportNames","j","buildUndefinedNode","InitTemplate","computed","expression","exportNames","initExpr","reduce","acc","params","VALUE"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\helper-module-transforms\\src\\index.ts"],"sourcesContent":["import assert from \"assert\";\nimport {\n  booleanLiteral,\n  callExpression,\n  cloneNode,\n  directive,\n  directiveLiteral,\n  expressionStatement,\n  identifier,\n  isIdentifier,\n  memberExpression,\n  stringLiteral,\n  valueToNode,\n  variableDeclaration,\n  variableDeclarator,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport template from \"@babel/template\";\n\nimport { isModule } from \"@babel/helper-module-imports\";\n\nimport rewriteThis from \"./rewrite-this\";\nimport rewriteLiveReferences from \"./rewrite-live-references\";\nimport normalizeModuleAndLoadMetadata, {\n  hasExports,\n  isSideEffectImport,\n  validateImportInteropOption,\n} from \"./normalize-and-load-metadata\";\nimport type {\n  ImportInterop,\n  InteropType,\n  Lazy,\n  ModuleMetadata,\n  SourceModuleMetadata,\n} from \"./normalize-and-load-metadata\";\nimport type { NodePath } from \"@babel/traverse\";\n\nexport { default as getModuleName } from \"./get-module-name\";\nexport type { PluginOptions } from \"./get-module-name\";\n\nexport { hasExports, isSideEffectImport, isModule, rewriteThis };\n\nexport interface RewriteModuleStatementsAndPrepareHeaderOptions {\n  exportName?: string;\n  strict: boolean;\n  allowTopLevelThis?: boolean;\n  strictMode: boolean;\n  loose?: boolean;\n  importInterop?: ImportInterop;\n  noInterop?: boolean;\n  lazy?: Lazy;\n  esNamespaceOnly?: boolean;\n  filename: string | undefined;\n  constantReexports?: boolean | void;\n  enumerableModuleMeta?: boolean | void;\n  noIncompleteNsImportDetection?: boolean | void;\n}\n\n/**\n * Perform all of the generic ES6 module rewriting needed to handle initial\n * module processing. This function will rewrite the majority of the given\n * program to reference the modules described by the returned metadata,\n * and returns a list of statements for use when initializing the module.\n */\nexport function rewriteModuleStatementsAndPrepareHeader(\n  path: NodePath<t.Program>,\n  {\n    // TODO(Babel 8): Remove this\n    loose,\n\n    exportName,\n    strict,\n    allowTopLevelThis,\n    strictMode,\n    noInterop,\n    importInterop = noInterop ? \"none\" : \"babel\",\n    lazy,\n    esNamespaceOnly,\n    filename,\n\n    constantReexports = loose,\n    enumerableModuleMeta = loose,\n    noIncompleteNsImportDetection,\n  }: RewriteModuleStatementsAndPrepareHeaderOptions,\n) {\n  validateImportInteropOption(importInterop);\n  assert(isModule(path), \"Cannot process module statements in a script\");\n  path.node.sourceType = \"script\";\n\n  const meta = normalizeModuleAndLoadMetadata(path, exportName, {\n    importInterop,\n    initializeReexports: constantReexports,\n    lazy,\n    esNamespaceOnly,\n    filename,\n  });\n\n  if (!allowTopLevelThis) {\n    rewriteThis(path);\n  }\n\n  rewriteLiveReferences(path, meta);\n\n  if (strictMode !== false) {\n    const hasStrict = path.node.directives.some(directive => {\n      return directive.value.value === \"use strict\";\n    });\n    if (!hasStrict) {\n      path.unshiftContainer(\n        \"directives\",\n        directive(directiveLiteral(\"use strict\")),\n      );\n    }\n  }\n\n  const headers = [];\n  if (hasExports(meta) && !strict) {\n    headers.push(buildESModuleHeader(meta, enumerableModuleMeta));\n  }\n\n  const nameList = buildExportNameListDeclaration(path, meta);\n\n  if (nameList) {\n    meta.exportNameListName = nameList.name;\n    headers.push(nameList.statement);\n  }\n\n  // Create all of the statically known named exports.\n  headers.push(\n    ...buildExportInitializationStatements(\n      path,\n      meta,\n      constantReexports,\n      noIncompleteNsImportDetection,\n    ),\n  );\n\n  return { meta, headers };\n}\n\n/**\n * Flag a set of statements as hoisted above all else so that module init\n * statements all run before user code.\n */\nexport function ensureStatementsHoisted(statements: t.Statement[]) {\n  // Force all of the header fields to be at the top of the file.\n  statements.forEach(header => {\n    // @ts-expect-error Fixme: handle _blockHoist property\n    header._blockHoist = 3;\n  });\n}\n\n/**\n * Given an expression for a standard import object, like \"require('foo')\",\n * wrap it in a call to the interop helpers based on the type.\n */\nexport function wrapInterop(\n  programPath: NodePath,\n  expr: t.Expression,\n  type: InteropType,\n): t.CallExpression {\n  if (type === \"none\") {\n    return null;\n  }\n\n  if (type === \"node-namespace\") {\n    return callExpression(programPath.hub.addHelper(\"interopRequireWildcard\"), [\n      expr,\n      booleanLiteral(true),\n    ]);\n  } else if (type === \"node-default\") {\n    return null;\n  }\n\n  let helper;\n  if (type === \"default\") {\n    helper = \"interopRequireDefault\";\n  } else if (type === \"namespace\") {\n    helper = \"interopRequireWildcard\";\n  } else {\n    throw new Error(`Unknown interop: ${type}`);\n  }\n\n  return callExpression(programPath.hub.addHelper(helper), [expr]);\n}\n\n/**\n * Create the runtime initialization statements for a given requested source.\n * These will initialize all of the runtime import/export logic that\n * can't be handled statically by the statements created by\n * buildExportInitializationStatements().\n */\nexport function buildNamespaceInitStatements(\n  metadata: ModuleMetadata,\n  sourceMetadata: SourceModuleMetadata,\n  constantReexports: boolean | void = false,\n) {\n  const statements = [];\n\n  let srcNamespace: t.Node = identifier(sourceMetadata.name);\n  if (sourceMetadata.lazy) srcNamespace = callExpression(srcNamespace, []);\n\n  for (const localName of sourceMetadata.importsNamespace) {\n    if (localName === sourceMetadata.name) continue;\n\n    // Create and assign binding to namespace object\n    statements.push(\n      template.statement`var NAME = SOURCE;`({\n        NAME: localName,\n        SOURCE: cloneNode(srcNamespace),\n      }),\n    );\n  }\n  if (constantReexports) {\n    statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, true));\n  }\n  for (const exportName of sourceMetadata.reexportNamespace) {\n    // Assign export to namespace object.\n    statements.push(\n      (sourceMetadata.lazy\n        ? template.statement`\n            Object.defineProperty(EXPORTS, \"NAME\", {\n              enumerable: true,\n              get: function() {\n                return NAMESPACE;\n              }\n            });\n          `\n        : template.statement`EXPORTS.NAME = NAMESPACE;`)({\n        EXPORTS: metadata.exportName,\n        NAME: exportName,\n        NAMESPACE: cloneNode(srcNamespace),\n      }),\n    );\n  }\n  if (sourceMetadata.reexportAll) {\n    const statement = buildNamespaceReexport(\n      metadata,\n      cloneNode(srcNamespace),\n      constantReexports,\n    );\n    statement.loc = sourceMetadata.reexportAll.loc;\n\n    // Iterate props creating getter for each prop.\n    statements.push(statement);\n  }\n  return statements;\n}\n\nconst ReexportTemplate = {\n  constant: template.statement`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;`,\n  constantComputed: template.statement`EXPORTS[\"EXPORT_NAME\"] = NAMESPACE_IMPORT;`,\n  spec: template.statement`\n    Object.defineProperty(EXPORTS, \"EXPORT_NAME\", {\n      enumerable: true,\n      get: function() {\n        return NAMESPACE_IMPORT;\n      },\n    });\n    `,\n};\n\nconst buildReexportsFromMeta = (\n  meta: ModuleMetadata,\n  metadata: SourceModuleMetadata,\n  constantReexports: boolean,\n) => {\n  const namespace = metadata.lazy\n    ? callExpression(identifier(metadata.name), [])\n    : identifier(metadata.name);\n\n  const { stringSpecifiers } = meta;\n  return Array.from(metadata.reexports, ([exportName, importName]) => {\n    let NAMESPACE_IMPORT: t.Expression = cloneNode(namespace);\n    if (importName === \"default\" && metadata.interop === \"node-default\") {\n      // Nothing, it's ok as-is\n    } else if (stringSpecifiers.has(importName)) {\n      NAMESPACE_IMPORT = memberExpression(\n        NAMESPACE_IMPORT,\n        stringLiteral(importName),\n        true,\n      );\n    } else {\n      NAMESPACE_IMPORT = memberExpression(\n        NAMESPACE_IMPORT,\n        identifier(importName),\n      );\n    }\n    const astNodes = {\n      EXPORTS: meta.exportName,\n      EXPORT_NAME: exportName,\n      NAMESPACE_IMPORT,\n    };\n    if (constantReexports || isIdentifier(NAMESPACE_IMPORT)) {\n      if (stringSpecifiers.has(exportName)) {\n        return ReexportTemplate.constantComputed(astNodes);\n      } else {\n        return ReexportTemplate.constant(astNodes);\n      }\n    } else {\n      return ReexportTemplate.spec(astNodes);\n    }\n  });\n};\n\n/**\n * Build an \"__esModule\" header statement setting the property on a given object.\n */\nfunction buildESModuleHeader(\n  metadata: ModuleMetadata,\n  enumerableModuleMeta: boolean | void = false,\n) {\n  return (\n    enumerableModuleMeta\n      ? template.statement`\n        EXPORTS.__esModule = true;\n      `\n      : template.statement`\n        Object.defineProperty(EXPORTS, \"__esModule\", {\n          value: true,\n        });\n      `\n  )({ EXPORTS: metadata.exportName });\n}\n\n/**\n * Create a re-export initialization loop for a specific imported namespace.\n */\nfunction buildNamespaceReexport(\n  metadata: ModuleMetadata,\n  namespace: t.Identifier | t.CallExpression,\n  constantReexports: boolean | void,\n) {\n  return (\n    constantReexports\n      ? template.statement`\n        Object.keys(NAMESPACE).forEach(function(key) {\n          if (key === \"default\" || key === \"__esModule\") return;\n          VERIFY_NAME_LIST;\n          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;\n\n          EXPORTS[key] = NAMESPACE[key];\n        });\n      `\n      : // Also skip already assigned bindings if they are strictly equal\n        // to be somewhat more spec-compliant when a file has multiple\n        // namespace re-exports that would cause a binding to be exported\n        // multiple times. However, multiple bindings of the same name that\n        // export the same primitive value are silently skipped\n        // (the spec requires an \"ambigous bindings\" early error here).\n        template.statement`\n        Object.keys(NAMESPACE).forEach(function(key) {\n          if (key === \"default\" || key === \"__esModule\") return;\n          VERIFY_NAME_LIST;\n          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;\n\n          Object.defineProperty(EXPORTS, key, {\n            enumerable: true,\n            get: function() {\n              return NAMESPACE[key];\n            },\n          });\n        });\n    `\n  )({\n    NAMESPACE: namespace,\n    EXPORTS: metadata.exportName,\n    VERIFY_NAME_LIST: metadata.exportNameListName\n      ? template`\n            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;\n          `({ EXPORTS_LIST: metadata.exportNameListName })\n      : null,\n  });\n}\n\n/**\n * Build a statement declaring a variable that contains all of the exported\n * variable names in an object so they can easily be referenced from an\n * export * from statement to check for conflicts.\n */\nfunction buildExportNameListDeclaration(\n  programPath: NodePath,\n  metadata: ModuleMetadata,\n) {\n  const exportedVars = Object.create(null);\n  for (const data of metadata.local.values()) {\n    for (const name of data.names) {\n      exportedVars[name] = true;\n    }\n  }\n\n  let hasReexport = false;\n  for (const data of metadata.source.values()) {\n    for (const exportName of data.reexports.keys()) {\n      exportedVars[exportName] = true;\n    }\n    for (const exportName of data.reexportNamespace) {\n      exportedVars[exportName] = true;\n    }\n\n    hasReexport = hasReexport || !!data.reexportAll;\n  }\n\n  if (!hasReexport || Object.keys(exportedVars).length === 0) return null;\n\n  const name = programPath.scope.generateUidIdentifier(\"exportNames\");\n\n  delete exportedVars.default;\n\n  return {\n    name: name.name,\n    statement: variableDeclaration(\"var\", [\n      variableDeclarator(name, valueToNode(exportedVars)),\n    ]),\n  };\n}\n\n/**\n * Create a set of statements that will initialize all of the statically-known\n * export names with their expected values.\n */\nfunction buildExportInitializationStatements(\n  programPath: NodePath,\n  metadata: ModuleMetadata,\n  constantReexports: boolean | void = false,\n  noIncompleteNsImportDetection: boolean | void = false,\n) {\n  const initStatements: Array<[string, t.Statement | null]> = [];\n\n  for (const [localName, data] of metadata.local) {\n    if (data.kind === \"import\") {\n      // No-open since these are explicitly set with the \"reexports\" block.\n    } else if (data.kind === \"hoisted\") {\n      initStatements.push([\n        // data.names is always of length 1 because a hoisted export\n        // name must be id of a function declaration\n        data.names[0],\n        buildInitStatement(metadata, data.names, identifier(localName)),\n      ]);\n    } else if (!noIncompleteNsImportDetection) {\n      for (const exportName of data.names) {\n        initStatements.push([exportName, null]);\n      }\n    }\n  }\n\n  for (const data of metadata.source.values()) {\n    if (!constantReexports) {\n      const reexportsStatements = buildReexportsFromMeta(metadata, data, false);\n      const reexports = [...data.reexports.keys()];\n      for (let i = 0; i < reexportsStatements.length; i++) {\n        initStatements.push([reexports[i], reexportsStatements[i]]);\n      }\n    }\n    if (!noIncompleteNsImportDetection) {\n      for (const exportName of data.reexportNamespace) {\n        initStatements.push([exportName, null]);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#sec-module-namespace-exotic-objects\n  // The [Exports] list is ordered as if an Array of those String values\n  // had been sorted using %Array.prototype.sort% using undefined as comparefn\n  initStatements.sort(([a], [b]) => {\n    if (a < b) return -1;\n    if (b < a) return 1;\n    return 0;\n  });\n\n  const results = [];\n  if (noIncompleteNsImportDetection) {\n    for (const [, initStatement] of initStatements) {\n      results.push(initStatement);\n    }\n  } else {\n    // We generate init statements (`exports.a = exports.b = ... = void 0`)\n    // for every 100 exported names to avoid deeply-nested AST structures.\n    const chunkSize = 100;\n    for (let i = 0; i < initStatements.length; i += chunkSize) {\n      let uninitializedExportNames = [];\n      for (let j = 0; j < chunkSize && i + j < initStatements.length; j++) {\n        const [exportName, initStatement] = initStatements[i + j];\n        if (initStatement !== null) {\n          if (uninitializedExportNames.length > 0) {\n            results.push(\n              buildInitStatement(\n                metadata,\n                uninitializedExportNames,\n                programPath.scope.buildUndefinedNode(),\n              ),\n            );\n            // reset after uninitializedExportNames has been transformed\n            // to init statements\n            uninitializedExportNames = [];\n          }\n          results.push(initStatement);\n        } else {\n          uninitializedExportNames.push(exportName);\n        }\n      }\n      if (uninitializedExportNames.length > 0) {\n        results.push(\n          buildInitStatement(\n            metadata,\n            uninitializedExportNames,\n            programPath.scope.buildUndefinedNode(),\n          ),\n        );\n      }\n    }\n  }\n\n  return results;\n}\n\n/**\n * Given a set of export names, create a set of nested assignments to\n * initialize them all to a given expression.\n */\nconst InitTemplate = {\n  computed: template.expression`EXPORTS[\"NAME\"] = VALUE`,\n  default: template.expression`EXPORTS.NAME = VALUE`,\n};\n\nfunction buildInitStatement(\n  metadata: ModuleMetadata,\n  exportNames: string[],\n  initExpr: t.Expression,\n) {\n  const { stringSpecifiers, exportName: EXPORTS } = metadata;\n  return expressionStatement(\n    exportNames.reduce((acc, exportName) => {\n      const params = {\n        EXPORTS,\n        NAME: exportName,\n        VALUE: acc,\n      };\n      if (stringSpecifiers.has(exportName)) {\n        return InitTemplate.computed(params);\n      } else {\n        return InitTemplate.default(params);\n      }\n    }, initExpr),\n  );\n}\n"]},"metadata":{},"sourceType":"script"}