{"ast":null,"code":"let comparisonMap = {\n  atrule: ['name', 'params'],\n  rule: ['selector']\n};\nlet types = new Set(Object.keys(comparisonMap));\nexport default function collapseAdjacentRules() {\n  function collapseRulesIn(root) {\n    let currentRule = null;\n    root.each(node => {\n      if (!types.has(node.type)) {\n        currentRule = null;\n        return;\n      }\n\n      if (currentRule === null) {\n        currentRule = node;\n        return;\n      }\n\n      let properties = comparisonMap[node.type];\n\n      if (node.type === 'atrule' && node.name === 'font-face') {\n        currentRule = node;\n      } else if (properties.every(property => (node[property] ?? '').replace(/\\s+/g, ' ') === (currentRule[property] ?? '').replace(/\\s+/g, ' '))) {\n        // An AtRule may not have children (for example if we encounter duplicate @import url(…) rules)\n        if (node.nodes) {\n          currentRule.append(node.nodes);\n        }\n\n        node.remove();\n      } else {\n        currentRule = node;\n      }\n    }); // After we've collapsed adjacent rules & at-rules, we need to collapse\n    // adjacent rules & at-rules that are children of at-rules.\n    // We do not care about nesting rules because Tailwind CSS\n    // explicitly does not handle rule nesting on its own as\n    // the user is expected to use a nesting plugin\n\n    root.each(node => {\n      if (node.type === 'atrule') {\n        collapseRulesIn(node);\n      }\n    });\n  }\n\n  return root => {\n    collapseRulesIn(root);\n  };\n}","map":{"version":3,"names":["comparisonMap","atrule","rule","types","Set","Object","keys","collapseAdjacentRules","collapseRulesIn","root","currentRule","each","node","has","type","properties","name","every","property","replace","nodes","append","remove"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/lib/collapseAdjacentRules.js"],"sourcesContent":["let comparisonMap = {\n  atrule: ['name', 'params'],\n  rule: ['selector'],\n}\nlet types = new Set(Object.keys(comparisonMap))\n\nexport default function collapseAdjacentRules() {\n  function collapseRulesIn(root) {\n    let currentRule = null\n    root.each((node) => {\n      if (!types.has(node.type)) {\n        currentRule = null\n        return\n      }\n\n      if (currentRule === null) {\n        currentRule = node\n        return\n      }\n\n      let properties = comparisonMap[node.type]\n\n      if (node.type === 'atrule' && node.name === 'font-face') {\n        currentRule = node\n      } else if (\n        properties.every(\n          (property) =>\n            (node[property] ?? '').replace(/\\s+/g, ' ') ===\n            (currentRule[property] ?? '').replace(/\\s+/g, ' ')\n        )\n      ) {\n        // An AtRule may not have children (for example if we encounter duplicate @import url(…) rules)\n        if (node.nodes) {\n          currentRule.append(node.nodes)\n        }\n\n        node.remove()\n      } else {\n        currentRule = node\n      }\n    })\n\n    // After we've collapsed adjacent rules & at-rules, we need to collapse\n    // adjacent rules & at-rules that are children of at-rules.\n    // We do not care about nesting rules because Tailwind CSS\n    // explicitly does not handle rule nesting on its own as\n    // the user is expected to use a nesting plugin\n    root.each((node) => {\n      if (node.type === 'atrule') {\n        collapseRulesIn(node)\n      }\n    })\n  }\n\n  return (root) => {\n    collapseRulesIn(root)\n  }\n}\n"],"mappings":"AAAA,IAAIA,aAAa,GAAG;EAClBC,MAAM,EAAE,CAAC,MAAD,EAAS,QAAT,CADU;EAElBC,IAAI,EAAE,CAAC,UAAD;AAFY,CAApB;AAIA,IAAIC,KAAK,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,IAAP,CAAYN,aAAZ,CAAR,CAAZ;AAEA,eAAe,SAASO,qBAAT,GAAiC;EAC9C,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;IAC7B,IAAIC,WAAW,GAAG,IAAlB;IACAD,IAAI,CAACE,IAAL,CAAWC,IAAD,IAAU;MAClB,IAAI,CAACT,KAAK,CAACU,GAAN,CAAUD,IAAI,CAACE,IAAf,CAAL,EAA2B;QACzBJ,WAAW,GAAG,IAAd;QACA;MACD;;MAED,IAAIA,WAAW,KAAK,IAApB,EAA0B;QACxBA,WAAW,GAAGE,IAAd;QACA;MACD;;MAED,IAAIG,UAAU,GAAGf,aAAa,CAACY,IAAI,CAACE,IAAN,CAA9B;;MAEA,IAAIF,IAAI,CAACE,IAAL,KAAc,QAAd,IAA0BF,IAAI,CAACI,IAAL,KAAc,WAA5C,EAAyD;QACvDN,WAAW,GAAGE,IAAd;MACD,CAFD,MAEO,IACLG,UAAU,CAACE,KAAX,CACGC,QAAD,IACE,CAACN,IAAI,CAACM,QAAD,CAAJ,IAAkB,EAAnB,EAAuBC,OAAvB,CAA+B,MAA/B,EAAuC,GAAvC,MACA,CAACT,WAAW,CAACQ,QAAD,CAAX,IAAyB,EAA1B,EAA8BC,OAA9B,CAAsC,MAAtC,EAA8C,GAA9C,CAHJ,CADK,EAML;QACA;QACA,IAAIP,IAAI,CAACQ,KAAT,EAAgB;UACdV,WAAW,CAACW,MAAZ,CAAmBT,IAAI,CAACQ,KAAxB;QACD;;QAEDR,IAAI,CAACU,MAAL;MACD,CAbM,MAaA;QACLZ,WAAW,GAAGE,IAAd;MACD;IACF,CA/BD,EAF6B,CAmC7B;IACA;IACA;IACA;IACA;;IACAH,IAAI,CAACE,IAAL,CAAWC,IAAD,IAAU;MAClB,IAAIA,IAAI,CAACE,IAAL,KAAc,QAAlB,EAA4B;QAC1BN,eAAe,CAACI,IAAD,CAAf;MACD;IACF,CAJD;EAKD;;EAED,OAAQH,IAAD,IAAU;IACfD,eAAe,CAACC,IAAD,CAAf;EACD,CAFD;AAGD"},"metadata":{},"sourceType":"module"}