{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nfunction isEmptyFunction(node) {\n  if (!(0, _utils.isFunction)(node)) {\n    return false;\n  }\n\n  return node.body.type === _experimentalUtils.AST_NODE_TYPES.BlockStatement && !node.body.body.length;\n}\n\nfunction createTodoFixer(node, fixer) {\n  const testName = (0, _utils.getNodeName)(node).split('.').shift();\n  return fixer.replaceText(node.callee, `${testName}.todo`);\n}\n\nconst isTargetedTestCase = node => (0, _utils.isTestCaseCall)(node) && [_utils.TestCaseName.it, _utils.TestCaseName.test, 'it.skip', 'test.skip'].includes((0, _utils.getNodeName)(node));\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Suggest using `test.todo`',\n      recommended: false\n    },\n    messages: {\n      emptyTest: 'Prefer todo test case over empty test case',\n      unimplementedTest: 'Prefer todo test case over unimplemented test case'\n    },\n    fixable: 'code',\n    schema: [],\n    type: 'layout'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        const [title, callback] = node.arguments;\n\n        if (!title || !isTargetedTestCase(node) || !(0, _utils.isStringNode)(title)) {\n          return;\n        }\n\n        if (callback && isEmptyFunction(callback)) {\n          context.report({\n            messageId: 'emptyTest',\n            node,\n            fix: fixer => [fixer.removeRange([title.range[1], callback.range[1]]), createTodoFixer(node, fixer)]\n          });\n        }\n\n        if ((0, _utils.hasOnlyOneArgument)(node)) {\n          context.report({\n            messageId: 'unimplementedTest',\n            node,\n            fix: fixer => [createTodoFixer(node, fixer)]\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","isEmptyFunction","node","isFunction","body","type","AST_NODE_TYPES","BlockStatement","length","createTodoFixer","fixer","testName","getNodeName","split","shift","replaceText","callee","isTargetedTestCase","isTestCaseCall","TestCaseName","it","test","includes","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","emptyTest","unimplementedTest","fixable","schema","defaultOptions","create","context","CallExpression","title","callback","arguments","isStringNode","report","messageId","fix","removeRange","range","hasOnlyOneArgument"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/prefer-todo.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nfunction isEmptyFunction(node) {\n  if (!(0, _utils.isFunction)(node)) {\n    return false;\n  }\n\n  return node.body.type === _experimentalUtils.AST_NODE_TYPES.BlockStatement && !node.body.body.length;\n}\n\nfunction createTodoFixer(node, fixer) {\n  const testName = (0, _utils.getNodeName)(node).split('.').shift();\n  return fixer.replaceText(node.callee, `${testName}.todo`);\n}\n\nconst isTargetedTestCase = node => (0, _utils.isTestCaseCall)(node) && [_utils.TestCaseName.it, _utils.TestCaseName.test, 'it.skip', 'test.skip'].includes((0, _utils.getNodeName)(node));\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Suggest using `test.todo`',\n      recommended: false\n    },\n    messages: {\n      emptyTest: 'Prefer todo test case over empty test case',\n      unimplementedTest: 'Prefer todo test case over unimplemented test case'\n    },\n    fixable: 'code',\n    schema: [],\n    type: 'layout'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        const [title, callback] = node.arguments;\n\n        if (!title || !isTargetedTestCase(node) || !(0, _utils.isStringNode)(title)) {\n          return;\n        }\n\n        if (callback && isEmptyFunction(callback)) {\n          context.report({\n            messageId: 'emptyTest',\n            node,\n            fix: fixer => [fixer.removeRange([title.range[1], callback.range[1]]), createTodoFixer(node, fixer)]\n          });\n        }\n\n        if ((0, _utils.hasOnlyOneArgument)(node)) {\n          context.report({\n            messageId: 'unimplementedTest',\n            node,\n            fix: fixer => [createTodoFixer(node, fixer)]\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}