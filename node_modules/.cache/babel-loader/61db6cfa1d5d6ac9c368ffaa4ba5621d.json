{"ast":null,"code":"/**\n * @fileoverview Common defaultProps detection functionality.\n */\n'use strict';\n\nconst fromEntries = require('object.fromentries');\n\nconst astUtil = require('./ast');\n\nconst componentUtil = require('./componentUtil');\n\nconst propsUtil = require('./props');\n\nconst variableUtil = require('./variable');\n\nconst propWrapperUtil = require('./propWrapper');\n\nconst QUOTES_REGEX = /^[\"']|[\"']$/g;\n\nmodule.exports = function defaultPropsInstructions(context, components, utils) {\n  const sourceCode = context.getSourceCode();\n  /**\n   * Try to resolve the node passed in to a variable in the current scope. If the node passed in is not\n   * an Identifier, then the node is simply returned.\n   * @param   {ASTNode} node The node to resolve.\n   * @returns {ASTNode|null} Return null if the value could not be resolved, ASTNode otherwise.\n   */\n\n  function resolveNodeValue(node) {\n    if (node.type === 'Identifier') {\n      return variableUtil.findVariableByName(context, node.name);\n    }\n\n    if (node.type === 'CallExpression' && propWrapperUtil.isPropWrapperFunction(context, node.callee.name) && node.arguments && node.arguments[0]) {\n      return resolveNodeValue(node.arguments[0]);\n    }\n\n    return node;\n  }\n  /**\n   * Extracts a DefaultProp from an ObjectExpression node.\n   * @param   {ASTNode} objectExpression ObjectExpression node.\n   * @returns {Object|string}            Object representation of a defaultProp, to be consumed by\n   *                                     `addDefaultPropsToComponent`, or string \"unresolved\", if the defaultProps\n   *                                     from this ObjectExpression can't be resolved.\n   */\n\n\n  function getDefaultPropsFromObjectExpression(objectExpression) {\n    const hasSpread = objectExpression.properties.find(property => property.type === 'ExperimentalSpreadProperty' || property.type === 'SpreadElement');\n\n    if (hasSpread) {\n      return 'unresolved';\n    }\n\n    return objectExpression.properties.map(defaultProp => ({\n      name: sourceCode.getText(defaultProp.key).replace(QUOTES_REGEX, ''),\n      node: defaultProp\n    }));\n  }\n  /**\n   * Marks a component's DefaultProps declaration as \"unresolved\". A component's DefaultProps is\n   * marked as \"unresolved\" if we cannot safely infer the values of its defaultProps declarations\n   * without risking false negatives.\n   * @param   {Object} component The component to mark.\n   * @returns {void}\n   */\n\n\n  function markDefaultPropsAsUnresolved(component) {\n    components.set(component.node, {\n      defaultProps: 'unresolved'\n    });\n  }\n  /**\n   * Adds defaultProps to the component passed in.\n   * @param   {ASTNode}         component    The component to add the defaultProps to.\n   * @param   {Object[]|'unresolved'} defaultProps defaultProps to add to the component or the string \"unresolved\"\n   *                                         if this component has defaultProps that can't be resolved.\n   * @returns {void}\n   */\n\n\n  function addDefaultPropsToComponent(component, defaultProps) {\n    // Early return if this component's defaultProps is already marked as \"unresolved\".\n    if (component.defaultProps === 'unresolved') {\n      return;\n    }\n\n    if (defaultProps === 'unresolved') {\n      markDefaultPropsAsUnresolved(component);\n      return;\n    }\n\n    const defaults = component.defaultProps || {};\n    const newDefaultProps = Object.assign({}, defaults, fromEntries(defaultProps.map(prop => [prop.name, prop])));\n    components.set(component.node, {\n      defaultProps: newDefaultProps\n    });\n  }\n\n  return {\n    MemberExpression(node) {\n      const isDefaultProp = propsUtil.isDefaultPropsDeclaration(node);\n\n      if (!isDefaultProp) {\n        return;\n      } // find component this defaultProps belongs to\n\n\n      const component = utils.getRelatedComponent(node);\n\n      if (!component) {\n        return;\n      } // e.g.:\n      // MyComponent.propTypes = {\n      //   foo: React.PropTypes.string.isRequired,\n      //   bar: React.PropTypes.string\n      // };\n      //\n      // or:\n      //\n      // MyComponent.propTypes = myPropTypes;\n\n\n      if (node.parent.type === 'AssignmentExpression') {\n        const expression = resolveNodeValue(node.parent.right);\n\n        if (!expression || expression.type !== 'ObjectExpression') {\n          // If a value can't be found, we mark the defaultProps declaration as \"unresolved\", because\n          // we should ignore this component and not report any errors for it, to avoid false-positives\n          // with e.g. external defaultProps declarations.\n          if (isDefaultProp) {\n            markDefaultPropsAsUnresolved(component);\n          }\n\n          return;\n        }\n\n        addDefaultPropsToComponent(component, getDefaultPropsFromObjectExpression(expression));\n        return;\n      } // e.g.:\n      // MyComponent.propTypes.baz = React.PropTypes.string;\n\n\n      if (node.parent.type === 'MemberExpression' && node.parent.parent && node.parent.parent.type === 'AssignmentExpression') {\n        addDefaultPropsToComponent(component, [{\n          name: node.parent.property.name,\n          node: node.parent.parent\n        }]);\n      }\n    },\n\n    // e.g.:\n    // class Hello extends React.Component {\n    //   static get defaultProps() {\n    //     return {\n    //       name: 'Dean'\n    //     };\n    //   }\n    //   render() {\n    //     return <div>Hello {this.props.name}</div>;\n    //   }\n    // }\n    MethodDefinition(node) {\n      if (!node.static || node.kind !== 'get') {\n        return;\n      }\n\n      if (!propsUtil.isDefaultPropsDeclaration(node)) {\n        return;\n      } // find component this propTypes/defaultProps belongs to\n\n\n      const component = components.get(componentUtil.getParentES6Component(context));\n\n      if (!component) {\n        return;\n      }\n\n      const returnStatement = utils.findReturnStatement(node);\n\n      if (!returnStatement) {\n        return;\n      }\n\n      const expression = resolveNodeValue(returnStatement.argument);\n\n      if (!expression || expression.type !== 'ObjectExpression') {\n        return;\n      }\n\n      addDefaultPropsToComponent(component, getDefaultPropsFromObjectExpression(expression));\n    },\n\n    // e.g.:\n    // class Greeting extends React.Component {\n    //   render() {\n    //     return (\n    //       <h1>Hello, {this.props.foo} {this.props.bar}</h1>\n    //     );\n    //   }\n    //   static defaultProps = {\n    //     foo: 'bar',\n    //     bar: 'baz'\n    //   };\n    // }\n    'ClassProperty, PropertyDefinition'(node) {\n      if (!(node.static && node.value)) {\n        return;\n      }\n\n      const propName = astUtil.getPropertyName(node);\n      const isDefaultProp = propName === 'defaultProps' || propName === 'getDefaultProps';\n\n      if (!isDefaultProp) {\n        return;\n      } // find component this propTypes/defaultProps belongs to\n\n\n      const component = components.get(componentUtil.getParentES6Component(context));\n\n      if (!component) {\n        return;\n      }\n\n      const expression = resolveNodeValue(node.value);\n\n      if (!expression || expression.type !== 'ObjectExpression') {\n        return;\n      }\n\n      addDefaultPropsToComponent(component, getDefaultPropsFromObjectExpression(expression));\n    },\n\n    // e.g.:\n    // React.createClass({\n    //   render: function() {\n    //     return <div>{this.props.foo}</div>;\n    //   },\n    //   getDefaultProps: function() {\n    //     return {\n    //       foo: 'default'\n    //     };\n    //   }\n    // });\n    ObjectExpression(node) {\n      // find component this propTypes/defaultProps belongs to\n      const component = componentUtil.isES5Component(node, context) && components.get(node);\n\n      if (!component) {\n        return;\n      } // Search for the proptypes declaration\n\n\n      node.properties.forEach(property => {\n        if (property.type === 'ExperimentalSpreadProperty' || property.type === 'SpreadElement') {\n          return;\n        }\n\n        const isDefaultProp = propsUtil.isDefaultPropsDeclaration(property);\n\n        if (isDefaultProp && property.value.type === 'FunctionExpression') {\n          const returnStatement = utils.findReturnStatement(property);\n\n          if (!returnStatement || returnStatement.argument.type !== 'ObjectExpression') {\n            return;\n          }\n\n          addDefaultPropsToComponent(component, getDefaultPropsFromObjectExpression(returnStatement.argument));\n        }\n      });\n    }\n\n  };\n};","map":{"version":3,"names":["fromEntries","require","astUtil","componentUtil","propsUtil","variableUtil","propWrapperUtil","QUOTES_REGEX","module","exports","defaultPropsInstructions","context","components","utils","sourceCode","getSourceCode","resolveNodeValue","node","type","findVariableByName","name","isPropWrapperFunction","callee","arguments","getDefaultPropsFromObjectExpression","objectExpression","hasSpread","properties","find","property","map","defaultProp","getText","key","replace","markDefaultPropsAsUnresolved","component","set","defaultProps","addDefaultPropsToComponent","defaults","newDefaultProps","Object","assign","prop","MemberExpression","isDefaultProp","isDefaultPropsDeclaration","getRelatedComponent","parent","expression","right","MethodDefinition","static","kind","get","getParentES6Component","returnStatement","findReturnStatement","argument","value","propName","getPropertyName","ObjectExpression","isES5Component","forEach"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/util/defaultProps.js"],"sourcesContent":["/**\n * @fileoverview Common defaultProps detection functionality.\n */\n\n'use strict';\n\nconst fromEntries = require('object.fromentries');\nconst astUtil = require('./ast');\nconst componentUtil = require('./componentUtil');\nconst propsUtil = require('./props');\nconst variableUtil = require('./variable');\nconst propWrapperUtil = require('./propWrapper');\n\nconst QUOTES_REGEX = /^[\"']|[\"']$/g;\n\nmodule.exports = function defaultPropsInstructions(context, components, utils) {\n  const sourceCode = context.getSourceCode();\n\n  /**\n   * Try to resolve the node passed in to a variable in the current scope. If the node passed in is not\n   * an Identifier, then the node is simply returned.\n   * @param   {ASTNode} node The node to resolve.\n   * @returns {ASTNode|null} Return null if the value could not be resolved, ASTNode otherwise.\n   */\n  function resolveNodeValue(node) {\n    if (node.type === 'Identifier') {\n      return variableUtil.findVariableByName(context, node.name);\n    }\n    if (\n      node.type === 'CallExpression'\n      && propWrapperUtil.isPropWrapperFunction(context, node.callee.name)\n      && node.arguments && node.arguments[0]\n    ) {\n      return resolveNodeValue(node.arguments[0]);\n    }\n    return node;\n  }\n\n  /**\n   * Extracts a DefaultProp from an ObjectExpression node.\n   * @param   {ASTNode} objectExpression ObjectExpression node.\n   * @returns {Object|string}            Object representation of a defaultProp, to be consumed by\n   *                                     `addDefaultPropsToComponent`, or string \"unresolved\", if the defaultProps\n   *                                     from this ObjectExpression can't be resolved.\n   */\n  function getDefaultPropsFromObjectExpression(objectExpression) {\n    const hasSpread = objectExpression.properties.find((property) => property.type === 'ExperimentalSpreadProperty' || property.type === 'SpreadElement');\n\n    if (hasSpread) {\n      return 'unresolved';\n    }\n\n    return objectExpression.properties.map((defaultProp) => ({\n      name: sourceCode.getText(defaultProp.key).replace(QUOTES_REGEX, ''),\n      node: defaultProp,\n    }));\n  }\n\n  /**\n   * Marks a component's DefaultProps declaration as \"unresolved\". A component's DefaultProps is\n   * marked as \"unresolved\" if we cannot safely infer the values of its defaultProps declarations\n   * without risking false negatives.\n   * @param   {Object} component The component to mark.\n   * @returns {void}\n   */\n  function markDefaultPropsAsUnresolved(component) {\n    components.set(component.node, {\n      defaultProps: 'unresolved',\n    });\n  }\n\n  /**\n   * Adds defaultProps to the component passed in.\n   * @param   {ASTNode}         component    The component to add the defaultProps to.\n   * @param   {Object[]|'unresolved'} defaultProps defaultProps to add to the component or the string \"unresolved\"\n   *                                         if this component has defaultProps that can't be resolved.\n   * @returns {void}\n   */\n  function addDefaultPropsToComponent(component, defaultProps) {\n    // Early return if this component's defaultProps is already marked as \"unresolved\".\n    if (component.defaultProps === 'unresolved') {\n      return;\n    }\n\n    if (defaultProps === 'unresolved') {\n      markDefaultPropsAsUnresolved(component);\n      return;\n    }\n\n    const defaults = component.defaultProps || {};\n    const newDefaultProps = Object.assign(\n      {},\n      defaults,\n      fromEntries(defaultProps.map((prop) => [prop.name, prop]))\n    );\n\n    components.set(component.node, {\n      defaultProps: newDefaultProps,\n    });\n  }\n\n  return {\n    MemberExpression(node) {\n      const isDefaultProp = propsUtil.isDefaultPropsDeclaration(node);\n\n      if (!isDefaultProp) {\n        return;\n      }\n\n      // find component this defaultProps belongs to\n      const component = utils.getRelatedComponent(node);\n      if (!component) {\n        return;\n      }\n\n      // e.g.:\n      // MyComponent.propTypes = {\n      //   foo: React.PropTypes.string.isRequired,\n      //   bar: React.PropTypes.string\n      // };\n      //\n      // or:\n      //\n      // MyComponent.propTypes = myPropTypes;\n      if (node.parent.type === 'AssignmentExpression') {\n        const expression = resolveNodeValue(node.parent.right);\n        if (!expression || expression.type !== 'ObjectExpression') {\n          // If a value can't be found, we mark the defaultProps declaration as \"unresolved\", because\n          // we should ignore this component and not report any errors for it, to avoid false-positives\n          // with e.g. external defaultProps declarations.\n          if (isDefaultProp) {\n            markDefaultPropsAsUnresolved(component);\n          }\n\n          return;\n        }\n\n        addDefaultPropsToComponent(component, getDefaultPropsFromObjectExpression(expression));\n\n        return;\n      }\n\n      // e.g.:\n      // MyComponent.propTypes.baz = React.PropTypes.string;\n      if (node.parent.type === 'MemberExpression' && node.parent.parent\n        && node.parent.parent.type === 'AssignmentExpression') {\n        addDefaultPropsToComponent(component, [{\n          name: node.parent.property.name,\n          node: node.parent.parent,\n        }]);\n      }\n    },\n\n    // e.g.:\n    // class Hello extends React.Component {\n    //   static get defaultProps() {\n    //     return {\n    //       name: 'Dean'\n    //     };\n    //   }\n    //   render() {\n    //     return <div>Hello {this.props.name}</div>;\n    //   }\n    // }\n    MethodDefinition(node) {\n      if (!node.static || node.kind !== 'get') {\n        return;\n      }\n\n      if (!propsUtil.isDefaultPropsDeclaration(node)) {\n        return;\n      }\n\n      // find component this propTypes/defaultProps belongs to\n      const component = components.get(componentUtil.getParentES6Component(context));\n      if (!component) {\n        return;\n      }\n\n      const returnStatement = utils.findReturnStatement(node);\n      if (!returnStatement) {\n        return;\n      }\n\n      const expression = resolveNodeValue(returnStatement.argument);\n      if (!expression || expression.type !== 'ObjectExpression') {\n        return;\n      }\n\n      addDefaultPropsToComponent(component, getDefaultPropsFromObjectExpression(expression));\n    },\n\n    // e.g.:\n    // class Greeting extends React.Component {\n    //   render() {\n    //     return (\n    //       <h1>Hello, {this.props.foo} {this.props.bar}</h1>\n    //     );\n    //   }\n    //   static defaultProps = {\n    //     foo: 'bar',\n    //     bar: 'baz'\n    //   };\n    // }\n    'ClassProperty, PropertyDefinition'(node) {\n      if (!(node.static && node.value)) {\n        return;\n      }\n\n      const propName = astUtil.getPropertyName(node);\n      const isDefaultProp = propName === 'defaultProps' || propName === 'getDefaultProps';\n\n      if (!isDefaultProp) {\n        return;\n      }\n\n      // find component this propTypes/defaultProps belongs to\n      const component = components.get(componentUtil.getParentES6Component(context));\n      if (!component) {\n        return;\n      }\n\n      const expression = resolveNodeValue(node.value);\n      if (!expression || expression.type !== 'ObjectExpression') {\n        return;\n      }\n\n      addDefaultPropsToComponent(component, getDefaultPropsFromObjectExpression(expression));\n    },\n\n    // e.g.:\n    // React.createClass({\n    //   render: function() {\n    //     return <div>{this.props.foo}</div>;\n    //   },\n    //   getDefaultProps: function() {\n    //     return {\n    //       foo: 'default'\n    //     };\n    //   }\n    // });\n    ObjectExpression(node) {\n      // find component this propTypes/defaultProps belongs to\n      const component = componentUtil.isES5Component(node, context) && components.get(node);\n      if (!component) {\n        return;\n      }\n\n      // Search for the proptypes declaration\n      node.properties.forEach((property) => {\n        if (property.type === 'ExperimentalSpreadProperty' || property.type === 'SpreadElement') {\n          return;\n        }\n\n        const isDefaultProp = propsUtil.isDefaultPropsDeclaration(property);\n\n        if (isDefaultProp && property.value.type === 'FunctionExpression') {\n          const returnStatement = utils.findReturnStatement(property);\n          if (!returnStatement || returnStatement.argument.type !== 'ObjectExpression') {\n            return;\n          }\n\n          addDefaultPropsToComponent(component, getDefaultPropsFromObjectExpression(returnStatement.argument));\n        }\n      });\n    },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}