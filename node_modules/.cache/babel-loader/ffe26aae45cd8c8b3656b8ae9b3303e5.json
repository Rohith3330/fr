{"ast":null,"code":"import expect from 'expect';\nimport { elementType } from 'jsx-ast-utils';\nimport hasAccessibleChild from '../../../src/util/hasAccessibleChild';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXExpressionContainerMock from '../../../__mocks__/JSXExpressionContainerMock';\ndescribe('hasAccessibleChild', () => {\n  describe('has no children and does not set dangerouslySetInnerHTML', () => {\n    it('returns false', () => {\n      expect(hasAccessibleChild(JSXElementMock('div', []), elementType)).toBe(false);\n    });\n  });\n  describe('has no children and sets dangerouslySetInnerHTML', () => {\n    it('Returns true', () => {\n      const prop = JSXAttributeMock('dangerouslySetInnerHTML', true);\n      const element = JSXElementMock('div', [prop], []);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n  });\n  describe('has children', () => {\n    it('Returns true for a Literal child', () => {\n      const child = {\n        type: 'Literal',\n        value: 'foo'\n      };\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n    it('Returns true for visible child JSXElement', () => {\n      const child = JSXElementMock('div', []);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n    it('Returns true for JSXText Element', () => {\n      const child = {\n        type: 'JSXText',\n        value: 'foo'\n      };\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n    it('Returns false for hidden child JSXElement', () => {\n      const ariaHiddenAttr = JSXAttributeMock('aria-hidden', true);\n      const child = JSXElementMock('div', [ariaHiddenAttr]);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(false);\n    });\n    it('Returns true for defined JSXExpressionContainer', () => {\n      const expression = {\n        type: 'Identifier',\n        name: 'foo'\n      };\n      const child = JSXExpressionContainerMock(expression);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n    it('Returns false for undefined JSXExpressionContainer', () => {\n      const expression = {\n        type: 'Identifier',\n        name: 'undefined'\n      };\n      const child = JSXExpressionContainerMock(expression);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(false);\n    });\n    it('Returns false for unknown child type', () => {\n      const child = {\n        type: 'Unknown'\n      };\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(false);\n    });\n    it('Returns true with children passed as a prop', () => {\n      const children = JSXAttributeMock('children', true);\n      const element = JSXElementMock('div', [children], []);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n    it('Returns false for hidden child input JSXElement', () => {\n      const child = JSXElementMock('input', [JSXAttributeMock('type', 'hidden')]);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(false);\n    });\n    it('Returns true for a custom JSXElement even if type hidden', () => {\n      const child = JSXElementMock('CustomInput', [JSXAttributeMock('type', 'hidden')]);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n    it('Returns false for a custom JSXElement mapped to input if type is hidden', () => {\n      const child = JSXElementMock('CustomInput', [JSXAttributeMock('type', 'hidden')]);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, () => 'input')).toBe(false);\n    });\n  });\n});","map":{"version":3,"names":["expect","elementType","hasAccessibleChild","JSXElementMock","JSXAttributeMock","JSXExpressionContainerMock","describe","it","toBe","prop","element","child","type","value","ariaHiddenAttr","expression","name","children"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/hasAccessibleChild-test.js"],"sourcesContent":["import expect from 'expect';\nimport { elementType } from 'jsx-ast-utils';\nimport hasAccessibleChild from '../../../src/util/hasAccessibleChild';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXExpressionContainerMock from '../../../__mocks__/JSXExpressionContainerMock';\n\ndescribe('hasAccessibleChild', () => {\n  describe('has no children and does not set dangerouslySetInnerHTML', () => {\n    it('returns false', () => {\n      expect(hasAccessibleChild(JSXElementMock('div', []), elementType)).toBe(false);\n    });\n  });\n\n  describe('has no children and sets dangerouslySetInnerHTML', () => {\n    it('Returns true', () => {\n      const prop = JSXAttributeMock('dangerouslySetInnerHTML', true);\n      const element = JSXElementMock('div', [prop], []);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n  });\n\n  describe('has children', () => {\n    it('Returns true for a Literal child', () => {\n      const child = {\n        type: 'Literal',\n        value: 'foo',\n      };\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n\n    it('Returns true for visible child JSXElement', () => {\n      const child = JSXElementMock('div', []);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n\n    it('Returns true for JSXText Element', () => {\n      const child = {\n        type: 'JSXText',\n        value: 'foo',\n      };\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n\n    it('Returns false for hidden child JSXElement', () => {\n      const ariaHiddenAttr = JSXAttributeMock('aria-hidden', true);\n      const child = JSXElementMock('div', [ariaHiddenAttr]);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(false);\n    });\n\n    it('Returns true for defined JSXExpressionContainer', () => {\n      const expression = {\n        type: 'Identifier',\n        name: 'foo',\n      };\n      const child = JSXExpressionContainerMock(expression);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n\n    it('Returns false for undefined JSXExpressionContainer', () => {\n      const expression = {\n        type: 'Identifier',\n        name: 'undefined',\n      };\n      const child = JSXExpressionContainerMock(expression);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(false);\n    });\n\n    it('Returns false for unknown child type', () => {\n      const child = {\n        type: 'Unknown',\n      };\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(false);\n    });\n\n    it('Returns true with children passed as a prop', () => {\n      const children = JSXAttributeMock('children', true);\n      const element = JSXElementMock('div', [children], []);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n\n    it('Returns false for hidden child input JSXElement', () => {\n      const child = JSXElementMock('input', [JSXAttributeMock('type', 'hidden')]);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(false);\n    });\n\n    it('Returns true for a custom JSXElement even if type hidden', () => {\n      const child = JSXElementMock('CustomInput', [JSXAttributeMock('type', 'hidden')]);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, elementType)).toBe(true);\n    });\n\n    it('Returns false for a custom JSXElement mapped to input if type is hidden', () => {\n      const child = JSXElementMock('CustomInput', [JSXAttributeMock('type', 'hidden')]);\n      const element = JSXElementMock('div', [], [child]);\n      expect(hasAccessibleChild(element, () => 'input')).toBe(false);\n    });\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}