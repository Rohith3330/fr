{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst crypto = require('crypto');\n\nconst macroCheck = new RegExp('[./]macro');\n\nmodule.exports = function () {\n  return {\n    // This function transforms the Babel configuration on a per-file basis\n    config(config, _ref) {\n      let {\n        source\n      } = _ref;\n\n      // Babel Macros are notoriously hard to cache, so they shouldn't be\n      // https://github.com/babel/babel/issues/8497\n      // We naively detect macros using their package suffix and add a random token\n      // to the caller, a valid option accepted by Babel, to compose a one-time\n      // cacheIdentifier for the file. We cannot tune the loader options on a per\n      // file basis.\n      if (macroCheck.test(source)) {\n        return Object.assign({}, config.options, {\n          caller: Object.assign({}, config.options.caller, {\n            craInvalidationToken: crypto.randomBytes(32).toString('hex')\n          })\n        });\n      }\n\n      return config.options;\n    }\n\n  };\n};","map":{"version":3,"names":["crypto","require","macroCheck","RegExp","module","exports","config","source","test","Object","assign","options","caller","craInvalidationToken","randomBytes","toString"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/babel-preset-react-app/webpack-overrides.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst crypto = require('crypto');\n\nconst macroCheck = new RegExp('[./]macro');\n\nmodule.exports = function () {\n  return {\n    // This function transforms the Babel configuration on a per-file basis\n    config(config, { source }) {\n      // Babel Macros are notoriously hard to cache, so they shouldn't be\n      // https://github.com/babel/babel/issues/8497\n      // We naively detect macros using their package suffix and add a random token\n      // to the caller, a valid option accepted by Babel, to compose a one-time\n      // cacheIdentifier for the file. We cannot tune the loader options on a per\n      // file basis.\n      if (macroCheck.test(source)) {\n        return Object.assign({}, config.options, {\n          caller: Object.assign({}, config.options.caller, {\n            craInvalidationToken: crypto.randomBytes(32).toString('hex'),\n          }),\n        });\n      }\n      return config.options;\n    },\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMC,UAAU,GAAG,IAAIC,MAAJ,CAAW,WAAX,CAAnB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,YAAY;EAC3B,OAAO;IACL;IACAC,MAAM,CAACA,MAAD,QAAqB;MAAA,IAAZ;QAAEC;MAAF,CAAY;;MACzB;MACA;MACA;MACA;MACA;MACA;MACA,IAAIL,UAAU,CAACM,IAAX,CAAgBD,MAAhB,CAAJ,EAA6B;QAC3B,OAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,MAAM,CAACK,OAAzB,EAAkC;UACvCC,MAAM,EAAEH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,MAAM,CAACK,OAAP,CAAeC,MAAjC,EAAyC;YAC/CC,oBAAoB,EAAEb,MAAM,CAACc,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC;UADyB,CAAzC;QAD+B,CAAlC,CAAP;MAKD;;MACD,OAAOT,MAAM,CAACK,OAAd;IACD;;EAjBI,CAAP;AAmBD,CApBD"},"metadata":{},"sourceType":"script"}