{"ast":null,"code":"#!/usr/bin/env node\nimport { lazyPostcss, lazyPostcssImport, lazyCssnano, lazyAutoprefixer } from '../peers/index.js';\nimport chokidar from 'chokidar';\nimport path from 'path';\nimport arg from 'arg';\nimport fs from 'fs';\nimport postcssrc from 'postcss-load-config';\nimport { lilconfig } from 'lilconfig';\nimport loadPlugins from 'postcss-load-config/src/plugins'; // Little bit scary, looking at private/internal API\n\nimport loadOptions from 'postcss-load-config/src/options'; // Little bit scary, looking at private/internal API\n\nimport tailwind from './processTailwindFeatures';\nimport resolveConfigInternal from '../resolveConfig';\nimport fastGlob from 'fast-glob';\nimport getModuleDependencies from './lib/getModuleDependencies';\nimport log from './util/log';\nimport packageJson from '../package.json';\nimport normalizePath from 'normalize-path';\nimport { validateConfig } from './util/validateConfig.js';\nlet env = {\n  DEBUG: process.env.DEBUG !== undefined && process.env.DEBUG !== '0'\n};\n\nfunction isESM() {\n  const pkgPath = path.resolve('./package.json');\n\n  try {\n    let pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));\n    return pkg.type && pkg.type === 'module';\n  } catch (err) {\n    return false;\n  }\n}\n\nlet configs = isESM() ? {\n  tailwind: 'tailwind.config.cjs',\n  postcss: 'postcss.config.cjs'\n} : {\n  tailwind: 'tailwind.config.js',\n  postcss: 'postcss.config.js'\n}; // ---\n\nfunction indentRecursive(node) {\n  let indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  node.each && node.each((child, i) => {\n    if (!child.raws.before || !child.raws.before.trim() || child.raws.before.includes('\\n')) {\n      child.raws.before = `\\n${node.type !== 'rule' && i > 0 ? '\\n' : ''}${'  '.repeat(indent)}`;\n    }\n\n    child.raws.after = `\\n${'  '.repeat(indent)}`;\n    indentRecursive(child, indent + 1);\n  });\n}\n\nfunction formatNodes(root) {\n  indentRecursive(root);\n\n  if (root.first) {\n    root.first.raws.before = '';\n  }\n}\n\nasync function outputFile(file, contents) {\n  if (fs.existsSync(file) && (await fs.promises.readFile(file, 'utf8')) === contents) {\n    return; // Skip writing the file\n  } // Write the file\n\n\n  await fs.promises.writeFile(file, contents, 'utf8');\n}\n\nfunction drainStdin() {\n  return new Promise((resolve, reject) => {\n    let result = '';\n    process.stdin.on('data', chunk => {\n      result += chunk;\n    });\n    process.stdin.on('end', () => resolve(result));\n    process.stdin.on('error', err => reject(err));\n  });\n}\n\nfunction help(_ref) {\n  let {\n    message,\n    usage,\n    commands,\n    options\n  } = _ref;\n  let indent = 2; // Render header\n\n  console.log();\n  console.log(`${packageJson.name} v${packageJson.version}`); // Render message\n\n  if (message) {\n    console.log();\n\n    for (let msg of message.split('\\n')) {\n      console.log(msg);\n    }\n  } // Render usage\n\n\n  if (usage && usage.length > 0) {\n    console.log();\n    console.log('Usage:');\n\n    for (let example of usage) {\n      console.log(' '.repeat(indent), example);\n    }\n  } // Render commands\n\n\n  if (commands && commands.length > 0) {\n    console.log();\n    console.log('Commands:');\n\n    for (let command of commands) {\n      console.log(' '.repeat(indent), command);\n    }\n  } // Render options\n\n\n  if (options) {\n    let groupedOptions = {};\n\n    for (let [key, value] of Object.entries(options)) {\n      if (typeof value === 'object') {\n        groupedOptions[key] = { ...value,\n          flags: [key]\n        };\n      } else {\n        groupedOptions[value].flags.push(key);\n      }\n    }\n\n    console.log();\n    console.log('Options:');\n\n    for (let {\n      flags,\n      description,\n      deprecated\n    } of Object.values(groupedOptions)) {\n      if (deprecated) continue;\n\n      if (flags.length === 1) {\n        console.log(' '.repeat(indent + 4\n        /* 4 = \"-i, \".length */\n        ), flags.slice().reverse().join(', ').padEnd(20, ' '), description);\n      } else {\n        console.log(' '.repeat(indent), flags.slice().reverse().join(', ').padEnd(24, ' '), description);\n      }\n    }\n  }\n\n  console.log();\n}\n\nfunction oneOf() {\n  for (var _len = arguments.length, options = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n    options[_key2] = arguments[_key2];\n  }\n\n  return Object.assign(function () {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    for (let option of options) {\n      let parsed = option(value);\n\n      if (parsed === value) {\n        return parsed;\n      }\n    }\n\n    throw new Error('...');\n  }, {\n    manualParsing: true\n  });\n}\n\nfunction loadPostcss() {\n  // Try to load a local `postcss` version first\n  try {\n    return require('postcss');\n  } catch {}\n\n  return lazyPostcss();\n}\n\nlet commands = {\n  init: {\n    run: init,\n    args: {\n      '--full': {\n        type: Boolean,\n        description: `Initialize a full \\`${configs.tailwind}\\` file`\n      },\n      '--postcss': {\n        type: Boolean,\n        description: `Initialize a \\`${configs.postcss}\\` file`\n      },\n      '-f': '--full',\n      '-p': '--postcss'\n    }\n  },\n  build: {\n    run: build,\n    args: {\n      '--input': {\n        type: String,\n        description: 'Input file'\n      },\n      '--output': {\n        type: String,\n        description: 'Output file'\n      },\n      '--watch': {\n        type: Boolean,\n        description: 'Watch for changes and rebuild as needed'\n      },\n      '--poll': {\n        type: Boolean,\n        description: 'Use polling instead of filesystem events when watching'\n      },\n      '--content': {\n        type: String,\n        description: 'Content paths to use for removing unused classes'\n      },\n      '--purge': {\n        type: String,\n        deprecated: true\n      },\n      '--postcss': {\n        type: oneOf(String, Boolean),\n        description: 'Load custom PostCSS configuration'\n      },\n      '--minify': {\n        type: Boolean,\n        description: 'Minify the output'\n      },\n      '--config': {\n        type: String,\n        description: 'Path to a custom config file'\n      },\n      '--no-autoprefixer': {\n        type: Boolean,\n        description: 'Disable autoprefixer'\n      },\n      '-c': '--config',\n      '-i': '--input',\n      '-o': '--output',\n      '-m': '--minify',\n      '-w': '--watch',\n      '-p': '--poll'\n    }\n  }\n};\nlet sharedFlags = {\n  '--help': {\n    type: Boolean,\n    description: 'Display usage information'\n  },\n  '-h': '--help'\n};\n\nif (process.stdout.isTTY\n/* Detect redirecting output to a file */\n&& (process.argv[2] === undefined || process.argv.slice(2).every(flag => sharedFlags[flag] !== undefined))) {\n  help({\n    usage: ['tailwindcss [--input input.css] [--output output.css] [--watch] [options...]', 'tailwindcss init [--full] [--postcss] [options...]'],\n    commands: Object.keys(commands).filter(command => command !== 'build').map(command => `${command} [options]`),\n    options: { ...commands.build.args,\n      ...sharedFlags\n    }\n  });\n  process.exit(0);\n}\n\nlet command = function () {\n  let arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return arg.startsWith('-') ? undefined : arg;\n}(process.argv[2]) || 'build';\n\nif (commands[command] === undefined) {\n  if (fs.existsSync(path.resolve(command))) {\n    // TODO: Deprecate this in future versions\n    // Check if non-existing command, might be a file.\n    command = 'build';\n  } else {\n    help({\n      message: `Invalid command: ${command}`,\n      usage: ['tailwindcss <command> [options]'],\n      commands: Object.keys(commands).filter(command => command !== 'build').map(command => `${command} [options]`),\n      options: sharedFlags\n    });\n    process.exit(1);\n  }\n} // Execute command\n\n\nlet {\n  args: flags,\n  run\n} = commands[command];\n\nlet args = (() => {\n  try {\n    let result = arg(Object.fromEntries(Object.entries({ ...flags,\n      ...sharedFlags\n    }).filter(_ref2 => {\n      let [_key, value] = _ref2;\n      return !value?.type?.manualParsing;\n    }).map(_ref3 => {\n      let [key, value] = _ref3;\n      return [key, typeof value === 'object' ? value.type : value];\n    })), {\n      permissive: true\n    }); // Manual parsing of flags to allow for special flags like oneOf(Boolean, String)\n\n    for (let i = result['_'].length - 1; i >= 0; --i) {\n      let flag = result['_'][i];\n      if (!flag.startsWith('-')) continue;\n      let flagName = flag;\n      let handler = flags[flag]; // Resolve flagName & handler\n\n      while (typeof handler === 'string') {\n        flagName = handler;\n        handler = flags[handler];\n      }\n\n      if (!handler) continue;\n      let args = [];\n      let offset = i + 1; // Parse args for current flag\n\n      while (result['_'][offset] && !result['_'][offset].startsWith('-')) {\n        args.push(result['_'][offset++]);\n      } // Cleanup manually parsed flags + args\n\n\n      result['_'].splice(i, 1 + args.length); // Set the resolved value in the `result` object\n\n      result[flagName] = handler.type(args.length === 0 ? undefined : args.length === 1 ? args[0] : args, flagName);\n    } // Ensure that the `command` is always the first argument in the `args`.\n    // This is important so that we don't have to check if a default command\n    // (build) was used or not from within each plugin.\n    //\n    // E.g.: tailwindcss input.css -> _: ['build', 'input.css']\n    // E.g.: tailwindcss build input.css -> _: ['build', 'input.css']\n\n\n    if (result['_'][0] !== command) {\n      result['_'].unshift(command);\n    }\n\n    return result;\n  } catch (err) {\n    if (err.code === 'ARG_UNKNOWN_OPTION') {\n      help({\n        message: err.message,\n        usage: ['tailwindcss <command> [options]'],\n        options: sharedFlags\n      });\n      process.exit(1);\n    }\n\n    throw err;\n  }\n})();\n\nif (args['--help']) {\n  help({\n    options: { ...flags,\n      ...sharedFlags\n    },\n    usage: [`tailwindcss ${command} [options]`]\n  });\n  process.exit(0);\n}\n\nrun(); // ---\n\nfunction init() {\n  let messages = [];\n  let tailwindConfigLocation = path.resolve(args['_'][1] ?? `./${configs.tailwind}`);\n\n  if (fs.existsSync(tailwindConfigLocation)) {\n    messages.push(`${path.basename(tailwindConfigLocation)} already exists.`);\n  } else {\n    let stubFile = fs.readFileSync(args['--full'] ? path.resolve(__dirname, '../stubs/defaultConfig.stub.js') : path.resolve(__dirname, '../stubs/simpleConfig.stub.js'), 'utf8'); // Change colors import\n\n    stubFile = stubFile.replace('../colors', 'tailwindcss/colors');\n    fs.writeFileSync(tailwindConfigLocation, stubFile, 'utf8');\n    messages.push(`Created Tailwind CSS config file: ${path.basename(tailwindConfigLocation)}`);\n  }\n\n  if (args['--postcss']) {\n    let postcssConfigLocation = path.resolve(`./${configs.postcss}`);\n\n    if (fs.existsSync(postcssConfigLocation)) {\n      messages.push(`${path.basename(postcssConfigLocation)} already exists.`);\n    } else {\n      let stubFile = fs.readFileSync(path.resolve(__dirname, '../stubs/defaultPostCssConfig.stub.js'), 'utf8');\n      fs.writeFileSync(postcssConfigLocation, stubFile, 'utf8');\n      messages.push(`Created PostCSS config file: ${path.basename(postcssConfigLocation)}`);\n    }\n  }\n\n  if (messages.length > 0) {\n    console.log();\n\n    for (let message of messages) {\n      console.log(message);\n    }\n  }\n}\n\nasync function build() {\n  let input = args['--input'];\n  let output = args['--output'];\n  let shouldWatch = args['--watch'];\n  let shouldPoll = args['--poll'];\n  let shouldCoalesceWriteEvents = shouldPoll || process.platform === 'win32';\n  let includePostCss = args['--postcss']; // Polling interval in milliseconds\n  // Used only when polling or coalescing add/change events on Windows\n\n  let pollInterval = 10; // TODO: Deprecate this in future versions\n\n  if (!input && args['_'][1]) {\n    console.error('[deprecation] Running tailwindcss without -i, please provide an input file.');\n    input = args['--input'] = args['_'][1];\n  }\n\n  if (input && input !== '-' && !fs.existsSync(input = path.resolve(input))) {\n    console.error(`Specified input file ${args['--input']} does not exist.`);\n    process.exit(9);\n  }\n\n  if (args['--config'] && !fs.existsSync(args['--config'] = path.resolve(args['--config']))) {\n    console.error(`Specified config file ${args['--config']} does not exist.`);\n    process.exit(9);\n  }\n\n  let configPath = args['--config'] ? args['--config'] : (defaultPath => fs.existsSync(defaultPath) ? defaultPath : null)(path.resolve(`./${configs.tailwind}`));\n\n  async function loadPostCssPlugins() {\n    let customPostCssPath = typeof args['--postcss'] === 'string' ? args['--postcss'] : undefined;\n    let config = customPostCssPath ? await (async () => {\n      let file = path.resolve(customPostCssPath); // Implementation, see: https://unpkg.com/browse/postcss-load-config@3.1.0/src/index.js\n\n      let {\n        config = {}\n      } = await lilconfig('postcss').load(file);\n\n      if (typeof config === 'function') {\n        config = config();\n      } else {\n        config = Object.assign({}, config);\n      }\n\n      if (!config.plugins) {\n        config.plugins = [];\n      }\n\n      return {\n        file,\n        plugins: loadPlugins(config, file),\n        options: loadOptions(config, file)\n      };\n    })() : await postcssrc();\n    let configPlugins = config.plugins;\n    let configPluginTailwindIdx = configPlugins.findIndex(plugin => {\n      if (typeof plugin === 'function' && plugin.name === 'tailwindcss') {\n        return true;\n      }\n\n      if (typeof plugin === 'object' && plugin !== null && plugin.postcssPlugin === 'tailwindcss') {\n        return true;\n      }\n\n      return false;\n    });\n    let beforePlugins = configPluginTailwindIdx === -1 ? [] : configPlugins.slice(0, configPluginTailwindIdx);\n    let afterPlugins = configPluginTailwindIdx === -1 ? configPlugins : configPlugins.slice(configPluginTailwindIdx + 1);\n    return [beforePlugins, afterPlugins, config.options];\n  }\n\n  function loadBuiltinPostcssPlugins() {\n    let postcss = loadPostcss();\n    let IMPORT_COMMENT = '__TAILWIND_RESTORE_IMPORT__: ';\n    return [[root => {\n      root.walkAtRules('import', rule => {\n        if (rule.params.slice(1).startsWith('tailwindcss/')) {\n          rule.after(postcss.comment({\n            text: IMPORT_COMMENT + rule.params\n          }));\n          rule.remove();\n        }\n      });\n    }, (() => {\n      try {\n        return require('postcss-import');\n      } catch {}\n\n      return lazyPostcssImport();\n    })(), root => {\n      root.walkComments(rule => {\n        if (rule.text.startsWith(IMPORT_COMMENT)) {\n          rule.after(postcss.atRule({\n            name: 'import',\n            params: rule.text.replace(IMPORT_COMMENT, '')\n          }));\n          rule.remove();\n        }\n      });\n    }], [], {}];\n  }\n\n  function resolveConfig() {\n    let config = configPath ? require(configPath) : {};\n\n    if (args['--purge']) {\n      log.warn('purge-flag-deprecated', ['The `--purge` flag has been deprecated.', 'Please use `--content` instead.']);\n\n      if (!args['--content']) {\n        args['--content'] = args['--purge'];\n      }\n    }\n\n    if (args['--content']) {\n      let files = args['--content'].split(/(?<!{[^}]+),/);\n      let resolvedConfig = resolveConfigInternal(config, {\n        content: {\n          files\n        }\n      });\n      resolvedConfig.content.files = files;\n      resolvedConfig = validateConfig(resolvedConfig);\n      return resolvedConfig;\n    }\n\n    let resolvedConfig = resolveConfigInternal(config);\n    resolvedConfig = validateConfig(resolvedConfig);\n    return resolvedConfig;\n  }\n\n  function extractFileGlobs(config) {\n    return config.content.files.filter(file => {\n      // Strings in this case are files / globs. If it is something else,\n      // like an object it's probably a raw content object. But this object\n      // is not watchable, so let's remove it.\n      return typeof file === 'string';\n    }).map(glob => normalizePath(glob));\n  }\n\n  function extractRawContent(config) {\n    return config.content.files.filter(file => {\n      return typeof file === 'object' && file !== null;\n    });\n  }\n\n  function getChangedContent(config) {\n    let changedContent = []; // Resolve globs from the content config\n\n    let globs = extractFileGlobs(config);\n    let files = fastGlob.sync(globs);\n\n    for (let file of files) {\n      changedContent.push({\n        content: fs.readFileSync(path.resolve(file), 'utf8'),\n        extension: path.extname(file).slice(1)\n      });\n    } // Resolve raw content in the tailwind config\n\n\n    for (let {\n      raw: content,\n      extension = 'html'\n    } of extractRawContent(config)) {\n      changedContent.push({\n        content,\n        extension\n      });\n    }\n\n    return changedContent;\n  }\n\n  async function buildOnce() {\n    let config = resolveConfig();\n    let changedContent = getChangedContent(config);\n\n    let tailwindPlugin = () => {\n      return {\n        postcssPlugin: 'tailwindcss',\n\n        Once(root, _ref4) {\n          let {\n            result\n          } = _ref4;\n          tailwind(_ref5 => {\n            let {\n              createContext\n            } = _ref5;\n            return () => {\n              return createContext(config, changedContent);\n            };\n          })(root, result);\n        }\n\n      };\n    };\n\n    tailwindPlugin.postcss = true;\n    let [beforePlugins, afterPlugins, postcssOptions] = includePostCss ? await loadPostCssPlugins() : loadBuiltinPostcssPlugins();\n    let plugins = [...beforePlugins, tailwindPlugin, !args['--minify'] && formatNodes, ...afterPlugins, !args['--no-autoprefixer'] && (() => {\n      // Try to load a local `autoprefixer` version first\n      try {\n        return require('autoprefixer');\n      } catch {}\n\n      return lazyAutoprefixer();\n    })(), args['--minify'] && (() => {\n      let options = {\n        preset: ['default', {\n          cssDeclarationSorter: false\n        }]\n      }; // Try to load a local `cssnano` version first\n\n      try {\n        return require('cssnano');\n      } catch {}\n\n      return lazyCssnano()(options);\n    })()].filter(Boolean);\n    let postcss = loadPostcss();\n    let processor = postcss(plugins);\n\n    function processCSS(css) {\n      let start = process.hrtime.bigint();\n      return Promise.resolve().then(() => output ? fs.promises.mkdir(path.dirname(output), {\n        recursive: true\n      }) : null).then(() => processor.process(css, { ...postcssOptions,\n        from: input,\n        to: output\n      })).then(result => {\n        if (!output) {\n          return process.stdout.write(result.css);\n        }\n\n        return Promise.all([outputFile(output, result.css), result.map && outputFile(output + '.map', result.map.toString())].filter(Boolean));\n      }).then(() => {\n        let end = process.hrtime.bigint();\n        console.error();\n        console.error('Done in', (end - start) / BigInt(1e6) + 'ms.');\n      });\n    }\n\n    let css = await (() => {\n      // Piping in data, let's drain the stdin\n      if (input === '-') {\n        return drainStdin();\n      } // Input file has been provided\n\n\n      if (input) {\n        return fs.readFileSync(path.resolve(input), 'utf8');\n      } // No input file provided, fallback to default atrules\n\n\n      return '@tailwind base; @tailwind components; @tailwind utilities';\n    })();\n    return processCSS(css);\n  }\n\n  let context = null;\n\n  async function startWatcher() {\n    let changedContent = [];\n    let configDependencies = [];\n    let contextDependencies = new Set();\n    let watcher = null;\n\n    function refreshConfig() {\n      env.DEBUG && console.time('Module dependencies');\n\n      for (let file of configDependencies) {\n        delete require.cache[require.resolve(file)];\n      }\n\n      if (configPath) {\n        configDependencies = getModuleDependencies(configPath).map(_ref6 => {\n          let {\n            file\n          } = _ref6;\n          return file;\n        });\n\n        for (let dependency of configDependencies) {\n          contextDependencies.add(dependency);\n        }\n      }\n\n      env.DEBUG && console.timeEnd('Module dependencies');\n      return resolveConfig();\n    }\n\n    let [beforePlugins, afterPlugins] = includePostCss ? await loadPostCssPlugins() : loadBuiltinPostcssPlugins();\n    let plugins = [...beforePlugins, '__TAILWIND_PLUGIN_POSITION__', !args['--minify'] && formatNodes, ...afterPlugins, !args['--no-autoprefixer'] && (() => {\n      // Try to load a local `autoprefixer` version first\n      try {\n        return require('autoprefixer');\n      } catch {}\n\n      return lazyAutoprefixer();\n    })(), args['--minify'] && (() => {\n      let options = {\n        preset: ['default', {\n          cssDeclarationSorter: false\n        }]\n      }; // Try to load a local `cssnano` version first\n\n      try {\n        return require('cssnano');\n      } catch {}\n\n      return lazyCssnano()(options);\n    })()].filter(Boolean);\n\n    async function rebuild(config) {\n      env.DEBUG && console.time('Finished in');\n\n      let tailwindPlugin = () => {\n        return {\n          postcssPlugin: 'tailwindcss',\n\n          Once(root, _ref7) {\n            let {\n              result\n            } = _ref7;\n            env.DEBUG && console.time('Compiling CSS');\n            tailwind(_ref8 => {\n              let {\n                createContext\n              } = _ref8;\n              console.error();\n              console.error('Rebuilding...');\n              return () => {\n                if (context !== null) {\n                  context.changedContent = changedContent.splice(0);\n                  return context;\n                }\n\n                env.DEBUG && console.time('Creating context');\n                context = createContext(config, changedContent.splice(0));\n                env.DEBUG && console.timeEnd('Creating context');\n                return context;\n              };\n            })(root, result);\n            env.DEBUG && console.timeEnd('Compiling CSS');\n          }\n\n        };\n      };\n\n      tailwindPlugin.postcss = true;\n      let tailwindPluginIdx = plugins.indexOf('__TAILWIND_PLUGIN_POSITION__');\n      let copy = plugins.slice();\n      copy.splice(tailwindPluginIdx, 1, tailwindPlugin);\n      let postcss = loadPostcss();\n      let processor = postcss(copy);\n\n      function processCSS(css) {\n        let start = process.hrtime.bigint();\n        return Promise.resolve().then(() => output ? fs.promises.mkdir(path.dirname(output), {\n          recursive: true\n        }) : null).then(() => processor.process(css, {\n          from: input,\n          to: output\n        })).then(async result => {\n          for (let message of result.messages) {\n            if (message.type === 'dependency') {\n              contextDependencies.add(message.file);\n            }\n          }\n\n          watcher.add([...contextDependencies]);\n\n          if (!output) {\n            return process.stdout.write(result.css);\n          }\n\n          return Promise.all([outputFile(output, result.css), result.map && outputFile(output + '.map', result.map.toString())].filter(Boolean));\n        }).then(() => {\n          let end = process.hrtime.bigint();\n          console.error('Done in', (end - start) / BigInt(1e6) + 'ms.');\n        }).catch(err => {\n          if (err.name === 'CssSyntaxError') {\n            console.error(err.toString());\n          } else {\n            console.error(err);\n          }\n        });\n      }\n\n      let css = await (() => {\n        // Piping in data, let's drain the stdin\n        if (input === '-') {\n          return drainStdin();\n        } // Input file has been provided\n\n\n        if (input) {\n          return fs.readFileSync(path.resolve(input), 'utf8');\n        } // No input file provided, fallback to default atrules\n\n\n        return '@tailwind base; @tailwind components; @tailwind utilities';\n      })();\n      let result = await processCSS(css);\n      env.DEBUG && console.timeEnd('Finished in');\n      return result;\n    }\n\n    let config = refreshConfig(configPath);\n\n    if (input) {\n      contextDependencies.add(path.resolve(input));\n    }\n\n    watcher = chokidar.watch([...contextDependencies, ...extractFileGlobs(config)], {\n      usePolling: shouldPoll,\n      interval: shouldPoll ? pollInterval : undefined,\n      ignoreInitial: true,\n      awaitWriteFinish: shouldCoalesceWriteEvents ? {\n        stabilityThreshold: 50,\n        pollInterval: pollInterval\n      } : false\n    });\n    let chain = Promise.resolve();\n    watcher.on('change', async file => {\n      if (contextDependencies.has(file)) {\n        env.DEBUG && console.time('Resolve config');\n        context = null;\n        config = refreshConfig(configPath);\n        env.DEBUG && console.timeEnd('Resolve config');\n        env.DEBUG && console.time('Watch new files');\n        let globs = extractFileGlobs(config);\n        watcher.add(configDependencies);\n        watcher.add(globs);\n        env.DEBUG && console.timeEnd('Watch new files');\n        chain = chain.then(async () => {\n          changedContent.push(...getChangedContent(config));\n          await rebuild(config);\n        });\n      } else {\n        chain = chain.then(async () => {\n          changedContent.push({\n            content: fs.readFileSync(path.resolve(file), 'utf8'),\n            extension: path.extname(file).slice(1)\n          });\n          await rebuild(config);\n        });\n      }\n    });\n    watcher.on('add', async file => {\n      chain = chain.then(async () => {\n        changedContent.push({\n          content: fs.readFileSync(path.resolve(file), 'utf8'),\n          extension: path.extname(file).slice(1)\n        });\n        await rebuild(config);\n      });\n    });\n    chain = chain.then(() => {\n      changedContent.push(...getChangedContent(config));\n      return rebuild(config);\n    });\n  }\n\n  if (shouldWatch) {\n    /* Abort the watcher if stdin is closed to avoid zombie processes */\n    if (process.stdin.isTTY) {\n      process.stdin.on('end', () => process.exit(0));\n      process.stdin.resume();\n    }\n\n    startWatcher();\n  } else {\n    buildOnce();\n  }\n}","map":{"version":3,"names":["lazyPostcss","lazyPostcssImport","lazyCssnano","lazyAutoprefixer","chokidar","path","arg","fs","postcssrc","lilconfig","loadPlugins","loadOptions","tailwind","resolveConfigInternal","fastGlob","getModuleDependencies","log","packageJson","normalizePath","validateConfig","env","DEBUG","process","undefined","isESM","pkgPath","resolve","pkg","JSON","parse","readFileSync","type","err","configs","postcss","indentRecursive","node","indent","each","child","i","raws","before","trim","includes","repeat","after","formatNodes","root","first","outputFile","file","contents","existsSync","promises","readFile","writeFile","drainStdin","Promise","reject","result","stdin","on","chunk","help","message","usage","commands","options","console","name","version","msg","split","length","example","command","groupedOptions","key","value","Object","entries","flags","push","description","deprecated","values","slice","reverse","join","padEnd","oneOf","assign","option","parsed","Error","manualParsing","loadPostcss","require","init","run","args","Boolean","build","String","sharedFlags","stdout","isTTY","argv","every","flag","keys","filter","map","exit","startsWith","fromEntries","_key","permissive","flagName","handler","offset","splice","unshift","code","messages","tailwindConfigLocation","basename","stubFile","__dirname","replace","writeFileSync","postcssConfigLocation","input","output","shouldWatch","shouldPoll","shouldCoalesceWriteEvents","platform","includePostCss","pollInterval","error","configPath","defaultPath","loadPostCssPlugins","customPostCssPath","config","load","plugins","configPlugins","configPluginTailwindIdx","findIndex","plugin","postcssPlugin","beforePlugins","afterPlugins","loadBuiltinPostcssPlugins","IMPORT_COMMENT","walkAtRules","rule","params","comment","text","remove","walkComments","atRule","resolveConfig","warn","files","resolvedConfig","content","extractFileGlobs","glob","extractRawContent","getChangedContent","changedContent","globs","sync","extension","extname","raw","buildOnce","tailwindPlugin","Once","createContext","postcssOptions","preset","cssDeclarationSorter","processor","processCSS","css","start","hrtime","bigint","then","mkdir","dirname","recursive","from","to","write","all","toString","end","BigInt","context","startWatcher","configDependencies","contextDependencies","Set","watcher","refreshConfig","time","cache","dependency","add","timeEnd","rebuild","tailwindPluginIdx","indexOf","copy","catch","watch","usePolling","interval","ignoreInitial","awaitWriteFinish","stabilityThreshold","chain","has","resume"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/cli.js"],"sourcesContent":["#!/usr/bin/env node\n\nimport { lazyPostcss, lazyPostcssImport, lazyCssnano, lazyAutoprefixer } from '../peers/index.js'\n\nimport chokidar from 'chokidar'\nimport path from 'path'\nimport arg from 'arg'\nimport fs from 'fs'\nimport postcssrc from 'postcss-load-config'\nimport { lilconfig } from 'lilconfig'\nimport loadPlugins from 'postcss-load-config/src/plugins' // Little bit scary, looking at private/internal API\nimport loadOptions from 'postcss-load-config/src/options' // Little bit scary, looking at private/internal API\nimport tailwind from './processTailwindFeatures'\nimport resolveConfigInternal from '../resolveConfig'\nimport fastGlob from 'fast-glob'\nimport getModuleDependencies from './lib/getModuleDependencies'\nimport log from './util/log'\nimport packageJson from '../package.json'\nimport normalizePath from 'normalize-path'\nimport { validateConfig } from './util/validateConfig.js'\n\nlet env = {\n  DEBUG: process.env.DEBUG !== undefined && process.env.DEBUG !== '0',\n}\n\nfunction isESM() {\n  const pkgPath = path.resolve('./package.json')\n\n  try {\n    let pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'))\n    return pkg.type && pkg.type === 'module'\n  } catch (err) {\n    return false\n  }\n}\n\nlet configs = isESM()\n  ? {\n      tailwind: 'tailwind.config.cjs',\n      postcss: 'postcss.config.cjs',\n    }\n  : {\n      tailwind: 'tailwind.config.js',\n      postcss: 'postcss.config.js',\n    }\n\n// ---\n\nfunction indentRecursive(node, indent = 0) {\n  node.each &&\n    node.each((child, i) => {\n      if (!child.raws.before || !child.raws.before.trim() || child.raws.before.includes('\\n')) {\n        child.raws.before = `\\n${node.type !== 'rule' && i > 0 ? '\\n' : ''}${'  '.repeat(indent)}`\n      }\n      child.raws.after = `\\n${'  '.repeat(indent)}`\n      indentRecursive(child, indent + 1)\n    })\n}\n\nfunction formatNodes(root) {\n  indentRecursive(root)\n  if (root.first) {\n    root.first.raws.before = ''\n  }\n}\n\nasync function outputFile(file, contents) {\n  if (fs.existsSync(file) && (await fs.promises.readFile(file, 'utf8')) === contents) {\n    return // Skip writing the file\n  }\n\n  // Write the file\n  await fs.promises.writeFile(file, contents, 'utf8')\n}\n\nfunction drainStdin() {\n  return new Promise((resolve, reject) => {\n    let result = ''\n    process.stdin.on('data', (chunk) => {\n      result += chunk\n    })\n    process.stdin.on('end', () => resolve(result))\n    process.stdin.on('error', (err) => reject(err))\n  })\n}\n\nfunction help({ message, usage, commands, options }) {\n  let indent = 2\n\n  // Render header\n  console.log()\n  console.log(`${packageJson.name} v${packageJson.version}`)\n\n  // Render message\n  if (message) {\n    console.log()\n    for (let msg of message.split('\\n')) {\n      console.log(msg)\n    }\n  }\n\n  // Render usage\n  if (usage && usage.length > 0) {\n    console.log()\n    console.log('Usage:')\n    for (let example of usage) {\n      console.log(' '.repeat(indent), example)\n    }\n  }\n\n  // Render commands\n  if (commands && commands.length > 0) {\n    console.log()\n    console.log('Commands:')\n    for (let command of commands) {\n      console.log(' '.repeat(indent), command)\n    }\n  }\n\n  // Render options\n  if (options) {\n    let groupedOptions = {}\n    for (let [key, value] of Object.entries(options)) {\n      if (typeof value === 'object') {\n        groupedOptions[key] = { ...value, flags: [key] }\n      } else {\n        groupedOptions[value].flags.push(key)\n      }\n    }\n\n    console.log()\n    console.log('Options:')\n    for (let { flags, description, deprecated } of Object.values(groupedOptions)) {\n      if (deprecated) continue\n\n      if (flags.length === 1) {\n        console.log(\n          ' '.repeat(indent + 4 /* 4 = \"-i, \".length */),\n          flags.slice().reverse().join(', ').padEnd(20, ' '),\n          description\n        )\n      } else {\n        console.log(\n          ' '.repeat(indent),\n          flags.slice().reverse().join(', ').padEnd(24, ' '),\n          description\n        )\n      }\n    }\n  }\n\n  console.log()\n}\n\nfunction oneOf(...options) {\n  return Object.assign(\n    (value = true) => {\n      for (let option of options) {\n        let parsed = option(value)\n        if (parsed === value) {\n          return parsed\n        }\n      }\n\n      throw new Error('...')\n    },\n    { manualParsing: true }\n  )\n}\n\nfunction loadPostcss() {\n  // Try to load a local `postcss` version first\n  try {\n    return require('postcss')\n  } catch {}\n\n  return lazyPostcss()\n}\n\nlet commands = {\n  init: {\n    run: init,\n    args: {\n      '--full': { type: Boolean, description: `Initialize a full \\`${configs.tailwind}\\` file` },\n      '--postcss': { type: Boolean, description: `Initialize a \\`${configs.postcss}\\` file` },\n      '-f': '--full',\n      '-p': '--postcss',\n    },\n  },\n  build: {\n    run: build,\n    args: {\n      '--input': { type: String, description: 'Input file' },\n      '--output': { type: String, description: 'Output file' },\n      '--watch': { type: Boolean, description: 'Watch for changes and rebuild as needed' },\n      '--poll': {\n        type: Boolean,\n        description: 'Use polling instead of filesystem events when watching',\n      },\n      '--content': {\n        type: String,\n        description: 'Content paths to use for removing unused classes',\n      },\n      '--purge': {\n        type: String,\n        deprecated: true,\n      },\n      '--postcss': {\n        type: oneOf(String, Boolean),\n        description: 'Load custom PostCSS configuration',\n      },\n      '--minify': { type: Boolean, description: 'Minify the output' },\n      '--config': {\n        type: String,\n        description: 'Path to a custom config file',\n      },\n      '--no-autoprefixer': {\n        type: Boolean,\n        description: 'Disable autoprefixer',\n      },\n      '-c': '--config',\n      '-i': '--input',\n      '-o': '--output',\n      '-m': '--minify',\n      '-w': '--watch',\n      '-p': '--poll',\n    },\n  },\n}\n\nlet sharedFlags = {\n  '--help': { type: Boolean, description: 'Display usage information' },\n  '-h': '--help',\n}\n\nif (\n  process.stdout.isTTY /* Detect redirecting output to a file */ &&\n  (process.argv[2] === undefined ||\n    process.argv.slice(2).every((flag) => sharedFlags[flag] !== undefined))\n) {\n  help({\n    usage: [\n      'tailwindcss [--input input.css] [--output output.css] [--watch] [options...]',\n      'tailwindcss init [--full] [--postcss] [options...]',\n    ],\n    commands: Object.keys(commands)\n      .filter((command) => command !== 'build')\n      .map((command) => `${command} [options]`),\n    options: { ...commands.build.args, ...sharedFlags },\n  })\n  process.exit(0)\n}\n\nlet command = ((arg = '') => (arg.startsWith('-') ? undefined : arg))(process.argv[2]) || 'build'\n\nif (commands[command] === undefined) {\n  if (fs.existsSync(path.resolve(command))) {\n    // TODO: Deprecate this in future versions\n    // Check if non-existing command, might be a file.\n    command = 'build'\n  } else {\n    help({\n      message: `Invalid command: ${command}`,\n      usage: ['tailwindcss <command> [options]'],\n      commands: Object.keys(commands)\n        .filter((command) => command !== 'build')\n        .map((command) => `${command} [options]`),\n      options: sharedFlags,\n    })\n    process.exit(1)\n  }\n}\n\n// Execute command\nlet { args: flags, run } = commands[command]\nlet args = (() => {\n  try {\n    let result = arg(\n      Object.fromEntries(\n        Object.entries({ ...flags, ...sharedFlags })\n          .filter(([_key, value]) => !value?.type?.manualParsing)\n          .map(([key, value]) => [key, typeof value === 'object' ? value.type : value])\n      ),\n      { permissive: true }\n    )\n\n    // Manual parsing of flags to allow for special flags like oneOf(Boolean, String)\n    for (let i = result['_'].length - 1; i >= 0; --i) {\n      let flag = result['_'][i]\n      if (!flag.startsWith('-')) continue\n\n      let flagName = flag\n      let handler = flags[flag]\n\n      // Resolve flagName & handler\n      while (typeof handler === 'string') {\n        flagName = handler\n        handler = flags[handler]\n      }\n\n      if (!handler) continue\n\n      let args = []\n      let offset = i + 1\n\n      // Parse args for current flag\n      while (result['_'][offset] && !result['_'][offset].startsWith('-')) {\n        args.push(result['_'][offset++])\n      }\n\n      // Cleanup manually parsed flags + args\n      result['_'].splice(i, 1 + args.length)\n\n      // Set the resolved value in the `result` object\n      result[flagName] = handler.type(\n        args.length === 0 ? undefined : args.length === 1 ? args[0] : args,\n        flagName\n      )\n    }\n\n    // Ensure that the `command` is always the first argument in the `args`.\n    // This is important so that we don't have to check if a default command\n    // (build) was used or not from within each plugin.\n    //\n    // E.g.: tailwindcss input.css -> _: ['build', 'input.css']\n    // E.g.: tailwindcss build input.css -> _: ['build', 'input.css']\n    if (result['_'][0] !== command) {\n      result['_'].unshift(command)\n    }\n\n    return result\n  } catch (err) {\n    if (err.code === 'ARG_UNKNOWN_OPTION') {\n      help({\n        message: err.message,\n        usage: ['tailwindcss <command> [options]'],\n        options: sharedFlags,\n      })\n      process.exit(1)\n    }\n    throw err\n  }\n})()\n\nif (args['--help']) {\n  help({\n    options: { ...flags, ...sharedFlags },\n    usage: [`tailwindcss ${command} [options]`],\n  })\n  process.exit(0)\n}\n\nrun()\n\n// ---\n\nfunction init() {\n  let messages = []\n\n  let tailwindConfigLocation = path.resolve(args['_'][1] ?? `./${configs.tailwind}`)\n  if (fs.existsSync(tailwindConfigLocation)) {\n    messages.push(`${path.basename(tailwindConfigLocation)} already exists.`)\n  } else {\n    let stubFile = fs.readFileSync(\n      args['--full']\n        ? path.resolve(__dirname, '../stubs/defaultConfig.stub.js')\n        : path.resolve(__dirname, '../stubs/simpleConfig.stub.js'),\n      'utf8'\n    )\n\n    // Change colors import\n    stubFile = stubFile.replace('../colors', 'tailwindcss/colors')\n\n    fs.writeFileSync(tailwindConfigLocation, stubFile, 'utf8')\n\n    messages.push(`Created Tailwind CSS config file: ${path.basename(tailwindConfigLocation)}`)\n  }\n\n  if (args['--postcss']) {\n    let postcssConfigLocation = path.resolve(`./${configs.postcss}`)\n    if (fs.existsSync(postcssConfigLocation)) {\n      messages.push(`${path.basename(postcssConfigLocation)} already exists.`)\n    } else {\n      let stubFile = fs.readFileSync(\n        path.resolve(__dirname, '../stubs/defaultPostCssConfig.stub.js'),\n        'utf8'\n      )\n\n      fs.writeFileSync(postcssConfigLocation, stubFile, 'utf8')\n\n      messages.push(`Created PostCSS config file: ${path.basename(postcssConfigLocation)}`)\n    }\n  }\n\n  if (messages.length > 0) {\n    console.log()\n    for (let message of messages) {\n      console.log(message)\n    }\n  }\n}\n\nasync function build() {\n  let input = args['--input']\n  let output = args['--output']\n  let shouldWatch = args['--watch']\n  let shouldPoll = args['--poll']\n  let shouldCoalesceWriteEvents = shouldPoll || process.platform === 'win32'\n  let includePostCss = args['--postcss']\n\n  // Polling interval in milliseconds\n  // Used only when polling or coalescing add/change events on Windows\n  let pollInterval = 10\n\n  // TODO: Deprecate this in future versions\n  if (!input && args['_'][1]) {\n    console.error('[deprecation] Running tailwindcss without -i, please provide an input file.')\n    input = args['--input'] = args['_'][1]\n  }\n\n  if (input && input !== '-' && !fs.existsSync((input = path.resolve(input)))) {\n    console.error(`Specified input file ${args['--input']} does not exist.`)\n    process.exit(9)\n  }\n\n  if (args['--config'] && !fs.existsSync((args['--config'] = path.resolve(args['--config'])))) {\n    console.error(`Specified config file ${args['--config']} does not exist.`)\n    process.exit(9)\n  }\n\n  let configPath = args['--config']\n    ? args['--config']\n    : ((defaultPath) => (fs.existsSync(defaultPath) ? defaultPath : null))(\n        path.resolve(`./${configs.tailwind}`)\n      )\n\n  async function loadPostCssPlugins() {\n    let customPostCssPath = typeof args['--postcss'] === 'string' ? args['--postcss'] : undefined\n    let config = customPostCssPath\n      ? await (async () => {\n          let file = path.resolve(customPostCssPath)\n\n          // Implementation, see: https://unpkg.com/browse/postcss-load-config@3.1.0/src/index.js\n          let { config = {} } = await lilconfig('postcss').load(file)\n          if (typeof config === 'function') {\n            config = config()\n          } else {\n            config = Object.assign({}, config)\n          }\n\n          if (!config.plugins) {\n            config.plugins = []\n          }\n\n          return {\n            file,\n            plugins: loadPlugins(config, file),\n            options: loadOptions(config, file),\n          }\n        })()\n      : await postcssrc()\n\n    let configPlugins = config.plugins\n\n    let configPluginTailwindIdx = configPlugins.findIndex((plugin) => {\n      if (typeof plugin === 'function' && plugin.name === 'tailwindcss') {\n        return true\n      }\n\n      if (typeof plugin === 'object' && plugin !== null && plugin.postcssPlugin === 'tailwindcss') {\n        return true\n      }\n\n      return false\n    })\n\n    let beforePlugins =\n      configPluginTailwindIdx === -1 ? [] : configPlugins.slice(0, configPluginTailwindIdx)\n    let afterPlugins =\n      configPluginTailwindIdx === -1\n        ? configPlugins\n        : configPlugins.slice(configPluginTailwindIdx + 1)\n\n    return [beforePlugins, afterPlugins, config.options]\n  }\n\n  function loadBuiltinPostcssPlugins() {\n    let postcss = loadPostcss()\n    let IMPORT_COMMENT = '__TAILWIND_RESTORE_IMPORT__: '\n    return [\n      [\n        (root) => {\n          root.walkAtRules('import', (rule) => {\n            if (rule.params.slice(1).startsWith('tailwindcss/')) {\n              rule.after(postcss.comment({ text: IMPORT_COMMENT + rule.params }))\n              rule.remove()\n            }\n          })\n        },\n        (() => {\n          try {\n            return require('postcss-import')\n          } catch {}\n\n          return lazyPostcssImport()\n        })(),\n        (root) => {\n          root.walkComments((rule) => {\n            if (rule.text.startsWith(IMPORT_COMMENT)) {\n              rule.after(\n                postcss.atRule({\n                  name: 'import',\n                  params: rule.text.replace(IMPORT_COMMENT, ''),\n                })\n              )\n              rule.remove()\n            }\n          })\n        },\n      ],\n      [],\n      {},\n    ]\n  }\n\n  function resolveConfig() {\n    let config = configPath ? require(configPath) : {}\n\n    if (args['--purge']) {\n      log.warn('purge-flag-deprecated', [\n        'The `--purge` flag has been deprecated.',\n        'Please use `--content` instead.',\n      ])\n      if (!args['--content']) {\n        args['--content'] = args['--purge']\n      }\n    }\n\n    if (args['--content']) {\n      let files = args['--content'].split(/(?<!{[^}]+),/)\n      let resolvedConfig = resolveConfigInternal(config, { content: { files } })\n      resolvedConfig.content.files = files\n      resolvedConfig = validateConfig(resolvedConfig)\n      return resolvedConfig\n    }\n\n    let resolvedConfig = resolveConfigInternal(config)\n    resolvedConfig = validateConfig(resolvedConfig)\n    return resolvedConfig\n  }\n\n  function extractFileGlobs(config) {\n    return config.content.files\n      .filter((file) => {\n        // Strings in this case are files / globs. If it is something else,\n        // like an object it's probably a raw content object. But this object\n        // is not watchable, so let's remove it.\n        return typeof file === 'string'\n      })\n      .map((glob) => normalizePath(glob))\n  }\n\n  function extractRawContent(config) {\n    return config.content.files.filter((file) => {\n      return typeof file === 'object' && file !== null\n    })\n  }\n\n  function getChangedContent(config) {\n    let changedContent = []\n\n    // Resolve globs from the content config\n    let globs = extractFileGlobs(config)\n    let files = fastGlob.sync(globs)\n\n    for (let file of files) {\n      changedContent.push({\n        content: fs.readFileSync(path.resolve(file), 'utf8'),\n        extension: path.extname(file).slice(1),\n      })\n    }\n\n    // Resolve raw content in the tailwind config\n    for (let { raw: content, extension = 'html' } of extractRawContent(config)) {\n      changedContent.push({ content, extension })\n    }\n\n    return changedContent\n  }\n\n  async function buildOnce() {\n    let config = resolveConfig()\n    let changedContent = getChangedContent(config)\n\n    let tailwindPlugin = () => {\n      return {\n        postcssPlugin: 'tailwindcss',\n        Once(root, { result }) {\n          tailwind(({ createContext }) => {\n            return () => {\n              return createContext(config, changedContent)\n            }\n          })(root, result)\n        },\n      }\n    }\n\n    tailwindPlugin.postcss = true\n\n    let [beforePlugins, afterPlugins, postcssOptions] = includePostCss\n      ? await loadPostCssPlugins()\n      : loadBuiltinPostcssPlugins()\n\n    let plugins = [\n      ...beforePlugins,\n      tailwindPlugin,\n      !args['--minify'] && formatNodes,\n      ...afterPlugins,\n      !args['--no-autoprefixer'] &&\n        (() => {\n          // Try to load a local `autoprefixer` version first\n          try {\n            return require('autoprefixer')\n          } catch {}\n\n          return lazyAutoprefixer()\n        })(),\n      args['--minify'] &&\n        (() => {\n          let options = { preset: ['default', { cssDeclarationSorter: false }] }\n\n          // Try to load a local `cssnano` version first\n          try {\n            return require('cssnano')\n          } catch {}\n\n          return lazyCssnano()(options)\n        })(),\n    ].filter(Boolean)\n\n    let postcss = loadPostcss()\n    let processor = postcss(plugins)\n\n    function processCSS(css) {\n      let start = process.hrtime.bigint()\n      return Promise.resolve()\n        .then(() => (output ? fs.promises.mkdir(path.dirname(output), { recursive: true }) : null))\n        .then(() => processor.process(css, { ...postcssOptions, from: input, to: output }))\n        .then((result) => {\n          if (!output) {\n            return process.stdout.write(result.css)\n          }\n\n          return Promise.all(\n            [\n              outputFile(output, result.css),\n              result.map && outputFile(output + '.map', result.map.toString()),\n            ].filter(Boolean)\n          )\n        })\n        .then(() => {\n          let end = process.hrtime.bigint()\n          console.error()\n          console.error('Done in', (end - start) / BigInt(1e6) + 'ms.')\n        })\n    }\n\n    let css = await (() => {\n      // Piping in data, let's drain the stdin\n      if (input === '-') {\n        return drainStdin()\n      }\n\n      // Input file has been provided\n      if (input) {\n        return fs.readFileSync(path.resolve(input), 'utf8')\n      }\n\n      // No input file provided, fallback to default atrules\n      return '@tailwind base; @tailwind components; @tailwind utilities'\n    })()\n\n    return processCSS(css)\n  }\n\n  let context = null\n\n  async function startWatcher() {\n    let changedContent = []\n    let configDependencies = []\n    let contextDependencies = new Set()\n    let watcher = null\n\n    function refreshConfig() {\n      env.DEBUG && console.time('Module dependencies')\n      for (let file of configDependencies) {\n        delete require.cache[require.resolve(file)]\n      }\n\n      if (configPath) {\n        configDependencies = getModuleDependencies(configPath).map(({ file }) => file)\n\n        for (let dependency of configDependencies) {\n          contextDependencies.add(dependency)\n        }\n      }\n      env.DEBUG && console.timeEnd('Module dependencies')\n\n      return resolveConfig()\n    }\n\n    let [beforePlugins, afterPlugins] = includePostCss\n      ? await loadPostCssPlugins()\n      : loadBuiltinPostcssPlugins()\n\n    let plugins = [\n      ...beforePlugins,\n      '__TAILWIND_PLUGIN_POSITION__',\n      !args['--minify'] && formatNodes,\n      ...afterPlugins,\n      !args['--no-autoprefixer'] &&\n        (() => {\n          // Try to load a local `autoprefixer` version first\n          try {\n            return require('autoprefixer')\n          } catch {}\n\n          return lazyAutoprefixer()\n        })(),\n      args['--minify'] &&\n        (() => {\n          let options = { preset: ['default', { cssDeclarationSorter: false }] }\n\n          // Try to load a local `cssnano` version first\n          try {\n            return require('cssnano')\n          } catch {}\n\n          return lazyCssnano()(options)\n        })(),\n    ].filter(Boolean)\n\n    async function rebuild(config) {\n      env.DEBUG && console.time('Finished in')\n\n      let tailwindPlugin = () => {\n        return {\n          postcssPlugin: 'tailwindcss',\n          Once(root, { result }) {\n            env.DEBUG && console.time('Compiling CSS')\n            tailwind(({ createContext }) => {\n              console.error()\n              console.error('Rebuilding...')\n\n              return () => {\n                if (context !== null) {\n                  context.changedContent = changedContent.splice(0)\n                  return context\n                }\n\n                env.DEBUG && console.time('Creating context')\n                context = createContext(config, changedContent.splice(0))\n                env.DEBUG && console.timeEnd('Creating context')\n                return context\n              }\n            })(root, result)\n            env.DEBUG && console.timeEnd('Compiling CSS')\n          },\n        }\n      }\n\n      tailwindPlugin.postcss = true\n\n      let tailwindPluginIdx = plugins.indexOf('__TAILWIND_PLUGIN_POSITION__')\n      let copy = plugins.slice()\n      copy.splice(tailwindPluginIdx, 1, tailwindPlugin)\n      let postcss = loadPostcss()\n      let processor = postcss(copy)\n\n      function processCSS(css) {\n        let start = process.hrtime.bigint()\n        return Promise.resolve()\n          .then(() =>\n            output ? fs.promises.mkdir(path.dirname(output), { recursive: true }) : null\n          )\n          .then(() => processor.process(css, { from: input, to: output }))\n          .then(async (result) => {\n            for (let message of result.messages) {\n              if (message.type === 'dependency') {\n                contextDependencies.add(message.file)\n              }\n            }\n            watcher.add([...contextDependencies])\n\n            if (!output) {\n              return process.stdout.write(result.css)\n            }\n\n            return Promise.all(\n              [\n                outputFile(output, result.css),\n                result.map && outputFile(output + '.map', result.map.toString()),\n              ].filter(Boolean)\n            )\n          })\n          .then(() => {\n            let end = process.hrtime.bigint()\n            console.error('Done in', (end - start) / BigInt(1e6) + 'ms.')\n          })\n          .catch((err) => {\n            if (err.name === 'CssSyntaxError') {\n              console.error(err.toString())\n            } else {\n              console.error(err)\n            }\n          })\n      }\n\n      let css = await (() => {\n        // Piping in data, let's drain the stdin\n        if (input === '-') {\n          return drainStdin()\n        }\n\n        // Input file has been provided\n        if (input) {\n          return fs.readFileSync(path.resolve(input), 'utf8')\n        }\n\n        // No input file provided, fallback to default atrules\n        return '@tailwind base; @tailwind components; @tailwind utilities'\n      })()\n\n      let result = await processCSS(css)\n      env.DEBUG && console.timeEnd('Finished in')\n      return result\n    }\n\n    let config = refreshConfig(configPath)\n\n    if (input) {\n      contextDependencies.add(path.resolve(input))\n    }\n\n    watcher = chokidar.watch([...contextDependencies, ...extractFileGlobs(config)], {\n      usePolling: shouldPoll,\n      interval: shouldPoll ? pollInterval : undefined,\n      ignoreInitial: true,\n      awaitWriteFinish: shouldCoalesceWriteEvents\n        ? {\n            stabilityThreshold: 50,\n            pollInterval: pollInterval,\n          }\n        : false,\n    })\n\n    let chain = Promise.resolve()\n\n    watcher.on('change', async (file) => {\n      if (contextDependencies.has(file)) {\n        env.DEBUG && console.time('Resolve config')\n        context = null\n        config = refreshConfig(configPath)\n        env.DEBUG && console.timeEnd('Resolve config')\n\n        env.DEBUG && console.time('Watch new files')\n        let globs = extractFileGlobs(config)\n        watcher.add(configDependencies)\n        watcher.add(globs)\n        env.DEBUG && console.timeEnd('Watch new files')\n\n        chain = chain.then(async () => {\n          changedContent.push(...getChangedContent(config))\n          await rebuild(config)\n        })\n      } else {\n        chain = chain.then(async () => {\n          changedContent.push({\n            content: fs.readFileSync(path.resolve(file), 'utf8'),\n            extension: path.extname(file).slice(1),\n          })\n\n          await rebuild(config)\n        })\n      }\n    })\n\n    watcher.on('add', async (file) => {\n      chain = chain.then(async () => {\n        changedContent.push({\n          content: fs.readFileSync(path.resolve(file), 'utf8'),\n          extension: path.extname(file).slice(1),\n        })\n\n        await rebuild(config)\n      })\n    })\n\n    chain = chain.then(() => {\n      changedContent.push(...getChangedContent(config))\n      return rebuild(config)\n    })\n  }\n\n  if (shouldWatch) {\n    /* Abort the watcher if stdin is closed to avoid zombie processes */\n    if (process.stdin.isTTY) {\n      process.stdin.on('end', () => process.exit(0))\n      process.stdin.resume()\n    }\n    startWatcher()\n  } else {\n    buildOnce()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}