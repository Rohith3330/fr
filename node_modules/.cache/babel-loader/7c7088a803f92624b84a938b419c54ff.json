{"ast":null,"code":"/**\n * @filedescription Merge Strategy Tests\n */\n\n/* global it, describe, beforeEach */\n\"use strict\"; //-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst assert = require(\"chai\").assert;\n\nconst {\n  MergeStrategy\n} = require(\"../src/\"); //-----------------------------------------------------------------------------\n// Class\n//-----------------------------------------------------------------------------\n\n\ndescribe(\"MergeStrategy\", () => {\n  describe(\"overwrite()\", () => {\n    it(\"should overwrite the first value with the second when the second is defined\", () => {\n      const result = MergeStrategy.overwrite(1, 2);\n      assert.strictEqual(result, 2);\n    });\n    it(\"should overwrite the first value with the second when the second is undefined\", () => {\n      const result = MergeStrategy.overwrite(1, undefined);\n      assert.strictEqual(result, undefined);\n    });\n  });\n  describe(\"replace()\", () => {\n    it(\"should overwrite the first value with the second when the second is defined\", () => {\n      const result = MergeStrategy.replace(1, 2);\n      assert.strictEqual(result, 2);\n    });\n    it(\"should return the first value when the second is undefined\", () => {\n      const result = MergeStrategy.replace(1, undefined);\n      assert.strictEqual(result, 1);\n    });\n  });\n  describe(\"assign()\", () => {\n    it(\"should merge properties from two objects when called\", () => {\n      const object1 = {\n        foo: 1,\n        bar: 3\n      };\n      const object2 = {\n        foo: 2\n      };\n      const result = MergeStrategy.assign(object1, object2);\n      assert.deepStrictEqual(result, {\n        foo: 2,\n        bar: 3\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","MergeStrategy","describe","it","result","overwrite","strictEqual","undefined","replace","object1","foo","bar","object2","assign","deepStrictEqual"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@humanwhocodes/object-schema/tests/merge-strategy.js"],"sourcesContent":["/**\n * @filedescription Merge Strategy Tests\n */\n/* global it, describe, beforeEach */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst assert = require(\"chai\").assert;\nconst { MergeStrategy } = require(\"../src/\");\n\n//-----------------------------------------------------------------------------\n// Class\n//-----------------------------------------------------------------------------\n\ndescribe(\"MergeStrategy\", () => {\n\n\n    describe(\"overwrite()\", () => {\n\n        it(\"should overwrite the first value with the second when the second is defined\", () => {\n            const result = MergeStrategy.overwrite(1, 2);\n            assert.strictEqual(result, 2);\n        });\n\n        it(\"should overwrite the first value with the second when the second is undefined\", () => {\n            const result = MergeStrategy.overwrite(1, undefined);\n            assert.strictEqual(result, undefined);\n        });\n\n    });\n\n    describe(\"replace()\", () => {\n\n        it(\"should overwrite the first value with the second when the second is defined\", () => {\n            const result = MergeStrategy.replace(1, 2);\n            assert.strictEqual(result, 2);\n        });\n\n        it(\"should return the first value when the second is undefined\", () => {\n            const result = MergeStrategy.replace(1, undefined);\n            assert.strictEqual(result, 1);\n        });\n\n    });\n\n    describe(\"assign()\", () => {\n\n        it(\"should merge properties from two objects when called\", () => {\n\n            const object1 = { foo: 1, bar: 3 };\n            const object2 = { foo: 2 };            \n            \n            const result = MergeStrategy.assign(object1, object2);\n            assert.deepStrictEqual(result, {\n                foo: 2,\n                bar: 3\n            });\n        });\n\n    });\n\n});\n"],"mappings":"AAAA;AACA;AACA;;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAA/B;;AACA,MAAM;EAAEE;AAAF,IAAoBD,OAAO,CAAC,SAAD,CAAjC,C,CAEA;AACA;AACA;;;AAEAE,QAAQ,CAAC,eAAD,EAAkB,MAAM;EAG5BA,QAAQ,CAAC,aAAD,EAAgB,MAAM;IAE1BC,EAAE,CAAC,6EAAD,EAAgF,MAAM;MACpF,MAAMC,MAAM,GAAGH,aAAa,CAACI,SAAd,CAAwB,CAAxB,EAA2B,CAA3B,CAAf;MACAN,MAAM,CAACO,WAAP,CAAmBF,MAAnB,EAA2B,CAA3B;IACH,CAHC,CAAF;IAKAD,EAAE,CAAC,+EAAD,EAAkF,MAAM;MACtF,MAAMC,MAAM,GAAGH,aAAa,CAACI,SAAd,CAAwB,CAAxB,EAA2BE,SAA3B,CAAf;MACAR,MAAM,CAACO,WAAP,CAAmBF,MAAnB,EAA2BG,SAA3B;IACH,CAHC,CAAF;EAKH,CAZO,CAAR;EAcAL,QAAQ,CAAC,WAAD,EAAc,MAAM;IAExBC,EAAE,CAAC,6EAAD,EAAgF,MAAM;MACpF,MAAMC,MAAM,GAAGH,aAAa,CAACO,OAAd,CAAsB,CAAtB,EAAyB,CAAzB,CAAf;MACAT,MAAM,CAACO,WAAP,CAAmBF,MAAnB,EAA2B,CAA3B;IACH,CAHC,CAAF;IAKAD,EAAE,CAAC,4DAAD,EAA+D,MAAM;MACnE,MAAMC,MAAM,GAAGH,aAAa,CAACO,OAAd,CAAsB,CAAtB,EAAyBD,SAAzB,CAAf;MACAR,MAAM,CAACO,WAAP,CAAmBF,MAAnB,EAA2B,CAA3B;IACH,CAHC,CAAF;EAKH,CAZO,CAAR;EAcAF,QAAQ,CAAC,UAAD,EAAa,MAAM;IAEvBC,EAAE,CAAC,sDAAD,EAAyD,MAAM;MAE7D,MAAMM,OAAO,GAAG;QAAEC,GAAG,EAAE,CAAP;QAAUC,GAAG,EAAE;MAAf,CAAhB;MACA,MAAMC,OAAO,GAAG;QAAEF,GAAG,EAAE;MAAP,CAAhB;MAEA,MAAMN,MAAM,GAAGH,aAAa,CAACY,MAAd,CAAqBJ,OAArB,EAA8BG,OAA9B,CAAf;MACAb,MAAM,CAACe,eAAP,CAAuBV,MAAvB,EAA+B;QAC3BM,GAAG,EAAE,CADsB;QAE3BC,GAAG,EAAE;MAFsB,CAA/B;IAIH,CAVC,CAAF;EAYH,CAdO,CAAR;AAgBH,CA/CO,CAAR"},"metadata":{},"sourceType":"script"}