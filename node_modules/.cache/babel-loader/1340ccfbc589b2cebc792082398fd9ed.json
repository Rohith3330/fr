{"ast":null,"code":"/**\n * @fileoverview Prevent missing displayName in a React component definition\n * @author Yannick Croissant\n */\n'use strict';\n\nconst values = require('object.values');\n\nconst Components = require('../util/Components');\n\nconst astUtil = require('../util/ast');\n\nconst componentUtil = require('../util/componentUtil');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst testReactVersion = require('../util/version').testReactVersion;\n\nconst propsUtil = require('../util/props');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  noDisplayName: 'Component definition is missing display name'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow missing displayName in a React component definition',\n      category: 'Best Practices',\n      recommended: true,\n      url: docsUrl('display-name')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        ignoreTranspilerName: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  create: Components.detect((context, components, utils) => {\n    const config = context.options[0] || {};\n    const ignoreTranspilerName = config.ignoreTranspilerName || false;\n    /**\n     * Mark a prop type as declared\n     * @param {ASTNode} node The AST node being checked.\n     */\n\n    function markDisplayNameAsDeclared(node) {\n      components.set(node, {\n        hasDisplayName: true\n      });\n    }\n    /**\n     * Checks if React.forwardRef is nested inside React.memo\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Boolean} True if React.forwardRef is nested inside React.memo, false if not.\n     */\n\n\n    function isNestedMemo(node) {\n      const argumentIsCallExpression = node.arguments && node.arguments[0] && node.arguments[0].type === 'CallExpression';\n      return node.type === 'CallExpression' && argumentIsCallExpression && utils.isPragmaComponentWrapper(node);\n    }\n    /**\n     * Reports missing display name for a given component\n     * @param {Object} component The component to process\n     */\n\n\n    function reportMissingDisplayName(component) {\n      if (testReactVersion(context, '^0.14.10 || ^15.7.0 || >= 16.12.0') && isNestedMemo(component.node)) {\n        return;\n      }\n\n      report(context, messages.noDisplayName, 'noDisplayName', {\n        node: component.node\n      });\n    }\n    /**\n     * Checks if the component have a name set by the transpiler\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Boolean} True if component has a name, false if not.\n     */\n\n\n    function hasTranspilerName(node) {\n      const namedObjectAssignment = node.type === 'ObjectExpression' && node.parent && node.parent.parent && node.parent.parent.type === 'AssignmentExpression' && (!node.parent.parent.left.object || node.parent.parent.left.object.name !== 'module' || node.parent.parent.left.property.name !== 'exports');\n      const namedObjectDeclaration = node.type === 'ObjectExpression' && node.parent && node.parent.parent && node.parent.parent.type === 'VariableDeclarator';\n      const namedClass = (node.type === 'ClassDeclaration' || node.type === 'ClassExpression') && node.id && !!node.id.name;\n      const namedFunctionDeclaration = (node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression') && node.id && !!node.id.name;\n      const namedFunctionExpression = astUtil.isFunctionLikeExpression(node) && node.parent && (node.parent.type === 'VariableDeclarator' || node.parent.type === 'Property' || node.parent.method === true) && (!node.parent.parent || !componentUtil.isES5Component(node.parent.parent, context));\n\n      if (namedObjectAssignment || namedObjectDeclaration || namedClass || namedFunctionDeclaration || namedFunctionExpression) {\n        return true;\n      }\n\n      return false;\n    } // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n\n    return {\n      'ClassProperty, PropertyDefinition'(node) {\n        if (!propsUtil.isDisplayNameDeclaration(node)) {\n          return;\n        }\n\n        markDisplayNameAsDeclared(node);\n      },\n\n      MemberExpression(node) {\n        if (!propsUtil.isDisplayNameDeclaration(node.property)) {\n          return;\n        }\n\n        const component = utils.getRelatedComponent(node);\n\n        if (!component) {\n          return;\n        }\n\n        markDisplayNameAsDeclared(component.node.type === 'TSAsExpression' ? component.node.expression : component.node);\n      },\n\n      FunctionExpression(node) {\n        if (ignoreTranspilerName || !hasTranspilerName(node)) {\n          return;\n        }\n\n        if (components.get(node)) {\n          markDisplayNameAsDeclared(node);\n        }\n      },\n\n      FunctionDeclaration(node) {\n        if (ignoreTranspilerName || !hasTranspilerName(node)) {\n          return;\n        }\n\n        if (components.get(node)) {\n          markDisplayNameAsDeclared(node);\n        }\n      },\n\n      ArrowFunctionExpression(node) {\n        if (ignoreTranspilerName || !hasTranspilerName(node)) {\n          return;\n        }\n\n        if (components.get(node)) {\n          markDisplayNameAsDeclared(node);\n        }\n      },\n\n      MethodDefinition(node) {\n        if (!propsUtil.isDisplayNameDeclaration(node.key)) {\n          return;\n        }\n\n        markDisplayNameAsDeclared(node);\n      },\n\n      ClassExpression(node) {\n        if (ignoreTranspilerName || !hasTranspilerName(node)) {\n          return;\n        }\n\n        markDisplayNameAsDeclared(node);\n      },\n\n      ClassDeclaration(node) {\n        if (ignoreTranspilerName || !hasTranspilerName(node)) {\n          return;\n        }\n\n        markDisplayNameAsDeclared(node);\n      },\n\n      ObjectExpression(node) {\n        if (!componentUtil.isES5Component(node, context)) {\n          return;\n        }\n\n        if (ignoreTranspilerName || !hasTranspilerName(node)) {\n          // Search for the displayName declaration\n          node.properties.forEach(property => {\n            if (!property.key || !propsUtil.isDisplayNameDeclaration(property.key)) {\n              return;\n            }\n\n            markDisplayNameAsDeclared(node);\n          });\n          return;\n        }\n\n        markDisplayNameAsDeclared(node);\n      },\n\n      CallExpression(node) {\n        if (!utils.isPragmaComponentWrapper(node)) {\n          return;\n        }\n\n        if (node.arguments.length > 0 && astUtil.isFunctionLikeExpression(node.arguments[0])) {\n          // Skip over React.forwardRef declarations that are embeded within\n          // a React.memo i.e. React.memo(React.forwardRef(/* ... */))\n          // This means that we raise a single error for the call to React.memo\n          // instead of one for React.memo and one for React.forwardRef\n          const isWrappedInAnotherPragma = utils.getPragmaComponentWrapper(node);\n\n          if (!isWrappedInAnotherPragma && (ignoreTranspilerName || !hasTranspilerName(node.arguments[0]))) {\n            return;\n          }\n\n          if (components.get(node)) {\n            markDisplayNameAsDeclared(node);\n          }\n        }\n      },\n\n      'Program:exit'() {\n        const list = components.list(); // Report missing display name for all components\n\n        values(list).filter(component => !component.hasDisplayName).forEach(component => {\n          reportMissingDisplayName(component);\n        });\n      }\n\n    };\n  })\n};","map":{"version":3,"names":["values","require","Components","astUtil","componentUtil","docsUrl","testReactVersion","propsUtil","report","messages","noDisplayName","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","ignoreTranspilerName","additionalProperties","create","detect","context","components","utils","config","options","markDisplayNameAsDeclared","node","set","hasDisplayName","isNestedMemo","argumentIsCallExpression","arguments","isPragmaComponentWrapper","reportMissingDisplayName","component","hasTranspilerName","namedObjectAssignment","parent","left","object","name","property","namedObjectDeclaration","namedClass","id","namedFunctionDeclaration","namedFunctionExpression","isFunctionLikeExpression","method","isES5Component","isDisplayNameDeclaration","MemberExpression","getRelatedComponent","expression","FunctionExpression","get","FunctionDeclaration","ArrowFunctionExpression","MethodDefinition","key","ClassExpression","ClassDeclaration","ObjectExpression","forEach","CallExpression","length","isWrappedInAnotherPragma","getPragmaComponentWrapper","list","filter"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/display-name.js"],"sourcesContent":["/**\n * @fileoverview Prevent missing displayName in a React component definition\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst values = require('object.values');\n\nconst Components = require('../util/Components');\nconst astUtil = require('../util/ast');\nconst componentUtil = require('../util/componentUtil');\nconst docsUrl = require('../util/docsUrl');\nconst testReactVersion = require('../util/version').testReactVersion;\nconst propsUtil = require('../util/props');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noDisplayName: 'Component definition is missing display name',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow missing displayName in a React component definition',\n      category: 'Best Practices',\n      recommended: true,\n      url: docsUrl('display-name'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        ignoreTranspilerName: {\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create: Components.detect((context, components, utils) => {\n    const config = context.options[0] || {};\n    const ignoreTranspilerName = config.ignoreTranspilerName || false;\n\n    /**\n     * Mark a prop type as declared\n     * @param {ASTNode} node The AST node being checked.\n     */\n    function markDisplayNameAsDeclared(node) {\n      components.set(node, {\n        hasDisplayName: true,\n      });\n    }\n\n    /**\n     * Checks if React.forwardRef is nested inside React.memo\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Boolean} True if React.forwardRef is nested inside React.memo, false if not.\n     */\n    function isNestedMemo(node) {\n      const argumentIsCallExpression = node.arguments && node.arguments[0] && node.arguments[0].type === 'CallExpression';\n\n      return node.type === 'CallExpression' && argumentIsCallExpression && utils.isPragmaComponentWrapper(node);\n    }\n\n    /**\n     * Reports missing display name for a given component\n     * @param {Object} component The component to process\n     */\n    function reportMissingDisplayName(component) {\n      if (\n        testReactVersion(context, '^0.14.10 || ^15.7.0 || >= 16.12.0')\n        && isNestedMemo(component.node)\n      ) {\n        return;\n      }\n\n      report(context, messages.noDisplayName, 'noDisplayName', {\n        node: component.node,\n      });\n    }\n\n    /**\n     * Checks if the component have a name set by the transpiler\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Boolean} True if component has a name, false if not.\n     */\n    function hasTranspilerName(node) {\n      const namedObjectAssignment = (\n        node.type === 'ObjectExpression'\n        && node.parent\n        && node.parent.parent\n        && node.parent.parent.type === 'AssignmentExpression'\n        && (\n          !node.parent.parent.left.object\n          || node.parent.parent.left.object.name !== 'module'\n          || node.parent.parent.left.property.name !== 'exports'\n        )\n      );\n      const namedObjectDeclaration = (\n        node.type === 'ObjectExpression'\n        && node.parent\n        && node.parent.parent\n        && node.parent.parent.type === 'VariableDeclarator'\n      );\n      const namedClass = (\n        (node.type === 'ClassDeclaration' || node.type === 'ClassExpression')\n        && node.id\n        && !!node.id.name\n      );\n\n      const namedFunctionDeclaration = (\n        (node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression')\n        && node.id\n        && !!node.id.name\n      );\n\n      const namedFunctionExpression = (\n        astUtil.isFunctionLikeExpression(node)\n        && node.parent\n        && (node.parent.type === 'VariableDeclarator' || node.parent.type === 'Property' || node.parent.method === true)\n        && (!node.parent.parent || !componentUtil.isES5Component(node.parent.parent, context))\n      );\n\n      if (\n        namedObjectAssignment || namedObjectDeclaration\n        || namedClass\n        || namedFunctionDeclaration || namedFunctionExpression\n      ) {\n        return true;\n      }\n      return false;\n    }\n\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      'ClassProperty, PropertyDefinition'(node) {\n        if (!propsUtil.isDisplayNameDeclaration(node)) {\n          return;\n        }\n        markDisplayNameAsDeclared(node);\n      },\n\n      MemberExpression(node) {\n        if (!propsUtil.isDisplayNameDeclaration(node.property)) {\n          return;\n        }\n        const component = utils.getRelatedComponent(node);\n        if (!component) {\n          return;\n        }\n        markDisplayNameAsDeclared(component.node.type === 'TSAsExpression' ? component.node.expression : component.node);\n      },\n\n      FunctionExpression(node) {\n        if (ignoreTranspilerName || !hasTranspilerName(node)) {\n          return;\n        }\n        if (components.get(node)) {\n          markDisplayNameAsDeclared(node);\n        }\n      },\n\n      FunctionDeclaration(node) {\n        if (ignoreTranspilerName || !hasTranspilerName(node)) {\n          return;\n        }\n        if (components.get(node)) {\n          markDisplayNameAsDeclared(node);\n        }\n      },\n\n      ArrowFunctionExpression(node) {\n        if (ignoreTranspilerName || !hasTranspilerName(node)) {\n          return;\n        }\n\n        if (components.get(node)) {\n          markDisplayNameAsDeclared(node);\n        }\n      },\n\n      MethodDefinition(node) {\n        if (!propsUtil.isDisplayNameDeclaration(node.key)) {\n          return;\n        }\n        markDisplayNameAsDeclared(node);\n      },\n\n      ClassExpression(node) {\n        if (ignoreTranspilerName || !hasTranspilerName(node)) {\n          return;\n        }\n        markDisplayNameAsDeclared(node);\n      },\n\n      ClassDeclaration(node) {\n        if (ignoreTranspilerName || !hasTranspilerName(node)) {\n          return;\n        }\n        markDisplayNameAsDeclared(node);\n      },\n\n      ObjectExpression(node) {\n        if (!componentUtil.isES5Component(node, context)) {\n          return;\n        }\n        if (ignoreTranspilerName || !hasTranspilerName(node)) {\n          // Search for the displayName declaration\n          node.properties.forEach((property) => {\n            if (!property.key || !propsUtil.isDisplayNameDeclaration(property.key)) {\n              return;\n            }\n            markDisplayNameAsDeclared(node);\n          });\n          return;\n        }\n        markDisplayNameAsDeclared(node);\n      },\n\n      CallExpression(node) {\n        if (!utils.isPragmaComponentWrapper(node)) {\n          return;\n        }\n\n        if (node.arguments.length > 0 && astUtil.isFunctionLikeExpression(node.arguments[0])) {\n          // Skip over React.forwardRef declarations that are embeded within\n          // a React.memo i.e. React.memo(React.forwardRef(/* ... */))\n          // This means that we raise a single error for the call to React.memo\n          // instead of one for React.memo and one for React.forwardRef\n          const isWrappedInAnotherPragma = utils.getPragmaComponentWrapper(node);\n          if (\n            !isWrappedInAnotherPragma\n            && (ignoreTranspilerName || !hasTranspilerName(node.arguments[0]))\n          ) {\n            return;\n          }\n\n          if (components.get(node)) {\n            markDisplayNameAsDeclared(node);\n          }\n        }\n      },\n\n      'Program:exit'() {\n        const list = components.list();\n        // Report missing display name for all components\n        values(list).filter((component) => !component.hasDisplayName).forEach((component) => {\n          reportMissingDisplayName(component);\n        });\n      },\n    };\n  }),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}