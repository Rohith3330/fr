{"ast":null,"code":"'use strict';\n/**\n * Extracts the arguments of a CSS function or AtRule.\n *\n * @param {import('postcss-value-parser').ParsedValue | import('postcss-value-parser').FunctionNode} node\n * @return {import('postcss-value-parser').Node[][]}\n */\n\nmodule.exports = function getArguments(node) {\n  /** @type {import('postcss-value-parser').Node[][]} */\n  const list = [[]];\n\n  for (const child of node.nodes) {\n    if (child.type !== 'div') {\n      list[list.length - 1].push(child);\n    } else {\n      list.push([]);\n    }\n  }\n\n  return list;\n};","map":{"version":3,"names":["module","exports","getArguments","node","list","child","nodes","type","length","push"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/cssnano-utils/src/getArguments.js"],"sourcesContent":["'use strict';\n/**\n * Extracts the arguments of a CSS function or AtRule.\n *\n * @param {import('postcss-value-parser').ParsedValue | import('postcss-value-parser').FunctionNode} node\n * @return {import('postcss-value-parser').Node[][]}\n */\nmodule.exports = function getArguments(node) {\n  /** @type {import('postcss-value-parser').Node[][]} */\n  const list = [[]];\n  for (const child of node.nodes) {\n    if (child.type !== 'div') {\n      list[list.length - 1].push(child);\n    } else {\n      list.push([]);\n    }\n  }\n  return list;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;EAC3C;EACA,MAAMC,IAAI,GAAG,CAAC,EAAD,CAAb;;EACA,KAAK,MAAMC,KAAX,IAAoBF,IAAI,CAACG,KAAzB,EAAgC;IAC9B,IAAID,KAAK,CAACE,IAAN,KAAe,KAAnB,EAA0B;MACxBH,IAAI,CAACA,IAAI,CAACI,MAAL,GAAc,CAAf,CAAJ,CAAsBC,IAAtB,CAA2BJ,KAA3B;IACD,CAFD,MAEO;MACLD,IAAI,CAACK,IAAL,CAAU,EAAV;IACD;EACF;;EACD,OAAOL,IAAP;AACD,CAXD"},"metadata":{},"sourceType":"script"}