{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _declaration = _interopRequireDefault(require(\"./declaration\"));\n\nvar _comment = _interopRequireDefault(require(\"./comment\"));\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction cleanSource(nodes) {\n  return nodes.map(function (i) {\n    if (i.nodes) i.nodes = cleanSource(i.nodes);\n    delete i.source;\n    return i;\n  });\n}\n/**\n * The {@link Root}, {@link AtRule}, and {@link Rule} container nodes\n * inherit some common methods to help work with their children.\n *\n * Note that all containers can store any content. If you write a rule inside\n * a rule, PostCSS will parse it.\n *\n * @extends Node\n * @abstract\n */\n\n\nvar Container = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Container, _Node);\n\n  function Container() {\n    return _Node.apply(this, arguments) || this;\n  }\n\n  var _proto = Container.prototype;\n\n  _proto.push = function push(child) {\n    child.parent = this;\n    this.nodes.push(child);\n    return this;\n  }\n  /**\n   * Iterates through the container’s immediate children,\n   * calling `callback` for each child.\n   *\n   * Returning `false` in the callback will break iteration.\n   *\n   * This method only iterates through the container’s immediate children.\n   * If you need to recursively iterate through all the container’s descendant\n   * nodes, use {@link Container#walk}.\n   *\n   * Unlike the for `{}`-cycle or `Array#forEach` this iterator is safe\n   * if you are mutating the array of child nodes during iteration.\n   * PostCSS will adjust the current index to match the mutations.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black; z-index: 1 }')\n   * const rule = root.first\n   *\n   * for (const decl of rule.nodes) {\n   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n   *   // Cycle will be infinite, because cloneBefore moves the current node\n   *   // to the next index\n   * }\n   *\n   * rule.each(decl => {\n   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n   *   // Will be executed only for color and z-index\n   * })\n   */\n  ;\n\n  _proto.each = function each(callback) {\n    if (!this.lastEach) this.lastEach = 0;\n    if (!this.indexes) this.indexes = {};\n    this.lastEach += 1;\n    var id = this.lastEach;\n    this.indexes[id] = 0;\n    if (!this.nodes) return undefined;\n    var index, result;\n\n    while (this.indexes[id] < this.nodes.length) {\n      index = this.indexes[id];\n      result = callback(this.nodes[index], index);\n      if (result === false) break;\n      this.indexes[id] += 1;\n    }\n\n    delete this.indexes[id];\n    return result;\n  }\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each node.\n   *\n   * Like container.each(), this method is safe to use\n   * if you are mutating arrays during iteration.\n   *\n   * If you only need to iterate through the container’s immediate children,\n   * use {@link Container#each}.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walk(node => {\n   *   // Traverses all descendant nodes.\n   * })\n   */\n  ;\n\n  _proto.walk = function walk(callback) {\n    return this.each(function (child, i) {\n      var result;\n\n      try {\n        result = callback(child, i);\n      } catch (e) {\n        e.postcssNode = child;\n\n        if (e.stack && child.source && /\\n\\s{4}at /.test(e.stack)) {\n          var s = child.source;\n          e.stack = e.stack.replace(/\\n\\s{4}at /, \"$&\" + s.input.from + \":\" + s.start.line + \":\" + s.start.column + \"$&\");\n        }\n\n        throw e;\n      }\n\n      if (result !== false && child.walk) {\n        result = child.walk(callback);\n      }\n\n      return result;\n    });\n  }\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each declaration node.\n   *\n   * If you pass a filter, iteration will only happen over declarations\n   * with matching properties.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [prop]   String or regular expression\n   *                                 to filter declarations by property name.\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkDecls(decl => {\n   *   checkPropertySupport(decl.prop)\n   * })\n   *\n   * root.walkDecls('border-radius', decl => {\n   *   decl.remove()\n   * })\n   *\n   * root.walkDecls(/^background/, decl => {\n   *   decl.value = takeFirstColorFromGradient(decl.value)\n   * })\n   */\n  ;\n\n  _proto.walkDecls = function walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop;\n      return this.walk(function (child, i) {\n        if (child.type === 'decl') {\n          return callback(child, i);\n        }\n      });\n    }\n\n    if (prop instanceof RegExp) {\n      return this.walk(function (child, i) {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i);\n        }\n      });\n    }\n\n    return this.walk(function (child, i) {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i);\n      }\n    });\n  }\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each rule node.\n   *\n   * If you pass a filter, iteration will only happen over rules\n   * with matching selectors.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [selector] String or regular expression\n   *                                   to filter rules by selector.\n   * @param {childIterator} callback   Iterator receives each node and index.\n   *\n   * @return {false|undefined} returns `false` if iteration was broke.\n   *\n   * @example\n   * const selectors = []\n   * root.walkRules(rule => {\n   *   selectors.push(rule.selector)\n   * })\n   * console.log(`Your CSS uses ${ selectors.length } selectors`)\n   */\n  ;\n\n  _proto.walkRules = function walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector;\n      return this.walk(function (child, i) {\n        if (child.type === 'rule') {\n          return callback(child, i);\n        }\n      });\n    }\n\n    if (selector instanceof RegExp) {\n      return this.walk(function (child, i) {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i);\n        }\n      });\n    }\n\n    return this.walk(function (child, i) {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i);\n      }\n    });\n  }\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each at-rule node.\n   *\n   * If you pass a filter, iteration will only happen over at-rules\n   * that have matching names.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [name]   String or regular expression\n   *                                 to filter at-rules by name.\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkAtRules(rule => {\n   *   if (isOld(rule.name)) rule.remove()\n   * })\n   *\n   * let first = false\n   * root.walkAtRules('charset', rule => {\n   *   if (!first) {\n   *     first = true\n   *   } else {\n   *     rule.remove()\n   *   }\n   * })\n   */\n  ;\n\n  _proto.walkAtRules = function walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name;\n      return this.walk(function (child, i) {\n        if (child.type === 'atrule') {\n          return callback(child, i);\n        }\n      });\n    }\n\n    if (name instanceof RegExp) {\n      return this.walk(function (child, i) {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i);\n        }\n      });\n    }\n\n    return this.walk(function (child, i) {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i);\n      }\n    });\n  }\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each comment node.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkComments(comment => {\n   *   comment.remove()\n   * })\n   */\n  ;\n\n  _proto.walkComments = function walkComments(callback) {\n    return this.walk(function (child, i) {\n      if (child.type === 'comment') {\n        return callback(child, i);\n      }\n    });\n  }\n  /**\n   * Inserts new nodes to the end of the container.\n   *\n   * @param {...(Node|object|string|Node[])} children New nodes.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })\n   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })\n   * rule.append(decl1, decl2)\n   *\n   * root.append({ name: 'charset', params: '\"UTF-8\"' })  // at-rule\n   * root.append({ selector: 'a' })                       // rule\n   * rule.append({ prop: 'color', value: 'black' })       // declaration\n   * rule.append({ text: 'Comment' })                     // comment\n   *\n   * root.append('a {}')\n   * root.first.append('color: black; z-index: 1')\n   */\n  ;\n\n  _proto.append = function append() {\n    for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {\n      children[_key] = arguments[_key];\n    }\n\n    for (var _i = 0, _children = children; _i < _children.length; _i++) {\n      var child = _children[_i];\n      var nodes = this.normalize(child, this.last);\n\n      for (var _iterator = _createForOfIteratorHelperLoose(nodes), _step; !(_step = _iterator()).done;) {\n        var node = _step.value;\n        this.nodes.push(node);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Inserts new nodes to the start of the container.\n   *\n   * @param {...(Node|object|string|Node[])} children New nodes.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })\n   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })\n   * rule.prepend(decl1, decl2)\n   *\n   * root.append({ name: 'charset', params: '\"UTF-8\"' })  // at-rule\n   * root.append({ selector: 'a' })                       // rule\n   * rule.append({ prop: 'color', value: 'black' })       // declaration\n   * rule.append({ text: 'Comment' })                     // comment\n   *\n   * root.append('a {}')\n   * root.first.append('color: black; z-index: 1')\n   */\n  ;\n\n  _proto.prepend = function prepend() {\n    for (var _len2 = arguments.length, children = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      children[_key2] = arguments[_key2];\n    }\n\n    children = children.reverse();\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(children), _step2; !(_step2 = _iterator2()).done;) {\n      var child = _step2.value;\n      var nodes = this.normalize(child, this.first, 'prepend').reverse();\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(nodes), _step3; !(_step3 = _iterator3()).done;) {\n        var node = _step3.value;\n        this.nodes.unshift(node);\n      }\n\n      for (var id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length;\n      }\n    }\n\n    return this;\n  };\n\n  _proto.cleanRaws = function cleanRaws(keepBetween) {\n    _Node.prototype.cleanRaws.call(this, keepBetween);\n\n    if (this.nodes) {\n      for (var _iterator4 = _createForOfIteratorHelperLoose(this.nodes), _step4; !(_step4 = _iterator4()).done;) {\n        var node = _step4.value;\n        node.cleanRaws(keepBetween);\n      }\n    }\n  }\n  /**\n   * Insert new node before old node within the container.\n   *\n   * @param {Node|number} exist             Child or child’s index.\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * rule.insertBefore(decl, decl.clone({ prop: '-webkit-' + decl.prop }))\n   */\n  ;\n\n  _proto.insertBefore = function insertBefore(exist, add) {\n    exist = this.index(exist);\n    var type = exist === 0 ? 'prepend' : false;\n    var nodes = this.normalize(add, this.nodes[exist], type).reverse();\n\n    for (var _iterator5 = _createForOfIteratorHelperLoose(nodes), _step5; !(_step5 = _iterator5()).done;) {\n      var node = _step5.value;\n      this.nodes.splice(exist, 0, node);\n    }\n\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (exist <= index) {\n        this.indexes[id] = index + nodes.length;\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Insert new node after old node within the container.\n   *\n   * @param {Node|number} exist             Child or child’s index.\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   */\n  ;\n\n  _proto.insertAfter = function insertAfter(exist, add) {\n    exist = this.index(exist);\n    var nodes = this.normalize(add, this.nodes[exist]).reverse();\n\n    for (var _iterator6 = _createForOfIteratorHelperLoose(nodes), _step6; !(_step6 = _iterator6()).done;) {\n      var node = _step6.value;\n      this.nodes.splice(exist + 1, 0, node);\n    }\n\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (exist < index) {\n        this.indexes[id] = index + nodes.length;\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Removes node from the container and cleans the parent properties\n   * from the node and its children.\n   *\n   * @param {Node|number} child Child or child’s index.\n   *\n   * @return {Node} This node for methods chain\n   *\n   * @example\n   * rule.nodes.length  //=> 5\n   * rule.removeChild(decl)\n   * rule.nodes.length  //=> 4\n   * decl.parent        //=> undefined\n   */\n  ;\n\n  _proto.removeChild = function removeChild(child) {\n    child = this.index(child);\n    this.nodes[child].parent = undefined;\n    this.nodes.splice(child, 1);\n    var index;\n\n    for (var id in this.indexes) {\n      index = this.indexes[id];\n\n      if (index >= child) {\n        this.indexes[id] = index - 1;\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Removes all children from the container\n   * and cleans their parent properties.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * rule.removeAll()\n   * rule.nodes.length //=> 0\n   */\n  ;\n\n  _proto.removeAll = function removeAll() {\n    for (var _iterator7 = _createForOfIteratorHelperLoose(this.nodes), _step7; !(_step7 = _iterator7()).done;) {\n      var node = _step7.value;\n      node.parent = undefined;\n    }\n\n    this.nodes = [];\n    return this;\n  }\n  /**\n   * Passes all declaration values within the container that match pattern\n   * through callback, replacing those values with the returned result\n   * of callback.\n   *\n   * This method is useful if you are using a custom unit or function\n   * and need to iterate through all values.\n   *\n   * @param {string|RegExp} pattern      Replace pattern.\n   * @param {object} opts                Options to speed up the search.\n   * @param {string|string[]} opts.props An array of property names.\n   * @param {string} opts.fast           String that’s used to narrow down\n   *                                     values and speed up the regexp search.\n   * @param {function|string} callback   String to replace pattern or callback\n   *                                     that returns a new value. The callback\n   *                                     will receive the same arguments\n   *                                     as those passed to a function parameter\n   *                                     of `String#replace`.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * root.replaceValues(/\\d+rem/, { fast: 'rem' }, string => {\n   *   return 15 * parseInt(string) + 'px'\n   * })\n   */\n  ;\n\n  _proto.replaceValues = function replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts;\n      opts = {};\n    }\n\n    this.walkDecls(function (decl) {\n      if (opts.props && opts.props.indexOf(decl.prop) === -1) return;\n      if (opts.fast && decl.value.indexOf(opts.fast) === -1) return;\n      decl.value = decl.value.replace(pattern, callback);\n    });\n    return this;\n  }\n  /**\n   * Returns `true` if callback returns `true`\n   * for all of the container’s children.\n   *\n   * @param {childCondition} condition Iterator returns true or false.\n   *\n   * @return {boolean} Is every child pass condition.\n   *\n   * @example\n   * const noPrefixes = rule.every(i => i.prop[0] !== '-')\n   */\n  ;\n\n  _proto.every = function every(condition) {\n    return this.nodes.every(condition);\n  }\n  /**\n   * Returns `true` if callback returns `true` for (at least) one\n   * of the container’s children.\n   *\n   * @param {childCondition} condition Iterator returns true or false.\n   *\n   * @return {boolean} Is some child pass condition.\n   *\n   * @example\n   * const hasPrefix = rule.some(i => i.prop[0] === '-')\n   */\n  ;\n\n  _proto.some = function some(condition) {\n    return this.nodes.some(condition);\n  }\n  /**\n   * Returns a `child`’s index within the {@link Container#nodes} array.\n   *\n   * @param {Node} child Child of the current container.\n   *\n   * @return {number} Child index.\n   *\n   * @example\n   * rule.index( rule.nodes[2] ) //=> 2\n   */\n  ;\n\n  _proto.index = function index(child) {\n    if (typeof child === 'number') {\n      return child;\n    }\n\n    return this.nodes.indexOf(child);\n  }\n  /**\n   * The container’s first child.\n   *\n   * @type {Node}\n   *\n   * @example\n   * rule.first === rules.nodes[0]\n   */\n  ;\n\n  _proto.normalize = function normalize(nodes, sample) {\n    var _this = this;\n\n    if (typeof nodes === 'string') {\n      var parse = require('./parse');\n\n      nodes = cleanSource(parse(nodes).nodes);\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0);\n\n      for (var _iterator8 = _createForOfIteratorHelperLoose(nodes), _step8; !(_step8 = _iterator8()).done;) {\n        var i = _step8.value;\n        if (i.parent) i.parent.removeChild(i, 'ignore');\n      }\n    } else if (nodes.type === 'root') {\n      nodes = nodes.nodes.slice(0);\n\n      for (var _iterator9 = _createForOfIteratorHelperLoose(nodes), _step9; !(_step9 = _iterator9()).done;) {\n        var _i2 = _step9.value;\n        if (_i2.parent) _i2.parent.removeChild(_i2, 'ignore');\n      }\n    } else if (nodes.type) {\n      nodes = [nodes];\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation');\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value);\n      }\n\n      nodes = [new _declaration.default(nodes)];\n    } else if (nodes.selector) {\n      var Rule = require('./rule');\n\n      nodes = [new Rule(nodes)];\n    } else if (nodes.name) {\n      var AtRule = require('./at-rule');\n\n      nodes = [new AtRule(nodes)];\n    } else if (nodes.text) {\n      nodes = [new _comment.default(nodes)];\n    } else {\n      throw new Error('Unknown node type in node creation');\n    }\n\n    var processed = nodes.map(function (i) {\n      if (i.parent) i.parent.removeChild(i);\n\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/[^\\s]/g, '');\n        }\n      }\n\n      i.parent = _this;\n      return i;\n    });\n    return processed;\n  }\n  /**\n   * @memberof Container#\n   * @member {Node[]} nodes An array containing the container’s children.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black }')\n   * root.nodes.length           //=> 1\n   * root.nodes[0].selector      //=> 'a'\n   * root.nodes[0].nodes[0].prop //=> 'color'\n   */\n  ;\n\n  _createClass(Container, [{\n    key: \"first\",\n    get: function get() {\n      if (!this.nodes) return undefined;\n      return this.nodes[0];\n    }\n    /**\n     * The container’s last child.\n     *\n     * @type {Node}\n     *\n     * @example\n     * rule.last === rule.nodes[rule.nodes.length - 1]\n     */\n\n  }, {\n    key: \"last\",\n    get: function get() {\n      if (!this.nodes) return undefined;\n      return this.nodes[this.nodes.length - 1];\n    }\n  }]);\n\n  return Container;\n}(_node.default);\n\nvar _default = Container;\n/**\n * @callback childCondition\n * @param {Node} node    Container child.\n * @param {number} index Child index.\n * @param {Node[]} nodes All container children.\n * @return {boolean}\n */\n\n/**\n * @callback childIterator\n * @param {Node} node    Container child.\n * @param {number} index Child index.\n * @return {false|undefined} Returning `false` will break iteration.\n */\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"mappings":"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","names":["cleanSource","nodes","map","i","source","Container","push","child","parent","each","callback","lastEach","indexes","id","undefined","index","result","length","walk","e","postcssNode","stack","test","s","replace","input","from","start","line","column","walkDecls","prop","type","RegExp","walkRules","selector","walkAtRules","name","walkComments","append","children","arguments","normalize","last","node","prepend","reverse","first","unshift","cleanRaws","keepBetween","_Node","insertBefore","exist","add","splice","insertAfter","removeChild","removeAll","replaceValues","pattern","opts","props","indexOf","decl","fast","value","every","condition","some","sample","parse","require","Array","isArray","slice","Error","String","Declaration","Rule","AtRule","text","Comment","processed","raws","before","_this","Node"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\resolve-url-loader\\node_modules\\postcss\\lib\\container.es6"],"sourcesContent":["import Declaration from './declaration'\nimport Comment from './comment'\nimport Node from './node'\n\nfunction cleanSource (nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\n/**\n * The {@link Root}, {@link AtRule}, and {@link Rule} container nodes\n * inherit some common methods to help work with their children.\n *\n * Note that all containers can store any content. If you write a rule inside\n * a rule, PostCSS will parse it.\n *\n * @extends Node\n * @abstract\n */\nclass Container extends Node {\n  push (child) {\n    child.parent = this\n    this.nodes.push(child)\n    return this\n  }\n\n  /**\n   * Iterates through the container’s immediate children,\n   * calling `callback` for each child.\n   *\n   * Returning `false` in the callback will break iteration.\n   *\n   * This method only iterates through the container’s immediate children.\n   * If you need to recursively iterate through all the container’s descendant\n   * nodes, use {@link Container#walk}.\n   *\n   * Unlike the for `{}`-cycle or `Array#forEach` this iterator is safe\n   * if you are mutating the array of child nodes during iteration.\n   * PostCSS will adjust the current index to match the mutations.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black; z-index: 1 }')\n   * const rule = root.first\n   *\n   * for (const decl of rule.nodes) {\n   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n   *   // Cycle will be infinite, because cloneBefore moves the current node\n   *   // to the next index\n   * }\n   *\n   * rule.each(decl => {\n   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n   *   // Will be executed only for color and z-index\n   * })\n   */\n  each (callback) {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = { }\n\n    this.lastEach += 1\n    let id = this.lastEach\n    this.indexes[id] = 0\n\n    if (!this.nodes) return undefined\n\n    let index, result\n    while (this.indexes[id] < this.nodes.length) {\n      index = this.indexes[id]\n      result = callback(this.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[id] += 1\n    }\n\n    delete this.indexes[id]\n\n    return result\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each node.\n   *\n   * Like container.each(), this method is safe to use\n   * if you are mutating arrays during iteration.\n   *\n   * If you only need to iterate through the container’s immediate children,\n   * use {@link Container#each}.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walk(node => {\n   *   // Traverses all descendant nodes.\n   * })\n   */\n  walk (callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        e.postcssNode = child\n        if (e.stack && child.source && /\\n\\s{4}at /.test(e.stack)) {\n          let s = child.source\n          e.stack = e.stack.replace(/\\n\\s{4}at /,\n            `$&${ s.input.from }:${ s.start.line }:${ s.start.column }$&`)\n        }\n        throw e\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n      return result\n    })\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each declaration node.\n   *\n   * If you pass a filter, iteration will only happen over declarations\n   * with matching properties.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [prop]   String or regular expression\n   *                                 to filter declarations by property name.\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkDecls(decl => {\n   *   checkPropertySupport(decl.prop)\n   * })\n   *\n   * root.walkDecls('border-radius', decl => {\n   *   decl.remove()\n   * })\n   *\n   * root.walkDecls(/^background/, decl => {\n   *   decl.value = takeFirstColorFromGradient(decl.value)\n   * })\n   */\n  walkDecls (prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each rule node.\n   *\n   * If you pass a filter, iteration will only happen over rules\n   * with matching selectors.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [selector] String or regular expression\n   *                                   to filter rules by selector.\n   * @param {childIterator} callback   Iterator receives each node and index.\n   *\n   * @return {false|undefined} returns `false` if iteration was broke.\n   *\n   * @example\n   * const selectors = []\n   * root.walkRules(rule => {\n   *   selectors.push(rule.selector)\n   * })\n   * console.log(`Your CSS uses ${ selectors.length } selectors`)\n   */\n  walkRules (selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each at-rule node.\n   *\n   * If you pass a filter, iteration will only happen over at-rules\n   * that have matching names.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [name]   String or regular expression\n   *                                 to filter at-rules by name.\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkAtRules(rule => {\n   *   if (isOld(rule.name)) rule.remove()\n   * })\n   *\n   * let first = false\n   * root.walkAtRules('charset', rule => {\n   *   if (!first) {\n   *     first = true\n   *   } else {\n   *     rule.remove()\n   *   }\n   * })\n   */\n  walkAtRules (name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each comment node.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkComments(comment => {\n   *   comment.remove()\n   * })\n   */\n  walkComments (callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  /**\n   * Inserts new nodes to the end of the container.\n   *\n   * @param {...(Node|object|string|Node[])} children New nodes.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })\n   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })\n   * rule.append(decl1, decl2)\n   *\n   * root.append({ name: 'charset', params: '\"UTF-8\"' })  // at-rule\n   * root.append({ selector: 'a' })                       // rule\n   * rule.append({ prop: 'color', value: 'black' })       // declaration\n   * rule.append({ text: 'Comment' })                     // comment\n   *\n   * root.append('a {}')\n   * root.first.append('color: black; z-index: 1')\n   */\n  append (...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.nodes.push(node)\n    }\n    return this\n  }\n\n  /**\n   * Inserts new nodes to the start of the container.\n   *\n   * @param {...(Node|object|string|Node[])} children New nodes.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })\n   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })\n   * rule.prepend(decl1, decl2)\n   *\n   * root.append({ name: 'charset', params: '\"UTF-8\"' })  // at-rule\n   * root.append({ selector: 'a' })                       // rule\n   * rule.append({ prop: 'color', value: 'black' })       // declaration\n   * rule.append({ text: 'Comment' })                     // comment\n   *\n   * root.append('a {}')\n   * root.first.append('color: black; z-index: 1')\n   */\n  prepend (...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n    return this\n  }\n\n  cleanRaws (keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  /**\n   * Insert new node before old node within the container.\n   *\n   * @param {Node|number} exist             Child or child’s index.\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * rule.insertBefore(decl, decl.clone({ prop: '-webkit-' + decl.prop }))\n   */\n  insertBefore (exist, add) {\n    exist = this.index(exist)\n\n    let type = exist === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.nodes[exist], type).reverse()\n    for (let node of nodes) this.nodes.splice(exist, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Insert new node after old node within the container.\n   *\n   * @param {Node|number} exist             Child or child’s index.\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   */\n  insertAfter (exist, add) {\n    exist = this.index(exist)\n\n    let nodes = this.normalize(add, this.nodes[exist]).reverse()\n    for (let node of nodes) this.nodes.splice(exist + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Removes node from the container and cleans the parent properties\n   * from the node and its children.\n   *\n   * @param {Node|number} child Child or child’s index.\n   *\n   * @return {Node} This node for methods chain\n   *\n   * @example\n   * rule.nodes.length  //=> 5\n   * rule.removeChild(decl)\n   * rule.nodes.length  //=> 4\n   * decl.parent        //=> undefined\n   */\n  removeChild (child) {\n    child = this.index(child)\n    this.nodes[child].parent = undefined\n    this.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Removes all children from the container\n   * and cleans their parent properties.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * rule.removeAll()\n   * rule.nodes.length //=> 0\n   */\n  removeAll () {\n    for (let node of this.nodes) node.parent = undefined\n    this.nodes = []\n    return this\n  }\n\n  /**\n   * Passes all declaration values within the container that match pattern\n   * through callback, replacing those values with the returned result\n   * of callback.\n   *\n   * This method is useful if you are using a custom unit or function\n   * and need to iterate through all values.\n   *\n   * @param {string|RegExp} pattern      Replace pattern.\n   * @param {object} opts                Options to speed up the search.\n   * @param {string|string[]} opts.props An array of property names.\n   * @param {string} opts.fast           String that’s used to narrow down\n   *                                     values and speed up the regexp search.\n   * @param {function|string} callback   String to replace pattern or callback\n   *                                     that returns a new value. The callback\n   *                                     will receive the same arguments\n   *                                     as those passed to a function parameter\n   *                                     of `String#replace`.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * root.replaceValues(/\\d+rem/, { fast: 'rem' }, string => {\n   *   return 15 * parseInt(string) + 'px'\n   * })\n   */\n  replaceValues (pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = { }\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && opts.props.indexOf(decl.prop) === -1) return\n      if (opts.fast && decl.value.indexOf(opts.fast) === -1) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    return this\n  }\n\n  /**\n   * Returns `true` if callback returns `true`\n   * for all of the container’s children.\n   *\n   * @param {childCondition} condition Iterator returns true or false.\n   *\n   * @return {boolean} Is every child pass condition.\n   *\n   * @example\n   * const noPrefixes = rule.every(i => i.prop[0] !== '-')\n   */\n  every (condition) {\n    return this.nodes.every(condition)\n  }\n\n  /**\n   * Returns `true` if callback returns `true` for (at least) one\n   * of the container’s children.\n   *\n   * @param {childCondition} condition Iterator returns true or false.\n   *\n   * @return {boolean} Is some child pass condition.\n   *\n   * @example\n   * const hasPrefix = rule.some(i => i.prop[0] === '-')\n   */\n  some (condition) {\n    return this.nodes.some(condition)\n  }\n\n  /**\n   * Returns a `child`’s index within the {@link Container#nodes} array.\n   *\n   * @param {Node} child Child of the current container.\n   *\n   * @return {number} Child index.\n   *\n   * @example\n   * rule.index( rule.nodes[2] ) //=> 2\n   */\n  index (child) {\n    if (typeof child === 'number') {\n      return child\n    }\n    return this.nodes.indexOf(child)\n  }\n\n  /**\n   * The container’s first child.\n   *\n   * @type {Node}\n   *\n   * @example\n   * rule.first === rules.nodes[0]\n   */\n  get first () {\n    if (!this.nodes) return undefined\n    return this.nodes[0]\n  }\n\n  /**\n   * The container’s last child.\n   *\n   * @type {Node}\n   *\n   * @example\n   * rule.last === rule.nodes[rule.nodes.length - 1]\n   */\n  get last () {\n    if (!this.nodes) return undefined\n    return this.nodes[this.nodes.length - 1]\n  }\n\n  normalize (nodes, sample) {\n    if (typeof nodes === 'string') {\n      let parse = require('./parse')\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      let Rule = require('./rule')\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      let AtRule = require('./at-rule')\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      if (i.parent) i.parent.removeChild(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/[^\\s]/g, '')\n        }\n      }\n      i.parent = this\n      return i\n    })\n\n    return processed\n  }\n\n  /**\n   * @memberof Container#\n   * @member {Node[]} nodes An array containing the container’s children.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black }')\n   * root.nodes.length           //=> 1\n   * root.nodes[0].selector      //=> 'a'\n   * root.nodes[0].nodes[0].prop //=> 'color'\n   */\n}\n\nexport default Container\n\n/**\n * @callback childCondition\n * @param {Node} node    Container child.\n * @param {number} index Child index.\n * @param {Node[]} nodes All container children.\n * @return {boolean}\n */\n\n/**\n * @callback childIterator\n * @param {Node} node    Container child.\n * @param {number} index Child index.\n * @return {false|undefined} Returning `false` will break iteration.\n */\n"]},"metadata":{},"sourceType":"script"}