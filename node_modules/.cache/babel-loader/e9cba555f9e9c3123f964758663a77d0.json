{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst metaSchema = require(\"./schema.json\");\n\nconst applicator = require(\"./meta/applicator.json\");\n\nconst content = require(\"./meta/content.json\");\n\nconst core = require(\"./meta/core.json\");\n\nconst format = require(\"./meta/format.json\");\n\nconst metadata = require(\"./meta/meta-data.json\");\n\nconst validation = require(\"./meta/validation.json\");\n\nconst META_SUPPORT_DATA = [\"/properties\"];\n\nfunction addMetaSchema2019($data) {\n  ;\n  [metaSchema, applicator, content, core, with$data(this, format), metadata, with$data(this, validation)].forEach(sch => this.addMetaSchema(sch, undefined, false));\n  return this;\n\n  function with$data(ajv, sch) {\n    return $data ? ajv.$dataMetaSchema(sch, META_SUPPORT_DATA) : sch;\n  }\n}\n\nexports.default = addMetaSchema2019;","map":{"version":3,"mappings":";;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,iBAAiB,GAAG,CAAC,aAAD,CAA1B;;AAEA,SAAwBC,iBAAxB,CAAqDC,KAArD,EAAoE;EAClE;EAAC,CACCC,UADD,EAECC,UAFD,EAGCC,OAHD,EAICC,IAJD,EAKCC,SAAS,CAAC,IAAD,EAAOC,MAAP,CALV,EAMCC,QAND,EAOCF,SAAS,CAAC,IAAD,EAAOG,UAAP,CAPV,EAQCC,OARD,CAQUC,GAAD,IAAS,KAAKC,aAAL,CAAmBD,GAAnB,EAAwBE,SAAxB,EAAmC,KAAnC,CARlB;EASD,OAAO,IAAP;;EAEA,SAASP,SAAT,CAAmBQ,GAAnB,EAA6BH,GAA7B,EAAiD;IAC/C,OAAOV,KAAK,GAAGa,GAAG,CAACC,eAAJ,CAAoBJ,GAApB,EAAyBZ,iBAAzB,CAAH,GAAiDY,GAA7D;EACD;AACF;;AAfDK","names":["META_SUPPORT_DATA","addMetaSchema2019","$data","metaSchema","applicator","content","core","with$data","format","metadata","validation","forEach","sch","addMetaSchema","undefined","ajv","$dataMetaSchema","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\mini-css-extract-plugin\\node_modules\\ajv\\lib\\refs\\json-schema-2019-09\\index.ts"],"sourcesContent":["import type Ajv from \"../../core\"\nimport type {AnySchemaObject} from \"../../types\"\nimport * as metaSchema from \"./schema.json\"\nimport * as applicator from \"./meta/applicator.json\"\nimport * as content from \"./meta/content.json\"\nimport * as core from \"./meta/core.json\"\nimport * as format from \"./meta/format.json\"\nimport * as metadata from \"./meta/meta-data.json\"\nimport * as validation from \"./meta/validation.json\"\n\nconst META_SUPPORT_DATA = [\"/properties\"]\n\nexport default function addMetaSchema2019(this: Ajv, $data?: boolean): Ajv {\n  ;[\n    metaSchema,\n    applicator,\n    content,\n    core,\n    with$data(this, format),\n    metadata,\n    with$data(this, validation),\n  ].forEach((sch) => this.addMetaSchema(sch, undefined, false))\n  return this\n\n  function with$data(ajv: Ajv, sch: AnySchemaObject): AnySchemaObject {\n    return $data ? ajv.$dataMetaSchema(sch, META_SUPPORT_DATA) : sch\n  }\n}\n"]},"metadata":{},"sourceType":"script"}