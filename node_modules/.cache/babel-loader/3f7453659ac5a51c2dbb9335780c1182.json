{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, // Arbitrary values must contain balanced brackets (), [] and {}. Escaped\n// values don't count, and brackets inside quotes also don't count.\n//\n// E.g.: w-[this-is]w-[weird-and-invalid]\n// E.g.: w-[this-is\\\\]w-\\\\[weird-but-valid]\n// E.g.: content-['this-is-also-valid]-weirdly-enough']\n\"default\", {\n  enumerable: true,\n  get: () => isValidArbitraryValue\n});\nlet matchingBrackets = new Map([[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]]);\nlet inverseMatchingBrackets = new Map(Array.from(matchingBrackets.entries()).map(_ref => {\n  let [k, v] = _ref;\n  return [v, k];\n}));\nlet quotes = new Set(['\"', \"'\", \"`\"]);\n\nfunction isValidArbitraryValue(value) {\n  let stack = [];\n  let inQuotes = false;\n\n  for (let i = 0; i < value.length; i++) {\n    let char = value[i];\n\n    if (char === \":\" && !inQuotes && stack.length === 0) {\n      return false;\n    } // Non-escaped quotes allow us to \"allow\" anything in between\n\n\n    if (quotes.has(char) && value[i - 1] !== \"\\\\\") {\n      inQuotes = !inQuotes;\n    }\n\n    if (inQuotes) continue;\n    if (value[i - 1] === \"\\\\\") continue; // Escaped\n\n    if (matchingBrackets.has(char)) {\n      stack.push(char);\n    } else if (inverseMatchingBrackets.has(char)) {\n      let inverse = inverseMatchingBrackets.get(char); // Nothing to pop from, therefore it is unbalanced\n\n      if (stack.length <= 0) {\n        return false;\n      } // Popped value must match the inverse value, otherwise it is unbalanced\n\n\n      if (stack.pop() !== inverse) {\n        return false;\n      }\n    }\n  } // If there is still something on the stack, it is also unbalanced\n\n\n  if (stack.length > 0) {\n    return false;\n  } // All good, totally balanced!\n\n\n  return true;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","isValidArbitraryValue","matchingBrackets","Map","inverseMatchingBrackets","Array","from","entries","map","k","v","quotes","Set","stack","inQuotes","i","length","char","has","push","inverse","pop"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/lib/util/isValidArbitraryValue.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, // Arbitrary values must contain balanced brackets (), [] and {}. Escaped\n// values don't count, and brackets inside quotes also don't count.\n//\n// E.g.: w-[this-is]w-[weird-and-invalid]\n// E.g.: w-[this-is\\\\]w-\\\\[weird-but-valid]\n// E.g.: content-['this-is-also-valid]-weirdly-enough']\n\"default\", {\n    enumerable: true,\n    get: ()=>isValidArbitraryValue\n});\nlet matchingBrackets = new Map([\n    [\n        \"{\",\n        \"}\"\n    ],\n    [\n        \"[\",\n        \"]\"\n    ],\n    [\n        \"(\",\n        \")\"\n    ], \n]);\nlet inverseMatchingBrackets = new Map(Array.from(matchingBrackets.entries()).map(([k, v])=>[\n        v,\n        k\n    ]));\nlet quotes = new Set([\n    '\"',\n    \"'\",\n    \"`\"\n]);\nfunction isValidArbitraryValue(value) {\n    let stack = [];\n    let inQuotes = false;\n    for(let i = 0; i < value.length; i++){\n        let char = value[i];\n        if (char === \":\" && !inQuotes && stack.length === 0) {\n            return false;\n        }\n        // Non-escaped quotes allow us to \"allow\" anything in between\n        if (quotes.has(char) && value[i - 1] !== \"\\\\\") {\n            inQuotes = !inQuotes;\n        }\n        if (inQuotes) continue;\n        if (value[i - 1] === \"\\\\\") continue; // Escaped\n        if (matchingBrackets.has(char)) {\n            stack.push(char);\n        } else if (inverseMatchingBrackets.has(char)) {\n            let inverse = inverseMatchingBrackets.get(char);\n            // Nothing to pop from, therefore it is unbalanced\n            if (stack.length <= 0) {\n                return false;\n            }\n            // Popped value must match the inverse value, otherwise it is unbalanced\n            if (stack.pop() !== inverse) {\n                return false;\n            }\n        }\n    }\n    // If there is still something on the stack, it is also unbalanced\n    if (stack.length > 0) {\n        return false;\n    }\n    // All good, totally balanced!\n    return true;\n}\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EACzCC,KAAK,EAAE;AADkC,CAA7C;AAGAH,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,SANA,EAMW;EACPE,UAAU,EAAE,IADL;EAEPC,GAAG,EAAE,MAAIC;AAFF,CANX;AAUA,IAAIC,gBAAgB,GAAG,IAAIC,GAAJ,CAAQ,CAC3B,CACI,GADJ,EAEI,GAFJ,CAD2B,EAK3B,CACI,GADJ,EAEI,GAFJ,CAL2B,EAS3B,CACI,GADJ,EAEI,GAFJ,CAT2B,CAAR,CAAvB;AAcA,IAAIC,uBAAuB,GAAG,IAAID,GAAJ,CAAQE,KAAK,CAACC,IAAN,CAAWJ,gBAAgB,CAACK,OAAjB,EAAX,EAAuCC,GAAvC,CAA2C;EAAA,IAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD;EAAA,OAAU,CACnFA,CADmF,EAEnFD,CAFmF,CAAV;AAAA,CAA3C,CAAR,CAA9B;AAIA,IAAIE,MAAM,GAAG,IAAIC,GAAJ,CAAQ,CACjB,GADiB,EAEjB,GAFiB,EAGjB,GAHiB,CAAR,CAAb;;AAKA,SAASX,qBAAT,CAA+BH,KAA/B,EAAsC;EAClC,IAAIe,KAAK,GAAG,EAAZ;EACA,IAAIC,QAAQ,GAAG,KAAf;;EACA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGjB,KAAK,CAACkB,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;IACjC,IAAIE,IAAI,GAAGnB,KAAK,CAACiB,CAAD,CAAhB;;IACA,IAAIE,IAAI,KAAK,GAAT,IAAgB,CAACH,QAAjB,IAA6BD,KAAK,CAACG,MAAN,KAAiB,CAAlD,EAAqD;MACjD,OAAO,KAAP;IACH,CAJgC,CAKjC;;;IACA,IAAIL,MAAM,CAACO,GAAP,CAAWD,IAAX,KAAoBnB,KAAK,CAACiB,CAAC,GAAG,CAAL,CAAL,KAAiB,IAAzC,EAA+C;MAC3CD,QAAQ,GAAG,CAACA,QAAZ;IACH;;IACD,IAAIA,QAAJ,EAAc;IACd,IAAIhB,KAAK,CAACiB,CAAC,GAAG,CAAL,CAAL,KAAiB,IAArB,EAA2B,SAVM,CAUI;;IACrC,IAAIb,gBAAgB,CAACgB,GAAjB,CAAqBD,IAArB,CAAJ,EAAgC;MAC5BJ,KAAK,CAACM,IAAN,CAAWF,IAAX;IACH,CAFD,MAEO,IAAIb,uBAAuB,CAACc,GAAxB,CAA4BD,IAA5B,CAAJ,EAAuC;MAC1C,IAAIG,OAAO,GAAGhB,uBAAuB,CAACJ,GAAxB,CAA4BiB,IAA5B,CAAd,CAD0C,CAE1C;;MACA,IAAIJ,KAAK,CAACG,MAAN,IAAgB,CAApB,EAAuB;QACnB,OAAO,KAAP;MACH,CALyC,CAM1C;;;MACA,IAAIH,KAAK,CAACQ,GAAN,OAAgBD,OAApB,EAA6B;QACzB,OAAO,KAAP;MACH;IACJ;EACJ,CA3BiC,CA4BlC;;;EACA,IAAIP,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;IAClB,OAAO,KAAP;EACH,CA/BiC,CAgClC;;;EACA,OAAO,IAAP;AACH"},"metadata":{},"sourceType":"script"}