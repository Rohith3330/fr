{"ast":null,"code":"/**\n * @fileoverview Rule for disallowing require() outside of the top-level module context\n * @author Jamund Ferguson\n * @deprecated in ESLint v7.0.0\n */\n\"use strict\";\n\nconst ACCEPTABLE_PARENTS = new Set([\"AssignmentExpression\", \"VariableDeclarator\", \"MemberExpression\", \"ExpressionStatement\", \"CallExpression\", \"ConditionalExpression\", \"Program\", \"VariableDeclaration\", \"ChainExpression\"]);\n/**\n * Finds the eslint-scope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\n\nfunction findReference(scope, node) {\n  const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] && reference.identifier.range[1] === node.range[1]);\n\n  if (references.length === 1) {\n    return references[0];\n  }\n  /* c8 ignore next */\n\n\n  return null;\n}\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {ASTNode} node The identifier node to check.\n * @returns {boolean} Whether or not the name is shadowed.\n */\n\n\nfunction isShadowed(scope, node) {\n  const reference = findReference(scope, node);\n  return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"suggestion\",\n    docs: {\n      description: \"Require `require()` calls to be placed at top-level module scope\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/global-require\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Unexpected require().\"\n    }\n  },\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        const currentScope = context.getScope();\n\n        if (node.callee.name === \"require\" && !isShadowed(currentScope, node.callee)) {\n          const isGoodRequire = context.getAncestors().every(parent => ACCEPTABLE_PARENTS.has(parent.type));\n\n          if (!isGoodRequire) {\n            context.report({\n              node,\n              messageId: \"unexpected\"\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["ACCEPTABLE_PARENTS","Set","findReference","scope","node","references","filter","reference","identifier","range","length","isShadowed","resolved","defs","module","exports","meta","deprecated","replacedBy","type","docs","description","recommended","url","schema","messages","unexpected","create","context","CallExpression","currentScope","getScope","callee","name","isGoodRequire","getAncestors","every","parent","has","report","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/global-require.js"],"sourcesContent":["/**\n * @fileoverview Rule for disallowing require() outside of the top-level module context\n * @author Jamund Ferguson\n * @deprecated in ESLint v7.0.0\n */\n\n\"use strict\";\n\nconst ACCEPTABLE_PARENTS = new Set([\n    \"AssignmentExpression\",\n    \"VariableDeclarator\",\n    \"MemberExpression\",\n    \"ExpressionStatement\",\n    \"CallExpression\",\n    \"ConditionalExpression\",\n    \"Program\",\n    \"VariableDeclaration\",\n    \"ChainExpression\"\n]);\n\n/**\n * Finds the eslint-scope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\nfunction findReference(scope, node) {\n    const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] &&\n            reference.identifier.range[1] === node.range[1]);\n\n    if (references.length === 1) {\n        return references[0];\n    }\n\n    /* c8 ignore next */\n    return null;\n\n}\n\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {ASTNode} node The identifier node to check.\n * @returns {boolean} Whether or not the name is shadowed.\n */\nfunction isShadowed(scope, node) {\n    const reference = findReference(scope, node);\n\n    return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: true,\n\n        replacedBy: [],\n\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Require `require()` calls to be placed at top-level module scope\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/global-require\"\n        },\n\n        schema: [],\n        messages: {\n            unexpected: \"Unexpected require().\"\n        }\n    },\n\n    create(context) {\n        return {\n            CallExpression(node) {\n                const currentScope = context.getScope();\n\n                if (node.callee.name === \"require\" && !isShadowed(currentScope, node.callee)) {\n                    const isGoodRequire = context.getAncestors().every(parent => ACCEPTABLE_PARENTS.has(parent.type));\n\n                    if (!isGoodRequire) {\n                        context.report({ node, messageId: \"unexpected\" });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,kBAAkB,GAAG,IAAIC,GAAJ,CAAQ,CAC/B,sBAD+B,EAE/B,oBAF+B,EAG/B,kBAH+B,EAI/B,qBAJ+B,EAK/B,gBAL+B,EAM/B,uBAN+B,EAO/B,SAP+B,EAQ/B,qBAR+B,EAS/B,iBAT+B,CAAR,CAA3B;AAYA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAoC;EAChC,MAAMC,UAAU,GAAGF,KAAK,CAACE,UAAN,CAAiBC,MAAjB,CAAwBC,SAAS,IAAIA,SAAS,CAACC,UAAV,CAAqBC,KAArB,CAA2B,CAA3B,MAAkCL,IAAI,CAACK,KAAL,CAAW,CAAX,CAAlC,IAChDF,SAAS,CAACC,UAAV,CAAqBC,KAArB,CAA2B,CAA3B,MAAkCL,IAAI,CAACK,KAAL,CAAW,CAAX,CADvB,CAAnB;;EAGA,IAAIJ,UAAU,CAACK,MAAX,KAAsB,CAA1B,EAA6B;IACzB,OAAOL,UAAU,CAAC,CAAD,CAAjB;EACH;EAED;;;EACA,OAAO,IAAP;AAEH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,UAAT,CAAoBR,KAApB,EAA2BC,IAA3B,EAAiC;EAC7B,MAAMG,SAAS,GAAGL,aAAa,CAACC,KAAD,EAAQC,IAAR,CAA/B;EAEA,OAAOG,SAAS,IAAIA,SAAS,CAACK,QAAvB,IAAmCL,SAAS,CAACK,QAAV,CAAmBC,IAAnB,CAAwBH,MAAxB,GAAiC,CAA3E;AACH;AAED;;;AACAI,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,UAAU,EAAE,IADV;IAGFC,UAAU,EAAE,EAHV;IAKFC,IAAI,EAAE,YALJ;IAOFC,IAAI,EAAE;MACFC,WAAW,EAAE,kEADX;MAEFC,WAAW,EAAE,KAFX;MAGFC,GAAG,EAAE;IAHH,CAPJ;IAaFC,MAAM,EAAE,EAbN;IAcFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAdR,CADO;;EAoBbC,MAAM,CAACC,OAAD,EAAU;IACZ,OAAO;MACHC,cAAc,CAACzB,IAAD,EAAO;QACjB,MAAM0B,YAAY,GAAGF,OAAO,CAACG,QAAR,EAArB;;QAEA,IAAI3B,IAAI,CAAC4B,MAAL,CAAYC,IAAZ,KAAqB,SAArB,IAAkC,CAACtB,UAAU,CAACmB,YAAD,EAAe1B,IAAI,CAAC4B,MAApB,CAAjD,EAA8E;UAC1E,MAAME,aAAa,GAAGN,OAAO,CAACO,YAAR,GAAuBC,KAAvB,CAA6BC,MAAM,IAAIrC,kBAAkB,CAACsC,GAAnB,CAAuBD,MAAM,CAAClB,IAA9B,CAAvC,CAAtB;;UAEA,IAAI,CAACe,aAAL,EAAoB;YAChBN,OAAO,CAACW,MAAR,CAAe;cAAEnC,IAAF;cAAQoC,SAAS,EAAE;YAAnB,CAAf;UACH;QACJ;MACJ;;IAXE,CAAP;EAaH;;AAlCY,CAAjB"},"metadata":{},"sourceType":"script"}