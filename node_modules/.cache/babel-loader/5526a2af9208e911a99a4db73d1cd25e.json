{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _getBuiltinRule = require(\"../utilities/getBuiltinRule\"); // A wrapper around ESLint's core rule no-unused-expressions, additionally ignores type cast\n// expressions.\n\n\nconst noUnusedExpressionsRule = (0, _getBuiltinRule.getBuiltinRule)('no-unused-expressions');\nconst {\n  meta\n} = noUnusedExpressionsRule;\n\nconst create = context => {\n  const coreChecks = noUnusedExpressionsRule.create(context);\n  return {\n    ExpressionStatement(node) {\n      if (node.expression.type === 'TypeCastExpression' || node.expression.type === 'OptionalCallExpression') {\n        return;\n      } // eslint-disable-next-line @babel/new-cap\n\n\n      coreChecks.ExpressionStatement(node);\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  meta\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_getBuiltinRule","require","noUnusedExpressionsRule","getBuiltinRule","meta","create","context","coreChecks","ExpressionStatement","node","expression","type","_default","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/noUnusedExpressions.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _getBuiltinRule = require(\"../utilities/getBuiltinRule\");\n\n// A wrapper around ESLint's core rule no-unused-expressions, additionally ignores type cast\n// expressions.\nconst noUnusedExpressionsRule = (0, _getBuiltinRule.getBuiltinRule)('no-unused-expressions');\nconst {\n  meta\n} = noUnusedExpressionsRule;\n\nconst create = context => {\n  const coreChecks = noUnusedExpressionsRule.create(context);\n  return {\n    ExpressionStatement(node) {\n      if (node.expression.type === 'TypeCastExpression' || node.expression.type === 'OptionalCallExpression') {\n        return;\n      } // eslint-disable-next-line @babel/new-cap\n\n\n      coreChecks.ExpressionStatement(node);\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  meta\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,eAAe,GAAGC,OAAO,CAAC,6BAAD,CAA7B,C,CAEA;AACA;;;AACA,MAAMC,uBAAuB,GAAG,CAAC,GAAGF,eAAe,CAACG,cAApB,EAAoC,uBAApC,CAAhC;AACA,MAAM;EACJC;AADI,IAEFF,uBAFJ;;AAIA,MAAMG,MAAM,GAAGC,OAAO,IAAI;EACxB,MAAMC,UAAU,GAAGL,uBAAuB,CAACG,MAAxB,CAA+BC,OAA/B,CAAnB;EACA,OAAO;IACLE,mBAAmB,CAACC,IAAD,EAAO;MACxB,IAAIA,IAAI,CAACC,UAAL,CAAgBC,IAAhB,KAAyB,oBAAzB,IAAiDF,IAAI,CAACC,UAAL,CAAgBC,IAAhB,KAAyB,wBAA9E,EAAwG;QACtG;MACD,CAHuB,CAGtB;;;MAGFJ,UAAU,CAACC,mBAAX,CAA+BC,IAA/B;IACD;;EARI,CAAP;AAWD,CAbD;;AAeA,IAAIG,QAAQ,GAAG;EACbP,MADa;EAEbD;AAFa,CAAf;AAIAP,OAAO,CAACE,OAAR,GAAkBa,QAAlB;AACAC,MAAM,CAAChB,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}