{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RULE_NAME = void 0;\n\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\n\nconst node_utils_1 = require(\"../node-utils\");\n\nexports.RULE_NAME = 'consistent-data-testid';\nconst FILENAME_PLACEHOLDER = '{fileName}';\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n  name: exports.RULE_NAME,\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Ensures consistent usage of `data-testid`',\n      recommendedConfig: {\n        dom: false,\n        angular: false,\n        react: false,\n        vue: false,\n        marko: false\n      }\n    },\n    messages: {\n      consistentDataTestId: '`{{attr}}` \"{{value}}\" should match `{{regex}}`'\n    },\n    schema: [{\n      type: 'object',\n      default: {},\n      additionalProperties: false,\n      required: ['testIdPattern'],\n      properties: {\n        testIdPattern: {\n          type: 'string'\n        },\n        testIdAttribute: {\n          default: 'data-testid',\n          oneOf: [{\n            type: 'string'\n          }, {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }]\n        }\n      }\n    }]\n  },\n  defaultOptions: [{\n    testIdPattern: '',\n    testIdAttribute: 'data-testid'\n  }],\n  detectionOptions: {\n    skipRuleReportingCheck: true\n  },\n  create: (context, _ref) => {\n    let [options] = _ref;\n    const {\n      getFilename\n    } = context;\n    const {\n      testIdPattern,\n      testIdAttribute: attr\n    } = options;\n\n    function getFileNameData() {\n      var _a;\n\n      const splitPath = getFilename().split('/');\n      const fileNameWithExtension = (_a = splitPath.pop()) !== null && _a !== void 0 ? _a : '';\n\n      if (fileNameWithExtension.includes('[') || fileNameWithExtension.includes(']')) {\n        return {\n          fileName: undefined\n        };\n      }\n\n      const parent = splitPath.pop();\n      const fileName = fileNameWithExtension.split('.').shift();\n      return {\n        fileName: fileName === 'index' ? parent : fileName\n      };\n    }\n\n    function getTestIdValidator(fileName) {\n      return new RegExp(testIdPattern.replace(FILENAME_PLACEHOLDER, fileName));\n    }\n\n    function isTestIdAttribute(name) {\n      var _a;\n\n      if (typeof attr === 'string') {\n        return attr === name;\n      } else {\n        return (_a = attr === null || attr === void 0 ? void 0 : attr.includes(name)) !== null && _a !== void 0 ? _a : false;\n      }\n    }\n\n    return {\n      JSXIdentifier: node => {\n        if (!node.parent || !(0, node_utils_1.isJSXAttribute)(node.parent) || !(0, node_utils_1.isLiteral)(node.parent.value) || !isTestIdAttribute(node.name)) {\n          return;\n        }\n\n        const value = node.parent.value.value;\n        const {\n          fileName\n        } = getFileNameData();\n        const regex = getTestIdValidator(fileName !== null && fileName !== void 0 ? fileName : '');\n\n        if (value && typeof value === 'string' && !regex.test(value)) {\n          context.report({\n            node,\n            messageId: 'consistentDataTestId',\n            data: {\n              attr: node.name,\n              value,\n              regex\n            }\n          });\n        }\n      }\n    };\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","RULE_NAME","create_testing_library_rule_1","require","node_utils_1","FILENAME_PLACEHOLDER","default","createTestingLibraryRule","name","meta","type","docs","description","recommendedConfig","dom","angular","react","vue","marko","messages","consistentDataTestId","schema","additionalProperties","required","properties","testIdPattern","testIdAttribute","oneOf","items","defaultOptions","detectionOptions","skipRuleReportingCheck","create","context","options","getFilename","attr","getFileNameData","_a","splitPath","split","fileNameWithExtension","pop","includes","fileName","undefined","parent","shift","getTestIdValidator","RegExp","replace","isTestIdAttribute","JSXIdentifier","node","isJSXAttribute","isLiteral","regex","test","report","messageId","data"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-testing-library/rules/consistent-data-testid.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RULE_NAME = void 0;\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\nconst node_utils_1 = require(\"../node-utils\");\nexports.RULE_NAME = 'consistent-data-testid';\nconst FILENAME_PLACEHOLDER = '{fileName}';\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n    name: exports.RULE_NAME,\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Ensures consistent usage of `data-testid`',\n            recommendedConfig: {\n                dom: false,\n                angular: false,\n                react: false,\n                vue: false,\n                marko: false,\n            },\n        },\n        messages: {\n            consistentDataTestId: '`{{attr}}` \"{{value}}\" should match `{{regex}}`',\n        },\n        schema: [\n            {\n                type: 'object',\n                default: {},\n                additionalProperties: false,\n                required: ['testIdPattern'],\n                properties: {\n                    testIdPattern: {\n                        type: 'string',\n                    },\n                    testIdAttribute: {\n                        default: 'data-testid',\n                        oneOf: [\n                            {\n                                type: 'string',\n                            },\n                            {\n                                type: 'array',\n                                items: {\n                                    type: 'string',\n                                },\n                            },\n                        ],\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            testIdPattern: '',\n            testIdAttribute: 'data-testid',\n        },\n    ],\n    detectionOptions: {\n        skipRuleReportingCheck: true,\n    },\n    create: (context, [options]) => {\n        const { getFilename } = context;\n        const { testIdPattern, testIdAttribute: attr } = options;\n        function getFileNameData() {\n            var _a;\n            const splitPath = getFilename().split('/');\n            const fileNameWithExtension = (_a = splitPath.pop()) !== null && _a !== void 0 ? _a : '';\n            if (fileNameWithExtension.includes('[') ||\n                fileNameWithExtension.includes(']')) {\n                return { fileName: undefined };\n            }\n            const parent = splitPath.pop();\n            const fileName = fileNameWithExtension.split('.').shift();\n            return {\n                fileName: fileName === 'index' ? parent : fileName,\n            };\n        }\n        function getTestIdValidator(fileName) {\n            return new RegExp(testIdPattern.replace(FILENAME_PLACEHOLDER, fileName));\n        }\n        function isTestIdAttribute(name) {\n            var _a;\n            if (typeof attr === 'string') {\n                return attr === name;\n            }\n            else {\n                return (_a = attr === null || attr === void 0 ? void 0 : attr.includes(name)) !== null && _a !== void 0 ? _a : false;\n            }\n        }\n        return {\n            JSXIdentifier: (node) => {\n                if (!node.parent ||\n                    !(0, node_utils_1.isJSXAttribute)(node.parent) ||\n                    !(0, node_utils_1.isLiteral)(node.parent.value) ||\n                    !isTestIdAttribute(node.name)) {\n                    return;\n                }\n                const value = node.parent.value.value;\n                const { fileName } = getFileNameData();\n                const regex = getTestIdValidator(fileName !== null && fileName !== void 0 ? fileName : '');\n                if (value && typeof value === 'string' && !regex.test(value)) {\n                    context.report({\n                        node,\n                        messageId: 'consistentDataTestId',\n                        data: {\n                            attr: node.name,\n                            value,\n                            regex,\n                        },\n                    });\n                }\n            },\n        };\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}