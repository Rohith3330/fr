{"ast":null,"code":"import normalizeTailwindDirectives from './lib/normalizeTailwindDirectives';\nimport expandTailwindAtRules from './lib/expandTailwindAtRules';\nimport expandApplyAtRules from './lib/expandApplyAtRules';\nimport evaluateTailwindFunctions from './lib/evaluateTailwindFunctions';\nimport substituteScreenAtRules from './lib/substituteScreenAtRules';\nimport resolveDefaultsAtRules from './lib/resolveDefaultsAtRules';\nimport collapseAdjacentRules from './lib/collapseAdjacentRules';\nimport collapseDuplicateDeclarations from './lib/collapseDuplicateDeclarations';\nimport partitionApplyAtRules from './lib/partitionApplyAtRules';\nimport detectNesting from './lib/detectNesting';\nimport { createContext } from './lib/setupContextUtils';\nimport { issueFlagNotices } from './featureFlags';\nexport default function processTailwindFeatures(setupContext) {\n  return function (root, result) {\n    let {\n      tailwindDirectives,\n      applyDirectives\n    } = normalizeTailwindDirectives(root);\n    detectNesting()(root, result); // Partition apply rules that are found in the css\n    // itself.\n\n    partitionApplyAtRules()(root, result);\n    let context = setupContext({\n      tailwindDirectives,\n      applyDirectives,\n\n      registerDependency(dependency) {\n        result.messages.push({\n          plugin: 'tailwindcss',\n          parent: result.opts.from,\n          ...dependency\n        });\n      },\n\n      createContext(tailwindConfig, changedContent) {\n        return createContext(tailwindConfig, changedContent, root);\n      }\n\n    })(root, result);\n\n    if (context.tailwindConfig.separator === '-') {\n      throw new Error(\"The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead.\");\n    }\n\n    issueFlagNotices(context.tailwindConfig);\n    expandTailwindAtRules(context)(root, result); // Partition apply rules that are generated by\n    // addComponents, addUtilities and so on.\n\n    partitionApplyAtRules()(root, result);\n    expandApplyAtRules(context)(root, result);\n    evaluateTailwindFunctions(context)(root, result);\n    substituteScreenAtRules(context)(root, result);\n    resolveDefaultsAtRules(context)(root, result);\n    collapseAdjacentRules(context)(root, result);\n    collapseDuplicateDeclarations(context)(root, result);\n  };\n}","map":{"version":3,"names":["normalizeTailwindDirectives","expandTailwindAtRules","expandApplyAtRules","evaluateTailwindFunctions","substituteScreenAtRules","resolveDefaultsAtRules","collapseAdjacentRules","collapseDuplicateDeclarations","partitionApplyAtRules","detectNesting","createContext","issueFlagNotices","processTailwindFeatures","setupContext","root","result","tailwindDirectives","applyDirectives","context","registerDependency","dependency","messages","push","plugin","parent","opts","from","tailwindConfig","changedContent","separator","Error"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/processTailwindFeatures.js"],"sourcesContent":["import normalizeTailwindDirectives from './lib/normalizeTailwindDirectives'\nimport expandTailwindAtRules from './lib/expandTailwindAtRules'\nimport expandApplyAtRules from './lib/expandApplyAtRules'\nimport evaluateTailwindFunctions from './lib/evaluateTailwindFunctions'\nimport substituteScreenAtRules from './lib/substituteScreenAtRules'\nimport resolveDefaultsAtRules from './lib/resolveDefaultsAtRules'\nimport collapseAdjacentRules from './lib/collapseAdjacentRules'\nimport collapseDuplicateDeclarations from './lib/collapseDuplicateDeclarations'\nimport partitionApplyAtRules from './lib/partitionApplyAtRules'\nimport detectNesting from './lib/detectNesting'\nimport { createContext } from './lib/setupContextUtils'\nimport { issueFlagNotices } from './featureFlags'\n\nexport default function processTailwindFeatures(setupContext) {\n  return function (root, result) {\n    let { tailwindDirectives, applyDirectives } = normalizeTailwindDirectives(root)\n\n    detectNesting()(root, result)\n\n    // Partition apply rules that are found in the css\n    // itself.\n    partitionApplyAtRules()(root, result)\n\n    let context = setupContext({\n      tailwindDirectives,\n      applyDirectives,\n      registerDependency(dependency) {\n        result.messages.push({\n          plugin: 'tailwindcss',\n          parent: result.opts.from,\n          ...dependency,\n        })\n      },\n      createContext(tailwindConfig, changedContent) {\n        return createContext(tailwindConfig, changedContent, root)\n      },\n    })(root, result)\n\n    if (context.tailwindConfig.separator === '-') {\n      throw new Error(\n        \"The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead.\"\n      )\n    }\n\n    issueFlagNotices(context.tailwindConfig)\n\n    expandTailwindAtRules(context)(root, result)\n    // Partition apply rules that are generated by\n    // addComponents, addUtilities and so on.\n    partitionApplyAtRules()(root, result)\n    expandApplyAtRules(context)(root, result)\n    evaluateTailwindFunctions(context)(root, result)\n    substituteScreenAtRules(context)(root, result)\n    resolveDefaultsAtRules(context)(root, result)\n    collapseAdjacentRules(context)(root, result)\n    collapseDuplicateDeclarations(context)(root, result)\n  }\n}\n"],"mappings":"AAAA,OAAOA,2BAAP,MAAwC,mCAAxC;AACA,OAAOC,qBAAP,MAAkC,6BAAlC;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AACA,OAAOC,yBAAP,MAAsC,iCAAtC;AACA,OAAOC,uBAAP,MAAoC,+BAApC;AACA,OAAOC,sBAAP,MAAmC,8BAAnC;AACA,OAAOC,qBAAP,MAAkC,6BAAlC;AACA,OAAOC,6BAAP,MAA0C,qCAA1C;AACA,OAAOC,qBAAP,MAAkC,6BAAlC;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,gBAAT,QAAiC,gBAAjC;AAEA,eAAe,SAASC,uBAAT,CAAiCC,YAAjC,EAA+C;EAC5D,OAAO,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;IAC7B,IAAI;MAAEC,kBAAF;MAAsBC;IAAtB,IAA0CjB,2BAA2B,CAACc,IAAD,CAAzE;IAEAL,aAAa,GAAGK,IAAH,EAASC,MAAT,CAAb,CAH6B,CAK7B;IACA;;IACAP,qBAAqB,GAAGM,IAAH,EAASC,MAAT,CAArB;IAEA,IAAIG,OAAO,GAAGL,YAAY,CAAC;MACzBG,kBADyB;MAEzBC,eAFyB;;MAGzBE,kBAAkB,CAACC,UAAD,EAAa;QAC7BL,MAAM,CAACM,QAAP,CAAgBC,IAAhB,CAAqB;UACnBC,MAAM,EAAE,aADW;UAEnBC,MAAM,EAAET,MAAM,CAACU,IAAP,CAAYC,IAFD;UAGnB,GAAGN;QAHgB,CAArB;MAKD,CATwB;;MAUzBV,aAAa,CAACiB,cAAD,EAAiBC,cAAjB,EAAiC;QAC5C,OAAOlB,aAAa,CAACiB,cAAD,EAAiBC,cAAjB,EAAiCd,IAAjC,CAApB;MACD;;IAZwB,CAAD,CAAZ,CAaXA,IAbW,EAaLC,MAbK,CAAd;;IAeA,IAAIG,OAAO,CAACS,cAAR,CAAuBE,SAAvB,KAAqC,GAAzC,EAA8C;MAC5C,MAAM,IAAIC,KAAJ,CACJ,6IADI,CAAN;IAGD;;IAEDnB,gBAAgB,CAACO,OAAO,CAACS,cAAT,CAAhB;IAEA1B,qBAAqB,CAACiB,OAAD,CAArB,CAA+BJ,IAA/B,EAAqCC,MAArC,EAhC6B,CAiC7B;IACA;;IACAP,qBAAqB,GAAGM,IAAH,EAASC,MAAT,CAArB;IACAb,kBAAkB,CAACgB,OAAD,CAAlB,CAA4BJ,IAA5B,EAAkCC,MAAlC;IACAZ,yBAAyB,CAACe,OAAD,CAAzB,CAAmCJ,IAAnC,EAAyCC,MAAzC;IACAX,uBAAuB,CAACc,OAAD,CAAvB,CAAiCJ,IAAjC,EAAuCC,MAAvC;IACAV,sBAAsB,CAACa,OAAD,CAAtB,CAAgCJ,IAAhC,EAAsCC,MAAtC;IACAT,qBAAqB,CAACY,OAAD,CAArB,CAA+BJ,IAA/B,EAAqCC,MAArC;IACAR,6BAA6B,CAACW,OAAD,CAA7B,CAAuCJ,IAAvC,EAA6CC,MAA7C;EACD,CA1CD;AA2CD"},"metadata":{},"sourceType":"module"}