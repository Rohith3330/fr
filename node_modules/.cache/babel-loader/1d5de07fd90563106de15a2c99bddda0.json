{"ast":null,"code":"'use strict';\n\nconst {\n  sep: DEFAULT_SEPARATOR\n} = require('path');\n\nconst determineSeparator = paths => {\n  for (const path of paths) {\n    const match = /(\\/|\\\\)/.exec(path);\n    if (match !== null) return match[0];\n  }\n\n  return DEFAULT_SEPARATOR;\n};\n\nmodule.exports = function commonPathPrefix(paths) {\n  let sep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : determineSeparator(paths);\n  const [first = '', ...remaining] = paths;\n  if (first === '' || remaining.length === 0) return '';\n  const parts = first.split(sep);\n  let endOfPrefix = parts.length;\n\n  for (const path of remaining) {\n    const compare = path.split(sep);\n\n    for (let i = 0; i < endOfPrefix; i++) {\n      if (compare[i] !== parts[i]) {\n        endOfPrefix = i;\n      }\n    }\n\n    if (endOfPrefix === 0) return '';\n  }\n\n  const prefix = parts.slice(0, endOfPrefix).join(sep);\n  return prefix.endsWith(sep) ? prefix : prefix + sep;\n};","map":{"version":3,"names":["sep","DEFAULT_SEPARATOR","require","determineSeparator","paths","path","match","exec","module","exports","commonPathPrefix","first","remaining","length","parts","split","endOfPrefix","compare","i","prefix","slice","join","endsWith"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/common-path-prefix/index.js"],"sourcesContent":["'use strict'\nconst { sep: DEFAULT_SEPARATOR } = require('path')\n\nconst determineSeparator = paths => {\n  for (const path of paths) {\n    const match = /(\\/|\\\\)/.exec(path)\n    if (match !== null) return match[0]\n  }\n\n  return DEFAULT_SEPARATOR\n}\n\nmodule.exports = function commonPathPrefix (paths, sep = determineSeparator(paths)) {\n  const [first = '', ...remaining] = paths\n  if (first === '' || remaining.length === 0) return ''\n\n  const parts = first.split(sep)\n\n  let endOfPrefix = parts.length\n  for (const path of remaining) {\n    const compare = path.split(sep)\n    for (let i = 0; i < endOfPrefix; i++) {\n      if (compare[i] !== parts[i]) {\n        endOfPrefix = i\n      }\n    }\n\n    if (endOfPrefix === 0) return ''\n  }\n\n  const prefix = parts.slice(0, endOfPrefix).join(sep)\n  return prefix.endsWith(sep) ? prefix : prefix + sep\n}\n"],"mappings":"AAAA;;AACA,MAAM;EAAEA,GAAG,EAAEC;AAAP,IAA6BC,OAAO,CAAC,MAAD,CAA1C;;AAEA,MAAMC,kBAAkB,GAAGC,KAAK,IAAI;EAClC,KAAK,MAAMC,IAAX,IAAmBD,KAAnB,EAA0B;IACxB,MAAME,KAAK,GAAG,UAAUC,IAAV,CAAeF,IAAf,CAAd;IACA,IAAIC,KAAK,KAAK,IAAd,EAAoB,OAAOA,KAAK,CAAC,CAAD,CAAZ;EACrB;;EAED,OAAOL,iBAAP;AACD,CAPD;;AASAO,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA2BN,KAA3B,EAAmE;EAAA,IAAjCJ,GAAiC,uEAA3BG,kBAAkB,CAACC,KAAD,CAAS;EAClF,MAAM,CAACO,KAAK,GAAG,EAAT,EAAa,GAAGC,SAAhB,IAA6BR,KAAnC;EACA,IAAIO,KAAK,KAAK,EAAV,IAAgBC,SAAS,CAACC,MAAV,KAAqB,CAAzC,EAA4C,OAAO,EAAP;EAE5C,MAAMC,KAAK,GAAGH,KAAK,CAACI,KAAN,CAAYf,GAAZ,CAAd;EAEA,IAAIgB,WAAW,GAAGF,KAAK,CAACD,MAAxB;;EACA,KAAK,MAAMR,IAAX,IAAmBO,SAAnB,EAA8B;IAC5B,MAAMK,OAAO,GAAGZ,IAAI,CAACU,KAAL,CAAWf,GAAX,CAAhB;;IACA,KAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAApB,EAAiCE,CAAC,EAAlC,EAAsC;MACpC,IAAID,OAAO,CAACC,CAAD,CAAP,KAAeJ,KAAK,CAACI,CAAD,CAAxB,EAA6B;QAC3BF,WAAW,GAAGE,CAAd;MACD;IACF;;IAED,IAAIF,WAAW,KAAK,CAApB,EAAuB,OAAO,EAAP;EACxB;;EAED,MAAMG,MAAM,GAAGL,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAeJ,WAAf,EAA4BK,IAA5B,CAAiCrB,GAAjC,CAAf;EACA,OAAOmB,MAAM,CAACG,QAAP,CAAgBtB,GAAhB,IAAuBmB,MAAvB,GAAgCA,MAAM,GAAGnB,GAAhD;AACD,CApBD"},"metadata":{},"sourceType":"script"}