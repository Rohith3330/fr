{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar thisNumberValue = require('../internals/this-number-value');\n\nvar $repeat = require('../internals/string-repeat');\n\nvar log10 = require('../internals/math-log10');\n\nvar fails = require('../internals/fails');\n\nvar $RangeError = RangeError;\nvar $String = String;\nvar $isFinite = isFinite;\nvar abs = Math.abs;\nvar floor = Math.floor;\nvar pow = Math.pow;\nvar round = Math.round;\nvar nativeToExponential = uncurryThis(1.0.toExponential);\nvar repeat = uncurryThis($repeat);\nvar stringSlice = uncurryThis(''.slice); // Edge 17-\n\nvar ROUNDS_PROPERLY = nativeToExponential(-6.9e-11, 4) === '-6.9000e-11' // IE11- && Edge 14-\n&& nativeToExponential(1.255, 2) === '1.25e+0' // FF86-, V8 ~ Chrome 49-50\n&& nativeToExponential(12345, 3) === '1.235e+4' // FF86-, V8 ~ Chrome 49-50\n&& nativeToExponential(25, 0) === '3e+1'; // IE8-\n\nvar THROWS_ON_INFINITY_FRACTION = fails(function () {\n  nativeToExponential(1, Infinity);\n}) && fails(function () {\n  nativeToExponential(1, -Infinity);\n}); // Safari <11 && FF <50\n\nvar PROPER_NON_FINITE_THIS_CHECK = !fails(function () {\n  nativeToExponential(Infinity, Infinity);\n}) && !fails(function () {\n  nativeToExponential(NaN, Infinity);\n});\nvar FORCED = !ROUNDS_PROPERLY || !THROWS_ON_INFINITY_FRACTION || !PROPER_NON_FINITE_THIS_CHECK; // `Number.prototype.toExponential` method\n// https://tc39.es/ecma262/#sec-number.prototype.toexponential\n\n$({\n  target: 'Number',\n  proto: true,\n  forced: FORCED\n}, {\n  toExponential: function toExponential(fractionDigits) {\n    var x = thisNumberValue(this);\n    if (fractionDigits === undefined) return nativeToExponential(x);\n    var f = toIntegerOrInfinity(fractionDigits);\n    if (!$isFinite(x)) return String(x); // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation\n\n    if (f < 0 || f > 20) throw $RangeError('Incorrect fraction digits');\n    if (ROUNDS_PROPERLY) return nativeToExponential(x, f);\n    var s = '';\n    var m = '';\n    var e = 0;\n    var c = '';\n    var d = '';\n\n    if (x < 0) {\n      s = '-';\n      x = -x;\n    }\n\n    if (x === 0) {\n      e = 0;\n      m = repeat('0', f + 1);\n    } else {\n      // this block is based on https://gist.github.com/SheetJSDev/1100ad56b9f856c95299ed0e068eea08\n      // TODO: improve accuracy with big fraction digits\n      var l = log10(x);\n      e = floor(l);\n      var n = 0;\n      var w = pow(10, e - f);\n      n = round(x / w);\n\n      if (2 * x >= (2 * n + 1) * w) {\n        n += 1;\n      }\n\n      if (n >= pow(10, f + 1)) {\n        n /= 10;\n        e += 1;\n      }\n\n      m = $String(n);\n    }\n\n    if (f !== 0) {\n      m = stringSlice(m, 0, 1) + '.' + stringSlice(m, 1);\n    }\n\n    if (e === 0) {\n      c = '+';\n      d = '0';\n    } else {\n      c = e > 0 ? '+' : '-';\n      d = $String(abs(e));\n    }\n\n    m += 'e' + c + d;\n    return s + m;\n  }\n});","map":{"version":3,"names":["$","require","uncurryThis","toIntegerOrInfinity","thisNumberValue","$repeat","log10","fails","$RangeError","RangeError","$String","String","$isFinite","isFinite","abs","Math","floor","pow","round","nativeToExponential","toExponential","repeat","stringSlice","slice","ROUNDS_PROPERLY","THROWS_ON_INFINITY_FRACTION","Infinity","PROPER_NON_FINITE_THIS_CHECK","NaN","FORCED","target","proto","forced","fractionDigits","x","undefined","f","s","m","e","c","d","l","n","w"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/core-js-pure/modules/es.number.to-exponential.js"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar thisNumberValue = require('../internals/this-number-value');\nvar $repeat = require('../internals/string-repeat');\nvar log10 = require('../internals/math-log10');\nvar fails = require('../internals/fails');\n\nvar $RangeError = RangeError;\nvar $String = String;\nvar $isFinite = isFinite;\nvar abs = Math.abs;\nvar floor = Math.floor;\nvar pow = Math.pow;\nvar round = Math.round;\nvar nativeToExponential = uncurryThis(1.0.toExponential);\nvar repeat = uncurryThis($repeat);\nvar stringSlice = uncurryThis(''.slice);\n\n// Edge 17-\nvar ROUNDS_PROPERLY = nativeToExponential(-6.9e-11, 4) === '-6.9000e-11'\n  // IE11- && Edge 14-\n  && nativeToExponential(1.255, 2) === '1.25e+0'\n  // FF86-, V8 ~ Chrome 49-50\n  && nativeToExponential(12345, 3) === '1.235e+4'\n  // FF86-, V8 ~ Chrome 49-50\n  && nativeToExponential(25, 0) === '3e+1';\n\n// IE8-\nvar THROWS_ON_INFINITY_FRACTION = fails(function () {\n  nativeToExponential(1, Infinity);\n}) && fails(function () {\n  nativeToExponential(1, -Infinity);\n});\n\n// Safari <11 && FF <50\nvar PROPER_NON_FINITE_THIS_CHECK = !fails(function () {\n  nativeToExponential(Infinity, Infinity);\n}) && !fails(function () {\n  nativeToExponential(NaN, Infinity);\n});\n\nvar FORCED = !ROUNDS_PROPERLY || !THROWS_ON_INFINITY_FRACTION || !PROPER_NON_FINITE_THIS_CHECK;\n\n// `Number.prototype.toExponential` method\n// https://tc39.es/ecma262/#sec-number.prototype.toexponential\n$({ target: 'Number', proto: true, forced: FORCED }, {\n  toExponential: function toExponential(fractionDigits) {\n    var x = thisNumberValue(this);\n    if (fractionDigits === undefined) return nativeToExponential(x);\n    var f = toIntegerOrInfinity(fractionDigits);\n    if (!$isFinite(x)) return String(x);\n    // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation\n    if (f < 0 || f > 20) throw $RangeError('Incorrect fraction digits');\n    if (ROUNDS_PROPERLY) return nativeToExponential(x, f);\n    var s = '';\n    var m = '';\n    var e = 0;\n    var c = '';\n    var d = '';\n    if (x < 0) {\n      s = '-';\n      x = -x;\n    }\n    if (x === 0) {\n      e = 0;\n      m = repeat('0', f + 1);\n    } else {\n      // this block is based on https://gist.github.com/SheetJSDev/1100ad56b9f856c95299ed0e068eea08\n      // TODO: improve accuracy with big fraction digits\n      var l = log10(x);\n      e = floor(l);\n      var n = 0;\n      var w = pow(10, e - f);\n      n = round(x / w);\n      if (2 * x >= (2 * n + 1) * w) {\n        n += 1;\n      }\n      if (n >= pow(10, f + 1)) {\n        n /= 10;\n        e += 1;\n      }\n      m = $String(n);\n    }\n    if (f !== 0) {\n      m = stringSlice(m, 0, 1) + '.' + stringSlice(m, 1);\n    }\n    if (e === 0) {\n      c = '+';\n      d = '0';\n    } else {\n      c = e > 0 ? '+' : '-';\n      d = $String(abs(e));\n    }\n    m += 'e' + c + d;\n    return s + m;\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}