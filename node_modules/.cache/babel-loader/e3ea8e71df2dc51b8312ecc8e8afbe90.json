{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeFile;\n\nfunction _fs() {\n  const data = require(\"fs\");\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _debug() {\n  const data = require(\"debug\");\n\n  _debug = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _t() {\n  const data = require(\"@babel/types\");\n\n  _t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _convertSourceMap() {\n  const data = require(\"convert-source-map\");\n\n  _convertSourceMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _file = require(\"./file/file\");\n\nvar _parser = require(\"../parser\");\n\nvar _cloneDeep = require(\"./util/clone-deep\");\n\nconst {\n  file,\n  traverseFast\n} = _t();\n\nconst debug = _debug()(\"babel:transform:file\");\n\nconst LARGE_INPUT_SOURCEMAP_THRESHOLD = 3000000;\n\nfunction* normalizeFile(pluginPasses, options, code, ast) {\n  code = `${code || \"\"}`;\n\n  if (ast) {\n    if (ast.type === \"Program\") {\n      ast = file(ast, [], []);\n    } else if (ast.type !== \"File\") {\n      throw new Error(\"AST root must be a Program or File node\");\n    }\n\n    if (options.cloneInputAst) {\n      ast = (0, _cloneDeep.default)(ast);\n    }\n  } else {\n    ast = yield* (0, _parser.default)(pluginPasses, options, code);\n  }\n\n  let inputMap = null;\n\n  if (options.inputSourceMap !== false) {\n    if (typeof options.inputSourceMap === \"object\") {\n      inputMap = _convertSourceMap().fromObject(options.inputSourceMap);\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);\n\n      if (lastComment) {\n        try {\n          inputMap = _convertSourceMap().fromComment(lastComment);\n        } catch (err) {\n          debug(\"discarding unknown inline input sourcemap\", err);\n        }\n      }\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);\n\n      if (typeof options.filename === \"string\" && lastComment) {\n        try {\n          const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment);\n\n          const inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]));\n\n          if (inputMapContent.length > LARGE_INPUT_SOURCEMAP_THRESHOLD) {\n            debug(\"skip merging input map > 1 MB\");\n          } else {\n            inputMap = _convertSourceMap().fromJSON(inputMapContent);\n          }\n        } catch (err) {\n          debug(\"discarding unknown file input sourcemap\", err);\n        }\n      } else if (lastComment) {\n        debug(\"discarding un-loadable file input sourcemap\");\n      }\n    }\n  }\n\n  return new _file.default(options, {\n    code,\n    ast: ast,\n    inputMap\n  });\n}\n\nconst INLINE_SOURCEMAP_REGEX = /^[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/;\nconst EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+)[ \\t]*$/;\n\nfunction extractCommentsFromList(regex, comments, lastComment) {\n  if (comments) {\n    comments = comments.filter(_ref => {\n      let {\n        value\n      } = _ref;\n\n      if (regex.test(value)) {\n        lastComment = value;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return [comments, lastComment];\n}\n\nfunction extractComments(regex, ast) {\n  let lastComment = null;\n  traverseFast(ast, node => {\n    [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment);\n    [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment);\n    [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);\n  });\n  return lastComment;\n}\n\n0 && 0;","map":{"version":3,"mappings":"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","names":["_fs","_path","_debug","_t","_convertSourceMap","file","traverseFast","debug","buildDebug","LARGE_INPUT_SOURCEMAP_THRESHOLD","normalizeFile","pluginPasses","options","code","ast","type","Error","cloneInputAst","inputMap","inputSourceMap","convertSourceMap","fromObject","lastComment","extractComments","INLINE_SOURCEMAP_REGEX","fromComment","err","EXTERNAL_SOURCEMAP_REGEX","filename","match","exec","inputMapContent","fs","readFileSync","path","resolve","dirname","length","fromJSON","File","extractCommentsFromList","regex","comments","filter","value","test","node","leadingComments","innerComments","trailingComments"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\transformation\\normalize-file.ts"],"sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport buildDebug from \"debug\";\nimport type { Handler } from \"gensync\";\nimport { file, traverseFast } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { PluginPasses } from \"../config\";\nimport convertSourceMap from \"convert-source-map\";\nimport type { SourceMapConverter as Converter } from \"convert-source-map\";\nimport File from \"./file/file\";\nimport parser from \"../parser\";\nimport cloneDeep from \"./util/clone-deep\";\n\nconst debug = buildDebug(\"babel:transform:file\");\nconst LARGE_INPUT_SOURCEMAP_THRESHOLD = 3_000_000;\n\nexport type NormalizedFile = {\n  code: string;\n  ast: t.File;\n  inputMap: Converter | null;\n};\n\nexport default function* normalizeFile(\n  pluginPasses: PluginPasses,\n  options: { [key: string]: any },\n  code: string,\n  ast?: t.File | t.Program | null,\n): Handler<File> {\n  code = `${code || \"\"}`;\n\n  if (ast) {\n    if (ast.type === \"Program\") {\n      ast = file(ast, [], []);\n    } else if (ast.type !== \"File\") {\n      throw new Error(\"AST root must be a Program or File node\");\n    }\n\n    if (options.cloneInputAst) {\n      ast = cloneDeep(ast) as t.File;\n    }\n  } else {\n    // @ts-expect-error todo: use babel-types ast typings in Babel parser\n    ast = yield* parser(pluginPasses, options, code);\n  }\n\n  let inputMap = null;\n  if (options.inputSourceMap !== false) {\n    // If an explicit object is passed in, it overrides the processing of\n    // source maps that may be in the file itself.\n    if (typeof options.inputSourceMap === \"object\") {\n      inputMap = convertSourceMap.fromObject(options.inputSourceMap);\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);\n      if (lastComment) {\n        try {\n          inputMap = convertSourceMap.fromComment(lastComment);\n        } catch (err) {\n          debug(\"discarding unknown inline input sourcemap\", err);\n        }\n      }\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);\n      if (typeof options.filename === \"string\" && lastComment) {\n        try {\n          // when `lastComment` is non-null, EXTERNAL_SOURCEMAP_REGEX must have matches\n          const match: [string, string] = EXTERNAL_SOURCEMAP_REGEX.exec(\n            lastComment,\n          ) as any;\n          const inputMapContent = fs.readFileSync(\n            path.resolve(path.dirname(options.filename), match[1]),\n          );\n          if (inputMapContent.length > LARGE_INPUT_SOURCEMAP_THRESHOLD) {\n            debug(\"skip merging input map > 1 MB\");\n          } else {\n            inputMap = convertSourceMap.fromJSON(\n              // todo:\n              inputMapContent as unknown as string,\n            );\n          }\n        } catch (err) {\n          debug(\"discarding unknown file input sourcemap\", err);\n        }\n      } else if (lastComment) {\n        debug(\"discarding un-loadable file input sourcemap\");\n      }\n    }\n  }\n\n  return new File(options, {\n    code,\n    ast: ast as t.File,\n    inputMap,\n  });\n}\n\n// These regexps are copied from the convert-source-map package,\n// but without // or /* at the beginning of the comment.\n\n// eslint-disable-next-line max-len\nconst INLINE_SOURCEMAP_REGEX =\n  /^[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/;\nconst EXTERNAL_SOURCEMAP_REGEX =\n  /^[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+)[ \\t]*$/;\n\nfunction extractCommentsFromList(\n  regex: RegExp,\n  comments: t.Comment[],\n  lastComment: string | null,\n): [t.Comment[], string | null] {\n  if (comments) {\n    comments = comments.filter(({ value }) => {\n      if (regex.test(value)) {\n        lastComment = value;\n        return false;\n      }\n      return true;\n    });\n  }\n  return [comments, lastComment];\n}\n\nfunction extractComments(regex: RegExp, ast: t.Node) {\n  let lastComment: string = null;\n  traverseFast(ast, node => {\n    [node.leadingComments, lastComment] = extractCommentsFromList(\n      regex,\n      node.leadingComments,\n      lastComment,\n    );\n    [node.innerComments, lastComment] = extractCommentsFromList(\n      regex,\n      node.innerComments,\n      lastComment,\n    );\n    [node.trailingComments, lastComment] = extractCommentsFromList(\n      regex,\n      node.trailingComments,\n      lastComment,\n    );\n  });\n  return lastComment;\n}\n"]},"metadata":{},"sourceType":"script"}