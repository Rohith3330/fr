{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * Types considered simple:\n *\n *  - primitive types\n *  - literal types\n *  - mixed and any types\n *  - generic types (such as Date, Promise<string>, $Keys<T>, etc.)\n *  - array type written in shorthand notation\n *\n * Types not considered simple:\n *\n *  - maybe type\n *  - function type\n *  - object type\n *  - tuple type\n *  - union and intersection types\n *\n * Reminder: if you change these semantics, don't forget to modify documentation of `array-style-...` rules\n */\n\nconst simpleTypePatterns = [/^(?:Any|Array|Boolean|Generic|Mixed|Number|String|Void)TypeAnnotation$/u, /.+LiteralTypeAnnotation$/u];\n\nvar _default = node => {\n  return simpleTypePatterns.some(pattern => {\n    return pattern.test(node.type);\n  });\n};\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","simpleTypePatterns","_default","node","some","pattern","test","type","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/arrayStyle/isSimpleType.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Types considered simple:\n *\n *  - primitive types\n *  - literal types\n *  - mixed and any types\n *  - generic types (such as Date, Promise<string>, $Keys<T>, etc.)\n *  - array type written in shorthand notation\n *\n * Types not considered simple:\n *\n *  - maybe type\n *  - function type\n *  - object type\n *  - tuple type\n *  - union and intersection types\n *\n * Reminder: if you change these semantics, don't forget to modify documentation of `array-style-...` rules\n */\nconst simpleTypePatterns = [/^(?:Any|Array|Boolean|Generic|Mixed|Number|String|Void)TypeAnnotation$/u, /.+LiteralTypeAnnotation$/u];\n\nvar _default = node => {\n  return simpleTypePatterns.some(pattern => {\n    return pattern.test(node.type);\n  });\n};\n\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAG,CAAC,yEAAD,EAA4E,2BAA5E,CAA3B;;AAEA,IAAIC,QAAQ,GAAGC,IAAI,IAAI;EACrB,OAAOF,kBAAkB,CAACG,IAAnB,CAAwBC,OAAO,IAAI;IACxC,OAAOA,OAAO,CAACC,IAAR,CAAaH,IAAI,CAACI,IAAlB,CAAP;EACD,CAFM,CAAP;AAGD,CAJD;;AAMAT,OAAO,CAACE,OAAR,GAAkBE,QAAlB;AACAM,MAAM,CAACV,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}