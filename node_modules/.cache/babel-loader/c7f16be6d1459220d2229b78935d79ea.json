{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar StringIndexOf = require('./StringIndexOf');\n\nvar Type = require('./Type'); // https://262.ecma-international.org/13.0/#sec-isstringprefix\n\n\nmodule.exports = function IsStringPrefix(p, q) {\n  if (Type(p) !== 'String') {\n    throw new $TypeError('Assertion failed: \"p\" must be a String');\n  }\n\n  if (Type(q) !== 'String') {\n    throw new $TypeError('Assertion failed: \"q\" must be a String');\n  }\n\n  return StringIndexOf(q, p, 0) === 0;\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","StringIndexOf","Type","module","exports","IsStringPrefix","p","q"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2022/IsStringPrefix.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar StringIndexOf = require('./StringIndexOf');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/13.0/#sec-isstringprefix\n\nmodule.exports = function IsStringPrefix(p, q) {\n\tif (Type(p) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: \"p\" must be a String');\n\t}\n\n\tif (Type(q) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: \"q\" must be a String');\n\t}\n\n\treturn StringIndexOf(q, p, 0) === 0;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;EAC9C,IAAIL,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,MAAM,IAAIN,UAAJ,CAAe,wCAAf,CAAN;EACA;;EAED,IAAIE,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,MAAM,IAAIP,UAAJ,CAAe,wCAAf,CAAN;EACA;;EAED,OAAOC,aAAa,CAACM,CAAD,EAAID,CAAJ,EAAO,CAAP,CAAb,KAA2B,CAAlC;AACA,CAVD"},"metadata":{},"sourceType":"script"}