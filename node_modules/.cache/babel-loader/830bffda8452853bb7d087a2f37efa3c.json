{"ast":null,"code":"var assert = require('assert');\n\nvar hpack = require('../');\n\ndescribe('hpack/decoder', function () {\n  var decoder;\n  beforeEach(function () {\n    decoder = hpack.decoder.create();\n  });\n  describe('bit', function () {\n    it('should decode number bit-by-bit', function () {\n      decoder.push([0b11101010, 0b10101111]);\n      var out = '';\n\n      for (var i = 0; i < 16; i++) out += decoder.decodeBit();\n\n      assert.equal(out, '11101010' + '10101111');\n    });\n  });\n  describe('integer', function () {\n    it('should decode 10 in prefix-5 (C.1.1)', function () {\n      decoder.push([0b11101010]);\n      decoder.skipBits(3);\n      assert.equal(decoder.decodeInt(), 10);\n    });\n    it('should decode 1337 in prefix-5 (C.1.2)', function () {\n      decoder.push([0b11111111, 0b10011010, 0b00001010]);\n      decoder.skipBits(3);\n      assert.equal(decoder.decodeInt(), 1337);\n    });\n    it('should decode 42 at octect boundary (C.1.3)', function () {\n      decoder.push([0b00101010]);\n      assert.equal(decoder.decodeInt(8), 42);\n    });\n    it('should throw on empty input', function () {\n      assert.throws(function () {\n        decoder.decodeInt();\n      });\n    });\n    it('should throw on incomplete int', function () {\n      decoder.push([0b11111111, 0b10011010]);\n      decoder.skipBits(3);\n      assert.throws(function () {\n        decoder.decodeInt();\n      });\n    });\n    it('should throw on overflowing int', function () {\n      decoder.push([0b11111111, 0b10011010, 0b10011010, 0b10011010, 0b10011010, 0b10011010]);\n      decoder.skipBits(3);\n      assert.throws(function () {\n        decoder.decodeInt();\n      });\n    });\n  });\n  describe('string', function () {\n    it('should decode literal from (C.2.1)', function () {\n      decoder.push([0x0a]);\n      decoder.push(new Buffer('custom-key'));\n      assert.equal(decoder.decodeStr().toString(), 'custom-key');\n    });\n    it('should decode literal from (C.4.1)', function () {\n      decoder.push(new Buffer('8c' + 'f1e3 c2e5 f23a 6ba0 ab90 f4ff'.replace(/ /g, ''), 'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'www.example.com');\n    });\n    it('should decode literal from (C.4.2)', function () {\n      decoder.push(new Buffer('86' + 'a8eb 1064 9cbf'.replace(/ /g, ''), 'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'no-cache');\n    });\n    it('should decode literal from (C.4.3) #1', function () {\n      decoder.push(new Buffer('88' + '25a8 49e9 5ba9 7d7f'.replace(/ /g, ''), 'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'custom-key');\n    });\n    it('should decode literal from (C.4.3) #2', function () {\n      decoder.push(new Buffer('89' + '25a8 49e9 5bb8 e8b4 bf'.replace(/ /g, ''), 'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'custom-value');\n    });\n    it('should decode literal from (C.6.1) #1', function () {\n      decoder.push(new Buffer(('96' + 'd07a be94 1054 d444 a820 0595 040b 8166' + 'e082 a62d 1bff').replace(/ /g, ''), 'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'Mon, 21 Oct 2013 20:13:21 GMT');\n    });\n    it('should decode literal from (C.6.1) #2', function () {\n      decoder.push(new Buffer(('91' + '9d29 ad17 1863 c78f 0b97 c8e9 ae82 ae43' + 'd3').replace(/ /g, ''), 'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'https://www.example.com');\n    });\n    it('should decode many 5 bit chars', function () {\n      // e = 00101, 0x294A5294A5 = 00101 x 8\n      decoder.push(new Buffer('85294A5294A5', 'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'eeeeeeee');\n    });\n    it('should decode many 5 bit chars with 3-bit EOS', function () {\n      // e = 00101, EOS=111,\n      // 0x294A5294A52F = 00101 x 9 + 111\n      decoder.push(new Buffer('86294A5294A52F', 'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'eeeeeeeee');\n    });\n    it('should decode many 5 bit chars with 2-bit EOS', function () {\n      // e = 00101, EOS=11,\n      // 0x294A5297 = 00101 x 6 + 11\n      decoder.push(new Buffer('84294A5297', 'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'eeeeee');\n    });\n    it('should decode many multi-octet chars', function () {\n      decoder.push(new Buffer('97ffffb1ffff63fffec7fffd8ffffb1ffff63fffec7fffd8', 'hex'));\n      assert.deepEqual(decoder.decodeStr(), [1, 1, 1, 1, 1, 1, 1, 1]);\n    });\n    it('should fail on 8 bit EOS', function () {\n      // e = 00101, 0x294A5294A5 = 00101 x 8\n      decoder.push(new Buffer('86294A5294A5ff', 'hex'));\n      assert.throws(function () {\n        decoder.decodeStr();\n      });\n    });\n    it('should fail on invalid 2-bit EOS', function () {\n      // e = 00101, EOS=10,\n      // 0x294A5297 = 00101 x 6 + 11\n      decoder.push(new Buffer('84294A5296', 'hex'));\n      assert.throws(function () {\n        decoder.decodeStr();\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","hpack","describe","decoder","beforeEach","create","it","push","out","i","decodeBit","equal","skipBits","decodeInt","throws","Buffer","decodeStr","toString","replace","deepEqual"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/hpack.js/test/decoder-test.js"],"sourcesContent":["var assert = require('assert');\nvar hpack = require('../');\n\ndescribe('hpack/decoder', function() {\n  var decoder;\n\n  beforeEach(function() {\n    decoder = hpack.decoder.create();\n  });\n\n  describe('bit', function() {\n    it('should decode number bit-by-bit', function() {\n      decoder.push([ 0b11101010, 0b10101111 ]);\n      var out = '';\n      for (var i = 0; i < 16; i++)\n        out += decoder.decodeBit();\n      assert.equal(out, '11101010' + '10101111');\n    });\n  });\n\n  describe('integer', function() {\n    it('should decode 10 in prefix-5 (C.1.1)', function() {\n      decoder.push([ 0b11101010 ]);\n      decoder.skipBits(3);\n      assert.equal(decoder.decodeInt(), 10);\n    });\n\n    it('should decode 1337 in prefix-5 (C.1.2)', function() {\n      decoder.push([ 0b11111111, 0b10011010, 0b00001010 ]);\n      decoder.skipBits(3);\n      assert.equal(decoder.decodeInt(), 1337);\n    });\n\n    it('should decode 42 at octect boundary (C.1.3)', function() {\n      decoder.push([ 0b00101010 ]);\n      assert.equal(decoder.decodeInt(8), 42);\n    });\n\n    it('should throw on empty input', function() {\n      assert.throws(function() {\n        decoder.decodeInt();\n      });\n    });\n\n    it('should throw on incomplete int', function() {\n      decoder.push([ 0b11111111, 0b10011010 ]);\n      decoder.skipBits(3);\n      assert.throws(function() {\n        decoder.decodeInt();\n      });\n    });\n\n    it('should throw on overflowing int', function() {\n      decoder.push([\n        0b11111111,\n        0b10011010,\n        0b10011010,\n        0b10011010,\n        0b10011010,\n        0b10011010\n      ]);\n      decoder.skipBits(3);\n      assert.throws(function() {\n        decoder.decodeInt();\n      });\n    });\n  });\n\n  describe('string', function() {\n    it('should decode literal from (C.2.1)', function() {\n      decoder.push([ 0x0a ]);\n      decoder.push(new Buffer('custom-key'));\n\n      assert.equal(decoder.decodeStr().toString(), 'custom-key');\n    });\n\n    it('should decode literal from (C.4.1)', function() {\n      decoder.push(new Buffer(\n        '8c' +\n            'f1e3 c2e5 f23a 6ba0 ab90 f4ff'.replace(/ /g, ''),\n        'hex'));\n\n      assert.equal(new Buffer(decoder.decodeStr()).toString(),\n                   'www.example.com');\n    });\n\n    it('should decode literal from (C.4.2)', function() {\n      decoder.push(new Buffer(\n        '86' +\n            'a8eb 1064 9cbf'.replace(/ /g, ''),\n        'hex'));\n\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'no-cache');\n    });\n\n    it('should decode literal from (C.4.3) #1', function() {\n      decoder.push(new Buffer(\n        '88' +\n            '25a8 49e9 5ba9 7d7f'.replace(/ /g, ''),\n        'hex'));\n\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'custom-key');\n    });\n\n    it('should decode literal from (C.4.3) #2', function() {\n      decoder.push(new Buffer(\n        '89' +\n            '25a8 49e9 5bb8 e8b4 bf'.replace(/ /g, ''),\n        'hex'));\n\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'custom-value');\n    });\n\n    it('should decode literal from (C.6.1) #1', function() {\n      decoder.push(new Buffer(\n        ('96' +\n            'd07a be94 1054 d444 a820 0595 040b 8166' +\n            'e082 a62d 1bff').replace(/ /g, ''),\n        'hex'));\n\n      assert.equal(new Buffer(decoder.decodeStr()).toString(),\n                   'Mon, 21 Oct 2013 20:13:21 GMT');\n    });\n\n    it('should decode literal from (C.6.1) #2', function() {\n      decoder.push(new Buffer(\n        ('91' +\n            '9d29 ad17 1863 c78f 0b97 c8e9 ae82 ae43' +\n            'd3').replace(/ /g, ''),\n        'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(),\n                   'https://www.example.com');\n    });\n\n    it('should decode many 5 bit chars', function() {\n      // e = 00101, 0x294A5294A5 = 00101 x 8\n      decoder.push(new Buffer('85294A5294A5', 'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'eeeeeeee');\n    });\n\n    it('should decode many 5 bit chars with 3-bit EOS', function() {\n      // e = 00101, EOS=111,\n      // 0x294A5294A52F = 00101 x 9 + 111\n      decoder.push(new Buffer('86294A5294A52F', 'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'eeeeeeeee');\n    });\n\n    it('should decode many 5 bit chars with 2-bit EOS', function() {\n      // e = 00101, EOS=11,\n      // 0x294A5297 = 00101 x 6 + 11\n      decoder.push(new Buffer('84294A5297', 'hex'));\n      assert.equal(new Buffer(decoder.decodeStr()).toString(), 'eeeeee');\n    });\n\n    it('should decode many multi-octet chars', function() {\n      decoder.push(new Buffer(\n          '97ffffb1ffff63fffec7fffd8ffffb1ffff63fffec7fffd8',\n          'hex'));\n      assert.deepEqual(decoder.decodeStr(), [\n        1, 1, 1, 1, 1, 1, 1, 1\n      ]);\n    });\n\n    it('should fail on 8 bit EOS', function() {\n      // e = 00101, 0x294A5294A5 = 00101 x 8\n      decoder.push(new Buffer('86294A5294A5ff', 'hex'));\n      assert.throws(function() {\n        decoder.decodeStr();\n      });\n    });\n\n    it('should fail on invalid 2-bit EOS', function() {\n      // e = 00101, EOS=10,\n      // 0x294A5297 = 00101 x 6 + 11\n      decoder.push(new Buffer('84294A5296', 'hex'));\n      assert.throws(function() {\n        decoder.decodeStr();\n      });\n    });\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}