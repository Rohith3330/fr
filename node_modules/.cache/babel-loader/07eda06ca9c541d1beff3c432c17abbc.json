{"ast":null,"code":"/**\n * @fileoverview Disallow undeclared variables in JSX\n * @author Yannick Croissant\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst jsxUtil = require('../util/jsx');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  undefined: '\\'{{identifier}}\\' is not defined.'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow undeclared variables in JSX',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('jsx-no-undef')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        allowGlobals: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const config = context.options[0] || {};\n    const allowGlobals = config.allowGlobals || false;\n    /**\n     * Compare an identifier with the variables declared in the scope\n     * @param {ASTNode} node - Identifier or JSXIdentifier node\n     * @returns {void}\n     */\n\n    function checkIdentifierInJSX(node) {\n      let scope = context.getScope();\n      const sourceCode = context.getSourceCode();\n      const sourceType = sourceCode.ast.sourceType;\n      const scopeUpperBound = !allowGlobals && sourceType === 'module' ? 'module' : 'global';\n      let variables = scope.variables;\n      let i;\n      let len; // Ignore 'this' keyword (also maked as JSXIdentifier when used in JSX)\n\n      if (node.name === 'this') {\n        return;\n      }\n\n      while (scope.type !== scopeUpperBound && scope.type !== 'global') {\n        scope = scope.upper;\n        variables = scope.variables.concat(variables);\n      }\n\n      if (scope.childScopes.length) {\n        variables = scope.childScopes[0].variables.concat(variables); // Temporary fix for babel-eslint\n\n        if (scope.childScopes[0].childScopes.length) {\n          variables = scope.childScopes[0].childScopes[0].variables.concat(variables);\n        }\n      }\n\n      for (i = 0, len = variables.length; i < len; i++) {\n        if (variables[i].name === node.name) {\n          return;\n        }\n      }\n\n      report(context, messages.undefined, 'undefined', {\n        node,\n        data: {\n          identifier: node.name\n        }\n      });\n    }\n\n    return {\n      JSXOpeningElement(node) {\n        switch (node.name.type) {\n          case 'JSXIdentifier':\n            if (jsxUtil.isDOMComponent(node)) {\n              return;\n            }\n\n            node = node.name;\n            break;\n\n          case 'JSXMemberExpression':\n            node = node.name;\n\n            do {\n              node = node.object;\n            } while (node && node.type !== 'JSXIdentifier');\n\n            break;\n\n          case 'JSXNamespacedName':\n            return;\n\n          default:\n            break;\n        }\n\n        checkIdentifierInJSX(node);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","jsxUtil","report","messages","undefined","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","allowGlobals","additionalProperties","create","context","config","options","checkIdentifierInJSX","node","scope","getScope","sourceCode","getSourceCode","sourceType","ast","scopeUpperBound","variables","i","len","name","upper","concat","childScopes","length","data","identifier","JSXOpeningElement","isDOMComponent","object"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-no-undef.js"],"sourcesContent":["/**\n * @fileoverview Disallow undeclared variables in JSX\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst jsxUtil = require('../util/jsx');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  undefined: '\\'{{identifier}}\\' is not defined.',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow undeclared variables in JSX',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('jsx-no-undef'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        allowGlobals: {\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const config = context.options[0] || {};\n    const allowGlobals = config.allowGlobals || false;\n\n    /**\n     * Compare an identifier with the variables declared in the scope\n     * @param {ASTNode} node - Identifier or JSXIdentifier node\n     * @returns {void}\n     */\n    function checkIdentifierInJSX(node) {\n      let scope = context.getScope();\n      const sourceCode = context.getSourceCode();\n      const sourceType = sourceCode.ast.sourceType;\n      const scopeUpperBound = !allowGlobals && sourceType === 'module' ? 'module' : 'global';\n      let variables = scope.variables;\n      let i;\n      let len;\n\n      // Ignore 'this' keyword (also maked as JSXIdentifier when used in JSX)\n      if (node.name === 'this') {\n        return;\n      }\n\n      while (scope.type !== scopeUpperBound && scope.type !== 'global') {\n        scope = scope.upper;\n        variables = scope.variables.concat(variables);\n      }\n      if (scope.childScopes.length) {\n        variables = scope.childScopes[0].variables.concat(variables);\n        // Temporary fix for babel-eslint\n        if (scope.childScopes[0].childScopes.length) {\n          variables = scope.childScopes[0].childScopes[0].variables.concat(variables);\n        }\n      }\n\n      for (i = 0, len = variables.length; i < len; i++) {\n        if (variables[i].name === node.name) {\n          return;\n        }\n      }\n\n      report(context, messages.undefined, 'undefined', {\n        node,\n        data: {\n          identifier: node.name,\n        },\n      });\n    }\n\n    return {\n      JSXOpeningElement(node) {\n        switch (node.name.type) {\n          case 'JSXIdentifier':\n            if (jsxUtil.isDOMComponent(node)) {\n              return;\n            }\n            node = node.name;\n            break;\n          case 'JSXMemberExpression':\n            node = node.name;\n            do {\n              node = node.object;\n            } while (node && node.type !== 'JSXIdentifier');\n            break;\n          case 'JSXNamespacedName':\n            return;\n          default:\n            break;\n        }\n        checkIdentifierInJSX(node);\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}