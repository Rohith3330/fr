{"ast":null,"code":"/**\n * @fileoverview HTML special characters should be escaped.\n * @author Patrick Hayes\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst jsxUtil = require('../util/jsx');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n// NOTE: '<' and '{' are also problematic characters, but they do not need\n// to be included here because it is a syntax error when these characters are\n// included accidentally.\n\n\nconst DEFAULTS = [{\n  char: '>',\n  alternatives: ['&gt;']\n}, {\n  char: '\"',\n  alternatives: ['&quot;', '&ldquo;', '&#34;', '&rdquo;']\n}, {\n  char: '\\'',\n  alternatives: ['&apos;', '&lsquo;', '&#39;', '&rsquo;']\n}, {\n  char: '}',\n  alternatives: ['&#125;']\n}];\nconst messages = {\n  unescapedEntity: 'HTML entity, `{{entity}}` , must be escaped.',\n  unescapedEntityAlts: '`{{entity}}` can be escaped with {{alts}}.'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow unescaped HTML entities from appearing in markup',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('no-unescaped-entities')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        forbid: {\n          type: 'array',\n          items: {\n            oneOf: [{\n              type: 'string'\n            }, {\n              type: 'object',\n              properties: {\n                char: {\n                  type: 'string'\n                },\n                alternatives: {\n                  type: 'array',\n                  uniqueItems: true,\n                  items: {\n                    type: 'string'\n                  }\n                }\n              }\n            }]\n          }\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    function reportInvalidEntity(node) {\n      const configuration = context.options[0] || {};\n      const entities = configuration.forbid || DEFAULTS; // HTML entities are already escaped in node.value (as well as node.raw),\n      // so pull the raw text from context.getSourceCode()\n\n      for (let i = node.loc.start.line; i <= node.loc.end.line; i++) {\n        let rawLine = context.getSourceCode().lines[i - 1];\n        let start = 0;\n        let end = rawLine.length;\n\n        if (i === node.loc.start.line) {\n          start = node.loc.start.column;\n        }\n\n        if (i === node.loc.end.line) {\n          end = node.loc.end.column;\n        }\n\n        rawLine = rawLine.substring(start, end);\n\n        for (let j = 0; j < entities.length; j++) {\n          for (let index = 0; index < rawLine.length; index++) {\n            const c = rawLine[index];\n\n            if (typeof entities[j] === 'string') {\n              if (c === entities[j]) {\n                report(context, messages.unescapedEntity, 'unescapedEntity', {\n                  node,\n                  loc: {\n                    line: i,\n                    column: start + index\n                  },\n                  data: {\n                    entity: entities[j]\n                  }\n                });\n              }\n            } else if (c === entities[j].char) {\n              report(context, messages.unescapedEntityAlts, 'unescapedEntityAlts', {\n                node,\n                loc: {\n                  line: i,\n                  column: start + index\n                },\n                data: {\n                  entity: entities[j].char,\n                  alts: entities[j].alternatives.map(alt => `\\`${alt}\\``).join(', ')\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      'Literal, JSXText'(node) {\n        if (jsxUtil.isJSX(node.parent)) {\n          reportInvalidEntity(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","jsxUtil","report","DEFAULTS","char","alternatives","messages","unescapedEntity","unescapedEntityAlts","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","forbid","items","oneOf","uniqueItems","additionalProperties","create","context","reportInvalidEntity","node","configuration","options","entities","i","loc","start","line","end","rawLine","getSourceCode","lines","length","column","substring","j","index","c","data","entity","alts","map","alt","join","isJSX","parent"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/no-unescaped-entities.js"],"sourcesContent":["/**\n * @fileoverview HTML special characters should be escaped.\n * @author Patrick Hayes\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst jsxUtil = require('../util/jsx');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n// NOTE: '<' and '{' are also problematic characters, but they do not need\n// to be included here because it is a syntax error when these characters are\n// included accidentally.\nconst DEFAULTS = [{\n  char: '>',\n  alternatives: ['&gt;'],\n}, {\n  char: '\"',\n  alternatives: ['&quot;', '&ldquo;', '&#34;', '&rdquo;'],\n}, {\n  char: '\\'',\n  alternatives: ['&apos;', '&lsquo;', '&#39;', '&rsquo;'],\n}, {\n  char: '}',\n  alternatives: ['&#125;'],\n}];\n\nconst messages = {\n  unescapedEntity: 'HTML entity, `{{entity}}` , must be escaped.',\n  unescapedEntityAlts: '`{{entity}}` can be escaped with {{alts}}.',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow unescaped HTML entities from appearing in markup',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('no-unescaped-entities'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        forbid: {\n          type: 'array',\n          items: {\n            oneOf: [{\n              type: 'string',\n            }, {\n              type: 'object',\n              properties: {\n                char: {\n                  type: 'string',\n                },\n                alternatives: {\n                  type: 'array',\n                  uniqueItems: true,\n                  items: {\n                    type: 'string',\n                  },\n                },\n              },\n            }],\n          },\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    function reportInvalidEntity(node) {\n      const configuration = context.options[0] || {};\n      const entities = configuration.forbid || DEFAULTS;\n\n      // HTML entities are already escaped in node.value (as well as node.raw),\n      // so pull the raw text from context.getSourceCode()\n      for (let i = node.loc.start.line; i <= node.loc.end.line; i++) {\n        let rawLine = context.getSourceCode().lines[i - 1];\n        let start = 0;\n        let end = rawLine.length;\n        if (i === node.loc.start.line) {\n          start = node.loc.start.column;\n        }\n        if (i === node.loc.end.line) {\n          end = node.loc.end.column;\n        }\n        rawLine = rawLine.substring(start, end);\n        for (let j = 0; j < entities.length; j++) {\n          for (let index = 0; index < rawLine.length; index++) {\n            const c = rawLine[index];\n            if (typeof entities[j] === 'string') {\n              if (c === entities[j]) {\n                report(context, messages.unescapedEntity, 'unescapedEntity', {\n                  node,\n                  loc: { line: i, column: start + index },\n                  data: {\n                    entity: entities[j],\n                  },\n                });\n              }\n            } else if (c === entities[j].char) {\n              report(context, messages.unescapedEntityAlts, 'unescapedEntityAlts', {\n                node,\n                loc: { line: i, column: start + index },\n                data: {\n                  entity: entities[j].char,\n                  alts: entities[j].alternatives.map((alt) => `\\`${alt}\\``).join(', '),\n                },\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      'Literal, JSXText'(node) {\n        if (jsxUtil.isJSX(node.parent)) {\n          reportInvalidEntity(node);\n        }\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}