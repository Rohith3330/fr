{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  var ops = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : tfOps;\n  switch (node.op) {\n    case 'Max':\n      {\n        var axis = getParamValue('axis', node, tensorMap, context);\n        var keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n    case 'Mean':\n      {\n        var _axis = getParamValue('axis', node, tensorMap, context);\n        var _keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.mean(getParamValue('x', node, tensorMap, context), _axis, _keepDims)];\n      }\n    case 'Min':\n      {\n        var _axis2 = getParamValue('axis', node, tensorMap, context);\n        var _keepDims2 = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.min(getParamValue('x', node, tensorMap, context), _axis2, _keepDims2)];\n      }\n    case 'Sum':\n      {\n        var _axis3 = getParamValue('axis', node, tensorMap, context);\n        var _keepDims3 = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.sum(getParamValue('x', node, tensorMap, context), _axis3, _keepDims3)];\n      }\n    case 'All':\n      {\n        var _axis4 = getParamValue('axis', node, tensorMap, context);\n        var _keepDims4 = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.all(getParamValue('x', node, tensorMap, context), _axis4, _keepDims4)];\n      }\n    case 'Any':\n      {\n        var _axis5 = getParamValue('axis', node, tensorMap, context);\n        var _keepDims5 = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.any(getParamValue('x', node, tensorMap, context), _axis5, _keepDims5)];\n      }\n    case 'ArgMax':\n      {\n        var _axis6 = getParamValue('axis', node, tensorMap, context);\n        return [ops.argMax(getParamValue('x', node, tensorMap, context), _axis6)];\n      }\n    case 'ArgMin':\n      {\n        var _axis7 = getParamValue('axis', node, tensorMap, context);\n        return [ops.argMin(getParamValue('x', node, tensorMap, context), _axis7)];\n      }\n    case 'Prod':\n      {\n        var _axis8 = getParamValue('axis', node, tensorMap, context);\n        var _keepDims6 = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.prod(getParamValue('x', node, tensorMap, context), _axis8, _keepDims6)];\n      }\n    case 'Cumprod':\n      {\n        var _axis9 = getParamValue('axis', node, tensorMap, context);\n        var exclusive = getParamValue('exclusive', node, tensorMap, context);\n        var reverse = getParamValue('reverse', node, tensorMap, context);\n        return [ops.cumprod(getParamValue('x', node, tensorMap, context), _axis9, exclusive, reverse)];\n      }\n    case 'Cumsum':\n      {\n        var _axis10 = getParamValue('axis', node, tensorMap, context);\n        var _exclusive = getParamValue('exclusive', node, tensorMap, context);\n        var _reverse = getParamValue('reverse', node, tensorMap, context);\n        return [ops.cumsum(getParamValue('x', node, tensorMap, context), _axis10, _exclusive, _reverse)];\n      }\n    case 'Bincount':\n      var x = getParamValue('x', node, tensorMap, context);\n      var weights = getParamValue('weights', node, tensorMap, context);\n      var size = getParamValue('size', node, tensorMap, context);\n      return [ops.bincount(x, weights, size)];\n    case 'DenseBincount':\n      {\n        var _x = getParamValue('x', node, tensorMap, context);\n        var _weights = getParamValue('weights', node, tensorMap, context);\n        var _size = getParamValue('size', node, tensorMap, context);\n        var binaryOutput = getParamValue('binaryOutput', node, tensorMap, context);\n        return [ops.denseBincount(_x, _weights, _size, binaryOutput)];\n      }\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'reduction';","map":null,"metadata":{},"sourceType":"module"}