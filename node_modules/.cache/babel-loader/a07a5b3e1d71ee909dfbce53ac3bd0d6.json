{"ast":null,"code":"/**\n * @fileoverview Validate closing tag location in JSX\n * @author Ross Solomon\n */\n'use strict';\n\nconst astUtil = require('../util/ast');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  onOwnLine: 'Closing tag of a multiline JSX expression must be on its own line.',\n  matchIndent: 'Expected closing tag to match indentation of opening.'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce closing tag location for multiline JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-closing-tag-location')\n    },\n    fixable: 'whitespace',\n    messages\n  },\n\n  create(context) {\n    function handleClosingElement(node) {\n      if (!node.parent) {\n        return;\n      }\n\n      const opening = node.parent.openingElement || node.parent.openingFragment;\n\n      if (opening.loc.start.line === node.loc.start.line) {\n        return;\n      }\n\n      if (opening.loc.start.column === node.loc.start.column) {\n        return;\n      }\n\n      const messageId = astUtil.isNodeFirstInLine(context, node) ? 'matchIndent' : 'onOwnLine';\n      report(context, messages[messageId], messageId, {\n        node,\n        loc: node.loc,\n\n        fix(fixer) {\n          const indent = Array(opening.loc.start.column + 1).join(' ');\n\n          if (astUtil.isNodeFirstInLine(context, node)) {\n            return fixer.replaceTextRange([node.range[0] - node.loc.start.column, node.range[0]], indent);\n          }\n\n          return fixer.insertTextBefore(node, `\\n${indent}`);\n        }\n\n      });\n    }\n\n    return {\n      JSXClosingElement: handleClosingElement,\n      JSXClosingFragment: handleClosingElement\n    };\n  }\n\n};","map":{"version":3,"names":["astUtil","require","docsUrl","report","messages","onOwnLine","matchIndent","module","exports","meta","docs","description","category","recommended","url","fixable","create","context","handleClosingElement","node","parent","opening","openingElement","openingFragment","loc","start","line","column","messageId","isNodeFirstInLine","fix","fixer","indent","Array","join","replaceTextRange","range","insertTextBefore","JSXClosingElement","JSXClosingFragment"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-closing-tag-location.js"],"sourcesContent":["/**\n * @fileoverview Validate closing tag location in JSX\n * @author Ross Solomon\n */\n\n'use strict';\n\nconst astUtil = require('../util/ast');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  onOwnLine: 'Closing tag of a multiline JSX expression must be on its own line.',\n  matchIndent: 'Expected closing tag to match indentation of opening.',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce closing tag location for multiline JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-closing-tag-location'),\n    },\n    fixable: 'whitespace',\n    messages,\n  },\n\n  create(context) {\n    function handleClosingElement(node) {\n      if (!node.parent) {\n        return;\n      }\n\n      const opening = node.parent.openingElement || node.parent.openingFragment;\n      if (opening.loc.start.line === node.loc.start.line) {\n        return;\n      }\n\n      if (opening.loc.start.column === node.loc.start.column) {\n        return;\n      }\n\n      const messageId = astUtil.isNodeFirstInLine(context, node)\n        ? 'matchIndent'\n        : 'onOwnLine';\n      report(context, messages[messageId], messageId, {\n        node,\n        loc: node.loc,\n        fix(fixer) {\n          const indent = Array(opening.loc.start.column + 1).join(' ');\n          if (astUtil.isNodeFirstInLine(context, node)) {\n            return fixer.replaceTextRange(\n              [node.range[0] - node.loc.start.column, node.range[0]],\n              indent\n            );\n          }\n\n          return fixer.insertTextBefore(node, `\\n${indent}`);\n        },\n      });\n    }\n\n    return {\n      JSXClosingElement: handleClosingElement,\n      JSXClosingFragment: handleClosingElement,\n    };\n  },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,gBAAD,CAAtB,C,CAEA;AACA;AACA;;;AAEA,MAAMG,QAAQ,GAAG;EACfC,SAAS,EAAE,oEADI;EAEfC,WAAW,EAAE;AAFE,CAAjB;AAKAC,MAAM,CAACC,OAAP,GAAiB;EACfC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,WAAW,EAAE,gDADT;MAEJC,QAAQ,EAAE,kBAFN;MAGJC,WAAW,EAAE,KAHT;MAIJC,GAAG,EAAEZ,OAAO,CAAC,0BAAD;IAJR,CADF;IAOJa,OAAO,EAAE,YAPL;IAQJX;EARI,CADS;;EAYfY,MAAM,CAACC,OAAD,EAAU;IACd,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;MAClC,IAAI,CAACA,IAAI,CAACC,MAAV,EAAkB;QAChB;MACD;;MAED,MAAMC,OAAO,GAAGF,IAAI,CAACC,MAAL,CAAYE,cAAZ,IAA8BH,IAAI,CAACC,MAAL,CAAYG,eAA1D;;MACA,IAAIF,OAAO,CAACG,GAAR,CAAYC,KAAZ,CAAkBC,IAAlB,KAA2BP,IAAI,CAACK,GAAL,CAASC,KAAT,CAAeC,IAA9C,EAAoD;QAClD;MACD;;MAED,IAAIL,OAAO,CAACG,GAAR,CAAYC,KAAZ,CAAkBE,MAAlB,KAA6BR,IAAI,CAACK,GAAL,CAASC,KAAT,CAAeE,MAAhD,EAAwD;QACtD;MACD;;MAED,MAAMC,SAAS,GAAG5B,OAAO,CAAC6B,iBAAR,CAA0BZ,OAA1B,EAAmCE,IAAnC,IACd,aADc,GAEd,WAFJ;MAGAhB,MAAM,CAACc,OAAD,EAAUb,QAAQ,CAACwB,SAAD,CAAlB,EAA+BA,SAA/B,EAA0C;QAC9CT,IAD8C;QAE9CK,GAAG,EAAEL,IAAI,CAACK,GAFoC;;QAG9CM,GAAG,CAACC,KAAD,EAAQ;UACT,MAAMC,MAAM,GAAGC,KAAK,CAACZ,OAAO,CAACG,GAAR,CAAYC,KAAZ,CAAkBE,MAAlB,GAA2B,CAA5B,CAAL,CAAoCO,IAApC,CAAyC,GAAzC,CAAf;;UACA,IAAIlC,OAAO,CAAC6B,iBAAR,CAA0BZ,OAA1B,EAAmCE,IAAnC,CAAJ,EAA8C;YAC5C,OAAOY,KAAK,CAACI,gBAAN,CACL,CAAChB,IAAI,CAACiB,KAAL,CAAW,CAAX,IAAgBjB,IAAI,CAACK,GAAL,CAASC,KAAT,CAAeE,MAAhC,EAAwCR,IAAI,CAACiB,KAAL,CAAW,CAAX,CAAxC,CADK,EAELJ,MAFK,CAAP;UAID;;UAED,OAAOD,KAAK,CAACM,gBAAN,CAAuBlB,IAAvB,EAA8B,KAAIa,MAAO,EAAzC,CAAP;QACD;;MAb6C,CAA1C,CAAN;IAeD;;IAED,OAAO;MACLM,iBAAiB,EAAEpB,oBADd;MAELqB,kBAAkB,EAAErB;IAFf,CAAP;EAID;;AAnDc,CAAjB"},"metadata":{},"sourceType":"script"}