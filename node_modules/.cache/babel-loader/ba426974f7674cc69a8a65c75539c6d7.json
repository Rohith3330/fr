{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visitor = void 0;\n\nvar _core = require(\"@babel/core\");\n\nfunction getTDZStatus(refPath, bindingPath) {\n  const executionStatus = bindingPath._guessExecutionStatusRelativeTo(refPath);\n\n  if (executionStatus === \"before\") {\n    return \"outside\";\n  } else if (executionStatus === \"after\") {\n    return \"inside\";\n  } else {\n    return \"maybe\";\n  }\n}\n\nfunction buildTDZAssert(node, state) {\n  return _core.types.callExpression(state.addHelper(\"temporalRef\"), [node, _core.types.stringLiteral(node.name)]);\n}\n\nfunction isReference(node, scope, state) {\n  const declared = state.letReferences.get(node.name);\n  if (!declared) return false;\n  return scope.getBindingIdentifier(node.name) === declared;\n}\n\nconst visitedMaybeTDZNodes = new WeakSet();\nconst visitor = {\n  ReferencedIdentifier(path, state) {\n    if (!state.tdzEnabled) return;\n    const {\n      node,\n      parent,\n      scope\n    } = path;\n    if (path.parentPath.isFor({\n      left: node\n    })) return;\n    if (!isReference(node, scope, state)) return;\n    const bindingPath = scope.getBinding(node.name).path;\n    if (bindingPath.isFunctionDeclaration()) return;\n    const status = getTDZStatus(path, bindingPath);\n    if (status === \"outside\") return;\n\n    if (status === \"maybe\") {\n      if (visitedMaybeTDZNodes.has(node)) {\n        return;\n      }\n\n      visitedMaybeTDZNodes.add(node);\n      const assert = buildTDZAssert(node, state);\n      bindingPath.parent._tdzThis = true;\n\n      if (path.parentPath.isUpdateExpression()) {\n        if (parent._ignoreBlockScopingTDZ) return;\n        path.parentPath.replaceWith(_core.types.sequenceExpression([assert, parent]));\n      } else {\n        path.replaceWith(assert);\n      }\n    } else if (status === \"inside\") {\n      path.replaceWith(_core.template.ast`${state.addHelper(\"tdz\")}(\"${node.name}\")`);\n    }\n  },\n\n  AssignmentExpression: {\n    exit(path, state) {\n      if (!state.tdzEnabled) return;\n      const {\n        node\n      } = path;\n      if (node._ignoreBlockScopingTDZ) return;\n      const nodes = [];\n      const ids = path.getBindingIdentifiers();\n\n      for (const name of Object.keys(ids)) {\n        const id = ids[name];\n\n        if (isReference(id, path.scope, state)) {\n          nodes.push(id);\n        }\n      }\n\n      if (nodes.length) {\n        node._ignoreBlockScopingTDZ = true;\n        nodes.push(node);\n        path.replaceWithMultiple(nodes.map(n => _core.types.expressionStatement(n)));\n      }\n    }\n\n  }\n};\nexports.visitor = visitor;","map":{"version":3,"names":["Object","defineProperty","exports","value","visitor","_core","require","getTDZStatus","refPath","bindingPath","executionStatus","_guessExecutionStatusRelativeTo","buildTDZAssert","node","state","types","callExpression","addHelper","stringLiteral","name","isReference","scope","declared","letReferences","get","getBindingIdentifier","visitedMaybeTDZNodes","WeakSet","ReferencedIdentifier","path","tdzEnabled","parent","parentPath","isFor","left","getBinding","isFunctionDeclaration","status","has","add","assert","_tdzThis","isUpdateExpression","_ignoreBlockScopingTDZ","replaceWith","sequenceExpression","template","ast","AssignmentExpression","exit","nodes","ids","getBindingIdentifiers","keys","id","push","length","replaceWithMultiple","map","n","expressionStatement"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@babel/plugin-transform-block-scoping/lib/tdz.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visitor = void 0;\n\nvar _core = require(\"@babel/core\");\n\nfunction getTDZStatus(refPath, bindingPath) {\n  const executionStatus = bindingPath._guessExecutionStatusRelativeTo(refPath);\n\n  if (executionStatus === \"before\") {\n    return \"outside\";\n  } else if (executionStatus === \"after\") {\n    return \"inside\";\n  } else {\n    return \"maybe\";\n  }\n}\n\nfunction buildTDZAssert(node, state) {\n  return _core.types.callExpression(state.addHelper(\"temporalRef\"), [node, _core.types.stringLiteral(node.name)]);\n}\n\nfunction isReference(node, scope, state) {\n  const declared = state.letReferences.get(node.name);\n  if (!declared) return false;\n  return scope.getBindingIdentifier(node.name) === declared;\n}\n\nconst visitedMaybeTDZNodes = new WeakSet();\nconst visitor = {\n  ReferencedIdentifier(path, state) {\n    if (!state.tdzEnabled) return;\n    const {\n      node,\n      parent,\n      scope\n    } = path;\n    if (path.parentPath.isFor({\n      left: node\n    })) return;\n    if (!isReference(node, scope, state)) return;\n    const bindingPath = scope.getBinding(node.name).path;\n    if (bindingPath.isFunctionDeclaration()) return;\n    const status = getTDZStatus(path, bindingPath);\n    if (status === \"outside\") return;\n\n    if (status === \"maybe\") {\n      if (visitedMaybeTDZNodes.has(node)) {\n        return;\n      }\n\n      visitedMaybeTDZNodes.add(node);\n      const assert = buildTDZAssert(node, state);\n      bindingPath.parent._tdzThis = true;\n\n      if (path.parentPath.isUpdateExpression()) {\n        if (parent._ignoreBlockScopingTDZ) return;\n        path.parentPath.replaceWith(_core.types.sequenceExpression([assert, parent]));\n      } else {\n        path.replaceWith(assert);\n      }\n    } else if (status === \"inside\") {\n      path.replaceWith(_core.template.ast`${state.addHelper(\"tdz\")}(\"${node.name}\")`);\n    }\n  },\n\n  AssignmentExpression: {\n    exit(path, state) {\n      if (!state.tdzEnabled) return;\n      const {\n        node\n      } = path;\n      if (node._ignoreBlockScopingTDZ) return;\n      const nodes = [];\n      const ids = path.getBindingIdentifiers();\n\n      for (const name of Object.keys(ids)) {\n        const id = ids[name];\n\n        if (isReference(id, path.scope, state)) {\n          nodes.push(id);\n        }\n      }\n\n      if (nodes.length) {\n        node._ignoreBlockScopingTDZ = true;\n        nodes.push(node);\n        path.replaceWithMultiple(nodes.map(n => _core.types.expressionStatement(n)));\n      }\n    }\n\n  }\n};\nexports.visitor = visitor;"],"mappings":"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"},"metadata":{},"sourceType":"script"}