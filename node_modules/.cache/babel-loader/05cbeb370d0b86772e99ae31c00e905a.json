{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\nvar _hasAccessibleChild = _interopRequireDefault(require(\"../util/hasAccessibleChild\"));\n\nvar _isPresentationRole = _interopRequireDefault(require(\"../util/isPresentationRole\"));\n/**\n * @fileoverview Enforce all elements that require alternative text have it.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_ELEMENTS = ['img', 'object', 'area', 'input[type=\"image\"]'];\nvar schema = (0, _schemas.generateObjSchema)({\n  elements: _schemas.arraySchema,\n  img: _schemas.arraySchema,\n  object: _schemas.arraySchema,\n  area: _schemas.arraySchema,\n  'input[type=\"image\"]': _schemas.arraySchema\n});\n\nvar ariaLabelHasValue = function ariaLabelHasValue(prop) {\n  var value = (0, _jsxAstUtils.getPropValue)(prop);\n\n  if (value === undefined) {\n    return false;\n  }\n\n  if (typeof value === 'string' && value.length === 0) {\n    return false;\n  }\n\n  return true;\n};\n\nvar ruleByElement = {\n  img(context, node, nodeType) {\n    var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt'); // Missing alt prop error.\n\n    if (altProp === undefined) {\n      if ((0, _isPresentationRole[\"default\"])(nodeType, node.attributes)) {\n        context.report({\n          node,\n          message: 'Prefer alt=\"\" over a presentational role. First rule of aria is to not use aria if it can be achieved via native HTML.'\n        });\n        return;\n      } // Check for `aria-label` to provide text alternative\n      // Don't create an error if the attribute is used correctly. But if it\n      // isn't, suggest that the developer use `alt` instead.\n\n\n      var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n\n      if (ariaLabelProp !== undefined) {\n        if (!ariaLabelHasValue(ariaLabelProp)) {\n          context.report({\n            node,\n            message: 'The aria-label attribute must have a value. The alt attribute is preferred over aria-label for images.'\n          });\n        }\n\n        return;\n      } // Check for `aria-labelledby` to provide text alternative\n      // Don't create an error if the attribute is used correctly. But if it\n      // isn't, suggest that the developer use `alt` instead.\n\n\n      var ariaLabelledbyProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n\n      if (ariaLabelledbyProp !== undefined) {\n        if (!ariaLabelHasValue(ariaLabelledbyProp)) {\n          context.report({\n            node,\n            message: 'The aria-labelledby attribute must have a value. The alt attribute is preferred over aria-labelledby for images.'\n          });\n        }\n\n        return;\n      }\n\n      context.report({\n        node,\n        message: \"\".concat(nodeType, \" elements must have an alt prop, either with meaningful text, or an empty string for decorative images.\")\n      });\n      return;\n    } // Check if alt prop is undefined.\n\n\n    var altValue = (0, _jsxAstUtils.getPropValue)(altProp);\n    var isNullValued = altProp.value === null; // <img alt />\n\n    if (altValue && !isNullValued || altValue === '') {\n      return;\n    } // Undefined alt prop error.\n\n\n    context.report({\n      node,\n      message: \"Invalid alt value for \".concat(nodeType, \". Use alt=\\\"\\\" for presentational images.\")\n    });\n  },\n\n  object(context, node, unusedNodeType, elementType) {\n    var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n    var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n    var hasLabel = ariaLabelHasValue(ariaLabelProp) || ariaLabelHasValue(arialLabelledByProp);\n    var titleProp = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'title'));\n    var hasTitleAttr = !!titleProp;\n\n    if (hasLabel || hasTitleAttr || (0, _hasAccessibleChild[\"default\"])(node.parent, elementType)) {\n      return;\n    }\n\n    context.report({\n      node,\n      message: 'Embedded <object> elements must have alternative text by providing inner text, aria-label or aria-labelledby props.'\n    });\n  },\n\n  area(context, node) {\n    var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n    var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n    var hasLabel = ariaLabelHasValue(ariaLabelProp) || ariaLabelHasValue(arialLabelledByProp);\n\n    if (hasLabel) {\n      return;\n    }\n\n    var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');\n\n    if (altProp === undefined) {\n      context.report({\n        node,\n        message: 'Each area of an image map must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.'\n      });\n      return;\n    }\n\n    var altValue = (0, _jsxAstUtils.getPropValue)(altProp);\n    var isNullValued = altProp.value === null; // <area alt />\n\n    if (altValue && !isNullValued || altValue === '') {\n      return;\n    }\n\n    context.report({\n      node,\n      message: 'Each area of an image map must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.'\n    });\n  },\n\n  'input[type=\"image\"]': function inputImage(context, node, nodeType) {\n    // Only test input[type=\"image\"]\n    if (nodeType === 'input') {\n      var typePropValue = (0, _jsxAstUtils.getPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'type'));\n\n      if (typePropValue !== 'image') {\n        return;\n      }\n    }\n\n    var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n    var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n    var hasLabel = ariaLabelHasValue(ariaLabelProp) || ariaLabelHasValue(arialLabelledByProp);\n\n    if (hasLabel) {\n      return;\n    }\n\n    var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');\n\n    if (altProp === undefined) {\n      context.report({\n        node,\n        message: '<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.'\n      });\n      return;\n    }\n\n    var altValue = (0, _jsxAstUtils.getPropValue)(altProp);\n    var isNullValued = altProp.value === null; // <area alt />\n\n    if (altValue && !isNullValued || altValue === '') {\n      return;\n    }\n\n    context.report({\n      node,\n      message: '<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.'\n    });\n  }\n};\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md',\n      description: 'Enforce all elements that require alternative text have meaningful information to relay back to end user.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var options = context.options[0] || {}; // Elements to validate for alt text.\n\n    var elementOptions = options.elements || DEFAULT_ELEMENTS; // Get custom components for just the elements that will be tested.\n\n    var customComponents = elementOptions.map(function (element) {\n      return options[element];\n    }).reduce(function (components, customComponentsForElement) {\n      return components.concat(customComponentsForElement || []);\n    }, []);\n    var typesToValidate = new Set([].concat(customComponents, elementOptions).map(function (type) {\n      return type === 'input[type=\"image\"]' ? 'input' : type;\n    }));\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement(node) {\n        var nodeType = elementType(node);\n\n        if (!typesToValidate.has(nodeType)) {\n          return;\n        }\n\n        var DOMElement = nodeType;\n\n        if (DOMElement === 'input') {\n          DOMElement = 'input[type=\"image\"]';\n        } // Map nodeType to the DOM element if we are running this on a custom component.\n\n\n        if (elementOptions.indexOf(DOMElement) === -1) {\n          DOMElement = elementOptions.find(function (element) {\n            var customComponentsForElement = options[element] || [];\n            return customComponentsForElement.indexOf(nodeType) > -1;\n          });\n        }\n\n        ruleByElement[DOMElement](context, node, nodeType, elementType);\n      }\n\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_jsxAstUtils","_schemas","_getElementType","_hasAccessibleChild","_isPresentationRole","DEFAULT_ELEMENTS","schema","generateObjSchema","elements","arraySchema","img","object","area","ariaLabelHasValue","prop","getPropValue","undefined","length","ruleByElement","context","node","nodeType","altProp","getProp","attributes","report","message","ariaLabelProp","ariaLabelledbyProp","concat","altValue","isNullValued","unusedNodeType","elementType","arialLabelledByProp","hasLabel","titleProp","getLiteralPropValue","hasTitleAttr","parent","inputImage","typePropValue","_default","meta","docs","url","description","create","options","elementOptions","customComponents","map","element","reduce","components","customComponentsForElement","typesToValidate","Set","type","JSXOpeningElement","has","DOMElement","indexOf","find","module","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/lib/rules/alt-text.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\nvar _hasAccessibleChild = _interopRequireDefault(require(\"../util/hasAccessibleChild\"));\n\nvar _isPresentationRole = _interopRequireDefault(require(\"../util/isPresentationRole\"));\n\n/**\n * @fileoverview Enforce all elements that require alternative text have it.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\nvar DEFAULT_ELEMENTS = ['img', 'object', 'area', 'input[type=\"image\"]'];\nvar schema = (0, _schemas.generateObjSchema)({\n  elements: _schemas.arraySchema,\n  img: _schemas.arraySchema,\n  object: _schemas.arraySchema,\n  area: _schemas.arraySchema,\n  'input[type=\"image\"]': _schemas.arraySchema\n});\n\nvar ariaLabelHasValue = function ariaLabelHasValue(prop) {\n  var value = (0, _jsxAstUtils.getPropValue)(prop);\n\n  if (value === undefined) {\n    return false;\n  }\n\n  if (typeof value === 'string' && value.length === 0) {\n    return false;\n  }\n\n  return true;\n};\n\nvar ruleByElement = {\n  img(context, node, nodeType) {\n    var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt'); // Missing alt prop error.\n\n    if (altProp === undefined) {\n      if ((0, _isPresentationRole[\"default\"])(nodeType, node.attributes)) {\n        context.report({\n          node,\n          message: 'Prefer alt=\"\" over a presentational role. First rule of aria is to not use aria if it can be achieved via native HTML.'\n        });\n        return;\n      } // Check for `aria-label` to provide text alternative\n      // Don't create an error if the attribute is used correctly. But if it\n      // isn't, suggest that the developer use `alt` instead.\n\n\n      var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n\n      if (ariaLabelProp !== undefined) {\n        if (!ariaLabelHasValue(ariaLabelProp)) {\n          context.report({\n            node,\n            message: 'The aria-label attribute must have a value. The alt attribute is preferred over aria-label for images.'\n          });\n        }\n\n        return;\n      } // Check for `aria-labelledby` to provide text alternative\n      // Don't create an error if the attribute is used correctly. But if it\n      // isn't, suggest that the developer use `alt` instead.\n\n\n      var ariaLabelledbyProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n\n      if (ariaLabelledbyProp !== undefined) {\n        if (!ariaLabelHasValue(ariaLabelledbyProp)) {\n          context.report({\n            node,\n            message: 'The aria-labelledby attribute must have a value. The alt attribute is preferred over aria-labelledby for images.'\n          });\n        }\n\n        return;\n      }\n\n      context.report({\n        node,\n        message: \"\".concat(nodeType, \" elements must have an alt prop, either with meaningful text, or an empty string for decorative images.\")\n      });\n      return;\n    } // Check if alt prop is undefined.\n\n\n    var altValue = (0, _jsxAstUtils.getPropValue)(altProp);\n    var isNullValued = altProp.value === null; // <img alt />\n\n    if (altValue && !isNullValued || altValue === '') {\n      return;\n    } // Undefined alt prop error.\n\n\n    context.report({\n      node,\n      message: \"Invalid alt value for \".concat(nodeType, \". Use alt=\\\"\\\" for presentational images.\")\n    });\n  },\n\n  object(context, node, unusedNodeType, elementType) {\n    var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n    var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n    var hasLabel = ariaLabelHasValue(ariaLabelProp) || ariaLabelHasValue(arialLabelledByProp);\n    var titleProp = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'title'));\n    var hasTitleAttr = !!titleProp;\n\n    if (hasLabel || hasTitleAttr || (0, _hasAccessibleChild[\"default\"])(node.parent, elementType)) {\n      return;\n    }\n\n    context.report({\n      node,\n      message: 'Embedded <object> elements must have alternative text by providing inner text, aria-label or aria-labelledby props.'\n    });\n  },\n\n  area(context, node) {\n    var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n    var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n    var hasLabel = ariaLabelHasValue(ariaLabelProp) || ariaLabelHasValue(arialLabelledByProp);\n\n    if (hasLabel) {\n      return;\n    }\n\n    var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');\n\n    if (altProp === undefined) {\n      context.report({\n        node,\n        message: 'Each area of an image map must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.'\n      });\n      return;\n    }\n\n    var altValue = (0, _jsxAstUtils.getPropValue)(altProp);\n    var isNullValued = altProp.value === null; // <area alt />\n\n    if (altValue && !isNullValued || altValue === '') {\n      return;\n    }\n\n    context.report({\n      node,\n      message: 'Each area of an image map must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.'\n    });\n  },\n\n  'input[type=\"image\"]': function inputImage(context, node, nodeType) {\n    // Only test input[type=\"image\"]\n    if (nodeType === 'input') {\n      var typePropValue = (0, _jsxAstUtils.getPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'type'));\n\n      if (typePropValue !== 'image') {\n        return;\n      }\n    }\n\n    var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n    var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n    var hasLabel = ariaLabelHasValue(ariaLabelProp) || ariaLabelHasValue(arialLabelledByProp);\n\n    if (hasLabel) {\n      return;\n    }\n\n    var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');\n\n    if (altProp === undefined) {\n      context.report({\n        node,\n        message: '<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.'\n      });\n      return;\n    }\n\n    var altValue = (0, _jsxAstUtils.getPropValue)(altProp);\n    var isNullValued = altProp.value === null; // <area alt />\n\n    if (altValue && !isNullValued || altValue === '') {\n      return;\n    }\n\n    context.report({\n      node,\n      message: '<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.'\n    });\n  }\n};\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md',\n      description: 'Enforce all elements that require alternative text have meaningful information to relay back to end user.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var options = context.options[0] || {}; // Elements to validate for alt text.\n\n    var elementOptions = options.elements || DEFAULT_ELEMENTS; // Get custom components for just the elements that will be tested.\n\n    var customComponents = elementOptions.map(function (element) {\n      return options[element];\n    }).reduce(function (components, customComponentsForElement) {\n      return components.concat(customComponentsForElement || []);\n    }, []);\n    var typesToValidate = new Set([].concat(customComponents, elementOptions).map(function (type) {\n      return type === 'input[type=\"image\"]' ? 'input' : type;\n    }));\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement(node) {\n        var nodeType = elementType(node);\n\n        if (!typesToValidate.has(nodeType)) {\n          return;\n        }\n\n        var DOMElement = nodeType;\n\n        if (DOMElement === 'input') {\n          DOMElement = 'input[type=\"image\"]';\n        } // Map nodeType to the DOM element if we are running this on a custom component.\n\n\n        if (elementOptions.indexOf(DOMElement) === -1) {\n          DOMElement = elementOptions.find(function (element) {\n            var customComponentsForElement = options[element] || [];\n            return customComponentsForElement.indexOf(nodeType) > -1;\n          });\n        }\n\n        ruleByElement[DOMElement](context, node, nodeType, elementType);\n      }\n\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}