{"ast":null,"code":"/**\n * @fileoverview Defines where React component static properties should be positioned.\n * @author Daniel Mason\n */\n'use strict';\n\nconst fromEntries = require('object.fromentries');\n\nconst Components = require('../util/Components');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst astUtil = require('../util/ast');\n\nconst componentUtil = require('../util/componentUtil');\n\nconst propsUtil = require('../util/props');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Positioning Options\n// ------------------------------------------------------------------------------\n\n\nconst STATIC_PUBLIC_FIELD = 'static public field';\nconst STATIC_GETTER = 'static getter';\nconst PROPERTY_ASSIGNMENT = 'property assignment';\nconst POSITION_SETTINGS = [STATIC_PUBLIC_FIELD, STATIC_GETTER, PROPERTY_ASSIGNMENT]; // ------------------------------------------------------------------------------\n// Rule messages\n// ------------------------------------------------------------------------------\n\nconst ERROR_MESSAGES = {\n  [STATIC_PUBLIC_FIELD]: 'notStaticClassProp',\n  [STATIC_GETTER]: 'notGetterClassFunc',\n  [PROPERTY_ASSIGNMENT]: 'declareOutsideClass'\n}; // ------------------------------------------------------------------------------\n// Properties to check\n// ------------------------------------------------------------------------------\n\nconst propertiesToCheck = {\n  propTypes: propsUtil.isPropTypesDeclaration,\n  defaultProps: propsUtil.isDefaultPropsDeclaration,\n  childContextTypes: propsUtil.isChildContextTypesDeclaration,\n  contextTypes: propsUtil.isContextTypesDeclaration,\n  contextType: propsUtil.isContextTypeDeclaration,\n  displayName: node => propsUtil.isDisplayNameDeclaration(astUtil.getPropertyNameNode(node))\n};\nconst classProperties = Object.keys(propertiesToCheck);\nconst schemaProperties = fromEntries(classProperties.map(property => [property, {\n  enum: POSITION_SETTINGS\n}])); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  notStaticClassProp: '\\'{{name}}\\' should be declared as a static class property.',\n  notGetterClassFunc: '\\'{{name}}\\' should be declared as a static getter class function.',\n  declareOutsideClass: '\\'{{name}}\\' should be declared outside the class body.'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforces where React component static properties should be positioned.',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('static-property-placement')\n    },\n    fixable: null,\n    // or 'code' or 'whitespace'\n    messages,\n    schema: [{\n      enum: POSITION_SETTINGS\n    }, {\n      type: 'object',\n      properties: schemaProperties,\n      additionalProperties: false\n    }]\n  },\n  create: Components.detect((context, components, utils) => {\n    // variables should be defined here\n    const options = context.options;\n    const defaultCheckType = options[0] || STATIC_PUBLIC_FIELD;\n    const hasAdditionalConfig = options.length > 1;\n    const additionalConfig = hasAdditionalConfig ? options[1] : {}; // Set config\n\n    const config = fromEntries(classProperties.map(property => [property, additionalConfig[property] || defaultCheckType])); // ----------------------------------------------------------------------\n    // Helpers\n    // ----------------------------------------------------------------------\n\n    /**\n      * Checks if we are declaring context in class\n      * @returns {Boolean} True if we are declaring context in class, false if not.\n     */\n\n    function isContextInClass() {\n      let blockNode;\n      let scope = context.getScope();\n\n      while (scope) {\n        blockNode = scope.block;\n\n        if (blockNode && blockNode.type === 'ClassDeclaration') {\n          return true;\n        }\n\n        scope = scope.upper;\n      }\n\n      return false;\n    }\n    /**\n     * Check if we should report this property node\n     * @param {ASTNode} node\n     * @param {string} expectedRule\n     */\n\n\n    function reportNodeIncorrectlyPositioned(node, expectedRule) {\n      // Detect if this node is an expected property declaration adn return the property name\n      const name = classProperties.find(propertyName => {\n        if (propertiesToCheck[propertyName](node)) {\n          return !!propertyName;\n        }\n\n        return false;\n      }); // If name is set but the configured rule does not match expected then report error\n\n      if (name && config[name] !== expectedRule) {\n        const messageId = ERROR_MESSAGES[config[name]];\n        report(context, messages[messageId], messageId, {\n          node,\n          data: {\n            name\n          }\n        });\n      }\n    } // ----------------------------------------------------------------------\n    // Public\n    // ----------------------------------------------------------------------\n\n\n    return {\n      'ClassProperty, PropertyDefinition'(node) {\n        if (!componentUtil.getParentES6Component(context)) {\n          return;\n        }\n\n        reportNodeIncorrectlyPositioned(node, STATIC_PUBLIC_FIELD);\n      },\n\n      MemberExpression(node) {\n        // If definition type is undefined then it must not be a defining expression or if the definition is inside a\n        // class body then skip this node.\n        const right = node.parent.right;\n\n        if (!right || right.type === 'undefined' || isContextInClass()) {\n          return;\n        } // Get the related component\n\n\n        const relatedComponent = utils.getRelatedComponent(node); // If the related component is not an ES6 component then skip this node\n\n        if (!relatedComponent || !componentUtil.isES6Component(relatedComponent.node, context)) {\n          return;\n        } // Report if needed\n\n\n        reportNodeIncorrectlyPositioned(node, PROPERTY_ASSIGNMENT);\n      },\n\n      MethodDefinition(node) {\n        // If the function is inside a class and is static getter then check if correctly positioned\n        if (componentUtil.getParentES6Component(context) && node.static && node.kind === 'get') {\n          // Report error if needed\n          reportNodeIncorrectlyPositioned(node, STATIC_GETTER);\n        }\n      }\n\n    };\n  })\n};","map":{"version":3,"names":["fromEntries","require","Components","docsUrl","astUtil","componentUtil","propsUtil","report","STATIC_PUBLIC_FIELD","STATIC_GETTER","PROPERTY_ASSIGNMENT","POSITION_SETTINGS","ERROR_MESSAGES","propertiesToCheck","propTypes","isPropTypesDeclaration","defaultProps","isDefaultPropsDeclaration","childContextTypes","isChildContextTypesDeclaration","contextTypes","isContextTypesDeclaration","contextType","isContextTypeDeclaration","displayName","node","isDisplayNameDeclaration","getPropertyNameNode","classProperties","Object","keys","schemaProperties","map","property","enum","messages","notStaticClassProp","notGetterClassFunc","declareOutsideClass","module","exports","meta","docs","description","category","recommended","url","fixable","schema","type","properties","additionalProperties","create","detect","context","components","utils","options","defaultCheckType","hasAdditionalConfig","length","additionalConfig","config","isContextInClass","blockNode","scope","getScope","block","upper","reportNodeIncorrectlyPositioned","expectedRule","name","find","propertyName","messageId","data","getParentES6Component","MemberExpression","right","parent","relatedComponent","getRelatedComponent","isES6Component","MethodDefinition","static","kind"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/static-property-placement.js"],"sourcesContent":["/**\n * @fileoverview Defines where React component static properties should be positioned.\n * @author Daniel Mason\n */\n\n'use strict';\n\nconst fromEntries = require('object.fromentries');\nconst Components = require('../util/Components');\nconst docsUrl = require('../util/docsUrl');\nconst astUtil = require('../util/ast');\nconst componentUtil = require('../util/componentUtil');\nconst propsUtil = require('../util/props');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Positioning Options\n// ------------------------------------------------------------------------------\nconst STATIC_PUBLIC_FIELD = 'static public field';\nconst STATIC_GETTER = 'static getter';\nconst PROPERTY_ASSIGNMENT = 'property assignment';\nconst POSITION_SETTINGS = [STATIC_PUBLIC_FIELD, STATIC_GETTER, PROPERTY_ASSIGNMENT];\n\n// ------------------------------------------------------------------------------\n// Rule messages\n// ------------------------------------------------------------------------------\nconst ERROR_MESSAGES = {\n  [STATIC_PUBLIC_FIELD]: 'notStaticClassProp',\n  [STATIC_GETTER]: 'notGetterClassFunc',\n  [PROPERTY_ASSIGNMENT]: 'declareOutsideClass',\n};\n\n// ------------------------------------------------------------------------------\n// Properties to check\n// ------------------------------------------------------------------------------\nconst propertiesToCheck = {\n  propTypes: propsUtil.isPropTypesDeclaration,\n  defaultProps: propsUtil.isDefaultPropsDeclaration,\n  childContextTypes: propsUtil.isChildContextTypesDeclaration,\n  contextTypes: propsUtil.isContextTypesDeclaration,\n  contextType: propsUtil.isContextTypeDeclaration,\n  displayName: (node) => propsUtil.isDisplayNameDeclaration(astUtil.getPropertyNameNode(node)),\n};\n\nconst classProperties = Object.keys(propertiesToCheck);\nconst schemaProperties = fromEntries(classProperties.map((property) => [property, { enum: POSITION_SETTINGS }]));\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  notStaticClassProp: '\\'{{name}}\\' should be declared as a static class property.',\n  notGetterClassFunc: '\\'{{name}}\\' should be declared as a static getter class function.',\n  declareOutsideClass: '\\'{{name}}\\' should be declared outside the class body.',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforces where React component static properties should be positioned.',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('static-property-placement'),\n    },\n    fixable: null, // or 'code' or 'whitespace'\n\n    messages,\n\n    schema: [\n      { enum: POSITION_SETTINGS },\n      {\n        type: 'object',\n        properties: schemaProperties,\n        additionalProperties: false,\n      },\n    ],\n  },\n\n  create: Components.detect((context, components, utils) => {\n    // variables should be defined here\n    const options = context.options;\n    const defaultCheckType = options[0] || STATIC_PUBLIC_FIELD;\n    const hasAdditionalConfig = options.length > 1;\n    const additionalConfig = hasAdditionalConfig ? options[1] : {};\n\n    // Set config\n    const config = fromEntries(classProperties.map((property) => [\n      property,\n      additionalConfig[property] || defaultCheckType,\n    ]));\n\n    // ----------------------------------------------------------------------\n    // Helpers\n    // ----------------------------------------------------------------------\n\n    /**\n      * Checks if we are declaring context in class\n      * @returns {Boolean} True if we are declaring context in class, false if not.\n     */\n    function isContextInClass() {\n      let blockNode;\n      let scope = context.getScope();\n      while (scope) {\n        blockNode = scope.block;\n        if (blockNode && blockNode.type === 'ClassDeclaration') {\n          return true;\n        }\n        scope = scope.upper;\n      }\n\n      return false;\n    }\n\n    /**\n     * Check if we should report this property node\n     * @param {ASTNode} node\n     * @param {string} expectedRule\n     */\n    function reportNodeIncorrectlyPositioned(node, expectedRule) {\n      // Detect if this node is an expected property declaration adn return the property name\n      const name = classProperties.find((propertyName) => {\n        if (propertiesToCheck[propertyName](node)) {\n          return !!propertyName;\n        }\n\n        return false;\n      });\n\n      // If name is set but the configured rule does not match expected then report error\n      if (name && config[name] !== expectedRule) {\n        const messageId = ERROR_MESSAGES[config[name]];\n        report(context, messages[messageId], messageId, {\n          node,\n          data: { name },\n        });\n      }\n    }\n\n    // ----------------------------------------------------------------------\n    // Public\n    // ----------------------------------------------------------------------\n    return {\n      'ClassProperty, PropertyDefinition'(node) {\n        if (!componentUtil.getParentES6Component(context)) {\n          return;\n        }\n\n        reportNodeIncorrectlyPositioned(node, STATIC_PUBLIC_FIELD);\n      },\n\n      MemberExpression(node) {\n        // If definition type is undefined then it must not be a defining expression or if the definition is inside a\n        // class body then skip this node.\n        const right = node.parent.right;\n        if (!right || right.type === 'undefined' || isContextInClass()) {\n          return;\n        }\n\n        // Get the related component\n        const relatedComponent = utils.getRelatedComponent(node);\n\n        // If the related component is not an ES6 component then skip this node\n        if (!relatedComponent || !componentUtil.isES6Component(relatedComponent.node, context)) {\n          return;\n        }\n\n        // Report if needed\n        reportNodeIncorrectlyPositioned(node, PROPERTY_ASSIGNMENT);\n      },\n\n      MethodDefinition(node) {\n        // If the function is inside a class and is static getter then check if correctly positioned\n        if (componentUtil.getParentES6Component(context) && node.static && node.kind === 'get') {\n          // Report error if needed\n          reportNodeIncorrectlyPositioned(node, STATIC_GETTER);\n        }\n      },\n    };\n  }),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}