{"ast":null,"code":"'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst minifyWeight = require('./lib/minify-weight');\n\nconst minifyFamily = require('./lib/minify-family');\n\nconst minifyFont = require('./lib/minify-font');\n/**\n * @param {string} value\n * @return {boolean}\n */\n\n\nfunction hasVariableFunction(value) {\n  const lowerCasedValue = value.toLowerCase();\n  return lowerCasedValue.includes('var(') || lowerCasedValue.includes('env(');\n}\n/**\n * @param {string} prop\n * @param {string} value\n * @param {Options} opts\n * @return {string}\n */\n\n\nfunction transform(prop, value, opts) {\n  let lowerCasedProp = prop.toLowerCase();\n\n  if (lowerCasedProp === 'font-weight' && !hasVariableFunction(value)) {\n    return minifyWeight(value);\n  } else if (lowerCasedProp === 'font-family' && !hasVariableFunction(value)) {\n    const tree = valueParser(value);\n    tree.nodes = minifyFamily(tree.nodes, opts);\n    return tree.toString();\n  } else if (lowerCasedProp === 'font') {\n    const tree = valueParser(value);\n    tree.nodes = minifyFont(tree.nodes, opts);\n    return tree.toString();\n  }\n\n  return value;\n}\n/** @typedef {{removeAfterKeyword?: boolean, removeDuplicates?: boolean, removeQuotes?: boolean}} Options */\n\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options} opts\n * @return {import('postcss').Plugin}\n */\n\n\nfunction pluginCreator(opts) {\n  opts = Object.assign({}, {\n    removeAfterKeyword: false,\n    removeDuplicates: true,\n    removeQuotes: true\n  }, opts);\n  return {\n    postcssPlugin: 'postcss-minify-font-values',\n\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(/font/i, decl => {\n            const value = decl.value;\n\n            if (!value) {\n              return;\n            }\n\n            const prop = decl.prop;\n            const cacheKey = `${prop}|${value}`;\n\n            if (cache.has(cacheKey)) {\n              decl.value = cache.get(cacheKey);\n              return;\n            }\n\n            const newValue = transform(prop, value, opts);\n            decl.value = newValue;\n            cache.set(cacheKey, newValue);\n          });\n        }\n\n      };\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"names":["valueParser","require","minifyWeight","minifyFamily","minifyFont","hasVariableFunction","value","lowerCasedValue","toLowerCase","includes","transform","prop","opts","lowerCasedProp","tree","nodes","toString","pluginCreator","Object","assign","removeAfterKeyword","removeDuplicates","removeQuotes","postcssPlugin","prepare","cache","Map","OnceExit","css","walkDecls","decl","cacheKey","has","get","newValue","set","postcss","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-minify-font-values/src/index.js"],"sourcesContent":["'use strict';\nconst valueParser = require('postcss-value-parser');\nconst minifyWeight = require('./lib/minify-weight');\nconst minifyFamily = require('./lib/minify-family');\nconst minifyFont = require('./lib/minify-font');\n\n/**\n * @param {string} value\n * @return {boolean}\n */\nfunction hasVariableFunction(value) {\n  const lowerCasedValue = value.toLowerCase();\n\n  return lowerCasedValue.includes('var(') || lowerCasedValue.includes('env(');\n}\n\n/**\n * @param {string} prop\n * @param {string} value\n * @param {Options} opts\n * @return {string}\n */\nfunction transform(prop, value, opts) {\n  let lowerCasedProp = prop.toLowerCase();\n\n  if (lowerCasedProp === 'font-weight' && !hasVariableFunction(value)) {\n    return minifyWeight(value);\n  } else if (lowerCasedProp === 'font-family' && !hasVariableFunction(value)) {\n    const tree = valueParser(value);\n\n    tree.nodes = minifyFamily(tree.nodes, opts);\n\n    return tree.toString();\n  } else if (lowerCasedProp === 'font') {\n    const tree = valueParser(value);\n\n    tree.nodes = minifyFont(tree.nodes, opts);\n\n    return tree.toString();\n  }\n\n  return value;\n}\n\n/** @typedef {{removeAfterKeyword?: boolean, removeDuplicates?: boolean, removeQuotes?: boolean}} Options */\n\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options} opts\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator(opts) {\n  opts = Object.assign(\n    {},\n    {\n      removeAfterKeyword: false,\n      removeDuplicates: true,\n      removeQuotes: true,\n    },\n    opts\n  );\n\n  return {\n    postcssPlugin: 'postcss-minify-font-values',\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(/font/i, (decl) => {\n            const value = decl.value;\n\n            if (!value) {\n              return;\n            }\n\n            const prop = decl.prop;\n\n            const cacheKey = `${prop}|${value}`;\n\n            if (cache.has(cacheKey)) {\n              decl.value = cache.get(cacheKey);\n\n              return;\n            }\n\n            const newValue = transform(prop, value, opts);\n\n            decl.value = newValue;\n            cache.set(cacheKey, newValue);\n          });\n        },\n      };\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}