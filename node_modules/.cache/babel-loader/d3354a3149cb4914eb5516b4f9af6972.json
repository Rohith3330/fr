{"ast":null,"code":"/**\n * @fileoverview Forbid certain elements\n * @author Kenneth Chung\n */\n'use strict';\n\nconst has = require('object.hasown/polyfill')();\n\nconst docsUrl = require('../util/docsUrl');\n\nconst isCreateElement = require('../util/isCreateElement');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  forbiddenElement: '<{{element}}> is forbidden',\n  forbiddenElement_message: '<{{element}}> is forbidden, {{message}}'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow certain elements',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('forbid-elements')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        forbid: {\n          type: 'array',\n          items: {\n            anyOf: [{\n              type: 'string'\n            }, {\n              type: 'object',\n              properties: {\n                element: {\n                  type: 'string'\n                },\n                message: {\n                  type: 'string'\n                }\n              },\n              required: ['element'],\n              additionalProperties: false\n            }]\n          }\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const forbidConfiguration = configuration.forbid || [];\n    const indexedForbidConfigs = {};\n    forbidConfiguration.forEach(item => {\n      if (typeof item === 'string') {\n        indexedForbidConfigs[item] = {\n          element: item\n        };\n      } else {\n        indexedForbidConfigs[item.element] = item;\n      }\n    });\n\n    function reportIfForbidden(element, node) {\n      if (has(indexedForbidConfigs, element)) {\n        const message = indexedForbidConfigs[element].message;\n        report(context, message ? messages.forbiddenElement_message : messages.forbiddenElement, message ? 'forbiddenElement_message' : 'forbiddenElement', {\n          node,\n          data: {\n            element,\n            message\n          }\n        });\n      }\n    }\n\n    return {\n      JSXOpeningElement(node) {\n        reportIfForbidden(context.getSourceCode().getText(node.name), node.name);\n      },\n\n      CallExpression(node) {\n        if (!isCreateElement(node, context)) {\n          return;\n        }\n\n        const argument = node.arguments[0];\n        const argType = argument.type;\n\n        if (argType === 'Identifier' && /^[A-Z_]/.test(argument.name)) {\n          reportIfForbidden(argument.name, argument);\n        } else if (argType === 'Literal' && /^[a-z][^.]*$/.test(argument.value)) {\n          reportIfForbidden(argument.value, argument);\n        } else if (argType === 'MemberExpression') {\n          reportIfForbidden(context.getSourceCode().getText(argument), argument);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["has","require","docsUrl","isCreateElement","report","messages","forbiddenElement","forbiddenElement_message","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","forbid","items","anyOf","element","message","required","additionalProperties","create","context","configuration","options","forbidConfiguration","indexedForbidConfigs","forEach","item","reportIfForbidden","node","data","JSXOpeningElement","getSourceCode","getText","name","CallExpression","argument","arguments","argType","test","value"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/forbid-elements.js"],"sourcesContent":["/**\n * @fileoverview Forbid certain elements\n * @author Kenneth Chung\n */\n\n'use strict';\n\nconst has = require('object.hasown/polyfill')();\nconst docsUrl = require('../util/docsUrl');\nconst isCreateElement = require('../util/isCreateElement');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  forbiddenElement: '<{{element}}> is forbidden',\n  forbiddenElement_message: '<{{element}}> is forbidden, {{message}}',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow certain elements',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('forbid-elements'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        forbid: {\n          type: 'array',\n          items: {\n            anyOf: [\n              { type: 'string' },\n              {\n                type: 'object',\n                properties: {\n                  element: { type: 'string' },\n                  message: { type: 'string' },\n                },\n                required: ['element'],\n                additionalProperties: false,\n              },\n            ],\n          },\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const forbidConfiguration = configuration.forbid || [];\n\n    const indexedForbidConfigs = {};\n\n    forbidConfiguration.forEach((item) => {\n      if (typeof item === 'string') {\n        indexedForbidConfigs[item] = { element: item };\n      } else {\n        indexedForbidConfigs[item.element] = item;\n      }\n    });\n\n    function reportIfForbidden(element, node) {\n      if (has(indexedForbidConfigs, element)) {\n        const message = indexedForbidConfigs[element].message;\n\n        report(\n          context,\n          message ? messages.forbiddenElement_message : messages.forbiddenElement,\n          message ? 'forbiddenElement_message' : 'forbiddenElement',\n          {\n            node,\n            data: {\n              element,\n              message,\n            },\n          }\n        );\n      }\n    }\n\n    return {\n      JSXOpeningElement(node) {\n        reportIfForbidden(context.getSourceCode().getText(node.name), node.name);\n      },\n\n      CallExpression(node) {\n        if (!isCreateElement(node, context)) {\n          return;\n        }\n\n        const argument = node.arguments[0];\n        const argType = argument.type;\n\n        if (argType === 'Identifier' && /^[A-Z_]/.test(argument.name)) {\n          reportIfForbidden(argument.name, argument);\n        } else if (argType === 'Literal' && /^[a-z][^.]*$/.test(argument.value)) {\n          reportIfForbidden(argument.value, argument);\n        } else if (argType === 'MemberExpression') {\n          reportIfForbidden(context.getSourceCode().getText(argument), argument);\n        }\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}