{"ast":null,"code":"/**\n * @fileoverview Flat Config Array\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst {\n  ConfigArray,\n  ConfigArraySymbol\n} = require(\"@humanwhocodes/config-array\");\n\nconst {\n  flatConfigSchema\n} = require(\"./flat-config-schema\");\n\nconst {\n  RuleValidator\n} = require(\"./rule-validator\");\n\nconst {\n  defaultConfig\n} = require(\"./default-config\");\n\nconst recommendedConfig = require(\"../../conf/eslint-recommended\"); //-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n\nconst ruleValidator = new RuleValidator();\n/**\n * Splits a plugin identifier in the form a/b/c into two parts: a/b and c.\n * @param {string} identifier The identifier to parse.\n * @returns {{objectName: string, pluginName: string}} The parts of the plugin\n *      name.\n */\n\nfunction splitPluginIdentifier(identifier) {\n  const parts = identifier.split(\"/\");\n  return {\n    objectName: parts.pop(),\n    pluginName: parts.join(\"/\")\n  };\n}\n\nconst originalBaseConfig = Symbol(\"originalBaseConfig\"); //-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * Represents an array containing configuration information for ESLint.\n */\n\nclass FlatConfigArray extends ConfigArray {\n  /**\n   * Creates a new instance.\n   * @param {*[]} configs An array of configuration information.\n   * @param {{basePath: string, shouldIgnore: boolean, baseConfig: FlatConfig}} options The options\n   *      to use for the config array instance.\n   */\n  constructor(configs) {\n    let {\n      basePath,\n      shouldIgnore = true,\n      baseConfig = defaultConfig\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(configs, {\n      basePath,\n      schema: flatConfigSchema\n    });\n\n    if (baseConfig[Symbol.iterator]) {\n      this.unshift(...baseConfig);\n    } else {\n      this.unshift(baseConfig);\n    }\n    /**\n     * The baes config used to build the config array.\n     * @type {Array<FlatConfig>}\n     */\n\n\n    this[originalBaseConfig] = baseConfig;\n    Object.defineProperty(this, originalBaseConfig, {\n      writable: false\n    });\n    /**\n     * Determines if `ignores` fields should be honored.\n     * If true, then all `ignores` fields are honored.\n     * if false, then only `ignores` fields in the baseConfig are honored.\n     * @type {boolean}\n     */\n\n    this.shouldIgnore = shouldIgnore;\n    Object.defineProperty(this, \"shouldIgnore\", {\n      writable: false\n    });\n  }\n  /* eslint-disable class-methods-use-this -- Desired as instance method */\n\n  /**\n   * Replaces a config with another config to allow us to put strings\n   * in the config array that will be replaced by objects before\n   * normalization.\n   * @param {Object} config The config to preprocess.\n   * @returns {Object} The preprocessed config.\n   */\n\n\n  [ConfigArraySymbol.preprocessConfig](config) {\n    if (config === \"eslint:recommended\") {\n      return recommendedConfig;\n    }\n\n    if (config === \"eslint:all\") {\n      /*\n       * Load `eslint-all.js` here instead of at the top level to avoid loading all rule modules\n       * when it isn't necessary. `eslint-all.js` reads `meta` of rule objects to filter out deprecated ones,\n       * so requiring `eslint-all.js` module loads all rule modules as a consequence.\n       */\n      return require(\"../../conf/eslint-all\");\n    }\n    /*\n     * If `shouldIgnore` is false, we remove any ignore patterns specified\n     * in the config so long as it's not a default config and it doesn't\n     * have a `files` entry.\n     */\n\n\n    if (!this.shouldIgnore && !this[originalBaseConfig].includes(config) && config.ignores && !config.files) {\n      /* eslint-disable-next-line no-unused-vars -- need to strip off other keys */\n      const {\n        ignores,\n        ...otherKeys\n      } = config;\n      return otherKeys;\n    }\n\n    return config;\n  }\n  /**\n   * Finalizes the config by replacing plugin references with their objects\n   * and validating rule option schemas.\n   * @param {Object} config The config to finalize.\n   * @returns {Object} The finalized config.\n   * @throws {TypeError} If the config is invalid.\n   */\n\n\n  [ConfigArraySymbol.finalizeConfig](config) {\n    const {\n      plugins,\n      languageOptions,\n      processor\n    } = config;\n    let parserName, processorName;\n    let invalidParser = false,\n        invalidProcessor = false; // Check parser value\n\n    if (languageOptions && languageOptions.parser) {\n      if (typeof languageOptions.parser === \"string\") {\n        const {\n          pluginName,\n          objectName: localParserName\n        } = splitPluginIdentifier(languageOptions.parser);\n        parserName = languageOptions.parser;\n\n        if (!plugins || !plugins[pluginName] || !plugins[pluginName].parsers || !plugins[pluginName].parsers[localParserName]) {\n          throw new TypeError(`Key \"parser\": Could not find \"${localParserName}\" in plugin \"${pluginName}\".`);\n        }\n\n        languageOptions.parser = plugins[pluginName].parsers[localParserName];\n      } else {\n        invalidParser = true;\n      }\n    } // Check processor value\n\n\n    if (processor) {\n      if (typeof processor === \"string\") {\n        const {\n          pluginName,\n          objectName: localProcessorName\n        } = splitPluginIdentifier(processor);\n        processorName = processor;\n\n        if (!plugins || !plugins[pluginName] || !plugins[pluginName].processors || !plugins[pluginName].processors[localProcessorName]) {\n          throw new TypeError(`Key \"processor\": Could not find \"${localProcessorName}\" in plugin \"${pluginName}\".`);\n        }\n\n        config.processor = plugins[pluginName].processors[localProcessorName];\n      } else {\n        invalidProcessor = true;\n      }\n    }\n\n    ruleValidator.validate(config); // apply special logic for serialization into JSON\n\n    /* eslint-disable object-shorthand -- shorthand would change \"this\" value */\n\n    Object.defineProperty(config, \"toJSON\", {\n      value: function () {\n        if (invalidParser) {\n          throw new Error(\"Caching is not supported when parser is an object.\");\n        }\n\n        if (invalidProcessor) {\n          throw new Error(\"Caching is not supported when processor is an object.\");\n        }\n\n        return { ...this,\n          plugins: Object.keys(plugins),\n          languageOptions: { ...languageOptions,\n            parser: parserName\n          },\n          processor: processorName\n        };\n      }\n    });\n    /* eslint-enable object-shorthand -- ok to enable now */\n\n    return config;\n  }\n  /* eslint-enable class-methods-use-this -- Desired as instance method */\n\n\n}\n\nexports.FlatConfigArray = FlatConfigArray;","map":{"version":3,"names":["ConfigArray","ConfigArraySymbol","require","flatConfigSchema","RuleValidator","defaultConfig","recommendedConfig","ruleValidator","splitPluginIdentifier","identifier","parts","split","objectName","pop","pluginName","join","originalBaseConfig","Symbol","FlatConfigArray","constructor","configs","basePath","shouldIgnore","baseConfig","schema","iterator","unshift","Object","defineProperty","writable","preprocessConfig","config","includes","ignores","files","otherKeys","finalizeConfig","plugins","languageOptions","processor","parserName","processorName","invalidParser","invalidProcessor","parser","localParserName","parsers","TypeError","localProcessorName","processors","validate","value","Error","keys","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/config/flat-config-array.js"],"sourcesContent":["/**\n * @fileoverview Flat Config Array\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst { ConfigArray, ConfigArraySymbol } = require(\"@humanwhocodes/config-array\");\nconst { flatConfigSchema } = require(\"./flat-config-schema\");\nconst { RuleValidator } = require(\"./rule-validator\");\nconst { defaultConfig } = require(\"./default-config\");\nconst recommendedConfig = require(\"../../conf/eslint-recommended\");\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\nconst ruleValidator = new RuleValidator();\n\n/**\n * Splits a plugin identifier in the form a/b/c into two parts: a/b and c.\n * @param {string} identifier The identifier to parse.\n * @returns {{objectName: string, pluginName: string}} The parts of the plugin\n *      name.\n */\nfunction splitPluginIdentifier(identifier) {\n    const parts = identifier.split(\"/\");\n\n    return {\n        objectName: parts.pop(),\n        pluginName: parts.join(\"/\")\n    };\n}\n\nconst originalBaseConfig = Symbol(\"originalBaseConfig\");\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * Represents an array containing configuration information for ESLint.\n */\nclass FlatConfigArray extends ConfigArray {\n\n    /**\n     * Creates a new instance.\n     * @param {*[]} configs An array of configuration information.\n     * @param {{basePath: string, shouldIgnore: boolean, baseConfig: FlatConfig}} options The options\n     *      to use for the config array instance.\n     */\n    constructor(configs, {\n        basePath,\n        shouldIgnore = true,\n        baseConfig = defaultConfig\n    } = {}) {\n        super(configs, {\n            basePath,\n            schema: flatConfigSchema\n        });\n\n        if (baseConfig[Symbol.iterator]) {\n            this.unshift(...baseConfig);\n        } else {\n            this.unshift(baseConfig);\n        }\n\n        /**\n         * The baes config used to build the config array.\n         * @type {Array<FlatConfig>}\n         */\n        this[originalBaseConfig] = baseConfig;\n        Object.defineProperty(this, originalBaseConfig, { writable: false });\n\n        /**\n         * Determines if `ignores` fields should be honored.\n         * If true, then all `ignores` fields are honored.\n         * if false, then only `ignores` fields in the baseConfig are honored.\n         * @type {boolean}\n         */\n        this.shouldIgnore = shouldIgnore;\n        Object.defineProperty(this, \"shouldIgnore\", { writable: false });\n    }\n\n    /* eslint-disable class-methods-use-this -- Desired as instance method */\n    /**\n     * Replaces a config with another config to allow us to put strings\n     * in the config array that will be replaced by objects before\n     * normalization.\n     * @param {Object} config The config to preprocess.\n     * @returns {Object} The preprocessed config.\n     */\n    [ConfigArraySymbol.preprocessConfig](config) {\n        if (config === \"eslint:recommended\") {\n            return recommendedConfig;\n        }\n\n        if (config === \"eslint:all\") {\n\n            /*\n             * Load `eslint-all.js` here instead of at the top level to avoid loading all rule modules\n             * when it isn't necessary. `eslint-all.js` reads `meta` of rule objects to filter out deprecated ones,\n             * so requiring `eslint-all.js` module loads all rule modules as a consequence.\n             */\n            return require(\"../../conf/eslint-all\");\n        }\n\n        /*\n         * If `shouldIgnore` is false, we remove any ignore patterns specified\n         * in the config so long as it's not a default config and it doesn't\n         * have a `files` entry.\n         */\n        if (\n            !this.shouldIgnore &&\n            !this[originalBaseConfig].includes(config) &&\n            config.ignores &&\n            !config.files\n        ) {\n            /* eslint-disable-next-line no-unused-vars -- need to strip off other keys */\n            const { ignores, ...otherKeys } = config;\n\n            return otherKeys;\n        }\n\n        return config;\n    }\n\n    /**\n     * Finalizes the config by replacing plugin references with their objects\n     * and validating rule option schemas.\n     * @param {Object} config The config to finalize.\n     * @returns {Object} The finalized config.\n     * @throws {TypeError} If the config is invalid.\n     */\n    [ConfigArraySymbol.finalizeConfig](config) {\n\n        const { plugins, languageOptions, processor } = config;\n        let parserName, processorName;\n        let invalidParser = false,\n            invalidProcessor = false;\n\n        // Check parser value\n        if (languageOptions && languageOptions.parser) {\n            if (typeof languageOptions.parser === \"string\") {\n                const { pluginName, objectName: localParserName } = splitPluginIdentifier(languageOptions.parser);\n\n                parserName = languageOptions.parser;\n\n                if (!plugins || !plugins[pluginName] || !plugins[pluginName].parsers || !plugins[pluginName].parsers[localParserName]) {\n                    throw new TypeError(`Key \"parser\": Could not find \"${localParserName}\" in plugin \"${pluginName}\".`);\n                }\n\n                languageOptions.parser = plugins[pluginName].parsers[localParserName];\n            } else {\n                invalidParser = true;\n            }\n        }\n\n        // Check processor value\n        if (processor) {\n            if (typeof processor === \"string\") {\n                const { pluginName, objectName: localProcessorName } = splitPluginIdentifier(processor);\n\n                processorName = processor;\n\n                if (!plugins || !plugins[pluginName] || !plugins[pluginName].processors || !plugins[pluginName].processors[localProcessorName]) {\n                    throw new TypeError(`Key \"processor\": Could not find \"${localProcessorName}\" in plugin \"${pluginName}\".`);\n                }\n\n                config.processor = plugins[pluginName].processors[localProcessorName];\n            } else {\n                invalidProcessor = true;\n            }\n        }\n\n        ruleValidator.validate(config);\n\n        // apply special logic for serialization into JSON\n        /* eslint-disable object-shorthand -- shorthand would change \"this\" value */\n        Object.defineProperty(config, \"toJSON\", {\n            value: function() {\n\n                if (invalidParser) {\n                    throw new Error(\"Caching is not supported when parser is an object.\");\n                }\n\n                if (invalidProcessor) {\n                    throw new Error(\"Caching is not supported when processor is an object.\");\n                }\n\n                return {\n                    ...this,\n                    plugins: Object.keys(plugins),\n                    languageOptions: {\n                        ...languageOptions,\n                        parser: parserName\n                    },\n                    processor: processorName\n                };\n            }\n        });\n        /* eslint-enable object-shorthand -- ok to enable now */\n\n        return config;\n    }\n    /* eslint-enable class-methods-use-this -- Desired as instance method */\n\n}\n\nexports.FlatConfigArray = FlatConfigArray;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}