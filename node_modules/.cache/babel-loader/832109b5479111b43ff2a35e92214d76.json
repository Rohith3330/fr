{"ast":null,"code":"\"use strict\";\n/*--------------------------------------------------------------------------\r\n\r\n@sinclair/typebox/value\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n---------------------------------------------------------------------------*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValueCast = exports.ValueCastUnknownTypeError = exports.ValueCastRecursiveTypeError = exports.ValueCastNeverTypeError = exports.ValueCastArrayUniqueItemsTypeError = exports.ValueCastReferenceTypeError = void 0;\n\nconst Types = require(\"../typebox\");\n\nconst create_1 = require(\"./create\");\n\nconst check_1 = require(\"./check\");\n\nconst clone_1 = require(\"./clone\");\n\nvar UnionValueCast;\n\n(function (UnionValueCast) {\n  // ----------------------------------------------------------------------------------------------\n  // The following will score a schema against a value. For objects, the score is the tally of\n  // points awarded for each property of the value. Property points are (1.0 / propertyCount)\n  // to prevent large property counts biasing results. Properties that match literal values are\n  // maximally awarded as literals are typically used as union discriminator fields.\n  // ----------------------------------------------------------------------------------------------\n  function Score(schema, references, value) {\n    if (schema[Types.Kind] === 'Object' && typeof value === 'object' && value !== null) {\n      const object = schema;\n      const keys = Object.keys(value);\n      const entries = globalThis.Object.entries(object.properties);\n      const [point, max] = [1 / entries.length, entries.length];\n      return entries.reduce((acc, _ref) => {\n        let [key, schema] = _ref;\n        const literal = schema[Types.Kind] === 'Literal' && schema.const === value[key] ? max : 0;\n        const checks = check_1.ValueCheck.Check(schema, references, value[key]) ? point : 0;\n        const exists = keys.includes(key) ? point : 0;\n        return acc + (literal + checks + exists);\n      }, 0);\n    } else {\n      return check_1.ValueCheck.Check(schema, references, value) ? 1 : 0;\n    }\n  }\n\n  function Select(union, references, value) {\n    let [select, best] = [union.anyOf[0], 0];\n\n    for (const schema of union.anyOf) {\n      const score = Score(schema, references, value);\n\n      if (score > best) {\n        select = schema;\n        best = score;\n      }\n    }\n\n    return select;\n  }\n\n  function Create(union, references, value) {\n    return check_1.ValueCheck.Check(union, references, value) ? clone_1.ValueClone.Clone(value) : ValueCast.Cast(Select(union, references, value), references, value);\n  }\n\n  UnionValueCast.Create = Create;\n})(UnionValueCast || (UnionValueCast = {})); // -----------------------------------------------------------\n// Errors\n// -----------------------------------------------------------\n\n\nclass ValueCastReferenceTypeError extends Error {\n  constructor(schema) {\n    super(`ValueCast: Cannot locate referenced schema with $id '${schema.$ref}'`);\n    this.schema = schema;\n  }\n\n}\n\nexports.ValueCastReferenceTypeError = ValueCastReferenceTypeError;\n\nclass ValueCastArrayUniqueItemsTypeError extends Error {\n  constructor(schema, value) {\n    super('ValueCast: Array cast produced invalid data due to uniqueItems constraint');\n    this.schema = schema;\n    this.value = value;\n  }\n\n}\n\nexports.ValueCastArrayUniqueItemsTypeError = ValueCastArrayUniqueItemsTypeError;\n\nclass ValueCastNeverTypeError extends Error {\n  constructor(schema) {\n    super('ValueCast: Never types cannot be cast');\n    this.schema = schema;\n  }\n\n}\n\nexports.ValueCastNeverTypeError = ValueCastNeverTypeError;\n\nclass ValueCastRecursiveTypeError extends Error {\n  constructor(schema) {\n    super('ValueCast.Recursive: Cannot cast recursive schemas');\n    this.schema = schema;\n  }\n\n}\n\nexports.ValueCastRecursiveTypeError = ValueCastRecursiveTypeError;\n\nclass ValueCastUnknownTypeError extends Error {\n  constructor(schema) {\n    super('ValueCast: Unknown type');\n    this.schema = schema;\n  }\n\n}\n\nexports.ValueCastUnknownTypeError = ValueCastUnknownTypeError;\nvar ValueCast;\n\n(function (ValueCast) {\n  // -----------------------------------------------------------\n  // Guards\n  // -----------------------------------------------------------\n  function IsArray(value) {\n    return typeof value === 'object' && globalThis.Array.isArray(value);\n  }\n\n  function IsString(value) {\n    return typeof value === 'string';\n  }\n\n  function IsBoolean(value) {\n    return typeof value === 'boolean';\n  }\n\n  function IsBigInt(value) {\n    return typeof value === 'bigint';\n  }\n\n  function IsNumber(value) {\n    return typeof value === 'number';\n  }\n\n  function IsStringNumeric(value) {\n    return IsString(value) && !isNaN(value) && !isNaN(parseFloat(value));\n  }\n\n  function IsValueToString(value) {\n    return IsBigInt(value) || IsBoolean(value) || IsNumber(value);\n  }\n\n  function IsValueTrue(value) {\n    return value === true || IsNumber(value) && value === 1 || IsBigInt(value) && value === 1n || IsString(value) && (value.toLowerCase() === 'true' || value === '1');\n  }\n\n  function IsValueFalse(value) {\n    return value === false || IsNumber(value) && value === 0 || IsBigInt(value) && value === 0n || IsString(value) && (value.toLowerCase() === 'false' || value === '0');\n  } // -----------------------------------------------------------\n  // Convert\n  // -----------------------------------------------------------\n\n\n  function TryConvertString(value) {\n    return IsValueToString(value) ? value.toString() : value;\n  }\n\n  function TryConvertNumber(value) {\n    return IsStringNumeric(value) ? parseFloat(value) : IsValueTrue(value) ? 1 : value;\n  }\n\n  function TryConvertInteger(value) {\n    return IsStringNumeric(value) ? parseInt(value) : IsValueTrue(value) ? 1 : value;\n  }\n\n  function TryConvertBoolean(value) {\n    return IsValueTrue(value) ? true : IsValueFalse(value) ? false : value;\n  } // -----------------------------------------------------------\n  // Cast\n  // -----------------------------------------------------------\n\n\n  function Any(schema, references, value) {\n    return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Array(schema, references, value) {\n    if (check_1.ValueCheck.Check(schema, references, value)) return clone_1.ValueClone.Clone(value);\n    const created = IsArray(value) ? clone_1.ValueClone.Clone(value) : create_1.ValueCreate.Create(schema, references);\n    const minimum = IsNumber(schema.minItems) && created.length < schema.minItems ? [...created, ...globalThis.Array.from({\n      length: schema.minItems - created.length\n    }, () => null)] : created;\n    const maximum = IsNumber(schema.maxItems) && minimum.length > schema.maxItems ? minimum.slice(0, schema.maxItems) : minimum;\n    const casted = maximum.map(value => Visit(schema.items, references, value));\n    if (schema.uniqueItems !== true) return casted;\n    const unique = [...new Set(casted)];\n    if (!check_1.ValueCheck.Check(schema, references, unique)) throw new ValueCastArrayUniqueItemsTypeError(schema, unique);\n    return unique;\n  }\n\n  function Boolean(schema, references, value) {\n    const conversion = TryConvertBoolean(value);\n    return check_1.ValueCheck.Check(schema, references, conversion) ? conversion : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Constructor(schema, references, value) {\n    if (check_1.ValueCheck.Check(schema, references, value)) return create_1.ValueCreate.Create(schema, references);\n    const required = new Set(schema.returns.required || []);\n\n    const result = function () {};\n\n    for (const [key, property] of globalThis.Object.entries(schema.returns.properties)) {\n      if (!required.has(key) && value.prototype[key] === undefined) continue;\n      result.prototype[key] = Visit(property, references, value.prototype[key]);\n    }\n\n    return result;\n  }\n\n  function Enum(schema, references, value) {\n    return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Function(schema, references, value) {\n    return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Integer(schema, references, value) {\n    const conversion = TryConvertInteger(value);\n    return check_1.ValueCheck.Check(schema, references, conversion) ? conversion : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Literal(schema, references, value) {\n    return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Never(schema, references, value) {\n    throw new ValueCastNeverTypeError(schema);\n  }\n\n  function Null(schema, references, value) {\n    return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Number(schema, references, value) {\n    const conversion = TryConvertNumber(value);\n    return check_1.ValueCheck.Check(schema, references, conversion) ? conversion : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Object(schema, references, value) {\n    if (check_1.ValueCheck.Check(schema, references, value)) return clone_1.ValueClone.Clone(value);\n    if (value === null || typeof value !== 'object') return create_1.ValueCreate.Create(schema, references);\n    const required = new Set(schema.required || []);\n    const result = {};\n\n    for (const [key, property] of globalThis.Object.entries(schema.properties)) {\n      if (!required.has(key) && value[key] === undefined) continue;\n      result[key] = Visit(property, references, value[key]);\n    }\n\n    return result;\n  }\n\n  function Promise(schema, references, value) {\n    return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Record(schema, references, value) {\n    if (check_1.ValueCheck.Check(schema, references, value)) return clone_1.ValueClone.Clone(value);\n    if (value === null || typeof value !== 'object' || globalThis.Array.isArray(value)) return create_1.ValueCreate.Create(schema, references);\n    const subschemaKey = globalThis.Object.keys(schema.patternProperties)[0];\n    const subschema = schema.patternProperties[subschemaKey];\n    const result = {};\n\n    for (const [propKey, propValue] of globalThis.Object.entries(value)) {\n      result[propKey] = Visit(subschema, references, propValue);\n    }\n\n    return result;\n  }\n\n  function Recursive(schema, references, value) {\n    throw new ValueCastRecursiveTypeError(schema);\n  }\n\n  function Ref(schema, references, value) {\n    const reference = references.find(reference => reference.$id === schema.$ref);\n    if (reference === undefined) throw new ValueCastReferenceTypeError(schema);\n    return Visit(reference, references, value);\n  }\n\n  function Self(schema, references, value) {\n    const reference = references.find(reference => reference.$id === schema.$ref);\n    if (reference === undefined) throw new ValueCastReferenceTypeError(schema);\n    return Visit(reference, references, value);\n  }\n\n  function String(schema, references, value) {\n    const conversion = TryConvertString(value);\n    return check_1.ValueCheck.Check(schema, references, conversion) ? conversion : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Tuple(schema, references, value) {\n    if (check_1.ValueCheck.Check(schema, references, value)) return clone_1.ValueClone.Clone(value);\n    if (!globalThis.Array.isArray(value)) return create_1.ValueCreate.Create(schema, references);\n    if (schema.items === undefined) return [];\n    return schema.items.map((schema, index) => Visit(schema, references, value[index]));\n  }\n\n  function Undefined(schema, references, value) {\n    return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Union(schema, references, value) {\n    return UnionValueCast.Create(schema, references, value);\n  }\n\n  function Uint8Array(schema, references, value) {\n    return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Unknown(schema, references, value) {\n    return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Void(schema, references, value) {\n    return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\n  }\n\n  function Visit(schema, references, value) {\n    const anyReferences = schema.$id === undefined ? references : [schema, ...references];\n    const anySchema = schema;\n\n    switch (schema[Types.Kind]) {\n      case 'Any':\n        return Any(anySchema, anyReferences, value);\n\n      case 'Array':\n        return Array(anySchema, anyReferences, value);\n\n      case 'Boolean':\n        return Boolean(anySchema, anyReferences, value);\n\n      case 'Constructor':\n        return Constructor(anySchema, anyReferences, value);\n\n      case 'Enum':\n        return Enum(anySchema, anyReferences, value);\n\n      case 'Function':\n        return Function(anySchema, anyReferences, value);\n\n      case 'Integer':\n        return Integer(anySchema, anyReferences, value);\n\n      case 'Literal':\n        return Literal(anySchema, anyReferences, value);\n\n      case 'Never':\n        return Never(anySchema, anyReferences, value);\n\n      case 'Null':\n        return Null(anySchema, anyReferences, value);\n\n      case 'Number':\n        return Number(anySchema, anyReferences, value);\n\n      case 'Object':\n        return Object(anySchema, anyReferences, value);\n\n      case 'Promise':\n        return Promise(anySchema, anyReferences, value);\n\n      case 'Record':\n        return Record(anySchema, anyReferences, value);\n\n      case 'Rec':\n        return Recursive(anySchema, anyReferences, value);\n\n      case 'Ref':\n        return Ref(anySchema, anyReferences, value);\n\n      case 'Self':\n        return Self(anySchema, anyReferences, value);\n\n      case 'String':\n        return String(anySchema, anyReferences, value);\n\n      case 'Tuple':\n        return Tuple(anySchema, anyReferences, value);\n\n      case 'Undefined':\n        return Undefined(anySchema, anyReferences, value);\n\n      case 'Union':\n        return Union(anySchema, anyReferences, value);\n\n      case 'Uint8Array':\n        return Uint8Array(anySchema, anyReferences, value);\n\n      case 'Unknown':\n        return Unknown(anySchema, anyReferences, value);\n\n      case 'Void':\n        return Void(anySchema, anyReferences, value);\n\n      default:\n        throw new ValueCastUnknownTypeError(anySchema);\n    }\n  }\n\n  ValueCast.Visit = Visit;\n\n  function Cast(schema, references, value) {\n    return schema.$id === undefined ? Visit(schema, references, value) : Visit(schema, [schema, ...references], value);\n  }\n\n  ValueCast.Cast = Cast;\n})(ValueCast = exports.ValueCast || (exports.ValueCast = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","ValueCast","ValueCastUnknownTypeError","ValueCastRecursiveTypeError","ValueCastNeverTypeError","ValueCastArrayUniqueItemsTypeError","ValueCastReferenceTypeError","Types","require","create_1","check_1","clone_1","UnionValueCast","Score","schema","references","Kind","object","keys","entries","globalThis","properties","point","max","length","reduce","acc","key","literal","const","checks","ValueCheck","Check","exists","includes","Select","union","select","best","anyOf","score","Create","ValueClone","Clone","Cast","Error","constructor","$ref","IsArray","Array","isArray","IsString","IsBoolean","IsBigInt","IsNumber","IsStringNumeric","isNaN","parseFloat","IsValueToString","IsValueTrue","toLowerCase","IsValueFalse","TryConvertString","toString","TryConvertNumber","TryConvertInteger","parseInt","TryConvertBoolean","Any","ValueCreate","created","minimum","minItems","from","maximum","maxItems","slice","casted","map","Visit","items","uniqueItems","unique","Set","Boolean","conversion","Constructor","required","returns","result","property","has","prototype","undefined","Enum","Function","Integer","Literal","Never","Null","Number","Promise","Record","subschemaKey","patternProperties","subschema","propKey","propValue","Recursive","Ref","reference","find","$id","Self","String","Tuple","index","Undefined","Union","Uint8Array","Unknown","Void","anyReferences","anySchema"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@sinclair/typebox/value/cast.js"],"sourcesContent":["\"use strict\";\r\n/*--------------------------------------------------------------------------\r\n\r\n@sinclair/typebox/value\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n---------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ValueCast = exports.ValueCastUnknownTypeError = exports.ValueCastRecursiveTypeError = exports.ValueCastNeverTypeError = exports.ValueCastArrayUniqueItemsTypeError = exports.ValueCastReferenceTypeError = void 0;\r\nconst Types = require(\"../typebox\");\r\nconst create_1 = require(\"./create\");\r\nconst check_1 = require(\"./check\");\r\nconst clone_1 = require(\"./clone\");\r\nvar UnionValueCast;\r\n(function (UnionValueCast) {\r\n    // ----------------------------------------------------------------------------------------------\r\n    // The following will score a schema against a value. For objects, the score is the tally of\r\n    // points awarded for each property of the value. Property points are (1.0 / propertyCount)\r\n    // to prevent large property counts biasing results. Properties that match literal values are\r\n    // maximally awarded as literals are typically used as union discriminator fields.\r\n    // ----------------------------------------------------------------------------------------------\r\n    function Score(schema, references, value) {\r\n        if (schema[Types.Kind] === 'Object' && typeof value === 'object' && value !== null) {\r\n            const object = schema;\r\n            const keys = Object.keys(value);\r\n            const entries = globalThis.Object.entries(object.properties);\r\n            const [point, max] = [1 / entries.length, entries.length];\r\n            return entries.reduce((acc, [key, schema]) => {\r\n                const literal = schema[Types.Kind] === 'Literal' && schema.const === value[key] ? max : 0;\r\n                const checks = check_1.ValueCheck.Check(schema, references, value[key]) ? point : 0;\r\n                const exists = keys.includes(key) ? point : 0;\r\n                return acc + (literal + checks + exists);\r\n            }, 0);\r\n        }\r\n        else {\r\n            return check_1.ValueCheck.Check(schema, references, value) ? 1 : 0;\r\n        }\r\n    }\r\n    function Select(union, references, value) {\r\n        let [select, best] = [union.anyOf[0], 0];\r\n        for (const schema of union.anyOf) {\r\n            const score = Score(schema, references, value);\r\n            if (score > best) {\r\n                select = schema;\r\n                best = score;\r\n            }\r\n        }\r\n        return select;\r\n    }\r\n    function Create(union, references, value) {\r\n        return check_1.ValueCheck.Check(union, references, value) ? clone_1.ValueClone.Clone(value) : ValueCast.Cast(Select(union, references, value), references, value);\r\n    }\r\n    UnionValueCast.Create = Create;\r\n})(UnionValueCast || (UnionValueCast = {}));\r\n// -----------------------------------------------------------\r\n// Errors\r\n// -----------------------------------------------------------\r\nclass ValueCastReferenceTypeError extends Error {\r\n    constructor(schema) {\r\n        super(`ValueCast: Cannot locate referenced schema with $id '${schema.$ref}'`);\r\n        this.schema = schema;\r\n    }\r\n}\r\nexports.ValueCastReferenceTypeError = ValueCastReferenceTypeError;\r\nclass ValueCastArrayUniqueItemsTypeError extends Error {\r\n    constructor(schema, value) {\r\n        super('ValueCast: Array cast produced invalid data due to uniqueItems constraint');\r\n        this.schema = schema;\r\n        this.value = value;\r\n    }\r\n}\r\nexports.ValueCastArrayUniqueItemsTypeError = ValueCastArrayUniqueItemsTypeError;\r\nclass ValueCastNeverTypeError extends Error {\r\n    constructor(schema) {\r\n        super('ValueCast: Never types cannot be cast');\r\n        this.schema = schema;\r\n    }\r\n}\r\nexports.ValueCastNeverTypeError = ValueCastNeverTypeError;\r\nclass ValueCastRecursiveTypeError extends Error {\r\n    constructor(schema) {\r\n        super('ValueCast.Recursive: Cannot cast recursive schemas');\r\n        this.schema = schema;\r\n    }\r\n}\r\nexports.ValueCastRecursiveTypeError = ValueCastRecursiveTypeError;\r\nclass ValueCastUnknownTypeError extends Error {\r\n    constructor(schema) {\r\n        super('ValueCast: Unknown type');\r\n        this.schema = schema;\r\n    }\r\n}\r\nexports.ValueCastUnknownTypeError = ValueCastUnknownTypeError;\r\nvar ValueCast;\r\n(function (ValueCast) {\r\n    // -----------------------------------------------------------\r\n    // Guards\r\n    // -----------------------------------------------------------\r\n    function IsArray(value) {\r\n        return typeof value === 'object' && globalThis.Array.isArray(value);\r\n    }\r\n    function IsString(value) {\r\n        return typeof value === 'string';\r\n    }\r\n    function IsBoolean(value) {\r\n        return typeof value === 'boolean';\r\n    }\r\n    function IsBigInt(value) {\r\n        return typeof value === 'bigint';\r\n    }\r\n    function IsNumber(value) {\r\n        return typeof value === 'number';\r\n    }\r\n    function IsStringNumeric(value) {\r\n        return IsString(value) && !isNaN(value) && !isNaN(parseFloat(value));\r\n    }\r\n    function IsValueToString(value) {\r\n        return IsBigInt(value) || IsBoolean(value) || IsNumber(value);\r\n    }\r\n    function IsValueTrue(value) {\r\n        return value === true || (IsNumber(value) && value === 1) || (IsBigInt(value) && value === 1n) || (IsString(value) && (value.toLowerCase() === 'true' || value === '1'));\r\n    }\r\n    function IsValueFalse(value) {\r\n        return value === false || (IsNumber(value) && value === 0) || (IsBigInt(value) && value === 0n) || (IsString(value) && (value.toLowerCase() === 'false' || value === '0'));\r\n    }\r\n    // -----------------------------------------------------------\r\n    // Convert\r\n    // -----------------------------------------------------------\r\n    function TryConvertString(value) {\r\n        return IsValueToString(value) ? value.toString() : value;\r\n    }\r\n    function TryConvertNumber(value) {\r\n        return IsStringNumeric(value) ? parseFloat(value) : IsValueTrue(value) ? 1 : value;\r\n    }\r\n    function TryConvertInteger(value) {\r\n        return IsStringNumeric(value) ? parseInt(value) : IsValueTrue(value) ? 1 : value;\r\n    }\r\n    function TryConvertBoolean(value) {\r\n        return IsValueTrue(value) ? true : IsValueFalse(value) ? false : value;\r\n    }\r\n    // -----------------------------------------------------------\r\n    // Cast\r\n    // -----------------------------------------------------------\r\n    function Any(schema, references, value) {\r\n        return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Array(schema, references, value) {\r\n        if (check_1.ValueCheck.Check(schema, references, value))\r\n            return clone_1.ValueClone.Clone(value);\r\n        const created = IsArray(value) ? clone_1.ValueClone.Clone(value) : create_1.ValueCreate.Create(schema, references);\r\n        const minimum = IsNumber(schema.minItems) && created.length < schema.minItems ? [...created, ...globalThis.Array.from({ length: schema.minItems - created.length }, () => null)] : created;\r\n        const maximum = IsNumber(schema.maxItems) && minimum.length > schema.maxItems ? minimum.slice(0, schema.maxItems) : minimum;\r\n        const casted = maximum.map((value) => Visit(schema.items, references, value));\r\n        if (schema.uniqueItems !== true)\r\n            return casted;\r\n        const unique = [...new Set(casted)];\r\n        if (!check_1.ValueCheck.Check(schema, references, unique))\r\n            throw new ValueCastArrayUniqueItemsTypeError(schema, unique);\r\n        return unique;\r\n    }\r\n    function Boolean(schema, references, value) {\r\n        const conversion = TryConvertBoolean(value);\r\n        return check_1.ValueCheck.Check(schema, references, conversion) ? conversion : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Constructor(schema, references, value) {\r\n        if (check_1.ValueCheck.Check(schema, references, value))\r\n            return create_1.ValueCreate.Create(schema, references);\r\n        const required = new Set(schema.returns.required || []);\r\n        const result = function () { };\r\n        for (const [key, property] of globalThis.Object.entries(schema.returns.properties)) {\r\n            if (!required.has(key) && value.prototype[key] === undefined)\r\n                continue;\r\n            result.prototype[key] = Visit(property, references, value.prototype[key]);\r\n        }\r\n        return result;\r\n    }\r\n    function Enum(schema, references, value) {\r\n        return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Function(schema, references, value) {\r\n        return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Integer(schema, references, value) {\r\n        const conversion = TryConvertInteger(value);\r\n        return check_1.ValueCheck.Check(schema, references, conversion) ? conversion : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Literal(schema, references, value) {\r\n        return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Never(schema, references, value) {\r\n        throw new ValueCastNeverTypeError(schema);\r\n    }\r\n    function Null(schema, references, value) {\r\n        return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Number(schema, references, value) {\r\n        const conversion = TryConvertNumber(value);\r\n        return check_1.ValueCheck.Check(schema, references, conversion) ? conversion : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Object(schema, references, value) {\r\n        if (check_1.ValueCheck.Check(schema, references, value))\r\n            return clone_1.ValueClone.Clone(value);\r\n        if (value === null || typeof value !== 'object')\r\n            return create_1.ValueCreate.Create(schema, references);\r\n        const required = new Set(schema.required || []);\r\n        const result = {};\r\n        for (const [key, property] of globalThis.Object.entries(schema.properties)) {\r\n            if (!required.has(key) && value[key] === undefined)\r\n                continue;\r\n            result[key] = Visit(property, references, value[key]);\r\n        }\r\n        return result;\r\n    }\r\n    function Promise(schema, references, value) {\r\n        return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Record(schema, references, value) {\r\n        if (check_1.ValueCheck.Check(schema, references, value))\r\n            return clone_1.ValueClone.Clone(value);\r\n        if (value === null || typeof value !== 'object' || globalThis.Array.isArray(value))\r\n            return create_1.ValueCreate.Create(schema, references);\r\n        const subschemaKey = globalThis.Object.keys(schema.patternProperties)[0];\r\n        const subschema = schema.patternProperties[subschemaKey];\r\n        const result = {};\r\n        for (const [propKey, propValue] of globalThis.Object.entries(value)) {\r\n            result[propKey] = Visit(subschema, references, propValue);\r\n        }\r\n        return result;\r\n    }\r\n    function Recursive(schema, references, value) {\r\n        throw new ValueCastRecursiveTypeError(schema);\r\n    }\r\n    function Ref(schema, references, value) {\r\n        const reference = references.find((reference) => reference.$id === schema.$ref);\r\n        if (reference === undefined)\r\n            throw new ValueCastReferenceTypeError(schema);\r\n        return Visit(reference, references, value);\r\n    }\r\n    function Self(schema, references, value) {\r\n        const reference = references.find((reference) => reference.$id === schema.$ref);\r\n        if (reference === undefined)\r\n            throw new ValueCastReferenceTypeError(schema);\r\n        return Visit(reference, references, value);\r\n    }\r\n    function String(schema, references, value) {\r\n        const conversion = TryConvertString(value);\r\n        return check_1.ValueCheck.Check(schema, references, conversion) ? conversion : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Tuple(schema, references, value) {\r\n        if (check_1.ValueCheck.Check(schema, references, value))\r\n            return clone_1.ValueClone.Clone(value);\r\n        if (!globalThis.Array.isArray(value))\r\n            return create_1.ValueCreate.Create(schema, references);\r\n        if (schema.items === undefined)\r\n            return [];\r\n        return schema.items.map((schema, index) => Visit(schema, references, value[index]));\r\n    }\r\n    function Undefined(schema, references, value) {\r\n        return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Union(schema, references, value) {\r\n        return UnionValueCast.Create(schema, references, value);\r\n    }\r\n    function Uint8Array(schema, references, value) {\r\n        return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Unknown(schema, references, value) {\r\n        return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Void(schema, references, value) {\r\n        return check_1.ValueCheck.Check(schema, references, value) ? value : create_1.ValueCreate.Create(schema, references);\r\n    }\r\n    function Visit(schema, references, value) {\r\n        const anyReferences = schema.$id === undefined ? references : [schema, ...references];\r\n        const anySchema = schema;\r\n        switch (schema[Types.Kind]) {\r\n            case 'Any':\r\n                return Any(anySchema, anyReferences, value);\r\n            case 'Array':\r\n                return Array(anySchema, anyReferences, value);\r\n            case 'Boolean':\r\n                return Boolean(anySchema, anyReferences, value);\r\n            case 'Constructor':\r\n                return Constructor(anySchema, anyReferences, value);\r\n            case 'Enum':\r\n                return Enum(anySchema, anyReferences, value);\r\n            case 'Function':\r\n                return Function(anySchema, anyReferences, value);\r\n            case 'Integer':\r\n                return Integer(anySchema, anyReferences, value);\r\n            case 'Literal':\r\n                return Literal(anySchema, anyReferences, value);\r\n            case 'Never':\r\n                return Never(anySchema, anyReferences, value);\r\n            case 'Null':\r\n                return Null(anySchema, anyReferences, value);\r\n            case 'Number':\r\n                return Number(anySchema, anyReferences, value);\r\n            case 'Object':\r\n                return Object(anySchema, anyReferences, value);\r\n            case 'Promise':\r\n                return Promise(anySchema, anyReferences, value);\r\n            case 'Record':\r\n                return Record(anySchema, anyReferences, value);\r\n            case 'Rec':\r\n                return Recursive(anySchema, anyReferences, value);\r\n            case 'Ref':\r\n                return Ref(anySchema, anyReferences, value);\r\n            case 'Self':\r\n                return Self(anySchema, anyReferences, value);\r\n            case 'String':\r\n                return String(anySchema, anyReferences, value);\r\n            case 'Tuple':\r\n                return Tuple(anySchema, anyReferences, value);\r\n            case 'Undefined':\r\n                return Undefined(anySchema, anyReferences, value);\r\n            case 'Union':\r\n                return Union(anySchema, anyReferences, value);\r\n            case 'Uint8Array':\r\n                return Uint8Array(anySchema, anyReferences, value);\r\n            case 'Unknown':\r\n                return Unknown(anySchema, anyReferences, value);\r\n            case 'Void':\r\n                return Void(anySchema, anyReferences, value);\r\n            default:\r\n                throw new ValueCastUnknownTypeError(anySchema);\r\n        }\r\n    }\r\n    ValueCast.Visit = Visit;\r\n    function Cast(schema, references, value) {\r\n        return schema.$id === undefined ? Visit(schema, references, value) : Visit(schema, [schema, ...references], value);\r\n    }\r\n    ValueCast.Cast = Cast;\r\n})(ValueCast = exports.ValueCast || (exports.ValueCast = {}));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}