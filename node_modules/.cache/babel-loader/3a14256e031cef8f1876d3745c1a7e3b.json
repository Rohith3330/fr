{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of unnecessary semicolons\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst FixTracker = require(\"./utils/fix-tracker\");\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow unnecessary semicolons\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-extra-semi\"\n    },\n    fixable: \"code\",\n    schema: [],\n    messages: {\n      unexpected: \"Unnecessary semicolon.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\n     * Reports an unnecessary semicolon error.\n     * @param {Node|Token} nodeOrToken A node or a token to be reported.\n     * @returns {void}\n     */\n\n    function report(nodeOrToken) {\n      context.report({\n        node: nodeOrToken,\n        messageId: \"unexpected\",\n\n        fix(fixer) {\n          /*\n           * Expand the replacement range to include the surrounding\n           * tokens to avoid conflicting with semi.\n           * https://github.com/eslint/eslint/issues/7928\n           */\n          return new FixTracker(fixer, context.getSourceCode()).retainSurroundingTokens(nodeOrToken).remove(nodeOrToken);\n        }\n\n      });\n    }\n    /**\n     * Checks for a part of a class body.\n     * This checks tokens from a specified token to a next MethodDefinition or the end of class body.\n     * @param {Token} firstToken The first token to check.\n     * @returns {void}\n     */\n\n\n    function checkForPartOfClassBody(firstToken) {\n      for (let token = firstToken; token.type === \"Punctuator\" && !astUtils.isClosingBraceToken(token); token = sourceCode.getTokenAfter(token)) {\n        if (astUtils.isSemicolonToken(token)) {\n          report(token);\n        }\n      }\n    }\n\n    return {\n      /**\n       * Reports this empty statement, except if the parent node is a loop.\n       * @param {Node} node A EmptyStatement node to be reported.\n       * @returns {void}\n       */\n      EmptyStatement(node) {\n        const parent = node.parent,\n              allowedParentTypes = [\"ForStatement\", \"ForInStatement\", \"ForOfStatement\", \"WhileStatement\", \"DoWhileStatement\", \"IfStatement\", \"LabeledStatement\", \"WithStatement\"];\n\n        if (!allowedParentTypes.includes(parent.type)) {\n          report(node);\n        }\n      },\n\n      /**\n       * Checks tokens from the head of this class body to the first MethodDefinition or the end of this class body.\n       * @param {Node} node A ClassBody node to check.\n       * @returns {void}\n       */\n      ClassBody(node) {\n        checkForPartOfClassBody(sourceCode.getFirstToken(node, 1)); // 0 is `{`.\n      },\n\n      /**\n       * Checks tokens from this MethodDefinition to the next MethodDefinition or the end of this class body.\n       * @param {Node} node A MethodDefinition node of the start point.\n       * @returns {void}\n       */\n      \"MethodDefinition, PropertyDefinition, StaticBlock\"(node) {\n        checkForPartOfClassBody(sourceCode.getTokenAfter(node));\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["FixTracker","require","astUtils","module","exports","meta","type","docs","description","recommended","url","fixable","schema","messages","unexpected","create","context","sourceCode","getSourceCode","report","nodeOrToken","node","messageId","fix","fixer","retainSurroundingTokens","remove","checkForPartOfClassBody","firstToken","token","isClosingBraceToken","getTokenAfter","isSemicolonToken","EmptyStatement","parent","allowedParentTypes","includes","ClassBody","getFirstToken"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-extra-semi.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of unnecessary semicolons\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst FixTracker = require(\"./utils/fix-tracker\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow unnecessary semicolons\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-extra-semi\"\n        },\n\n        fixable: \"code\",\n        schema: [],\n\n        messages: {\n            unexpected: \"Unnecessary semicolon.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Reports an unnecessary semicolon error.\n         * @param {Node|Token} nodeOrToken A node or a token to be reported.\n         * @returns {void}\n         */\n        function report(nodeOrToken) {\n            context.report({\n                node: nodeOrToken,\n                messageId: \"unexpected\",\n                fix(fixer) {\n\n                    /*\n                     * Expand the replacement range to include the surrounding\n                     * tokens to avoid conflicting with semi.\n                     * https://github.com/eslint/eslint/issues/7928\n                     */\n                    return new FixTracker(fixer, context.getSourceCode())\n                        .retainSurroundingTokens(nodeOrToken)\n                        .remove(nodeOrToken);\n                }\n            });\n        }\n\n        /**\n         * Checks for a part of a class body.\n         * This checks tokens from a specified token to a next MethodDefinition or the end of class body.\n         * @param {Token} firstToken The first token to check.\n         * @returns {void}\n         */\n        function checkForPartOfClassBody(firstToken) {\n            for (let token = firstToken;\n                token.type === \"Punctuator\" && !astUtils.isClosingBraceToken(token);\n                token = sourceCode.getTokenAfter(token)\n            ) {\n                if (astUtils.isSemicolonToken(token)) {\n                    report(token);\n                }\n            }\n        }\n\n        return {\n\n            /**\n             * Reports this empty statement, except if the parent node is a loop.\n             * @param {Node} node A EmptyStatement node to be reported.\n             * @returns {void}\n             */\n            EmptyStatement(node) {\n                const parent = node.parent,\n                    allowedParentTypes = [\n                        \"ForStatement\",\n                        \"ForInStatement\",\n                        \"ForOfStatement\",\n                        \"WhileStatement\",\n                        \"DoWhileStatement\",\n                        \"IfStatement\",\n                        \"LabeledStatement\",\n                        \"WithStatement\"\n                    ];\n\n                if (!allowedParentTypes.includes(parent.type)) {\n                    report(node);\n                }\n            },\n\n            /**\n             * Checks tokens from the head of this class body to the first MethodDefinition or the end of this class body.\n             * @param {Node} node A ClassBody node to check.\n             * @returns {void}\n             */\n            ClassBody(node) {\n                checkForPartOfClassBody(sourceCode.getFirstToken(node, 1)); // 0 is `{`.\n            },\n\n            /**\n             * Checks tokens from this MethodDefinition to the next MethodDefinition or the end of this class body.\n             * @param {Node} node A MethodDefinition node of the start point.\n             * @returns {void}\n             */\n            \"MethodDefinition, PropertyDefinition, StaticBlock\"(node) {\n                checkForPartOfClassBody(sourceCode.getTokenAfter(node));\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,qBAAD,CAA1B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAE,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,iCADX;MAEFC,WAAW,EAAE,IAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,OAAO,EAAE,MATP;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IAEA;AACR;AACA;AACA;AACA;;IACQ,SAASC,MAAT,CAAgBC,WAAhB,EAA6B;MACzBJ,OAAO,CAACG,MAAR,CAAe;QACXE,IAAI,EAAED,WADK;QAEXE,SAAS,EAAE,YAFA;;QAGXC,GAAG,CAACC,KAAD,EAAQ;UAEP;AACpB;AACA;AACA;AACA;UACoB,OAAO,IAAIxB,UAAJ,CAAewB,KAAf,EAAsBR,OAAO,CAACE,aAAR,EAAtB,EACFO,uBADE,CACsBL,WADtB,EAEFM,MAFE,CAEKN,WAFL,CAAP;QAGH;;MAbU,CAAf;IAeH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAASO,uBAAT,CAAiCC,UAAjC,EAA6C;MACzC,KAAK,IAAIC,KAAK,GAAGD,UAAjB,EACIC,KAAK,CAACvB,IAAN,KAAe,YAAf,IAA+B,CAACJ,QAAQ,CAAC4B,mBAAT,CAA6BD,KAA7B,CADpC,EAEIA,KAAK,GAAGZ,UAAU,CAACc,aAAX,CAAyBF,KAAzB,CAFZ,EAGE;QACE,IAAI3B,QAAQ,CAAC8B,gBAAT,CAA0BH,KAA1B,CAAJ,EAAsC;UAClCV,MAAM,CAACU,KAAD,CAAN;QACH;MACJ;IACJ;;IAED,OAAO;MAEH;AACZ;AACA;AACA;AACA;MACYI,cAAc,CAACZ,IAAD,EAAO;QACjB,MAAMa,MAAM,GAAGb,IAAI,CAACa,MAApB;QAAA,MACIC,kBAAkB,GAAG,CACjB,cADiB,EAEjB,gBAFiB,EAGjB,gBAHiB,EAIjB,gBAJiB,EAKjB,kBALiB,EAMjB,aANiB,EAOjB,kBAPiB,EAQjB,eARiB,CADzB;;QAYA,IAAI,CAACA,kBAAkB,CAACC,QAAnB,CAA4BF,MAAM,CAAC5B,IAAnC,CAAL,EAA+C;UAC3Ca,MAAM,CAACE,IAAD,CAAN;QACH;MACJ,CAvBE;;MAyBH;AACZ;AACA;AACA;AACA;MACYgB,SAAS,CAAChB,IAAD,EAAO;QACZM,uBAAuB,CAACV,UAAU,CAACqB,aAAX,CAAyBjB,IAAzB,EAA+B,CAA/B,CAAD,CAAvB,CADY,CACgD;MAC/D,CAhCE;;MAkCH;AACZ;AACA;AACA;AACA;MACY,oDAAoDA,IAApD,EAA0D;QACtDM,uBAAuB,CAACV,UAAU,CAACc,aAAX,CAAyBV,IAAzB,CAAD,CAAvB;MACH;;IAzCE,CAAP;EA4CH;;AAzGY,CAAjB"},"metadata":{},"sourceType":"script"}