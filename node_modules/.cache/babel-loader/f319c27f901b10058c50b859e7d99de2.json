{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of an lexical declarations inside a case clause\n * @author Erik Arvidsson\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow lexical declarations in case clauses\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-case-declarations\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Unexpected lexical declaration in case block.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Checks whether or not a node is a lexical declaration.\n     * @param {ASTNode} node A direct child statement of a switch case.\n     * @returns {boolean} Whether or not the node is a lexical declaration.\n     */\n    function isLexicalDeclaration(node) {\n      switch (node.type) {\n        case \"FunctionDeclaration\":\n        case \"ClassDeclaration\":\n          return true;\n\n        case \"VariableDeclaration\":\n          return node.kind !== \"var\";\n\n        default:\n          return false;\n      }\n    }\n\n    return {\n      SwitchCase(node) {\n        for (let i = 0; i < node.consequent.length; i++) {\n          const statement = node.consequent[i];\n\n          if (isLexicalDeclaration(statement)) {\n            context.report({\n              node: statement,\n              messageId: \"unexpected\"\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpected","create","context","isLexicalDeclaration","node","kind","SwitchCase","i","consequent","length","statement","report","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-case-declarations.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of an lexical declarations inside a case clause\n * @author Erik Arvidsson\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow lexical declarations in case clauses\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-case-declarations\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Unexpected lexical declaration in case block.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Checks whether or not a node is a lexical declaration.\n         * @param {ASTNode} node A direct child statement of a switch case.\n         * @returns {boolean} Whether or not the node is a lexical declaration.\n         */\n        function isLexicalDeclaration(node) {\n            switch (node.type) {\n                case \"FunctionDeclaration\":\n                case \"ClassDeclaration\":\n                    return true;\n                case \"VariableDeclaration\":\n                    return node.kind !== \"var\";\n                default:\n                    return false;\n            }\n        }\n\n        return {\n            SwitchCase(node) {\n                for (let i = 0; i < node.consequent.length; i++) {\n                    const statement = node.consequent[i];\n\n                    if (isLexicalDeclaration(statement)) {\n                        context.report({\n                            node: statement,\n                            messageId: \"unexpected\"\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,+CADX;MAEFC,WAAW,EAAE,IAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAWFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAXR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;MAChC,QAAQA,IAAI,CAACX,IAAb;QACI,KAAK,qBAAL;QACA,KAAK,kBAAL;UACI,OAAO,IAAP;;QACJ,KAAK,qBAAL;UACI,OAAOW,IAAI,CAACC,IAAL,KAAc,KAArB;;QACJ;UACI,OAAO,KAAP;MAPR;IASH;;IAED,OAAO;MACHC,UAAU,CAACF,IAAD,EAAO;QACb,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,UAAL,CAAgBC,MAApC,EAA4CF,CAAC,EAA7C,EAAiD;UAC7C,MAAMG,SAAS,GAAGN,IAAI,CAACI,UAAL,CAAgBD,CAAhB,CAAlB;;UAEA,IAAIJ,oBAAoB,CAACO,SAAD,CAAxB,EAAqC;YACjCR,OAAO,CAACS,MAAR,CAAe;cACXP,IAAI,EAAEM,SADK;cAEXE,SAAS,EAAE;YAFA,CAAf;UAIH;QACJ;MACJ;;IAZE,CAAP;EAeH;;AAnDY,CAAjB"},"metadata":{},"sourceType":"script"}