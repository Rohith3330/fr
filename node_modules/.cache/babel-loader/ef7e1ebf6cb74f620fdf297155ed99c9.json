{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.callRef = exports.getValidate = void 0;\n\nconst ref_error_1 = require(\"../../compile/ref_error\");\n\nconst code_1 = require(\"../code\");\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst names_1 = require(\"../../compile/names\");\n\nconst compile_1 = require(\"../../compile\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst def = {\n  keyword: \"$ref\",\n  schemaType: \"string\",\n\n  code(cxt) {\n    const {\n      gen,\n      schema: $ref,\n      it\n    } = cxt;\n    const {\n      baseId,\n      schemaEnv: env,\n      validateName,\n      opts,\n      self\n    } = it;\n    const {\n      root\n    } = env;\n    if (($ref === \"#\" || $ref === \"#/\") && baseId === root.baseId) return callRootRef();\n    const schOrEnv = compile_1.resolveRef.call(self, root, baseId, $ref);\n    if (schOrEnv === undefined) throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);\n    if (schOrEnv instanceof compile_1.SchemaEnv) return callValidate(schOrEnv);\n    return inlineRefSchema(schOrEnv);\n\n    function callRootRef() {\n      if (env === root) return callRef(cxt, validateName, env, env.$async);\n      const rootName = gen.scopeValue(\"root\", {\n        ref: root\n      });\n      return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root, root.$async);\n    }\n\n    function callValidate(sch) {\n      const v = getValidate(cxt, sch);\n      callRef(cxt, v, sch, sch.$async);\n    }\n\n    function inlineRefSchema(sch) {\n      const schName = gen.scopeValue(\"schema\", opts.code.source === true ? {\n        ref: sch,\n        code: (0, codegen_1.stringify)(sch)\n      } : {\n        ref: sch\n      });\n      const valid = gen.name(\"valid\");\n      const schCxt = cxt.subschema({\n        schema: sch,\n        dataTypes: [],\n        schemaPath: codegen_1.nil,\n        topSchemaRef: schName,\n        errSchemaPath: $ref\n      }, valid);\n      cxt.mergeEvaluated(schCxt);\n      cxt.ok(valid);\n    }\n  }\n\n};\n\nfunction getValidate(cxt, sch) {\n  const {\n    gen\n  } = cxt;\n  return sch.validate ? gen.scopeValue(\"validate\", {\n    ref: sch.validate\n  }) : (0, codegen_1._)`${gen.scopeValue(\"wrapper\", {\n    ref: sch\n  })}.validate`;\n}\n\nexports.getValidate = getValidate;\n\nfunction callRef(cxt, v, sch, $async) {\n  const {\n    gen,\n    it\n  } = cxt;\n  const {\n    allErrors,\n    schemaEnv: env,\n    opts\n  } = it;\n  const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;\n  if ($async) callAsyncRef();else callSyncRef();\n\n  function callAsyncRef() {\n    if (!env.$async) throw new Error(\"async schema referenced by sync schema\");\n    const valid = gen.let(\"valid\");\n    gen.try(() => {\n      gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);\n      addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result\n\n      if (!allErrors) gen.assign(valid, true);\n    }, e => {\n      gen.if((0, codegen_1._)`!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));\n      addErrorsFrom(e);\n      if (!allErrors) gen.assign(valid, false);\n    });\n    cxt.ok(valid);\n  }\n\n  function callSyncRef() {\n    cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));\n  }\n\n  function addErrorsFrom(source) {\n    const errs = (0, codegen_1._)`${source}.errors`;\n    gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`); // TODO tagged\n\n    gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);\n  }\n\n  function addEvaluatedFrom(source) {\n    var _a;\n\n    if (!it.opts.unevaluated) return;\n    const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated; // TODO refactor\n\n    if (it.props !== true) {\n      if (schEvaluated && !schEvaluated.dynamicProps) {\n        if (schEvaluated.props !== undefined) {\n          it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);\n        }\n      } else {\n        const props = gen.var(\"props\", (0, codegen_1._)`${source}.evaluated.props`);\n        it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);\n      }\n    }\n\n    if (it.items !== true) {\n      if (schEvaluated && !schEvaluated.dynamicItems) {\n        if (schEvaluated.items !== undefined) {\n          it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);\n        }\n      } else {\n        const items = gen.var(\"items\", (0, codegen_1._)`${source}.evaluated.items`);\n        it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);\n      }\n    }\n  }\n}\n\nexports.callRef = callRef;\nexports.default = def;","map":{"version":3,"mappings":"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","names":["def","keyword","schemaType","code","cxt","gen","schema","$ref","it","baseId","schemaEnv","env","validateName","opts","self","root","callRootRef","schOrEnv","compile_1","call","undefined","ref_error_1","uriResolver","callValidate","inlineRefSchema","callRef","$async","rootName","scopeValue","ref","sch","v","getValidate","schName","source","valid","name","schCxt","subschema","dataTypes","schemaPath","codegen_1","topSchemaRef","errSchemaPath","mergeEvaluated","ok","validate","exports","allErrors","passCxt","passContext","names_1","this","callAsyncRef","callSyncRef","Error","let","try","addEvaluatedFrom","assign","e","if","ValidationError","throw","addErrorsFrom","result","errs","vErrors","errors","unevaluated","schEvaluated","_a","evaluated","props","dynamicProps","util_1","var","items","dynamicItems"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-webpack-plugin\\node_modules\\ajv\\lib\\vocabularies\\core\\ref.ts"],"sourcesContent":["import type {CodeKeywordDefinition, AnySchema} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport MissingRefError from \"../../compile/ref_error\"\nimport {callValidateCode} from \"../code\"\nimport {_, nil, stringify, Code, Name} from \"../../compile/codegen\"\nimport N from \"../../compile/names\"\nimport {SchemaEnv, resolveRef} from \"../../compile\"\nimport {mergeEvaluated} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"$ref\",\n  schemaType: \"string\",\n  code(cxt: KeywordCxt): void {\n    const {gen, schema: $ref, it} = cxt\n    const {baseId, schemaEnv: env, validateName, opts, self} = it\n    const {root} = env\n    if (($ref === \"#\" || $ref === \"#/\") && baseId === root.baseId) return callRootRef()\n    const schOrEnv = resolveRef.call(self, root, baseId, $ref)\n    if (schOrEnv === undefined) throw new MissingRefError(it.opts.uriResolver, baseId, $ref)\n    if (schOrEnv instanceof SchemaEnv) return callValidate(schOrEnv)\n    return inlineRefSchema(schOrEnv)\n\n    function callRootRef(): void {\n      if (env === root) return callRef(cxt, validateName, env, env.$async)\n      const rootName = gen.scopeValue(\"root\", {ref: root})\n      return callRef(cxt, _`${rootName}.validate`, root, root.$async)\n    }\n\n    function callValidate(sch: SchemaEnv): void {\n      const v = getValidate(cxt, sch)\n      callRef(cxt, v, sch, sch.$async)\n    }\n\n    function inlineRefSchema(sch: AnySchema): void {\n      const schName = gen.scopeValue(\n        \"schema\",\n        opts.code.source === true ? {ref: sch, code: stringify(sch)} : {ref: sch}\n      )\n      const valid = gen.name(\"valid\")\n      const schCxt = cxt.subschema(\n        {\n          schema: sch,\n          dataTypes: [],\n          schemaPath: nil,\n          topSchemaRef: schName,\n          errSchemaPath: $ref,\n        },\n        valid\n      )\n      cxt.mergeEvaluated(schCxt)\n      cxt.ok(valid)\n    }\n  },\n}\n\nexport function getValidate(cxt: KeywordCxt, sch: SchemaEnv): Code {\n  const {gen} = cxt\n  return sch.validate\n    ? gen.scopeValue(\"validate\", {ref: sch.validate})\n    : _`${gen.scopeValue(\"wrapper\", {ref: sch})}.validate`\n}\n\nexport function callRef(cxt: KeywordCxt, v: Code, sch?: SchemaEnv, $async?: boolean): void {\n  const {gen, it} = cxt\n  const {allErrors, schemaEnv: env, opts} = it\n  const passCxt = opts.passContext ? N.this : nil\n  if ($async) callAsyncRef()\n  else callSyncRef()\n\n  function callAsyncRef(): void {\n    if (!env.$async) throw new Error(\"async schema referenced by sync schema\")\n    const valid = gen.let(\"valid\")\n    gen.try(\n      () => {\n        gen.code(_`await ${callValidateCode(cxt, v, passCxt)}`)\n        addEvaluatedFrom(v) // TODO will not work with async, it has to be returned with the result\n        if (!allErrors) gen.assign(valid, true)\n      },\n      (e) => {\n        gen.if(_`!(${e} instanceof ${it.ValidationError as Name})`, () => gen.throw(e))\n        addErrorsFrom(e)\n        if (!allErrors) gen.assign(valid, false)\n      }\n    )\n    cxt.ok(valid)\n  }\n\n  function callSyncRef(): void {\n    cxt.result(\n      callValidateCode(cxt, v, passCxt),\n      () => addEvaluatedFrom(v),\n      () => addErrorsFrom(v)\n    )\n  }\n\n  function addErrorsFrom(source: Code): void {\n    const errs = _`${source}.errors`\n    gen.assign(N.vErrors, _`${N.vErrors} === null ? ${errs} : ${N.vErrors}.concat(${errs})`) // TODO tagged\n    gen.assign(N.errors, _`${N.vErrors}.length`)\n  }\n\n  function addEvaluatedFrom(source: Code): void {\n    if (!it.opts.unevaluated) return\n    const schEvaluated = sch?.validate?.evaluated\n    // TODO refactor\n    if (it.props !== true) {\n      if (schEvaluated && !schEvaluated.dynamicProps) {\n        if (schEvaluated.props !== undefined) {\n          it.props = mergeEvaluated.props(gen, schEvaluated.props, it.props)\n        }\n      } else {\n        const props = gen.var(\"props\", _`${source}.evaluated.props`)\n        it.props = mergeEvaluated.props(gen, props, it.props, Name)\n      }\n    }\n    if (it.items !== true) {\n      if (schEvaluated && !schEvaluated.dynamicItems) {\n        if (schEvaluated.items !== undefined) {\n          it.items = mergeEvaluated.items(gen, schEvaluated.items, it.items)\n        }\n      } else {\n        const items = gen.var(\"items\", _`${source}.evaluated.items`)\n        it.items = mergeEvaluated.items(gen, items, it.items, Name)\n      }\n    }\n  }\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}