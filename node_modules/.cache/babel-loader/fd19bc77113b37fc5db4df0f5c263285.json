{"ast":null,"code":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\"use strict\";\n\nimport { AST_Array, AST_Await, AST_Binary, AST_Block, AST_Call, AST_Case, AST_Catch, AST_Chain, AST_Class, AST_ClassStaticBlock, AST_Conditional, AST_Definitions, AST_Destructuring, AST_Do, AST_Exit, AST_Expansion, AST_Export, AST_For, AST_ForIn, AST_If, AST_Import, AST_LabeledStatement, AST_Lambda, AST_LoopControl, AST_NameMapping, AST_Node, AST_Number, AST_Object, AST_ObjectProperty, AST_PrefixedTemplateString, AST_PropAccess, AST_Sequence, AST_SimpleStatement, AST_Sub, AST_Switch, AST_TemplateString, AST_Try, AST_Unary, AST_VarDef, AST_While, AST_With, AST_Yield } from \"./ast.js\";\nimport { MAP, noop } from \"./utils/index.js\";\n\nfunction def_transform(node, descend) {\n  node.DEFMETHOD(\"transform\", function (tw, in_list) {\n    let transformed = undefined;\n    tw.push(this);\n    if (tw.before) transformed = tw.before(this, descend, in_list);\n\n    if (transformed === undefined) {\n      transformed = this;\n      descend(transformed, tw);\n\n      if (tw.after) {\n        const after_ret = tw.after(transformed, in_list);\n        if (after_ret !== undefined) transformed = after_ret;\n      }\n    }\n\n    tw.pop();\n    return transformed;\n  });\n}\n\nfunction do_list(list, tw) {\n  return MAP(list, function (node) {\n    return node.transform(tw, true);\n  });\n}\n\ndef_transform(AST_Node, noop);\ndef_transform(AST_LabeledStatement, function (self, tw) {\n  self.label = self.label.transform(tw);\n  self.body = self.body.transform(tw);\n});\ndef_transform(AST_SimpleStatement, function (self, tw) {\n  self.body = self.body.transform(tw);\n});\ndef_transform(AST_Block, function (self, tw) {\n  self.body = do_list(self.body, tw);\n});\ndef_transform(AST_Do, function (self, tw) {\n  self.body = self.body.transform(tw);\n  self.condition = self.condition.transform(tw);\n});\ndef_transform(AST_While, function (self, tw) {\n  self.condition = self.condition.transform(tw);\n  self.body = self.body.transform(tw);\n});\ndef_transform(AST_For, function (self, tw) {\n  if (self.init) self.init = self.init.transform(tw);\n  if (self.condition) self.condition = self.condition.transform(tw);\n  if (self.step) self.step = self.step.transform(tw);\n  self.body = self.body.transform(tw);\n});\ndef_transform(AST_ForIn, function (self, tw) {\n  self.init = self.init.transform(tw);\n  self.object = self.object.transform(tw);\n  self.body = self.body.transform(tw);\n});\ndef_transform(AST_With, function (self, tw) {\n  self.expression = self.expression.transform(tw);\n  self.body = self.body.transform(tw);\n});\ndef_transform(AST_Exit, function (self, tw) {\n  if (self.value) self.value = self.value.transform(tw);\n});\ndef_transform(AST_LoopControl, function (self, tw) {\n  if (self.label) self.label = self.label.transform(tw);\n});\ndef_transform(AST_If, function (self, tw) {\n  self.condition = self.condition.transform(tw);\n  self.body = self.body.transform(tw);\n  if (self.alternative) self.alternative = self.alternative.transform(tw);\n});\ndef_transform(AST_Switch, function (self, tw) {\n  self.expression = self.expression.transform(tw);\n  self.body = do_list(self.body, tw);\n});\ndef_transform(AST_Case, function (self, tw) {\n  self.expression = self.expression.transform(tw);\n  self.body = do_list(self.body, tw);\n});\ndef_transform(AST_Try, function (self, tw) {\n  self.body = do_list(self.body, tw);\n  if (self.bcatch) self.bcatch = self.bcatch.transform(tw);\n  if (self.bfinally) self.bfinally = self.bfinally.transform(tw);\n});\ndef_transform(AST_Catch, function (self, tw) {\n  if (self.argname) self.argname = self.argname.transform(tw);\n  self.body = do_list(self.body, tw);\n});\ndef_transform(AST_Definitions, function (self, tw) {\n  self.definitions = do_list(self.definitions, tw);\n});\ndef_transform(AST_VarDef, function (self, tw) {\n  self.name = self.name.transform(tw);\n  if (self.value) self.value = self.value.transform(tw);\n});\ndef_transform(AST_Destructuring, function (self, tw) {\n  self.names = do_list(self.names, tw);\n});\ndef_transform(AST_Lambda, function (self, tw) {\n  if (self.name) self.name = self.name.transform(tw);\n  self.argnames = do_list(self.argnames, tw);\n\n  if (self.body instanceof AST_Node) {\n    self.body = self.body.transform(tw);\n  } else {\n    self.body = do_list(self.body, tw);\n  }\n});\ndef_transform(AST_Call, function (self, tw) {\n  self.expression = self.expression.transform(tw);\n  self.args = do_list(self.args, tw);\n});\ndef_transform(AST_Sequence, function (self, tw) {\n  const result = do_list(self.expressions, tw);\n  self.expressions = result.length ? result : [new AST_Number({\n    value: 0\n  })];\n});\ndef_transform(AST_PropAccess, function (self, tw) {\n  self.expression = self.expression.transform(tw);\n});\ndef_transform(AST_Sub, function (self, tw) {\n  self.expression = self.expression.transform(tw);\n  self.property = self.property.transform(tw);\n});\ndef_transform(AST_Chain, function (self, tw) {\n  self.expression = self.expression.transform(tw);\n});\ndef_transform(AST_Yield, function (self, tw) {\n  if (self.expression) self.expression = self.expression.transform(tw);\n});\ndef_transform(AST_Await, function (self, tw) {\n  self.expression = self.expression.transform(tw);\n});\ndef_transform(AST_Unary, function (self, tw) {\n  self.expression = self.expression.transform(tw);\n});\ndef_transform(AST_Binary, function (self, tw) {\n  self.left = self.left.transform(tw);\n  self.right = self.right.transform(tw);\n});\ndef_transform(AST_Conditional, function (self, tw) {\n  self.condition = self.condition.transform(tw);\n  self.consequent = self.consequent.transform(tw);\n  self.alternative = self.alternative.transform(tw);\n});\ndef_transform(AST_Array, function (self, tw) {\n  self.elements = do_list(self.elements, tw);\n});\ndef_transform(AST_Object, function (self, tw) {\n  self.properties = do_list(self.properties, tw);\n});\ndef_transform(AST_ObjectProperty, function (self, tw) {\n  if (self.key instanceof AST_Node) {\n    self.key = self.key.transform(tw);\n  }\n\n  if (self.value) self.value = self.value.transform(tw);\n});\ndef_transform(AST_Class, function (self, tw) {\n  if (self.name) self.name = self.name.transform(tw);\n  if (self.extends) self.extends = self.extends.transform(tw);\n  self.properties = do_list(self.properties, tw);\n});\ndef_transform(AST_ClassStaticBlock, function (self, tw) {\n  self.body = do_list(self.body, tw);\n});\ndef_transform(AST_Expansion, function (self, tw) {\n  self.expression = self.expression.transform(tw);\n});\ndef_transform(AST_NameMapping, function (self, tw) {\n  self.foreign_name = self.foreign_name.transform(tw);\n  self.name = self.name.transform(tw);\n});\ndef_transform(AST_Import, function (self, tw) {\n  if (self.imported_name) self.imported_name = self.imported_name.transform(tw);\n  if (self.imported_names) do_list(self.imported_names, tw);\n  self.module_name = self.module_name.transform(tw);\n});\ndef_transform(AST_Export, function (self, tw) {\n  if (self.exported_definition) self.exported_definition = self.exported_definition.transform(tw);\n  if (self.exported_value) self.exported_value = self.exported_value.transform(tw);\n  if (self.exported_names) do_list(self.exported_names, tw);\n  if (self.module_name) self.module_name = self.module_name.transform(tw);\n});\ndef_transform(AST_TemplateString, function (self, tw) {\n  self.segments = do_list(self.segments, tw);\n});\ndef_transform(AST_PrefixedTemplateString, function (self, tw) {\n  self.prefix = self.prefix.transform(tw);\n  self.template_string = self.template_string.transform(tw);\n});","map":{"version":3,"names":["AST_Array","AST_Await","AST_Binary","AST_Block","AST_Call","AST_Case","AST_Catch","AST_Chain","AST_Class","AST_ClassStaticBlock","AST_Conditional","AST_Definitions","AST_Destructuring","AST_Do","AST_Exit","AST_Expansion","AST_Export","AST_For","AST_ForIn","AST_If","AST_Import","AST_LabeledStatement","AST_Lambda","AST_LoopControl","AST_NameMapping","AST_Node","AST_Number","AST_Object","AST_ObjectProperty","AST_PrefixedTemplateString","AST_PropAccess","AST_Sequence","AST_SimpleStatement","AST_Sub","AST_Switch","AST_TemplateString","AST_Try","AST_Unary","AST_VarDef","AST_While","AST_With","AST_Yield","MAP","noop","def_transform","node","descend","DEFMETHOD","tw","in_list","transformed","undefined","push","before","after","after_ret","pop","do_list","list","transform","self","label","body","condition","init","step","object","expression","value","alternative","bcatch","bfinally","argname","definitions","name","names","argnames","args","result","expressions","length","property","left","right","consequent","elements","properties","key","extends","foreign_name","imported_name","imported_names","module_name","exported_definition","exported_value","exported_names","segments","prefix","template_string"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/terser/lib/transform.js"],"sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    AST_Array,\n    AST_Await,\n    AST_Binary,\n    AST_Block,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Chain,\n    AST_Class,\n    AST_ClassStaticBlock,\n    AST_Conditional,\n    AST_Definitions,\n    AST_Destructuring,\n    AST_Do,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_For,\n    AST_ForIn,\n    AST_If,\n    AST_Import,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectProperty,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Sub,\n    AST_Switch,\n    AST_TemplateString,\n    AST_Try,\n    AST_Unary,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n} from \"./ast.js\";\nimport {\n    MAP,\n    noop,\n} from \"./utils/index.js\";\n\nfunction def_transform(node, descend) {\n    node.DEFMETHOD(\"transform\", function(tw, in_list) {\n        let transformed = undefined;\n        tw.push(this);\n        if (tw.before) transformed = tw.before(this, descend, in_list);\n        if (transformed === undefined) {\n            transformed = this;\n            descend(transformed, tw);\n            if (tw.after) {\n                const after_ret = tw.after(transformed, in_list);\n                if (after_ret !== undefined) transformed = after_ret;\n            }\n        }\n        tw.pop();\n        return transformed;\n    });\n}\n\nfunction do_list(list, tw) {\n    return MAP(list, function(node) {\n        return node.transform(tw, true);\n    });\n}\n\ndef_transform(AST_Node, noop);\n\ndef_transform(AST_LabeledStatement, function(self, tw) {\n    self.label = self.label.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_SimpleStatement, function(self, tw) {\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_Block, function(self, tw) {\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Do, function(self, tw) {\n    self.body = self.body.transform(tw);\n    self.condition = self.condition.transform(tw);\n});\n\ndef_transform(AST_While, function(self, tw) {\n    self.condition = self.condition.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_For, function(self, tw) {\n    if (self.init) self.init = self.init.transform(tw);\n    if (self.condition) self.condition = self.condition.transform(tw);\n    if (self.step) self.step = self.step.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_ForIn, function(self, tw) {\n    self.init = self.init.transform(tw);\n    self.object = self.object.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_With, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_Exit, function(self, tw) {\n    if (self.value) self.value = self.value.transform(tw);\n});\n\ndef_transform(AST_LoopControl, function(self, tw) {\n    if (self.label) self.label = self.label.transform(tw);\n});\n\ndef_transform(AST_If, function(self, tw) {\n    self.condition = self.condition.transform(tw);\n    self.body = self.body.transform(tw);\n    if (self.alternative) self.alternative = self.alternative.transform(tw);\n});\n\ndef_transform(AST_Switch, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Case, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Try, function(self, tw) {\n    self.body = do_list(self.body, tw);\n    if (self.bcatch) self.bcatch = self.bcatch.transform(tw);\n    if (self.bfinally) self.bfinally = self.bfinally.transform(tw);\n});\n\ndef_transform(AST_Catch, function(self, tw) {\n    if (self.argname) self.argname = self.argname.transform(tw);\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Definitions, function(self, tw) {\n    self.definitions = do_list(self.definitions, tw);\n});\n\ndef_transform(AST_VarDef, function(self, tw) {\n    self.name = self.name.transform(tw);\n    if (self.value) self.value = self.value.transform(tw);\n});\n\ndef_transform(AST_Destructuring, function(self, tw) {\n    self.names = do_list(self.names, tw);\n});\n\ndef_transform(AST_Lambda, function(self, tw) {\n    if (self.name) self.name = self.name.transform(tw);\n    self.argnames = do_list(self.argnames, tw);\n    if (self.body instanceof AST_Node) {\n        self.body = self.body.transform(tw);\n    } else {\n        self.body = do_list(self.body, tw);\n    }\n});\n\ndef_transform(AST_Call, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.args = do_list(self.args, tw);\n});\n\ndef_transform(AST_Sequence, function(self, tw) {\n    const result = do_list(self.expressions, tw);\n    self.expressions = result.length\n        ? result\n        : [new AST_Number({ value: 0 })];\n});\n\ndef_transform(AST_PropAccess, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Sub, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.property = self.property.transform(tw);\n});\n\ndef_transform(AST_Chain, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Yield, function(self, tw) {\n    if (self.expression) self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Await, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Unary, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Binary, function(self, tw) {\n    self.left = self.left.transform(tw);\n    self.right = self.right.transform(tw);\n});\n\ndef_transform(AST_Conditional, function(self, tw) {\n    self.condition = self.condition.transform(tw);\n    self.consequent = self.consequent.transform(tw);\n    self.alternative = self.alternative.transform(tw);\n});\n\ndef_transform(AST_Array, function(self, tw) {\n    self.elements = do_list(self.elements, tw);\n});\n\ndef_transform(AST_Object, function(self, tw) {\n    self.properties = do_list(self.properties, tw);\n});\n\ndef_transform(AST_ObjectProperty, function(self, tw) {\n    if (self.key instanceof AST_Node) {\n        self.key = self.key.transform(tw);\n    }\n    if (self.value) self.value = self.value.transform(tw);\n});\n\ndef_transform(AST_Class, function(self, tw) {\n    if (self.name) self.name = self.name.transform(tw);\n    if (self.extends) self.extends = self.extends.transform(tw);\n    self.properties = do_list(self.properties, tw);\n});\n\ndef_transform(AST_ClassStaticBlock, function(self, tw) {\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Expansion, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_NameMapping, function(self, tw) {\n    self.foreign_name = self.foreign_name.transform(tw);\n    self.name = self.name.transform(tw);\n});\n\ndef_transform(AST_Import, function(self, tw) {\n    if (self.imported_name) self.imported_name = self.imported_name.transform(tw);\n    if (self.imported_names) do_list(self.imported_names, tw);\n    self.module_name = self.module_name.transform(tw);\n});\n\ndef_transform(AST_Export, function(self, tw) {\n    if (self.exported_definition) self.exported_definition = self.exported_definition.transform(tw);\n    if (self.exported_value) self.exported_value = self.exported_value.transform(tw);\n    if (self.exported_names) do_list(self.exported_names, tw);\n    if (self.module_name) self.module_name = self.module_name.transform(tw);\n});\n\ndef_transform(AST_TemplateString, function(self, tw) {\n    self.segments = do_list(self.segments, tw);\n});\n\ndef_transform(AST_PrefixedTemplateString, function(self, tw) {\n    self.prefix = self.prefix.transform(tw);\n    self.template_string = self.template_string.transform(tw);\n});\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}