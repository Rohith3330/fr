{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: () => cloneNodes\n});\n\nfunction cloneNodes(nodes) {\n  let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let raws = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  return nodes.map(node => {\n    var ref;\n    let cloned = node.clone(); // We always want override the source map\n    // except when explicitly told not to\n\n    let shouldOverwriteSource = ((ref = node.raws.tailwind) === null || ref === void 0 ? void 0 : ref.preserveSource) !== true || !cloned.source;\n\n    if (source !== undefined && shouldOverwriteSource) {\n      cloned.source = source;\n\n      if (\"walk\" in cloned) {\n        cloned.walk(child => {\n          child.source = source;\n        });\n      }\n    }\n\n    if (raws !== undefined) {\n      cloned.raws.tailwind = { ...cloned.raws.tailwind,\n        ...raws\n      };\n    }\n\n    return cloned;\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","cloneNodes","nodes","source","undefined","raws","map","node","ref","cloned","clone","shouldOverwriteSource","tailwind","preserveSource","walk","child"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/lib/util/cloneNodes.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: ()=>cloneNodes\n});\nfunction cloneNodes(nodes, source = undefined, raws = undefined) {\n    return nodes.map((node)=>{\n        var ref;\n        let cloned = node.clone();\n        // We always want override the source map\n        // except when explicitly told not to\n        let shouldOverwriteSource = ((ref = node.raws.tailwind) === null || ref === void 0 ? void 0 : ref.preserveSource) !== true || !cloned.source;\n        if (source !== undefined && shouldOverwriteSource) {\n            cloned.source = source;\n            if (\"walk\" in cloned) {\n                cloned.walk((child)=>{\n                    child.source = source;\n                });\n            }\n        }\n        if (raws !== undefined) {\n            cloned.raws.tailwind = {\n                ...cloned.raws.tailwind,\n                ...raws\n            };\n        }\n        return cloned;\n    });\n}\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EACzCC,KAAK,EAAE;AADkC,CAA7C;AAGAH,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,SAA/B,EAA0C;EACtCE,UAAU,EAAE,IAD0B;EAEtCC,GAAG,EAAE,MAAIC;AAF6B,CAA1C;;AAIA,SAASA,UAAT,CAAoBC,KAApB,EAAiE;EAAA,IAAtCC,MAAsC,uEAA7BC,SAA6B;EAAA,IAAlBC,IAAkB,uEAAXD,SAAW;EAC7D,OAAOF,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAQ;IACrB,IAAIC,GAAJ;IACA,IAAIC,MAAM,GAAGF,IAAI,CAACG,KAAL,EAAb,CAFqB,CAGrB;IACA;;IACA,IAAIC,qBAAqB,GAAG,CAAC,CAACH,GAAG,GAAGD,IAAI,CAACF,IAAL,CAAUO,QAAjB,MAA+B,IAA/B,IAAuCJ,GAAG,KAAK,KAAK,CAApD,GAAwD,KAAK,CAA7D,GAAiEA,GAAG,CAACK,cAAtE,MAA0F,IAA1F,IAAkG,CAACJ,MAAM,CAACN,MAAtI;;IACA,IAAIA,MAAM,KAAKC,SAAX,IAAwBO,qBAA5B,EAAmD;MAC/CF,MAAM,CAACN,MAAP,GAAgBA,MAAhB;;MACA,IAAI,UAAUM,MAAd,EAAsB;QAClBA,MAAM,CAACK,IAAP,CAAaC,KAAD,IAAS;UACjBA,KAAK,CAACZ,MAAN,GAAeA,MAAf;QACH,CAFD;MAGH;IACJ;;IACD,IAAIE,IAAI,KAAKD,SAAb,EAAwB;MACpBK,MAAM,CAACJ,IAAP,CAAYO,QAAZ,GAAuB,EACnB,GAAGH,MAAM,CAACJ,IAAP,CAAYO,QADI;QAEnB,GAAGP;MAFgB,CAAvB;IAIH;;IACD,OAAOI,MAAP;EACH,CArBM,CAAP;AAsBH"},"metadata":{},"sourceType":"script"}