{"ast":null,"code":"module.exports = function specificity(simpleSelector) {\n  var A = 0;\n  var B = 0;\n  var C = 0;\n  simpleSelector.children.each(function walk(node) {\n    switch (node.type) {\n      case 'SelectorList':\n      case 'Selector':\n        node.children.each(walk);\n        break;\n\n      case 'IdSelector':\n        A++;\n        break;\n\n      case 'ClassSelector':\n      case 'AttributeSelector':\n        B++;\n        break;\n\n      case 'PseudoClassSelector':\n        switch (node.name.toLowerCase()) {\n          case 'not':\n            node.children.each(walk);\n            break;\n\n          case 'before':\n          case 'after':\n          case 'first-line':\n          case 'first-letter':\n            C++;\n            break;\n          // TODO: support for :nth-*(.. of <SelectorList>), :matches(), :has()\n\n          default:\n            B++;\n        }\n\n        break;\n\n      case 'PseudoElementSelector':\n        C++;\n        break;\n\n      case 'TypeSelector':\n        // ignore universal selector\n        if (node.name.charAt(node.name.length - 1) !== '*') {\n          C++;\n        }\n\n        break;\n    }\n  });\n  return [A, B, C];\n};","map":{"version":3,"names":["module","exports","specificity","simpleSelector","A","B","C","children","each","walk","node","type","name","toLowerCase","charAt","length"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/csso/lib/restructure/prepare/specificity.js"],"sourcesContent":["module.exports = function specificity(simpleSelector) {\n    var A = 0;\n    var B = 0;\n    var C = 0;\n\n    simpleSelector.children.each(function walk(node) {\n        switch (node.type) {\n            case 'SelectorList':\n            case 'Selector':\n                node.children.each(walk);\n                break;\n\n            case 'IdSelector':\n                A++;\n                break;\n\n            case 'ClassSelector':\n            case 'AttributeSelector':\n                B++;\n                break;\n\n            case 'PseudoClassSelector':\n                switch (node.name.toLowerCase()) {\n                    case 'not':\n                        node.children.each(walk);\n                        break;\n\n                    case 'before':\n                    case 'after':\n                    case 'first-line':\n                    case 'first-letter':\n                        C++;\n                        break;\n\n                    // TODO: support for :nth-*(.. of <SelectorList>), :matches(), :has()\n                    default:\n                        B++;\n                }\n                break;\n\n            case 'PseudoElementSelector':\n                C++;\n                break;\n\n            case 'TypeSelector':\n                // ignore universal selector\n                if (node.name.charAt(node.name.length - 1) !== '*') {\n                    C++;\n                }\n                break;\n\n        }\n    });\n\n    return [A, B, C];\n};\n"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,cAArB,EAAqC;EAClD,IAAIC,CAAC,GAAG,CAAR;EACA,IAAIC,CAAC,GAAG,CAAR;EACA,IAAIC,CAAC,GAAG,CAAR;EAEAH,cAAc,CAACI,QAAf,CAAwBC,IAAxB,CAA6B,SAASC,IAAT,CAAcC,IAAd,EAAoB;IAC7C,QAAQA,IAAI,CAACC,IAAb;MACI,KAAK,cAAL;MACA,KAAK,UAAL;QACID,IAAI,CAACH,QAAL,CAAcC,IAAd,CAAmBC,IAAnB;QACA;;MAEJ,KAAK,YAAL;QACIL,CAAC;QACD;;MAEJ,KAAK,eAAL;MACA,KAAK,mBAAL;QACIC,CAAC;QACD;;MAEJ,KAAK,qBAAL;QACI,QAAQK,IAAI,CAACE,IAAL,CAAUC,WAAV,EAAR;UACI,KAAK,KAAL;YACIH,IAAI,CAACH,QAAL,CAAcC,IAAd,CAAmBC,IAAnB;YACA;;UAEJ,KAAK,QAAL;UACA,KAAK,OAAL;UACA,KAAK,YAAL;UACA,KAAK,cAAL;YACIH,CAAC;YACD;UAEJ;;UACA;YACID,CAAC;QAdT;;QAgBA;;MAEJ,KAAK,uBAAL;QACIC,CAAC;QACD;;MAEJ,KAAK,cAAL;QACI;QACA,IAAII,IAAI,CAACE,IAAL,CAAUE,MAAV,CAAiBJ,IAAI,CAACE,IAAL,CAAUG,MAAV,GAAmB,CAApC,MAA2C,GAA/C,EAAoD;UAChDT,CAAC;QACJ;;QACD;IA3CR;EA8CH,CA/CD;EAiDA,OAAO,CAACF,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAP;AACH,CAvDD"},"metadata":{},"sourceType":"script"}