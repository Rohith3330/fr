{"ast":null,"code":"/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */\nimport KEYS from \"./visitor-keys.js\";\n/**\n * @typedef {{ readonly [type: string]: ReadonlyArray<string> }} VisitorKeys\n */\n// List to ignore keys.\n\nconst KEY_BLACKLIST = new Set([\"parent\", \"leadingComments\", \"trailingComments\"]);\n/**\n * Check whether a given key should be used or not.\n * @param {string} key The key to check.\n * @returns {boolean} `true` if the key should be used.\n */\n\nfunction filterKey(key) {\n  return !KEY_BLACKLIST.has(key) && key[0] !== \"_\";\n}\n/**\n * Get visitor keys of a given node.\n * @param {object} node The AST node to get keys.\n * @returns {readonly string[]} Visitor keys of the node.\n */\n\n\nexport function getKeys(node) {\n  return Object.keys(node).filter(filterKey);\n} // Disable valid-jsdoc rule because it reports syntax error on the type of @returns.\n// eslint-disable-next-line valid-jsdoc\n\n/**\n * Make the union set with `KEYS` and given keys.\n * @param {VisitorKeys} additionalKeys The additional keys.\n * @returns {VisitorKeys} The union set.\n */\n\nexport function unionWith(additionalKeys) {\n  const retv =\n  /** @type {{\n  [type: string]: ReadonlyArray<string>\n  }} */\n  Object.assign({}, KEYS);\n\n  for (const type of Object.keys(additionalKeys)) {\n    if (Object.prototype.hasOwnProperty.call(retv, type)) {\n      const keys = new Set(additionalKeys[type]);\n\n      for (const key of retv[type]) {\n        keys.add(key);\n      }\n\n      retv[type] = Object.freeze(Array.from(keys));\n    } else {\n      retv[type] = Object.freeze(Array.from(additionalKeys[type]));\n    }\n  }\n\n  return Object.freeze(retv);\n}\nexport { KEYS };","map":{"version":3,"names":["KEYS","KEY_BLACKLIST","Set","filterKey","key","has","getKeys","node","Object","keys","filter","unionWith","additionalKeys","retv","assign","type","prototype","hasOwnProperty","call","add","freeze","Array","from"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-visitor-keys/lib/index.js"],"sourcesContent":["/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */\nimport KEYS from \"./visitor-keys.js\";\n\n/**\n * @typedef {{ readonly [type: string]: ReadonlyArray<string> }} VisitorKeys\n */\n\n// List to ignore keys.\nconst KEY_BLACKLIST = new Set([\n    \"parent\",\n    \"leadingComments\",\n    \"trailingComments\"\n]);\n\n/**\n * Check whether a given key should be used or not.\n * @param {string} key The key to check.\n * @returns {boolean} `true` if the key should be used.\n */\nfunction filterKey(key) {\n    return !KEY_BLACKLIST.has(key) && key[0] !== \"_\";\n}\n\n/**\n * Get visitor keys of a given node.\n * @param {object} node The AST node to get keys.\n * @returns {readonly string[]} Visitor keys of the node.\n */\nexport function getKeys(node) {\n    return Object.keys(node).filter(filterKey);\n}\n\n// Disable valid-jsdoc rule because it reports syntax error on the type of @returns.\n// eslint-disable-next-line valid-jsdoc\n/**\n * Make the union set with `KEYS` and given keys.\n * @param {VisitorKeys} additionalKeys The additional keys.\n * @returns {VisitorKeys} The union set.\n */\nexport function unionWith(additionalKeys) {\n    const retv = /** @type {{\n        [type: string]: ReadonlyArray<string>\n    }} */ (Object.assign({}, KEYS));\n\n    for (const type of Object.keys(additionalKeys)) {\n        if (Object.prototype.hasOwnProperty.call(retv, type)) {\n            const keys = new Set(additionalKeys[type]);\n\n            for (const key of retv[type]) {\n                keys.add(key);\n            }\n\n            retv[type] = Object.freeze(Array.from(keys));\n        } else {\n            retv[type] = Object.freeze(Array.from(additionalKeys[type]));\n        }\n    }\n\n    return Object.freeze(retv);\n}\n\nexport { KEYS };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,IAAP,MAAiB,mBAAjB;AAEA;AACA;AACA;AAEA;;AACA,MAAMC,aAAa,GAAG,IAAIC,GAAJ,CAAQ,CAC1B,QAD0B,EAE1B,iBAF0B,EAG1B,kBAH0B,CAAR,CAAtB;AAMA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;EACpB,OAAO,CAACH,aAAa,CAACI,GAAd,CAAkBD,GAAlB,CAAD,IAA2BA,GAAG,CAAC,CAAD,CAAH,KAAW,GAA7C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASE,OAAT,CAAiBC,IAAjB,EAAuB;EAC1B,OAAOC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,MAAlB,CAAyBP,SAAzB,CAAP;AACH,C,CAED;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,SAAT,CAAmBC,cAAnB,EAAmC;EACtC,MAAMC,IAAI;EAAG;AACjB;AACA;EAAWL,MAAM,CAACM,MAAP,CAAc,EAAd,EAAkBd,IAAlB,CAFP;;EAIA,KAAK,MAAMe,IAAX,IAAmBP,MAAM,CAACC,IAAP,CAAYG,cAAZ,CAAnB,EAAgD;IAC5C,IAAIJ,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,IAArC,EAA2CE,IAA3C,CAAJ,EAAsD;MAClD,MAAMN,IAAI,GAAG,IAAIP,GAAJ,CAAQU,cAAc,CAACG,IAAD,CAAtB,CAAb;;MAEA,KAAK,MAAMX,GAAX,IAAkBS,IAAI,CAACE,IAAD,CAAtB,EAA8B;QAC1BN,IAAI,CAACU,GAAL,CAASf,GAAT;MACH;;MAEDS,IAAI,CAACE,IAAD,CAAJ,GAAaP,MAAM,CAACY,MAAP,CAAcC,KAAK,CAACC,IAAN,CAAWb,IAAX,CAAd,CAAb;IACH,CARD,MAQO;MACHI,IAAI,CAACE,IAAD,CAAJ,GAAaP,MAAM,CAACY,MAAP,CAAcC,KAAK,CAACC,IAAN,CAAWV,cAAc,CAACG,IAAD,CAAzB,CAAd,CAAb;IACH;EACJ;;EAED,OAAOP,MAAM,CAACY,MAAP,CAAcP,IAAd,CAAP;AACH;AAED,SAASb,IAAT"},"metadata":{},"sourceType":"module"}