{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformFromAst = void 0;\nexports.transformFromAstAsync = transformFromAstAsync;\nexports.transformFromAstSync = transformFromAstSync;\n\nfunction _gensync() {\n  var data = require(\"gensync\");\n\n  _gensync = function _gensync() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _config = require(\"./config\");\n\nvar _transformation = require(\"./transformation\");\n\nvar _rewriteStackTrace = require(\"./errors/rewrite-stack-trace\");\n\nvar transformFromAstRunner = _gensync()( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ast, code, opts) {\n  var config;\n  return _regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.delegateYield((0, _config.default)(opts), \"t0\", 1);\n\n        case 1:\n          config = _context.t0;\n\n          if (!(config === null)) {\n            _context.next = 4;\n            break;\n          }\n\n          return _context.abrupt(\"return\", null);\n\n        case 4:\n          if (ast) {\n            _context.next = 6;\n            break;\n          }\n\n          throw new Error(\"No AST given\");\n\n        case 6:\n          return _context.delegateYield((0, _transformation.run)(config, code, ast), \"t1\", 7);\n\n        case 7:\n          return _context.abrupt(\"return\", _context.t1);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\n\nvar transformFromAst = function transformFromAst(ast, code, optsOrCallback, maybeCallback) {\n  var opts;\n  var callback;\n\n  if (typeof optsOrCallback === \"function\") {\n    callback = optsOrCallback;\n    opts = undefined;\n  } else {\n    opts = optsOrCallback;\n    callback = maybeCallback;\n  }\n\n  if (callback === undefined) {\n    {\n      return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast, code, opts);\n    }\n  }\n\n  (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast, code, opts, callback);\n};\n\nexports.transformFromAst = transformFromAst;\n\nfunction transformFromAstSync() {\n  return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync).apply(void 0, arguments);\n}\n\nfunction transformFromAstAsync() {\n  return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async).apply(void 0, arguments);\n}\n\n0 && 0;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;EAAA;;EAAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;;AAEA;;AAGA;;AAgBA,IAAMC,sBAAsB,GAAGC,oDAAQ,iBACrCC,GADqC,EAErCC,IAFqC,EAGrCC,IAHqC;EAAA;EAAA;IAAA;MAAA;QAAA;UAKC,8BAAO,qBAAWA,IAAX,CAAP;;QALD;UAK/BC,MAL+B;;UAAA,MAMjCA,MAAM,KAAK,IANsB;YAAA;YAAA;UAAA;;UAAA,iCAMT,IANS;;QAAA;UAAA,IAQhCH,GARgC;YAAA;YAAA;UAAA;;UAAA,MAQrB,IAAII,KAAJ,CAAU,cAAV,CARqB;;QAAA;UAU9B,8BAAO,yBAAID,MAAJ,EAAYF,IAAZ,EAAkBD,GAAlB,CAAP;;QAV8B;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAARD,EAA/B;;AAaO,IAAMM,gBAAkC,GAAG,SAASA,gBAAT,CAChDL,GADgD,EAEhDC,IAFgD,EAGhDK,cAHgD,EAIhDC,aAJgD,EAKhD;EACA,IAAIL,IAAJ;EACA,IAAIM,QAAJ;;EACA,IAAI,OAAOF,cAAP,KAA0B,UAA9B,EAA0C;IACxCE,QAAQ,GAAGF,cAAXE;IACAN,IAAI,GAAGO,SAAPP;EAFF,OAGO;IACLA,IAAI,GAAGI,cAAPJ;IACAM,QAAQ,GAAGD,aAAXC;EACD;;EAED,IAAIA,QAAQ,KAAKC,SAAjB,EAA4B;IAKnB;MAIL,OAAO,6CAAqBX,sBAAsB,CAACY,IAA5C,EAAkDV,GAAlD,EAAuDC,IAAvD,EAA6DC,IAA7D,CAAP;IACD;EACF;;EAED,6CAAqBJ,sBAAsB,CAACa,OAA5C,EACEX,GADF,EAEEC,IAFF,EAGEC,IAHF,EAIEM,QAJF;AA7BK;;;;AAqCA,SAASI,oBAAT,GAEL;EACA,OAAO,6CAAqBd,sBAAsB,CAACY,IAA5C,0BAAP;AACD;;AAEM,SAASG,qBAAT,GAEL;EACA,OAAO,6CAAqBf,sBAAsB,CAACgB,KAA5C,0BAAP;AACD","names":["_gensync","transformFromAstRunner","gensync","ast","code","opts","config","Error","transformFromAst","optsOrCallback","maybeCallback","callback","undefined","sync","errback","transformFromAstSync","transformFromAstAsync","async"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\transform-ast.ts"],"sourcesContent":["import gensync, { type Handler } from \"gensync\";\n\nimport loadConfig from \"./config\";\nimport type { InputOptions, ResolvedConfig } from \"./config\";\nimport { run } from \"./transformation\";\nimport type * as t from \"@babel/types\";\n\nimport { beginHiddenCallStack } from \"./errors/rewrite-stack-trace\";\n\nimport type { FileResult, FileResultCallback } from \"./transformation\";\ntype AstRoot = t.File | t.Program;\n\ntype TransformFromAst = {\n  (ast: AstRoot, code: string, callback: FileResultCallback): void;\n  (\n    ast: AstRoot,\n    code: string,\n    opts: InputOptions | undefined | null,\n    callback: FileResultCallback,\n  ): void;\n  (ast: AstRoot, code: string, opts?: InputOptions | null): FileResult | null;\n};\n\nconst transformFromAstRunner = gensync(function* (\n  ast: AstRoot,\n  code: string,\n  opts: InputOptions | undefined | null,\n): Handler<FileResult | null> {\n  const config: ResolvedConfig | null = yield* loadConfig(opts);\n  if (config === null) return null;\n\n  if (!ast) throw new Error(\"No AST given\");\n\n  return yield* run(config, code, ast);\n});\n\nexport const transformFromAst: TransformFromAst = function transformFromAst(\n  ast,\n  code,\n  optsOrCallback?: InputOptions | null | undefined | FileResultCallback,\n  maybeCallback?: FileResultCallback,\n) {\n  let opts: InputOptions | undefined | null;\n  let callback: FileResultCallback | undefined;\n  if (typeof optsOrCallback === \"function\") {\n    callback = optsOrCallback;\n    opts = undefined;\n  } else {\n    opts = optsOrCallback;\n    callback = maybeCallback;\n  }\n\n  if (callback === undefined) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"Starting from Babel 8.0.0, the 'transformFromAst' function expects a callback. If you need to call it synchronously, please use 'transformFromAstSync'.\",\n      );\n    } else {\n      // console.warn(\n      //   \"Starting from Babel 8.0.0, the 'transformFromAst' function will expect a callback. If you need to call it synchronously, please use 'transformFromAstSync'.\",\n      // );\n      return beginHiddenCallStack(transformFromAstRunner.sync)(ast, code, opts);\n    }\n  }\n\n  beginHiddenCallStack(transformFromAstRunner.errback)(\n    ast,\n    code,\n    opts,\n    callback,\n  );\n};\n\nexport function transformFromAstSync(\n  ...args: Parameters<typeof transformFromAstRunner.sync>\n) {\n  return beginHiddenCallStack(transformFromAstRunner.sync)(...args);\n}\n\nexport function transformFromAstAsync(\n  ...args: Parameters<typeof transformFromAstRunner.async>\n) {\n  return beginHiddenCallStack(transformFromAstRunner.async)(...args);\n}\n"]},"metadata":{},"sourceType":"script"}