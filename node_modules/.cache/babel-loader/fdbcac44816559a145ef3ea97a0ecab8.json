{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProgramFromConfigFile = exports.useProvidedPrograms = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs = __importStar(require(\"fs\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst shared_1 = require(\"./shared\");\n\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:useProvidedProgram');\n\nfunction useProvidedPrograms(programInstances, extra) {\n  log('Retrieving ast for %s from provided program instance(s)', extra.filePath);\n  let astAndProgram;\n\n  for (const programInstance of programInstances) {\n    astAndProgram = (0, shared_1.getAstFromProgram)(programInstance, extra); // Stop at the first applicable program instance\n\n    if (astAndProgram) {\n      break;\n    }\n  }\n\n  if (!astAndProgram) {\n    const relativeFilePath = path.relative(extra.tsconfigRootDir || process.cwd(), extra.filePath);\n    const errorLines = ['\"parserOptions.programs\" has been provided for @typescript-eslint/parser.', `The file was not found in any of the provided program instance(s): ${relativeFilePath}`];\n    throw new Error(errorLines.join('\\n'));\n  }\n\n  astAndProgram.program.getTypeChecker(); // ensure parent pointers are set in source files\n\n  return astAndProgram;\n}\n\nexports.useProvidedPrograms = useProvidedPrograms;\n/**\n * Utility offered by parser to help consumers construct their own program instance.\n *\n * @param configFile the path to the tsconfig.json file, relative to `projectDirectory`\n * @param projectDirectory the project directory to use as the CWD, defaults to `process.cwd()`\n */\n\nfunction createProgramFromConfigFile(configFile, projectDirectory) {\n  if (ts.sys === undefined) {\n    throw new Error('`createProgramFromConfigFile` is only supported in a Node-like environment.');\n  }\n\n  const parsed = ts.getParsedCommandLineOfConfigFile(configFile, shared_1.CORE_COMPILER_OPTIONS, {\n    onUnRecoverableConfigFileDiagnostic: diag => {\n      throw new Error(formatDiagnostics([diag])); // ensures that `parsed` is defined.\n    },\n    fileExists: fs.existsSync,\n    getCurrentDirectory: () => projectDirectory && path.resolve(projectDirectory) || process.cwd(),\n    readDirectory: ts.sys.readDirectory,\n    readFile: file => fs.readFileSync(file, 'utf-8'),\n    useCaseSensitiveFileNames: ts.sys.useCaseSensitiveFileNames\n  });\n  const result = parsed; // parsed is not undefined, since we throw on failure.\n\n  if (result.errors.length) {\n    throw new Error(formatDiagnostics(result.errors));\n  }\n\n  const host = ts.createCompilerHost(result.options, true);\n  return ts.createProgram(result.fileNames, result.options, host);\n}\n\nexports.createProgramFromConfigFile = createProgramFromConfigFile;\n\nfunction formatDiagnostics(diagnostics) {\n  return ts.formatDiagnostics(diagnostics, {\n    getCanonicalFileName: f => f,\n    getCurrentDirectory: process.cwd,\n    getNewLine: () => '\\n'\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAIA;;AAEA,MAAMA,GAAG,GAAG,qBAAM,wDAAN,CAAZ;;AAEA,SAASC,mBAAT,CACEC,gBADF,EAEEC,KAFF,EAEc;EAEZH,GAAG,CACD,yDADC,EAEDG,KAAK,CAACC,QAFL,CAAH;EAKA,IAAIC,aAAJ;;EACA,KAAK,MAAMC,eAAX,IAA8BJ,gBAA9B,EAAgD;IAC9CG,aAAa,GAAG,gCAAkBC,eAAlB,EAAmCH,KAAnC,CAAhB,CAD8C,CAE9C;;IACA,IAAIE,aAAJ,EAAmB;MACjB;IACD;EACF;;EAED,IAAI,CAACA,aAAL,EAAoB;IAClB,MAAME,gBAAgB,GAAGC,IAAI,CAACC,QAAL,CACvBN,KAAK,CAACO,eAAN,IAAyBC,OAAO,CAACC,GAAR,EADF,EAEvBT,KAAK,CAACC,QAFiB,CAAzB;IAIA,MAAMS,UAAU,GAAG,CACjB,2EADiB,EAEjB,sEAAsEN,gBAAgB,EAFrE,CAAnB;IAKA,MAAM,IAAIO,KAAJ,CAAUD,UAAU,CAACE,IAAX,CAAgB,IAAhB,CAAV,CAAN;EACD;;EAEDV,aAAa,CAACW,OAAd,CAAsBC,cAAtB,GA7BY,CA6B4B;;EAExC,OAAOZ,aAAP;AACD;;AAiDQa;AA/CT;;;;;;;AAMA,SAASC,2BAAT,CACEC,UADF,EAEEC,gBAFF,EAE2B;EAEzB,IAAIC,EAAE,CAACC,GAAH,KAAWC,SAAf,EAA0B;IACxB,MAAM,IAAIV,KAAJ,CACJ,6EADI,CAAN;EAGD;;EAED,MAAMW,MAAM,GAAGH,EAAE,CAACI,gCAAH,CACbN,UADa,EAEbO,8BAFa,EAGb;IACEC,mCAAmC,EAAEC,IAAI,IAAG;MAC1C,MAAM,IAAIf,KAAJ,CAAUgB,iBAAiB,CAAC,CAACD,IAAD,CAAD,CAA3B,CAAN,CAD0C,CACE;IAC7C,CAHH;IAIEE,UAAU,EAAEC,EAAE,CAACC,UAJjB;IAKEC,mBAAmB,EAAE,MAClBb,gBAAgB,IAAIb,IAAI,CAAC2B,OAAL,CAAad,gBAAb,CAArB,IAAwDV,OAAO,CAACC,GAAR,EAN5D;IAOEwB,aAAa,EAAEd,EAAE,CAACC,GAAH,CAAOa,aAPxB;IAQEC,QAAQ,EAAEC,IAAI,IAAIN,EAAE,CAACO,YAAH,CAAgBD,IAAhB,EAAsB,OAAtB,CARpB;IASEE,yBAAyB,EAAElB,EAAE,CAACC,GAAH,CAAOiB;EATpC,CAHa,CAAf;EAeA,MAAMC,MAAM,GAAGhB,MAAf,CAvByB,CAuBD;;EACxB,IAAIgB,MAAM,CAACC,MAAP,CAAcC,MAAlB,EAA0B;IACxB,MAAM,IAAI7B,KAAJ,CAAUgB,iBAAiB,CAACW,MAAM,CAACC,MAAR,CAA3B,CAAN;EACD;;EACD,MAAME,IAAI,GAAGtB,EAAE,CAACuB,kBAAH,CAAsBJ,MAAM,CAACK,OAA7B,EAAsC,IAAtC,CAAb;EACA,OAAOxB,EAAE,CAACyB,aAAH,CAAiBN,MAAM,CAACO,SAAxB,EAAmCP,MAAM,CAACK,OAA1C,EAAmDF,IAAnD,CAAP;AACD;;AAU6B1B;;AAR9B,SAASY,iBAAT,CAA2BmB,WAA3B,EAAuD;EACrD,OAAO3B,EAAE,CAACQ,iBAAH,CAAqBmB,WAArB,EAAkC;IACvCC,oBAAoB,EAAEC,CAAC,IAAIA,CADY;IAEvCjB,mBAAmB,EAAEvB,OAAO,CAACC,GAFU;IAGvCwC,UAAU,EAAE,MAAM;EAHqB,CAAlC,CAAP;AAKD","names":["log","useProvidedPrograms","programInstances","extra","filePath","astAndProgram","programInstance","relativeFilePath","path","relative","tsconfigRootDir","process","cwd","errorLines","Error","join","program","getTypeChecker","exports","createProgramFromConfigFile","configFile","projectDirectory","ts","sys","undefined","parsed","getParsedCommandLineOfConfigFile","shared_1","onUnRecoverableConfigFileDiagnostic","diag","formatDiagnostics","fileExists","fs","existsSync","getCurrentDirectory","resolve","readDirectory","readFile","file","readFileSync","useCaseSensitiveFileNames","result","errors","length","host","createCompilerHost","options","createProgram","fileNames","diagnostics","getCanonicalFileName","f","getNewLine"],"sources":["../../src/create-program/useProvidedPrograms.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}