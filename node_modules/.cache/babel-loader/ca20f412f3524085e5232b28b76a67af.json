{"ast":null,"code":"// @ts-check\n\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n\n/** @typedef {import(\"webpack/lib/Compiler.js\")} WebpackCompiler */\n\n/** @typedef {import(\"webpack/lib/Chunk.js\")} WebpackChunk */\n'use strict';\n/**\n * @file\n * This file uses webpack to compile a template with a child compiler.\n *\n * [TEMPLATE] -> [JAVASCRIPT]\n *\n */\n\n'use strict';\n\nlet instanceId = 0;\n/**\n * The HtmlWebpackChildCompiler is a helper to allow reusing one childCompiler\n * for multiple HtmlWebpackPlugin instances to improve the compilation performance.\n */\n\nclass HtmlWebpackChildCompiler {\n  /**\n   *\n   * @param {string[]} templates\n   */\n  constructor(templates) {\n    /** Id for this ChildCompiler */\n    this.id = instanceId++;\n    /**\n     * @type {string[]} templateIds\n     * The template array will allow us to keep track which input generated which output\n     */\n\n    this.templates = templates;\n    /**\n     * @type {Promise<{[templatePath: string]: { content: string, hash: string, entry: WebpackChunk }}>}\n     */\n\n    this.compilationPromise; // eslint-disable-line\n\n    /**\n     * @type {number}\n     */\n\n    this.compilationStartedTimestamp; // eslint-disable-line\n\n    /**\n     * @type {number}\n     */\n\n    this.compilationEndedTimestamp; // eslint-disable-line\n\n    /**\n     * All file dependencies of the child compiler\n     * @type {{fileDependencies: string[], contextDependencies: string[], missingDependencies: string[]}}\n     */\n\n    this.fileDependencies = {\n      fileDependencies: [],\n      contextDependencies: [],\n      missingDependencies: []\n    };\n  }\n  /**\n   * Returns true if the childCompiler is currently compiling\n   * @returns {boolean}\n   */\n\n\n  isCompiling() {\n    return !this.didCompile() && this.compilationStartedTimestamp !== undefined;\n  }\n  /**\n   * Returns true if the childCompiler is done compiling\n   */\n\n\n  didCompile() {\n    return this.compilationEndedTimestamp !== undefined;\n  }\n  /**\n   * This function will start the template compilation\n   * once it is started no more templates can be added\n   *\n   * @param {import('webpack').Compilation} mainCompilation\n   * @returns {Promise<{[templatePath: string]: { content: string, hash: string, entry: WebpackChunk }}>}\n   */\n\n\n  compileTemplates(mainCompilation) {\n    const webpack = mainCompilation.compiler.webpack;\n    const Compilation = webpack.Compilation;\n    const NodeTemplatePlugin = webpack.node.NodeTemplatePlugin;\n    const NodeTargetPlugin = webpack.node.NodeTargetPlugin;\n    const LoaderTargetPlugin = webpack.LoaderTargetPlugin;\n    const EntryPlugin = webpack.EntryPlugin; // To prevent multiple compilations for the same template\n    // the compilation is cached in a promise.\n    // If it already exists return\n\n    if (this.compilationPromise) {\n      return this.compilationPromise;\n    }\n\n    const outputOptions = {\n      filename: '__child-[name]',\n      publicPath: '',\n      library: {\n        type: 'var',\n        name: 'HTML_WEBPACK_PLUGIN_RESULT'\n      },\n      scriptType:\n      /** @type {'text/javascript'} */\n      'text/javascript',\n      iife: true\n    };\n    const compilerName = 'HtmlWebpackCompiler'; // Create an additional child compiler which takes the template\n    // and turns it into an Node.JS html factory.\n    // This allows us to use loaders during the compilation\n\n    const childCompiler = mainCompilation.createChildCompiler(compilerName, outputOptions, [// Compile the template to nodejs javascript\n    new NodeTargetPlugin(), new NodeTemplatePlugin(), new LoaderTargetPlugin('node'), new webpack.library.EnableLibraryPlugin('var')]); // The file path context which webpack uses to resolve all relative files to\n\n    childCompiler.context = mainCompilation.compiler.context; // Generate output file names\n\n    const temporaryTemplateNames = this.templates.map((template, index) => `__child-HtmlWebpackPlugin_${index}-${this.id}`); // Add all templates\n\n    this.templates.forEach((template, index) => {\n      new EntryPlugin(childCompiler.context, 'data:text/javascript,__webpack_public_path__ = __webpack_base_uri__ = htmlWebpackPluginPublicPath;', `HtmlWebpackPlugin_${index}-${this.id}`).apply(childCompiler);\n      new EntryPlugin(childCompiler.context, template, `HtmlWebpackPlugin_${index}-${this.id}`).apply(childCompiler);\n    }); // The templates are compiled and executed by NodeJS - similar to server side rendering\n    // Unfortunately this causes issues as some loaders require an absolute URL to support ES Modules\n    // The following config enables relative URL support for the child compiler\n\n    childCompiler.options.module = { ...childCompiler.options.module\n    };\n    childCompiler.options.module.parser = { ...childCompiler.options.module.parser\n    };\n    childCompiler.options.module.parser.javascript = { ...childCompiler.options.module.parser.javascript,\n      url: 'relative'\n    };\n    this.compilationStartedTimestamp = new Date().getTime();\n    this.compilationPromise = new Promise((resolve, reject) => {\n      const extractedAssets = [];\n      childCompiler.hooks.thisCompilation.tap('HtmlWebpackPlugin', compilation => {\n        compilation.hooks.processAssets.tap({\n          name: 'HtmlWebpackPlugin',\n          stage: Compilation.PROCESS_ASSETS_STAGE_ADDITIONS\n        }, assets => {\n          temporaryTemplateNames.forEach(temporaryTemplateName => {\n            if (assets[temporaryTemplateName]) {\n              extractedAssets.push(assets[temporaryTemplateName]);\n              compilation.deleteAsset(temporaryTemplateName);\n            }\n          });\n        });\n      });\n      childCompiler.runAsChild((err, entries, childCompilation) => {\n        // Extract templates\n        const compiledTemplates = entries ? extractedAssets.map(asset => asset.source()) : []; // Extract file dependencies\n\n        if (entries && childCompilation) {\n          this.fileDependencies = {\n            fileDependencies: Array.from(childCompilation.fileDependencies),\n            contextDependencies: Array.from(childCompilation.contextDependencies),\n            missingDependencies: Array.from(childCompilation.missingDependencies)\n          };\n        } // Reject the promise if the childCompilation contains error\n\n\n        if (childCompilation && childCompilation.errors && childCompilation.errors.length) {\n          const errorDetails = childCompilation.errors.map(error => {\n            let message = error.message;\n\n            if (error.stack) {\n              message += '\\n' + error.stack;\n            }\n\n            return message;\n          }).join('\\n');\n          reject(new Error('Child compilation failed:\\n' + errorDetails));\n          return;\n        } // Reject if the error object contains errors\n\n\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        if (!childCompilation || !entries) {\n          reject(new Error('Empty child compilation'));\n          return;\n        }\n        /**\n         * @type {{[templatePath: string]: { content: string, hash: string, entry: WebpackChunk }}}\n         */\n\n\n        const result = {};\n        compiledTemplates.forEach((templateSource, entryIndex) => {\n          // The compiledTemplates are generated from the entries added in\n          // the addTemplate function.\n          // Therefore the array index of this.templates should be the as entryIndex.\n          result[this.templates[entryIndex]] = {\n            content: templateSource,\n            hash: childCompilation.hash || 'XXXX',\n            entry: entries[entryIndex]\n          };\n        });\n        this.compilationEndedTimestamp = new Date().getTime();\n        resolve(result);\n      });\n    });\n    return this.compilationPromise;\n  }\n\n}\n\nmodule.exports = {\n  HtmlWebpackChildCompiler\n};","map":{"version":3,"names":["instanceId","HtmlWebpackChildCompiler","constructor","templates","id","compilationPromise","compilationStartedTimestamp","compilationEndedTimestamp","fileDependencies","contextDependencies","missingDependencies","isCompiling","didCompile","undefined","compileTemplates","mainCompilation","webpack","compiler","Compilation","NodeTemplatePlugin","node","NodeTargetPlugin","LoaderTargetPlugin","EntryPlugin","outputOptions","filename","publicPath","library","type","name","scriptType","iife","compilerName","childCompiler","createChildCompiler","EnableLibraryPlugin","context","temporaryTemplateNames","map","template","index","forEach","apply","options","module","parser","javascript","url","Date","getTime","Promise","resolve","reject","extractedAssets","hooks","thisCompilation","tap","compilation","processAssets","stage","PROCESS_ASSETS_STAGE_ADDITIONS","assets","temporaryTemplateName","push","deleteAsset","runAsChild","err","entries","childCompilation","compiledTemplates","asset","source","Array","from","errors","length","errorDetails","error","message","stack","join","Error","result","templateSource","entryIndex","content","hash","entry","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/html-webpack-plugin/lib/child-compiler.js"],"sourcesContent":["// @ts-check\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n/** @typedef {import(\"webpack/lib/Compiler.js\")} WebpackCompiler */\n/** @typedef {import(\"webpack/lib/Chunk.js\")} WebpackChunk */\n'use strict';\n/**\n * @file\n * This file uses webpack to compile a template with a child compiler.\n *\n * [TEMPLATE] -> [JAVASCRIPT]\n *\n */\n'use strict';\n\nlet instanceId = 0;\n/**\n * The HtmlWebpackChildCompiler is a helper to allow reusing one childCompiler\n * for multiple HtmlWebpackPlugin instances to improve the compilation performance.\n */\nclass HtmlWebpackChildCompiler {\n  /**\n   *\n   * @param {string[]} templates\n   */\n  constructor (templates) {\n    /** Id for this ChildCompiler */\n    this.id = instanceId++;\n    /**\n     * @type {string[]} templateIds\n     * The template array will allow us to keep track which input generated which output\n     */\n    this.templates = templates;\n    /**\n     * @type {Promise<{[templatePath: string]: { content: string, hash: string, entry: WebpackChunk }}>}\n     */\n    this.compilationPromise; // eslint-disable-line\n    /**\n     * @type {number}\n     */\n    this.compilationStartedTimestamp; // eslint-disable-line\n    /**\n     * @type {number}\n     */\n    this.compilationEndedTimestamp; // eslint-disable-line\n    /**\n     * All file dependencies of the child compiler\n     * @type {{fileDependencies: string[], contextDependencies: string[], missingDependencies: string[]}}\n     */\n    this.fileDependencies = { fileDependencies: [], contextDependencies: [], missingDependencies: [] };\n  }\n\n  /**\n   * Returns true if the childCompiler is currently compiling\n   * @returns {boolean}\n   */\n  isCompiling () {\n    return !this.didCompile() && this.compilationStartedTimestamp !== undefined;\n  }\n\n  /**\n   * Returns true if the childCompiler is done compiling\n   */\n  didCompile () {\n    return this.compilationEndedTimestamp !== undefined;\n  }\n\n  /**\n   * This function will start the template compilation\n   * once it is started no more templates can be added\n   *\n   * @param {import('webpack').Compilation} mainCompilation\n   * @returns {Promise<{[templatePath: string]: { content: string, hash: string, entry: WebpackChunk }}>}\n   */\n  compileTemplates (mainCompilation) {\n    const webpack = mainCompilation.compiler.webpack;\n    const Compilation = webpack.Compilation;\n\n    const NodeTemplatePlugin = webpack.node.NodeTemplatePlugin;\n    const NodeTargetPlugin = webpack.node.NodeTargetPlugin;\n    const LoaderTargetPlugin = webpack.LoaderTargetPlugin;\n    const EntryPlugin = webpack.EntryPlugin;\n\n    // To prevent multiple compilations for the same template\n    // the compilation is cached in a promise.\n    // If it already exists return\n    if (this.compilationPromise) {\n      return this.compilationPromise;\n    }\n\n    const outputOptions = {\n      filename: '__child-[name]',\n      publicPath: '',\n      library: {\n        type: 'var',\n        name: 'HTML_WEBPACK_PLUGIN_RESULT'\n      },\n      scriptType: /** @type {'text/javascript'} */('text/javascript'),\n      iife: true\n    };\n    const compilerName = 'HtmlWebpackCompiler';\n    // Create an additional child compiler which takes the template\n    // and turns it into an Node.JS html factory.\n    // This allows us to use loaders during the compilation\n    const childCompiler = mainCompilation.createChildCompiler(compilerName, outputOptions, [\n      // Compile the template to nodejs javascript\n      new NodeTargetPlugin(),\n      new NodeTemplatePlugin(),\n      new LoaderTargetPlugin('node'),\n      new webpack.library.EnableLibraryPlugin('var')\n    ]);\n    // The file path context which webpack uses to resolve all relative files to\n    childCompiler.context = mainCompilation.compiler.context;\n\n    // Generate output file names\n    const temporaryTemplateNames = this.templates.map((template, index) => `__child-HtmlWebpackPlugin_${index}-${this.id}`);\n\n    // Add all templates\n    this.templates.forEach((template, index) => {\n      new EntryPlugin(childCompiler.context, 'data:text/javascript,__webpack_public_path__ = __webpack_base_uri__ = htmlWebpackPluginPublicPath;', `HtmlWebpackPlugin_${index}-${this.id}`).apply(childCompiler);\n      new EntryPlugin(childCompiler.context, template, `HtmlWebpackPlugin_${index}-${this.id}`).apply(childCompiler);\n    });\n\n    // The templates are compiled and executed by NodeJS - similar to server side rendering\n    // Unfortunately this causes issues as some loaders require an absolute URL to support ES Modules\n    // The following config enables relative URL support for the child compiler\n    childCompiler.options.module = { ...childCompiler.options.module };\n    childCompiler.options.module.parser = { ...childCompiler.options.module.parser };\n    childCompiler.options.module.parser.javascript = { ...childCompiler.options.module.parser.javascript,\n      url: 'relative' };\n\n    this.compilationStartedTimestamp = new Date().getTime();\n    this.compilationPromise = new Promise((resolve, reject) => {\n      const extractedAssets = [];\n      childCompiler.hooks.thisCompilation.tap('HtmlWebpackPlugin', (compilation) => {\n        compilation.hooks.processAssets.tap(\n          {\n            name: 'HtmlWebpackPlugin',\n            stage: Compilation.PROCESS_ASSETS_STAGE_ADDITIONS\n          },\n          (assets) => {\n            temporaryTemplateNames.forEach((temporaryTemplateName) => {\n              if (assets[temporaryTemplateName]) {\n                extractedAssets.push(assets[temporaryTemplateName]);\n                compilation.deleteAsset(temporaryTemplateName);\n              }\n            });\n          }\n        );\n      });\n\n      childCompiler.runAsChild((err, entries, childCompilation) => {\n        // Extract templates\n        const compiledTemplates = entries\n          ? extractedAssets.map((asset) => asset.source())\n          : [];\n        // Extract file dependencies\n        if (entries && childCompilation) {\n          this.fileDependencies = { fileDependencies: Array.from(childCompilation.fileDependencies), contextDependencies: Array.from(childCompilation.contextDependencies), missingDependencies: Array.from(childCompilation.missingDependencies) };\n        }\n        // Reject the promise if the childCompilation contains error\n        if (childCompilation && childCompilation.errors && childCompilation.errors.length) {\n          const errorDetails = childCompilation.errors.map(error => {\n            let message = error.message;\n            if (error.stack) {\n              message += '\\n' + error.stack;\n            }\n            return message;\n          }).join('\\n');\n          reject(new Error('Child compilation failed:\\n' + errorDetails));\n          return;\n        }\n        // Reject if the error object contains errors\n        if (err) {\n          reject(err);\n          return;\n        }\n        if (!childCompilation || !entries) {\n          reject(new Error('Empty child compilation'));\n          return;\n        }\n        /**\n         * @type {{[templatePath: string]: { content: string, hash: string, entry: WebpackChunk }}}\n         */\n        const result = {};\n        compiledTemplates.forEach((templateSource, entryIndex) => {\n          // The compiledTemplates are generated from the entries added in\n          // the addTemplate function.\n          // Therefore the array index of this.templates should be the as entryIndex.\n          result[this.templates[entryIndex]] = {\n            content: templateSource,\n            hash: childCompilation.hash || 'XXXX',\n            entry: entries[entryIndex]\n          };\n        });\n        this.compilationEndedTimestamp = new Date().getTime();\n        resolve(result);\n      });\n    });\n\n    return this.compilationPromise;\n  }\n}\n\nmodule.exports = {\n  HtmlWebpackChildCompiler\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}