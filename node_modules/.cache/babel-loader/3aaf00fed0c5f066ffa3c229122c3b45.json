{"ast":null,"code":"/**\n * @filedescription Validation Strategy\n */\n\"use strict\"; //-----------------------------------------------------------------------------\n// Class\n//-----------------------------------------------------------------------------\n\n/**\n * Container class for several different validation strategies.\n */\n\nclass ValidationStrategy {\n  /**\n   * Validates that a value is an array.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n  static array(value) {\n    if (!Array.isArray(value)) {\n      throw new TypeError(\"Expected an array.\");\n    }\n  }\n  /**\n   * Validates that a value is a boolean.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n\n\n  static boolean(value) {\n    if (typeof value !== \"boolean\") {\n      throw new TypeError(\"Expected a Boolean.\");\n    }\n  }\n  /**\n   * Validates that a value is a number.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n\n\n  static number(value) {\n    if (typeof value !== \"number\") {\n      throw new TypeError(\"Expected a number.\");\n    }\n  }\n  /**\n   * Validates that a value is a object.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n\n\n  static object(value) {\n    if (!value || typeof value !== \"object\") {\n      throw new TypeError(\"Expected an object.\");\n    }\n  }\n  /**\n   * Validates that a value is a object or null.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n\n\n  static \"object?\"(value) {\n    if (typeof value !== \"object\") {\n      throw new TypeError(\"Expected an object or null.\");\n    }\n  }\n  /**\n   * Validates that a value is a string.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n\n\n  static string(value) {\n    if (typeof value !== \"string\") {\n      throw new TypeError(\"Expected a string.\");\n    }\n  }\n  /**\n   * Validates that a value is a non-empty string.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n\n\n  static \"string!\"(value) {\n    if (typeof value !== \"string\" || value.length === 0) {\n      throw new TypeError(\"Expected a non-empty string.\");\n    }\n  }\n\n}\n\nexports.ValidationStrategy = ValidationStrategy;","map":{"version":3,"names":["ValidationStrategy","array","value","Array","isArray","TypeError","boolean","number","object","string","length","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@humanwhocodes/object-schema/src/validation-strategy.js"],"sourcesContent":["/**\n * @filedescription Validation Strategy\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Class\n//-----------------------------------------------------------------------------\n\n/**\n * Container class for several different validation strategies.\n */\nclass ValidationStrategy {\n\n    /**\n     * Validates that a value is an array.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static array(value) {\n        if (!Array.isArray(value)) {\n            throw new TypeError(\"Expected an array.\");\n        }\n    }\n\n    /**\n     * Validates that a value is a boolean.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static boolean(value) {\n        if (typeof value !== \"boolean\") {\n            throw new TypeError(\"Expected a Boolean.\");\n        }\n    }\n\n    /**\n     * Validates that a value is a number.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static number(value) {\n        if (typeof value !== \"number\") {\n            throw new TypeError(\"Expected a number.\");\n        }\n    }\n\n    /**\n     * Validates that a value is a object.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static object(value) {\n        if (!value || typeof value !== \"object\") {\n            throw new TypeError(\"Expected an object.\");\n        }\n    }\n\n    /**\n     * Validates that a value is a object or null.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static \"object?\"(value) {\n        if (typeof value !== \"object\") {\n            throw new TypeError(\"Expected an object or null.\");\n        }\n    }\n\n    /**\n     * Validates that a value is a string.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static string(value) {\n        if (typeof value !== \"string\") {\n            throw new TypeError(\"Expected a string.\");\n        }\n    }\n\n    /**\n     * Validates that a value is a non-empty string.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static \"string!\"(value) {\n        if (typeof value !== \"string\" || value.length === 0) {\n            throw new TypeError(\"Expected a non-empty string.\");\n        }\n    }\n\n}\n\nexports.ValidationStrategy = ValidationStrategy;\n"],"mappings":"AAAA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMA,kBAAN,CAAyB;EAErB;AACJ;AACA;AACA;AACA;AACA;EACgB,OAALC,KAAK,CAACC,KAAD,EAAQ;IAChB,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAL,EAA2B;MACvB,MAAM,IAAIG,SAAJ,CAAc,oBAAd,CAAN;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACkB,OAAPC,OAAO,CAACJ,KAAD,EAAQ;IAClB,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;MAC5B,MAAM,IAAIG,SAAJ,CAAc,qBAAd,CAAN;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACiB,OAANE,MAAM,CAACL,KAAD,EAAQ;IACjB,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC3B,MAAM,IAAIG,SAAJ,CAAc,oBAAd,CAAN;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACiB,OAANG,MAAM,CAACN,KAAD,EAAQ;IACjB,IAAI,CAACA,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;MACrC,MAAM,IAAIG,SAAJ,CAAc,qBAAd,CAAN;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACoB,OAAT,SAAS,CAACH,KAAD,EAAQ;IACpB,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC3B,MAAM,IAAIG,SAAJ,CAAc,6BAAd,CAAN;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACiB,OAANI,MAAM,CAACP,KAAD,EAAQ;IACjB,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC3B,MAAM,IAAIG,SAAJ,CAAc,oBAAd,CAAN;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACoB,OAAT,SAAS,CAACH,KAAD,EAAQ;IACpB,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACQ,MAAN,KAAiB,CAAlD,EAAqD;MACjD,MAAM,IAAIL,SAAJ,CAAc,8BAAd,CAAN;IACH;EACJ;;AApFoB;;AAwFzBM,OAAO,CAACX,kBAAR,GAA6BA,kBAA7B"},"metadata":{},"sourceType":"script"}