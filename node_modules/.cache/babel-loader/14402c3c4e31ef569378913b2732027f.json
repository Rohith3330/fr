{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTransparentExprWrapper = isTransparentExprWrapper;\nexports.skipTransparentExprWrapperNodes = skipTransparentExprWrapperNodes;\nexports.skipTransparentExprWrappers = skipTransparentExprWrappers;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isParenthesizedExpression,\n  isTSAsExpression,\n  isTSNonNullExpression,\n  isTSTypeAssertion,\n  isTypeCastExpression\n} = _t;\n\nfunction isTransparentExprWrapper(node) {\n  return isTSAsExpression(node) || isTSTypeAssertion(node) || isTSNonNullExpression(node) || isTypeCastExpression(node) || isParenthesizedExpression(node);\n}\n\nfunction skipTransparentExprWrappers(path) {\n  while (isTransparentExprWrapper(path.node)) {\n    path = path.get(\"expression\");\n  }\n\n  return path;\n}\n\nfunction skipTransparentExprWrapperNodes(node) {\n  while (isTransparentExprWrapper(node)) {\n    node = node.expression;\n  }\n\n  return node;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","isTransparentExprWrapper","skipTransparentExprWrapperNodes","skipTransparentExprWrappers","_t","require","isParenthesizedExpression","isTSAsExpression","isTSNonNullExpression","isTSTypeAssertion","isTypeCastExpression","node","path","get","expression"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTransparentExprWrapper = isTransparentExprWrapper;\nexports.skipTransparentExprWrapperNodes = skipTransparentExprWrapperNodes;\nexports.skipTransparentExprWrappers = skipTransparentExprWrappers;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isParenthesizedExpression,\n  isTSAsExpression,\n  isTSNonNullExpression,\n  isTSTypeAssertion,\n  isTypeCastExpression\n} = _t;\n\nfunction isTransparentExprWrapper(node) {\n  return isTSAsExpression(node) || isTSTypeAssertion(node) || isTSNonNullExpression(node) || isTypeCastExpression(node) || isParenthesizedExpression(node);\n}\n\nfunction skipTransparentExprWrappers(path) {\n  while (isTransparentExprWrapper(path.node)) {\n    path = path.get(\"expression\");\n  }\n\n  return path;\n}\n\nfunction skipTransparentExprWrapperNodes(node) {\n  while (isTransparentExprWrapper(node)) {\n    node = node.expression;\n  }\n\n  return node;\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;AACAF,OAAO,CAACG,+BAAR,GAA0CA,+BAA1C;AACAH,OAAO,CAACI,2BAAR,GAAsCA,2BAAtC;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,cAAD,CAAhB;;AAEA,MAAM;EACJC,yBADI;EAEJC,gBAFI;EAGJC,qBAHI;EAIJC,iBAJI;EAKJC;AALI,IAMFN,EANJ;;AAQA,SAASH,wBAAT,CAAkCU,IAAlC,EAAwC;EACtC,OAAOJ,gBAAgB,CAACI,IAAD,CAAhB,IAA0BF,iBAAiB,CAACE,IAAD,CAA3C,IAAqDH,qBAAqB,CAACG,IAAD,CAA1E,IAAoFD,oBAAoB,CAACC,IAAD,CAAxG,IAAkHL,yBAAyB,CAACK,IAAD,CAAlJ;AACD;;AAED,SAASR,2BAAT,CAAqCS,IAArC,EAA2C;EACzC,OAAOX,wBAAwB,CAACW,IAAI,CAACD,IAAN,CAA/B,EAA4C;IAC1CC,IAAI,GAAGA,IAAI,CAACC,GAAL,CAAS,YAAT,CAAP;EACD;;EAED,OAAOD,IAAP;AACD;;AAED,SAASV,+BAAT,CAAyCS,IAAzC,EAA+C;EAC7C,OAAOV,wBAAwB,CAACU,IAAD,CAA/B,EAAuC;IACrCA,IAAI,GAAGA,IAAI,CAACG,UAAZ;EACD;;EAED,OAAOH,IAAP;AACD"},"metadata":{},"sourceType":"script"}