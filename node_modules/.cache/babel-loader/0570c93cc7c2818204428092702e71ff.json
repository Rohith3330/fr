{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"@sinonjs/referee-sinon\").assert;\n\nvar typeOf = require(\"./type-of\");\n\ndescribe(\"typeOf\", function () {\n  it(\"returns boolean\", function () {\n    assert.equals(typeOf(false), \"boolean\");\n  });\n  it(\"returns string\", function () {\n    assert.equals(typeOf(\"Sinon.JS\"), \"string\");\n  });\n  it(\"returns number\", function () {\n    assert.equals(typeOf(123), \"number\");\n  });\n  it(\"returns object\", function () {\n    assert.equals(typeOf({}), \"object\");\n  });\n  it(\"returns function\", function () {\n    assert.equals(typeOf(function () {\n      return undefined;\n    }), \"function\");\n  });\n  it(\"returns undefined\", function () {\n    assert.equals(typeOf(undefined), \"undefined\");\n  });\n  it(\"returns null\", function () {\n    assert.equals(typeOf(null), \"null\");\n  });\n  it(\"returns array\", function () {\n    assert.equals(typeOf([]), \"array\");\n  });\n  it(\"returns regexp\", function () {\n    assert.equals(typeOf(/.*/), \"regexp\");\n  });\n  it(\"returns date\", function () {\n    assert.equals(typeOf(new Date()), \"date\");\n  });\n});","map":{"version":3,"names":["assert","require","typeOf","describe","it","equals","undefined","Date"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@sinonjs/commons/lib/type-of.test.js"],"sourcesContent":["\"use strict\";\n\nvar assert = require(\"@sinonjs/referee-sinon\").assert;\nvar typeOf = require(\"./type-of\");\n\ndescribe(\"typeOf\", function() {\n    it(\"returns boolean\", function() {\n        assert.equals(typeOf(false), \"boolean\");\n    });\n\n    it(\"returns string\", function() {\n        assert.equals(typeOf(\"Sinon.JS\"), \"string\");\n    });\n\n    it(\"returns number\", function() {\n        assert.equals(typeOf(123), \"number\");\n    });\n\n    it(\"returns object\", function() {\n        assert.equals(typeOf({}), \"object\");\n    });\n\n    it(\"returns function\", function() {\n        assert.equals(\n            typeOf(function() {\n                return undefined;\n            }),\n            \"function\"\n        );\n    });\n\n    it(\"returns undefined\", function() {\n        assert.equals(typeOf(undefined), \"undefined\");\n    });\n\n    it(\"returns null\", function() {\n        assert.equals(typeOf(null), \"null\");\n    });\n\n    it(\"returns array\", function() {\n        assert.equals(typeOf([]), \"array\");\n    });\n\n    it(\"returns regexp\", function() {\n        assert.equals(typeOf(/.*/), \"regexp\");\n    });\n\n    it(\"returns date\", function() {\n        assert.equals(typeOf(new Date()), \"date\");\n    });\n});\n"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,wBAAD,CAAP,CAAkCD,MAA/C;;AACA,IAAIE,MAAM,GAAGD,OAAO,CAAC,WAAD,CAApB;;AAEAE,QAAQ,CAAC,QAAD,EAAW,YAAW;EAC1BC,EAAE,CAAC,iBAAD,EAAoB,YAAW;IAC7BJ,MAAM,CAACK,MAAP,CAAcH,MAAM,CAAC,KAAD,CAApB,EAA6B,SAA7B;EACH,CAFC,CAAF;EAIAE,EAAE,CAAC,gBAAD,EAAmB,YAAW;IAC5BJ,MAAM,CAACK,MAAP,CAAcH,MAAM,CAAC,UAAD,CAApB,EAAkC,QAAlC;EACH,CAFC,CAAF;EAIAE,EAAE,CAAC,gBAAD,EAAmB,YAAW;IAC5BJ,MAAM,CAACK,MAAP,CAAcH,MAAM,CAAC,GAAD,CAApB,EAA2B,QAA3B;EACH,CAFC,CAAF;EAIAE,EAAE,CAAC,gBAAD,EAAmB,YAAW;IAC5BJ,MAAM,CAACK,MAAP,CAAcH,MAAM,CAAC,EAAD,CAApB,EAA0B,QAA1B;EACH,CAFC,CAAF;EAIAE,EAAE,CAAC,kBAAD,EAAqB,YAAW;IAC9BJ,MAAM,CAACK,MAAP,CACIH,MAAM,CAAC,YAAW;MACd,OAAOI,SAAP;IACH,CAFK,CADV,EAII,UAJJ;EAMH,CAPC,CAAF;EASAF,EAAE,CAAC,mBAAD,EAAsB,YAAW;IAC/BJ,MAAM,CAACK,MAAP,CAAcH,MAAM,CAACI,SAAD,CAApB,EAAiC,WAAjC;EACH,CAFC,CAAF;EAIAF,EAAE,CAAC,cAAD,EAAiB,YAAW;IAC1BJ,MAAM,CAACK,MAAP,CAAcH,MAAM,CAAC,IAAD,CAApB,EAA4B,MAA5B;EACH,CAFC,CAAF;EAIAE,EAAE,CAAC,eAAD,EAAkB,YAAW;IAC3BJ,MAAM,CAACK,MAAP,CAAcH,MAAM,CAAC,EAAD,CAApB,EAA0B,OAA1B;EACH,CAFC,CAAF;EAIAE,EAAE,CAAC,gBAAD,EAAmB,YAAW;IAC5BJ,MAAM,CAACK,MAAP,CAAcH,MAAM,CAAC,IAAD,CAApB,EAA4B,QAA5B;EACH,CAFC,CAAF;EAIAE,EAAE,CAAC,cAAD,EAAiB,YAAW;IAC1BJ,MAAM,CAACK,MAAP,CAAcH,MAAM,CAAC,IAAIK,IAAJ,EAAD,CAApB,EAAkC,MAAlC;EACH,CAFC,CAAF;AAGH,CA7CO,CAAR"},"metadata":{},"sourceType":"script"}