{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\n\nconst array_flatten_1 = __importDefault(require(\"array-flatten\"));\n\nconst es6_1 = __importDefault(require(\"fast-deep-equal/es6\"));\n\nconst multicast_dns_1 = __importDefault(require(\"multicast-dns\"));\n\nconst dns_equal_1 = __importDefault(require(\"dns-equal\"));\n\nclass Server {\n  constructor(opts, errorCallback) {\n    this.registry = {};\n    this.mdns = (0, multicast_dns_1.default)(opts);\n    this.mdns.setMaxListeners(0);\n    this.mdns.on('query', this.respondToQuery.bind(this));\n    this.errorCallback = errorCallback !== null && errorCallback !== void 0 ? errorCallback : function (err) {\n      throw err;\n    };\n  }\n\n  register(records) {\n    const shouldRegister = record => {\n      var subRegistry = this.registry[record.type];\n\n      if (!subRegistry) {\n        subRegistry = this.registry[record.type] = [];\n      } else if (subRegistry.some(this.isDuplicateRecord(record))) {\n        return;\n      }\n\n      subRegistry.push(record);\n    };\n\n    if (Array.isArray(records)) {\n      records.forEach(shouldRegister);\n    } else {\n      shouldRegister(records);\n    }\n  }\n\n  unregister(records) {\n    const shouldUnregister = record => {\n      let type = record.type;\n\n      if (!(type in this.registry)) {\n        return;\n      }\n\n      this.registry[type] = this.registry[type].filter(i => i.name !== record.name);\n    };\n\n    if (Array.isArray(records)) {\n      records.forEach(shouldUnregister);\n    } else {\n      shouldUnregister(records);\n    }\n  }\n\n  respondToQuery(query) {\n    let self = this;\n    query.questions.forEach(question => {\n      var type = question.type;\n      var name = question.name;\n      var answers = type === 'ANY' ? array_flatten_1.default.depth(Object.keys(self.registry).map(self.recordsFor.bind(self, name)), 1) : self.recordsFor(name, type);\n      if (answers.length === 0) return;\n      var additionals = [];\n\n      if (type !== 'ANY') {\n        answers.forEach(answer => {\n          if (answer.type !== 'PTR') return;\n          additionals = additionals.concat(self.recordsFor(answer.data, 'SRV')).concat(self.recordsFor(answer.data, 'TXT'));\n        });\n        additionals.filter(function (record) {\n          return record.type === 'SRV';\n        }).map(function (record) {\n          return record.data.target;\n        }).filter(this.unique()).forEach(function (target) {\n          additionals = additionals.concat(self.recordsFor(target, 'A')).concat(self.recordsFor(target, 'AAAA'));\n        });\n      }\n\n      self.mdns.respond({\n        answers: answers,\n        additionals: additionals\n      }, err => {\n        if (err) {\n          this.errorCallback(err);\n        }\n      });\n    });\n  }\n\n  recordsFor(name, type) {\n    if (!(type in this.registry)) {\n      return [];\n    }\n\n    return this.registry[type].filter(record => {\n      var _name = ~name.indexOf('.') ? record.name : record.name.split('.')[0];\n\n      return (0, dns_equal_1.default)(_name, name);\n    });\n  }\n\n  isDuplicateRecord(a) {\n    return b => {\n      return a.type === b.type && a.name === b.name && (0, es6_1.default)(a.data, b.data);\n    };\n  }\n\n  unique() {\n    var set = [];\n    return obj => {\n      if (~set.indexOf(obj)) return false;\n      set.push(obj);\n      return true;\n    };\n  }\n\n}\n\nexports.Server = Server;\nexports.default = Server;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AAEA,MAAaA,MAAb,CAAmB;EAMfC,YAAYC,IAAZ,EAAuBC,aAAvB,EAA2D;IAHnD,gBAAwB,EAAxB;IAIJ,KAAKC,IAAL,GAAY,6BAAaF,IAAb,CAAZ;IACA,KAAKE,IAAL,CAAUC,eAAV,CAA0B,CAA1B;IACA,KAAKD,IAAL,CAAUE,EAAV,CAAa,OAAb,EAAsB,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;IACA,KAAKL,aAAL,GAAqBA,aAAa,SAAb,iBAAa,WAAb,mBAAiB,UAASM,GAAT,EAAiB;MAAG,MAAMA,GAAN;IAAW,CAArE;EACH;;EAEMC,QAAQ,CAACC,OAAD,EAA8C;IAEzD,MAAMC,cAAc,GAAIC,MAAD,IAA0B;MAC7C,IAAIC,WAAW,GAAG,KAAKC,QAAL,CAAcF,MAAM,CAACG,IAArB,CAAlB;;MACA,IAAI,CAACF,WAAL,EAAkB;QACdA,WAAW,GAAG,KAAKC,QAAL,CAAcF,MAAM,CAACG,IAArB,IAA6B,EAA3C;MACH,CAFD,MAEO,IAAGF,WAAW,CAACG,IAAZ,CAAiB,KAAKC,iBAAL,CAAuBL,MAAvB,CAAjB,CAAH,EAAqD;QACxD;MACH;;MACDC,WAAW,CAACK,IAAZ,CAAiBN,MAAjB;IACH,CARD;;IAUA,IAAGO,KAAK,CAACC,OAAN,CAAcV,OAAd,CAAH,EAA2B;MAEvBA,OAAO,CAACW,OAAR,CAAgBV,cAAhB;IACH,CAHD,MAGO;MAEHA,cAAc,CAACD,OAAD,CAAd;IACH;EACJ;;EAEMY,UAAU,CAACZ,OAAD,EAA8C;IAE3D,MAAMa,gBAAgB,GAAIX,MAAD,IAA0B;MAC/C,IAAIG,IAAI,GAAGH,MAAM,CAACG,IAAlB;;MACA,IAAG,EAAEA,IAAI,IAAI,KAAKD,QAAf,CAAH,EAA6B;QACzB;MACH;;MACD,KAAKA,QAAL,CAAcC,IAAd,IAAsB,KAAKD,QAAL,CAAcC,IAAd,EAAoBS,MAApB,CAA4BC,CAAD,IAAsBA,CAAC,CAACC,IAAF,KAAWd,MAAM,CAACc,IAAnE,CAAtB;IACH,CAND;;IAQA,IAAGP,KAAK,CAACC,OAAN,CAAcV,OAAd,CAAH,EAA2B;MAEvBA,OAAO,CAACW,OAAR,CAAgBE,gBAAhB;IACH,CAHD,MAGO;MAEHA,gBAAgB,CAACb,OAAD,CAAhB;IACH;EACJ;;EAEOJ,cAAc,CAACqB,KAAD,EAAW;IAC7B,IAAIC,IAAI,GAAG,IAAX;IACAD,KAAK,CAACE,SAAN,CAAgBR,OAAhB,CAAyBS,QAAD,IAAkB;MACtC,IAAIf,IAAI,GAAGe,QAAQ,CAACf,IAApB;MACA,IAAIW,IAAI,GAAGI,QAAQ,CAACJ,IAApB;MAGA,IAAIK,OAAO,GAAGhB,IAAI,KAAK,KAAT,GACViB,wBAAQC,KAAR,CAAcC,MAAM,CAACC,IAAP,CAAYP,IAAI,CAACd,QAAjB,EAA2BsB,GAA3B,CAA+BR,IAAI,CAACS,UAAL,CAAgB9B,IAAhB,CAAqBqB,IAArB,EAA2BF,IAA3B,CAA/B,CAAd,EAAgF,CAAhF,CADU,GAEVE,IAAI,CAACS,UAAL,CAAgBX,IAAhB,EAAsBX,IAAtB,CAFJ;MAIA,IAAIgB,OAAO,CAACO,MAAR,KAAmB,CAAvB,EAA0B;MAG1B,IAAIC,WAAW,GAAe,EAA9B;;MACA,IAAIxB,IAAI,KAAK,KAAb,EAAoB;QAClBgB,OAAO,CAACV,OAAR,CAAiBmB,MAAD,IAAgB;UAC9B,IAAIA,MAAM,CAACzB,IAAP,KAAgB,KAApB,EAA2B;UAC3BwB,WAAW,GAAGA,WAAW,CACtBE,MADW,CACJb,IAAI,CAACS,UAAL,CAAgBG,MAAM,CAACE,IAAvB,EAA6B,KAA7B,CADI,EAEXD,MAFW,CAEJb,IAAI,CAACS,UAAL,CAAgBG,MAAM,CAACE,IAAvB,EAA6B,KAA7B,CAFI,CAAd;QAGD,CALD;QASAH,WAAW,CACRf,MADH,CACU,UAAUZ,MAAV,EAAgB;UACtB,OAAOA,MAAM,CAACG,IAAP,KAAgB,KAAvB;QACD,CAHH,EAIGqB,GAJH,CAIO,UAAUxB,MAAV,EAAgB;UACnB,OAAOA,MAAM,CAAC8B,IAAP,CAAYC,MAAnB;QACD,CANH,EAOGnB,MAPH,CAOU,KAAKoB,MAAL,EAPV,EAQGvB,OARH,CAQW,UAAUsB,MAAV,EAAgB;UACvBJ,WAAW,GAAGA,WAAW,CACtBE,MADW,CACJb,IAAI,CAACS,UAAL,CAAgBM,MAAhB,EAAwB,GAAxB,CADI,EAEXF,MAFW,CAEJb,IAAI,CAACS,UAAL,CAAgBM,MAAhB,EAAwB,MAAxB,CAFI,CAAd;QAGD,CAZH;MAaD;;MAEDf,IAAI,CAACzB,IAAL,CAAU0C,OAAV,CAAkB;QAAEd,OAAO,EAAEA,OAAX;QAAoBQ,WAAW,EAAEA;MAAjC,CAAlB,EAAmE/B,GAAD,IAAa;QAC7E,IAAIA,GAAJ,EAAS;UACL,KAAKN,aAAL,CAAmBM,GAAnB;QACH;MACF,CAJD;IAKH,CA3CD;EA4CH;;EAEO6B,UAAU,CAACX,IAAD,EAAeX,IAAf,EAA2B;IACzC,IAAI,EAAEA,IAAI,IAAI,KAAKD,QAAf,CAAJ,EAA8B;MAC1B,OAAO,EAAP;IACH;;IAED,OAAO,KAAKA,QAAL,CAAcC,IAAd,EAAoBS,MAApB,CAA4BZ,MAAD,IAA0B;MAC1D,IAAIkC,KAAK,GAAG,CAACpB,IAAI,CAACqB,OAAL,CAAa,GAAb,CAAD,GAAqBnC,MAAM,CAACc,IAA5B,GAAmCd,MAAM,CAACc,IAAP,CAAYsB,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAA/C;;MACA,OAAO,yBAASF,KAAT,EAAgBpB,IAAhB,CAAP;IACD,CAHM,CAAP;EAIH;;EAEOT,iBAAiB,CAAEgC,CAAF,EAAkB;IACvC,OAAQC,CAAD,IAAqB;MACxB,OAAOD,CAAC,CAAClC,IAAF,KAAWmC,CAAC,CAACnC,IAAb,IACHkC,CAAC,CAACvB,IAAF,KAAWwB,CAAC,CAACxB,IADV,IAEH,mBAAUuB,CAAC,CAACP,IAAZ,EAAkBQ,CAAC,CAACR,IAApB,CAFJ;IAGH,CAJD;EAKH;;EAEOE,MAAM;IACV,IAAIO,GAAG,GAAe,EAAtB;IACA,OAAQC,GAAD,IAAa;MAChB,IAAI,CAACD,GAAG,CAACJ,OAAJ,CAAYK,GAAZ,CAAL,EAAuB,OAAO,KAAP;MACvBD,GAAG,CAACjC,IAAJ,CAASkC,GAAT;MACA,OAAO,IAAP;IACH,CAJD;EAKH;;AA/Hc;;AAAnBC;AAmIAA,kBAAetD,MAAf","names":["Server","constructor","opts","errorCallback","mdns","setMaxListeners","on","respondToQuery","bind","err","register","records","shouldRegister","record","subRegistry","registry","type","some","isDuplicateRecord","push","Array","isArray","forEach","unregister","shouldUnregister","filter","i","name","query","self","questions","question","answers","array_flatten_1","depth","Object","keys","map","recordsFor","length","additionals","answer","concat","data","target","unique","respond","_name","indexOf","split","a","b","set","obj","exports"],"sources":["../../src/lib/mdns-server.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}