{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst tsutils = __importStar(require(\"tsutils\"));\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'no-meaningless-void-operator',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow the `void` operator except when used to discard a value',\n      recommended: 'strict',\n      requiresTypeChecking: true\n    },\n    fixable: 'code',\n    hasSuggestions: true,\n    messages: {\n      meaninglessVoidOperator: \"void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored\",\n      removeVoid: \"Remove 'void'\"\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        checkNever: {\n          type: 'boolean',\n          default: false\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{\n    checkNever: false\n  }],\n\n  create(context, _ref) {\n    let [{\n      checkNever\n    }] = _ref;\n    const parserServices = utils_1.ESLintUtils.getParserServices(context);\n    const checker = parserServices.program.getTypeChecker();\n    const sourceCode = context.getSourceCode();\n    return {\n      'UnaryExpression[operator=\"void\"]'(node) {\n        const fix = fixer => {\n          return fixer.removeRange([sourceCode.getTokens(node)[0].range[0], sourceCode.getTokens(node)[1].range[0]]);\n        };\n\n        const argTsNode = parserServices.esTreeNodeToTSNodeMap.get(node.argument);\n        const argType = checker.getTypeAtLocation(argTsNode);\n        const unionParts = tsutils.unionTypeParts(argType);\n\n        if (unionParts.every(part => part.flags & (ts.TypeFlags.Void | ts.TypeFlags.Undefined))) {\n          context.report({\n            node,\n            messageId: 'meaninglessVoidOperator',\n            data: {\n              type: checker.typeToString(argType)\n            },\n            fix\n          });\n        } else if (checkNever && unionParts.every(part => part.flags & (ts.TypeFlags.Void | ts.TypeFlags.Undefined | ts.TypeFlags.Never))) {\n          context.report({\n            node,\n            messageId: 'meaninglessVoidOperator',\n            data: {\n              type: checker.typeToString(argType)\n            },\n            suggest: [{\n              messageId: 'removeVoid',\n              fix\n            }]\n          });\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["exports","util","createRule","name","meta","type","docs","description","recommended","requiresTypeChecking","fixable","hasSuggestions","messages","meaninglessVoidOperator","removeVoid","schema","properties","checkNever","default","additionalProperties","defaultOptions","create","context","parserServices","utils_1","getParserServices","checker","program","getTypeChecker","sourceCode","getSourceCode","node","fix","fixer","removeRange","getTokens","range","argTsNode","esTreeNodeToTSNodeMap","get","argument","argType","getTypeAtLocation","unionParts","tsutils","unionTypeParts","every","part","flags","ts","TypeFlags","Void","Undefined","report","messageId","data","typeToString","Never","suggest"],"sources":["../../src/rules/no-meaningless-void-operator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}