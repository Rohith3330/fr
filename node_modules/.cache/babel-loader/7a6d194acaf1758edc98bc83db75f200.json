{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _actCompat = require(\"./act-compat\");\n\nvar _pure = require(\"./pure\");\n\nObject.keys(_pure).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _pure[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _pure[key];\n    }\n  });\n});\n\nvar _process$env; // if we're running in a test runner that supports afterEach\n// or teardown then we'll automatically run cleanup afterEach test\n// this ensures that tests run in isolation from each other\n// if you don't like this then either import the `pure` module\n// or set the RTL_SKIP_AUTO_CLEANUP env variable to 'true'.\n\n\nif (typeof process === 'undefined' || !((_process$env = process.env) != null && _process$env.RTL_SKIP_AUTO_CLEANUP)) {\n  // ignore teardown() in code coverage because Jest does not support it\n\n  /* istanbul ignore else */\n  if (typeof afterEach === 'function') {\n    afterEach(() => {\n      (0, _pure.cleanup)();\n    });\n  } else if (typeof teardown === 'function') {\n    // Block is guarded by `typeof` check.\n    // eslint does not support `typeof` guards.\n    // eslint-disable-next-line no-undef\n    teardown(() => {\n      (0, _pure.cleanup)();\n    });\n  } // No test setup with other test runners available\n\n  /* istanbul ignore else */\n\n\n  if (typeof beforeAll === 'function' && typeof afterAll === 'function') {\n    // This matches the behavior of React < 18.\n    let previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();\n    beforeAll(() => {\n      previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();\n      (0, _actCompat.setReactActEnvironment)(true);\n    });\n    afterAll(() => {\n      (0, _actCompat.setReactActEnvironment)(previousIsReactActEnvironment);\n    });\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_actCompat","require","_pure","keys","forEach","key","enumerable","get","_process$env","process","env","RTL_SKIP_AUTO_CLEANUP","afterEach","cleanup","teardown","beforeAll","afterAll","previousIsReactActEnvironment","getIsReactActEnvironment","setReactActEnvironment"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@testing-library/react/dist/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _actCompat = require(\"./act-compat\");\n\nvar _pure = require(\"./pure\");\n\nObject.keys(_pure).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _pure[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _pure[key];\n    }\n  });\n});\n\nvar _process$env;\n\n// if we're running in a test runner that supports afterEach\n// or teardown then we'll automatically run cleanup afterEach test\n// this ensures that tests run in isolation from each other\n// if you don't like this then either import the `pure` module\n// or set the RTL_SKIP_AUTO_CLEANUP env variable to 'true'.\nif (typeof process === 'undefined' || !((_process$env = process.env) != null && _process$env.RTL_SKIP_AUTO_CLEANUP)) {\n  // ignore teardown() in code coverage because Jest does not support it\n\n  /* istanbul ignore else */\n  if (typeof afterEach === 'function') {\n    afterEach(() => {\n      (0, _pure.cleanup)();\n    });\n  } else if (typeof teardown === 'function') {\n    // Block is guarded by `typeof` check.\n    // eslint does not support `typeof` guards.\n    // eslint-disable-next-line no-undef\n    teardown(() => {\n      (0, _pure.cleanup)();\n    });\n  } // No test setup with other test runners available\n\n  /* istanbul ignore else */\n\n\n  if (typeof beforeAll === 'function' && typeof afterAll === 'function') {\n    // This matches the behavior of React < 18.\n    let previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();\n    beforeAll(() => {\n      previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();\n      (0, _actCompat.setReactActEnvironment)(true);\n    });\n    afterAll(() => {\n      (0, _actCompat.setReactActEnvironment)(previousIsReactActEnvironment);\n    });\n  }\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,QAAD,CAAnB;;AAEAL,MAAM,CAACO,IAAP,CAAYD,KAAZ,EAAmBE,OAAnB,CAA2B,UAAUC,GAAV,EAAe;EACxC,IAAIA,GAAG,KAAK,SAAR,IAAqBA,GAAG,KAAK,YAAjC,EAA+C;EAC/C,IAAIA,GAAG,IAAIP,OAAP,IAAkBA,OAAO,CAACO,GAAD,CAAP,KAAiBH,KAAK,CAACG,GAAD,CAA5C,EAAmD;EACnDT,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+BO,GAA/B,EAAoC;IAClCC,UAAU,EAAE,IADsB;IAElCC,GAAG,EAAE,YAAY;MACf,OAAOL,KAAK,CAACG,GAAD,CAAZ;IACD;EAJiC,CAApC;AAMD,CATD;;AAWA,IAAIG,YAAJ,C,CAEA;AACA;AACA;AACA;AACA;;;AACA,IAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,EAAE,CAACD,YAAY,GAAGC,OAAO,CAACC,GAAxB,KAAgC,IAAhC,IAAwCF,YAAY,CAACG,qBAAvD,CAAtC,EAAqH;EACnH;;EAEA;EACA,IAAI,OAAOC,SAAP,KAAqB,UAAzB,EAAqC;IACnCA,SAAS,CAAC,MAAM;MACd,CAAC,GAAGV,KAAK,CAACW,OAAV;IACD,CAFQ,CAAT;EAGD,CAJD,MAIO,IAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;IACzC;IACA;IACA;IACAA,QAAQ,CAAC,MAAM;MACb,CAAC,GAAGZ,KAAK,CAACW,OAAV;IACD,CAFO,CAAR;EAGD,CAfkH,CAejH;;EAEF;;;EAGA,IAAI,OAAOE,SAAP,KAAqB,UAArB,IAAmC,OAAOC,QAAP,KAAoB,UAA3D,EAAuE;IACrE;IACA,IAAIC,6BAA6B,GAAG,CAAC,GAAGjB,UAAU,CAACkB,wBAAf,GAApC;IACAH,SAAS,CAAC,MAAM;MACdE,6BAA6B,GAAG,CAAC,GAAGjB,UAAU,CAACkB,wBAAf,GAAhC;MACA,CAAC,GAAGlB,UAAU,CAACmB,sBAAf,EAAuC,IAAvC;IACD,CAHQ,CAAT;IAIAH,QAAQ,CAAC,MAAM;MACb,CAAC,GAAGhB,UAAU,CAACmB,sBAAf,EAAuCF,6BAAvC;IACD,CAFO,CAAR;EAGD;AACF"},"metadata":{},"sourceType":"script"}