{"ast":null,"code":"/**\n * Edge 16 & 17 do not infer function.name from variable assignment.\n * All other `function.name` behavior works fine, so we can skip most of @babel/transform-function-name.\n * @see https://kangax.github.io/compat-table/es6/#test-function_name_property_variables_(function)\n *\n * Note: contrary to various Github issues, Edge 16+ *does* correctly infer the name of Arrow Functions.\n * The variable declarator name inference issue only affects function expressions, so that's all we fix here.\n *\n * A Note on Minification: Terser undoes this transform *by default* unless `keep_fnames` is set to true.\n * There is by design - if Function.name is critical to your application, you must configure\n * your minifier to preserve function names.\n */\nexport default (_ref => {\n  let {\n    types: t\n  } = _ref;\n  return {\n    name: \"transform-edge-function-name\",\n    visitor: {\n      FunctionExpression: {\n        exit(path) {\n          if (!path.node.id && t.isIdentifier(path.parent.id)) {\n            const id = t.cloneNode(path.parent.id);\n            const binding = path.scope.getBinding(id.name); // if the binding gets reassigned anywhere, rename it\n\n            if (binding?.constantViolations.length) {\n              path.scope.rename(id.name);\n            }\n\n            path.node.id = id;\n          }\n        }\n\n      }\n    }\n  };\n});","map":{"version":3,"names":["types","t","name","visitor","FunctionExpression","exit","path","node","id","isIdentifier","parent","cloneNode","binding","scope","getBinding","constantViolations","length","rename"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@babel/preset-modules/src/plugins/transform-edge-function-name/index.js"],"sourcesContent":["/**\n * Edge 16 & 17 do not infer function.name from variable assignment.\n * All other `function.name` behavior works fine, so we can skip most of @babel/transform-function-name.\n * @see https://kangax.github.io/compat-table/es6/#test-function_name_property_variables_(function)\n *\n * Note: contrary to various Github issues, Edge 16+ *does* correctly infer the name of Arrow Functions.\n * The variable declarator name inference issue only affects function expressions, so that's all we fix here.\n *\n * A Note on Minification: Terser undoes this transform *by default* unless `keep_fnames` is set to true.\n * There is by design - if Function.name is critical to your application, you must configure\n * your minifier to preserve function names.\n */\n\nexport default ({ types: t }) => ({\n  name: \"transform-edge-function-name\",\n  visitor: {\n    FunctionExpression: {\n      exit(path) {\n        if (!path.node.id && t.isIdentifier(path.parent.id)) {\n          const id = t.cloneNode(path.parent.id);\n          const binding = path.scope.getBinding(id.name);\n          // if the binding gets reassigned anywhere, rename it\n          if (binding?.constantViolations.length) {\n            path.scope.rename(id.name);\n          }\n          path.node.id = id;\n        }\n      },\n    },\n  },\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,gBAAe;EAAA,IAAC;IAAEA,KAAK,EAAEC;EAAT,CAAD;EAAA,OAAmB;IAChCC,IAAI,EAAE,8BAD0B;IAEhCC,OAAO,EAAE;MACPC,kBAAkB,EAAE;QAClBC,IAAI,CAACC,IAAD,EAAO;UACT,IAAI,CAACA,IAAI,CAACC,IAAL,CAAUC,EAAX,IAAiBP,CAAC,CAACQ,YAAF,CAAeH,IAAI,CAACI,MAAL,CAAYF,EAA3B,CAArB,EAAqD;YACnD,MAAMA,EAAE,GAAGP,CAAC,CAACU,SAAF,CAAYL,IAAI,CAACI,MAAL,CAAYF,EAAxB,CAAX;YACA,MAAMI,OAAO,GAAGN,IAAI,CAACO,KAAL,CAAWC,UAAX,CAAsBN,EAAE,CAACN,IAAzB,CAAhB,CAFmD,CAGnD;;YACA,IAAIU,OAAO,EAAEG,kBAAT,CAA4BC,MAAhC,EAAwC;cACtCV,IAAI,CAACO,KAAL,CAAWI,MAAX,CAAkBT,EAAE,CAACN,IAArB;YACD;;YACDI,IAAI,CAACC,IAAL,CAAUC,EAAV,GAAeA,EAAf;UACD;QACF;;MAXiB;IADb;EAFuB,CAAnB;AAAA,CAAf"},"metadata":{},"sourceType":"module"}