{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar isNaN = require('../../helpers/isNaN');\n\nvar Type = require('../Type'); // https://262.ecma-international.org/11.0/#sec-numeric-types-number-unaryMinus\n\n\nmodule.exports = function NumberUnaryMinus(x) {\n  if (Type(x) !== 'Number') {\n    throw new $TypeError('Assertion failed: `x` argument must be a Number');\n  }\n\n  if (isNaN(x)) {\n    return NaN;\n  }\n\n  return -x;\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","isNaN","Type","module","exports","NumberUnaryMinus","x","NaN"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2022/Number/unaryMinus.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar isNaN = require('../../helpers/isNaN');\n\nvar Type = require('../Type');\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-number-unaryMinus\n\nmodule.exports = function NumberUnaryMinus(x) {\n\tif (Type(x) !== 'Number') {\n\t\tthrow new $TypeError('Assertion failed: `x` argument must be a Number');\n\t}\n\tif (isNaN(x)) {\n\t\treturn NaN;\n\t}\n\treturn -x;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,KAAK,GAAGF,OAAO,CAAC,qBAAD,CAAnB;;AAEA,IAAIG,IAAI,GAAGH,OAAO,CAAC,SAAD,CAAlB,C,CAEA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,CAA1B,EAA6B;EAC7C,IAAIJ,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,MAAM,IAAIN,UAAJ,CAAe,iDAAf,CAAN;EACA;;EACD,IAAIC,KAAK,CAACK,CAAD,CAAT,EAAc;IACb,OAAOC,GAAP;EACA;;EACD,OAAO,CAACD,CAAR;AACA,CARD"},"metadata":{},"sourceType":"script"}