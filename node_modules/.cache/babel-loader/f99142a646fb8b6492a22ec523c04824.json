{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow string interpolation inside snapshots',\n      recommended: 'error'\n    },\n    messages: {\n      noInterpolation: 'Do not use string interpolation inside of snapshots'\n    },\n    schema: [],\n    type: 'problem'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          matcher\n        } = (0, _utils.parseExpectCall)(node);\n\n        if (!matcher) {\n          return;\n        }\n\n        if (['toMatchInlineSnapshot', 'toThrowErrorMatchingInlineSnapshot'].includes(matcher.name)) {\n          var _matcher$arguments; // Check all since the optional 'propertyMatchers' argument might be present\n\n\n          (_matcher$arguments = matcher.arguments) === null || _matcher$arguments === void 0 ? void 0 : _matcher$arguments.forEach(argument => {\n            if (argument.type === _experimentalUtils.AST_NODE_TYPES.TemplateLiteral && argument.expressions.length > 0) {\n              context.report({\n                messageId: 'noInterpolation',\n                node: argument\n              });\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","noInterpolation","schema","type","defaultOptions","create","context","CallExpression","node","isExpectCall","matcher","parseExpectCall","includes","_matcher$arguments","arguments","forEach","argument","AST_NODE_TYPES","TemplateLiteral","expressions","length","report","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-interpolation-in-snapshots.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow string interpolation inside snapshots',\n      recommended: 'error'\n    },\n    messages: {\n      noInterpolation: 'Do not use string interpolation inside of snapshots'\n    },\n    schema: [],\n    type: 'problem'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          matcher\n        } = (0, _utils.parseExpectCall)(node);\n\n        if (!matcher) {\n          return;\n        }\n\n        if (['toMatchInlineSnapshot', 'toThrowErrorMatchingInlineSnapshot'].includes(matcher.name)) {\n          var _matcher$arguments;\n\n          // Check all since the optional 'propertyMatchers' argument might be present\n          (_matcher$arguments = matcher.arguments) === null || _matcher$arguments === void 0 ? void 0 : _matcher$arguments.forEach(argument => {\n            if (argument.type === _experimentalUtils.AST_NODE_TYPES.TemplateLiteral && argument.expressions.length > 0) {\n              context.report({\n                messageId: 'noInterpolation',\n                node: argument\n              });\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,uCAAD,CAAhC;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIE,QAAQ,GAAG,CAAC,GAAGD,MAAM,CAACE,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,gDAFT;MAGJC,WAAW,EAAE;IAHT,CADF;IAMJC,QAAQ,EAAE;MACRC,eAAe,EAAE;IADT,CANN;IASJC,MAAM,EAAE,EATJ;IAUJC,IAAI,EAAE;EAVF,CAF8B;EAcpCC,cAAc,EAAE,EAdoB;;EAgBpCC,MAAM,CAACC,OAAD,EAAU;IACd,OAAO;MACLC,cAAc,CAACC,IAAD,EAAO;QACnB,IAAI,CAAC,CAAC,GAAGlB,MAAM,CAACmB,YAAX,EAAyBD,IAAzB,CAAL,EAAqC;UACnC;QACD;;QAED,MAAM;UACJE;QADI,IAEF,CAAC,GAAGpB,MAAM,CAACqB,eAAX,EAA4BH,IAA5B,CAFJ;;QAIA,IAAI,CAACE,OAAL,EAAc;UACZ;QACD;;QAED,IAAI,CAAC,uBAAD,EAA0B,oCAA1B,EAAgEE,QAAhE,CAAyEF,OAAO,CAACjB,IAAjF,CAAJ,EAA4F;UAC1F,IAAIoB,kBAAJ,CAD0F,CAG1F;;;UACA,CAACA,kBAAkB,GAAGH,OAAO,CAACI,SAA9B,MAA6C,IAA7C,IAAqDD,kBAAkB,KAAK,KAAK,CAAjF,GAAqF,KAAK,CAA1F,GAA8FA,kBAAkB,CAACE,OAAnB,CAA2BC,QAAQ,IAAI;YACnI,IAAIA,QAAQ,CAACb,IAAT,KAAkBf,kBAAkB,CAAC6B,cAAnB,CAAkCC,eAApD,IAAuEF,QAAQ,CAACG,WAAT,CAAqBC,MAArB,GAA8B,CAAzG,EAA4G;cAC1Gd,OAAO,CAACe,MAAR,CAAe;gBACbC,SAAS,EAAE,iBADE;gBAEbd,IAAI,EAAEQ;cAFO,CAAf;YAID;UACF,CAP6F,CAA9F;QAQD;MACF;;IA3BI,CAAP;EA8BD;;AA/CmC,CAAvB,CAAf;;AAmDA/B,OAAO,CAACE,OAAR,GAAkBI,QAAlB"},"metadata":{},"sourceType":"script"}