{"ast":null,"code":"'use strict';\n\nvar csstree = require('css-tree'),\n    List = csstree.List,\n    stable = require('stable'),\n    specificity = require('csso/lib/restructure/prepare/specificity');\n/**\n * Flatten a CSS AST to a selectors list.\n *\n * @param {Object} cssAst css-tree AST to flatten\n * @return {Array} selectors\n */\n\n\nfunction flattenToSelectors(cssAst) {\n  var selectors = [];\n  csstree.walk(cssAst, {\n    visit: 'Rule',\n    enter: function (node) {\n      if (node.type !== 'Rule') {\n        return;\n      }\n\n      var atrule = this.atrule;\n      var rule = node;\n      node.prelude.children.each(function (selectorNode, selectorItem) {\n        var selector = {\n          item: selectorItem,\n          atrule: atrule,\n          rule: rule,\n          pseudos: []\n        };\n        selectorNode.children.each(function (selectorChildNode, selectorChildItem, selectorChildList) {\n          if (selectorChildNode.type === 'PseudoClassSelector' || selectorChildNode.type === 'PseudoElementSelector') {\n            selector.pseudos.push({\n              item: selectorChildItem,\n              list: selectorChildList\n            });\n          }\n        });\n        selectors.push(selector);\n      });\n    }\n  });\n  return selectors;\n}\n/**\n * Filter selectors by Media Query.\n *\n * @param {Array} selectors to filter\n * @param {Array} useMqs Array with strings of media queries that should pass (<name> <expression>)\n * @return {Array} Filtered selectors that match the passed media queries\n */\n\n\nfunction filterByMqs(selectors, useMqs) {\n  return selectors.filter(function (selector) {\n    if (selector.atrule === null) {\n      return ~useMqs.indexOf('');\n    }\n\n    var mqName = selector.atrule.name;\n    var mqStr = mqName;\n\n    if (selector.atrule.expression && selector.atrule.expression.children.first().type === 'MediaQueryList') {\n      var mqExpr = csstree.generate(selector.atrule.expression);\n      mqStr = [mqName, mqExpr].join(' ');\n    }\n\n    return ~useMqs.indexOf(mqStr);\n  });\n}\n/**\n * Filter selectors by the pseudo-elements and/or -classes they contain.\n *\n * @param {Array} selectors to filter\n * @param {Array} usePseudos Array with strings of single or sequence of pseudo-elements and/or -classes that should pass\n * @return {Array} Filtered selectors that match the passed pseudo-elements and/or -classes\n */\n\n\nfunction filterByPseudos(selectors, usePseudos) {\n  return selectors.filter(function (selector) {\n    var pseudoSelectorsStr = csstree.generate({\n      type: 'Selector',\n      children: new List().fromArray(selector.pseudos.map(function (pseudo) {\n        return pseudo.item.data;\n      }))\n    });\n    return ~usePseudos.indexOf(pseudoSelectorsStr);\n  });\n}\n/**\n * Remove pseudo-elements and/or -classes from the selectors for proper matching.\n *\n * @param {Array} selectors to clean\n * @return {Array} Selectors without pseudo-elements and/or -classes\n */\n\n\nfunction cleanPseudos(selectors) {\n  selectors.forEach(function (selector) {\n    selector.pseudos.forEach(function (pseudo) {\n      pseudo.list.remove(pseudo.item);\n    });\n  });\n}\n/**\n * Compares two selector specificities.\n * extracted from https://github.com/keeganstreet/specificity/blob/master/specificity.js#L211\n *\n * @param {Array} aSpecificity Specificity of selector A\n * @param {Array} bSpecificity Specificity of selector B\n * @return {Number} Score of selector specificity A compared to selector specificity B\n */\n\n\nfunction compareSpecificity(aSpecificity, bSpecificity) {\n  for (var i = 0; i < 4; i += 1) {\n    if (aSpecificity[i] < bSpecificity[i]) {\n      return -1;\n    } else if (aSpecificity[i] > bSpecificity[i]) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n/**\n * Compare two simple selectors.\n *\n * @param {Object} aSimpleSelectorNode Simple selector A\n * @param {Object} bSimpleSelectorNode Simple selector B\n * @return {Number} Score of selector A compared to selector B\n */\n\n\nfunction compareSimpleSelectorNode(aSimpleSelectorNode, bSimpleSelectorNode) {\n  var aSpecificity = specificity(aSimpleSelectorNode),\n      bSpecificity = specificity(bSimpleSelectorNode);\n  return compareSpecificity(aSpecificity, bSpecificity);\n}\n\nfunction _bySelectorSpecificity(selectorA, selectorB) {\n  return compareSimpleSelectorNode(selectorA.item.data, selectorB.item.data);\n}\n/**\n * Sort selectors stably by their specificity.\n *\n * @param {Array} selectors to be sorted\n * @return {Array} Stable sorted selectors\n */\n\n\nfunction sortSelectors(selectors) {\n  return stable(selectors, _bySelectorSpecificity);\n}\n/**\n * Convert a css-tree AST style declaration to CSSStyleDeclaration property.\n *\n * @param {Object} declaration css-tree style declaration\n * @return {Object} CSSStyleDeclaration property\n */\n\n\nfunction csstreeToStyleDeclaration(declaration) {\n  var propertyName = declaration.property,\n      propertyValue = csstree.generate(declaration.value),\n      propertyPriority = declaration.important ? 'important' : '';\n  return {\n    name: propertyName,\n    value: propertyValue,\n    priority: propertyPriority\n  };\n}\n/**\n * Gets the CSS string of a style element\n *\n * @param {Object} element style element\n * @return {String|Array} CSS string or empty array if no styles are set\n */\n\n\nfunction getCssStr(elem) {\n  return elem.content[0].text || elem.content[0].cdata || [];\n}\n/**\n * Sets the CSS string of a style element\n *\n * @param {Object} element style element\n * @param {String} CSS string to be set\n * @return {Object} reference to field with CSS\n */\n\n\nfunction setCssStr(elem, css) {\n  // in case of cdata field\n  if (elem.content[0].cdata) {\n    elem.content[0].cdata = css;\n    return elem.content[0].cdata;\n  } // in case of text field + if nothing was set yet\n\n\n  elem.content[0].text = css;\n  return elem.content[0].text;\n}\n\nmodule.exports.flattenToSelectors = flattenToSelectors;\nmodule.exports.filterByMqs = filterByMqs;\nmodule.exports.filterByPseudos = filterByPseudos;\nmodule.exports.cleanPseudos = cleanPseudos;\nmodule.exports.compareSpecificity = compareSpecificity;\nmodule.exports.compareSimpleSelectorNode = compareSimpleSelectorNode;\nmodule.exports.sortSelectors = sortSelectors;\nmodule.exports.csstreeToStyleDeclaration = csstreeToStyleDeclaration;\nmodule.exports.getCssStr = getCssStr;\nmodule.exports.setCssStr = setCssStr;","map":{"version":3,"names":["csstree","require","List","stable","specificity","flattenToSelectors","cssAst","selectors","walk","visit","enter","node","type","atrule","rule","prelude","children","each","selectorNode","selectorItem","selector","item","pseudos","selectorChildNode","selectorChildItem","selectorChildList","push","list","filterByMqs","useMqs","filter","indexOf","mqName","name","mqStr","expression","first","mqExpr","generate","join","filterByPseudos","usePseudos","pseudoSelectorsStr","fromArray","map","pseudo","data","cleanPseudos","forEach","remove","compareSpecificity","aSpecificity","bSpecificity","i","compareSimpleSelectorNode","aSimpleSelectorNode","bSimpleSelectorNode","_bySelectorSpecificity","selectorA","selectorB","sortSelectors","csstreeToStyleDeclaration","declaration","propertyName","property","propertyValue","value","propertyPriority","important","priority","getCssStr","elem","content","text","cdata","setCssStr","css","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/svgo/lib/css-tools.js"],"sourcesContent":["'use strict';\n\nvar csstree     = require('css-tree'),\n    List        = csstree.List,\n    stable      = require('stable'),\n    specificity = require('csso/lib/restructure/prepare/specificity');\n\n\n/**\n * Flatten a CSS AST to a selectors list.\n *\n * @param {Object} cssAst css-tree AST to flatten\n * @return {Array} selectors\n */\nfunction flattenToSelectors(cssAst) {\n    var selectors = [];\n\n    csstree.walk(cssAst, {visit: 'Rule', enter: function(node) {\n        if (node.type !== 'Rule') {\n            return;\n        }\n\n        var atrule = this.atrule;\n        var rule = node;\n\n        node.prelude.children.each(function(selectorNode, selectorItem) {\n            var selector = {\n                item: selectorItem,\n                atrule: atrule,\n                rule: rule,\n                pseudos: []\n            };\n\n            selectorNode.children.each(function(selectorChildNode, selectorChildItem, selectorChildList) {\n                if (selectorChildNode.type === 'PseudoClassSelector' ||\n                    selectorChildNode.type === 'PseudoElementSelector') {\n                    selector.pseudos.push({\n                        item: selectorChildItem,\n                        list: selectorChildList\n                    });\n                }\n            });\n\n            selectors.push(selector);\n        });\n    }});\n\n    return selectors;\n}\n\n/**\n * Filter selectors by Media Query.\n *\n * @param {Array} selectors to filter\n * @param {Array} useMqs Array with strings of media queries that should pass (<name> <expression>)\n * @return {Array} Filtered selectors that match the passed media queries\n */\nfunction filterByMqs(selectors, useMqs) {\n    return selectors.filter(function(selector) {\n        if (selector.atrule === null) {\n            return ~useMqs.indexOf('');\n        }\n\n        var mqName = selector.atrule.name;\n        var mqStr = mqName;\n        if (selector.atrule.expression &&\n            selector.atrule.expression.children.first().type === 'MediaQueryList') {\n            var mqExpr = csstree.generate(selector.atrule.expression);\n            mqStr = [mqName, mqExpr].join(' ');\n        }\n\n        return ~useMqs.indexOf(mqStr);\n    });\n}\n\n/**\n * Filter selectors by the pseudo-elements and/or -classes they contain.\n *\n * @param {Array} selectors to filter\n * @param {Array} usePseudos Array with strings of single or sequence of pseudo-elements and/or -classes that should pass\n * @return {Array} Filtered selectors that match the passed pseudo-elements and/or -classes\n */\nfunction filterByPseudos(selectors, usePseudos) {\n    return selectors.filter(function(selector) {\n        var pseudoSelectorsStr = csstree.generate({\n            type: 'Selector',\n            children: new List().fromArray(selector.pseudos.map(function(pseudo) {\n                return pseudo.item.data;\n            }))\n        });\n        return ~usePseudos.indexOf(pseudoSelectorsStr);\n    });\n}\n\n/**\n * Remove pseudo-elements and/or -classes from the selectors for proper matching.\n *\n * @param {Array} selectors to clean\n * @return {Array} Selectors without pseudo-elements and/or -classes\n */\nfunction cleanPseudos(selectors) {\n    selectors.forEach(function(selector) {\n        selector.pseudos.forEach(function(pseudo) {\n            pseudo.list.remove(pseudo.item);\n        });\n    });\n}\n\n\n/**\n * Compares two selector specificities.\n * extracted from https://github.com/keeganstreet/specificity/blob/master/specificity.js#L211\n *\n * @param {Array} aSpecificity Specificity of selector A\n * @param {Array} bSpecificity Specificity of selector B\n * @return {Number} Score of selector specificity A compared to selector specificity B\n */\nfunction compareSpecificity(aSpecificity, bSpecificity) {\n    for (var i = 0; i < 4; i += 1) {\n        if (aSpecificity[i] < bSpecificity[i]) {\n            return -1;\n        } else if (aSpecificity[i] > bSpecificity[i]) {\n            return 1;\n        }\n    }\n\n    return 0;\n}\n\n\n/**\n * Compare two simple selectors.\n *\n * @param {Object} aSimpleSelectorNode Simple selector A\n * @param {Object} bSimpleSelectorNode Simple selector B\n * @return {Number} Score of selector A compared to selector B\n */\nfunction compareSimpleSelectorNode(aSimpleSelectorNode, bSimpleSelectorNode) {\n    var aSpecificity = specificity(aSimpleSelectorNode),\n        bSpecificity = specificity(bSimpleSelectorNode);\n    return compareSpecificity(aSpecificity, bSpecificity);\n}\n\nfunction _bySelectorSpecificity(selectorA, selectorB) {\n    return compareSimpleSelectorNode(selectorA.item.data, selectorB.item.data);\n}\n\n\n/**\n * Sort selectors stably by their specificity.\n *\n * @param {Array} selectors to be sorted\n * @return {Array} Stable sorted selectors\n */\nfunction sortSelectors(selectors) {\n    return stable(selectors, _bySelectorSpecificity);\n}\n\n\n/**\n * Convert a css-tree AST style declaration to CSSStyleDeclaration property.\n *\n * @param {Object} declaration css-tree style declaration\n * @return {Object} CSSStyleDeclaration property\n */\nfunction csstreeToStyleDeclaration(declaration) {\n    var propertyName = declaration.property,\n        propertyValue = csstree.generate(declaration.value),\n        propertyPriority = (declaration.important ? 'important' : '');\n    return {\n        name: propertyName,\n        value: propertyValue,\n        priority: propertyPriority\n    };\n}\n\n\n/**\n * Gets the CSS string of a style element\n *\n * @param {Object} element style element\n * @return {String|Array} CSS string or empty array if no styles are set\n */\nfunction getCssStr(elem) {\n    return elem.content[0].text || elem.content[0].cdata || [];\n}\n\n/**\n * Sets the CSS string of a style element\n *\n * @param {Object} element style element\n * @param {String} CSS string to be set\n * @return {Object} reference to field with CSS\n */\nfunction setCssStr(elem, css) {\n    // in case of cdata field\n    if(elem.content[0].cdata) {\n        elem.content[0].cdata = css;\n        return elem.content[0].cdata;\n    }\n\n    // in case of text field + if nothing was set yet\n    elem.content[0].text  = css;\n    return elem.content[0].text;\n}\n\n\nmodule.exports.flattenToSelectors = flattenToSelectors;\n\nmodule.exports.filterByMqs = filterByMqs;\nmodule.exports.filterByPseudos = filterByPseudos;\nmodule.exports.cleanPseudos = cleanPseudos;\n\nmodule.exports.compareSpecificity = compareSpecificity;\nmodule.exports.compareSimpleSelectorNode = compareSimpleSelectorNode;\n\nmodule.exports.sortSelectors = sortSelectors;\n\nmodule.exports.csstreeToStyleDeclaration = csstreeToStyleDeclaration;\n\nmodule.exports.getCssStr = getCssStr;\nmodule.exports.setCssStr = setCssStr;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}