{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RULE_NAME = void 0;\n\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\n\nconst node_utils_1 = require(\"../node-utils\");\n\nexports.RULE_NAME = 'no-wait-for-multiple-assertions';\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n  name: exports.RULE_NAME,\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow the use of multiple `expect` calls inside `waitFor`',\n      recommendedConfig: {\n        dom: 'error',\n        angular: 'error',\n        react: 'error',\n        vue: 'error',\n        marko: 'error'\n      }\n    },\n    messages: {\n      noWaitForMultipleAssertion: 'Avoid using multiple assertions within `waitFor` callback'\n    },\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context, _, helpers) {\n    function getExpectNodes(body) {\n      return body.filter(node => {\n        if (!(0, node_utils_1.isExpressionStatement)(node)) {\n          return false;\n        }\n\n        const expressionIdentifier = (0, node_utils_1.getPropertyIdentifierNode)(node);\n\n        if (!expressionIdentifier) {\n          return false;\n        }\n\n        return expressionIdentifier.name === 'expect';\n      });\n    }\n\n    function reportMultipleAssertion(node) {\n      if (!node.parent) {\n        return;\n      }\n\n      const callExpressionNode = node.parent.parent;\n      const callExpressionIdentifier = (0, node_utils_1.getPropertyIdentifierNode)(callExpressionNode);\n\n      if (!callExpressionIdentifier) {\n        return;\n      }\n\n      if (!helpers.isAsyncUtil(callExpressionIdentifier, ['waitFor'])) {\n        return;\n      }\n\n      const expectNodes = getExpectNodes(node.body);\n\n      if (expectNodes.length <= 1) {\n        return;\n      }\n\n      for (let i = 0; i < expectNodes.length; i++) {\n        if (i !== 0) {\n          context.report({\n            node: expectNodes[i],\n            messageId: 'noWaitForMultipleAssertion'\n          });\n        }\n      }\n    }\n\n    return {\n      'CallExpression > ArrowFunctionExpression > BlockStatement': reportMultipleAssertion,\n      'CallExpression > FunctionExpression > BlockStatement': reportMultipleAssertion\n    };\n  }\n\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","RULE_NAME","create_testing_library_rule_1","require","node_utils_1","default","createTestingLibraryRule","name","meta","type","docs","description","recommendedConfig","dom","angular","react","vue","marko","messages","noWaitForMultipleAssertion","schema","defaultOptions","create","context","_","helpers","getExpectNodes","body","filter","node","isExpressionStatement","expressionIdentifier","getPropertyIdentifierNode","reportMultipleAssertion","parent","callExpressionNode","callExpressionIdentifier","isAsyncUtil","expectNodes","length","i","report","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-testing-library/rules/no-wait-for-multiple-assertions.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RULE_NAME = void 0;\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\nconst node_utils_1 = require(\"../node-utils\");\nexports.RULE_NAME = 'no-wait-for-multiple-assertions';\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n    name: exports.RULE_NAME,\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow the use of multiple `expect` calls inside `waitFor`',\n            recommendedConfig: {\n                dom: 'error',\n                angular: 'error',\n                react: 'error',\n                vue: 'error',\n                marko: 'error',\n            },\n        },\n        messages: {\n            noWaitForMultipleAssertion: 'Avoid using multiple assertions within `waitFor` callback',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context, _, helpers) {\n        function getExpectNodes(body) {\n            return body.filter((node) => {\n                if (!(0, node_utils_1.isExpressionStatement)(node)) {\n                    return false;\n                }\n                const expressionIdentifier = (0, node_utils_1.getPropertyIdentifierNode)(node);\n                if (!expressionIdentifier) {\n                    return false;\n                }\n                return expressionIdentifier.name === 'expect';\n            });\n        }\n        function reportMultipleAssertion(node) {\n            if (!node.parent) {\n                return;\n            }\n            const callExpressionNode = node.parent.parent;\n            const callExpressionIdentifier = (0, node_utils_1.getPropertyIdentifierNode)(callExpressionNode);\n            if (!callExpressionIdentifier) {\n                return;\n            }\n            if (!helpers.isAsyncUtil(callExpressionIdentifier, ['waitFor'])) {\n                return;\n            }\n            const expectNodes = getExpectNodes(node.body);\n            if (expectNodes.length <= 1) {\n                return;\n            }\n            for (let i = 0; i < expectNodes.length; i++) {\n                if (i !== 0) {\n                    context.report({\n                        node: expectNodes[i],\n                        messageId: 'noWaitForMultipleAssertion',\n                    });\n                }\n            }\n        }\n        return {\n            'CallExpression > ArrowFunctionExpression > BlockStatement': reportMultipleAssertion,\n            'CallExpression > FunctionExpression > BlockStatement': reportMultipleAssertion,\n        };\n    },\n});\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,6BAA6B,GAAGC,OAAO,CAAC,gCAAD,CAA7C;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACAJ,OAAO,CAACE,SAAR,GAAoB,iCAApB;AACAF,OAAO,CAACM,OAAR,GAAkB,CAAC,GAAGH,6BAA6B,CAACI,wBAAlC,EAA4D;EAC1EC,IAAI,EAAER,OAAO,CAACE,SAD4D;EAE1EO,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAEFC,IAAI,EAAE;MACFC,WAAW,EAAE,8DADX;MAEFC,iBAAiB,EAAE;QACfC,GAAG,EAAE,OADU;QAEfC,OAAO,EAAE,OAFM;QAGfC,KAAK,EAAE,OAHQ;QAIfC,GAAG,EAAE,OAJU;QAKfC,KAAK,EAAE;MALQ;IAFjB,CAFJ;IAYFC,QAAQ,EAAE;MACNC,0BAA0B,EAAE;IADtB,CAZR;IAeFC,MAAM,EAAE;EAfN,CAFoE;EAmB1EC,cAAc,EAAE,EAnB0D;;EAoB1EC,MAAM,CAACC,OAAD,EAAUC,CAAV,EAAaC,OAAb,EAAsB;IACxB,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;MAC1B,OAAOA,IAAI,CAACC,MAAL,CAAaC,IAAD,IAAU;QACzB,IAAI,CAAC,CAAC,GAAGzB,YAAY,CAAC0B,qBAAjB,EAAwCD,IAAxC,CAAL,EAAoD;UAChD,OAAO,KAAP;QACH;;QACD,MAAME,oBAAoB,GAAG,CAAC,GAAG3B,YAAY,CAAC4B,yBAAjB,EAA4CH,IAA5C,CAA7B;;QACA,IAAI,CAACE,oBAAL,EAA2B;UACvB,OAAO,KAAP;QACH;;QACD,OAAOA,oBAAoB,CAACxB,IAArB,KAA8B,QAArC;MACH,CATM,CAAP;IAUH;;IACD,SAAS0B,uBAAT,CAAiCJ,IAAjC,EAAuC;MACnC,IAAI,CAACA,IAAI,CAACK,MAAV,EAAkB;QACd;MACH;;MACD,MAAMC,kBAAkB,GAAGN,IAAI,CAACK,MAAL,CAAYA,MAAvC;MACA,MAAME,wBAAwB,GAAG,CAAC,GAAGhC,YAAY,CAAC4B,yBAAjB,EAA4CG,kBAA5C,CAAjC;;MACA,IAAI,CAACC,wBAAL,EAA+B;QAC3B;MACH;;MACD,IAAI,CAACX,OAAO,CAACY,WAAR,CAAoBD,wBAApB,EAA8C,CAAC,SAAD,CAA9C,CAAL,EAAiE;QAC7D;MACH;;MACD,MAAME,WAAW,GAAGZ,cAAc,CAACG,IAAI,CAACF,IAAN,CAAlC;;MACA,IAAIW,WAAW,CAACC,MAAZ,IAAsB,CAA1B,EAA6B;QACzB;MACH;;MACD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACC,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;QACzC,IAAIA,CAAC,KAAK,CAAV,EAAa;UACTjB,OAAO,CAACkB,MAAR,CAAe;YACXZ,IAAI,EAAES,WAAW,CAACE,CAAD,CADN;YAEXE,SAAS,EAAE;UAFA,CAAf;QAIH;MACJ;IACJ;;IACD,OAAO;MACH,6DAA6DT,uBAD1D;MAEH,wDAAwDA;IAFrD,CAAP;EAIH;;AA9DyE,CAA5D,CAAlB"},"metadata":{},"sourceType":"script"}