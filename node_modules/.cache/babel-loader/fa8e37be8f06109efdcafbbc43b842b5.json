{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Object = GetIntrinsic('%Object%');\nvar $StringPrototype = GetIntrinsic('%String.prototype%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\n\nvar Type = require('./Type');\n\nvar setProto = require('../helpers/setProto'); // https://262.ecma-international.org/6.0/#sec-stringcreate\n\n\nmodule.exports = function StringCreate(value, prototype) {\n  if (Type(value) !== 'String') {\n    throw new $TypeError('Assertion failed: `S` must be a String');\n  }\n\n  var S = $Object(value);\n\n  if (prototype !== $StringPrototype) {\n    if (setProto) {\n      setProto(S, prototype);\n    } else {\n      throw new $SyntaxError('StringCreate: a `proto` argument that is not `String.prototype` is not supported in an environment that does not support setting the [[Prototype]]');\n    }\n  }\n\n  var length = value.length;\n  DefinePropertyOrThrow(S, 'length', {\n    '[[Configurable]]': false,\n    '[[Enumerable]]': false,\n    '[[Value]]': length,\n    '[[Writable]]': false\n  });\n  return S;\n};","map":{"version":3,"names":["GetIntrinsic","require","$Object","$StringPrototype","$SyntaxError","$TypeError","DefinePropertyOrThrow","Type","setProto","module","exports","StringCreate","value","prototype","S","length"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2022/StringCreate.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Object = GetIntrinsic('%Object%');\nvar $StringPrototype = GetIntrinsic('%String.prototype%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\nvar Type = require('./Type');\n\nvar setProto = require('../helpers/setProto');\n\n// https://262.ecma-international.org/6.0/#sec-stringcreate\n\nmodule.exports = function StringCreate(value, prototype) {\n\tif (Type(value) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `S` must be a String');\n\t}\n\n\tvar S = $Object(value);\n\tif (prototype !== $StringPrototype) {\n\t\tif (setProto) {\n\t\t\tsetProto(S, prototype);\n\t\t} else {\n\t\t\tthrow new $SyntaxError('StringCreate: a `proto` argument that is not `String.prototype` is not supported in an environment that does not support setting the [[Prototype]]');\n\t\t}\n\t}\n\n\tvar length = value.length;\n\tDefinePropertyOrThrow(S, 'length', {\n\t\t'[[Configurable]]': false,\n\t\t'[[Enumerable]]': false,\n\t\t'[[Value]]': length,\n\t\t'[[Writable]]': false\n\t});\n\n\treturn S;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,OAAO,GAAGF,YAAY,CAAC,UAAD,CAA1B;AACA,IAAIG,gBAAgB,GAAGH,YAAY,CAAC,oBAAD,CAAnC;AACA,IAAII,YAAY,GAAGJ,YAAY,CAAC,eAAD,CAA/B;AACA,IAAIK,UAAU,GAAGL,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIM,qBAAqB,GAAGL,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIM,IAAI,GAAGN,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIO,QAAQ,GAAGP,OAAO,CAAC,qBAAD,CAAtB,C,CAEA;;;AAEAQ,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,SAA7B,EAAwC;EACxD,IAAIN,IAAI,CAACK,KAAD,CAAJ,KAAgB,QAApB,EAA8B;IAC7B,MAAM,IAAIP,UAAJ,CAAe,wCAAf,CAAN;EACA;;EAED,IAAIS,CAAC,GAAGZ,OAAO,CAACU,KAAD,CAAf;;EACA,IAAIC,SAAS,KAAKV,gBAAlB,EAAoC;IACnC,IAAIK,QAAJ,EAAc;MACbA,QAAQ,CAACM,CAAD,EAAID,SAAJ,CAAR;IACA,CAFD,MAEO;MACN,MAAM,IAAIT,YAAJ,CAAiB,oJAAjB,CAAN;IACA;EACD;;EAED,IAAIW,MAAM,GAAGH,KAAK,CAACG,MAAnB;EACAT,qBAAqB,CAACQ,CAAD,EAAI,QAAJ,EAAc;IAClC,oBAAoB,KADc;IAElC,kBAAkB,KAFgB;IAGlC,aAAaC,MAHqB;IAIlC,gBAAgB;EAJkB,CAAd,CAArB;EAOA,OAAOD,CAAP;AACA,CAvBD"},"metadata":{},"sourceType":"script"}