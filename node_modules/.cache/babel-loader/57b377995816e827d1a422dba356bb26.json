{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fuzzyMatches = fuzzyMatches;\nexports.getDefaultNormalizer = getDefaultNormalizer;\nexports.makeNormalizer = makeNormalizer;\nexports.matches = matches;\n\nfunction assertNotNullOrUndefined(matcher) {\n  if (matcher === null || matcher === undefined) {\n    throw new Error( // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- implicitly converting `T` to `string`\n    `It looks like ${matcher} was passed instead of a matcher. Did you do something like getByText(${matcher})?`);\n  }\n}\n\nfunction fuzzyMatches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n\n  if (typeof matcher === 'string' || typeof matcher === 'number') {\n    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());\n  } else if (typeof matcher === 'function') {\n    return matcher(normalizedText, node);\n  } else {\n    return matchRegExp(matcher, normalizedText);\n  }\n}\n\nfunction matches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n\n  if (matcher instanceof Function) {\n    return matcher(normalizedText, node);\n  } else if (matcher instanceof RegExp) {\n    return matchRegExp(matcher, normalizedText);\n  } else {\n    return normalizedText === String(matcher);\n  }\n}\n\nfunction getDefaultNormalizer() {\n  let {\n    trim = true,\n    collapseWhitespace = true\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return text => {\n    let normalizedText = text;\n    normalizedText = trim ? normalizedText.trim() : normalizedText;\n    normalizedText = collapseWhitespace ? normalizedText.replace(/\\s+/g, ' ') : normalizedText;\n    return normalizedText;\n  };\n}\n/**\n * Constructs a normalizer to pass to functions in matches.js\n * @param {boolean|undefined} trim The user-specified value for `trim`, without\n * any defaulting having been applied\n * @param {boolean|undefined} collapseWhitespace The user-specified value for\n * `collapseWhitespace`, without any defaulting having been applied\n * @param {Function|undefined} normalizer The user-specified normalizer\n * @returns {Function} A normalizer\n */\n\n\nfunction makeNormalizer(_ref) {\n  let {\n    trim,\n    collapseWhitespace,\n    normalizer\n  } = _ref;\n\n  if (!normalizer) {\n    // No custom normalizer specified. Just use default.\n    return getDefaultNormalizer({\n      trim,\n      collapseWhitespace\n    });\n  }\n\n  if (typeof trim !== 'undefined' || typeof collapseWhitespace !== 'undefined') {\n    // They've also specified a value for trim or collapseWhitespace\n    throw new Error('trim and collapseWhitespace are not supported with a normalizer. ' + 'If you want to use the default trim and collapseWhitespace logic in your normalizer, ' + 'use \"getDefaultNormalizer({trim, collapseWhitespace})\" and compose that into your normalizer');\n  }\n\n  return normalizer;\n}\n\nfunction matchRegExp(matcher, text) {\n  const match = matcher.test(text);\n\n  if (matcher.global && matcher.lastIndex !== 0) {\n    console.warn(`To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp.`);\n    matcher.lastIndex = 0;\n  }\n\n  return match;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","fuzzyMatches","getDefaultNormalizer","makeNormalizer","matches","assertNotNullOrUndefined","matcher","undefined","Error","textToMatch","node","normalizer","normalizedText","toLowerCase","includes","toString","matchRegExp","Function","RegExp","String","trim","collapseWhitespace","text","replace","match","test","global","lastIndex","console","warn"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@testing-library/dom/dist/matches.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fuzzyMatches = fuzzyMatches;\nexports.getDefaultNormalizer = getDefaultNormalizer;\nexports.makeNormalizer = makeNormalizer;\nexports.matches = matches;\n\nfunction assertNotNullOrUndefined(matcher) {\n  if (matcher === null || matcher === undefined) {\n    throw new Error( // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- implicitly converting `T` to `string`\n    `It looks like ${matcher} was passed instead of a matcher. Did you do something like getByText(${matcher})?`);\n  }\n}\n\nfunction fuzzyMatches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n\n  if (typeof matcher === 'string' || typeof matcher === 'number') {\n    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());\n  } else if (typeof matcher === 'function') {\n    return matcher(normalizedText, node);\n  } else {\n    return matchRegExp(matcher, normalizedText);\n  }\n}\n\nfunction matches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n\n  if (matcher instanceof Function) {\n    return matcher(normalizedText, node);\n  } else if (matcher instanceof RegExp) {\n    return matchRegExp(matcher, normalizedText);\n  } else {\n    return normalizedText === String(matcher);\n  }\n}\n\nfunction getDefaultNormalizer({\n  trim = true,\n  collapseWhitespace = true\n} = {}) {\n  return text => {\n    let normalizedText = text;\n    normalizedText = trim ? normalizedText.trim() : normalizedText;\n    normalizedText = collapseWhitespace ? normalizedText.replace(/\\s+/g, ' ') : normalizedText;\n    return normalizedText;\n  };\n}\n/**\n * Constructs a normalizer to pass to functions in matches.js\n * @param {boolean|undefined} trim The user-specified value for `trim`, without\n * any defaulting having been applied\n * @param {boolean|undefined} collapseWhitespace The user-specified value for\n * `collapseWhitespace`, without any defaulting having been applied\n * @param {Function|undefined} normalizer The user-specified normalizer\n * @returns {Function} A normalizer\n */\n\n\nfunction makeNormalizer({\n  trim,\n  collapseWhitespace,\n  normalizer\n}) {\n  if (!normalizer) {\n    // No custom normalizer specified. Just use default.\n    return getDefaultNormalizer({\n      trim,\n      collapseWhitespace\n    });\n  }\n\n  if (typeof trim !== 'undefined' || typeof collapseWhitespace !== 'undefined') {\n    // They've also specified a value for trim or collapseWhitespace\n    throw new Error('trim and collapseWhitespace are not supported with a normalizer. ' + 'If you want to use the default trim and collapseWhitespace logic in your normalizer, ' + 'use \"getDefaultNormalizer({trim, collapseWhitespace})\" and compose that into your normalizer');\n  }\n\n  return normalizer;\n}\n\nfunction matchRegExp(matcher, text) {\n  const match = matcher.test(text);\n\n  if (matcher.global && matcher.lastIndex !== 0) {\n    console.warn(`To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp.`);\n    matcher.lastIndex = 0;\n  }\n\n  return match;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}