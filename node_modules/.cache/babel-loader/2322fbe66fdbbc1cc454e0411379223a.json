{"ast":null,"code":"'use strict';\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: (0, _docsUrl2['default'])('no-mutable-exports')\n    },\n    schema: []\n  },\n  create: function () {\n    function create(context) {\n      function checkDeclaration(node) {\n        var kind = node.kind;\n\n        if (kind === 'var' || kind === 'let') {\n          context.report(node, 'Exporting mutable \\'' + String(kind) + '\\' binding, use \\'const\\' instead.');\n        }\n      }\n\n      function checkDeclarationsInScope(_ref, name) {\n        var variables = _ref.variables;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = variables[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var variable = _step.value;\n\n            if (variable.name === name) {\n              var _iteratorNormalCompletion2 = true;\n              var _didIteratorError2 = false;\n              var _iteratorError2 = undefined;\n\n              try {\n                for (var _iterator2 = variable.defs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                  var def = _step2.value;\n\n                  if (def.type === 'Variable' && def.parent) {\n                    checkDeclaration(def.parent);\n                  }\n                }\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion2 && _iterator2['return']) {\n                    _iterator2['return']();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator['return']) {\n              _iterator['return']();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      function handleExportDefault(node) {\n        var scope = context.getScope();\n\n        if (node.declaration.name) {\n          checkDeclarationsInScope(scope, node.declaration.name);\n        }\n      }\n\n      function handleExportNamed(node) {\n        var scope = context.getScope();\n\n        if (node.declaration) {\n          checkDeclaration(node.declaration);\n        } else if (!node.source) {\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = node.specifiers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var specifier = _step3.value;\n              checkDeclarationsInScope(scope, specifier.local.name);\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3['return']) {\n                _iterator3['return']();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        'ExportDefaultDeclaration': handleExportDefault,\n        'ExportNamedDeclaration': handleExportNamed\n      };\n    }\n\n    return create;\n  }()\n};","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;AAEAA,OAAOC,OAAPD,GAAiB;EACfE,MAAM;IACJC,MAAM,YADF;IAEJC,MAAM;MACJC,KAAK,0BAAQ,oBAAR;IADD,CAFF;IAKJC,QAAQ;EALJ,CADS;EASfC,MATe;IAAA,gBASRC,OATQ,EASC;MACd,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;QAAA,IACtBC,IADsB,GACbD,IADa,CACtBC,IADsB;;QAE9B,IAAIA,SAAS,KAATA,IAAkBA,SAAS,KAA/B,EAAsC;UACpCH,QAAQI,MAARJ,CAAeE,IAAfF,kCAA2CG,IAA3C;QACD;MACF;;MAED,SAASE,wBAAT,OAAiDC,IAAjD,EAAuD;QAAA,IAAnBC,SAAmB,QAAnBA,SAAmB;QAAA;QAAA;QAAA;;QAAA;UACrD,qBAAuBA,SAAvB,iBAAuBA,EAAvB,2GAAkC;YAAA,IAAvBC,QAAuB;;YAChC,IAAIA,SAASF,IAATE,KAAkBF,IAAtB,EAA4B;cAAA;cAAA;cAAA;;cAAA;gBAC1B,sBAAkBE,SAASC,IAATD,CAAlBE,eAAkBF,GAAlB,gHAAiC;kBAAA,IAAtBG,GAAsB;;kBAC/B,IAAIA,IAAIhB,IAAJgB,KAAa,UAAbA,IAA2BA,IAAIC,MAAnC,EAA2C;oBACzCX,iBAAiBU,IAAIC,MAArBX;kBACD;gBAJuB;cAAA;gBAAAY;gBAAAC;cAAA;gBAAA;kBAAA;oBAAAC;kBAAA;gBAAA;kBAAA;oBAAA;kBAAA;gBAAA;cAAA;YAM3B;UARkD;QAAA;UAAAC;UAAAC;QAAA;UAAA;YAAA;cAAAC;YAAA;UAAA;YAAA;cAAA;YAAA;UAAA;QAAA;MAUtD;;MAED,SAASC,mBAAT,CAA6BjB,IAA7B,EAAmC;QACjC,IAAMkB,QAAQpB,QAAQqB,QAARrB,EAAd;;QAEA,IAAIE,KAAKoB,WAALpB,CAAiBI,IAArB,EAA2B;UACzBD,yBAAyBe,KAAzBf,EAAgCH,KAAKoB,WAALpB,CAAiBI,IAAjDD;QACD;MACF;;MAED,SAASkB,iBAAT,CAA2BrB,IAA3B,EAAiC;QAC/B,IAAMkB,QAAQpB,QAAQqB,QAARrB,EAAd;;QAEA,IAAIE,KAAKoB,WAAT,EAAuB;UACrBrB,iBAAiBC,KAAKoB,WAAtBrB;QADF,OAEO,IAAI,CAACC,KAAKsB,MAAV,EAAkB;UAAA;UAAA;UAAA;;UAAA;YACvB,sBAAwBtB,KAAKuB,UAALvB,CAAxBQ,eAAwBR,GAAxB,gHAAyC;cAAA,IAA9BwB,SAA8B;cACvCrB,yBAAyBe,KAAzBf,EAAgCqB,UAAUC,KAAVD,CAAgBpB,IAAhDD;YAFqB;UAAA;YAAAuB;YAAAC;UAAA;YAAA;cAAA;gBAAAC;cAAA;YAAA;cAAA;gBAAA;cAAA;YAAA;UAAA;QAIxB;MACF;;MAED,OAAO;QACL,4BAA4BX,mBADvB;QAEL,0BAA0BI;MAFrB,CAAP;IAjDa;;IAAA;EAAA;AAAA,CAAjB/B","names":["module","exports","meta","type","docs","url","schema","create","context","checkDeclaration","node","kind","report","checkDeclarationsInScope","name","variables","variable","defs","Symbol","def","parent","_didIteratorError2","_iteratorError2","_iterator2","_didIteratorError","_iteratorError","_iterator","handleExportDefault","scope","getScope","declaration","handleExportNamed","source","specifiers","specifier","local","_didIteratorError3","_iteratorError3","_iterator3"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\no-mutable-exports.js"],"sourcesContent":["import docsUrl from '../docsUrl';\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: docsUrl('no-mutable-exports'),\n    },\n    schema: [],\n  },\n\n  create(context) {\n    function checkDeclaration(node) {\n      const { kind } = node;\n      if (kind === 'var' || kind === 'let') {\n        context.report(node, `Exporting mutable '${kind}' binding, use 'const' instead.`);\n      }\n    }\n\n    function checkDeclarationsInScope({ variables }, name) {\n      for (const variable of variables) {\n        if (variable.name === name) {\n          for (const def of variable.defs) {\n            if (def.type === 'Variable' && def.parent) {\n              checkDeclaration(def.parent);\n            }\n          }\n        }\n      }\n    }\n\n    function handleExportDefault(node) {\n      const scope = context.getScope();\n\n      if (node.declaration.name) {\n        checkDeclarationsInScope(scope, node.declaration.name);\n      }\n    }\n\n    function handleExportNamed(node) {\n      const scope = context.getScope();\n\n      if (node.declaration)  {\n        checkDeclaration(node.declaration);\n      } else if (!node.source) {\n        for (const specifier of node.specifiers) {\n          checkDeclarationsInScope(scope, specifier.local.name);\n        }\n      }\n    }\n\n    return {\n      'ExportDefaultDeclaration': handleExportDefault,\n      'ExportNamedDeclaration': handleExportNamed,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}