{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst getBlockType = statement => {\n  const func = statement.parent;\n  /* istanbul ignore if */\n\n  if (!func) {\n    throw new Error(`Unexpected BlockStatement. No parent defined. - please file a github issue at https://github.com/jest-community/eslint-plugin-jest`);\n  } // functionDeclaration: function func() {}\n\n\n  if (func.type === _experimentalUtils.AST_NODE_TYPES.FunctionDeclaration) {\n    return 'function';\n  }\n\n  if ((0, _utils.isFunction)(func) && func.parent) {\n    const expr = func.parent; // arrow function or function expr\n\n    if (expr.type === _experimentalUtils.AST_NODE_TYPES.VariableDeclarator) {\n      return 'function';\n    } // if it's not a variable, it will be callExpr, we only care about describe\n\n\n    if (expr.type === _experimentalUtils.AST_NODE_TYPES.CallExpression && (0, _utils.isDescribeCall)(expr)) {\n      return 'describe';\n    }\n  }\n\n  return null;\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow using `expect` outside of `it` or `test` blocks',\n      recommended: 'error'\n    },\n    messages: {\n      unexpectedExpect: 'Expect must be inside of a test block.'\n    },\n    type: 'suggestion',\n    schema: [{\n      properties: {\n        additionalTestBlockFunctions: {\n          type: 'array',\n          items: {\n            type: 'string'\n          }\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{\n    additionalTestBlockFunctions: []\n  }],\n\n  create(context, _ref) {\n    let [{\n      additionalTestBlockFunctions = []\n    }] = _ref;\n    const callStack = [];\n\n    const isCustomTestBlockFunction = node => additionalTestBlockFunctions.includes((0, _utils.getNodeName)(node) || '');\n\n    const isTestBlock = node => (0, _utils.isTestCaseCall)(node) || isCustomTestBlockFunction(node);\n\n    return {\n      CallExpression(node) {\n        if ((0, _utils.isExpectCall)(node)) {\n          const parent = callStack[callStack.length - 1];\n\n          if (!parent || parent === _utils.DescribeAlias.describe) {\n            context.report({\n              node,\n              messageId: 'unexpectedExpect'\n            });\n          }\n\n          return;\n        }\n\n        if (isTestBlock(node)) {\n          callStack.push('test');\n        }\n\n        if (node.callee.type === _experimentalUtils.AST_NODE_TYPES.TaggedTemplateExpression) {\n          callStack.push('template');\n        }\n      },\n\n      'CallExpression:exit'(node) {\n        const top = callStack[callStack.length - 1];\n\n        if (top === 'test' && isTestBlock(node) && node.callee.type !== _experimentalUtils.AST_NODE_TYPES.MemberExpression || top === 'template' && node.callee.type === _experimentalUtils.AST_NODE_TYPES.TaggedTemplateExpression) {\n          callStack.pop();\n        }\n      },\n\n      BlockStatement(statement) {\n        const blockType = getBlockType(statement);\n\n        if (blockType) {\n          callStack.push(blockType);\n        }\n      },\n\n      'BlockStatement:exit'(statement) {\n        if (callStack[callStack.length - 1] === getBlockType(statement)) {\n          callStack.pop();\n        }\n      },\n\n      ArrowFunctionExpression(node) {\n        var _node$parent;\n\n        if (((_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.type) !== _experimentalUtils.AST_NODE_TYPES.CallExpression) {\n          callStack.push('arrow');\n        }\n      },\n\n      'ArrowFunctionExpression:exit'() {\n        if (callStack[callStack.length - 1] === 'arrow') {\n          callStack.pop();\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","getBlockType","statement","func","parent","Error","type","AST_NODE_TYPES","FunctionDeclaration","isFunction","expr","VariableDeclarator","CallExpression","isDescribeCall","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","unexpectedExpect","schema","properties","additionalTestBlockFunctions","items","additionalProperties","defaultOptions","create","context","callStack","isCustomTestBlockFunction","node","includes","getNodeName","isTestBlock","isTestCaseCall","isExpectCall","length","DescribeAlias","describe","report","messageId","push","callee","TaggedTemplateExpression","top","MemberExpression","pop","BlockStatement","blockType","ArrowFunctionExpression","_node$parent"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-standalone-expect.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst getBlockType = statement => {\n  const func = statement.parent;\n  /* istanbul ignore if */\n\n  if (!func) {\n    throw new Error(`Unexpected BlockStatement. No parent defined. - please file a github issue at https://github.com/jest-community/eslint-plugin-jest`);\n  } // functionDeclaration: function func() {}\n\n\n  if (func.type === _experimentalUtils.AST_NODE_TYPES.FunctionDeclaration) {\n    return 'function';\n  }\n\n  if ((0, _utils.isFunction)(func) && func.parent) {\n    const expr = func.parent; // arrow function or function expr\n\n    if (expr.type === _experimentalUtils.AST_NODE_TYPES.VariableDeclarator) {\n      return 'function';\n    } // if it's not a variable, it will be callExpr, we only care about describe\n\n\n    if (expr.type === _experimentalUtils.AST_NODE_TYPES.CallExpression && (0, _utils.isDescribeCall)(expr)) {\n      return 'describe';\n    }\n  }\n\n  return null;\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow using `expect` outside of `it` or `test` blocks',\n      recommended: 'error'\n    },\n    messages: {\n      unexpectedExpect: 'Expect must be inside of a test block.'\n    },\n    type: 'suggestion',\n    schema: [{\n      properties: {\n        additionalTestBlockFunctions: {\n          type: 'array',\n          items: {\n            type: 'string'\n          }\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{\n    additionalTestBlockFunctions: []\n  }],\n\n  create(context, [{\n    additionalTestBlockFunctions = []\n  }]) {\n    const callStack = [];\n\n    const isCustomTestBlockFunction = node => additionalTestBlockFunctions.includes((0, _utils.getNodeName)(node) || '');\n\n    const isTestBlock = node => (0, _utils.isTestCaseCall)(node) || isCustomTestBlockFunction(node);\n\n    return {\n      CallExpression(node) {\n        if ((0, _utils.isExpectCall)(node)) {\n          const parent = callStack[callStack.length - 1];\n\n          if (!parent || parent === _utils.DescribeAlias.describe) {\n            context.report({\n              node,\n              messageId: 'unexpectedExpect'\n            });\n          }\n\n          return;\n        }\n\n        if (isTestBlock(node)) {\n          callStack.push('test');\n        }\n\n        if (node.callee.type === _experimentalUtils.AST_NODE_TYPES.TaggedTemplateExpression) {\n          callStack.push('template');\n        }\n      },\n\n      'CallExpression:exit'(node) {\n        const top = callStack[callStack.length - 1];\n\n        if (top === 'test' && isTestBlock(node) && node.callee.type !== _experimentalUtils.AST_NODE_TYPES.MemberExpression || top === 'template' && node.callee.type === _experimentalUtils.AST_NODE_TYPES.TaggedTemplateExpression) {\n          callStack.pop();\n        }\n      },\n\n      BlockStatement(statement) {\n        const blockType = getBlockType(statement);\n\n        if (blockType) {\n          callStack.push(blockType);\n        }\n      },\n\n      'BlockStatement:exit'(statement) {\n        if (callStack[callStack.length - 1] === getBlockType(statement)) {\n          callStack.pop();\n        }\n      },\n\n      ArrowFunctionExpression(node) {\n        var _node$parent;\n\n        if (((_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.type) !== _experimentalUtils.AST_NODE_TYPES.CallExpression) {\n          callStack.push('arrow');\n        }\n      },\n\n      'ArrowFunctionExpression:exit'() {\n        if (callStack[callStack.length - 1] === 'arrow') {\n          callStack.pop();\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}