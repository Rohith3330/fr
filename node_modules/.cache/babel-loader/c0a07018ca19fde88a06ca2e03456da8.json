{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $charAt = callBound('String.prototype.charAt');\n\nvar isString = require('is-string');\n\nvar isNegativeZero = require('is-negative-zero');\n\nvar unbox = require('unbox-primitive');\n\nvar CanonicalNumericIndexString = require('./CanonicalNumericIndexString');\n\nvar IsInteger = require('./IsInteger');\n\nvar IsPropertyKey = require('./IsPropertyKey');\n\nvar Type = require('./Type'); // https://262.ecma-international.org/6.0/#sec-stringgetindexproperty\n\n\nmodule.exports = function StringGetIndexProperty(S, P) {\n  if (typeof S === 'string' || !isString(S)) {\n    throw new $TypeError('Assertion failed: `S` must be a boxed String Object');\n  }\n\n  if (!IsPropertyKey(P)) {\n    throw new $TypeError('Assertion failed: `P` must be a Property Key');\n  }\n\n  if (Type(P) !== 'String') {\n    return void undefined;\n  }\n\n  var index = CanonicalNumericIndexString(P);\n\n  if (typeof index === 'undefined' || !IsInteger(index) || isNegativeZero(index)) {\n    return void undefined;\n  }\n\n  var str = unbox(S);\n  var len = str.length;\n\n  if (index < 0 || len <= index) {\n    return void undefined;\n  }\n\n  var resultStr = $charAt(str, index);\n  return {\n    '[[Configurable]]': false,\n    '[[Enumerable]]': true,\n    '[[Value]]': resultStr,\n    '[[Writable]]': false\n  };\n};","map":{"version":3,"names":["GetIntrinsic","require","callBound","$TypeError","$charAt","isString","isNegativeZero","unbox","CanonicalNumericIndexString","IsInteger","IsPropertyKey","Type","module","exports","StringGetIndexProperty","S","P","undefined","index","str","len","length","resultStr"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2015/StringGetIndexProperty.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar $charAt = callBound('String.prototype.charAt');\n\nvar isString = require('is-string');\nvar isNegativeZero = require('is-negative-zero');\nvar unbox = require('unbox-primitive');\n\nvar CanonicalNumericIndexString = require('./CanonicalNumericIndexString');\nvar IsInteger = require('./IsInteger');\nvar IsPropertyKey = require('./IsPropertyKey');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/6.0/#sec-stringgetindexproperty\n\nmodule.exports = function StringGetIndexProperty(S, P) {\n\tif (typeof S === 'string' || !isString(S)) {\n\t\tthrow new $TypeError('Assertion failed: `S` must be a boxed String Object');\n\t}\n\tif (!IsPropertyKey(P)) {\n\t\tthrow new $TypeError('Assertion failed: `P` must be a Property Key');\n\t}\n\n\tif (Type(P) !== 'String') {\n\t\treturn void undefined;\n\t}\n\n\tvar index = CanonicalNumericIndexString(P);\n\tif (typeof index === 'undefined' || !IsInteger(index) || isNegativeZero(index)) {\n\t\treturn void undefined;\n\t}\n\n\tvar str = unbox(S);\n\tvar len = str.length;\n\tif (index < 0 || len <= index) {\n\t\treturn void undefined;\n\t}\n\n\tvar resultStr = $charAt(str, index);\n\n\treturn {\n\t\t'[[Configurable]]': false,\n\t\t'[[Enumerable]]': true,\n\t\t'[[Value]]': resultStr,\n\t\t'[[Writable]]': false\n\t};\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIE,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;AAEA,IAAII,OAAO,GAAGF,SAAS,CAAC,yBAAD,CAAvB;;AAEA,IAAIG,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAIK,cAAc,GAAGL,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,iBAAD,CAAnB;;AAEA,IAAIO,2BAA2B,GAAGP,OAAO,CAAC,+BAAD,CAAzC;;AACA,IAAIQ,SAAS,GAAGR,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIS,aAAa,GAAGT,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIU,IAAI,GAAGV,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAW,MAAM,CAACC,OAAP,GAAiB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmCC,CAAnC,EAAsC;EACtD,IAAI,OAAOD,CAAP,KAAa,QAAb,IAAyB,CAACV,QAAQ,CAACU,CAAD,CAAtC,EAA2C;IAC1C,MAAM,IAAIZ,UAAJ,CAAe,qDAAf,CAAN;EACA;;EACD,IAAI,CAACO,aAAa,CAACM,CAAD,CAAlB,EAAuB;IACtB,MAAM,IAAIb,UAAJ,CAAe,8CAAf,CAAN;EACA;;EAED,IAAIQ,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,OAAO,KAAKC,SAAZ;EACA;;EAED,IAAIC,KAAK,GAAGV,2BAA2B,CAACQ,CAAD,CAAvC;;EACA,IAAI,OAAOE,KAAP,KAAiB,WAAjB,IAAgC,CAACT,SAAS,CAACS,KAAD,CAA1C,IAAqDZ,cAAc,CAACY,KAAD,CAAvE,EAAgF;IAC/E,OAAO,KAAKD,SAAZ;EACA;;EAED,IAAIE,GAAG,GAAGZ,KAAK,CAACQ,CAAD,CAAf;EACA,IAAIK,GAAG,GAAGD,GAAG,CAACE,MAAd;;EACA,IAAIH,KAAK,GAAG,CAAR,IAAaE,GAAG,IAAIF,KAAxB,EAA+B;IAC9B,OAAO,KAAKD,SAAZ;EACA;;EAED,IAAIK,SAAS,GAAGlB,OAAO,CAACe,GAAD,EAAMD,KAAN,CAAvB;EAEA,OAAO;IACN,oBAAoB,KADd;IAEN,kBAAkB,IAFZ;IAGN,aAAaI,SAHP;IAIN,gBAAgB;EAJV,CAAP;AAMA,CA/BD"},"metadata":{},"sourceType":"script"}