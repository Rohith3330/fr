{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\n\nconst _util_1 = require(\"./_util\");\n\nconst regexpMetaSchema = {\n  type: \"object\",\n  properties: {\n    pattern: {\n      type: \"string\"\n    },\n    flags: {\n      type: \"string\",\n      nullable: true\n    }\n  },\n  required: [\"pattern\"],\n  additionalProperties: false\n};\nconst metaRegexp = /^\\/(.*)\\/([gimuy]*)$/;\n\nfunction getDef() {\n  return {\n    keyword: \"regexp\",\n    type: \"string\",\n    schemaType: [\"string\", \"object\"],\n\n    code(cxt) {\n      const {\n        data,\n        schema\n      } = cxt;\n      const regx = getRegExp(schema);\n      cxt.pass((0, codegen_1._)`${regx}.test(${data})`);\n\n      function getRegExp(sch) {\n        if (typeof sch == \"object\") return (0, _util_1.usePattern)(cxt, sch.pattern, sch.flags);\n        const rx = metaRegexp.exec(sch);\n        if (rx) return (0, _util_1.usePattern)(cxt, rx[1], rx[2]);\n        throw new Error(\"cannot parse string into RegExp\");\n      }\n    },\n\n    metaSchema: {\n      anyOf: [{\n        type: \"string\"\n      }, regexpMetaSchema]\n    }\n  };\n}\n\nexports.default = getDef;\nmodule.exports = getDef;","map":{"version":3,"mappings":";;;;;;AACA;;AACA;;AAOA,MAAMA,gBAAgB,GAAiC;EACrDC,IAAI,EAAE,QAD+C;EAErDC,UAAU,EAAE;IACVC,OAAO,EAAE;MAACF,IAAI,EAAE;IAAP,CADC;IAEVG,KAAK,EAAE;MAACH,IAAI,EAAE,QAAP;MAAiBI,QAAQ,EAAE;IAA3B;EAFG,CAFyC;EAMrDC,QAAQ,EAAE,CAAC,SAAD,CAN2C;EAOrDC,oBAAoB,EAAE;AAP+B,CAAvD;AAUA,MAAMC,UAAU,GAAG,sBAAnB;;AAEA,SAAwBC,MAAxB,GAA8B;EAC5B,OAAO;IACLC,OAAO,EAAE,QADJ;IAELT,IAAI,EAAE,QAFD;IAGLU,UAAU,EAAE,CAAC,QAAD,EAAW,QAAX,CAHP;;IAILC,IAAI,CAACC,GAAD,EAAgB;MAClB,MAAM;QAACC,IAAD;QAAOC;MAAP,IAAiBF,GAAvB;MACA,MAAMG,IAAI,GAAGC,SAAS,CAACF,MAAD,CAAtB;MACAF,GAAG,CAACK,IAAJ,CAAS,gBAAC,GAAGF,IAAI,SAASF,IAAI,GAA9B;;MAEA,SAASG,SAAT,CAAmBE,GAAnB,EAA6C;QAC3C,IAAI,OAAOA,GAAP,IAAc,QAAlB,EAA4B,OAAO,wBAAWN,GAAX,EAAgBM,GAAG,CAAChB,OAApB,EAA6BgB,GAAG,CAACf,KAAjC,CAAP;QAC5B,MAAMgB,EAAE,GAAGZ,UAAU,CAACa,IAAX,CAAgBF,GAAhB,CAAX;QACA,IAAIC,EAAJ,EAAQ,OAAO,wBAAWP,GAAX,EAAgBO,EAAE,CAAC,CAAD,CAAlB,EAAuBA,EAAE,CAAC,CAAD,CAAzB,CAAP;QACR,MAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;MACD;IACF,CAfI;;IAgBLC,UAAU,EAAE;MACVC,KAAK,EAAE,CAAC;QAACvB,IAAI,EAAE;MAAP,CAAD,EAAmBD,gBAAnB;IADG;EAhBP,CAAP;AAoBD;;AArBDyB;AAuBAC,MAAM,CAACD,OAAP,GAAiBhB,MAAjB","names":["regexpMetaSchema","type","properties","pattern","flags","nullable","required","additionalProperties","metaRegexp","getDef","keyword","schemaType","code","cxt","data","schema","regx","getRegExp","pass","sch","rx","exec","Error","metaSchema","anyOf","exports","module"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\css-minimizer-webpack-plugin\\node_modules\\ajv-keywords\\src\\definitions\\regexp.ts"],"sourcesContent":["import type {CodeKeywordDefinition, KeywordCxt, JSONSchemaType, Name} from \"ajv\"\nimport {_} from \"ajv/dist/compile/codegen\"\nimport {usePattern} from \"./_util\"\n\ninterface RegexpSchema {\n  pattern: string\n  flags?: string\n}\n\nconst regexpMetaSchema: JSONSchemaType<RegexpSchema> = {\n  type: \"object\",\n  properties: {\n    pattern: {type: \"string\"},\n    flags: {type: \"string\", nullable: true},\n  },\n  required: [\"pattern\"],\n  additionalProperties: false,\n}\n\nconst metaRegexp = /^\\/(.*)\\/([gimuy]*)$/\n\nexport default function getDef(): CodeKeywordDefinition {\n  return {\n    keyword: \"regexp\",\n    type: \"string\",\n    schemaType: [\"string\", \"object\"],\n    code(cxt: KeywordCxt) {\n      const {data, schema} = cxt\n      const regx = getRegExp(schema)\n      cxt.pass(_`${regx}.test(${data})`)\n\n      function getRegExp(sch: string | RegexpSchema): Name {\n        if (typeof sch == \"object\") return usePattern(cxt, sch.pattern, sch.flags)\n        const rx = metaRegexp.exec(sch)\n        if (rx) return usePattern(cxt, rx[1], rx[2])\n        throw new Error(\"cannot parse string into RegExp\")\n      }\n    },\n    metaSchema: {\n      anyOf: [{type: \"string\"}, regexpMetaSchema],\n    },\n  }\n}\n\nmodule.exports = getDef\n"]},"metadata":{},"sourceType":"script"}