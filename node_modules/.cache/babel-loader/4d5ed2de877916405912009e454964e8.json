{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configLoader = exports.loadConfig = void 0;\n\nvar TsConfigLoader2 = require(\"./tsconfig-loader\");\n\nvar path = require(\"path\");\n\nvar options_1 = require(\"./options\");\n\nfunction loadConfig(cwd) {\n  if (cwd === void 0) {\n    cwd = options_1.options.cwd;\n  }\n\n  return configLoader({\n    cwd: cwd\n  });\n}\n\nexports.loadConfig = loadConfig;\n\nfunction configLoader(_a) {\n  var cwd = _a.cwd,\n      explicitParams = _a.explicitParams,\n      _b = _a.tsConfigLoader,\n      tsConfigLoader = _b === void 0 ? TsConfigLoader2.tsConfigLoader : _b;\n\n  if (explicitParams) {\n    // tslint:disable-next-line:no-shadowed-variable\n    var absoluteBaseUrl_1 = path.isAbsolute(explicitParams.baseUrl) ? explicitParams.baseUrl : path.join(cwd, explicitParams.baseUrl);\n    return {\n      resultType: \"success\",\n      configFileAbsolutePath: \"\",\n      baseUrl: explicitParams.baseUrl,\n      absoluteBaseUrl: absoluteBaseUrl_1,\n      paths: explicitParams.paths,\n      mainFields: explicitParams.mainFields,\n      addMatchAll: explicitParams.addMatchAll\n    };\n  } // Load tsconfig and create path matching function\n\n\n  var loadResult = tsConfigLoader({\n    cwd: cwd,\n    getEnv: function (key) {\n      return process.env[key];\n    }\n  });\n\n  if (!loadResult.tsConfigPath) {\n    return {\n      resultType: \"failed\",\n      message: \"Couldn't find tsconfig.json\"\n    };\n  }\n\n  if (!loadResult.baseUrl) {\n    return {\n      resultType: \"failed\",\n      message: \"Missing baseUrl in compilerOptions\"\n    };\n  }\n\n  var tsConfigDir = path.dirname(loadResult.tsConfigPath);\n  var absoluteBaseUrl = path.join(tsConfigDir, loadResult.baseUrl);\n  return {\n    resultType: \"success\",\n    configFileAbsolutePath: loadResult.tsConfigPath,\n    baseUrl: loadResult.baseUrl,\n    absoluteBaseUrl: absoluteBaseUrl,\n    paths: loadResult.paths || {}\n  };\n}\n\nexports.configLoader = configLoader;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAsCA,SAAgBA,UAAhB,CAA2BC,GAA3B,EAAoD;EAAzB;IAAAA,MAAcC,kBAAQD,GAAtB;EAAyB;;EAClD,OAAOE,YAAY,CAAC;IAAEF,GAAG,EAAEA;EAAP,CAAD,CAAnB;AACD;;AAFDG;;AAIA,SAAgBD,YAAhB,CAA6BE,EAA7B,EAIqB;MAHnBJ,GAAG;MACHK,cAAc;MACdC;MAAAC,cAAc,mBAAGC,eAAe,CAACD,cAAnB,GAAiCD;;EAE/C,IAAID,cAAJ,EAAoB;IAClB;IACA,IAAMI,iBAAe,GAAGC,IAAI,CAACC,UAAL,CAAgBN,cAAc,CAACO,OAA/B,IACpBP,cAAc,CAACO,OADK,GAEpBF,IAAI,CAACG,IAAL,CAAUb,GAAV,EAAeK,cAAc,CAACO,OAA9B,CAFJ;IAIA,OAAO;MACLE,UAAU,EAAE,SADP;MAELC,sBAAsB,EAAE,EAFnB;MAGLH,OAAO,EAAEP,cAAc,CAACO,OAHnB;MAILI,eAAe,mBAJV;MAKLC,KAAK,EAAEZ,cAAc,CAACY,KALjB;MAMLC,UAAU,EAAEb,cAAc,CAACa,UANtB;MAOLC,WAAW,EAAEd,cAAc,CAACc;IAPvB,CAAP;EASD,CAhBkB,CAkBnB;;;EACA,IAAMC,UAAU,GAAGb,cAAc,CAAC;IAChCP,GAAG,KAD6B;IAEhCqB,MAAM,EAAE,UAACC,GAAD,EAAY;MAAK,cAAO,CAACC,GAAR,CAAYD,GAAZ;IAAgB;EAFT,CAAD,CAAjC;;EAKA,IAAI,CAACF,UAAU,CAACI,YAAhB,EAA8B;IAC5B,OAAO;MACLV,UAAU,EAAE,QADP;MAELW,OAAO,EAAE;IAFJ,CAAP;EAID;;EAED,IAAI,CAACL,UAAU,CAACR,OAAhB,EAAyB;IACvB,OAAO;MACLE,UAAU,EAAE,QADP;MAELW,OAAO,EAAE;IAFJ,CAAP;EAID;;EAED,IAAMC,WAAW,GAAGhB,IAAI,CAACiB,OAAL,CAAaP,UAAU,CAACI,YAAxB,CAApB;EACA,IAAMR,eAAe,GAAGN,IAAI,CAACG,IAAL,CAAUa,WAAV,EAAuBN,UAAU,CAACR,OAAlC,CAAxB;EAEA,OAAO;IACLE,UAAU,EAAE,SADP;IAELC,sBAAsB,EAAEK,UAAU,CAACI,YAF9B;IAGLZ,OAAO,EAAEQ,UAAU,CAACR,OAHf;IAILI,eAAe,iBAJV;IAKLC,KAAK,EAAEG,UAAU,CAACH,KAAX,IAAoB;EALtB,CAAP;AAOD;;AApDDd","names":["loadConfig","cwd","options_1","configLoader","exports","_a","explicitParams","_b","tsConfigLoader","TsConfigLoader2","absoluteBaseUrl_1","path","isAbsolute","baseUrl","join","resultType","configFileAbsolutePath","absoluteBaseUrl","paths","mainFields","addMatchAll","loadResult","getEnv","key","env","tsConfigPath","message","tsConfigDir","dirname"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\tsconfig-paths\\src\\config-loader.ts"],"sourcesContent":["import * as TsConfigLoader2 from \"./tsconfig-loader\";\nimport * as path from \"path\";\nimport { options } from \"./options\";\n\nexport interface ExplicitParams {\n  baseUrl: string;\n  paths: { [key: string]: Array<string> };\n  mainFields?: Array<string>;\n  addMatchAll?: boolean;\n}\n\nexport type TsConfigLoader = (\n  params: TsConfigLoader2.TsConfigLoaderParams\n) => TsConfigLoader2.TsConfigLoaderResult;\n\nexport interface ConfigLoaderParams {\n  cwd: string;\n  explicitParams?: ExplicitParams;\n  tsConfigLoader?: TsConfigLoader;\n}\n\nexport interface ConfigLoaderSuccessResult {\n  resultType: \"success\";\n  configFileAbsolutePath: string;\n  baseUrl: string;\n  absoluteBaseUrl: string;\n  paths: { [key: string]: Array<string> };\n  mainFields?: Array<string>;\n  addMatchAll?: boolean;\n}\n\nexport interface ConfigLoaderFailResult {\n  resultType: \"failed\";\n  message: string;\n}\n\nexport type ConfigLoaderResult =\n  | ConfigLoaderSuccessResult\n  | ConfigLoaderFailResult;\n\nexport function loadConfig(cwd: string = options.cwd): ConfigLoaderResult {\n  return configLoader({ cwd: cwd });\n}\n\nexport function configLoader({\n  cwd,\n  explicitParams,\n  tsConfigLoader = TsConfigLoader2.tsConfigLoader,\n}: ConfigLoaderParams): ConfigLoaderResult {\n  if (explicitParams) {\n    // tslint:disable-next-line:no-shadowed-variable\n    const absoluteBaseUrl = path.isAbsolute(explicitParams.baseUrl)\n      ? explicitParams.baseUrl\n      : path.join(cwd, explicitParams.baseUrl);\n\n    return {\n      resultType: \"success\",\n      configFileAbsolutePath: \"\",\n      baseUrl: explicitParams.baseUrl,\n      absoluteBaseUrl,\n      paths: explicitParams.paths,\n      mainFields: explicitParams.mainFields,\n      addMatchAll: explicitParams.addMatchAll,\n    };\n  }\n\n  // Load tsconfig and create path matching function\n  const loadResult = tsConfigLoader({\n    cwd,\n    getEnv: (key: string) => process.env[key],\n  });\n\n  if (!loadResult.tsConfigPath) {\n    return {\n      resultType: \"failed\",\n      message: \"Couldn't find tsconfig.json\",\n    };\n  }\n\n  if (!loadResult.baseUrl) {\n    return {\n      resultType: \"failed\",\n      message: \"Missing baseUrl in compilerOptions\",\n    };\n  }\n\n  const tsConfigDir = path.dirname(loadResult.tsConfigPath);\n  const absoluteBaseUrl = path.join(tsConfigDir, loadResult.baseUrl);\n\n  return {\n    resultType: \"success\",\n    configFileAbsolutePath: loadResult.tsConfigPath,\n    baseUrl: loadResult.baseUrl,\n    absoluteBaseUrl,\n    paths: loadResult.paths || {},\n  };\n}\n"]},"metadata":{},"sourceType":"script"}