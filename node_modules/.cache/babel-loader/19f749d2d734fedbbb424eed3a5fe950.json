{"ast":null,"code":"import { shorthandData } from './shorthand-data.mjs';\nconst builtInOrders = ['alphabetical', 'concentric-css', 'smacss'];\nexport const cssDeclarationSorter = function () {\n  let {\n    order = 'alphabetical',\n    keepOverrides = false\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    postcssPlugin: 'css-declaration-sorter',\n\n    OnceExit(css) {\n      let withKeepOverrides = comparator => comparator;\n\n      if (keepOverrides) {\n        withKeepOverrides = withOverridesComparator(shorthandData);\n      }\n\n      if (typeof order === 'function') {\n        return processCss({\n          css,\n          comparator: withKeepOverrides(order)\n        });\n      }\n\n      if (!builtInOrders.includes(order)) return Promise.reject(Error([`Invalid built-in order '${order}' provided.`, `Available built-in orders are: ${builtInOrders}`].join('\\n')));\n      return import(`../orders/${order}.mjs`).then(_ref => {\n        let {\n          properties\n        } = _ref;\n        return processCss({\n          css,\n          comparator: withKeepOverrides(orderComparator(properties))\n        });\n      });\n    }\n\n  };\n};\ncssDeclarationSorter.postcss = true; // Kept for backward compatibility\n\nexport default cssDeclarationSorter;\n\nfunction processCss(_ref2) {\n  let {\n    css,\n    comparator\n  } = _ref2;\n  const comments = [];\n  const rulesCache = [];\n  css.walk(node => {\n    const nodes = node.nodes;\n    const type = node.type;\n\n    if (type === 'comment') {\n      // Don't do anything to root comments or the last newline comment\n      const isNewlineNode = node.raws.before && node.raws.before.includes('\\n');\n      const lastNewlineNode = isNewlineNode && !node.next();\n      const onlyNode = !node.prev() && !node.next() || !node.parent;\n\n      if (lastNewlineNode || onlyNode || node.parent.type === 'root') {\n        return;\n      }\n\n      if (isNewlineNode) {\n        const pairedNode = node.next() || node.prev();\n\n        if (pairedNode) {\n          comments.unshift({\n            'comment': node,\n            'pairedNode': pairedNode,\n            'insertPosition': node.next() ? 'Before' : 'After'\n          });\n          node.remove();\n        }\n      } else {\n        const pairedNode = node.prev() || node.next();\n\n        if (pairedNode) {\n          comments.push({\n            'comment': node,\n            'pairedNode': pairedNode,\n            'insertPosition': 'After'\n          });\n          node.remove();\n        }\n      }\n\n      return;\n    } // Add rule-like nodes to a cache so that we can remove all\n    // comment nodes before we start sorting.\n\n\n    const isRule = type === 'rule' || type === 'atrule';\n\n    if (isRule && nodes && nodes.length > 1) {\n      rulesCache.push(nodes);\n    }\n  }); // Perform a sort once all comment nodes are removed\n\n  rulesCache.forEach(nodes => {\n    sortCssDeclarations({\n      nodes,\n      comparator\n    });\n  }); // Add comments back to the nodes they are paired with\n\n  comments.forEach(node => {\n    const pairedNode = node.pairedNode;\n    node.comment.remove();\n    pairedNode.parent && pairedNode.parent['insert' + node.insertPosition](pairedNode, node.comment);\n  });\n}\n\nfunction sortCssDeclarations(_ref3) {\n  let {\n    nodes,\n    comparator\n  } = _ref3;\n  nodes.sort((a, b) => {\n    if (a.type === 'decl' && b.type === 'decl') {\n      return comparator(a.prop, b.prop);\n    } else {\n      return compareDifferentType(a, b);\n    }\n  });\n}\n\nfunction withOverridesComparator(shorthandData) {\n  return function (comparator) {\n    return function (a, b) {\n      a = removeVendorPrefix(a);\n      b = removeVendorPrefix(b);\n      if (shorthandData[a] && shorthandData[a].includes(b)) return 0;\n      if (shorthandData[b] && shorthandData[b].includes(a)) return 0;\n      return comparator(a, b);\n    };\n  };\n}\n\nfunction orderComparator(order) {\n  return function (a, b) {\n    return order.indexOf(a) - order.indexOf(b);\n  };\n}\n\nfunction compareDifferentType(a, b) {\n  if (b.type === 'atrule') {\n    return 0;\n  }\n\n  return a.type === 'decl' ? -1 : b.type === 'decl' ? 1 : 0;\n}\n\nfunction removeVendorPrefix(property) {\n  return property.replace(/^-\\w+-/, '');\n}","map":{"version":3,"names":["shorthandData","builtInOrders","cssDeclarationSorter","order","keepOverrides","postcssPlugin","OnceExit","css","withKeepOverrides","comparator","withOverridesComparator","processCss","includes","Promise","reject","Error","join","then","properties","orderComparator","postcss","comments","rulesCache","walk","node","nodes","type","isNewlineNode","raws","before","lastNewlineNode","next","onlyNode","prev","parent","pairedNode","unshift","remove","push","isRule","length","forEach","sortCssDeclarations","comment","insertPosition","sort","a","b","prop","compareDifferentType","removeVendorPrefix","indexOf","property","replace"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/css-declaration-sorter/src/main.mjs"],"sourcesContent":["import { shorthandData } from './shorthand-data.mjs';\n\nconst builtInOrders = [\n  'alphabetical',\n  'concentric-css',\n  'smacss',\n];\n\nexport const cssDeclarationSorter = ({ order = 'alphabetical', keepOverrides = false } = {}) => ({\n  postcssPlugin: 'css-declaration-sorter',\n  OnceExit (css) {\n    let withKeepOverrides = comparator => comparator;\n    if (keepOverrides) {\n      withKeepOverrides = withOverridesComparator(shorthandData);\n    }\n\n    if (typeof order === 'function') {\n      return processCss({ css, comparator: withKeepOverrides(order) });\n    }\n\n    if (!builtInOrders.includes(order))\n      return Promise.reject(\n        Error([\n          `Invalid built-in order '${order}' provided.`,\n          `Available built-in orders are: ${builtInOrders}`,\n        ].join('\\n'))\n      );\n\n    return import(`../orders/${order}.mjs`)\n      .then(({ properties }) => processCss({\n        css,\n        comparator: withKeepOverrides(orderComparator(properties)),\n      }));\n  },\n});\n\ncssDeclarationSorter.postcss = true;\n\n// Kept for backward compatibility\nexport default cssDeclarationSorter;\n\nfunction processCss ({ css, comparator }) {\n  const comments = [];\n  const rulesCache = [];\n\n  css.walk(node => {\n    const nodes = node.nodes;\n    const type = node.type;\n\n    if (type === 'comment') {\n      // Don't do anything to root comments or the last newline comment\n      const isNewlineNode = node.raws.before && node.raws.before.includes('\\n');\n      const lastNewlineNode = isNewlineNode && !node.next();\n      const onlyNode = !node.prev() && !node.next() || !node.parent;\n\n      if (lastNewlineNode || onlyNode || node.parent.type === 'root') {\n        return;\n      }\n\n      if (isNewlineNode) {\n        const pairedNode = node.next() || node.prev();\n        if (pairedNode) {\n          comments.unshift({\n            'comment': node,\n            'pairedNode': pairedNode,\n            'insertPosition': node.next() ? 'Before' : 'After',\n          });\n          node.remove();\n        }\n      } else {\n        const pairedNode = node.prev() || node.next();\n        if (pairedNode) {\n          comments.push({\n            'comment': node,\n            'pairedNode': pairedNode,\n            'insertPosition': 'After',\n          });\n          node.remove();\n        }\n      }\n      return;\n    }\n\n    // Add rule-like nodes to a cache so that we can remove all\n    // comment nodes before we start sorting.\n    const isRule = type === 'rule' || type === 'atrule';\n    if (isRule && nodes && nodes.length > 1) {\n      rulesCache.push(nodes);\n    }\n  });\n\n  // Perform a sort once all comment nodes are removed\n  rulesCache.forEach(nodes => {\n    sortCssDeclarations({ nodes, comparator });\n  });\n\n  // Add comments back to the nodes they are paired with\n  comments.forEach(node => {\n    const pairedNode = node.pairedNode;\n    node.comment.remove();\n    pairedNode.parent && pairedNode.parent['insert' + node.insertPosition](pairedNode, node.comment);\n  });\n}\n\nfunction sortCssDeclarations ({ nodes, comparator }) {\n  nodes.sort((a, b) => {\n    if (a.type === 'decl' && b.type === 'decl') {\n      return comparator(a.prop, b.prop);\n    } else {\n      return compareDifferentType(a, b);\n    }\n  });\n}\n\nfunction withOverridesComparator (shorthandData) {\n  return function (comparator) {\n    return function (a, b) {\n      a = removeVendorPrefix(a);\n      b = removeVendorPrefix(b);\n\n      if (shorthandData[a] && shorthandData[a].includes(b)) return 0;\n      if (shorthandData[b] && shorthandData[b].includes(a)) return 0;\n\n      return comparator(a, b);\n    };\n  };\n}\n\nfunction orderComparator (order) {\n  return function (a, b) {\n    return order.indexOf(a) - order.indexOf(b);\n  };\n}\n\nfunction compareDifferentType (a, b) {\n  if (b.type === 'atrule') {\n    return 0;\n  }\n\n  return a.type === 'decl' ? -1 : b.type === 'decl' ? 1 : 0;\n}\n\nfunction removeVendorPrefix (property) {\n  return property.replace(/^-\\w+-/, '');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}