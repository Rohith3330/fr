{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ariaQuery = require(\"aria-query\");\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n/**\n * @fileoverview Enforce ARIA state and property values are valid.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\n\nvar errorMessage = function errorMessage(name, type, permittedValues) {\n  switch (type) {\n    case 'tristate':\n      return \"The value for \".concat(name, \" must be a boolean or the string \\\"mixed\\\".\");\n\n    case 'token':\n      return \"The value for \".concat(name, \" must be a single token from the following: \").concat(permittedValues, \".\");\n\n    case 'tokenlist':\n      return \"The value for \".concat(name, \" must be a list of one or more tokens from the following: \").concat(permittedValues, \".\");\n\n    case 'idlist':\n      return \"The value for \".concat(name, \" must be a list of strings that represent DOM element IDs (idlist)\");\n\n    case 'id':\n      return \"The value for \".concat(name, \" must be a string that represents a DOM element ID\");\n\n    case 'boolean':\n    case 'string':\n    case 'integer':\n    case 'number':\n    default:\n      return \"The value for \".concat(name, \" must be a \").concat(type, \".\");\n  }\n};\n\nvar validityCheck = function validityCheck(value, expectedType, permittedValues) {\n  switch (expectedType) {\n    case 'boolean':\n      return typeof value === 'boolean';\n\n    case 'string':\n    case 'id':\n      return typeof value === 'string';\n\n    case 'tristate':\n      return typeof value === 'boolean' || value === 'mixed';\n\n    case 'integer':\n    case 'number':\n      // Booleans resolve to 0/1 values so hard check that it's not first.\n      // eslint-disable-next-line no-restricted-globals\n      return typeof value !== 'boolean' && isNaN(Number(value)) === false;\n\n    case 'token':\n      return permittedValues.indexOf(typeof value === 'string' ? value.toLowerCase() : value) > -1;\n\n    case 'idlist':\n      return typeof value === 'string' && value.split(' ').every(function (token) {\n        return validityCheck(token, 'id', []);\n      });\n\n    case 'tokenlist':\n      return typeof value === 'string' && value.split(' ').every(function (token) {\n        return permittedValues.indexOf(token.toLowerCase()) > -1;\n      });\n\n    default:\n      return false;\n  }\n};\n\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = {\n  validityCheck,\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md',\n      description: 'Enforce ARIA state and property values are valid.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        var name = (0, _jsxAstUtils.propName)(attribute);\n        var normalizedName = name.toLowerCase(); // Not a valid aria-* state or property.\n\n        if (normalizedName.indexOf('aria-') !== 0 || _ariaQuery.aria.get(normalizedName) === undefined) {\n          return;\n        } // Ignore the attribute if its value is null or undefined.\n\n\n        if ((0, _jsxAstUtils.getPropValue)(attribute) == null) return;\n        var value = (0, _jsxAstUtils.getLiteralPropValue)(attribute); // Ignore the attribute if its value is not a literal.\n\n        if (value === null) {\n          return;\n        } // These are the attributes of the property/state to check against.\n\n\n        var attributes = _ariaQuery.aria.get(normalizedName);\n\n        var permittedType = attributes.type;\n        var allowUndefined = attributes.allowUndefined || false;\n        var permittedValues = attributes.values || [];\n        var isValid = validityCheck(value, permittedType, permittedValues) || allowUndefined && value === undefined;\n\n        if (isValid) {\n          return;\n        }\n\n        context.report({\n          node: attribute,\n          message: errorMessage(name, permittedType, permittedValues)\n        });\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","_ariaQuery","require","_jsxAstUtils","_schemas","errorMessage","name","type","permittedValues","concat","validityCheck","expectedType","isNaN","Number","indexOf","toLowerCase","split","every","token","schema","generateObjSchema","_default","meta","docs","url","description","create","context","JSXAttribute","attribute","propName","normalizedName","aria","get","undefined","getPropValue","getLiteralPropValue","attributes","permittedType","allowUndefined","values","isValid","report","node","message","module","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/lib/rules/aria-proptypes.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ariaQuery = require(\"aria-query\");\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\n/**\n * @fileoverview Enforce ARIA state and property values are valid.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\nvar errorMessage = function errorMessage(name, type, permittedValues) {\n  switch (type) {\n    case 'tristate':\n      return \"The value for \".concat(name, \" must be a boolean or the string \\\"mixed\\\".\");\n\n    case 'token':\n      return \"The value for \".concat(name, \" must be a single token from the following: \").concat(permittedValues, \".\");\n\n    case 'tokenlist':\n      return \"The value for \".concat(name, \" must be a list of one or more tokens from the following: \").concat(permittedValues, \".\");\n\n    case 'idlist':\n      return \"The value for \".concat(name, \" must be a list of strings that represent DOM element IDs (idlist)\");\n\n    case 'id':\n      return \"The value for \".concat(name, \" must be a string that represents a DOM element ID\");\n\n    case 'boolean':\n    case 'string':\n    case 'integer':\n    case 'number':\n    default:\n      return \"The value for \".concat(name, \" must be a \").concat(type, \".\");\n  }\n};\n\nvar validityCheck = function validityCheck(value, expectedType, permittedValues) {\n  switch (expectedType) {\n    case 'boolean':\n      return typeof value === 'boolean';\n\n    case 'string':\n    case 'id':\n      return typeof value === 'string';\n\n    case 'tristate':\n      return typeof value === 'boolean' || value === 'mixed';\n\n    case 'integer':\n    case 'number':\n      // Booleans resolve to 0/1 values so hard check that it's not first.\n      // eslint-disable-next-line no-restricted-globals\n      return typeof value !== 'boolean' && isNaN(Number(value)) === false;\n\n    case 'token':\n      return permittedValues.indexOf(typeof value === 'string' ? value.toLowerCase() : value) > -1;\n\n    case 'idlist':\n      return typeof value === 'string' && value.split(' ').every(function (token) {\n        return validityCheck(token, 'id', []);\n      });\n\n    case 'tokenlist':\n      return typeof value === 'string' && value.split(' ').every(function (token) {\n        return permittedValues.indexOf(token.toLowerCase()) > -1;\n      });\n\n    default:\n      return false;\n  }\n};\n\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = {\n  validityCheck,\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md',\n      description: 'Enforce ARIA state and property values are valid.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        var name = (0, _jsxAstUtils.propName)(attribute);\n        var normalizedName = name.toLowerCase(); // Not a valid aria-* state or property.\n\n        if (normalizedName.indexOf('aria-') !== 0 || _ariaQuery.aria.get(normalizedName) === undefined) {\n          return;\n        } // Ignore the attribute if its value is null or undefined.\n\n\n        if ((0, _jsxAstUtils.getPropValue)(attribute) == null) return;\n        var value = (0, _jsxAstUtils.getLiteralPropValue)(attribute); // Ignore the attribute if its value is not a literal.\n\n        if (value === null) {\n          return;\n        } // These are the attributes of the property/state to check against.\n\n\n        var attributes = _ariaQuery.aria.get(normalizedName);\n\n        var permittedType = attributes.type;\n        var allowUndefined = attributes.allowUndefined || false;\n        var permittedValues = attributes.values || [];\n        var isValid = validityCheck(value, permittedType, permittedValues) || allowUndefined && value === undefined;\n\n        if (isValid) {\n          return;\n        }\n\n        context.report({\n          node: attribute,\n          message: errorMessage(name, permittedType, permittedValues)\n        });\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}