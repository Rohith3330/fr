{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Rohith\\\\Pictures\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedGather } from '@tensorflow/tfjs-core';\nimport { raggedGatherImpl } from './RaggedGather_impl';\nexport function raggedGather(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var paramsNestedSplits = inputs.paramsNestedSplits,\n    paramsDenseValues = inputs.paramsDenseValues,\n    indices = inputs.indices;\n  var outputRaggedRank = attrs.outputRaggedRank;\n  var $paramsNestedSplits = paramsNestedSplits.map(function (t) {\n    return backend.data.get(t.dataId).values;\n  });\n  var $paramsNestedSplitsShapes = paramsNestedSplits.map(function (t) {\n    return t.shape;\n  });\n  var $paramsDenseValues = backend.data.get(paramsDenseValues.dataId).values;\n  var $indices = backend.data.get(indices.dataId).values;\n  var _raggedGatherImpl = raggedGatherImpl($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank),\n    _raggedGatherImpl2 = _slicedToArray(_raggedGatherImpl, 3),\n    outputNestedSplits = _raggedGatherImpl2[0],\n    outputDenseValues = _raggedGatherImpl2[1],\n    outputDenseValuesShape = _raggedGatherImpl2[2];\n  var outputNestedSplitsTensors = outputNestedSplits.map(function (splits) {\n    return backend.makeTensorInfo([splits.length], 'int32', splits);\n  });\n  var outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\nexport var raggedGatherConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather\n};","map":null,"metadata":{},"sourceType":"module"}