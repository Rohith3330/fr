{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;\n\nconst errors_1 = require(\"../errors\");\n\nconst codegen_1 = require(\"../codegen\");\n\nconst names_1 = require(\"../names\");\n\nconst boolError = {\n  message: \"boolean schema is false\"\n};\n\nfunction topBoolOrEmptySchema(it) {\n  const {\n    gen,\n    schema,\n    validateName\n  } = it;\n\n  if (schema === false) {\n    falseSchemaError(it, false);\n  } else if (typeof schema == \"object\" && schema.$async === true) {\n    gen.return(names_1.default.data);\n  } else {\n    gen.assign((0, codegen_1._)`${validateName}.errors`, null);\n    gen.return(true);\n  }\n}\n\nexports.topBoolOrEmptySchema = topBoolOrEmptySchema;\n\nfunction boolOrEmptySchema(it, valid) {\n  const {\n    gen,\n    schema\n  } = it;\n\n  if (schema === false) {\n    gen.var(valid, false); // TODO var\n\n    falseSchemaError(it);\n  } else {\n    gen.var(valid, true); // TODO var\n  }\n}\n\nexports.boolOrEmptySchema = boolOrEmptySchema;\n\nfunction falseSchemaError(it, overrideAllErrors) {\n  const {\n    gen,\n    data\n  } = it; // TODO maybe some other interface should be used for non-keyword validation errors...\n\n  const cxt = {\n    gen,\n    keyword: \"false schema\",\n    data,\n    schema: false,\n    schemaCode: false,\n    schemaValue: false,\n    params: {},\n    it\n  };\n  (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);\n}","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AACA;;AAEA,MAAMA,SAAS,GAA2B;EACxCC,OAAO,EAAE;AAD+B,CAA1C;;AAIA,SAAgBC,oBAAhB,CAAqCC,EAArC,EAAkD;EAChD,MAAM;IAACC,GAAD;IAAMC,MAAN;IAAcC;EAAd,IAA8BH,EAApC;;EACA,IAAIE,MAAM,KAAK,KAAf,EAAsB;IACpBE,gBAAgB,CAACJ,EAAD,EAAK,KAAL,CAAhB;EACD,CAFD,MAEO,IAAI,OAAOE,MAAP,IAAiB,QAAjB,IAA6BA,MAAM,CAACG,MAAP,KAAkB,IAAnD,EAAyD;IAC9DJ,GAAG,CAACK,MAAJ,CAAWC,gBAAEC,IAAb;EACD,CAFM,MAEA;IACLP,GAAG,CAACQ,MAAJ,CAAW,gBAAC,GAAGN,YAAY,SAA3B,EAAsC,IAAtC;IACAF,GAAG,CAACK,MAAJ,CAAW,IAAX;EACD;AACF;;AAVDI;;AAYA,SAAgBC,iBAAhB,CAAkCX,EAAlC,EAAiDY,KAAjD,EAA4D;EAC1D,MAAM;IAACX,GAAD;IAAMC;EAAN,IAAgBF,EAAtB;;EACA,IAAIE,MAAM,KAAK,KAAf,EAAsB;IACpBD,GAAG,CAACY,GAAJ,CAAQD,KAAR,EAAe,KAAf,EADoB,CACE;;IACtBR,gBAAgB,CAACJ,EAAD,CAAhB;EACD,CAHD,MAGO;IACLC,GAAG,CAACY,GAAJ,CAAQD,KAAR,EAAe,IAAf,EADK,CACgB;EACtB;AACF;;AARDF;;AAUA,SAASN,gBAAT,CAA0BJ,EAA1B,EAAyCc,iBAAzC,EAAoE;EAClE,MAAM;IAACb,GAAD;IAAMO;EAAN,IAAcR,EAApB,CADkE,CAElE;;EACA,MAAMe,GAAG,GAAoB;IAC3Bd,GAD2B;IAE3Be,OAAO,EAAE,cAFkB;IAG3BR,IAH2B;IAI3BN,MAAM,EAAE,KAJmB;IAK3Be,UAAU,EAAE,KALe;IAM3BC,WAAW,EAAE,KANc;IAO3BC,MAAM,EAAE,EAPmB;IAQ3BnB;EAR2B,CAA7B;EAUA,0BAAYe,GAAZ,EAAiBlB,SAAjB,EAA4BuB,SAA5B,EAAuCN,iBAAvC;AACD","names":["boolError","message","topBoolOrEmptySchema","it","gen","schema","validateName","falseSchemaError","$async","return","names_1","data","assign","exports","boolOrEmptySchema","valid","var","overrideAllErrors","cxt","keyword","schemaCode","schemaValue","params","undefined"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\compile\\validate\\boolSchema.ts"],"sourcesContent":["import type {KeywordErrorDefinition, KeywordErrorCxt} from \"../../types\"\nimport type {SchemaCxt} from \"..\"\nimport {reportError} from \"../errors\"\nimport {_, Name} from \"../codegen\"\nimport N from \"../names\"\n\nconst boolError: KeywordErrorDefinition = {\n  message: \"boolean schema is false\",\n}\n\nexport function topBoolOrEmptySchema(it: SchemaCxt): void {\n  const {gen, schema, validateName} = it\n  if (schema === false) {\n    falseSchemaError(it, false)\n  } else if (typeof schema == \"object\" && schema.$async === true) {\n    gen.return(N.data)\n  } else {\n    gen.assign(_`${validateName}.errors`, null)\n    gen.return(true)\n  }\n}\n\nexport function boolOrEmptySchema(it: SchemaCxt, valid: Name): void {\n  const {gen, schema} = it\n  if (schema === false) {\n    gen.var(valid, false) // TODO var\n    falseSchemaError(it)\n  } else {\n    gen.var(valid, true) // TODO var\n  }\n}\n\nfunction falseSchemaError(it: SchemaCxt, overrideAllErrors?: boolean): void {\n  const {gen, data} = it\n  // TODO maybe some other interface should be used for non-keyword validation errors...\n  const cxt: KeywordErrorCxt = {\n    gen,\n    keyword: \"false schema\",\n    data,\n    schema: false,\n    schemaCode: false,\n    schemaValue: false,\n    params: {},\n    it,\n  }\n  reportError(cxt, boolError, undefined, overrideAllErrors)\n}\n"]},"metadata":{},"sourceType":"script"}