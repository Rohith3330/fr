{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.camelCase = exports.camelCaseTransformMerge = exports.camelCaseTransform = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar pascal_case_1 = require(\"pascal-case\");\n\nfunction camelCaseTransform(input, index) {\n  if (index === 0) return input.toLowerCase();\n  return pascal_case_1.pascalCaseTransform(input, index);\n}\n\nexports.camelCaseTransform = camelCaseTransform;\n\nfunction camelCaseTransformMerge(input, index) {\n  if (index === 0) return input.toLowerCase();\n  return pascal_case_1.pascalCaseTransformMerge(input);\n}\n\nexports.camelCaseTransformMerge = camelCaseTransformMerge;\n\nfunction camelCase(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return pascal_case_1.pascalCase(input, tslib_1.__assign({\n    transform: camelCaseTransform\n  }, options));\n}\n\nexports.camelCase = camelCase;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AASA,SAAgBA,kBAAhB,CAAmCC,KAAnC,EAAkDC,KAAlD,EAA+D;EAC7D,IAAIA,KAAK,KAAK,CAAd,EAAiB,OAAOD,KAAK,CAACE,WAAN,EAAP;EACjB,OAAOC,kCAAoBH,KAApB,EAA2BC,KAA3B,CAAP;AACD;;AAHDG;;AAKA,SAAgBC,uBAAhB,CAAwCL,KAAxC,EAAuDC,KAAvD,EAAoE;EAClE,IAAIA,KAAK,KAAK,CAAd,EAAiB,OAAOD,KAAK,CAACE,WAAN,EAAP;EACjB,OAAOC,uCAAyBH,KAAzB,CAAP;AACD;;AAHDI;;AAKA,SAAgBE,SAAhB,CAA0BN,KAA1B,EAAyCO,OAAzC,EAA8D;EAArB;IAAAA;EAAqB;;EAC5D,OAAOJ,yBAAWH,KAAX,EAAgBQ;IACrBC,SAAS,EAAEV;EADU,GAElBQ,OAFkB,CAAhB,CAAP;AAID;;AALDH","names":["camelCaseTransform","input","index","toLowerCase","pascal_case_1","exports","camelCaseTransformMerge","camelCase","options","tslib_1","transform"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\camel-case\\src\\index.ts"],"sourcesContent":["import {\n  pascalCase,\n  pascalCaseTransform,\n  pascalCaseTransformMerge,\n  Options,\n} from \"pascal-case\";\n\nexport { Options };\n\nexport function camelCaseTransform(input: string, index: number) {\n  if (index === 0) return input.toLowerCase();\n  return pascalCaseTransform(input, index);\n}\n\nexport function camelCaseTransformMerge(input: string, index: number) {\n  if (index === 0) return input.toLowerCase();\n  return pascalCaseTransformMerge(input);\n}\n\nexport function camelCase(input: string, options: Options = {}) {\n  return pascalCase(input, {\n    transform: camelCaseTransform,\n    ...options,\n  });\n}\n"]},"metadata":{},"sourceType":"script"}