{"ast":null,"code":"/**\n * @fileoverview Rule to enforce that all class methods use 'this'.\n * @author Patrick Williams\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Enforce that class methods utilize `this`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/class-methods-use-this\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptMethods: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        },\n        enforceForClassFields: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missingThis: \"Expected 'this' to be used by class {{name}}.\"\n    }\n  },\n\n  create(context) {\n    const config = Object.assign({}, context.options[0]);\n    const enforceForClassFields = config.enforceForClassFields !== false;\n    const exceptMethods = new Set(config.exceptMethods || []);\n    const stack = [];\n    /**\n     * Push `this` used flag initialized with `false` onto the stack.\n     * @returns {void}\n     */\n\n    function pushContext() {\n      stack.push(false);\n    }\n    /**\n     * Pop `this` used flag from the stack.\n     * @returns {boolean | undefined} `this` used flag\n     */\n\n\n    function popContext() {\n      return stack.pop();\n    }\n    /**\n     * Initializes the current context to false and pushes it onto the stack.\n     * These booleans represent whether 'this' has been used in the context.\n     * @returns {void}\n     * @private\n     */\n\n\n    function enterFunction() {\n      pushContext();\n    }\n    /**\n     * Check if the node is an instance method\n     * @param {ASTNode} node node to check\n     * @returns {boolean} True if its an instance method\n     * @private\n     */\n\n\n    function isInstanceMethod(node) {\n      switch (node.type) {\n        case \"MethodDefinition\":\n          return !node.static && node.kind !== \"constructor\";\n\n        case \"PropertyDefinition\":\n          return !node.static && enforceForClassFields;\n\n        default:\n          return false;\n      }\n    }\n    /**\n     * Check if the node is an instance method not excluded by config\n     * @param {ASTNode} node node to check\n     * @returns {boolean} True if it is an instance method, and not excluded by config\n     * @private\n     */\n\n\n    function isIncludedInstanceMethod(node) {\n      if (isInstanceMethod(node)) {\n        if (node.computed) {\n          return true;\n        }\n\n        const hashIfNeeded = node.key.type === \"PrivateIdentifier\" ? \"#\" : \"\";\n        const name = node.key.type === \"Literal\" ? astUtils.getStaticStringValue(node.key) : node.key.name || \"\";\n        return !exceptMethods.has(hashIfNeeded + name);\n      }\n\n      return false;\n    }\n    /**\n     * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.\n     * Static methods and the constructor are exempt.\n     * Then pops the context off the stack.\n     * @param {ASTNode} node A function node that was entered.\n     * @returns {void}\n     * @private\n     */\n\n\n    function exitFunction(node) {\n      const methodUsesThis = popContext();\n\n      if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {\n        context.report({\n          node,\n          loc: astUtils.getFunctionHeadLoc(node, context.getSourceCode()),\n          messageId: \"missingThis\",\n          data: {\n            name: astUtils.getFunctionNameWithKind(node)\n          }\n        });\n      }\n    }\n    /**\n     * Mark the current context as having used 'this'.\n     * @returns {void}\n     * @private\n     */\n\n\n    function markThisUsed() {\n      if (stack.length) {\n        stack[stack.length - 1] = true;\n      }\n    }\n\n    return {\n      FunctionDeclaration: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      FunctionExpression: enterFunction,\n      \"FunctionExpression:exit\": exitFunction,\n\n      /*\n       * Class field value are implicit functions.\n       */\n      \"PropertyDefinition > *.key:exit\": pushContext,\n      \"PropertyDefinition:exit\": popContext,\n\n      /*\n       * Class static blocks are implicit functions. They aren't required to use `this`,\n       * but we have to push context so that it captures any use of `this` in the static block\n       * separately from enclosing contexts, because static blocks have their own `this` and it\n       * shouldn't count as used `this` in enclosing contexts.\n       */\n      StaticBlock: pushContext,\n      \"StaticBlock:exit\": popContext,\n      ThisExpression: markThisUsed,\n      Super: markThisUsed,\n      ...(enforceForClassFields && {\n        \"PropertyDefinition > ArrowFunctionExpression.value\": enterFunction,\n        \"PropertyDefinition > ArrowFunctionExpression.value:exit\": exitFunction\n      })\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","properties","exceptMethods","items","enforceForClassFields","default","additionalProperties","messages","missingThis","create","context","config","Object","assign","options","Set","stack","pushContext","push","popContext","pop","enterFunction","isInstanceMethod","node","static","kind","isIncludedInstanceMethod","computed","hashIfNeeded","key","name","getStaticStringValue","has","exitFunction","methodUsesThis","parent","report","loc","getFunctionHeadLoc","getSourceCode","messageId","data","getFunctionNameWithKind","markThisUsed","length","FunctionDeclaration","FunctionExpression","StaticBlock","ThisExpression","Super"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/class-methods-use-this.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce that all class methods use 'this'.\n * @author Patrick Williams\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Enforce that class methods utilize `this`\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/class-methods-use-this\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                exceptMethods: {\n                    type: \"array\",\n                    items: {\n                        type: \"string\"\n                    }\n                },\n                enforceForClassFields: {\n                    type: \"boolean\",\n                    default: true\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            missingThis: \"Expected 'this' to be used by class {{name}}.\"\n        }\n    },\n    create(context) {\n        const config = Object.assign({}, context.options[0]);\n        const enforceForClassFields = config.enforceForClassFields !== false;\n        const exceptMethods = new Set(config.exceptMethods || []);\n\n        const stack = [];\n\n        /**\n         * Push `this` used flag initialized with `false` onto the stack.\n         * @returns {void}\n         */\n        function pushContext() {\n            stack.push(false);\n        }\n\n        /**\n         * Pop `this` used flag from the stack.\n         * @returns {boolean | undefined} `this` used flag\n         */\n        function popContext() {\n            return stack.pop();\n        }\n\n        /**\n         * Initializes the current context to false and pushes it onto the stack.\n         * These booleans represent whether 'this' has been used in the context.\n         * @returns {void}\n         * @private\n         */\n        function enterFunction() {\n            pushContext();\n        }\n\n        /**\n         * Check if the node is an instance method\n         * @param {ASTNode} node node to check\n         * @returns {boolean} True if its an instance method\n         * @private\n         */\n        function isInstanceMethod(node) {\n            switch (node.type) {\n                case \"MethodDefinition\":\n                    return !node.static && node.kind !== \"constructor\";\n                case \"PropertyDefinition\":\n                    return !node.static && enforceForClassFields;\n                default:\n                    return false;\n            }\n        }\n\n        /**\n         * Check if the node is an instance method not excluded by config\n         * @param {ASTNode} node node to check\n         * @returns {boolean} True if it is an instance method, and not excluded by config\n         * @private\n         */\n        function isIncludedInstanceMethod(node) {\n            if (isInstanceMethod(node)) {\n                if (node.computed) {\n                    return true;\n                }\n\n                const hashIfNeeded = node.key.type === \"PrivateIdentifier\" ? \"#\" : \"\";\n                const name = node.key.type === \"Literal\"\n                    ? astUtils.getStaticStringValue(node.key)\n                    : (node.key.name || \"\");\n\n                return !exceptMethods.has(hashIfNeeded + name);\n            }\n            return false;\n        }\n\n        /**\n         * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.\n         * Static methods and the constructor are exempt.\n         * Then pops the context off the stack.\n         * @param {ASTNode} node A function node that was entered.\n         * @returns {void}\n         * @private\n         */\n        function exitFunction(node) {\n            const methodUsesThis = popContext();\n\n            if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {\n                context.report({\n                    node,\n                    loc: astUtils.getFunctionHeadLoc(node, context.getSourceCode()),\n                    messageId: \"missingThis\",\n                    data: {\n                        name: astUtils.getFunctionNameWithKind(node)\n                    }\n                });\n            }\n        }\n\n        /**\n         * Mark the current context as having used 'this'.\n         * @returns {void}\n         * @private\n         */\n        function markThisUsed() {\n            if (stack.length) {\n                stack[stack.length - 1] = true;\n            }\n        }\n\n        return {\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n\n            /*\n             * Class field value are implicit functions.\n             */\n            \"PropertyDefinition > *.key:exit\": pushContext,\n            \"PropertyDefinition:exit\": popContext,\n\n            /*\n             * Class static blocks are implicit functions. They aren't required to use `this`,\n             * but we have to push context so that it captures any use of `this` in the static block\n             * separately from enclosing contexts, because static blocks have their own `this` and it\n             * shouldn't count as used `this` in enclosing contexts.\n             */\n            StaticBlock: pushContext,\n            \"StaticBlock:exit\": popContext,\n\n            ThisExpression: markThisUsed,\n            Super: markThisUsed,\n            ...(\n                enforceForClassFields && {\n                    \"PropertyDefinition > ArrowFunctionExpression.value\": enterFunction,\n                    \"PropertyDefinition > ArrowFunctionExpression.value:exit\": exitFunction\n                }\n            )\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}