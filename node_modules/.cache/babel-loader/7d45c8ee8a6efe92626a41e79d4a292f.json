{"ast":null,"code":"'use strict';\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar EXPORT_MESSAGE = 'Expected \"export\" or \"export default\"';\n/**\n * @fileoverview Rule to prefer ES6 to CJS\n * @author Jamund Ferguson\n */\n\nvar IMPORT_MESSAGE = 'Expected \"import\" instead of \"require()\"';\n\nfunction normalizeLegacyOptions(options) {\n  if (options.indexOf('allow-primitive-modules') >= 0) {\n    return {\n      allowPrimitiveModules: true\n    };\n  }\n\n  return options[0] || {};\n}\n\nfunction allowPrimitive(node, options) {\n  if (!options.allowPrimitiveModules) return false;\n  if (node.parent.type !== 'AssignmentExpression') return false;\n  return node.parent.right.type !== 'ObjectExpression';\n}\n\nfunction allowRequire(node, options) {\n  return options.allowRequire;\n}\n\nfunction allowConditionalRequire(node, options) {\n  return options.allowConditionalRequire !== false;\n}\n\nfunction validateScope(scope) {\n  return scope.variableScope.type === 'module';\n} // https://github.com/estree/estree/blob/HEAD/es5.md\n\n\nfunction isConditional(node) {\n  if (node.type === 'IfStatement' || node.type === 'TryStatement' || node.type === 'LogicalExpression' || node.type === 'ConditionalExpression') return true;\n  if (node.parent) return isConditional(node.parent);\n  return false;\n}\n\nfunction isLiteralString(node) {\n  return node.type === 'Literal' && typeof node.value === 'string' || node.type === 'TemplateLiteral' && node.expressions.length === 0;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nvar schemaString = {\n  'enum': ['allow-primitive-modules']\n};\nvar schemaObject = {\n  type: 'object',\n  properties: {\n    allowPrimitiveModules: {\n      'type': 'boolean'\n    },\n    allowRequire: {\n      'type': 'boolean'\n    },\n    allowConditionalRequire: {\n      'type': 'boolean'\n    }\n  },\n  additionalProperties: false\n};\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: (0, _docsUrl2['default'])('no-commonjs')\n    },\n    schema: {\n      anyOf: [{\n        type: 'array',\n        items: [schemaString],\n        additionalItems: false\n      }, {\n        type: 'array',\n        items: [schemaObject],\n        additionalItems: false\n      }]\n    }\n  },\n  create: function () {\n    function create(context) {\n      var options = normalizeLegacyOptions(context.options);\n      return {\n        'MemberExpression': function () {\n          function MemberExpression(node) {\n            // module.exports\n            if (node.object.name === 'module' && node.property.name === 'exports') {\n              if (allowPrimitive(node, options)) return;\n              context.report({\n                node: node,\n                message: EXPORT_MESSAGE\n              });\n            } // exports.\n\n\n            if (node.object.name === 'exports') {\n              var isInScope = context.getScope().variables.some(function (variable) {\n                return variable.name === 'exports';\n              });\n\n              if (!isInScope) {\n                context.report({\n                  node: node,\n                  message: EXPORT_MESSAGE\n                });\n              }\n            }\n          }\n\n          return MemberExpression;\n        }(),\n        'CallExpression': function () {\n          function CallExpression(call) {\n            if (!validateScope(context.getScope())) return;\n            if (call.callee.type !== 'Identifier') return;\n            if (call.callee.name !== 'require') return;\n            if (call.arguments.length !== 1) return;\n            if (!isLiteralString(call.arguments[0])) return;\n            if (allowRequire(call, options)) return;\n            if (allowConditionalRequire(call, options) && isConditional(call.parent)) return; // keeping it simple: all 1-string-arg `require` calls are reported\n\n            context.report({\n              node: call.callee,\n              message: IMPORT_MESSAGE\n            });\n          }\n\n          return CallExpression;\n        }()\n      };\n    }\n\n    return create;\n  }()\n};","map":{"version":3,"mappings":"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","names":["EXPORT_MESSAGE","IMPORT_MESSAGE","normalizeLegacyOptions","options","indexOf","allowPrimitiveModules","allowPrimitive","node","parent","type","right","allowRequire","allowConditionalRequire","validateScope","scope","variableScope","isConditional","isLiteralString","value","expressions","length","schemaString","schemaObject","properties","additionalProperties","module","exports","meta","docs","url","schema","anyOf","items","additionalItems","create","context","object","name","property","report","message","isInScope","getScope","variables","some","variable","call","callee","arguments"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\no-commonjs.js"],"sourcesContent":["/**\n * @fileoverview Rule to prefer ES6 to CJS\n * @author Jamund Ferguson\n */\n\nimport docsUrl from '../docsUrl';\n\nconst EXPORT_MESSAGE = 'Expected \"export\" or \"export default\"';\nconst IMPORT_MESSAGE = 'Expected \"import\" instead of \"require()\"';\n\nfunction normalizeLegacyOptions(options) {\n  if (options.indexOf('allow-primitive-modules') >= 0) {\n    return { allowPrimitiveModules: true };\n  }\n  return options[0] || {};\n}\n\nfunction allowPrimitive(node, options) {\n  if (!options.allowPrimitiveModules) return false;\n  if (node.parent.type !== 'AssignmentExpression') return false;\n  return (node.parent.right.type !== 'ObjectExpression');\n}\n\nfunction allowRequire(node, options) {\n  return options.allowRequire;\n}\n\nfunction allowConditionalRequire(node, options) {\n  return options.allowConditionalRequire !== false;\n}\n\nfunction validateScope(scope) {\n  return scope.variableScope.type === 'module';\n}\n\n// https://github.com/estree/estree/blob/HEAD/es5.md\nfunction isConditional(node) {\n  if (\n    node.type === 'IfStatement'\n    || node.type === 'TryStatement'\n    || node.type === 'LogicalExpression'\n    || node.type === 'ConditionalExpression'\n  ) return true;\n  if (node.parent) return isConditional(node.parent);\n  return false;\n}\n\nfunction isLiteralString(node) {\n  return (node.type === 'Literal' && typeof node.value === 'string') ||\n    (node.type === 'TemplateLiteral' && node.expressions.length === 0);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst schemaString = { enum: ['allow-primitive-modules'] };\nconst schemaObject = {\n  type: 'object',\n  properties: {\n    allowPrimitiveModules: { 'type': 'boolean' },\n    allowRequire: { 'type': 'boolean' },\n    allowConditionalRequire: { 'type': 'boolean' },\n  },\n  additionalProperties: false,\n};\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: docsUrl('no-commonjs'),\n    },\n\n    schema: {\n      anyOf: [\n        {\n          type: 'array',\n          items: [schemaString],\n          additionalItems: false,\n        },\n        {\n          type: 'array',\n          items: [schemaObject],\n          additionalItems: false,\n        },\n      ],\n    },\n  },\n\n  create(context) {\n    const options = normalizeLegacyOptions(context.options);\n\n    return {\n\n      'MemberExpression': function (node) {\n\n        // module.exports\n        if (node.object.name === 'module' && node.property.name === 'exports') {\n          if (allowPrimitive(node, options)) return;\n          context.report({ node, message: EXPORT_MESSAGE });\n        }\n\n        // exports.\n        if (node.object.name === 'exports') {\n          const isInScope = context.getScope()\n            .variables\n            .some(variable => variable.name === 'exports');\n          if (! isInScope) {\n            context.report({ node, message: EXPORT_MESSAGE });\n          }\n        }\n\n      },\n      'CallExpression': function (call) {\n        if (!validateScope(context.getScope())) return;\n\n        if (call.callee.type !== 'Identifier') return;\n        if (call.callee.name !== 'require') return;\n\n        if (call.arguments.length !== 1) return;\n        if (!isLiteralString(call.arguments[0])) return;\n\n        if (allowRequire(call, options)) return;\n\n        if (allowConditionalRequire(call, options) && isConditional(call.parent)) return;\n\n        // keeping it simple: all 1-string-arg `require` calls are reported\n        context.report({\n          node: call.callee,\n          message: IMPORT_MESSAGE,\n        });\n      },\n    };\n\n  },\n};\n"]},"metadata":{},"sourceType":"script"}