{"ast":null,"code":"'use strict';\n/**\n * @typedef {object} Plugin\n * @prop {Set<string>} targets\n * @prop {Set<string>} nodeTypes\n * @prop {(node: import('postcss').Node) => void} detectAndResolve\n * @prop {(node: import('postcss').Node) => void} detectAndWarn\n */\n\n/** \n * @typedef {import('postcss').Node & {_stylehacks: {\n                                          message: string, \n                                          browsers: Set<string>, \n                                          identifier: string, \n                                          hack: string }}} NodeWithInfo\n */\n\nmodule.exports = class BasePlugin {\n  /**\n   * @param {string[]} targets\n   * @param {string[]} nodeTypes\n   * @param {import('postcss').Result=} result\n   */\n  constructor(targets, nodeTypes, result) {\n    /** @type {NodeWithInfo[]} */\n    this.nodes = [];\n    this.targets = new Set(targets);\n    this.nodeTypes = new Set(nodeTypes);\n    this.result = result;\n  }\n  /**\n   * @param {import('postcss').Node} node\n   * @param {{identifier: string, hack: string}} metadata\n   * @return {void}\n   */\n\n\n  push(node, metadata) {\n    /** @type {NodeWithInfo} */\n    node._stylehacks = Object.assign({}, metadata, {\n      message: `Bad ${metadata.identifier}: ${metadata.hack}`,\n      browsers: this.targets\n    });\n    this.nodes.push(\n    /** @type {NodeWithInfo} */\n    node);\n  }\n  /**\n   * @param {import('postcss').Node} node\n   * @return {boolean}\n   */\n\n\n  any(node) {\n    if (this.nodeTypes.has(node.type)) {\n      this.detect(node);\n      return (\n        /** @type {NodeWithInfo} */\n        node._stylehacks !== undefined\n      );\n    }\n\n    return false;\n  }\n  /**\n   * @param {import('postcss').Node} node\n   * @return {void}\n   */\n\n\n  detectAndResolve(node) {\n    this.nodes = [];\n    this.detect(node);\n    return this.resolve();\n  }\n  /**\n   * @param {import('postcss').Node} node\n   * @return {void}\n   */\n\n\n  detectAndWarn(node) {\n    this.nodes = [];\n    this.detect(node);\n    return this.warn();\n  }\n  /** @param {import('postcss').Node} node */\n  // eslint-disable-next-line no-unused-vars\n\n\n  detect(node) {\n    throw new Error('You need to implement this method in a subclass.');\n  }\n  /** @return {void} */\n\n\n  resolve() {\n    return this.nodes.forEach(node => node.remove());\n  }\n\n  warn() {\n    return this.nodes.forEach(node => {\n      const {\n        message,\n        browsers,\n        identifier,\n        hack\n      } = node._stylehacks;\n      return node.warn(\n      /** @type {import('postcss').Result} */\n      this.result, message + JSON.stringify({\n        browsers,\n        identifier,\n        hack\n      }));\n    });\n  }\n\n};","map":{"version":3,"names":["module","exports","BasePlugin","constructor","targets","nodeTypes","result","nodes","Set","push","node","metadata","_stylehacks","Object","assign","message","identifier","hack","browsers","any","has","type","detect","undefined","detectAndResolve","resolve","detectAndWarn","warn","Error","forEach","remove","JSON","stringify"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/stylehacks/src/plugin.js"],"sourcesContent":["'use strict';\n/**\n * @typedef {object} Plugin\n * @prop {Set<string>} targets\n * @prop {Set<string>} nodeTypes\n * @prop {(node: import('postcss').Node) => void} detectAndResolve\n * @prop {(node: import('postcss').Node) => void} detectAndWarn\n */\n\n/** \n * @typedef {import('postcss').Node & {_stylehacks: {\n                                          message: string, \n                                          browsers: Set<string>, \n                                          identifier: string, \n                                          hack: string }}} NodeWithInfo\n */\n\nmodule.exports = class BasePlugin {\n  /**\n   * @param {string[]} targets\n   * @param {string[]} nodeTypes\n   * @param {import('postcss').Result=} result\n   */\n  constructor(targets, nodeTypes, result) {\n    /** @type {NodeWithInfo[]} */\n    this.nodes = [];\n    this.targets = new Set(targets);\n    this.nodeTypes = new Set(nodeTypes);\n    this.result = result;\n  }\n\n  /**\n   * @param {import('postcss').Node} node\n   * @param {{identifier: string, hack: string}} metadata\n   * @return {void}\n   */\n  push(node, metadata) {\n    /** @type {NodeWithInfo} */ (node)._stylehacks = Object.assign(\n      {},\n      metadata,\n      {\n        message: `Bad ${metadata.identifier}: ${metadata.hack}`,\n        browsers: this.targets,\n      }\n    );\n\n    this.nodes.push(/** @type {NodeWithInfo} */ (node));\n  }\n\n  /**\n   * @param {import('postcss').Node} node\n   * @return {boolean}\n   */\n  any(node) {\n    if (this.nodeTypes.has(node.type)) {\n      this.detect(node);\n\n      return /** @type {NodeWithInfo} */ (node)._stylehacks !== undefined;\n    }\n\n    return false;\n  }\n\n  /**\n   * @param {import('postcss').Node} node\n   * @return {void}\n   */\n  detectAndResolve(node) {\n    this.nodes = [];\n\n    this.detect(node);\n\n    return this.resolve();\n  }\n\n  /**\n   * @param {import('postcss').Node} node\n   * @return {void}\n   */\n  detectAndWarn(node) {\n    this.nodes = [];\n\n    this.detect(node);\n\n    return this.warn();\n  }\n  /** @param {import('postcss').Node} node */\n  // eslint-disable-next-line no-unused-vars\n  detect(node) {\n    throw new Error('You need to implement this method in a subclass.');\n  }\n\n  /** @return {void} */\n  resolve() {\n    return this.nodes.forEach((node) => node.remove());\n  }\n\n  warn() {\n    return this.nodes.forEach((node) => {\n      const { message, browsers, identifier, hack } = node._stylehacks;\n\n      return node.warn(\n        /** @type {import('postcss').Result} */ (this.result),\n        message + JSON.stringify({ browsers, identifier, hack })\n      );\n    });\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,UAAN,CAAiB;EAChC;AACF;AACA;AACA;AACA;EACEC,WAAW,CAACC,OAAD,EAAUC,SAAV,EAAqBC,MAArB,EAA6B;IACtC;IACA,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKH,OAAL,GAAe,IAAII,GAAJ,CAAQJ,OAAR,CAAf;IACA,KAAKC,SAAL,GAAiB,IAAIG,GAAJ,CAAQH,SAAR,CAAjB;IACA,KAAKC,MAAL,GAAcA,MAAd;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEG,IAAI,CAACC,IAAD,EAAOC,QAAP,EAAiB;IACnB;IAA6BD,IAAD,CAAOE,WAAP,GAAqBC,MAAM,CAACC,MAAP,CAC/C,EAD+C,EAE/CH,QAF+C,EAG/C;MACEI,OAAO,EAAG,OAAMJ,QAAQ,CAACK,UAAW,KAAIL,QAAQ,CAACM,IAAK,EADxD;MAEEC,QAAQ,EAAE,KAAKd;IAFjB,CAH+C,CAArB;IAS5B,KAAKG,KAAL,CAAWE,IAAX;IAAgB;IAA6BC,IAA7C;EACD;EAED;AACF;AACA;AACA;;;EACES,GAAG,CAACT,IAAD,EAAO;IACR,IAAI,KAAKL,SAAL,CAAee,GAAf,CAAmBV,IAAI,CAACW,IAAxB,CAAJ,EAAmC;MACjC,KAAKC,MAAL,CAAYZ,IAAZ;MAEA;QAAO;QAA6BA,IAAD,CAAOE,WAAP,KAAuBW;MAA1D;IACD;;IAED,OAAO,KAAP;EACD;EAED;AACF;AACA;AACA;;;EACEC,gBAAgB,CAACd,IAAD,EAAO;IACrB,KAAKH,KAAL,GAAa,EAAb;IAEA,KAAKe,MAAL,CAAYZ,IAAZ;IAEA,OAAO,KAAKe,OAAL,EAAP;EACD;EAED;AACF;AACA;AACA;;;EACEC,aAAa,CAAChB,IAAD,EAAO;IAClB,KAAKH,KAAL,GAAa,EAAb;IAEA,KAAKe,MAAL,CAAYZ,IAAZ;IAEA,OAAO,KAAKiB,IAAL,EAAP;EACD;EACD;EACA;;;EACAL,MAAM,CAACZ,IAAD,EAAO;IACX,MAAM,IAAIkB,KAAJ,CAAU,kDAAV,CAAN;EACD;EAED;;;EACAH,OAAO,GAAG;IACR,OAAO,KAAKlB,KAAL,CAAWsB,OAAX,CAAoBnB,IAAD,IAAUA,IAAI,CAACoB,MAAL,EAA7B,CAAP;EACD;;EAEDH,IAAI,GAAG;IACL,OAAO,KAAKpB,KAAL,CAAWsB,OAAX,CAAoBnB,IAAD,IAAU;MAClC,MAAM;QAAEK,OAAF;QAAWG,QAAX;QAAqBF,UAArB;QAAiCC;MAAjC,IAA0CP,IAAI,CAACE,WAArD;MAEA,OAAOF,IAAI,CAACiB,IAAL;MACL;MAAyC,KAAKrB,MADzC,EAELS,OAAO,GAAGgB,IAAI,CAACC,SAAL,CAAe;QAAEd,QAAF;QAAYF,UAAZ;QAAwBC;MAAxB,CAAf,CAFL,CAAP;IAID,CAPM,CAAP;EAQD;;AAzF+B,CAAlC"},"metadata":{},"sourceType":"script"}