{"ast":null,"code":"'use strict';\n\nconst parser = require('postcss-selector-parser');\n\nconst exists = require('../exists');\n\nconst isMixin = require('../isMixin');\n\nconst BasePlugin = require('../plugin');\n\nconst {\n  FF_2\n} = require('../dictionary/browsers');\n\nconst {\n  SELECTOR\n} = require('../dictionary/identifiers');\n\nconst {\n  RULE\n} = require('../dictionary/postcss');\n\nconst {\n  BODY\n} = require('../dictionary/tags');\n\nmodule.exports = class BodyEmpty extends BasePlugin {\n  /** @param {import('postcss').Result} result */\n  constructor(result) {\n    super([FF_2], [RULE], result);\n  }\n  /**\n   * @param {import('postcss').Rule} rule\n   * @return {void}\n   */\n\n\n  detect(rule) {\n    if (isMixin(rule)) {\n      return;\n    }\n\n    parser(this.analyse(rule)).processSync(rule.selector);\n  }\n  /**\n   * @param {import('postcss').Rule} rule\n   * @return {parser.SyncProcessor<void>}\n   */\n\n\n  analyse(rule) {\n    return selectors => {\n      selectors.each(selector => {\n        if (exists(selector, 0, BODY) && exists(selector, 1, ':empty') && exists(selector, 2, ' ') && selector.at(3)) {\n          this.push(rule, {\n            identifier: SELECTOR,\n            hack: selector.toString()\n          });\n        }\n      });\n    };\n  }\n\n};","map":{"version":3,"names":["parser","require","exists","isMixin","BasePlugin","FF_2","SELECTOR","RULE","BODY","module","exports","BodyEmpty","constructor","result","detect","rule","analyse","processSync","selector","selectors","each","at","push","identifier","hack","toString"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/stylehacks/src/plugins/bodyEmpty.js"],"sourcesContent":["'use strict';\nconst parser = require('postcss-selector-parser');\nconst exists = require('../exists');\nconst isMixin = require('../isMixin');\nconst BasePlugin = require('../plugin');\nconst { FF_2 } = require('../dictionary/browsers');\nconst { SELECTOR } = require('../dictionary/identifiers');\nconst { RULE } = require('../dictionary/postcss');\nconst { BODY } = require('../dictionary/tags');\n\nmodule.exports = class BodyEmpty extends BasePlugin {\n  /** @param {import('postcss').Result} result */\n  constructor(result) {\n    super([FF_2], [RULE], result);\n  }\n\n  /**\n   * @param {import('postcss').Rule} rule\n   * @return {void}\n   */\n  detect(rule) {\n    if (isMixin(rule)) {\n      return;\n    }\n    parser(this.analyse(rule)).processSync(rule.selector);\n  }\n\n  /**\n   * @param {import('postcss').Rule} rule\n   * @return {parser.SyncProcessor<void>}\n   */\n  analyse(rule) {\n    return (selectors) => {\n      selectors.each((selector) => {\n        if (\n          exists(selector, 0, BODY) &&\n          exists(selector, 1, ':empty') &&\n          exists(selector, 2, ' ') &&\n          selector.at(3)\n        ) {\n          this.push(rule, {\n            identifier: SELECTOR,\n            hack: selector.toString(),\n          });\n        }\n      });\n    };\n  }\n};\n"],"mappings":"AAAA;;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,yBAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,WAAD,CAA1B;;AACA,MAAM;EAAEI;AAAF,IAAWJ,OAAO,CAAC,wBAAD,CAAxB;;AACA,MAAM;EAAEK;AAAF,IAAeL,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAM;EAAEM;AAAF,IAAWN,OAAO,CAAC,uBAAD,CAAxB;;AACA,MAAM;EAAEO;AAAF,IAAWP,OAAO,CAAC,oBAAD,CAAxB;;AAEAQ,MAAM,CAACC,OAAP,GAAiB,MAAMC,SAAN,SAAwBP,UAAxB,CAAmC;EAClD;EACAQ,WAAW,CAACC,MAAD,EAAS;IAClB,MAAM,CAACR,IAAD,CAAN,EAAc,CAACE,IAAD,CAAd,EAAsBM,MAAtB;EACD;EAED;AACF;AACA;AACA;;;EACEC,MAAM,CAACC,IAAD,EAAO;IACX,IAAIZ,OAAO,CAACY,IAAD,CAAX,EAAmB;MACjB;IACD;;IACDf,MAAM,CAAC,KAAKgB,OAAL,CAAaD,IAAb,CAAD,CAAN,CAA2BE,WAA3B,CAAuCF,IAAI,CAACG,QAA5C;EACD;EAED;AACF;AACA;AACA;;;EACEF,OAAO,CAACD,IAAD,EAAO;IACZ,OAAQI,SAAD,IAAe;MACpBA,SAAS,CAACC,IAAV,CAAgBF,QAAD,IAAc;QAC3B,IACEhB,MAAM,CAACgB,QAAD,EAAW,CAAX,EAAcV,IAAd,CAAN,IACAN,MAAM,CAACgB,QAAD,EAAW,CAAX,EAAc,QAAd,CADN,IAEAhB,MAAM,CAACgB,QAAD,EAAW,CAAX,EAAc,GAAd,CAFN,IAGAA,QAAQ,CAACG,EAAT,CAAY,CAAZ,CAJF,EAKE;UACA,KAAKC,IAAL,CAAUP,IAAV,EAAgB;YACdQ,UAAU,EAAEjB,QADE;YAEdkB,IAAI,EAAEN,QAAQ,CAACO,QAAT;UAFQ,CAAhB;QAID;MACF,CAZD;IAaD,CAdD;EAeD;;AArCiD,CAApD"},"metadata":{},"sourceType":"script"}