{"ast":null,"code":"import expect from 'expect';\nimport mayHaveAccessibleLabel from '../../../src/util/mayHaveAccessibleLabel';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\nimport JSXExpressionContainerMock from '../../../__mocks__/JSXExpressionContainerMock';\nimport JSXSpreadAttributeMock from '../../../__mocks__/JSXSpreadAttributeMock';\nimport JSXTextMock from '../../../__mocks__/JSXTextMock';\nimport LiteralMock from '../../../__mocks__/LiteralMock';\ndescribe('mayHaveAccessibleLabel', () => {\n  describe('no label', () => {\n    it('should return false', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [JSXElementMock('div', [], [JSXElementMock('span', [], []), JSXElementMock('span', [], [JSXElementMock('span', [], []), JSXElementMock('span', [], [JSXElementMock('span', [], [])])])]), JSXElementMock('span', [], []), JSXElementMock('img', [JSXAttributeMock('src', 'some/path')])]), 5)).toBe(false);\n    });\n  });\n  describe('label via attributes', () => {\n    it('aria-label, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [JSXAttributeMock('aria-label', 'A delicate label')], []))).toBe(true);\n    });\n    it('aria-label without content, should return false', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [JSXAttributeMock('aria-label', '')], []))).toBe(false);\n    });\n    it('aria-labelledby, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [JSXAttributeMock('aria-labelledby', 'elementId')], []))).toBe(true);\n    });\n    it('aria-labelledby without content, should return false', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [JSXAttributeMock('aria-labelledby', '')], []))).toBe(false);\n    });\n    it('aria-labelledby with an expression container, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [JSXAttributeMock('aria-labelledby', 'elementId', true)], []))).toBe(true);\n    });\n  });\n  describe('label via custom label attribute', () => {\n    let customLabelProp;\n    beforeEach(() => {\n      customLabelProp = 'cowbell';\n    });\n    it('aria-label, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [JSXAttributeMock(customLabelProp, 'A delicate label')], []), 1, [customLabelProp])).toBe(true);\n    });\n  });\n  describe('text label', () => {\n    it('Literal text, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [LiteralMock('A fancy label')]))).toBe(true);\n    });\n    it('JSXText, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [JSXTextMock('A fancy label')]))).toBe(true);\n    });\n    it('label is outside of default depth, should return false', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [JSXElementMock('div', [], [JSXTextMock('A fancy label')])]))).toBe(false);\n    });\n    it('label is inside of custom depth, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [JSXElementMock('div', [], [JSXTextMock('A fancy label')])]), 2)).toBe(true);\n    });\n    it('deep nesting, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [JSXElementMock('div', [], [JSXElementMock('span', [], []), JSXElementMock('span', [], [JSXElementMock('span', [], []), JSXElementMock('span', [], [JSXElementMock('span', [], [JSXElementMock('span', [], [JSXTextMock('A fancy label')])])])])]), JSXElementMock('span', [], []), JSXElementMock('img', [JSXAttributeMock('src', 'some/path')])]), 6)).toBe(true);\n    });\n  });\n  describe('image content', () => {\n    it('without alt, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [JSXElementMock('img', [JSXAttributeMock('src', 'some/path')])]))).toBe(false);\n    });\n    it('with alt, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [JSXElementMock('img', [JSXAttributeMock('src', 'some/path'), JSXAttributeMock('alt', 'A sensible label')])]))).toBe(true);\n    });\n    it('with aria-label, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [JSXElementMock('img', [JSXAttributeMock('src', 'some/path'), JSXAttributeMock('aria-label', 'A sensible label')])]))).toBe(true);\n    });\n  });\n  describe('Intederminate situations', () => {\n    describe('expression container children', () => {\n      it('should return true', () => {\n        expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [JSXExpressionContainerMock('mysteryBox')]))).toBe(true);\n      });\n    });\n    describe('spread operator in attributes', () => {\n      it('should return true', () => {\n        expect(mayHaveAccessibleLabel(JSXElementMock('div', [JSXAttributeMock('style', 'some-junk'), JSXSpreadAttributeMock('props')], []))).toBe(true);\n      });\n    });\n  });\n});","map":{"version":3,"names":["expect","mayHaveAccessibleLabel","JSXAttributeMock","JSXElementMock","JSXExpressionContainerMock","JSXSpreadAttributeMock","JSXTextMock","LiteralMock","describe","it","toBe","customLabelProp","beforeEach"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/mayHaveAccessibleLabel-test.js"],"sourcesContent":["import expect from 'expect';\nimport mayHaveAccessibleLabel from '../../../src/util/mayHaveAccessibleLabel';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\nimport JSXExpressionContainerMock from '../../../__mocks__/JSXExpressionContainerMock';\nimport JSXSpreadAttributeMock from '../../../__mocks__/JSXSpreadAttributeMock';\nimport JSXTextMock from '../../../__mocks__/JSXTextMock';\nimport LiteralMock from '../../../__mocks__/LiteralMock';\n\ndescribe('mayHaveAccessibleLabel', () => {\n  describe('no label', () => {\n    it('should return false', () => {\n      expect(mayHaveAccessibleLabel(\n        JSXElementMock('div', [], [\n          JSXElementMock('div', [], [\n            JSXElementMock('span', [], []),\n            JSXElementMock('span', [], [\n              JSXElementMock('span', [], []),\n              JSXElementMock('span', [], [\n                JSXElementMock('span', [], []),\n              ]),\n            ]),\n          ]),\n          JSXElementMock('span', [], []),\n          JSXElementMock('img', [\n            JSXAttributeMock('src', 'some/path'),\n          ]),\n        ]),\n        5,\n      )).toBe(false);\n    });\n  });\n  describe('label via attributes', () => {\n    it('aria-label, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('aria-label', 'A delicate label'),\n      ], []))).toBe(true);\n    });\n    it('aria-label without content, should return false', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('aria-label', ''),\n      ], []))).toBe(false);\n    });\n    it('aria-labelledby, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('aria-labelledby', 'elementId'),\n      ], []))).toBe(true);\n    });\n    it('aria-labelledby without content, should return false', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('aria-labelledby', ''),\n      ], []))).toBe(false);\n    });\n    it('aria-labelledby with an expression container, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('aria-labelledby', 'elementId', true),\n      ], []))).toBe(true);\n    });\n  });\n  describe('label via custom label attribute', () => {\n    let customLabelProp;\n    beforeEach(() => {\n      customLabelProp = 'cowbell';\n    });\n    it('aria-label, should return true', () => {\n      expect(mayHaveAccessibleLabel(\n        JSXElementMock('div', [\n          JSXAttributeMock(customLabelProp, 'A delicate label'),\n        ], []),\n        1,\n        [customLabelProp],\n      )).toBe(true);\n    });\n  });\n  describe('text label', () => {\n    it('Literal text, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        LiteralMock('A fancy label'),\n      ]))).toBe(true);\n    });\n    it('JSXText, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        JSXTextMock('A fancy label'),\n      ]))).toBe(true);\n    });\n    it('label is outside of default depth, should return false', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        JSXElementMock('div', [], [\n          JSXTextMock('A fancy label'),\n        ]),\n      ]))).toBe(false);\n    });\n    it('label is inside of custom depth, should return true', () => {\n      expect(mayHaveAccessibleLabel(\n        JSXElementMock('div', [], [\n          JSXElementMock('div', [], [\n            JSXTextMock('A fancy label'),\n          ]),\n        ]),\n        2,\n      )).toBe(true);\n    });\n    it('deep nesting, should return true', () => {\n      expect(mayHaveAccessibleLabel(\n        JSXElementMock('div', [], [\n          JSXElementMock('div', [], [\n            JSXElementMock('span', [], []),\n            JSXElementMock('span', [], [\n              JSXElementMock('span', [], []),\n              JSXElementMock('span', [], [\n                JSXElementMock('span', [], [\n                  JSXElementMock('span', [], [\n                    JSXTextMock('A fancy label'),\n                  ]),\n                ]),\n              ]),\n            ]),\n          ]),\n          JSXElementMock('span', [], []),\n          JSXElementMock('img', [\n            JSXAttributeMock('src', 'some/path'),\n          ]),\n        ]),\n        6,\n      )).toBe(true);\n    });\n  });\n  describe('image content', () => {\n    it('without alt, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        JSXElementMock('img', [\n          JSXAttributeMock('src', 'some/path'),\n        ]),\n      ]))).toBe(false);\n    });\n    it('with alt, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        JSXElementMock('img', [\n          JSXAttributeMock('src', 'some/path'),\n          JSXAttributeMock('alt', 'A sensible label'),\n        ]),\n      ]))).toBe(true);\n    });\n    it('with aria-label, should return true', () => {\n      expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        JSXElementMock('img', [\n          JSXAttributeMock('src', 'some/path'),\n          JSXAttributeMock('aria-label', 'A sensible label'),\n        ]),\n      ]))).toBe(true);\n    });\n  });\n  describe('Intederminate situations', () => {\n    describe('expression container children', () => {\n      it('should return true', () => {\n        expect(mayHaveAccessibleLabel(JSXElementMock('div', [], [\n          JSXExpressionContainerMock('mysteryBox'),\n        ]))).toBe(true);\n      });\n    });\n    describe('spread operator in attributes', () => {\n      it('should return true', () => {\n        expect(mayHaveAccessibleLabel(JSXElementMock('div', [\n          JSXAttributeMock('style', 'some-junk'),\n          JSXSpreadAttributeMock('props'),\n        ], []))).toBe(true);\n      });\n    });\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}