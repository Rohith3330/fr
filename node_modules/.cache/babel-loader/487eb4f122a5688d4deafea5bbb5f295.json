{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('./types').XastParent} XastParent\n * @typedef {import('./types').XastRoot} XastRoot\n * @typedef {import('./types').XastElement} XastElement\n * @typedef {import('./types').XastInstruction} XastInstruction\n * @typedef {import('./types').XastDoctype} XastDoctype\n * @typedef {import('./types').XastText} XastText\n * @typedef {import('./types').XastCdata} XastCdata\n * @typedef {import('./types').XastComment} XastComment\n * @typedef {import('./types').StringifyOptions} StringifyOptions\n */\n\nconst {\n  textElems\n} = require('../plugins/_collections.js');\n/**\n * @typedef {{\n *   width: void | string,\n *   height: void | string,\n *   indent: string,\n *   textContext: null | XastElement,\n *   indentLevel: number,\n * }} State\n */\n\n/**\n * @typedef {Required<StringifyOptions>} Options\n */\n\n/**\n * @type {(char: string) => string}\n */\n\n\nconst encodeEntity = char => {\n  return entities[char];\n};\n/**\n * @type {Options}\n */\n\n\nconst defaults = {\n  doctypeStart: '<!DOCTYPE',\n  doctypeEnd: '>',\n  procInstStart: '<?',\n  procInstEnd: '?>',\n  tagOpenStart: '<',\n  tagOpenEnd: '>',\n  tagCloseStart: '</',\n  tagCloseEnd: '>',\n  tagShortStart: '<',\n  tagShortEnd: '/>',\n  attrStart: '=\"',\n  attrEnd: '\"',\n  commentStart: '<!--',\n  commentEnd: '-->',\n  cdataStart: '<![CDATA[',\n  cdataEnd: ']]>',\n  textStart: '',\n  textEnd: '',\n  indent: 4,\n  regEntities: /[&'\"<>]/g,\n  regValEntities: /[&\"<>]/g,\n  encodeEntity: encodeEntity,\n  pretty: false,\n  useShortTags: true,\n  eol: 'lf',\n  finalNewline: false\n};\n/**\n * @type {Record<string, string>}\n */\n\nconst entities = {\n  '&': '&amp;',\n  \"'\": '&apos;',\n  '\"': '&quot;',\n  '>': '&gt;',\n  '<': '&lt;'\n};\n/**\n * convert XAST to SVG string\n *\n * @type {(data: XastRoot, config: StringifyOptions) => {\n *   data: string,\n *   info: {\n *     width: void | string,\n *     height: void | string\n *   }\n * }}\n */\n\nconst stringifySvg = function (data) {\n  let userOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  /**\n   * @type {Options}\n   */\n  const config = { ...defaults,\n    ...userOptions\n  };\n  const indent = config.indent;\n  let newIndent = '    ';\n\n  if (typeof indent === 'number' && Number.isNaN(indent) === false) {\n    newIndent = indent < 0 ? '\\t' : ' '.repeat(indent);\n  } else if (typeof indent === 'string') {\n    newIndent = indent;\n  }\n  /**\n   * @type {State}\n   */\n\n\n  const state = {\n    // TODO remove width and height in v3\n    width: undefined,\n    height: undefined,\n    indent: newIndent,\n    textContext: null,\n    indentLevel: 0\n  };\n  const eol = config.eol === 'crlf' ? '\\r\\n' : '\\n';\n\n  if (config.pretty) {\n    config.doctypeEnd += eol;\n    config.procInstEnd += eol;\n    config.commentEnd += eol;\n    config.cdataEnd += eol;\n    config.tagShortEnd += eol;\n    config.tagOpenEnd += eol;\n    config.tagCloseEnd += eol;\n    config.textEnd += eol;\n  }\n\n  let svg = stringifyNode(data, config, state);\n\n  if (config.finalNewline && svg.length > 0 && svg[svg.length - 1] !== '\\n') {\n    svg += eol;\n  }\n\n  return {\n    data: svg,\n    info: {\n      width: state.width,\n      height: state.height\n    }\n  };\n};\n\nexports.stringifySvg = stringifySvg;\n/**\n * @type {(node: XastParent, config: Options, state: State) => string}\n */\n\nconst stringifyNode = (data, config, state) => {\n  let svg = '';\n  state.indentLevel += 1;\n\n  for (const item of data.children) {\n    if (item.type === 'element') {\n      svg += stringifyElement(item, config, state);\n    }\n\n    if (item.type === 'text') {\n      svg += stringifyText(item, config, state);\n    }\n\n    if (item.type === 'doctype') {\n      svg += stringifyDoctype(item, config);\n    }\n\n    if (item.type === 'instruction') {\n      svg += stringifyInstruction(item, config);\n    }\n\n    if (item.type === 'comment') {\n      svg += stringifyComment(item, config);\n    }\n\n    if (item.type === 'cdata') {\n      svg += stringifyCdata(item, config, state);\n    }\n  }\n\n  state.indentLevel -= 1;\n  return svg;\n};\n/**\n * create indent string in accordance with the current node level.\n *\n * @type {(config: Options, state: State) => string}\n */\n\n\nconst createIndent = (config, state) => {\n  let indent = '';\n\n  if (config.pretty && state.textContext == null) {\n    indent = state.indent.repeat(state.indentLevel - 1);\n  }\n\n  return indent;\n};\n/**\n * @type {(node: XastDoctype, config: Options) => string}\n */\n\n\nconst stringifyDoctype = (node, config) => {\n  return config.doctypeStart + node.data.doctype + config.doctypeEnd;\n};\n/**\n * @type {(node: XastInstruction, config: Options) => string}\n */\n\n\nconst stringifyInstruction = (node, config) => {\n  return config.procInstStart + node.name + ' ' + node.value + config.procInstEnd;\n};\n/**\n * @type {(node: XastComment, config: Options) => string}\n */\n\n\nconst stringifyComment = (node, config) => {\n  return config.commentStart + node.value + config.commentEnd;\n};\n/**\n * @type {(node: XastCdata, config: Options, state: State) => string}\n */\n\n\nconst stringifyCdata = (node, config, state) => {\n  return createIndent(config, state) + config.cdataStart + node.value + config.cdataEnd;\n};\n/**\n * @type {(node: XastElement, config: Options, state: State) => string}\n */\n\n\nconst stringifyElement = (node, config, state) => {\n  // beautiful injection for obtaining SVG information :)\n  if (node.name === 'svg' && node.attributes.width != null && node.attributes.height != null) {\n    state.width = node.attributes.width;\n    state.height = node.attributes.height;\n  } // empty element and short tag\n\n\n  if (node.children.length === 0) {\n    if (config.useShortTags) {\n      return createIndent(config, state) + config.tagShortStart + node.name + stringifyAttributes(node, config) + config.tagShortEnd;\n    } else {\n      return createIndent(config, state) + config.tagShortStart + node.name + stringifyAttributes(node, config) + config.tagOpenEnd + config.tagCloseStart + node.name + config.tagCloseEnd;\n    } // non-empty element\n\n  } else {\n    let tagOpenStart = config.tagOpenStart;\n    let tagOpenEnd = config.tagOpenEnd;\n    let tagCloseStart = config.tagCloseStart;\n    let tagCloseEnd = config.tagCloseEnd;\n    let openIndent = createIndent(config, state);\n    let closeIndent = createIndent(config, state);\n\n    if (state.textContext) {\n      tagOpenStart = defaults.tagOpenStart;\n      tagOpenEnd = defaults.tagOpenEnd;\n      tagCloseStart = defaults.tagCloseStart;\n      tagCloseEnd = defaults.tagCloseEnd;\n      openIndent = '';\n    } else if (textElems.includes(node.name)) {\n      tagOpenEnd = defaults.tagOpenEnd;\n      tagCloseStart = defaults.tagCloseStart;\n      closeIndent = '';\n      state.textContext = node;\n    }\n\n    const children = stringifyNode(node, config, state);\n\n    if (state.textContext === node) {\n      state.textContext = null;\n    }\n\n    return openIndent + tagOpenStart + node.name + stringifyAttributes(node, config) + tagOpenEnd + children + closeIndent + tagCloseStart + node.name + tagCloseEnd;\n  }\n};\n/**\n * @type {(node: XastElement, config: Options) => string}\n */\n\n\nconst stringifyAttributes = (node, config) => {\n  let attrs = '';\n\n  for (const [name, value] of Object.entries(node.attributes)) {\n    // TODO remove attributes without values support in v3\n    if (value !== undefined) {\n      const encodedValue = value.toString().replace(config.regValEntities, config.encodeEntity);\n      attrs += ' ' + name + config.attrStart + encodedValue + config.attrEnd;\n    } else {\n      attrs += ' ' + name;\n    }\n  }\n\n  return attrs;\n};\n/**\n * @type {(node: XastText, config: Options, state: State) => string}\n */\n\n\nconst stringifyText = (node, config, state) => {\n  return createIndent(config, state) + config.textStart + node.value.replace(config.regEntities, config.encodeEntity) + (state.textContext ? '' : config.textEnd);\n};","map":{"version":3,"names":["textElems","require","encodeEntity","char","entities","defaults","doctypeStart","doctypeEnd","procInstStart","procInstEnd","tagOpenStart","tagOpenEnd","tagCloseStart","tagCloseEnd","tagShortStart","tagShortEnd","attrStart","attrEnd","commentStart","commentEnd","cdataStart","cdataEnd","textStart","textEnd","indent","regEntities","regValEntities","pretty","useShortTags","eol","finalNewline","stringifySvg","data","userOptions","config","newIndent","Number","isNaN","repeat","state","width","undefined","height","textContext","indentLevel","svg","stringifyNode","length","info","exports","item","children","type","stringifyElement","stringifyText","stringifyDoctype","stringifyInstruction","stringifyComment","stringifyCdata","createIndent","node","doctype","name","value","attributes","stringifyAttributes","openIndent","closeIndent","includes","attrs","Object","entries","encodedValue","toString","replace"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-svgo/node_modules/svgo/lib/stringifier.js"],"sourcesContent":["'use strict';\n\n/**\n * @typedef {import('./types').XastParent} XastParent\n * @typedef {import('./types').XastRoot} XastRoot\n * @typedef {import('./types').XastElement} XastElement\n * @typedef {import('./types').XastInstruction} XastInstruction\n * @typedef {import('./types').XastDoctype} XastDoctype\n * @typedef {import('./types').XastText} XastText\n * @typedef {import('./types').XastCdata} XastCdata\n * @typedef {import('./types').XastComment} XastComment\n * @typedef {import('./types').StringifyOptions} StringifyOptions\n */\n\nconst { textElems } = require('../plugins/_collections.js');\n\n/**\n * @typedef {{\n *   width: void | string,\n *   height: void | string,\n *   indent: string,\n *   textContext: null | XastElement,\n *   indentLevel: number,\n * }} State\n */\n\n/**\n * @typedef {Required<StringifyOptions>} Options\n */\n\n/**\n * @type {(char: string) => string}\n */\nconst encodeEntity = (char) => {\n  return entities[char];\n};\n\n/**\n * @type {Options}\n */\nconst defaults = {\n  doctypeStart: '<!DOCTYPE',\n  doctypeEnd: '>',\n  procInstStart: '<?',\n  procInstEnd: '?>',\n  tagOpenStart: '<',\n  tagOpenEnd: '>',\n  tagCloseStart: '</',\n  tagCloseEnd: '>',\n  tagShortStart: '<',\n  tagShortEnd: '/>',\n  attrStart: '=\"',\n  attrEnd: '\"',\n  commentStart: '<!--',\n  commentEnd: '-->',\n  cdataStart: '<![CDATA[',\n  cdataEnd: ']]>',\n  textStart: '',\n  textEnd: '',\n  indent: 4,\n  regEntities: /[&'\"<>]/g,\n  regValEntities: /[&\"<>]/g,\n  encodeEntity: encodeEntity,\n  pretty: false,\n  useShortTags: true,\n  eol: 'lf',\n  finalNewline: false,\n};\n\n/**\n * @type {Record<string, string>}\n */\nconst entities = {\n  '&': '&amp;',\n  \"'\": '&apos;',\n  '\"': '&quot;',\n  '>': '&gt;',\n  '<': '&lt;',\n};\n\n/**\n * convert XAST to SVG string\n *\n * @type {(data: XastRoot, config: StringifyOptions) => {\n *   data: string,\n *   info: {\n *     width: void | string,\n *     height: void | string\n *   }\n * }}\n */\nconst stringifySvg = (data, userOptions = {}) => {\n  /**\n   * @type {Options}\n   */\n  const config = { ...defaults, ...userOptions };\n  const indent = config.indent;\n  let newIndent = '    ';\n  if (typeof indent === 'number' && Number.isNaN(indent) === false) {\n    newIndent = indent < 0 ? '\\t' : ' '.repeat(indent);\n  } else if (typeof indent === 'string') {\n    newIndent = indent;\n  }\n  /**\n   * @type {State}\n   */\n  const state = {\n    // TODO remove width and height in v3\n    width: undefined,\n    height: undefined,\n    indent: newIndent,\n    textContext: null,\n    indentLevel: 0,\n  };\n  const eol = config.eol === 'crlf' ? '\\r\\n' : '\\n';\n  if (config.pretty) {\n    config.doctypeEnd += eol;\n    config.procInstEnd += eol;\n    config.commentEnd += eol;\n    config.cdataEnd += eol;\n    config.tagShortEnd += eol;\n    config.tagOpenEnd += eol;\n    config.tagCloseEnd += eol;\n    config.textEnd += eol;\n  }\n  let svg = stringifyNode(data, config, state);\n  if (config.finalNewline && svg.length > 0 && svg[svg.length - 1] !== '\\n') {\n    svg += eol;\n  }\n  return {\n    data: svg,\n    info: {\n      width: state.width,\n      height: state.height,\n    },\n  };\n};\nexports.stringifySvg = stringifySvg;\n\n/**\n * @type {(node: XastParent, config: Options, state: State) => string}\n */\nconst stringifyNode = (data, config, state) => {\n  let svg = '';\n  state.indentLevel += 1;\n  for (const item of data.children) {\n    if (item.type === 'element') {\n      svg += stringifyElement(item, config, state);\n    }\n    if (item.type === 'text') {\n      svg += stringifyText(item, config, state);\n    }\n    if (item.type === 'doctype') {\n      svg += stringifyDoctype(item, config);\n    }\n    if (item.type === 'instruction') {\n      svg += stringifyInstruction(item, config);\n    }\n    if (item.type === 'comment') {\n      svg += stringifyComment(item, config);\n    }\n    if (item.type === 'cdata') {\n      svg += stringifyCdata(item, config, state);\n    }\n  }\n  state.indentLevel -= 1;\n  return svg;\n};\n\n/**\n * create indent string in accordance with the current node level.\n *\n * @type {(config: Options, state: State) => string}\n */\nconst createIndent = (config, state) => {\n  let indent = '';\n  if (config.pretty && state.textContext == null) {\n    indent = state.indent.repeat(state.indentLevel - 1);\n  }\n  return indent;\n};\n\n/**\n * @type {(node: XastDoctype, config: Options) => string}\n */\nconst stringifyDoctype = (node, config) => {\n  return config.doctypeStart + node.data.doctype + config.doctypeEnd;\n};\n\n/**\n * @type {(node: XastInstruction, config: Options) => string}\n */\nconst stringifyInstruction = (node, config) => {\n  return (\n    config.procInstStart + node.name + ' ' + node.value + config.procInstEnd\n  );\n};\n\n/**\n * @type {(node: XastComment, config: Options) => string}\n */\nconst stringifyComment = (node, config) => {\n  return config.commentStart + node.value + config.commentEnd;\n};\n\n/**\n * @type {(node: XastCdata, config: Options, state: State) => string}\n */\nconst stringifyCdata = (node, config, state) => {\n  return (\n    createIndent(config, state) +\n    config.cdataStart +\n    node.value +\n    config.cdataEnd\n  );\n};\n\n/**\n * @type {(node: XastElement, config: Options, state: State) => string}\n */\nconst stringifyElement = (node, config, state) => {\n  // beautiful injection for obtaining SVG information :)\n  if (\n    node.name === 'svg' &&\n    node.attributes.width != null &&\n    node.attributes.height != null\n  ) {\n    state.width = node.attributes.width;\n    state.height = node.attributes.height;\n  }\n\n  // empty element and short tag\n  if (node.children.length === 0) {\n    if (config.useShortTags) {\n      return (\n        createIndent(config, state) +\n        config.tagShortStart +\n        node.name +\n        stringifyAttributes(node, config) +\n        config.tagShortEnd\n      );\n    } else {\n      return (\n        createIndent(config, state) +\n        config.tagShortStart +\n        node.name +\n        stringifyAttributes(node, config) +\n        config.tagOpenEnd +\n        config.tagCloseStart +\n        node.name +\n        config.tagCloseEnd\n      );\n    }\n    // non-empty element\n  } else {\n    let tagOpenStart = config.tagOpenStart;\n    let tagOpenEnd = config.tagOpenEnd;\n    let tagCloseStart = config.tagCloseStart;\n    let tagCloseEnd = config.tagCloseEnd;\n    let openIndent = createIndent(config, state);\n    let closeIndent = createIndent(config, state);\n\n    if (state.textContext) {\n      tagOpenStart = defaults.tagOpenStart;\n      tagOpenEnd = defaults.tagOpenEnd;\n      tagCloseStart = defaults.tagCloseStart;\n      tagCloseEnd = defaults.tagCloseEnd;\n      openIndent = '';\n    } else if (textElems.includes(node.name)) {\n      tagOpenEnd = defaults.tagOpenEnd;\n      tagCloseStart = defaults.tagCloseStart;\n      closeIndent = '';\n      state.textContext = node;\n    }\n\n    const children = stringifyNode(node, config, state);\n\n    if (state.textContext === node) {\n      state.textContext = null;\n    }\n\n    return (\n      openIndent +\n      tagOpenStart +\n      node.name +\n      stringifyAttributes(node, config) +\n      tagOpenEnd +\n      children +\n      closeIndent +\n      tagCloseStart +\n      node.name +\n      tagCloseEnd\n    );\n  }\n};\n\n/**\n * @type {(node: XastElement, config: Options) => string}\n */\nconst stringifyAttributes = (node, config) => {\n  let attrs = '';\n  for (const [name, value] of Object.entries(node.attributes)) {\n    // TODO remove attributes without values support in v3\n    if (value !== undefined) {\n      const encodedValue = value\n        .toString()\n        .replace(config.regValEntities, config.encodeEntity);\n      attrs += ' ' + name + config.attrStart + encodedValue + config.attrEnd;\n    } else {\n      attrs += ' ' + name;\n    }\n  }\n  return attrs;\n};\n\n/**\n * @type {(node: XastText, config: Options, state: State) => string}\n */\nconst stringifyText = (node, config, state) => {\n  return (\n    createIndent(config, state) +\n    config.textStart +\n    node.value.replace(config.regEntities, config.encodeEntity) +\n    (state.textContext ? '' : config.textEnd)\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}