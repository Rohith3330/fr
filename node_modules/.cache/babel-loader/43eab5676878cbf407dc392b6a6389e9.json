{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst names_1 = require(\"../../compile/names\");\n\nconst error = {\n  message: \"must NOT have unevaluated properties\",\n  params: _ref => {\n    let {\n      params\n    } = _ref;\n    return (0, codegen_1._)`{unevaluatedProperty: ${params.unevaluatedProperty}}`;\n  }\n};\nconst def = {\n  keyword: \"unevaluatedProperties\",\n  type: \"object\",\n  schemaType: [\"boolean\", \"object\"],\n  trackErrors: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      data,\n      errsCount,\n      it\n    } = cxt;\n    /* istanbul ignore if */\n\n    if (!errsCount) throw new Error(\"ajv implementation error\");\n    const {\n      allErrors,\n      props\n    } = it;\n\n    if (props instanceof codegen_1.Name) {\n      gen.if((0, codegen_1._)`${props} !== true`, () => gen.forIn(\"key\", data, key => gen.if(unevaluatedDynamic(props, key), () => unevaluatedPropCode(key))));\n    } else if (props !== true) {\n      gen.forIn(\"key\", data, key => props === undefined ? unevaluatedPropCode(key) : gen.if(unevaluatedStatic(props, key), () => unevaluatedPropCode(key)));\n    }\n\n    it.props = true;\n    cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);\n\n    function unevaluatedPropCode(key) {\n      if (schema === false) {\n        cxt.setParams({\n          unevaluatedProperty: key\n        });\n        cxt.error();\n        if (!allErrors) gen.break();\n        return;\n      }\n\n      if (!(0, util_1.alwaysValidSchema)(it, schema)) {\n        const valid = gen.name(\"valid\");\n        cxt.subschema({\n          keyword: \"unevaluatedProperties\",\n          dataProp: key,\n          dataPropType: util_1.Type.Str\n        }, valid);\n        if (!allErrors) gen.if((0, codegen_1.not)(valid), () => gen.break());\n      }\n    }\n\n    function unevaluatedDynamic(evaluatedProps, key) {\n      return (0, codegen_1._)`!${evaluatedProps} || !${evaluatedProps}[${key}]`;\n    }\n\n    function unevaluatedStatic(evaluatedProps, key) {\n      const ps = [];\n\n      for (const p in evaluatedProps) {\n        if (evaluatedProps[p] === true) ps.push((0, codegen_1._)`${key} !== ${p}`);\n      }\n\n      return (0, codegen_1.and)(...ps);\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAMA;;AACA;;AACA;;AAQA,MAAMA,KAAK,GAA2B;EACpCC,OAAO,EAAE,sCAD2B;EAEpCC,MAAM,EAAE;IAAA,IAAC;MAACA;IAAD,CAAD;IAAA,OAAc,gBAAC,yBAAyBA,MAAM,CAACC,mBAAmB,GAAlE;EAAA;AAF4B,CAAtC;AAKA,MAAMC,GAAG,GAA0B;EACjCC,OAAO,EAAE,uBADwB;EAEjCC,IAAI,EAAE,QAF2B;EAGjCC,UAAU,EAAE,CAAC,SAAD,EAAY,QAAZ,CAHqB;EAIjCC,WAAW,EAAE,IAJoB;EAKjCR,KALiC;;EAMjCS,IAAI,CAACC,GAAD,EAAI;IACN,MAAM;MAACC,GAAD;MAAMC,MAAN;MAAcC,IAAd;MAAoBC,SAApB;MAA+BC;IAA/B,IAAqCL,GAA3C;IACA;;IACA,IAAI,CAACI,SAAL,EAAgB,MAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;IAChB,MAAM;MAACC,SAAD;MAAYC;IAAZ,IAAqBH,EAA3B;;IACA,IAAIG,KAAK,YAAYC,cAArB,EAA2B;MACzBR,GAAG,CAACS,EAAJ,CAAO,gBAAC,GAAGF,KAAK,WAAhB,EAA6B,MAC3BP,GAAG,CAACU,KAAJ,CAAU,KAAV,EAAiBR,IAAjB,EAAwBS,GAAD,IACrBX,GAAG,CAACS,EAAJ,CAAOG,kBAAkB,CAACL,KAAD,EAAQI,GAAR,CAAzB,EAAuC,MAAME,mBAAmB,CAACF,GAAD,CAAhE,CADF,CADF;IAKD,CAND,MAMO,IAAIJ,KAAK,KAAK,IAAd,EAAoB;MACzBP,GAAG,CAACU,KAAJ,CAAU,KAAV,EAAiBR,IAAjB,EAAwBS,GAAD,IACrBJ,KAAK,KAAKO,SAAV,GACID,mBAAmB,CAACF,GAAD,CADvB,GAEIX,GAAG,CAACS,EAAJ,CAAOM,iBAAiB,CAACR,KAAD,EAAQI,GAAR,CAAxB,EAAsC,MAAME,mBAAmB,CAACF,GAAD,CAA/D,CAHN;IAKD;;IACDP,EAAE,CAACG,KAAH,GAAW,IAAX;IACAR,GAAG,CAACiB,EAAJ,CAAO,gBAAC,GAAGb,SAAS,QAAQc,gBAAEC,MAAM,EAApC;;IAEA,SAASL,mBAAT,CAA6BF,GAA7B,EAAsC;MACpC,IAAIV,MAAM,KAAK,KAAf,EAAsB;QACpBF,GAAG,CAACoB,SAAJ,CAAc;UAAC3B,mBAAmB,EAAEmB;QAAtB,CAAd;QACAZ,GAAG,CAACV,KAAJ;QACA,IAAI,CAACiB,SAAL,EAAgBN,GAAG,CAACoB,KAAJ;QAChB;MACD;;MAED,IAAI,CAAC,8BAAkBhB,EAAlB,EAAsBH,MAAtB,CAAL,EAAoC;QAClC,MAAMoB,KAAK,GAAGrB,GAAG,CAACsB,IAAJ,CAAS,OAAT,CAAd;QACAvB,GAAG,CAACwB,SAAJ,CACE;UACE7B,OAAO,EAAE,uBADX;UAEE8B,QAAQ,EAAEb,GAFZ;UAGEc,YAAY,EAAEC,YAAKC;QAHrB,CADF,EAMEN,KANF;QAQA,IAAI,CAACf,SAAL,EAAgBN,GAAG,CAACS,EAAJ,CAAO,mBAAIY,KAAJ,CAAP,EAAmB,MAAMrB,GAAG,CAACoB,KAAJ,EAAzB;MACjB;IACF;;IAED,SAASR,kBAAT,CAA4BgB,cAA5B,EAAkDjB,GAAlD,EAA2D;MACzD,OAAO,gBAAC,IAAIiB,cAAc,QAAQA,cAAc,IAAIjB,GAAG,GAAvD;IACD;;IAED,SAASI,iBAAT,CAA2Ba,cAA3B,EAAmEjB,GAAnE,EAA4E;MAC1E,MAAMkB,EAAE,GAAW,EAAnB;;MACA,KAAK,MAAMC,CAAX,IAAgBF,cAAhB,EAAgC;QAC9B,IAAIA,cAAc,CAACE,CAAD,CAAd,KAAsB,IAA1B,EAAgCD,EAAE,CAACE,IAAH,CAAQ,gBAAC,GAAGpB,GAAG,QAAQmB,CAAC,EAAxB;MACjC;;MACD,OAAO,mBAAI,GAAGD,EAAP,CAAP;IACD;EACF;;AA5DgC,CAAnC;AA+DAG,kBAAevC,GAAf","names":["error","message","params","unevaluatedProperty","def","keyword","type","schemaType","trackErrors","code","cxt","gen","schema","data","errsCount","it","Error","allErrors","props","codegen_1","if","forIn","key","unevaluatedDynamic","unevaluatedPropCode","undefined","unevaluatedStatic","ok","names_1","errors","setParams","break","valid","name","subschema","dataProp","dataPropType","util_1","Str","evaluatedProps","ps","p","push","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\mini-css-extract-plugin\\node_modules\\ajv\\lib\\vocabularies\\unevaluated\\unevaluatedProperties.ts"],"sourcesContent":["import type {\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  ErrorObject,\n  AnySchema,\n} from \"../../types\"\nimport {_, not, and, Name, Code} from \"../../compile/codegen\"\nimport {alwaysValidSchema, Type} from \"../../compile/util\"\nimport N from \"../../compile/names\"\n\nexport type UnevaluatedPropertiesError = ErrorObject<\n  \"unevaluatedProperties\",\n  {unevaluatedProperty: string},\n  AnySchema\n>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must NOT have unevaluated properties\",\n  params: ({params}) => _`{unevaluatedProperty: ${params.unevaluatedProperty}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"unevaluatedProperties\",\n  type: \"object\",\n  schemaType: [\"boolean\", \"object\"],\n  trackErrors: true,\n  error,\n  code(cxt) {\n    const {gen, schema, data, errsCount, it} = cxt\n    /* istanbul ignore if */\n    if (!errsCount) throw new Error(\"ajv implementation error\")\n    const {allErrors, props} = it\n    if (props instanceof Name) {\n      gen.if(_`${props} !== true`, () =>\n        gen.forIn(\"key\", data, (key: Name) =>\n          gen.if(unevaluatedDynamic(props, key), () => unevaluatedPropCode(key))\n        )\n      )\n    } else if (props !== true) {\n      gen.forIn(\"key\", data, (key: Name) =>\n        props === undefined\n          ? unevaluatedPropCode(key)\n          : gen.if(unevaluatedStatic(props, key), () => unevaluatedPropCode(key))\n      )\n    }\n    it.props = true\n    cxt.ok(_`${errsCount} === ${N.errors}`)\n\n    function unevaluatedPropCode(key: Name): void {\n      if (schema === false) {\n        cxt.setParams({unevaluatedProperty: key})\n        cxt.error()\n        if (!allErrors) gen.break()\n        return\n      }\n\n      if (!alwaysValidSchema(it, schema)) {\n        const valid = gen.name(\"valid\")\n        cxt.subschema(\n          {\n            keyword: \"unevaluatedProperties\",\n            dataProp: key,\n            dataPropType: Type.Str,\n          },\n          valid\n        )\n        if (!allErrors) gen.if(not(valid), () => gen.break())\n      }\n    }\n\n    function unevaluatedDynamic(evaluatedProps: Name, key: Name): Code {\n      return _`!${evaluatedProps} || !${evaluatedProps}[${key}]`\n    }\n\n    function unevaluatedStatic(evaluatedProps: {[K in string]?: true}, key: Name): Code {\n      const ps: Code[] = []\n      for (const p in evaluatedProps) {\n        if (evaluatedProps[p] === true) ps.push(_`${key} !== ${p}`)\n      }\n      return and(...ps)\n    }\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}