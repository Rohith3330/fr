{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst types_1 = require(\"../discriminator/types\");\n\nconst compile_1 = require(\"../../compile\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        discrError,\n        tagName\n      }\n    } = _ref;\n    return discrError === types_1.DiscrError.Tag ? `tag \"${tagName}\" must be string` : `value of tag \"${tagName}\" must be in oneOf`;\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        discrError,\n        tag,\n        tagName\n      }\n    } = _ref2;\n    return (0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`;\n  }\n};\nconst def = {\n  keyword: \"discriminator\",\n  type: \"object\",\n  schemaType: \"object\",\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      data,\n      schema,\n      parentSchema,\n      it\n    } = cxt;\n    const {\n      oneOf\n    } = parentSchema;\n\n    if (!it.opts.discriminator) {\n      throw new Error(\"discriminator: requires discriminator option\");\n    }\n\n    const tagName = schema.propertyName;\n    if (typeof tagName != \"string\") throw new Error(\"discriminator: requires propertyName\");\n    if (schema.mapping) throw new Error(\"discriminator: mapping is not supported\");\n    if (!oneOf) throw new Error(\"discriminator: requires oneOf keyword\");\n    const valid = gen.let(\"valid\", false);\n    const tag = gen.const(\"tag\", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);\n    gen.if((0, codegen_1._)`typeof ${tag} == \"string\"`, () => validateMapping(), () => cxt.error(false, {\n      discrError: types_1.DiscrError.Tag,\n      tag,\n      tagName\n    }));\n    cxt.ok(valid);\n\n    function validateMapping() {\n      const mapping = getMapping();\n      gen.if(false);\n\n      for (const tagValue in mapping) {\n        gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);\n        gen.assign(valid, applyTagSchema(mapping[tagValue]));\n      }\n\n      gen.else();\n      cxt.error(false, {\n        discrError: types_1.DiscrError.Mapping,\n        tag,\n        tagName\n      });\n      gen.endIf();\n    }\n\n    function applyTagSchema(schemaProp) {\n      const _valid = gen.name(\"valid\");\n\n      const schCxt = cxt.subschema({\n        keyword: \"oneOf\",\n        schemaProp\n      }, _valid);\n      cxt.mergeEvaluated(schCxt, codegen_1.Name);\n      return _valid;\n    }\n\n    function getMapping() {\n      var _a;\n\n      const oneOfMapping = {};\n      const topRequired = hasRequired(parentSchema);\n      let tagRequired = true;\n\n      for (let i = 0; i < oneOf.length; i++) {\n        let sch = oneOf[i];\n\n        if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {\n          sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);\n          if (sch instanceof compile_1.SchemaEnv) sch = sch.schema;\n        }\n\n        const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];\n\n        if (typeof propSch != \"object\") {\n          throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have \"properties/${tagName}\"`);\n        }\n\n        tagRequired = tagRequired && (topRequired || hasRequired(sch));\n        addMappings(propSch, i);\n      }\n\n      if (!tagRequired) throw new Error(`discriminator: \"${tagName}\" must be required`);\n      return oneOfMapping;\n\n      function hasRequired(_ref3) {\n        let {\n          required\n        } = _ref3;\n        return Array.isArray(required) && required.includes(tagName);\n      }\n\n      function addMappings(sch, i) {\n        if (sch.const) {\n          addMapping(sch.const, i);\n        } else if (sch.enum) {\n          for (const tagValue of sch.enum) {\n            addMapping(tagValue, i);\n          }\n        } else {\n          throw new Error(`discriminator: \"properties/${tagName}\" must have \"const\" or \"enum\"`);\n        }\n      }\n\n      function addMapping(tagValue, i) {\n        if (typeof tagValue != \"string\" || tagValue in oneOfMapping) {\n          throw new Error(`discriminator: \"${tagName}\" values must be unique strings`);\n        }\n\n        oneOfMapping[tagValue] = i;\n      }\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":"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","names":["error","message","params","discrError","tagName","types_1","Tag","tag","def","keyword","type","schemaType","code","cxt","gen","data","schema","parentSchema","it","oneOf","opts","discriminator","Error","propertyName","mapping","valid","let","const","if","validateMapping","ok","getMapping","tagValue","elseIf","assign","applyTagSchema","else","Mapping","endIf","schemaProp","_valid","name","schCxt","subschema","mergeEvaluated","codegen_1","oneOfMapping","topRequired","hasRequired","tagRequired","i","length","sch","$ref","self","RULES","compile_1","call","schemaEnv","root","baseId","propSch","properties","_a","addMappings","required","Array","isArray","includes","addMapping","enum","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\vocabularies\\discriminator\\index.ts"],"sourcesContent":["import type {CodeKeywordDefinition, AnySchemaObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, getProperty, Name} from \"../../compile/codegen\"\nimport {DiscrError, DiscrErrorObj} from \"../discriminator/types\"\nimport {resolveRef, SchemaEnv} from \"../../compile\"\nimport {schemaHasRulesButRef} from \"../../compile/util\"\n\nexport type DiscriminatorError = DiscrErrorObj<DiscrError.Tag> | DiscrErrorObj<DiscrError.Mapping>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {discrError, tagName}}) =>\n    discrError === DiscrError.Tag\n      ? `tag \"${tagName}\" must be string`\n      : `value of tag \"${tagName}\" must be in oneOf`,\n  params: ({params: {discrError, tag, tagName}}) =>\n    _`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"discriminator\",\n  type: \"object\",\n  schemaType: \"object\",\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, schema, parentSchema, it} = cxt\n    const {oneOf} = parentSchema\n    if (!it.opts.discriminator) {\n      throw new Error(\"discriminator: requires discriminator option\")\n    }\n    const tagName = schema.propertyName\n    if (typeof tagName != \"string\") throw new Error(\"discriminator: requires propertyName\")\n    if (schema.mapping) throw new Error(\"discriminator: mapping is not supported\")\n    if (!oneOf) throw new Error(\"discriminator: requires oneOf keyword\")\n    const valid = gen.let(\"valid\", false)\n    const tag = gen.const(\"tag\", _`${data}${getProperty(tagName)}`)\n    gen.if(\n      _`typeof ${tag} == \"string\"`,\n      () => validateMapping(),\n      () => cxt.error(false, {discrError: DiscrError.Tag, tag, tagName})\n    )\n    cxt.ok(valid)\n\n    function validateMapping(): void {\n      const mapping = getMapping()\n      gen.if(false)\n      for (const tagValue in mapping) {\n        gen.elseIf(_`${tag} === ${tagValue}`)\n        gen.assign(valid, applyTagSchema(mapping[tagValue]))\n      }\n      gen.else()\n      cxt.error(false, {discrError: DiscrError.Mapping, tag, tagName})\n      gen.endIf()\n    }\n\n    function applyTagSchema(schemaProp?: number): Name {\n      const _valid = gen.name(\"valid\")\n      const schCxt = cxt.subschema({keyword: \"oneOf\", schemaProp}, _valid)\n      cxt.mergeEvaluated(schCxt, Name)\n      return _valid\n    }\n\n    function getMapping(): {[T in string]?: number} {\n      const oneOfMapping: {[T in string]?: number} = {}\n      const topRequired = hasRequired(parentSchema)\n      let tagRequired = true\n      for (let i = 0; i < oneOf.length; i++) {\n        let sch = oneOf[i]\n        if (sch?.$ref && !schemaHasRulesButRef(sch, it.self.RULES)) {\n          sch = resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch?.$ref)\n          if (sch instanceof SchemaEnv) sch = sch.schema\n        }\n        const propSch = sch?.properties?.[tagName]\n        if (typeof propSch != \"object\") {\n          throw new Error(\n            `discriminator: oneOf subschemas (or referenced schemas) must have \"properties/${tagName}\"`\n          )\n        }\n        tagRequired = tagRequired && (topRequired || hasRequired(sch))\n        addMappings(propSch, i)\n      }\n      if (!tagRequired) throw new Error(`discriminator: \"${tagName}\" must be required`)\n      return oneOfMapping\n\n      function hasRequired({required}: AnySchemaObject): boolean {\n        return Array.isArray(required) && required.includes(tagName)\n      }\n\n      function addMappings(sch: AnySchemaObject, i: number): void {\n        if (sch.const) {\n          addMapping(sch.const, i)\n        } else if (sch.enum) {\n          for (const tagValue of sch.enum) {\n            addMapping(tagValue, i)\n          }\n        } else {\n          throw new Error(`discriminator: \"properties/${tagName}\" must have \"const\" or \"enum\"`)\n        }\n      }\n\n      function addMapping(tagValue: unknown, i: number): void {\n        if (typeof tagValue != \"string\" || tagValue in oneOfMapping) {\n          throw new Error(`discriminator: \"${tagName}\" values must be unique strings`)\n        }\n        oneOfMapping[tagValue] = i\n      }\n    }\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}