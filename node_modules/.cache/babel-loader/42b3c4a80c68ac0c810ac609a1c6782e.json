{"ast":null,"code":"/**\n * @fileoverview Enforce no duplicate props\n * @author Markus Ånöstam\n */\n'use strict';\n\nconst has = require('object.hasown/polyfill')();\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  noDuplicateProps: 'No duplicate props allowed'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow duplicate properties in JSX',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('jsx-no-duplicate-props')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        ignoreCase: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const ignoreCase = configuration.ignoreCase || false;\n    return {\n      JSXOpeningElement(node) {\n        const props = {};\n        node.attributes.forEach(decl => {\n          if (decl.type === 'JSXSpreadAttribute') {\n            return;\n          }\n\n          let name = decl.name.name;\n\n          if (typeof name !== 'string') {\n            return;\n          }\n\n          if (ignoreCase) {\n            name = name.toLowerCase();\n          }\n\n          if (has(props, name)) {\n            report(context, messages.noDuplicateProps, 'noDuplicateProps', {\n              node: decl\n            });\n          } else {\n            props[name] = 1;\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["has","require","docsUrl","report","messages","noDuplicateProps","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","ignoreCase","additionalProperties","create","context","configuration","options","JSXOpeningElement","node","props","attributes","forEach","decl","name","toLowerCase"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-no-duplicate-props.js"],"sourcesContent":["/**\n * @fileoverview Enforce no duplicate props\n * @author Markus Ånöstam\n */\n\n'use strict';\n\nconst has = require('object.hasown/polyfill')();\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noDuplicateProps: 'No duplicate props allowed',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow duplicate properties in JSX',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('jsx-no-duplicate-props'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        ignoreCase: {\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const ignoreCase = configuration.ignoreCase || false;\n\n    return {\n      JSXOpeningElement(node) {\n        const props = {};\n\n        node.attributes.forEach((decl) => {\n          if (decl.type === 'JSXSpreadAttribute') {\n            return;\n          }\n\n          let name = decl.name.name;\n\n          if (typeof name !== 'string') {\n            return;\n          }\n\n          if (ignoreCase) {\n            name = name.toLowerCase();\n          }\n\n          if (has(props, name)) {\n            report(context, messages.noDuplicateProps, 'noDuplicateProps', {\n              node: decl,\n            });\n          } else {\n            props[name] = 1;\n          }\n        });\n      },\n    };\n  },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,wBAAD,CAAP,EAAZ;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,gBAAD,CAAtB,C,CAEA;AACA;AACA;;;AAEA,MAAMG,QAAQ,GAAG;EACfC,gBAAgB,EAAE;AADH,CAAjB;AAIAC,MAAM,CAACC,OAAP,GAAiB;EACfC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,WAAW,EAAE,sCADT;MAEJC,QAAQ,EAAE,iBAFN;MAGJC,WAAW,EAAE,IAHT;MAIJC,GAAG,EAAEX,OAAO,CAAC,wBAAD;IAJR,CADF;IAQJE,QARI;IAUJU,MAAM,EAAE,CAAC;MACPC,IAAI,EAAE,QADC;MAEPC,UAAU,EAAE;QACVC,UAAU,EAAE;UACVF,IAAI,EAAE;QADI;MADF,CAFL;MAOPG,oBAAoB,EAAE;IAPf,CAAD;EAVJ,CADS;;EAsBfC,MAAM,CAACC,OAAD,EAAU;IACd,MAAMC,aAAa,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,EAA5C;IACA,MAAML,UAAU,GAAGI,aAAa,CAACJ,UAAd,IAA4B,KAA/C;IAEA,OAAO;MACLM,iBAAiB,CAACC,IAAD,EAAO;QACtB,MAAMC,KAAK,GAAG,EAAd;QAEAD,IAAI,CAACE,UAAL,CAAgBC,OAAhB,CAAyBC,IAAD,IAAU;UAChC,IAAIA,IAAI,CAACb,IAAL,KAAc,oBAAlB,EAAwC;YACtC;UACD;;UAED,IAAIc,IAAI,GAAGD,IAAI,CAACC,IAAL,CAAUA,IAArB;;UAEA,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;YAC5B;UACD;;UAED,IAAIZ,UAAJ,EAAgB;YACdY,IAAI,GAAGA,IAAI,CAACC,WAAL,EAAP;UACD;;UAED,IAAI9B,GAAG,CAACyB,KAAD,EAAQI,IAAR,CAAP,EAAsB;YACpB1B,MAAM,CAACiB,OAAD,EAAUhB,QAAQ,CAACC,gBAAnB,EAAqC,kBAArC,EAAyD;cAC7DmB,IAAI,EAAEI;YADuD,CAAzD,CAAN;UAGD,CAJD,MAIO;YACLH,KAAK,CAACI,IAAD,CAAL,GAAc,CAAd;UACD;QACF,CAtBD;MAuBD;;IA3BI,CAAP;EA6BD;;AAvDc,CAAjB"},"metadata":{},"sourceType":"script"}