{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $String = GetIntrinsic('%String%');\nvar $RangeError = GetIntrinsic('%RangeError%');\n\nvar IsIntegralNumber = require('./IsIntegralNumber');\n\nvar StringPad = require('./StringPad'); // https://ecma-international.org/ecma-262/13.0/#sec-tozeropaddeddecimalstring\n\n\nmodule.exports = function ToZeroPaddedDecimalString(n, minLength) {\n  if (!IsIntegralNumber(n) || n < 0) {\n    throw new $RangeError('Assertion failed: `q` must be a non-negative integer');\n  }\n\n  var S = $String(n);\n  return StringPad(S, minLength, '0', 'start');\n};","map":{"version":3,"names":["GetIntrinsic","require","$String","$RangeError","IsIntegralNumber","StringPad","module","exports","ToZeroPaddedDecimalString","n","minLength","S"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2022/ToZeroPaddedDecimalString.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $String = GetIntrinsic('%String%');\nvar $RangeError = GetIntrinsic('%RangeError%');\n\nvar IsIntegralNumber = require('./IsIntegralNumber');\nvar StringPad = require('./StringPad');\n\n// https://ecma-international.org/ecma-262/13.0/#sec-tozeropaddeddecimalstring\n\nmodule.exports = function ToZeroPaddedDecimalString(n, minLength) {\n\tif (!IsIntegralNumber(n) || n < 0) {\n\t\tthrow new $RangeError('Assertion failed: `q` must be a non-negative integer');\n\t}\n\tvar S = $String(n);\n\treturn StringPad(S, minLength, '0', 'start');\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,OAAO,GAAGF,YAAY,CAAC,UAAD,CAA1B;AACA,IAAIG,WAAW,GAAGH,YAAY,CAAC,cAAD,CAA9B;;AAEA,IAAII,gBAAgB,GAAGH,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAvB,C,CAEA;;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,yBAAT,CAAmCC,CAAnC,EAAsCC,SAAtC,EAAiD;EACjE,IAAI,CAACN,gBAAgB,CAACK,CAAD,CAAjB,IAAwBA,CAAC,GAAG,CAAhC,EAAmC;IAClC,MAAM,IAAIN,WAAJ,CAAgB,sDAAhB,CAAN;EACA;;EACD,IAAIQ,CAAC,GAAGT,OAAO,CAACO,CAAD,CAAf;EACA,OAAOJ,SAAS,CAACM,CAAD,EAAID,SAAJ,EAAe,GAAf,EAAoB,OAApB,CAAhB;AACA,CAND"},"metadata":{},"sourceType":"script"}