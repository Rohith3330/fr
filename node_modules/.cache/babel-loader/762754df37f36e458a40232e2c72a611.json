{"ast":null,"code":"/**\n * class Namespace\n *\n * Simple object for storing attributes. Implements equality by attribute names\n * and values, and provides a simple string representation.\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#the-namespace-object\n **/\n'use strict';\n\nvar $$ = require('./utils');\n/**\n * new Namespace(options)\n * - options(object): predefined propertis for result object\n *\n **/\n\n\nvar Namespace = module.exports = function Namespace(options) {\n  $$.extend(this, options);\n};\n/**\n * Namespace#isset(key) -> Boolean\n * - key (string|number): property name\n *\n * Tells whenever `namespace` contains given `key` or not.\n **/\n\n\nNamespace.prototype.isset = function (key) {\n  return $$.has(this, key);\n};\n/**\n * Namespace#set(key, value) -> self\n * -key (string|number|object): propery name\n * -value (mixed): new property value\n *\n * Set the property named key with value.\n * If key object then set all key properties to namespace object\n **/\n\n\nNamespace.prototype.set = function (key, value) {\n  if (typeof key === 'object') {\n    $$.extend(this, key);\n  } else {\n    this[key] = value;\n  }\n\n  return this;\n};\n/**\n * Namespace#get(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return the property key or defaulValue if not set\n **/\n\n\nNamespace.prototype.get = function (key, defaultValue) {\n  return !this[key] ? defaultValue : this[key];\n};\n/**\n * Namespace#unset(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return data[key](and delete it) or defaultValue\n **/\n\n\nNamespace.prototype.unset = function (key, defaultValue) {\n  var value = this[key];\n\n  if (value !== null) {\n    delete this[key];\n    return value;\n  }\n\n  return defaultValue;\n};","map":{"version":3,"names":["$$","require","Namespace","module","exports","options","extend","prototype","isset","key","has","set","value","get","defaultValue","unset"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/argparse/lib/namespace.js"],"sourcesContent":["/**\n * class Namespace\n *\n * Simple object for storing attributes. Implements equality by attribute names\n * and values, and provides a simple string representation.\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#the-namespace-object\n **/\n'use strict';\n\nvar $$ = require('./utils');\n\n/**\n * new Namespace(options)\n * - options(object): predefined propertis for result object\n *\n **/\nvar Namespace = module.exports = function Namespace(options) {\n  $$.extend(this, options);\n};\n\n/**\n * Namespace#isset(key) -> Boolean\n * - key (string|number): property name\n *\n * Tells whenever `namespace` contains given `key` or not.\n **/\nNamespace.prototype.isset = function (key) {\n  return $$.has(this, key);\n};\n\n/**\n * Namespace#set(key, value) -> self\n * -key (string|number|object): propery name\n * -value (mixed): new property value\n *\n * Set the property named key with value.\n * If key object then set all key properties to namespace object\n **/\nNamespace.prototype.set = function (key, value) {\n  if (typeof (key) === 'object') {\n    $$.extend(this, key);\n  } else {\n    this[key] = value;\n  }\n  return this;\n};\n\n/**\n * Namespace#get(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return the property key or defaulValue if not set\n **/\nNamespace.prototype.get = function (key, defaultValue) {\n  return !this[key] ? defaultValue : this[key];\n};\n\n/**\n * Namespace#unset(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return data[key](and delete it) or defaultValue\n **/\nNamespace.prototype.unset = function (key, defaultValue) {\n  var value = this[key];\n  if (value !== null) {\n    delete this[key];\n    return value;\n  }\n  return defaultValue;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,SAAD,CAAhB;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,SAAS,GAAGC,MAAM,CAACC,OAAP,GAAiB,SAASF,SAAT,CAAmBG,OAAnB,EAA4B;EAC3DL,EAAE,CAACM,MAAH,CAAU,IAAV,EAAgBD,OAAhB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAH,SAAS,CAACK,SAAV,CAAoBC,KAApB,GAA4B,UAAUC,GAAV,EAAe;EACzC,OAAOT,EAAE,CAACU,GAAH,CAAO,IAAP,EAAaD,GAAb,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,SAAS,CAACK,SAAV,CAAoBI,GAApB,GAA0B,UAAUF,GAAV,EAAeG,KAAf,EAAsB;EAC9C,IAAI,OAAQH,GAAR,KAAiB,QAArB,EAA+B;IAC7BT,EAAE,CAACM,MAAH,CAAU,IAAV,EAAgBG,GAAhB;EACD,CAFD,MAEO;IACL,KAAKA,GAAL,IAAYG,KAAZ;EACD;;EACD,OAAO,IAAP;AACD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,SAAS,CAACK,SAAV,CAAoBM,GAApB,GAA0B,UAAUJ,GAAV,EAAeK,YAAf,EAA6B;EACrD,OAAO,CAAC,KAAKL,GAAL,CAAD,GAAaK,YAAb,GAA4B,KAAKL,GAAL,CAAnC;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,SAAS,CAACK,SAAV,CAAoBQ,KAApB,GAA4B,UAAUN,GAAV,EAAeK,YAAf,EAA6B;EACvD,IAAIF,KAAK,GAAG,KAAKH,GAAL,CAAZ;;EACA,IAAIG,KAAK,KAAK,IAAd,EAAoB;IAClB,OAAO,KAAKH,GAAL,CAAP;IACA,OAAOG,KAAP;EACD;;EACD,OAAOE,YAAP;AACD,CAPD"},"metadata":{},"sourceType":"script"}