{"ast":null,"code":"import expect from 'expect';\nimport isSemanticRoleElement from '../../../src/util/isSemanticRoleElement';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\ndescribe('isSemanticRoleElement', () => {\n  it('should identify semantic role elements', () => {\n    expect(isSemanticRoleElement('input', [JSXAttributeMock('type', 'checkbox'), JSXAttributeMock('role', 'switch')])).toBe(true);\n  });\n  it('should reject non-semantic role elements', () => {\n    expect(isSemanticRoleElement('input', [JSXAttributeMock('type', 'radio'), JSXAttributeMock('role', 'switch')])).toBe(false);\n    expect(isSemanticRoleElement('input', [JSXAttributeMock('type', 'text'), JSXAttributeMock('role', 'combobox')])).toBe(false);\n    expect(isSemanticRoleElement('button', [JSXAttributeMock('role', 'switch'), JSXAttributeMock('aria-pressed', 'true')])).toBe(false);\n    expect(isSemanticRoleElement('input', [JSXAttributeMock('role', 'switch')])).toBe(false);\n  });\n  it('should not throw on JSXSpreadAttribute', () => {\n    expect(() => {\n      isSemanticRoleElement('input', [JSXAttributeMock('type', 'checkbox'), JSXAttributeMock('role', 'checkbox'), JSXAttributeMock('aria-checked', 'false'), JSXAttributeMock('aria-labelledby', 'foo'), JSXAttributeMock('tabindex', '0'), {\n        type: 'JSXSpreadAttribute',\n        argument: {\n          type: 'Identifier',\n          name: 'props'\n        }\n      }]);\n    }).not.toThrow();\n  });\n});","map":{"version":3,"names":["expect","isSemanticRoleElement","JSXAttributeMock","describe","it","toBe","type","argument","name","not","toThrow"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/isSemanticRoleElement-test.js"],"sourcesContent":["import expect from 'expect';\nimport isSemanticRoleElement from '../../../src/util/isSemanticRoleElement';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\n\ndescribe('isSemanticRoleElement', () => {\n  it('should identify semantic role elements', () => {\n    expect(isSemanticRoleElement('input', [\n      JSXAttributeMock('type', 'checkbox'),\n      JSXAttributeMock('role', 'switch'),\n    ])).toBe(true);\n  });\n  it('should reject non-semantic role elements', () => {\n    expect(isSemanticRoleElement('input', [\n      JSXAttributeMock('type', 'radio'),\n      JSXAttributeMock('role', 'switch'),\n    ])).toBe(false);\n    expect(isSemanticRoleElement('input', [\n      JSXAttributeMock('type', 'text'),\n      JSXAttributeMock('role', 'combobox'),\n    ])).toBe(false);\n    expect(isSemanticRoleElement('button', [\n      JSXAttributeMock('role', 'switch'),\n      JSXAttributeMock('aria-pressed', 'true'),\n    ])).toBe(false);\n    expect(isSemanticRoleElement('input', [\n      JSXAttributeMock('role', 'switch'),\n    ])).toBe(false);\n  });\n  it('should not throw on JSXSpreadAttribute', () => {\n    expect(() => {\n      isSemanticRoleElement('input', [\n        JSXAttributeMock('type', 'checkbox'),\n        JSXAttributeMock('role', 'checkbox'),\n        JSXAttributeMock('aria-checked', 'false'),\n        JSXAttributeMock('aria-labelledby', 'foo'),\n        JSXAttributeMock('tabindex', '0'),\n        {\n          type: 'JSXSpreadAttribute',\n          argument: {\n            type: 'Identifier',\n            name: 'props',\n          },\n        },\n      ]);\n    }).not.toThrow();\n  });\n});\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,qBAAP,MAAkC,yCAAlC;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;AAEAC,QAAQ,CAAC,uBAAD,EAA0B,MAAM;EACtCC,EAAE,CAAC,wCAAD,EAA2C,MAAM;IACjDJ,MAAM,CAACC,qBAAqB,CAAC,OAAD,EAAU,CACpCC,gBAAgB,CAAC,MAAD,EAAS,UAAT,CADoB,EAEpCA,gBAAgB,CAAC,MAAD,EAAS,QAAT,CAFoB,CAAV,CAAtB,CAAN,CAGIG,IAHJ,CAGS,IAHT;EAID,CALC,CAAF;EAMAD,EAAE,CAAC,0CAAD,EAA6C,MAAM;IACnDJ,MAAM,CAACC,qBAAqB,CAAC,OAAD,EAAU,CACpCC,gBAAgB,CAAC,MAAD,EAAS,OAAT,CADoB,EAEpCA,gBAAgB,CAAC,MAAD,EAAS,QAAT,CAFoB,CAAV,CAAtB,CAAN,CAGIG,IAHJ,CAGS,KAHT;IAIAL,MAAM,CAACC,qBAAqB,CAAC,OAAD,EAAU,CACpCC,gBAAgB,CAAC,MAAD,EAAS,MAAT,CADoB,EAEpCA,gBAAgB,CAAC,MAAD,EAAS,UAAT,CAFoB,CAAV,CAAtB,CAAN,CAGIG,IAHJ,CAGS,KAHT;IAIAL,MAAM,CAACC,qBAAqB,CAAC,QAAD,EAAW,CACrCC,gBAAgB,CAAC,MAAD,EAAS,QAAT,CADqB,EAErCA,gBAAgB,CAAC,cAAD,EAAiB,MAAjB,CAFqB,CAAX,CAAtB,CAAN,CAGIG,IAHJ,CAGS,KAHT;IAIAL,MAAM,CAACC,qBAAqB,CAAC,OAAD,EAAU,CACpCC,gBAAgB,CAAC,MAAD,EAAS,QAAT,CADoB,CAAV,CAAtB,CAAN,CAEIG,IAFJ,CAES,KAFT;EAGD,CAhBC,CAAF;EAiBAD,EAAE,CAAC,wCAAD,EAA2C,MAAM;IACjDJ,MAAM,CAAC,MAAM;MACXC,qBAAqB,CAAC,OAAD,EAAU,CAC7BC,gBAAgB,CAAC,MAAD,EAAS,UAAT,CADa,EAE7BA,gBAAgB,CAAC,MAAD,EAAS,UAAT,CAFa,EAG7BA,gBAAgB,CAAC,cAAD,EAAiB,OAAjB,CAHa,EAI7BA,gBAAgB,CAAC,iBAAD,EAAoB,KAApB,CAJa,EAK7BA,gBAAgB,CAAC,UAAD,EAAa,GAAb,CALa,EAM7B;QACEI,IAAI,EAAE,oBADR;QAEEC,QAAQ,EAAE;UACRD,IAAI,EAAE,YADE;UAERE,IAAI,EAAE;QAFE;MAFZ,CAN6B,CAAV,CAArB;IAcD,CAfK,CAAN,CAeGC,GAfH,CAeOC,OAfP;EAgBD,CAjBC,CAAF;AAkBD,CA1CO,CAAR"},"metadata":{},"sourceType":"module"}