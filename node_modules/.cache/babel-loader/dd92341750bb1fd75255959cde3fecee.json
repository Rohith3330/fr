{"ast":null,"code":"const createImports = function (imports, postcss) {\n  let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"rule\";\n  return Object.keys(imports).map(path => {\n    const aliases = imports[path];\n    const declarations = Object.keys(aliases).map(key => postcss.decl({\n      prop: key,\n      value: aliases[key],\n      raws: {\n        before: \"\\n  \"\n      }\n    }));\n    const hasDeclarations = declarations.length > 0;\n    const rule = mode === \"rule\" ? postcss.rule({\n      selector: `:import('${path}')`,\n      raws: {\n        after: hasDeclarations ? \"\\n\" : \"\"\n      }\n    }) : postcss.atRule({\n      name: \"icss-import\",\n      params: `'${path}'`,\n      raws: {\n        after: hasDeclarations ? \"\\n\" : \"\"\n      }\n    });\n\n    if (hasDeclarations) {\n      rule.append(declarations);\n    }\n\n    return rule;\n  });\n};\n\nconst createExports = function (exports, postcss) {\n  let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"rule\";\n  const declarations = Object.keys(exports).map(key => postcss.decl({\n    prop: key,\n    value: exports[key],\n    raws: {\n      before: \"\\n  \"\n    }\n  }));\n\n  if (declarations.length === 0) {\n    return [];\n  }\n\n  const rule = mode === \"rule\" ? postcss.rule({\n    selector: `:export`,\n    raws: {\n      after: \"\\n\"\n    }\n  }) : postcss.atRule({\n    name: \"icss-export\",\n    raws: {\n      after: \"\\n\"\n    }\n  });\n  rule.append(declarations);\n  return [rule];\n};\n\nconst createICSSRules = (imports, exports, postcss, mode) => [...createImports(imports, postcss, mode), ...createExports(exports, postcss, mode)];\n\nmodule.exports = createICSSRules;","map":{"version":3,"names":["createImports","imports","postcss","mode","Object","keys","map","path","aliases","declarations","key","decl","prop","value","raws","before","hasDeclarations","length","rule","selector","after","atRule","name","params","append","createExports","exports","createICSSRules","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/icss-utils/src/createICSSRules.js"],"sourcesContent":["const createImports = (imports, postcss, mode = \"rule\") => {\n  return Object.keys(imports).map((path) => {\n    const aliases = imports[path];\n    const declarations = Object.keys(aliases).map((key) =>\n      postcss.decl({\n        prop: key,\n        value: aliases[key],\n        raws: { before: \"\\n  \" },\n      })\n    );\n\n    const hasDeclarations = declarations.length > 0;\n\n    const rule =\n      mode === \"rule\"\n        ? postcss.rule({\n            selector: `:import('${path}')`,\n            raws: { after: hasDeclarations ? \"\\n\" : \"\" },\n          })\n        : postcss.atRule({\n            name: \"icss-import\",\n            params: `'${path}'`,\n            raws: { after: hasDeclarations ? \"\\n\" : \"\" },\n          });\n\n    if (hasDeclarations) {\n      rule.append(declarations);\n    }\n\n    return rule;\n  });\n};\n\nconst createExports = (exports, postcss, mode = \"rule\") => {\n  const declarations = Object.keys(exports).map((key) =>\n    postcss.decl({\n      prop: key,\n      value: exports[key],\n      raws: { before: \"\\n  \" },\n    })\n  );\n\n  if (declarations.length === 0) {\n    return [];\n  }\n  const rule =\n    mode === \"rule\"\n      ? postcss.rule({\n          selector: `:export`,\n          raws: { after: \"\\n\" },\n        })\n      : postcss.atRule({\n          name: \"icss-export\",\n          raws: { after: \"\\n\" },\n        });\n\n  rule.append(declarations);\n\n  return [rule];\n};\n\nconst createICSSRules = (imports, exports, postcss, mode) => [\n  ...createImports(imports, postcss, mode),\n  ...createExports(exports, postcss, mode),\n];\n\nmodule.exports = createICSSRules;\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG,UAACC,OAAD,EAAUC,OAAV,EAAqC;EAAA,IAAlBC,IAAkB,uEAAX,MAAW;EACzD,OAAOC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,GAArB,CAA0BC,IAAD,IAAU;IACxC,MAAMC,OAAO,GAAGP,OAAO,CAACM,IAAD,CAAvB;IACA,MAAME,YAAY,GAAGL,MAAM,CAACC,IAAP,CAAYG,OAAZ,EAAqBF,GAArB,CAA0BI,GAAD,IAC5CR,OAAO,CAACS,IAAR,CAAa;MACXC,IAAI,EAAEF,GADK;MAEXG,KAAK,EAAEL,OAAO,CAACE,GAAD,CAFH;MAGXI,IAAI,EAAE;QAAEC,MAAM,EAAE;MAAV;IAHK,CAAb,CADmB,CAArB;IAQA,MAAMC,eAAe,GAAGP,YAAY,CAACQ,MAAb,GAAsB,CAA9C;IAEA,MAAMC,IAAI,GACRf,IAAI,KAAK,MAAT,GACID,OAAO,CAACgB,IAAR,CAAa;MACXC,QAAQ,EAAG,YAAWZ,IAAK,IADhB;MAEXO,IAAI,EAAE;QAAEM,KAAK,EAAEJ,eAAe,GAAG,IAAH,GAAU;MAAlC;IAFK,CAAb,CADJ,GAKId,OAAO,CAACmB,MAAR,CAAe;MACbC,IAAI,EAAE,aADO;MAEbC,MAAM,EAAG,IAAGhB,IAAK,GAFJ;MAGbO,IAAI,EAAE;QAAEM,KAAK,EAAEJ,eAAe,GAAG,IAAH,GAAU;MAAlC;IAHO,CAAf,CANN;;IAYA,IAAIA,eAAJ,EAAqB;MACnBE,IAAI,CAACM,MAAL,CAAYf,YAAZ;IACD;;IAED,OAAOS,IAAP;EACD,CA7BM,CAAP;AA8BD,CA/BD;;AAiCA,MAAMO,aAAa,GAAG,UAACC,OAAD,EAAUxB,OAAV,EAAqC;EAAA,IAAlBC,IAAkB,uEAAX,MAAW;EACzD,MAAMM,YAAY,GAAGL,MAAM,CAACC,IAAP,CAAYqB,OAAZ,EAAqBpB,GAArB,CAA0BI,GAAD,IAC5CR,OAAO,CAACS,IAAR,CAAa;IACXC,IAAI,EAAEF,GADK;IAEXG,KAAK,EAAEa,OAAO,CAAChB,GAAD,CAFH;IAGXI,IAAI,EAAE;MAAEC,MAAM,EAAE;IAAV;EAHK,CAAb,CADmB,CAArB;;EAQA,IAAIN,YAAY,CAACQ,MAAb,KAAwB,CAA5B,EAA+B;IAC7B,OAAO,EAAP;EACD;;EACD,MAAMC,IAAI,GACRf,IAAI,KAAK,MAAT,GACID,OAAO,CAACgB,IAAR,CAAa;IACXC,QAAQ,EAAG,SADA;IAEXL,IAAI,EAAE;MAAEM,KAAK,EAAE;IAAT;EAFK,CAAb,CADJ,GAKIlB,OAAO,CAACmB,MAAR,CAAe;IACbC,IAAI,EAAE,aADO;IAEbR,IAAI,EAAE;MAAEM,KAAK,EAAE;IAAT;EAFO,CAAf,CANN;EAWAF,IAAI,CAACM,MAAL,CAAYf,YAAZ;EAEA,OAAO,CAACS,IAAD,CAAP;AACD,CA1BD;;AA4BA,MAAMS,eAAe,GAAG,CAAC1B,OAAD,EAAUyB,OAAV,EAAmBxB,OAAnB,EAA4BC,IAA5B,KAAqC,CAC3D,GAAGH,aAAa,CAACC,OAAD,EAAUC,OAAV,EAAmBC,IAAnB,CAD2C,EAE3D,GAAGsB,aAAa,CAACC,OAAD,EAAUxB,OAAV,EAAmBC,IAAnB,CAF2C,CAA7D;;AAKAyB,MAAM,CAACF,OAAP,GAAiBC,eAAjB"},"metadata":{},"sourceType":"script"}