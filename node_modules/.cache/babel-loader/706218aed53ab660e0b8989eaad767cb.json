{"ast":null,"code":"var roundingPrecisionFrom = require('./rounding-precision').roundingPrecisionFrom;\n\nvar override = require('../utils/override');\n\nvar OptimizationLevel = {\n  Zero: '0',\n  One: '1',\n  Two: '2'\n};\nvar DEFAULTS = {};\nDEFAULTS[OptimizationLevel.Zero] = {};\nDEFAULTS[OptimizationLevel.One] = {\n  cleanupCharsets: true,\n  normalizeUrls: true,\n  optimizeBackground: true,\n  optimizeBorderRadius: true,\n  optimizeFilter: true,\n  optimizeFontWeight: true,\n  optimizeOutline: true,\n  removeEmpty: true,\n  removeNegativePaddings: true,\n  removeQuotes: true,\n  removeWhitespace: true,\n  replaceMultipleZeros: true,\n  replaceTimeUnits: true,\n  replaceZeroUnits: true,\n  roundingPrecision: roundingPrecisionFrom(undefined),\n  selectorsSortingMethod: 'standard',\n  specialComments: 'all',\n  tidyAtRules: true,\n  tidyBlockScopes: true,\n  tidySelectors: true,\n  variableValueOptimizers: []\n};\nDEFAULTS[OptimizationLevel.Two] = {\n  mergeAdjacentRules: true,\n  mergeIntoShorthands: true,\n  mergeMedia: true,\n  mergeNonAdjacentRules: true,\n  mergeSemantically: false,\n  overrideProperties: true,\n  removeEmpty: true,\n  reduceNonAdjacentRules: true,\n  removeDuplicateFontRules: true,\n  removeDuplicateMediaBlocks: true,\n  removeDuplicateRules: true,\n  removeUnusedAtRules: false,\n  restructureRules: false,\n  skipProperties: []\n};\nvar ALL_KEYWORD_1 = '*';\nvar ALL_KEYWORD_2 = 'all';\nvar FALSE_KEYWORD_1 = 'false';\nvar FALSE_KEYWORD_2 = 'off';\nvar TRUE_KEYWORD_1 = 'true';\nvar TRUE_KEYWORD_2 = 'on';\nvar LIST_VALUE_SEPARATOR = ',';\nvar OPTION_SEPARATOR = ';';\nvar OPTION_VALUE_SEPARATOR = ':';\n\nfunction optimizationLevelFrom(source) {\n  var level = override(DEFAULTS, {});\n  var Zero = OptimizationLevel.Zero;\n  var One = OptimizationLevel.One;\n  var Two = OptimizationLevel.Two;\n\n  if (undefined === source) {\n    delete level[Two];\n    return level;\n  }\n\n  if (typeof source == 'string') {\n    source = parseInt(source);\n  }\n\n  if (typeof source == 'number' && source === parseInt(Two)) {\n    return level;\n  }\n\n  if (typeof source == 'number' && source === parseInt(One)) {\n    delete level[Two];\n    return level;\n  }\n\n  if (typeof source == 'number' && source === parseInt(Zero)) {\n    delete level[Two];\n    delete level[One];\n    return level;\n  }\n\n  if (typeof source == 'object') {\n    source = covertValuesToHashes(source);\n  }\n\n  if (One in source && 'roundingPrecision' in source[One]) {\n    source[One].roundingPrecision = roundingPrecisionFrom(source[One].roundingPrecision);\n  }\n\n  if (Two in source && 'skipProperties' in source[Two] && typeof source[Two].skipProperties == 'string') {\n    source[Two].skipProperties = source[Two].skipProperties.split(LIST_VALUE_SEPARATOR);\n  }\n\n  if (Zero in source || One in source || Two in source) {\n    level[Zero] = override(level[Zero], source[Zero]);\n  }\n\n  if (One in source && ALL_KEYWORD_1 in source[One]) {\n    level[One] = override(level[One], defaults(One, normalizeValue(source[One][ALL_KEYWORD_1])));\n    delete source[One][ALL_KEYWORD_1];\n  }\n\n  if (One in source && ALL_KEYWORD_2 in source[One]) {\n    level[One] = override(level[One], defaults(One, normalizeValue(source[One][ALL_KEYWORD_2])));\n    delete source[One][ALL_KEYWORD_2];\n  }\n\n  if (One in source || Two in source) {\n    level[One] = override(level[One], source[One]);\n  } else {\n    delete level[One];\n  }\n\n  if (Two in source && ALL_KEYWORD_1 in source[Two]) {\n    level[Two] = override(level[Two], defaults(Two, normalizeValue(source[Two][ALL_KEYWORD_1])));\n    delete source[Two][ALL_KEYWORD_1];\n  }\n\n  if (Two in source && ALL_KEYWORD_2 in source[Two]) {\n    level[Two] = override(level[Two], defaults(Two, normalizeValue(source[Two][ALL_KEYWORD_2])));\n    delete source[Two][ALL_KEYWORD_2];\n  }\n\n  if (Two in source) {\n    level[Two] = override(level[Two], source[Two]);\n  } else {\n    delete level[Two];\n  }\n\n  return level;\n}\n\nfunction defaults(level, value) {\n  var options = override(DEFAULTS[level], {});\n  var key;\n\n  for (key in options) {\n    if (typeof options[key] == 'boolean') {\n      options[key] = value;\n    }\n  }\n\n  return options;\n}\n\nfunction normalizeValue(value) {\n  switch (value) {\n    case FALSE_KEYWORD_1:\n    case FALSE_KEYWORD_2:\n      return false;\n\n    case TRUE_KEYWORD_1:\n    case TRUE_KEYWORD_2:\n      return true;\n\n    default:\n      return value;\n  }\n}\n\nfunction covertValuesToHashes(source) {\n  var clonedSource = override(source, {});\n  var level;\n  var i;\n\n  for (i = 0; i <= 2; i++) {\n    level = '' + i;\n\n    if (level in clonedSource && (clonedSource[level] === undefined || clonedSource[level] === false)) {\n      delete clonedSource[level];\n    }\n\n    if (level in clonedSource && clonedSource[level] === true) {\n      clonedSource[level] = {};\n    }\n\n    if (level in clonedSource && typeof clonedSource[level] == 'string') {\n      clonedSource[level] = covertToHash(clonedSource[level], level);\n    }\n  }\n\n  return clonedSource;\n}\n\nfunction covertToHash(asString, level) {\n  return asString.split(OPTION_SEPARATOR).reduce(function (accumulator, directive) {\n    var parts = directive.split(OPTION_VALUE_SEPARATOR);\n    var name = parts[0];\n    var value = parts[1];\n    var normalizedValue = normalizeValue(value);\n\n    if (ALL_KEYWORD_1 == name || ALL_KEYWORD_2 == name) {\n      accumulator = override(accumulator, defaults(level, normalizedValue));\n    } else {\n      accumulator[name] = normalizedValue;\n    }\n\n    return accumulator;\n  }, {});\n}\n\nmodule.exports = {\n  OptimizationLevel: OptimizationLevel,\n  optimizationLevelFrom: optimizationLevelFrom\n};","map":{"version":3,"names":["roundingPrecisionFrom","require","override","OptimizationLevel","Zero","One","Two","DEFAULTS","cleanupCharsets","normalizeUrls","optimizeBackground","optimizeBorderRadius","optimizeFilter","optimizeFontWeight","optimizeOutline","removeEmpty","removeNegativePaddings","removeQuotes","removeWhitespace","replaceMultipleZeros","replaceTimeUnits","replaceZeroUnits","roundingPrecision","undefined","selectorsSortingMethod","specialComments","tidyAtRules","tidyBlockScopes","tidySelectors","variableValueOptimizers","mergeAdjacentRules","mergeIntoShorthands","mergeMedia","mergeNonAdjacentRules","mergeSemantically","overrideProperties","reduceNonAdjacentRules","removeDuplicateFontRules","removeDuplicateMediaBlocks","removeDuplicateRules","removeUnusedAtRules","restructureRules","skipProperties","ALL_KEYWORD_1","ALL_KEYWORD_2","FALSE_KEYWORD_1","FALSE_KEYWORD_2","TRUE_KEYWORD_1","TRUE_KEYWORD_2","LIST_VALUE_SEPARATOR","OPTION_SEPARATOR","OPTION_VALUE_SEPARATOR","optimizationLevelFrom","source","level","parseInt","covertValuesToHashes","split","defaults","normalizeValue","value","options","key","clonedSource","i","covertToHash","asString","reduce","accumulator","directive","parts","name","normalizedValue","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/clean-css/lib/options/optimization-level.js"],"sourcesContent":["var roundingPrecisionFrom = require('./rounding-precision').roundingPrecisionFrom;\n\nvar override = require('../utils/override');\n\nvar OptimizationLevel = {\n  Zero: '0',\n  One: '1',\n  Two: '2'\n};\n\nvar DEFAULTS = {};\n\nDEFAULTS[OptimizationLevel.Zero] = {};\nDEFAULTS[OptimizationLevel.One] = {\n  cleanupCharsets: true,\n  normalizeUrls: true,\n  optimizeBackground: true,\n  optimizeBorderRadius: true,\n  optimizeFilter: true,\n  optimizeFontWeight: true,\n  optimizeOutline: true,\n  removeEmpty: true,\n  removeNegativePaddings: true,\n  removeQuotes: true,\n  removeWhitespace: true,\n  replaceMultipleZeros: true,\n  replaceTimeUnits: true,\n  replaceZeroUnits: true,\n  roundingPrecision: roundingPrecisionFrom(undefined),\n  selectorsSortingMethod: 'standard',\n  specialComments: 'all',\n  tidyAtRules: true,\n  tidyBlockScopes: true,\n  tidySelectors: true,\n  variableValueOptimizers: []\n};\nDEFAULTS[OptimizationLevel.Two] = {\n  mergeAdjacentRules: true,\n  mergeIntoShorthands: true,\n  mergeMedia: true,\n  mergeNonAdjacentRules: true,\n  mergeSemantically: false,\n  overrideProperties: true,\n  removeEmpty: true,\n  reduceNonAdjacentRules: true,\n  removeDuplicateFontRules: true,\n  removeDuplicateMediaBlocks: true,\n  removeDuplicateRules: true,\n  removeUnusedAtRules: false,\n  restructureRules: false,\n  skipProperties: []\n};\n\nvar ALL_KEYWORD_1 = '*';\nvar ALL_KEYWORD_2 = 'all';\nvar FALSE_KEYWORD_1 = 'false';\nvar FALSE_KEYWORD_2 = 'off';\nvar TRUE_KEYWORD_1 = 'true';\nvar TRUE_KEYWORD_2 = 'on';\n\nvar LIST_VALUE_SEPARATOR = ',';\nvar OPTION_SEPARATOR = ';';\nvar OPTION_VALUE_SEPARATOR = ':';\n\nfunction optimizationLevelFrom(source) {\n  var level = override(DEFAULTS, {});\n  var Zero = OptimizationLevel.Zero;\n  var One = OptimizationLevel.One;\n  var Two = OptimizationLevel.Two;\n\n  if (undefined === source) {\n    delete level[Two];\n    return level;\n  }\n\n  if (typeof source == 'string') {\n    source = parseInt(source);\n  }\n\n  if (typeof source == 'number' && source === parseInt(Two)) {\n    return level;\n  }\n\n  if (typeof source == 'number' && source === parseInt(One)) {\n    delete level[Two];\n    return level;\n  }\n\n  if (typeof source == 'number' && source === parseInt(Zero)) {\n    delete level[Two];\n    delete level[One];\n    return level;\n  }\n\n  if (typeof source == 'object') {\n    source = covertValuesToHashes(source);\n  }\n\n  if (One in source && 'roundingPrecision' in source[One]) {\n    source[One].roundingPrecision = roundingPrecisionFrom(source[One].roundingPrecision);\n  }\n\n  if (Two in source && 'skipProperties' in source[Two] && typeof (source[Two].skipProperties) == 'string') {\n    source[Two].skipProperties = source[Two].skipProperties.split(LIST_VALUE_SEPARATOR);\n  }\n\n  if (Zero in source || One in source || Two in source) {\n    level[Zero] = override(level[Zero], source[Zero]);\n  }\n\n  if (One in source && ALL_KEYWORD_1 in source[One]) {\n    level[One] = override(level[One], defaults(One, normalizeValue(source[One][ALL_KEYWORD_1])));\n    delete source[One][ALL_KEYWORD_1];\n  }\n\n  if (One in source && ALL_KEYWORD_2 in source[One]) {\n    level[One] = override(level[One], defaults(One, normalizeValue(source[One][ALL_KEYWORD_2])));\n    delete source[One][ALL_KEYWORD_2];\n  }\n\n  if (One in source || Two in source) {\n    level[One] = override(level[One], source[One]);\n  } else {\n    delete level[One];\n  }\n\n  if (Two in source && ALL_KEYWORD_1 in source[Two]) {\n    level[Two] = override(level[Two], defaults(Two, normalizeValue(source[Two][ALL_KEYWORD_1])));\n    delete source[Two][ALL_KEYWORD_1];\n  }\n\n  if (Two in source && ALL_KEYWORD_2 in source[Two]) {\n    level[Two] = override(level[Two], defaults(Two, normalizeValue(source[Two][ALL_KEYWORD_2])));\n    delete source[Two][ALL_KEYWORD_2];\n  }\n\n  if (Two in source) {\n    level[Two] = override(level[Two], source[Two]);\n  } else {\n    delete level[Two];\n  }\n\n  return level;\n}\n\nfunction defaults(level, value) {\n  var options = override(DEFAULTS[level], {});\n  var key;\n\n  for (key in options) {\n    if (typeof options[key] == 'boolean') {\n      options[key] = value;\n    }\n  }\n\n  return options;\n}\n\nfunction normalizeValue(value) {\n  switch (value) {\n  case FALSE_KEYWORD_1:\n  case FALSE_KEYWORD_2:\n    return false;\n  case TRUE_KEYWORD_1:\n  case TRUE_KEYWORD_2:\n    return true;\n  default:\n    return value;\n  }\n}\n\nfunction covertValuesToHashes(source) {\n  var clonedSource = override(source, {});\n  var level;\n  var i;\n\n  for (i = 0; i <= 2; i++) {\n    level = '' + i;\n\n    if (level in clonedSource && (clonedSource[level] === undefined || clonedSource[level] === false)) {\n      delete clonedSource[level];\n    }\n\n    if (level in clonedSource && clonedSource[level] === true) {\n      clonedSource[level] = {};\n    }\n\n    if (level in clonedSource && typeof clonedSource[level] == 'string') {\n      clonedSource[level] = covertToHash(clonedSource[level], level);\n    }\n  }\n\n  return clonedSource;\n}\n\nfunction covertToHash(asString, level) {\n  return asString\n    .split(OPTION_SEPARATOR)\n    .reduce(function(accumulator, directive) {\n      var parts = directive.split(OPTION_VALUE_SEPARATOR);\n      var name = parts[0];\n      var value = parts[1];\n      var normalizedValue = normalizeValue(value);\n\n      if (ALL_KEYWORD_1 == name || ALL_KEYWORD_2 == name) {\n        accumulator = override(accumulator, defaults(level, normalizedValue));\n      } else {\n        accumulator[name] = normalizedValue;\n      }\n\n      return accumulator;\n    }, {});\n}\n\nmodule.exports = {\n  OptimizationLevel: OptimizationLevel,\n  optimizationLevelFrom: optimizationLevelFrom\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}