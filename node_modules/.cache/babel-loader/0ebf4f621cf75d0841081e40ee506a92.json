{"ast":null,"code":"import expect from 'expect';\nimport getComputedRole from '../../../src/util/getComputedRole';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\ndescribe('getComputedRole', () => {\n  describe('explicit role', () => {\n    describe('valid role', () => {\n      it('should return the role', () => {\n        expect(getComputedRole('div', [JSXAttributeMock('role', 'button')])).toBe('button');\n      });\n    });\n    describe('invalid role', () => {\n      describe('has implicit', () => {\n        it('should return the implicit role', () => {\n          expect(getComputedRole('li', [JSXAttributeMock('role', 'beeswax')])).toBe('listitem');\n        });\n      });\n      describe('lacks implicit', () => {\n        it('should return null', () => {\n          expect(getComputedRole('div', [JSXAttributeMock('role', 'beeswax')])).toBeNull();\n        });\n      });\n    });\n    describe('no role', () => {\n      describe('has implicit', () => {\n        it('should return the implicit role', () => {\n          expect(getComputedRole('li', [])).toBe('listitem');\n        });\n      });\n      describe('lacks implicit', () => {\n        it('should return null', () => {\n          expect(getComputedRole('div', [])).toBeNull();\n        });\n      });\n    });\n  });\n  describe('implicit role', () => {\n    describe('has implicit', () => {\n      it('should return the implicit role', () => {\n        expect(getComputedRole('li', [JSXAttributeMock('role', 'beeswax')])).toBe('listitem');\n      });\n    });\n    describe('lacks implicit', () => {\n      it('should return null', () => {\n        expect(getComputedRole('div', [])).toBeNull();\n      });\n    });\n  });\n});","map":{"version":3,"names":["expect","getComputedRole","JSXAttributeMock","describe","it","toBe","toBeNull"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/getComputedRole-test.js"],"sourcesContent":["import expect from 'expect';\nimport getComputedRole from '../../../src/util/getComputedRole';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\n\ndescribe('getComputedRole', () => {\n  describe('explicit role', () => {\n    describe('valid role', () => {\n      it('should return the role', () => {\n        expect(getComputedRole(\n          'div',\n          [JSXAttributeMock('role', 'button')],\n        )).toBe('button');\n      });\n    });\n    describe('invalid role', () => {\n      describe('has implicit', () => {\n        it('should return the implicit role', () => {\n          expect(getComputedRole(\n            'li',\n            [JSXAttributeMock('role', 'beeswax')],\n          )).toBe('listitem');\n        });\n      });\n      describe('lacks implicit', () => {\n        it('should return null', () => {\n          expect(getComputedRole(\n            'div',\n            [JSXAttributeMock('role', 'beeswax')],\n          )).toBeNull();\n        });\n      });\n    });\n\n    describe('no role', () => {\n      describe('has implicit', () => {\n        it('should return the implicit role', () => {\n          expect(getComputedRole(\n            'li',\n            [],\n          )).toBe('listitem');\n        });\n      });\n      describe('lacks implicit', () => {\n        it('should return null', () => {\n          expect(getComputedRole(\n            'div',\n            [],\n          )).toBeNull();\n        });\n      });\n    });\n  });\n  describe('implicit role', () => {\n    describe('has implicit', () => {\n      it('should return the implicit role', () => {\n        expect(getComputedRole(\n          'li',\n          [JSXAttributeMock('role', 'beeswax')],\n        )).toBe('listitem');\n      });\n    });\n    describe('lacks implicit', () => {\n      it('should return null', () => {\n        expect(getComputedRole(\n          'div',\n          [],\n        )).toBeNull();\n      });\n    });\n  });\n});\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;AAEAC,QAAQ,CAAC,iBAAD,EAAoB,MAAM;EAChCA,QAAQ,CAAC,eAAD,EAAkB,MAAM;IAC9BA,QAAQ,CAAC,YAAD,EAAe,MAAM;MAC3BC,EAAE,CAAC,wBAAD,EAA2B,MAAM;QACjCJ,MAAM,CAACC,eAAe,CACpB,KADoB,EAEpB,CAACC,gBAAgB,CAAC,MAAD,EAAS,QAAT,CAAjB,CAFoB,CAAhB,CAAN,CAGGG,IAHH,CAGQ,QAHR;MAID,CALC,CAAF;IAMD,CAPO,CAAR;IAQAF,QAAQ,CAAC,cAAD,EAAiB,MAAM;MAC7BA,QAAQ,CAAC,cAAD,EAAiB,MAAM;QAC7BC,EAAE,CAAC,iCAAD,EAAoC,MAAM;UAC1CJ,MAAM,CAACC,eAAe,CACpB,IADoB,EAEpB,CAACC,gBAAgB,CAAC,MAAD,EAAS,SAAT,CAAjB,CAFoB,CAAhB,CAAN,CAGGG,IAHH,CAGQ,UAHR;QAID,CALC,CAAF;MAMD,CAPO,CAAR;MAQAF,QAAQ,CAAC,gBAAD,EAAmB,MAAM;QAC/BC,EAAE,CAAC,oBAAD,EAAuB,MAAM;UAC7BJ,MAAM,CAACC,eAAe,CACpB,KADoB,EAEpB,CAACC,gBAAgB,CAAC,MAAD,EAAS,SAAT,CAAjB,CAFoB,CAAhB,CAAN,CAGGI,QAHH;QAID,CALC,CAAF;MAMD,CAPO,CAAR;IAQD,CAjBO,CAAR;IAmBAH,QAAQ,CAAC,SAAD,EAAY,MAAM;MACxBA,QAAQ,CAAC,cAAD,EAAiB,MAAM;QAC7BC,EAAE,CAAC,iCAAD,EAAoC,MAAM;UAC1CJ,MAAM,CAACC,eAAe,CACpB,IADoB,EAEpB,EAFoB,CAAhB,CAAN,CAGGI,IAHH,CAGQ,UAHR;QAID,CALC,CAAF;MAMD,CAPO,CAAR;MAQAF,QAAQ,CAAC,gBAAD,EAAmB,MAAM;QAC/BC,EAAE,CAAC,oBAAD,EAAuB,MAAM;UAC7BJ,MAAM,CAACC,eAAe,CACpB,KADoB,EAEpB,EAFoB,CAAhB,CAAN,CAGGK,QAHH;QAID,CALC,CAAF;MAMD,CAPO,CAAR;IAQD,CAjBO,CAAR;EAkBD,CA9CO,CAAR;EA+CAH,QAAQ,CAAC,eAAD,EAAkB,MAAM;IAC9BA,QAAQ,CAAC,cAAD,EAAiB,MAAM;MAC7BC,EAAE,CAAC,iCAAD,EAAoC,MAAM;QAC1CJ,MAAM,CAACC,eAAe,CACpB,IADoB,EAEpB,CAACC,gBAAgB,CAAC,MAAD,EAAS,SAAT,CAAjB,CAFoB,CAAhB,CAAN,CAGGG,IAHH,CAGQ,UAHR;MAID,CALC,CAAF;IAMD,CAPO,CAAR;IAQAF,QAAQ,CAAC,gBAAD,EAAmB,MAAM;MAC/BC,EAAE,CAAC,oBAAD,EAAuB,MAAM;QAC7BJ,MAAM,CAACC,eAAe,CACpB,KADoB,EAEpB,EAFoB,CAAhB,CAAN,CAGGK,QAHH;MAID,CALC,CAAF;IAMD,CAPO,CAAR;EAQD,CAjBO,CAAR;AAkBD,CAlEO,CAAR"},"metadata":{},"sourceType":"module"}