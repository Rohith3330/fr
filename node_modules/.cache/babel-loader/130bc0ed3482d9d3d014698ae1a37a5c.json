{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Rohith\\\\Pictures\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { computeStrides, isString, rightPad, sizeFromShape } from './util';\n// Maximum number of values before we decide to show ellipsis.\nvar FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nvar FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nvar FORMAT_NUM_SIG_DIGITS = 7;\nexport function tensorToString(vals, shape, dtype, verbose) {\n  var strides = computeStrides(shape);\n  var padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n  var rank = shape.length;\n  var valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n  var lines = ['Tensor'];\n  if (verbose) {\n    lines.push(\"  dtype: \".concat(dtype));\n    lines.push(\"  rank: \".concat(rank));\n    lines.push(\"  shape: [\".concat(shape, \"]\"));\n    lines.push(\"  values:\");\n  }\n  lines.push(valsLines.map(function (l) {\n    return '    ' + l;\n  }).join('\\n'));\n  return lines.join('\\n');\n}\nfunction computeMaxSizePerColumn(vals, shape, dtype, strides) {\n  var n = sizeFromShape(shape);\n  var numCols = strides[strides.length - 1];\n  var padPerCol = new Array(numCols).fill(0);\n  var rank = shape.length;\n  var valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;\n  if (rank > 1) {\n    for (var row = 0; row < n / numCols; row++) {\n      var offset = row * numCols;\n      for (var j = 0; j < numCols; j++) {\n        padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);\n      }\n    }\n  }\n  return padPerCol;\n}\nfunction valToString(val, pad, dtype) {\n  var valStr;\n  if (Array.isArray(val)) {\n    valStr = \"\".concat(parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS)), \" + \") + \"\".concat(parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS)), \"j\");\n  } else if (isString(val)) {\n    valStr = \"'\".concat(val, \"'\");\n  } else if (dtype === 'bool') {\n    valStr = boolNumToString(val);\n  } else {\n    valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n  }\n  return rightPad(valStr, pad);\n}\nfunction boolNumToString(v) {\n  return v === 0 ? 'false' : 'true';\n}\nfunction subTensorToString(vals, shape, dtype, strides, padPerCol) {\n  var isLast = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  var storagePerElement = dtype === 'complex64' ? 2 : 1;\n  var size = shape[0];\n  var rank = shape.length;\n  if (rank === 0) {\n    if (dtype === 'complex64') {\n      var complexTuple = createComplexTuples(vals);\n      return [valToString(complexTuple[0], 0, dtype)];\n    }\n    if (dtype === 'bool') {\n      return [boolNumToString(vals[0])];\n    }\n    return [vals[0].toString()];\n  }\n  if (rank === 1) {\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n      var firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n      var firstVals = Array.from(vals.slice(0, firstValsSize));\n      var lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));\n      if (dtype === 'complex64') {\n        firstVals = createComplexTuples(firstVals);\n        lastVals = createComplexTuples(lastVals);\n      }\n      return ['[' + firstVals.map(function (x, i) {\n        return valToString(x, padPerCol[i], dtype);\n      }).join(', ') + ', ..., ' + lastVals.map(function (x, i) {\n        return valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype);\n      }).join(', ') + ']'];\n    }\n    var displayVals = dtype === 'complex64' ? createComplexTuples(vals) : Array.from(vals);\n    return ['[' + displayVals.map(function (x, i) {\n      return valToString(x, padPerCol[i], dtype);\n    }).join(', ') + ']'];\n  }\n  // The array is rank 2 or more.\n  var subshape = shape.slice(1);\n  var substrides = strides.slice(1);\n  var stride = strides[0] * storagePerElement;\n  var lines = [];\n  if (size > FORMAT_LIMIT_NUM_VALS) {\n    for (var i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n      var start = i * stride;\n      var end = start + stride;\n      lines.push.apply(lines, _toConsumableArray(subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false /* isLast */)));\n    }\n\n    lines.push('...');\n    for (var _i = size - FORMAT_NUM_FIRST_LAST_VALS; _i < size; _i++) {\n      var _start = _i * stride;\n      var _end = _start + stride;\n      lines.push.apply(lines, _toConsumableArray(subTensorToString(vals.slice(_start, _end), subshape, dtype, substrides, padPerCol, _i === size - 1 /* isLast */)));\n    }\n  } else {\n    for (var _i2 = 0; _i2 < size; _i2++) {\n      var _start2 = _i2 * stride;\n      var _end2 = _start2 + stride;\n      lines.push.apply(lines, _toConsumableArray(subTensorToString(vals.slice(_start2, _end2), subshape, dtype, substrides, padPerCol, _i2 === size - 1 /* isLast */)));\n    }\n  }\n\n  var sep = rank === 2 ? ',' : '';\n  lines[0] = '[' + lines[0] + sep;\n  for (var _i3 = 1; _i3 < lines.length - 1; _i3++) {\n    lines[_i3] = ' ' + lines[_i3] + sep;\n  }\n  var newLineSep = ',\\n';\n  for (var _i4 = 2; _i4 < rank; _i4++) {\n    newLineSep += '\\n';\n  }\n  lines[lines.length - 1] = ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n  return lines;\n}\nfunction createComplexTuples(vals) {\n  var complexTuples = [];\n  for (var i = 0; i < vals.length; i += 2) {\n    complexTuples.push([vals[i], vals[i + 1]]);\n  }\n  return complexTuples;\n}","map":null,"metadata":{},"sourceType":"module"}