{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'func-call-spacing',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Require or disallow spacing between function identifiers and their invocations',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: 'whitespace',\n    schema: {\n      anyOf: [{\n        type: 'array',\n        items: [{\n          enum: ['never']\n        }],\n        minItems: 0,\n        maxItems: 1\n      }, {\n        type: 'array',\n        items: [{\n          enum: ['always']\n        }, {\n          type: 'object',\n          properties: {\n            allowNewlines: {\n              type: 'boolean'\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    },\n    messages: {\n      unexpectedWhitespace: 'Unexpected whitespace between function name and paren.',\n      unexpectedNewline: 'Unexpected newline between function name and paren.',\n      missing: 'Missing space between function name and paren.'\n    }\n  },\n  defaultOptions: ['never', {}],\n\n  create(context, _ref) {\n    let [option, config] = _ref;\n    const sourceCode = context.getSourceCode();\n    const text = sourceCode.getText();\n    /**\n     * Check if open space is present in a function name\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n    function checkSpacing(node) {\n      var _a;\n\n      const isOptionalCall = util.isOptionalCallExpression(node);\n      const closingParenToken = sourceCode.getLastToken(node);\n      const lastCalleeTokenWithoutPossibleParens = sourceCode.getLastToken((_a = node.typeParameters) !== null && _a !== void 0 ? _a : node.callee);\n      const openingParenToken = sourceCode.getFirstTokenBetween(lastCalleeTokenWithoutPossibleParens, closingParenToken, util.isOpeningParenToken);\n\n      if (!openingParenToken || openingParenToken.range[1] >= node.range[1]) {\n        // new expression with no parens...\n        return;\n      }\n\n      const lastCalleeToken = sourceCode.getTokenBefore(openingParenToken, util.isNotOptionalChainPunctuator);\n      const textBetweenTokens = text.slice(lastCalleeToken.range[1], openingParenToken.range[0]).replace(/\\/\\*.*?\\*\\//gu, '');\n      const hasWhitespace = /\\s/u.test(textBetweenTokens);\n      const hasNewline = hasWhitespace && util.LINEBREAK_MATCHER.test(textBetweenTokens);\n\n      if (option === 'never') {\n        if (hasWhitespace) {\n          return context.report({\n            node,\n            loc: lastCalleeToken.loc.start,\n            messageId: 'unexpectedWhitespace',\n\n            fix(fixer) {\n              /*\n               * Only autofix if there is no newline\n               * https://github.com/eslint/eslint/issues/7787\n               */\n              if (!hasNewline && // don't fix optional calls\n              !isOptionalCall) {\n                return fixer.removeRange([lastCalleeToken.range[1], openingParenToken.range[0]]);\n              }\n\n              return null;\n            }\n\n          });\n        }\n      } else if (isOptionalCall) {\n        // disallow:\n        // foo?. ();\n        // foo ?.();\n        // foo ?. ();\n        if (hasWhitespace || hasNewline) {\n          context.report({\n            node,\n            loc: lastCalleeToken.loc.start,\n            messageId: 'unexpectedWhitespace'\n          });\n        }\n      } else {\n        if (!hasWhitespace) {\n          context.report({\n            node,\n            loc: lastCalleeToken.loc.start,\n            messageId: 'missing',\n\n            fix(fixer) {\n              return fixer.insertTextBefore(openingParenToken, ' ');\n            }\n\n          });\n        } else if (!config.allowNewlines && hasNewline) {\n          context.report({\n            node,\n            loc: lastCalleeToken.loc.start,\n            messageId: 'unexpectedNewline',\n\n            fix(fixer) {\n              return fixer.replaceTextRange([lastCalleeToken.range[1], openingParenToken.range[0]], ' ');\n            }\n\n          });\n        }\n      }\n    }\n\n    return {\n      CallExpression: checkSpacing,\n      NewExpression: checkSpacing\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["exports","util","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","schema","anyOf","items","enum","minItems","maxItems","properties","allowNewlines","additionalProperties","messages","unexpectedWhitespace","unexpectedNewline","missing","defaultOptions","create","context","option","config","sourceCode","getSourceCode","text","getText","checkSpacing","node","isOptionalCall","isOptionalCallExpression","closingParenToken","getLastToken","lastCalleeTokenWithoutPossibleParens","typeParameters","_a","callee","openingParenToken","getFirstTokenBetween","isOpeningParenToken","range","lastCalleeToken","getTokenBefore","isNotOptionalChainPunctuator","textBetweenTokens","slice","replace","hasWhitespace","test","hasNewline","LINEBREAK_MATCHER","report","loc","start","messageId","fix","fixer","removeRange","insertTextBefore","replaceTextRange","CallExpression","NewExpression"],"sources":["../../src/rules/func-call-spacing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}