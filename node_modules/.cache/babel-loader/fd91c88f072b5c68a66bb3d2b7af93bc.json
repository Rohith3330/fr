{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\nvar doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');\n\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\nvar toIndexedObject = require('../internals/to-indexed-object');\n\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar $Array = Array;\nvar max = Math.max;\nvar min = Math.min; // `Array.prototype.toSpliced` method\n// https://tc39.es/proposal-change-array-by-copy/#sec-array.prototype.toSpliced\n\n$({\n  target: 'Array',\n  proto: true\n}, {\n  toSpliced: function toSpliced(start, deleteCount\n  /* , ...items */\n  ) {\n    var O = toIndexedObject(this);\n    var len = lengthOfArrayLike(O);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var k = 0;\n    var insertCount, actualDeleteCount, newLen, A;\n\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);\n    }\n\n    newLen = doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);\n    A = $Array(newLen);\n\n    for (; k < actualStart; k++) A[k] = O[k];\n\n    for (; k < actualStart + insertCount; k++) A[k] = arguments[k - actualStart + 2];\n\n    for (; k < newLen; k++) A[k] = O[k + actualDeleteCount - insertCount];\n\n    return A;\n  }\n});\naddToUnscopables('toSpliced');","map":{"version":3,"names":["$","require","addToUnscopables","doesNotExceedSafeInteger","lengthOfArrayLike","toAbsoluteIndex","toIndexedObject","toIntegerOrInfinity","$Array","Array","max","Math","min","target","proto","toSpliced","start","deleteCount","O","len","actualStart","argumentsLength","arguments","length","k","insertCount","actualDeleteCount","newLen","A"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/core-js/modules/esnext.array.to-spliced.js"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar $Array = Array;\nvar max = Math.max;\nvar min = Math.min;\n\n// `Array.prototype.toSpliced` method\n// https://tc39.es/proposal-change-array-by-copy/#sec-array.prototype.toSpliced\n$({ target: 'Array', proto: true }, {\n  toSpliced: function toSpliced(start, deleteCount /* , ...items */) {\n    var O = toIndexedObject(this);\n    var len = lengthOfArrayLike(O);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var k = 0;\n    var insertCount, actualDeleteCount, newLen, A;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);\n    }\n    newLen = doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);\n    A = $Array(newLen);\n\n    for (; k < actualStart; k++) A[k] = O[k];\n    for (; k < actualStart + insertCount; k++) A[k] = arguments[k - actualStart + 2];\n    for (; k < newLen; k++) A[k] = O[k + actualDeleteCount - insertCount];\n\n    return A;\n  }\n});\n\naddToUnscopables('toSpliced');\n"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,iCAAD,CAA9B;;AACA,IAAIE,wBAAwB,GAAGF,OAAO,CAAC,2CAAD,CAAtC;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,mCAAD,CAA/B;;AACA,IAAII,eAAe,GAAGJ,OAAO,CAAC,gCAAD,CAA7B;;AACA,IAAIK,eAAe,GAAGL,OAAO,CAAC,gCAAD,CAA7B;;AACA,IAAIM,mBAAmB,GAAGN,OAAO,CAAC,qCAAD,CAAjC;;AAEA,IAAIO,MAAM,GAAGC,KAAb;AACA,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAf;AACA,IAAIE,GAAG,GAAGD,IAAI,CAACC,GAAf,C,CAEA;AACA;;AACAZ,CAAC,CAAC;EAAEa,MAAM,EAAE,OAAV;EAAmBC,KAAK,EAAE;AAA1B,CAAD,EAAmC;EAClCC,SAAS,EAAE,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC;EAAY;EAAtC,EAAwD;IACjE,IAAIC,CAAC,GAAGZ,eAAe,CAAC,IAAD,CAAvB;IACA,IAAIa,GAAG,GAAGf,iBAAiB,CAACc,CAAD,CAA3B;IACA,IAAIE,WAAW,GAAGf,eAAe,CAACW,KAAD,EAAQG,GAAR,CAAjC;IACA,IAAIE,eAAe,GAAGC,SAAS,CAACC,MAAhC;IACA,IAAIC,CAAC,GAAG,CAAR;IACA,IAAIC,WAAJ,EAAiBC,iBAAjB,EAAoCC,MAApC,EAA4CC,CAA5C;;IACA,IAAIP,eAAe,KAAK,CAAxB,EAA2B;MACzBI,WAAW,GAAGC,iBAAiB,GAAG,CAAlC;IACD,CAFD,MAEO,IAAIL,eAAe,KAAK,CAAxB,EAA2B;MAChCI,WAAW,GAAG,CAAd;MACAC,iBAAiB,GAAGP,GAAG,GAAGC,WAA1B;IACD,CAHM,MAGA;MACLK,WAAW,GAAGJ,eAAe,GAAG,CAAhC;MACAK,iBAAiB,GAAGd,GAAG,CAACF,GAAG,CAACH,mBAAmB,CAACU,WAAD,CAApB,EAAmC,CAAnC,CAAJ,EAA2CE,GAAG,GAAGC,WAAjD,CAAvB;IACD;;IACDO,MAAM,GAAGxB,wBAAwB,CAACgB,GAAG,GAAGM,WAAN,GAAoBC,iBAArB,CAAjC;IACAE,CAAC,GAAGpB,MAAM,CAACmB,MAAD,CAAV;;IAEA,OAAOH,CAAC,GAAGJ,WAAX,EAAwBI,CAAC,EAAzB,EAA6BI,CAAC,CAACJ,CAAD,CAAD,GAAON,CAAC,CAACM,CAAD,CAAR;;IAC7B,OAAOA,CAAC,GAAGJ,WAAW,GAAGK,WAAzB,EAAsCD,CAAC,EAAvC,EAA2CI,CAAC,CAACJ,CAAD,CAAD,GAAOF,SAAS,CAACE,CAAC,GAAGJ,WAAJ,GAAkB,CAAnB,CAAhB;;IAC3C,OAAOI,CAAC,GAAGG,MAAX,EAAmBH,CAAC,EAApB,EAAwBI,CAAC,CAACJ,CAAD,CAAD,GAAON,CAAC,CAACM,CAAC,GAAGE,iBAAJ,GAAwBD,WAAzB,CAAR;;IAExB,OAAOG,CAAP;EACD;AAzBiC,CAAnC,CAAD;AA4BA1B,gBAAgB,CAAC,WAAD,CAAhB"},"metadata":{},"sourceType":"script"}