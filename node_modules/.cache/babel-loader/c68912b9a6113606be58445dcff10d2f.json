{"ast":null,"code":"/**\n * @fileoverview Prevent usage of this.state within setState\n * @author Rolf Erik Lekang, Jørgen Aaberg\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst componentUtil = require('../util/componentUtil');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  useCallback: 'Use callback in setState when referencing the previous state.'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow when this.state is accessed within setState',\n      category: 'Possible Errors',\n      recommended: false,\n      url: docsUrl('no-access-state-in-setstate')\n    },\n    messages\n  },\n\n  create(context) {\n    function isSetStateCall(node) {\n      return node.type === 'CallExpression' && node.callee.property && node.callee.property.name === 'setState' && node.callee.object.type === 'ThisExpression';\n    }\n\n    function isFirstArgumentInSetStateCall(current, node) {\n      if (!isSetStateCall(current)) {\n        return false;\n      }\n\n      while (node && node.parent !== current) {\n        node = node.parent;\n      }\n\n      return current.arguments[0] === node;\n    }\n\n    function isClassComponent() {\n      return !!(componentUtil.getParentES6Component(context) || componentUtil.getParentES5Component(context));\n    } // The methods array contains all methods or functions that are using this.state\n    // or that are calling another method or function using this.state\n\n\n    const methods = []; // The vars array contains all variables that contains this.state\n\n    const vars = [];\n    return {\n      CallExpression(node) {\n        if (!isClassComponent()) {\n          return;\n        } // Appends all the methods that are calling another\n        // method containing this.state to the methods array\n\n\n        methods.forEach(method => {\n          if (node.callee.name === method.methodName) {\n            let current = node.parent;\n\n            while (current.type !== 'Program') {\n              if (current.type === 'MethodDefinition') {\n                methods.push({\n                  methodName: current.key.name,\n                  node: method.node\n                });\n                break;\n              }\n\n              current = current.parent;\n            }\n          }\n        }); // Finding all CallExpressions that is inside a setState\n        // to further check if they contains this.state\n\n        let current = node.parent;\n\n        while (current.type !== 'Program') {\n          if (isFirstArgumentInSetStateCall(current, node)) {\n            const methodName = node.callee.name;\n            methods.forEach(method => {\n              if (method.methodName === methodName) {\n                report(context, messages.useCallback, 'useCallback', {\n                  node: method.node\n                });\n              }\n            });\n            break;\n          }\n\n          current = current.parent;\n        }\n      },\n\n      MemberExpression(node) {\n        if (node.property.name === 'state' && node.object.type === 'ThisExpression' && isClassComponent()) {\n          let current = node;\n\n          while (current.type !== 'Program') {\n            // Reporting if this.state is directly within this.setState\n            if (isFirstArgumentInSetStateCall(current, node)) {\n              report(context, messages.useCallback, 'useCallback', {\n                node\n              });\n              break;\n            } // Storing all functions and methods that contains this.state\n\n\n            if (current.type === 'MethodDefinition') {\n              methods.push({\n                methodName: current.key.name,\n                node\n              });\n              break;\n            } else if (current.type === 'FunctionExpression' && current.parent.key) {\n              methods.push({\n                methodName: current.parent.key.name,\n                node\n              });\n              break;\n            } // Storing all variables containing this.state\n\n\n            if (current.type === 'VariableDeclarator') {\n              vars.push({\n                node,\n                scope: context.getScope(),\n                variableName: current.id.name\n              });\n              break;\n            }\n\n            current = current.parent;\n          }\n        }\n      },\n\n      Identifier(node) {\n        // Checks if the identifier is a variable within an object\n        let current = node;\n\n        while (current.parent.type === 'BinaryExpression') {\n          current = current.parent;\n        }\n\n        if (current.parent.value === current || current.parent.object === current) {\n          while (current.type !== 'Program') {\n            if (isFirstArgumentInSetStateCall(current, node)) {\n              vars.filter(v => v.scope === context.getScope() && v.variableName === node.name).forEach(v => {\n                report(context, messages.useCallback, 'useCallback', {\n                  node: v.node\n                });\n              });\n            }\n\n            current = current.parent;\n          }\n        }\n      },\n\n      ObjectPattern(node) {\n        const isDerivedFromThis = node.parent.init && node.parent.init.type === 'ThisExpression';\n        node.properties.forEach(property => {\n          if (property && property.key && property.key.name === 'state' && isDerivedFromThis) {\n            vars.push({\n              node: property.key,\n              scope: context.getScope(),\n              variableName: property.key.name\n            });\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","componentUtil","report","messages","useCallback","module","exports","meta","docs","description","category","recommended","url","create","context","isSetStateCall","node","type","callee","property","name","object","isFirstArgumentInSetStateCall","current","parent","arguments","isClassComponent","getParentES6Component","getParentES5Component","methods","vars","CallExpression","forEach","method","methodName","push","key","MemberExpression","scope","getScope","variableName","id","Identifier","value","filter","v","ObjectPattern","isDerivedFromThis","init","properties"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/no-access-state-in-setstate.js"],"sourcesContent":["/**\n * @fileoverview Prevent usage of this.state within setState\n * @author Rolf Erik Lekang, Jørgen Aaberg\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst componentUtil = require('../util/componentUtil');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  useCallback: 'Use callback in setState when referencing the previous state.',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow when this.state is accessed within setState',\n      category: 'Possible Errors',\n      recommended: false,\n      url: docsUrl('no-access-state-in-setstate'),\n    },\n\n    messages,\n  },\n\n  create(context) {\n    function isSetStateCall(node) {\n      return node.type === 'CallExpression'\n        && node.callee.property\n        && node.callee.property.name === 'setState'\n        && node.callee.object.type === 'ThisExpression';\n    }\n\n    function isFirstArgumentInSetStateCall(current, node) {\n      if (!isSetStateCall(current)) {\n        return false;\n      }\n      while (node && node.parent !== current) {\n        node = node.parent;\n      }\n      return current.arguments[0] === node;\n    }\n\n    function isClassComponent() {\n      return !!(componentUtil.getParentES6Component(context) || componentUtil.getParentES5Component(context));\n    }\n\n    // The methods array contains all methods or functions that are using this.state\n    // or that are calling another method or function using this.state\n    const methods = [];\n    // The vars array contains all variables that contains this.state\n    const vars = [];\n    return {\n      CallExpression(node) {\n        if (!isClassComponent()) {\n          return;\n        }\n        // Appends all the methods that are calling another\n        // method containing this.state to the methods array\n        methods.forEach((method) => {\n          if (node.callee.name === method.methodName) {\n            let current = node.parent;\n            while (current.type !== 'Program') {\n              if (current.type === 'MethodDefinition') {\n                methods.push({\n                  methodName: current.key.name,\n                  node: method.node,\n                });\n                break;\n              }\n              current = current.parent;\n            }\n          }\n        });\n\n        // Finding all CallExpressions that is inside a setState\n        // to further check if they contains this.state\n        let current = node.parent;\n        while (current.type !== 'Program') {\n          if (isFirstArgumentInSetStateCall(current, node)) {\n            const methodName = node.callee.name;\n            methods.forEach((method) => {\n              if (method.methodName === methodName) {\n                report(context, messages.useCallback, 'useCallback', {\n                  node: method.node,\n                });\n              }\n            });\n\n            break;\n          }\n          current = current.parent;\n        }\n      },\n\n      MemberExpression(node) {\n        if (\n          node.property.name === 'state'\n          && node.object.type === 'ThisExpression'\n          && isClassComponent()\n        ) {\n          let current = node;\n          while (current.type !== 'Program') {\n            // Reporting if this.state is directly within this.setState\n            if (isFirstArgumentInSetStateCall(current, node)) {\n              report(context, messages.useCallback, 'useCallback', {\n                node,\n              });\n              break;\n            }\n\n            // Storing all functions and methods that contains this.state\n            if (current.type === 'MethodDefinition') {\n              methods.push({\n                methodName: current.key.name,\n                node,\n              });\n              break;\n            } else if (current.type === 'FunctionExpression' && current.parent.key) {\n              methods.push({\n                methodName: current.parent.key.name,\n                node,\n              });\n              break;\n            }\n\n            // Storing all variables containing this.state\n            if (current.type === 'VariableDeclarator') {\n              vars.push({\n                node,\n                scope: context.getScope(),\n                variableName: current.id.name,\n              });\n              break;\n            }\n\n            current = current.parent;\n          }\n        }\n      },\n\n      Identifier(node) {\n        // Checks if the identifier is a variable within an object\n        let current = node;\n        while (current.parent.type === 'BinaryExpression') {\n          current = current.parent;\n        }\n        if (\n          current.parent.value === current\n          || current.parent.object === current\n        ) {\n          while (current.type !== 'Program') {\n            if (isFirstArgumentInSetStateCall(current, node)) {\n              vars\n                .filter((v) => v.scope === context.getScope() && v.variableName === node.name)\n                .forEach((v) => {\n                  report(context, messages.useCallback, 'useCallback', {\n                    node: v.node,\n                  });\n                });\n            }\n            current = current.parent;\n          }\n        }\n      },\n\n      ObjectPattern(node) {\n        const isDerivedFromThis = node.parent.init && node.parent.init.type === 'ThisExpression';\n        node.properties.forEach((property) => {\n          if (property && property.key && property.key.name === 'state' && isDerivedFromThis) {\n            vars.push({\n              node: property.key,\n              scope: context.getScope(),\n              variableName: property.key.name,\n            });\n          }\n        });\n      },\n    };\n  },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,uBAAD,CAA7B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,gBAAD,CAAtB,C,CAEA;AACA;AACA;;;AAEA,MAAMG,QAAQ,GAAG;EACfC,WAAW,EAAE;AADE,CAAjB;AAIAC,MAAM,CAACC,OAAP,GAAiB;EACfC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,WAAW,EAAE,sDADT;MAEJC,QAAQ,EAAE,iBAFN;MAGJC,WAAW,EAAE,KAHT;MAIJC,GAAG,EAAEb,OAAO,CAAC,6BAAD;IAJR,CADF;IAQJI;EARI,CADS;;EAYfU,MAAM,CAACC,OAAD,EAAU;IACd,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;MAC5B,OAAOA,IAAI,CAACC,IAAL,KAAc,gBAAd,IACFD,IAAI,CAACE,MAAL,CAAYC,QADV,IAEFH,IAAI,CAACE,MAAL,CAAYC,QAAZ,CAAqBC,IAArB,KAA8B,UAF5B,IAGFJ,IAAI,CAACE,MAAL,CAAYG,MAAZ,CAAmBJ,IAAnB,KAA4B,gBAHjC;IAID;;IAED,SAASK,6BAAT,CAAuCC,OAAvC,EAAgDP,IAAhD,EAAsD;MACpD,IAAI,CAACD,cAAc,CAACQ,OAAD,CAAnB,EAA8B;QAC5B,OAAO,KAAP;MACD;;MACD,OAAOP,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgBD,OAA/B,EAAwC;QACtCP,IAAI,GAAGA,IAAI,CAACQ,MAAZ;MACD;;MACD,OAAOD,OAAO,CAACE,SAAR,CAAkB,CAAlB,MAAyBT,IAAhC;IACD;;IAED,SAASU,gBAAT,GAA4B;MAC1B,OAAO,CAAC,EAAEzB,aAAa,CAAC0B,qBAAd,CAAoCb,OAApC,KAAgDb,aAAa,CAAC2B,qBAAd,CAAoCd,OAApC,CAAlD,CAAR;IACD,CApBa,CAsBd;IACA;;;IACA,MAAMe,OAAO,GAAG,EAAhB,CAxBc,CAyBd;;IACA,MAAMC,IAAI,GAAG,EAAb;IACA,OAAO;MACLC,cAAc,CAACf,IAAD,EAAO;QACnB,IAAI,CAACU,gBAAgB,EAArB,EAAyB;UACvB;QACD,CAHkB,CAInB;QACA;;;QACAG,OAAO,CAACG,OAAR,CAAiBC,MAAD,IAAY;UAC1B,IAAIjB,IAAI,CAACE,MAAL,CAAYE,IAAZ,KAAqBa,MAAM,CAACC,UAAhC,EAA4C;YAC1C,IAAIX,OAAO,GAAGP,IAAI,CAACQ,MAAnB;;YACA,OAAOD,OAAO,CAACN,IAAR,KAAiB,SAAxB,EAAmC;cACjC,IAAIM,OAAO,CAACN,IAAR,KAAiB,kBAArB,EAAyC;gBACvCY,OAAO,CAACM,IAAR,CAAa;kBACXD,UAAU,EAAEX,OAAO,CAACa,GAAR,CAAYhB,IADb;kBAEXJ,IAAI,EAAEiB,MAAM,CAACjB;gBAFF,CAAb;gBAIA;cACD;;cACDO,OAAO,GAAGA,OAAO,CAACC,MAAlB;YACD;UACF;QACF,CAdD,EANmB,CAsBnB;QACA;;QACA,IAAID,OAAO,GAAGP,IAAI,CAACQ,MAAnB;;QACA,OAAOD,OAAO,CAACN,IAAR,KAAiB,SAAxB,EAAmC;UACjC,IAAIK,6BAA6B,CAACC,OAAD,EAAUP,IAAV,CAAjC,EAAkD;YAChD,MAAMkB,UAAU,GAAGlB,IAAI,CAACE,MAAL,CAAYE,IAA/B;YACAS,OAAO,CAACG,OAAR,CAAiBC,MAAD,IAAY;cAC1B,IAAIA,MAAM,CAACC,UAAP,KAAsBA,UAA1B,EAAsC;gBACpChC,MAAM,CAACY,OAAD,EAAUX,QAAQ,CAACC,WAAnB,EAAgC,aAAhC,EAA+C;kBACnDY,IAAI,EAAEiB,MAAM,CAACjB;gBADsC,CAA/C,CAAN;cAGD;YACF,CAND;YAQA;UACD;;UACDO,OAAO,GAAGA,OAAO,CAACC,MAAlB;QACD;MACF,CAzCI;;MA2CLa,gBAAgB,CAACrB,IAAD,EAAO;QACrB,IACEA,IAAI,CAACG,QAAL,CAAcC,IAAd,KAAuB,OAAvB,IACGJ,IAAI,CAACK,MAAL,CAAYJ,IAAZ,KAAqB,gBADxB,IAEGS,gBAAgB,EAHrB,EAIE;UACA,IAAIH,OAAO,GAAGP,IAAd;;UACA,OAAOO,OAAO,CAACN,IAAR,KAAiB,SAAxB,EAAmC;YACjC;YACA,IAAIK,6BAA6B,CAACC,OAAD,EAAUP,IAAV,CAAjC,EAAkD;cAChDd,MAAM,CAACY,OAAD,EAAUX,QAAQ,CAACC,WAAnB,EAAgC,aAAhC,EAA+C;gBACnDY;cADmD,CAA/C,CAAN;cAGA;YACD,CAPgC,CASjC;;;YACA,IAAIO,OAAO,CAACN,IAAR,KAAiB,kBAArB,EAAyC;cACvCY,OAAO,CAACM,IAAR,CAAa;gBACXD,UAAU,EAAEX,OAAO,CAACa,GAAR,CAAYhB,IADb;gBAEXJ;cAFW,CAAb;cAIA;YACD,CAND,MAMO,IAAIO,OAAO,CAACN,IAAR,KAAiB,oBAAjB,IAAyCM,OAAO,CAACC,MAAR,CAAeY,GAA5D,EAAiE;cACtEP,OAAO,CAACM,IAAR,CAAa;gBACXD,UAAU,EAAEX,OAAO,CAACC,MAAR,CAAeY,GAAf,CAAmBhB,IADpB;gBAEXJ;cAFW,CAAb;cAIA;YACD,CAtBgC,CAwBjC;;;YACA,IAAIO,OAAO,CAACN,IAAR,KAAiB,oBAArB,EAA2C;cACzCa,IAAI,CAACK,IAAL,CAAU;gBACRnB,IADQ;gBAERsB,KAAK,EAAExB,OAAO,CAACyB,QAAR,EAFC;gBAGRC,YAAY,EAAEjB,OAAO,CAACkB,EAAR,CAAWrB;cAHjB,CAAV;cAKA;YACD;;YAEDG,OAAO,GAAGA,OAAO,CAACC,MAAlB;UACD;QACF;MACF,CAvFI;;MAyFLkB,UAAU,CAAC1B,IAAD,EAAO;QACf;QACA,IAAIO,OAAO,GAAGP,IAAd;;QACA,OAAOO,OAAO,CAACC,MAAR,CAAeP,IAAf,KAAwB,kBAA/B,EAAmD;UACjDM,OAAO,GAAGA,OAAO,CAACC,MAAlB;QACD;;QACD,IACED,OAAO,CAACC,MAAR,CAAemB,KAAf,KAAyBpB,OAAzB,IACGA,OAAO,CAACC,MAAR,CAAeH,MAAf,KAA0BE,OAF/B,EAGE;UACA,OAAOA,OAAO,CAACN,IAAR,KAAiB,SAAxB,EAAmC;YACjC,IAAIK,6BAA6B,CAACC,OAAD,EAAUP,IAAV,CAAjC,EAAkD;cAChDc,IAAI,CACDc,MADH,CACWC,CAAD,IAAOA,CAAC,CAACP,KAAF,KAAYxB,OAAO,CAACyB,QAAR,EAAZ,IAAkCM,CAAC,CAACL,YAAF,KAAmBxB,IAAI,CAACI,IAD3E,EAEGY,OAFH,CAEYa,CAAD,IAAO;gBACd3C,MAAM,CAACY,OAAD,EAAUX,QAAQ,CAACC,WAAnB,EAAgC,aAAhC,EAA+C;kBACnDY,IAAI,EAAE6B,CAAC,CAAC7B;gBAD2C,CAA/C,CAAN;cAGD,CANH;YAOD;;YACDO,OAAO,GAAGA,OAAO,CAACC,MAAlB;UACD;QACF;MACF,CAhHI;;MAkHLsB,aAAa,CAAC9B,IAAD,EAAO;QAClB,MAAM+B,iBAAiB,GAAG/B,IAAI,CAACQ,MAAL,CAAYwB,IAAZ,IAAoBhC,IAAI,CAACQ,MAAL,CAAYwB,IAAZ,CAAiB/B,IAAjB,KAA0B,gBAAxE;QACAD,IAAI,CAACiC,UAAL,CAAgBjB,OAAhB,CAAyBb,QAAD,IAAc;UACpC,IAAIA,QAAQ,IAAIA,QAAQ,CAACiB,GAArB,IAA4BjB,QAAQ,CAACiB,GAAT,CAAahB,IAAb,KAAsB,OAAlD,IAA6D2B,iBAAjE,EAAoF;YAClFjB,IAAI,CAACK,IAAL,CAAU;cACRnB,IAAI,EAAEG,QAAQ,CAACiB,GADP;cAERE,KAAK,EAAExB,OAAO,CAACyB,QAAR,EAFC;cAGRC,YAAY,EAAErB,QAAQ,CAACiB,GAAT,CAAahB;YAHnB,CAAV;UAKD;QACF,CARD;MASD;;IA7HI,CAAP;EA+HD;;AAtKc,CAAjB"},"metadata":{},"sourceType":"script"}