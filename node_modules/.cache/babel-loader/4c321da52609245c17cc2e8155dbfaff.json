{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dynamicAnchor = void 0;\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst names_1 = require(\"../../compile/names\");\n\nconst compile_1 = require(\"../../compile\");\n\nconst ref_1 = require(\"../core/ref\");\n\nconst def = {\n  keyword: \"$dynamicAnchor\",\n  schemaType: \"string\",\n  code: cxt => dynamicAnchor(cxt, cxt.schema)\n};\n\nfunction dynamicAnchor(cxt, anchor) {\n  const {\n    gen,\n    it\n  } = cxt;\n  it.schemaEnv.root.dynamicAnchors[anchor] = true;\n  const v = (0, codegen_1._)`${names_1.default.dynamicAnchors}${(0, codegen_1.getProperty)(anchor)}`;\n  const validate = it.errSchemaPath === \"#\" ? it.validateName : _getValidate(cxt);\n  gen.if((0, codegen_1._)`!${v}`, () => gen.assign(v, validate));\n}\n\nexports.dynamicAnchor = dynamicAnchor;\n\nfunction _getValidate(cxt) {\n  const {\n    schemaEnv,\n    schema,\n    self\n  } = cxt.it;\n  const {\n    root,\n    baseId,\n    localRefs,\n    meta\n  } = schemaEnv.root;\n  const {\n    schemaId\n  } = self.opts;\n  const sch = new compile_1.SchemaEnv({\n    schema,\n    schemaId,\n    root,\n    baseId,\n    localRefs,\n    meta\n  });\n  compile_1.compileSchema.call(self, sch);\n  return (0, ref_1.getValidate)(cxt, sch);\n}\n\nexports.default = def;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AAEA,MAAMA,GAAG,GAA0B;EACjCC,OAAO,EAAE,gBADwB;EAEjCC,UAAU,EAAE,QAFqB;EAGjCC,IAAI,EAAGC,GAAD,IAASC,aAAa,CAACD,GAAD,EAAMA,GAAG,CAACE,MAAV;AAHK,CAAnC;;AAMA,SAAgBD,aAAhB,CAA8BD,GAA9B,EAA+CG,MAA/C,EAA6D;EAC3D,MAAM;IAACC,GAAD;IAAMC;EAAN,IAAYL,GAAlB;EACAK,EAAE,CAACC,SAAH,CAAaC,IAAb,CAAkBC,cAAlB,CAAiCL,MAAjC,IAA2C,IAA3C;EACA,MAAMM,CAAC,GAAG,gBAAC,GAAGC,gBAAEF,cAAc,GAAG,2BAAYL,MAAZ,CAAmB,EAApD;EACA,MAAMQ,QAAQ,GAAGN,EAAE,CAACO,aAAH,KAAqB,GAArB,GAA2BP,EAAE,CAACQ,YAA9B,GAA6CC,YAAY,CAACd,GAAD,CAA1E;EACAI,GAAG,CAACW,EAAJ,CAAO,gBAAC,IAAIN,CAAC,EAAb,EAAiB,MAAML,GAAG,CAACY,MAAJ,CAAWP,CAAX,EAAcE,QAAd,CAAvB;AACD;;AANDM;;AAQA,SAASH,YAAT,CAAsBd,GAAtB,EAAqC;EACnC,MAAM;IAACM,SAAD;IAAYJ,MAAZ;IAAoBgB;EAApB,IAA4BlB,GAAG,CAACK,EAAtC;EACA,MAAM;IAACE,IAAD;IAAOY,MAAP;IAAeC,SAAf;IAA0BC;EAA1B,IAAkCf,SAAS,CAACC,IAAlD;EACA,MAAM;IAACe;EAAD,IAAaJ,IAAI,CAACK,IAAxB;EACA,MAAMC,GAAG,GAAG,IAAIC,mBAAJ,CAAc;IAACvB,MAAD;IAASoB,QAAT;IAAmBf,IAAnB;IAAyBY,MAAzB;IAAiCC,SAAjC;IAA4CC;EAA5C,CAAd,CAAZ;EACAI,wBAAcC,IAAd,CAAmBR,IAAnB,EAAyBM,GAAzB;EACA,OAAO,uBAAYxB,GAAZ,EAAiBwB,GAAjB,CAAP;AACD;;AAEDP,kBAAerB,GAAf","names":["def","keyword","schemaType","code","cxt","dynamicAnchor","schema","anchor","gen","it","schemaEnv","root","dynamicAnchors","v","names_1","validate","errSchemaPath","validateName","_getValidate","if","assign","exports","self","baseId","localRefs","meta","schemaId","opts","sch","compile_1","call"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\css-minimizer-webpack-plugin\\node_modules\\ajv\\lib\\vocabularies\\dynamic\\dynamicAnchor.ts"],"sourcesContent":["import type {CodeKeywordDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, getProperty, Code} from \"../../compile/codegen\"\nimport N from \"../../compile/names\"\nimport {SchemaEnv, compileSchema} from \"../../compile\"\nimport {getValidate} from \"../core/ref\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"$dynamicAnchor\",\n  schemaType: \"string\",\n  code: (cxt) => dynamicAnchor(cxt, cxt.schema),\n}\n\nexport function dynamicAnchor(cxt: KeywordCxt, anchor: string): void {\n  const {gen, it} = cxt\n  it.schemaEnv.root.dynamicAnchors[anchor] = true\n  const v = _`${N.dynamicAnchors}${getProperty(anchor)}`\n  const validate = it.errSchemaPath === \"#\" ? it.validateName : _getValidate(cxt)\n  gen.if(_`!${v}`, () => gen.assign(v, validate))\n}\n\nfunction _getValidate(cxt: KeywordCxt): Code {\n  const {schemaEnv, schema, self} = cxt.it\n  const {root, baseId, localRefs, meta} = schemaEnv.root\n  const {schemaId} = self.opts\n  const sch = new SchemaEnv({schema, schemaId, root, baseId, localRefs, meta})\n  compileSchema.call(self, sch)\n  return getValidate(cxt, sch)\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}