{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _once = require('./internal/once.js');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\n\n\nfunction race(tasks, callback) {\n  callback = (0, _once2.default)(callback);\n  if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n  if (!tasks.length) return callback();\n\n  for (var i = 0, l = tasks.length; i < l; i++) {\n    (0, _wrapAsync2.default)(tasks[i])(callback);\n  }\n}\n\nexports.default = (0, _awaitify2.default)(race, 2);\nmodule.exports = exports['default'];","map":{"version":3,"names":["Object","defineProperty","exports","value","_once","require","_once2","_interopRequireDefault","_wrapAsync","_wrapAsync2","_awaitify","_awaitify2","obj","__esModule","default","race","tasks","callback","Array","isArray","TypeError","length","i","l","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/async/race.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _once = require('./internal/once.js');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = (0, _once2.default)(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        (0, _wrapAsync2.default)(tasks[i])(callback);\n    }\n}\n\nexports.default = (0, _awaitify2.default)(race, 2);\nmodule.exports = exports['default'];"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EACzCC,KAAK,EAAE;AADkC,CAA7C;;AAIA,IAAIC,KAAK,GAAGC,OAAO,CAAC,oBAAD,CAAnB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACH,KAAD,CAAnC;;AAEA,IAAII,UAAU,GAAGH,OAAO,CAAC,yBAAD,CAAxB;;AAEA,IAAII,WAAW,GAAGF,sBAAsB,CAACC,UAAD,CAAxC;;AAEA,IAAIE,SAAS,GAAGL,OAAO,CAAC,wBAAD,CAAvB;;AAEA,IAAIM,UAAU,GAAGJ,sBAAsB,CAACG,SAAD,CAAvC;;AAEA,SAASH,sBAAT,CAAgCK,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAEE,OAAO,EAAEF;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,IAAT,CAAcC,KAAd,EAAqBC,QAArB,EAA+B;EAC3BA,QAAQ,GAAG,CAAC,GAAGX,MAAM,CAACQ,OAAX,EAAoBG,QAApB,CAAX;EACA,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAL,EAA2B,OAAOC,QAAQ,CAAC,IAAIG,SAAJ,CAAc,sDAAd,CAAD,CAAf;EAC3B,IAAI,CAACJ,KAAK,CAACK,MAAX,EAAmB,OAAOJ,QAAQ,EAAf;;EACnB,KAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGP,KAAK,CAACK,MAA1B,EAAkCC,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;IAC1C,CAAC,GAAGb,WAAW,CAACK,OAAhB,EAAyBE,KAAK,CAACM,CAAD,CAA9B,EAAmCL,QAAnC;EACH;AACJ;;AAEDf,OAAO,CAACY,OAAR,GAAkB,CAAC,GAAGH,UAAU,CAACG,OAAf,EAAwBC,IAAxB,EAA8B,CAA9B,CAAlB;AACAS,MAAM,CAACtB,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB"},"metadata":{},"sourceType":"script"}