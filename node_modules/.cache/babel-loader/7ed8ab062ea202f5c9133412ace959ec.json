{"ast":null,"code":"/**\n * @fileoverview Enforce usage of onBlur over onChange on select menus for accessibility.\n * @author Ethan Cohen\n */\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/no-onchange'; // -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\nconst expectedError = {\n  message: 'onBlur must be used instead of onchange, unless absolutely necessary and it causes no negative consequences for keyboard only or screen reader users.',\n  type: 'JSXOpeningElement'\n};\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      CustomOption: 'option',\n      Input: 'input'\n    }\n  }\n};\nruleTester.run('no-onchange', rule, {\n  valid: [{\n    code: '<select onBlur={() => {}} />;'\n  }, {\n    code: '<select onBlur={handleOnBlur} />;'\n  }, {\n    code: '<option />;'\n  }, {\n    code: '<option onBlur={() => {}} onChange={() => {}} />;'\n  }, {\n    code: '<option {...props} />'\n  }, {\n    code: '<input onChange={() => {}} />;'\n  }, {\n    code: '<input onChange={handleOnChange} />;'\n  }, {\n    code: '<input />;'\n  }, {\n    code: '<input onChange={() => {}} onChange={() => {}} />;'\n  }, {\n    code: '<input {...props} />'\n  }, {\n    code: '<Input onChange={() => {}} />;',\n    settings: componentsSettings\n  }, {\n    code: '<CustomOption onChange={() => {}} />'\n  }].map(parserOptionsMapper),\n  invalid: [{\n    code: '<select onChange={() => {}} />;',\n    errors: [expectedError]\n  }, {\n    code: '<select onChange={handleOnChange} />;',\n    errors: [expectedError]\n  }, {\n    code: '<option onChange={() => {}} />',\n    errors: [expectedError]\n  }, {\n    code: '<option onChange={() => {}} {...props} />',\n    errors: [expectedError]\n  }, {\n    code: '<CustomOption onChange={() => {}} />;',\n    errors: [expectedError],\n    settings: componentsSettings\n  }].map(parserOptionsMapper)\n});","map":{"version":3,"names":["RuleTester","parserOptionsMapper","rule","ruleTester","expectedError","message","type","componentsSettings","components","CustomOption","Input","run","valid","code","settings","map","invalid","errors"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/no-onchange-test.js"],"sourcesContent":["/**\n * @fileoverview Enforce usage of onBlur over onChange on select menus for accessibility.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/no-onchange';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst expectedError = {\n  message: 'onBlur must be used instead of onchange, unless absolutely necessary and it causes no negative consequences for keyboard only or screen reader users.',\n  type: 'JSXOpeningElement',\n};\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      CustomOption: 'option',\n      Input: 'input',\n    },\n  },\n};\n\nruleTester.run('no-onchange', rule, {\n  valid: [\n    { code: '<select onBlur={() => {}} />;' },\n    { code: '<select onBlur={handleOnBlur} />;' },\n    { code: '<option />;' },\n    { code: '<option onBlur={() => {}} onChange={() => {}} />;' },\n    { code: '<option {...props} />' },\n    { code: '<input onChange={() => {}} />;' },\n    { code: '<input onChange={handleOnChange} />;' },\n    { code: '<input />;' },\n    { code: '<input onChange={() => {}} onChange={() => {}} />;' },\n    { code: '<input {...props} />' },\n    { code: '<Input onChange={() => {}} />;', settings: componentsSettings },\n    { code: '<CustomOption onChange={() => {}} />' },\n  ].map(parserOptionsMapper),\n  invalid: [\n    { code: '<select onChange={() => {}} />;', errors: [expectedError] },\n    { code: '<select onChange={handleOnChange} />;', errors: [expectedError] },\n    { code: '<option onChange={() => {}} />', errors: [expectedError] },\n    { code: '<option onChange={() => {}} {...props} />', errors: [expectedError] },\n    { code: '<CustomOption onChange={() => {}} />;', errors: [expectedError], settings: componentsSettings },\n  ].map(parserOptionsMapper),\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,SAASA,UAAT,QAA2B,QAA3B;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AACA,OAAOC,IAAP,MAAiB,gCAAjB,C,CAEA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG,IAAIH,UAAJ,EAAnB;AAEA,MAAMI,aAAa,GAAG;EACpBC,OAAO,EAAE,uJADW;EAEpBC,IAAI,EAAE;AAFc,CAAtB;AAKA,MAAMC,kBAAkB,GAAG;EACzB,YAAY;IACVC,UAAU,EAAE;MACVC,YAAY,EAAE,QADJ;MAEVC,KAAK,EAAE;IAFG;EADF;AADa,CAA3B;AASAP,UAAU,CAACQ,GAAX,CAAe,aAAf,EAA8BT,IAA9B,EAAoC;EAClCU,KAAK,EAAE,CACL;IAAEC,IAAI,EAAE;EAAR,CADK,EAEL;IAAEA,IAAI,EAAE;EAAR,CAFK,EAGL;IAAEA,IAAI,EAAE;EAAR,CAHK,EAIL;IAAEA,IAAI,EAAE;EAAR,CAJK,EAKL;IAAEA,IAAI,EAAE;EAAR,CALK,EAML;IAAEA,IAAI,EAAE;EAAR,CANK,EAOL;IAAEA,IAAI,EAAE;EAAR,CAPK,EAQL;IAAEA,IAAI,EAAE;EAAR,CARK,EASL;IAAEA,IAAI,EAAE;EAAR,CATK,EAUL;IAAEA,IAAI,EAAE;EAAR,CAVK,EAWL;IAAEA,IAAI,EAAE,gCAAR;IAA0CC,QAAQ,EAAEP;EAApD,CAXK,EAYL;IAAEM,IAAI,EAAE;EAAR,CAZK,EAaLE,GAbK,CAaDd,mBAbC,CAD2B;EAelCe,OAAO,EAAE,CACP;IAAEH,IAAI,EAAE,iCAAR;IAA2CI,MAAM,EAAE,CAACb,aAAD;EAAnD,CADO,EAEP;IAAES,IAAI,EAAE,uCAAR;IAAiDI,MAAM,EAAE,CAACb,aAAD;EAAzD,CAFO,EAGP;IAAES,IAAI,EAAE,gCAAR;IAA0CI,MAAM,EAAE,CAACb,aAAD;EAAlD,CAHO,EAIP;IAAES,IAAI,EAAE,2CAAR;IAAqDI,MAAM,EAAE,CAACb,aAAD;EAA7D,CAJO,EAKP;IAAES,IAAI,EAAE,uCAAR;IAAiDI,MAAM,EAAE,CAACb,aAAD,CAAzD;IAA0EU,QAAQ,EAAEP;EAApF,CALO,EAMPQ,GANO,CAMHd,mBANG;AAfyB,CAApC"},"metadata":{},"sourceType":"module"}