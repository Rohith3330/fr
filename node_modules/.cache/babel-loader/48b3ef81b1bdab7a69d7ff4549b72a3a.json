{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"../../compile/util\");\n\nconst code_1 = require(\"../code\");\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst metadata_1 = require(\"./metadata\");\n\nconst nullable_1 = require(\"./nullable\");\n\nconst error_1 = require(\"./error\");\n\nconst def = {\n  keyword: \"elements\",\n  schemaType: \"object\",\n  error: (0, error_1.typeError)(\"array\"),\n\n  code(cxt) {\n    (0, metadata_1.checkMetadata)(cxt);\n    const {\n      gen,\n      data,\n      schema,\n      it\n    } = cxt;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    const [valid] = (0, nullable_1.checkNullable)(cxt);\n    gen.if((0, codegen_1.not)(valid), () => gen.if((0, codegen_1._)`Array.isArray(${data})`, () => gen.assign(valid, (0, code_1.validateArray)(cxt)), () => cxt.error()));\n    cxt.ok(valid);\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIA,MAAMA,GAAG,GAA0B;EACjCC,OAAO,EAAE,UADwB;EAEjCC,UAAU,EAAE,QAFqB;EAGjCC,KAAK,EAAE,uBAAU,OAAV,CAH0B;;EAIjCC,IAAI,CAACC,GAAD,EAAgB;IAClB,8BAAcA,GAAd;IACA,MAAM;MAACC,GAAD;MAAMC,IAAN;MAAYC,MAAZ;MAAoBC;IAApB,IAA0BJ,GAAhC;IACA,IAAI,8BAAkBI,EAAlB,EAAsBD,MAAtB,CAAJ,EAAmC;IACnC,MAAM,CAACE,KAAD,IAAU,8BAAcL,GAAd,CAAhB;IACAC,GAAG,CAACK,EAAJ,CAAO,mBAAID,KAAJ,CAAP,EAAmB,MACjBJ,GAAG,CAACK,EAAJ,CACE,gBAAC,iBAAiBJ,IAAI,GADxB,EAEE,MAAMD,GAAG,CAACM,MAAJ,CAAWF,KAAX,EAAkB,0BAAcL,GAAd,CAAlB,CAFR,EAGE,MAAMA,GAAG,CAACF,KAAJ,EAHR,CADF;IAOAE,GAAG,CAACQ,EAAJ,CAAOH,KAAP;EACD;;AAjBgC,CAAnC;AAoBAI,kBAAed,GAAf","names":["def","keyword","schemaType","error","code","cxt","gen","data","schema","it","valid","if","assign","ok","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\vocabularies\\jtd\\elements.ts"],"sourcesContent":["import type {CodeKeywordDefinition, SchemaObject} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {alwaysValidSchema} from \"../../compile/util\"\nimport {validateArray} from \"../code\"\nimport {_, not} from \"../../compile/codegen\"\nimport {checkMetadata} from \"./metadata\"\nimport {checkNullable} from \"./nullable\"\nimport {typeError, _JTDTypeError} from \"./error\"\n\nexport type JTDElementsError = _JTDTypeError<\"elements\", \"array\", SchemaObject>\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"elements\",\n  schemaType: \"object\",\n  error: typeError(\"array\"),\n  code(cxt: KeywordCxt) {\n    checkMetadata(cxt)\n    const {gen, data, schema, it} = cxt\n    if (alwaysValidSchema(it, schema)) return\n    const [valid] = checkNullable(cxt)\n    gen.if(not(valid), () =>\n      gen.if(\n        _`Array.isArray(${data})`,\n        () => gen.assign(valid, validateArray(cxt)),\n        () => cxt.error()\n      )\n    )\n    cxt.ok(valid)\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}