{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Suggest using `toStrictEqual()`',\n      recommended: false,\n      suggestion: true\n    },\n    messages: {\n      useToStrictEqual: 'Use `toStrictEqual()` instead',\n      suggestReplaceWithStrictEqual: 'Replace with `toStrictEqual()`'\n    },\n    type: 'suggestion',\n    schema: [],\n    hasSuggestions: true\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          matcher\n        } = (0, _utils.parseExpectCall)(node);\n\n        if (matcher && (0, _utils.isParsedEqualityMatcherCall)(matcher, _utils.EqualityMatcher.toEqual)) {\n          context.report({\n            messageId: 'useToStrictEqual',\n            node: matcher.node.property,\n            suggest: [{\n              messageId: 'suggestReplaceWithStrictEqual',\n              fix: fixer => [fixer.replaceText(matcher.node.property, _utils.EqualityMatcher.toStrictEqual)]\n            }]\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utils","require","_default","createRule","name","__filename","meta","docs","category","description","recommended","suggestion","messages","useToStrictEqual","suggestReplaceWithStrictEqual","type","schema","hasSuggestions","defaultOptions","create","context","CallExpression","node","isExpectCall","matcher","parseExpectCall","isParsedEqualityMatcherCall","EqualityMatcher","toEqual","report","messageId","property","suggest","fix","fixer","replaceText","toStrictEqual"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/prefer-strict-equal.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Suggest using `toStrictEqual()`',\n      recommended: false,\n      suggestion: true\n    },\n    messages: {\n      useToStrictEqual: 'Use `toStrictEqual()` instead',\n      suggestReplaceWithStrictEqual: 'Replace with `toStrictEqual()`'\n    },\n    type: 'suggestion',\n    schema: [],\n    hasSuggestions: true\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          matcher\n        } = (0, _utils.parseExpectCall)(node);\n\n        if (matcher && (0, _utils.isParsedEqualityMatcherCall)(matcher, _utils.EqualityMatcher.toEqual)) {\n          context.report({\n            messageId: 'useToStrictEqual',\n            node: matcher.node.property,\n            suggest: [{\n              messageId: 'suggestReplaceWithStrictEqual',\n              fix: fixer => [fixer.replaceText(matcher.node.property, _utils.EqualityMatcher.toStrictEqual)]\n            }]\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAG,CAAC,GAAGF,MAAM,CAACG,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,iCAFT;MAGJC,WAAW,EAAE,KAHT;MAIJC,UAAU,EAAE;IAJR,CADF;IAOJC,QAAQ,EAAE;MACRC,gBAAgB,EAAE,+BADV;MAERC,6BAA6B,EAAE;IAFvB,CAPN;IAWJC,IAAI,EAAE,YAXF;IAYJC,MAAM,EAAE,EAZJ;IAaJC,cAAc,EAAE;EAbZ,CAF8B;EAiBpCC,cAAc,EAAE,EAjBoB;;EAmBpCC,MAAM,CAACC,OAAD,EAAU;IACd,OAAO;MACLC,cAAc,CAACC,IAAD,EAAO;QACnB,IAAI,CAAC,CAAC,GAAGtB,MAAM,CAACuB,YAAX,EAAyBD,IAAzB,CAAL,EAAqC;UACnC;QACD;;QAED,MAAM;UACJE;QADI,IAEF,CAAC,GAAGxB,MAAM,CAACyB,eAAX,EAA4BH,IAA5B,CAFJ;;QAIA,IAAIE,OAAO,IAAI,CAAC,GAAGxB,MAAM,CAAC0B,2BAAX,EAAwCF,OAAxC,EAAiDxB,MAAM,CAAC2B,eAAP,CAAuBC,OAAxE,CAAf,EAAiG;UAC/FR,OAAO,CAACS,MAAR,CAAe;YACbC,SAAS,EAAE,kBADE;YAEbR,IAAI,EAAEE,OAAO,CAACF,IAAR,CAAaS,QAFN;YAGbC,OAAO,EAAE,CAAC;cACRF,SAAS,EAAE,+BADH;cAERG,GAAG,EAAEC,KAAK,IAAI,CAACA,KAAK,CAACC,WAAN,CAAkBX,OAAO,CAACF,IAAR,CAAaS,QAA/B,EAAyC/B,MAAM,CAAC2B,eAAP,CAAuBS,aAAhE,CAAD;YAFN,CAAD;UAHI,CAAf;QAQD;MACF;;IApBI,CAAP;EAuBD;;AA3CmC,CAAvB,CAAf;;AA+CAvC,OAAO,CAACE,OAAR,GAAkBG,QAAlB"},"metadata":{},"sourceType":"script"}