{"ast":null,"code":"/**\n * @fileoverview Rule to flag use constant conditions\n * @author Christian Schulz <http://rndm.de>\n */\n\"use strict\";\n\nconst {\n  isConstant\n} = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow constant expressions in conditions\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-constant-condition\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        checkLoops: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Unexpected constant condition.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {},\n          checkLoops = options.checkLoops !== false,\n          loopSetStack = [];\n    let loopsInCurrentScope = new Set(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Tracks when the given node contains a constant condition.\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n\n    function trackConstantConditionLoop(node) {\n      if (node.test && isConstant(context.getScope(), node.test, true)) {\n        loopsInCurrentScope.add(node);\n      }\n    }\n    /**\n     * Reports when the set contains the given constant condition node\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkConstantConditionLoopInSet(node) {\n      if (loopsInCurrentScope.has(node)) {\n        loopsInCurrentScope.delete(node);\n        context.report({\n          node: node.test,\n          messageId: \"unexpected\"\n        });\n      }\n    }\n    /**\n     * Reports when the given node contains a constant condition.\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function reportIfConstant(node) {\n      if (node.test && isConstant(context.getScope(), node.test, true)) {\n        context.report({\n          node: node.test,\n          messageId: \"unexpected\"\n        });\n      }\n    }\n    /**\n     * Stores current set of constant loops in loopSetStack temporarily\n     * and uses a new set to track constant loops\n     * @returns {void}\n     * @private\n     */\n\n\n    function enterFunction() {\n      loopSetStack.push(loopsInCurrentScope);\n      loopsInCurrentScope = new Set();\n    }\n    /**\n     * Reports when the set still contains stored constant conditions\n     * @returns {void}\n     * @private\n     */\n\n\n    function exitFunction() {\n      loopsInCurrentScope = loopSetStack.pop();\n    }\n    /**\n     * Checks node when checkLoops option is enabled\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkLoop(node) {\n      if (checkLoops) {\n        trackConstantConditionLoop(node);\n      }\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      ConditionalExpression: reportIfConstant,\n      IfStatement: reportIfConstant,\n      WhileStatement: checkLoop,\n      \"WhileStatement:exit\": checkConstantConditionLoopInSet,\n      DoWhileStatement: checkLoop,\n      \"DoWhileStatement:exit\": checkConstantConditionLoopInSet,\n      ForStatement: checkLoop,\n      \"ForStatement > .test\": node => checkLoop(node.parent),\n      \"ForStatement:exit\": checkConstantConditionLoopInSet,\n      FunctionDeclaration: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      FunctionExpression: enterFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      YieldExpression: () => loopsInCurrentScope.clear()\n    };\n  }\n\n};","map":{"version":3,"names":["isConstant","require","module","exports","meta","type","docs","description","recommended","url","schema","properties","checkLoops","default","additionalProperties","messages","unexpected","create","context","options","loopSetStack","loopsInCurrentScope","Set","trackConstantConditionLoop","node","test","getScope","add","checkConstantConditionLoopInSet","has","delete","report","messageId","reportIfConstant","enterFunction","push","exitFunction","pop","checkLoop","ConditionalExpression","IfStatement","WhileStatement","DoWhileStatement","ForStatement","parent","FunctionDeclaration","FunctionExpression","YieldExpression","clear"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-constant-condition.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use constant conditions\n * @author Christian Schulz <http://rndm.de>\n */\n\n\"use strict\";\n\nconst { isConstant } = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow constant expressions in conditions\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-constant-condition\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    checkLoops: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpected: \"Unexpected constant condition.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {},\n            checkLoops = options.checkLoops !== false,\n            loopSetStack = [];\n\n        let loopsInCurrentScope = new Set();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Tracks when the given node contains a constant condition.\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function trackConstantConditionLoop(node) {\n            if (node.test && isConstant(context.getScope(), node.test, true)) {\n                loopsInCurrentScope.add(node);\n            }\n        }\n\n        /**\n         * Reports when the set contains the given constant condition node\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkConstantConditionLoopInSet(node) {\n            if (loopsInCurrentScope.has(node)) {\n                loopsInCurrentScope.delete(node);\n                context.report({ node: node.test, messageId: \"unexpected\" });\n            }\n        }\n\n        /**\n         * Reports when the given node contains a constant condition.\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function reportIfConstant(node) {\n            if (node.test && isConstant(context.getScope(), node.test, true)) {\n                context.report({ node: node.test, messageId: \"unexpected\" });\n            }\n        }\n\n        /**\n         * Stores current set of constant loops in loopSetStack temporarily\n         * and uses a new set to track constant loops\n         * @returns {void}\n         * @private\n         */\n        function enterFunction() {\n            loopSetStack.push(loopsInCurrentScope);\n            loopsInCurrentScope = new Set();\n        }\n\n        /**\n         * Reports when the set still contains stored constant conditions\n         * @returns {void}\n         * @private\n         */\n        function exitFunction() {\n            loopsInCurrentScope = loopSetStack.pop();\n        }\n\n        /**\n         * Checks node when checkLoops option is enabled\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkLoop(node) {\n            if (checkLoops) {\n                trackConstantConditionLoop(node);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            ConditionalExpression: reportIfConstant,\n            IfStatement: reportIfConstant,\n            WhileStatement: checkLoop,\n            \"WhileStatement:exit\": checkConstantConditionLoopInSet,\n            DoWhileStatement: checkLoop,\n            \"DoWhileStatement:exit\": checkConstantConditionLoopInSet,\n            ForStatement: checkLoop,\n            \"ForStatement > .test\": node => checkLoop(node.parent),\n            \"ForStatement:exit\": checkConstantConditionLoopInSet,\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            YieldExpression: () => loopsInCurrentScope.clear()\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}