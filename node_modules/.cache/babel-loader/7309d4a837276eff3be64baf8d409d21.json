{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rohith\\\\Pictures\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rohith\\\\Pictures\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * LruCache: A mapping from the String to T. If the number of the entries is\n * exceeding the `maxEntries`, the LruCache will delete the least recently\n * used entry.\n */\nexport var LruCache = /*#__PURE__*/function () {\n  function LruCache(maxEntries) {\n    _classCallCheck(this, LruCache);\n    this.maxEntries = maxEntries || 100;\n    this.cache = new Map();\n  }\n  /**\n   * Get the entry for the key and mark it as used recently.\n   */\n  _createClass(LruCache, [{\n    key: \"get\",\n    value: function get(key) {\n      var entry;\n      if (this.cache.has(key)) {\n        entry = this.cache.get(key);\n        this.cache.delete(key);\n        this.cache.set(key, entry);\n      }\n      return entry;\n    }\n    /**\n     * Put the entry into the cache. If the key already existed, mark the key as\n     * used recently.\n     */\n  }, {\n    key: \"put\",\n    value: function put(key, value) {\n      if (this.cache.has(key)) {\n        this.cache.delete(key);\n      } else if (this.cache.size >= this.maxEntries) {\n        var keyToDelete = this.cache.keys().next().value;\n        this.cache.delete(keyToDelete);\n      }\n      this.cache.set(key, value);\n    }\n    /**\n     * Get the MaxEntries of the cache.\n     */\n  }, {\n    key: \"getMaxEntries\",\n    value: function getMaxEntries() {\n      return this.maxEntries;\n    }\n    /**\n     * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce\n     * entries in the cache.\n     */\n  }, {\n    key: \"setMaxEntries\",\n    value: function setMaxEntries(maxEntries) {\n      if (maxEntries < 0) {\n        throw new Error(\"The maxEntries of LRU caches must be at least 0, but got \".concat(maxEntries, \".\"));\n      }\n      if (this.maxEntries > maxEntries) {\n        for (var i = 0; i < this.maxEntries - maxEntries; i++) {\n          var keyToDelete = this.cache.keys().next().value;\n          this.cache.delete(keyToDelete);\n        }\n      }\n      this.maxEntries = maxEntries;\n    }\n  }]);\n  return LruCache;\n}();","map":null,"metadata":{},"sourceType":"module"}