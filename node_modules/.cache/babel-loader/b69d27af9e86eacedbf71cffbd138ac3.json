{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shrinkPaddedLEB128 = shrinkPaddedLEB128;\n\nvar _ast = require(\"@webassemblyjs/ast\");\n\nvar _encoder = require(\"@webassemblyjs/wasm-gen/lib/encoder\");\n\nvar _helperBuffer = require(\"@webassemblyjs/helper-buffer\");\n\nfunction shiftFollowingSections(ast, _ref, deltaInSizeEncoding) {\n  var section = _ref.section; // Once we hit our section every that is after needs to be shifted by the delta\n\n  var encounteredSection = false;\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        (0, _ast.shiftSection)(ast, path.node, deltaInSizeEncoding);\n      }\n    }\n  });\n}\n\nfunction shrinkPaddedLEB128(ast, uint8Buffer) {\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(_ref2) {\n      var node = _ref2.node;\n      /**\n       * Section size\n       */\n\n      {\n        var newu32Encoded = (0, _encoder.encodeU32)(node.size.value);\n        var newu32EncodedLen = newu32Encoded.length;\n        var start = node.size.loc.start.column;\n        var end = node.size.loc.end.column;\n        var oldu32EncodedLen = end - start;\n\n        if (newu32EncodedLen !== oldu32EncodedLen) {\n          var deltaInSizeEncoding = oldu32EncodedLen - newu32EncodedLen;\n          uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newu32Encoded);\n          shiftFollowingSections(ast, node, -deltaInSizeEncoding);\n        }\n      }\n    }\n  });\n  return uint8Buffer;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","shrinkPaddedLEB128","_ast","require","_encoder","_helperBuffer","shiftFollowingSections","ast","_ref","deltaInSizeEncoding","section","encounteredSection","traverse","SectionMetadata","path","node","shiftSection","uint8Buffer","_ref2","newu32Encoded","encodeU32","size","newu32EncodedLen","length","start","loc","column","end","oldu32EncodedLen","overrideBytesInBuffer"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@webassemblyjs/wasm-opt/lib/leb128.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shrinkPaddedLEB128 = shrinkPaddedLEB128;\n\nvar _ast = require(\"@webassemblyjs/ast\");\n\nvar _encoder = require(\"@webassemblyjs/wasm-gen/lib/encoder\");\n\nvar _helperBuffer = require(\"@webassemblyjs/helper-buffer\");\n\nfunction shiftFollowingSections(ast, _ref, deltaInSizeEncoding) {\n  var section = _ref.section;\n  // Once we hit our section every that is after needs to be shifted by the delta\n  var encounteredSection = false;\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        (0, _ast.shiftSection)(ast, path.node, deltaInSizeEncoding);\n      }\n    }\n  });\n}\n\nfunction shrinkPaddedLEB128(ast, uint8Buffer) {\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(_ref2) {\n      var node = _ref2.node;\n\n      /**\n       * Section size\n       */\n      {\n        var newu32Encoded = (0, _encoder.encodeU32)(node.size.value);\n        var newu32EncodedLen = newu32Encoded.length;\n        var start = node.size.loc.start.column;\n        var end = node.size.loc.end.column;\n        var oldu32EncodedLen = end - start;\n\n        if (newu32EncodedLen !== oldu32EncodedLen) {\n          var deltaInSizeEncoding = oldu32EncodedLen - newu32EncodedLen;\n          uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newu32Encoded);\n          shiftFollowingSections(ast, node, -deltaInSizeEncoding);\n        }\n      }\n    }\n  });\n  return uint8Buffer;\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,oBAAD,CAAlB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,qCAAD,CAAtB;;AAEA,IAAIE,aAAa,GAAGF,OAAO,CAAC,8BAAD,CAA3B;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,mBAA3C,EAAgE;EAC9D,IAAIC,OAAO,GAAGF,IAAI,CAACE,OAAnB,CAD8D,CAE9D;;EACA,IAAIC,kBAAkB,GAAG,KAAzB;EACA,CAAC,GAAGT,IAAI,CAACU,QAAT,EAAmBL,GAAnB,EAAwB;IACtBM,eAAe,EAAE,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;MAC9C,IAAIA,IAAI,CAACC,IAAL,CAAUL,OAAV,KAAsBA,OAA1B,EAAmC;QACjCC,kBAAkB,GAAG,IAArB;QACA;MACD;;MAED,IAAIA,kBAAkB,KAAK,IAA3B,EAAiC;QAC/B,CAAC,GAAGT,IAAI,CAACc,YAAT,EAAuBT,GAAvB,EAA4BO,IAAI,CAACC,IAAjC,EAAuCN,mBAAvC;MACD;IACF;EAVqB,CAAxB;AAYD;;AAED,SAASR,kBAAT,CAA4BM,GAA5B,EAAiCU,WAAjC,EAA8C;EAC5C,CAAC,GAAGf,IAAI,CAACU,QAAT,EAAmBL,GAAnB,EAAwB;IACtBM,eAAe,EAAE,SAASA,eAAT,CAAyBK,KAAzB,EAAgC;MAC/C,IAAIH,IAAI,GAAGG,KAAK,CAACH,IAAjB;MAEA;AACN;AACA;;MACM;QACE,IAAII,aAAa,GAAG,CAAC,GAAGf,QAAQ,CAACgB,SAAb,EAAwBL,IAAI,CAACM,IAAL,CAAUrB,KAAlC,CAApB;QACA,IAAIsB,gBAAgB,GAAGH,aAAa,CAACI,MAArC;QACA,IAAIC,KAAK,GAAGT,IAAI,CAACM,IAAL,CAAUI,GAAV,CAAcD,KAAd,CAAoBE,MAAhC;QACA,IAAIC,GAAG,GAAGZ,IAAI,CAACM,IAAL,CAAUI,GAAV,CAAcE,GAAd,CAAkBD,MAA5B;QACA,IAAIE,gBAAgB,GAAGD,GAAG,GAAGH,KAA7B;;QAEA,IAAIF,gBAAgB,KAAKM,gBAAzB,EAA2C;UACzC,IAAInB,mBAAmB,GAAGmB,gBAAgB,GAAGN,gBAA7C;UACAL,WAAW,GAAG,CAAC,GAAGZ,aAAa,CAACwB,qBAAlB,EAAyCZ,WAAzC,EAAsDO,KAAtD,EAA6DG,GAA7D,EAAkER,aAAlE,CAAd;UACAb,sBAAsB,CAACC,GAAD,EAAMQ,IAAN,EAAY,CAACN,mBAAb,CAAtB;QACD;MACF;IACF;EApBqB,CAAxB;EAsBA,OAAOQ,WAAP;AACD"},"metadata":{},"sourceType":"script"}