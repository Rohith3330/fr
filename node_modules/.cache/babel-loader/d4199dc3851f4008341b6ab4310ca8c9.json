{"ast":null,"code":"/**\n * @fileoverview A rule to suggest using of the spread operator instead of `.apply()`.\n * @author Toru Nagashima\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a `.apply()` for variadic.\n * @param {ASTNode} node A CallExpression node to check.\n * @returns {boolean} Whether or not the node is a `.apply()` for variadic.\n */\n\n\nfunction isVariadicApplyCalling(node) {\n  return astUtils.isSpecificMemberAccess(node.callee, null, \"apply\") && node.arguments.length === 2 && node.arguments[1].type !== \"ArrayExpression\" && node.arguments[1].type !== \"SpreadElement\";\n}\n/**\n * Checks whether or not `thisArg` is not changed by `.apply()`.\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.apply()`.\n * @param {RuleContext} context The ESLint rule context object.\n * @returns {boolean} Whether or not `thisArg` is not changed by `.apply()`.\n */\n\n\nfunction isValidThisArg(expectedThis, thisArg, context) {\n  if (!expectedThis) {\n    return astUtils.isNullOrUndefined(thisArg);\n  }\n\n  return astUtils.equalTokens(expectedThis, thisArg, context);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Require spread operators instead of `.apply()`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-spread\"\n    },\n    schema: [],\n    fixable: null,\n    messages: {\n      preferSpread: \"Use the spread operator instead of '.apply()'.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      CallExpression(node) {\n        if (!isVariadicApplyCalling(node)) {\n          return;\n        }\n\n        const applied = astUtils.skipChainExpression(astUtils.skipChainExpression(node.callee).object);\n        const expectedThis = applied.type === \"MemberExpression\" ? applied.object : null;\n        const thisArg = node.arguments[0];\n\n        if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\n          context.report({\n            node,\n            messageId: \"preferSpread\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","isVariadicApplyCalling","node","isSpecificMemberAccess","callee","arguments","length","type","isValidThisArg","expectedThis","thisArg","context","isNullOrUndefined","equalTokens","module","exports","meta","docs","description","recommended","url","schema","fixable","messages","preferSpread","create","sourceCode","getSourceCode","CallExpression","applied","skipChainExpression","object","report","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/prefer-spread.js"],"sourcesContent":["/**\n * @fileoverview A rule to suggest using of the spread operator instead of `.apply()`.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a `.apply()` for variadic.\n * @param {ASTNode} node A CallExpression node to check.\n * @returns {boolean} Whether or not the node is a `.apply()` for variadic.\n */\nfunction isVariadicApplyCalling(node) {\n    return (\n        astUtils.isSpecificMemberAccess(node.callee, null, \"apply\") &&\n        node.arguments.length === 2 &&\n        node.arguments[1].type !== \"ArrayExpression\" &&\n        node.arguments[1].type !== \"SpreadElement\"\n    );\n}\n\n/**\n * Checks whether or not `thisArg` is not changed by `.apply()`.\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.apply()`.\n * @param {RuleContext} context The ESLint rule context object.\n * @returns {boolean} Whether or not `thisArg` is not changed by `.apply()`.\n */\nfunction isValidThisArg(expectedThis, thisArg, context) {\n    if (!expectedThis) {\n        return astUtils.isNullOrUndefined(thisArg);\n    }\n    return astUtils.equalTokens(expectedThis, thisArg, context);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Require spread operators instead of `.apply()`\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/prefer-spread\"\n        },\n\n        schema: [],\n        fixable: null,\n\n        messages: {\n            preferSpread: \"Use the spread operator instead of '.apply()'.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        return {\n            CallExpression(node) {\n                if (!isVariadicApplyCalling(node)) {\n                    return;\n                }\n\n                const applied = astUtils.skipChainExpression(astUtils.skipChainExpression(node.callee).object);\n                const expectedThis = (applied.type === \"MemberExpression\") ? applied.object : null;\n                const thisArg = node.arguments[0];\n\n                if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\n                    context.report({\n                        node,\n                        messageId: \"preferSpread\"\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCC,IAAhC,EAAsC;EAClC,OACIH,QAAQ,CAACI,sBAAT,CAAgCD,IAAI,CAACE,MAArC,EAA6C,IAA7C,EAAmD,OAAnD,KACAF,IAAI,CAACG,SAAL,CAAeC,MAAf,KAA0B,CAD1B,IAEAJ,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkBE,IAAlB,KAA2B,iBAF3B,IAGAL,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkBE,IAAlB,KAA2B,eAJ/B;AAMH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,YAAxB,EAAsCC,OAAtC,EAA+CC,OAA/C,EAAwD;EACpD,IAAI,CAACF,YAAL,EAAmB;IACf,OAAOV,QAAQ,CAACa,iBAAT,CAA2BF,OAA3B,CAAP;EACH;;EACD,OAAOX,QAAQ,CAACc,WAAT,CAAqBJ,YAArB,EAAmCC,OAAnC,EAA4CC,OAA5C,CAAP;AACH,C,CAED;AACA;AACA;;AAEA;;;AACAG,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFT,IAAI,EAAE,YADJ;IAGFU,IAAI,EAAE;MACFC,WAAW,EAAE,gDADX;MAEFC,WAAW,EAAE,KAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAUFC,OAAO,EAAE,IAVP;IAYFC,QAAQ,EAAE;MACNC,YAAY,EAAE;IADR;EAZR,CADO;;EAkBbC,MAAM,CAACd,OAAD,EAAU;IACZ,MAAMe,UAAU,GAAGf,OAAO,CAACgB,aAAR,EAAnB;IAEA,OAAO;MACHC,cAAc,CAAC1B,IAAD,EAAO;QACjB,IAAI,CAACD,sBAAsB,CAACC,IAAD,CAA3B,EAAmC;UAC/B;QACH;;QAED,MAAM2B,OAAO,GAAG9B,QAAQ,CAAC+B,mBAAT,CAA6B/B,QAAQ,CAAC+B,mBAAT,CAA6B5B,IAAI,CAACE,MAAlC,EAA0C2B,MAAvE,CAAhB;QACA,MAAMtB,YAAY,GAAIoB,OAAO,CAACtB,IAAR,KAAiB,kBAAlB,GAAwCsB,OAAO,CAACE,MAAhD,GAAyD,IAA9E;QACA,MAAMrB,OAAO,GAAGR,IAAI,CAACG,SAAL,CAAe,CAAf,CAAhB;;QAEA,IAAIG,cAAc,CAACC,YAAD,EAAeC,OAAf,EAAwBgB,UAAxB,CAAlB,EAAuD;UACnDf,OAAO,CAACqB,MAAR,CAAe;YACX9B,IADW;YAEX+B,SAAS,EAAE;UAFA,CAAf;QAIH;MACJ;;IAhBE,CAAP;EAkBH;;AAvCY,CAAjB"},"metadata":{},"sourceType":"script"}