{"ast":null,"code":"/**\n * @fileoverview Rule to disallow specified names in exports\n * @author Milos Djermanovic\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow specified names in exports\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-exports\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        restrictedNamedExports: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      restrictedNamed: \"'{{name}}' is restricted from being used as an exported name.\"\n    }\n  },\n\n  create(context) {\n    const restrictedNames = new Set(context.options[0] && context.options[0].restrictedNamedExports);\n    /**\n     * Checks and reports given exported name.\n     * @param {ASTNode} node exported `Identifier` or string `Literal` node to check.\n     * @returns {void}\n     */\n\n    function checkExportedName(node) {\n      const name = astUtils.getModuleExportName(node);\n\n      if (restrictedNames.has(name)) {\n        context.report({\n          node,\n          messageId: \"restrictedNamed\",\n          data: {\n            name\n          }\n        });\n      }\n    }\n\n    return {\n      ExportAllDeclaration(node) {\n        if (node.exported) {\n          checkExportedName(node.exported);\n        }\n      },\n\n      ExportNamedDeclaration(node) {\n        const declaration = node.declaration;\n\n        if (declaration) {\n          if (declaration.type === \"FunctionDeclaration\" || declaration.type === \"ClassDeclaration\") {\n            checkExportedName(declaration.id);\n          } else if (declaration.type === \"VariableDeclaration\") {\n            context.getDeclaredVariables(declaration).map(v => v.defs.find(d => d.parent === declaration)).map(d => d.name) // Identifier nodes\n            .forEach(checkExportedName);\n          }\n        } else {\n          node.specifiers.map(s => s.exported).forEach(checkExportedName);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","schema","properties","restrictedNamedExports","items","uniqueItems","additionalProperties","messages","restrictedNamed","create","context","restrictedNames","Set","options","checkExportedName","node","name","getModuleExportName","has","report","messageId","data","ExportAllDeclaration","exported","ExportNamedDeclaration","declaration","id","getDeclaredVariables","map","v","defs","find","d","parent","forEach","specifiers","s"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-restricted-exports.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow specified names in exports\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow specified names in exports\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-restricted-exports\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                restrictedNamedExports: {\n                    type: \"array\",\n                    items: {\n                        type: \"string\"\n                    },\n                    uniqueItems: true\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            restrictedNamed: \"'{{name}}' is restricted from being used as an exported name.\"\n        }\n    },\n\n    create(context) {\n\n        const restrictedNames = new Set(context.options[0] && context.options[0].restrictedNamedExports);\n\n        /**\n         * Checks and reports given exported name.\n         * @param {ASTNode} node exported `Identifier` or string `Literal` node to check.\n         * @returns {void}\n         */\n        function checkExportedName(node) {\n            const name = astUtils.getModuleExportName(node);\n\n            if (restrictedNames.has(name)) {\n                context.report({\n                    node,\n                    messageId: \"restrictedNamed\",\n                    data: { name }\n                });\n            }\n        }\n\n        return {\n            ExportAllDeclaration(node) {\n                if (node.exported) {\n                    checkExportedName(node.exported);\n                }\n            },\n\n            ExportNamedDeclaration(node) {\n                const declaration = node.declaration;\n\n                if (declaration) {\n                    if (declaration.type === \"FunctionDeclaration\" || declaration.type === \"ClassDeclaration\") {\n                        checkExportedName(declaration.id);\n                    } else if (declaration.type === \"VariableDeclaration\") {\n                        context.getDeclaredVariables(declaration)\n                            .map(v => v.defs.find(d => d.parent === declaration))\n                            .map(d => d.name) // Identifier nodes\n                            .forEach(checkExportedName);\n                    }\n                } else {\n                    node.specifiers\n                        .map(s => s.exported)\n                        .forEach(checkExportedName);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,qCADX;MAEFC,WAAW,EAAE,KAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,CAAC;MACLL,IAAI,EAAE,QADD;MAELM,UAAU,EAAE;QACRC,sBAAsB,EAAE;UACpBP,IAAI,EAAE,OADc;UAEpBQ,KAAK,EAAE;YACHR,IAAI,EAAE;UADH,CAFa;UAKpBS,WAAW,EAAE;QALO;MADhB,CAFP;MAWLC,oBAAoB,EAAE;IAXjB,CAAD,CATN;IAuBFC,QAAQ,EAAE;MACNC,eAAe,EAAE;IADX;EAvBR,CADO;;EA6BbC,MAAM,CAACC,OAAD,EAAU;IAEZ,MAAMC,eAAe,GAAG,IAAIC,GAAJ,CAAQF,OAAO,CAACG,OAAR,CAAgB,CAAhB,KAAsBH,OAAO,CAACG,OAAR,CAAgB,CAAhB,EAAmBV,sBAAjD,CAAxB;IAEA;AACR;AACA;AACA;AACA;;IACQ,SAASW,iBAAT,CAA2BC,IAA3B,EAAiC;MAC7B,MAAMC,IAAI,GAAGzB,QAAQ,CAAC0B,mBAAT,CAA6BF,IAA7B,CAAb;;MAEA,IAAIJ,eAAe,CAACO,GAAhB,CAAoBF,IAApB,CAAJ,EAA+B;QAC3BN,OAAO,CAACS,MAAR,CAAe;UACXJ,IADW;UAEXK,SAAS,EAAE,iBAFA;UAGXC,IAAI,EAAE;YAAEL;UAAF;QAHK,CAAf;MAKH;IACJ;;IAED,OAAO;MACHM,oBAAoB,CAACP,IAAD,EAAO;QACvB,IAAIA,IAAI,CAACQ,QAAT,EAAmB;UACfT,iBAAiB,CAACC,IAAI,CAACQ,QAAN,CAAjB;QACH;MACJ,CALE;;MAOHC,sBAAsB,CAACT,IAAD,EAAO;QACzB,MAAMU,WAAW,GAAGV,IAAI,CAACU,WAAzB;;QAEA,IAAIA,WAAJ,EAAiB;UACb,IAAIA,WAAW,CAAC7B,IAAZ,KAAqB,qBAArB,IAA8C6B,WAAW,CAAC7B,IAAZ,KAAqB,kBAAvE,EAA2F;YACvFkB,iBAAiB,CAACW,WAAW,CAACC,EAAb,CAAjB;UACH,CAFD,MAEO,IAAID,WAAW,CAAC7B,IAAZ,KAAqB,qBAAzB,EAAgD;YACnDc,OAAO,CAACiB,oBAAR,CAA6BF,WAA7B,EACKG,GADL,CACSC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOC,IAAP,CAAYC,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaR,WAA9B,CADd,EAEKG,GAFL,CAESI,CAAC,IAAIA,CAAC,CAAChB,IAFhB,EAEsB;YAFtB,CAGKkB,OAHL,CAGapB,iBAHb;UAIH;QACJ,CATD,MASO;UACHC,IAAI,CAACoB,UAAL,CACKP,GADL,CACSQ,CAAC,IAAIA,CAAC,CAACb,QADhB,EAEKW,OAFL,CAEapB,iBAFb;QAGH;MACJ;;IAxBE,CAAP;EA0BH;;AA5EY,CAAjB"},"metadata":{},"sourceType":"script"}