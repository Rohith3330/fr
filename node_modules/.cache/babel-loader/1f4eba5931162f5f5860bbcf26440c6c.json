{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.register = void 0;\n\nvar match_path_sync_1 = require(\"./match-path-sync\");\n\nvar config_loader_1 = require(\"./config-loader\");\n\nvar options_1 = require(\"./options\");\n\nvar noOp = function () {\n  return void 0;\n};\n\nfunction getCoreModules(builtinModules) {\n  builtinModules = builtinModules || [\"assert\", \"buffer\", \"child_process\", \"cluster\", \"crypto\", \"dgram\", \"dns\", \"domain\", \"events\", \"fs\", \"http\", \"https\", \"net\", \"os\", \"path\", \"punycode\", \"querystring\", \"readline\", \"stream\", \"string_decoder\", \"tls\", \"tty\", \"url\", \"util\", \"v8\", \"vm\", \"zlib\"];\n  var coreModules = {};\n\n  for (var _i = 0, builtinModules_1 = builtinModules; _i < builtinModules_1.length; _i++) {\n    var module_1 = builtinModules_1[_i];\n    coreModules[module_1] = true;\n  }\n\n  return coreModules;\n}\n/**\n * Installs a custom module load function that can adhere to paths in tsconfig.\n * Returns a function to undo paths registration.\n */\n\n\nfunction register(explicitParams) {\n  var configLoaderResult = (0, config_loader_1.configLoader)({\n    cwd: options_1.options.cwd,\n    explicitParams: explicitParams\n  });\n\n  if (configLoaderResult.resultType === \"failed\") {\n    console.warn(\"\".concat(configLoaderResult.message, \". tsconfig-paths will be skipped\"));\n    return noOp;\n  }\n\n  var matchPath = (0, match_path_sync_1.createMatchPath)(configLoaderResult.absoluteBaseUrl, configLoaderResult.paths, configLoaderResult.mainFields, configLoaderResult.addMatchAll); // Patch node's module loading\n  // tslint:disable-next-line:no-require-imports variable-name\n\n  var Module = require(\"module\");\n\n  var originalResolveFilename = Module._resolveFilename;\n  var coreModules = getCoreModules(Module.builtinModules); // tslint:disable-next-line:no-any\n\n  Module._resolveFilename = function (request, _parent) {\n    var isCoreModule = coreModules.hasOwnProperty(request);\n\n    if (!isCoreModule) {\n      var found = matchPath(request);\n\n      if (found) {\n        var modifiedArguments = __spreadArray([found], [].slice.call(arguments, 1), true); // Passes all arguments. Even those that is not specified above.\n        // tslint:disable-next-line:no-invalid-this\n\n\n        return originalResolveFilename.apply(this, modifiedArguments);\n      }\n    } // tslint:disable-next-line:no-invalid-this\n\n\n    return originalResolveFilename.apply(this, arguments);\n  };\n\n  return function () {\n    // Return node's module loading to original state.\n    Module._resolveFilename = originalResolveFilename;\n  };\n}\n\nexports.register = register;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,IAAI,GAAG;EAAY,YAAK,CAAL;AAAM,CAA/B;;AAEA,SAASC,cAAT,CACEC,cADF,EACsC;EAEpCA,cAAc,GAAGA,cAAc,IAAI,CACjC,QADiC,EAEjC,QAFiC,EAGjC,eAHiC,EAIjC,SAJiC,EAKjC,QALiC,EAMjC,OANiC,EAOjC,KAPiC,EAQjC,QARiC,EASjC,QATiC,EAUjC,IAViC,EAWjC,MAXiC,EAYjC,OAZiC,EAajC,KAbiC,EAcjC,IAdiC,EAejC,MAfiC,EAgBjC,UAhBiC,EAiBjC,aAjBiC,EAkBjC,UAlBiC,EAmBjC,QAnBiC,EAoBjC,gBApBiC,EAqBjC,KArBiC,EAsBjC,KAtBiC,EAuBjC,KAvBiC,EAwBjC,MAxBiC,EAyBjC,IAzBiC,EA0BjC,IA1BiC,EA2BjC,MA3BiC,CAAnC;EA8BA,IAAMC,WAAW,GAA+B,EAAhD;;EACA,KAAmB,6CAAnB,EAAmBC,4BAAnB,EAAmBA,IAAnB,EAAmC;IAA9B,IAAIC,QAAM,uBAAV;IACHF,WAAW,CAACE,QAAD,CAAX,GAAsB,IAAtB;EACD;;EAED,OAAOF,WAAP;AACD;AAED;;;;;;AAIA,SAAgBG,QAAhB,CAAyBC,cAAzB,EAAuD;EACrD,IAAMC,kBAAkB,GAAG,kCAAa;IACtCC,GAAG,EAAEC,kBAAQD,GADyB;IAEtCF,cAAc;EAFwB,CAAb,CAA3B;;EAKA,IAAIC,kBAAkB,CAACG,UAAnB,KAAkC,QAAtC,EAAgD;IAC9CC,OAAO,CAACC,IAAR,CACE,UAAGL,kBAAkB,CAACM,OAAtB,EAA6B,kCAA7B,CADF;IAIA,OAAOd,IAAP;EACD;;EAED,IAAMe,SAAS,GAAG,uCAChBP,kBAAkB,CAACQ,eADH,EAEhBR,kBAAkB,CAACS,KAFH,EAGhBT,kBAAkB,CAACU,UAHH,EAIhBV,kBAAkB,CAACW,WAJH,CAAlB,CAdqD,CAqBrD;EACA;;EACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;EACA,IAAMC,uBAAuB,GAAGF,MAAM,CAACG,gBAAvC;EACA,IAAMpB,WAAW,GAAGF,cAAc,CAACmB,MAAM,CAAClB,cAAR,CAAlC,CAzBqD,CA0BrD;;EACAkB,MAAM,CAACG,gBAAP,GAA0B,UAAUC,OAAV,EAA2BC,OAA3B,EAAuC;IAC/D,IAAMC,YAAY,GAAGvB,WAAW,CAACwB,cAAZ,CAA2BH,OAA3B,CAArB;;IACA,IAAI,CAACE,YAAL,EAAmB;MACjB,IAAME,KAAK,GAAGb,SAAS,CAACS,OAAD,CAAvB;;MACA,IAAII,KAAJ,EAAW;QACT,IAAMC,iBAAiB,kBAAID,KAAJ,GAAc,GAAGE,KAAH,CAASC,IAAT,CAAcC,SAAd,EAAyB,CAAzB,CAAd,EAAyC,IAAzC,CAAvB,CADS,CAC0D;QACnE;;;QACA,OAAOV,uBAAuB,CAACW,KAAxB,CAA8B,IAA9B,EAAoCJ,iBAApC,CAAP;MACD;IACF,CAT8D,CAU/D;;;IACA,OAAOP,uBAAuB,CAACW,KAAxB,CAA8B,IAA9B,EAAoCD,SAApC,CAAP;EACD,CAZD;;EAcA,OAAO;IACL;IACAZ,MAAM,CAACG,gBAAP,GAA0BD,uBAA1B;EACD,CAHD;AAID;;AA7CDY","names":["noOp","getCoreModules","builtinModules","coreModules","_i","module_1","register","explicitParams","configLoaderResult","cwd","options_1","resultType","console","warn","message","matchPath","absoluteBaseUrl","paths","mainFields","addMatchAll","Module","require","originalResolveFilename","_resolveFilename","request","_parent","isCoreModule","hasOwnProperty","found","modifiedArguments","slice","call","arguments","apply","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\tsconfig-paths\\src\\register.ts"],"sourcesContent":["import { createMatchPath } from \"./match-path-sync\";\nimport { configLoader, ExplicitParams } from \"./config-loader\";\nimport { options } from \"./options\";\n\nconst noOp = (): void => void 0;\n\nfunction getCoreModules(\n  builtinModules: string[] | undefined\n): { [key: string]: boolean } {\n  builtinModules = builtinModules || [\n    \"assert\",\n    \"buffer\",\n    \"child_process\",\n    \"cluster\",\n    \"crypto\",\n    \"dgram\",\n    \"dns\",\n    \"domain\",\n    \"events\",\n    \"fs\",\n    \"http\",\n    \"https\",\n    \"net\",\n    \"os\",\n    \"path\",\n    \"punycode\",\n    \"querystring\",\n    \"readline\",\n    \"stream\",\n    \"string_decoder\",\n    \"tls\",\n    \"tty\",\n    \"url\",\n    \"util\",\n    \"v8\",\n    \"vm\",\n    \"zlib\",\n  ];\n\n  const coreModules: { [key: string]: boolean } = {};\n  for (let module of builtinModules) {\n    coreModules[module] = true;\n  }\n\n  return coreModules;\n}\n\n/**\n * Installs a custom module load function that can adhere to paths in tsconfig.\n * Returns a function to undo paths registration.\n */\nexport function register(explicitParams: ExplicitParams): () => void {\n  const configLoaderResult = configLoader({\n    cwd: options.cwd,\n    explicitParams,\n  });\n\n  if (configLoaderResult.resultType === \"failed\") {\n    console.warn(\n      `${configLoaderResult.message}. tsconfig-paths will be skipped`\n    );\n\n    return noOp;\n  }\n\n  const matchPath = createMatchPath(\n    configLoaderResult.absoluteBaseUrl,\n    configLoaderResult.paths,\n    configLoaderResult.mainFields,\n    configLoaderResult.addMatchAll\n  );\n\n  // Patch node's module loading\n  // tslint:disable-next-line:no-require-imports variable-name\n  const Module = require(\"module\");\n  const originalResolveFilename = Module._resolveFilename;\n  const coreModules = getCoreModules(Module.builtinModules);\n  // tslint:disable-next-line:no-any\n  Module._resolveFilename = function (request: string, _parent: any): string {\n    const isCoreModule = coreModules.hasOwnProperty(request);\n    if (!isCoreModule) {\n      const found = matchPath(request);\n      if (found) {\n        const modifiedArguments = [found, ...[].slice.call(arguments, 1)]; // Passes all arguments. Even those that is not specified above.\n        // tslint:disable-next-line:no-invalid-this\n        return originalResolveFilename.apply(this, modifiedArguments);\n      }\n    }\n    // tslint:disable-next-line:no-invalid-this\n    return originalResolveFilename.apply(this, arguments);\n  };\n\n  return () => {\n    // Return node's module loading to original state.\n    Module._resolveFilename = originalResolveFilename;\n  };\n}\n"]},"metadata":{},"sourceType":"script"}