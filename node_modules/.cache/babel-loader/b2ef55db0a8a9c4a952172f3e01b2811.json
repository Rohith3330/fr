{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\n\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('comma-dangle');\nconst OPTION_VALUE_SCHEME = ['always-multiline', 'always', 'never', 'only-multiline'];\nconst DEFAULT_OPTION_VALUE = 'never';\n\nfunction normalizeOptions(options) {\n  var _a, _b, _c;\n\n  if (typeof options === 'string') {\n    return {\n      enums: options,\n      generics: options,\n      tuples: options\n    };\n  }\n\n  return {\n    enums: (_a = options.enums) !== null && _a !== void 0 ? _a : DEFAULT_OPTION_VALUE,\n    generics: (_b = options.generics) !== null && _b !== void 0 ? _b : DEFAULT_OPTION_VALUE,\n    tuples: (_c = options.tuples) !== null && _c !== void 0 ? _c : DEFAULT_OPTION_VALUE\n  };\n}\n\nexports.default = util.createRule({\n  name: 'comma-dangle',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Require or disallow trailing commas',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    schema: {\n      $defs: {\n        value: {\n          enum: OPTION_VALUE_SCHEME\n        },\n        valueWithIgnore: {\n          enum: [...OPTION_VALUE_SCHEME, 'ignore']\n        }\n      },\n      type: 'array',\n      items: [{\n        oneOf: [{\n          $ref: '#/$defs/value'\n        }, {\n          type: 'object',\n          properties: {\n            arrays: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            objects: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            imports: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            exports: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            functions: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            enums: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            generics: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            tuples: {\n              $ref: '#/$defs/valueWithIgnore'\n            }\n          },\n          additionalProperties: false\n        }]\n      }],\n      additionalProperties: false\n    },\n    fixable: 'code',\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    messages: baseRule.meta.messages\n  },\n  defaultOptions: ['never'],\n\n  create(context, _ref) {\n    let [options] = _ref;\n    const rules = baseRule.create(context);\n    const sourceCode = context.getSourceCode();\n    const normalizedOptions = normalizeOptions(options);\n    const predicate = {\n      always: forceComma,\n      'always-multiline': forceCommaIfMultiline,\n      'only-multiline': allowCommaIfMultiline,\n      never: forbidComma,\n      ignore: () => {}\n    };\n\n    function last(nodes) {\n      var _a;\n\n      return (_a = nodes[nodes.length - 1]) !== null && _a !== void 0 ? _a : null;\n    }\n\n    function getLastItem(node) {\n      switch (node.type) {\n        case utils_1.AST_NODE_TYPES.TSEnumDeclaration:\n          return last(node.members);\n\n        case utils_1.AST_NODE_TYPES.TSTypeParameterDeclaration:\n          return last(node.params);\n\n        case utils_1.AST_NODE_TYPES.TSTupleType:\n          return last(node.elementTypes);\n\n        default:\n          return null;\n      }\n    }\n\n    function getTrailingToken(node) {\n      const last = getLastItem(node);\n      const trailing = last && sourceCode.getTokenAfter(last);\n      return trailing;\n    }\n\n    function isMultiline(node) {\n      const last = getLastItem(node);\n      const lastToken = sourceCode.getLastToken(node);\n      return (last === null || last === void 0 ? void 0 : last.loc.end.line) !== (lastToken === null || lastToken === void 0 ? void 0 : lastToken.loc.end.line);\n    }\n\n    function forbidComma(node) {\n      const last = getLastItem(node);\n      const trailing = getTrailingToken(node);\n\n      if (last && trailing && util.isCommaToken(trailing)) {\n        context.report({\n          node,\n          messageId: 'unexpected',\n\n          fix(fixer) {\n            return fixer.remove(trailing);\n          }\n\n        });\n      }\n    }\n\n    function forceComma(node) {\n      const last = getLastItem(node);\n      const trailing = getTrailingToken(node);\n\n      if (last && trailing && !util.isCommaToken(trailing)) {\n        context.report({\n          node,\n          messageId: 'missing',\n\n          fix(fixer) {\n            return fixer.insertTextAfter(last, ',');\n          }\n\n        });\n      }\n    }\n\n    function allowCommaIfMultiline(node) {\n      if (!isMultiline(node)) {\n        forbidComma(node);\n      }\n    }\n\n    function forceCommaIfMultiline(node) {\n      if (isMultiline(node)) {\n        forceComma(node);\n      } else {\n        forbidComma(node);\n      }\n    }\n\n    return Object.assign(Object.assign({}, rules), {\n      TSEnumDeclaration: predicate[normalizedOptions.enums],\n      TSTypeParameterDeclaration: predicate[normalizedOptions.generics],\n      TSTupleType: predicate[normalizedOptions.tuples]\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["baseRule","OPTION_VALUE_SCHEME","DEFAULT_OPTION_VALUE","normalizeOptions","options","enums","generics","tuples","_a","_b","_c","exports","util","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","schema","$defs","value","enum","valueWithIgnore","items","oneOf","$ref","properties","arrays","objects","imports","functions","additionalProperties","fixable","hasSuggestions","messages","defaultOptions","create","context","rules","sourceCode","getSourceCode","normalizedOptions","predicate","always","forceComma","forceCommaIfMultiline","allowCommaIfMultiline","never","forbidComma","ignore","last","nodes","length","getLastItem","node","utils_1","TSEnumDeclaration","members","TSTypeParameterDeclaration","params","TSTupleType","elementTypes","getTrailingToken","trailing","getTokenAfter","isMultiline","lastToken","getLastToken","loc","end","line","isCommaToken","report","messageId","fix","fixer","remove","insertTextAfter"],"sources":["../../src/rules/comma-dangle.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}