{"ast":null,"code":"/**\n * Extractor function for a LogicalExpression type value node.\n * A logical expression is `a && b` or `a || b`, so we evaluate both sides\n * and return the extracted value of the expression.\n *\n * @param - value - AST Value object with type `LogicalExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromLogicalExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n\n  const {\n    operator,\n    left,\n    right\n  } = value;\n  const leftVal = getValue(left);\n  const rightVal = getValue(right);\n\n  if (operator === '&&') {\n    return leftVal && rightVal;\n  }\n\n  if (operator === '??') {\n    // return leftVal ?? rightVal; // TODO: update to babel 7\n    return leftVal === null || typeof leftVal === 'undefined' ? rightVal : leftVal;\n  }\n\n  return leftVal || rightVal;\n}","map":{"version":3,"names":["extractValueFromLogicalExpression","value","getValue","require","default","operator","left","right","leftVal","rightVal"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/src/values/expressions/LogicalExpression.js"],"sourcesContent":["/**\n * Extractor function for a LogicalExpression type value node.\n * A logical expression is `a && b` or `a || b`, so we evaluate both sides\n * and return the extracted value of the expression.\n *\n * @param - value - AST Value object with type `LogicalExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromLogicalExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n  const { operator, left, right } = value;\n  const leftVal = getValue(left);\n  const rightVal = getValue(right);\n\n  if (operator === '&&') {\n    return leftVal && rightVal;\n  }\n  if (operator === '??') {\n    // return leftVal ?? rightVal; // TODO: update to babel 7\n    return (leftVal === null || typeof leftVal === 'undefined') ? rightVal : leftVal;\n  }\n  return leftVal || rightVal;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,iCAAT,CAA2CC,KAA3C,EAAkD;EAC/D;EACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,GAAD,CAAP,CAAaC,OAA9B;;EACA,MAAM;IAAEC,QAAF;IAAYC,IAAZ;IAAkBC;EAAlB,IAA4BN,KAAlC;EACA,MAAMO,OAAO,GAAGN,QAAQ,CAACI,IAAD,CAAxB;EACA,MAAMG,QAAQ,GAAGP,QAAQ,CAACK,KAAD,CAAzB;;EAEA,IAAIF,QAAQ,KAAK,IAAjB,EAAuB;IACrB,OAAOG,OAAO,IAAIC,QAAlB;EACD;;EACD,IAAIJ,QAAQ,KAAK,IAAjB,EAAuB;IACrB;IACA,OAAQG,OAAO,KAAK,IAAZ,IAAoB,OAAOA,OAAP,KAAmB,WAAxC,GAAuDC,QAAvD,GAAkED,OAAzE;EACD;;EACD,OAAOA,OAAO,IAAIC,QAAlB;AACD"},"metadata":{},"sourceType":"module"}