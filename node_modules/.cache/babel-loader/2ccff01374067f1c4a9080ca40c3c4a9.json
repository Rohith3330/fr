{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseDataUrl;\n\nvar _abab = require(\"abab\");\n\nconst removeLeadingAndTrailingHTTPWhitespace = string => string.replace(/^[ \\t\\n\\r]+/, \"\").replace(/[ \\t\\n\\r]+$/, \"\");\n\nconst removeTrailingHTTPWhitespace = string => string.replace(/[ \\t\\n\\r]+$/, \"\");\n\nconst isHTTPWhitespaceChar = char => char === \" \" || char === \"\\t\" || char === \"\\n\" || char === \"\\r\";\n\nconst solelyContainsHTTPTokenCodePoints = string => /^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/.test(string);\n\nconst soleyContainsHTTPQuotedStringTokenCodePoints = string => /^[\\t\\u0020-\\u007E\\u0080-\\u00FF]*$/.test(string);\n\nconst asciiLowercase = string => string.replace(/[A-Z]/g, l => l.toLowerCase());\n\nconst collectAnHTTPQuotedString = (input, position) => {\n  let value = \"\"; // eslint-disable-next-line no-param-reassign\n\n  position += 1; // eslint-disable-next-line no-constant-condition\n\n  while (true) {\n    while (position < input.length && input[position] !== '\"' && input[position] !== \"\\\\\") {\n      value += input[position]; // eslint-disable-next-line no-param-reassign\n\n      position += 1;\n    }\n\n    if (position >= input.length) {\n      break;\n    }\n\n    const quoteOrBackslash = input[position]; // eslint-disable-next-line no-param-reassign\n\n    position += 1;\n\n    if (quoteOrBackslash === \"\\\\\") {\n      if (position >= input.length) {\n        value += \"\\\\\";\n        break;\n      }\n\n      value += input[position]; // eslint-disable-next-line no-param-reassign\n\n      position += 1;\n    } else {\n      break;\n    }\n  }\n\n  return [value, position];\n};\n\nfunction isASCIIHex(c) {\n  return c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x46 || c >= 0x61 && c <= 0x66;\n}\n\nfunction percentDecodeBytes(input) {\n  const output = new Uint8Array(input.byteLength);\n  let outputIndex = 0;\n\n  for (let i = 0; i < input.byteLength; ++i) {\n    const byte = input[i];\n\n    if (byte !== 0x25) {\n      output[outputIndex] = byte;\n    } else if (byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {\n      output[outputIndex] = byte;\n    } else {\n      output[outputIndex] = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);\n      i += 2;\n    }\n\n    outputIndex += 1;\n  }\n\n  return output.slice(0, outputIndex);\n}\n\nfunction parseDataUrl(stringInput) {\n  let parsedUrl;\n\n  try {\n    parsedUrl = new URL(stringInput);\n  } catch (error) {\n    return null;\n  }\n\n  if (parsedUrl.protocol !== \"data:\") {\n    return null;\n  }\n\n  parsedUrl.hash = \"\"; // `5` is value of `'data:'.length`\n\n  const input = parsedUrl.toString().substring(5);\n  let position = 0;\n  let mediaType = \"\";\n\n  while (position < input.length && input[position] !== \",\") {\n    mediaType += input[position];\n    position += 1;\n  }\n\n  mediaType = mediaType.replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n\n  if (position === input.length) {\n    return null;\n  }\n\n  position += 1;\n  const encodedBody = input.substring(position);\n  let body = Buffer.from(percentDecodeBytes(Buffer.from(encodedBody, \"utf-8\"))); // Can't use /i regexp flag because it isn't restricted to ASCII.\n\n  const mimeTypeBase64MatchResult = /(.*); *[Bb][Aa][Ss][Ee]64$/.exec(mediaType);\n\n  if (mimeTypeBase64MatchResult) {\n    const stringBody = body.toString(\"binary\");\n    const asString = (0, _abab.atob)(stringBody);\n\n    if (asString === null) {\n      return null;\n    }\n\n    body = Buffer.from(asString, \"binary\");\n    [, mediaType] = mimeTypeBase64MatchResult;\n  }\n\n  if (mediaType.startsWith(\";\")) {\n    mediaType = `text/plain ${mediaType}`;\n  }\n\n  const result = {\n    // eslint-disable-next-line no-undefined\n    type: undefined,\n    // eslint-disable-next-line no-undefined\n    subtype: undefined,\n    parameters: new Map(),\n    isBase64: Boolean(mimeTypeBase64MatchResult),\n    body\n  };\n\n  if (!mediaType) {\n    return result;\n  }\n\n  const inputMediaType = removeLeadingAndTrailingHTTPWhitespace(mediaType);\n  let positionMediaType = 0;\n  let type = \"\";\n\n  while (positionMediaType < inputMediaType.length && inputMediaType[positionMediaType] !== \"/\") {\n    type += inputMediaType[positionMediaType];\n    positionMediaType += 1;\n  }\n\n  if (type.length === 0 || !solelyContainsHTTPTokenCodePoints(type)) {\n    return result;\n  }\n\n  if (positionMediaType >= inputMediaType.length) {\n    return result;\n  } // Skips past \"/\"\n\n\n  positionMediaType += 1;\n  let subtype = \"\";\n\n  while (positionMediaType < inputMediaType.length && inputMediaType[positionMediaType] !== \";\") {\n    subtype += inputMediaType[positionMediaType];\n    positionMediaType += 1;\n  }\n\n  subtype = removeTrailingHTTPWhitespace(subtype);\n\n  if (subtype.length === 0 || !solelyContainsHTTPTokenCodePoints(subtype)) {\n    return result;\n  }\n\n  result.type = asciiLowercase(type);\n  result.subtype = asciiLowercase(subtype);\n\n  while (positionMediaType < inputMediaType.length) {\n    // Skip past \";\"\n    positionMediaType += 1;\n\n    while (isHTTPWhitespaceChar(inputMediaType[positionMediaType])) {\n      positionMediaType += 1;\n    }\n\n    let parameterName = \"\";\n\n    while (positionMediaType < inputMediaType.length && inputMediaType[positionMediaType] !== \";\" && inputMediaType[positionMediaType] !== \"=\") {\n      parameterName += inputMediaType[positionMediaType];\n      positionMediaType += 1;\n    }\n\n    parameterName = asciiLowercase(parameterName);\n\n    if (positionMediaType < inputMediaType.length) {\n      if (inputMediaType[positionMediaType] === \";\") {\n        // eslint-disable-next-line no-continue\n        continue;\n      } // Skip past \"=\"\n\n\n      positionMediaType += 1;\n    }\n\n    let parameterValue = \"\";\n\n    if (inputMediaType[positionMediaType] === '\"') {\n      [parameterValue, positionMediaType] = collectAnHTTPQuotedString(inputMediaType, positionMediaType);\n\n      while (positionMediaType < inputMediaType.length && inputMediaType[positionMediaType] !== \";\") {\n        positionMediaType += 1;\n      }\n    } else {\n      while (positionMediaType < inputMediaType.length && inputMediaType[positionMediaType] !== \";\") {\n        parameterValue += inputMediaType[positionMediaType];\n        positionMediaType += 1;\n      }\n\n      parameterValue = removeTrailingHTTPWhitespace(parameterValue);\n\n      if (parameterValue === \"\") {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n    }\n\n    if (parameterName.length > 0 && solelyContainsHTTPTokenCodePoints(parameterName) && soleyContainsHTTPQuotedStringTokenCodePoints(parameterValue) && !result.parameters.has(parameterName)) {\n      result.parameters.set(parameterName, parameterValue);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","parseDataUrl","_abab","require","removeLeadingAndTrailingHTTPWhitespace","string","replace","removeTrailingHTTPWhitespace","isHTTPWhitespaceChar","char","solelyContainsHTTPTokenCodePoints","test","soleyContainsHTTPQuotedStringTokenCodePoints","asciiLowercase","l","toLowerCase","collectAnHTTPQuotedString","input","position","length","quoteOrBackslash","isASCIIHex","c","percentDecodeBytes","output","Uint8Array","byteLength","outputIndex","i","byte","parseInt","String","fromCodePoint","slice","stringInput","parsedUrl","URL","error","protocol","hash","toString","substring","mediaType","encodedBody","body","Buffer","from","mimeTypeBase64MatchResult","exec","stringBody","asString","atob","startsWith","result","type","undefined","subtype","parameters","Map","isBase64","Boolean","inputMediaType","positionMediaType","parameterName","parameterValue","has","set"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/source-map-loader/dist/parse-data-url.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseDataUrl;\n\nvar _abab = require(\"abab\");\n\nconst removeLeadingAndTrailingHTTPWhitespace = string => string.replace(/^[ \\t\\n\\r]+/, \"\").replace(/[ \\t\\n\\r]+$/, \"\");\n\nconst removeTrailingHTTPWhitespace = string => string.replace(/[ \\t\\n\\r]+$/, \"\");\n\nconst isHTTPWhitespaceChar = char => char === \" \" || char === \"\\t\" || char === \"\\n\" || char === \"\\r\";\n\nconst solelyContainsHTTPTokenCodePoints = string => /^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/.test(string);\n\nconst soleyContainsHTTPQuotedStringTokenCodePoints = string => /^[\\t\\u0020-\\u007E\\u0080-\\u00FF]*$/.test(string);\n\nconst asciiLowercase = string => string.replace(/[A-Z]/g, l => l.toLowerCase());\n\nconst collectAnHTTPQuotedString = (input, position) => {\n  let value = \"\"; // eslint-disable-next-line no-param-reassign\n\n  position += 1; // eslint-disable-next-line no-constant-condition\n\n  while (true) {\n    while (position < input.length && input[position] !== '\"' && input[position] !== \"\\\\\") {\n      value += input[position]; // eslint-disable-next-line no-param-reassign\n\n      position += 1;\n    }\n\n    if (position >= input.length) {\n      break;\n    }\n\n    const quoteOrBackslash = input[position]; // eslint-disable-next-line no-param-reassign\n\n    position += 1;\n\n    if (quoteOrBackslash === \"\\\\\") {\n      if (position >= input.length) {\n        value += \"\\\\\";\n        break;\n      }\n\n      value += input[position]; // eslint-disable-next-line no-param-reassign\n\n      position += 1;\n    } else {\n      break;\n    }\n  }\n\n  return [value, position];\n};\n\nfunction isASCIIHex(c) {\n  return c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x46 || c >= 0x61 && c <= 0x66;\n}\n\nfunction percentDecodeBytes(input) {\n  const output = new Uint8Array(input.byteLength);\n  let outputIndex = 0;\n\n  for (let i = 0; i < input.byteLength; ++i) {\n    const byte = input[i];\n\n    if (byte !== 0x25) {\n      output[outputIndex] = byte;\n    } else if (byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {\n      output[outputIndex] = byte;\n    } else {\n      output[outputIndex] = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);\n      i += 2;\n    }\n\n    outputIndex += 1;\n  }\n\n  return output.slice(0, outputIndex);\n}\n\nfunction parseDataUrl(stringInput) {\n  let parsedUrl;\n\n  try {\n    parsedUrl = new URL(stringInput);\n  } catch (error) {\n    return null;\n  }\n\n  if (parsedUrl.protocol !== \"data:\") {\n    return null;\n  }\n\n  parsedUrl.hash = \"\"; // `5` is value of `'data:'.length`\n\n  const input = parsedUrl.toString().substring(5);\n  let position = 0;\n  let mediaType = \"\";\n\n  while (position < input.length && input[position] !== \",\") {\n    mediaType += input[position];\n    position += 1;\n  }\n\n  mediaType = mediaType.replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n\n  if (position === input.length) {\n    return null;\n  }\n\n  position += 1;\n  const encodedBody = input.substring(position);\n  let body = Buffer.from(percentDecodeBytes(Buffer.from(encodedBody, \"utf-8\"))); // Can't use /i regexp flag because it isn't restricted to ASCII.\n\n  const mimeTypeBase64MatchResult = /(.*); *[Bb][Aa][Ss][Ee]64$/.exec(mediaType);\n\n  if (mimeTypeBase64MatchResult) {\n    const stringBody = body.toString(\"binary\");\n    const asString = (0, _abab.atob)(stringBody);\n\n    if (asString === null) {\n      return null;\n    }\n\n    body = Buffer.from(asString, \"binary\");\n    [, mediaType] = mimeTypeBase64MatchResult;\n  }\n\n  if (mediaType.startsWith(\";\")) {\n    mediaType = `text/plain ${mediaType}`;\n  }\n\n  const result = {\n    // eslint-disable-next-line no-undefined\n    type: undefined,\n    // eslint-disable-next-line no-undefined\n    subtype: undefined,\n    parameters: new Map(),\n    isBase64: Boolean(mimeTypeBase64MatchResult),\n    body\n  };\n\n  if (!mediaType) {\n    return result;\n  }\n\n  const inputMediaType = removeLeadingAndTrailingHTTPWhitespace(mediaType);\n  let positionMediaType = 0;\n  let type = \"\";\n\n  while (positionMediaType < inputMediaType.length && inputMediaType[positionMediaType] !== \"/\") {\n    type += inputMediaType[positionMediaType];\n    positionMediaType += 1;\n  }\n\n  if (type.length === 0 || !solelyContainsHTTPTokenCodePoints(type)) {\n    return result;\n  }\n\n  if (positionMediaType >= inputMediaType.length) {\n    return result;\n  } // Skips past \"/\"\n\n\n  positionMediaType += 1;\n  let subtype = \"\";\n\n  while (positionMediaType < inputMediaType.length && inputMediaType[positionMediaType] !== \";\") {\n    subtype += inputMediaType[positionMediaType];\n    positionMediaType += 1;\n  }\n\n  subtype = removeTrailingHTTPWhitespace(subtype);\n\n  if (subtype.length === 0 || !solelyContainsHTTPTokenCodePoints(subtype)) {\n    return result;\n  }\n\n  result.type = asciiLowercase(type);\n  result.subtype = asciiLowercase(subtype);\n\n  while (positionMediaType < inputMediaType.length) {\n    // Skip past \";\"\n    positionMediaType += 1;\n\n    while (isHTTPWhitespaceChar(inputMediaType[positionMediaType])) {\n      positionMediaType += 1;\n    }\n\n    let parameterName = \"\";\n\n    while (positionMediaType < inputMediaType.length && inputMediaType[positionMediaType] !== \";\" && inputMediaType[positionMediaType] !== \"=\") {\n      parameterName += inputMediaType[positionMediaType];\n      positionMediaType += 1;\n    }\n\n    parameterName = asciiLowercase(parameterName);\n\n    if (positionMediaType < inputMediaType.length) {\n      if (inputMediaType[positionMediaType] === \";\") {\n        // eslint-disable-next-line no-continue\n        continue;\n      } // Skip past \"=\"\n\n\n      positionMediaType += 1;\n    }\n\n    let parameterValue = \"\";\n\n    if (inputMediaType[positionMediaType] === '\"') {\n      [parameterValue, positionMediaType] = collectAnHTTPQuotedString(inputMediaType, positionMediaType);\n\n      while (positionMediaType < inputMediaType.length && inputMediaType[positionMediaType] !== \";\") {\n        positionMediaType += 1;\n      }\n    } else {\n      while (positionMediaType < inputMediaType.length && inputMediaType[positionMediaType] !== \";\") {\n        parameterValue += inputMediaType[positionMediaType];\n        positionMediaType += 1;\n      }\n\n      parameterValue = removeTrailingHTTPWhitespace(parameterValue);\n\n      if (parameterValue === \"\") {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n    }\n\n    if (parameterName.length > 0 && solelyContainsHTTPTokenCodePoints(parameterName) && soleyContainsHTTPQuotedStringTokenCodePoints(parameterValue) && !result.parameters.has(parameterName)) {\n      result.parameters.set(parameterName, parameterValue);\n    }\n  }\n\n  return result;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}