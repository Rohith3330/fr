{"ast":null,"code":"// @remove-on-eject-begin\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\n\nconst evalSourceMapMiddleware = require('react-dev-utils/evalSourceMapMiddleware');\n\nconst noopServiceWorkerMiddleware = require('react-dev-utils/noopServiceWorkerMiddleware');\n\nconst ignoredFiles = require('react-dev-utils/ignoredFiles');\n\nconst redirectServedPath = require('react-dev-utils/redirectServedPathMiddleware');\n\nconst paths = require('./paths');\n\nconst getHttpsConfig = require('./getHttpsConfig');\n\nconst host = process.env.HOST || '0.0.0.0';\nconst sockHost = process.env.WDS_SOCKET_HOST;\nconst sockPath = process.env.WDS_SOCKET_PATH; // default: '/ws'\n\nconst sockPort = process.env.WDS_SOCKET_PORT;\n\nmodule.exports = function (proxy, allowedHost) {\n  const disableFirewall = !proxy || process.env.DANGEROUSLY_DISABLE_HOST_CHECK === 'true';\n  return {\n    // WebpackDevServer 2.4.3 introduced a security fix that prevents remote\n    // websites from potentially accessing local content through DNS rebinding:\n    // https://github.com/webpack/webpack-dev-server/issues/887\n    // https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\n    // However, it made several existing use cases such as development in cloud\n    // environment or subdomains in development significantly more complicated:\n    // https://github.com/facebook/create-react-app/issues/2271\n    // https://github.com/facebook/create-react-app/issues/2233\n    // While we're investigating better solutions, for now we will take a\n    // compromise. Since our WDS configuration only serves files in the `public`\n    // folder we won't consider accessing them a vulnerability. However, if you\n    // use the `proxy` feature, it gets more dangerous because it can expose\n    // remote code execution vulnerabilities in backends like Django and Rails.\n    // So we will disable the host check normally, but enable it if you have\n    // specified the `proxy` setting. Finally, we let you override it if you\n    // really know what you're doing with a special environment variable.\n    // Note: [\"localhost\", \".localhost\"] will support subdomains - but we might\n    // want to allow setting the allowedHosts manually for more complex setups\n    allowedHosts: disableFirewall ? 'all' : [allowedHost],\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': '*',\n      'Access-Control-Allow-Headers': '*'\n    },\n    // Enable gzip compression of generated files.\n    compress: true,\n    static: {\n      // By default WebpackDevServer serves physical files from current directory\n      // in addition to all the virtual build products that it serves from memory.\n      // This is confusing because those files wonâ€™t automatically be available in\n      // production build folder unless we copy them. However, copying the whole\n      // project directory is dangerous because we may expose sensitive files.\n      // Instead, we establish a convention that only files in `public` directory\n      // get served. Our build script will copy `public` into the `build` folder.\n      // In `index.html`, you can get URL of `public` folder with %PUBLIC_URL%:\n      // <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n      // In JavaScript code, you can access it with `process.env.PUBLIC_URL`.\n      // Note that we only recommend to use `public` folder as an escape hatch\n      // for files like `favicon.ico`, `manifest.json`, and libraries that are\n      // for some reason broken when imported through webpack. If you just want to\n      // use an image, put it in `src` and `import` it from JavaScript instead.\n      directory: paths.appPublic,\n      publicPath: [paths.publicUrlOrPath],\n      // By default files from `contentBase` will not trigger a page reload.\n      watch: {\n        // Reportedly, this avoids CPU overload on some systems.\n        // https://github.com/facebook/create-react-app/issues/293\n        // src/node_modules is not ignored to support absolute imports\n        // https://github.com/facebook/create-react-app/issues/1065\n        ignored: ignoredFiles(paths.appSrc)\n      }\n    },\n    client: {\n      webSocketURL: {\n        // Enable custom sockjs pathname for websocket connection to hot reloading server.\n        // Enable custom sockjs hostname, pathname and port for websocket connection\n        // to hot reloading server.\n        hostname: sockHost,\n        pathname: sockPath,\n        port: sockPort\n      },\n      overlay: {\n        errors: true,\n        warnings: false\n      }\n    },\n    devMiddleware: {\n      // It is important to tell WebpackDevServer to use the same \"publicPath\" path as\n      // we specified in the webpack config. When homepage is '.', default to serving\n      // from the root.\n      // remove last slash so user can land on `/test` instead of `/test/`\n      publicPath: paths.publicUrlOrPath.slice(0, -1)\n    },\n    https: getHttpsConfig(),\n    host,\n    historyApiFallback: {\n      // Paths with dots should still use the history fallback.\n      // See https://github.com/facebook/create-react-app/issues/387.\n      disableDotRule: true,\n      index: paths.publicUrlOrPath\n    },\n    // `proxy` is run between `before` and `after` `webpack-dev-server` hooks\n    proxy,\n\n    onBeforeSetupMiddleware(devServer) {\n      // Keep `evalSourceMapMiddleware`\n      // middlewares before `redirectServedPath` otherwise will not have any effect\n      // This lets us fetch source contents from webpack for the error overlay\n      devServer.app.use(evalSourceMapMiddleware(devServer));\n\n      if (fs.existsSync(paths.proxySetup)) {\n        // This registers user provided middleware for proxy reasons\n        require(paths.proxySetup)(devServer.app);\n      }\n    },\n\n    onAfterSetupMiddleware(devServer) {\n      // Redirect to `PUBLIC_URL` or `homepage` from `package.json` if url not match\n      devServer.app.use(redirectServedPath(paths.publicUrlOrPath)); // This service worker file is effectively a 'no-op' that will reset any\n      // previous service worker registered for the same host:port combination.\n      // We do this in development to avoid hitting the production cache if\n      // it used the same host and port.\n      // https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432\n\n      devServer.app.use(noopServiceWorkerMiddleware(paths.publicUrlOrPath));\n    }\n\n  };\n};","map":{"version":3,"names":["fs","require","evalSourceMapMiddleware","noopServiceWorkerMiddleware","ignoredFiles","redirectServedPath","paths","getHttpsConfig","host","process","env","HOST","sockHost","WDS_SOCKET_HOST","sockPath","WDS_SOCKET_PATH","sockPort","WDS_SOCKET_PORT","module","exports","proxy","allowedHost","disableFirewall","DANGEROUSLY_DISABLE_HOST_CHECK","allowedHosts","headers","compress","static","directory","appPublic","publicPath","publicUrlOrPath","watch","ignored","appSrc","client","webSocketURL","hostname","pathname","port","overlay","errors","warnings","devMiddleware","slice","https","historyApiFallback","disableDotRule","index","onBeforeSetupMiddleware","devServer","app","use","existsSync","proxySetup","onAfterSetupMiddleware"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/react-scripts/config/webpackDevServer.config.js"],"sourcesContent":["// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\nconst evalSourceMapMiddleware = require('react-dev-utils/evalSourceMapMiddleware');\nconst noopServiceWorkerMiddleware = require('react-dev-utils/noopServiceWorkerMiddleware');\nconst ignoredFiles = require('react-dev-utils/ignoredFiles');\nconst redirectServedPath = require('react-dev-utils/redirectServedPathMiddleware');\nconst paths = require('./paths');\nconst getHttpsConfig = require('./getHttpsConfig');\n\nconst host = process.env.HOST || '0.0.0.0';\nconst sockHost = process.env.WDS_SOCKET_HOST;\nconst sockPath = process.env.WDS_SOCKET_PATH; // default: '/ws'\nconst sockPort = process.env.WDS_SOCKET_PORT;\n\nmodule.exports = function (proxy, allowedHost) {\n  const disableFirewall =\n    !proxy || process.env.DANGEROUSLY_DISABLE_HOST_CHECK === 'true';\n  return {\n    // WebpackDevServer 2.4.3 introduced a security fix that prevents remote\n    // websites from potentially accessing local content through DNS rebinding:\n    // https://github.com/webpack/webpack-dev-server/issues/887\n    // https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\n    // However, it made several existing use cases such as development in cloud\n    // environment or subdomains in development significantly more complicated:\n    // https://github.com/facebook/create-react-app/issues/2271\n    // https://github.com/facebook/create-react-app/issues/2233\n    // While we're investigating better solutions, for now we will take a\n    // compromise. Since our WDS configuration only serves files in the `public`\n    // folder we won't consider accessing them a vulnerability. However, if you\n    // use the `proxy` feature, it gets more dangerous because it can expose\n    // remote code execution vulnerabilities in backends like Django and Rails.\n    // So we will disable the host check normally, but enable it if you have\n    // specified the `proxy` setting. Finally, we let you override it if you\n    // really know what you're doing with a special environment variable.\n    // Note: [\"localhost\", \".localhost\"] will support subdomains - but we might\n    // want to allow setting the allowedHosts manually for more complex setups\n    allowedHosts: disableFirewall ? 'all' : [allowedHost],\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': '*',\n      'Access-Control-Allow-Headers': '*',\n    },\n    // Enable gzip compression of generated files.\n    compress: true,\n    static: {\n      // By default WebpackDevServer serves physical files from current directory\n      // in addition to all the virtual build products that it serves from memory.\n      // This is confusing because those files wonâ€™t automatically be available in\n      // production build folder unless we copy them. However, copying the whole\n      // project directory is dangerous because we may expose sensitive files.\n      // Instead, we establish a convention that only files in `public` directory\n      // get served. Our build script will copy `public` into the `build` folder.\n      // In `index.html`, you can get URL of `public` folder with %PUBLIC_URL%:\n      // <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n      // In JavaScript code, you can access it with `process.env.PUBLIC_URL`.\n      // Note that we only recommend to use `public` folder as an escape hatch\n      // for files like `favicon.ico`, `manifest.json`, and libraries that are\n      // for some reason broken when imported through webpack. If you just want to\n      // use an image, put it in `src` and `import` it from JavaScript instead.\n      directory: paths.appPublic,\n      publicPath: [paths.publicUrlOrPath],\n      // By default files from `contentBase` will not trigger a page reload.\n      watch: {\n        // Reportedly, this avoids CPU overload on some systems.\n        // https://github.com/facebook/create-react-app/issues/293\n        // src/node_modules is not ignored to support absolute imports\n        // https://github.com/facebook/create-react-app/issues/1065\n        ignored: ignoredFiles(paths.appSrc),\n      },\n    },\n    client: {\n      webSocketURL: {\n        // Enable custom sockjs pathname for websocket connection to hot reloading server.\n        // Enable custom sockjs hostname, pathname and port for websocket connection\n        // to hot reloading server.\n        hostname: sockHost,\n        pathname: sockPath,\n        port: sockPort,\n      },\n      overlay: {\n        errors: true,\n        warnings: false,\n      },\n    },\n    devMiddleware: {\n      // It is important to tell WebpackDevServer to use the same \"publicPath\" path as\n      // we specified in the webpack config. When homepage is '.', default to serving\n      // from the root.\n      // remove last slash so user can land on `/test` instead of `/test/`\n      publicPath: paths.publicUrlOrPath.slice(0, -1),\n    },\n\n    https: getHttpsConfig(),\n    host,\n    historyApiFallback: {\n      // Paths with dots should still use the history fallback.\n      // See https://github.com/facebook/create-react-app/issues/387.\n      disableDotRule: true,\n      index: paths.publicUrlOrPath,\n    },\n    // `proxy` is run between `before` and `after` `webpack-dev-server` hooks\n    proxy,\n    onBeforeSetupMiddleware(devServer) {\n      // Keep `evalSourceMapMiddleware`\n      // middlewares before `redirectServedPath` otherwise will not have any effect\n      // This lets us fetch source contents from webpack for the error overlay\n      devServer.app.use(evalSourceMapMiddleware(devServer));\n\n      if (fs.existsSync(paths.proxySetup)) {\n        // This registers user provided middleware for proxy reasons\n        require(paths.proxySetup)(devServer.app);\n      }\n    },\n    onAfterSetupMiddleware(devServer) {\n      // Redirect to `PUBLIC_URL` or `homepage` from `package.json` if url not match\n      devServer.app.use(redirectServedPath(paths.publicUrlOrPath));\n\n      // This service worker file is effectively a 'no-op' that will reset any\n      // previous service worker registered for the same host:port combination.\n      // We do this in development to avoid hitting the production cache if\n      // it used the same host and port.\n      // https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432\n      devServer.app.use(noopServiceWorkerMiddleware(paths.publicUrlOrPath));\n    },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}