{"ast":null,"code":"'use strict';\n\nconst {\n  visit\n} = require('../lib/xast.js');\n\nconst {\n  inheritableAttrs,\n  pathElems\n} = require('./_collections.js');\n\nexports.type = 'visitor';\nexports.name = 'moveElemsAttrsToGroup';\nexports.active = true;\nexports.description = 'Move common attributes of group children to the group';\n/**\n * Move common attributes of group children to the group\n *\n * @example\n * <g attr1=\"val1\">\n *     <g attr2=\"val2\">\n *         text\n *     </g>\n *     <circle attr2=\"val2\" attr3=\"val3\"/>\n * </g>\n *              ⬇\n * <g attr1=\"val1\" attr2=\"val2\">\n *     <g>\n *         text\n *     </g>\n *    <circle attr3=\"val3\"/>\n * </g>\n *\n * @author Kir Belevich\n *\n * @type {import('../lib/types').Plugin<void>}\n */\n\nexports.fn = root => {\n  // find if any style element is present\n  let deoptimizedWithStyles = false;\n  visit(root, {\n    element: {\n      enter: node => {\n        if (node.name === 'style') {\n          deoptimizedWithStyles = true;\n        }\n      }\n    }\n  });\n  return {\n    element: {\n      exit: node => {\n        // process only groups with more than 1 children\n        if (node.name !== 'g' || node.children.length <= 1) {\n          return;\n        } // deoptimize the plugin when style elements are present\n        // selectors may rely on id, classes or tag names\n\n\n        if (deoptimizedWithStyles) {\n          return;\n        }\n        /**\n         * find common attributes in group children\n         * @type {Map<string, string>}\n         */\n\n\n        const commonAttributes = new Map();\n        let initial = true;\n        let everyChildIsPath = true;\n\n        for (const child of node.children) {\n          if (child.type === 'element') {\n            if (pathElems.includes(child.name) === false) {\n              everyChildIsPath = false;\n            }\n\n            if (initial) {\n              initial = false; // collect all inheritable attributes from first child element\n\n              for (const [name, value] of Object.entries(child.attributes)) {\n                // consider only inheritable attributes\n                if (inheritableAttrs.includes(name)) {\n                  commonAttributes.set(name, value);\n                }\n              }\n            } else {\n              // exclude uncommon attributes from initial list\n              for (const [name, value] of commonAttributes) {\n                if (child.attributes[name] !== value) {\n                  commonAttributes.delete(name);\n                }\n              }\n            }\n          }\n        } // preserve transform on children when group has clip-path or mask\n\n\n        if (node.attributes['clip-path'] != null || node.attributes.mask != null) {\n          commonAttributes.delete('transform');\n        } // preserve transform when all children are paths\n        // so the transform could be applied to path data by other plugins\n\n\n        if (everyChildIsPath) {\n          commonAttributes.delete('transform');\n        } // add common children attributes to group\n\n\n        for (const [name, value] of commonAttributes) {\n          if (name === 'transform') {\n            if (node.attributes.transform != null) {\n              node.attributes.transform = `${node.attributes.transform} ${value}`;\n            } else {\n              node.attributes.transform = value;\n            }\n          } else {\n            node.attributes[name] = value;\n          }\n        } // delete common attributes from children\n\n\n        for (const child of node.children) {\n          if (child.type === 'element') {\n            for (const [name] of commonAttributes) {\n              delete child.attributes[name];\n            }\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["visit","require","inheritableAttrs","pathElems","exports","type","name","active","description","fn","root","deoptimizedWithStyles","element","enter","node","exit","children","length","commonAttributes","Map","initial","everyChildIsPath","child","includes","value","Object","entries","attributes","set","delete","mask","transform"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-svgo/node_modules/svgo/plugins/moveElemsAttrsToGroup.js"],"sourcesContent":["'use strict';\n\nconst { visit } = require('../lib/xast.js');\nconst { inheritableAttrs, pathElems } = require('./_collections.js');\n\nexports.type = 'visitor';\nexports.name = 'moveElemsAttrsToGroup';\nexports.active = true;\nexports.description = 'Move common attributes of group children to the group';\n\n/**\n * Move common attributes of group children to the group\n *\n * @example\n * <g attr1=\"val1\">\n *     <g attr2=\"val2\">\n *         text\n *     </g>\n *     <circle attr2=\"val2\" attr3=\"val3\"/>\n * </g>\n *              ⬇\n * <g attr1=\"val1\" attr2=\"val2\">\n *     <g>\n *         text\n *     </g>\n *    <circle attr3=\"val3\"/>\n * </g>\n *\n * @author Kir Belevich\n *\n * @type {import('../lib/types').Plugin<void>}\n */\nexports.fn = (root) => {\n  // find if any style element is present\n  let deoptimizedWithStyles = false;\n  visit(root, {\n    element: {\n      enter: (node) => {\n        if (node.name === 'style') {\n          deoptimizedWithStyles = true;\n        }\n      },\n    },\n  });\n\n  return {\n    element: {\n      exit: (node) => {\n        // process only groups with more than 1 children\n        if (node.name !== 'g' || node.children.length <= 1) {\n          return;\n        }\n\n        // deoptimize the plugin when style elements are present\n        // selectors may rely on id, classes or tag names\n        if (deoptimizedWithStyles) {\n          return;\n        }\n\n        /**\n         * find common attributes in group children\n         * @type {Map<string, string>}\n         */\n        const commonAttributes = new Map();\n        let initial = true;\n        let everyChildIsPath = true;\n        for (const child of node.children) {\n          if (child.type === 'element') {\n            if (pathElems.includes(child.name) === false) {\n              everyChildIsPath = false;\n            }\n            if (initial) {\n              initial = false;\n              // collect all inheritable attributes from first child element\n              for (const [name, value] of Object.entries(child.attributes)) {\n                // consider only inheritable attributes\n                if (inheritableAttrs.includes(name)) {\n                  commonAttributes.set(name, value);\n                }\n              }\n            } else {\n              // exclude uncommon attributes from initial list\n              for (const [name, value] of commonAttributes) {\n                if (child.attributes[name] !== value) {\n                  commonAttributes.delete(name);\n                }\n              }\n            }\n          }\n        }\n\n        // preserve transform on children when group has clip-path or mask\n        if (\n          node.attributes['clip-path'] != null ||\n          node.attributes.mask != null\n        ) {\n          commonAttributes.delete('transform');\n        }\n\n        // preserve transform when all children are paths\n        // so the transform could be applied to path data by other plugins\n        if (everyChildIsPath) {\n          commonAttributes.delete('transform');\n        }\n\n        // add common children attributes to group\n        for (const [name, value] of commonAttributes) {\n          if (name === 'transform') {\n            if (node.attributes.transform != null) {\n              node.attributes.transform = `${node.attributes.transform} ${value}`;\n            } else {\n              node.attributes.transform = value;\n            }\n          } else {\n            node.attributes[name] = value;\n          }\n        }\n\n        // delete common attributes from children\n        for (const child of node.children) {\n          if (child.type === 'element') {\n            for (const [name] of commonAttributes) {\n              delete child.attributes[name];\n            }\n          }\n        }\n      },\n    },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}