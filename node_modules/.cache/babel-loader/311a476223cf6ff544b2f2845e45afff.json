{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst findNodeObject = node => {\n  if ('object' in node) {\n    return node.object;\n  }\n\n  if (node.callee.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression) {\n    return node.callee.object;\n  }\n\n  return null;\n};\n\nconst getJestFnCall = node => {\n  if (node.type !== _experimentalUtils.AST_NODE_TYPES.CallExpression && node.type !== _experimentalUtils.AST_NODE_TYPES.MemberExpression) {\n    return null;\n  }\n\n  const obj = findNodeObject(node);\n\n  if (!obj) {\n    return null;\n  }\n\n  if (obj.type === _experimentalUtils.AST_NODE_TYPES.Identifier) {\n    return node.type === _experimentalUtils.AST_NODE_TYPES.CallExpression && (0, _utils.getNodeName)(node.callee) === 'jest.fn' ? node : null;\n  }\n\n  return getJestFnCall(obj);\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Suggest using `jest.spyOn()`',\n      recommended: false\n    },\n    messages: {\n      useJestSpyOn: 'Use jest.spyOn() instead.'\n    },\n    fixable: 'code',\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      AssignmentExpression(node) {\n        const {\n          left,\n          right\n        } = node;\n        if (left.type !== _experimentalUtils.AST_NODE_TYPES.MemberExpression) return;\n        const jestFnCall = getJestFnCall(right);\n        if (!jestFnCall) return;\n        context.report({\n          node,\n          messageId: 'useJestSpyOn',\n\n          fix(fixer) {\n            const leftPropQuote = left.property.type === _experimentalUtils.AST_NODE_TYPES.Identifier ? \"'\" : '';\n            const [arg] = jestFnCall.arguments;\n            const argSource = arg && context.getSourceCode().getText(arg);\n            const mockImplementation = argSource ? `.mockImplementation(${argSource})` : '.mockImplementation()';\n            return [fixer.insertTextBefore(left, `jest.spyOn(`), fixer.replaceTextRange([left.object.range[1], left.property.range[0]], `, ${leftPropQuote}`), fixer.replaceTextRange([left.property.range[1], jestFnCall.range[1]], `${leftPropQuote})${mockImplementation}`)];\n          }\n\n        });\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","findNodeObject","node","object","callee","type","AST_NODE_TYPES","MemberExpression","getJestFnCall","CallExpression","obj","Identifier","getNodeName","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","useJestSpyOn","fixable","schema","defaultOptions","create","context","AssignmentExpression","left","right","jestFnCall","report","messageId","fix","fixer","leftPropQuote","property","arg","arguments","argSource","getSourceCode","getText","mockImplementation","insertTextBefore","replaceTextRange","range"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/prefer-spy-on.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst findNodeObject = node => {\n  if ('object' in node) {\n    return node.object;\n  }\n\n  if (node.callee.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression) {\n    return node.callee.object;\n  }\n\n  return null;\n};\n\nconst getJestFnCall = node => {\n  if (node.type !== _experimentalUtils.AST_NODE_TYPES.CallExpression && node.type !== _experimentalUtils.AST_NODE_TYPES.MemberExpression) {\n    return null;\n  }\n\n  const obj = findNodeObject(node);\n\n  if (!obj) {\n    return null;\n  }\n\n  if (obj.type === _experimentalUtils.AST_NODE_TYPES.Identifier) {\n    return node.type === _experimentalUtils.AST_NODE_TYPES.CallExpression && (0, _utils.getNodeName)(node.callee) === 'jest.fn' ? node : null;\n  }\n\n  return getJestFnCall(obj);\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Suggest using `jest.spyOn()`',\n      recommended: false\n    },\n    messages: {\n      useJestSpyOn: 'Use jest.spyOn() instead.'\n    },\n    fixable: 'code',\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      AssignmentExpression(node) {\n        const {\n          left,\n          right\n        } = node;\n        if (left.type !== _experimentalUtils.AST_NODE_TYPES.MemberExpression) return;\n        const jestFnCall = getJestFnCall(right);\n        if (!jestFnCall) return;\n        context.report({\n          node,\n          messageId: 'useJestSpyOn',\n\n          fix(fixer) {\n            const leftPropQuote = left.property.type === _experimentalUtils.AST_NODE_TYPES.Identifier ? \"'\" : '';\n            const [arg] = jestFnCall.arguments;\n            const argSource = arg && context.getSourceCode().getText(arg);\n            const mockImplementation = argSource ? `.mockImplementation(${argSource})` : '.mockImplementation()';\n            return [fixer.insertTextBefore(left, `jest.spyOn(`), fixer.replaceTextRange([left.object.range[1], left.property.range[0]], `, ${leftPropQuote}`), fixer.replaceTextRange([left.property.range[1], jestFnCall.range[1]], `${leftPropQuote})${mockImplementation}`)];\n          }\n\n        });\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}