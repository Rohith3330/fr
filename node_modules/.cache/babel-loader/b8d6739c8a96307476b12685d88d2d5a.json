{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow disabled tests',\n      recommended: 'warn'\n    },\n    messages: {\n      missingFunction: 'Test is missing function argument',\n      skippedTestSuite: 'Skipped test suite',\n      skippedTest: 'Skipped test',\n      pending: 'Call to pending()',\n      pendingSuite: 'Call to pending() within test suite',\n      pendingTest: 'Call to pending() within test',\n      disabledSuite: 'Disabled test suite',\n      disabledTest: 'Disabled test'\n    },\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    let suiteDepth = 0;\n    let testDepth = 0;\n    return {\n      'CallExpression[callee.name=\"describe\"]'() {\n        suiteDepth++;\n      },\n\n      'CallExpression[callee.name=/^(it|test)$/]'() {\n        testDepth++;\n      },\n\n      'CallExpression[callee.name=/^(it|test)$/][arguments.length<2]'(node) {\n        context.report({\n          messageId: 'missingFunction',\n          node\n        });\n      },\n\n      CallExpression(node) {\n        const functionName = (0, _utils.getNodeName)(node.callee); // prevent duplicate warnings for it.each()()\n\n        if (node.callee.type === 'CallExpression') {\n          return;\n        }\n\n        switch (functionName) {\n          case 'describe.skip.each':\n          case 'xdescribe.each':\n          case 'describe.skip':\n            context.report({\n              messageId: 'skippedTestSuite',\n              node\n            });\n            break;\n\n          case 'it.skip':\n          case 'it.concurrent.skip':\n          case 'test.skip':\n          case 'test.concurrent.skip':\n          case 'it.skip.each':\n          case 'test.skip.each':\n          case 'xit.each':\n          case 'xtest.each':\n            context.report({\n              messageId: 'skippedTest',\n              node\n            });\n            break;\n        }\n      },\n\n      'CallExpression[callee.name=\"pending\"]'(node) {\n        if ((0, _utils.scopeHasLocalReference)(context.getScope(), 'pending')) {\n          return;\n        }\n\n        if (testDepth > 0) {\n          context.report({\n            messageId: 'pendingTest',\n            node\n          });\n        } else if (suiteDepth > 0) {\n          context.report({\n            messageId: 'pendingSuite',\n            node\n          });\n        } else {\n          context.report({\n            messageId: 'pending',\n            node\n          });\n        }\n      },\n\n      'CallExpression[callee.name=\"xdescribe\"]'(node) {\n        context.report({\n          messageId: 'disabledSuite',\n          node\n        });\n      },\n\n      'CallExpression[callee.name=/^(xit|xtest)$/]'(node) {\n        context.report({\n          messageId: 'disabledTest',\n          node\n        });\n      },\n\n      'CallExpression[callee.name=\"describe\"]:exit'() {\n        suiteDepth--;\n      },\n\n      'CallExpression[callee.name=/^(it|test)$/]:exit'() {\n        testDepth--;\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utils","require","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","missingFunction","skippedTestSuite","skippedTest","pending","pendingSuite","pendingTest","disabledSuite","disabledTest","schema","type","defaultOptions","create","context","suiteDepth","testDepth","node","report","messageId","CallExpression","functionName","getNodeName","callee","scopeHasLocalReference","getScope"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-disabled-tests.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow disabled tests',\n      recommended: 'warn'\n    },\n    messages: {\n      missingFunction: 'Test is missing function argument',\n      skippedTestSuite: 'Skipped test suite',\n      skippedTest: 'Skipped test',\n      pending: 'Call to pending()',\n      pendingSuite: 'Call to pending() within test suite',\n      pendingTest: 'Call to pending() within test',\n      disabledSuite: 'Disabled test suite',\n      disabledTest: 'Disabled test'\n    },\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    let suiteDepth = 0;\n    let testDepth = 0;\n    return {\n      'CallExpression[callee.name=\"describe\"]'() {\n        suiteDepth++;\n      },\n\n      'CallExpression[callee.name=/^(it|test)$/]'() {\n        testDepth++;\n      },\n\n      'CallExpression[callee.name=/^(it|test)$/][arguments.length<2]'(node) {\n        context.report({\n          messageId: 'missingFunction',\n          node\n        });\n      },\n\n      CallExpression(node) {\n        const functionName = (0, _utils.getNodeName)(node.callee); // prevent duplicate warnings for it.each()()\n\n        if (node.callee.type === 'CallExpression') {\n          return;\n        }\n\n        switch (functionName) {\n          case 'describe.skip.each':\n          case 'xdescribe.each':\n          case 'describe.skip':\n            context.report({\n              messageId: 'skippedTestSuite',\n              node\n            });\n            break;\n\n          case 'it.skip':\n          case 'it.concurrent.skip':\n          case 'test.skip':\n          case 'test.concurrent.skip':\n          case 'it.skip.each':\n          case 'test.skip.each':\n          case 'xit.each':\n          case 'xtest.each':\n            context.report({\n              messageId: 'skippedTest',\n              node\n            });\n            break;\n        }\n      },\n\n      'CallExpression[callee.name=\"pending\"]'(node) {\n        if ((0, _utils.scopeHasLocalReference)(context.getScope(), 'pending')) {\n          return;\n        }\n\n        if (testDepth > 0) {\n          context.report({\n            messageId: 'pendingTest',\n            node\n          });\n        } else if (suiteDepth > 0) {\n          context.report({\n            messageId: 'pendingSuite',\n            node\n          });\n        } else {\n          context.report({\n            messageId: 'pending',\n            node\n          });\n        }\n      },\n\n      'CallExpression[callee.name=\"xdescribe\"]'(node) {\n        context.report({\n          messageId: 'disabledSuite',\n          node\n        });\n      },\n\n      'CallExpression[callee.name=/^(xit|xtest)$/]'(node) {\n        context.report({\n          messageId: 'disabledTest',\n          node\n        });\n      },\n\n      'CallExpression[callee.name=\"describe\"]:exit'() {\n        suiteDepth--;\n      },\n\n      'CallExpression[callee.name=/^(it|test)$/]:exit'() {\n        testDepth--;\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}