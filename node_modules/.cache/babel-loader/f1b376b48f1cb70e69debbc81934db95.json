{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { Layer } from '../../engine/topology';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { greater, greaterEqual, max, min } from '@tensorflow/tfjs-core';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../../utils/types_utils';\nimport { ValueError } from '../../errors';\nimport * as K from '../../backend/tfjs_backend';\nimport * as utils from './preprocessing_utils';\nexport var CategoryEncoding = /*#__PURE__*/function (_Layer) {\n  _inherits(CategoryEncoding, _Layer);\n  function CategoryEncoding(args) {\n    var _this;\n    _classCallCheck(this, CategoryEncoding);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CategoryEncoding).call(this, args));\n    _this.numTokens = args.numTokens;\n    if (args.outputMode) {\n      _this.outputMode = args.outputMode;\n    } else {\n      _this.outputMode = 'multiHot';\n    }\n    return _this;\n  }\n  _createClass(CategoryEncoding, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        'numTokens': this.numTokens,\n        'outputMode': this.outputMode\n      };\n      var baseConfig = _get(_getPrototypeOf(CategoryEncoding.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      if (inputShape == null) {\n        return [this.numTokens];\n      }\n      if (this.outputMode === 'oneHot' && inputShape[inputShape.length - 1] !== 1) {\n        inputShape.push(this.numTokens);\n        return inputShape;\n      }\n      inputShape[inputShape.length - 1] = this.numTokens;\n      return inputShape;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n      return tidy(function () {\n        inputs = getExactlyOneTensor(inputs);\n        if (inputs.dtype !== 'int32') {\n          inputs = K.cast(inputs, 'int32');\n        }\n        var countWeights;\n        if (typeof kwargs['countWeights'] !== 'undefined') {\n          if (_this2.outputMode !== 'count') {\n            throw new ValueError(\"countWeights is not used when outputMode !== count.\\n              Received countWeights=\".concat(kwargs['countWeights']));\n          }\n          countWeights = getExactlyOneTensor(kwargs['countWeights']);\n        }\n        var maxValue = max(inputs);\n        var minValue = min(inputs);\n        var greaterEqualMax = greater(_this2.numTokens, maxValue).bufferSync().get(0);\n        var greaterMin = greaterEqual(minValue, 0).bufferSync().get(0);\n        if (!(greaterEqualMax && greaterMin)) {\n          throw new ValueError('Input values must be between 0 < values <=' + \" numTokens with numTokens=\".concat(_this2.numTokens));\n        }\n        return utils.encodeCategoricalInputs(inputs, _this2.outputMode, _this2.numTokens, countWeights);\n      });\n    }\n  }]);\n  return CategoryEncoding;\n}(Layer);\n/** @nocollapse */\nCategoryEncoding.className = 'CategoryEncoding';\nserialization.registerClass(CategoryEncoding);","map":null,"metadata":{},"sourceType":"module"}