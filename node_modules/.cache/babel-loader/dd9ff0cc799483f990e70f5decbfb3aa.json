{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RULE_NAME = void 0;\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\n\nconst node_utils_1 = require(\"../node-utils\");\n\nconst utils_2 = require(\"../utils\");\n\nexports.RULE_NAME = 'prefer-explicit-assert';\n\nconst isAtTopLevel = node => {\n  var _a, _b, _c;\n\n  return !!((_a = node.parent) === null || _a === void 0 ? void 0 : _a.parent) && node.parent.parent.type === 'ExpressionStatement' || ((_c = (_b = node.parent) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.type) === 'AwaitExpression' && !!node.parent.parent.parent && node.parent.parent.parent.type === 'ExpressionStatement';\n};\n\nconst isVariableDeclaration = node => {\n  if ((0, node_utils_1.isCallExpression)(node.parent) && utils_1.ASTUtils.isAwaitExpression(node.parent.parent) && utils_1.ASTUtils.isVariableDeclarator(node.parent.parent.parent)) {\n    return true;\n  }\n\n  if ((0, node_utils_1.isCallExpression)(node.parent) && utils_1.ASTUtils.isVariableDeclarator(node.parent.parent)) {\n    return true;\n  }\n\n  if ((0, node_utils_1.isMemberExpression)(node.parent) && (0, node_utils_1.isCallExpression)(node.parent.parent) && utils_1.ASTUtils.isAwaitExpression(node.parent.parent.parent) && utils_1.ASTUtils.isVariableDeclarator(node.parent.parent.parent.parent)) {\n    return true;\n  }\n\n  if ((0, node_utils_1.isMemberExpression)(node.parent) && (0, node_utils_1.isCallExpression)(node.parent.parent) && utils_1.ASTUtils.isVariableDeclarator(node.parent.parent.parent)) {\n    return true;\n  }\n\n  return false;\n};\n\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n  name: exports.RULE_NAME,\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Suggest using explicit assertions rather than standalone queries',\n      recommendedConfig: {\n        dom: false,\n        angular: false,\n        react: false,\n        vue: false,\n        marko: false\n      }\n    },\n    messages: {\n      preferExplicitAssert: 'Wrap stand-alone `{{queryType}}` query with `expect` function for better explicit assertion',\n      preferExplicitAssertAssertion: '`getBy*` queries must be asserted with `{{assertion}}`'\n    },\n    schema: [{\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        assertion: {\n          type: 'string',\n          enum: utils_2.PRESENCE_MATCHERS\n        },\n        includeFindQueries: {\n          type: 'boolean'\n        }\n      }\n    }]\n  },\n  defaultOptions: [{\n    includeFindQueries: true\n  }],\n\n  create(context, _ref, helpers) {\n    let [options] = _ref;\n    const {\n      assertion,\n      includeFindQueries\n    } = options;\n    const getQueryCalls = [];\n    const findQueryCalls = [];\n    return {\n      'CallExpression Identifier'(node) {\n        if (helpers.isGetQueryVariant(node)) {\n          getQueryCalls.push(node);\n        }\n\n        if (helpers.isFindQueryVariant(node)) {\n          findQueryCalls.push(node);\n        }\n      },\n\n      'Program:exit'() {\n        if (includeFindQueries) {\n          findQueryCalls.forEach(queryCall => {\n            const memberExpression = (0, node_utils_1.isMemberExpression)(queryCall.parent) ? queryCall.parent : queryCall;\n\n            if (isVariableDeclaration(queryCall) || !isAtTopLevel(memberExpression)) {\n              return;\n            }\n\n            context.report({\n              node: queryCall,\n              messageId: 'preferExplicitAssert',\n              data: {\n                queryType: 'findBy*'\n              }\n            });\n          });\n        }\n\n        getQueryCalls.forEach(queryCall => {\n          const node = (0, node_utils_1.isMemberExpression)(queryCall.parent) ? queryCall.parent : queryCall;\n\n          if (isAtTopLevel(node)) {\n            context.report({\n              node: queryCall,\n              messageId: 'preferExplicitAssert',\n              data: {\n                queryType: 'getBy*'\n              }\n            });\n          }\n\n          if (assertion) {\n            const expectCallNode = (0, node_utils_1.findClosestCallNode)(node, 'expect');\n            if (!expectCallNode) return;\n            const expectStatement = expectCallNode.parent;\n\n            if (!(0, node_utils_1.isMemberExpression)(expectStatement)) {\n              return;\n            }\n\n            const property = expectStatement.property;\n\n            if (!utils_1.ASTUtils.isIdentifier(property)) {\n              return;\n            }\n\n            let matcher = property.name;\n            let isNegatedMatcher = false;\n\n            if (matcher === 'not' && (0, node_utils_1.isMemberExpression)(expectStatement.parent) && utils_1.ASTUtils.isIdentifier(expectStatement.parent.property)) {\n              isNegatedMatcher = true;\n              matcher = expectStatement.parent.property.name;\n            }\n\n            const shouldEnforceAssertion = !isNegatedMatcher && utils_2.PRESENCE_MATCHERS.includes(matcher) || isNegatedMatcher && utils_2.ABSENCE_MATCHERS.includes(matcher);\n\n            if (shouldEnforceAssertion && matcher !== assertion) {\n              context.report({\n                node: property,\n                messageId: 'preferExplicitAssertAssertion',\n                data: {\n                  assertion\n                }\n              });\n            }\n          }\n        });\n      }\n\n    };\n  }\n\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","RULE_NAME","utils_1","require","create_testing_library_rule_1","node_utils_1","utils_2","isAtTopLevel","node","_a","_b","_c","parent","type","isVariableDeclaration","isCallExpression","ASTUtils","isAwaitExpression","isVariableDeclarator","isMemberExpression","default","createTestingLibraryRule","name","meta","docs","description","recommendedConfig","dom","angular","react","vue","marko","messages","preferExplicitAssert","preferExplicitAssertAssertion","schema","additionalProperties","properties","assertion","enum","PRESENCE_MATCHERS","includeFindQueries","defaultOptions","create","context","helpers","options","getQueryCalls","findQueryCalls","isGetQueryVariant","push","isFindQueryVariant","forEach","queryCall","memberExpression","report","messageId","data","queryType","expectCallNode","findClosestCallNode","expectStatement","property","isIdentifier","matcher","isNegatedMatcher","shouldEnforceAssertion","includes","ABSENCE_MATCHERS"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-testing-library/rules/prefer-explicit-assert.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RULE_NAME = void 0;\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\nconst node_utils_1 = require(\"../node-utils\");\nconst utils_2 = require(\"../utils\");\nexports.RULE_NAME = 'prefer-explicit-assert';\nconst isAtTopLevel = (node) => {\n    var _a, _b, _c;\n    return (!!((_a = node.parent) === null || _a === void 0 ? void 0 : _a.parent) &&\n        node.parent.parent.type === 'ExpressionStatement') ||\n        (((_c = (_b = node.parent) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.type) === 'AwaitExpression' &&\n            !!node.parent.parent.parent &&\n            node.parent.parent.parent.type === 'ExpressionStatement');\n};\nconst isVariableDeclaration = (node) => {\n    if ((0, node_utils_1.isCallExpression)(node.parent) &&\n        utils_1.ASTUtils.isAwaitExpression(node.parent.parent) &&\n        utils_1.ASTUtils.isVariableDeclarator(node.parent.parent.parent)) {\n        return true;\n    }\n    if ((0, node_utils_1.isCallExpression)(node.parent) &&\n        utils_1.ASTUtils.isVariableDeclarator(node.parent.parent)) {\n        return true;\n    }\n    if ((0, node_utils_1.isMemberExpression)(node.parent) &&\n        (0, node_utils_1.isCallExpression)(node.parent.parent) &&\n        utils_1.ASTUtils.isAwaitExpression(node.parent.parent.parent) &&\n        utils_1.ASTUtils.isVariableDeclarator(node.parent.parent.parent.parent)) {\n        return true;\n    }\n    if ((0, node_utils_1.isMemberExpression)(node.parent) &&\n        (0, node_utils_1.isCallExpression)(node.parent.parent) &&\n        utils_1.ASTUtils.isVariableDeclarator(node.parent.parent.parent)) {\n        return true;\n    }\n    return false;\n};\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n    name: exports.RULE_NAME,\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Suggest using explicit assertions rather than standalone queries',\n            recommendedConfig: {\n                dom: false,\n                angular: false,\n                react: false,\n                vue: false,\n                marko: false,\n            },\n        },\n        messages: {\n            preferExplicitAssert: 'Wrap stand-alone `{{queryType}}` query with `expect` function for better explicit assertion',\n            preferExplicitAssertAssertion: '`getBy*` queries must be asserted with `{{assertion}}`',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    assertion: {\n                        type: 'string',\n                        enum: utils_2.PRESENCE_MATCHERS,\n                    },\n                    includeFindQueries: { type: 'boolean' },\n                },\n            },\n        ],\n    },\n    defaultOptions: [{ includeFindQueries: true }],\n    create(context, [options], helpers) {\n        const { assertion, includeFindQueries } = options;\n        const getQueryCalls = [];\n        const findQueryCalls = [];\n        return {\n            'CallExpression Identifier'(node) {\n                if (helpers.isGetQueryVariant(node)) {\n                    getQueryCalls.push(node);\n                }\n                if (helpers.isFindQueryVariant(node)) {\n                    findQueryCalls.push(node);\n                }\n            },\n            'Program:exit'() {\n                if (includeFindQueries) {\n                    findQueryCalls.forEach((queryCall) => {\n                        const memberExpression = (0, node_utils_1.isMemberExpression)(queryCall.parent)\n                            ? queryCall.parent\n                            : queryCall;\n                        if (isVariableDeclaration(queryCall) ||\n                            !isAtTopLevel(memberExpression)) {\n                            return;\n                        }\n                        context.report({\n                            node: queryCall,\n                            messageId: 'preferExplicitAssert',\n                            data: {\n                                queryType: 'findBy*',\n                            },\n                        });\n                    });\n                }\n                getQueryCalls.forEach((queryCall) => {\n                    const node = (0, node_utils_1.isMemberExpression)(queryCall.parent)\n                        ? queryCall.parent\n                        : queryCall;\n                    if (isAtTopLevel(node)) {\n                        context.report({\n                            node: queryCall,\n                            messageId: 'preferExplicitAssert',\n                            data: {\n                                queryType: 'getBy*',\n                            },\n                        });\n                    }\n                    if (assertion) {\n                        const expectCallNode = (0, node_utils_1.findClosestCallNode)(node, 'expect');\n                        if (!expectCallNode)\n                            return;\n                        const expectStatement = expectCallNode.parent;\n                        if (!(0, node_utils_1.isMemberExpression)(expectStatement)) {\n                            return;\n                        }\n                        const property = expectStatement.property;\n                        if (!utils_1.ASTUtils.isIdentifier(property)) {\n                            return;\n                        }\n                        let matcher = property.name;\n                        let isNegatedMatcher = false;\n                        if (matcher === 'not' &&\n                            (0, node_utils_1.isMemberExpression)(expectStatement.parent) &&\n                            utils_1.ASTUtils.isIdentifier(expectStatement.parent.property)) {\n                            isNegatedMatcher = true;\n                            matcher = expectStatement.parent.property.name;\n                        }\n                        const shouldEnforceAssertion = (!isNegatedMatcher && utils_2.PRESENCE_MATCHERS.includes(matcher)) ||\n                            (isNegatedMatcher && utils_2.ABSENCE_MATCHERS.includes(matcher));\n                        if (shouldEnforceAssertion && matcher !== assertion) {\n                            context.report({\n                                node: property,\n                                messageId: 'preferExplicitAssertAssertion',\n                                data: {\n                                    assertion,\n                                },\n                            });\n                        }\n                    }\n                });\n            },\n        };\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}