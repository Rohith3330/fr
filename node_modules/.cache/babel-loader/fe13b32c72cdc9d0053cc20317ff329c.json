{"ast":null,"code":"let postcss = require('postcss');\n\nlet clamp = require('./');\n\nasync function run(input, output, opts) {\n  let result = await postcss([clamp(opts)]).process(input, {\n    from: '/test.css'\n  });\n  expect(result.css).toEqual(output);\n  expect(result.warnings()).toHaveLength(0);\n  return result;\n}\n\nit('handle simple transformation (only values)', async () => {\n  await run('a{ width: clamp(10px, 64px, 80px); }', 'a{ width: max(10px, min(64px, 80px)); }');\n});\nit('handle simple transformation (only values) with preserve', async () => {\n  await run('a{ width: clamp(10px, 64px, 80px); }', 'a{ width: max(10px, min(64px, 80px)); width: clamp(10px, 64px, 80px); }', {\n    preserve: true\n  });\n});\nit('handle transformation with functions', async () => {\n  await run('a{ width: clamp(calc(100% - 10px), min(10px, 100%), max(40px, 4em)); }', 'a{ width: max(calc(100% - 10px), min(min(10px, 100%), max(40px, 4em))); }');\n});\nit('handle transformation with functions with preserve', async () => {\n  await run('a{ width: clamp(calc(100% - 10px), min(10px, 100%), max(40px, 4em)); }', 'a{ width: max(calc(100% - 10px), min(min(10px, 100%), max(40px, 4em))); ' + 'width: clamp(calc(100% - 10px), min(10px, 100%), max(40px, 4em)); }', {\n    preserve: true\n  });\n});\nit('handle transformation with different units', async () => {\n  await run('a{ width: clamp(10%, 2px, 4rem); }', 'a{ width: max(10%, min(2px, 4rem)); }');\n});\nit('handle transformation with different units and preserve', async () => {\n  await run('a{ width: clamp(10%, 2px, 4rem); }', 'a{ width: max(10%, min(2px, 4rem)); width: clamp(10%, 2px, 4rem); }', {\n    preserve: true\n  });\n});\nit('transform only function with 3 parameters', async () => {\n  await run('a{ width: clamp(10%, 2px, 4rem);' + '\\nheight: clamp(10px, 20px, 30px, 40px); }', 'a{ width: max(10%, min(2px, 4rem));' + '\\nheight: clamp(10px, 20px, 30px, 40px); }');\n});\nit('transform only clamp function', async () => {\n  await run('a{ width: clamp(10%, 2px, 4rem);\\nheight: calc(10px + 100%); }', 'a{ width: max(10%, min(2px, 4rem));\\nheight: calc(10px + 100%); }');\n});\nit('precalculate second and third with the same unit (int values)', async () => {\n  await run('a{ width: clamp(10%, 2px, 5px); }', 'a{ width: max(10%, 7px); }', {\n    precalculate: true\n  });\n});\nit('precalculate second and third with the same unit (float values)', async () => {\n  await run('a{ width: clamp(10%, 2.5px, 5.1px); }', 'a{ width: max(10%, 7.6px); }', {\n    precalculate: true\n  });\n});\nit('precalculate second and third with the same unit (float and int values)', async () => {\n  await run('a{ width: clamp(10%, 2.5px, 5px); }', 'a{ width: max(10%, 7.5px); }', {\n    precalculate: true\n  });\n});\nit('precalculate 2nd & 3rd with the same unit (float and int vals) & preserve', async () => {\n  await run('a{ width: clamp(10%, 2.5px, 5px); }', 'a{ width: max(10%, 7.5px); width: clamp(10%, 2.5px, 5px); }', {\n    precalculate: true,\n    preserve: true\n  });\n});\nit('precalculate all values with the same unit (int values)', async () => {\n  await run('a{ width: clamp(10px, 2px, 5px); }', 'a{ width: 17px; }', {\n    precalculate: true\n  });\n});\nit('precalculate all values with the same unit (float values)', async () => {\n  await run('a{ width: clamp(10.4px, 2.11px, 5.9px); }', 'a{ width: 18.41px; }', {\n    precalculate: true\n  });\n});\nit('precalculate all values with the same unit (int and float values)', async () => {\n  await run('a{ width: clamp(10.4px, 2px, 5.9px); }', 'a{ width: 18.3px; }', {\n    precalculate: true\n  });\n});\nit('handle function with enable precalculation as third', async () => {\n  await run('a{ width: clamp(10px, 2px, calc(10px + 100%)); }', 'a{ width: max(10px, min(2px, calc(10px + 100%))); }', {\n    precalculate: true\n  });\n});\nit('handle function with enable precalculation as second', async () => {\n  await run('a{ width: clamp(10px, calc(10px + 100%), 2px); }', 'a{ width: max(10px, min(calc(10px + 100%), 2px)); }', {\n    precalculate: true\n  });\n});\nit('handle function with enable precalculation as first', async () => {\n  await run('a{ width: clamp(calc(10px + 100%), 10px, 2px); }', 'a{ width: max(calc(10px + 100%), 12px); }', {\n    precalculate: true\n  });\n});\nit('handle function with enable precalculation as all', async () => {\n  await run('a{ width: clamp(calc(10px + 100%), calc(10rem + 200%), 10px); }', 'a{ width: max(calc(10px + 100%), min(calc(10rem + 200%), 10px)); }', {\n    precalculate: true\n  });\n});\nit('handle not valid values', async () => {\n  await run('a{ width: clamp(a, b, c); }', 'a{ width: max(a, min(b, c)); }', {\n    precalculate: true\n  });\n});\nit('handle not valid values with preserve', async () => {\n  await run('a{ width: clamp(a, b, c); }', 'a{ width: max(a, min(b, c)); width: clamp(a, b, c); }', {\n    precalculate: true,\n    preserve: true\n  });\n});\nit('handle not valid values mixed with valid', async () => {\n  await run('a{ width: clamp(a, 1px, 2em); }', 'a{ width: max(a, min(1px, 2em)); }', {\n    precalculate: true\n  });\n});\nit('handle not valid values mixed with valid and preserve', async () => {\n  await run('a{ width: clamp(a, 1px, 2em); }', 'a{ width: max(a, min(1px, 2em)); width: clamp(a, 1px, 2em); }', {\n    precalculate: true,\n    preserve: true\n  });\n});\nit('handle complex values', async () => {\n  await run('a{ grid-template-columns: clamp(22rem, 40%, 32rem) minmax(0, 1fr); }', 'a{ grid-template-columns: max(22rem, min(40%, 32rem)) minmax(0, 1fr); }');\n});\nit('handle multiple complex values', async () => {\n  await run('a{ margin: clamp(1rem, 2%, 3rem) 4px clamp(5rem, 6%, 7rem) 8rem; }', 'a{ margin: max(1rem, min(2%, 3rem)) 4px max(5rem, min(6%, 7rem)) 8rem; }');\n});\nit('handle calc', async () => {\n  await run('a{ margin: 0 40px 0 calc(-1 * clamp(32px, 16vw, 64px)); }', 'a{ margin: 0 40px 0 calc(-1 * max(32px, min(16vw, 64px))); }');\n});\nit('handle multiple calc', async () => {\n  await run('a{ margin: calc(-1 * clamp(1px, 2vw, 3px)) calc(-1 * clamp(4px, 5vw, 6px)); }', 'a{ margin: calc(-1 * max(1px, min(2vw, 3px))) calc(-1 * max(4px, min(5vw, 6px))); }');\n});\nit('handle nested clamp', async () => {\n  await run('a{ font-size: clamp(clamp(1rem, 2vw, 3rem), 4vw, 5rem); }', 'a{ font-size: max(max(1rem, min(2vw, 3rem)), min(4vw, 5rem)); }');\n});","map":{"version":3,"names":["postcss","require","clamp","run","input","output","opts","result","process","from","expect","css","toEqual","warnings","toHaveLength","it","preserve","precalculate"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-clamp/index.test.js"],"sourcesContent":["let postcss = require('postcss')\n\nlet clamp = require('./')\n\nasync function run (input, output, opts) {\n  let result = await postcss([clamp(opts)]).process(input, {\n    from: '/test.css'\n  })\n  expect(result.css).toEqual(output)\n  expect(result.warnings()).toHaveLength(0)\n  return result\n}\n\nit('handle simple transformation (only values)', async () => {\n  await run(\n    'a{ width: clamp(10px, 64px, 80px); }',\n    'a{ width: max(10px, min(64px, 80px)); }'\n  )\n})\n\nit('handle simple transformation (only values) with preserve', async () => {\n  await run(\n    'a{ width: clamp(10px, 64px, 80px); }',\n    'a{ width: max(10px, min(64px, 80px)); width: clamp(10px, 64px, 80px); }',\n    { preserve: true }\n  )\n})\n\nit('handle transformation with functions', async () => {\n  await run(\n    'a{ width: clamp(calc(100% - 10px), min(10px, 100%), max(40px, 4em)); }',\n    'a{ width: max(calc(100% - 10px), min(min(10px, 100%), max(40px, 4em))); }'\n  )\n})\n\nit('handle transformation with functions with preserve', async () => {\n  await run(\n    'a{ width: clamp(calc(100% - 10px), min(10px, 100%), max(40px, 4em)); }',\n    'a{ width: max(calc(100% - 10px), min(min(10px, 100%), max(40px, 4em))); ' +\n      'width: clamp(calc(100% - 10px), min(10px, 100%), max(40px, 4em)); }',\n    { preserve: true }\n  )\n})\n\nit('handle transformation with different units', async () => {\n  await run(\n    'a{ width: clamp(10%, 2px, 4rem); }',\n    'a{ width: max(10%, min(2px, 4rem)); }'\n  )\n})\n\nit('handle transformation with different units and preserve', async () => {\n  await run(\n    'a{ width: clamp(10%, 2px, 4rem); }',\n    'a{ width: max(10%, min(2px, 4rem)); width: clamp(10%, 2px, 4rem); }',\n    { preserve: true }\n  )\n})\n\nit('transform only function with 3 parameters', async () => {\n  await run(\n    'a{ width: clamp(10%, 2px, 4rem);' +\n      '\\nheight: clamp(10px, 20px, 30px, 40px); }',\n    'a{ width: max(10%, min(2px, 4rem));' +\n      '\\nheight: clamp(10px, 20px, 30px, 40px); }'\n  )\n})\n\nit('transform only clamp function', async () => {\n  await run(\n    'a{ width: clamp(10%, 2px, 4rem);\\nheight: calc(10px + 100%); }',\n    'a{ width: max(10%, min(2px, 4rem));\\nheight: calc(10px + 100%); }'\n  )\n})\n\nit('precalculate second and third with the same unit (int values)', async () => {\n  await run('a{ width: clamp(10%, 2px, 5px); }', 'a{ width: max(10%, 7px); }', {\n    precalculate: true\n  })\n})\n\nit('precalculate second and third with the same unit (float values)', async () => {\n  await run(\n    'a{ width: clamp(10%, 2.5px, 5.1px); }',\n    'a{ width: max(10%, 7.6px); }',\n    { precalculate: true }\n  )\n})\n\nit('precalculate second and third with the same unit (float and int values)', async () => {\n  await run(\n    'a{ width: clamp(10%, 2.5px, 5px); }',\n    'a{ width: max(10%, 7.5px); }',\n    { precalculate: true }\n  )\n})\n\nit('precalculate 2nd & 3rd with the same unit (float and int vals) & preserve', async () => {\n  await run(\n    'a{ width: clamp(10%, 2.5px, 5px); }',\n    'a{ width: max(10%, 7.5px); width: clamp(10%, 2.5px, 5px); }',\n    { precalculate: true, preserve: true }\n  )\n})\n\nit('precalculate all values with the same unit (int values)', async () => {\n  await run('a{ width: clamp(10px, 2px, 5px); }', 'a{ width: 17px; }', {\n    precalculate: true\n  })\n})\n\nit('precalculate all values with the same unit (float values)', async () => {\n  await run(\n    'a{ width: clamp(10.4px, 2.11px, 5.9px); }',\n    'a{ width: 18.41px; }',\n    { precalculate: true }\n  )\n})\n\nit('precalculate all values with the same unit (int and float values)', async () => {\n  await run('a{ width: clamp(10.4px, 2px, 5.9px); }', 'a{ width: 18.3px; }', {\n    precalculate: true\n  })\n})\n\nit('handle function with enable precalculation as third', async () => {\n  await run(\n    'a{ width: clamp(10px, 2px, calc(10px + 100%)); }',\n    'a{ width: max(10px, min(2px, calc(10px + 100%))); }',\n    { precalculate: true }\n  )\n})\n\nit('handle function with enable precalculation as second', async () => {\n  await run(\n    'a{ width: clamp(10px, calc(10px + 100%), 2px); }',\n    'a{ width: max(10px, min(calc(10px + 100%), 2px)); }',\n    { precalculate: true }\n  )\n})\n\nit('handle function with enable precalculation as first', async () => {\n  await run(\n    'a{ width: clamp(calc(10px + 100%), 10px, 2px); }',\n    'a{ width: max(calc(10px + 100%), 12px); }',\n    { precalculate: true }\n  )\n})\n\nit('handle function with enable precalculation as all', async () => {\n  await run(\n    'a{ width: clamp(calc(10px + 100%), calc(10rem + 200%), 10px); }',\n    'a{ width: max(calc(10px + 100%), min(calc(10rem + 200%), 10px)); }',\n    { precalculate: true }\n  )\n})\n\nit('handle not valid values', async () => {\n  await run('a{ width: clamp(a, b, c); }', 'a{ width: max(a, min(b, c)); }', {\n    precalculate: true\n  })\n})\n\nit('handle not valid values with preserve', async () => {\n  await run(\n    'a{ width: clamp(a, b, c); }',\n    'a{ width: max(a, min(b, c)); width: clamp(a, b, c); }',\n    { precalculate: true, preserve: true }\n  )\n})\n\nit('handle not valid values mixed with valid', async () => {\n  await run(\n    'a{ width: clamp(a, 1px, 2em); }',\n    'a{ width: max(a, min(1px, 2em)); }',\n    { precalculate: true }\n  )\n})\n\nit('handle not valid values mixed with valid and preserve', async () => {\n  await run(\n    'a{ width: clamp(a, 1px, 2em); }',\n    'a{ width: max(a, min(1px, 2em)); width: clamp(a, 1px, 2em); }',\n    { precalculate: true, preserve: true }\n  )\n})\n\nit('handle complex values', async () => {\n  await run(\n    'a{ grid-template-columns: clamp(22rem, 40%, 32rem) minmax(0, 1fr); }',\n    'a{ grid-template-columns: max(22rem, min(40%, 32rem)) minmax(0, 1fr); }'\n  )\n})\n\nit('handle multiple complex values', async () => {\n  await run(\n    'a{ margin: clamp(1rem, 2%, 3rem) 4px clamp(5rem, 6%, 7rem) 8rem; }',\n    'a{ margin: max(1rem, min(2%, 3rem)) 4px max(5rem, min(6%, 7rem)) 8rem; }'\n  )\n})\n\nit('handle calc', async () => {\n  await run(\n    'a{ margin: 0 40px 0 calc(-1 * clamp(32px, 16vw, 64px)); }',\n    'a{ margin: 0 40px 0 calc(-1 * max(32px, min(16vw, 64px))); }'\n  )\n})\n\nit('handle multiple calc', async () => {\n  await run(\n    'a{ margin: calc(-1 * clamp(1px, 2vw, 3px)) calc(-1 * clamp(4px, 5vw, 6px)); }',\n    'a{ margin: calc(-1 * max(1px, min(2vw, 3px))) calc(-1 * max(4px, min(5vw, 6px))); }'\n  )\n})\n\nit('handle nested clamp', async () => {\n  await run(\n    'a{ font-size: clamp(clamp(1rem, 2vw, 3rem), 4vw, 5rem); }',\n    'a{ font-size: max(max(1rem, min(2vw, 3rem)), min(4vw, 5rem)); }'\n  )\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}