{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _indexJs = require(\"../peers/index.js\");\n\nconst _chokidar = /*#__PURE__*/_interopRequireDefault(require(\"chokidar\"));\n\nconst _path = /*#__PURE__*/_interopRequireDefault(require(\"path\"));\n\nconst _arg = /*#__PURE__*/_interopRequireDefault(require(\"arg\"));\n\nconst _fs = /*#__PURE__*/_interopRequireDefault(require(\"fs\"));\n\nconst _postcssLoadConfig = /*#__PURE__*/_interopRequireDefault(require(\"postcss-load-config\"));\n\nconst _lilconfig = require(\"lilconfig\");\n\nconst _plugins = /*#__PURE__*/_interopRequireDefault(require(\"postcss-load-config/src/plugins\" // Little bit scary, looking at private/internal API\n));\n\nconst _options = /*#__PURE__*/_interopRequireDefault(require(\"postcss-load-config/src/options\" // Little bit scary, looking at private/internal API\n));\n\nconst _processTailwindFeatures = /*#__PURE__*/_interopRequireDefault(require(\"./processTailwindFeatures\"));\n\nconst _resolveConfig = /*#__PURE__*/_interopRequireDefault(require(\"../resolveConfig\"));\n\nconst _fastGlob = /*#__PURE__*/_interopRequireDefault(require(\"fast-glob\"));\n\nconst _getModuleDependencies = /*#__PURE__*/_interopRequireDefault(require(\"./lib/getModuleDependencies\"));\n\nconst _log = /*#__PURE__*/_interopRequireDefault(require(\"./util/log\"));\n\nconst _packageJson = /*#__PURE__*/_interopRequireDefault(require(\"../package.json\"));\n\nconst _normalizePath = /*#__PURE__*/_interopRequireDefault(require(\"normalize-path\"));\n\nconst _validateConfigJs = require(\"./util/validateConfig.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nlet env = {\n  DEBUG: process.env.DEBUG !== undefined && process.env.DEBUG !== \"0\"\n};\n\nfunction isESM() {\n  const pkgPath = _path.default.resolve(\"./package.json\");\n\n  try {\n    let pkg = JSON.parse(_fs.default.readFileSync(pkgPath, \"utf8\"));\n    return pkg.type && pkg.type === \"module\";\n  } catch (err) {\n    return false;\n  }\n}\n\nlet configs = isESM() ? {\n  tailwind: \"tailwind.config.cjs\",\n  postcss: \"postcss.config.cjs\"\n} : {\n  tailwind: \"tailwind.config.js\",\n  postcss: \"postcss.config.js\"\n}; // ---\n\nfunction indentRecursive(node) {\n  let indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  node.each && node.each((child, i) => {\n    if (!child.raws.before || !child.raws.before.trim() || child.raws.before.includes(\"\\n\")) {\n      child.raws.before = `\\n${node.type !== \"rule\" && i > 0 ? \"\\n\" : \"\"}${\"  \".repeat(indent)}`;\n    }\n\n    child.raws.after = `\\n${\"  \".repeat(indent)}`;\n    indentRecursive(child, indent + 1);\n  });\n}\n\nfunction formatNodes(root) {\n  indentRecursive(root);\n\n  if (root.first) {\n    root.first.raws.before = \"\";\n  }\n}\n\nasync function outputFile(file, contents) {\n  if (_fs.default.existsSync(file) && (await _fs.default.promises.readFile(file, \"utf8\")) === contents) {\n    return; // Skip writing the file\n  } // Write the file\n\n\n  await _fs.default.promises.writeFile(file, contents, \"utf8\");\n}\n\nfunction drainStdin() {\n  return new Promise((resolve, reject) => {\n    let result = \"\";\n    process.stdin.on(\"data\", chunk => {\n      result += chunk;\n    });\n    process.stdin.on(\"end\", () => resolve(result));\n    process.stdin.on(\"error\", err => reject(err));\n  });\n}\n\nfunction help(_ref) {\n  let {\n    message,\n    usage,\n    commands,\n    options\n  } = _ref;\n  let indent = 2; // Render header\n\n  console.log();\n  console.log(`${_packageJson.default.name} v${_packageJson.default.version}`); // Render message\n\n  if (message) {\n    console.log();\n\n    for (let msg of message.split(\"\\n\")) {\n      console.log(msg);\n    }\n  } // Render usage\n\n\n  if (usage && usage.length > 0) {\n    console.log();\n    console.log(\"Usage:\");\n\n    for (let example of usage) {\n      console.log(\" \".repeat(indent), example);\n    }\n  } // Render commands\n\n\n  if (commands && commands.length > 0) {\n    console.log();\n    console.log(\"Commands:\");\n\n    for (let command of commands) {\n      console.log(\" \".repeat(indent), command);\n    }\n  } // Render options\n\n\n  if (options) {\n    let groupedOptions = {};\n\n    for (let [key, value] of Object.entries(options)) {\n      if (typeof value === \"object\") {\n        groupedOptions[key] = { ...value,\n          flags: [key]\n        };\n      } else {\n        groupedOptions[value].flags.push(key);\n      }\n    }\n\n    console.log();\n    console.log(\"Options:\");\n\n    for (let {\n      flags,\n      description,\n      deprecated\n    } of Object.values(groupedOptions)) {\n      if (deprecated) continue;\n\n      if (flags.length === 1) {\n        console.log(\" \".repeat(indent + 4\n        /* 4 = \"-i, \".length */\n        ), flags.slice().reverse().join(\", \").padEnd(20, \" \"), description);\n      } else {\n        console.log(\" \".repeat(indent), flags.slice().reverse().join(\", \").padEnd(24, \" \"), description);\n      }\n    }\n  }\n\n  console.log();\n}\n\nfunction oneOf() {\n  for (var _len = arguments.length, options = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n    options[_key2] = arguments[_key2];\n  }\n\n  return Object.assign(function () {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    for (let option of options) {\n      let parsed = option(value);\n\n      if (parsed === value) {\n        return parsed;\n      }\n    }\n\n    throw new Error(\"...\");\n  }, {\n    manualParsing: true\n  });\n}\n\nfunction loadPostcss() {\n  // Try to load a local `postcss` version first\n  try {\n    return require(\"postcss\");\n  } catch {}\n\n  return (0, _indexJs.lazyPostcss)();\n}\n\nlet commands = {\n  init: {\n    run: init,\n    args: {\n      \"--full\": {\n        type: Boolean,\n        description: `Initialize a full \\`${configs.tailwind}\\` file`\n      },\n      \"--postcss\": {\n        type: Boolean,\n        description: `Initialize a \\`${configs.postcss}\\` file`\n      },\n      \"-f\": \"--full\",\n      \"-p\": \"--postcss\"\n    }\n  },\n  build: {\n    run: build,\n    args: {\n      \"--input\": {\n        type: String,\n        description: \"Input file\"\n      },\n      \"--output\": {\n        type: String,\n        description: \"Output file\"\n      },\n      \"--watch\": {\n        type: Boolean,\n        description: \"Watch for changes and rebuild as needed\"\n      },\n      \"--poll\": {\n        type: Boolean,\n        description: \"Use polling instead of filesystem events when watching\"\n      },\n      \"--content\": {\n        type: String,\n        description: \"Content paths to use for removing unused classes\"\n      },\n      \"--purge\": {\n        type: String,\n        deprecated: true\n      },\n      \"--postcss\": {\n        type: oneOf(String, Boolean),\n        description: \"Load custom PostCSS configuration\"\n      },\n      \"--minify\": {\n        type: Boolean,\n        description: \"Minify the output\"\n      },\n      \"--config\": {\n        type: String,\n        description: \"Path to a custom config file\"\n      },\n      \"--no-autoprefixer\": {\n        type: Boolean,\n        description: \"Disable autoprefixer\"\n      },\n      \"-c\": \"--config\",\n      \"-i\": \"--input\",\n      \"-o\": \"--output\",\n      \"-m\": \"--minify\",\n      \"-w\": \"--watch\",\n      \"-p\": \"--poll\"\n    }\n  }\n};\nlet sharedFlags = {\n  \"--help\": {\n    type: Boolean,\n    description: \"Display usage information\"\n  },\n  \"-h\": \"--help\"\n};\n\nif (process.stdout.isTTY\n/* Detect redirecting output to a file */\n&& (process.argv[2] === undefined || process.argv.slice(2).every(flag => sharedFlags[flag] !== undefined))) {\n  help({\n    usage: [\"tailwindcss [--input input.css] [--output output.css] [--watch] [options...]\", \"tailwindcss init [--full] [--postcss] [options...]\"],\n    commands: Object.keys(commands).filter(command => command !== \"build\").map(command => `${command} [options]`),\n    options: { ...commands.build.args,\n      ...sharedFlags\n    }\n  });\n  process.exit(0);\n}\n\nlet command = function () {\n  let arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return arg.startsWith(\"-\") ? undefined : arg;\n}(process.argv[2]) || \"build\";\n\nif (commands[command] === undefined) {\n  if (_fs.default.existsSync(_path.default.resolve(command))) {\n    // TODO: Deprecate this in future versions\n    // Check if non-existing command, might be a file.\n    command = \"build\";\n  } else {\n    help({\n      message: `Invalid command: ${command}`,\n      usage: [\"tailwindcss <command> [options]\"],\n      commands: Object.keys(commands).filter(command => command !== \"build\").map(command => `${command} [options]`),\n      options: sharedFlags\n    });\n    process.exit(1);\n  }\n} // Execute command\n\n\nlet {\n  args: flags,\n  run\n} = commands[command];\n\nlet args = (() => {\n  try {\n    let result = (0, _arg.default)(Object.fromEntries(Object.entries({ ...flags,\n      ...sharedFlags\n    }).filter(_ref2 => {\n      let [_key, value] = _ref2;\n      var ref;\n      return !(value === null || value === void 0 ? void 0 : (ref = value.type) === null || ref === void 0 ? void 0 : ref.manualParsing);\n    }).map(_ref3 => {\n      let [key, value] = _ref3;\n      return [key, typeof value === \"object\" ? value.type : value];\n    })), {\n      permissive: true\n    }); // Manual parsing of flags to allow for special flags like oneOf(Boolean, String)\n\n    for (let i = result[\"_\"].length - 1; i >= 0; --i) {\n      let flag = result[\"_\"][i];\n      if (!flag.startsWith(\"-\")) continue;\n      let flagName = flag;\n      let handler = flags[flag]; // Resolve flagName & handler\n\n      while (typeof handler === \"string\") {\n        flagName = handler;\n        handler = flags[handler];\n      }\n\n      if (!handler) continue;\n      let args = [];\n      let offset = i + 1; // Parse args for current flag\n\n      while (result[\"_\"][offset] && !result[\"_\"][offset].startsWith(\"-\")) {\n        args.push(result[\"_\"][offset++]);\n      } // Cleanup manually parsed flags + args\n\n\n      result[\"_\"].splice(i, 1 + args.length); // Set the resolved value in the `result` object\n\n      result[flagName] = handler.type(args.length === 0 ? undefined : args.length === 1 ? args[0] : args, flagName);\n    } // Ensure that the `command` is always the first argument in the `args`.\n    // This is important so that we don't have to check if a default command\n    // (build) was used or not from within each plugin.\n    //\n    // E.g.: tailwindcss input.css -> _: ['build', 'input.css']\n    // E.g.: tailwindcss build input.css -> _: ['build', 'input.css']\n\n\n    if (result[\"_\"][0] !== command) {\n      result[\"_\"].unshift(command);\n    }\n\n    return result;\n  } catch (err) {\n    if (err.code === \"ARG_UNKNOWN_OPTION\") {\n      help({\n        message: err.message,\n        usage: [\"tailwindcss <command> [options]\"],\n        options: sharedFlags\n      });\n      process.exit(1);\n    }\n\n    throw err;\n  }\n})();\n\nif (args[\"--help\"]) {\n  help({\n    options: { ...flags,\n      ...sharedFlags\n    },\n    usage: [`tailwindcss ${command} [options]`]\n  });\n  process.exit(0);\n}\n\nrun(); // ---\n\nfunction init() {\n  let messages = [];\n  var ref;\n\n  let tailwindConfigLocation = _path.default.resolve((ref = args[\"_\"][1]) !== null && ref !== void 0 ? ref : `./${configs.tailwind}`);\n\n  if (_fs.default.existsSync(tailwindConfigLocation)) {\n    messages.push(`${_path.default.basename(tailwindConfigLocation)} already exists.`);\n  } else {\n    let stubFile = _fs.default.readFileSync(args[\"--full\"] ? _path.default.resolve(__dirname, \"../stubs/defaultConfig.stub.js\") : _path.default.resolve(__dirname, \"../stubs/simpleConfig.stub.js\"), \"utf8\"); // Change colors import\n\n\n    stubFile = stubFile.replace(\"../colors\", \"tailwindcss/colors\");\n\n    _fs.default.writeFileSync(tailwindConfigLocation, stubFile, \"utf8\");\n\n    messages.push(`Created Tailwind CSS config file: ${_path.default.basename(tailwindConfigLocation)}`);\n  }\n\n  if (args[\"--postcss\"]) {\n    let postcssConfigLocation = _path.default.resolve(`./${configs.postcss}`);\n\n    if (_fs.default.existsSync(postcssConfigLocation)) {\n      messages.push(`${_path.default.basename(postcssConfigLocation)} already exists.`);\n    } else {\n      let stubFile1 = _fs.default.readFileSync(_path.default.resolve(__dirname, \"../stubs/defaultPostCssConfig.stub.js\"), \"utf8\");\n\n      _fs.default.writeFileSync(postcssConfigLocation, stubFile1, \"utf8\");\n\n      messages.push(`Created PostCSS config file: ${_path.default.basename(postcssConfigLocation)}`);\n    }\n  }\n\n  if (messages.length > 0) {\n    console.log();\n\n    for (let message of messages) {\n      console.log(message);\n    }\n  }\n}\n\nasync function build() {\n  let input = args[\"--input\"];\n  let output = args[\"--output\"];\n  let shouldWatch = args[\"--watch\"];\n  let shouldPoll = args[\"--poll\"];\n  let shouldCoalesceWriteEvents = shouldPoll || process.platform === \"win32\";\n  let includePostCss = args[\"--postcss\"]; // Polling interval in milliseconds\n  // Used only when polling or coalescing add/change events on Windows\n\n  let pollInterval = 10; // TODO: Deprecate this in future versions\n\n  if (!input && args[\"_\"][1]) {\n    console.error(\"[deprecation] Running tailwindcss without -i, please provide an input file.\");\n    input = args[\"--input\"] = args[\"_\"][1];\n  }\n\n  if (input && input !== \"-\" && !_fs.default.existsSync(input = _path.default.resolve(input))) {\n    console.error(`Specified input file ${args[\"--input\"]} does not exist.`);\n    process.exit(9);\n  }\n\n  if (args[\"--config\"] && !_fs.default.existsSync(args[\"--config\"] = _path.default.resolve(args[\"--config\"]))) {\n    console.error(`Specified config file ${args[\"--config\"]} does not exist.`);\n    process.exit(9);\n  }\n\n  let configPath = args[\"--config\"] ? args[\"--config\"] : (defaultPath => _fs.default.existsSync(defaultPath) ? defaultPath : null)(_path.default.resolve(`./${configs.tailwind}`));\n\n  async function loadPostCssPlugins() {\n    let customPostCssPath = typeof args[\"--postcss\"] === \"string\" ? args[\"--postcss\"] : undefined;\n    let config = customPostCssPath ? await (async () => {\n      let file = _path.default.resolve(customPostCssPath); // Implementation, see: https://unpkg.com/browse/postcss-load-config@3.1.0/src/index.js\n\n\n      let {\n        config = {}\n      } = await (0, _lilconfig.lilconfig)(\"postcss\").load(file);\n\n      if (typeof config === \"function\") {\n        config = config();\n      } else {\n        config = Object.assign({}, config);\n      }\n\n      if (!config.plugins) {\n        config.plugins = [];\n      }\n\n      return {\n        file,\n        plugins: (0, _plugins.default)(config, file),\n        options: (0, _options.default)(config, file)\n      };\n    })() : await (0, _postcssLoadConfig.default)();\n    let configPlugins = config.plugins;\n    let configPluginTailwindIdx = configPlugins.findIndex(plugin => {\n      if (typeof plugin === \"function\" && plugin.name === \"tailwindcss\") {\n        return true;\n      }\n\n      if (typeof plugin === \"object\" && plugin !== null && plugin.postcssPlugin === \"tailwindcss\") {\n        return true;\n      }\n\n      return false;\n    });\n    let beforePlugins = configPluginTailwindIdx === -1 ? [] : configPlugins.slice(0, configPluginTailwindIdx);\n    let afterPlugins = configPluginTailwindIdx === -1 ? configPlugins : configPlugins.slice(configPluginTailwindIdx + 1);\n    return [beforePlugins, afterPlugins, config.options];\n  }\n\n  function loadBuiltinPostcssPlugins() {\n    let postcss = loadPostcss();\n    let IMPORT_COMMENT = \"__TAILWIND_RESTORE_IMPORT__: \";\n    return [[root => {\n      root.walkAtRules(\"import\", rule => {\n        if (rule.params.slice(1).startsWith(\"tailwindcss/\")) {\n          rule.after(postcss.comment({\n            text: IMPORT_COMMENT + rule.params\n          }));\n          rule.remove();\n        }\n      });\n    }, (() => {\n      try {\n        return require(\"postcss-import\");\n      } catch {}\n\n      return (0, _indexJs.lazyPostcssImport)();\n    })(), root => {\n      root.walkComments(rule => {\n        if (rule.text.startsWith(IMPORT_COMMENT)) {\n          rule.after(postcss.atRule({\n            name: \"import\",\n            params: rule.text.replace(IMPORT_COMMENT, \"\")\n          }));\n          rule.remove();\n        }\n      });\n    }], [], {}];\n  }\n\n  function resolveConfig() {\n    let config = configPath ? require(configPath) : {};\n\n    if (args[\"--purge\"]) {\n      _log.default.warn(\"purge-flag-deprecated\", [\"The `--purge` flag has been deprecated.\", \"Please use `--content` instead.\"]);\n\n      if (!args[\"--content\"]) {\n        args[\"--content\"] = args[\"--purge\"];\n      }\n    }\n\n    if (args[\"--content\"]) {\n      let files = args[\"--content\"].split(/(?<!{[^}]+),/);\n      let resolvedConfig = (0, _resolveConfig.default)(config, {\n        content: {\n          files\n        }\n      });\n      resolvedConfig.content.files = files;\n      resolvedConfig = (0, _validateConfigJs.validateConfig)(resolvedConfig);\n      return resolvedConfig;\n    }\n\n    let resolvedConfig1 = (0, _resolveConfig.default)(config);\n    resolvedConfig1 = (0, _validateConfigJs.validateConfig)(resolvedConfig1);\n    return resolvedConfig1;\n  }\n\n  function extractFileGlobs(config) {\n    return config.content.files.filter(file => {\n      // Strings in this case are files / globs. If it is something else,\n      // like an object it's probably a raw content object. But this object\n      // is not watchable, so let's remove it.\n      return typeof file === \"string\";\n    }).map(glob => (0, _normalizePath.default)(glob));\n  }\n\n  function extractRawContent(config) {\n    return config.content.files.filter(file => {\n      return typeof file === \"object\" && file !== null;\n    });\n  }\n\n  function getChangedContent(config) {\n    let changedContent = []; // Resolve globs from the content config\n\n    let globs = extractFileGlobs(config);\n\n    let files = _fastGlob.default.sync(globs);\n\n    for (let file of files) {\n      changedContent.push({\n        content: _fs.default.readFileSync(_path.default.resolve(file), \"utf8\"),\n        extension: _path.default.extname(file).slice(1)\n      });\n    } // Resolve raw content in the tailwind config\n\n\n    for (let {\n      raw: content,\n      extension = \"html\"\n    } of extractRawContent(config)) {\n      changedContent.push({\n        content,\n        extension\n      });\n    }\n\n    return changedContent;\n  }\n\n  async function buildOnce() {\n    let config = resolveConfig();\n    let changedContent = getChangedContent(config);\n\n    let tailwindPlugin = () => {\n      return {\n        postcssPlugin: \"tailwindcss\",\n\n        Once(root, _ref4) {\n          let {\n            result\n          } = _ref4;\n          (0, _processTailwindFeatures.default)(_ref5 => {\n            let {\n              createContext\n            } = _ref5;\n            return () => {\n              return createContext(config, changedContent);\n            };\n          })(root, result);\n        }\n\n      };\n    };\n\n    tailwindPlugin.postcss = true;\n    let [beforePlugins, afterPlugins, postcssOptions] = includePostCss ? await loadPostCssPlugins() : loadBuiltinPostcssPlugins();\n    let plugins = [...beforePlugins, tailwindPlugin, !args[\"--minify\"] && formatNodes, ...afterPlugins, !args[\"--no-autoprefixer\"] && (() => {\n      // Try to load a local `autoprefixer` version first\n      try {\n        return require(\"autoprefixer\");\n      } catch {}\n\n      return (0, _indexJs.lazyAutoprefixer)();\n    })(), args[\"--minify\"] && (() => {\n      let options = {\n        preset: [\"default\", {\n          cssDeclarationSorter: false\n        }]\n      }; // Try to load a local `cssnano` version first\n\n      try {\n        return require(\"cssnano\");\n      } catch {}\n\n      return (0, _indexJs.lazyCssnano)()(options);\n    })()].filter(Boolean);\n    let postcss = loadPostcss();\n    let processor = postcss(plugins);\n\n    function processCSS(css) {\n      let start = process.hrtime.bigint();\n      return Promise.resolve().then(() => output ? _fs.default.promises.mkdir(_path.default.dirname(output), {\n        recursive: true\n      }) : null).then(() => processor.process(css, { ...postcssOptions,\n        from: input,\n        to: output\n      })).then(result => {\n        if (!output) {\n          return process.stdout.write(result.css);\n        }\n\n        return Promise.all([outputFile(output, result.css), result.map && outputFile(output + \".map\", result.map.toString())].filter(Boolean));\n      }).then(() => {\n        let end = process.hrtime.bigint();\n        console.error();\n        console.error(\"Done in\", (end - start) / BigInt(1e6) + \"ms.\");\n      });\n    }\n\n    let css = await (() => {\n      // Piping in data, let's drain the stdin\n      if (input === \"-\") {\n        return drainStdin();\n      } // Input file has been provided\n\n\n      if (input) {\n        return _fs.default.readFileSync(_path.default.resolve(input), \"utf8\");\n      } // No input file provided, fallback to default atrules\n\n\n      return \"@tailwind base; @tailwind components; @tailwind utilities\";\n    })();\n    return processCSS(css);\n  }\n\n  let context = null;\n\n  async function startWatcher() {\n    let changedContent = [];\n    let configDependencies = [];\n    let contextDependencies = new Set();\n    let watcher = null;\n\n    function refreshConfig() {\n      env.DEBUG && console.time(\"Module dependencies\");\n\n      for (let file of configDependencies) {\n        delete require.cache[require.resolve(file)];\n      }\n\n      if (configPath) {\n        configDependencies = (0, _getModuleDependencies.default)(configPath).map(_ref6 => {\n          let {\n            file\n          } = _ref6;\n          return file;\n        });\n\n        for (let dependency of configDependencies) {\n          contextDependencies.add(dependency);\n        }\n      }\n\n      env.DEBUG && console.timeEnd(\"Module dependencies\");\n      return resolveConfig();\n    }\n\n    let [beforePlugins, afterPlugins] = includePostCss ? await loadPostCssPlugins() : loadBuiltinPostcssPlugins();\n    let plugins = [...beforePlugins, \"__TAILWIND_PLUGIN_POSITION__\", !args[\"--minify\"] && formatNodes, ...afterPlugins, !args[\"--no-autoprefixer\"] && (() => {\n      // Try to load a local `autoprefixer` version first\n      try {\n        return require(\"autoprefixer\");\n      } catch {}\n\n      return (0, _indexJs.lazyAutoprefixer)();\n    })(), args[\"--minify\"] && (() => {\n      let options = {\n        preset: [\"default\", {\n          cssDeclarationSorter: false\n        }]\n      }; // Try to load a local `cssnano` version first\n\n      try {\n        return require(\"cssnano\");\n      } catch {}\n\n      return (0, _indexJs.lazyCssnano)()(options);\n    })()].filter(Boolean);\n\n    async function rebuild(config) {\n      env.DEBUG && console.time(\"Finished in\");\n\n      let tailwindPlugin = () => {\n        return {\n          postcssPlugin: \"tailwindcss\",\n\n          Once(root, _ref7) {\n            let {\n              result\n            } = _ref7;\n            env.DEBUG && console.time(\"Compiling CSS\");\n            (0, _processTailwindFeatures.default)(_ref8 => {\n              let {\n                createContext\n              } = _ref8;\n              console.error();\n              console.error(\"Rebuilding...\");\n              return () => {\n                if (context !== null) {\n                  context.changedContent = changedContent.splice(0);\n                  return context;\n                }\n\n                env.DEBUG && console.time(\"Creating context\");\n                context = createContext(config, changedContent.splice(0));\n                env.DEBUG && console.timeEnd(\"Creating context\");\n                return context;\n              };\n            })(root, result);\n            env.DEBUG && console.timeEnd(\"Compiling CSS\");\n          }\n\n        };\n      };\n\n      tailwindPlugin.postcss = true;\n      let tailwindPluginIdx = plugins.indexOf(\"__TAILWIND_PLUGIN_POSITION__\");\n      let copy = plugins.slice();\n      copy.splice(tailwindPluginIdx, 1, tailwindPlugin);\n      let postcss = loadPostcss();\n      let processor = postcss(copy);\n\n      function processCSS(css) {\n        let start = process.hrtime.bigint();\n        return Promise.resolve().then(() => output ? _fs.default.promises.mkdir(_path.default.dirname(output), {\n          recursive: true\n        }) : null).then(() => processor.process(css, {\n          from: input,\n          to: output\n        })).then(async result => {\n          for (let message of result.messages) {\n            if (message.type === \"dependency\") {\n              contextDependencies.add(message.file);\n            }\n          }\n\n          watcher.add([...contextDependencies]);\n\n          if (!output) {\n            return process.stdout.write(result.css);\n          }\n\n          return Promise.all([outputFile(output, result.css), result.map && outputFile(output + \".map\", result.map.toString())].filter(Boolean));\n        }).then(() => {\n          let end = process.hrtime.bigint();\n          console.error(\"Done in\", (end - start) / BigInt(1e6) + \"ms.\");\n        }).catch(err => {\n          if (err.name === \"CssSyntaxError\") {\n            console.error(err.toString());\n          } else {\n            console.error(err);\n          }\n        });\n      }\n\n      let css = await (() => {\n        // Piping in data, let's drain the stdin\n        if (input === \"-\") {\n          return drainStdin();\n        } // Input file has been provided\n\n\n        if (input) {\n          return _fs.default.readFileSync(_path.default.resolve(input), \"utf8\");\n        } // No input file provided, fallback to default atrules\n\n\n        return \"@tailwind base; @tailwind components; @tailwind utilities\";\n      })();\n      let result = await processCSS(css);\n      env.DEBUG && console.timeEnd(\"Finished in\");\n      return result;\n    }\n\n    let config = refreshConfig(configPath);\n\n    if (input) {\n      contextDependencies.add(_path.default.resolve(input));\n    }\n\n    watcher = _chokidar.default.watch([...contextDependencies, ...extractFileGlobs(config)], {\n      usePolling: shouldPoll,\n      interval: shouldPoll ? pollInterval : undefined,\n      ignoreInitial: true,\n      awaitWriteFinish: shouldCoalesceWriteEvents ? {\n        stabilityThreshold: 50,\n        pollInterval: pollInterval\n      } : false\n    });\n    let chain = Promise.resolve();\n    watcher.on(\"change\", async file => {\n      if (contextDependencies.has(file)) {\n        env.DEBUG && console.time(\"Resolve config\");\n        context = null;\n        config = refreshConfig(configPath);\n        env.DEBUG && console.timeEnd(\"Resolve config\");\n        env.DEBUG && console.time(\"Watch new files\");\n        let globs = extractFileGlobs(config);\n        watcher.add(configDependencies);\n        watcher.add(globs);\n        env.DEBUG && console.timeEnd(\"Watch new files\");\n        chain = chain.then(async () => {\n          changedContent.push(...getChangedContent(config));\n          await rebuild(config);\n        });\n      } else {\n        chain = chain.then(async () => {\n          changedContent.push({\n            content: _fs.default.readFileSync(_path.default.resolve(file), \"utf8\"),\n            extension: _path.default.extname(file).slice(1)\n          });\n          await rebuild(config);\n        });\n      }\n    });\n    watcher.on(\"add\", async file => {\n      chain = chain.then(async () => {\n        changedContent.push({\n          content: _fs.default.readFileSync(_path.default.resolve(file), \"utf8\"),\n          extension: _path.default.extname(file).slice(1)\n        });\n        await rebuild(config);\n      });\n    });\n    chain = chain.then(() => {\n      changedContent.push(...getChangedContent(config));\n      return rebuild(config);\n    });\n  }\n\n  if (shouldWatch) {\n    /* Abort the watcher if stdin is closed to avoid zombie processes */\n    if (process.stdin.isTTY) {\n      process.stdin.on(\"end\", () => process.exit(0));\n      process.stdin.resume();\n    }\n\n    startWatcher();\n  } else {\n    buildOnce();\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_indexJs","require","_chokidar","_interopRequireDefault","_path","_arg","_fs","_postcssLoadConfig","_lilconfig","_plugins","_options","_processTailwindFeatures","_resolveConfig","_fastGlob","_getModuleDependencies","_log","_packageJson","_normalizePath","_validateConfigJs","obj","__esModule","default","env","DEBUG","process","undefined","isESM","pkgPath","resolve","pkg","JSON","parse","readFileSync","type","err","configs","tailwind","postcss","indentRecursive","node","indent","each","child","i","raws","before","trim","includes","repeat","after","formatNodes","root","first","outputFile","file","contents","existsSync","promises","readFile","writeFile","drainStdin","Promise","reject","result","stdin","on","chunk","help","message","usage","commands","options","console","log","name","version","msg","split","length","example","command","groupedOptions","key","entries","flags","push","description","deprecated","values","slice","reverse","join","padEnd","oneOf","assign","option","parsed","Error","manualParsing","loadPostcss","lazyPostcss","init","run","args","Boolean","build","String","sharedFlags","stdout","isTTY","argv","every","flag","keys","filter","map","exit","arg","startsWith","fromEntries","_key","ref","permissive","flagName","handler","offset","splice","unshift","code","messages","tailwindConfigLocation","basename","stubFile","__dirname","replace","writeFileSync","postcssConfigLocation","stubFile1","input","output","shouldWatch","shouldPoll","shouldCoalesceWriteEvents","platform","includePostCss","pollInterval","error","configPath","defaultPath","loadPostCssPlugins","customPostCssPath","config","lilconfig","load","plugins","configPlugins","configPluginTailwindIdx","findIndex","plugin","postcssPlugin","beforePlugins","afterPlugins","loadBuiltinPostcssPlugins","IMPORT_COMMENT","walkAtRules","rule","params","comment","text","remove","lazyPostcssImport","walkComments","atRule","resolveConfig","warn","files","resolvedConfig","content","validateConfig","resolvedConfig1","extractFileGlobs","glob","extractRawContent","getChangedContent","changedContent","globs","sync","extension","extname","raw","buildOnce","tailwindPlugin","Once","createContext","postcssOptions","lazyAutoprefixer","preset","cssDeclarationSorter","lazyCssnano","processor","processCSS","css","start","hrtime","bigint","then","mkdir","dirname","recursive","from","to","write","all","toString","end","BigInt","context","startWatcher","configDependencies","contextDependencies","Set","watcher","refreshConfig","time","cache","dependency","add","timeEnd","rebuild","tailwindPluginIdx","indexOf","copy","catch","watch","usePolling","interval","ignoreInitial","awaitWriteFinish","stabilityThreshold","chain","has","resume"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/lib/cli.js"],"sourcesContent":["#!/usr/bin/env node\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nconst _indexJs = require(\"../peers/index.js\");\nconst _chokidar = /*#__PURE__*/ _interopRequireDefault(require(\"chokidar\"));\nconst _path = /*#__PURE__*/ _interopRequireDefault(require(\"path\"));\nconst _arg = /*#__PURE__*/ _interopRequireDefault(require(\"arg\"));\nconst _fs = /*#__PURE__*/ _interopRequireDefault(require(\"fs\"));\nconst _postcssLoadConfig = /*#__PURE__*/ _interopRequireDefault(require(\"postcss-load-config\"));\nconst _lilconfig = require(\"lilconfig\");\nconst _plugins = /*#__PURE__*/ _interopRequireDefault(require(\"postcss-load-config/src/plugins\" // Little bit scary, looking at private/internal API\n));\nconst _options = /*#__PURE__*/ _interopRequireDefault(require(\"postcss-load-config/src/options\" // Little bit scary, looking at private/internal API\n));\nconst _processTailwindFeatures = /*#__PURE__*/ _interopRequireDefault(require(\"./processTailwindFeatures\"));\nconst _resolveConfig = /*#__PURE__*/ _interopRequireDefault(require(\"../resolveConfig\"));\nconst _fastGlob = /*#__PURE__*/ _interopRequireDefault(require(\"fast-glob\"));\nconst _getModuleDependencies = /*#__PURE__*/ _interopRequireDefault(require(\"./lib/getModuleDependencies\"));\nconst _log = /*#__PURE__*/ _interopRequireDefault(require(\"./util/log\"));\nconst _packageJson = /*#__PURE__*/ _interopRequireDefault(require(\"../package.json\"));\nconst _normalizePath = /*#__PURE__*/ _interopRequireDefault(require(\"normalize-path\"));\nconst _validateConfigJs = require(\"./util/validateConfig.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nlet env = {\n    DEBUG: process.env.DEBUG !== undefined && process.env.DEBUG !== \"0\"\n};\nfunction isESM() {\n    const pkgPath = _path.default.resolve(\"./package.json\");\n    try {\n        let pkg = JSON.parse(_fs.default.readFileSync(pkgPath, \"utf8\"));\n        return pkg.type && pkg.type === \"module\";\n    } catch (err) {\n        return false;\n    }\n}\nlet configs = isESM() ? {\n    tailwind: \"tailwind.config.cjs\",\n    postcss: \"postcss.config.cjs\"\n} : {\n    tailwind: \"tailwind.config.js\",\n    postcss: \"postcss.config.js\"\n};\n// ---\nfunction indentRecursive(node, indent = 0) {\n    node.each && node.each((child, i)=>{\n        if (!child.raws.before || !child.raws.before.trim() || child.raws.before.includes(\"\\n\")) {\n            child.raws.before = `\\n${node.type !== \"rule\" && i > 0 ? \"\\n\" : \"\"}${\"  \".repeat(indent)}`;\n        }\n        child.raws.after = `\\n${\"  \".repeat(indent)}`;\n        indentRecursive(child, indent + 1);\n    });\n}\nfunction formatNodes(root) {\n    indentRecursive(root);\n    if (root.first) {\n        root.first.raws.before = \"\";\n    }\n}\nasync function outputFile(file, contents) {\n    if (_fs.default.existsSync(file) && await _fs.default.promises.readFile(file, \"utf8\") === contents) {\n        return; // Skip writing the file\n    }\n    // Write the file\n    await _fs.default.promises.writeFile(file, contents, \"utf8\");\n}\nfunction drainStdin() {\n    return new Promise((resolve, reject)=>{\n        let result = \"\";\n        process.stdin.on(\"data\", (chunk)=>{\n            result += chunk;\n        });\n        process.stdin.on(\"end\", ()=>resolve(result));\n        process.stdin.on(\"error\", (err)=>reject(err));\n    });\n}\nfunction help({ message , usage , commands , options  }) {\n    let indent = 2;\n    // Render header\n    console.log();\n    console.log(`${_packageJson.default.name} v${_packageJson.default.version}`);\n    // Render message\n    if (message) {\n        console.log();\n        for (let msg of message.split(\"\\n\")){\n            console.log(msg);\n        }\n    }\n    // Render usage\n    if (usage && usage.length > 0) {\n        console.log();\n        console.log(\"Usage:\");\n        for (let example of usage){\n            console.log(\" \".repeat(indent), example);\n        }\n    }\n    // Render commands\n    if (commands && commands.length > 0) {\n        console.log();\n        console.log(\"Commands:\");\n        for (let command of commands){\n            console.log(\" \".repeat(indent), command);\n        }\n    }\n    // Render options\n    if (options) {\n        let groupedOptions = {};\n        for (let [key, value] of Object.entries(options)){\n            if (typeof value === \"object\") {\n                groupedOptions[key] = {\n                    ...value,\n                    flags: [\n                        key\n                    ]\n                };\n            } else {\n                groupedOptions[value].flags.push(key);\n            }\n        }\n        console.log();\n        console.log(\"Options:\");\n        for (let { flags , description , deprecated  } of Object.values(groupedOptions)){\n            if (deprecated) continue;\n            if (flags.length === 1) {\n                console.log(\" \".repeat(indent + 4 /* 4 = \"-i, \".length */ ), flags.slice().reverse().join(\", \").padEnd(20, \" \"), description);\n            } else {\n                console.log(\" \".repeat(indent), flags.slice().reverse().join(\", \").padEnd(24, \" \"), description);\n            }\n        }\n    }\n    console.log();\n}\nfunction oneOf(...options) {\n    return Object.assign((value = true)=>{\n        for (let option of options){\n            let parsed = option(value);\n            if (parsed === value) {\n                return parsed;\n            }\n        }\n        throw new Error(\"...\");\n    }, {\n        manualParsing: true\n    });\n}\nfunction loadPostcss() {\n    // Try to load a local `postcss` version first\n    try {\n        return require(\"postcss\");\n    } catch  {}\n    return (0, _indexJs.lazyPostcss)();\n}\nlet commands = {\n    init: {\n        run: init,\n        args: {\n            \"--full\": {\n                type: Boolean,\n                description: `Initialize a full \\`${configs.tailwind}\\` file`\n            },\n            \"--postcss\": {\n                type: Boolean,\n                description: `Initialize a \\`${configs.postcss}\\` file`\n            },\n            \"-f\": \"--full\",\n            \"-p\": \"--postcss\"\n        }\n    },\n    build: {\n        run: build,\n        args: {\n            \"--input\": {\n                type: String,\n                description: \"Input file\"\n            },\n            \"--output\": {\n                type: String,\n                description: \"Output file\"\n            },\n            \"--watch\": {\n                type: Boolean,\n                description: \"Watch for changes and rebuild as needed\"\n            },\n            \"--poll\": {\n                type: Boolean,\n                description: \"Use polling instead of filesystem events when watching\"\n            },\n            \"--content\": {\n                type: String,\n                description: \"Content paths to use for removing unused classes\"\n            },\n            \"--purge\": {\n                type: String,\n                deprecated: true\n            },\n            \"--postcss\": {\n                type: oneOf(String, Boolean),\n                description: \"Load custom PostCSS configuration\"\n            },\n            \"--minify\": {\n                type: Boolean,\n                description: \"Minify the output\"\n            },\n            \"--config\": {\n                type: String,\n                description: \"Path to a custom config file\"\n            },\n            \"--no-autoprefixer\": {\n                type: Boolean,\n                description: \"Disable autoprefixer\"\n            },\n            \"-c\": \"--config\",\n            \"-i\": \"--input\",\n            \"-o\": \"--output\",\n            \"-m\": \"--minify\",\n            \"-w\": \"--watch\",\n            \"-p\": \"--poll\"\n        }\n    }\n};\nlet sharedFlags = {\n    \"--help\": {\n        type: Boolean,\n        description: \"Display usage information\"\n    },\n    \"-h\": \"--help\"\n};\nif (process.stdout.isTTY /* Detect redirecting output to a file */  && (process.argv[2] === undefined || process.argv.slice(2).every((flag)=>sharedFlags[flag] !== undefined))) {\n    help({\n        usage: [\n            \"tailwindcss [--input input.css] [--output output.css] [--watch] [options...]\",\n            \"tailwindcss init [--full] [--postcss] [options...]\", \n        ],\n        commands: Object.keys(commands).filter((command)=>command !== \"build\").map((command)=>`${command} [options]`),\n        options: {\n            ...commands.build.args,\n            ...sharedFlags\n        }\n    });\n    process.exit(0);\n}\nlet command = ((arg = \"\")=>arg.startsWith(\"-\") ? undefined : arg)(process.argv[2]) || \"build\";\nif (commands[command] === undefined) {\n    if (_fs.default.existsSync(_path.default.resolve(command))) {\n        // TODO: Deprecate this in future versions\n        // Check if non-existing command, might be a file.\n        command = \"build\";\n    } else {\n        help({\n            message: `Invalid command: ${command}`,\n            usage: [\n                \"tailwindcss <command> [options]\"\n            ],\n            commands: Object.keys(commands).filter((command)=>command !== \"build\").map((command)=>`${command} [options]`),\n            options: sharedFlags\n        });\n        process.exit(1);\n    }\n}\n// Execute command\nlet { args: flags , run  } = commands[command];\nlet args = (()=>{\n    try {\n        let result = (0, _arg.default)(Object.fromEntries(Object.entries({\n            ...flags,\n            ...sharedFlags\n        }).filter(([_key, value])=>{\n            var ref;\n            return !(value === null || value === void 0 ? void 0 : (ref = value.type) === null || ref === void 0 ? void 0 : ref.manualParsing);\n        }).map(([key, value])=>[\n                key,\n                typeof value === \"object\" ? value.type : value\n            ])), {\n            permissive: true\n        });\n        // Manual parsing of flags to allow for special flags like oneOf(Boolean, String)\n        for(let i = result[\"_\"].length - 1; i >= 0; --i){\n            let flag = result[\"_\"][i];\n            if (!flag.startsWith(\"-\")) continue;\n            let flagName = flag;\n            let handler = flags[flag];\n            // Resolve flagName & handler\n            while(typeof handler === \"string\"){\n                flagName = handler;\n                handler = flags[handler];\n            }\n            if (!handler) continue;\n            let args = [];\n            let offset = i + 1;\n            // Parse args for current flag\n            while(result[\"_\"][offset] && !result[\"_\"][offset].startsWith(\"-\")){\n                args.push(result[\"_\"][offset++]);\n            }\n            // Cleanup manually parsed flags + args\n            result[\"_\"].splice(i, 1 + args.length);\n            // Set the resolved value in the `result` object\n            result[flagName] = handler.type(args.length === 0 ? undefined : args.length === 1 ? args[0] : args, flagName);\n        }\n        // Ensure that the `command` is always the first argument in the `args`.\n        // This is important so that we don't have to check if a default command\n        // (build) was used or not from within each plugin.\n        //\n        // E.g.: tailwindcss input.css -> _: ['build', 'input.css']\n        // E.g.: tailwindcss build input.css -> _: ['build', 'input.css']\n        if (result[\"_\"][0] !== command) {\n            result[\"_\"].unshift(command);\n        }\n        return result;\n    } catch (err) {\n        if (err.code === \"ARG_UNKNOWN_OPTION\") {\n            help({\n                message: err.message,\n                usage: [\n                    \"tailwindcss <command> [options]\"\n                ],\n                options: sharedFlags\n            });\n            process.exit(1);\n        }\n        throw err;\n    }\n})();\nif (args[\"--help\"]) {\n    help({\n        options: {\n            ...flags,\n            ...sharedFlags\n        },\n        usage: [\n            `tailwindcss ${command} [options]`\n        ]\n    });\n    process.exit(0);\n}\nrun();\n// ---\nfunction init() {\n    let messages = [];\n    var ref;\n    let tailwindConfigLocation = _path.default.resolve((ref = args[\"_\"][1]) !== null && ref !== void 0 ? ref : `./${configs.tailwind}`);\n    if (_fs.default.existsSync(tailwindConfigLocation)) {\n        messages.push(`${_path.default.basename(tailwindConfigLocation)} already exists.`);\n    } else {\n        let stubFile = _fs.default.readFileSync(args[\"--full\"] ? _path.default.resolve(__dirname, \"../stubs/defaultConfig.stub.js\") : _path.default.resolve(__dirname, \"../stubs/simpleConfig.stub.js\"), \"utf8\");\n        // Change colors import\n        stubFile = stubFile.replace(\"../colors\", \"tailwindcss/colors\");\n        _fs.default.writeFileSync(tailwindConfigLocation, stubFile, \"utf8\");\n        messages.push(`Created Tailwind CSS config file: ${_path.default.basename(tailwindConfigLocation)}`);\n    }\n    if (args[\"--postcss\"]) {\n        let postcssConfigLocation = _path.default.resolve(`./${configs.postcss}`);\n        if (_fs.default.existsSync(postcssConfigLocation)) {\n            messages.push(`${_path.default.basename(postcssConfigLocation)} already exists.`);\n        } else {\n            let stubFile1 = _fs.default.readFileSync(_path.default.resolve(__dirname, \"../stubs/defaultPostCssConfig.stub.js\"), \"utf8\");\n            _fs.default.writeFileSync(postcssConfigLocation, stubFile1, \"utf8\");\n            messages.push(`Created PostCSS config file: ${_path.default.basename(postcssConfigLocation)}`);\n        }\n    }\n    if (messages.length > 0) {\n        console.log();\n        for (let message of messages){\n            console.log(message);\n        }\n    }\n}\nasync function build() {\n    let input = args[\"--input\"];\n    let output = args[\"--output\"];\n    let shouldWatch = args[\"--watch\"];\n    let shouldPoll = args[\"--poll\"];\n    let shouldCoalesceWriteEvents = shouldPoll || process.platform === \"win32\";\n    let includePostCss = args[\"--postcss\"];\n    // Polling interval in milliseconds\n    // Used only when polling or coalescing add/change events on Windows\n    let pollInterval = 10;\n    // TODO: Deprecate this in future versions\n    if (!input && args[\"_\"][1]) {\n        console.error(\"[deprecation] Running tailwindcss without -i, please provide an input file.\");\n        input = args[\"--input\"] = args[\"_\"][1];\n    }\n    if (input && input !== \"-\" && !_fs.default.existsSync(input = _path.default.resolve(input))) {\n        console.error(`Specified input file ${args[\"--input\"]} does not exist.`);\n        process.exit(9);\n    }\n    if (args[\"--config\"] && !_fs.default.existsSync(args[\"--config\"] = _path.default.resolve(args[\"--config\"]))) {\n        console.error(`Specified config file ${args[\"--config\"]} does not exist.`);\n        process.exit(9);\n    }\n    let configPath = args[\"--config\"] ? args[\"--config\"] : ((defaultPath)=>_fs.default.existsSync(defaultPath) ? defaultPath : null)(_path.default.resolve(`./${configs.tailwind}`));\n    async function loadPostCssPlugins() {\n        let customPostCssPath = typeof args[\"--postcss\"] === \"string\" ? args[\"--postcss\"] : undefined;\n        let config = customPostCssPath ? await (async ()=>{\n            let file = _path.default.resolve(customPostCssPath);\n            // Implementation, see: https://unpkg.com/browse/postcss-load-config@3.1.0/src/index.js\n            let { config ={}  } = await (0, _lilconfig.lilconfig)(\"postcss\").load(file);\n            if (typeof config === \"function\") {\n                config = config();\n            } else {\n                config = Object.assign({}, config);\n            }\n            if (!config.plugins) {\n                config.plugins = [];\n            }\n            return {\n                file,\n                plugins: (0, _plugins.default)(config, file),\n                options: (0, _options.default)(config, file)\n            };\n        })() : await (0, _postcssLoadConfig.default)();\n        let configPlugins = config.plugins;\n        let configPluginTailwindIdx = configPlugins.findIndex((plugin)=>{\n            if (typeof plugin === \"function\" && plugin.name === \"tailwindcss\") {\n                return true;\n            }\n            if (typeof plugin === \"object\" && plugin !== null && plugin.postcssPlugin === \"tailwindcss\") {\n                return true;\n            }\n            return false;\n        });\n        let beforePlugins = configPluginTailwindIdx === -1 ? [] : configPlugins.slice(0, configPluginTailwindIdx);\n        let afterPlugins = configPluginTailwindIdx === -1 ? configPlugins : configPlugins.slice(configPluginTailwindIdx + 1);\n        return [\n            beforePlugins,\n            afterPlugins,\n            config.options\n        ];\n    }\n    function loadBuiltinPostcssPlugins() {\n        let postcss = loadPostcss();\n        let IMPORT_COMMENT = \"__TAILWIND_RESTORE_IMPORT__: \";\n        return [\n            [\n                (root)=>{\n                    root.walkAtRules(\"import\", (rule)=>{\n                        if (rule.params.slice(1).startsWith(\"tailwindcss/\")) {\n                            rule.after(postcss.comment({\n                                text: IMPORT_COMMENT + rule.params\n                            }));\n                            rule.remove();\n                        }\n                    });\n                },\n                (()=>{\n                    try {\n                        return require(\"postcss-import\");\n                    } catch  {}\n                    return (0, _indexJs.lazyPostcssImport)();\n                })(),\n                (root)=>{\n                    root.walkComments((rule)=>{\n                        if (rule.text.startsWith(IMPORT_COMMENT)) {\n                            rule.after(postcss.atRule({\n                                name: \"import\",\n                                params: rule.text.replace(IMPORT_COMMENT, \"\")\n                            }));\n                            rule.remove();\n                        }\n                    });\n                }, \n            ],\n            [],\n            {}, \n        ];\n    }\n    function resolveConfig() {\n        let config = configPath ? require(configPath) : {};\n        if (args[\"--purge\"]) {\n            _log.default.warn(\"purge-flag-deprecated\", [\n                \"The `--purge` flag has been deprecated.\",\n                \"Please use `--content` instead.\", \n            ]);\n            if (!args[\"--content\"]) {\n                args[\"--content\"] = args[\"--purge\"];\n            }\n        }\n        if (args[\"--content\"]) {\n            let files = args[\"--content\"].split(/(?<!{[^}]+),/);\n            let resolvedConfig = (0, _resolveConfig.default)(config, {\n                content: {\n                    files\n                }\n            });\n            resolvedConfig.content.files = files;\n            resolvedConfig = (0, _validateConfigJs.validateConfig)(resolvedConfig);\n            return resolvedConfig;\n        }\n        let resolvedConfig1 = (0, _resolveConfig.default)(config);\n        resolvedConfig1 = (0, _validateConfigJs.validateConfig)(resolvedConfig1);\n        return resolvedConfig1;\n    }\n    function extractFileGlobs(config) {\n        return config.content.files.filter((file)=>{\n            // Strings in this case are files / globs. If it is something else,\n            // like an object it's probably a raw content object. But this object\n            // is not watchable, so let's remove it.\n            return typeof file === \"string\";\n        }).map((glob)=>(0, _normalizePath.default)(glob));\n    }\n    function extractRawContent(config) {\n        return config.content.files.filter((file)=>{\n            return typeof file === \"object\" && file !== null;\n        });\n    }\n    function getChangedContent(config) {\n        let changedContent = [];\n        // Resolve globs from the content config\n        let globs = extractFileGlobs(config);\n        let files = _fastGlob.default.sync(globs);\n        for (let file of files){\n            changedContent.push({\n                content: _fs.default.readFileSync(_path.default.resolve(file), \"utf8\"),\n                extension: _path.default.extname(file).slice(1)\n            });\n        }\n        // Resolve raw content in the tailwind config\n        for (let { raw: content , extension =\"html\"  } of extractRawContent(config)){\n            changedContent.push({\n                content,\n                extension\n            });\n        }\n        return changedContent;\n    }\n    async function buildOnce() {\n        let config = resolveConfig();\n        let changedContent = getChangedContent(config);\n        let tailwindPlugin = ()=>{\n            return {\n                postcssPlugin: \"tailwindcss\",\n                Once (root, { result  }) {\n                    (0, _processTailwindFeatures.default)(({ createContext  })=>{\n                        return ()=>{\n                            return createContext(config, changedContent);\n                        };\n                    })(root, result);\n                }\n            };\n        };\n        tailwindPlugin.postcss = true;\n        let [beforePlugins, afterPlugins, postcssOptions] = includePostCss ? await loadPostCssPlugins() : loadBuiltinPostcssPlugins();\n        let plugins = [\n            ...beforePlugins,\n            tailwindPlugin,\n            !args[\"--minify\"] && formatNodes,\n            ...afterPlugins,\n            !args[\"--no-autoprefixer\"] && (()=>{\n                // Try to load a local `autoprefixer` version first\n                try {\n                    return require(\"autoprefixer\");\n                } catch  {}\n                return (0, _indexJs.lazyAutoprefixer)();\n            })(),\n            args[\"--minify\"] && (()=>{\n                let options = {\n                    preset: [\n                        \"default\",\n                        {\n                            cssDeclarationSorter: false\n                        }\n                    ]\n                };\n                // Try to load a local `cssnano` version first\n                try {\n                    return require(\"cssnano\");\n                } catch  {}\n                return (0, _indexJs.lazyCssnano)()(options);\n            })(), \n        ].filter(Boolean);\n        let postcss = loadPostcss();\n        let processor = postcss(plugins);\n        function processCSS(css) {\n            let start = process.hrtime.bigint();\n            return Promise.resolve().then(()=>output ? _fs.default.promises.mkdir(_path.default.dirname(output), {\n                    recursive: true\n                }) : null).then(()=>processor.process(css, {\n                    ...postcssOptions,\n                    from: input,\n                    to: output\n                })).then((result)=>{\n                if (!output) {\n                    return process.stdout.write(result.css);\n                }\n                return Promise.all([\n                    outputFile(output, result.css),\n                    result.map && outputFile(output + \".map\", result.map.toString()), \n                ].filter(Boolean));\n            }).then(()=>{\n                let end = process.hrtime.bigint();\n                console.error();\n                console.error(\"Done in\", (end - start) / BigInt(1e6) + \"ms.\");\n            });\n        }\n        let css = await (()=>{\n            // Piping in data, let's drain the stdin\n            if (input === \"-\") {\n                return drainStdin();\n            }\n            // Input file has been provided\n            if (input) {\n                return _fs.default.readFileSync(_path.default.resolve(input), \"utf8\");\n            }\n            // No input file provided, fallback to default atrules\n            return \"@tailwind base; @tailwind components; @tailwind utilities\";\n        })();\n        return processCSS(css);\n    }\n    let context = null;\n    async function startWatcher() {\n        let changedContent = [];\n        let configDependencies = [];\n        let contextDependencies = new Set();\n        let watcher = null;\n        function refreshConfig() {\n            env.DEBUG && console.time(\"Module dependencies\");\n            for (let file of configDependencies){\n                delete require.cache[require.resolve(file)];\n            }\n            if (configPath) {\n                configDependencies = (0, _getModuleDependencies.default)(configPath).map(({ file  })=>file);\n                for (let dependency of configDependencies){\n                    contextDependencies.add(dependency);\n                }\n            }\n            env.DEBUG && console.timeEnd(\"Module dependencies\");\n            return resolveConfig();\n        }\n        let [beforePlugins, afterPlugins] = includePostCss ? await loadPostCssPlugins() : loadBuiltinPostcssPlugins();\n        let plugins = [\n            ...beforePlugins,\n            \"__TAILWIND_PLUGIN_POSITION__\",\n            !args[\"--minify\"] && formatNodes,\n            ...afterPlugins,\n            !args[\"--no-autoprefixer\"] && (()=>{\n                // Try to load a local `autoprefixer` version first\n                try {\n                    return require(\"autoprefixer\");\n                } catch  {}\n                return (0, _indexJs.lazyAutoprefixer)();\n            })(),\n            args[\"--minify\"] && (()=>{\n                let options = {\n                    preset: [\n                        \"default\",\n                        {\n                            cssDeclarationSorter: false\n                        }\n                    ]\n                };\n                // Try to load a local `cssnano` version first\n                try {\n                    return require(\"cssnano\");\n                } catch  {}\n                return (0, _indexJs.lazyCssnano)()(options);\n            })(), \n        ].filter(Boolean);\n        async function rebuild(config) {\n            env.DEBUG && console.time(\"Finished in\");\n            let tailwindPlugin = ()=>{\n                return {\n                    postcssPlugin: \"tailwindcss\",\n                    Once (root, { result  }) {\n                        env.DEBUG && console.time(\"Compiling CSS\");\n                        (0, _processTailwindFeatures.default)(({ createContext  })=>{\n                            console.error();\n                            console.error(\"Rebuilding...\");\n                            return ()=>{\n                                if (context !== null) {\n                                    context.changedContent = changedContent.splice(0);\n                                    return context;\n                                }\n                                env.DEBUG && console.time(\"Creating context\");\n                                context = createContext(config, changedContent.splice(0));\n                                env.DEBUG && console.timeEnd(\"Creating context\");\n                                return context;\n                            };\n                        })(root, result);\n                        env.DEBUG && console.timeEnd(\"Compiling CSS\");\n                    }\n                };\n            };\n            tailwindPlugin.postcss = true;\n            let tailwindPluginIdx = plugins.indexOf(\"__TAILWIND_PLUGIN_POSITION__\");\n            let copy = plugins.slice();\n            copy.splice(tailwindPluginIdx, 1, tailwindPlugin);\n            let postcss = loadPostcss();\n            let processor = postcss(copy);\n            function processCSS(css) {\n                let start = process.hrtime.bigint();\n                return Promise.resolve().then(()=>output ? _fs.default.promises.mkdir(_path.default.dirname(output), {\n                        recursive: true\n                    }) : null).then(()=>processor.process(css, {\n                        from: input,\n                        to: output\n                    })).then(async (result)=>{\n                    for (let message of result.messages){\n                        if (message.type === \"dependency\") {\n                            contextDependencies.add(message.file);\n                        }\n                    }\n                    watcher.add([\n                        ...contextDependencies\n                    ]);\n                    if (!output) {\n                        return process.stdout.write(result.css);\n                    }\n                    return Promise.all([\n                        outputFile(output, result.css),\n                        result.map && outputFile(output + \".map\", result.map.toString()), \n                    ].filter(Boolean));\n                }).then(()=>{\n                    let end = process.hrtime.bigint();\n                    console.error(\"Done in\", (end - start) / BigInt(1e6) + \"ms.\");\n                }).catch((err)=>{\n                    if (err.name === \"CssSyntaxError\") {\n                        console.error(err.toString());\n                    } else {\n                        console.error(err);\n                    }\n                });\n            }\n            let css = await (()=>{\n                // Piping in data, let's drain the stdin\n                if (input === \"-\") {\n                    return drainStdin();\n                }\n                // Input file has been provided\n                if (input) {\n                    return _fs.default.readFileSync(_path.default.resolve(input), \"utf8\");\n                }\n                // No input file provided, fallback to default atrules\n                return \"@tailwind base; @tailwind components; @tailwind utilities\";\n            })();\n            let result = await processCSS(css);\n            env.DEBUG && console.timeEnd(\"Finished in\");\n            return result;\n        }\n        let config = refreshConfig(configPath);\n        if (input) {\n            contextDependencies.add(_path.default.resolve(input));\n        }\n        watcher = _chokidar.default.watch([\n            ...contextDependencies,\n            ...extractFileGlobs(config)\n        ], {\n            usePolling: shouldPoll,\n            interval: shouldPoll ? pollInterval : undefined,\n            ignoreInitial: true,\n            awaitWriteFinish: shouldCoalesceWriteEvents ? {\n                stabilityThreshold: 50,\n                pollInterval: pollInterval\n            } : false\n        });\n        let chain = Promise.resolve();\n        watcher.on(\"change\", async (file)=>{\n            if (contextDependencies.has(file)) {\n                env.DEBUG && console.time(\"Resolve config\");\n                context = null;\n                config = refreshConfig(configPath);\n                env.DEBUG && console.timeEnd(\"Resolve config\");\n                env.DEBUG && console.time(\"Watch new files\");\n                let globs = extractFileGlobs(config);\n                watcher.add(configDependencies);\n                watcher.add(globs);\n                env.DEBUG && console.timeEnd(\"Watch new files\");\n                chain = chain.then(async ()=>{\n                    changedContent.push(...getChangedContent(config));\n                    await rebuild(config);\n                });\n            } else {\n                chain = chain.then(async ()=>{\n                    changedContent.push({\n                        content: _fs.default.readFileSync(_path.default.resolve(file), \"utf8\"),\n                        extension: _path.default.extname(file).slice(1)\n                    });\n                    await rebuild(config);\n                });\n            }\n        });\n        watcher.on(\"add\", async (file)=>{\n            chain = chain.then(async ()=>{\n                changedContent.push({\n                    content: _fs.default.readFileSync(_path.default.resolve(file), \"utf8\"),\n                    extension: _path.default.extname(file).slice(1)\n                });\n                await rebuild(config);\n            });\n        });\n        chain = chain.then(()=>{\n            changedContent.push(...getChangedContent(config));\n            return rebuild(config);\n        });\n    }\n    if (shouldWatch) {\n        /* Abort the watcher if stdin is closed to avoid zombie processes */ if (process.stdin.isTTY) {\n            process.stdin.on(\"end\", ()=>process.exit(0));\n            process.stdin.resume();\n        }\n        startWatcher();\n    } else {\n        buildOnce();\n    }\n}\n"],"mappings":"AAAA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EACzCC,KAAK,EAAE;AADkC,CAA7C;;AAGA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB;;AACA,MAAMC,SAAS,GAAG,aAAcC,sBAAsB,CAACF,OAAO,CAAC,UAAD,CAAR,CAAtD;;AACA,MAAMG,KAAK,GAAG,aAAcD,sBAAsB,CAACF,OAAO,CAAC,MAAD,CAAR,CAAlD;;AACA,MAAMI,IAAI,GAAG,aAAcF,sBAAsB,CAACF,OAAO,CAAC,KAAD,CAAR,CAAjD;;AACA,MAAMK,GAAG,GAAG,aAAcH,sBAAsB,CAACF,OAAO,CAAC,IAAD,CAAR,CAAhD;;AACA,MAAMM,kBAAkB,GAAG,aAAcJ,sBAAsB,CAACF,OAAO,CAAC,qBAAD,CAAR,CAA/D;;AACA,MAAMO,UAAU,GAAGP,OAAO,CAAC,WAAD,CAA1B;;AACA,MAAMQ,QAAQ,GAAG,aAAcN,sBAAsB,CAACF,OAAO,CAAC,iCAAD,CAAmC;AAAnC,CAAR,CAArD;;AAEA,MAAMS,QAAQ,GAAG,aAAcP,sBAAsB,CAACF,OAAO,CAAC,iCAAD,CAAmC;AAAnC,CAAR,CAArD;;AAEA,MAAMU,wBAAwB,GAAG,aAAcR,sBAAsB,CAACF,OAAO,CAAC,2BAAD,CAAR,CAArE;;AACA,MAAMW,cAAc,GAAG,aAAcT,sBAAsB,CAACF,OAAO,CAAC,kBAAD,CAAR,CAA3D;;AACA,MAAMY,SAAS,GAAG,aAAcV,sBAAsB,CAACF,OAAO,CAAC,WAAD,CAAR,CAAtD;;AACA,MAAMa,sBAAsB,GAAG,aAAcX,sBAAsB,CAACF,OAAO,CAAC,6BAAD,CAAR,CAAnE;;AACA,MAAMc,IAAI,GAAG,aAAcZ,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAjD;;AACA,MAAMe,YAAY,GAAG,aAAcb,sBAAsB,CAACF,OAAO,CAAC,iBAAD,CAAR,CAAzD;;AACA,MAAMgB,cAAc,GAAG,aAAcd,sBAAsB,CAACF,OAAO,CAAC,gBAAD,CAAR,CAA3D;;AACA,MAAMiB,iBAAiB,GAAGjB,OAAO,CAAC,0BAAD,CAAjC;;AACA,SAASE,sBAAT,CAAgCgB,GAAhC,EAAqC;EACjC,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IACjCE,OAAO,EAAEF;EADwB,CAArC;AAGH;;AACD,IAAIG,GAAG,GAAG;EACNC,KAAK,EAAEC,OAAO,CAACF,GAAR,CAAYC,KAAZ,KAAsBE,SAAtB,IAAmCD,OAAO,CAACF,GAAR,CAAYC,KAAZ,KAAsB;AAD1D,CAAV;;AAGA,SAASG,KAAT,GAAiB;EACb,MAAMC,OAAO,GAAGvB,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsB,gBAAtB,CAAhB;;EACA,IAAI;IACA,IAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWzB,GAAG,CAACe,OAAJ,CAAYW,YAAZ,CAAyBL,OAAzB,EAAkC,MAAlC,CAAX,CAAV;IACA,OAAOE,GAAG,CAACI,IAAJ,IAAYJ,GAAG,CAACI,IAAJ,KAAa,QAAhC;EACH,CAHD,CAGE,OAAOC,GAAP,EAAY;IACV,OAAO,KAAP;EACH;AACJ;;AACD,IAAIC,OAAO,GAAGT,KAAK,KAAK;EACpBU,QAAQ,EAAE,qBADU;EAEpBC,OAAO,EAAE;AAFW,CAAL,GAGf;EACAD,QAAQ,EAAE,oBADV;EAEAC,OAAO,EAAE;AAFT,CAHJ,C,CAOA;;AACA,SAASC,eAAT,CAAyBC,IAAzB,EAA2C;EAAA,IAAZC,MAAY,uEAAH,CAAG;EACvCD,IAAI,CAACE,IAAL,IAAaF,IAAI,CAACE,IAAL,CAAU,CAACC,KAAD,EAAQC,CAAR,KAAY;IAC/B,IAAI,CAACD,KAAK,CAACE,IAAN,CAAWC,MAAZ,IAAsB,CAACH,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBC,IAAlB,EAAvB,IAAmDJ,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBE,QAAlB,CAA2B,IAA3B,CAAvD,EAAyF;MACrFL,KAAK,CAACE,IAAN,CAAWC,MAAX,GAAqB,KAAIN,IAAI,CAACN,IAAL,KAAc,MAAd,IAAwBU,CAAC,GAAG,CAA5B,GAAgC,IAAhC,GAAuC,EAAG,GAAE,KAAKK,MAAL,CAAYR,MAAZ,CAAoB,EAAzF;IACH;;IACDE,KAAK,CAACE,IAAN,CAAWK,KAAX,GAAoB,KAAI,KAAKD,MAAL,CAAYR,MAAZ,CAAoB,EAA5C;IACAF,eAAe,CAACI,KAAD,EAAQF,MAAM,GAAG,CAAjB,CAAf;EACH,CANY,CAAb;AAOH;;AACD,SAASU,WAAT,CAAqBC,IAArB,EAA2B;EACvBb,eAAe,CAACa,IAAD,CAAf;;EACA,IAAIA,IAAI,CAACC,KAAT,EAAgB;IACZD,IAAI,CAACC,KAAL,CAAWR,IAAX,CAAgBC,MAAhB,GAAyB,EAAzB;EACH;AACJ;;AACD,eAAeQ,UAAf,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0C;EACtC,IAAIjD,GAAG,CAACe,OAAJ,CAAYmC,UAAZ,CAAuBF,IAAvB,KAAgC,OAAMhD,GAAG,CAACe,OAAJ,CAAYoC,QAAZ,CAAqBC,QAArB,CAA8BJ,IAA9B,EAAoC,MAApC,CAAN,MAAsDC,QAA1F,EAAoG;IAChG,OADgG,CACxF;EACX,CAHqC,CAItC;;;EACA,MAAMjD,GAAG,CAACe,OAAJ,CAAYoC,QAAZ,CAAqBE,SAArB,CAA+BL,IAA/B,EAAqCC,QAArC,EAA+C,MAA/C,CAAN;AACH;;AACD,SAASK,UAAT,GAAsB;EAClB,OAAO,IAAIC,OAAJ,CAAY,CAACjC,OAAD,EAAUkC,MAAV,KAAmB;IAClC,IAAIC,MAAM,GAAG,EAAb;IACAvC,OAAO,CAACwC,KAAR,CAAcC,EAAd,CAAiB,MAAjB,EAA0BC,KAAD,IAAS;MAC9BH,MAAM,IAAIG,KAAV;IACH,CAFD;IAGA1C,OAAO,CAACwC,KAAR,CAAcC,EAAd,CAAiB,KAAjB,EAAwB,MAAIrC,OAAO,CAACmC,MAAD,CAAnC;IACAvC,OAAO,CAACwC,KAAR,CAAcC,EAAd,CAAiB,OAAjB,EAA2B/B,GAAD,IAAO4B,MAAM,CAAC5B,GAAD,CAAvC;EACH,CAPM,CAAP;AAQH;;AACD,SAASiC,IAAT,OAAyD;EAAA,IAA3C;IAAEC,OAAF;IAAYC,KAAZ;IAAoBC,QAApB;IAA+BC;EAA/B,CAA2C;EACrD,IAAI/B,MAAM,GAAG,CAAb,CADqD,CAErD;;EACAgC,OAAO,CAACC,GAAR;EACAD,OAAO,CAACC,GAAR,CAAa,GAAEzD,YAAY,CAACK,OAAb,CAAqBqD,IAAK,KAAI1D,YAAY,CAACK,OAAb,CAAqBsD,OAAQ,EAA1E,EAJqD,CAKrD;;EACA,IAAIP,OAAJ,EAAa;IACTI,OAAO,CAACC,GAAR;;IACA,KAAK,IAAIG,GAAT,IAAgBR,OAAO,CAACS,KAAR,CAAc,IAAd,CAAhB,EAAoC;MAChCL,OAAO,CAACC,GAAR,CAAYG,GAAZ;IACH;EACJ,CAXoD,CAYrD;;;EACA,IAAIP,KAAK,IAAIA,KAAK,CAACS,MAAN,GAAe,CAA5B,EAA+B;IAC3BN,OAAO,CAACC,GAAR;IACAD,OAAO,CAACC,GAAR,CAAY,QAAZ;;IACA,KAAK,IAAIM,OAAT,IAAoBV,KAApB,EAA0B;MACtBG,OAAO,CAACC,GAAR,CAAY,IAAIzB,MAAJ,CAAWR,MAAX,CAAZ,EAAgCuC,OAAhC;IACH;EACJ,CAnBoD,CAoBrD;;;EACA,IAAIT,QAAQ,IAAIA,QAAQ,CAACQ,MAAT,GAAkB,CAAlC,EAAqC;IACjCN,OAAO,CAACC,GAAR;IACAD,OAAO,CAACC,GAAR,CAAY,WAAZ;;IACA,KAAK,IAAIO,OAAT,IAAoBV,QAApB,EAA6B;MACzBE,OAAO,CAACC,GAAR,CAAY,IAAIzB,MAAJ,CAAWR,MAAX,CAAZ,EAAgCwC,OAAhC;IACH;EACJ,CA3BoD,CA4BrD;;;EACA,IAAIT,OAAJ,EAAa;IACT,IAAIU,cAAc,GAAG,EAArB;;IACA,KAAK,IAAI,CAACC,GAAD,EAAMnF,KAAN,CAAT,IAAyBH,MAAM,CAACuF,OAAP,CAAeZ,OAAf,CAAzB,EAAiD;MAC7C,IAAI,OAAOxE,KAAP,KAAiB,QAArB,EAA+B;QAC3BkF,cAAc,CAACC,GAAD,CAAd,GAAsB,EAClB,GAAGnF,KADe;UAElBqF,KAAK,EAAE,CACHF,GADG;QAFW,CAAtB;MAMH,CAPD,MAOO;QACHD,cAAc,CAAClF,KAAD,CAAd,CAAsBqF,KAAtB,CAA4BC,IAA5B,CAAiCH,GAAjC;MACH;IACJ;;IACDV,OAAO,CAACC,GAAR;IACAD,OAAO,CAACC,GAAR,CAAY,UAAZ;;IACA,KAAK,IAAI;MAAEW,KAAF;MAAUE,WAAV;MAAwBC;IAAxB,CAAT,IAAkD3F,MAAM,CAAC4F,MAAP,CAAcP,cAAd,CAAlD,EAAgF;MAC5E,IAAIM,UAAJ,EAAgB;;MAChB,IAAIH,KAAK,CAACN,MAAN,KAAiB,CAArB,EAAwB;QACpBN,OAAO,CAACC,GAAR,CAAY,IAAIzB,MAAJ,CAAWR,MAAM,GAAG;QAAE;QAAtB,CAAZ,EAA6D4C,KAAK,CAACK,KAAN,GAAcC,OAAd,GAAwBC,IAAxB,CAA6B,IAA7B,EAAmCC,MAAnC,CAA0C,EAA1C,EAA8C,GAA9C,CAA7D,EAAiHN,WAAjH;MACH,CAFD,MAEO;QACHd,OAAO,CAACC,GAAR,CAAY,IAAIzB,MAAJ,CAAWR,MAAX,CAAZ,EAAgC4C,KAAK,CAACK,KAAN,GAAcC,OAAd,GAAwBC,IAAxB,CAA6B,IAA7B,EAAmCC,MAAnC,CAA0C,EAA1C,EAA8C,GAA9C,CAAhC,EAAoFN,WAApF;MACH;IACJ;EACJ;;EACDd,OAAO,CAACC,GAAR;AACH;;AACD,SAASoB,KAAT,GAA2B;EAAA,kCAATtB,OAAS;IAATA,OAAS;EAAA;;EACvB,OAAO3E,MAAM,CAACkG,MAAP,CAAc,YAAgB;IAAA,IAAf/F,KAAe,uEAAP,IAAO;;IACjC,KAAK,IAAIgG,MAAT,IAAmBxB,OAAnB,EAA2B;MACvB,IAAIyB,MAAM,GAAGD,MAAM,CAAChG,KAAD,CAAnB;;MACA,IAAIiG,MAAM,KAAKjG,KAAf,EAAsB;QAClB,OAAOiG,MAAP;MACH;IACJ;;IACD,MAAM,IAAIC,KAAJ,CAAU,KAAV,CAAN;EACH,CARM,EAQJ;IACCC,aAAa,EAAE;EADhB,CARI,CAAP;AAWH;;AACD,SAASC,WAAT,GAAuB;EACnB;EACA,IAAI;IACA,OAAOlG,OAAO,CAAC,SAAD,CAAd;EACH,CAFD,CAEE,MAAO,CAAE;;EACX,OAAO,CAAC,GAAGD,QAAQ,CAACoG,WAAb,GAAP;AACH;;AACD,IAAI9B,QAAQ,GAAG;EACX+B,IAAI,EAAE;IACFC,GAAG,EAAED,IADH;IAEFE,IAAI,EAAE;MACF,UAAU;QACNtE,IAAI,EAAEuE,OADA;QAENlB,WAAW,EAAG,uBAAsBnD,OAAO,CAACC,QAAS;MAF/C,CADR;MAKF,aAAa;QACTH,IAAI,EAAEuE,OADG;QAETlB,WAAW,EAAG,kBAAiBnD,OAAO,CAACE,OAAQ;MAFtC,CALX;MASF,MAAM,QATJ;MAUF,MAAM;IAVJ;EAFJ,CADK;EAgBXoE,KAAK,EAAE;IACHH,GAAG,EAAEG,KADF;IAEHF,IAAI,EAAE;MACF,WAAW;QACPtE,IAAI,EAAEyE,MADC;QAEPpB,WAAW,EAAE;MAFN,CADT;MAKF,YAAY;QACRrD,IAAI,EAAEyE,MADE;QAERpB,WAAW,EAAE;MAFL,CALV;MASF,WAAW;QACPrD,IAAI,EAAEuE,OADC;QAEPlB,WAAW,EAAE;MAFN,CATT;MAaF,UAAU;QACNrD,IAAI,EAAEuE,OADA;QAENlB,WAAW,EAAE;MAFP,CAbR;MAiBF,aAAa;QACTrD,IAAI,EAAEyE,MADG;QAETpB,WAAW,EAAE;MAFJ,CAjBX;MAqBF,WAAW;QACPrD,IAAI,EAAEyE,MADC;QAEPnB,UAAU,EAAE;MAFL,CArBT;MAyBF,aAAa;QACTtD,IAAI,EAAE4D,KAAK,CAACa,MAAD,EAASF,OAAT,CADF;QAETlB,WAAW,EAAE;MAFJ,CAzBX;MA6BF,YAAY;QACRrD,IAAI,EAAEuE,OADE;QAERlB,WAAW,EAAE;MAFL,CA7BV;MAiCF,YAAY;QACRrD,IAAI,EAAEyE,MADE;QAERpB,WAAW,EAAE;MAFL,CAjCV;MAqCF,qBAAqB;QACjBrD,IAAI,EAAEuE,OADW;QAEjBlB,WAAW,EAAE;MAFI,CArCnB;MAyCF,MAAM,UAzCJ;MA0CF,MAAM,SA1CJ;MA2CF,MAAM,UA3CJ;MA4CF,MAAM,UA5CJ;MA6CF,MAAM,SA7CJ;MA8CF,MAAM;IA9CJ;EAFH;AAhBI,CAAf;AAoEA,IAAIqB,WAAW,GAAG;EACd,UAAU;IACN1E,IAAI,EAAEuE,OADA;IAENlB,WAAW,EAAE;EAFP,CADI;EAKd,MAAM;AALQ,CAAlB;;AAOA,IAAI9D,OAAO,CAACoF,MAAR,CAAeC;AAAM;AAArB,IAAoErF,OAAO,CAACsF,IAAR,CAAa,CAAb,MAAoBrF,SAApB,IAAiCD,OAAO,CAACsF,IAAR,CAAarB,KAAb,CAAmB,CAAnB,EAAsBsB,KAAtB,CAA6BC,IAAD,IAAQL,WAAW,CAACK,IAAD,CAAX,KAAsBvF,SAA1D,CAArG,CAAJ,EAAgL;EAC5K0C,IAAI,CAAC;IACDE,KAAK,EAAE,CACH,8EADG,EAEH,oDAFG,CADN;IAKDC,QAAQ,EAAE1E,MAAM,CAACqH,IAAP,CAAY3C,QAAZ,EAAsB4C,MAAtB,CAA8BlC,OAAD,IAAWA,OAAO,KAAK,OAApD,EAA6DmC,GAA7D,CAAkEnC,OAAD,IAAY,GAAEA,OAAQ,YAAvF,CALT;IAMDT,OAAO,EAAE,EACL,GAAGD,QAAQ,CAACmC,KAAT,CAAeF,IADb;MAEL,GAAGI;IAFE;EANR,CAAD,CAAJ;EAWAnF,OAAO,CAAC4F,IAAR,CAAa,CAAb;AACH;;AACD,IAAIpC,OAAO,GAAI;EAAA,IAACqC,GAAD,uEAAO,EAAP;EAAA,OAAYA,GAAG,CAACC,UAAJ,CAAe,GAAf,IAAsB7F,SAAtB,GAAkC4F,GAA9C;AAAA,CAAD,CAAoD7F,OAAO,CAACsF,IAAR,CAAa,CAAb,CAApD,KAAwE,OAAtF;;AACA,IAAIxC,QAAQ,CAACU,OAAD,CAAR,KAAsBvD,SAA1B,EAAqC;EACjC,IAAInB,GAAG,CAACe,OAAJ,CAAYmC,UAAZ,CAAuBpD,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsBoD,OAAtB,CAAvB,CAAJ,EAA4D;IACxD;IACA;IACAA,OAAO,GAAG,OAAV;EACH,CAJD,MAIO;IACHb,IAAI,CAAC;MACDC,OAAO,EAAG,oBAAmBY,OAAQ,EADpC;MAEDX,KAAK,EAAE,CACH,iCADG,CAFN;MAKDC,QAAQ,EAAE1E,MAAM,CAACqH,IAAP,CAAY3C,QAAZ,EAAsB4C,MAAtB,CAA8BlC,OAAD,IAAWA,OAAO,KAAK,OAApD,EAA6DmC,GAA7D,CAAkEnC,OAAD,IAAY,GAAEA,OAAQ,YAAvF,CALT;MAMDT,OAAO,EAAEoC;IANR,CAAD,CAAJ;IAQAnF,OAAO,CAAC4F,IAAR,CAAa,CAAb;EACH;AACJ,C,CACD;;;AACA,IAAI;EAAEb,IAAI,EAAEnB,KAAR;EAAgBkB;AAAhB,IAAyBhC,QAAQ,CAACU,OAAD,CAArC;;AACA,IAAIuB,IAAI,GAAG,CAAC,MAAI;EACZ,IAAI;IACA,IAAIxC,MAAM,GAAG,CAAC,GAAG1D,IAAI,CAACgB,OAAT,EAAkBzB,MAAM,CAAC2H,WAAP,CAAmB3H,MAAM,CAACuF,OAAP,CAAe,EAC7D,GAAGC,KAD0D;MAE7D,GAAGuB;IAF0D,CAAf,EAG/CO,MAH+C,CAGxC,SAAiB;MAAA,IAAhB,CAACM,IAAD,EAAOzH,KAAP,CAAgB;MACvB,IAAI0H,GAAJ;MACA,OAAO,EAAE1H,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8C,CAAC0H,GAAG,GAAG1H,KAAK,CAACkC,IAAb,MAAuB,IAAvB,IAA+BwF,GAAG,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,GAAG,CAACvB,aAA7G,CAAP;IACH,CANiD,EAM/CiB,GAN+C,CAM3C;MAAA,IAAC,CAACjC,GAAD,EAAMnF,KAAN,CAAD;MAAA,OAAgB,CACfmF,GADe,EAEf,OAAOnF,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACkC,IAAlC,GAAyClC,KAF1B,CAAhB;IAAA,CAN2C,CAAnB,CAAlB,EASJ;MACL2H,UAAU,EAAE;IADP,CATI,CAAb,CADA,CAaA;;IACA,KAAI,IAAI/E,CAAC,GAAGoB,MAAM,CAAC,GAAD,CAAN,CAAYe,MAAZ,GAAqB,CAAjC,EAAoCnC,CAAC,IAAI,CAAzC,EAA4C,EAAEA,CAA9C,EAAgD;MAC5C,IAAIqE,IAAI,GAAGjD,MAAM,CAAC,GAAD,CAAN,CAAYpB,CAAZ,CAAX;MACA,IAAI,CAACqE,IAAI,CAACM,UAAL,CAAgB,GAAhB,CAAL,EAA2B;MAC3B,IAAIK,QAAQ,GAAGX,IAAf;MACA,IAAIY,OAAO,GAAGxC,KAAK,CAAC4B,IAAD,CAAnB,CAJ4C,CAK5C;;MACA,OAAM,OAAOY,OAAP,KAAmB,QAAzB,EAAkC;QAC9BD,QAAQ,GAAGC,OAAX;QACAA,OAAO,GAAGxC,KAAK,CAACwC,OAAD,CAAf;MACH;;MACD,IAAI,CAACA,OAAL,EAAc;MACd,IAAIrB,IAAI,GAAG,EAAX;MACA,IAAIsB,MAAM,GAAGlF,CAAC,GAAG,CAAjB,CAZ4C,CAa5C;;MACA,OAAMoB,MAAM,CAAC,GAAD,CAAN,CAAY8D,MAAZ,KAAuB,CAAC9D,MAAM,CAAC,GAAD,CAAN,CAAY8D,MAAZ,EAAoBP,UAApB,CAA+B,GAA/B,CAA9B,EAAkE;QAC9Df,IAAI,CAAClB,IAAL,CAAUtB,MAAM,CAAC,GAAD,CAAN,CAAY8D,MAAM,EAAlB,CAAV;MACH,CAhB2C,CAiB5C;;;MACA9D,MAAM,CAAC,GAAD,CAAN,CAAY+D,MAAZ,CAAmBnF,CAAnB,EAAsB,IAAI4D,IAAI,CAACzB,MAA/B,EAlB4C,CAmB5C;;MACAf,MAAM,CAAC4D,QAAD,CAAN,GAAmBC,OAAO,CAAC3F,IAAR,CAAasE,IAAI,CAACzB,MAAL,KAAgB,CAAhB,GAAoBrD,SAApB,GAAgC8E,IAAI,CAACzB,MAAL,KAAgB,CAAhB,GAAoByB,IAAI,CAAC,CAAD,CAAxB,GAA8BA,IAA3E,EAAiFoB,QAAjF,CAAnB;IACH,CAnCD,CAoCA;IACA;IACA;IACA;IACA;IACA;;;IACA,IAAI5D,MAAM,CAAC,GAAD,CAAN,CAAY,CAAZ,MAAmBiB,OAAvB,EAAgC;MAC5BjB,MAAM,CAAC,GAAD,CAAN,CAAYgE,OAAZ,CAAoB/C,OAApB;IACH;;IACD,OAAOjB,MAAP;EACH,CA9CD,CA8CE,OAAO7B,GAAP,EAAY;IACV,IAAIA,GAAG,CAAC8F,IAAJ,KAAa,oBAAjB,EAAuC;MACnC7D,IAAI,CAAC;QACDC,OAAO,EAAElC,GAAG,CAACkC,OADZ;QAEDC,KAAK,EAAE,CACH,iCADG,CAFN;QAKDE,OAAO,EAAEoC;MALR,CAAD,CAAJ;MAOAnF,OAAO,CAAC4F,IAAR,CAAa,CAAb;IACH;;IACD,MAAMlF,GAAN;EACH;AACJ,CA5DU,GAAX;;AA6DA,IAAIqE,IAAI,CAAC,QAAD,CAAR,EAAoB;EAChBpC,IAAI,CAAC;IACDI,OAAO,EAAE,EACL,GAAGa,KADE;MAEL,GAAGuB;IAFE,CADR;IAKDtC,KAAK,EAAE,CACF,eAAcW,OAAQ,YADpB;EALN,CAAD,CAAJ;EASAxD,OAAO,CAAC4F,IAAR,CAAa,CAAb;AACH;;AACDd,GAAG,G,CACH;;AACA,SAASD,IAAT,GAAgB;EACZ,IAAI4B,QAAQ,GAAG,EAAf;EACA,IAAIR,GAAJ;;EACA,IAAIS,sBAAsB,GAAG9H,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsB,CAAC6F,GAAG,GAAGlB,IAAI,CAAC,GAAD,CAAJ,CAAU,CAAV,CAAP,MAAyB,IAAzB,IAAiCkB,GAAG,KAAK,KAAK,CAA9C,GAAkDA,GAAlD,GAAyD,KAAItF,OAAO,CAACC,QAAS,EAApG,CAA7B;;EACA,IAAI9B,GAAG,CAACe,OAAJ,CAAYmC,UAAZ,CAAuB0E,sBAAvB,CAAJ,EAAoD;IAChDD,QAAQ,CAAC5C,IAAT,CAAe,GAAEjF,KAAK,CAACiB,OAAN,CAAc8G,QAAd,CAAuBD,sBAAvB,CAA+C,kBAAhE;EACH,CAFD,MAEO;IACH,IAAIE,QAAQ,GAAG9H,GAAG,CAACe,OAAJ,CAAYW,YAAZ,CAAyBuE,IAAI,CAAC,QAAD,CAAJ,GAAiBnG,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsByG,SAAtB,EAAiC,gCAAjC,CAAjB,GAAsFjI,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsByG,SAAtB,EAAiC,+BAAjC,CAA/G,EAAkL,MAAlL,CAAf,CADG,CAEH;;;IACAD,QAAQ,GAAGA,QAAQ,CAACE,OAAT,CAAiB,WAAjB,EAA8B,oBAA9B,CAAX;;IACAhI,GAAG,CAACe,OAAJ,CAAYkH,aAAZ,CAA0BL,sBAA1B,EAAkDE,QAAlD,EAA4D,MAA5D;;IACAH,QAAQ,CAAC5C,IAAT,CAAe,qCAAoCjF,KAAK,CAACiB,OAAN,CAAc8G,QAAd,CAAuBD,sBAAvB,CAA+C,EAAlG;EACH;;EACD,IAAI3B,IAAI,CAAC,WAAD,CAAR,EAAuB;IACnB,IAAIiC,qBAAqB,GAAGpI,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAuB,KAAIO,OAAO,CAACE,OAAQ,EAA3C,CAA5B;;IACA,IAAI/B,GAAG,CAACe,OAAJ,CAAYmC,UAAZ,CAAuBgF,qBAAvB,CAAJ,EAAmD;MAC/CP,QAAQ,CAAC5C,IAAT,CAAe,GAAEjF,KAAK,CAACiB,OAAN,CAAc8G,QAAd,CAAuBK,qBAAvB,CAA8C,kBAA/D;IACH,CAFD,MAEO;MACH,IAAIC,SAAS,GAAGnI,GAAG,CAACe,OAAJ,CAAYW,YAAZ,CAAyB5B,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsByG,SAAtB,EAAiC,uCAAjC,CAAzB,EAAoG,MAApG,CAAhB;;MACA/H,GAAG,CAACe,OAAJ,CAAYkH,aAAZ,CAA0BC,qBAA1B,EAAiDC,SAAjD,EAA4D,MAA5D;;MACAR,QAAQ,CAAC5C,IAAT,CAAe,gCAA+BjF,KAAK,CAACiB,OAAN,CAAc8G,QAAd,CAAuBK,qBAAvB,CAA8C,EAA5F;IACH;EACJ;;EACD,IAAIP,QAAQ,CAACnD,MAAT,GAAkB,CAAtB,EAAyB;IACrBN,OAAO,CAACC,GAAR;;IACA,KAAK,IAAIL,OAAT,IAAoB6D,QAApB,EAA6B;MACzBzD,OAAO,CAACC,GAAR,CAAYL,OAAZ;IACH;EACJ;AACJ;;AACD,eAAeqC,KAAf,GAAuB;EACnB,IAAIiC,KAAK,GAAGnC,IAAI,CAAC,SAAD,CAAhB;EACA,IAAIoC,MAAM,GAAGpC,IAAI,CAAC,UAAD,CAAjB;EACA,IAAIqC,WAAW,GAAGrC,IAAI,CAAC,SAAD,CAAtB;EACA,IAAIsC,UAAU,GAAGtC,IAAI,CAAC,QAAD,CAArB;EACA,IAAIuC,yBAAyB,GAAGD,UAAU,IAAIrH,OAAO,CAACuH,QAAR,KAAqB,OAAnE;EACA,IAAIC,cAAc,GAAGzC,IAAI,CAAC,WAAD,CAAzB,CANmB,CAOnB;EACA;;EACA,IAAI0C,YAAY,GAAG,EAAnB,CATmB,CAUnB;;EACA,IAAI,CAACP,KAAD,IAAUnC,IAAI,CAAC,GAAD,CAAJ,CAAU,CAAV,CAAd,EAA4B;IACxB/B,OAAO,CAAC0E,KAAR,CAAc,6EAAd;IACAR,KAAK,GAAGnC,IAAI,CAAC,SAAD,CAAJ,GAAkBA,IAAI,CAAC,GAAD,CAAJ,CAAU,CAAV,CAA1B;EACH;;EACD,IAAImC,KAAK,IAAIA,KAAK,KAAK,GAAnB,IAA0B,CAACpI,GAAG,CAACe,OAAJ,CAAYmC,UAAZ,CAAuBkF,KAAK,GAAGtI,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsB8G,KAAtB,CAA/B,CAA/B,EAA6F;IACzFlE,OAAO,CAAC0E,KAAR,CAAe,wBAAuB3C,IAAI,CAAC,SAAD,CAAY,kBAAtD;IACA/E,OAAO,CAAC4F,IAAR,CAAa,CAAb;EACH;;EACD,IAAIb,IAAI,CAAC,UAAD,CAAJ,IAAoB,CAACjG,GAAG,CAACe,OAAJ,CAAYmC,UAAZ,CAAuB+C,IAAI,CAAC,UAAD,CAAJ,GAAmBnG,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsB2E,IAAI,CAAC,UAAD,CAA1B,CAA1C,CAAzB,EAA6G;IACzG/B,OAAO,CAAC0E,KAAR,CAAe,yBAAwB3C,IAAI,CAAC,UAAD,CAAa,kBAAxD;IACA/E,OAAO,CAAC4F,IAAR,CAAa,CAAb;EACH;;EACD,IAAI+B,UAAU,GAAG5C,IAAI,CAAC,UAAD,CAAJ,GAAmBA,IAAI,CAAC,UAAD,CAAvB,GAAsC,CAAE6C,WAAD,IAAe9I,GAAG,CAACe,OAAJ,CAAYmC,UAAZ,CAAuB4F,WAAvB,IAAsCA,WAAtC,GAAoD,IAApE,EAA0EhJ,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAuB,KAAIO,OAAO,CAACC,QAAS,EAA5C,CAA1E,CAAvD;;EACA,eAAeiH,kBAAf,GAAoC;IAChC,IAAIC,iBAAiB,GAAG,OAAO/C,IAAI,CAAC,WAAD,CAAX,KAA6B,QAA7B,GAAwCA,IAAI,CAAC,WAAD,CAA5C,GAA4D9E,SAApF;IACA,IAAI8H,MAAM,GAAGD,iBAAiB,GAAG,MAAM,CAAC,YAAU;MAC9C,IAAIhG,IAAI,GAAGlD,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsB0H,iBAAtB,CAAX,CAD8C,CAE9C;;;MACA,IAAI;QAAEC,MAAM,GAAE;MAAV,IAAkB,MAAM,CAAC,GAAG/I,UAAU,CAACgJ,SAAf,EAA0B,SAA1B,EAAqCC,IAArC,CAA0CnG,IAA1C,CAA5B;;MACA,IAAI,OAAOiG,MAAP,KAAkB,UAAtB,EAAkC;QAC9BA,MAAM,GAAGA,MAAM,EAAf;MACH,CAFD,MAEO;QACHA,MAAM,GAAG3J,MAAM,CAACkG,MAAP,CAAc,EAAd,EAAkByD,MAAlB,CAAT;MACH;;MACD,IAAI,CAACA,MAAM,CAACG,OAAZ,EAAqB;QACjBH,MAAM,CAACG,OAAP,GAAiB,EAAjB;MACH;;MACD,OAAO;QACHpG,IADG;QAEHoG,OAAO,EAAE,CAAC,GAAGjJ,QAAQ,CAACY,OAAb,EAAsBkI,MAAtB,EAA8BjG,IAA9B,CAFN;QAGHiB,OAAO,EAAE,CAAC,GAAG7D,QAAQ,CAACW,OAAb,EAAsBkI,MAAtB,EAA8BjG,IAA9B;MAHN,CAAP;IAKH,CAjBsC,GAAT,GAiBvB,MAAM,CAAC,GAAG/C,kBAAkB,CAACc,OAAvB,GAjBb;IAkBA,IAAIsI,aAAa,GAAGJ,MAAM,CAACG,OAA3B;IACA,IAAIE,uBAAuB,GAAGD,aAAa,CAACE,SAAd,CAAyBC,MAAD,IAAU;MAC5D,IAAI,OAAOA,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACpF,IAAP,KAAgB,aAApD,EAAmE;QAC/D,OAAO,IAAP;MACH;;MACD,IAAI,OAAOoF,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAK,IAAzC,IAAiDA,MAAM,CAACC,aAAP,KAAyB,aAA9E,EAA6F;QACzF,OAAO,IAAP;MACH;;MACD,OAAO,KAAP;IACH,CAR6B,CAA9B;IASA,IAAIC,aAAa,GAAGJ,uBAAuB,KAAK,CAAC,CAA7B,GAAiC,EAAjC,GAAsCD,aAAa,CAAClE,KAAd,CAAoB,CAApB,EAAuBmE,uBAAvB,CAA1D;IACA,IAAIK,YAAY,GAAGL,uBAAuB,KAAK,CAAC,CAA7B,GAAiCD,aAAjC,GAAiDA,aAAa,CAAClE,KAAd,CAAoBmE,uBAAuB,GAAG,CAA9C,CAApE;IACA,OAAO,CACHI,aADG,EAEHC,YAFG,EAGHV,MAAM,CAAChF,OAHJ,CAAP;EAKH;;EACD,SAAS2F,yBAAT,GAAqC;IACjC,IAAI7H,OAAO,GAAG8D,WAAW,EAAzB;IACA,IAAIgE,cAAc,GAAG,+BAArB;IACA,OAAO,CACH,CACKhH,IAAD,IAAQ;MACJA,IAAI,CAACiH,WAAL,CAAiB,QAAjB,EAA4BC,IAAD,IAAQ;QAC/B,IAAIA,IAAI,CAACC,MAAL,CAAY7E,KAAZ,CAAkB,CAAlB,EAAqB6B,UAArB,CAAgC,cAAhC,CAAJ,EAAqD;UACjD+C,IAAI,CAACpH,KAAL,CAAWZ,OAAO,CAACkI,OAAR,CAAgB;YACvBC,IAAI,EAAEL,cAAc,GAAGE,IAAI,CAACC;UADL,CAAhB,CAAX;UAGAD,IAAI,CAACI,MAAL;QACH;MACJ,CAPD;IAQH,CAVL,EAWI,CAAC,MAAI;MACD,IAAI;QACA,OAAOxK,OAAO,CAAC,gBAAD,CAAd;MACH,CAFD,CAEE,MAAO,CAAE;;MACX,OAAO,CAAC,GAAGD,QAAQ,CAAC0K,iBAAb,GAAP;IACH,CALD,GAXJ,EAiBKvH,IAAD,IAAQ;MACJA,IAAI,CAACwH,YAAL,CAAmBN,IAAD,IAAQ;QACtB,IAAIA,IAAI,CAACG,IAAL,CAAUlD,UAAV,CAAqB6C,cAArB,CAAJ,EAA0C;UACtCE,IAAI,CAACpH,KAAL,CAAWZ,OAAO,CAACuI,MAAR,CAAe;YACtBlG,IAAI,EAAE,QADgB;YAEtB4F,MAAM,EAAED,IAAI,CAACG,IAAL,CAAUlC,OAAV,CAAkB6B,cAAlB,EAAkC,EAAlC;UAFc,CAAf,CAAX;UAIAE,IAAI,CAACI,MAAL;QACH;MACJ,CARD;IASH,CA3BL,CADG,EA8BH,EA9BG,EA+BH,EA/BG,CAAP;EAiCH;;EACD,SAASI,aAAT,GAAyB;IACrB,IAAItB,MAAM,GAAGJ,UAAU,GAAGlJ,OAAO,CAACkJ,UAAD,CAAV,GAAyB,EAAhD;;IACA,IAAI5C,IAAI,CAAC,SAAD,CAAR,EAAqB;MACjBxF,IAAI,CAACM,OAAL,CAAayJ,IAAb,CAAkB,uBAAlB,EAA2C,CACvC,yCADuC,EAEvC,iCAFuC,CAA3C;;MAIA,IAAI,CAACvE,IAAI,CAAC,WAAD,CAAT,EAAwB;QACpBA,IAAI,CAAC,WAAD,CAAJ,GAAoBA,IAAI,CAAC,SAAD,CAAxB;MACH;IACJ;;IACD,IAAIA,IAAI,CAAC,WAAD,CAAR,EAAuB;MACnB,IAAIwE,KAAK,GAAGxE,IAAI,CAAC,WAAD,CAAJ,CAAkB1B,KAAlB,CAAwB,cAAxB,CAAZ;MACA,IAAImG,cAAc,GAAG,CAAC,GAAGpK,cAAc,CAACS,OAAnB,EAA4BkI,MAA5B,EAAoC;QACrD0B,OAAO,EAAE;UACLF;QADK;MAD4C,CAApC,CAArB;MAKAC,cAAc,CAACC,OAAf,CAAuBF,KAAvB,GAA+BA,KAA/B;MACAC,cAAc,GAAG,CAAC,GAAG9J,iBAAiB,CAACgK,cAAtB,EAAsCF,cAAtC,CAAjB;MACA,OAAOA,cAAP;IACH;;IACD,IAAIG,eAAe,GAAG,CAAC,GAAGvK,cAAc,CAACS,OAAnB,EAA4BkI,MAA5B,CAAtB;IACA4B,eAAe,GAAG,CAAC,GAAGjK,iBAAiB,CAACgK,cAAtB,EAAsCC,eAAtC,CAAlB;IACA,OAAOA,eAAP;EACH;;EACD,SAASC,gBAAT,CAA0B7B,MAA1B,EAAkC;IAC9B,OAAOA,MAAM,CAAC0B,OAAP,CAAeF,KAAf,CAAqB7D,MAArB,CAA6B5D,IAAD,IAAQ;MACvC;MACA;MACA;MACA,OAAO,OAAOA,IAAP,KAAgB,QAAvB;IACH,CALM,EAKJ6D,GALI,CAKCkE,IAAD,IAAQ,CAAC,GAAGpK,cAAc,CAACI,OAAnB,EAA4BgK,IAA5B,CALR,CAAP;EAMH;;EACD,SAASC,iBAAT,CAA2B/B,MAA3B,EAAmC;IAC/B,OAAOA,MAAM,CAAC0B,OAAP,CAAeF,KAAf,CAAqB7D,MAArB,CAA6B5D,IAAD,IAAQ;MACvC,OAAO,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAA5C;IACH,CAFM,CAAP;EAGH;;EACD,SAASiI,iBAAT,CAA2BhC,MAA3B,EAAmC;IAC/B,IAAIiC,cAAc,GAAG,EAArB,CAD+B,CAE/B;;IACA,IAAIC,KAAK,GAAGL,gBAAgB,CAAC7B,MAAD,CAA5B;;IACA,IAAIwB,KAAK,GAAGlK,SAAS,CAACQ,OAAV,CAAkBqK,IAAlB,CAAuBD,KAAvB,CAAZ;;IACA,KAAK,IAAInI,IAAT,IAAiByH,KAAjB,EAAuB;MACnBS,cAAc,CAACnG,IAAf,CAAoB;QAChB4F,OAAO,EAAE3K,GAAG,CAACe,OAAJ,CAAYW,YAAZ,CAAyB5B,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsB0B,IAAtB,CAAzB,EAAsD,MAAtD,CADO;QAEhBqI,SAAS,EAAEvL,KAAK,CAACiB,OAAN,CAAcuK,OAAd,CAAsBtI,IAAtB,EAA4BmC,KAA5B,CAAkC,CAAlC;MAFK,CAApB;IAIH,CAV8B,CAW/B;;;IACA,KAAK,IAAI;MAAEoG,GAAG,EAAEZ,OAAP;MAAiBU,SAAS,GAAE;IAA5B,CAAT,IAAkDL,iBAAiB,CAAC/B,MAAD,CAAnE,EAA4E;MACxEiC,cAAc,CAACnG,IAAf,CAAoB;QAChB4F,OADgB;QAEhBU;MAFgB,CAApB;IAIH;;IACD,OAAOH,cAAP;EACH;;EACD,eAAeM,SAAf,GAA2B;IACvB,IAAIvC,MAAM,GAAGsB,aAAa,EAA1B;IACA,IAAIW,cAAc,GAAGD,iBAAiB,CAAChC,MAAD,CAAtC;;IACA,IAAIwC,cAAc,GAAG,MAAI;MACrB,OAAO;QACHhC,aAAa,EAAE,aADZ;;QAEHiC,IAAI,CAAE7I,IAAF,SAAqB;UAAA,IAAb;YAAEY;UAAF,CAAa;UACrB,CAAC,GAAGpD,wBAAwB,CAACU,OAA7B,EAAsC,SAAsB;YAAA,IAArB;cAAE4K;YAAF,CAAqB;YACxD,OAAO,MAAI;cACP,OAAOA,aAAa,CAAC1C,MAAD,EAASiC,cAAT,CAApB;YACH,CAFD;UAGH,CAJD,EAIGrI,IAJH,EAISY,MAJT;QAKH;;MARE,CAAP;IAUH,CAXD;;IAYAgI,cAAc,CAAC1J,OAAf,GAAyB,IAAzB;IACA,IAAI,CAAC2H,aAAD,EAAgBC,YAAhB,EAA8BiC,cAA9B,IAAgDlD,cAAc,GAAG,MAAMK,kBAAkB,EAA3B,GAAgCa,yBAAyB,EAA3H;IACA,IAAIR,OAAO,GAAG,CACV,GAAGM,aADO,EAEV+B,cAFU,EAGV,CAACxF,IAAI,CAAC,UAAD,CAAL,IAAqBrD,WAHX,EAIV,GAAG+G,YAJO,EAKV,CAAC1D,IAAI,CAAC,mBAAD,CAAL,IAA8B,CAAC,MAAI;MAC/B;MACA,IAAI;QACA,OAAOtG,OAAO,CAAC,cAAD,CAAd;MACH,CAFD,CAEE,MAAO,CAAE;;MACX,OAAO,CAAC,GAAGD,QAAQ,CAACmM,gBAAb,GAAP;IACH,CAN6B,GALpB,EAYV5F,IAAI,CAAC,UAAD,CAAJ,IAAoB,CAAC,MAAI;MACrB,IAAIhC,OAAO,GAAG;QACV6H,MAAM,EAAE,CACJ,SADI,EAEJ;UACIC,oBAAoB,EAAE;QAD1B,CAFI;MADE,CAAd,CADqB,CASrB;;MACA,IAAI;QACA,OAAOpM,OAAO,CAAC,SAAD,CAAd;MACH,CAFD,CAEE,MAAO,CAAE;;MACX,OAAO,CAAC,GAAGD,QAAQ,CAACsM,WAAb,IAA4B/H,OAA5B,CAAP;IACH,CAdmB,GAZV,EA2BZ2C,MA3BY,CA2BLV,OA3BK,CAAd;IA4BA,IAAInE,OAAO,GAAG8D,WAAW,EAAzB;IACA,IAAIoG,SAAS,GAAGlK,OAAO,CAACqH,OAAD,CAAvB;;IACA,SAAS8C,UAAT,CAAoBC,GAApB,EAAyB;MACrB,IAAIC,KAAK,GAAGlL,OAAO,CAACmL,MAAR,CAAeC,MAAf,EAAZ;MACA,OAAO/I,OAAO,CAACjC,OAAR,GAAkBiL,IAAlB,CAAuB,MAAIlE,MAAM,GAAGrI,GAAG,CAACe,OAAJ,CAAYoC,QAAZ,CAAqBqJ,KAArB,CAA2B1M,KAAK,CAACiB,OAAN,CAAc0L,OAAd,CAAsBpE,MAAtB,CAA3B,EAA0D;QAC7FqE,SAAS,EAAE;MADkF,CAA1D,CAAH,GAE/B,IAFF,EAEQH,IAFR,CAEa,MAAIN,SAAS,CAAC/K,OAAV,CAAkBiL,GAAlB,EAAuB,EACvC,GAAGP,cADoC;QAEvCe,IAAI,EAAEvE,KAFiC;QAGvCwE,EAAE,EAAEvE;MAHmC,CAAvB,CAFjB,EAMCkE,IAND,CAMO9I,MAAD,IAAU;QACnB,IAAI,CAAC4E,MAAL,EAAa;UACT,OAAOnH,OAAO,CAACoF,MAAR,CAAeuG,KAAf,CAAqBpJ,MAAM,CAAC0I,GAA5B,CAAP;QACH;;QACD,OAAO5I,OAAO,CAACuJ,GAAR,CAAY,CACf/J,UAAU,CAACsF,MAAD,EAAS5E,MAAM,CAAC0I,GAAhB,CADK,EAEf1I,MAAM,CAACoD,GAAP,IAAc9D,UAAU,CAACsF,MAAM,GAAG,MAAV,EAAkB5E,MAAM,CAACoD,GAAP,CAAWkG,QAAX,EAAlB,CAFT,EAGjBnG,MAHiB,CAGVV,OAHU,CAAZ,CAAP;MAIH,CAdM,EAcJqG,IAdI,CAcC,MAAI;QACR,IAAIS,GAAG,GAAG9L,OAAO,CAACmL,MAAR,CAAeC,MAAf,EAAV;QACApI,OAAO,CAAC0E,KAAR;QACA1E,OAAO,CAAC0E,KAAR,CAAc,SAAd,EAAyB,CAACoE,GAAG,GAAGZ,KAAP,IAAgBa,MAAM,CAAC,GAAD,CAAtB,GAA8B,KAAvD;MACH,CAlBM,CAAP;IAmBH;;IACD,IAAId,GAAG,GAAG,MAAM,CAAC,MAAI;MACjB;MACA,IAAI/D,KAAK,KAAK,GAAd,EAAmB;QACf,OAAO9E,UAAU,EAAjB;MACH,CAJgB,CAKjB;;;MACA,IAAI8E,KAAJ,EAAW;QACP,OAAOpI,GAAG,CAACe,OAAJ,CAAYW,YAAZ,CAAyB5B,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsB8G,KAAtB,CAAzB,EAAuD,MAAvD,CAAP;MACH,CARgB,CASjB;;;MACA,OAAO,2DAAP;IACH,CAXe,GAAhB;IAYA,OAAO8D,UAAU,CAACC,GAAD,CAAjB;EACH;;EACD,IAAIe,OAAO,GAAG,IAAd;;EACA,eAAeC,YAAf,GAA8B;IAC1B,IAAIjC,cAAc,GAAG,EAArB;IACA,IAAIkC,kBAAkB,GAAG,EAAzB;IACA,IAAIC,mBAAmB,GAAG,IAAIC,GAAJ,EAA1B;IACA,IAAIC,OAAO,GAAG,IAAd;;IACA,SAASC,aAAT,GAAyB;MACrBxM,GAAG,CAACC,KAAJ,IAAaiD,OAAO,CAACuJ,IAAR,CAAa,qBAAb,CAAb;;MACA,KAAK,IAAIzK,IAAT,IAAiBoK,kBAAjB,EAAoC;QAChC,OAAOzN,OAAO,CAAC+N,KAAR,CAAc/N,OAAO,CAAC2B,OAAR,CAAgB0B,IAAhB,CAAd,CAAP;MACH;;MACD,IAAI6F,UAAJ,EAAgB;QACZuE,kBAAkB,GAAG,CAAC,GAAG5M,sBAAsB,CAACO,OAA3B,EAAoC8H,UAApC,EAAgDhC,GAAhD,CAAoD;UAAA,IAAC;YAAE7D;UAAF,CAAD;UAAA,OAAaA,IAAb;QAAA,CAApD,CAArB;;QACA,KAAK,IAAI2K,UAAT,IAAuBP,kBAAvB,EAA0C;UACtCC,mBAAmB,CAACO,GAApB,CAAwBD,UAAxB;QACH;MACJ;;MACD3M,GAAG,CAACC,KAAJ,IAAaiD,OAAO,CAAC2J,OAAR,CAAgB,qBAAhB,CAAb;MACA,OAAOtD,aAAa,EAApB;IACH;;IACD,IAAI,CAACb,aAAD,EAAgBC,YAAhB,IAAgCjB,cAAc,GAAG,MAAMK,kBAAkB,EAA3B,GAAgCa,yBAAyB,EAA3G;IACA,IAAIR,OAAO,GAAG,CACV,GAAGM,aADO,EAEV,8BAFU,EAGV,CAACzD,IAAI,CAAC,UAAD,CAAL,IAAqBrD,WAHX,EAIV,GAAG+G,YAJO,EAKV,CAAC1D,IAAI,CAAC,mBAAD,CAAL,IAA8B,CAAC,MAAI;MAC/B;MACA,IAAI;QACA,OAAOtG,OAAO,CAAC,cAAD,CAAd;MACH,CAFD,CAEE,MAAO,CAAE;;MACX,OAAO,CAAC,GAAGD,QAAQ,CAACmM,gBAAb,GAAP;IACH,CAN6B,GALpB,EAYV5F,IAAI,CAAC,UAAD,CAAJ,IAAoB,CAAC,MAAI;MACrB,IAAIhC,OAAO,GAAG;QACV6H,MAAM,EAAE,CACJ,SADI,EAEJ;UACIC,oBAAoB,EAAE;QAD1B,CAFI;MADE,CAAd,CADqB,CASrB;;MACA,IAAI;QACA,OAAOpM,OAAO,CAAC,SAAD,CAAd;MACH,CAFD,CAEE,MAAO,CAAE;;MACX,OAAO,CAAC,GAAGD,QAAQ,CAACsM,WAAb,IAA4B/H,OAA5B,CAAP;IACH,CAdmB,GAZV,EA2BZ2C,MA3BY,CA2BLV,OA3BK,CAAd;;IA4BA,eAAe4H,OAAf,CAAuB7E,MAAvB,EAA+B;MAC3BjI,GAAG,CAACC,KAAJ,IAAaiD,OAAO,CAACuJ,IAAR,CAAa,aAAb,CAAb;;MACA,IAAIhC,cAAc,GAAG,MAAI;QACrB,OAAO;UACHhC,aAAa,EAAE,aADZ;;UAEHiC,IAAI,CAAE7I,IAAF,SAAqB;YAAA,IAAb;cAAEY;YAAF,CAAa;YACrBzC,GAAG,CAACC,KAAJ,IAAaiD,OAAO,CAACuJ,IAAR,CAAa,eAAb,CAAb;YACA,CAAC,GAAGpN,wBAAwB,CAACU,OAA7B,EAAsC,SAAsB;cAAA,IAArB;gBAAE4K;cAAF,CAAqB;cACxDzH,OAAO,CAAC0E,KAAR;cACA1E,OAAO,CAAC0E,KAAR,CAAc,eAAd;cACA,OAAO,MAAI;gBACP,IAAIsE,OAAO,KAAK,IAAhB,EAAsB;kBAClBA,OAAO,CAAChC,cAAR,GAAyBA,cAAc,CAAC1D,MAAf,CAAsB,CAAtB,CAAzB;kBACA,OAAO0F,OAAP;gBACH;;gBACDlM,GAAG,CAACC,KAAJ,IAAaiD,OAAO,CAACuJ,IAAR,CAAa,kBAAb,CAAb;gBACAP,OAAO,GAAGvB,aAAa,CAAC1C,MAAD,EAASiC,cAAc,CAAC1D,MAAf,CAAsB,CAAtB,CAAT,CAAvB;gBACAxG,GAAG,CAACC,KAAJ,IAAaiD,OAAO,CAAC2J,OAAR,CAAgB,kBAAhB,CAAb;gBACA,OAAOX,OAAP;cACH,CATD;YAUH,CAbD,EAaGrK,IAbH,EAaSY,MAbT;YAcAzC,GAAG,CAACC,KAAJ,IAAaiD,OAAO,CAAC2J,OAAR,CAAgB,eAAhB,CAAb;UACH;;QAnBE,CAAP;MAqBH,CAtBD;;MAuBApC,cAAc,CAAC1J,OAAf,GAAyB,IAAzB;MACA,IAAIgM,iBAAiB,GAAG3E,OAAO,CAAC4E,OAAR,CAAgB,8BAAhB,CAAxB;MACA,IAAIC,IAAI,GAAG7E,OAAO,CAACjE,KAAR,EAAX;MACA8I,IAAI,CAACzG,MAAL,CAAYuG,iBAAZ,EAA+B,CAA/B,EAAkCtC,cAAlC;MACA,IAAI1J,OAAO,GAAG8D,WAAW,EAAzB;MACA,IAAIoG,SAAS,GAAGlK,OAAO,CAACkM,IAAD,CAAvB;;MACA,SAAS/B,UAAT,CAAoBC,GAApB,EAAyB;QACrB,IAAIC,KAAK,GAAGlL,OAAO,CAACmL,MAAR,CAAeC,MAAf,EAAZ;QACA,OAAO/I,OAAO,CAACjC,OAAR,GAAkBiL,IAAlB,CAAuB,MAAIlE,MAAM,GAAGrI,GAAG,CAACe,OAAJ,CAAYoC,QAAZ,CAAqBqJ,KAArB,CAA2B1M,KAAK,CAACiB,OAAN,CAAc0L,OAAd,CAAsBpE,MAAtB,CAA3B,EAA0D;UAC7FqE,SAAS,EAAE;QADkF,CAA1D,CAAH,GAE/B,IAFF,EAEQH,IAFR,CAEa,MAAIN,SAAS,CAAC/K,OAAV,CAAkBiL,GAAlB,EAAuB;UACvCQ,IAAI,EAAEvE,KADiC;UAEvCwE,EAAE,EAAEvE;QAFmC,CAAvB,CAFjB,EAKCkE,IALD,CAKM,MAAO9I,MAAP,IAAgB;UACzB,KAAK,IAAIK,OAAT,IAAoBL,MAAM,CAACkE,QAA3B,EAAoC;YAChC,IAAI7D,OAAO,CAACnC,IAAR,KAAiB,YAArB,EAAmC;cAC/B0L,mBAAmB,CAACO,GAApB,CAAwB9J,OAAO,CAACd,IAAhC;YACH;UACJ;;UACDuK,OAAO,CAACK,GAAR,CAAY,CACR,GAAGP,mBADK,CAAZ;;UAGA,IAAI,CAAChF,MAAL,EAAa;YACT,OAAOnH,OAAO,CAACoF,MAAR,CAAeuG,KAAf,CAAqBpJ,MAAM,CAAC0I,GAA5B,CAAP;UACH;;UACD,OAAO5I,OAAO,CAACuJ,GAAR,CAAY,CACf/J,UAAU,CAACsF,MAAD,EAAS5E,MAAM,CAAC0I,GAAhB,CADK,EAEf1I,MAAM,CAACoD,GAAP,IAAc9D,UAAU,CAACsF,MAAM,GAAG,MAAV,EAAkB5E,MAAM,CAACoD,GAAP,CAAWkG,QAAX,EAAlB,CAFT,EAGjBnG,MAHiB,CAGVV,OAHU,CAAZ,CAAP;QAIH,CArBM,EAqBJqG,IArBI,CAqBC,MAAI;UACR,IAAIS,GAAG,GAAG9L,OAAO,CAACmL,MAAR,CAAeC,MAAf,EAAV;UACApI,OAAO,CAAC0E,KAAR,CAAc,SAAd,EAAyB,CAACoE,GAAG,GAAGZ,KAAP,IAAgBa,MAAM,CAAC,GAAD,CAAtB,GAA8B,KAAvD;QACH,CAxBM,EAwBJiB,KAxBI,CAwBGtM,GAAD,IAAO;UACZ,IAAIA,GAAG,CAACwC,IAAJ,KAAa,gBAAjB,EAAmC;YAC/BF,OAAO,CAAC0E,KAAR,CAAchH,GAAG,CAACmL,QAAJ,EAAd;UACH,CAFD,MAEO;YACH7I,OAAO,CAAC0E,KAAR,CAAchH,GAAd;UACH;QACJ,CA9BM,CAAP;MA+BH;;MACD,IAAIuK,GAAG,GAAG,MAAM,CAAC,MAAI;QACjB;QACA,IAAI/D,KAAK,KAAK,GAAd,EAAmB;UACf,OAAO9E,UAAU,EAAjB;QACH,CAJgB,CAKjB;;;QACA,IAAI8E,KAAJ,EAAW;UACP,OAAOpI,GAAG,CAACe,OAAJ,CAAYW,YAAZ,CAAyB5B,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsB8G,KAAtB,CAAzB,EAAuD,MAAvD,CAAP;QACH,CARgB,CASjB;;;QACA,OAAO,2DAAP;MACH,CAXe,GAAhB;MAYA,IAAI3E,MAAM,GAAG,MAAMyI,UAAU,CAACC,GAAD,CAA7B;MACAnL,GAAG,CAACC,KAAJ,IAAaiD,OAAO,CAAC2J,OAAR,CAAgB,aAAhB,CAAb;MACA,OAAOpK,MAAP;IACH;;IACD,IAAIwF,MAAM,GAAGuE,aAAa,CAAC3E,UAAD,CAA1B;;IACA,IAAIT,KAAJ,EAAW;MACPiF,mBAAmB,CAACO,GAApB,CAAwB9N,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsB8G,KAAtB,CAAxB;IACH;;IACDmF,OAAO,GAAG3N,SAAS,CAACmB,OAAV,CAAkBoN,KAAlB,CAAwB,CAC9B,GAAGd,mBAD2B,EAE9B,GAAGvC,gBAAgB,CAAC7B,MAAD,CAFW,CAAxB,EAGP;MACCmF,UAAU,EAAE7F,UADb;MAEC8F,QAAQ,EAAE9F,UAAU,GAAGI,YAAH,GAAkBxH,SAFvC;MAGCmN,aAAa,EAAE,IAHhB;MAICC,gBAAgB,EAAE/F,yBAAyB,GAAG;QAC1CgG,kBAAkB,EAAE,EADsB;QAE1C7F,YAAY,EAAEA;MAF4B,CAAH,GAGvC;IAPL,CAHO,CAAV;IAYA,IAAI8F,KAAK,GAAGlL,OAAO,CAACjC,OAAR,EAAZ;IACAiM,OAAO,CAAC5J,EAAR,CAAW,QAAX,EAAqB,MAAOX,IAAP,IAAc;MAC/B,IAAIqK,mBAAmB,CAACqB,GAApB,CAAwB1L,IAAxB,CAAJ,EAAmC;QAC/BhC,GAAG,CAACC,KAAJ,IAAaiD,OAAO,CAACuJ,IAAR,CAAa,gBAAb,CAAb;QACAP,OAAO,GAAG,IAAV;QACAjE,MAAM,GAAGuE,aAAa,CAAC3E,UAAD,CAAtB;QACA7H,GAAG,CAACC,KAAJ,IAAaiD,OAAO,CAAC2J,OAAR,CAAgB,gBAAhB,CAAb;QACA7M,GAAG,CAACC,KAAJ,IAAaiD,OAAO,CAACuJ,IAAR,CAAa,iBAAb,CAAb;QACA,IAAItC,KAAK,GAAGL,gBAAgB,CAAC7B,MAAD,CAA5B;QACAsE,OAAO,CAACK,GAAR,CAAYR,kBAAZ;QACAG,OAAO,CAACK,GAAR,CAAYzC,KAAZ;QACAnK,GAAG,CAACC,KAAJ,IAAaiD,OAAO,CAAC2J,OAAR,CAAgB,iBAAhB,CAAb;QACAY,KAAK,GAAGA,KAAK,CAAClC,IAAN,CAAW,YAAU;UACzBrB,cAAc,CAACnG,IAAf,CAAoB,GAAGkG,iBAAiB,CAAChC,MAAD,CAAxC;UACA,MAAM6E,OAAO,CAAC7E,MAAD,CAAb;QACH,CAHO,CAAR;MAIH,CAdD,MAcO;QACHwF,KAAK,GAAGA,KAAK,CAAClC,IAAN,CAAW,YAAU;UACzBrB,cAAc,CAACnG,IAAf,CAAoB;YAChB4F,OAAO,EAAE3K,GAAG,CAACe,OAAJ,CAAYW,YAAZ,CAAyB5B,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsB0B,IAAtB,CAAzB,EAAsD,MAAtD,CADO;YAEhBqI,SAAS,EAAEvL,KAAK,CAACiB,OAAN,CAAcuK,OAAd,CAAsBtI,IAAtB,EAA4BmC,KAA5B,CAAkC,CAAlC;UAFK,CAApB;UAIA,MAAM2I,OAAO,CAAC7E,MAAD,CAAb;QACH,CANO,CAAR;MAOH;IACJ,CAxBD;IAyBAsE,OAAO,CAAC5J,EAAR,CAAW,KAAX,EAAkB,MAAOX,IAAP,IAAc;MAC5ByL,KAAK,GAAGA,KAAK,CAAClC,IAAN,CAAW,YAAU;QACzBrB,cAAc,CAACnG,IAAf,CAAoB;UAChB4F,OAAO,EAAE3K,GAAG,CAACe,OAAJ,CAAYW,YAAZ,CAAyB5B,KAAK,CAACiB,OAAN,CAAcO,OAAd,CAAsB0B,IAAtB,CAAzB,EAAsD,MAAtD,CADO;UAEhBqI,SAAS,EAAEvL,KAAK,CAACiB,OAAN,CAAcuK,OAAd,CAAsBtI,IAAtB,EAA4BmC,KAA5B,CAAkC,CAAlC;QAFK,CAApB;QAIA,MAAM2I,OAAO,CAAC7E,MAAD,CAAb;MACH,CANO,CAAR;IAOH,CARD;IASAwF,KAAK,GAAGA,KAAK,CAAClC,IAAN,CAAW,MAAI;MACnBrB,cAAc,CAACnG,IAAf,CAAoB,GAAGkG,iBAAiB,CAAChC,MAAD,CAAxC;MACA,OAAO6E,OAAO,CAAC7E,MAAD,CAAd;IACH,CAHO,CAAR;EAIH;;EACD,IAAIX,WAAJ,EAAiB;IACb;IAAqE,IAAIpH,OAAO,CAACwC,KAAR,CAAc6C,KAAlB,EAAyB;MAC1FrF,OAAO,CAACwC,KAAR,CAAcC,EAAd,CAAiB,KAAjB,EAAwB,MAAIzC,OAAO,CAAC4F,IAAR,CAAa,CAAb,CAA5B;MACA5F,OAAO,CAACwC,KAAR,CAAciL,MAAd;IACH;;IACDxB,YAAY;EACf,CAND,MAMO;IACH3B,SAAS;EACZ;AACJ"},"metadata":{},"sourceType":"script"}