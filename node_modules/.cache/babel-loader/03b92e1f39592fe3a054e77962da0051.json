{"ast":null,"code":"const {\n  getRefreshGlobalScope\n} = require('../globals');\n\nconst getRefreshGlobal = require('./getRefreshGlobal');\n/**\n * Makes a runtime module to intercept module execution for React Refresh.\n * @param {import('webpack')} webpack The Webpack exports.\n * @returns {ReactRefreshRuntimeModule} The runtime module class.\n */\n\n\nfunction makeRefreshRuntimeModule(webpack) {\n  return class ReactRefreshRuntimeModule extends webpack.RuntimeModule {\n    constructor() {\n      // Second argument is the `stage` for this runtime module -\n      // we'll use the same stage as Webpack's HMR runtime module for safety.\n      super('react refresh', webpack.RuntimeModule.STAGE_BASIC);\n    }\n    /**\n     * @returns {string} runtime code\n     */\n\n\n    generate() {\n      const {\n        runtimeTemplate\n      } = this.compilation;\n      const refreshGlobal = getRefreshGlobalScope(webpack.RuntimeGlobals);\n      return webpack.Template.asString([`${webpack.RuntimeGlobals.interceptModuleExecution}.push(${runtimeTemplate.basicFunction('options', [`${runtimeTemplate.supportsConst() ? 'const' : 'var'} originalFactory = options.factory;`, `options.factory = function (moduleObject, moduleExports, webpackRequire) {`, webpack.Template.indent([`${refreshGlobal}.setup(options.id);`, 'try {', webpack.Template.indent('originalFactory.call(this, moduleObject, moduleExports, webpackRequire);'), '} finally {', webpack.Template.indent([`if (typeof Promise !== 'undefined' && moduleObject.exports instanceof Promise) {`, webpack.Template.indent([// The exports of the module are re-assigned -\n      // this ensures anything coming after us would wait for `cleanup` to fire.\n      // This is particularly important because `cleanup` restores the refresh global,\n      // maintaining consistency for mutable variables like `moduleId`.\n      // This `.then` clause is a ponyfill of the `Promise.finally` API -\n      // it is only part of the spec after ES2018,\n      // but Webpack's top level await implementation support engines down to ES2015.\n      'options.module.exports = options.module.exports.then(', webpack.Template.indent([`${runtimeTemplate.basicFunction('result', [`${refreshGlobal}.cleanup(options.id);`, 'return result;'])},`, runtimeTemplate.basicFunction('reason', [`${refreshGlobal}.cleanup(options.id);`, 'return Promise.reject(reason);'])]), `);`]), '} else {', webpack.Template.indent(`${refreshGlobal}.cleanup(options.id)`), '}']), '}']), `};`])})`, '', getRefreshGlobal(webpack.Template, webpack.RuntimeGlobals, runtimeTemplate)]);\n    }\n\n  };\n}\n\nmodule.exports = makeRefreshRuntimeModule;","map":{"version":3,"names":["getRefreshGlobalScope","require","getRefreshGlobal","makeRefreshRuntimeModule","webpack","ReactRefreshRuntimeModule","RuntimeModule","constructor","STAGE_BASIC","generate","runtimeTemplate","compilation","refreshGlobal","RuntimeGlobals","Template","asString","interceptModuleExecution","basicFunction","supportsConst","indent","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/utils/makeRefreshRuntimeModule.js"],"sourcesContent":["const { getRefreshGlobalScope } = require('../globals');\nconst getRefreshGlobal = require('./getRefreshGlobal');\n\n/**\n * Makes a runtime module to intercept module execution for React Refresh.\n * @param {import('webpack')} webpack The Webpack exports.\n * @returns {ReactRefreshRuntimeModule} The runtime module class.\n */\nfunction makeRefreshRuntimeModule(webpack) {\n  return class ReactRefreshRuntimeModule extends webpack.RuntimeModule {\n    constructor() {\n      // Second argument is the `stage` for this runtime module -\n      // we'll use the same stage as Webpack's HMR runtime module for safety.\n      super('react refresh', webpack.RuntimeModule.STAGE_BASIC);\n    }\n\n    /**\n     * @returns {string} runtime code\n     */\n    generate() {\n      const { runtimeTemplate } = this.compilation;\n      const refreshGlobal = getRefreshGlobalScope(webpack.RuntimeGlobals);\n      return webpack.Template.asString([\n        `${webpack.RuntimeGlobals.interceptModuleExecution}.push(${runtimeTemplate.basicFunction(\n          'options',\n          [\n            `${\n              runtimeTemplate.supportsConst() ? 'const' : 'var'\n            } originalFactory = options.factory;`,\n            `options.factory = function (moduleObject, moduleExports, webpackRequire) {`,\n            webpack.Template.indent([\n              `${refreshGlobal}.setup(options.id);`,\n              'try {',\n              webpack.Template.indent(\n                'originalFactory.call(this, moduleObject, moduleExports, webpackRequire);'\n              ),\n              '} finally {',\n              webpack.Template.indent([\n                `if (typeof Promise !== 'undefined' && moduleObject.exports instanceof Promise) {`,\n                webpack.Template.indent([\n                  // The exports of the module are re-assigned -\n                  // this ensures anything coming after us would wait for `cleanup` to fire.\n                  // This is particularly important because `cleanup` restores the refresh global,\n                  // maintaining consistency for mutable variables like `moduleId`.\n                  // This `.then` clause is a ponyfill of the `Promise.finally` API -\n                  // it is only part of the spec after ES2018,\n                  // but Webpack's top level await implementation support engines down to ES2015.\n                  'options.module.exports = options.module.exports.then(',\n                  webpack.Template.indent([\n                    `${runtimeTemplate.basicFunction('result', [\n                      `${refreshGlobal}.cleanup(options.id);`,\n                      'return result;',\n                    ])},`,\n                    runtimeTemplate.basicFunction('reason', [\n                      `${refreshGlobal}.cleanup(options.id);`,\n                      'return Promise.reject(reason);',\n                    ]),\n                  ]),\n                  `);`,\n                ]),\n                '} else {',\n                webpack.Template.indent(`${refreshGlobal}.cleanup(options.id)`),\n                '}',\n              ]),\n              '}',\n            ]),\n            `};`,\n          ]\n        )})`,\n        '',\n        getRefreshGlobal(webpack.Template, webpack.RuntimeGlobals, runtimeTemplate),\n      ]);\n    }\n  };\n}\n\nmodule.exports = makeRefreshRuntimeModule;\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAA4BC,OAAO,CAAC,YAAD,CAAzC;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAAhC;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASE,wBAAT,CAAkCC,OAAlC,EAA2C;EACzC,OAAO,MAAMC,yBAAN,SAAwCD,OAAO,CAACE,aAAhD,CAA8D;IACnEC,WAAW,GAAG;MACZ;MACA;MACA,MAAM,eAAN,EAAuBH,OAAO,CAACE,aAAR,CAAsBE,WAA7C;IACD;IAED;AACJ;AACA;;;IACIC,QAAQ,GAAG;MACT,MAAM;QAAEC;MAAF,IAAsB,KAAKC,WAAjC;MACA,MAAMC,aAAa,GAAGZ,qBAAqB,CAACI,OAAO,CAACS,cAAT,CAA3C;MACA,OAAOT,OAAO,CAACU,QAAR,CAAiBC,QAAjB,CAA0B,CAC9B,GAAEX,OAAO,CAACS,cAAR,CAAuBG,wBAAyB,SAAQN,eAAe,CAACO,aAAhB,CACzD,SADyD,EAEzD,CACG,GACCP,eAAe,CAACQ,aAAhB,KAAkC,OAAlC,GAA4C,KAC7C,qCAHH,EAIG,4EAJH,EAKEd,OAAO,CAACU,QAAR,CAAiBK,MAAjB,CAAwB,CACrB,GAAEP,aAAc,qBADK,EAEtB,OAFsB,EAGtBR,OAAO,CAACU,QAAR,CAAiBK,MAAjB,CACE,0EADF,CAHsB,EAMtB,aANsB,EAOtBf,OAAO,CAACU,QAAR,CAAiBK,MAAjB,CAAwB,CACrB,kFADqB,EAEtBf,OAAO,CAACU,QAAR,CAAiBK,MAAjB,CAAwB,CACtB;MACA;MACA;MACA;MACA;MACA;MACA;MACA,uDARsB,EAStBf,OAAO,CAACU,QAAR,CAAiBK,MAAjB,CAAwB,CACrB,GAAET,eAAe,CAACO,aAAhB,CAA8B,QAA9B,EAAwC,CACxC,GAAEL,aAAc,uBADwB,EAEzC,gBAFyC,CAAxC,CAGA,GAJmB,EAKtBF,eAAe,CAACO,aAAhB,CAA8B,QAA9B,EAAwC,CACrC,GAAEL,aAAc,uBADqB,EAEtC,gCAFsC,CAAxC,CALsB,CAAxB,CATsB,EAmBrB,IAnBqB,CAAxB,CAFsB,EAuBtB,UAvBsB,EAwBtBR,OAAO,CAACU,QAAR,CAAiBK,MAAjB,CAAyB,GAAEP,aAAc,sBAAzC,CAxBsB,EAyBtB,GAzBsB,CAAxB,CAPsB,EAkCtB,GAlCsB,CAAxB,CALF,EAyCG,IAzCH,CAFyD,CA6CzD,GA9C6B,EA+C/B,EA/C+B,EAgD/BV,gBAAgB,CAACE,OAAO,CAACU,QAAT,EAAmBV,OAAO,CAACS,cAA3B,EAA2CH,eAA3C,CAhDe,CAA1B,CAAP;IAkDD;;EA/DkE,CAArE;AAiED;;AAEDU,MAAM,CAACC,OAAP,GAAiBlB,wBAAjB"},"metadata":{},"sourceType":"script"}