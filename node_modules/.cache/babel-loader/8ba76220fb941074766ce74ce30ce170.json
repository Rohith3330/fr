{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst index_1 = require(\"../ContainerBase/index\");\n\nclass PriorityQueue extends index_1.Base {\n  /**\n   * @description PriorityQueue's constructor.\n   * @param container Initialize container, must have a forEach function.\n   * @param cmp Compare function.\n   * @param copy When the container is an array, you can choose to directly operate on the original object of\n   *             the array or perform a shallow copy. The default is shallow copy.\n   */\n  constructor() {\n    let container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let cmp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (x, y) => {\n      if (x > y) return -1;\n      if (x < y) return 1;\n      return 0;\n    };\n    let copy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    super();\n    this.cmp = cmp;\n\n    if (Array.isArray(container)) {\n      this.priorityQueue = copy ? [...container] : container;\n    } else {\n      this.priorityQueue = [];\n      container.forEach(element => this.priorityQueue.push(element));\n    }\n\n    this.length = this.priorityQueue.length;\n\n    for (let parent = this.length - 1 >> 1; parent >= 0; --parent) {\n      let curParent = parent;\n      let curChild = curParent << 1 | 1;\n\n      while (curChild < this.length) {\n        const left = curChild;\n        const right = left + 1;\n        let minChild = left;\n\n        if (right < this.length && this.cmp(this.priorityQueue[left], this.priorityQueue[right]) > 0) {\n          minChild = right;\n        }\n\n        if (this.cmp(this.priorityQueue[curParent], this.priorityQueue[minChild]) <= 0) break;\n        [this.priorityQueue[curParent], this.priorityQueue[minChild]] = [this.priorityQueue[minChild], this.priorityQueue[curParent]];\n        curParent = minChild;\n        curChild = curParent << 1 | 1;\n      }\n    }\n  }\n  /**\n   * @description Adjusting parent's children to suit the nature of the heap.\n   * @param parent Parent's index.\n   * @private\n   */\n\n\n  adjust(parent) {\n    const left = parent << 1 | 1;\n    const right = (parent << 1) + 2;\n\n    if (left < this.length && this.cmp(this.priorityQueue[parent], this.priorityQueue[left]) > 0) {\n      [this.priorityQueue[parent], this.priorityQueue[left]] = [this.priorityQueue[left], this.priorityQueue[parent]];\n    }\n\n    if (right < this.length && this.cmp(this.priorityQueue[parent], this.priorityQueue[right]) > 0) {\n      [this.priorityQueue[parent], this.priorityQueue[right]] = [this.priorityQueue[right], this.priorityQueue[parent]];\n    }\n  }\n\n  clear() {\n    this.length = 0;\n    this.priorityQueue.length = 0;\n  }\n  /**\n   * @description Push element into a container in order.\n   * @param element The element you want to push.\n   */\n\n\n  push(element) {\n    this.priorityQueue.push(element);\n    this.length += 1;\n    if (this.length === 1) return;\n    let curNode = this.length - 1;\n\n    while (curNode > 0) {\n      const parent = curNode - 1 >> 1;\n      if (this.cmp(this.priorityQueue[parent], element) <= 0) break;\n      this.adjust(parent);\n      curNode = parent;\n    }\n  }\n  /**\n   * @description Removes the top element.\n   */\n\n\n  pop() {\n    if (!this.length) return;\n    const last = this.priorityQueue[this.length - 1];\n    this.length -= 1;\n    let parent = 0;\n\n    while (parent < this.length) {\n      const left = parent << 1 | 1;\n      const right = (parent << 1) + 2;\n      if (left >= this.length) break;\n      let minChild = left;\n\n      if (right < this.length && this.cmp(this.priorityQueue[left], this.priorityQueue[right]) > 0) {\n        minChild = right;\n      }\n\n      if (this.cmp(this.priorityQueue[minChild], last) >= 0) break;\n      this.priorityQueue[parent] = this.priorityQueue[minChild];\n      parent = minChild;\n    }\n\n    this.priorityQueue[parent] = last;\n    this.priorityQueue.pop();\n  }\n  /**\n   * @description Accesses the top element.\n   */\n\n\n  top() {\n    return this.priorityQueue[0];\n  }\n\n}\n\nexports.default = PriorityQueue;","map":{"version":3,"names":["Object","defineProperty","exports","value","index_1","require","PriorityQueue","Base","constructor","container","cmp","x","y","copy","Array","isArray","priorityQueue","forEach","element","push","length","parent","curParent","curChild","left","right","minChild","adjust","clear","curNode","pop","last","top","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/js-sdsl/dist/cjs/container/OtherContainer/PriorityQueue.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_1 = require(\"../ContainerBase/index\");\nclass PriorityQueue extends index_1.Base {\n    /**\n     * @description PriorityQueue's constructor.\n     * @param container Initialize container, must have a forEach function.\n     * @param cmp Compare function.\n     * @param copy When the container is an array, you can choose to directly operate on the original object of\n     *             the array or perform a shallow copy. The default is shallow copy.\n     */\n    constructor(container = [], cmp = (x, y) => {\n        if (x > y)\n            return -1;\n        if (x < y)\n            return 1;\n        return 0;\n    }, copy = true) {\n        super();\n        this.cmp = cmp;\n        if (Array.isArray(container)) {\n            this.priorityQueue = copy ? [...container] : container;\n        }\n        else {\n            this.priorityQueue = [];\n            container.forEach(element => this.priorityQueue.push(element));\n        }\n        this.length = this.priorityQueue.length;\n        for (let parent = (this.length - 1) >> 1; parent >= 0; --parent) {\n            let curParent = parent;\n            let curChild = (curParent << 1) | 1;\n            while (curChild < this.length) {\n                const left = curChild;\n                const right = left + 1;\n                let minChild = left;\n                if (right < this.length &&\n                    this.cmp(this.priorityQueue[left], this.priorityQueue[right]) > 0) {\n                    minChild = right;\n                }\n                if (this.cmp(this.priorityQueue[curParent], this.priorityQueue[minChild]) <= 0)\n                    break;\n                [this.priorityQueue[curParent], this.priorityQueue[minChild]] =\n                    [this.priorityQueue[minChild], this.priorityQueue[curParent]];\n                curParent = minChild;\n                curChild = (curParent << 1) | 1;\n            }\n        }\n    }\n    /**\n     * @description Adjusting parent's children to suit the nature of the heap.\n     * @param parent Parent's index.\n     * @private\n     */\n    adjust(parent) {\n        const left = (parent << 1) | 1;\n        const right = (parent << 1) + 2;\n        if (left < this.length &&\n            this.cmp(this.priorityQueue[parent], this.priorityQueue[left]) > 0) {\n            [this.priorityQueue[parent], this.priorityQueue[left]] =\n                [this.priorityQueue[left], this.priorityQueue[parent]];\n        }\n        if (right < this.length &&\n            this.cmp(this.priorityQueue[parent], this.priorityQueue[right]) > 0) {\n            [this.priorityQueue[parent], this.priorityQueue[right]] =\n                [this.priorityQueue[right], this.priorityQueue[parent]];\n        }\n    }\n    clear() {\n        this.length = 0;\n        this.priorityQueue.length = 0;\n    }\n    /**\n     * @description Push element into a container in order.\n     * @param element The element you want to push.\n     */\n    push(element) {\n        this.priorityQueue.push(element);\n        this.length += 1;\n        if (this.length === 1)\n            return;\n        let curNode = this.length - 1;\n        while (curNode > 0) {\n            const parent = (curNode - 1) >> 1;\n            if (this.cmp(this.priorityQueue[parent], element) <= 0)\n                break;\n            this.adjust(parent);\n            curNode = parent;\n        }\n    }\n    /**\n     * @description Removes the top element.\n     */\n    pop() {\n        if (!this.length)\n            return;\n        const last = this.priorityQueue[this.length - 1];\n        this.length -= 1;\n        let parent = 0;\n        while (parent < this.length) {\n            const left = (parent << 1) | 1;\n            const right = (parent << 1) + 2;\n            if (left >= this.length)\n                break;\n            let minChild = left;\n            if (right < this.length &&\n                this.cmp(this.priorityQueue[left], this.priorityQueue[right]) > 0) {\n                minChild = right;\n            }\n            if (this.cmp(this.priorityQueue[minChild], last) >= 0)\n                break;\n            this.priorityQueue[parent] = this.priorityQueue[minChild];\n            parent = minChild;\n        }\n        this.priorityQueue[parent] = last;\n        this.priorityQueue.pop();\n    }\n    /**\n     * @description Accesses the top element.\n     */\n    top() {\n        return this.priorityQueue[0];\n    }\n}\nexports.default = PriorityQueue;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}