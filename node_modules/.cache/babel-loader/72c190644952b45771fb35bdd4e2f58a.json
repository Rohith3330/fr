{"ast":null,"code":"// API\nmodule.exports = abort;\n/**\n * Aborts leftover active jobs\n *\n * @param {object} state - current state object\n */\n\nfunction abort(state) {\n  Object.keys(state.jobs).forEach(clean.bind(state)); // reset leftover jobs\n\n  state.jobs = {};\n}\n/**\n * Cleans up leftover job by invoking abort function for the provided job id\n *\n * @this  state\n * @param {string|number} key - job id to abort\n */\n\n\nfunction clean(key) {\n  if (typeof this.jobs[key] == 'function') {\n    this.jobs[key]();\n  }\n}","map":{"version":3,"names":["module","exports","abort","state","Object","keys","jobs","forEach","clean","bind","key"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/asynckit/lib/abort.js"],"sourcesContent":["// API\nmodule.exports = abort;\n\n/**\n * Aborts leftover active jobs\n *\n * @param {object} state - current state object\n */\nfunction abort(state)\n{\n  Object.keys(state.jobs).forEach(clean.bind(state));\n\n  // reset leftover jobs\n  state.jobs = {};\n}\n\n/**\n * Cleans up leftover job by invoking abort function for the provided job id\n *\n * @this  state\n * @param {string|number} key - job id to abort\n */\nfunction clean(key)\n{\n  if (typeof this.jobs[key] == 'function')\n  {\n    this.jobs[key]();\n  }\n}\n"],"mappings":"AAAA;AACAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,KAAT,CAAeC,KAAf,EACA;EACEC,MAAM,CAACC,IAAP,CAAYF,KAAK,CAACG,IAAlB,EAAwBC,OAAxB,CAAgCC,KAAK,CAACC,IAAN,CAAWN,KAAX,CAAhC,EADF,CAGE;;EACAA,KAAK,CAACG,IAAN,GAAa,EAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,KAAT,CAAeE,GAAf,EACA;EACE,IAAI,OAAO,KAAKJ,IAAL,CAAUI,GAAV,CAAP,IAAyB,UAA7B,EACA;IACE,KAAKJ,IAAL,CAAUI,GAAV;EACD;AACF"},"metadata":{},"sourceType":"script"}