{"ast":null,"code":"'use strict';\n\nvar _moduleVisitor = require('eslint-module-utils/moduleVisitor');\n\nvar _moduleVisitor2 = _interopRequireDefault(_moduleVisitor);\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction reportIfNonStandard(context, node, name) {\n  if (name && name.indexOf('!') !== -1) {\n    context.report(node, 'Unexpected \\'!\\' in \\'' + String(name) + '\\'. ' + 'Do not use import syntax to configure webpack loaders.');\n  }\n}\n\nmodule.exports = {\n  meta: {\n    type: 'problem',\n    docs: {\n      url: (0, _docsUrl2['default'])('no-webpack-loader-syntax')\n    },\n    schema: []\n  },\n  create: function () {\n    function create(context) {\n      return (0, _moduleVisitor2['default'])(function (source, node) {\n        reportIfNonStandard(context, node, source.value);\n      }, {\n        commonjs: true\n      });\n    }\n\n    return create;\n  }()\n};","map":{"version":3,"mappings":";;AAAA;;;;AACA;;;;;;;;;;AAEA,SAASA,mBAAT,CAA6BC,OAA7B,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkD;EAChD,IAAIA,QAAQA,KAAKC,OAALD,CAAa,GAAbA,MAAsB,CAAC,CAAnC,EAAsC;IACpCF,QAAQI,MAARJ,CAAeC,IAAfD,EAAqB,kCAAsBE,IAAtB,aACnB,wDADFF;EAGD;AACF;;AAEDK,OAAOC,OAAPD,GAAiB;EACfE,MAAM;IACJC,MAAM,SADF;IAEJC,MAAM;MACJC,KAAK,0BAAQ,0BAAR;IADD,CAFF;IAKJC,QAAQ;EALJ,CADS;EASfC,MATe;IAAA,gBASRZ,OATQ,EASC;MACd,OAAO,gCAAc,UAACa,MAAD,EAASZ,IAAT,EAAkB;QACrCF,oBAAoBC,OAApBD,EAA6BE,IAA7BF,EAAmCc,OAAOC,KAA1Cf;MADK,GAEJ;QAAEgB,UAAU;MAAZ,CAFI,CAAP;IAVa;;IAAA;EAAA;AAAA,CAAjBV","names":["reportIfNonStandard","context","node","name","indexOf","report","module","exports","meta","type","docs","url","schema","create","source","value","commonjs"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\no-webpack-loader-syntax.js"],"sourcesContent":["import moduleVisitor from 'eslint-module-utils/moduleVisitor';\nimport docsUrl from '../docsUrl';\n\nfunction reportIfNonStandard(context, node, name) {\n  if (name && name.indexOf('!') !== -1) {\n    context.report(node, `Unexpected '!' in '${name}'. ` +\n      'Do not use import syntax to configure webpack loaders.',\n    );\n  }\n}\n\nmodule.exports = {\n  meta: {\n    type: 'problem',\n    docs: {\n      url: docsUrl('no-webpack-loader-syntax'),\n    },\n    schema: [],\n  },\n\n  create(context) {\n    return moduleVisitor((source, node) => {\n      reportIfNonStandard(context, node, source.value);\n    }, { commonjs: true });\n  },\n};\n"]},"metadata":{},"sourceType":"script"}