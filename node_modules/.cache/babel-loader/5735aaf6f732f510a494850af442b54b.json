{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow specific matchers & modifiers',\n      recommended: false\n    },\n    type: 'suggestion',\n    schema: [{\n      type: 'object',\n      additionalProperties: {\n        type: ['string', 'null']\n      }\n    }],\n    messages: {\n      restrictedChain: 'Use of `{{ chain }}` is disallowed',\n      restrictedChainWithMessage: '{{ message }}'\n    }\n  },\n  defaultOptions: [{}],\n\n  create(context, _ref) {\n    let [restrictedChains] = _ref;\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          matcher,\n          modifier\n        } = (0, _utils.parseExpectCall)(node);\n\n        if (matcher) {\n          const chain = matcher.name;\n\n          if (chain in restrictedChains) {\n            const message = restrictedChains[chain];\n            context.report({\n              messageId: message ? 'restrictedChainWithMessage' : 'restrictedChain',\n              data: {\n                message,\n                chain\n              },\n              node: matcher.node.property\n            });\n            return;\n          }\n        }\n\n        if (modifier) {\n          const chain = modifier.name;\n\n          if (chain in restrictedChains) {\n            const message = restrictedChains[chain];\n            context.report({\n              messageId: message ? 'restrictedChainWithMessage' : 'restrictedChain',\n              data: {\n                message,\n                chain\n              },\n              node: modifier.node.property\n            });\n            return;\n          }\n        }\n\n        if (matcher && modifier) {\n          const chain = `${modifier.name}.${matcher.name}`;\n\n          if (chain in restrictedChains) {\n            const message = restrictedChains[chain];\n            context.report({\n              messageId: message ? 'restrictedChainWithMessage' : 'restrictedChain',\n              data: {\n                message,\n                chain\n              },\n              loc: {\n                start: modifier.node.property.loc.start,\n                end: matcher.node.property.loc.end\n              }\n            });\n            return;\n          }\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utils","require","_default","createRule","name","__filename","meta","docs","category","description","recommended","type","schema","additionalProperties","messages","restrictedChain","restrictedChainWithMessage","defaultOptions","create","context","restrictedChains","CallExpression","node","isExpectCall","matcher","modifier","parseExpectCall","chain","message","report","messageId","data","property","loc","start","end"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-restricted-matchers.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow specific matchers & modifiers',\n      recommended: false\n    },\n    type: 'suggestion',\n    schema: [{\n      type: 'object',\n      additionalProperties: {\n        type: ['string', 'null']\n      }\n    }],\n    messages: {\n      restrictedChain: 'Use of `{{ chain }}` is disallowed',\n      restrictedChainWithMessage: '{{ message }}'\n    }\n  },\n  defaultOptions: [{}],\n\n  create(context, [restrictedChains]) {\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          matcher,\n          modifier\n        } = (0, _utils.parseExpectCall)(node);\n\n        if (matcher) {\n          const chain = matcher.name;\n\n          if (chain in restrictedChains) {\n            const message = restrictedChains[chain];\n            context.report({\n              messageId: message ? 'restrictedChainWithMessage' : 'restrictedChain',\n              data: {\n                message,\n                chain\n              },\n              node: matcher.node.property\n            });\n            return;\n          }\n        }\n\n        if (modifier) {\n          const chain = modifier.name;\n\n          if (chain in restrictedChains) {\n            const message = restrictedChains[chain];\n            context.report({\n              messageId: message ? 'restrictedChainWithMessage' : 'restrictedChain',\n              data: {\n                message,\n                chain\n              },\n              node: modifier.node.property\n            });\n            return;\n          }\n        }\n\n        if (matcher && modifier) {\n          const chain = `${modifier.name}.${matcher.name}`;\n\n          if (chain in restrictedChains) {\n            const message = restrictedChains[chain];\n            context.report({\n              messageId: message ? 'restrictedChainWithMessage' : 'restrictedChain',\n              data: {\n                message,\n                chain\n              },\n              loc: {\n                start: modifier.node.property.loc.start,\n                end: matcher.node.property.loc.end\n              }\n            });\n            return;\n          }\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}