{"ast":null,"code":"/**\n * @fileoverview Lifecycle methods should be methods on the prototype, not class fields\n * @author Tan Nguyen\n */\n'use strict';\n\nconst values = require('object.values');\n\nconst Components = require('../util/Components');\n\nconst astUtil = require('../util/ast');\n\nconst componentUtil = require('../util/componentUtil');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst lifecycleMethods = require('../util/lifecycleMethods');\n\nconst report = require('../util/report');\n\nfunction getText(node) {\n  const params = node.value.params.map(p => p.name);\n\n  if (node.type === 'Property') {\n    return `: function(${params.join(', ')}) `;\n  }\n\n  if (node.type === 'ClassProperty' || node.type === 'PropertyDefinition') {\n    return `(${params.join(', ')}) `;\n  }\n\n  return null;\n}\n\nconst messages = {\n  lifecycle: '{{propertyName}} is a React lifecycle method, and should not be an arrow function or in a class field. Use an instance method instead.'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Lifecycle methods should be methods on the prototype, not class fields',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-arrow-function-lifecycle')\n    },\n    messages,\n    schema: [],\n    fixable: 'code'\n  },\n  create: Components.detect((context, components) => {\n    /**\n     * @param {Array} properties list of component properties\n     */\n    function reportNoArrowFunctionLifecycle(properties) {\n      properties.forEach(node => {\n        if (!node || !node.value) {\n          return;\n        }\n\n        const propertyName = astUtil.getPropertyName(node);\n        const nodeType = node.value.type;\n        const isLifecycleMethod = (node.static && !componentUtil.isES5Component(node, context) ? lifecycleMethods.static : lifecycleMethods.instance).indexOf(propertyName) > -1;\n\n        if (nodeType === 'ArrowFunctionExpression' && isLifecycleMethod) {\n          const body = node.value.body;\n          const isBlockBody = body.type === 'BlockStatement';\n          const sourceCode = context.getSourceCode();\n          let nextComment = [];\n          let previousComment = [];\n          let bodyRange;\n\n          if (!isBlockBody) {\n            const previousToken = sourceCode.getTokenBefore(body);\n\n            if (sourceCode.getCommentsBefore) {\n              // eslint >=4.x\n              previousComment = sourceCode.getCommentsBefore(body);\n            } else {\n              // eslint 3.x\n              const potentialComment = sourceCode.getTokenBefore(body, {\n                includeComments: true\n              });\n              previousComment = previousToken === potentialComment ? [] : [potentialComment];\n            }\n\n            if (sourceCode.getCommentsAfter) {\n              // eslint >=4.x\n              nextComment = sourceCode.getCommentsAfter(body);\n            } else {\n              // eslint 3.x\n              const potentialComment = sourceCode.getTokenAfter(body, {\n                includeComments: true\n              });\n              const nextToken = sourceCode.getTokenAfter(body);\n              nextComment = nextToken === potentialComment ? [] : [potentialComment];\n            }\n\n            bodyRange = [(previousComment.length > 0 ? previousComment[0] : body).range[0], (nextComment.length > 0 ? nextComment[nextComment.length - 1] : body).range[1]];\n          }\n\n          const headRange = [node.key.range[1], (previousComment.length > 0 ? previousComment[0] : body).range[0]];\n          report(context, messages.lifecycle, 'lifecycle', {\n            node,\n            data: {\n              propertyName\n            },\n\n            fix(fixer) {\n              if (!sourceCode.getCommentsAfter) {\n                // eslint 3.x\n                return isBlockBody && fixer.replaceTextRange(headRange, getText(node));\n              }\n\n              return [].concat(fixer.replaceTextRange(headRange, getText(node)), isBlockBody ? [] : fixer.replaceTextRange(bodyRange, `{ return ${previousComment.map(x => sourceCode.getText(x)).join('')}${sourceCode.getText(body)}${nextComment.map(x => sourceCode.getText(x)).join('')}; }`));\n            }\n\n          });\n        }\n      });\n    }\n\n    return {\n      'Program:exit'() {\n        values(components.list()).forEach(component => {\n          const properties = astUtil.getComponentProperties(component.node);\n          reportNoArrowFunctionLifecycle(properties);\n        });\n      }\n\n    };\n  })\n};","map":{"version":3,"names":["values","require","Components","astUtil","componentUtil","docsUrl","lifecycleMethods","report","getText","node","params","value","map","p","name","type","join","messages","lifecycle","module","exports","meta","docs","description","category","recommended","url","schema","fixable","create","detect","context","components","reportNoArrowFunctionLifecycle","properties","forEach","propertyName","getPropertyName","nodeType","isLifecycleMethod","static","isES5Component","instance","indexOf","body","isBlockBody","sourceCode","getSourceCode","nextComment","previousComment","bodyRange","previousToken","getTokenBefore","getCommentsBefore","potentialComment","includeComments","getCommentsAfter","getTokenAfter","nextToken","length","range","headRange","key","data","fix","fixer","replaceTextRange","concat","x","list","component","getComponentProperties"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/no-arrow-function-lifecycle.js"],"sourcesContent":["/**\n * @fileoverview Lifecycle methods should be methods on the prototype, not class fields\n * @author Tan Nguyen\n */\n\n'use strict';\n\nconst values = require('object.values');\n\nconst Components = require('../util/Components');\nconst astUtil = require('../util/ast');\nconst componentUtil = require('../util/componentUtil');\nconst docsUrl = require('../util/docsUrl');\nconst lifecycleMethods = require('../util/lifecycleMethods');\nconst report = require('../util/report');\n\nfunction getText(node) {\n  const params = node.value.params.map((p) => p.name);\n\n  if (node.type === 'Property') {\n    return `: function(${params.join(', ')}) `;\n  }\n\n  if (node.type === 'ClassProperty' || node.type === 'PropertyDefinition') {\n    return `(${params.join(', ')}) `;\n  }\n\n  return null;\n}\n\nconst messages = {\n  lifecycle: '{{propertyName}} is a React lifecycle method, and should not be an arrow function or in a class field. Use an instance method instead.',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Lifecycle methods should be methods on the prototype, not class fields',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-arrow-function-lifecycle'),\n    },\n    messages,\n    schema: [],\n    fixable: 'code',\n  },\n\n  create: Components.detect((context, components) => {\n    /**\n     * @param {Array} properties list of component properties\n     */\n    function reportNoArrowFunctionLifecycle(properties) {\n      properties.forEach((node) => {\n        if (!node || !node.value) {\n          return;\n        }\n\n        const propertyName = astUtil.getPropertyName(node);\n        const nodeType = node.value.type;\n        const isLifecycleMethod = (\n          node.static && !componentUtil.isES5Component(node, context)\n            ? lifecycleMethods.static\n            : lifecycleMethods.instance\n        ).indexOf(propertyName) > -1;\n\n        if (nodeType === 'ArrowFunctionExpression' && isLifecycleMethod) {\n          const body = node.value.body;\n          const isBlockBody = body.type === 'BlockStatement';\n          const sourceCode = context.getSourceCode();\n\n          let nextComment = [];\n          let previousComment = [];\n          let bodyRange;\n          if (!isBlockBody) {\n            const previousToken = sourceCode.getTokenBefore(body);\n\n            if (sourceCode.getCommentsBefore) {\n              // eslint >=4.x\n              previousComment = sourceCode.getCommentsBefore(body);\n            } else {\n              // eslint 3.x\n              const potentialComment = sourceCode.getTokenBefore(body, { includeComments: true });\n              previousComment = previousToken === potentialComment ? [] : [potentialComment];\n            }\n\n            if (sourceCode.getCommentsAfter) {\n              // eslint >=4.x\n              nextComment = sourceCode.getCommentsAfter(body);\n            } else {\n              // eslint 3.x\n              const potentialComment = sourceCode.getTokenAfter(body, { includeComments: true });\n              const nextToken = sourceCode.getTokenAfter(body);\n              nextComment = nextToken === potentialComment ? [] : [potentialComment];\n            }\n            bodyRange = [\n              (previousComment.length > 0 ? previousComment[0] : body).range[0],\n              (nextComment.length > 0 ? nextComment[nextComment.length - 1] : body).range[1],\n            ];\n          }\n          const headRange = [\n            node.key.range[1],\n            (previousComment.length > 0 ? previousComment[0] : body).range[0],\n          ];\n\n          report(\n            context,\n            messages.lifecycle,\n            'lifecycle',\n            {\n              node,\n              data: {\n                propertyName,\n              },\n              fix(fixer) {\n                if (!sourceCode.getCommentsAfter) {\n                  // eslint 3.x\n                  return isBlockBody && fixer.replaceTextRange(headRange, getText(node));\n                }\n                return [].concat(\n                  fixer.replaceTextRange(headRange, getText(node)),\n                  isBlockBody ? [] : fixer.replaceTextRange(\n                    bodyRange,\n                    `{ return ${previousComment.map((x) => sourceCode.getText(x)).join('')}${sourceCode.getText(body)}${nextComment.map((x) => sourceCode.getText(x)).join('')}; }`\n                  )\n                );\n              },\n            }\n          );\n        }\n      });\n    }\n\n    return {\n      'Program:exit'() {\n        values(components.list()).forEach((component) => {\n          const properties = astUtil.getComponentProperties(component.node);\n          reportNoArrowFunctionLifecycle(properties);\n        });\n      },\n    };\n  }),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}