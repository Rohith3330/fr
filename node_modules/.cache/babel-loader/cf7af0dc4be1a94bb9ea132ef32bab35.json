{"ast":null,"code":"/**\n * @fileoverview Rule to flag comparisons to null without a type-checking\n * operator.\n * @author Ian Christian Myers\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow `null` comparisons without type-checking operators\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-eq-null\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Use '===' to compare with null.\"\n    }\n  },\n\n  create(context) {\n    return {\n      BinaryExpression(node) {\n        const badOperator = node.operator === \"==\" || node.operator === \"!=\";\n\n        if (node.right.type === \"Literal\" && node.right.raw === \"null\" && badOperator || node.left.type === \"Literal\" && node.left.raw === \"null\" && badOperator) {\n          context.report({\n            node,\n            messageId: \"unexpected\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","unexpected","create","context","BinaryExpression","node","badOperator","operator","right","raw","left","report","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-eq-null.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag comparisons to null without a type-checking\n * operator.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow `null` comparisons without type-checking operators\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-eq-null\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Use '===' to compare with null.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            BinaryExpression(node) {\n                const badOperator = node.operator === \"==\" || node.operator === \"!=\";\n\n                if (node.right.type === \"Literal\" && node.right.raw === \"null\" && badOperator ||\n                        node.left.type === \"Literal\" && node.left.raw === \"null\" && badOperator) {\n                    context.report({ node, messageId: \"unexpected\" });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,6DADX;MAEFC,WAAW,EAAE,KAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAWFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAXR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IAEZ,OAAO;MAEHC,gBAAgB,CAACC,IAAD,EAAO;QACnB,MAAMC,WAAW,GAAGD,IAAI,CAACE,QAAL,KAAkB,IAAlB,IAA0BF,IAAI,CAACE,QAAL,KAAkB,IAAhE;;QAEA,IAAIF,IAAI,CAACG,KAAL,CAAWd,IAAX,KAAoB,SAApB,IAAiCW,IAAI,CAACG,KAAL,CAAWC,GAAX,KAAmB,MAApD,IAA8DH,WAA9D,IACID,IAAI,CAACK,IAAL,CAAUhB,IAAV,KAAmB,SAAnB,IAAgCW,IAAI,CAACK,IAAL,CAAUD,GAAV,KAAkB,MAAlD,IAA4DH,WADpE,EACiF;UAC7EH,OAAO,CAACQ,MAAR,CAAe;YAAEN,IAAF;YAAQO,SAAS,EAAE;UAAnB,CAAf;QACH;MACJ;;IATE,CAAP;EAYH;;AA/BY,CAAjB"},"metadata":{},"sourceType":"script"}