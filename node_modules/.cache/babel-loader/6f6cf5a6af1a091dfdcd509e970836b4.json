{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nconst pattern = /(^|;)\\s*(export|import)((\\s+\\w)|(\\s*[{*=]))|import\\(/m;\n/**\n * detect possible imports/exports without a full parse.\n *\n * A negative test means that a file is definitely _not_ a module.\n * A positive test means it _could_ be.\n *\n * Not perfect, just a fast way to disqualify large non-ES6 modules and\n * avoid a parse.\n * @type {RegExp}\n */\n\nexports.test = function isMaybeUnambiguousModule(content) {\n  return pattern.test(content);\n}; // future-/Babel-proof at the expense of being a little loose\n\n\nconst unambiguousNodeType = /^(?:(?:Exp|Imp)ort.*Declaration|TSExportAssignment)$/;\n/**\n * Given an AST, return true if the AST unambiguously represents a module.\n * @param  {Program node}  ast\n * @return {Boolean}\n */\n\nexports.isModule = function isUnambiguousModule(ast) {\n  return ast.body && ast.body.some(node => unambiguousNodeType.test(node.type));\n};","map":{"version":3,"names":["exports","__esModule","pattern","test","isMaybeUnambiguousModule","content","unambiguousNodeType","isModule","isUnambiguousModule","ast","body","some","node","type"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-module-utils/unambiguous.js"],"sourcesContent":["'use strict';\nexports.__esModule = true;\n\nconst pattern = /(^|;)\\s*(export|import)((\\s+\\w)|(\\s*[{*=]))|import\\(/m;\n/**\n * detect possible imports/exports without a full parse.\n *\n * A negative test means that a file is definitely _not_ a module.\n * A positive test means it _could_ be.\n *\n * Not perfect, just a fast way to disqualify large non-ES6 modules and\n * avoid a parse.\n * @type {RegExp}\n */\nexports.test = function isMaybeUnambiguousModule(content) {\n  return pattern.test(content);\n};\n\n// future-/Babel-proof at the expense of being a little loose\nconst unambiguousNodeType = /^(?:(?:Exp|Imp)ort.*Declaration|TSExportAssignment)$/;\n\n/**\n * Given an AST, return true if the AST unambiguously represents a module.\n * @param  {Program node}  ast\n * @return {Boolean}\n */\nexports.isModule = function isUnambiguousModule(ast) {\n  return ast.body && ast.body.some(node => unambiguousNodeType.test(node.type));\n};\n"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AAEA,MAAMC,OAAO,GAAG,uDAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAF,OAAO,CAACG,IAAR,GAAe,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;EACxD,OAAOH,OAAO,CAACC,IAAR,CAAaE,OAAb,CAAP;AACD,CAFD,C,CAIA;;;AACA,MAAMC,mBAAmB,GAAG,sDAA5B;AAEA;AACA;AACA;AACA;AACA;;AACAN,OAAO,CAACO,QAAR,GAAmB,SAASC,mBAAT,CAA6BC,GAA7B,EAAkC;EACnD,OAAOA,GAAG,CAACC,IAAJ,IAAYD,GAAG,CAACC,IAAJ,CAASC,IAAT,CAAcC,IAAI,IAAIN,mBAAmB,CAACH,IAApB,CAAyBS,IAAI,CAACC,IAA9B,CAAtB,CAAnB;AACD,CAFD"},"metadata":{},"sourceType":"script"}