{"ast":null,"code":"var assert = require('assert');\n\nvar hpack = require('../');\n\nvar fixtures = require('./fixtures');\n\ndescribe('hpack/compressor', function () {\n  var comp;\n  beforeEach(function () {\n    comp = hpack.compressor.create({\n      table: {\n        maxSize: 1024\n      }\n    });\n  });\n\n  function expect(arr, enc) {\n    function isNumber(num) {\n      return typeof num === 'number';\n    }\n\n    var out = comp.read().toString('hex');\n\n    if (Array.isArray(arr) && !arr.every(isNumber)) {\n      arr = arr.map(function (item) {\n        return new Buffer(item, enc);\n      });\n      arr = Buffer.concat(arr);\n    } else {\n      arr = new Buffer(arr, enc);\n    }\n\n    var actual = arr.toString('hex');\n    assert.equal(out, actual);\n  }\n\n  describe('indexed field', function () {\n    it('should lookup entry from static table', function () {\n      comp.write([{\n        name: ':method',\n        value: 'GET'\n      }]);\n      expect([0b10000000 | 2]);\n    });\n    it('should fetch entry from the end of the static table', function () {\n      comp.write([{\n        name: 'www-authenticate',\n        value: ''\n      }]);\n      expect([0b10000000 | 61]);\n    });\n  });\n  describe('literal field', function () {\n    it('should lookup name in the table (incremental)', function () {\n      comp.write([{\n        name: 'host',\n        value: 'localhost'\n      }]);\n      expect('6686a0e41d139d09', 'hex');\n      comp.write([{\n        name: 'host',\n        value: 'localhost'\n      }]);\n      expect([0b10000000 | 62]);\n    });\n    it('should lookup name in the table (not-incremental)', function () {\n      comp.write([{\n        name: 'host',\n        value: 'localhost',\n        incremental: false\n      }]);\n      expect('0f1786a0e41d139d09', 'hex'); // Should not use the table\n\n      comp.write([{\n        name: 'host',\n        value: 'localhost'\n      }]);\n      expect('6686a0e41d139d09', 'hex');\n    });\n    it('should evict header field from the table', function () {\n      for (var i = 0; i < 1000; i++) {\n        comp.write([{\n          name: 'host',\n          value: 'localhost' + i\n        }]);\n        comp.read();\n      }\n\n      assert(comp._table.size < comp._table.maxSize);\n      assert.equal(comp._table.dynamic.length, 21);\n    });\n  });\n  describe('update size', function () {\n    it('should evict header field from the table', function () {\n      comp.write([{\n        name: 'host',\n        value: 'localhost'\n      }]);\n      expect('6686a0e41d139d09', 'hex');\n      comp.reset(); // update=0, update=maxSize\n\n      expect('203fe107', 'hex');\n      comp.write([{\n        name: 'host',\n        value: 'localhost'\n      }]);\n      expect('6686a0e41d139d09', 'hex');\n    });\n    it('should send dynamic update if size >= protocolMaxSize', function () {\n      comp.updateTableSize(Infinity); // update=maxSize\n\n      expect('3fe107', 'hex');\n    });\n  });\n  describe('spec examples', function () {\n    beforeEach(function () {\n      comp = hpack.compressor.create({\n        table: {\n          maxSize: 256\n        }\n      });\n    });\n    var tests = fixtures.specExamples;\n    tests.forEach(function (test, i) {\n      var prev = tests[i - 1];\n      it('should give expected output on ' + test.id, function () {\n        var startFrom = test.continuation ? prev.comp : comp;\n        if (!startFrom) throw new Error('Previous test failed');\n        comp = startFrom;\n        comp.write(test.output.map(function (pair) {\n          return {\n            name: pair[0],\n            value: pair[1],\n            huffman: test.huffman\n          };\n        }));\n        expect(test.input.replace(/ /g, ''), 'hex'); // Verify table contents\n\n        assert.deepEqual(comp._table.dynamic.map(function (header) {\n          return [header.name, header.value, header.totalSize];\n        }).reverse(), test.table); // Verify table size\n\n        var expectedSize = test.table.reduce(function (acc, item) {\n          return acc + item[2];\n        }, 0);\n        assert.equal(comp._table.size, expectedSize);\n        test.comp = comp;\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","hpack","fixtures","describe","comp","beforeEach","compressor","create","table","maxSize","expect","arr","enc","isNumber","num","out","read","toString","Array","isArray","every","map","item","Buffer","concat","actual","equal","it","write","name","value","incremental","i","_table","size","dynamic","length","reset","updateTableSize","Infinity","tests","specExamples","forEach","test","prev","id","startFrom","continuation","Error","output","pair","huffman","input","replace","deepEqual","header","totalSize","reverse","expectedSize","reduce","acc"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/hpack.js/test/compressor-test.js"],"sourcesContent":["var assert = require('assert');\nvar hpack = require('../');\nvar fixtures = require('./fixtures');\n\ndescribe('hpack/compressor', function() {\n  var comp;\n\n  beforeEach(function() {\n    comp = hpack.compressor.create({\n      table: {\n        maxSize: 1024\n      }\n    });\n  });\n\n  function expect(arr, enc) {\n    function isNumber(num) {\n      return typeof num === 'number';\n    }\n\n    var out = comp.read().toString('hex');\n    if (Array.isArray(arr) && !arr.every(isNumber)) {\n      arr = arr.map(function(item) {\n        return new Buffer(item, enc);\n      });\n      arr = Buffer.concat(arr);\n    } else {\n      arr = new Buffer(arr, enc);\n    }\n    var actual = arr.toString('hex');\n    assert.equal(out, actual);\n  }\n\n  describe('indexed field', function() {\n    it('should lookup entry from static table', function() {\n      comp.write([{ name: ':method', value: 'GET' }]);\n      expect([ 0b10000000 | 2 ]);\n    });\n\n    it('should fetch entry from the end of the static table', function() {\n      comp.write([{ name: 'www-authenticate', value: '' }]);\n      expect([ 0b10000000 | 61 ]);\n    });\n  });\n\n  describe('literal field', function() {\n    it('should lookup name in the table (incremental)', function() {\n      comp.write([{ name: 'host', value: 'localhost' }]);\n      expect('6686a0e41d139d09', 'hex');\n\n      comp.write([{ name: 'host', value: 'localhost' }]);\n      expect([ 0b10000000 | 62 ]);\n    });\n\n    it('should lookup name in the table (not-incremental)', function() {\n      comp.write([{ name: 'host', value: 'localhost', incremental: false }]);\n      expect('0f1786a0e41d139d09', 'hex');\n\n      // Should not use the table\n      comp.write([{ name: 'host', value: 'localhost' }]);\n      expect('6686a0e41d139d09', 'hex');\n    });\n\n    it('should evict header field from the table', function() {\n      for (var i = 0; i < 1000; i++) {\n        comp.write([{ name: 'host', value: 'localhost' + i }]);\n        comp.read();\n      }\n\n      assert(comp._table.size < comp._table.maxSize);\n      assert.equal(comp._table.dynamic.length, 21);\n    });\n  });\n\n  describe('update size', function() {\n    it('should evict header field from the table', function() {\n      comp.write([{ name: 'host', value: 'localhost' }]);\n      expect('6686a0e41d139d09', 'hex');\n\n      comp.reset();\n\n      // update=0, update=maxSize\n      expect('203fe107', 'hex');\n\n      comp.write([{ name: 'host', value: 'localhost' }]);\n      expect('6686a0e41d139d09', 'hex');\n    });\n\n    it('should send dynamic update if size >= protocolMaxSize', function() {\n      comp.updateTableSize(Infinity);\n\n      // update=maxSize\n      expect('3fe107', 'hex');\n    });\n  });\n\n  describe('spec examples', function() {\n    beforeEach(function() {\n      comp = hpack.compressor.create({\n        table: {\n          maxSize: 256\n        }\n      });\n    });\n\n    var tests = fixtures.specExamples;\n\n    tests.forEach(function(test, i) {\n      var prev = tests[i - 1];\n      it('should give expected output on ' + test.id, function() {\n        var startFrom = test.continuation ? prev.comp : comp;\n        if (!startFrom)\n          throw new Error('Previous test failed');\n        comp = startFrom;\n\n        comp.write(test.output.map(function(pair) {\n          return { name: pair[0], value: pair[1], huffman: test.huffman };\n        }));\n        expect(test.input.replace(/ /g, ''), 'hex');\n\n        // Verify table contents\n        assert.deepEqual(comp._table.dynamic.map(function(header) {\n          return [ header.name, header.value, header.totalSize ];\n        }).reverse(), test.table);\n\n        // Verify table size\n        var expectedSize = test.table.reduce(function(acc, item) {\n          return acc + item[2];\n        }, 0);\n        assert.equal(comp._table.size, expectedSize);\n\n        test.comp = comp;\n      });\n    });\n  });\n});\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,KAAD,CAAnB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAtB;;AAEAG,QAAQ,CAAC,kBAAD,EAAqB,YAAW;EACtC,IAAIC,IAAJ;EAEAC,UAAU,CAAC,YAAW;IACpBD,IAAI,GAAGH,KAAK,CAACK,UAAN,CAAiBC,MAAjB,CAAwB;MAC7BC,KAAK,EAAE;QACLC,OAAO,EAAE;MADJ;IADsB,CAAxB,CAAP;EAKD,CANS,CAAV;;EAQA,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;IACxB,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;MACrB,OAAO,OAAOA,GAAP,KAAe,QAAtB;IACD;;IAED,IAAIC,GAAG,GAAGX,IAAI,CAACY,IAAL,GAAYC,QAAZ,CAAqB,KAArB,CAAV;;IACA,IAAIC,KAAK,CAACC,OAAN,CAAcR,GAAd,KAAsB,CAACA,GAAG,CAACS,KAAJ,CAAUP,QAAV,CAA3B,EAAgD;MAC9CF,GAAG,GAAGA,GAAG,CAACU,GAAJ,CAAQ,UAASC,IAAT,EAAe;QAC3B,OAAO,IAAIC,MAAJ,CAAWD,IAAX,EAAiBV,GAAjB,CAAP;MACD,CAFK,CAAN;MAGAD,GAAG,GAAGY,MAAM,CAACC,MAAP,CAAcb,GAAd,CAAN;IACD,CALD,MAKO;MACLA,GAAG,GAAG,IAAIY,MAAJ,CAAWZ,GAAX,EAAgBC,GAAhB,CAAN;IACD;;IACD,IAAIa,MAAM,GAAGd,GAAG,CAACM,QAAJ,CAAa,KAAb,CAAb;IACAlB,MAAM,CAAC2B,KAAP,CAAaX,GAAb,EAAkBU,MAAlB;EACD;;EAEDtB,QAAQ,CAAC,eAAD,EAAkB,YAAW;IACnCwB,EAAE,CAAC,uCAAD,EAA0C,YAAW;MACrDvB,IAAI,CAACwB,KAAL,CAAW,CAAC;QAAEC,IAAI,EAAE,SAAR;QAAmBC,KAAK,EAAE;MAA1B,CAAD,CAAX;MACApB,MAAM,CAAC,CAAE,aAAa,CAAf,CAAD,CAAN;IACD,CAHC,CAAF;IAKAiB,EAAE,CAAC,qDAAD,EAAwD,YAAW;MACnEvB,IAAI,CAACwB,KAAL,CAAW,CAAC;QAAEC,IAAI,EAAE,kBAAR;QAA4BC,KAAK,EAAE;MAAnC,CAAD,CAAX;MACApB,MAAM,CAAC,CAAE,aAAa,EAAf,CAAD,CAAN;IACD,CAHC,CAAF;EAID,CAVO,CAAR;EAYAP,QAAQ,CAAC,eAAD,EAAkB,YAAW;IACnCwB,EAAE,CAAC,+CAAD,EAAkD,YAAW;MAC7DvB,IAAI,CAACwB,KAAL,CAAW,CAAC;QAAEC,IAAI,EAAE,MAAR;QAAgBC,KAAK,EAAE;MAAvB,CAAD,CAAX;MACApB,MAAM,CAAC,kBAAD,EAAqB,KAArB,CAAN;MAEAN,IAAI,CAACwB,KAAL,CAAW,CAAC;QAAEC,IAAI,EAAE,MAAR;QAAgBC,KAAK,EAAE;MAAvB,CAAD,CAAX;MACApB,MAAM,CAAC,CAAE,aAAa,EAAf,CAAD,CAAN;IACD,CANC,CAAF;IAQAiB,EAAE,CAAC,mDAAD,EAAsD,YAAW;MACjEvB,IAAI,CAACwB,KAAL,CAAW,CAAC;QAAEC,IAAI,EAAE,MAAR;QAAgBC,KAAK,EAAE,WAAvB;QAAoCC,WAAW,EAAE;MAAjD,CAAD,CAAX;MACArB,MAAM,CAAC,oBAAD,EAAuB,KAAvB,CAAN,CAFiE,CAIjE;;MACAN,IAAI,CAACwB,KAAL,CAAW,CAAC;QAAEC,IAAI,EAAE,MAAR;QAAgBC,KAAK,EAAE;MAAvB,CAAD,CAAX;MACApB,MAAM,CAAC,kBAAD,EAAqB,KAArB,CAAN;IACD,CAPC,CAAF;IASAiB,EAAE,CAAC,0CAAD,EAA6C,YAAW;MACxD,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0BA,CAAC,EAA3B,EAA+B;QAC7B5B,IAAI,CAACwB,KAAL,CAAW,CAAC;UAAEC,IAAI,EAAE,MAAR;UAAgBC,KAAK,EAAE,cAAcE;QAArC,CAAD,CAAX;QACA5B,IAAI,CAACY,IAAL;MACD;;MAEDjB,MAAM,CAACK,IAAI,CAAC6B,MAAL,CAAYC,IAAZ,GAAmB9B,IAAI,CAAC6B,MAAL,CAAYxB,OAAhC,CAAN;MACAV,MAAM,CAAC2B,KAAP,CAAatB,IAAI,CAAC6B,MAAL,CAAYE,OAAZ,CAAoBC,MAAjC,EAAyC,EAAzC;IACD,CARC,CAAF;EASD,CA3BO,CAAR;EA6BAjC,QAAQ,CAAC,aAAD,EAAgB,YAAW;IACjCwB,EAAE,CAAC,0CAAD,EAA6C,YAAW;MACxDvB,IAAI,CAACwB,KAAL,CAAW,CAAC;QAAEC,IAAI,EAAE,MAAR;QAAgBC,KAAK,EAAE;MAAvB,CAAD,CAAX;MACApB,MAAM,CAAC,kBAAD,EAAqB,KAArB,CAAN;MAEAN,IAAI,CAACiC,KAAL,GAJwD,CAMxD;;MACA3B,MAAM,CAAC,UAAD,EAAa,KAAb,CAAN;MAEAN,IAAI,CAACwB,KAAL,CAAW,CAAC;QAAEC,IAAI,EAAE,MAAR;QAAgBC,KAAK,EAAE;MAAvB,CAAD,CAAX;MACApB,MAAM,CAAC,kBAAD,EAAqB,KAArB,CAAN;IACD,CAXC,CAAF;IAaAiB,EAAE,CAAC,uDAAD,EAA0D,YAAW;MACrEvB,IAAI,CAACkC,eAAL,CAAqBC,QAArB,EADqE,CAGrE;;MACA7B,MAAM,CAAC,QAAD,EAAW,KAAX,CAAN;IACD,CALC,CAAF;EAMD,CApBO,CAAR;EAsBAP,QAAQ,CAAC,eAAD,EAAkB,YAAW;IACnCE,UAAU,CAAC,YAAW;MACpBD,IAAI,GAAGH,KAAK,CAACK,UAAN,CAAiBC,MAAjB,CAAwB;QAC7BC,KAAK,EAAE;UACLC,OAAO,EAAE;QADJ;MADsB,CAAxB,CAAP;IAKD,CANS,CAAV;IAQA,IAAI+B,KAAK,GAAGtC,QAAQ,CAACuC,YAArB;IAEAD,KAAK,CAACE,OAAN,CAAc,UAASC,IAAT,EAAeX,CAAf,EAAkB;MAC9B,IAAIY,IAAI,GAAGJ,KAAK,CAACR,CAAC,GAAG,CAAL,CAAhB;MACAL,EAAE,CAAC,oCAAoCgB,IAAI,CAACE,EAA1C,EAA8C,YAAW;QACzD,IAAIC,SAAS,GAAGH,IAAI,CAACI,YAAL,GAAoBH,IAAI,CAACxC,IAAzB,GAAgCA,IAAhD;QACA,IAAI,CAAC0C,SAAL,EACE,MAAM,IAAIE,KAAJ,CAAU,sBAAV,CAAN;QACF5C,IAAI,GAAG0C,SAAP;QAEA1C,IAAI,CAACwB,KAAL,CAAWe,IAAI,CAACM,MAAL,CAAY5B,GAAZ,CAAgB,UAAS6B,IAAT,EAAe;UACxC,OAAO;YAAErB,IAAI,EAAEqB,IAAI,CAAC,CAAD,CAAZ;YAAiBpB,KAAK,EAAEoB,IAAI,CAAC,CAAD,CAA5B;YAAiCC,OAAO,EAAER,IAAI,CAACQ;UAA/C,CAAP;QACD,CAFU,CAAX;QAGAzC,MAAM,CAACiC,IAAI,CAACS,KAAL,CAAWC,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAAD,EAA+B,KAA/B,CAAN,CATyD,CAWzD;;QACAtD,MAAM,CAACuD,SAAP,CAAiBlD,IAAI,CAAC6B,MAAL,CAAYE,OAAZ,CAAoBd,GAApB,CAAwB,UAASkC,MAAT,EAAiB;UACxD,OAAO,CAAEA,MAAM,CAAC1B,IAAT,EAAe0B,MAAM,CAACzB,KAAtB,EAA6ByB,MAAM,CAACC,SAApC,CAAP;QACD,CAFgB,EAEdC,OAFc,EAAjB,EAEcd,IAAI,CAACnC,KAFnB,EAZyD,CAgBzD;;QACA,IAAIkD,YAAY,GAAGf,IAAI,CAACnC,KAAL,CAAWmD,MAAX,CAAkB,UAASC,GAAT,EAActC,IAAd,EAAoB;UACvD,OAAOsC,GAAG,GAAGtC,IAAI,CAAC,CAAD,CAAjB;QACD,CAFkB,EAEhB,CAFgB,CAAnB;QAGAvB,MAAM,CAAC2B,KAAP,CAAatB,IAAI,CAAC6B,MAAL,CAAYC,IAAzB,EAA+BwB,YAA/B;QAEAf,IAAI,CAACvC,IAAL,GAAYA,IAAZ;MACD,CAvBC,CAAF;IAwBD,CA1BD;EA2BD,CAtCO,CAAR;AAuCD,CAnIO,CAAR"},"metadata":{},"sourceType":"script"}