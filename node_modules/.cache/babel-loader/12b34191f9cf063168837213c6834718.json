{"ast":null,"code":"/**\n * @fileoverview Rule to flag nested ternary expressions\n * @author Ian Christian Myers\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow nested ternary expressions\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-nested-ternary\"\n    },\n    schema: [],\n    messages: {\n      noNestedTernary: \"Do not nest ternary expressions.\"\n    }\n  },\n\n  create(context) {\n    return {\n      ConditionalExpression(node) {\n        if (node.alternate.type === \"ConditionalExpression\" || node.consequent.type === \"ConditionalExpression\") {\n          context.report({\n            node,\n            messageId: \"noNestedTernary\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","noNestedTernary","create","context","ConditionalExpression","node","alternate","consequent","report","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-nested-ternary.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag nested ternary expressions\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow nested ternary expressions\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-nested-ternary\"\n        },\n\n        schema: [],\n\n        messages: {\n            noNestedTernary: \"Do not nest ternary expressions.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n            ConditionalExpression(node) {\n                if (node.alternate.type === \"ConditionalExpression\" ||\n                        node.consequent.type === \"ConditionalExpression\") {\n                    context.report({\n                        node,\n                        messageId: \"noNestedTernary\"\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,qCADX;MAEFC,WAAW,EAAE,KAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAWFC,QAAQ,EAAE;MACNC,eAAe,EAAE;IADX;EAXR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IAEZ,OAAO;MACHC,qBAAqB,CAACC,IAAD,EAAO;QACxB,IAAIA,IAAI,CAACC,SAAL,CAAeZ,IAAf,KAAwB,uBAAxB,IACIW,IAAI,CAACE,UAAL,CAAgBb,IAAhB,KAAyB,uBADjC,EAC0D;UACtDS,OAAO,CAACK,MAAR,CAAe;YACXH,IADW;YAEXI,SAAS,EAAE;UAFA,CAAf;QAIH;MACJ;;IATE,CAAP;EAWH;;AA9BY,CAAjB"},"metadata":{},"sourceType":"script"}