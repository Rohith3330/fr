{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n/*\n * This implementation is adapted from eslint-plugin-jasmine.\n * MIT license, Remco Haszing.\n */\n\n/**\n * Checks if node names returned by getNodeName matches any of the given star patterns\n * Pattern examples:\n *   request.*.expect\n *   request.**.expect\n *   request.**.expect*\n */\n\n\nfunction matchesAssertFunctionName(nodeName, patterns) {\n  return patterns.some(p => new RegExp(`^${p.split('.').map(x => {\n    if (x === '**') return '[a-z\\\\.]*';\n    return x.replace(/\\*/gu, '[a-z]*');\n  }).join('\\\\.')}(\\\\.|$)`, 'ui').test(nodeName));\n}\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Enforce assertion to be made in a test body',\n      recommended: 'warn'\n    },\n    messages: {\n      noAssertions: 'Test has no assertions'\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        assertFunctionNames: {\n          type: 'array',\n          items: [{\n            type: 'string'\n          }]\n        },\n        additionalTestBlockFunctions: {\n          type: 'array',\n          items: {\n            type: 'string'\n          }\n        }\n      },\n      additionalProperties: false\n    }],\n    type: 'suggestion'\n  },\n  defaultOptions: [{\n    assertFunctionNames: ['expect'],\n    additionalTestBlockFunctions: []\n  }],\n\n  create(context, _ref) {\n    let [{\n      assertFunctionNames = ['expect'],\n      additionalTestBlockFunctions = []\n    }] = _ref;\n    const unchecked = [];\n\n    function checkCallExpressionUsed(nodes) {\n      for (const node of nodes) {\n        const index = node.type === _experimentalUtils.AST_NODE_TYPES.CallExpression ? unchecked.indexOf(node) : -1;\n\n        if (node.type === _experimentalUtils.AST_NODE_TYPES.FunctionDeclaration) {\n          const declaredVariables = context.getDeclaredVariables(node);\n          const testCallExpressions = (0, _utils.getTestCallExpressionsFromDeclaredVariables)(declaredVariables);\n          checkCallExpressionUsed(testCallExpressions);\n        }\n\n        if (index !== -1) {\n          unchecked.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    return {\n      CallExpression(node) {\n        var _getNodeName;\n\n        const name = (_getNodeName = (0, _utils.getNodeName)(node.callee)) !== null && _getNodeName !== void 0 ? _getNodeName : '';\n\n        if ((0, _utils.isTestCaseCall)(node) || additionalTestBlockFunctions.includes(name)) {\n          if (node.callee.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression && (0, _utils.isSupportedAccessor)(node.callee.property, 'todo')) {\n            return;\n          }\n\n          unchecked.push(node);\n        } else if (matchesAssertFunctionName(name, assertFunctionNames)) {\n          // Return early in case of nested `it` statements.\n          checkCallExpressionUsed(context.getAncestors());\n        }\n      },\n\n      'Program:exit'() {\n        unchecked.forEach(node => context.report({\n          messageId: 'noAssertions',\n          node\n        }));\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","matchesAssertFunctionName","nodeName","patterns","some","p","RegExp","split","map","x","replace","join","test","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","noAssertions","schema","type","properties","assertFunctionNames","items","additionalTestBlockFunctions","additionalProperties","defaultOptions","create","context","unchecked","checkCallExpressionUsed","nodes","node","index","AST_NODE_TYPES","CallExpression","indexOf","FunctionDeclaration","declaredVariables","getDeclaredVariables","testCallExpressions","getTestCallExpressionsFromDeclaredVariables","splice","_getNodeName","getNodeName","callee","isTestCaseCall","includes","MemberExpression","isSupportedAccessor","property","push","getAncestors","forEach","report","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/expect-expect.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\n/*\n * This implementation is adapted from eslint-plugin-jasmine.\n * MIT license, Remco Haszing.\n */\n\n/**\n * Checks if node names returned by getNodeName matches any of the given star patterns\n * Pattern examples:\n *   request.*.expect\n *   request.**.expect\n *   request.**.expect*\n */\nfunction matchesAssertFunctionName(nodeName, patterns) {\n  return patterns.some(p => new RegExp(`^${p.split('.').map(x => {\n    if (x === '**') return '[a-z\\\\.]*';\n    return x.replace(/\\*/gu, '[a-z]*');\n  }).join('\\\\.')}(\\\\.|$)`, 'ui').test(nodeName));\n}\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Enforce assertion to be made in a test body',\n      recommended: 'warn'\n    },\n    messages: {\n      noAssertions: 'Test has no assertions'\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        assertFunctionNames: {\n          type: 'array',\n          items: [{\n            type: 'string'\n          }]\n        },\n        additionalTestBlockFunctions: {\n          type: 'array',\n          items: {\n            type: 'string'\n          }\n        }\n      },\n      additionalProperties: false\n    }],\n    type: 'suggestion'\n  },\n  defaultOptions: [{\n    assertFunctionNames: ['expect'],\n    additionalTestBlockFunctions: []\n  }],\n\n  create(context, [{\n    assertFunctionNames = ['expect'],\n    additionalTestBlockFunctions = []\n  }]) {\n    const unchecked = [];\n\n    function checkCallExpressionUsed(nodes) {\n      for (const node of nodes) {\n        const index = node.type === _experimentalUtils.AST_NODE_TYPES.CallExpression ? unchecked.indexOf(node) : -1;\n\n        if (node.type === _experimentalUtils.AST_NODE_TYPES.FunctionDeclaration) {\n          const declaredVariables = context.getDeclaredVariables(node);\n          const testCallExpressions = (0, _utils.getTestCallExpressionsFromDeclaredVariables)(declaredVariables);\n          checkCallExpressionUsed(testCallExpressions);\n        }\n\n        if (index !== -1) {\n          unchecked.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    return {\n      CallExpression(node) {\n        var _getNodeName;\n\n        const name = (_getNodeName = (0, _utils.getNodeName)(node.callee)) !== null && _getNodeName !== void 0 ? _getNodeName : '';\n\n        if ((0, _utils.isTestCaseCall)(node) || additionalTestBlockFunctions.includes(name)) {\n          if (node.callee.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression && (0, _utils.isSupportedAccessor)(node.callee.property, 'todo')) {\n            return;\n          }\n\n          unchecked.push(node);\n        } else if (matchesAssertFunctionName(name, assertFunctionNames)) {\n          // Return early in case of nested `it` statements.\n          checkCallExpressionUsed(context.getAncestors());\n        }\n      },\n\n      'Program:exit'() {\n        unchecked.forEach(node => context.report({\n          messageId: 'noAssertions',\n          node\n        }));\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}