{"ast":null,"code":"import * as definitions from \"../../lib/definitions/index.js\";\nconst has = Function.call.bind(Object.prototype.hasOwnProperty);\n\nfunction joinComparisons(leftArr, right) {\n  return leftArr.map(JSON.stringify).join(` === ${right} || `) + ` === ${right}`;\n}\n\nfunction addIsHelper(type, aliasKeys, deprecated) {\n  const targetType = JSON.stringify(type);\n  let aliasSource = \"\";\n\n  if (aliasKeys) {\n    aliasSource = joinComparisons(aliasKeys, \"nodeType\");\n  }\n\n  let placeholderSource = \"\";\n  const placeholderTypes = [];\n\n  if (definitions.PLACEHOLDERS.includes(type) && has(definitions.FLIPPED_ALIAS_KEYS, type)) {\n    placeholderTypes.push(type);\n  }\n\n  if (has(definitions.PLACEHOLDERS_FLIPPED_ALIAS, type)) {\n    placeholderTypes.push(...definitions.PLACEHOLDERS_FLIPPED_ALIAS[type]);\n  }\n\n  if (placeholderTypes.length > 0) {\n    placeholderSource = ' || nodeType === \"Placeholder\" && (' + joinComparisons(placeholderTypes, \"(node as t.Placeholder).expectedNode\") + \")\";\n  }\n\n  const result = definitions.NODE_FIELDS[type] || definitions.FLIPPED_ALIAS_KEYS[type] ? `node is t.${type}` : \"boolean\";\n  return `export function is${type}(node: object | null | undefined, opts?: object | null): ${result} {\n    ${deprecated || \"\"}\n    if (!node) return false;\n\n    const nodeType = (node as t.Node).type;\n    if (${aliasSource ? aliasSource : `nodeType === ${targetType}`}${placeholderSource}) {\n      if (typeof opts === \"undefined\") {\n        return true;\n      } else {\n        return shallowEqual(node, opts);\n      }\n    }\n\n    return false;\n  }\n  `;\n}\n\nexport default function generateValidators() {\n  let output = `/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport shallowEqual from \"../../utils/shallowEqual\";\nimport type * as t from \"../..\";\\n\\n`;\n  Object.keys(definitions.VISITOR_KEYS).forEach(type => {\n    output += addIsHelper(type);\n  });\n  Object.keys(definitions.FLIPPED_ALIAS_KEYS).forEach(type => {\n    output += addIsHelper(type, definitions.FLIPPED_ALIAS_KEYS[type]);\n  });\n  Object.keys(definitions.DEPRECATED_KEYS).forEach(type => {\n    const newType = definitions.DEPRECATED_KEYS[type];\n    const deprecated = `console.trace(\"The node type ${type} has been renamed to ${newType}\");`;\n    output += addIsHelper(type, null, deprecated);\n  });\n  return output;\n}","map":{"version":3,"names":["definitions","has","Function","call","bind","Object","prototype","hasOwnProperty","joinComparisons","leftArr","right","map","JSON","stringify","join","addIsHelper","type","aliasKeys","deprecated","targetType","aliasSource","placeholderSource","placeholderTypes","PLACEHOLDERS","includes","FLIPPED_ALIAS_KEYS","push","PLACEHOLDERS_FLIPPED_ALIAS","length","result","NODE_FIELDS","generateValidators","output","keys","VISITOR_KEYS","forEach","DEPRECATED_KEYS","newType"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@babel/types/scripts/generators/validators.js"],"sourcesContent":["import * as definitions from \"../../lib/definitions/index.js\";\n\nconst has = Function.call.bind(Object.prototype.hasOwnProperty);\n\nfunction joinComparisons(leftArr, right) {\n  return (\n    leftArr.map(JSON.stringify).join(` === ${right} || `) + ` === ${right}`\n  );\n}\n\nfunction addIsHelper(type, aliasKeys, deprecated) {\n  const targetType = JSON.stringify(type);\n  let aliasSource = \"\";\n  if (aliasKeys) {\n    aliasSource = joinComparisons(aliasKeys, \"nodeType\");\n  }\n\n  let placeholderSource = \"\";\n  const placeholderTypes = [];\n  if (\n    definitions.PLACEHOLDERS.includes(type) &&\n    has(definitions.FLIPPED_ALIAS_KEYS, type)\n  ) {\n    placeholderTypes.push(type);\n  }\n  if (has(definitions.PLACEHOLDERS_FLIPPED_ALIAS, type)) {\n    placeholderTypes.push(...definitions.PLACEHOLDERS_FLIPPED_ALIAS[type]);\n  }\n  if (placeholderTypes.length > 0) {\n    placeholderSource =\n      ' || nodeType === \"Placeholder\" && (' +\n      joinComparisons(\n        placeholderTypes,\n        \"(node as t.Placeholder).expectedNode\"\n      ) +\n      \")\";\n  }\n\n  const result =\n    definitions.NODE_FIELDS[type] || definitions.FLIPPED_ALIAS_KEYS[type]\n      ? `node is t.${type}`\n      : \"boolean\";\n\n  return `export function is${type}(node: object | null | undefined, opts?: object | null): ${result} {\n    ${deprecated || \"\"}\n    if (!node) return false;\n\n    const nodeType = (node as t.Node).type;\n    if (${\n      aliasSource ? aliasSource : `nodeType === ${targetType}`\n    }${placeholderSource}) {\n      if (typeof opts === \"undefined\") {\n        return true;\n      } else {\n        return shallowEqual(node, opts);\n      }\n    }\n\n    return false;\n  }\n  `;\n}\n\nexport default function generateValidators() {\n  let output = `/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport shallowEqual from \"../../utils/shallowEqual\";\nimport type * as t from \"../..\";\\n\\n`;\n\n  Object.keys(definitions.VISITOR_KEYS).forEach(type => {\n    output += addIsHelper(type);\n  });\n\n  Object.keys(definitions.FLIPPED_ALIAS_KEYS).forEach(type => {\n    output += addIsHelper(type, definitions.FLIPPED_ALIAS_KEYS[type]);\n  });\n\n  Object.keys(definitions.DEPRECATED_KEYS).forEach(type => {\n    const newType = definitions.DEPRECATED_KEYS[type];\n    const deprecated = `console.trace(\"The node type ${type} has been renamed to ${newType}\");`;\n    output += addIsHelper(type, null, deprecated);\n  });\n\n  return output;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}