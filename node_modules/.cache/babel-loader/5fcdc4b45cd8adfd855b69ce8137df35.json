{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\"; // 65536 is the size of a wasm memory page\n// 64 is the maximum chunk size for every possible wasm hash implementation\n// 4 is the maximum number of bytes per char for string encoding (max is utf-8)\n// ~3 makes sure that it's always a block of 4 chars, so avoid partially encoded bytes for base64\n\nconst MAX_SHORT_STRING = Math.floor((65536 - 64) / 4) & ~3;\n\nclass WasmHash {\n  /**\n   * @param {WebAssembly.Instance} instance wasm instance\n   * @param {WebAssembly.Instance[]} instancesPool pool of instances\n   * @param {number} chunkSize size of data chunks passed to wasm\n   * @param {number} digestSize size of digest returned by wasm\n   */\n  constructor(instance, instancesPool, chunkSize, digestSize) {\n    const exports =\n    /** @type {any} */\n    instance.exports;\n    exports.init();\n    this.exports = exports;\n    this.mem = Buffer.from(exports.memory.buffer, 0, 65536);\n    this.buffered = 0;\n    this.instancesPool = instancesPool;\n    this.chunkSize = chunkSize;\n    this.digestSize = digestSize;\n  }\n\n  reset() {\n    this.buffered = 0;\n    this.exports.init();\n  }\n  /**\n   * @param {Buffer | string} data data\n   * @param {BufferEncoding=} encoding encoding\n   * @returns {this} itself\n   */\n\n\n  update(data, encoding) {\n    if (typeof data === \"string\") {\n      while (data.length > MAX_SHORT_STRING) {\n        this._updateWithShortString(data.slice(0, MAX_SHORT_STRING), encoding);\n\n        data = data.slice(MAX_SHORT_STRING);\n      }\n\n      this._updateWithShortString(data, encoding);\n\n      return this;\n    }\n\n    this._updateWithBuffer(data);\n\n    return this;\n  }\n  /**\n   * @param {string} data data\n   * @param {BufferEncoding=} encoding encoding\n   * @returns {void}\n   */\n\n\n  _updateWithShortString(data, encoding) {\n    const {\n      exports,\n      buffered,\n      mem,\n      chunkSize\n    } = this;\n    let endPos;\n\n    if (data.length < 70) {\n      if (!encoding || encoding === \"utf-8\" || encoding === \"utf8\") {\n        endPos = buffered;\n\n        for (let i = 0; i < data.length; i++) {\n          const cc = data.charCodeAt(i);\n\n          if (cc < 0x80) {\n            mem[endPos++] = cc;\n          } else if (cc < 0x800) {\n            mem[endPos] = cc >> 6 | 0xc0;\n            mem[endPos + 1] = cc & 0x3f | 0x80;\n            endPos += 2;\n          } else {\n            // bail-out for weird chars\n            endPos += mem.write(data.slice(i), endPos, encoding);\n            break;\n          }\n        }\n      } else if (encoding === \"latin1\") {\n        endPos = buffered;\n\n        for (let i = 0; i < data.length; i++) {\n          const cc = data.charCodeAt(i);\n          mem[endPos++] = cc;\n        }\n      } else {\n        endPos = buffered + mem.write(data, buffered, encoding);\n      }\n    } else {\n      endPos = buffered + mem.write(data, buffered, encoding);\n    }\n\n    if (endPos < chunkSize) {\n      this.buffered = endPos;\n    } else {\n      const l = endPos & ~(this.chunkSize - 1);\n      exports.update(l);\n      const newBuffered = endPos - l;\n      this.buffered = newBuffered;\n\n      if (newBuffered > 0) {\n        mem.copyWithin(0, l, endPos);\n      }\n    }\n  }\n  /**\n   * @param {Buffer} data data\n   * @returns {void}\n   */\n\n\n  _updateWithBuffer(data) {\n    const {\n      exports,\n      buffered,\n      mem\n    } = this;\n    const length = data.length;\n\n    if (buffered + length < this.chunkSize) {\n      data.copy(mem, buffered, 0, length);\n      this.buffered += length;\n    } else {\n      const l = buffered + length & ~(this.chunkSize - 1);\n\n      if (l > 65536) {\n        let i = 65536 - buffered;\n        data.copy(mem, buffered, 0, i);\n        exports.update(65536);\n        const stop = l - buffered - 65536;\n\n        while (i < stop) {\n          data.copy(mem, 0, i, i + 65536);\n          exports.update(65536);\n          i += 65536;\n        }\n\n        data.copy(mem, 0, i, l - buffered);\n        exports.update(l - buffered - i);\n      } else {\n        data.copy(mem, buffered, 0, l - buffered);\n        exports.update(l);\n      }\n\n      const newBuffered = length + buffered - l;\n      this.buffered = newBuffered;\n\n      if (newBuffered > 0) {\n        data.copy(mem, 0, length - newBuffered, length);\n      }\n    }\n  }\n\n  digest(type) {\n    const {\n      exports,\n      buffered,\n      mem,\n      digestSize\n    } = this;\n    exports.final(buffered);\n    this.instancesPool.push(this);\n    const hex = mem.toString(\"latin1\", 0, digestSize);\n\n    if (type === \"hex\") {\n      return hex;\n    }\n\n    if (type === \"binary\" || !type) {\n      return Buffer.from(hex, \"hex\");\n    }\n\n    return Buffer.from(hex, \"hex\").toString(type);\n  }\n\n}\n\nconst create = (wasmModule, instancesPool, chunkSize, digestSize) => {\n  if (instancesPool.length > 0) {\n    const old = instancesPool.pop();\n    old.reset();\n    return old;\n  } else {\n    return new WasmHash(new WebAssembly.Instance(wasmModule), instancesPool, chunkSize, digestSize);\n  }\n};\n\nmodule.exports = create;\nmodule.exports.MAX_SHORT_STRING = MAX_SHORT_STRING;","map":{"version":3,"names":["MAX_SHORT_STRING","Math","floor","WasmHash","constructor","instance","instancesPool","chunkSize","digestSize","exports","init","mem","Buffer","from","memory","buffer","buffered","reset","update","data","encoding","length","_updateWithShortString","slice","_updateWithBuffer","endPos","i","cc","charCodeAt","write","l","newBuffered","copyWithin","copy","stop","digest","type","final","push","hex","toString","create","wasmModule","old","pop","WebAssembly","Instance","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/react-dev-utils/node_modules/loader-utils/lib/hash/wasm-hash.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n// 65536 is the size of a wasm memory page\n// 64 is the maximum chunk size for every possible wasm hash implementation\n// 4 is the maximum number of bytes per char for string encoding (max is utf-8)\n// ~3 makes sure that it's always a block of 4 chars, so avoid partially encoded bytes for base64\nconst MAX_SHORT_STRING = Math.floor((65536 - 64) / 4) & ~3;\n\nclass WasmHash {\n  /**\n   * @param {WebAssembly.Instance} instance wasm instance\n   * @param {WebAssembly.Instance[]} instancesPool pool of instances\n   * @param {number} chunkSize size of data chunks passed to wasm\n   * @param {number} digestSize size of digest returned by wasm\n   */\n  constructor(instance, instancesPool, chunkSize, digestSize) {\n    const exports = /** @type {any} */ (instance.exports);\n\n    exports.init();\n\n    this.exports = exports;\n    this.mem = Buffer.from(exports.memory.buffer, 0, 65536);\n    this.buffered = 0;\n    this.instancesPool = instancesPool;\n    this.chunkSize = chunkSize;\n    this.digestSize = digestSize;\n  }\n\n  reset() {\n    this.buffered = 0;\n    this.exports.init();\n  }\n\n  /**\n   * @param {Buffer | string} data data\n   * @param {BufferEncoding=} encoding encoding\n   * @returns {this} itself\n   */\n  update(data, encoding) {\n    if (typeof data === \"string\") {\n      while (data.length > MAX_SHORT_STRING) {\n        this._updateWithShortString(data.slice(0, MAX_SHORT_STRING), encoding);\n        data = data.slice(MAX_SHORT_STRING);\n      }\n\n      this._updateWithShortString(data, encoding);\n\n      return this;\n    }\n\n    this._updateWithBuffer(data);\n\n    return this;\n  }\n\n  /**\n   * @param {string} data data\n   * @param {BufferEncoding=} encoding encoding\n   * @returns {void}\n   */\n  _updateWithShortString(data, encoding) {\n    const { exports, buffered, mem, chunkSize } = this;\n\n    let endPos;\n\n    if (data.length < 70) {\n      if (!encoding || encoding === \"utf-8\" || encoding === \"utf8\") {\n        endPos = buffered;\n        for (let i = 0; i < data.length; i++) {\n          const cc = data.charCodeAt(i);\n\n          if (cc < 0x80) {\n            mem[endPos++] = cc;\n          } else if (cc < 0x800) {\n            mem[endPos] = (cc >> 6) | 0xc0;\n            mem[endPos + 1] = (cc & 0x3f) | 0x80;\n            endPos += 2;\n          } else {\n            // bail-out for weird chars\n            endPos += mem.write(data.slice(i), endPos, encoding);\n            break;\n          }\n        }\n      } else if (encoding === \"latin1\") {\n        endPos = buffered;\n\n        for (let i = 0; i < data.length; i++) {\n          const cc = data.charCodeAt(i);\n\n          mem[endPos++] = cc;\n        }\n      } else {\n        endPos = buffered + mem.write(data, buffered, encoding);\n      }\n    } else {\n      endPos = buffered + mem.write(data, buffered, encoding);\n    }\n\n    if (endPos < chunkSize) {\n      this.buffered = endPos;\n    } else {\n      const l = endPos & ~(this.chunkSize - 1);\n\n      exports.update(l);\n\n      const newBuffered = endPos - l;\n\n      this.buffered = newBuffered;\n\n      if (newBuffered > 0) {\n        mem.copyWithin(0, l, endPos);\n      }\n    }\n  }\n\n  /**\n   * @param {Buffer} data data\n   * @returns {void}\n   */\n  _updateWithBuffer(data) {\n    const { exports, buffered, mem } = this;\n    const length = data.length;\n\n    if (buffered + length < this.chunkSize) {\n      data.copy(mem, buffered, 0, length);\n\n      this.buffered += length;\n    } else {\n      const l = (buffered + length) & ~(this.chunkSize - 1);\n\n      if (l > 65536) {\n        let i = 65536 - buffered;\n\n        data.copy(mem, buffered, 0, i);\n        exports.update(65536);\n\n        const stop = l - buffered - 65536;\n\n        while (i < stop) {\n          data.copy(mem, 0, i, i + 65536);\n          exports.update(65536);\n          i += 65536;\n        }\n\n        data.copy(mem, 0, i, l - buffered);\n\n        exports.update(l - buffered - i);\n      } else {\n        data.copy(mem, buffered, 0, l - buffered);\n\n        exports.update(l);\n      }\n\n      const newBuffered = length + buffered - l;\n\n      this.buffered = newBuffered;\n\n      if (newBuffered > 0) {\n        data.copy(mem, 0, length - newBuffered, length);\n      }\n    }\n  }\n\n  digest(type) {\n    const { exports, buffered, mem, digestSize } = this;\n\n    exports.final(buffered);\n\n    this.instancesPool.push(this);\n\n    const hex = mem.toString(\"latin1\", 0, digestSize);\n\n    if (type === \"hex\") {\n      return hex;\n    }\n\n    if (type === \"binary\" || !type) {\n      return Buffer.from(hex, \"hex\");\n    }\n\n    return Buffer.from(hex, \"hex\").toString(type);\n  }\n}\n\nconst create = (wasmModule, instancesPool, chunkSize, digestSize) => {\n  if (instancesPool.length > 0) {\n    const old = instancesPool.pop();\n\n    old.reset();\n\n    return old;\n  } else {\n    return new WasmHash(\n      new WebAssembly.Instance(wasmModule),\n      instancesPool,\n      chunkSize,\n      digestSize\n    );\n  }\n};\n\nmodule.exports = create;\nmodule.exports.MAX_SHORT_STRING = MAX_SHORT_STRING;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}