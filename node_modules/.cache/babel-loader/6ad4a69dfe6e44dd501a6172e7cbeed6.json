{"ast":null,"code":"'use strict';\n/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nfunction InsertionText(text, consumeBlanks) {\n  this.text = text;\n  this.origLength = text.length;\n  this.offsets = [];\n  this.consumeBlanks = consumeBlanks;\n  this.startPos = this.findFirstNonBlank();\n  this.endPos = this.findLastNonBlank();\n}\n\nconst WHITE_RE = /[ \\f\\n\\r\\t\\v\\u00A0\\u2028\\u2029]/;\nInsertionText.prototype = {\n  findFirstNonBlank() {\n    let pos = -1;\n    const text = this.text;\n    const len = text.length;\n    let i;\n\n    for (i = 0; i < len; i += 1) {\n      if (!text.charAt(i).match(WHITE_RE)) {\n        pos = i;\n        break;\n      }\n    }\n\n    return pos;\n  },\n\n  findLastNonBlank() {\n    const text = this.text;\n    const len = text.length;\n    let pos = text.length + 1;\n    let i;\n\n    for (i = len - 1; i >= 0; i -= 1) {\n      if (!text.charAt(i).match(WHITE_RE)) {\n        pos = i;\n        break;\n      }\n    }\n\n    return pos;\n  },\n\n  originalLength() {\n    return this.origLength;\n  },\n\n  insertAt(col, str, insertBefore, consumeBlanks) {\n    consumeBlanks = typeof consumeBlanks === 'undefined' ? this.consumeBlanks : consumeBlanks;\n    col = col > this.originalLength() ? this.originalLength() : col;\n    col = col < 0 ? 0 : col;\n\n    if (consumeBlanks) {\n      if (col <= this.startPos) {\n        col = 0;\n      }\n\n      if (col > this.endPos) {\n        col = this.origLength;\n      }\n    }\n\n    const len = str.length;\n    const offset = this.findOffset(col, len, insertBefore);\n    const realPos = col + offset;\n    const text = this.text;\n    this.text = text.substring(0, realPos) + str + text.substring(realPos);\n    return this;\n  },\n\n  findOffset(pos, len, insertBefore) {\n    const offsets = this.offsets;\n    let offsetObj;\n    let cumulativeOffset = 0;\n    let i;\n\n    for (i = 0; i < offsets.length; i += 1) {\n      offsetObj = offsets[i];\n\n      if (offsetObj.pos < pos || offsetObj.pos === pos && !insertBefore) {\n        cumulativeOffset += offsetObj.len;\n      }\n\n      if (offsetObj.pos >= pos) {\n        break;\n      }\n    }\n\n    if (offsetObj && offsetObj.pos === pos) {\n      offsetObj.len += len;\n    } else {\n      offsets.splice(i, 0, {\n        pos,\n        len\n      });\n    }\n\n    return cumulativeOffset;\n  },\n\n  wrap(startPos, startText, endPos, endText, consumeBlanks) {\n    this.insertAt(startPos, startText, true, consumeBlanks);\n    this.insertAt(endPos, endText, false, consumeBlanks);\n    return this;\n  },\n\n  wrapLine(startText, endText) {\n    this.wrap(0, startText, this.originalLength(), endText);\n  },\n\n  toString() {\n    return this.text;\n  }\n\n};\nmodule.exports = InsertionText;","map":{"version":3,"names":["InsertionText","text","consumeBlanks","origLength","length","offsets","startPos","findFirstNonBlank","endPos","findLastNonBlank","WHITE_RE","prototype","pos","len","i","charAt","match","originalLength","insertAt","col","str","insertBefore","offset","findOffset","realPos","substring","offsetObj","cumulativeOffset","splice","wrap","startText","endText","wrapLine","toString","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/istanbul-reports/lib/html/insertion-text.js"],"sourcesContent":["'use strict';\n/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nfunction InsertionText(text, consumeBlanks) {\n    this.text = text;\n    this.origLength = text.length;\n    this.offsets = [];\n    this.consumeBlanks = consumeBlanks;\n    this.startPos = this.findFirstNonBlank();\n    this.endPos = this.findLastNonBlank();\n}\n\nconst WHITE_RE = /[ \\f\\n\\r\\t\\v\\u00A0\\u2028\\u2029]/;\n\nInsertionText.prototype = {\n    findFirstNonBlank() {\n        let pos = -1;\n        const text = this.text;\n        const len = text.length;\n        let i;\n        for (i = 0; i < len; i += 1) {\n            if (!text.charAt(i).match(WHITE_RE)) {\n                pos = i;\n                break;\n            }\n        }\n        return pos;\n    },\n    findLastNonBlank() {\n        const text = this.text;\n        const len = text.length;\n        let pos = text.length + 1;\n        let i;\n        for (i = len - 1; i >= 0; i -= 1) {\n            if (!text.charAt(i).match(WHITE_RE)) {\n                pos = i;\n                break;\n            }\n        }\n        return pos;\n    },\n    originalLength() {\n        return this.origLength;\n    },\n\n    insertAt(col, str, insertBefore, consumeBlanks) {\n        consumeBlanks =\n            typeof consumeBlanks === 'undefined'\n                ? this.consumeBlanks\n                : consumeBlanks;\n        col = col > this.originalLength() ? this.originalLength() : col;\n        col = col < 0 ? 0 : col;\n\n        if (consumeBlanks) {\n            if (col <= this.startPos) {\n                col = 0;\n            }\n            if (col > this.endPos) {\n                col = this.origLength;\n            }\n        }\n\n        const len = str.length;\n        const offset = this.findOffset(col, len, insertBefore);\n        const realPos = col + offset;\n        const text = this.text;\n        this.text = text.substring(0, realPos) + str + text.substring(realPos);\n        return this;\n    },\n\n    findOffset(pos, len, insertBefore) {\n        const offsets = this.offsets;\n        let offsetObj;\n        let cumulativeOffset = 0;\n        let i;\n\n        for (i = 0; i < offsets.length; i += 1) {\n            offsetObj = offsets[i];\n            if (\n                offsetObj.pos < pos ||\n                (offsetObj.pos === pos && !insertBefore)\n            ) {\n                cumulativeOffset += offsetObj.len;\n            }\n            if (offsetObj.pos >= pos) {\n                break;\n            }\n        }\n        if (offsetObj && offsetObj.pos === pos) {\n            offsetObj.len += len;\n        } else {\n            offsets.splice(i, 0, { pos, len });\n        }\n        return cumulativeOffset;\n    },\n\n    wrap(startPos, startText, endPos, endText, consumeBlanks) {\n        this.insertAt(startPos, startText, true, consumeBlanks);\n        this.insertAt(endPos, endText, false, consumeBlanks);\n        return this;\n    },\n\n    wrapLine(startText, endText) {\n        this.wrap(0, startText, this.originalLength(), endText);\n    },\n\n    toString() {\n        return this.text;\n    }\n};\n\nmodule.exports = InsertionText;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}