{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformFile = void 0;\nexports.transformFileAsync = transformFileAsync;\nexports.transformFileSync = transformFileSync;\n\nconst transformFile = function transformFile(filename, opts, callback) {\n  if (typeof opts === \"function\") {\n    callback = opts;\n  }\n\n  callback(new Error(\"Transforming files is not supported in browsers\"), null);\n};\n\nexports.transformFile = transformFile;\n\nfunction transformFileSync() {\n  throw new Error(\"Transforming files is not supported in browsers\");\n}\n\nfunction transformFileAsync() {\n  return Promise.reject(new Error(\"Transforming files is not supported in browsers\"));\n}\n\n0 && 0;","map":{"version":3,"mappings":";;;;;;;;;AAUO,MAAMA,aAA4B,GAAG,SAASA,aAAT,CAC1CC,QAD0C,EAE1CC,IAF0C,EAG1CC,QAH0C,EAI1C;EACA,IAAI,OAAOD,IAAP,KAAgB,UAApB,EAAgC;IAC9BC,QAAQ,GAAGD,IAAXC;EACD;;EAEDA,QAAQ,CAAC,IAAIC,KAAJ,CAAU,iDAAV,CAAD,EAA+D,IAA/D,CAARD;AATK;;;;AAYA,SAASE,iBAAT,GAAoC;EACzC,MAAM,IAAID,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAEM,SAASE,kBAAT,GAA8B;EACnC,OAAOC,OAAO,CAACC,MAARD,CACL,IAAIH,KAAJ,CAAU,iDAAV,CADKG,CAAP;AAGD","names":["transformFile","filename","opts","callback","Error","transformFileSync","transformFileAsync","Promise","reject"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\transform-file-browser.ts"],"sourcesContent":["// duplicated from transform-file so we do not have to import anything here\ntype TransformFile = {\n  (filename: string, callback: (error: Error, file: null) => void): void;\n  (\n    filename: string,\n    opts: any,\n    callback: (error: Error, file: null) => void,\n  ): void;\n};\n\nexport const transformFile: TransformFile = function transformFile(\n  filename,\n  opts,\n  callback?: (error: Error, file: null) => void,\n) {\n  if (typeof opts === \"function\") {\n    callback = opts;\n  }\n\n  callback(new Error(\"Transforming files is not supported in browsers\"), null);\n};\n\nexport function transformFileSync(): never {\n  throw new Error(\"Transforming files is not supported in browsers\");\n}\n\nexport function transformFileAsync() {\n  return Promise.reject(\n    new Error(\"Transforming files is not supported in browsers\"),\n  );\n}\n"]},"metadata":{},"sourceType":"script"}