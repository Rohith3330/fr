{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n'use strict';\n\nconst UTIL = require('util'),\n      PATH = require('path'),\n      EOL = require('os').EOL,\n      Q = require('q'),\n      chalk = require('chalk'),\n      CoaObject = require('./coaobject'),\n      Opt = require('./opt'),\n      Arg = require('./arg'),\n      completion = require('./completion');\n/**\n * Command\n *\n * Top level entity. Commands may have options and arguments.\n *\n * @namespace\n * @class Cmd\n * @extends CoaObject\n */\n\n\nclass Cmd extends CoaObject {\n  /**\n   * @constructs\n   * @param {COA.Cmd} [cmd] parent command\n   */\n  constructor(cmd) {\n    super(cmd);\n\n    this._parent(cmd);\n\n    this._cmds = [];\n    this._cmdsByName = {};\n    this._opts = [];\n    this._optsByKey = {};\n    this._args = [];\n    this._api = null;\n    this._ext = false;\n  }\n\n  static create(cmd) {\n    return new Cmd(cmd);\n  }\n  /**\n   * Returns object containing all its subcommands as methods\n   * to use from other programs.\n   *\n   * @returns {Object}\n   */\n\n\n  get api() {\n    // Need _this here because of passed arguments into _api\n    const _this = this;\n\n    this._api || (this._api = function () {\n      return _this.invoke.apply(_this, arguments);\n    });\n    const cmds = this._cmdsByName;\n    Object.keys(cmds).forEach(cmd => {\n      this._api[cmd] = cmds[cmd].api;\n    });\n    return this._api;\n  }\n\n  _parent(cmd) {\n    this._cmd = cmd || this;\n    this.isRootCmd || cmd._cmds.push(this) && this._name && (this._cmd._cmdsByName[this._name] = this);\n    return this;\n  }\n\n  get isRootCmd() {\n    return this._cmd === this;\n  }\n  /**\n   * Set a canonical command identifier to be used anywhere in the API.\n   *\n   * @param {String} name - command name\n   * @returns {COA.Cmd} - this instance (for chainability)\n   */\n\n\n  name(name) {\n    super.name(name);\n    this.isRootCmd || (this._cmd._cmdsByName[name] = this);\n    return this;\n  }\n  /**\n   * Create new or add existing subcommand for current command.\n   *\n   * @param {COA.Cmd} [cmd] existing command instance\n   * @returns {COA.Cmd} new subcommand instance\n   */\n\n\n  cmd(cmd) {\n    return cmd ? cmd._parent(this) : new Cmd(this);\n  }\n  /**\n   * Create option for current command.\n   *\n   * @returns {COA.Opt} new option instance\n   */\n\n\n  opt() {\n    return new Opt(this);\n  }\n  /**\n   * Create argument for current command.\n   *\n   * @returns {COA.Opt} new argument instance\n   */\n\n\n  arg() {\n    return new Arg(this);\n  }\n  /**\n   * Add (or set) action for current command.\n   *\n   * @param {Function} act - action function,\n   *         invoked in the context of command instance\n   *         and has the parameters:\n   *                 - {Object} opts - parsed options\n   *                 - {String[]} args - parsed arguments\n   *                 - {Object} res - actions result accumulator\n   *         It can return rejected promise by Cmd.reject (in case of error)\n   *         or any other value treated as result.\n   * @param {Boolean} [force=false] flag for set action instead add to existings\n   * @returns {COA.Cmd} - this instance (for chainability)\n   */\n\n\n  act(act, force) {\n    if (!act) return this;\n    (!this._act || force) && (this._act = []);\n\n    this._act.push(act);\n\n    return this;\n  }\n  /**\n   * Make command \"helpful\", i.e. add -h --help flags for print usage.\n   *\n   * @returns {COA.Cmd} - this instance (for chainability)\n   */\n\n\n  helpful() {\n    return this.opt().name('help').title('Help').short('h').long('help').flag().only().act(function () {\n      return this.usage();\n    }).end();\n  }\n  /**\n   * Adds shell completion to command, adds \"completion\" subcommand,\n   * that makes all the magic.\n   * Must be called only on root command.\n   *\n   * @returns {COA.Cmd} - this instance (for chainability)\n   */\n\n\n  completable() {\n    return this.cmd().name('completion').apply(completion).end();\n  }\n  /**\n   * Allow command to be extendable by external node.js modules.\n   *\n   * @param {String} [pattern]  Pattern of node.js module to find subcommands at.\n   * @returns {COA.Cmd} - this instance (for chainability)\n   */\n\n\n  extendable(pattern) {\n    this._ext = pattern || true;\n    return this;\n  }\n\n  _exit(msg, code) {\n    return process.once('exit', function (exitCode) {\n      msg && console[code === 0 ? 'log' : 'error'](msg);\n      process.exit(code || exitCode || 0);\n    });\n  }\n  /**\n   * Build full usage text for current command instance.\n   *\n   * @returns {String} usage text\n   */\n\n\n  usage() {\n    const res = [];\n    this._title && res.push(this._fullTitle());\n    res.push('', 'Usage:');\n    this._cmds.length && res.push(['', '', chalk.redBright(this._fullName()), chalk.blueBright('COMMAND'), chalk.greenBright('[OPTIONS]'), chalk.magentaBright('[ARGS]')].join(' '));\n    this._opts.length + this._args.length && res.push(['', '', chalk.redBright(this._fullName()), chalk.greenBright('[OPTIONS]'), chalk.magentaBright('[ARGS]')].join(' '));\n    res.push(this._usages(this._cmds, 'Commands'), this._usages(this._opts, 'Options'), this._usages(this._args, 'Arguments'));\n    return res.join(EOL);\n  }\n\n  _usage() {\n    return chalk.blueBright(this._name) + ' : ' + this._title;\n  }\n\n  _usages(os, title) {\n    if (!os.length) return;\n    return ['', title + ':'].concat(os.map(o => `  ${o._usage()}`)).join(EOL);\n  }\n\n  _fullTitle() {\n    return `${this.isRootCmd ? '' : this._cmd._fullTitle() + EOL}${this._title}`;\n  }\n\n  _fullName() {\n    return `${this.isRootCmd ? '' : this._cmd._fullName() + ' '}${PATH.basename(this._name)}`;\n  }\n\n  _ejectOpt(opts, opt) {\n    const pos = opts.indexOf(opt);\n    if (pos === -1) return;\n    return opts[pos]._arr ? opts[pos] : opts.splice(pos, 1)[0];\n  }\n\n  _checkRequired(opts, args) {\n    if (this._opts.some(opt => opt._only && opts.hasOwnProperty(opt._name))) return;\n\n    const all = this._opts.concat(this._args);\n\n    let i;\n\n    while (i = all.shift()) if (i._req && i._checkParsed(opts, args)) return this.reject(i._requiredText());\n  }\n\n  _parseCmd(argv, unparsed) {\n    unparsed || (unparsed = []);\n    let i,\n        optSeen = false;\n\n    while (i = argv.shift()) {\n      i.indexOf('-') || (optSeen = true);\n\n      if (optSeen || !/^\\w[\\w-_]*$/.test(i)) {\n        unparsed.push(i);\n        continue;\n      }\n\n      let pkg,\n          cmd = this._cmdsByName[i];\n\n      if (!cmd && this._ext) {\n        if (this._ext === true) {\n          pkg = i;\n          let c = this;\n\n          while (true) {\n            // eslint-disable-line\n            pkg = c._name + '-' + pkg;\n            if (c.isRootCmd) break;\n            c = c._cmd;\n          }\n        } else if (typeof this._ext === 'string') pkg = ~this._ext.indexOf('%s') ? UTIL.format(this._ext, i) : this._ext + i;\n\n        let cmdDesc;\n\n        try {\n          cmdDesc = require(pkg);\n        } catch (e) {// Dummy\n        }\n\n        if (cmdDesc) {\n          if (typeof cmdDesc === 'function') {\n            this.cmd().name(i).apply(cmdDesc).end();\n          } else if (typeof cmdDesc === 'object') {\n            this.cmd(cmdDesc);\n            cmdDesc.name(i);\n          } else throw new Error('Error: Unsupported command declaration type, ' + 'should be a function or COA.Cmd() object');\n\n          cmd = this._cmdsByName[i];\n        }\n      }\n\n      if (cmd) return cmd._parseCmd(argv, unparsed);\n      unparsed.push(i);\n    }\n\n    return {\n      cmd: this,\n      argv: unparsed\n    };\n  }\n\n  _parseOptsAndArgs(argv) {\n    const opts = {},\n          args = {},\n          nonParsedOpts = this._opts.concat(),\n          nonParsedArgs = this._args.concat();\n\n    let res, i;\n\n    while (i = argv.shift()) {\n      if (i !== '--' && i[0] === '-') {\n        const m = i.match(/^(--\\w[\\w-_]*)=(.*)$/);\n\n        if (m) {\n          i = m[1];\n          this._optsByKey[i]._flag || argv.unshift(m[2]);\n        }\n\n        const opt = this._ejectOpt(nonParsedOpts, this._optsByKey[i]);\n\n        if (!opt) return this.reject(`Unknown option: ${i}`);\n        if (Q.isRejected(res = opt._parse(argv, opts))) return res;\n        continue;\n      }\n\n      i === '--' && (i = argv.splice(0));\n      Array.isArray(i) || (i = [i]);\n      let a;\n\n      while (a = i.shift()) {\n        let arg = nonParsedArgs.shift();\n        if (!arg) return this.reject(`Unknown argument: ${a}`);\n        arg._arr && nonParsedArgs.unshift(arg);\n        if (Q.isRejected(res = arg._parse(a, args))) return res;\n      }\n    }\n\n    return {\n      opts: this._setDefaults(opts, nonParsedOpts),\n      args: this._setDefaults(args, nonParsedArgs)\n    };\n  }\n\n  _setDefaults(params, desc) {\n    for (const item of desc) item._def !== undefined && !params.hasOwnProperty(item._name) && item._saveVal(params, item._def);\n\n    return params;\n  }\n\n  _processParams(params, desc) {\n    const notExists = [];\n\n    for (const item of desc) {\n      const n = item._name;\n\n      if (!params.hasOwnProperty(n)) {\n        notExists.push(item);\n        continue;\n      }\n\n      const vals = Array.isArray(params[n]) ? params[n] : [params[n]];\n      delete params[n];\n      let res;\n\n      for (const v of vals) if (Q.isRejected(res = item._saveVal(params, v))) return res;\n    }\n\n    return this._setDefaults(params, notExists);\n  }\n\n  _parseArr(argv) {\n    return Q.when(this._parseCmd(argv), p => Q.when(p.cmd._parseOptsAndArgs(p.argv), r => ({\n      cmd: p.cmd,\n      opts: r.opts,\n      args: r.args\n    })));\n  }\n\n  _do(inputPromise) {\n    return Q.when(inputPromise, input => {\n      return [this._checkRequired].concat(input.cmd._act || []).reduce((res, act) => Q.when(res, prev => act.call(input.cmd, input.opts, input.args, prev)), undefined);\n    });\n  }\n  /**\n   * Parse arguments from simple format like NodeJS process.argv\n   * and run ahead current program, i.e. call process.exit when all actions done.\n   *\n   * @param {String[]} argv - arguments\n   * @returns {COA.Cmd} - this instance (for chainability)\n   */\n\n\n  run(argv) {\n    argv || (argv = process.argv.slice(2));\n\n    const cb = code => res => res ? this._exit(res.stack || res.toString(), (res.hasOwnProperty('exitCode') ? res.exitCode : code) || 0) : this._exit();\n\n    Q.when(this.do(argv), cb(0), cb(1)).done();\n    return this;\n  }\n  /**\n   * Invoke specified (or current) command using provided\n   * options and arguments.\n   *\n   * @param {String|String[]} [cmds] - subcommand to invoke (optional)\n   * @param {Object} [opts] - command options (optional)\n   * @param {Object} [args] - command arguments (optional)\n   * @returns {Q.Promise}\n   */\n\n\n  invoke(cmds, opts, args) {\n    cmds || (cmds = []);\n    opts || (opts = {});\n    args || (args = {});\n    typeof cmds === 'string' && (cmds = cmds.split(' '));\n\n    if (arguments.length < 3 && !Array.isArray(cmds)) {\n      args = opts;\n      opts = cmds;\n      cmds = [];\n    }\n\n    return Q.when(this._parseCmd(cmds), p => {\n      if (p.argv.length) return this.reject(`Unknown command: ${cmds.join(' ')}`);\n      return Q.all([this._processParams(opts, this._opts), this._processParams(args, this._args)]).spread((_opts, _args) => this._do({\n        cmd: p.cmd,\n        opts: _opts,\n        args: _args\n      }).fail(res => res && res.exitCode === 0 ? res.toString() : this.reject(res)));\n    });\n  }\n\n}\n/**\n * Convenient function to run command from tests.\n *\n * @param {String[]} argv - arguments\n * @returns {Q.Promise}\n */\n\n\nCmd.prototype.do = function (argv) {\n  return this._do(this._parseArr(argv || []));\n};\n\nmodule.exports = Cmd;","map":{"version":3,"names":["UTIL","require","PATH","EOL","Q","chalk","CoaObject","Opt","Arg","completion","Cmd","constructor","cmd","_parent","_cmds","_cmdsByName","_opts","_optsByKey","_args","_api","_ext","create","api","_this","invoke","apply","arguments","cmds","Object","keys","forEach","_cmd","isRootCmd","push","_name","name","opt","arg","act","force","_act","helpful","title","short","long","flag","only","usage","end","completable","extendable","pattern","_exit","msg","code","process","once","exitCode","console","exit","res","_title","_fullTitle","length","redBright","_fullName","blueBright","greenBright","magentaBright","join","_usages","_usage","os","concat","map","o","basename","_ejectOpt","opts","pos","indexOf","_arr","splice","_checkRequired","args","some","_only","hasOwnProperty","all","i","shift","_req","_checkParsed","reject","_requiredText","_parseCmd","argv","unparsed","optSeen","test","pkg","c","format","cmdDesc","e","Error","_parseOptsAndArgs","nonParsedOpts","nonParsedArgs","m","match","_flag","unshift","isRejected","_parse","Array","isArray","a","_setDefaults","params","desc","item","_def","undefined","_saveVal","_processParams","notExists","n","vals","v","_parseArr","when","p","r","_do","inputPromise","input","reduce","prev","call","run","slice","cb","stack","toString","do","done","split","spread","fail","prototype","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/coa/lib/cmd.js"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n'use strict';\n\nconst\n    UTIL = require('util'),\n    PATH = require('path'),\n    EOL = require('os').EOL,\n\n    Q = require('q'),\n    chalk = require('chalk'),\n\n    CoaObject = require('./coaobject'),\n    Opt = require('./opt'),\n    Arg = require('./arg'),\n    completion = require('./completion');\n\n/**\n * Command\n *\n * Top level entity. Commands may have options and arguments.\n *\n * @namespace\n * @class Cmd\n * @extends CoaObject\n */\nclass Cmd extends CoaObject {\n    /**\n     * @constructs\n     * @param {COA.Cmd} [cmd] parent command\n     */\n    constructor(cmd) {\n        super(cmd);\n\n        this._parent(cmd);\n        this._cmds = [];\n        this._cmdsByName = {};\n        this._opts = [];\n        this._optsByKey = {};\n        this._args = [];\n        this._api = null;\n        this._ext = false;\n    }\n\n    static create(cmd) {\n        return new Cmd(cmd);\n    }\n\n    /**\n     * Returns object containing all its subcommands as methods\n     * to use from other programs.\n     *\n     * @returns {Object}\n     */\n    get api() {\n        // Need _this here because of passed arguments into _api\n        const _this = this;\n        this._api || (this._api = function () {\n            return _this.invoke.apply(_this, arguments);\n        });\n\n        const cmds = this._cmdsByName;\n        Object.keys(cmds).forEach(cmd => { this._api[cmd] = cmds[cmd].api; });\n\n        return this._api;\n    }\n\n    _parent(cmd) {\n        this._cmd = cmd || this;\n\n        this.isRootCmd ||\n            cmd._cmds.push(this) &&\n            this._name &&\n            (this._cmd._cmdsByName[this._name] = this);\n\n        return this;\n    }\n\n    get isRootCmd() {\n        return this._cmd === this;\n    }\n\n    /**\n     * Set a canonical command identifier to be used anywhere in the API.\n     *\n     * @param {String} name - command name\n     * @returns {COA.Cmd} - this instance (for chainability)\n     */\n    name(name) {\n        super.name(name);\n\n        this.isRootCmd ||\n            (this._cmd._cmdsByName[name] = this);\n\n        return this;\n    }\n\n    /**\n     * Create new or add existing subcommand for current command.\n     *\n     * @param {COA.Cmd} [cmd] existing command instance\n     * @returns {COA.Cmd} new subcommand instance\n     */\n    cmd(cmd) {\n        return cmd?\n            cmd._parent(this)\n            : new Cmd(this);\n    }\n\n    /**\n     * Create option for current command.\n     *\n     * @returns {COA.Opt} new option instance\n     */\n    opt() {\n        return new Opt(this);\n    }\n\n    /**\n     * Create argument for current command.\n     *\n     * @returns {COA.Opt} new argument instance\n     */\n    arg() {\n        return new Arg(this);\n    }\n\n    /**\n     * Add (or set) action for current command.\n     *\n     * @param {Function} act - action function,\n     *         invoked in the context of command instance\n     *         and has the parameters:\n     *                 - {Object} opts - parsed options\n     *                 - {String[]} args - parsed arguments\n     *                 - {Object} res - actions result accumulator\n     *         It can return rejected promise by Cmd.reject (in case of error)\n     *         or any other value treated as result.\n     * @param {Boolean} [force=false] flag for set action instead add to existings\n     * @returns {COA.Cmd} - this instance (for chainability)\n     */\n    act(act, force) {\n        if(!act) return this;\n\n        (!this._act || force) && (this._act = []);\n        this._act.push(act);\n\n        return this;\n    }\n\n    /**\n     * Make command \"helpful\", i.e. add -h --help flags for print usage.\n     *\n     * @returns {COA.Cmd} - this instance (for chainability)\n     */\n    helpful() {\n        return this.opt()\n            .name('help')\n            .title('Help')\n            .short('h')\n            .long('help')\n            .flag()\n            .only()\n            .act(function() {\n                return this.usage();\n            })\n            .end();\n    }\n\n    /**\n     * Adds shell completion to command, adds \"completion\" subcommand,\n     * that makes all the magic.\n     * Must be called only on root command.\n     *\n     * @returns {COA.Cmd} - this instance (for chainability)\n     */\n    completable() {\n        return this.cmd()\n            .name('completion')\n            .apply(completion)\n            .end();\n    }\n\n    /**\n     * Allow command to be extendable by external node.js modules.\n     *\n     * @param {String} [pattern]  Pattern of node.js module to find subcommands at.\n     * @returns {COA.Cmd} - this instance (for chainability)\n     */\n    extendable(pattern) {\n        this._ext = pattern || true;\n        return this;\n    }\n\n    _exit(msg, code) {\n        return process.once('exit', function(exitCode) {\n            msg && console[code === 0 ? 'log' : 'error'](msg);\n            process.exit(code || exitCode || 0);\n        });\n    }\n\n    /**\n     * Build full usage text for current command instance.\n     *\n     * @returns {String} usage text\n     */\n    usage() {\n        const res = [];\n\n        this._title && res.push(this._fullTitle());\n\n        res.push('', 'Usage:');\n\n        this._cmds.length\n            && res.push([\n                '', '', chalk.redBright(this._fullName()), chalk.blueBright('COMMAND'),\n                chalk.greenBright('[OPTIONS]'), chalk.magentaBright('[ARGS]')\n            ].join(' '));\n\n        (this._opts.length + this._args.length)\n            && res.push([\n                '', '', chalk.redBright(this._fullName()),\n                chalk.greenBright('[OPTIONS]'), chalk.magentaBright('[ARGS]')\n            ].join(' '));\n\n        res.push(\n            this._usages(this._cmds, 'Commands'),\n            this._usages(this._opts, 'Options'),\n            this._usages(this._args, 'Arguments')\n        );\n\n        return res.join(EOL);\n    }\n\n    _usage() {\n        return chalk.blueBright(this._name) + ' : ' + this._title;\n    }\n\n    _usages(os, title) {\n        if(!os.length) return;\n\n        return ['', title + ':']\n            .concat(os.map(o => `  ${o._usage()}`))\n            .join(EOL);\n    }\n\n    _fullTitle() {\n        return `${this.isRootCmd? '' : this._cmd._fullTitle() + EOL}${this._title}`;\n    }\n\n    _fullName() {\n        return `${this.isRootCmd? '' : this._cmd._fullName() + ' '}${PATH.basename(this._name)}`;\n    }\n\n    _ejectOpt(opts, opt) {\n        const pos = opts.indexOf(opt);\n        if(pos === -1) return;\n\n        return opts[pos]._arr?\n            opts[pos] :\n            opts.splice(pos, 1)[0];\n    }\n\n    _checkRequired(opts, args) {\n        if(this._opts.some(opt => opt._only && opts.hasOwnProperty(opt._name))) return;\n\n        const all = this._opts.concat(this._args);\n        let i;\n        while(i = all.shift())\n            if(i._req && i._checkParsed(opts, args))\n                return this.reject(i._requiredText());\n    }\n\n    _parseCmd(argv, unparsed) {\n        unparsed || (unparsed = []);\n\n        let i,\n            optSeen = false;\n        while(i = argv.shift()) {\n            i.indexOf('-') || (optSeen = true);\n\n            if(optSeen || !/^\\w[\\w-_]*$/.test(i)) {\n                unparsed.push(i);\n                continue;\n            }\n\n            let pkg, cmd = this._cmdsByName[i];\n            if(!cmd && this._ext) {\n                if(this._ext === true) {\n                    pkg = i;\n                    let c = this;\n                    while(true) { // eslint-disable-line\n                        pkg = c._name + '-' + pkg;\n                        if(c.isRootCmd) break;\n                        c = c._cmd;\n                    }\n                } else if(typeof this._ext === 'string')\n                    pkg = ~this._ext.indexOf('%s')?\n                        UTIL.format(this._ext, i) :\n                        this._ext + i;\n\n                let cmdDesc;\n                try {\n                    cmdDesc = require(pkg);\n                } catch(e) {\n                    // Dummy\n                }\n\n                if(cmdDesc) {\n                    if(typeof cmdDesc === 'function') {\n                        this.cmd().name(i).apply(cmdDesc).end();\n                    } else if(typeof cmdDesc === 'object') {\n                        this.cmd(cmdDesc);\n                        cmdDesc.name(i);\n                    } else throw new Error('Error: Unsupported command declaration type, '\n                        + 'should be a function or COA.Cmd() object');\n\n                    cmd = this._cmdsByName[i];\n                }\n            }\n\n            if(cmd) return cmd._parseCmd(argv, unparsed);\n\n            unparsed.push(i);\n        }\n\n        return { cmd : this, argv : unparsed };\n    }\n\n    _parseOptsAndArgs(argv) {\n        const opts = {},\n            args = {},\n            nonParsedOpts = this._opts.concat(),\n            nonParsedArgs = this._args.concat();\n\n        let res, i;\n        while(i = argv.shift()) {\n            if(i !== '--' && i[0] === '-') {\n                const m = i.match(/^(--\\w[\\w-_]*)=(.*)$/);\n                if(m) {\n                    i = m[1];\n                    this._optsByKey[i]._flag || argv.unshift(m[2]);\n                }\n\n                const opt = this._ejectOpt(nonParsedOpts, this._optsByKey[i]);\n                if(!opt) return this.reject(`Unknown option: ${i}`);\n\n                if(Q.isRejected(res = opt._parse(argv, opts))) return res;\n\n                continue;\n            }\n\n            i === '--' && (i = argv.splice(0));\n            Array.isArray(i) || (i = [i]);\n\n            let a;\n            while(a = i.shift()) {\n                let arg = nonParsedArgs.shift();\n                if(!arg) return this.reject(`Unknown argument: ${a}`);\n\n                arg._arr && nonParsedArgs.unshift(arg);\n                if(Q.isRejected(res = arg._parse(a, args))) return res;\n            }\n        }\n\n        return {\n            opts : this._setDefaults(opts, nonParsedOpts),\n            args : this._setDefaults(args, nonParsedArgs)\n        };\n    }\n\n    _setDefaults(params, desc) {\n        for(const item of desc)\n            item._def !== undefined &&\n                !params.hasOwnProperty(item._name) &&\n                item._saveVal(params, item._def);\n\n        return params;\n    }\n\n    _processParams(params, desc) {\n        const notExists = [];\n\n        for(const item of desc) {\n            const n = item._name;\n\n            if(!params.hasOwnProperty(n)) {\n                notExists.push(item);\n                continue;\n            }\n\n            const vals = Array.isArray(params[n])? params[n] : [params[n]];\n            delete params[n];\n\n            let res;\n            for(const v of vals)\n                if(Q.isRejected(res = item._saveVal(params, v)))\n                    return res;\n        }\n\n        return this._setDefaults(params, notExists);\n    }\n\n    _parseArr(argv) {\n        return Q.when(this._parseCmd(argv), p =>\n            Q.when(p.cmd._parseOptsAndArgs(p.argv), r => ({\n                cmd : p.cmd,\n                opts : r.opts,\n                args : r.args\n            })));\n    }\n\n    _do(inputPromise) {\n        return Q.when(inputPromise, input => {\n            return [this._checkRequired]\n                .concat(input.cmd._act || [])\n                .reduce((res, act) =>\n                    Q.when(res, prev => act.call(input.cmd, input.opts, input.args, prev)),\n                    undefined);\n        });\n    }\n\n    /**\n     * Parse arguments from simple format like NodeJS process.argv\n     * and run ahead current program, i.e. call process.exit when all actions done.\n     *\n     * @param {String[]} argv - arguments\n     * @returns {COA.Cmd} - this instance (for chainability)\n     */\n    run(argv) {\n        argv || (argv = process.argv.slice(2));\n\n        const cb = code =>\n            res => res?\n                this._exit(res.stack || res.toString(), (res.hasOwnProperty('exitCode')? res.exitCode : code) || 0) :\n                this._exit();\n\n        Q.when(this.do(argv), cb(0), cb(1)).done();\n\n        return this;\n    }\n\n    /**\n     * Invoke specified (or current) command using provided\n     * options and arguments.\n     *\n     * @param {String|String[]} [cmds] - subcommand to invoke (optional)\n     * @param {Object} [opts] - command options (optional)\n     * @param {Object} [args] - command arguments (optional)\n     * @returns {Q.Promise}\n     */\n    invoke(cmds, opts, args) {\n        cmds || (cmds = []);\n        opts || (opts = {});\n        args || (args = {});\n        typeof cmds === 'string' && (cmds = cmds.split(' '));\n\n        if(arguments.length < 3 && !Array.isArray(cmds)) {\n            args = opts;\n            opts = cmds;\n            cmds = [];\n        }\n\n        return Q.when(this._parseCmd(cmds), p => {\n            if(p.argv.length)\n                return this.reject(`Unknown command: ${cmds.join(' ')}`);\n\n            return Q.all([\n                this._processParams(opts, this._opts),\n                this._processParams(args, this._args)\n            ]).spread((_opts, _args) =>\n                this._do({\n                    cmd : p.cmd,\n                    opts : _opts,\n                    args : _args\n                })\n                .fail(res => (res && res.exitCode === 0)?\n                    res.toString() :\n                    this.reject(res)));\n        });\n    }\n}\n\n/**\n * Convenient function to run command from tests.\n *\n * @param {String[]} argv - arguments\n * @returns {Q.Promise}\n */\nCmd.prototype.do = function(argv) {\n    return this._do(this._parseArr(argv || []));\n};\n\nmodule.exports = Cmd;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}