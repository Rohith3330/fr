{"ast":null,"code":"/**\n * @fileoverview Prevent declaring unused methods and properties of component class\n * @author Paweł Nowak, Berton Zhu\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst componentUtil = require('../util/componentUtil');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst LIFECYCLE_METHODS = new Set(['constructor', 'componentDidCatch', 'componentDidMount', 'componentDidUpdate', 'componentWillMount', 'componentWillReceiveProps', 'componentWillUnmount', 'componentWillUpdate', 'getChildContext', 'getSnapshotBeforeUpdate', 'render', 'shouldComponentUpdate', 'UNSAFE_componentWillMount', 'UNSAFE_componentWillReceiveProps', 'UNSAFE_componentWillUpdate']);\nconst ES6_LIFECYCLE = new Set(['state']);\nconst ES5_LIFECYCLE = new Set(['getInitialState', 'getDefaultProps', 'mixins']);\n\nfunction isKeyLiteralLike(node, property) {\n  return property.type === 'Literal' || property.type === 'TemplateLiteral' && property.expressions.length === 0 || node.computed === false && property.type === 'Identifier';\n} // Descend through all wrapping TypeCastExpressions and return the expression\n// that was cast.\n\n\nfunction uncast(node) {\n  while (node.type === 'TypeCastExpression') {\n    node = node.expression;\n  }\n\n  return node;\n} // Return the name of an identifier or the string value of a literal. Useful\n// anywhere that a literal may be used as a key (e.g., member expressions,\n// method definitions, ObjectExpression property keys).\n\n\nfunction getName(node) {\n  node = uncast(node);\n  const type = node.type;\n\n  if (type === 'Identifier') {\n    return node.name;\n  }\n\n  if (type === 'Literal') {\n    return String(node.value);\n  }\n\n  if (type === 'TemplateLiteral' && node.expressions.length === 0) {\n    return node.quasis[0].value.raw;\n  }\n\n  return null;\n}\n\nfunction isThisExpression(node) {\n  return uncast(node).type === 'ThisExpression';\n}\n\nfunction getInitialClassInfo(node, isClass) {\n  return {\n    classNode: node,\n    isClass,\n    // Set of nodes where properties were defined.\n    properties: new Set(),\n    // Set of names of properties that we've seen used.\n    usedProperties: new Set(),\n    inStatic: false\n  };\n}\n\nconst messages = {\n  unused: 'Unused method or property \"{{name}}\"',\n  unusedWithClass: 'Unused method or property \"{{name}}\" of class \"{{className}}\"'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow declaring unused methods of component class',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-unused-class-component-methods')\n    },\n    messages,\n    schema: []\n  },\n  create: context => {\n    let classInfo = null; // Takes an ObjectExpression node and adds all named Property nodes to the\n    // current set of properties.\n\n    function addProperty(node) {\n      classInfo.properties.add(node);\n    } // Adds the name of the given node as a used property if the node is an\n    // Identifier or a Literal. Other node types are ignored.\n\n\n    function addUsedProperty(node) {\n      const name = getName(node);\n\n      if (name) {\n        classInfo.usedProperties.add(name);\n      }\n    }\n\n    function reportUnusedProperties() {\n      // Report all unused properties.\n      for (const node of classInfo.properties) {\n        // eslint-disable-line no-restricted-syntax\n        const name = getName(node);\n\n        if (!classInfo.usedProperties.has(name) && !LIFECYCLE_METHODS.has(name) && (classInfo.isClass ? !ES6_LIFECYCLE.has(name) : !ES5_LIFECYCLE.has(name))) {\n          const className = classInfo.classNode.id && classInfo.classNode.id.name || '';\n          const messageID = className ? 'unusedWithClass' : 'unused';\n          report(context, messages[messageID], messageID, {\n            node,\n            data: {\n              name,\n              className\n            }\n          });\n        }\n      }\n    }\n\n    function exitMethod() {\n      if (!classInfo || !classInfo.inStatic) {\n        return;\n      }\n\n      classInfo.inStatic = false;\n    }\n\n    return {\n      ClassDeclaration(node) {\n        if (componentUtil.isES6Component(node, context)) {\n          classInfo = getInitialClassInfo(node, true);\n        }\n      },\n\n      ObjectExpression(node) {\n        if (componentUtil.isES5Component(node, context)) {\n          classInfo = getInitialClassInfo(node, false);\n        }\n      },\n\n      'ClassDeclaration:exit'() {\n        if (!classInfo) {\n          return;\n        }\n\n        reportUnusedProperties();\n        classInfo = null;\n      },\n\n      'ObjectExpression:exit'(node) {\n        if (!classInfo || classInfo.classNode !== node) {\n          return;\n        }\n\n        reportUnusedProperties();\n        classInfo = null;\n      },\n\n      Property(node) {\n        if (!classInfo || classInfo.classNode !== node.parent) {\n          return;\n        }\n\n        if (isKeyLiteralLike(node, node.key)) {\n          addProperty(node.key);\n        }\n      },\n\n      'ClassProperty, MethodDefinition, PropertyDefinition'(node) {\n        if (!classInfo) {\n          return;\n        }\n\n        if (node.static) {\n          classInfo.inStatic = true;\n          return;\n        }\n\n        if (isKeyLiteralLike(node, node.key)) {\n          addProperty(node.key);\n        }\n      },\n\n      'ClassProperty:exit': exitMethod,\n      'MethodDefinition:exit': exitMethod,\n      'PropertyDefinition:exit': exitMethod,\n\n      MemberExpression(node) {\n        if (!classInfo || classInfo.inStatic) {\n          return;\n        }\n\n        if (isThisExpression(node.object) && isKeyLiteralLike(node, node.property)) {\n          if (node.parent.type === 'AssignmentExpression' && node.parent.left === node) {\n            // detect `this.property = xxx`\n            addProperty(node.property);\n          } else {\n            // detect `this.property()`, `x = this.property`, etc.\n            addUsedProperty(node.property);\n          }\n        }\n      },\n\n      VariableDeclarator(node) {\n        if (!classInfo || classInfo.inStatic) {\n          return;\n        } // detect `{ foo, bar: baz } = this`\n\n\n        if (node.init && isThisExpression(node.init) && node.id.type === 'ObjectPattern') {\n          node.id.properties.forEach(prop => {\n            if (prop.type === 'Property' && isKeyLiteralLike(prop, prop.key)) {\n              addUsedProperty(prop.key);\n            }\n          });\n        }\n      }\n\n    };\n  }\n};","map":{"version":3,"names":["docsUrl","require","componentUtil","report","LIFECYCLE_METHODS","Set","ES6_LIFECYCLE","ES5_LIFECYCLE","isKeyLiteralLike","node","property","type","expressions","length","computed","uncast","expression","getName","name","String","value","quasis","raw","isThisExpression","getInitialClassInfo","isClass","classNode","properties","usedProperties","inStatic","messages","unused","unusedWithClass","module","exports","meta","docs","description","category","recommended","url","schema","create","context","classInfo","addProperty","add","addUsedProperty","reportUnusedProperties","has","className","id","messageID","data","exitMethod","ClassDeclaration","isES6Component","ObjectExpression","isES5Component","Property","parent","key","static","MemberExpression","object","left","VariableDeclarator","init","forEach","prop"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/no-unused-class-component-methods.js"],"sourcesContent":["/**\n * @fileoverview Prevent declaring unused methods and properties of component class\n * @author Paweł Nowak, Berton Zhu\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst componentUtil = require('../util/componentUtil');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst LIFECYCLE_METHODS = new Set([\n  'constructor',\n  'componentDidCatch',\n  'componentDidMount',\n  'componentDidUpdate',\n  'componentWillMount',\n  'componentWillReceiveProps',\n  'componentWillUnmount',\n  'componentWillUpdate',\n  'getChildContext',\n  'getSnapshotBeforeUpdate',\n  'render',\n  'shouldComponentUpdate',\n  'UNSAFE_componentWillMount',\n  'UNSAFE_componentWillReceiveProps',\n  'UNSAFE_componentWillUpdate',\n]);\n\nconst ES6_LIFECYCLE = new Set([\n  'state',\n]);\n\nconst ES5_LIFECYCLE = new Set([\n  'getInitialState',\n  'getDefaultProps',\n  'mixins',\n]);\n\nfunction isKeyLiteralLike(node, property) {\n  return property.type === 'Literal'\n     || (property.type === 'TemplateLiteral' && property.expressions.length === 0)\n     || (node.computed === false && property.type === 'Identifier');\n}\n\n// Descend through all wrapping TypeCastExpressions and return the expression\n// that was cast.\nfunction uncast(node) {\n  while (node.type === 'TypeCastExpression') {\n    node = node.expression;\n  }\n  return node;\n}\n\n// Return the name of an identifier or the string value of a literal. Useful\n// anywhere that a literal may be used as a key (e.g., member expressions,\n// method definitions, ObjectExpression property keys).\nfunction getName(node) {\n  node = uncast(node);\n  const type = node.type;\n\n  if (type === 'Identifier') {\n    return node.name;\n  }\n  if (type === 'Literal') {\n    return String(node.value);\n  }\n  if (type === 'TemplateLiteral' && node.expressions.length === 0) {\n    return node.quasis[0].value.raw;\n  }\n  return null;\n}\n\nfunction isThisExpression(node) {\n  return uncast(node).type === 'ThisExpression';\n}\n\nfunction getInitialClassInfo(node, isClass) {\n  return {\n    classNode: node,\n    isClass,\n    // Set of nodes where properties were defined.\n    properties: new Set(),\n\n    // Set of names of properties that we've seen used.\n    usedProperties: new Set(),\n\n    inStatic: false,\n  };\n}\n\nconst messages = {\n  unused: 'Unused method or property \"{{name}}\"',\n  unusedWithClass: 'Unused method or property \"{{name}}\" of class \"{{className}}\"',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow declaring unused methods of component class',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-unused-class-component-methods'),\n    },\n    messages,\n    schema: [],\n  },\n\n  create: ((context) => {\n    let classInfo = null;\n\n    // Takes an ObjectExpression node and adds all named Property nodes to the\n    // current set of properties.\n    function addProperty(node) {\n      classInfo.properties.add(node);\n    }\n\n    // Adds the name of the given node as a used property if the node is an\n    // Identifier or a Literal. Other node types are ignored.\n    function addUsedProperty(node) {\n      const name = getName(node);\n      if (name) {\n        classInfo.usedProperties.add(name);\n      }\n    }\n\n    function reportUnusedProperties() {\n      // Report all unused properties.\n      for (const node of classInfo.properties) { // eslint-disable-line no-restricted-syntax\n        const name = getName(node);\n        if (\n          !classInfo.usedProperties.has(name)\n           && !LIFECYCLE_METHODS.has(name)\n           && (classInfo.isClass ? !ES6_LIFECYCLE.has(name) : !ES5_LIFECYCLE.has(name))\n        ) {\n          const className = (classInfo.classNode.id && classInfo.classNode.id.name) || '';\n\n          const messageID = className ? 'unusedWithClass' : 'unused';\n          report(\n            context,\n            messages[messageID],\n            messageID,\n            {\n              node,\n              data: {\n                name,\n                className,\n              },\n            }\n          );\n        }\n      }\n    }\n\n    function exitMethod() {\n      if (!classInfo || !classInfo.inStatic) {\n        return;\n      }\n\n      classInfo.inStatic = false;\n    }\n\n    return {\n      ClassDeclaration(node) {\n        if (componentUtil.isES6Component(node, context)) {\n          classInfo = getInitialClassInfo(node, true);\n        }\n      },\n\n      ObjectExpression(node) {\n        if (componentUtil.isES5Component(node, context)) {\n          classInfo = getInitialClassInfo(node, false);\n        }\n      },\n\n      'ClassDeclaration:exit'() {\n        if (!classInfo) {\n          return;\n        }\n        reportUnusedProperties();\n        classInfo = null;\n      },\n\n      'ObjectExpression:exit'(node) {\n        if (!classInfo || classInfo.classNode !== node) {\n          return;\n        }\n        reportUnusedProperties();\n        classInfo = null;\n      },\n\n      Property(node) {\n        if (!classInfo || classInfo.classNode !== node.parent) {\n          return;\n        }\n\n        if (isKeyLiteralLike(node, node.key)) {\n          addProperty(node.key);\n        }\n      },\n\n      'ClassProperty, MethodDefinition, PropertyDefinition'(node) {\n        if (!classInfo) {\n          return;\n        }\n\n        if (node.static) {\n          classInfo.inStatic = true;\n          return;\n        }\n\n        if (isKeyLiteralLike(node, node.key)) {\n          addProperty(node.key);\n        }\n      },\n\n      'ClassProperty:exit': exitMethod,\n      'MethodDefinition:exit': exitMethod,\n      'PropertyDefinition:exit': exitMethod,\n\n      MemberExpression(node) {\n        if (!classInfo || classInfo.inStatic) {\n          return;\n        }\n\n        if (isThisExpression(node.object) && isKeyLiteralLike(node, node.property)) {\n          if (node.parent.type === 'AssignmentExpression' && node.parent.left === node) {\n            // detect `this.property = xxx`\n            addProperty(node.property);\n          } else {\n            // detect `this.property()`, `x = this.property`, etc.\n            addUsedProperty(node.property);\n          }\n        }\n      },\n\n      VariableDeclarator(node) {\n        if (!classInfo || classInfo.inStatic) {\n          return;\n        }\n\n        // detect `{ foo, bar: baz } = this`\n        if (node.init && isThisExpression(node.init) && node.id.type === 'ObjectPattern') {\n          node.id.properties.forEach((prop) => {\n            if (prop.type === 'Property' && isKeyLiteralLike(prop, prop.key)) {\n              addUsedProperty(prop.key);\n            }\n          });\n        }\n      },\n    };\n  }),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}