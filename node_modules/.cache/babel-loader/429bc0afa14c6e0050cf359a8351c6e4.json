{"ast":null,"code":"var isMergeable = require('./is-mergeable');\n\nvar optimizeProperties = require('./properties/optimize');\n\nvar cloneArray = require('../../utils/clone-array');\n\nvar Token = require('../../tokenizer/token');\n\nvar serializeBody = require('../../writer/one-time').body;\n\nvar serializeRules = require('../../writer/one-time').rules;\n\nfunction reduceNonAdjacent(tokens, context) {\n  var options = context.options;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  var candidates = {};\n  var repeated = [];\n\n  for (var i = tokens.length - 1; i >= 0; i--) {\n    var token = tokens[i];\n\n    if (token[0] != Token.RULE) {\n      continue;\n    } else if (token[2].length === 0) {\n      continue;\n    }\n\n    var selectorAsString = serializeRules(token[1]);\n    var isComplexAndNotSpecial = token[1].length > 1 && isMergeable(selectorAsString, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging);\n    var wrappedSelectors = wrappedSelectorsFrom(token[1]);\n    var selectors = isComplexAndNotSpecial ? [selectorAsString].concat(wrappedSelectors) : [selectorAsString];\n\n    for (var j = 0, m = selectors.length; j < m; j++) {\n      var selector = selectors[j];\n\n      if (!candidates[selector]) {\n        candidates[selector] = [];\n      } else {\n        repeated.push(selector);\n      }\n\n      candidates[selector].push({\n        where: i,\n        list: wrappedSelectors,\n        isPartial: isComplexAndNotSpecial && j > 0,\n        isComplex: isComplexAndNotSpecial && j === 0\n      });\n    }\n  }\n\n  reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context);\n  reduceComplexNonAdjacentCases(tokens, candidates, options, context);\n}\n\nfunction wrappedSelectorsFrom(list) {\n  var wrapped = [];\n\n  for (var i = 0; i < list.length; i++) {\n    wrapped.push([list[i][1]]);\n  }\n\n  return wrapped;\n}\n\nfunction reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context) {\n  function filterOut(idx, bodies) {\n    return data[idx].isPartial && bodies.length === 0;\n  }\n\n  function reduceBody(token, newBody, processedCount, tokenIdx) {\n    if (!data[processedCount - tokenIdx - 1].isPartial) {\n      token[2] = newBody;\n    }\n  }\n\n  for (var i = 0, l = repeated.length; i < l; i++) {\n    var selector = repeated[i];\n    var data = candidates[selector];\n    reduceSelector(tokens, data, {\n      filterOut: filterOut,\n      callback: reduceBody\n    }, options, context);\n  }\n}\n\nfunction reduceComplexNonAdjacentCases(tokens, candidates, options, context) {\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  var localContext = {};\n\n  function filterOut(idx) {\n    return localContext.data[idx].where < localContext.intoPosition;\n  }\n\n  function collectReducedBodies(token, newBody, processedCount, tokenIdx) {\n    if (tokenIdx === 0) {\n      localContext.reducedBodies.push(newBody);\n    }\n  }\n\n  allSelectors: for (var complexSelector in candidates) {\n    var into = candidates[complexSelector];\n\n    if (!into[0].isComplex) {\n      continue;\n    }\n\n    var intoPosition = into[into.length - 1].where;\n    var intoToken = tokens[intoPosition];\n    var reducedBodies = [];\n    var selectors = isMergeable(complexSelector, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) ? into[0].list : [complexSelector];\n    localContext.intoPosition = intoPosition;\n    localContext.reducedBodies = reducedBodies;\n\n    for (var j = 0, m = selectors.length; j < m; j++) {\n      var selector = selectors[j];\n      var data = candidates[selector];\n\n      if (data.length < 2) {\n        continue allSelectors;\n      }\n\n      localContext.data = data;\n      reduceSelector(tokens, data, {\n        filterOut: filterOut,\n        callback: collectReducedBodies\n      }, options, context);\n\n      if (serializeBody(reducedBodies[reducedBodies.length - 1]) != serializeBody(reducedBodies[0])) {\n        continue allSelectors;\n      }\n    }\n\n    intoToken[2] = reducedBodies[0];\n  }\n}\n\nfunction reduceSelector(tokens, data, context, options, outerContext) {\n  var bodies = [];\n  var bodiesAsList = [];\n  var processedTokens = [];\n\n  for (var j = data.length - 1; j >= 0; j--) {\n    if (context.filterOut(j, bodies)) {\n      continue;\n    }\n\n    var where = data[j].where;\n    var token = tokens[where];\n    var clonedBody = cloneArray(token[2]);\n    bodies = bodies.concat(clonedBody);\n    bodiesAsList.push(clonedBody);\n    processedTokens.push(where);\n  }\n\n  optimizeProperties(bodies, true, false, outerContext);\n  var processedCount = processedTokens.length;\n  var propertyIdx = bodies.length - 1;\n  var tokenIdx = processedCount - 1;\n\n  while (tokenIdx >= 0) {\n    if ((tokenIdx === 0 || bodies[propertyIdx] && bodiesAsList[tokenIdx].indexOf(bodies[propertyIdx]) > -1) && propertyIdx > -1) {\n      propertyIdx--;\n      continue;\n    }\n\n    var newBody = bodies.splice(propertyIdx + 1);\n    context.callback(tokens[processedTokens[tokenIdx]], newBody, processedCount, tokenIdx);\n    tokenIdx--;\n  }\n}\n\nmodule.exports = reduceNonAdjacent;","map":{"version":3,"names":["isMergeable","require","optimizeProperties","cloneArray","Token","serializeBody","body","serializeRules","rules","reduceNonAdjacent","tokens","context","options","mergeablePseudoClasses","compatibility","selectors","mergeablePseudoElements","multiplePseudoMerging","candidates","repeated","i","length","token","RULE","selectorAsString","isComplexAndNotSpecial","wrappedSelectors","wrappedSelectorsFrom","concat","j","m","selector","push","where","list","isPartial","isComplex","reduceSimpleNonAdjacentCases","reduceComplexNonAdjacentCases","wrapped","filterOut","idx","bodies","data","reduceBody","newBody","processedCount","tokenIdx","l","reduceSelector","callback","localContext","intoPosition","collectReducedBodies","reducedBodies","allSelectors","complexSelector","into","intoToken","outerContext","bodiesAsList","processedTokens","clonedBody","propertyIdx","indexOf","splice","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/clean-css/lib/optimizer/level-2/reduce-non-adjacent.js"],"sourcesContent":["var isMergeable = require('./is-mergeable');\n\nvar optimizeProperties = require('./properties/optimize');\n\nvar cloneArray = require('../../utils/clone-array');\n\nvar Token = require('../../tokenizer/token');\n\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\n\nfunction reduceNonAdjacent(tokens, context) {\n  var options = context.options;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  var candidates = {};\n  var repeated = [];\n\n  for (var i = tokens.length - 1; i >= 0; i--) {\n    var token = tokens[i];\n\n    if (token[0] != Token.RULE) {\n      continue;\n    } else if (token[2].length === 0) {\n      continue;\n    }\n\n    var selectorAsString = serializeRules(token[1]);\n    var isComplexAndNotSpecial = token[1].length > 1\n      && isMergeable(selectorAsString, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging);\n    var wrappedSelectors = wrappedSelectorsFrom(token[1]);\n    var selectors = isComplexAndNotSpecial\n      ? [selectorAsString].concat(wrappedSelectors)\n      : [selectorAsString];\n\n    for (var j = 0, m = selectors.length; j < m; j++) {\n      var selector = selectors[j];\n\n      if (!candidates[selector]) { candidates[selector] = []; } else { repeated.push(selector); }\n\n      candidates[selector].push({\n        where: i,\n        list: wrappedSelectors,\n        isPartial: isComplexAndNotSpecial && j > 0,\n        isComplex: isComplexAndNotSpecial && j === 0\n      });\n    }\n  }\n\n  reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context);\n  reduceComplexNonAdjacentCases(tokens, candidates, options, context);\n}\n\nfunction wrappedSelectorsFrom(list) {\n  var wrapped = [];\n\n  for (var i = 0; i < list.length; i++) {\n    wrapped.push([list[i][1]]);\n  }\n\n  return wrapped;\n}\n\nfunction reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context) {\n  function filterOut(idx, bodies) {\n    return data[idx].isPartial && bodies.length === 0;\n  }\n\n  function reduceBody(token, newBody, processedCount, tokenIdx) {\n    if (!data[processedCount - tokenIdx - 1].isPartial) { token[2] = newBody; }\n  }\n\n  for (var i = 0, l = repeated.length; i < l; i++) {\n    var selector = repeated[i];\n    var data = candidates[selector];\n\n    reduceSelector(tokens, data, {\n      filterOut: filterOut,\n      callback: reduceBody\n    }, options, context);\n  }\n}\n\nfunction reduceComplexNonAdjacentCases(tokens, candidates, options, context) {\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  var localContext = {};\n\n  function filterOut(idx) {\n    return localContext.data[idx].where < localContext.intoPosition;\n  }\n\n  function collectReducedBodies(token, newBody, processedCount, tokenIdx) {\n    if (tokenIdx === 0) { localContext.reducedBodies.push(newBody); }\n  }\n\n  allSelectors:\n  for (var complexSelector in candidates) {\n    var into = candidates[complexSelector];\n    if (!into[0].isComplex) { continue; }\n\n    var intoPosition = into[into.length - 1].where;\n    var intoToken = tokens[intoPosition];\n    var reducedBodies = [];\n\n    var selectors = isMergeable(complexSelector, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging)\n      ? into[0].list\n      : [complexSelector];\n\n    localContext.intoPosition = intoPosition;\n    localContext.reducedBodies = reducedBodies;\n\n    for (var j = 0, m = selectors.length; j < m; j++) {\n      var selector = selectors[j];\n      var data = candidates[selector];\n\n      if (data.length < 2) { continue allSelectors; }\n\n      localContext.data = data;\n\n      reduceSelector(tokens, data, {\n        filterOut: filterOut,\n        callback: collectReducedBodies\n      }, options, context);\n\n      if (serializeBody(reducedBodies[reducedBodies.length - 1]) != serializeBody(reducedBodies[0])) {\n        continue allSelectors;\n      }\n    }\n\n    intoToken[2] = reducedBodies[0];\n  }\n}\n\nfunction reduceSelector(tokens, data, context, options, outerContext) {\n  var bodies = [];\n  var bodiesAsList = [];\n  var processedTokens = [];\n\n  for (var j = data.length - 1; j >= 0; j--) {\n    if (context.filterOut(j, bodies)) { continue; }\n\n    var where = data[j].where;\n    var token = tokens[where];\n    var clonedBody = cloneArray(token[2]);\n\n    bodies = bodies.concat(clonedBody);\n    bodiesAsList.push(clonedBody);\n    processedTokens.push(where);\n  }\n\n  optimizeProperties(bodies, true, false, outerContext);\n\n  var processedCount = processedTokens.length;\n  var propertyIdx = bodies.length - 1;\n  var tokenIdx = processedCount - 1;\n\n  while (tokenIdx >= 0) {\n    if ((tokenIdx === 0\n      || (bodies[propertyIdx] && bodiesAsList[tokenIdx].indexOf(bodies[propertyIdx]) > -1)) && propertyIdx > -1) {\n      propertyIdx--;\n      continue;\n    }\n\n    var newBody = bodies.splice(propertyIdx + 1);\n    context.callback(tokens[processedTokens[tokenIdx]], newBody, processedCount, tokenIdx);\n\n    tokenIdx--;\n  }\n}\n\nmodule.exports = reduceNonAdjacent;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}