{"ast":null,"code":"var iterate = require('./lib/iterate.js'),\n    initState = require('./lib/state.js'),\n    terminator = require('./lib/terminator.js'); // Public API\n\n\nmodule.exports = parallel;\n/**\n * Runs iterator over provided array elements in parallel\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\n\nfunction parallel(list, iterator, callback) {\n  var state = initState(list);\n\n  while (state.index < (state['keyedList'] || list).length) {\n    iterate(list, iterator, state, function (error, result) {\n      if (error) {\n        callback(error, result);\n        return;\n      } // looks like it's the last one\n\n\n      if (Object.keys(state.jobs).length === 0) {\n        callback(null, state.results);\n        return;\n      }\n    });\n    state.index++;\n  }\n\n  return terminator.bind(state, callback);\n}","map":{"version":3,"names":["iterate","require","initState","terminator","module","exports","parallel","list","iterator","callback","state","index","length","error","result","Object","keys","jobs","results","bind"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/asynckit/parallel.js"],"sourcesContent":["var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = parallel;\n\n/**\n * Runs iterator over provided array elements in parallel\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction parallel(list, iterator, callback)\n{\n  var state = initState(list);\n\n  while (state.index < (state['keyedList'] || list).length)\n  {\n    iterate(list, iterator, state, function(error, result)\n    {\n      if (error)\n      {\n        callback(error, result);\n        return;\n      }\n\n      // looks like it's the last one\n      if (Object.keys(state.jobs).length === 0)\n      {\n        callback(null, state.results);\n        return;\n      }\n    });\n\n    state.index++;\n  }\n\n  return terminator.bind(state, callback);\n}\n"],"mappings":"AAAA,IAAIA,OAAO,GAAMC,OAAO,CAAC,kBAAD,CAAxB;AAAA,IACIC,SAAS,GAAID,OAAO,CAAC,gBAAD,CADxB;AAAA,IAEIE,UAAU,GAAGF,OAAO,CAAC,qBAAD,CAFxB,C,CAKA;;;AACAG,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,QAAxB,EAAkCC,QAAlC,EACA;EACE,IAAIC,KAAK,GAAGR,SAAS,CAACK,IAAD,CAArB;;EAEA,OAAOG,KAAK,CAACC,KAAN,GAAc,CAACD,KAAK,CAAC,WAAD,CAAL,IAAsBH,IAAvB,EAA6BK,MAAlD,EACA;IACEZ,OAAO,CAACO,IAAD,EAAOC,QAAP,EAAiBE,KAAjB,EAAwB,UAASG,KAAT,EAAgBC,MAAhB,EAC/B;MACE,IAAID,KAAJ,EACA;QACEJ,QAAQ,CAACI,KAAD,EAAQC,MAAR,CAAR;QACA;MACD,CALH,CAOE;;;MACA,IAAIC,MAAM,CAACC,IAAP,CAAYN,KAAK,CAACO,IAAlB,EAAwBL,MAAxB,KAAmC,CAAvC,EACA;QACEH,QAAQ,CAAC,IAAD,EAAOC,KAAK,CAACQ,OAAb,CAAR;QACA;MACD;IACF,CAdM,CAAP;IAgBAR,KAAK,CAACC,KAAN;EACD;;EAED,OAAOR,UAAU,CAACgB,IAAX,CAAgBT,KAAhB,EAAuBD,QAAvB,CAAP;AACD"},"metadata":{},"sourceType":"script"}