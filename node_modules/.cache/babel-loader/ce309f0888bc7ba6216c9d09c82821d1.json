{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'parameter-properties',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Require or disallow parameter properties in class constructors',\n      recommended: false\n    },\n    messages: {\n      preferClassProperty: 'Property {{parameter}} should be declared as a class property.',\n      preferParameterProperty: 'Property {{parameter}} should be declared as a parameter property.'\n    },\n    schema: {\n      $defs: {\n        modifier: {\n          enum: ['readonly', 'private', 'protected', 'public', 'private readonly', 'protected readonly', 'public readonly']\n        }\n      },\n      prefixItems: [{\n        type: 'object',\n        properties: {\n          allow: {\n            type: 'array',\n            items: {\n              $ref: '#/$defs/modifier'\n            },\n            minItems: 1\n          },\n          prefer: {\n            enum: ['class-property', 'parameter-property']\n          }\n        },\n        additionalProperties: false\n      }],\n      type: 'array'\n    }\n  },\n  defaultOptions: [{\n    allow: [],\n    prefer: 'class-property'\n  }],\n\n  create(context, _ref) {\n    let [{\n      allow = [],\n      prefer = 'class-property'\n    }] = _ref;\n\n    /**\n     * Gets the modifiers of `node`.\n     * @param node the node to be inspected.\n     */\n    function getModifiers(node) {\n      const modifiers = [];\n\n      if (node.accessibility) {\n        modifiers.push(node.accessibility);\n      }\n\n      if (node.readonly) {\n        modifiers.push('readonly');\n      }\n\n      return modifiers.filter(Boolean).join(' ');\n    }\n\n    if (prefer === 'class-property') {\n      return {\n        TSParameterProperty(node) {\n          const modifiers = getModifiers(node);\n\n          if (!allow.includes(modifiers)) {\n            // HAS to be an identifier or assignment or TSC will throw\n            if (node.parameter.type !== utils_1.AST_NODE_TYPES.Identifier && node.parameter.type !== utils_1.AST_NODE_TYPES.AssignmentPattern) {\n              return;\n            }\n\n            const name = node.parameter.type === utils_1.AST_NODE_TYPES.Identifier ? node.parameter.name : // has to be an Identifier or TSC will throw an error\n            node.parameter.left.name;\n            context.report({\n              node,\n              messageId: 'preferClassProperty',\n              data: {\n                parameter: name\n              }\n            });\n          }\n        }\n\n      };\n    }\n\n    const propertyNodesByNameStack = [];\n\n    function getNodesByName(name) {\n      const propertyNodesByName = propertyNodesByNameStack[propertyNodesByNameStack.length - 1];\n      const existing = propertyNodesByName.get(name);\n\n      if (existing) {\n        return existing;\n      }\n\n      const created = {};\n      propertyNodesByName.set(name, created);\n      return created;\n    }\n\n    const sourceCode = context.getSourceCode();\n\n    function typeAnnotationsMatch(classProperty, constructorParameter) {\n      if (!classProperty.typeAnnotation || !constructorParameter.typeAnnotation) {\n        return classProperty.typeAnnotation === constructorParameter.typeAnnotation;\n      }\n\n      return sourceCode.getText(classProperty.typeAnnotation) === sourceCode.getText(constructorParameter.typeAnnotation);\n    }\n\n    return {\n      'ClassDeclaration, ClassExpression'() {\n        propertyNodesByNameStack.push(new Map());\n      },\n\n      ':matches(ClassDeclaration, ClassExpression):exit'() {\n        const propertyNodesByName = propertyNodesByNameStack.pop();\n\n        for (const [name, nodes] of propertyNodesByName) {\n          if (nodes.classProperty && nodes.constructorAssignment && nodes.constructorParameter && typeAnnotationsMatch(nodes.classProperty, nodes.constructorParameter)) {\n            context.report({\n              data: {\n                parameter: name\n              },\n              messageId: 'preferParameterProperty',\n              node: nodes.classProperty\n            });\n          }\n        }\n      },\n\n      ClassBody(node) {\n        for (const element of node.body) {\n          if (element.type === utils_1.AST_NODE_TYPES.PropertyDefinition && element.key.type === utils_1.AST_NODE_TYPES.Identifier && !element.value && !allow.includes(getModifiers(element))) {\n            getNodesByName(element.key.name).classProperty = element;\n          }\n        }\n      },\n\n      'MethodDefinition[kind=\"constructor\"]'(node) {\n        var _a, _b;\n\n        for (const parameter of node.value.params) {\n          if (parameter.type === utils_1.AST_NODE_TYPES.Identifier) {\n            getNodesByName(parameter.name).constructorParameter = parameter;\n          }\n        }\n\n        for (const statement of (_b = (_a = node.value.body) === null || _a === void 0 ? void 0 : _a.body) !== null && _b !== void 0 ? _b : []) {\n          if (statement.type !== utils_1.AST_NODE_TYPES.ExpressionStatement || statement.expression.type !== utils_1.AST_NODE_TYPES.AssignmentExpression || statement.expression.left.type !== utils_1.AST_NODE_TYPES.MemberExpression || statement.expression.left.object.type !== utils_1.AST_NODE_TYPES.ThisExpression || statement.expression.left.property.type !== utils_1.AST_NODE_TYPES.Identifier || statement.expression.right.type !== utils_1.AST_NODE_TYPES.Identifier) {\n            break;\n          }\n\n          getNodesByName(statement.expression.right.name).constructorAssignment = statement.expression;\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AAsBAA,kBAAeC,IAAI,CAACC,UAAL,CAAqC;EAClDC,IAAI,EAAE,sBAD4C;EAElDC,IAAI,EAAE;IACJC,IAAI,EAAE,SADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EACT,gEAFE;MAGJC,WAAW,EAAE;IAHT,CAFF;IAOJC,QAAQ,EAAE;MACRC,mBAAmB,EACjB,gEAFM;MAGRC,uBAAuB,EACrB;IAJM,CAPN;IAaJC,MAAM,EAAE;MACNC,KAAK,EAAE;QACLC,QAAQ,EAAE;UACRC,IAAI,EAAE,CACJ,UADI,EAEJ,SAFI,EAGJ,WAHI,EAIJ,QAJI,EAKJ,kBALI,EAMJ,oBANI,EAOJ,iBAPI;QADE;MADL,CADD;MAcNC,WAAW,EAAE,CACX;QACEX,IAAI,EAAE,QADR;QAEEY,UAAU,EAAE;UACVC,KAAK,EAAE;YACLb,IAAI,EAAE,OADD;YAELc,KAAK,EAAE;cACLC,IAAI,EAAE;YADD,CAFF;YAKLC,QAAQ,EAAE;UALL,CADG;UAQVC,MAAM,EAAE;YACNP,IAAI,EAAE,CAAC,gBAAD,EAAmB,oBAAnB;UADA;QARE,CAFd;QAcEQ,oBAAoB,EAAE;MAdxB,CADW,CAdP;MAgCNlB,IAAI,EAAE;IAhCA;EAbJ,CAF4C;EAkDlDmB,cAAc,EAAE,CACd;IACEN,KAAK,EAAE,EADT;IAEEI,MAAM,EAAE;EAFV,CADc,CAlDkC;;EAwDlDG,MAAM,CAACC,OAAD,QAAqD;IAAA,IAA3C,CAAC;MAAER,KAAK,GAAG,EAAV;MAAcI,MAAM,GAAG;IAAvB,CAAD,CAA2C;;IACzD;;;;IAIA,SAASK,YAAT,CACEC,IADF,EACkE;MAEhE,MAAMC,SAAS,GAAe,EAA9B;;MAEA,IAAID,IAAI,CAACE,aAAT,EAAwB;QACtBD,SAAS,CAACE,IAAV,CAAeH,IAAI,CAACE,aAApB;MACD;;MACD,IAAIF,IAAI,CAACI,QAAT,EAAmB;QACjBH,SAAS,CAACE,IAAV,CAAe,UAAf;MACD;;MAED,OAAOF,SAAS,CAACI,MAAV,CAAiBC,OAAjB,EAA0BC,IAA1B,CAA+B,GAA/B,CAAP;IACD;;IAED,IAAIb,MAAM,KAAK,gBAAf,EAAiC;MAC/B,OAAO;QACLc,mBAAmB,CAACR,IAAD,EAAK;UACtB,MAAMC,SAAS,GAAGF,YAAY,CAACC,IAAD,CAA9B;;UAEA,IAAI,CAACV,KAAK,CAACmB,QAAN,CAAeR,SAAf,CAAL,EAAgC;YAC9B;YACA,IACED,IAAI,CAACU,SAAL,CAAejC,IAAf,KAAwBkC,uBAAeC,UAAvC,IACAZ,IAAI,CAACU,SAAL,CAAejC,IAAf,KAAwBkC,uBAAeE,iBAFzC,EAGE;cACA;YACD;;YAED,MAAMtC,IAAI,GACRyB,IAAI,CAACU,SAAL,CAAejC,IAAf,KAAwBkC,uBAAeC,UAAvC,GACIZ,IAAI,CAACU,SAAL,CAAenC,IADnB,GAEI;YACCyB,IAAI,CAACU,SAAL,CAAeI,IAAf,CAA4CvC,IAJnD;YAMAuB,OAAO,CAACiB,MAAR,CAAe;cACbf,IADa;cAEbgB,SAAS,EAAE,qBAFE;cAGbC,IAAI,EAAE;gBACJP,SAAS,EAAEnC;cADP;YAHO,CAAf;UAOD;QACF;;MA3BI,CAAP;IA6BD;;IAQD,MAAM2C,wBAAwB,GAAiC,EAA/D;;IAEA,SAASC,cAAT,CAAwB5C,IAAxB,EAAoC;MAClC,MAAM6C,mBAAmB,GACvBF,wBAAwB,CAACA,wBAAwB,CAACG,MAAzB,GAAkC,CAAnC,CAD1B;MAEA,MAAMC,QAAQ,GAAGF,mBAAmB,CAACG,GAApB,CAAwBhD,IAAxB,CAAjB;;MACA,IAAI+C,QAAJ,EAAc;QACZ,OAAOA,QAAP;MACD;;MAED,MAAME,OAAO,GAAkB,EAA/B;MACAJ,mBAAmB,CAACK,GAApB,CAAwBlD,IAAxB,EAA8BiD,OAA9B;MACA,OAAOA,OAAP;IACD;;IAED,MAAME,UAAU,GAAG5B,OAAO,CAAC6B,aAAR,EAAnB;;IAEA,SAASC,oBAAT,CACEC,aADF,EAEEC,oBAFF,EAE2C;MAEzC,IACE,CAACD,aAAa,CAACE,cAAf,IACA,CAACD,oBAAoB,CAACC,cAFxB,EAGE;QACA,OACEF,aAAa,CAACE,cAAd,KAAiCD,oBAAoB,CAACC,cADxD;MAGD;;MAED,OACEL,UAAU,CAACM,OAAX,CAAmBH,aAAa,CAACE,cAAjC,MACAL,UAAU,CAACM,OAAX,CAAmBF,oBAAoB,CAACC,cAAxC,CAFF;IAID;;IAED,OAAO;MACL,sCAAmC;QACjCb,wBAAwB,CAACf,IAAzB,CAA8B,IAAI8B,GAAJ,EAA9B;MACD,CAHI;;MAKL,qDAAkD;QAChD,MAAMb,mBAAmB,GAAGF,wBAAwB,CAACgB,GAAzB,EAA5B;;QAEA,KAAK,MAAM,CAAC3D,IAAD,EAAO4D,KAAP,CAAX,IAA4Bf,mBAA5B,EAAiD;UAC/C,IACEe,KAAK,CAACN,aAAN,IACAM,KAAK,CAACC,qBADN,IAEAD,KAAK,CAACL,oBAFN,IAGAF,oBAAoB,CAClBO,KAAK,CAACN,aADY,EAElBM,KAAK,CAACL,oBAFY,CAJtB,EAQE;YACAhC,OAAO,CAACiB,MAAR,CAAe;cACbE,IAAI,EAAE;gBACJP,SAAS,EAAEnC;cADP,CADO;cAIbyC,SAAS,EAAE,yBAJE;cAKbhB,IAAI,EAAEmC,KAAK,CAACN;YALC,CAAf;UAOD;QACF;MACF,CA3BI;;MA6BLQ,SAAS,CAACrC,IAAD,EAAK;QACZ,KAAK,MAAMsC,OAAX,IAAsBtC,IAAI,CAACuC,IAA3B,EAAiC;UAC/B,IACED,OAAO,CAAC7D,IAAR,KAAiBkC,uBAAe6B,kBAAhC,IACAF,OAAO,CAACG,GAAR,CAAYhE,IAAZ,KAAqBkC,uBAAeC,UADpC,IAEA,CAAC0B,OAAO,CAACI,KAFT,IAGA,CAACpD,KAAK,CAACmB,QAAN,CAAeV,YAAY,CAACuC,OAAD,CAA3B,CAJH,EAKE;YACAnB,cAAc,CAACmB,OAAO,CAACG,GAAR,CAAYlE,IAAb,CAAd,CAAiCsD,aAAjC,GAAiDS,OAAjD;UACD;QACF;MACF,CAxCI;;MA0CL,uCACEtC,IADF,EACiC;;;QAE/B,KAAK,MAAMU,SAAX,IAAwBV,IAAI,CAAC0C,KAAL,CAAWC,MAAnC,EAA2C;UACzC,IAAIjC,SAAS,CAACjC,IAAV,KAAmBkC,uBAAeC,UAAtC,EAAkD;YAChDO,cAAc,CAACT,SAAS,CAACnC,IAAX,CAAd,CAA+BuD,oBAA/B,GAAsDpB,SAAtD;UACD;QACF;;QAED,KAAK,MAAMkC,SAAX,IAAwB,gBAAI,CAACF,KAAL,CAAWH,IAAX,MAAe,IAAf,IAAeM,aAAf,GAAe,MAAf,GAAeA,GAAEN,IAAjB,MAAqB,IAArB,IAAqBO,aAArB,GAAqBA,EAArB,GAAyB,EAAjD,EAAqD;UACnD,IACEF,SAAS,CAACnE,IAAV,KAAmBkC,uBAAeoC,mBAAlC,IACAH,SAAS,CAACI,UAAV,CAAqBvE,IAArB,KAA8BkC,uBAAesC,oBAD7C,IAEAL,SAAS,CAACI,UAAV,CAAqBlC,IAArB,CAA0BrC,IAA1B,KACEkC,uBAAeuC,gBAHjB,IAIAN,SAAS,CAACI,UAAV,CAAqBlC,IAArB,CAA0BqC,MAA1B,CAAiC1E,IAAjC,KACEkC,uBAAeyC,cALjB,IAMAR,SAAS,CAACI,UAAV,CAAqBlC,IAArB,CAA0BuC,QAA1B,CAAmC5E,IAAnC,KACEkC,uBAAeC,UAPjB,IAQAgC,SAAS,CAACI,UAAV,CAAqBM,KAArB,CAA2B7E,IAA3B,KAAoCkC,uBAAeC,UATrD,EAUE;YACA;UACD;;UAEDO,cAAc,CACZyB,SAAS,CAACI,UAAV,CAAqBM,KAArB,CAA2B/E,IADf,CAAd,CAEE6D,qBAFF,GAE0BQ,SAAS,CAACI,UAFpC;QAGD;MACF;;IAtEI,CAAP;EAwED;;AA9NiD,CAArC,CAAf","names":["exports","util","createRule","name","meta","type","docs","description","recommended","messages","preferClassProperty","preferParameterProperty","schema","$defs","modifier","enum","prefixItems","properties","allow","items","$ref","minItems","prefer","additionalProperties","defaultOptions","create","context","getModifiers","node","modifiers","accessibility","push","readonly","filter","Boolean","join","TSParameterProperty","includes","parameter","utils_1","Identifier","AssignmentPattern","left","report","messageId","data","propertyNodesByNameStack","getNodesByName","propertyNodesByName","length","existing","get","created","set","sourceCode","getSourceCode","typeAnnotationsMatch","classProperty","constructorParameter","typeAnnotation","getText","Map","pop","nodes","constructorAssignment","ClassBody","element","body","PropertyDefinition","key","value","params","statement","_a","_b","ExpressionStatement","expression","AssignmentExpression","MemberExpression","object","ThisExpression","property","right"],"sources":["../../src/rules/parameter-properties.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}