{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'prefer-for-of',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Enforce the use of `for-of` loop over the standard `for` loop where possible',\n      recommended: 'strict'\n    },\n    messages: {\n      preferForOf: 'Expected a `for-of` loop instead of a `for` loop with this simple iteration.'\n    },\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    function isSingleVariableDeclaration(node) {\n      return node !== null && node.type === utils_1.AST_NODE_TYPES.VariableDeclaration && node.kind !== 'const' && node.declarations.length === 1;\n    }\n\n    function isLiteral(node, value) {\n      return node.type === utils_1.AST_NODE_TYPES.Literal && node.value === value;\n    }\n\n    function isZeroInitialized(node) {\n      return node.init !== null && isLiteral(node.init, 0);\n    }\n\n    function isMatchingIdentifier(node, name) {\n      return node.type === utils_1.AST_NODE_TYPES.Identifier && node.name === name;\n    }\n\n    function isLessThanLengthExpression(node, name) {\n      if (node !== null && node.type === utils_1.AST_NODE_TYPES.BinaryExpression && node.operator === '<' && isMatchingIdentifier(node.left, name) && node.right.type === utils_1.AST_NODE_TYPES.MemberExpression && isMatchingIdentifier(node.right.property, 'length')) {\n        return node.right.object;\n      }\n\n      return null;\n    }\n\n    function isIncrement(node, name) {\n      if (!node) {\n        return false;\n      }\n\n      switch (node.type) {\n        case utils_1.AST_NODE_TYPES.UpdateExpression:\n          // x++ or ++x\n          return node.operator === '++' && isMatchingIdentifier(node.argument, name);\n\n        case utils_1.AST_NODE_TYPES.AssignmentExpression:\n          if (isMatchingIdentifier(node.left, name)) {\n            if (node.operator === '+=') {\n              // x += 1\n              return isLiteral(node.right, 1);\n            } else if (node.operator === '=') {\n              // x = x + 1 or x = 1 + x\n              const expr = node.right;\n              return expr.type === utils_1.AST_NODE_TYPES.BinaryExpression && expr.operator === '+' && (isMatchingIdentifier(expr.left, name) && isLiteral(expr.right, 1) || isLiteral(expr.left, 1) && isMatchingIdentifier(expr.right, name));\n            }\n          }\n\n      }\n\n      return false;\n    }\n\n    function contains(outer, inner) {\n      return outer.range[0] <= inner.range[0] && outer.range[1] >= inner.range[1];\n    }\n\n    function isAssignee(node) {\n      var _a;\n\n      const parent = node.parent;\n\n      if (!parent) {\n        return false;\n      } // a[i] = 1, a[i] += 1, etc.\n\n\n      if (parent.type === utils_1.AST_NODE_TYPES.AssignmentExpression && parent.left === node) {\n        return true;\n      } // delete a[i]\n\n\n      if (parent.type === utils_1.AST_NODE_TYPES.UnaryExpression && parent.operator === 'delete' && parent.argument === node) {\n        return true;\n      } // a[i]++, --a[i], etc.\n\n\n      if (parent.type === utils_1.AST_NODE_TYPES.UpdateExpression && parent.argument === node) {\n        return true;\n      } // [a[i]] = [0]\n\n\n      if (parent.type === utils_1.AST_NODE_TYPES.ArrayPattern) {\n        return true;\n      } // [...a[i]] = [0]\n\n\n      if (parent.type === utils_1.AST_NODE_TYPES.RestElement) {\n        return true;\n      } // ({ foo: a[i] }) = { foo: 0 }\n\n\n      if (parent.type === utils_1.AST_NODE_TYPES.Property && parent.value === node && ((_a = parent.parent) === null || _a === void 0 ? void 0 : _a.type) === utils_1.AST_NODE_TYPES.ObjectExpression && isAssignee(parent.parent)) {\n        return true;\n      }\n\n      return false;\n    }\n\n    function isIndexOnlyUsedWithArray(body, indexVar, arrayExpression) {\n      const sourceCode = context.getSourceCode();\n      const arrayText = sourceCode.getText(arrayExpression);\n      return indexVar.references.every(reference => {\n        const id = reference.identifier;\n        const node = id.parent;\n        return !contains(body, id) || node !== undefined && node.type === utils_1.AST_NODE_TYPES.MemberExpression && node.object.type !== utils_1.AST_NODE_TYPES.ThisExpression && node.property === id && sourceCode.getText(node.object) === arrayText && !isAssignee(node);\n      });\n    }\n\n    return {\n      'ForStatement:exit'(node) {\n        if (!isSingleVariableDeclaration(node.init)) {\n          return;\n        }\n\n        const declarator = node.init.declarations[0];\n\n        if (!declarator || !isZeroInitialized(declarator) || declarator.id.type !== utils_1.AST_NODE_TYPES.Identifier) {\n          return;\n        }\n\n        const indexName = declarator.id.name;\n        const arrayExpression = isLessThanLengthExpression(node.test, indexName);\n\n        if (!arrayExpression) {\n          return;\n        }\n\n        const [indexVar] = context.getDeclaredVariables(node.init);\n\n        if (isIncrement(node.update, indexName) && isIndexOnlyUsedWithArray(node.body, indexVar, arrayExpression)) {\n          context.report({\n            node,\n            messageId: 'preferForOf'\n          });\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AAEAA,kBAAeC,IAAI,CAACC,UAAL,CAAgB;EAC7BC,IAAI,EAAE,eADuB;EAE7BC,IAAI,EAAE;IACJC,IAAI,EAAE,YADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EACT,8EAFE;MAGJC,WAAW,EAAE;IAHT,CAFF;IAOJC,QAAQ,EAAE;MACRC,WAAW,EACT;IAFM,CAPN;IAWJC,MAAM,EAAE;EAXJ,CAFuB;EAe7BC,cAAc,EAAE,EAfa;;EAgB7BC,MAAM,CAACC,OAAD,EAAQ;IACZ,SAASC,2BAAT,CACEC,IADF,EAC4B;MAE1B,OACEA,IAAI,KAAK,IAAT,IACAA,IAAI,CAACX,IAAL,KAAcY,uBAAeC,mBAD7B,IAEAF,IAAI,CAACG,IAAL,KAAc,OAFd,IAGAH,IAAI,CAACI,YAAL,CAAkBC,MAAlB,KAA6B,CAJ/B;IAMD;;IAED,SAASC,SAAT,CACEN,IADF,EAEEO,KAFF,EAEe;MAEb,OAAOP,IAAI,CAACX,IAAL,KAAcY,uBAAeO,OAA7B,IAAwCR,IAAI,CAACO,KAAL,KAAeA,KAA9D;IACD;;IAED,SAASE,iBAAT,CAA2BT,IAA3B,EAA4D;MAC1D,OAAOA,IAAI,CAACU,IAAL,KAAc,IAAd,IAAsBJ,SAAS,CAACN,IAAI,CAACU,IAAN,EAAY,CAAZ,CAAtC;IACD;;IAED,SAASC,oBAAT,CACEX,IADF,EAEEb,IAFF,EAEc;MAEZ,OAAOa,IAAI,CAACX,IAAL,KAAcY,uBAAeW,UAA7B,IAA2CZ,IAAI,CAACb,IAAL,KAAcA,IAAhE;IACD;;IAED,SAAS0B,0BAAT,CACEb,IADF,EAEEb,IAFF,EAEc;MAEZ,IACEa,IAAI,KAAK,IAAT,IACAA,IAAI,CAACX,IAAL,KAAcY,uBAAea,gBAD7B,IAEAd,IAAI,CAACe,QAAL,KAAkB,GAFlB,IAGAJ,oBAAoB,CAACX,IAAI,CAACgB,IAAN,EAAY7B,IAAZ,CAHpB,IAIAa,IAAI,CAACiB,KAAL,CAAW5B,IAAX,KAAoBY,uBAAeiB,gBAJnC,IAKAP,oBAAoB,CAACX,IAAI,CAACiB,KAAL,CAAWE,QAAZ,EAAsB,QAAtB,CANtB,EAOE;QACA,OAAOnB,IAAI,CAACiB,KAAL,CAAWG,MAAlB;MACD;;MACD,OAAO,IAAP;IACD;;IAED,SAASC,WAAT,CAAqBrB,IAArB,EAAiDb,IAAjD,EAA6D;MAC3D,IAAI,CAACa,IAAL,EAAW;QACT,OAAO,KAAP;MACD;;MACD,QAAQA,IAAI,CAACX,IAAb;QACE,KAAKY,uBAAeqB,gBAApB;UACE;UACA,OACEtB,IAAI,CAACe,QAAL,KAAkB,IAAlB,IAA0BJ,oBAAoB,CAACX,IAAI,CAACuB,QAAN,EAAgBpC,IAAhB,CADhD;;QAGF,KAAKc,uBAAeuB,oBAApB;UACE,IAAIb,oBAAoB,CAACX,IAAI,CAACgB,IAAN,EAAY7B,IAAZ,CAAxB,EAA2C;YACzC,IAAIa,IAAI,CAACe,QAAL,KAAkB,IAAtB,EAA4B;cAC1B;cACA,OAAOT,SAAS,CAACN,IAAI,CAACiB,KAAN,EAAa,CAAb,CAAhB;YACD,CAHD,MAGO,IAAIjB,IAAI,CAACe,QAAL,KAAkB,GAAtB,EAA2B;cAChC;cACA,MAAMU,IAAI,GAAGzB,IAAI,CAACiB,KAAlB;cACA,OACEQ,IAAI,CAACpC,IAAL,KAAcY,uBAAea,gBAA7B,IACAW,IAAI,CAACV,QAAL,KAAkB,GADlB,KAEEJ,oBAAoB,CAACc,IAAI,CAACT,IAAN,EAAY7B,IAAZ,CAApB,IACAmB,SAAS,CAACmB,IAAI,CAACR,KAAN,EAAa,CAAb,CADV,IAEEX,SAAS,CAACmB,IAAI,CAACT,IAAN,EAAY,CAAZ,CAAT,IACCL,oBAAoB,CAACc,IAAI,CAACR,KAAN,EAAa9B,IAAb,CALxB,CADF;YAQD;UACF;;MAvBL;;MAyBA,OAAO,KAAP;IACD;;IAED,SAASuC,QAAT,CAAkBC,KAAlB,EAAwCC,KAAxC,EAA4D;MAC1D,OACED,KAAK,CAACE,KAAN,CAAY,CAAZ,KAAkBD,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAlB,IAAoCF,KAAK,CAACE,KAAN,CAAY,CAAZ,KAAkBD,KAAK,CAACC,KAAN,CAAY,CAAZ,CADxD;IAGD;;IAED,SAASC,UAAT,CAAoB9B,IAApB,EAAuC;;;MACrC,MAAM+B,MAAM,GAAG/B,IAAI,CAAC+B,MAApB;;MACA,IAAI,CAACA,MAAL,EAAa;QACX,OAAO,KAAP;MACD,CAJoC,CAMrC;;;MACA,IACEA,MAAM,CAAC1C,IAAP,KAAgBY,uBAAeuB,oBAA/B,IACAO,MAAM,CAACf,IAAP,KAAgBhB,IAFlB,EAGE;QACA,OAAO,IAAP;MACD,CAZoC,CAcrC;;;MACA,IACE+B,MAAM,CAAC1C,IAAP,KAAgBY,uBAAe+B,eAA/B,IACAD,MAAM,CAAChB,QAAP,KAAoB,QADpB,IAEAgB,MAAM,CAACR,QAAP,KAAoBvB,IAHtB,EAIE;QACA,OAAO,IAAP;MACD,CArBoC,CAuBrC;;;MACA,IACE+B,MAAM,CAAC1C,IAAP,KAAgBY,uBAAeqB,gBAA/B,IACAS,MAAM,CAACR,QAAP,KAAoBvB,IAFtB,EAGE;QACA,OAAO,IAAP;MACD,CA7BoC,CA+BrC;;;MACA,IAAI+B,MAAM,CAAC1C,IAAP,KAAgBY,uBAAegC,YAAnC,EAAiD;QAC/C,OAAO,IAAP;MACD,CAlCoC,CAoCrC;;;MACA,IAAIF,MAAM,CAAC1C,IAAP,KAAgBY,uBAAeiC,WAAnC,EAAgD;QAC9C,OAAO,IAAP;MACD,CAvCoC,CAyCrC;;;MACA,IACEH,MAAM,CAAC1C,IAAP,KAAgBY,uBAAekC,QAA/B,IACAJ,MAAM,CAACxB,KAAP,KAAiBP,IADjB,IAEA,aAAM,CAAC+B,MAAP,MAAa,IAAb,IAAaK,aAAb,GAAa,MAAb,GAAaA,GAAE/C,IAAf,MAAwBY,uBAAeoC,gBAFvC,IAGAP,UAAU,CAACC,MAAM,CAACA,MAAR,CAJZ,EAKE;QACA,OAAO,IAAP;MACD;;MAED,OAAO,KAAP;IACD;;IAED,SAASO,wBAAT,CACEC,IADF,EAEEC,QAFF,EAGEC,eAHF,EAGsC;MAEpC,MAAMC,UAAU,GAAG5C,OAAO,CAAC6C,aAAR,EAAnB;MACA,MAAMC,SAAS,GAAGF,UAAU,CAACG,OAAX,CAAmBJ,eAAnB,CAAlB;MACA,OAAOD,QAAQ,CAACM,UAAT,CAAoBC,KAApB,CAA0BC,SAAS,IAAG;QAC3C,MAAMC,EAAE,GAAGD,SAAS,CAACE,UAArB;QACA,MAAMlD,IAAI,GAAGiD,EAAE,CAAClB,MAAhB;QACA,OACE,CAACL,QAAQ,CAACa,IAAD,EAAOU,EAAP,CAAT,IACCjD,IAAI,KAAKmD,SAAT,IACCnD,IAAI,CAACX,IAAL,KAAcY,uBAAeiB,gBAD9B,IAEClB,IAAI,CAACoB,MAAL,CAAY/B,IAAZ,KAAqBY,uBAAemD,cAFrC,IAGCpD,IAAI,CAACmB,QAAL,KAAkB8B,EAHnB,IAICP,UAAU,CAACG,OAAX,CAAmB7C,IAAI,CAACoB,MAAxB,MAAoCwB,SAJrC,IAKC,CAACd,UAAU,CAAC9B,IAAD,CAPf;MASD,CAZM,CAAP;IAaD;;IAED,OAAO;MACL,oBAAoBA,IAApB,EAA+C;QAC7C,IAAI,CAACD,2BAA2B,CAACC,IAAI,CAACU,IAAN,CAAhC,EAA6C;UAC3C;QACD;;QAED,MAAM2C,UAAU,GAAGrD,IAAI,CAACU,IAAL,CAAUN,YAAV,CAAuB,CAAvB,CAAnB;;QAGA,IACE,CAACiD,UAAD,IACA,CAAC5C,iBAAiB,CAAC4C,UAAD,CADlB,IAEAA,UAAU,CAACJ,EAAX,CAAc5D,IAAd,KAAuBY,uBAAeW,UAHxC,EAIE;UACA;QACD;;QAED,MAAM0C,SAAS,GAAGD,UAAU,CAACJ,EAAX,CAAc9D,IAAhC;QACA,MAAMsD,eAAe,GAAG5B,0BAA0B,CAChDb,IAAI,CAACuD,IAD2C,EAEhDD,SAFgD,CAAlD;;QAIA,IAAI,CAACb,eAAL,EAAsB;UACpB;QACD;;QAED,MAAM,CAACD,QAAD,IAAa1C,OAAO,CAAC0D,oBAAR,CAA6BxD,IAAI,CAACU,IAAlC,CAAnB;;QACA,IACEW,WAAW,CAACrB,IAAI,CAACyD,MAAN,EAAcH,SAAd,CAAX,IACAhB,wBAAwB,CAACtC,IAAI,CAACuC,IAAN,EAAYC,QAAZ,EAAsBC,eAAtB,CAF1B,EAGE;UACA3C,OAAO,CAAC4D,MAAR,CAAe;YACb1D,IADa;YAEb2D,SAAS,EAAE;UAFE,CAAf;QAID;MACF;;IApCI,CAAP;EAsCD;;AAvN4B,CAAhB,CAAf","names":["exports","util","createRule","name","meta","type","docs","description","recommended","messages","preferForOf","schema","defaultOptions","create","context","isSingleVariableDeclaration","node","utils_1","VariableDeclaration","kind","declarations","length","isLiteral","value","Literal","isZeroInitialized","init","isMatchingIdentifier","Identifier","isLessThanLengthExpression","BinaryExpression","operator","left","right","MemberExpression","property","object","isIncrement","UpdateExpression","argument","AssignmentExpression","expr","contains","outer","inner","range","isAssignee","parent","UnaryExpression","ArrayPattern","RestElement","Property","_a","ObjectExpression","isIndexOnlyUsedWithArray","body","indexVar","arrayExpression","sourceCode","getSourceCode","arrayText","getText","references","every","reference","id","identifier","undefined","ThisExpression","declarator","indexName","test","getDeclaredVariables","update","report","messageId"],"sources":["../../src/rules/prefer-for-of.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}