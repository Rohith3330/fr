{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\n//\n// To correct how ESLint searches for plugin packages, add this line to the top of your project's .eslintrc.js file:\n//\n//    require(\"@rushstack/eslint-patch/modern-module-resolution\");\n//\n\nconst path = require('path');\n\nconst fs = require('fs');\n\nconst isModuleResolutionError = ex => typeof ex === 'object' && !!ex && 'code' in ex && ex.code === 'MODULE_NOT_FOUND'; // Module path for eslintrc.cjs\n// Example: \".../@eslint/eslintrc/dist/eslintrc.cjs\"\n\n\nlet eslintrcBundlePath = undefined; // Module path for config-array-factory.js\n// Example: \".../@eslint/eslintrc/lib/config-array-factory\"\n\nlet configArrayFactoryPath = undefined; // Module path for relative-module-resolver.js\n// Example: \".../@eslint/eslintrc/lib/shared/relative-module-resolver\"\n\nlet moduleResolverPath = undefined; // Folder path where ESLint's package.json can be found\n// Example: \".../node_modules/eslint\"\n\nlet eslintFolder = undefined; // Probe for the ESLint >=8.0.0 layout:\n\nfor (let currentModule = module;;) {\n  if (!eslintrcBundlePath) {\n    // For ESLint >=8.0.0, all @eslint/eslintrc code is bundled at this path:\n    //   .../@eslint/eslintrc/dist/eslintrc.cjs\n    try {\n      const eslintrcFolder = path.dirname(require.resolve('@eslint/eslintrc/package.json', {\n        paths: [currentModule.path]\n      })); // Make sure we actually resolved the module in our call path\n      // and not some other spurious dependency.\n\n      if (path.join(eslintrcFolder, 'dist/eslintrc.cjs') === currentModule.filename) {\n        eslintrcBundlePath = path.join(eslintrcFolder, 'dist/eslintrc.cjs');\n      }\n    } catch (ex) {\n      // Module resolution failures are expected, as we're walking\n      // up our require stack to look for eslint. All other errors\n      // are rethrown.\n      if (!isModuleResolutionError(ex)) {\n        throw ex;\n      }\n    }\n  } else {\n    // Next look for a file in ESLint's folder\n    //   .../eslint/lib/cli-engine/cli-engine.js\n    try {\n      const eslintCandidateFolder = path.dirname(require.resolve('eslint/package.json', {\n        paths: [currentModule.path]\n      })); // Make sure we actually resolved the module in our call path\n      // and not some other spurious dependency.\n\n      if (path.join(eslintCandidateFolder, 'lib/cli-engine/cli-engine.js') === currentModule.filename) {\n        eslintFolder = eslintCandidateFolder;\n        break;\n      }\n    } catch (ex) {\n      // Module resolution failures are expected, as we're walking\n      // up our require stack to look for eslint. All other errors\n      // are rethrown.\n      if (!isModuleResolutionError(ex)) {\n        throw ex;\n      }\n    }\n  }\n\n  if (!currentModule.parent) {\n    break;\n  }\n\n  currentModule = currentModule.parent;\n}\n\nif (!eslintFolder) {\n  // Probe for the ESLint >=7.8.0 layout:\n  for (let currentModule = module;;) {\n    if (!configArrayFactoryPath) {\n      // For ESLint >=7.8.0, config-array-factory.js is at this path:\n      //   .../@eslint/eslintrc/lib/config-array-factory.js\n      try {\n        const eslintrcFolder = path.dirname(require.resolve('@eslint/eslintrc/package.json', {\n          paths: [currentModule.path]\n        }));\n\n        if (path.join(eslintrcFolder, '/lib/config-array-factory.js') == currentModule.filename) {\n          configArrayFactoryPath = path.join(eslintrcFolder, 'lib/config-array-factory.js');\n          moduleResolverPath = path.join(eslintrcFolder, 'lib/shared/relative-module-resolver');\n        }\n      } catch (ex) {\n        // Module resolution failures are expected, as we're walking\n        // up our require stack to look for eslint. All other errors\n        // are rethrown.\n        if (!isModuleResolutionError(ex)) {\n          throw ex;\n        }\n      }\n    } else {\n      // Next look for a file in ESLint's folder\n      //   .../eslint/lib/cli-engine/cli-engine.js\n      try {\n        const eslintCandidateFolder = path.dirname(require.resolve('eslint/package.json', {\n          paths: [currentModule.path]\n        }));\n\n        if (path.join(eslintCandidateFolder, 'lib/cli-engine/cli-engine.js') == currentModule.filename) {\n          eslintFolder = eslintCandidateFolder;\n          break;\n        }\n      } catch (ex) {\n        // Module resolution failures are expected, as we're walking\n        // up our require stack to look for eslint. All other errors\n        // are rethrown.\n        if (!isModuleResolutionError(ex)) {\n          throw ex;\n        }\n      }\n    }\n\n    if (!currentModule.parent) {\n      break;\n    }\n\n    currentModule = currentModule.parent;\n  }\n}\n\nif (!eslintFolder) {\n  // Probe for the <7.8.0 layout:\n  for (let currentModule = module;;) {\n    // For ESLint <7.8.0, config-array-factory.js was at this path:\n    //   .../eslint/lib/cli-engine/config-array-factory.js\n    if (/[\\\\/]eslint[\\\\/]lib[\\\\/]cli-engine[\\\\/]config-array-factory\\.js$/i.test(currentModule.filename)) {\n      eslintFolder = path.join(path.dirname(currentModule.filename), '../..');\n      configArrayFactoryPath = path.join(eslintFolder, 'lib/cli-engine/config-array-factory');\n      moduleResolverPath = path.join(eslintFolder, 'lib/shared/relative-module-resolver');\n      break;\n    }\n\n    if (!currentModule.parent) {\n      // This was tested with ESLint 6.1.0 .. 7.12.1.\n      throw new Error('Failed to patch ESLint because the calling module was not recognized.\\n' + 'If you are using a newer ESLint version that may be unsupported, please create a GitHub issue:\\n' + 'https://github.com/microsoft/rushstack/issues');\n    }\n\n    currentModule = currentModule.parent;\n  }\n} // Detect the ESLint package version\n\n\nconst eslintPackageJson = fs.readFileSync(path.join(eslintFolder, 'package.json')).toString();\nconst eslintPackageObject = JSON.parse(eslintPackageJson);\nconst eslintPackageVersion = eslintPackageObject.version;\nconst versionMatch = /^([0-9]+)\\./.exec(eslintPackageVersion); // parse the SemVer MAJOR part\n\nif (!versionMatch) {\n  throw new Error('Unable to parse ESLint version: ' + eslintPackageVersion);\n}\n\nconst eslintMajorVersion = Number(versionMatch[1]);\n\nif (!(eslintMajorVersion >= 6 && eslintMajorVersion <= 8)) {\n  throw new Error('The patch-eslint.js script has only been tested with ESLint version 6.x, 7.x, and 8.x.' + ` (Your version: ${eslintPackageVersion})\\n` + 'Consider reporting a GitHub issue:\\n' + 'https://github.com/microsoft/rushstack/issues');\n}\n\nlet ConfigArrayFactory;\n\nif (eslintMajorVersion === 8) {\n  ConfigArrayFactory = require(eslintrcBundlePath).Legacy.ConfigArrayFactory;\n} else {\n  ConfigArrayFactory = require(configArrayFactoryPath).ConfigArrayFactory;\n}\n\nif (!ConfigArrayFactory.__patched) {\n  ConfigArrayFactory.__patched = true;\n  let ModuleResolver;\n\n  if (eslintMajorVersion === 8) {\n    ModuleResolver = require(eslintrcBundlePath).Legacy.ModuleResolver;\n  } else {\n    ModuleResolver = require(moduleResolverPath);\n  }\n\n  const originalLoadPlugin = ConfigArrayFactory.prototype._loadPlugin;\n\n  if (eslintMajorVersion === 6) {\n    // ESLint 6.x\n    ConfigArrayFactory.prototype._loadPlugin = function (name, importerPath, importerName) {\n      const originalResolve = ModuleResolver.resolve;\n\n      try {\n        ModuleResolver.resolve = function (moduleName, relativeToPath) {\n          try {\n            // resolve using importerPath instead of relativeToPath\n            return originalResolve.call(this, moduleName, importerPath);\n          } catch (e) {\n            if (isModuleResolutionError(e)) {\n              return originalResolve.call(this, moduleName, relativeToPath);\n            }\n\n            throw e;\n          }\n        };\n\n        return originalLoadPlugin.apply(this, arguments);\n      } finally {\n        ModuleResolver.resolve = originalResolve;\n      }\n    };\n  } else {\n    // ESLint 7.x || 8.x\n    ConfigArrayFactory.prototype._loadPlugin = function (name, ctx) {\n      const originalResolve = ModuleResolver.resolve;\n\n      try {\n        ModuleResolver.resolve = function (moduleName, relativeToPath) {\n          try {\n            // resolve using ctx.filePath instead of relativeToPath\n            return originalResolve.call(this, moduleName, ctx.filePath);\n          } catch (e) {\n            if (isModuleResolutionError(e)) {\n              return originalResolve.call(this, moduleName, relativeToPath);\n            }\n\n            throw e;\n          }\n        };\n\n        return originalLoadPlugin.apply(this, arguments);\n      } finally {\n        ModuleResolver.resolve = originalResolve;\n      }\n    };\n  }\n}","map":{"version":3,"mappings":"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","names":["path","require","fs","isModuleResolutionError","ex","code","eslintrcBundlePath","undefined","configArrayFactoryPath","moduleResolverPath","eslintFolder","currentModule","module","eslintrcFolder","dirname","resolve","paths","join","filename","eslintCandidateFolder","parent","test","Error","eslintPackageJson","readFileSync","toString","eslintPackageObject","JSON","parse","eslintPackageVersion","version","versionMatch","exec","eslintMajorVersion","Number","ConfigArrayFactory","Legacy","__patched","ModuleResolver","originalLoadPlugin","prototype","_loadPlugin","name","importerPath","importerName","originalResolve","moduleName","relativeToPath","call","e","apply","arguments","ctx","filePath"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@rushstack\\eslint-patch\\src\\modern-module-resolution.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\n//\n// To correct how ESLint searches for plugin packages, add this line to the top of your project's .eslintrc.js file:\n//\n//    require(\"@rushstack/eslint-patch/modern-module-resolution\");\n//\nconst path = require('path');\nconst fs = require('fs');\n\nconst isModuleResolutionError: (ex: unknown) => boolean = (ex) =>\n  typeof ex === 'object' && !!ex && 'code' in ex && (ex as { code: unknown }).code === 'MODULE_NOT_FOUND';\n\n// Module path for eslintrc.cjs\n// Example: \".../@eslint/eslintrc/dist/eslintrc.cjs\"\nlet eslintrcBundlePath: string | undefined = undefined;\n\n// Module path for config-array-factory.js\n// Example: \".../@eslint/eslintrc/lib/config-array-factory\"\nlet configArrayFactoryPath: string | undefined = undefined;\n\n// Module path for relative-module-resolver.js\n// Example: \".../@eslint/eslintrc/lib/shared/relative-module-resolver\"\nlet moduleResolverPath: string | undefined = undefined;\n\n// Folder path where ESLint's package.json can be found\n// Example: \".../node_modules/eslint\"\nlet eslintFolder: string | undefined = undefined;\n\n// Probe for the ESLint >=8.0.0 layout:\nfor (let currentModule = module; ; ) {\n  if (!eslintrcBundlePath) {\n    // For ESLint >=8.0.0, all @eslint/eslintrc code is bundled at this path:\n    //   .../@eslint/eslintrc/dist/eslintrc.cjs\n    try {\n      const eslintrcFolder = path.dirname(\n        require.resolve('@eslint/eslintrc/package.json', { paths: [currentModule.path] })\n      );\n\n      // Make sure we actually resolved the module in our call path\n      // and not some other spurious dependency.\n      if (path.join(eslintrcFolder, 'dist/eslintrc.cjs') === currentModule.filename) {\n        eslintrcBundlePath = path.join(eslintrcFolder, 'dist/eslintrc.cjs');\n      }\n    } catch (ex: unknown) {\n      // Module resolution failures are expected, as we're walking\n      // up our require stack to look for eslint. All other errors\n      // are rethrown.\n      if (!isModuleResolutionError(ex)) {\n        throw ex;\n      }\n    }\n  } else {\n    // Next look for a file in ESLint's folder\n    //   .../eslint/lib/cli-engine/cli-engine.js\n    try {\n      const eslintCandidateFolder = path.dirname(\n        require.resolve('eslint/package.json', {\n          paths: [currentModule.path]\n        })\n      );\n\n      // Make sure we actually resolved the module in our call path\n      // and not some other spurious dependency.\n      if (path.join(eslintCandidateFolder, 'lib/cli-engine/cli-engine.js') === currentModule.filename) {\n        eslintFolder = eslintCandidateFolder;\n        break;\n      }\n    } catch (ex: unknown) {\n      // Module resolution failures are expected, as we're walking\n      // up our require stack to look for eslint. All other errors\n      // are rethrown.\n      if (!isModuleResolutionError(ex)) {\n        throw ex;\n      }\n    }\n  }\n\n  if (!currentModule.parent) {\n    break;\n  }\n  currentModule = currentModule.parent;\n}\n\nif (!eslintFolder) {\n  // Probe for the ESLint >=7.8.0 layout:\n  for (let currentModule = module; ; ) {\n    if (!configArrayFactoryPath) {\n      // For ESLint >=7.8.0, config-array-factory.js is at this path:\n      //   .../@eslint/eslintrc/lib/config-array-factory.js\n      try {\n        const eslintrcFolder = path.dirname(\n          require.resolve('@eslint/eslintrc/package.json', {\n            paths: [currentModule.path]\n          })\n        );\n\n        if (path.join(eslintrcFolder, '/lib/config-array-factory.js') == currentModule.filename) {\n          configArrayFactoryPath = path.join(eslintrcFolder, 'lib/config-array-factory.js');\n          moduleResolverPath = path.join(eslintrcFolder, 'lib/shared/relative-module-resolver');\n        }\n      } catch (ex: unknown) {\n        // Module resolution failures are expected, as we're walking\n        // up our require stack to look for eslint. All other errors\n        // are rethrown.\n        if (!isModuleResolutionError(ex)) {\n          throw ex;\n        }\n      }\n    } else {\n      // Next look for a file in ESLint's folder\n      //   .../eslint/lib/cli-engine/cli-engine.js\n      try {\n        const eslintCandidateFolder = path.dirname(\n          require.resolve('eslint/package.json', {\n            paths: [currentModule.path]\n          })\n        );\n\n        if (path.join(eslintCandidateFolder, 'lib/cli-engine/cli-engine.js') == currentModule.filename) {\n          eslintFolder = eslintCandidateFolder;\n          break;\n        }\n      } catch (ex: unknown) {\n        // Module resolution failures are expected, as we're walking\n        // up our require stack to look for eslint. All other errors\n        // are rethrown.\n        if (!isModuleResolutionError(ex)) {\n          throw ex;\n        }\n      }\n    }\n\n    if (!currentModule.parent) {\n      break;\n    }\n    currentModule = currentModule.parent;\n  }\n}\n\nif (!eslintFolder) {\n  // Probe for the <7.8.0 layout:\n  for (let currentModule = module; ; ) {\n    // For ESLint <7.8.0, config-array-factory.js was at this path:\n    //   .../eslint/lib/cli-engine/config-array-factory.js\n    if (/[\\\\/]eslint[\\\\/]lib[\\\\/]cli-engine[\\\\/]config-array-factory\\.js$/i.test(currentModule.filename)) {\n      eslintFolder = path.join(path.dirname(currentModule.filename), '../..');\n      configArrayFactoryPath = path.join(eslintFolder, 'lib/cli-engine/config-array-factory');\n      moduleResolverPath = path.join(eslintFolder, 'lib/shared/relative-module-resolver');\n      break;\n    }\n\n    if (!currentModule.parent) {\n      // This was tested with ESLint 6.1.0 .. 7.12.1.\n      throw new Error(\n        'Failed to patch ESLint because the calling module was not recognized.\\n' +\n          'If you are using a newer ESLint version that may be unsupported, please create a GitHub issue:\\n' +\n          'https://github.com/microsoft/rushstack/issues'\n      );\n    }\n    currentModule = currentModule.parent;\n  }\n}\n\n// Detect the ESLint package version\nconst eslintPackageJson = fs.readFileSync(path.join(eslintFolder, 'package.json')).toString();\nconst eslintPackageObject = JSON.parse(eslintPackageJson);\nconst eslintPackageVersion = eslintPackageObject.version;\nconst versionMatch = /^([0-9]+)\\./.exec(eslintPackageVersion); // parse the SemVer MAJOR part\nif (!versionMatch) {\n  throw new Error('Unable to parse ESLint version: ' + eslintPackageVersion);\n}\nconst eslintMajorVersion = Number(versionMatch[1]);\nif (!(eslintMajorVersion >= 6 && eslintMajorVersion <= 8)) {\n  throw new Error(\n    'The patch-eslint.js script has only been tested with ESLint version 6.x, 7.x, and 8.x.' +\n      ` (Your version: ${eslintPackageVersion})\\n` +\n      'Consider reporting a GitHub issue:\\n' +\n      'https://github.com/microsoft/rushstack/issues'\n  );\n}\n\nlet ConfigArrayFactory;\nif (eslintMajorVersion === 8) {\n  ConfigArrayFactory = require(eslintrcBundlePath!).Legacy.ConfigArrayFactory;\n} else {\n  ConfigArrayFactory = require(configArrayFactoryPath!).ConfigArrayFactory;\n}\nif (!ConfigArrayFactory.__patched) {\n  ConfigArrayFactory.__patched = true;\n\n  let ModuleResolver: { resolve: any };\n  if (eslintMajorVersion === 8) {\n    ModuleResolver = require(eslintrcBundlePath!).Legacy.ModuleResolver;\n  } else {\n    ModuleResolver = require(moduleResolverPath!);\n  }\n  const originalLoadPlugin = ConfigArrayFactory.prototype._loadPlugin;\n\n  if (eslintMajorVersion === 6) {\n    // ESLint 6.x\n    ConfigArrayFactory.prototype._loadPlugin = function (\n      name: string,\n      importerPath: string,\n      importerName: string\n    ) {\n      const originalResolve = ModuleResolver.resolve;\n      try {\n        ModuleResolver.resolve = function (moduleName: string, relativeToPath: string) {\n          try {\n            // resolve using importerPath instead of relativeToPath\n            return originalResolve.call(this, moduleName, importerPath);\n          } catch (e) {\n            if (isModuleResolutionError(e)) {\n              return originalResolve.call(this, moduleName, relativeToPath);\n            }\n            throw e;\n          }\n        };\n        return originalLoadPlugin.apply(this, arguments);\n      } finally {\n        ModuleResolver.resolve = originalResolve;\n      }\n    };\n  } else {\n    // ESLint 7.x || 8.x\n    ConfigArrayFactory.prototype._loadPlugin = function (name: string, ctx: Record<string, unknown>) {\n      const originalResolve = ModuleResolver.resolve;\n      try {\n        ModuleResolver.resolve = function (moduleName: string, relativeToPath: string) {\n          try {\n            // resolve using ctx.filePath instead of relativeToPath\n            return originalResolve.call(this, moduleName, ctx.filePath);\n          } catch (e) {\n            if (isModuleResolutionError(e)) {\n              return originalResolve.call(this, moduleName, relativeToPath);\n            }\n            throw e;\n          }\n        };\n        return originalLoadPlugin.apply(this, arguments);\n      } finally {\n        ModuleResolver.resolve = originalResolve;\n      }\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"script"}