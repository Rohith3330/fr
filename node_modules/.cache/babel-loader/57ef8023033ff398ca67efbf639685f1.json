{"ast":null,"code":"\"use strict\";\n/*--------------------------------------------------------------------------\r\n\r\n@sinclair/typebox/guard\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, dTribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n---------------------------------------------------------------------------*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeGuard = exports.TypeGuardInvalidTypeError = void 0;\n\nconst Types = require(\"../typebox\");\n\nclass TypeGuardInvalidTypeError extends Error {\n  constructor(schema) {\n    super('TypeGuard: Invalid type');\n    this.schema = schema;\n  }\n\n}\n\nexports.TypeGuardInvalidTypeError = TypeGuardInvalidTypeError;\n/** TypeGuard tests that values conform to a known TypeBox type specification */\n\nvar TypeGuard;\n\n(function (TypeGuard) {\n  function IsObject(value) {\n    return typeof value === 'object' && value !== null && !Array.isArray(value);\n  }\n\n  function IsArray(value) {\n    return typeof value === 'object' && value !== null && Array.isArray(value);\n  }\n\n  function IsPattern(value) {\n    try {\n      new RegExp(value);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  function IsControlCharacterFree(value) {\n    if (typeof value !== 'string') return false;\n\n    for (let i = 0; i < value.length; i++) {\n      const code = value.charCodeAt(i);\n\n      if (code >= 7 && code <= 13 || code === 27 || code === 127) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function IsString(value) {\n    return typeof value === 'string';\n  }\n\n  function IsNumber(value) {\n    return typeof value === 'number';\n  }\n\n  function IsBoolean(value) {\n    return typeof value === 'boolean';\n  }\n\n  function IsOptionalNumber(value) {\n    return value === undefined || value !== undefined && IsNumber(value);\n  }\n\n  function IsOptionalBoolean(value) {\n    return value === undefined || value !== undefined && IsBoolean(value);\n  }\n\n  function IsOptionalString(value) {\n    return value === undefined || value !== undefined && IsString(value);\n  }\n\n  function IsOptionalPattern(value) {\n    return value === undefined || value !== undefined && IsString(value) && IsControlCharacterFree(value) && IsPattern(value);\n  }\n\n  function IsOptionalFormat(value) {\n    return value === undefined || value !== undefined && IsString(value) && IsControlCharacterFree(value);\n  }\n  /** Returns true if the given schema is TAny */\n\n\n  function TAny(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Any' && IsOptionalString(schema.$id);\n  }\n\n  TypeGuard.TAny = TAny;\n  /** Returns true if the given schema is TArray */\n\n  function TArray(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Array' && schema.type === 'array' && IsOptionalString(schema.$id) && TSchema(schema.items) && IsOptionalNumber(schema.minItems) && IsOptionalNumber(schema.maxItems) && IsOptionalBoolean(schema.uniqueItems);\n  }\n\n  TypeGuard.TArray = TArray;\n  /** Returns true if the given schema is TBoolean */\n\n  function TBoolean(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Boolean' && schema.type === 'boolean' && IsOptionalString(schema.$id);\n  }\n\n  TypeGuard.TBoolean = TBoolean;\n  /** Returns true if the given schema is TConstructor */\n\n  function TConstructor(schema) {\n    if (!(IsObject(schema) && schema[Types.Kind] === 'Constructor' && schema.type === 'constructor' && IsOptionalString(schema.$id) && IsArray(schema.parameters) && TSchema(schema.returns))) {\n      return false;\n    }\n\n    for (const parameter of schema.parameters) {\n      if (!TSchema(parameter)) return false;\n    }\n\n    return true;\n  }\n\n  TypeGuard.TConstructor = TConstructor;\n  /** Returns true if the given schema is TFunction */\n\n  function TFunction(schema) {\n    if (!(IsObject(schema) && schema[Types.Kind] === 'Function' && schema.type === 'function' && IsOptionalString(schema.$id) && IsArray(schema.parameters) && TSchema(schema.returns))) {\n      return false;\n    }\n\n    for (const parameter of schema.parameters) {\n      if (!TSchema(parameter)) return false;\n    }\n\n    return true;\n  }\n\n  TypeGuard.TFunction = TFunction;\n  /** Returns true if the given schema is TInteger */\n\n  function TInteger(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Integer' && schema.type === 'integer' && IsOptionalString(schema.$id) && IsOptionalNumber(schema.multipleOf) && IsOptionalNumber(schema.minimum) && IsOptionalNumber(schema.maximum) && IsOptionalNumber(schema.exclusiveMinimum) && IsOptionalNumber(schema.exclusiveMaximum);\n  }\n\n  TypeGuard.TInteger = TInteger;\n  /** Returns true if the given schema is TLiteral */\n\n  function TLiteral(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Literal' && IsOptionalString(schema.$id) && (IsString(schema.const) || IsNumber(schema.const) || IsBoolean(schema.const));\n  }\n\n  TypeGuard.TLiteral = TLiteral;\n  /** Returns true if the given schema is TNever */\n\n  function TNever(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Never' && IsArray(schema.allOf) && schema.allOf.length === 2 && IsObject(schema.allOf[0]) && IsString(schema.allOf[0].type) && schema.allOf[0].type === 'number' && schema.allOf[0].const === 0 && IsObject(schema.allOf[1]) && IsString(schema.allOf[1].type) && schema.allOf[1].type === 'number' && schema.allOf[1].const === 1;\n  }\n\n  TypeGuard.TNever = TNever;\n  /** Returns true if the given schema is TNull */\n\n  function TNull(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Null' && schema.type === 'null' && IsOptionalString(schema.$id);\n  }\n\n  TypeGuard.TNull = TNull;\n  /** Returns true if the given schema is TNumber */\n\n  function TNumber(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Number' && schema.type === 'number' && IsOptionalString(schema.$id) && IsOptionalNumber(schema.multipleOf) && IsOptionalNumber(schema.minimum) && IsOptionalNumber(schema.maximum) && IsOptionalNumber(schema.exclusiveMinimum) && IsOptionalNumber(schema.exclusiveMaximum);\n  }\n\n  TypeGuard.TNumber = TNumber;\n  /** Returns true if the given schema is TObject */\n\n  function TObject(schema) {\n    if (!(IsObject(schema) && schema[Types.Kind] === 'Object' && schema.type === 'object' && IsOptionalString(schema.$id) && IsObject(schema.properties) && IsOptionalBoolean(schema.additionalProperties) && IsOptionalNumber(schema.minProperties) && IsOptionalNumber(schema.maxProperties))) {\n      return false;\n    }\n\n    for (const [key, value] of Object.entries(schema.properties)) {\n      if (!IsControlCharacterFree(key)) return false;\n      if (!TSchema(value)) return false;\n    }\n\n    return true;\n  }\n\n  TypeGuard.TObject = TObject;\n  /** Returns true if the given schema is TPromise */\n\n  function TPromise(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Promise' && schema.type === 'promise' && IsOptionalString(schema.$id) && TSchema(schema.item);\n  }\n\n  TypeGuard.TPromise = TPromise;\n  /** Returns true if the given schema is TRecord */\n\n  function TRecord(schema) {\n    if (!(IsObject(schema) && schema[Types.Kind] === 'Record' && schema.type === 'object' && IsOptionalString(schema.$id) && schema.additionalProperties === false && IsObject(schema.patternProperties))) {\n      return false;\n    }\n\n    const keys = Object.keys(schema.patternProperties);\n\n    if (keys.length !== 1) {\n      return false;\n    }\n\n    if (!IsPattern(keys[0])) {\n      return false;\n    }\n\n    if (!TSchema(schema.patternProperties[keys[0]])) {\n      return false;\n    }\n\n    return true;\n  }\n\n  TypeGuard.TRecord = TRecord;\n  /** Returns true if the given schema is TSelf */\n\n  function TSelf(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Self' && IsOptionalString(schema.$id) && IsString(schema.$ref);\n  }\n\n  TypeGuard.TSelf = TSelf;\n  /** Returns true if the given schema is TRef */\n\n  function TRef(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Ref' && IsOptionalString(schema.$id) && IsString(schema.$ref);\n  }\n\n  TypeGuard.TRef = TRef;\n  /** Returns true if the given schema is TString */\n\n  function TString(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'String' && schema.type === 'string' && IsOptionalString(schema.$id) && IsOptionalNumber(schema.minLength) && IsOptionalNumber(schema.maxLength) && IsOptionalPattern(schema.pattern) && IsOptionalFormat(schema.format);\n  }\n\n  TypeGuard.TString = TString;\n  /** Returns true if the given schema is TTuple */\n\n  function TTuple(schema) {\n    if (!(IsObject(schema) && schema[Types.Kind] === 'Tuple' && schema.type === 'array' && IsOptionalString(schema.$id) && IsNumber(schema.minItems) && IsNumber(schema.maxItems) && schema.minItems === schema.maxItems)) {\n      return false;\n    }\n\n    if (schema.items === undefined && schema.additionalItems === undefined && schema.minItems === 0) {\n      return true;\n    }\n\n    if (!IsArray(schema.items)) {\n      return false;\n    }\n\n    for (const inner of schema.items) {\n      if (!TSchema(inner)) return false;\n    }\n\n    return true;\n  }\n\n  TypeGuard.TTuple = TTuple;\n  /** Returns true if the given schema is TUndefined */\n\n  function TUndefined(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Undefined' && schema.type === 'object' && IsOptionalString(schema.$id) && schema.specialized === 'Undefined';\n  }\n\n  TypeGuard.TUndefined = TUndefined;\n  /** Returns true if the given schema is TUnion */\n\n  function TUnion(schema) {\n    if (!(IsObject(schema) && schema[Types.Kind] === 'Union' && IsArray(schema.anyOf) && IsOptionalString(schema.$id))) {\n      return false;\n    }\n\n    for (const inner of schema.anyOf) {\n      if (!TSchema(inner)) return false;\n    }\n\n    return true;\n  }\n\n  TypeGuard.TUnion = TUnion;\n  /** Returns true if the given schema is TUint8Array */\n\n  function TUint8Array(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Uint8Array' && schema.type === 'object' && IsOptionalString(schema.$id) && schema.specialized === 'Uint8Array' && IsOptionalNumber(schema.minByteLength) && IsOptionalNumber(schema.maxByteLength);\n  }\n\n  TypeGuard.TUint8Array = TUint8Array;\n  /** Returns true if the given schema is TUnknown */\n\n  function TUnknown(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Unknown' && IsOptionalString(schema.$id);\n  }\n\n  TypeGuard.TUnknown = TUnknown;\n  /** Returns true if the given schema is TVoid */\n\n  function TVoid(schema) {\n    return IsObject(schema) && schema[Types.Kind] === 'Void' && schema.type === 'null' && IsOptionalString(schema.$id);\n  }\n\n  TypeGuard.TVoid = TVoid;\n  /** Returns true if the given schema is TSchema */\n\n  function TSchema(schema) {\n    return TAny(schema) || TArray(schema) || TBoolean(schema) || TConstructor(schema) || TFunction(schema) || TInteger(schema) || TLiteral(schema) || TNever(schema) || TNull(schema) || TNumber(schema) || TObject(schema) || TPromise(schema) || TRecord(schema) || TSelf(schema) || TRef(schema) || TString(schema) || TTuple(schema) || TUndefined(schema) || TUnion(schema) || TUint8Array(schema) || TUnknown(schema) || TVoid(schema);\n  }\n\n  TypeGuard.TSchema = TSchema;\n  /** Asserts if this schema and associated references are valid. */\n\n  function Assert(schema) {\n    let references = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    if (!TSchema(schema)) throw new TypeGuardInvalidTypeError(schema);\n\n    for (const schema of references) {\n      if (!TSchema(schema)) throw new TypeGuardInvalidTypeError(schema);\n    }\n  }\n\n  TypeGuard.Assert = Assert;\n})(TypeGuard = exports.TypeGuard || (exports.TypeGuard = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","TypeGuard","TypeGuardInvalidTypeError","Types","require","Error","constructor","schema","IsObject","Array","isArray","IsArray","IsPattern","RegExp","IsControlCharacterFree","i","length","code","charCodeAt","IsString","IsNumber","IsBoolean","IsOptionalNumber","undefined","IsOptionalBoolean","IsOptionalString","IsOptionalPattern","IsOptionalFormat","TAny","Kind","$id","TArray","type","TSchema","items","minItems","maxItems","uniqueItems","TBoolean","TConstructor","parameters","returns","parameter","TFunction","TInteger","multipleOf","minimum","maximum","exclusiveMinimum","exclusiveMaximum","TLiteral","const","TNever","allOf","TNull","TNumber","TObject","properties","additionalProperties","minProperties","maxProperties","key","entries","TPromise","item","TRecord","patternProperties","keys","TSelf","$ref","TRef","TString","minLength","maxLength","pattern","format","TTuple","additionalItems","inner","TUndefined","specialized","TUnion","anyOf","TUint8Array","minByteLength","maxByteLength","TUnknown","TVoid","Assert","references"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@sinclair/typebox/guard/guard.js"],"sourcesContent":["\"use strict\";\r\n/*--------------------------------------------------------------------------\r\n\r\n@sinclair/typebox/guard\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2022 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, dTribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n---------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TypeGuard = exports.TypeGuardInvalidTypeError = void 0;\r\nconst Types = require(\"../typebox\");\r\nclass TypeGuardInvalidTypeError extends Error {\r\n    constructor(schema) {\r\n        super('TypeGuard: Invalid type');\r\n        this.schema = schema;\r\n    }\r\n}\r\nexports.TypeGuardInvalidTypeError = TypeGuardInvalidTypeError;\r\n/** TypeGuard tests that values conform to a known TypeBox type specification */\r\nvar TypeGuard;\r\n(function (TypeGuard) {\r\n    function IsObject(value) {\r\n        return typeof value === 'object' && value !== null && !Array.isArray(value);\r\n    }\r\n    function IsArray(value) {\r\n        return typeof value === 'object' && value !== null && Array.isArray(value);\r\n    }\r\n    function IsPattern(value) {\r\n        try {\r\n            new RegExp(value);\r\n            return true;\r\n        }\r\n        catch {\r\n            return false;\r\n        }\r\n    }\r\n    function IsControlCharacterFree(value) {\r\n        if (typeof value !== 'string')\r\n            return false;\r\n        for (let i = 0; i < value.length; i++) {\r\n            const code = value.charCodeAt(i);\r\n            if ((code >= 7 && code <= 13) || code === 27 || code === 127) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function IsString(value) {\r\n        return typeof value === 'string';\r\n    }\r\n    function IsNumber(value) {\r\n        return typeof value === 'number';\r\n    }\r\n    function IsBoolean(value) {\r\n        return typeof value === 'boolean';\r\n    }\r\n    function IsOptionalNumber(value) {\r\n        return value === undefined || (value !== undefined && IsNumber(value));\r\n    }\r\n    function IsOptionalBoolean(value) {\r\n        return value === undefined || (value !== undefined && IsBoolean(value));\r\n    }\r\n    function IsOptionalString(value) {\r\n        return value === undefined || (value !== undefined && IsString(value));\r\n    }\r\n    function IsOptionalPattern(value) {\r\n        return value === undefined || (value !== undefined && IsString(value) && IsControlCharacterFree(value) && IsPattern(value));\r\n    }\r\n    function IsOptionalFormat(value) {\r\n        return value === undefined || (value !== undefined && IsString(value) && IsControlCharacterFree(value));\r\n    }\r\n    /** Returns true if the given schema is TAny */\r\n    function TAny(schema) {\r\n        return IsObject(schema) && schema[Types.Kind] === 'Any' && IsOptionalString(schema.$id);\r\n    }\r\n    TypeGuard.TAny = TAny;\r\n    /** Returns true if the given schema is TArray */\r\n    function TArray(schema) {\r\n        return (IsObject(schema) &&\r\n            schema[Types.Kind] === 'Array' &&\r\n            schema.type === 'array' &&\r\n            IsOptionalString(schema.$id) &&\r\n            TSchema(schema.items) &&\r\n            IsOptionalNumber(schema.minItems) &&\r\n            IsOptionalNumber(schema.maxItems) &&\r\n            IsOptionalBoolean(schema.uniqueItems));\r\n    }\r\n    TypeGuard.TArray = TArray;\r\n    /** Returns true if the given schema is TBoolean */\r\n    function TBoolean(schema) {\r\n        return IsObject(schema) && schema[Types.Kind] === 'Boolean' && schema.type === 'boolean' && IsOptionalString(schema.$id);\r\n    }\r\n    TypeGuard.TBoolean = TBoolean;\r\n    /** Returns true if the given schema is TConstructor */\r\n    function TConstructor(schema) {\r\n        if (!(IsObject(schema) && schema[Types.Kind] === 'Constructor' && schema.type === 'constructor' && IsOptionalString(schema.$id) && IsArray(schema.parameters) && TSchema(schema.returns))) {\r\n            return false;\r\n        }\r\n        for (const parameter of schema.parameters) {\r\n            if (!TSchema(parameter))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    TypeGuard.TConstructor = TConstructor;\r\n    /** Returns true if the given schema is TFunction */\r\n    function TFunction(schema) {\r\n        if (!(IsObject(schema) && schema[Types.Kind] === 'Function' && schema.type === 'function' && IsOptionalString(schema.$id) && IsArray(schema.parameters) && TSchema(schema.returns))) {\r\n            return false;\r\n        }\r\n        for (const parameter of schema.parameters) {\r\n            if (!TSchema(parameter))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    TypeGuard.TFunction = TFunction;\r\n    /** Returns true if the given schema is TInteger */\r\n    function TInteger(schema) {\r\n        return (IsObject(schema) &&\r\n            schema[Types.Kind] === 'Integer' &&\r\n            schema.type === 'integer' &&\r\n            IsOptionalString(schema.$id) &&\r\n            IsOptionalNumber(schema.multipleOf) &&\r\n            IsOptionalNumber(schema.minimum) &&\r\n            IsOptionalNumber(schema.maximum) &&\r\n            IsOptionalNumber(schema.exclusiveMinimum) &&\r\n            IsOptionalNumber(schema.exclusiveMaximum));\r\n    }\r\n    TypeGuard.TInteger = TInteger;\r\n    /** Returns true if the given schema is TLiteral */\r\n    function TLiteral(schema) {\r\n        return IsObject(schema) && schema[Types.Kind] === 'Literal' && IsOptionalString(schema.$id) && (IsString(schema.const) || IsNumber(schema.const) || IsBoolean(schema.const));\r\n    }\r\n    TypeGuard.TLiteral = TLiteral;\r\n    /** Returns true if the given schema is TNever */\r\n    function TNever(schema) {\r\n        return (IsObject(schema) &&\r\n            schema[Types.Kind] === 'Never' &&\r\n            IsArray(schema.allOf) &&\r\n            schema.allOf.length === 2 &&\r\n            IsObject(schema.allOf[0]) &&\r\n            IsString(schema.allOf[0].type) &&\r\n            schema.allOf[0].type === 'number' &&\r\n            schema.allOf[0].const === 0 &&\r\n            IsObject(schema.allOf[1]) &&\r\n            IsString(schema.allOf[1].type) &&\r\n            schema.allOf[1].type === 'number' &&\r\n            schema.allOf[1].const === 1);\r\n    }\r\n    TypeGuard.TNever = TNever;\r\n    /** Returns true if the given schema is TNull */\r\n    function TNull(schema) {\r\n        return IsObject(schema) && schema[Types.Kind] === 'Null' && schema.type === 'null' && IsOptionalString(schema.$id);\r\n    }\r\n    TypeGuard.TNull = TNull;\r\n    /** Returns true if the given schema is TNumber */\r\n    function TNumber(schema) {\r\n        return (IsObject(schema) &&\r\n            schema[Types.Kind] === 'Number' &&\r\n            schema.type === 'number' &&\r\n            IsOptionalString(schema.$id) &&\r\n            IsOptionalNumber(schema.multipleOf) &&\r\n            IsOptionalNumber(schema.minimum) &&\r\n            IsOptionalNumber(schema.maximum) &&\r\n            IsOptionalNumber(schema.exclusiveMinimum) &&\r\n            IsOptionalNumber(schema.exclusiveMaximum));\r\n    }\r\n    TypeGuard.TNumber = TNumber;\r\n    /** Returns true if the given schema is TObject */\r\n    function TObject(schema) {\r\n        if (!(IsObject(schema) &&\r\n            schema[Types.Kind] === 'Object' &&\r\n            schema.type === 'object' &&\r\n            IsOptionalString(schema.$id) &&\r\n            IsObject(schema.properties) &&\r\n            IsOptionalBoolean(schema.additionalProperties) &&\r\n            IsOptionalNumber(schema.minProperties) &&\r\n            IsOptionalNumber(schema.maxProperties))) {\r\n            return false;\r\n        }\r\n        for (const [key, value] of Object.entries(schema.properties)) {\r\n            if (!IsControlCharacterFree(key))\r\n                return false;\r\n            if (!TSchema(value))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    TypeGuard.TObject = TObject;\r\n    /** Returns true if the given schema is TPromise */\r\n    function TPromise(schema) {\r\n        return IsObject(schema) && schema[Types.Kind] === 'Promise' && schema.type === 'promise' && IsOptionalString(schema.$id) && TSchema(schema.item);\r\n    }\r\n    TypeGuard.TPromise = TPromise;\r\n    /** Returns true if the given schema is TRecord */\r\n    function TRecord(schema) {\r\n        if (!(IsObject(schema) && schema[Types.Kind] === 'Record' && schema.type === 'object' && IsOptionalString(schema.$id) && schema.additionalProperties === false && IsObject(schema.patternProperties))) {\r\n            return false;\r\n        }\r\n        const keys = Object.keys(schema.patternProperties);\r\n        if (keys.length !== 1) {\r\n            return false;\r\n        }\r\n        if (!IsPattern(keys[0])) {\r\n            return false;\r\n        }\r\n        if (!TSchema(schema.patternProperties[keys[0]])) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    TypeGuard.TRecord = TRecord;\r\n    /** Returns true if the given schema is TSelf */\r\n    function TSelf(schema) {\r\n        return IsObject(schema) && schema[Types.Kind] === 'Self' && IsOptionalString(schema.$id) && IsString(schema.$ref);\r\n    }\r\n    TypeGuard.TSelf = TSelf;\r\n    /** Returns true if the given schema is TRef */\r\n    function TRef(schema) {\r\n        return IsObject(schema) && schema[Types.Kind] === 'Ref' && IsOptionalString(schema.$id) && IsString(schema.$ref);\r\n    }\r\n    TypeGuard.TRef = TRef;\r\n    /** Returns true if the given schema is TString */\r\n    function TString(schema) {\r\n        return (IsObject(schema) &&\r\n            schema[Types.Kind] === 'String' &&\r\n            schema.type === 'string' &&\r\n            IsOptionalString(schema.$id) &&\r\n            IsOptionalNumber(schema.minLength) &&\r\n            IsOptionalNumber(schema.maxLength) &&\r\n            IsOptionalPattern(schema.pattern) &&\r\n            IsOptionalFormat(schema.format));\r\n    }\r\n    TypeGuard.TString = TString;\r\n    /** Returns true if the given schema is TTuple */\r\n    function TTuple(schema) {\r\n        if (!(IsObject(schema) && schema[Types.Kind] === 'Tuple' && schema.type === 'array' && IsOptionalString(schema.$id) && IsNumber(schema.minItems) && IsNumber(schema.maxItems) && schema.minItems === schema.maxItems)) {\r\n            return false;\r\n        }\r\n        if (schema.items === undefined && schema.additionalItems === undefined && schema.minItems === 0) {\r\n            return true;\r\n        }\r\n        if (!IsArray(schema.items)) {\r\n            return false;\r\n        }\r\n        for (const inner of schema.items) {\r\n            if (!TSchema(inner))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    TypeGuard.TTuple = TTuple;\r\n    /** Returns true if the given schema is TUndefined */\r\n    function TUndefined(schema) {\r\n        return IsObject(schema) && schema[Types.Kind] === 'Undefined' && schema.type === 'object' && IsOptionalString(schema.$id) && schema.specialized === 'Undefined';\r\n    }\r\n    TypeGuard.TUndefined = TUndefined;\r\n    /** Returns true if the given schema is TUnion */\r\n    function TUnion(schema) {\r\n        if (!(IsObject(schema) && schema[Types.Kind] === 'Union' && IsArray(schema.anyOf) && IsOptionalString(schema.$id))) {\r\n            return false;\r\n        }\r\n        for (const inner of schema.anyOf) {\r\n            if (!TSchema(inner))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    TypeGuard.TUnion = TUnion;\r\n    /** Returns true if the given schema is TUint8Array */\r\n    function TUint8Array(schema) {\r\n        return (IsObject(schema) &&\r\n            schema[Types.Kind] === 'Uint8Array' &&\r\n            schema.type === 'object' &&\r\n            IsOptionalString(schema.$id) &&\r\n            schema.specialized === 'Uint8Array' &&\r\n            IsOptionalNumber(schema.minByteLength) &&\r\n            IsOptionalNumber(schema.maxByteLength));\r\n    }\r\n    TypeGuard.TUint8Array = TUint8Array;\r\n    /** Returns true if the given schema is TUnknown */\r\n    function TUnknown(schema) {\r\n        return IsObject(schema) && schema[Types.Kind] === 'Unknown' && IsOptionalString(schema.$id);\r\n    }\r\n    TypeGuard.TUnknown = TUnknown;\r\n    /** Returns true if the given schema is TVoid */\r\n    function TVoid(schema) {\r\n        return IsObject(schema) && schema[Types.Kind] === 'Void' && schema.type === 'null' && IsOptionalString(schema.$id);\r\n    }\r\n    TypeGuard.TVoid = TVoid;\r\n    /** Returns true if the given schema is TSchema */\r\n    function TSchema(schema) {\r\n        return (TAny(schema) ||\r\n            TArray(schema) ||\r\n            TBoolean(schema) ||\r\n            TConstructor(schema) ||\r\n            TFunction(schema) ||\r\n            TInteger(schema) ||\r\n            TLiteral(schema) ||\r\n            TNever(schema) ||\r\n            TNull(schema) ||\r\n            TNumber(schema) ||\r\n            TObject(schema) ||\r\n            TPromise(schema) ||\r\n            TRecord(schema) ||\r\n            TSelf(schema) ||\r\n            TRef(schema) ||\r\n            TString(schema) ||\r\n            TTuple(schema) ||\r\n            TUndefined(schema) ||\r\n            TUnion(schema) ||\r\n            TUint8Array(schema) ||\r\n            TUnknown(schema) ||\r\n            TVoid(schema));\r\n    }\r\n    TypeGuard.TSchema = TSchema;\r\n    /** Asserts if this schema and associated references are valid. */\r\n    function Assert(schema, references = []) {\r\n        if (!TSchema(schema))\r\n            throw new TypeGuardInvalidTypeError(schema);\r\n        for (const schema of references) {\r\n            if (!TSchema(schema))\r\n                throw new TypeGuardInvalidTypeError(schema);\r\n        }\r\n    }\r\n    TypeGuard.Assert = Assert;\r\n})(TypeGuard = exports.TypeGuard || (exports.TypeGuard = {}));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}