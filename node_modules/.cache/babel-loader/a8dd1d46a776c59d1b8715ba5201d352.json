{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeExtension = exports.fileExistsAsync = exports.readJsonFromDiskAsync = exports.readJsonFromDiskSync = exports.fileExistsSync = void 0;\n\nvar fs = require(\"fs\");\n\nfunction fileExistsSync(path) {\n  try {\n    var stats = fs.statSync(path);\n    return stats.isFile();\n  } catch (err) {\n    // If error, assume file did not exist\n    return false;\n  }\n}\n\nexports.fileExistsSync = fileExistsSync;\n/**\n * Reads package.json from disk\n * @param file Path to package.json\n */\n// tslint:disable-next-line:no-any\n\nfunction readJsonFromDiskSync(packageJsonPath) {\n  if (!fs.existsSync(packageJsonPath)) {\n    return undefined;\n  }\n\n  return require(packageJsonPath);\n}\n\nexports.readJsonFromDiskSync = readJsonFromDiskSync;\n\nfunction readJsonFromDiskAsync(path, // tslint:disable-next-line:no-any\ncallback) {\n  fs.readFile(path, \"utf8\", function (err, result) {\n    // If error, assume file did not exist\n    if (err || !result) {\n      return callback();\n    }\n\n    var json = JSON.parse(result);\n    return callback(undefined, json);\n  });\n}\n\nexports.readJsonFromDiskAsync = readJsonFromDiskAsync;\n\nfunction fileExistsAsync(path2, callback2) {\n  fs.stat(path2, function (err, stats) {\n    if (err) {\n      // If error assume file does not exist\n      return callback2(undefined, false);\n    }\n\n    callback2(undefined, stats ? stats.isFile() : false);\n  });\n}\n\nexports.fileExistsAsync = fileExistsAsync;\n\nfunction removeExtension(path) {\n  return path.substring(0, path.lastIndexOf(\".\")) || path;\n}\n\nexports.removeExtension = removeExtension;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAkCA,SAAgBA,cAAhB,CAA+BC,IAA/B,EAA2C;EACzC,IAAI;IACF,IAAMC,KAAK,GAAGC,EAAE,CAACC,QAAH,CAAYH,IAAZ,CAAd;IACA,OAAOC,KAAK,CAACG,MAAN,EAAP;EACD,CAHD,CAGE,OAAOC,GAAP,EAAY;IACZ;IACA,OAAO,KAAP;EACD;AACF;;AARDC;AAUA;;;;AAIA;;AACA,SAAgBC,oBAAhB,CAAqCC,eAArC,EAA4D;EAC1D,IAAI,CAACN,EAAE,CAACO,UAAH,CAAcD,eAAd,CAAL,EAAqC;IACnC,OAAOE,SAAP;EACD;;EACD,OAAOC,OAAO,CAACH,eAAD,CAAd;AACD;;AALDF;;AAOA,SAAgBM,qBAAhB,CACEZ,IADF,EAEE;AACAa,QAHF,EAGgD;EAE9CX,EAAE,CAACY,QAAH,CAAYd,IAAZ,EAAkB,MAAlB,EAA0B,UAACK,GAAD,EAAMU,MAAN,EAAY;IACpC;IACA,IAAIV,GAAG,IAAI,CAACU,MAAZ,EAAoB;MAClB,OAAOF,QAAQ,EAAf;IACD;;IACD,IAAMG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAX,CAAb;IACA,OAAOF,QAAQ,CAACH,SAAD,EAAYM,IAAZ,CAAf;EACD,CAPD;AAQD;;AAbDV;;AAeA,SAAgBa,eAAhB,CACEC,KADF,EAEEC,SAFF,EAEoD;EAElDnB,EAAE,CAACoB,IAAH,CAAQF,KAAR,EAAe,UAACf,GAAD,EAAaJ,KAAb,EAA4B;IACzC,IAAII,GAAJ,EAAS;MACP;MACA,OAAOgB,SAAS,CAACX,SAAD,EAAY,KAAZ,CAAhB;IACD;;IACDW,SAAS,CAACX,SAAD,EAAYT,KAAK,GAAGA,KAAK,CAACG,MAAN,EAAH,GAAoB,KAArC,CAAT;EACD,CAND;AAOD;;AAXDE;;AAaA,SAAgBiB,eAAhB,CAAgCvB,IAAhC,EAA4C;EAC1C,OAAOA,IAAI,CAACwB,SAAL,CAAe,CAAf,EAAkBxB,IAAI,CAACyB,WAAL,CAAiB,GAAjB,CAAlB,KAA4CzB,IAAnD;AACD;;AAFDM","names":["fileExistsSync","path","stats","fs","statSync","isFile","err","exports","readJsonFromDiskSync","packageJsonPath","existsSync","undefined","require","readJsonFromDiskAsync","callback","readFile","result","json","JSON","parse","fileExistsAsync","path2","callback2","stat","removeExtension","substring","lastIndexOf"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\tsconfig-paths\\src\\filesystem.ts"],"sourcesContent":["import * as fs from \"fs\";\n\n/**\n * Typing for the fields of package.json we care about\n */\nexport interface PackageJson {\n  [key: string]: string;\n}\n\n/**\n * A function that json from a file\n */\nexport interface ReadJsonSync {\n  // tslint:disable-next-line:no-any\n  (packageJsonPath: string): any | undefined;\n}\n\nexport interface FileExistsSync {\n  (name: string): boolean;\n}\n\nexport interface FileExistsAsync {\n  (path: string, callback: (err?: Error, exists?: boolean) => void): void;\n}\n\nexport interface ReadJsonAsyncCallback {\n  // tslint:disable-next-line:no-any\n  (err?: Error, content?: any): void;\n}\n\nexport interface ReadJsonAsync {\n  (path: string, callback: ReadJsonAsyncCallback): void;\n}\n\nexport function fileExistsSync(path: string): boolean {\n  try {\n    const stats = fs.statSync(path);\n    return stats.isFile();\n  } catch (err) {\n    // If error, assume file did not exist\n    return false;\n  }\n}\n\n/**\n * Reads package.json from disk\n * @param file Path to package.json\n */\n// tslint:disable-next-line:no-any\nexport function readJsonFromDiskSync(packageJsonPath: string): any | undefined {\n  if (!fs.existsSync(packageJsonPath)) {\n    return undefined;\n  }\n  return require(packageJsonPath);\n}\n\nexport function readJsonFromDiskAsync(\n  path: string,\n  // tslint:disable-next-line:no-any\n  callback: (err?: Error, content?: any) => void\n): void {\n  fs.readFile(path, \"utf8\", (err, result) => {\n    // If error, assume file did not exist\n    if (err || !result) {\n      return callback();\n    }\n    const json = JSON.parse(result);\n    return callback(undefined, json);\n  });\n}\n\nexport function fileExistsAsync(\n  path2: string,\n  callback2: (err?: Error, exists?: boolean) => void\n): void {\n  fs.stat(path2, (err: Error, stats: fs.Stats) => {\n    if (err) {\n      // If error assume file does not exist\n      return callback2(undefined, false);\n    }\n    callback2(undefined, stats ? stats.isFile() : false);\n  });\n}\n\nexport function removeExtension(path: string): string {\n  return path.substring(0, path.lastIndexOf(\".\")) || path;\n}\n"]},"metadata":{},"sourceType":"script"}