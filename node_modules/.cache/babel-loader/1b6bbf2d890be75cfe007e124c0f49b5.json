{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst buildFixer = (callee, nodeName, preferredTestKeyword) => fixer => [fixer.replaceText(callee.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression ? callee.object : callee, getPreferredNodeName(nodeName, preferredTestKeyword))];\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Have control over `test` and `it` usages',\n      recommended: false\n    },\n    fixable: 'code',\n    messages: {\n      consistentMethod: \"Prefer using '{{ testKeyword }}' instead of '{{ oppositeTestKeyword }}'\",\n      consistentMethodWithinDescribe: \"Prefer using '{{ testKeywordWithinDescribe }}' instead of '{{ oppositeTestKeyword }}' within describe\"\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        fn: {\n          enum: [_utils.TestCaseName.it, _utils.TestCaseName.test]\n        },\n        withinDescribe: {\n          enum: [_utils.TestCaseName.it, _utils.TestCaseName.test]\n        }\n      },\n      additionalProperties: false\n    }],\n    type: 'suggestion'\n  },\n  defaultOptions: [{\n    fn: _utils.TestCaseName.test,\n    withinDescribe: _utils.TestCaseName.it\n  }],\n\n  create(context) {\n    const configObj = context.options[0] || {};\n    const testKeyword = configObj.fn || _utils.TestCaseName.test;\n    const testKeywordWithinDescribe = configObj.withinDescribe || configObj.fn || _utils.TestCaseName.it;\n    let describeNestingLevel = 0;\n    return {\n      CallExpression(node) {\n        const nodeName = (0, _utils.getNodeName)(node.callee);\n\n        if (!nodeName) {\n          return;\n        }\n\n        if ((0, _utils.isDescribeCall)(node)) {\n          describeNestingLevel++;\n        }\n\n        const funcNode = node.callee.type === _experimentalUtils.AST_NODE_TYPES.TaggedTemplateExpression ? node.callee.tag : node.callee.type === _experimentalUtils.AST_NODE_TYPES.CallExpression ? node.callee.callee : node.callee;\n\n        if ((0, _utils.isTestCaseCall)(node) && describeNestingLevel === 0 && !nodeName.includes(testKeyword)) {\n          const oppositeTestKeyword = getOppositeTestKeyword(testKeyword);\n          context.report({\n            messageId: 'consistentMethod',\n            node: node.callee,\n            data: {\n              testKeyword,\n              oppositeTestKeyword\n            },\n            fix: buildFixer(funcNode, nodeName, testKeyword)\n          });\n        }\n\n        if ((0, _utils.isTestCaseCall)(node) && describeNestingLevel > 0 && !nodeName.includes(testKeywordWithinDescribe)) {\n          const oppositeTestKeyword = getOppositeTestKeyword(testKeywordWithinDescribe);\n          context.report({\n            messageId: 'consistentMethodWithinDescribe',\n            node: node.callee,\n            data: {\n              testKeywordWithinDescribe,\n              oppositeTestKeyword\n            },\n            fix: buildFixer(funcNode, nodeName, testKeywordWithinDescribe)\n          });\n        }\n      },\n\n      'CallExpression:exit'(node) {\n        if ((0, _utils.isDescribeCall)(node)) {\n          describeNestingLevel--;\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;\n\nfunction getPreferredNodeName(nodeName, preferredTestKeyword) {\n  if (nodeName === _utils.TestCaseName.fit) {\n    return 'test.only';\n  }\n\n  return nodeName.startsWith('f') || nodeName.startsWith('x') ? nodeName.charAt(0) + preferredTestKeyword : preferredTestKeyword;\n}\n\nfunction getOppositeTestKeyword(test) {\n  if (test === _utils.TestCaseName.test) {\n    return _utils.TestCaseName.it;\n  }\n\n  return _utils.TestCaseName.test;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","buildFixer","callee","nodeName","preferredTestKeyword","fixer","replaceText","type","AST_NODE_TYPES","MemberExpression","object","getPreferredNodeName","_default","createRule","name","__filename","meta","docs","category","description","recommended","fixable","messages","consistentMethod","consistentMethodWithinDescribe","schema","properties","fn","enum","TestCaseName","it","test","withinDescribe","additionalProperties","defaultOptions","create","context","configObj","options","testKeyword","testKeywordWithinDescribe","describeNestingLevel","CallExpression","node","getNodeName","isDescribeCall","funcNode","TaggedTemplateExpression","tag","isTestCaseCall","includes","oppositeTestKeyword","getOppositeTestKeyword","report","messageId","data","fix","fit","startsWith","charAt"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/consistent-test-it.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst buildFixer = (callee, nodeName, preferredTestKeyword) => fixer => [fixer.replaceText(callee.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression ? callee.object : callee, getPreferredNodeName(nodeName, preferredTestKeyword))];\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Have control over `test` and `it` usages',\n      recommended: false\n    },\n    fixable: 'code',\n    messages: {\n      consistentMethod: \"Prefer using '{{ testKeyword }}' instead of '{{ oppositeTestKeyword }}'\",\n      consistentMethodWithinDescribe: \"Prefer using '{{ testKeywordWithinDescribe }}' instead of '{{ oppositeTestKeyword }}' within describe\"\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        fn: {\n          enum: [_utils.TestCaseName.it, _utils.TestCaseName.test]\n        },\n        withinDescribe: {\n          enum: [_utils.TestCaseName.it, _utils.TestCaseName.test]\n        }\n      },\n      additionalProperties: false\n    }],\n    type: 'suggestion'\n  },\n  defaultOptions: [{\n    fn: _utils.TestCaseName.test,\n    withinDescribe: _utils.TestCaseName.it\n  }],\n\n  create(context) {\n    const configObj = context.options[0] || {};\n    const testKeyword = configObj.fn || _utils.TestCaseName.test;\n    const testKeywordWithinDescribe = configObj.withinDescribe || configObj.fn || _utils.TestCaseName.it;\n    let describeNestingLevel = 0;\n    return {\n      CallExpression(node) {\n        const nodeName = (0, _utils.getNodeName)(node.callee);\n\n        if (!nodeName) {\n          return;\n        }\n\n        if ((0, _utils.isDescribeCall)(node)) {\n          describeNestingLevel++;\n        }\n\n        const funcNode = node.callee.type === _experimentalUtils.AST_NODE_TYPES.TaggedTemplateExpression ? node.callee.tag : node.callee.type === _experimentalUtils.AST_NODE_TYPES.CallExpression ? node.callee.callee : node.callee;\n\n        if ((0, _utils.isTestCaseCall)(node) && describeNestingLevel === 0 && !nodeName.includes(testKeyword)) {\n          const oppositeTestKeyword = getOppositeTestKeyword(testKeyword);\n          context.report({\n            messageId: 'consistentMethod',\n            node: node.callee,\n            data: {\n              testKeyword,\n              oppositeTestKeyword\n            },\n            fix: buildFixer(funcNode, nodeName, testKeyword)\n          });\n        }\n\n        if ((0, _utils.isTestCaseCall)(node) && describeNestingLevel > 0 && !nodeName.includes(testKeywordWithinDescribe)) {\n          const oppositeTestKeyword = getOppositeTestKeyword(testKeywordWithinDescribe);\n          context.report({\n            messageId: 'consistentMethodWithinDescribe',\n            node: node.callee,\n            data: {\n              testKeywordWithinDescribe,\n              oppositeTestKeyword\n            },\n            fix: buildFixer(funcNode, nodeName, testKeywordWithinDescribe)\n          });\n        }\n      },\n\n      'CallExpression:exit'(node) {\n        if ((0, _utils.isDescribeCall)(node)) {\n          describeNestingLevel--;\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;\n\nfunction getPreferredNodeName(nodeName, preferredTestKeyword) {\n  if (nodeName === _utils.TestCaseName.fit) {\n    return 'test.only';\n  }\n\n  return nodeName.startsWith('f') || nodeName.startsWith('x') ? nodeName.charAt(0) + preferredTestKeyword : preferredTestKeyword;\n}\n\nfunction getOppositeTestKeyword(test) {\n  if (test === _utils.TestCaseName.test) {\n    return _utils.TestCaseName.it;\n  }\n\n  return _utils.TestCaseName.test;\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,uCAAD,CAAhC;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,MAAME,UAAU,GAAG,CAACC,MAAD,EAASC,QAAT,EAAmBC,oBAAnB,KAA4CC,KAAK,IAAI,CAACA,KAAK,CAACC,WAAN,CAAkBJ,MAAM,CAACK,IAAP,KAAgBT,kBAAkB,CAACU,cAAnB,CAAkCC,gBAAlD,GAAqEP,MAAM,CAACQ,MAA5E,GAAqFR,MAAvG,EAA+GS,oBAAoB,CAACR,QAAD,EAAWC,oBAAX,CAAnI,CAAD,CAAxE;;AAEA,IAAIQ,QAAQ,GAAG,CAAC,GAAGZ,MAAM,CAACa,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,0CAFT;MAGJC,WAAW,EAAE;IAHT,CADF;IAMJC,OAAO,EAAE,MANL;IAOJC,QAAQ,EAAE;MACRC,gBAAgB,EAAE,yEADV;MAERC,8BAA8B,EAAE;IAFxB,CAPN;IAWJC,MAAM,EAAE,CAAC;MACPlB,IAAI,EAAE,QADC;MAEPmB,UAAU,EAAE;QACVC,EAAE,EAAE;UACFC,IAAI,EAAE,CAAC5B,MAAM,CAAC6B,YAAP,CAAoBC,EAArB,EAAyB9B,MAAM,CAAC6B,YAAP,CAAoBE,IAA7C;QADJ,CADM;QAIVC,cAAc,EAAE;UACdJ,IAAI,EAAE,CAAC5B,MAAM,CAAC6B,YAAP,CAAoBC,EAArB,EAAyB9B,MAAM,CAAC6B,YAAP,CAAoBE,IAA7C;QADQ;MAJN,CAFL;MAUPE,oBAAoB,EAAE;IAVf,CAAD,CAXJ;IAuBJ1B,IAAI,EAAE;EAvBF,CAF8B;EA2BpC2B,cAAc,EAAE,CAAC;IACfP,EAAE,EAAE3B,MAAM,CAAC6B,YAAP,CAAoBE,IADT;IAEfC,cAAc,EAAEhC,MAAM,CAAC6B,YAAP,CAAoBC;EAFrB,CAAD,CA3BoB;;EAgCpCK,MAAM,CAACC,OAAD,EAAU;IACd,MAAMC,SAAS,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,EAAxC;IACA,MAAMC,WAAW,GAAGF,SAAS,CAACV,EAAV,IAAgB3B,MAAM,CAAC6B,YAAP,CAAoBE,IAAxD;IACA,MAAMS,yBAAyB,GAAGH,SAAS,CAACL,cAAV,IAA4BK,SAAS,CAACV,EAAtC,IAA4C3B,MAAM,CAAC6B,YAAP,CAAoBC,EAAlG;IACA,IAAIW,oBAAoB,GAAG,CAA3B;IACA,OAAO;MACLC,cAAc,CAACC,IAAD,EAAO;QACnB,MAAMxC,QAAQ,GAAG,CAAC,GAAGH,MAAM,CAAC4C,WAAX,EAAwBD,IAAI,CAACzC,MAA7B,CAAjB;;QAEA,IAAI,CAACC,QAAL,EAAe;UACb;QACD;;QAED,IAAI,CAAC,GAAGH,MAAM,CAAC6C,cAAX,EAA2BF,IAA3B,CAAJ,EAAsC;UACpCF,oBAAoB;QACrB;;QAED,MAAMK,QAAQ,GAAGH,IAAI,CAACzC,MAAL,CAAYK,IAAZ,KAAqBT,kBAAkB,CAACU,cAAnB,CAAkCuC,wBAAvD,GAAkFJ,IAAI,CAACzC,MAAL,CAAY8C,GAA9F,GAAoGL,IAAI,CAACzC,MAAL,CAAYK,IAAZ,KAAqBT,kBAAkB,CAACU,cAAnB,CAAkCkC,cAAvD,GAAwEC,IAAI,CAACzC,MAAL,CAAYA,MAApF,GAA6FyC,IAAI,CAACzC,MAAvN;;QAEA,IAAI,CAAC,GAAGF,MAAM,CAACiD,cAAX,EAA2BN,IAA3B,KAAoCF,oBAAoB,KAAK,CAA7D,IAAkE,CAACtC,QAAQ,CAAC+C,QAAT,CAAkBX,WAAlB,CAAvE,EAAuG;UACrG,MAAMY,mBAAmB,GAAGC,sBAAsB,CAACb,WAAD,CAAlD;UACAH,OAAO,CAACiB,MAAR,CAAe;YACbC,SAAS,EAAE,kBADE;YAEbX,IAAI,EAAEA,IAAI,CAACzC,MAFE;YAGbqD,IAAI,EAAE;cACJhB,WADI;cAEJY;YAFI,CAHO;YAObK,GAAG,EAAEvD,UAAU,CAAC6C,QAAD,EAAW3C,QAAX,EAAqBoC,WAArB;UAPF,CAAf;QASD;;QAED,IAAI,CAAC,GAAGvC,MAAM,CAACiD,cAAX,EAA2BN,IAA3B,KAAoCF,oBAAoB,GAAG,CAA3D,IAAgE,CAACtC,QAAQ,CAAC+C,QAAT,CAAkBV,yBAAlB,CAArE,EAAmH;UACjH,MAAMW,mBAAmB,GAAGC,sBAAsB,CAACZ,yBAAD,CAAlD;UACAJ,OAAO,CAACiB,MAAR,CAAe;YACbC,SAAS,EAAE,gCADE;YAEbX,IAAI,EAAEA,IAAI,CAACzC,MAFE;YAGbqD,IAAI,EAAE;cACJf,yBADI;cAEJW;YAFI,CAHO;YAObK,GAAG,EAAEvD,UAAU,CAAC6C,QAAD,EAAW3C,QAAX,EAAqBqC,yBAArB;UAPF,CAAf;QASD;MACF,CAvCI;;MAyCL,sBAAsBG,IAAtB,EAA4B;QAC1B,IAAI,CAAC,GAAG3C,MAAM,CAAC6C,cAAX,EAA2BF,IAA3B,CAAJ,EAAsC;UACpCF,oBAAoB;QACrB;MACF;;IA7CI,CAAP;EAgDD;;AArFmC,CAAvB,CAAf;;AAyFA9C,OAAO,CAACE,OAAR,GAAkBe,QAAlB;;AAEA,SAASD,oBAAT,CAA8BR,QAA9B,EAAwCC,oBAAxC,EAA8D;EAC5D,IAAID,QAAQ,KAAKH,MAAM,CAAC6B,YAAP,CAAoB4B,GAArC,EAA0C;IACxC,OAAO,WAAP;EACD;;EAED,OAAOtD,QAAQ,CAACuD,UAAT,CAAoB,GAApB,KAA4BvD,QAAQ,CAACuD,UAAT,CAAoB,GAApB,CAA5B,GAAuDvD,QAAQ,CAACwD,MAAT,CAAgB,CAAhB,IAAqBvD,oBAA5E,GAAmGA,oBAA1G;AACD;;AAED,SAASgD,sBAAT,CAAgCrB,IAAhC,EAAsC;EACpC,IAAIA,IAAI,KAAK/B,MAAM,CAAC6B,YAAP,CAAoBE,IAAjC,EAAuC;IACrC,OAAO/B,MAAM,CAAC6B,YAAP,CAAoBC,EAA3B;EACD;;EAED,OAAO9B,MAAM,CAAC6B,YAAP,CAAoBE,IAA3B;AACD"},"metadata":{},"sourceType":"script"}