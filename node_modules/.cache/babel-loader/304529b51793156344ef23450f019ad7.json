{"ast":null,"code":"// This is a patch for mozilla/source-map#349 -\n// internally, it uses the existence of the `fetch` global to toggle browser behaviours.\n// That check, however, will break when `fetch` polyfills are used for SSR setups.\n// We \"reset\" the polyfill here to ensure it won't interfere with source-map generation.\nconst originalFetch = global.fetch;\ndelete global.fetch;\n\nconst {\n  getOptions\n} = require('loader-utils');\n\nconst {\n  validate: validateOptions\n} = require('schema-utils');\n\nconst {\n  SourceMapConsumer,\n  SourceNode\n} = require('source-map');\n\nconst {\n  getIdentitySourceMap,\n  getModuleSystem,\n  getRefreshModuleRuntime,\n  normalizeOptions\n} = require('./utils');\n\nconst schema = require('./options.json');\n\nconst RefreshRuntimePath = require.resolve('react-refresh').replace(/\\\\/g, '/').replace(/'/g, \"\\\\'\");\n/**\n * A simple Webpack loader to inject react-refresh HMR code into modules.\n *\n * [Reference for Loader API](https://webpack.js.org/api/loaders/)\n * @this {import('webpack').LoaderContext<import('./types').ReactRefreshLoaderOptions>}\n * @param {string} source The original module source code.\n * @param {import('source-map').RawSourceMap} [inputSourceMap] The source map of the module.\n * @param {*} [meta] The loader metadata passed in.\n * @returns {void}\n */\n\n\nfunction ReactRefreshLoader(source, inputSourceMap, meta) {\n  let options = getOptions(this);\n  validateOptions(schema, options, {\n    baseDataPath: 'options',\n    name: 'React Refresh Loader'\n  });\n  options = normalizeOptions(options);\n  const callback = this.async();\n\n  const {\n    ModuleFilenameHelpers,\n    Template\n  } = this._compiler.webpack || require('webpack');\n\n  const RefreshSetupRuntimes = {\n    cjs: Template.asString(`__webpack_require__.$Refresh$.runtime = require('${RefreshRuntimePath}');`),\n    esm: Template.asString([`import * as __react_refresh_runtime__ from '${RefreshRuntimePath}';`, `__webpack_require__.$Refresh$.runtime = __react_refresh_runtime__;`])\n  };\n  /**\n   * @this {import('webpack').loader.LoaderContext}\n   * @param {string} source\n   * @param {import('source-map').RawSourceMap} [inputSourceMap]\n   * @returns {Promise<[string, import('source-map').RawSourceMap]>}\n   */\n\n  async function _loader(source, inputSourceMap) {\n    const moduleSystem = await getModuleSystem.call(this, ModuleFilenameHelpers, options);\n    const RefreshSetupRuntime = RefreshSetupRuntimes[moduleSystem];\n    const RefreshModuleRuntime = getRefreshModuleRuntime(Template, {\n      const: options.const,\n      moduleSystem\n    });\n\n    if (this.sourceMap) {\n      let originalSourceMap = inputSourceMap;\n\n      if (!originalSourceMap) {\n        originalSourceMap = getIdentitySourceMap(source, this.resourcePath);\n      }\n\n      return SourceMapConsumer.with(originalSourceMap, undefined, consumer => {\n        const node = SourceNode.fromStringWithSourceMap(source, consumer);\n        node.prepend([RefreshSetupRuntime, '\\n\\n']);\n        node.add(['\\n\\n', RefreshModuleRuntime]);\n        const {\n          code,\n          map\n        } = node.toStringWithSourceMap();\n        return [code, map.toJSON()];\n      });\n    } else {\n      return [[RefreshSetupRuntime, source, RefreshModuleRuntime].join('\\n\\n'), inputSourceMap];\n    }\n  }\n\n  _loader.call(this, source, inputSourceMap).then(_ref => {\n    let [code, map] = _ref;\n    callback(null, code, map, meta);\n  }, error => {\n    callback(error);\n  });\n}\n\nmodule.exports = ReactRefreshLoader; // Restore the original value of the `fetch` global, if it exists\n\nif (originalFetch) {\n  global.fetch = originalFetch;\n}","map":{"version":3,"names":["originalFetch","global","fetch","getOptions","require","validate","validateOptions","SourceMapConsumer","SourceNode","getIdentitySourceMap","getModuleSystem","getRefreshModuleRuntime","normalizeOptions","schema","RefreshRuntimePath","resolve","replace","ReactRefreshLoader","source","inputSourceMap","meta","options","baseDataPath","name","callback","async","ModuleFilenameHelpers","Template","_compiler","webpack","RefreshSetupRuntimes","cjs","asString","esm","_loader","moduleSystem","call","RefreshSetupRuntime","RefreshModuleRuntime","const","sourceMap","originalSourceMap","resourcePath","with","undefined","consumer","node","fromStringWithSourceMap","prepend","add","code","map","toStringWithSourceMap","toJSON","join","then","error","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/loader/index.js"],"sourcesContent":["// This is a patch for mozilla/source-map#349 -\n// internally, it uses the existence of the `fetch` global to toggle browser behaviours.\n// That check, however, will break when `fetch` polyfills are used for SSR setups.\n// We \"reset\" the polyfill here to ensure it won't interfere with source-map generation.\nconst originalFetch = global.fetch;\ndelete global.fetch;\n\nconst { getOptions } = require('loader-utils');\nconst { validate: validateOptions } = require('schema-utils');\nconst { SourceMapConsumer, SourceNode } = require('source-map');\nconst {\n  getIdentitySourceMap,\n  getModuleSystem,\n  getRefreshModuleRuntime,\n  normalizeOptions,\n} = require('./utils');\nconst schema = require('./options.json');\n\nconst RefreshRuntimePath = require\n  .resolve('react-refresh')\n  .replace(/\\\\/g, '/')\n  .replace(/'/g, \"\\\\'\");\n\n/**\n * A simple Webpack loader to inject react-refresh HMR code into modules.\n *\n * [Reference for Loader API](https://webpack.js.org/api/loaders/)\n * @this {import('webpack').LoaderContext<import('./types').ReactRefreshLoaderOptions>}\n * @param {string} source The original module source code.\n * @param {import('source-map').RawSourceMap} [inputSourceMap] The source map of the module.\n * @param {*} [meta] The loader metadata passed in.\n * @returns {void}\n */\nfunction ReactRefreshLoader(source, inputSourceMap, meta) {\n  let options = getOptions(this);\n  validateOptions(schema, options, {\n    baseDataPath: 'options',\n    name: 'React Refresh Loader',\n  });\n\n  options = normalizeOptions(options);\n\n  const callback = this.async();\n\n  const { ModuleFilenameHelpers, Template } = this._compiler.webpack || require('webpack');\n\n  const RefreshSetupRuntimes = {\n    cjs: Template.asString(\n      `__webpack_require__.$Refresh$.runtime = require('${RefreshRuntimePath}');`\n    ),\n    esm: Template.asString([\n      `import * as __react_refresh_runtime__ from '${RefreshRuntimePath}';`,\n      `__webpack_require__.$Refresh$.runtime = __react_refresh_runtime__;`,\n    ]),\n  };\n\n  /**\n   * @this {import('webpack').loader.LoaderContext}\n   * @param {string} source\n   * @param {import('source-map').RawSourceMap} [inputSourceMap]\n   * @returns {Promise<[string, import('source-map').RawSourceMap]>}\n   */\n  async function _loader(source, inputSourceMap) {\n    const moduleSystem = await getModuleSystem.call(this, ModuleFilenameHelpers, options);\n\n    const RefreshSetupRuntime = RefreshSetupRuntimes[moduleSystem];\n    const RefreshModuleRuntime = getRefreshModuleRuntime(Template, {\n      const: options.const,\n      moduleSystem,\n    });\n\n    if (this.sourceMap) {\n      let originalSourceMap = inputSourceMap;\n      if (!originalSourceMap) {\n        originalSourceMap = getIdentitySourceMap(source, this.resourcePath);\n      }\n\n      return SourceMapConsumer.with(originalSourceMap, undefined, (consumer) => {\n        const node = SourceNode.fromStringWithSourceMap(source, consumer);\n\n        node.prepend([RefreshSetupRuntime, '\\n\\n']);\n        node.add(['\\n\\n', RefreshModuleRuntime]);\n\n        const { code, map } = node.toStringWithSourceMap();\n        return [code, map.toJSON()];\n      });\n    } else {\n      return [[RefreshSetupRuntime, source, RefreshModuleRuntime].join('\\n\\n'), inputSourceMap];\n    }\n  }\n\n  _loader.call(this, source, inputSourceMap).then(\n    ([code, map]) => {\n      callback(null, code, map, meta);\n    },\n    (error) => {\n      callback(error);\n    }\n  );\n}\n\nmodule.exports = ReactRefreshLoader;\n\n// Restore the original value of the `fetch` global, if it exists\nif (originalFetch) {\n  global.fetch = originalFetch;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,aAAa,GAAGC,MAAM,CAACC,KAA7B;AACA,OAAOD,MAAM,CAACC,KAAd;;AAEA,MAAM;EAAEC;AAAF,IAAiBC,OAAO,CAAC,cAAD,CAA9B;;AACA,MAAM;EAAEC,QAAQ,EAAEC;AAAZ,IAAgCF,OAAO,CAAC,cAAD,CAA7C;;AACA,MAAM;EAAEG,iBAAF;EAAqBC;AAArB,IAAoCJ,OAAO,CAAC,YAAD,CAAjD;;AACA,MAAM;EACJK,oBADI;EAEJC,eAFI;EAGJC,uBAHI;EAIJC;AAJI,IAKFR,OAAO,CAAC,SAAD,CALX;;AAMA,MAAMS,MAAM,GAAGT,OAAO,CAAC,gBAAD,CAAtB;;AAEA,MAAMU,kBAAkB,GAAGV,OAAO,CAC/BW,OADwB,CAChB,eADgB,EAExBC,OAFwB,CAEhB,KAFgB,EAET,GAFS,EAGxBA,OAHwB,CAGhB,IAHgB,EAGV,KAHU,CAA3B;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,cAApC,EAAoDC,IAApD,EAA0D;EACxD,IAAIC,OAAO,GAAGlB,UAAU,CAAC,IAAD,CAAxB;EACAG,eAAe,CAACO,MAAD,EAASQ,OAAT,EAAkB;IAC/BC,YAAY,EAAE,SADiB;IAE/BC,IAAI,EAAE;EAFyB,CAAlB,CAAf;EAKAF,OAAO,GAAGT,gBAAgB,CAACS,OAAD,CAA1B;EAEA,MAAMG,QAAQ,GAAG,KAAKC,KAAL,EAAjB;;EAEA,MAAM;IAAEC,qBAAF;IAAyBC;EAAzB,IAAsC,KAAKC,SAAL,CAAeC,OAAf,IAA0BzB,OAAO,CAAC,SAAD,CAA7E;;EAEA,MAAM0B,oBAAoB,GAAG;IAC3BC,GAAG,EAAEJ,QAAQ,CAACK,QAAT,CACF,oDAAmDlB,kBAAmB,KADpE,CADsB;IAI3BmB,GAAG,EAAEN,QAAQ,CAACK,QAAT,CAAkB,CACpB,+CAA8ClB,kBAAmB,IAD7C,EAEpB,oEAFoB,CAAlB;EAJsB,CAA7B;EAUA;AACF;AACA;AACA;AACA;AACA;;EACE,eAAeoB,OAAf,CAAuBhB,MAAvB,EAA+BC,cAA/B,EAA+C;IAC7C,MAAMgB,YAAY,GAAG,MAAMzB,eAAe,CAAC0B,IAAhB,CAAqB,IAArB,EAA2BV,qBAA3B,EAAkDL,OAAlD,CAA3B;IAEA,MAAMgB,mBAAmB,GAAGP,oBAAoB,CAACK,YAAD,CAAhD;IACA,MAAMG,oBAAoB,GAAG3B,uBAAuB,CAACgB,QAAD,EAAW;MAC7DY,KAAK,EAAElB,OAAO,CAACkB,KAD8C;MAE7DJ;IAF6D,CAAX,CAApD;;IAKA,IAAI,KAAKK,SAAT,EAAoB;MAClB,IAAIC,iBAAiB,GAAGtB,cAAxB;;MACA,IAAI,CAACsB,iBAAL,EAAwB;QACtBA,iBAAiB,GAAGhC,oBAAoB,CAACS,MAAD,EAAS,KAAKwB,YAAd,CAAxC;MACD;;MAED,OAAOnC,iBAAiB,CAACoC,IAAlB,CAAuBF,iBAAvB,EAA0CG,SAA1C,EAAsDC,QAAD,IAAc;QACxE,MAAMC,IAAI,GAAGtC,UAAU,CAACuC,uBAAX,CAAmC7B,MAAnC,EAA2C2B,QAA3C,CAAb;QAEAC,IAAI,CAACE,OAAL,CAAa,CAACX,mBAAD,EAAsB,MAAtB,CAAb;QACAS,IAAI,CAACG,GAAL,CAAS,CAAC,MAAD,EAASX,oBAAT,CAAT;QAEA,MAAM;UAAEY,IAAF;UAAQC;QAAR,IAAgBL,IAAI,CAACM,qBAAL,EAAtB;QACA,OAAO,CAACF,IAAD,EAAOC,GAAG,CAACE,MAAJ,EAAP,CAAP;MACD,CARM,CAAP;IASD,CAfD,MAeO;MACL,OAAO,CAAC,CAAChB,mBAAD,EAAsBnB,MAAtB,EAA8BoB,oBAA9B,EAAoDgB,IAApD,CAAyD,MAAzD,CAAD,EAAmEnC,cAAnE,CAAP;IACD;EACF;;EAEDe,OAAO,CAACE,IAAR,CAAa,IAAb,EAAmBlB,MAAnB,EAA2BC,cAA3B,EAA2CoC,IAA3C,CACE,QAAiB;IAAA,IAAhB,CAACL,IAAD,EAAOC,GAAP,CAAgB;IACf3B,QAAQ,CAAC,IAAD,EAAO0B,IAAP,EAAaC,GAAb,EAAkB/B,IAAlB,CAAR;EACD,CAHH,EAIGoC,KAAD,IAAW;IACThC,QAAQ,CAACgC,KAAD,CAAR;EACD,CANH;AAQD;;AAEDC,MAAM,CAACC,OAAP,GAAiBzC,kBAAjB,C,CAEA;;AACA,IAAIjB,aAAJ,EAAmB;EACjBC,MAAM,CAACC,KAAP,GAAeF,aAAf;AACD"},"metadata":{},"sourceType":"script"}