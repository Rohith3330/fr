{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst code_1 = require(\"../code\");\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst error = {\n  message: _ref => {\n    let {\n      schemaCode\n    } = _ref;\n    return (0, codegen_1.str)`must match pattern \"${schemaCode}\"`;\n  },\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)`{pattern: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      data,\n      $data,\n      schema,\n      schemaCode,\n      it\n    } = cxt; // TODO regexp should be wrapped in try/catchs\n\n    const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n    const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);\n    cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAEA;;AACA;;AAIA,MAAMA,KAAK,GAA2B;EACpCC,OAAO,EAAE;IAAA,IAAC;MAACC;IAAD,CAAD;IAAA,OAAkB,kBAAG,uBAAuBA,UAAU,GAAtD;EAAA,CAD2B;EAEpCC,MAAM,EAAE;IAAA,IAAC;MAACD;IAAD,CAAD;IAAA,OAAkB,gBAAC,aAAaA,UAAU,GAA1C;EAAA;AAF4B,CAAtC;AAKA,MAAME,GAAG,GAA0B;EACjCC,OAAO,EAAE,SADwB;EAEjCC,IAAI,EAAE,QAF2B;EAGjCC,UAAU,EAAE,QAHqB;EAIjCC,KAAK,EAAE,IAJ0B;EAKjCR,KALiC;;EAMjCS,IAAI,CAACC,GAAD,EAAgB;IAClB,MAAM;MAACC,IAAD;MAAOH,KAAP;MAAcI,MAAd;MAAsBV,UAAtB;MAAkCW;IAAlC,IAAwCH,GAA9C,CADkB,CAElB;;IACA,MAAMI,CAAC,GAAGD,EAAE,CAACE,IAAH,CAAQC,aAAR,GAAwB,GAAxB,GAA8B,EAAxC;IACA,MAAMC,MAAM,GAAGT,KAAK,GAAG,gBAAC,eAAeN,UAAU,KAAKY,CAAC,IAAnC,GAA0C,uBAAWJ,GAAX,EAAgBE,MAAhB,CAA9D;IACAF,GAAG,CAACQ,SAAJ,CAAc,gBAAC,IAAID,MAAM,SAASN,IAAI,GAAtC;EACD;;AAZgC,CAAnC;AAeAQ,kBAAef,GAAf","names":["error","message","schemaCode","params","def","keyword","type","schemaType","$data","code","cxt","data","schema","it","u","opts","unicodeRegExp","regExp","fail$data","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\mini-css-extract-plugin\\node_modules\\ajv\\lib\\vocabularies\\validation\\pattern.ts"],"sourcesContent":["import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {usePattern} from \"../code\"\nimport {_, str} from \"../../compile/codegen\"\n\nexport type PatternError = ErrorObject<\"pattern\", {pattern: string}, string | {$data: string}>\n\nconst error: KeywordErrorDefinition = {\n  message: ({schemaCode}) => str`must match pattern \"${schemaCode}\"`,\n  params: ({schemaCode}) => _`{pattern: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {data, $data, schema, schemaCode, it} = cxt\n    // TODO regexp should be wrapped in try/catchs\n    const u = it.opts.unicodeRegExp ? \"u\" : \"\"\n    const regExp = $data ? _`(new RegExp(${schemaCode}, ${u}))` : usePattern(cxt, schema)\n    cxt.fail$data(_`!${regExp}.test(${data})`)\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}