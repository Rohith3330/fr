{"ast":null,"code":"'use strict';\n\nfunction _jsdom() {\n  const data = require('jsdom');\n\n  _jsdom = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fakeTimers() {\n  const data = require('@jest/fake-timers');\n\n  _fakeTimers = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMock() {\n  const data = require('jest-mock');\n\n  _jestMock = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass JSDOMEnvironment {\n  constructor(config, options) {\n    _defineProperty(this, 'dom', void 0);\n\n    _defineProperty(this, 'fakeTimers', void 0);\n\n    _defineProperty(this, 'fakeTimersModern', void 0);\n\n    _defineProperty(this, 'global', void 0);\n\n    _defineProperty(this, 'errorEventListener', void 0);\n\n    _defineProperty(this, 'moduleMocker', void 0);\n\n    this.dom = new (_jsdom().JSDOM)(typeof config.testEnvironmentOptions.html === 'string' ? config.testEnvironmentOptions.html : '<!DOCTYPE html>', {\n      pretendToBeVisual: true,\n      resources: typeof config.testEnvironmentOptions.userAgent === 'string' ? new (_jsdom().ResourceLoader)({\n        userAgent: config.testEnvironmentOptions.userAgent\n      }) : undefined,\n      runScripts: 'dangerously',\n      url: config.testURL,\n      virtualConsole: new (_jsdom().VirtualConsole)().sendTo((options === null || options === void 0 ? void 0 : options.console) || console),\n      ...config.testEnvironmentOptions\n    });\n    const global = this.global = this.dom.window.document.defaultView;\n\n    if (!global) {\n      throw new Error('JSDOM did not return a Window object');\n    } // for \"universal\" code (code should use `globalThis`)\n\n\n    global.global = global; // Node's error-message stack size is limited at 10, but it's pretty useful\n    // to see more than that when a test fails.\n\n    this.global.Error.stackTraceLimit = 100;\n    (0, _jestUtil().installCommonGlobals)(global, config.globals); // TODO: remove this ASAP, but it currently causes tests to run really slow\n\n    global.Buffer = Buffer; // Report uncaught errors.\n\n    this.errorEventListener = event => {\n      if (userErrorListenerCount === 0 && event.error) {\n        process.emit('uncaughtException', event.error);\n      }\n    };\n\n    global.addEventListener('error', this.errorEventListener); // However, don't report them as uncaught if the user listens to 'error' event.\n    // In that case, we assume the might have custom error handling logic.\n\n    const originalAddListener = global.addEventListener;\n    const originalRemoveListener = global.removeEventListener;\n    let userErrorListenerCount = 0;\n\n    global.addEventListener = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (args[0] === 'error') {\n        userErrorListenerCount++;\n      }\n\n      return originalAddListener.apply(this, args);\n    };\n\n    global.removeEventListener = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      if (args[0] === 'error') {\n        userErrorListenerCount--;\n      }\n\n      return originalRemoveListener.apply(this, args);\n    };\n\n    this.moduleMocker = new (_jestMock().ModuleMocker)(global);\n    const timerConfig = {\n      idToRef: id => id,\n      refToId: ref => ref\n    };\n    this.fakeTimers = new (_fakeTimers().LegacyFakeTimers)({\n      config,\n      global: global,\n      moduleMocker: this.moduleMocker,\n      timerConfig\n    });\n    this.fakeTimersModern = new (_fakeTimers().ModernFakeTimers)({\n      config,\n      global: global\n    });\n  }\n\n  async setup() {}\n\n  async teardown() {\n    if (this.fakeTimers) {\n      this.fakeTimers.dispose();\n    }\n\n    if (this.fakeTimersModern) {\n      this.fakeTimersModern.dispose();\n    }\n\n    if (this.global) {\n      if (this.errorEventListener) {\n        this.global.removeEventListener('error', this.errorEventListener);\n      }\n\n      this.global.close(); // Dispose \"document\" to prevent \"load\" event from triggering.\n      // Note that this.global.close() will trigger the CustomElement::disconnectedCallback\n      // Do not reset the document before CustomElement disconnectedCallback function has finished running,\n      // document should be accessible within disconnectedCallback.\n\n      Object.defineProperty(this.global, 'document', {\n        value: null\n      });\n    }\n\n    this.errorEventListener = null; // @ts-expect-error\n\n    this.global = null;\n    this.dom = null;\n    this.fakeTimers = null;\n    this.fakeTimersModern = null;\n  }\n\n  getVmContext() {\n    if (this.dom) {\n      return this.dom.getInternalVMContext();\n    }\n\n    return null;\n  }\n\n}\n\nmodule.exports = JSDOMEnvironment;","map":{"version":3,"names":["_jsdom","data","require","_fakeTimers","_jestMock","_jestUtil","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","JSDOMEnvironment","constructor","config","options","dom","JSDOM","testEnvironmentOptions","html","pretendToBeVisual","resources","userAgent","ResourceLoader","undefined","runScripts","url","testURL","virtualConsole","VirtualConsole","sendTo","console","global","window","document","defaultView","Error","stackTraceLimit","installCommonGlobals","globals","Buffer","errorEventListener","event","userErrorListenerCount","error","process","emit","addEventListener","originalAddListener","originalRemoveListener","removeEventListener","args","apply","moduleMocker","ModuleMocker","timerConfig","idToRef","id","refToId","ref","fakeTimers","LegacyFakeTimers","fakeTimersModern","ModernFakeTimers","setup","teardown","dispose","close","getVmContext","getInternalVMContext","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jest-environment-jsdom/build/index.js"],"sourcesContent":["'use strict';\n\nfunction _jsdom() {\n  const data = require('jsdom');\n\n  _jsdom = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fakeTimers() {\n  const data = require('@jest/fake-timers');\n\n  _fakeTimers = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMock() {\n  const data = require('jest-mock');\n\n  _jestMock = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass JSDOMEnvironment {\n  constructor(config, options) {\n    _defineProperty(this, 'dom', void 0);\n\n    _defineProperty(this, 'fakeTimers', void 0);\n\n    _defineProperty(this, 'fakeTimersModern', void 0);\n\n    _defineProperty(this, 'global', void 0);\n\n    _defineProperty(this, 'errorEventListener', void 0);\n\n    _defineProperty(this, 'moduleMocker', void 0);\n\n    this.dom = new (_jsdom().JSDOM)(\n      typeof config.testEnvironmentOptions.html === 'string'\n        ? config.testEnvironmentOptions.html\n        : '<!DOCTYPE html>',\n      {\n        pretendToBeVisual: true,\n        resources:\n          typeof config.testEnvironmentOptions.userAgent === 'string'\n            ? new (_jsdom().ResourceLoader)({\n                userAgent: config.testEnvironmentOptions.userAgent\n              })\n            : undefined,\n        runScripts: 'dangerously',\n        url: config.testURL,\n        virtualConsole: new (_jsdom().VirtualConsole)().sendTo(\n          (options === null || options === void 0 ? void 0 : options.console) ||\n            console\n        ),\n        ...config.testEnvironmentOptions\n      }\n    );\n    const global = (this.global = this.dom.window.document.defaultView);\n\n    if (!global) {\n      throw new Error('JSDOM did not return a Window object');\n    } // for \"universal\" code (code should use `globalThis`)\n\n    global.global = global; // Node's error-message stack size is limited at 10, but it's pretty useful\n    // to see more than that when a test fails.\n\n    this.global.Error.stackTraceLimit = 100;\n    (0, _jestUtil().installCommonGlobals)(global, config.globals); // TODO: remove this ASAP, but it currently causes tests to run really slow\n\n    global.Buffer = Buffer; // Report uncaught errors.\n\n    this.errorEventListener = event => {\n      if (userErrorListenerCount === 0 && event.error) {\n        process.emit('uncaughtException', event.error);\n      }\n    };\n\n    global.addEventListener('error', this.errorEventListener); // However, don't report them as uncaught if the user listens to 'error' event.\n    // In that case, we assume the might have custom error handling logic.\n\n    const originalAddListener = global.addEventListener;\n    const originalRemoveListener = global.removeEventListener;\n    let userErrorListenerCount = 0;\n\n    global.addEventListener = function (...args) {\n      if (args[0] === 'error') {\n        userErrorListenerCount++;\n      }\n\n      return originalAddListener.apply(this, args);\n    };\n\n    global.removeEventListener = function (...args) {\n      if (args[0] === 'error') {\n        userErrorListenerCount--;\n      }\n\n      return originalRemoveListener.apply(this, args);\n    };\n\n    this.moduleMocker = new (_jestMock().ModuleMocker)(global);\n    const timerConfig = {\n      idToRef: id => id,\n      refToId: ref => ref\n    };\n    this.fakeTimers = new (_fakeTimers().LegacyFakeTimers)({\n      config,\n      global: global,\n      moduleMocker: this.moduleMocker,\n      timerConfig\n    });\n    this.fakeTimersModern = new (_fakeTimers().ModernFakeTimers)({\n      config,\n      global: global\n    });\n  }\n\n  async setup() {}\n\n  async teardown() {\n    if (this.fakeTimers) {\n      this.fakeTimers.dispose();\n    }\n\n    if (this.fakeTimersModern) {\n      this.fakeTimersModern.dispose();\n    }\n\n    if (this.global) {\n      if (this.errorEventListener) {\n        this.global.removeEventListener('error', this.errorEventListener);\n      }\n\n      this.global.close(); // Dispose \"document\" to prevent \"load\" event from triggering.\n      // Note that this.global.close() will trigger the CustomElement::disconnectedCallback\n      // Do not reset the document before CustomElement disconnectedCallback function has finished running,\n      // document should be accessible within disconnectedCallback.\n\n      Object.defineProperty(this.global, 'document', {\n        value: null\n      });\n    }\n\n    this.errorEventListener = null; // @ts-expect-error\n\n    this.global = null;\n    this.dom = null;\n    this.fakeTimers = null;\n    this.fakeTimersModern = null;\n  }\n\n  getVmContext() {\n    if (this.dom) {\n      return this.dom.getInternalVMContext();\n    }\n\n    return null;\n  }\n}\n\nmodule.exports = JSDOMEnvironment;\n"],"mappings":"AAAA;;AAEA,SAASA,MAAT,GAAkB;EAChB,MAAMC,IAAI,GAAGC,OAAO,CAAC,OAAD,CAApB;;EAEAF,MAAM,GAAG,YAAY;IACnB,OAAOC,IAAP;EACD,CAFD;;EAIA,OAAOA,IAAP;AACD;;AAED,SAASE,WAAT,GAAuB;EACrB,MAAMF,IAAI,GAAGC,OAAO,CAAC,mBAAD,CAApB;;EAEAC,WAAW,GAAG,YAAY;IACxB,OAAOF,IAAP;EACD,CAFD;;EAIA,OAAOA,IAAP;AACD;;AAED,SAASG,SAAT,GAAqB;EACnB,MAAMH,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB;;EAEAE,SAAS,GAAG,YAAY;IACtB,OAAOH,IAAP;EACD,CAFD;;EAIA,OAAOA,IAAP;AACD;;AAED,SAASI,SAAT,GAAqB;EACnB,MAAMJ,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB;;EAEAG,SAAS,GAAG,YAAY;IACtB,OAAOJ,IAAP;EACD,CAFD;;EAIA,OAAOA,IAAP;AACD;;AAED,SAASK,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0C;EACxC,IAAID,GAAG,IAAID,GAAX,EAAgB;IACdG,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2BC,GAA3B,EAAgC;MAC9BC,KAAK,EAAEA,KADuB;MAE9BG,UAAU,EAAE,IAFkB;MAG9BC,YAAY,EAAE,IAHgB;MAI9BC,QAAQ,EAAE;IAJoB,CAAhC;EAMD,CAPD,MAOO;IACLP,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;EACD;;EACD,OAAOF,GAAP;AACD;;AAED,MAAMQ,gBAAN,CAAuB;EACrBC,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkB;IAC3BZ,eAAe,CAAC,IAAD,EAAO,KAAP,EAAc,KAAK,CAAnB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,YAAP,EAAqB,KAAK,CAA1B,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,kBAAP,EAA2B,KAAK,CAAhC,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAK,CAAtB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,oBAAP,EAA6B,KAAK,CAAlC,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,cAAP,EAAuB,KAAK,CAA5B,CAAf;;IAEA,KAAKa,GAAL,GAAW,KAAKnB,MAAM,GAAGoB,KAAd,EACT,OAAOH,MAAM,CAACI,sBAAP,CAA8BC,IAArC,KAA8C,QAA9C,GACIL,MAAM,CAACI,sBAAP,CAA8BC,IADlC,GAEI,iBAHK,EAIT;MACEC,iBAAiB,EAAE,IADrB;MAEEC,SAAS,EACP,OAAOP,MAAM,CAACI,sBAAP,CAA8BI,SAArC,KAAmD,QAAnD,GACI,KAAKzB,MAAM,GAAG0B,cAAd,EAA8B;QAC5BD,SAAS,EAAER,MAAM,CAACI,sBAAP,CAA8BI;MADb,CAA9B,CADJ,GAIIE,SAPR;MAQEC,UAAU,EAAE,aARd;MASEC,GAAG,EAAEZ,MAAM,CAACa,OATd;MAUEC,cAAc,EAAE,KAAK/B,MAAM,GAAGgC,cAAd,IAAgCC,MAAhC,CACd,CAACf,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACgB,OAA3D,KACEA,OAFY,CAVlB;MAcE,GAAGjB,MAAM,CAACI;IAdZ,CAJS,CAAX;IAqBA,MAAMc,MAAM,GAAI,KAAKA,MAAL,GAAc,KAAKhB,GAAL,CAASiB,MAAT,CAAgBC,QAAhB,CAAyBC,WAAvD;;IAEA,IAAI,CAACH,MAAL,EAAa;MACX,MAAM,IAAII,KAAJ,CAAU,sCAAV,CAAN;IACD,CAtC0B,CAsCzB;;;IAEFJ,MAAM,CAACA,MAAP,GAAgBA,MAAhB,CAxC2B,CAwCH;IACxB;;IAEA,KAAKA,MAAL,CAAYI,KAAZ,CAAkBC,eAAlB,GAAoC,GAApC;IACA,CAAC,GAAGnC,SAAS,GAAGoC,oBAAhB,EAAsCN,MAAtC,EAA8ClB,MAAM,CAACyB,OAArD,EA5C2B,CA4CoC;;IAE/DP,MAAM,CAACQ,MAAP,GAAgBA,MAAhB,CA9C2B,CA8CH;;IAExB,KAAKC,kBAAL,GAA0BC,KAAK,IAAI;MACjC,IAAIC,sBAAsB,KAAK,CAA3B,IAAgCD,KAAK,CAACE,KAA1C,EAAiD;QAC/CC,OAAO,CAACC,IAAR,CAAa,mBAAb,EAAkCJ,KAAK,CAACE,KAAxC;MACD;IACF,CAJD;;IAMAZ,MAAM,CAACe,gBAAP,CAAwB,OAAxB,EAAiC,KAAKN,kBAAtC,EAtD2B,CAsDgC;IAC3D;;IAEA,MAAMO,mBAAmB,GAAGhB,MAAM,CAACe,gBAAnC;IACA,MAAME,sBAAsB,GAAGjB,MAAM,CAACkB,mBAAtC;IACA,IAAIP,sBAAsB,GAAG,CAA7B;;IAEAX,MAAM,CAACe,gBAAP,GAA0B,YAAmB;MAAA,kCAANI,IAAM;QAANA,IAAM;MAAA;;MAC3C,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAhB,EAAyB;QACvBR,sBAAsB;MACvB;;MAED,OAAOK,mBAAmB,CAACI,KAApB,CAA0B,IAA1B,EAAgCD,IAAhC,CAAP;IACD,CAND;;IAQAnB,MAAM,CAACkB,mBAAP,GAA6B,YAAmB;MAAA,mCAANC,IAAM;QAANA,IAAM;MAAA;;MAC9C,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAhB,EAAyB;QACvBR,sBAAsB;MACvB;;MAED,OAAOM,sBAAsB,CAACG,KAAvB,CAA6B,IAA7B,EAAmCD,IAAnC,CAAP;IACD,CAND;;IAQA,KAAKE,YAAL,GAAoB,KAAKpD,SAAS,GAAGqD,YAAjB,EAA+BtB,MAA/B,CAApB;IACA,MAAMuB,WAAW,GAAG;MAClBC,OAAO,EAAEC,EAAE,IAAIA,EADG;MAElBC,OAAO,EAAEC,GAAG,IAAIA;IAFE,CAApB;IAIA,KAAKC,UAAL,GAAkB,KAAK5D,WAAW,GAAG6D,gBAAnB,EAAqC;MACrD/C,MADqD;MAErDkB,MAAM,EAAEA,MAF6C;MAGrDqB,YAAY,EAAE,KAAKA,YAHkC;MAIrDE;IAJqD,CAArC,CAAlB;IAMA,KAAKO,gBAAL,GAAwB,KAAK9D,WAAW,GAAG+D,gBAAnB,EAAqC;MAC3DjD,MAD2D;MAE3DkB,MAAM,EAAEA;IAFmD,CAArC,CAAxB;EAID;;EAEU,MAALgC,KAAK,GAAG,CAAE;;EAEF,MAARC,QAAQ,GAAG;IACf,IAAI,KAAKL,UAAT,EAAqB;MACnB,KAAKA,UAAL,CAAgBM,OAAhB;IACD;;IAED,IAAI,KAAKJ,gBAAT,EAA2B;MACzB,KAAKA,gBAAL,CAAsBI,OAAtB;IACD;;IAED,IAAI,KAAKlC,MAAT,EAAiB;MACf,IAAI,KAAKS,kBAAT,EAA6B;QAC3B,KAAKT,MAAL,CAAYkB,mBAAZ,CAAgC,OAAhC,EAAyC,KAAKT,kBAA9C;MACD;;MAED,KAAKT,MAAL,CAAYmC,KAAZ,GALe,CAKM;MACrB;MACA;MACA;;MAEA5D,MAAM,CAACC,cAAP,CAAsB,KAAKwB,MAA3B,EAAmC,UAAnC,EAA+C;QAC7C1B,KAAK,EAAE;MADsC,CAA/C;IAGD;;IAED,KAAKmC,kBAAL,GAA0B,IAA1B,CAxBe,CAwBiB;;IAEhC,KAAKT,MAAL,GAAc,IAAd;IACA,KAAKhB,GAAL,GAAW,IAAX;IACA,KAAK4C,UAAL,GAAkB,IAAlB;IACA,KAAKE,gBAAL,GAAwB,IAAxB;EACD;;EAEDM,YAAY,GAAG;IACb,IAAI,KAAKpD,GAAT,EAAc;MACZ,OAAO,KAAKA,GAAL,CAASqD,oBAAT,EAAP;IACD;;IAED,OAAO,IAAP;EACD;;AAvIoB;;AA0IvBC,MAAM,CAACC,OAAP,GAAiB3D,gBAAjB"},"metadata":{},"sourceType":"script"}