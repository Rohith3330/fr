{"ast":null,"code":"var override = require('../utils/override');\n\nvar INTEGER_PATTERN = /^\\d+$/;\nvar ALL_UNITS = ['*', 'all'];\nvar DEFAULT_PRECISION = 'off'; // all precision changes are disabled\n\nvar DIRECTIVES_SEPARATOR = ','; // e.g. *=5,px=3\n\nvar DIRECTIVE_VALUE_SEPARATOR = '='; // e.g. *=5\n\nfunction roundingPrecisionFrom(source) {\n  return override(defaults(DEFAULT_PRECISION), buildPrecisionFrom(source));\n}\n\nfunction defaults(value) {\n  return {\n    ch: value,\n    cm: value,\n    em: value,\n    ex: value,\n    in: value,\n    mm: value,\n    pc: value,\n    pt: value,\n    px: value,\n    q: value,\n    rem: value,\n    vh: value,\n    vmax: value,\n    vmin: value,\n    vw: value,\n    '%': value\n  };\n}\n\nfunction buildPrecisionFrom(source) {\n  if (source === null || source === undefined) {\n    return {};\n  }\n\n  if (typeof source == 'boolean') {\n    return {};\n  }\n\n  if (typeof source == 'number' && source == -1) {\n    return defaults(DEFAULT_PRECISION);\n  }\n\n  if (typeof source == 'number') {\n    return defaults(source);\n  }\n\n  if (typeof source == 'string' && INTEGER_PATTERN.test(source)) {\n    return defaults(parseInt(source));\n  }\n\n  if (typeof source == 'string' && source == DEFAULT_PRECISION) {\n    return defaults(DEFAULT_PRECISION);\n  }\n\n  if (typeof source == 'object') {\n    return source;\n  }\n\n  return source.split(DIRECTIVES_SEPARATOR).reduce(function (accumulator, directive) {\n    var directiveParts = directive.split(DIRECTIVE_VALUE_SEPARATOR);\n    var name = directiveParts[0];\n    var value = parseInt(directiveParts[1]);\n\n    if (Number.isNaN(value) || value == -1) {\n      value = DEFAULT_PRECISION;\n    }\n\n    if (ALL_UNITS.indexOf(name) > -1) {\n      accumulator = override(accumulator, defaults(value));\n    } else {\n      accumulator[name] = value;\n    }\n\n    return accumulator;\n  }, {});\n}\n\nmodule.exports = {\n  DEFAULT: DEFAULT_PRECISION,\n  roundingPrecisionFrom: roundingPrecisionFrom\n};","map":{"version":3,"names":["override","require","INTEGER_PATTERN","ALL_UNITS","DEFAULT_PRECISION","DIRECTIVES_SEPARATOR","DIRECTIVE_VALUE_SEPARATOR","roundingPrecisionFrom","source","defaults","buildPrecisionFrom","value","ch","cm","em","ex","in","mm","pc","pt","px","q","rem","vh","vmax","vmin","vw","undefined","test","parseInt","split","reduce","accumulator","directive","directiveParts","name","Number","isNaN","indexOf","module","exports","DEFAULT"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/clean-css/lib/options/rounding-precision.js"],"sourcesContent":["var override = require('../utils/override');\n\nvar INTEGER_PATTERN = /^\\d+$/;\n\nvar ALL_UNITS = ['*', 'all'];\nvar DEFAULT_PRECISION = 'off'; // all precision changes are disabled\nvar DIRECTIVES_SEPARATOR = ','; // e.g. *=5,px=3\nvar DIRECTIVE_VALUE_SEPARATOR = '='; // e.g. *=5\n\nfunction roundingPrecisionFrom(source) {\n  return override(defaults(DEFAULT_PRECISION), buildPrecisionFrom(source));\n}\n\nfunction defaults(value) {\n  return {\n    ch: value,\n    cm: value,\n    em: value,\n    ex: value,\n    in: value,\n    mm: value,\n    pc: value,\n    pt: value,\n    px: value,\n    q: value,\n    rem: value,\n    vh: value,\n    vmax: value,\n    vmin: value,\n    vw: value,\n    '%': value\n  };\n}\n\nfunction buildPrecisionFrom(source) {\n  if (source === null || source === undefined) {\n    return {};\n  }\n\n  if (typeof source == 'boolean') {\n    return {};\n  }\n\n  if (typeof source == 'number' && source == -1) {\n    return defaults(DEFAULT_PRECISION);\n  }\n\n  if (typeof source == 'number') {\n    return defaults(source);\n  }\n\n  if (typeof source == 'string' && INTEGER_PATTERN.test(source)) {\n    return defaults(parseInt(source));\n  }\n\n  if (typeof source == 'string' && source == DEFAULT_PRECISION) {\n    return defaults(DEFAULT_PRECISION);\n  }\n\n  if (typeof source == 'object') {\n    return source;\n  }\n\n  return source\n    .split(DIRECTIVES_SEPARATOR)\n    .reduce(function(accumulator, directive) {\n      var directiveParts = directive.split(DIRECTIVE_VALUE_SEPARATOR);\n      var name = directiveParts[0];\n      var value = parseInt(directiveParts[1]);\n\n      if (Number.isNaN(value) || value == -1) {\n        value = DEFAULT_PRECISION;\n      }\n\n      if (ALL_UNITS.indexOf(name) > -1) {\n        accumulator = override(accumulator, defaults(value));\n      } else {\n        accumulator[name] = value;\n      }\n\n      return accumulator;\n    }, {});\n}\n\nmodule.exports = {\n  DEFAULT: DEFAULT_PRECISION,\n  roundingPrecisionFrom: roundingPrecisionFrom\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}