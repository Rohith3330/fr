{"ast":null,"code":"import expect from 'expect';\nimport getTabIndex from '../../../src/util/getTabIndex';\nimport IdentifierMock from '../../../__mocks__/IdentifierMock';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\ndescribe('getTabIndex', () => {\n  describe('tabIndex is defined', () => {\n    describe('as a number ', () => {\n      describe('zero', () => {\n        it('should return zero', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', 0))).toBe(0);\n        });\n      });\n      describe('positive integer', () => {\n        it('should return the integer', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', 1))).toBe(1);\n        });\n      });\n      describe('negative integer', () => {\n        it('should return the integer', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', -1))).toBe(-1);\n        });\n      });\n      describe('float', () => {\n        it('should return undefined', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', 9.1))).toBeUndefined();\n        });\n      });\n    });\n    describe('as a string', () => {\n      describe('empty', () => {\n        it('should return undefined', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', ''))).toBeUndefined();\n        });\n      });\n      describe('which converts to a number', () => {\n        it('should return an integer', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', '0'))).toBe(0);\n        });\n      });\n      describe('which is NaN', () => {\n        it('should return undefined', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', '0a'))).toBeUndefined();\n        });\n      });\n    });\n    describe('as a boolean', () => {\n      describe('true', () => {\n        it('should return undefined', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', true))).toBeUndefined();\n        });\n      });\n      describe('false', () => {\n        it('should return undefined', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', false))).toBeUndefined();\n        });\n      });\n    });\n    describe('as an expression', () => {\n      describe('function expression', () => {\n        it('should return the correct type', () => {\n          const attr = function mockFn() {\n            return 0;\n          };\n\n          expect(typeof getTabIndex(JSXAttributeMock('tabIndex', attr))).toEqual('function');\n        });\n      });\n      describe('variable expression', () => {\n        it('should return the Identifier name', () => {\n          const name = 'identName';\n          expect(getTabIndex(JSXAttributeMock('tabIndex', IdentifierMock(name), true))).toEqual(name);\n        });\n      });\n    });\n  });\n  describe('tabIndex is not defined', () => {\n    it('should return undefined', () => {\n      expect(getTabIndex(JSXAttributeMock('tabIndex', undefined))).toBeUndefined();\n    });\n  });\n});","map":{"version":3,"names":["expect","getTabIndex","IdentifierMock","JSXAttributeMock","describe","it","toBe","toBeUndefined","attr","mockFn","toEqual","name","undefined"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/getTabIndex-test.js"],"sourcesContent":["import expect from 'expect';\nimport getTabIndex from '../../../src/util/getTabIndex';\nimport IdentifierMock from '../../../__mocks__/IdentifierMock';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\n\ndescribe('getTabIndex', () => {\n  describe('tabIndex is defined', () => {\n    describe('as a number ', () => {\n      describe('zero', () => {\n        it('should return zero', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', 0))).toBe(0);\n        });\n      });\n      describe('positive integer', () => {\n        it('should return the integer', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', 1))).toBe(1);\n        });\n      });\n      describe('negative integer', () => {\n        it('should return the integer', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', -1))).toBe(-1);\n        });\n      });\n      describe('float', () => {\n        it('should return undefined', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', 9.1))).toBeUndefined();\n        });\n      });\n    });\n    describe('as a string', () => {\n      describe('empty', () => {\n        it('should return undefined', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', ''))).toBeUndefined();\n        });\n      });\n      describe('which converts to a number', () => {\n        it('should return an integer', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', '0'))).toBe(0);\n        });\n      });\n      describe('which is NaN', () => {\n        it('should return undefined', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', '0a'))).toBeUndefined();\n        });\n      });\n    });\n    describe('as a boolean', () => {\n      describe('true', () => {\n        it('should return undefined', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', true))).toBeUndefined();\n        });\n      });\n      describe('false', () => {\n        it('should return undefined', () => {\n          expect(getTabIndex(JSXAttributeMock('tabIndex', false))).toBeUndefined();\n        });\n      });\n    });\n    describe('as an expression', () => {\n      describe('function expression', () => {\n        it('should return the correct type', () => {\n          const attr = function mockFn() { return 0; };\n          expect(typeof getTabIndex(JSXAttributeMock('tabIndex', attr))).toEqual('function');\n        });\n      });\n      describe('variable expression', () => {\n        it('should return the Identifier name', () => {\n          const name = 'identName';\n          expect(getTabIndex(JSXAttributeMock(\n            'tabIndex',\n            IdentifierMock(name),\n            true,\n          ))).toEqual(name);\n        });\n      });\n    });\n  });\n  describe('tabIndex is not defined', () => {\n    it('should return undefined', () => {\n      expect(getTabIndex(JSXAttributeMock('tabIndex', undefined))).toBeUndefined();\n    });\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}