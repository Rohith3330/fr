{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getModuleResolver = exports.getAstFromProgram = exports.getCanonicalFileName = exports.ensureAbsolutePath = exports.createDefaultCompilerOptionsFromExtra = exports.canonicalDirname = exports.CORE_COMPILER_OPTIONS = void 0;\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst ts = __importStar(require(\"typescript\"));\n/**\n * Compiler options required to avoid critical functionality issues\n */\n\n\nconst CORE_COMPILER_OPTIONS = {\n  noEmit: true,\n\n  /**\n   * Flags required to make no-unused-vars work\n   */\n  noUnusedLocals: true,\n  noUnusedParameters: true\n};\nexports.CORE_COMPILER_OPTIONS = CORE_COMPILER_OPTIONS;\n/**\n * Default compiler options for program generation\n */\n\nconst DEFAULT_COMPILER_OPTIONS = Object.assign(Object.assign({}, CORE_COMPILER_OPTIONS), {\n  allowNonTsExtensions: true,\n  allowJs: true,\n  checkJs: true\n});\n\nfunction createDefaultCompilerOptionsFromExtra(extra) {\n  if (extra.debugLevel.has('typescript')) {\n    return Object.assign(Object.assign({}, DEFAULT_COMPILER_OPTIONS), {\n      extendedDiagnostics: true\n    });\n  }\n\n  return DEFAULT_COMPILER_OPTIONS;\n}\n\nexports.createDefaultCompilerOptionsFromExtra = createDefaultCompilerOptionsFromExtra; // typescript doesn't provide a ts.sys implementation for browser environments\n\nconst useCaseSensitiveFileNames = ts.sys !== undefined ? ts.sys.useCaseSensitiveFileNames : true;\nconst correctPathCasing = useCaseSensitiveFileNames ? filePath => filePath : filePath => filePath.toLowerCase();\n\nfunction getCanonicalFileName(filePath) {\n  let normalized = path_1.default.normalize(filePath);\n\n  if (normalized.endsWith(path_1.default.sep)) {\n    normalized = normalized.slice(0, -1);\n  }\n\n  return correctPathCasing(normalized);\n}\n\nexports.getCanonicalFileName = getCanonicalFileName;\n\nfunction ensureAbsolutePath(p, extra) {\n  return path_1.default.isAbsolute(p) ? p : path_1.default.join(extra.tsconfigRootDir || process.cwd(), p);\n}\n\nexports.ensureAbsolutePath = ensureAbsolutePath;\n\nfunction canonicalDirname(p) {\n  return path_1.default.dirname(p);\n}\n\nexports.canonicalDirname = canonicalDirname;\nconst DEFINITION_EXTENSIONS = [ts.Extension.Dts, ts.Extension.Dcts, ts.Extension.Dmts];\n\nfunction getExtension(fileName) {\n  var _a;\n\n  if (!fileName) {\n    return null;\n  }\n\n  return (_a = DEFINITION_EXTENSIONS.find(definitionExt => fileName.endsWith(definitionExt))) !== null && _a !== void 0 ? _a : path_1.default.extname(fileName);\n}\n\nfunction getAstFromProgram(currentProgram, extra) {\n  const ast = currentProgram.getSourceFile(extra.filePath); // working around https://github.com/typescript-eslint/typescript-eslint/issues/1573\n\n  const expectedExt = getExtension(extra.filePath);\n  const returnedExt = getExtension(ast === null || ast === void 0 ? void 0 : ast.fileName);\n\n  if (expectedExt !== returnedExt) {\n    return undefined;\n  }\n\n  return ast && {\n    ast,\n    program: currentProgram\n  };\n}\n\nexports.getAstFromProgram = getAstFromProgram;\n\nfunction getModuleResolver(moduleResolverPath) {\n  let moduleResolver;\n\n  try {\n    moduleResolver = require(moduleResolverPath);\n  } catch (error) {\n    const errorLines = ['Could not find the provided parserOptions.moduleResolver.', 'Hint: use an absolute path if you are not in control over where the ESLint instance runs.'];\n    throw new Error(errorLines.join('\\n'));\n  }\n\n  return moduleResolver;\n}\n\nexports.getModuleResolver = getModuleResolver;","map":{"version":3,"mappings":"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","names":["CORE_COMPILER_OPTIONS","noEmit","noUnusedLocals","noUnusedParameters","exports","DEFAULT_COMPILER_OPTIONS","allowNonTsExtensions","allowJs","checkJs","createDefaultCompilerOptionsFromExtra","extra","debugLevel","has","extendedDiagnostics","useCaseSensitiveFileNames","ts","sys","undefined","correctPathCasing","filePath","toLowerCase","getCanonicalFileName","normalized","path_1","normalize","endsWith","sep","slice","ensureAbsolutePath","p","isAbsolute","join","tsconfigRootDir","process","cwd","canonicalDirname","dirname","DEFINITION_EXTENSIONS","Extension","Dts","Dcts","Dmts","getExtension","fileName","find","definitionExt","_a","extname","getAstFromProgram","currentProgram","ast","getSourceFile","expectedExt","returnedExt","program","getModuleResolver","moduleResolverPath","moduleResolver","require","error","errorLines","Error"],"sources":["../../src/create-program/shared.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}