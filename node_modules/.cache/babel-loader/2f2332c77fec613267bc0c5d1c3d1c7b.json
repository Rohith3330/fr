{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst positionMethod = {\n  start: 'unshiftContainer',\n  end: 'pushContainer'\n};\n\nconst addJSXAttribute = (_ref, opts) => {\n  let {\n    types: t,\n    template\n  } = _ref;\n\n  function getAttributeValue(_ref2) {\n    let {\n      literal,\n      value\n    } = _ref2;\n\n    if (typeof value === 'boolean') {\n      return t.jsxExpressionContainer(t.booleanLiteral(value));\n    }\n\n    if (typeof value === 'number') {\n      return t.jsxExpressionContainer(t.numericLiteral(value));\n    }\n\n    if (typeof value === 'string' && literal) {\n      return t.jsxExpressionContainer(template.ast(value).expression);\n    }\n\n    if (typeof value === 'string') {\n      return t.stringLiteral(value);\n    }\n\n    return null;\n  }\n\n  function getAttribute(_ref3) {\n    let {\n      spread,\n      name,\n      value,\n      literal\n    } = _ref3;\n\n    if (spread) {\n      return t.jsxSpreadAttribute(t.identifier(name));\n    }\n\n    return t.jsxAttribute(t.jsxIdentifier(name), getAttributeValue({\n      value,\n      literal\n    }));\n  }\n\n  return {\n    visitor: {\n      JSXOpeningElement(path) {\n        if (!opts.elements.includes(path.node.name.name)) return;\n        opts.attributes.forEach(_ref4 => {\n          let {\n            name,\n            value = null,\n            spread = false,\n            literal = false,\n            position = 'end'\n          } = _ref4;\n          const method = positionMethod[position];\n          const newAttribute = getAttribute({\n            spread,\n            name,\n            value,\n            literal\n          });\n          const attributes = path.get('attributes');\n\n          const isEqualAttribute = attribute => {\n            if (spread) {\n              return attribute.get('argument').isIdentifier({\n                name\n              });\n            }\n\n            return attribute.get('name').isJSXIdentifier({\n              name\n            });\n          };\n\n          const replaced = attributes.some(attribute => {\n            if (!isEqualAttribute(attribute)) return false;\n            attribute.replaceWith(newAttribute);\n            return true;\n          });\n\n          if (!replaced) {\n            path[method]('attributes', newAttribute);\n          }\n        });\n      }\n\n    }\n  };\n};\n\nvar _default = addJSXAttribute;\nexports.default = _default;","map":{"version":3,"names":["exports","__esModule","default","positionMethod","start","end","addJSXAttribute","opts","types","t","template","getAttributeValue","literal","value","jsxExpressionContainer","booleanLiteral","numericLiteral","ast","expression","stringLiteral","getAttribute","spread","name","jsxSpreadAttribute","identifier","jsxAttribute","jsxIdentifier","visitor","JSXOpeningElement","path","elements","includes","node","attributes","forEach","position","method","newAttribute","get","isEqualAttribute","attribute","isIdentifier","isJSXIdentifier","replaced","some","replaceWith","_default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@svgr/babel-plugin-add-jsx-attribute/lib/index.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst positionMethod = {\n  start: 'unshiftContainer',\n  end: 'pushContainer'\n};\n\nconst addJSXAttribute = ({\n  types: t,\n  template\n}, opts) => {\n  function getAttributeValue({\n    literal,\n    value\n  }) {\n    if (typeof value === 'boolean') {\n      return t.jsxExpressionContainer(t.booleanLiteral(value));\n    }\n\n    if (typeof value === 'number') {\n      return t.jsxExpressionContainer(t.numericLiteral(value));\n    }\n\n    if (typeof value === 'string' && literal) {\n      return t.jsxExpressionContainer(template.ast(value).expression);\n    }\n\n    if (typeof value === 'string') {\n      return t.stringLiteral(value);\n    }\n\n    return null;\n  }\n\n  function getAttribute({\n    spread,\n    name,\n    value,\n    literal\n  }) {\n    if (spread) {\n      return t.jsxSpreadAttribute(t.identifier(name));\n    }\n\n    return t.jsxAttribute(t.jsxIdentifier(name), getAttributeValue({\n      value,\n      literal\n    }));\n  }\n\n  return {\n    visitor: {\n      JSXOpeningElement(path) {\n        if (!opts.elements.includes(path.node.name.name)) return;\n        opts.attributes.forEach(({\n          name,\n          value = null,\n          spread = false,\n          literal = false,\n          position = 'end'\n        }) => {\n          const method = positionMethod[position];\n          const newAttribute = getAttribute({\n            spread,\n            name,\n            value,\n            literal\n          });\n          const attributes = path.get('attributes');\n\n          const isEqualAttribute = attribute => {\n            if (spread) {\n              return attribute.get('argument').isIdentifier({\n                name\n              });\n            }\n\n            return attribute.get('name').isJSXIdentifier({\n              name\n            });\n          };\n\n          const replaced = attributes.some(attribute => {\n            if (!isEqualAttribute(attribute)) return false;\n            attribute.replaceWith(newAttribute);\n            return true;\n          });\n\n          if (!replaced) {\n            path[method]('attributes', newAttribute);\n          }\n        });\n      }\n\n    }\n  };\n};\n\nvar _default = addJSXAttribute;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}