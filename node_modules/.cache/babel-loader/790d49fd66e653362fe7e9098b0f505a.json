{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path_1 = require(\"path\");\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n/**\n * It's an implementation of the FileSystem interface which reads and writes directly to the real file system.\n *\n * @param caseSensitive\n */\n\n\nfunction createRealFileSystem() {\n  let caseSensitive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  // read cache\n  const existsCache = new Map();\n  const readStatsCache = new Map();\n  const readFileCache = new Map();\n  const readDirCache = new Map();\n  const realPathCache = new Map();\n\n  function normalizePath(path) {\n    return caseSensitive ? path_1.normalize(path) : path_1.normalize(path).toLowerCase();\n  } // read methods\n\n\n  function exists(path) {\n    const normalizedPath = normalizePath(path);\n\n    if (!existsCache.has(normalizedPath)) {\n      existsCache.set(normalizedPath, fs_extra_1.default.existsSync(normalizedPath));\n    }\n\n    return !!existsCache.get(normalizedPath);\n  }\n\n  function readStats(path) {\n    const normalizedPath = normalizePath(path);\n\n    if (!readStatsCache.has(normalizedPath)) {\n      if (exists(normalizedPath)) {\n        readStatsCache.set(normalizedPath, fs_extra_1.default.statSync(normalizedPath));\n      }\n    }\n\n    return readStatsCache.get(normalizedPath);\n  }\n\n  function readFile(path, encoding) {\n    const normalizedPath = normalizePath(path);\n\n    if (!readFileCache.has(normalizedPath)) {\n      const stats = readStats(normalizedPath);\n\n      if (stats && stats.isFile()) {\n        readFileCache.set(normalizedPath, fs_extra_1.default.readFileSync(normalizedPath, {\n          encoding: encoding\n        }).toString());\n      } else {\n        readFileCache.set(normalizedPath, undefined);\n      }\n    }\n\n    return readFileCache.get(normalizedPath);\n  }\n\n  function readDir(path) {\n    const normalizedPath = normalizePath(path);\n\n    if (!readDirCache.has(normalizedPath)) {\n      const stats = readStats(normalizedPath);\n\n      if (stats && stats.isDirectory()) {\n        readDirCache.set(normalizedPath, fs_extra_1.default.readdirSync(normalizedPath, {\n          withFileTypes: true\n        }));\n      } else {\n        readDirCache.set(normalizedPath, []);\n      }\n    }\n\n    return readDirCache.get(normalizedPath) || [];\n  }\n\n  function getRealPath(path) {\n    const normalizedPath = normalizePath(path);\n\n    if (!realPathCache.has(normalizedPath)) {\n      let base = normalizedPath;\n      let nested = '';\n\n      while (base !== path_1.dirname(base)) {\n        if (exists(base)) {\n          realPathCache.set(normalizedPath, normalizePath(path_1.join(fs_extra_1.default.realpathSync(base), nested)));\n          break;\n        }\n\n        nested = path_1.join(path_1.basename(base), nested);\n        base = path_1.dirname(base);\n      }\n    }\n\n    return realPathCache.get(normalizedPath) || normalizedPath;\n  }\n\n  function createDir(path) {\n    const normalizedPath = normalizePath(path);\n    fs_extra_1.default.mkdirSync(normalizedPath, {\n      recursive: true\n    }); // update cache\n\n    existsCache.set(normalizedPath, true);\n\n    if (readDirCache.has(path_1.dirname(normalizedPath))) {\n      readDirCache.delete(path_1.dirname(normalizedPath));\n    }\n\n    if (readStatsCache.has(normalizedPath)) {\n      readStatsCache.delete(normalizedPath);\n    }\n  }\n\n  function writeFile(path, data) {\n    const normalizedPath = normalizePath(path);\n\n    if (!exists(path_1.dirname(normalizedPath))) {\n      createDir(path_1.dirname(normalizedPath));\n    }\n\n    fs_extra_1.default.writeFileSync(normalizedPath, data); // update cache\n\n    existsCache.set(normalizedPath, true);\n\n    if (readDirCache.has(path_1.dirname(normalizedPath))) {\n      readDirCache.delete(path_1.dirname(normalizedPath));\n    }\n\n    if (readStatsCache.has(normalizedPath)) {\n      readStatsCache.delete(normalizedPath);\n    }\n\n    if (readFileCache.has(normalizedPath)) {\n      readFileCache.delete(normalizedPath);\n    }\n  }\n\n  function deleteFile(path) {\n    if (exists(path)) {\n      const normalizedPath = normalizePath(path);\n      fs_extra_1.default.unlinkSync(normalizedPath); // update cache\n\n      existsCache.set(normalizedPath, false);\n\n      if (readDirCache.has(path_1.dirname(normalizedPath))) {\n        readDirCache.delete(path_1.dirname(normalizedPath));\n      }\n\n      if (readStatsCache.has(normalizedPath)) {\n        readStatsCache.delete(normalizedPath);\n      }\n\n      if (readFileCache.has(normalizedPath)) {\n        readFileCache.delete(normalizedPath);\n      }\n    }\n  }\n\n  function updateTimes(path, atime, mtime) {\n    if (exists(path)) {\n      const normalizedPath = normalizePath(path);\n      fs_extra_1.default.utimesSync(normalizePath(path), atime, mtime); // update cache\n\n      if (readStatsCache.has(normalizedPath)) {\n        readStatsCache.delete(normalizedPath);\n      }\n    }\n  }\n\n  return {\n    exists(path) {\n      return exists(getRealPath(path));\n    },\n\n    readFile(path, encoding) {\n      return readFile(getRealPath(path), encoding);\n    },\n\n    readDir(path) {\n      return readDir(getRealPath(path));\n    },\n\n    readStats(path) {\n      return readStats(getRealPath(path));\n    },\n\n    realPath(path) {\n      return getRealPath(path);\n    },\n\n    normalizePath(path) {\n      return normalizePath(path);\n    },\n\n    writeFile(path, data) {\n      writeFile(getRealPath(path), data);\n    },\n\n    deleteFile(path) {\n      deleteFile(getRealPath(path));\n    },\n\n    createDir(path) {\n      createDir(getRealPath(path));\n    },\n\n    updateTimes(path, atime, mtime) {\n      updateTimes(getRealPath(path), atime, mtime);\n    },\n\n    clearCache() {\n      existsCache.clear();\n      readStatsCache.clear();\n      readFileCache.clear();\n      readDirCache.clear();\n      realPathCache.clear();\n    }\n\n  };\n}\n\nexports.createRealFileSystem = createRealFileSystem;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","path_1","require","fs_extra_1","createRealFileSystem","caseSensitive","existsCache","Map","readStatsCache","readFileCache","readDirCache","realPathCache","normalizePath","path","normalize","toLowerCase","exists","normalizedPath","has","set","default","existsSync","get","readStats","statSync","readFile","encoding","stats","isFile","readFileSync","toString","undefined","readDir","isDirectory","readdirSync","withFileTypes","getRealPath","base","nested","dirname","join","realpathSync","basename","createDir","mkdirSync","recursive","delete","writeFile","data","writeFileSync","deleteFile","unlinkSync","updateTimes","atime","mtime","utimesSync","realPath","clearCache","clear"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/fork-ts-checker-webpack-plugin/lib/typescript-reporter/file-system/RealFileSystem.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path_1 = require(\"path\");\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n/**\n * It's an implementation of the FileSystem interface which reads and writes directly to the real file system.\n *\n * @param caseSensitive\n */\nfunction createRealFileSystem(caseSensitive = false) {\n    // read cache\n    const existsCache = new Map();\n    const readStatsCache = new Map();\n    const readFileCache = new Map();\n    const readDirCache = new Map();\n    const realPathCache = new Map();\n    function normalizePath(path) {\n        return caseSensitive ? path_1.normalize(path) : path_1.normalize(path).toLowerCase();\n    }\n    // read methods\n    function exists(path) {\n        const normalizedPath = normalizePath(path);\n        if (!existsCache.has(normalizedPath)) {\n            existsCache.set(normalizedPath, fs_extra_1.default.existsSync(normalizedPath));\n        }\n        return !!existsCache.get(normalizedPath);\n    }\n    function readStats(path) {\n        const normalizedPath = normalizePath(path);\n        if (!readStatsCache.has(normalizedPath)) {\n            if (exists(normalizedPath)) {\n                readStatsCache.set(normalizedPath, fs_extra_1.default.statSync(normalizedPath));\n            }\n        }\n        return readStatsCache.get(normalizedPath);\n    }\n    function readFile(path, encoding) {\n        const normalizedPath = normalizePath(path);\n        if (!readFileCache.has(normalizedPath)) {\n            const stats = readStats(normalizedPath);\n            if (stats && stats.isFile()) {\n                readFileCache.set(normalizedPath, fs_extra_1.default.readFileSync(normalizedPath, { encoding: encoding }).toString());\n            }\n            else {\n                readFileCache.set(normalizedPath, undefined);\n            }\n        }\n        return readFileCache.get(normalizedPath);\n    }\n    function readDir(path) {\n        const normalizedPath = normalizePath(path);\n        if (!readDirCache.has(normalizedPath)) {\n            const stats = readStats(normalizedPath);\n            if (stats && stats.isDirectory()) {\n                readDirCache.set(normalizedPath, fs_extra_1.default.readdirSync(normalizedPath, { withFileTypes: true }));\n            }\n            else {\n                readDirCache.set(normalizedPath, []);\n            }\n        }\n        return readDirCache.get(normalizedPath) || [];\n    }\n    function getRealPath(path) {\n        const normalizedPath = normalizePath(path);\n        if (!realPathCache.has(normalizedPath)) {\n            let base = normalizedPath;\n            let nested = '';\n            while (base !== path_1.dirname(base)) {\n                if (exists(base)) {\n                    realPathCache.set(normalizedPath, normalizePath(path_1.join(fs_extra_1.default.realpathSync(base), nested)));\n                    break;\n                }\n                nested = path_1.join(path_1.basename(base), nested);\n                base = path_1.dirname(base);\n            }\n        }\n        return realPathCache.get(normalizedPath) || normalizedPath;\n    }\n    function createDir(path) {\n        const normalizedPath = normalizePath(path);\n        fs_extra_1.default.mkdirSync(normalizedPath, { recursive: true });\n        // update cache\n        existsCache.set(normalizedPath, true);\n        if (readDirCache.has(path_1.dirname(normalizedPath))) {\n            readDirCache.delete(path_1.dirname(normalizedPath));\n        }\n        if (readStatsCache.has(normalizedPath)) {\n            readStatsCache.delete(normalizedPath);\n        }\n    }\n    function writeFile(path, data) {\n        const normalizedPath = normalizePath(path);\n        if (!exists(path_1.dirname(normalizedPath))) {\n            createDir(path_1.dirname(normalizedPath));\n        }\n        fs_extra_1.default.writeFileSync(normalizedPath, data);\n        // update cache\n        existsCache.set(normalizedPath, true);\n        if (readDirCache.has(path_1.dirname(normalizedPath))) {\n            readDirCache.delete(path_1.dirname(normalizedPath));\n        }\n        if (readStatsCache.has(normalizedPath)) {\n            readStatsCache.delete(normalizedPath);\n        }\n        if (readFileCache.has(normalizedPath)) {\n            readFileCache.delete(normalizedPath);\n        }\n    }\n    function deleteFile(path) {\n        if (exists(path)) {\n            const normalizedPath = normalizePath(path);\n            fs_extra_1.default.unlinkSync(normalizedPath);\n            // update cache\n            existsCache.set(normalizedPath, false);\n            if (readDirCache.has(path_1.dirname(normalizedPath))) {\n                readDirCache.delete(path_1.dirname(normalizedPath));\n            }\n            if (readStatsCache.has(normalizedPath)) {\n                readStatsCache.delete(normalizedPath);\n            }\n            if (readFileCache.has(normalizedPath)) {\n                readFileCache.delete(normalizedPath);\n            }\n        }\n    }\n    function updateTimes(path, atime, mtime) {\n        if (exists(path)) {\n            const normalizedPath = normalizePath(path);\n            fs_extra_1.default.utimesSync(normalizePath(path), atime, mtime);\n            // update cache\n            if (readStatsCache.has(normalizedPath)) {\n                readStatsCache.delete(normalizedPath);\n            }\n        }\n    }\n    return {\n        exists(path) {\n            return exists(getRealPath(path));\n        },\n        readFile(path, encoding) {\n            return readFile(getRealPath(path), encoding);\n        },\n        readDir(path) {\n            return readDir(getRealPath(path));\n        },\n        readStats(path) {\n            return readStats(getRealPath(path));\n        },\n        realPath(path) {\n            return getRealPath(path);\n        },\n        normalizePath(path) {\n            return normalizePath(path);\n        },\n        writeFile(path, data) {\n            writeFile(getRealPath(path), data);\n        },\n        deleteFile(path) {\n            deleteFile(getRealPath(path));\n        },\n        createDir(path) {\n            createDir(getRealPath(path));\n        },\n        updateTimes(path, atime, mtime) {\n            updateTimes(getRealPath(path), atime, mtime);\n        },\n        clearCache() {\n            existsCache.clear();\n            readStatsCache.clear();\n            readFileCache.clear();\n            readDirCache.clear();\n            realPathCache.clear();\n        },\n    };\n}\nexports.createRealFileSystem = createRealFileSystem;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}