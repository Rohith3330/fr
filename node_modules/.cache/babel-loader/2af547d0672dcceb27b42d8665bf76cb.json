{"ast":null,"code":"/**\n * @fileoverview Rule to flag when the same variable is declared more then once.\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow variable redeclaration\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-redeclare\"\n    },\n    messages: {\n      redeclared: \"'{{id}}' is already defined.\",\n      redeclaredAsBuiltin: \"'{{id}}' is already defined as a built-in global variable.\",\n      redeclaredBySyntax: \"'{{id}}' is already defined by a variable declaration.\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        builtinGlobals: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const options = {\n      builtinGlobals: Boolean(context.options.length === 0 || context.options[0].builtinGlobals)\n    };\n    const sourceCode = context.getSourceCode();\n    /**\n     * Iterate declarations of a given variable.\n     * @param {escope.variable} variable The variable object to iterate declarations.\n     * @returns {IterableIterator<{type:string,node:ASTNode,loc:SourceLocation}>} The declarations.\n     */\n\n    function* iterateDeclarations(variable) {\n      if (options.builtinGlobals && (variable.eslintImplicitGlobalSetting === \"readonly\" || variable.eslintImplicitGlobalSetting === \"writable\")) {\n        yield {\n          type: \"builtin\"\n        };\n      }\n\n      for (const id of variable.identifiers) {\n        yield {\n          type: \"syntax\",\n          node: id,\n          loc: id.loc\n        };\n      }\n\n      if (variable.eslintExplicitGlobalComments) {\n        for (const comment of variable.eslintExplicitGlobalComments) {\n          yield {\n            type: \"comment\",\n            node: comment,\n            loc: astUtils.getNameLocationInGlobalDirectiveComment(sourceCode, comment, variable.name)\n          };\n        }\n      }\n    }\n    /**\n     * Find variables in a given scope and flag redeclared ones.\n     * @param {Scope} scope An eslint-scope scope object.\n     * @returns {void}\n     * @private\n     */\n\n\n    function findVariablesInScope(scope) {\n      for (const variable of scope.variables) {\n        const [declaration, ...extraDeclarations] = iterateDeclarations(variable);\n\n        if (extraDeclarations.length === 0) {\n          continue;\n        }\n        /*\n         * If the type of a declaration is different from the type of\n         * the first declaration, it shows the location of the first\n         * declaration.\n         */\n\n\n        const detailMessageId = declaration.type === \"builtin\" ? \"redeclaredAsBuiltin\" : \"redeclaredBySyntax\";\n        const data = {\n          id: variable.name\n        }; // Report extra declarations.\n\n        for (const {\n          type,\n          node,\n          loc\n        } of extraDeclarations) {\n          const messageId = type === declaration.type ? \"redeclared\" : detailMessageId;\n          context.report({\n            node,\n            loc,\n            messageId,\n            data\n          });\n        }\n      }\n    }\n    /**\n     * Find variables in the current scope.\n     * @param {ASTNode} node The node of the current scope.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForBlock(node) {\n      const scope = context.getScope();\n      /*\n       * In ES5, some node type such as `BlockStatement` doesn't have that scope.\n       * `scope.block` is a different node in such a case.\n       */\n\n      if (scope.block === node) {\n        findVariablesInScope(scope);\n      }\n    }\n\n    return {\n      Program() {\n        const scope = context.getScope();\n        findVariablesInScope(scope); // Node.js or ES modules has a special scope.\n\n        if (scope.type === \"global\" && scope.childScopes[0] && // The special scope's block is the Program node.\n        scope.block === scope.childScopes[0].block) {\n          findVariablesInScope(scope.childScopes[0]);\n        }\n      },\n\n      FunctionDeclaration: checkForBlock,\n      FunctionExpression: checkForBlock,\n      ArrowFunctionExpression: checkForBlock,\n      StaticBlock: checkForBlock,\n      BlockStatement: checkForBlock,\n      ForStatement: checkForBlock,\n      ForInStatement: checkForBlock,\n      ForOfStatement: checkForBlock,\n      SwitchStatement: checkForBlock\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","recommended","url","messages","redeclared","redeclaredAsBuiltin","redeclaredBySyntax","schema","properties","builtinGlobals","default","additionalProperties","create","context","options","Boolean","length","sourceCode","getSourceCode","iterateDeclarations","variable","eslintImplicitGlobalSetting","id","identifiers","node","loc","eslintExplicitGlobalComments","comment","getNameLocationInGlobalDirectiveComment","name","findVariablesInScope","scope","variables","declaration","extraDeclarations","detailMessageId","data","messageId","report","checkForBlock","getScope","block","Program","childScopes","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","StaticBlock","BlockStatement","ForStatement","ForInStatement","ForOfStatement","SwitchStatement"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-redeclare.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when the same variable is declared more then once.\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow variable redeclaration\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-redeclare\"\n        },\n\n        messages: {\n            redeclared: \"'{{id}}' is already defined.\",\n            redeclaredAsBuiltin: \"'{{id}}' is already defined as a built-in global variable.\",\n            redeclaredBySyntax: \"'{{id}}' is already defined by a variable declaration.\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    builtinGlobals: { type: \"boolean\", default: true }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create(context) {\n        const options = {\n            builtinGlobals: Boolean(\n                context.options.length === 0 ||\n                context.options[0].builtinGlobals\n            )\n        };\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Iterate declarations of a given variable.\n         * @param {escope.variable} variable The variable object to iterate declarations.\n         * @returns {IterableIterator<{type:string,node:ASTNode,loc:SourceLocation}>} The declarations.\n         */\n        function *iterateDeclarations(variable) {\n            if (options.builtinGlobals && (\n                variable.eslintImplicitGlobalSetting === \"readonly\" ||\n                variable.eslintImplicitGlobalSetting === \"writable\"\n            )) {\n                yield { type: \"builtin\" };\n            }\n\n            for (const id of variable.identifiers) {\n                yield { type: \"syntax\", node: id, loc: id.loc };\n            }\n\n            if (variable.eslintExplicitGlobalComments) {\n                for (const comment of variable.eslintExplicitGlobalComments) {\n                    yield {\n                        type: \"comment\",\n                        node: comment,\n                        loc: astUtils.getNameLocationInGlobalDirectiveComment(\n                            sourceCode,\n                            comment,\n                            variable.name\n                        )\n                    };\n                }\n            }\n        }\n\n        /**\n         * Find variables in a given scope and flag redeclared ones.\n         * @param {Scope} scope An eslint-scope scope object.\n         * @returns {void}\n         * @private\n         */\n        function findVariablesInScope(scope) {\n            for (const variable of scope.variables) {\n                const [\n                    declaration,\n                    ...extraDeclarations\n                ] = iterateDeclarations(variable);\n\n                if (extraDeclarations.length === 0) {\n                    continue;\n                }\n\n                /*\n                 * If the type of a declaration is different from the type of\n                 * the first declaration, it shows the location of the first\n                 * declaration.\n                 */\n                const detailMessageId = declaration.type === \"builtin\"\n                    ? \"redeclaredAsBuiltin\"\n                    : \"redeclaredBySyntax\";\n                const data = { id: variable.name };\n\n                // Report extra declarations.\n                for (const { type, node, loc } of extraDeclarations) {\n                    const messageId = type === declaration.type\n                        ? \"redeclared\"\n                        : detailMessageId;\n\n                    context.report({ node, loc, messageId, data });\n                }\n            }\n        }\n\n        /**\n         * Find variables in the current scope.\n         * @param {ASTNode} node The node of the current scope.\n         * @returns {void}\n         * @private\n         */\n        function checkForBlock(node) {\n            const scope = context.getScope();\n\n            /*\n             * In ES5, some node type such as `BlockStatement` doesn't have that scope.\n             * `scope.block` is a different node in such a case.\n             */\n            if (scope.block === node) {\n                findVariablesInScope(scope);\n            }\n        }\n\n        return {\n            Program() {\n                const scope = context.getScope();\n\n                findVariablesInScope(scope);\n\n                // Node.js or ES modules has a special scope.\n                if (\n                    scope.type === \"global\" &&\n                    scope.childScopes[0] &&\n\n                    // The special scope's block is the Program node.\n                    scope.block === scope.childScopes[0].block\n                ) {\n                    findVariablesInScope(scope.childScopes[0]);\n                }\n            },\n\n            FunctionDeclaration: checkForBlock,\n            FunctionExpression: checkForBlock,\n            ArrowFunctionExpression: checkForBlock,\n\n            StaticBlock: checkForBlock,\n\n            BlockStatement: checkForBlock,\n            ForStatement: checkForBlock,\n            ForInStatement: checkForBlock,\n            ForOfStatement: checkForBlock,\n            SwitchStatement: checkForBlock\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}