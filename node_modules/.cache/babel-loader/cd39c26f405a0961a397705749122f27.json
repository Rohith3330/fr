{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultMinimumDescriptionLength = void 0;\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.defaultMinimumDescriptionLength = 3;\nexports.default = util.createRule({\n  name: 'ban-ts-comment',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallow `@ts-<directive>` comments or require descriptions after directive',\n      recommended: 'error'\n    },\n    messages: {\n      tsDirectiveComment: 'Do not use \"@ts-{{directive}}\" because it alters compilation errors.',\n      tsDirectiveCommentRequiresDescription: 'Include a description after the \"@ts-{{directive}}\" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.',\n      tsDirectiveCommentDescriptionNotMatchPattern: 'The description for the \"@ts-{{directive}}\" directive must match the {{format}} format.'\n    },\n    schema: {\n      $defs: {\n        directiveConfigSchema: {\n          oneOf: [{\n            type: 'boolean',\n            default: true\n          }, {\n            enum: ['allow-with-description']\n          }, {\n            type: 'object',\n            properties: {\n              descriptionFormat: {\n                type: 'string'\n              }\n            }\n          }]\n        }\n      },\n      prefixItems: [{\n        properties: {\n          'ts-expect-error': {\n            $ref: '#/$defs/directiveConfigSchema'\n          },\n          'ts-ignore': {\n            $ref: '#/$defs/directiveConfigSchema'\n          },\n          'ts-nocheck': {\n            $ref: '#/$defs/directiveConfigSchema'\n          },\n          'ts-check': {\n            $ref: '#/$defs/directiveConfigSchema'\n          },\n          minimumDescriptionLength: {\n            type: 'number',\n            default: exports.defaultMinimumDescriptionLength\n          }\n        },\n        additionalProperties: false\n      }],\n      type: 'array'\n    }\n  },\n  defaultOptions: [{\n    'ts-expect-error': 'allow-with-description',\n    'ts-ignore': true,\n    'ts-nocheck': true,\n    'ts-check': false,\n    minimumDescriptionLength: exports.defaultMinimumDescriptionLength\n  }],\n\n  create(context, _ref) {\n    let [options] = _ref;\n\n    /*\n      The regex used are taken from the ones used in the official TypeScript repo -\n      https://github.com/microsoft/TypeScript/blob/408c760fae66080104bc85c449282c2d207dfe8e/src/compiler/scanner.ts#L288-L296\n    */\n    const commentDirectiveRegExSingleLine = /^\\/*\\s*@ts-(?<directive>expect-error|ignore|check|nocheck)(?<description>.*)/;\n    const commentDirectiveRegExMultiLine = /^\\s*(?:\\/|\\*)*\\s*@ts-(?<directive>expect-error|ignore|check|nocheck)(?<description>.*)/;\n    const sourceCode = context.getSourceCode();\n    const descriptionFormats = new Map();\n\n    for (const directive of ['ts-expect-error', 'ts-ignore', 'ts-nocheck', 'ts-check']) {\n      const option = options[directive];\n\n      if (typeof option === 'object' && option.descriptionFormat) {\n        descriptionFormats.set(directive, new RegExp(option.descriptionFormat));\n      }\n    }\n\n    return {\n      Program() {\n        const comments = sourceCode.getAllComments();\n        comments.forEach(comment => {\n          const regExp = comment.type === utils_1.AST_TOKEN_TYPES.Line ? commentDirectiveRegExSingleLine : commentDirectiveRegExMultiLine;\n          const match = regExp.exec(comment.value);\n\n          if (!match) {\n            return;\n          }\n\n          const {\n            directive,\n            description\n          } = match.groups;\n          const fullDirective = `ts-${directive}`;\n          const option = options[fullDirective];\n\n          if (option === true) {\n            context.report({\n              data: {\n                directive\n              },\n              node: comment,\n              messageId: 'tsDirectiveComment'\n            });\n          }\n\n          if (option === 'allow-with-description' || typeof option === 'object' && option.descriptionFormat) {\n            const {\n              minimumDescriptionLength = exports.defaultMinimumDescriptionLength\n            } = options;\n            const format = descriptionFormats.get(fullDirective);\n\n            if (description.trim().length < minimumDescriptionLength) {\n              context.report({\n                data: {\n                  directive,\n                  minimumDescriptionLength\n                },\n                node: comment,\n                messageId: 'tsDirectiveCommentRequiresDescription'\n              });\n            } else if (format && !format.test(description)) {\n              context.report({\n                data: {\n                  directive,\n                  format: format.source\n                },\n                node: comment,\n                messageId: 'tsDirectiveCommentDescriptionNotMatchPattern'\n              });\n            }\n          }\n        });\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["exports","util","createRule","name","meta","type","docs","description","recommended","messages","tsDirectiveComment","tsDirectiveCommentRequiresDescription","tsDirectiveCommentDescriptionNotMatchPattern","schema","$defs","directiveConfigSchema","oneOf","default","enum","properties","descriptionFormat","prefixItems","$ref","minimumDescriptionLength","additionalProperties","defaultOptions","create","context","options","commentDirectiveRegExSingleLine","commentDirectiveRegExMultiLine","sourceCode","getSourceCode","descriptionFormats","Map","directive","option","set","RegExp","Program","comments","getAllComments","forEach","comment","regExp","utils_1","Line","match","exec","value","groups","fullDirective","report","data","node","messageId","format","get","trim","length","test","source"],"sources":["../../src/rules/ban-ts-comment.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}