{"ast":null,"code":"'use strict';\n\nconst debug = require('debug')('detect-port');\n\nconst net = require('net');\n\nconst address = require('address');\n\nmodule.exports = (port, host, callback) => {\n  if (typeof port === 'function') {\n    callback = port;\n    port = null;\n  } else if (typeof host === 'function') {\n    callback = host;\n    host = null;\n  }\n\n  port = parseInt(port) || 0;\n  let maxPort = port + 10;\n\n  if (maxPort > 65535) {\n    maxPort = 65535;\n  }\n\n  debug('detect free port between [%s, %s)', port, maxPort);\n\n  if (typeof callback === 'function') {\n    return tryListen(host, port, maxPort, callback);\n  } // promise\n\n\n  return new Promise((resolve, reject) => {\n    tryListen(host, port, maxPort, (error, realPort) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(realPort);\n      }\n    });\n  });\n};\n\nfunction tryListen(host, port, maxPort, callback) {\n  function handleError() {\n    port++;\n\n    if (port >= maxPort) {\n      debug('port: %s >= maxPort: %s, give up and use random port', port, maxPort);\n      port = 0;\n      maxPort = 0;\n    }\n\n    tryListen(host, port, maxPort, callback);\n  } // 1. check specified host (or null)\n\n\n  listen(port, host, (err, realPort) => {\n    // ignore random listening\n    if (port === 0) {\n      return callback(err, realPort);\n    }\n\n    if (err) {\n      return handleError(err);\n    } // 2. check default host\n\n\n    listen(port, null, err => {\n      if (err) {\n        return handleError(err);\n      } // 3. check localhost\n\n\n      listen(port, 'localhost', err => {\n        if (err) {\n          return handleError(err);\n        } // 4. check current ip\n\n\n        let ip;\n\n        try {\n          ip = address.ip();\n        } catch (err) {\n          // Skip the `ip` check if `address.ip()` fails\n          return callback(null, realPort);\n        }\n\n        listen(port, ip, (err, realPort) => {\n          if (err) {\n            return handleError(err);\n          }\n\n          callback(null, realPort);\n        });\n      });\n    });\n  });\n}\n\nfunction listen(port, hostname, callback) {\n  const server = new net.Server();\n  server.on('error', err => {\n    debug('listen %s:%s error: %s', hostname, port, err);\n    server.close();\n\n    if (err.code === 'ENOTFOUND') {\n      debug('ignore dns ENOTFOUND error, get free %s:%s', hostname, port);\n      return callback(null, port);\n    }\n\n    return callback(err);\n  });\n  server.listen(port, hostname, () => {\n    port = server.address().port;\n    server.close();\n    debug('get free %s:%s', hostname, port);\n    return callback(null, port);\n  });\n}","map":{"version":3,"names":["debug","require","net","address","module","exports","port","host","callback","parseInt","maxPort","tryListen","Promise","resolve","reject","error","realPort","handleError","listen","err","ip","hostname","server","Server","on","close","code"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/detect-port-alt/lib/detect-port.js"],"sourcesContent":["'use strict';\n\nconst debug = require('debug')('detect-port');\nconst net = require('net');\nconst address = require('address');\n\nmodule.exports = (port, host, callback) => {\n  if (typeof port === 'function') {\n    callback = port;\n    port = null;\n  } else if (typeof host === 'function') {\n    callback = host;\n    host = null;\n  }\n  port = parseInt(port) || 0;\n  let maxPort = port + 10;\n  if (maxPort > 65535) {\n    maxPort = 65535;\n  }\n  debug('detect free port between [%s, %s)', port, maxPort);\n  if (typeof callback === 'function') {\n    return tryListen(host, port, maxPort, callback);\n  }\n  // promise\n  return new Promise((resolve, reject) => {\n    tryListen(host, port, maxPort, (error, realPort) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(realPort);\n      }\n    });\n  });\n};\n\nfunction tryListen(host, port, maxPort, callback) {\n  function handleError() {\n    port++;\n    if (port >= maxPort) {\n      debug(\n        'port: %s >= maxPort: %s, give up and use random port',\n        port,\n        maxPort\n      );\n      port = 0;\n      maxPort = 0;\n    }\n    tryListen(host, port, maxPort, callback);\n  }\n\n  // 1. check specified host (or null)\n  listen(port, host, (err, realPort) => {\n    // ignore random listening\n    if (port === 0) {\n      return callback(err, realPort);\n    }\n\n    if (err) {\n      return handleError(err);\n    }\n\n    // 2. check default host\n    listen(port, null, err => {\n      if (err) {\n        return handleError(err);\n      }\n\n      // 3. check localhost\n      listen(port, 'localhost', err => {\n        if (err) {\n          return handleError(err);\n        }\n\n        // 4. check current ip\n        let ip;\n        try {\n          ip = address.ip();\n        } catch (err) {\n          // Skip the `ip` check if `address.ip()` fails\n          return callback(null, realPort);\n        }\n\n        listen(port, ip, (err, realPort) => {\n          if (err) {\n            return handleError(err);\n          }\n\n          callback(null, realPort);\n        });\n      });\n    });\n  });\n}\n\nfunction listen(port, hostname, callback) {\n  const server = new net.Server();\n\n  server.on('error', err => {\n    debug('listen %s:%s error: %s', hostname, port, err);\n    server.close();\n    if (err.code === 'ENOTFOUND') {\n      debug('ignore dns ENOTFOUND error, get free %s:%s', hostname, port);\n      return callback(null, port);\n    }\n    return callback(err);\n  });\n\n  server.listen(port, hostname, () => {\n    port = server.address().port;\n    server.close();\n    debug('get free %s:%s', hostname, port);\n    return callback(null, port);\n  });\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,aAAjB,CAAd;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAACC,IAAD,EAAOC,IAAP,EAAaC,QAAb,KAA0B;EACzC,IAAI,OAAOF,IAAP,KAAgB,UAApB,EAAgC;IAC9BE,QAAQ,GAAGF,IAAX;IACAA,IAAI,GAAG,IAAP;EACD,CAHD,MAGO,IAAI,OAAOC,IAAP,KAAgB,UAApB,EAAgC;IACrCC,QAAQ,GAAGD,IAAX;IACAA,IAAI,GAAG,IAAP;EACD;;EACDD,IAAI,GAAGG,QAAQ,CAACH,IAAD,CAAR,IAAkB,CAAzB;EACA,IAAII,OAAO,GAAGJ,IAAI,GAAG,EAArB;;EACA,IAAII,OAAO,GAAG,KAAd,EAAqB;IACnBA,OAAO,GAAG,KAAV;EACD;;EACDV,KAAK,CAAC,mCAAD,EAAsCM,IAAtC,EAA4CI,OAA5C,CAAL;;EACA,IAAI,OAAOF,QAAP,KAAoB,UAAxB,EAAoC;IAClC,OAAOG,SAAS,CAACJ,IAAD,EAAOD,IAAP,EAAaI,OAAb,EAAsBF,QAAtB,CAAhB;EACD,CAhBwC,CAiBzC;;;EACA,OAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtCH,SAAS,CAACJ,IAAD,EAAOD,IAAP,EAAaI,OAAb,EAAsB,CAACK,KAAD,EAAQC,QAAR,KAAqB;MAClD,IAAID,KAAJ,EAAW;QACTD,MAAM,CAACC,KAAD,CAAN;MACD,CAFD,MAEO;QACLF,OAAO,CAACG,QAAD,CAAP;MACD;IACF,CANQ,CAAT;EAOD,CARM,CAAP;AASD,CA3BD;;AA6BA,SAASL,SAAT,CAAmBJ,IAAnB,EAAyBD,IAAzB,EAA+BI,OAA/B,EAAwCF,QAAxC,EAAkD;EAChD,SAASS,WAAT,GAAuB;IACrBX,IAAI;;IACJ,IAAIA,IAAI,IAAII,OAAZ,EAAqB;MACnBV,KAAK,CACH,sDADG,EAEHM,IAFG,EAGHI,OAHG,CAAL;MAKAJ,IAAI,GAAG,CAAP;MACAI,OAAO,GAAG,CAAV;IACD;;IACDC,SAAS,CAACJ,IAAD,EAAOD,IAAP,EAAaI,OAAb,EAAsBF,QAAtB,CAAT;EACD,CAb+C,CAehD;;;EACAU,MAAM,CAACZ,IAAD,EAAOC,IAAP,EAAa,CAACY,GAAD,EAAMH,QAAN,KAAmB;IACpC;IACA,IAAIV,IAAI,KAAK,CAAb,EAAgB;MACd,OAAOE,QAAQ,CAACW,GAAD,EAAMH,QAAN,CAAf;IACD;;IAED,IAAIG,GAAJ,EAAS;MACP,OAAOF,WAAW,CAACE,GAAD,CAAlB;IACD,CARmC,CAUpC;;;IACAD,MAAM,CAACZ,IAAD,EAAO,IAAP,EAAaa,GAAG,IAAI;MACxB,IAAIA,GAAJ,EAAS;QACP,OAAOF,WAAW,CAACE,GAAD,CAAlB;MACD,CAHuB,CAKxB;;;MACAD,MAAM,CAACZ,IAAD,EAAO,WAAP,EAAoBa,GAAG,IAAI;QAC/B,IAAIA,GAAJ,EAAS;UACP,OAAOF,WAAW,CAACE,GAAD,CAAlB;QACD,CAH8B,CAK/B;;;QACA,IAAIC,EAAJ;;QACA,IAAI;UACFA,EAAE,GAAGjB,OAAO,CAACiB,EAAR,EAAL;QACD,CAFD,CAEE,OAAOD,GAAP,EAAY;UACZ;UACA,OAAOX,QAAQ,CAAC,IAAD,EAAOQ,QAAP,CAAf;QACD;;QAEDE,MAAM,CAACZ,IAAD,EAAOc,EAAP,EAAW,CAACD,GAAD,EAAMH,QAAN,KAAmB;UAClC,IAAIG,GAAJ,EAAS;YACP,OAAOF,WAAW,CAACE,GAAD,CAAlB;UACD;;UAEDX,QAAQ,CAAC,IAAD,EAAOQ,QAAP,CAAR;QACD,CANK,CAAN;MAOD,CArBK,CAAN;IAsBD,CA5BK,CAAN;EA6BD,CAxCK,CAAN;AAyCD;;AAED,SAASE,MAAT,CAAgBZ,IAAhB,EAAsBe,QAAtB,EAAgCb,QAAhC,EAA0C;EACxC,MAAMc,MAAM,GAAG,IAAIpB,GAAG,CAACqB,MAAR,EAAf;EAEAD,MAAM,CAACE,EAAP,CAAU,OAAV,EAAmBL,GAAG,IAAI;IACxBnB,KAAK,CAAC,wBAAD,EAA2BqB,QAA3B,EAAqCf,IAArC,EAA2Ca,GAA3C,CAAL;IACAG,MAAM,CAACG,KAAP;;IACA,IAAIN,GAAG,CAACO,IAAJ,KAAa,WAAjB,EAA8B;MAC5B1B,KAAK,CAAC,4CAAD,EAA+CqB,QAA/C,EAAyDf,IAAzD,CAAL;MACA,OAAOE,QAAQ,CAAC,IAAD,EAAOF,IAAP,CAAf;IACD;;IACD,OAAOE,QAAQ,CAACW,GAAD,CAAf;EACD,CARD;EAUAG,MAAM,CAACJ,MAAP,CAAcZ,IAAd,EAAoBe,QAApB,EAA8B,MAAM;IAClCf,IAAI,GAAGgB,MAAM,CAACnB,OAAP,GAAiBG,IAAxB;IACAgB,MAAM,CAACG,KAAP;IACAzB,KAAK,CAAC,gBAAD,EAAmBqB,QAAnB,EAA6Bf,IAA7B,CAAL;IACA,OAAOE,QAAQ,CAAC,IAAD,EAAOF,IAAP,CAAf;EACD,CALD;AAMD"},"metadata":{},"sourceType":"script"}