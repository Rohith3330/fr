{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path_1 = require(\"path\");\n\nfunction parseTypeScriptConfiguration(typescript, configFileName, configFileContext, configOverwriteJSON, parseConfigFileHost) {\n  const parsedConfigFileJSON = typescript.readConfigFile(configFileName, parseConfigFileHost.readFile);\n  const overwrittenConfigFileJSON = Object.assign(Object.assign(Object.assign({}, parsedConfigFileJSON.config || {}), configOverwriteJSON), {\n    compilerOptions: Object.assign(Object.assign({}, (parsedConfigFileJSON.config || {}).compilerOptions || {}), configOverwriteJSON.compilerOptions || {})\n  });\n  const parsedConfigFile = typescript.parseJsonConfigFileContent(overwrittenConfigFileJSON, parseConfigFileHost, configFileContext);\n  return Object.assign(Object.assign({}, parsedConfigFile), {\n    options: Object.assign(Object.assign({}, parsedConfigFile.options), {\n      configFilePath: configFileName\n    }),\n    errors: parsedConfigFileJSON.error ? [parsedConfigFileJSON.error] : parsedConfigFile.errors\n  });\n}\n\nexports.parseTypeScriptConfiguration = parseTypeScriptConfiguration;\n\nfunction getDependenciesFromTypeScriptConfiguration(typescript, parsedConfiguration, configFileContext, parseConfigFileHost) {\n  let processedConfigFiles = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n\n  var _a;\n\n  const files = new Set(parsedConfiguration.fileNames);\n  const configFilePath = parsedConfiguration.options.configFilePath;\n\n  if (typeof configFilePath === 'string') {\n    files.add(configFilePath);\n  }\n\n  const dirs = new Set(Object.keys(parsedConfiguration.wildcardDirectories || {}));\n  const excluded = new Set((((_a = parsedConfiguration.raw) === null || _a === void 0 ? void 0 : _a.exclude) || []).map(path => path_1.resolve(configFileContext, path)));\n\n  for (const projectReference of parsedConfiguration.projectReferences || []) {\n    const childConfigFilePath = typescript.resolveProjectReferencePath(projectReference);\n    const childConfigContext = path_1.dirname(childConfigFilePath);\n\n    if (processedConfigFiles.includes(childConfigFilePath)) {\n      // handle circular dependencies\n      continue;\n    }\n\n    const childParsedConfiguration = parseTypeScriptConfiguration(typescript, childConfigFilePath, childConfigContext, {}, parseConfigFileHost);\n    const childDependencies = getDependenciesFromTypeScriptConfiguration(typescript, childParsedConfiguration, childConfigContext, parseConfigFileHost, [...processedConfigFiles, childConfigFilePath]);\n    childDependencies.files.forEach(file => {\n      files.add(file);\n    });\n    childDependencies.dirs.forEach(dir => {\n      dirs.add(dir);\n    });\n  }\n\n  const extensions = [typescript.Extension.Ts, typescript.Extension.Tsx, typescript.Extension.Js, typescript.Extension.Jsx, typescript.Extension.TsBuildInfo];\n  return {\n    files: Array.from(files).map(file => path_1.normalize(file)),\n    dirs: Array.from(dirs).map(dir => path_1.normalize(dir)),\n    excluded: Array.from(excluded).map(path => path_1.normalize(path)),\n    extensions: extensions\n  };\n}\n\nexports.getDependenciesFromTypeScriptConfiguration = getDependenciesFromTypeScriptConfiguration;\n\nfunction isIncrementalCompilation(options) {\n  return Boolean((options.incremental || options.composite) && !options.outFile);\n}\n\nexports.isIncrementalCompilation = isIncrementalCompilation;\n\nfunction removeJsonExtension(path) {\n  if (path.endsWith('.json')) {\n    return path.slice(0, -'.json'.length);\n  } else {\n    return path;\n  }\n}\n\nfunction getTsBuildInfoEmitOutputFilePath(typescript, options) {\n  if (typeof typescript.getTsBuildInfoEmitOutputFilePath === 'function') {\n    // old TypeScript version doesn't provides this method\n    return typescript.getTsBuildInfoEmitOutputFilePath(options);\n  } // based on the implementation from typescript\n\n\n  const configFile = options.configFilePath;\n\n  if (!isIncrementalCompilation(options)) {\n    return undefined;\n  }\n\n  if (options.tsBuildInfoFile) {\n    return options.tsBuildInfoFile;\n  }\n\n  const outPath = options.outFile || options.out;\n  let buildInfoExtensionLess;\n\n  if (outPath) {\n    buildInfoExtensionLess = removeJsonExtension(outPath);\n  } else {\n    if (!configFile) {\n      return undefined;\n    }\n\n    const configFileExtensionLess = removeJsonExtension(configFile);\n    buildInfoExtensionLess = options.outDir ? options.rootDir ? path_1.resolve(options.outDir, path_1.relative(options.rootDir, configFileExtensionLess)) : path_1.resolve(options.outDir, path_1.basename(configFileExtensionLess)) : configFileExtensionLess;\n  }\n\n  return buildInfoExtensionLess + '.tsbuildinfo';\n}\n\nfunction getArtifactsFromTypeScriptConfiguration(typescript, parsedConfiguration, configFileContext, parseConfigFileHost) {\n  let processedConfigFiles = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  const files = new Set();\n  const dirs = new Set();\n\n  if (parsedConfiguration.fileNames.length > 0) {\n    if (parsedConfiguration.options.outFile) {\n      files.add(path_1.resolve(configFileContext, parsedConfiguration.options.outFile));\n    }\n\n    const tsBuildInfoPath = getTsBuildInfoEmitOutputFilePath(typescript, parsedConfiguration.options);\n\n    if (tsBuildInfoPath) {\n      files.add(path_1.resolve(configFileContext, tsBuildInfoPath));\n    }\n\n    if (parsedConfiguration.options.outDir) {\n      dirs.add(path_1.resolve(configFileContext, parsedConfiguration.options.outDir));\n    }\n  }\n\n  for (const projectReference of parsedConfiguration.projectReferences || []) {\n    const configFile = typescript.resolveProjectReferencePath(projectReference);\n\n    if (processedConfigFiles.includes(configFile)) {\n      // handle circular dependencies\n      continue;\n    }\n\n    const parsedConfiguration = parseTypeScriptConfiguration(typescript, configFile, path_1.dirname(configFile), {}, parseConfigFileHost);\n    const childArtifacts = getArtifactsFromTypeScriptConfiguration(typescript, parsedConfiguration, configFileContext, parseConfigFileHost, [...processedConfigFiles, configFile]);\n    childArtifacts.files.forEach(file => {\n      files.add(file);\n    });\n    childArtifacts.dirs.forEach(dir => {\n      dirs.add(dir);\n    });\n  }\n\n  const extensions = [typescript.Extension.Dts, typescript.Extension.Js, typescript.Extension.TsBuildInfo];\n  return {\n    files: Array.from(files).map(file => path_1.normalize(file)),\n    dirs: Array.from(dirs).map(dir => path_1.normalize(dir)),\n    excluded: [],\n    extensions\n  };\n}\n\nexports.getArtifactsFromTypeScriptConfiguration = getArtifactsFromTypeScriptConfiguration;","map":{"version":3,"names":["Object","defineProperty","exports","value","path_1","require","parseTypeScriptConfiguration","typescript","configFileName","configFileContext","configOverwriteJSON","parseConfigFileHost","parsedConfigFileJSON","readConfigFile","readFile","overwrittenConfigFileJSON","assign","config","compilerOptions","parsedConfigFile","parseJsonConfigFileContent","options","configFilePath","errors","error","getDependenciesFromTypeScriptConfiguration","parsedConfiguration","processedConfigFiles","_a","files","Set","fileNames","add","dirs","keys","wildcardDirectories","excluded","raw","exclude","map","path","resolve","projectReference","projectReferences","childConfigFilePath","resolveProjectReferencePath","childConfigContext","dirname","includes","childParsedConfiguration","childDependencies","forEach","file","dir","extensions","Extension","Ts","Tsx","Js","Jsx","TsBuildInfo","Array","from","normalize","isIncrementalCompilation","Boolean","incremental","composite","outFile","removeJsonExtension","endsWith","slice","length","getTsBuildInfoEmitOutputFilePath","configFile","undefined","tsBuildInfoFile","outPath","out","buildInfoExtensionLess","configFileExtensionLess","outDir","rootDir","relative","basename","getArtifactsFromTypeScriptConfiguration","tsBuildInfoPath","childArtifacts","Dts"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/fork-ts-checker-webpack-plugin/lib/typescript-reporter/reporter/TypeScriptConfigurationParser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path_1 = require(\"path\");\nfunction parseTypeScriptConfiguration(typescript, configFileName, configFileContext, configOverwriteJSON, parseConfigFileHost) {\n    const parsedConfigFileJSON = typescript.readConfigFile(configFileName, parseConfigFileHost.readFile);\n    const overwrittenConfigFileJSON = Object.assign(Object.assign(Object.assign({}, (parsedConfigFileJSON.config || {})), configOverwriteJSON), { compilerOptions: Object.assign(Object.assign({}, ((parsedConfigFileJSON.config || {}).compilerOptions || {})), (configOverwriteJSON.compilerOptions || {})) });\n    const parsedConfigFile = typescript.parseJsonConfigFileContent(overwrittenConfigFileJSON, parseConfigFileHost, configFileContext);\n    return Object.assign(Object.assign({}, parsedConfigFile), { options: Object.assign(Object.assign({}, parsedConfigFile.options), { configFilePath: configFileName }), errors: parsedConfigFileJSON.error ? [parsedConfigFileJSON.error] : parsedConfigFile.errors });\n}\nexports.parseTypeScriptConfiguration = parseTypeScriptConfiguration;\nfunction getDependenciesFromTypeScriptConfiguration(typescript, parsedConfiguration, configFileContext, parseConfigFileHost, processedConfigFiles = []) {\n    var _a;\n    const files = new Set(parsedConfiguration.fileNames);\n    const configFilePath = parsedConfiguration.options.configFilePath;\n    if (typeof configFilePath === 'string') {\n        files.add(configFilePath);\n    }\n    const dirs = new Set(Object.keys(parsedConfiguration.wildcardDirectories || {}));\n    const excluded = new Set((((_a = parsedConfiguration.raw) === null || _a === void 0 ? void 0 : _a.exclude) || []).map((path) => path_1.resolve(configFileContext, path)));\n    for (const projectReference of parsedConfiguration.projectReferences || []) {\n        const childConfigFilePath = typescript.resolveProjectReferencePath(projectReference);\n        const childConfigContext = path_1.dirname(childConfigFilePath);\n        if (processedConfigFiles.includes(childConfigFilePath)) {\n            // handle circular dependencies\n            continue;\n        }\n        const childParsedConfiguration = parseTypeScriptConfiguration(typescript, childConfigFilePath, childConfigContext, {}, parseConfigFileHost);\n        const childDependencies = getDependenciesFromTypeScriptConfiguration(typescript, childParsedConfiguration, childConfigContext, parseConfigFileHost, [...processedConfigFiles, childConfigFilePath]);\n        childDependencies.files.forEach((file) => {\n            files.add(file);\n        });\n        childDependencies.dirs.forEach((dir) => {\n            dirs.add(dir);\n        });\n    }\n    const extensions = [\n        typescript.Extension.Ts,\n        typescript.Extension.Tsx,\n        typescript.Extension.Js,\n        typescript.Extension.Jsx,\n        typescript.Extension.TsBuildInfo,\n    ];\n    return {\n        files: Array.from(files).map((file) => path_1.normalize(file)),\n        dirs: Array.from(dirs).map((dir) => path_1.normalize(dir)),\n        excluded: Array.from(excluded).map((path) => path_1.normalize(path)),\n        extensions: extensions,\n    };\n}\nexports.getDependenciesFromTypeScriptConfiguration = getDependenciesFromTypeScriptConfiguration;\nfunction isIncrementalCompilation(options) {\n    return Boolean((options.incremental || options.composite) && !options.outFile);\n}\nexports.isIncrementalCompilation = isIncrementalCompilation;\nfunction removeJsonExtension(path) {\n    if (path.endsWith('.json')) {\n        return path.slice(0, -'.json'.length);\n    }\n    else {\n        return path;\n    }\n}\nfunction getTsBuildInfoEmitOutputFilePath(typescript, options) {\n    if (typeof typescript.getTsBuildInfoEmitOutputFilePath === 'function') {\n        // old TypeScript version doesn't provides this method\n        return typescript.getTsBuildInfoEmitOutputFilePath(options);\n    }\n    // based on the implementation from typescript\n    const configFile = options.configFilePath;\n    if (!isIncrementalCompilation(options)) {\n        return undefined;\n    }\n    if (options.tsBuildInfoFile) {\n        return options.tsBuildInfoFile;\n    }\n    const outPath = options.outFile || options.out;\n    let buildInfoExtensionLess;\n    if (outPath) {\n        buildInfoExtensionLess = removeJsonExtension(outPath);\n    }\n    else {\n        if (!configFile) {\n            return undefined;\n        }\n        const configFileExtensionLess = removeJsonExtension(configFile);\n        buildInfoExtensionLess = options.outDir\n            ? options.rootDir\n                ? path_1.resolve(options.outDir, path_1.relative(options.rootDir, configFileExtensionLess))\n                : path_1.resolve(options.outDir, path_1.basename(configFileExtensionLess))\n            : configFileExtensionLess;\n    }\n    return buildInfoExtensionLess + '.tsbuildinfo';\n}\nfunction getArtifactsFromTypeScriptConfiguration(typescript, parsedConfiguration, configFileContext, parseConfigFileHost, processedConfigFiles = []) {\n    const files = new Set();\n    const dirs = new Set();\n    if (parsedConfiguration.fileNames.length > 0) {\n        if (parsedConfiguration.options.outFile) {\n            files.add(path_1.resolve(configFileContext, parsedConfiguration.options.outFile));\n        }\n        const tsBuildInfoPath = getTsBuildInfoEmitOutputFilePath(typescript, parsedConfiguration.options);\n        if (tsBuildInfoPath) {\n            files.add(path_1.resolve(configFileContext, tsBuildInfoPath));\n        }\n        if (parsedConfiguration.options.outDir) {\n            dirs.add(path_1.resolve(configFileContext, parsedConfiguration.options.outDir));\n        }\n    }\n    for (const projectReference of parsedConfiguration.projectReferences || []) {\n        const configFile = typescript.resolveProjectReferencePath(projectReference);\n        if (processedConfigFiles.includes(configFile)) {\n            // handle circular dependencies\n            continue;\n        }\n        const parsedConfiguration = parseTypeScriptConfiguration(typescript, configFile, path_1.dirname(configFile), {}, parseConfigFileHost);\n        const childArtifacts = getArtifactsFromTypeScriptConfiguration(typescript, parsedConfiguration, configFileContext, parseConfigFileHost, [...processedConfigFiles, configFile]);\n        childArtifacts.files.forEach((file) => {\n            files.add(file);\n        });\n        childArtifacts.dirs.forEach((dir) => {\n            dirs.add(dir);\n        });\n    }\n    const extensions = [\n        typescript.Extension.Dts,\n        typescript.Extension.Js,\n        typescript.Extension.TsBuildInfo,\n    ];\n    return {\n        files: Array.from(files).map((file) => path_1.normalize(file)),\n        dirs: Array.from(dirs).map((dir) => path_1.normalize(dir)),\n        excluded: [],\n        extensions,\n    };\n}\nexports.getArtifactsFromTypeScriptConfiguration = getArtifactsFromTypeScriptConfiguration;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;;AACA,SAASC,4BAAT,CAAsCC,UAAtC,EAAkDC,cAAlD,EAAkEC,iBAAlE,EAAqFC,mBAArF,EAA0GC,mBAA1G,EAA+H;EAC3H,MAAMC,oBAAoB,GAAGL,UAAU,CAACM,cAAX,CAA0BL,cAA1B,EAA0CG,mBAAmB,CAACG,QAA9D,CAA7B;EACA,MAAMC,yBAAyB,GAAGf,MAAM,CAACgB,MAAP,CAAchB,MAAM,CAACgB,MAAP,CAAchB,MAAM,CAACgB,MAAP,CAAc,EAAd,EAAmBJ,oBAAoB,CAACK,MAArB,IAA+B,EAAlD,CAAd,EAAsEP,mBAAtE,CAAd,EAA0G;IAAEQ,eAAe,EAAElB,MAAM,CAACgB,MAAP,CAAchB,MAAM,CAACgB,MAAP,CAAc,EAAd,EAAmB,CAACJ,oBAAoB,CAACK,MAArB,IAA+B,EAAhC,EAAoCC,eAApC,IAAuD,EAA1E,CAAd,EAA+FR,mBAAmB,CAACQ,eAApB,IAAuC,EAAtI;EAAnB,CAA1G,CAAlC;EACA,MAAMC,gBAAgB,GAAGZ,UAAU,CAACa,0BAAX,CAAsCL,yBAAtC,EAAiEJ,mBAAjE,EAAsFF,iBAAtF,CAAzB;EACA,OAAOT,MAAM,CAACgB,MAAP,CAAchB,MAAM,CAACgB,MAAP,CAAc,EAAd,EAAkBG,gBAAlB,CAAd,EAAmD;IAAEE,OAAO,EAAErB,MAAM,CAACgB,MAAP,CAAchB,MAAM,CAACgB,MAAP,CAAc,EAAd,EAAkBG,gBAAgB,CAACE,OAAnC,CAAd,EAA2D;MAAEC,cAAc,EAAEd;IAAlB,CAA3D,CAAX;IAA2Ge,MAAM,EAAEX,oBAAoB,CAACY,KAArB,GAA6B,CAACZ,oBAAoB,CAACY,KAAtB,CAA7B,GAA4DL,gBAAgB,CAACI;EAAhM,CAAnD,CAAP;AACH;;AACDrB,OAAO,CAACI,4BAAR,GAAuCA,4BAAvC;;AACA,SAASmB,0CAAT,CAAoDlB,UAApD,EAAgEmB,mBAAhE,EAAqFjB,iBAArF,EAAwGE,mBAAxG,EAAwJ;EAAA,IAA3BgB,oBAA2B,uEAAJ,EAAI;;EACpJ,IAAIC,EAAJ;;EACA,MAAMC,KAAK,GAAG,IAAIC,GAAJ,CAAQJ,mBAAmB,CAACK,SAA5B,CAAd;EACA,MAAMT,cAAc,GAAGI,mBAAmB,CAACL,OAApB,CAA4BC,cAAnD;;EACA,IAAI,OAAOA,cAAP,KAA0B,QAA9B,EAAwC;IACpCO,KAAK,CAACG,GAAN,CAAUV,cAAV;EACH;;EACD,MAAMW,IAAI,GAAG,IAAIH,GAAJ,CAAQ9B,MAAM,CAACkC,IAAP,CAAYR,mBAAmB,CAACS,mBAApB,IAA2C,EAAvD,CAAR,CAAb;EACA,MAAMC,QAAQ,GAAG,IAAIN,GAAJ,CAAQ,CAAC,CAAC,CAACF,EAAE,GAAGF,mBAAmB,CAACW,GAA1B,MAAmC,IAAnC,IAA2CT,EAAE,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,EAAE,CAACU,OAAxE,KAAoF,EAArF,EAAyFC,GAAzF,CAA8FC,IAAD,IAAUpC,MAAM,CAACqC,OAAP,CAAehC,iBAAf,EAAkC+B,IAAlC,CAAvG,CAAR,CAAjB;;EACA,KAAK,MAAME,gBAAX,IAA+BhB,mBAAmB,CAACiB,iBAApB,IAAyC,EAAxE,EAA4E;IACxE,MAAMC,mBAAmB,GAAGrC,UAAU,CAACsC,2BAAX,CAAuCH,gBAAvC,CAA5B;IACA,MAAMI,kBAAkB,GAAG1C,MAAM,CAAC2C,OAAP,CAAeH,mBAAf,CAA3B;;IACA,IAAIjB,oBAAoB,CAACqB,QAArB,CAA8BJ,mBAA9B,CAAJ,EAAwD;MACpD;MACA;IACH;;IACD,MAAMK,wBAAwB,GAAG3C,4BAA4B,CAACC,UAAD,EAAaqC,mBAAb,EAAkCE,kBAAlC,EAAsD,EAAtD,EAA0DnC,mBAA1D,CAA7D;IACA,MAAMuC,iBAAiB,GAAGzB,0CAA0C,CAAClB,UAAD,EAAa0C,wBAAb,EAAuCH,kBAAvC,EAA2DnC,mBAA3D,EAAgF,CAAC,GAAGgB,oBAAJ,EAA0BiB,mBAA1B,CAAhF,CAApE;IACAM,iBAAiB,CAACrB,KAAlB,CAAwBsB,OAAxB,CAAiCC,IAAD,IAAU;MACtCvB,KAAK,CAACG,GAAN,CAAUoB,IAAV;IACH,CAFD;IAGAF,iBAAiB,CAACjB,IAAlB,CAAuBkB,OAAvB,CAAgCE,GAAD,IAAS;MACpCpB,IAAI,CAACD,GAAL,CAASqB,GAAT;IACH,CAFD;EAGH;;EACD,MAAMC,UAAU,GAAG,CACf/C,UAAU,CAACgD,SAAX,CAAqBC,EADN,EAEfjD,UAAU,CAACgD,SAAX,CAAqBE,GAFN,EAGflD,UAAU,CAACgD,SAAX,CAAqBG,EAHN,EAIfnD,UAAU,CAACgD,SAAX,CAAqBI,GAJN,EAKfpD,UAAU,CAACgD,SAAX,CAAqBK,WALN,CAAnB;EAOA,OAAO;IACH/B,KAAK,EAAEgC,KAAK,CAACC,IAAN,CAAWjC,KAAX,EAAkBU,GAAlB,CAAuBa,IAAD,IAAUhD,MAAM,CAAC2D,SAAP,CAAiBX,IAAjB,CAAhC,CADJ;IAEHnB,IAAI,EAAE4B,KAAK,CAACC,IAAN,CAAW7B,IAAX,EAAiBM,GAAjB,CAAsBc,GAAD,IAASjD,MAAM,CAAC2D,SAAP,CAAiBV,GAAjB,CAA9B,CAFH;IAGHjB,QAAQ,EAAEyB,KAAK,CAACC,IAAN,CAAW1B,QAAX,EAAqBG,GAArB,CAA0BC,IAAD,IAAUpC,MAAM,CAAC2D,SAAP,CAAiBvB,IAAjB,CAAnC,CAHP;IAIHc,UAAU,EAAEA;EAJT,CAAP;AAMH;;AACDpD,OAAO,CAACuB,0CAAR,GAAqDA,0CAArD;;AACA,SAASuC,wBAAT,CAAkC3C,OAAlC,EAA2C;EACvC,OAAO4C,OAAO,CAAC,CAAC5C,OAAO,CAAC6C,WAAR,IAAuB7C,OAAO,CAAC8C,SAAhC,KAA8C,CAAC9C,OAAO,CAAC+C,OAAxD,CAAd;AACH;;AACDlE,OAAO,CAAC8D,wBAAR,GAAmCA,wBAAnC;;AACA,SAASK,mBAAT,CAA6B7B,IAA7B,EAAmC;EAC/B,IAAIA,IAAI,CAAC8B,QAAL,CAAc,OAAd,CAAJ,EAA4B;IACxB,OAAO9B,IAAI,CAAC+B,KAAL,CAAW,CAAX,EAAc,CAAC,QAAQC,MAAvB,CAAP;EACH,CAFD,MAGK;IACD,OAAOhC,IAAP;EACH;AACJ;;AACD,SAASiC,gCAAT,CAA0ClE,UAA1C,EAAsDc,OAAtD,EAA+D;EAC3D,IAAI,OAAOd,UAAU,CAACkE,gCAAlB,KAAuD,UAA3D,EAAuE;IACnE;IACA,OAAOlE,UAAU,CAACkE,gCAAX,CAA4CpD,OAA5C,CAAP;EACH,CAJ0D,CAK3D;;;EACA,MAAMqD,UAAU,GAAGrD,OAAO,CAACC,cAA3B;;EACA,IAAI,CAAC0C,wBAAwB,CAAC3C,OAAD,CAA7B,EAAwC;IACpC,OAAOsD,SAAP;EACH;;EACD,IAAItD,OAAO,CAACuD,eAAZ,EAA6B;IACzB,OAAOvD,OAAO,CAACuD,eAAf;EACH;;EACD,MAAMC,OAAO,GAAGxD,OAAO,CAAC+C,OAAR,IAAmB/C,OAAO,CAACyD,GAA3C;EACA,IAAIC,sBAAJ;;EACA,IAAIF,OAAJ,EAAa;IACTE,sBAAsB,GAAGV,mBAAmB,CAACQ,OAAD,CAA5C;EACH,CAFD,MAGK;IACD,IAAI,CAACH,UAAL,EAAiB;MACb,OAAOC,SAAP;IACH;;IACD,MAAMK,uBAAuB,GAAGX,mBAAmB,CAACK,UAAD,CAAnD;IACAK,sBAAsB,GAAG1D,OAAO,CAAC4D,MAAR,GACnB5D,OAAO,CAAC6D,OAAR,GACI9E,MAAM,CAACqC,OAAP,CAAepB,OAAO,CAAC4D,MAAvB,EAA+B7E,MAAM,CAAC+E,QAAP,CAAgB9D,OAAO,CAAC6D,OAAxB,EAAiCF,uBAAjC,CAA/B,CADJ,GAEI5E,MAAM,CAACqC,OAAP,CAAepB,OAAO,CAAC4D,MAAvB,EAA+B7E,MAAM,CAACgF,QAAP,CAAgBJ,uBAAhB,CAA/B,CAHe,GAInBA,uBAJN;EAKH;;EACD,OAAOD,sBAAsB,GAAG,cAAhC;AACH;;AACD,SAASM,uCAAT,CAAiD9E,UAAjD,EAA6DmB,mBAA7D,EAAkFjB,iBAAlF,EAAqGE,mBAArG,EAAqJ;EAAA,IAA3BgB,oBAA2B,uEAAJ,EAAI;EACjJ,MAAME,KAAK,GAAG,IAAIC,GAAJ,EAAd;EACA,MAAMG,IAAI,GAAG,IAAIH,GAAJ,EAAb;;EACA,IAAIJ,mBAAmB,CAACK,SAApB,CAA8ByC,MAA9B,GAAuC,CAA3C,EAA8C;IAC1C,IAAI9C,mBAAmB,CAACL,OAApB,CAA4B+C,OAAhC,EAAyC;MACrCvC,KAAK,CAACG,GAAN,CAAU5B,MAAM,CAACqC,OAAP,CAAehC,iBAAf,EAAkCiB,mBAAmB,CAACL,OAApB,CAA4B+C,OAA9D,CAAV;IACH;;IACD,MAAMkB,eAAe,GAAGb,gCAAgC,CAAClE,UAAD,EAAamB,mBAAmB,CAACL,OAAjC,CAAxD;;IACA,IAAIiE,eAAJ,EAAqB;MACjBzD,KAAK,CAACG,GAAN,CAAU5B,MAAM,CAACqC,OAAP,CAAehC,iBAAf,EAAkC6E,eAAlC,CAAV;IACH;;IACD,IAAI5D,mBAAmB,CAACL,OAApB,CAA4B4D,MAAhC,EAAwC;MACpChD,IAAI,CAACD,GAAL,CAAS5B,MAAM,CAACqC,OAAP,CAAehC,iBAAf,EAAkCiB,mBAAmB,CAACL,OAApB,CAA4B4D,MAA9D,CAAT;IACH;EACJ;;EACD,KAAK,MAAMvC,gBAAX,IAA+BhB,mBAAmB,CAACiB,iBAApB,IAAyC,EAAxE,EAA4E;IACxE,MAAM+B,UAAU,GAAGnE,UAAU,CAACsC,2BAAX,CAAuCH,gBAAvC,CAAnB;;IACA,IAAIf,oBAAoB,CAACqB,QAArB,CAA8B0B,UAA9B,CAAJ,EAA+C;MAC3C;MACA;IACH;;IACD,MAAMhD,mBAAmB,GAAGpB,4BAA4B,CAACC,UAAD,EAAamE,UAAb,EAAyBtE,MAAM,CAAC2C,OAAP,CAAe2B,UAAf,CAAzB,EAAqD,EAArD,EAAyD/D,mBAAzD,CAAxD;IACA,MAAM4E,cAAc,GAAGF,uCAAuC,CAAC9E,UAAD,EAAamB,mBAAb,EAAkCjB,iBAAlC,EAAqDE,mBAArD,EAA0E,CAAC,GAAGgB,oBAAJ,EAA0B+C,UAA1B,CAA1E,CAA9D;IACAa,cAAc,CAAC1D,KAAf,CAAqBsB,OAArB,CAA8BC,IAAD,IAAU;MACnCvB,KAAK,CAACG,GAAN,CAAUoB,IAAV;IACH,CAFD;IAGAmC,cAAc,CAACtD,IAAf,CAAoBkB,OAApB,CAA6BE,GAAD,IAAS;MACjCpB,IAAI,CAACD,GAAL,CAASqB,GAAT;IACH,CAFD;EAGH;;EACD,MAAMC,UAAU,GAAG,CACf/C,UAAU,CAACgD,SAAX,CAAqBiC,GADN,EAEfjF,UAAU,CAACgD,SAAX,CAAqBG,EAFN,EAGfnD,UAAU,CAACgD,SAAX,CAAqBK,WAHN,CAAnB;EAKA,OAAO;IACH/B,KAAK,EAAEgC,KAAK,CAACC,IAAN,CAAWjC,KAAX,EAAkBU,GAAlB,CAAuBa,IAAD,IAAUhD,MAAM,CAAC2D,SAAP,CAAiBX,IAAjB,CAAhC,CADJ;IAEHnB,IAAI,EAAE4B,KAAK,CAACC,IAAN,CAAW7B,IAAX,EAAiBM,GAAjB,CAAsBc,GAAD,IAASjD,MAAM,CAAC2D,SAAP,CAAiBV,GAAjB,CAA9B,CAFH;IAGHjB,QAAQ,EAAE,EAHP;IAIHkB;EAJG,CAAP;AAMH;;AACDpD,OAAO,CAACmF,uCAAR,GAAkDA,uCAAlD"},"metadata":{},"sourceType":"script"}