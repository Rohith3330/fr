{"ast":null,"code":"function removeItemAndRedundantWhiteSpace(list, item) {\n  var prev = item.prev;\n  var next = item.next;\n\n  if (next !== null) {\n    if (next.data.type === 'WhiteSpace' && (prev === null || prev.data.type === 'WhiteSpace')) {\n      list.remove(next);\n    }\n  } else if (prev !== null && prev.data.type === 'WhiteSpace') {\n    list.remove(prev);\n  }\n\n  list.remove(item);\n}\n\nmodule.exports = function compressBorder(node) {\n  node.children.each(function (node, item, list) {\n    if (node.type === 'Identifier' && node.name.toLowerCase() === 'none') {\n      if (list.head === list.tail) {\n        // replace `none` for zero when `none` is a single term\n        item.data = {\n          type: 'Number',\n          loc: node.loc,\n          value: '0'\n        };\n      } else {\n        removeItemAndRedundantWhiteSpace(list, item);\n      }\n    }\n  });\n};","map":{"version":3,"names":["removeItemAndRedundantWhiteSpace","list","item","prev","next","data","type","remove","module","exports","compressBorder","node","children","each","name","toLowerCase","head","tail","loc","value"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/csso/lib/replace/property/border.js"],"sourcesContent":["function removeItemAndRedundantWhiteSpace(list, item) {\n    var prev = item.prev;\n    var next = item.next;\n\n    if (next !== null) {\n        if (next.data.type === 'WhiteSpace' && (prev === null || prev.data.type === 'WhiteSpace')) {\n            list.remove(next);\n        }\n    } else if (prev !== null && prev.data.type === 'WhiteSpace') {\n        list.remove(prev);\n    }\n\n    list.remove(item);\n}\n\nmodule.exports = function compressBorder(node) {\n    node.children.each(function(node, item, list) {\n        if (node.type === 'Identifier' && node.name.toLowerCase() === 'none') {\n            if (list.head === list.tail) {\n                // replace `none` for zero when `none` is a single term\n                item.data = {\n                    type: 'Number',\n                    loc: node.loc,\n                    value: '0'\n                };\n            } else {\n                removeItemAndRedundantWhiteSpace(list, item);\n            }\n        }\n    });\n};\n"],"mappings":"AAAA,SAASA,gCAAT,CAA0CC,IAA1C,EAAgDC,IAAhD,EAAsD;EAClD,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;EACA,IAAIC,IAAI,GAAGF,IAAI,CAACE,IAAhB;;EAEA,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACf,IAAIA,IAAI,CAACC,IAAL,CAAUC,IAAV,KAAmB,YAAnB,KAAoCH,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACE,IAAL,CAAUC,IAAV,KAAmB,YAAxE,CAAJ,EAA2F;MACvFL,IAAI,CAACM,MAAL,CAAYH,IAAZ;IACH;EACJ,CAJD,MAIO,IAAID,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACE,IAAL,CAAUC,IAAV,KAAmB,YAAxC,EAAsD;IACzDL,IAAI,CAACM,MAAL,CAAYJ,IAAZ;EACH;;EAEDF,IAAI,CAACM,MAAL,CAAYL,IAAZ;AACH;;AAEDM,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;EAC3CA,IAAI,CAACC,QAAL,CAAcC,IAAd,CAAmB,UAASF,IAAT,EAAeT,IAAf,EAAqBD,IAArB,EAA2B;IAC1C,IAAIU,IAAI,CAACL,IAAL,KAAc,YAAd,IAA8BK,IAAI,CAACG,IAAL,CAAUC,WAAV,OAA4B,MAA9D,EAAsE;MAClE,IAAId,IAAI,CAACe,IAAL,KAAcf,IAAI,CAACgB,IAAvB,EAA6B;QACzB;QACAf,IAAI,CAACG,IAAL,GAAY;UACRC,IAAI,EAAE,QADE;UAERY,GAAG,EAAEP,IAAI,CAACO,GAFF;UAGRC,KAAK,EAAE;QAHC,CAAZ;MAKH,CAPD,MAOO;QACHnB,gCAAgC,CAACC,IAAD,EAAOC,IAAP,CAAhC;MACH;IACJ;EACJ,CAbD;AAcH,CAfD"},"metadata":{},"sourceType":"script"}