{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nconst log = require('debug')('eslint-module-utils:ModuleCache');\n\nclass ModuleCache {\n  constructor(map) {\n    this.map = map || new Map();\n  }\n  /**\n   * returns value for returning inline\n   * @param {[type]} cacheKey [description]\n   * @param {[type]} result   [description]\n   */\n\n\n  set(cacheKey, result) {\n    this.map.set(cacheKey, {\n      result,\n      lastSeen: process.hrtime()\n    });\n    log('setting entry for', cacheKey);\n    return result;\n  }\n\n  get(cacheKey, settings) {\n    if (this.map.has(cacheKey)) {\n      const f = this.map.get(cacheKey); // check freshness\n\n      if (process.hrtime(f.lastSeen)[0] < settings.lifetime) return f.result;\n    } else log('cache miss for', cacheKey); // cache miss\n\n\n    return undefined;\n  }\n\n}\n\nModuleCache.getSettings = function (settings) {\n  const cacheSettings = Object.assign({\n    lifetime: 30 // seconds\n\n  }, settings['import/cache']); // parse infinity\n\n  if (cacheSettings.lifetime === '∞' || cacheSettings.lifetime === 'Infinity') {\n    cacheSettings.lifetime = Infinity;\n  }\n\n  return cacheSettings;\n};\n\nexports.default = ModuleCache;","map":{"version":3,"names":["exports","__esModule","log","require","ModuleCache","constructor","map","Map","set","cacheKey","result","lastSeen","process","hrtime","get","settings","has","f","lifetime","undefined","getSettings","cacheSettings","Object","assign","Infinity","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-module-utils/ModuleCache.js"],"sourcesContent":["'use strict';\nexports.__esModule = true;\n\nconst log = require('debug')('eslint-module-utils:ModuleCache');\n\nclass ModuleCache {\n  constructor(map) {\n    this.map = map || new Map();\n  }\n\n  /**\n   * returns value for returning inline\n   * @param {[type]} cacheKey [description]\n   * @param {[type]} result   [description]\n   */\n  set(cacheKey, result) {\n    this.map.set(cacheKey, { result, lastSeen: process.hrtime() });\n    log('setting entry for', cacheKey);\n    return result;\n  }\n\n  get(cacheKey, settings) {\n    if (this.map.has(cacheKey)) {\n      const f = this.map.get(cacheKey);\n      // check freshness\n      if (process.hrtime(f.lastSeen)[0] < settings.lifetime) return f.result;\n    } else log('cache miss for', cacheKey);\n    // cache miss\n    return undefined;\n  }\n\n}\n\nModuleCache.getSettings = function (settings) {\n  const cacheSettings = Object.assign({\n    lifetime: 30,  // seconds\n  }, settings['import/cache']);\n\n  // parse infinity\n  if (cacheSettings.lifetime === '∞' || cacheSettings.lifetime === 'Infinity') {\n    cacheSettings.lifetime = Infinity;\n  }\n\n  return cacheSettings;\n};\n\nexports.default = ModuleCache;\n"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqB,IAArB;;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,iCAAjB,CAAZ;;AAEA,MAAMC,WAAN,CAAkB;EAChBC,WAAW,CAACC,GAAD,EAAM;IACf,KAAKA,GAAL,GAAWA,GAAG,IAAI,IAAIC,GAAJ,EAAlB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmB;IACpB,KAAKJ,GAAL,CAASE,GAAT,CAAaC,QAAb,EAAuB;MAAEC,MAAF;MAAUC,QAAQ,EAAEC,OAAO,CAACC,MAAR;IAApB,CAAvB;IACAX,GAAG,CAAC,mBAAD,EAAsBO,QAAtB,CAAH;IACA,OAAOC,MAAP;EACD;;EAEDI,GAAG,CAACL,QAAD,EAAWM,QAAX,EAAqB;IACtB,IAAI,KAAKT,GAAL,CAASU,GAAT,CAAaP,QAAb,CAAJ,EAA4B;MAC1B,MAAMQ,CAAC,GAAG,KAAKX,GAAL,CAASQ,GAAT,CAAaL,QAAb,CAAV,CAD0B,CAE1B;;MACA,IAAIG,OAAO,CAACC,MAAR,CAAeI,CAAC,CAACN,QAAjB,EAA2B,CAA3B,IAAgCI,QAAQ,CAACG,QAA7C,EAAuD,OAAOD,CAAC,CAACP,MAAT;IACxD,CAJD,MAIOR,GAAG,CAAC,gBAAD,EAAmBO,QAAnB,CAAH,CALe,CAMtB;;;IACA,OAAOU,SAAP;EACD;;AAxBe;;AA4BlBf,WAAW,CAACgB,WAAZ,GAA0B,UAAUL,QAAV,EAAoB;EAC5C,MAAMM,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc;IAClCL,QAAQ,EAAE,EADwB,CACnB;;EADmB,CAAd,EAEnBH,QAAQ,CAAC,cAAD,CAFW,CAAtB,CAD4C,CAK5C;;EACA,IAAIM,aAAa,CAACH,QAAd,KAA2B,GAA3B,IAAkCG,aAAa,CAACH,QAAd,KAA2B,UAAjE,EAA6E;IAC3EG,aAAa,CAACH,QAAd,GAAyBM,QAAzB;EACD;;EAED,OAAOH,aAAP;AACD,CAXD;;AAaArB,OAAO,CAACyB,OAAR,GAAkBrB,WAAlB"},"metadata":{},"sourceType":"script"}