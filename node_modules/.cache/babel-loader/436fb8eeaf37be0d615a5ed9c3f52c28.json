{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.run = run;\n\nfunction _traverse() {\n  const data = require(\"@babel/traverse\");\n\n  _traverse = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _pluginPass = require(\"./plugin-pass\");\n\nvar _blockHoistPlugin = require(\"./block-hoist-plugin\");\n\nvar _normalizeOpts = require(\"./normalize-opts\");\n\nvar _normalizeFile = require(\"./normalize-file\");\n\nvar _generate = require(\"./file/generate\");\n\nvar _deepArray = require(\"../config/helpers/deep-array\");\n\nfunction* run(config, code, ast) {\n  const file = yield* (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code, ast);\n  const opts = file.opts;\n\n  try {\n    yield* transformFile(file, config.passes);\n  } catch (e) {\n    var _opts$filename;\n\n    e.message = `${(_opts$filename = opts.filename) != null ? _opts$filename : \"unknown file\"}: ${e.message}`;\n\n    if (!e.code) {\n      e.code = \"BABEL_TRANSFORM_ERROR\";\n    }\n\n    throw e;\n  }\n\n  let outputCode, outputMap;\n\n  try {\n    if (opts.code !== false) {\n      ({\n        outputCode,\n        outputMap\n      } = (0, _generate.default)(config.passes, file));\n    }\n  } catch (e) {\n    var _opts$filename2;\n\n    e.message = `${(_opts$filename2 = opts.filename) != null ? _opts$filename2 : \"unknown file\"}: ${e.message}`;\n\n    if (!e.code) {\n      e.code = \"BABEL_GENERATE_ERROR\";\n    }\n\n    throw e;\n  }\n\n  return {\n    metadata: file.metadata,\n    options: opts,\n    ast: opts.ast === true ? file.ast : null,\n    code: outputCode === undefined ? null : outputCode,\n    map: outputMap === undefined ? null : outputMap,\n    sourceType: file.ast.program.sourceType,\n    externalDependencies: (0, _deepArray.flattenToSet)(config.externalDependencies)\n  };\n}\n\nfunction* transformFile(file, pluginPasses) {\n  for (const pluginPairs of pluginPasses) {\n    const passPairs = [];\n    const passes = [];\n    const visitors = [];\n\n    for (const plugin of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {\n      const pass = new _pluginPass.default(file, plugin.key, plugin.options);\n      passPairs.push([plugin, pass]);\n      passes.push(pass);\n      visitors.push(plugin.visitor);\n    }\n\n    for (const [plugin, pass] of passPairs) {\n      const fn = plugin.pre;\n\n      if (fn) {\n        const result = fn.call(pass, file);\n        yield* [];\n\n        if (isThenable(result)) {\n          throw new Error(`You appear to be using an plugin with an async .pre, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);\n        }\n      }\n    }\n\n    const visitor = _traverse().default.visitors.merge(visitors, passes, file.opts.wrapPluginVisitorMethod);\n\n    (0, _traverse().default)(file.ast, visitor, file.scope);\n\n    for (const [plugin, pass] of passPairs) {\n      const fn = plugin.post;\n\n      if (fn) {\n        const result = fn.call(pass, file);\n        yield* [];\n\n        if (isThenable(result)) {\n          throw new Error(`You appear to be using an plugin with an async .post, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);\n        }\n      }\n    }\n  }\n}\n\nfunction isThenable(val) {\n  return !!val && (typeof val === \"object\" || typeof val === \"function\") && !!val.then && typeof val.then === \"function\";\n}\n\n0 && 0;","map":{"version":3,"mappings":"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","names":["_traverse","run","config","code","ast","file","passes","opts","transformFile","e","message","filename","outputCode","outputMap","metadata","options","undefined","map","sourceType","program","externalDependencies","pluginPasses","pluginPairs","passPairs","visitors","plugin","concat","pass","PluginPass","key","push","visitor","fn","pre","result","call","isThenable","Error","traverse","merge","wrapPluginVisitorMethod","scope","post","val","then"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\transformation\\index.ts"],"sourcesContent":["import traverse from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\ntype SourceMap = any;\nimport type { Handler } from \"gensync\";\n\nimport type { ResolvedConfig, Plugin, PluginPasses } from \"../config\";\n\nimport PluginPass from \"./plugin-pass\";\nimport loadBlockHoistPlugin from \"./block-hoist-plugin\";\nimport normalizeOptions from \"./normalize-opts\";\nimport normalizeFile from \"./normalize-file\";\n\nimport generateCode from \"./file/generate\";\nimport type File from \"./file/file\";\n\nimport { flattenToSet } from \"../config/helpers/deep-array\";\n\nexport type FileResultCallback = {\n  (err: Error, file: null): void;\n  (err: null, file: FileResult | null): void;\n};\n\nexport type FileResult = {\n  metadata: { [key: string]: any };\n  options: { [key: string]: any };\n  ast: t.File | null;\n  code: string | null;\n  map: SourceMap | null;\n  sourceType: \"script\" | \"module\";\n  externalDependencies: Set<string>;\n};\n\nexport function* run(\n  config: ResolvedConfig,\n  code: string,\n  ast?: t.File | t.Program | null,\n): Handler<FileResult> {\n  const file = yield* normalizeFile(\n    config.passes,\n    normalizeOptions(config),\n    code,\n    ast,\n  );\n\n  const opts = file.opts;\n  try {\n    yield* transformFile(file, config.passes);\n  } catch (e) {\n    e.message = `${opts.filename ?? \"unknown file\"}: ${e.message}`;\n    if (!e.code) {\n      e.code = \"BABEL_TRANSFORM_ERROR\";\n    }\n    throw e;\n  }\n\n  let outputCode, outputMap;\n  try {\n    if (opts.code !== false) {\n      ({ outputCode, outputMap } = generateCode(config.passes, file));\n    }\n  } catch (e) {\n    e.message = `${opts.filename ?? \"unknown file\"}: ${e.message}`;\n    if (!e.code) {\n      e.code = \"BABEL_GENERATE_ERROR\";\n    }\n    throw e;\n  }\n\n  return {\n    metadata: file.metadata,\n    options: opts,\n    ast: opts.ast === true ? file.ast : null,\n    code: outputCode === undefined ? null : outputCode,\n    map: outputMap === undefined ? null : outputMap,\n    sourceType: file.ast.program.sourceType,\n    externalDependencies: flattenToSet(config.externalDependencies),\n  };\n}\n\nfunction* transformFile(file: File, pluginPasses: PluginPasses): Handler<void> {\n  for (const pluginPairs of pluginPasses) {\n    const passPairs: [Plugin, PluginPass][] = [];\n    const passes = [];\n    const visitors = [];\n\n    for (const plugin of pluginPairs.concat([loadBlockHoistPlugin()])) {\n      const pass = new PluginPass(file, plugin.key, plugin.options);\n\n      passPairs.push([plugin, pass]);\n      passes.push(pass);\n      visitors.push(plugin.visitor);\n    }\n\n    for (const [plugin, pass] of passPairs) {\n      const fn = plugin.pre;\n      if (fn) {\n        const result = fn.call(pass, file);\n\n        // @ts-expect-error - If we want to support async .pre\n        yield* [];\n\n        if (isThenable(result)) {\n          throw new Error(\n            `You appear to be using an plugin with an async .pre, ` +\n              `which your current version of Babel does not support. ` +\n              `If you're using a published plugin, you may need to upgrade ` +\n              `your @babel/core version.`,\n          );\n        }\n      }\n    }\n\n    // merge all plugin visitors into a single visitor\n    const visitor = traverse.visitors.merge(\n      visitors,\n      passes,\n      file.opts.wrapPluginVisitorMethod,\n    );\n    traverse(file.ast, visitor, file.scope);\n\n    for (const [plugin, pass] of passPairs) {\n      const fn = plugin.post;\n      if (fn) {\n        const result = fn.call(pass, file);\n\n        // @ts-expect-error - If we want to support async .post\n        yield* [];\n\n        if (isThenable(result)) {\n          throw new Error(\n            `You appear to be using an plugin with an async .post, ` +\n              `which your current version of Babel does not support. ` +\n              `If you're using a published plugin, you may need to upgrade ` +\n              `your @babel/core version.`,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction isThenable<T extends PromiseLike<any>>(val: any): val is T {\n  return (\n    !!val &&\n    (typeof val === \"object\" || typeof val === \"function\") &&\n    !!val.then &&\n    typeof val.then === \"function\"\n  );\n}\n"]},"metadata":{},"sourceType":"script"}