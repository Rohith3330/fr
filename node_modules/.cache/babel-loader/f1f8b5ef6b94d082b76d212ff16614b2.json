{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isObjectNotArray = exports.deepMerge = void 0;\n/**\n * Check if the variable contains an object strictly rejecting arrays\n * @param obj an object\n * @returns `true` if obj is an object\n */\n\nfunction isObjectNotArray(obj) {\n  return typeof obj === 'object' && !Array.isArray(obj);\n}\n\nexports.isObjectNotArray = isObjectNotArray;\n/**\n * Pure function - doesn't mutate either parameter!\n * Merges two objects together deeply, overwriting the properties in first with the properties in second\n * @param first The first object\n * @param second The second object\n * @returns a new object\n */\n\nfunction deepMerge() {\n  let first = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let second = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // get the unique set of keys across both objects\n  const keys = new Set(Object.keys(first).concat(Object.keys(second)));\n  return Array.from(keys).reduce((acc, key) => {\n    const firstHasKey = (key in first);\n    const secondHasKey = (key in second);\n    const firstValue = first[key];\n    const secondValue = second[key];\n\n    if (firstHasKey && secondHasKey) {\n      if (isObjectNotArray(firstValue) && isObjectNotArray(secondValue)) {\n        // object type\n        acc[key] = deepMerge(firstValue, secondValue);\n      } else {\n        // value type\n        acc[key] = secondValue;\n      }\n    } else if (firstHasKey) {\n      acc[key] = firstValue;\n    } else {\n      acc[key] = secondValue;\n    }\n\n    return acc;\n  }, {});\n}\n\nexports.deepMerge = deepMerge;","map":{"version":3,"mappings":";;;;;;AAEA;;;;;;AAKA,SAASA,gBAAT,CACEC,GADF,EAC0B;EAExB,OAAO,OAAOA,GAAP,KAAe,QAAf,IAA2B,CAACC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAnC;AACD;;AAwCQG;AAtCT;;;;;;;;AAOA,SAAgBC,SAAhB,GAEyB;EAAA,IADvBC,KACuB,uEADH,EACG;EAAA,IAAvBC,MAAuB,uEAAF,EAAE;EAEvB;EACA,MAAMC,IAAI,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACF,IAAP,CAAYF,KAAZ,EAAmBK,MAAnB,CAA0BD,MAAM,CAACF,IAAP,CAAYD,MAAZ,CAA1B,CAAR,CAAb;EAEA,OAAOL,KAAK,CAACU,IAAN,CAAWJ,IAAX,EAAiBK,MAAjB,CAAoC,CAACC,GAAD,EAAMC,GAAN,KAAa;IACtD,MAAMC,WAAW,IAAGD,GAAG,IAAIT,KAAV,CAAjB;IACA,MAAMW,YAAY,IAAGF,GAAG,IAAIR,MAAV,CAAlB;IACA,MAAMW,UAAU,GAAGZ,KAAK,CAACS,GAAD,CAAxB;IACA,MAAMI,WAAW,GAAGZ,MAAM,CAACQ,GAAD,CAA1B;;IAEA,IAAIC,WAAW,IAAIC,YAAnB,EAAiC;MAC/B,IAAIjB,gBAAgB,CAACkB,UAAD,CAAhB,IAAgClB,gBAAgB,CAACmB,WAAD,CAApD,EAAmE;QACjE;QACAL,GAAG,CAACC,GAAD,CAAH,GAAWV,SAAS,CAACa,UAAD,EAAaC,WAAb,CAApB;MACD,CAHD,MAGO;QACL;QACAL,GAAG,CAACC,GAAD,CAAH,GAAWI,WAAX;MACD;IACF,CARD,MAQO,IAAIH,WAAJ,EAAiB;MACtBF,GAAG,CAACC,GAAD,CAAH,GAAWG,UAAX;IACD,CAFM,MAEA;MACLJ,GAAG,CAACC,GAAD,CAAH,GAAWI,WAAX;IACD;;IAED,OAAOL,GAAP;EACD,CArBM,EAqBJ,EArBI,CAAP;AAsBD;;AA7BDV","names":["isObjectNotArray","obj","Array","isArray","exports","deepMerge","first","second","keys","Set","Object","concat","from","reduce","acc","key","firstHasKey","secondHasKey","firstValue","secondValue"],"sources":["../../src/eslint-utils/deepMerge.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}