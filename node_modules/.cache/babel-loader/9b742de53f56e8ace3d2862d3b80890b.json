{"ast":null,"code":"'use strict';\n\nvar DEFAULT_SEPARATOR = ':';\nexports.type = 'perItem';\nexports.active = false;\nexports.description = 'removes specified attributes';\nexports.params = {\n  elemSeparator: DEFAULT_SEPARATOR,\n  preserveCurrentColor: false,\n  attrs: []\n};\n/**\n * Remove attributes\n *\n * @param elemSeparator\n *   format: string\n *\n * @param preserveCurrentColor\n *   format: boolean\n *\n * @param attrs:\n *\n *   format: [ element* : attribute* : value* ]\n *\n *   element   : regexp (wrapped into ^...$), single * or omitted > all elements (must be present when value is used)\n *   attribute : regexp (wrapped into ^...$)\n *   value     : regexp (wrapped into ^...$), single * or omitted > all values\n *\n *   examples:\n *\n *     > basic: remove fill attribute\n *     ---\n *     removeAttrs:\n *       attrs: 'fill'\n *\n *     > remove fill attribute on path element\n *     ---\n *       attrs: 'path:fill'\n *\n *     > remove fill attribute on path element where value is none\n *     ---\n *       attrs: 'path:fill:none'\n *\n *\n *     > remove all fill and stroke attribute\n *     ---\n *       attrs:\n *         - 'fill'\n *         - 'stroke'\n *\n *     [is same as]\n *\n *       attrs: '(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '*:(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '.*:(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '.*:(fill|stroke):.*'\n *\n *\n *     > remove all stroke related attributes\n *     ----\n *     attrs: 'stroke.*'\n *\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Benny Schudel\n */\n\nexports.fn = function (item, params) {\n  // wrap into an array if params is not\n  if (!Array.isArray(params.attrs)) {\n    params.attrs = [params.attrs];\n  }\n\n  if (item.isElem()) {\n    var elemSeparator = typeof params.elemSeparator == 'string' ? params.elemSeparator : DEFAULT_SEPARATOR;\n    var preserveCurrentColor = typeof params.preserveCurrentColor == 'boolean' ? params.preserveCurrentColor : false; // prepare patterns\n\n    var patterns = params.attrs.map(function (pattern) {\n      // if no element separators (:), assume it's attribute name, and apply to all elements *regardless of value*\n      if (pattern.indexOf(elemSeparator) === -1) {\n        pattern = ['.*', elemSeparator, pattern, elemSeparator, '.*'].join(''); // if only 1 separator, assume it's element and attribute name, and apply regardless of attribute value\n      } else if (pattern.split(elemSeparator).length < 3) {\n        pattern = [pattern, elemSeparator, '.*'].join('');\n      } // create regexps for element, attribute name, and attribute value\n\n\n      return pattern.split(elemSeparator).map(function (value) {\n        // adjust single * to match anything\n        if (value === '*') {\n          value = '.*';\n        }\n\n        return new RegExp(['^', value, '$'].join(''), 'i');\n      });\n    }); // loop patterns\n\n    patterns.forEach(function (pattern) {\n      // matches element\n      if (pattern[0].test(item.elem)) {\n        // loop attributes\n        item.eachAttr(function (attr) {\n          var name = attr.name;\n          var value = attr.value;\n          var isFillCurrentColor = preserveCurrentColor && name == 'fill' && value == 'currentColor';\n          var isStrokeCurrentColor = preserveCurrentColor && name == 'stroke' && value == 'currentColor';\n\n          if (!(isFillCurrentColor || isStrokeCurrentColor)) {\n            // matches attribute name\n            if (pattern[1].test(name)) {\n              // matches attribute value\n              if (pattern[2].test(attr.value)) {\n                item.removeAttr(name);\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n};","map":{"version":3,"names":["DEFAULT_SEPARATOR","exports","type","active","description","params","elemSeparator","preserveCurrentColor","attrs","fn","item","Array","isArray","isElem","patterns","map","pattern","indexOf","join","split","length","value","RegExp","forEach","test","elem","eachAttr","attr","name","isFillCurrentColor","isStrokeCurrentColor","removeAttr"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/svgo/plugins/removeAttrs.js"],"sourcesContent":["'use strict';\n\nvar DEFAULT_SEPARATOR = ':';\n\nexports.type = 'perItem';\n\nexports.active = false;\n\nexports.description = 'removes specified attributes';\n\nexports.params = {\n    elemSeparator: DEFAULT_SEPARATOR,\n    preserveCurrentColor: false,\n    attrs: []\n};\n\n/**\n * Remove attributes\n *\n * @param elemSeparator\n *   format: string\n *\n * @param preserveCurrentColor\n *   format: boolean\n *\n * @param attrs:\n *\n *   format: [ element* : attribute* : value* ]\n *\n *   element   : regexp (wrapped into ^...$), single * or omitted > all elements (must be present when value is used)\n *   attribute : regexp (wrapped into ^...$)\n *   value     : regexp (wrapped into ^...$), single * or omitted > all values\n *\n *   examples:\n *\n *     > basic: remove fill attribute\n *     ---\n *     removeAttrs:\n *       attrs: 'fill'\n *\n *     > remove fill attribute on path element\n *     ---\n *       attrs: 'path:fill'\n *\n *     > remove fill attribute on path element where value is none\n *     ---\n *       attrs: 'path:fill:none'\n *\n *\n *     > remove all fill and stroke attribute\n *     ---\n *       attrs:\n *         - 'fill'\n *         - 'stroke'\n *\n *     [is same as]\n *\n *       attrs: '(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '*:(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '.*:(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '.*:(fill|stroke):.*'\n *\n *\n *     > remove all stroke related attributes\n *     ----\n *     attrs: 'stroke.*'\n *\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Benny Schudel\n */\nexports.fn = function(item, params) {\n        // wrap into an array if params is not\n    if (!Array.isArray(params.attrs)) {\n        params.attrs = [params.attrs];\n    }\n\n    if (item.isElem()) {\n        var elemSeparator = typeof params.elemSeparator == 'string' ? params.elemSeparator : DEFAULT_SEPARATOR;\n        var preserveCurrentColor = typeof params.preserveCurrentColor == 'boolean' ? params.preserveCurrentColor : false;\n\n            // prepare patterns\n        var patterns = params.attrs.map(function(pattern) {\n\n                // if no element separators (:), assume it's attribute name, and apply to all elements *regardless of value*\n            if (pattern.indexOf(elemSeparator) === -1) {\n                pattern = ['.*', elemSeparator, pattern, elemSeparator, '.*'].join('');\n\n                // if only 1 separator, assume it's element and attribute name, and apply regardless of attribute value\n            } else if (pattern.split(elemSeparator).length < 3) {\n                pattern = [pattern, elemSeparator, '.*'].join('');\n            }\n\n                // create regexps for element, attribute name, and attribute value\n            return pattern.split(elemSeparator)\n                .map(function(value) {\n\n                        // adjust single * to match anything\n                    if (value === '*') { value = '.*'; }\n\n                    return new RegExp(['^', value, '$'].join(''), 'i');\n                });\n\n        });\n\n            // loop patterns\n        patterns.forEach(function(pattern) {\n\n                // matches element\n            if (pattern[0].test(item.elem)) {\n\n                    // loop attributes\n                item.eachAttr(function(attr) {\n                    var name = attr.name;\n                    var value = attr.value;\n                    var isFillCurrentColor = preserveCurrentColor && name == 'fill' && value == 'currentColor';\n                    var isStrokeCurrentColor = preserveCurrentColor && name == 'stroke' && value == 'currentColor';\n\n                    if (!(isFillCurrentColor || isStrokeCurrentColor)) {\n                        // matches attribute name\n                        if (pattern[1].test(name)) {\n\n                            // matches attribute value\n                            if (pattern[2].test(attr.value)) {\n                                item.removeAttr(name);\n                            }\n                        }\n                    }\n\n                });\n\n            }\n\n        });\n\n    }\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}