{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util_1 = require(\"../util\");\n\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\n\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('object-curly-spacing');\nexports.default = (0, util_1.createRule)({\n  name: 'object-curly-spacing',\n  // eslint-disable-next-line eslint-plugin/prefer-message-ids,eslint-plugin/require-meta-type,eslint-plugin/require-meta-schema,eslint-plugin/require-meta-fixable -- all in base rule - https://github.com/not-an-aardvark/eslint-plugin-eslint-plugin/issues/274\n  meta: Object.assign(Object.assign({}, baseRule.meta), {\n    docs: {\n      description: 'Enforce consistent spacing inside braces',\n      recommended: false,\n      extendsBaseRule: true\n    }\n  }),\n  defaultOptions: ['never'],\n\n  create(context) {\n    const [firstOption, secondOption] = context.options;\n    const spaced = firstOption === 'always';\n    const sourceCode = context.getSourceCode();\n    /**\n     * Determines whether an option is set, relative to the spacing option.\n     * If spaced is \"always\", then check whether option is set to false.\n     * If spaced is \"never\", then check whether option is set to true.\n     * @param option The option to exclude.\n     * @returns Whether or not the property is excluded.\n     */\n\n    function isOptionSet(option) {\n      return secondOption ? secondOption[option] === !spaced : false;\n    }\n\n    const options = {\n      spaced,\n      arraysInObjectsException: isOptionSet('arraysInObjects'),\n      objectsInObjectsException: isOptionSet('objectsInObjects')\n    }; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param node The node to report in the event of an error.\n     * @param token The token to use for the report.\n     */\n\n    function reportNoBeginningSpace(node, token) {\n      const nextToken = context.getSourceCode().getTokenAfter(token, {\n        includeComments: true\n      });\n      context.report({\n        node,\n        loc: {\n          start: token.loc.end,\n          end: nextToken.loc.start\n        },\n        messageId: 'unexpectedSpaceAfter',\n        data: {\n          token: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([token.range[1], nextToken.range[0]]);\n        }\n\n      });\n    }\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param node The node to report in the event of an error.\n     * @param token The token to use for the report.\n     */\n\n\n    function reportNoEndingSpace(node, token) {\n      const previousToken = context.getSourceCode().getTokenBefore(token, {\n        includeComments: true\n      });\n      context.report({\n        node,\n        loc: {\n          start: previousToken.loc.end,\n          end: token.loc.start\n        },\n        messageId: 'unexpectedSpaceBefore',\n        data: {\n          token: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([previousToken.range[1], token.range[0]]);\n        }\n\n      });\n    }\n    /**\n     * Reports that there should be a space after the first token\n     * @param node The node to report in the event of an error.\n     * @param token The token to use for the report.\n     */\n\n\n    function reportRequiredBeginningSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: 'requireSpaceAfter',\n        data: {\n          token: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextAfter(token, ' ');\n        }\n\n      });\n    }\n    /**\n     * Reports that there should be a space before the last token\n     * @param node The node to report in the event of an error.\n     * @param token The token to use for the report.\n     */\n\n\n    function reportRequiredEndingSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: 'requireSpaceBefore',\n        data: {\n          token: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextBefore(token, ' ');\n        }\n\n      });\n    }\n    /**\n     * Determines if spacing in curly braces is valid.\n     * @param node The AST node to check.\n     * @param first The first token to check (should be the opening brace)\n     * @param second The second token to check (should be first after the opening brace)\n     * @param penultimate The penultimate token to check (should be last before closing brace)\n     * @param last The last token to check (should be closing brace)\n     */\n\n\n    function validateBraceSpacing(node, first, second, penultimate, last) {\n      if ((0, util_1.isTokenOnSameLine)(first, second)) {\n        const firstSpaced = sourceCode.isSpaceBetween(first, second);\n        const secondType = sourceCode.getNodeByRangeIndex(second.range[0]).type;\n        const openingCurlyBraceMustBeSpaced = options.arraysInObjectsException && [utils_1.AST_NODE_TYPES.TSMappedType, utils_1.AST_NODE_TYPES.TSIndexSignature].includes(secondType) ? !options.spaced : options.spaced;\n\n        if (openingCurlyBraceMustBeSpaced && !firstSpaced) {\n          reportRequiredBeginningSpace(node, first);\n        }\n\n        if (!openingCurlyBraceMustBeSpaced && firstSpaced && second.type !== utils_1.AST_TOKEN_TYPES.Line) {\n          reportNoBeginningSpace(node, first);\n        }\n      }\n\n      if ((0, util_1.isTokenOnSameLine)(penultimate, last)) {\n        const shouldCheckPenultimate = options.arraysInObjectsException && (0, util_1.isClosingBracketToken)(penultimate) || options.objectsInObjectsException && (0, util_1.isClosingBraceToken)(penultimate);\n        const penultimateType = shouldCheckPenultimate ? sourceCode.getNodeByRangeIndex(penultimate.range[0]).type : undefined;\n        const closingCurlyBraceMustBeSpaced = options.arraysInObjectsException && penultimateType === utils_1.AST_NODE_TYPES.TSTupleType || options.objectsInObjectsException && penultimateType !== undefined && [utils_1.AST_NODE_TYPES.TSMappedType, utils_1.AST_NODE_TYPES.TSTypeLiteral].includes(penultimateType) ? !options.spaced : options.spaced;\n        const lastSpaced = sourceCode.isSpaceBetween(penultimate, last);\n\n        if (closingCurlyBraceMustBeSpaced && !lastSpaced) {\n          reportRequiredEndingSpace(node, last);\n        }\n\n        if (!closingCurlyBraceMustBeSpaced && lastSpaced) {\n          reportNoEndingSpace(node, last);\n        }\n      }\n    }\n    /**\n     * Gets '}' token of an object node.\n     *\n     * Because the last token of object patterns might be a type annotation,\n     * this traverses tokens preceded by the last property, then returns the\n     * first '}' token.\n     * @param node The node to get. This node is an\n     *      ObjectExpression or an ObjectPattern. And this node has one or\n     *      more properties.\n     * @returns '}' token.\n     */\n\n\n    function getClosingBraceOfObject(node) {\n      const lastProperty = node.members[node.members.length - 1];\n      return sourceCode.getTokenAfter(lastProperty, util_1.isClosingBraceToken);\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    const rules = baseRule.create(context);\n    return Object.assign(Object.assign({}, rules), {\n      TSMappedType(node) {\n        const first = sourceCode.getFirstToken(node);\n        const last = sourceCode.getLastToken(node);\n        const second = sourceCode.getTokenAfter(first, {\n          includeComments: true\n        });\n        const penultimate = sourceCode.getTokenBefore(last, {\n          includeComments: true\n        });\n        validateBraceSpacing(node, first, second, penultimate, last);\n      },\n\n      TSTypeLiteral(node) {\n        if (node.members.length === 0) {\n          return;\n        }\n\n        const first = sourceCode.getFirstToken(node);\n        const last = getClosingBraceOfObject(node);\n        const second = sourceCode.getTokenAfter(first, {\n          includeComments: true\n        });\n        const penultimate = sourceCode.getTokenBefore(last, {\n          includeComments: true\n        });\n        validateBraceSpacing(node, first, second, penultimate, last);\n      }\n\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["baseRule","exports","name","meta","docs","description","recommended","extendsBaseRule","defaultOptions","create","context","firstOption","secondOption","options","spaced","sourceCode","getSourceCode","isOptionSet","option","arraysInObjectsException","objectsInObjectsException","reportNoBeginningSpace","node","token","nextToken","getTokenAfter","includeComments","report","loc","start","end","messageId","data","value","fix","fixer","removeRange","range","reportNoEndingSpace","previousToken","getTokenBefore","reportRequiredBeginningSpace","insertTextAfter","reportRequiredEndingSpace","insertTextBefore","validateBraceSpacing","first","second","penultimate","last","firstSpaced","isSpaceBetween","secondType","getNodeByRangeIndex","type","openingCurlyBraceMustBeSpaced","utils_1","TSMappedType","TSIndexSignature","includes","Line","shouldCheckPenultimate","penultimateType","undefined","closingCurlyBraceMustBeSpaced","TSTupleType","TSTypeLiteral","lastSpaced","getClosingBraceOfObject","lastProperty","members","length","util_1","rules","getFirstToken","getLastToken"],"sources":["../../src/rules/object-curly-spacing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}