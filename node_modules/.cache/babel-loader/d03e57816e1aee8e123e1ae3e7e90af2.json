{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0; // ported from babel/flow-object-type; original author: Nat Mote\n// https://github.com/babel/eslint-plugin-babel/blob/c0a49d25a97feb12c1d07073a0b37317359a5fe5/rules/flow-object-type.js\n\nconst SEMICOLON = {\n  char: ';',\n  name: 'semicolon'\n};\nconst COMMA = {\n  char: ',',\n  name: 'comma'\n};\n\nconst create = context => {\n  let GOOD;\n  let BAD;\n\n  if (!context.options[0] || context.options[0] === COMMA.name) {\n    GOOD = COMMA;\n    BAD = SEMICOLON;\n  } else {\n    GOOD = SEMICOLON;\n    BAD = COMMA;\n  }\n\n  const requireProperPunctuation = node => {\n    const sourceCode = context.getSourceCode();\n    const tokens = sourceCode.getTokens(node);\n    let lastToken;\n    lastToken = tokens[tokens.length - 1];\n\n    if (lastToken.type !== 'Punctuator' || !(lastToken.value === SEMICOLON.char || lastToken.value === COMMA.char)) {\n      const parentTokens = sourceCode.getTokens(node.parent);\n      lastToken = parentTokens[parentTokens.indexOf(lastToken) + 1];\n    }\n\n    if (lastToken.type === 'Punctuator' && lastToken.value === BAD.char) {\n      context.report({\n        fix(fixer) {\n          return fixer.replaceText(lastToken, GOOD.char);\n        },\n\n        message: 'Prefer ' + GOOD.name + 's to ' + BAD.name + 's in object and class types',\n        node: lastToken\n      });\n    }\n  };\n\n  return {\n    ObjectTypeCallProperty: requireProperPunctuation,\n    ObjectTypeIndexer: requireProperPunctuation,\n    ObjectTypeProperty: requireProperPunctuation\n  };\n};\n\nconst schema = [{\n  enum: ['semicolon', 'comma'],\n  type: 'string'\n}];\nvar _default = {\n  create,\n  meta: {\n    fixable: 'code'\n  },\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","SEMICOLON","char","name","COMMA","create","context","GOOD","BAD","options","requireProperPunctuation","node","sourceCode","getSourceCode","tokens","getTokens","lastToken","length","type","parentTokens","parent","indexOf","report","fix","fixer","replaceText","message","ObjectTypeCallProperty","ObjectTypeIndexer","ObjectTypeProperty","schema","enum","_default","meta","fixable","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/objectTypeDelimiter.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n// ported from babel/flow-object-type; original author: Nat Mote\n// https://github.com/babel/eslint-plugin-babel/blob/c0a49d25a97feb12c1d07073a0b37317359a5fe5/rules/flow-object-type.js\nconst SEMICOLON = {\n  char: ';',\n  name: 'semicolon'\n};\nconst COMMA = {\n  char: ',',\n  name: 'comma'\n};\n\nconst create = context => {\n  let GOOD;\n  let BAD;\n\n  if (!context.options[0] || context.options[0] === COMMA.name) {\n    GOOD = COMMA;\n    BAD = SEMICOLON;\n  } else {\n    GOOD = SEMICOLON;\n    BAD = COMMA;\n  }\n\n  const requireProperPunctuation = node => {\n    const sourceCode = context.getSourceCode();\n    const tokens = sourceCode.getTokens(node);\n    let lastToken;\n    lastToken = tokens[tokens.length - 1];\n\n    if (lastToken.type !== 'Punctuator' || !(lastToken.value === SEMICOLON.char || lastToken.value === COMMA.char)) {\n      const parentTokens = sourceCode.getTokens(node.parent);\n      lastToken = parentTokens[parentTokens.indexOf(lastToken) + 1];\n    }\n\n    if (lastToken.type === 'Punctuator' && lastToken.value === BAD.char) {\n      context.report({\n        fix(fixer) {\n          return fixer.replaceText(lastToken, GOOD.char);\n        },\n\n        message: 'Prefer ' + GOOD.name + 's to ' + BAD.name + 's in object and class types',\n        node: lastToken\n      });\n    }\n  };\n\n  return {\n    ObjectTypeCallProperty: requireProperPunctuation,\n    ObjectTypeIndexer: requireProperPunctuation,\n    ObjectTypeProperty: requireProperPunctuation\n  };\n};\n\nconst schema = [{\n  enum: ['semicolon', 'comma'],\n  type: 'string'\n}];\nvar _default = {\n  create,\n  meta: {\n    fixable: 'code'\n  },\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB,C,CACA;AACA;;AACA,MAAMC,SAAS,GAAG;EAChBC,IAAI,EAAE,GADU;EAEhBC,IAAI,EAAE;AAFU,CAAlB;AAIA,MAAMC,KAAK,GAAG;EACZF,IAAI,EAAE,GADM;EAEZC,IAAI,EAAE;AAFM,CAAd;;AAKA,MAAME,MAAM,GAAGC,OAAO,IAAI;EACxB,IAAIC,IAAJ;EACA,IAAIC,GAAJ;;EAEA,IAAI,CAACF,OAAO,CAACG,OAAR,CAAgB,CAAhB,CAAD,IAAuBH,OAAO,CAACG,OAAR,CAAgB,CAAhB,MAAuBL,KAAK,CAACD,IAAxD,EAA8D;IAC5DI,IAAI,GAAGH,KAAP;IACAI,GAAG,GAAGP,SAAN;EACD,CAHD,MAGO;IACLM,IAAI,GAAGN,SAAP;IACAO,GAAG,GAAGJ,KAAN;EACD;;EAED,MAAMM,wBAAwB,GAAGC,IAAI,IAAI;IACvC,MAAMC,UAAU,GAAGN,OAAO,CAACO,aAAR,EAAnB;IACA,MAAMC,MAAM,GAAGF,UAAU,CAACG,SAAX,CAAqBJ,IAArB,CAAf;IACA,IAAIK,SAAJ;IACAA,SAAS,GAAGF,MAAM,CAACA,MAAM,CAACG,MAAP,GAAgB,CAAjB,CAAlB;;IAEA,IAAID,SAAS,CAACE,IAAV,KAAmB,YAAnB,IAAmC,EAAEF,SAAS,CAACjB,KAAV,KAAoBE,SAAS,CAACC,IAA9B,IAAsCc,SAAS,CAACjB,KAAV,KAAoBK,KAAK,CAACF,IAAlE,CAAvC,EAAgH;MAC9G,MAAMiB,YAAY,GAAGP,UAAU,CAACG,SAAX,CAAqBJ,IAAI,CAACS,MAA1B,CAArB;MACAJ,SAAS,GAAGG,YAAY,CAACA,YAAY,CAACE,OAAb,CAAqBL,SAArB,IAAkC,CAAnC,CAAxB;IACD;;IAED,IAAIA,SAAS,CAACE,IAAV,KAAmB,YAAnB,IAAmCF,SAAS,CAACjB,KAAV,KAAoBS,GAAG,CAACN,IAA/D,EAAqE;MACnEI,OAAO,CAACgB,MAAR,CAAe;QACbC,GAAG,CAACC,KAAD,EAAQ;UACT,OAAOA,KAAK,CAACC,WAAN,CAAkBT,SAAlB,EAA6BT,IAAI,CAACL,IAAlC,CAAP;QACD,CAHY;;QAKbwB,OAAO,EAAE,YAAYnB,IAAI,CAACJ,IAAjB,GAAwB,OAAxB,GAAkCK,GAAG,CAACL,IAAtC,GAA6C,6BALzC;QAMbQ,IAAI,EAAEK;MANO,CAAf;IAQD;EACF,CArBD;;EAuBA,OAAO;IACLW,sBAAsB,EAAEjB,wBADnB;IAELkB,iBAAiB,EAAElB,wBAFd;IAGLmB,kBAAkB,EAAEnB;EAHf,CAAP;AAKD,CAxCD;;AA0CA,MAAMoB,MAAM,GAAG,CAAC;EACdC,IAAI,EAAE,CAAC,WAAD,EAAc,OAAd,CADQ;EAEdb,IAAI,EAAE;AAFQ,CAAD,CAAf;AAIA,IAAIc,QAAQ,GAAG;EACb3B,MADa;EAEb4B,IAAI,EAAE;IACJC,OAAO,EAAE;EADL,CAFO;EAKbJ;AALa,CAAf;AAOAhC,OAAO,CAACE,OAAR,GAAkBgC,QAAlB;AACAG,MAAM,CAACrC,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}