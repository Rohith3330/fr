{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.spyOn = exports.mocked = exports.fn = exports.ModuleMocker = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually, local/prefer-rest-params-eventually */\n\n/**\n * Possible types of a MockFunctionResult.\n * 'return': The call completed by returning normally.\n * 'throw': The call completed by throwing a value.\n * 'incomplete': The call has not completed yet. This is possible if you read\n *               the  mock function result from within the mock function itself\n *               (or a function called by the mock function).\n */\n\n/**\n * Represents the result of a single call to a mock function.\n */\n// see https://github.com/Microsoft/TypeScript/issues/25215\n\n\nconst MOCK_CONSTRUCTOR_NAME = 'mockConstructor';\nconst FUNCTION_NAME_RESERVED_PATTERN = /[\\s!-\\/:-@\\[-`{-~]/;\nconst FUNCTION_NAME_RESERVED_REPLACE = new RegExp(FUNCTION_NAME_RESERVED_PATTERN.source, 'g');\nconst RESERVED_KEYWORDS = new Set(['arguments', 'await', 'break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'implements', 'import', 'in', 'instanceof', 'interface', 'let', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'static', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'yield']);\n\nfunction matchArity(fn, length) {\n  let mockConstructor;\n\n  switch (length) {\n    case 1:\n      mockConstructor = function (_a) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 2:\n      mockConstructor = function (_a, _b) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 3:\n      mockConstructor = function (_a, _b, _c) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 4:\n      mockConstructor = function (_a, _b, _c, _d) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 5:\n      mockConstructor = function (_a, _b, _c, _d, _e) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 6:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 7:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 8:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 9:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h, _i) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    default:\n      mockConstructor = function () {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n  }\n\n  return mockConstructor;\n}\n\nfunction getObjectType(value) {\n  return Object.prototype.toString.apply(value).slice(8, -1);\n}\n\nfunction getType(ref) {\n  const typeName = getObjectType(ref);\n\n  if (typeName === 'Function' || typeName === 'AsyncFunction' || typeName === 'GeneratorFunction') {\n    return 'function';\n  } else if (Array.isArray(ref)) {\n    return 'array';\n  } else if (typeName === 'Object') {\n    return 'object';\n  } else if (typeName === 'Number' || typeName === 'String' || typeName === 'Boolean' || typeName === 'Symbol') {\n    return 'constant';\n  } else if (typeName === 'Map' || typeName === 'WeakMap' || typeName === 'Set') {\n    return 'collection';\n  } else if (typeName === 'RegExp') {\n    return 'regexp';\n  } else if (ref === undefined) {\n    return 'undefined';\n  } else if (ref === null) {\n    return 'null';\n  } else {\n    return null;\n  }\n}\n\nfunction isReadonlyProp(object, prop) {\n  if (prop === 'arguments' || prop === 'caller' || prop === 'callee' || prop === 'name' || prop === 'length') {\n    const typeName = getObjectType(object);\n    return typeName === 'Function' || typeName === 'AsyncFunction' || typeName === 'GeneratorFunction';\n  }\n\n  if (prop === 'source' || prop === 'global' || prop === 'ignoreCase' || prop === 'multiline') {\n    return getObjectType(object) === 'RegExp';\n  }\n\n  return false;\n}\n\nclass ModuleMocker {\n  /**\n   * @see README.md\n   * @param global Global object of the test environment, used to create\n   * mocks\n   */\n  constructor(global) {\n    _defineProperty(this, '_environmentGlobal', void 0);\n\n    _defineProperty(this, '_mockState', void 0);\n\n    _defineProperty(this, '_mockConfigRegistry', void 0);\n\n    _defineProperty(this, '_spyState', void 0);\n\n    _defineProperty(this, '_invocationCallCounter', void 0);\n\n    this._environmentGlobal = global;\n    this._mockState = new WeakMap();\n    this._mockConfigRegistry = new WeakMap();\n    this._spyState = new Set();\n    this._invocationCallCounter = 1;\n  }\n\n  _getSlots(object) {\n    if (!object) {\n      return [];\n    }\n\n    const slots = new Set();\n    const EnvObjectProto = this._environmentGlobal.Object.prototype;\n    const EnvFunctionProto = this._environmentGlobal.Function.prototype;\n    const EnvRegExpProto = this._environmentGlobal.RegExp.prototype; // Also check the builtins in the current context as they leak through\n    // core node modules.\n\n    const ObjectProto = Object.prototype;\n    const FunctionProto = Function.prototype;\n    const RegExpProto = RegExp.prototype; // Properties of Object.prototype, Function.prototype and RegExp.prototype\n    // are never reported as slots\n\n    while (object != null && object !== EnvObjectProto && object !== EnvFunctionProto && object !== EnvRegExpProto && object !== ObjectProto && object !== FunctionProto && object !== RegExpProto) {\n      const ownNames = Object.getOwnPropertyNames(object);\n\n      for (let i = 0; i < ownNames.length; i++) {\n        const prop = ownNames[i];\n\n        if (!isReadonlyProp(object, prop)) {\n          const propDesc = Object.getOwnPropertyDescriptor(object, prop);\n\n          if (propDesc !== undefined && !propDesc.get || object.__esModule) {\n            slots.add(prop);\n          }\n        }\n      }\n\n      object = Object.getPrototypeOf(object);\n    }\n\n    return Array.from(slots);\n  }\n\n  _ensureMockConfig(f) {\n    let config = this._mockConfigRegistry.get(f);\n\n    if (!config) {\n      config = this._defaultMockConfig();\n\n      this._mockConfigRegistry.set(f, config);\n    }\n\n    return config;\n  }\n\n  _ensureMockState(f) {\n    let state = this._mockState.get(f);\n\n    if (!state) {\n      state = this._defaultMockState();\n\n      this._mockState.set(f, state);\n    }\n\n    if (state.calls.length > 0) {\n      state.lastCall = state.calls[state.calls.length - 1];\n    }\n\n    return state;\n  }\n\n  _defaultMockConfig() {\n    return {\n      mockImpl: undefined,\n      mockName: 'jest.fn()',\n      specificMockImpls: [],\n      specificReturnValues: []\n    };\n  }\n\n  _defaultMockState() {\n    return {\n      calls: [],\n      instances: [],\n      invocationCallOrder: [],\n      results: []\n    };\n  }\n\n  _makeComponent(metadata, restore) {\n    if (metadata.type === 'object') {\n      return new this._environmentGlobal.Object();\n    } else if (metadata.type === 'array') {\n      return new this._environmentGlobal.Array();\n    } else if (metadata.type === 'regexp') {\n      return new this._environmentGlobal.RegExp('');\n    } else if (metadata.type === 'constant' || metadata.type === 'collection' || metadata.type === 'null' || metadata.type === 'undefined') {\n      return metadata.value;\n    } else if (metadata.type === 'function') {\n      const prototype = metadata.members && metadata.members.prototype && metadata.members.prototype.members || {};\n\n      const prototypeSlots = this._getSlots(prototype);\n\n      const mocker = this;\n      const mockConstructor = matchArity(function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        const mockState = mocker._ensureMockState(f);\n\n        const mockConfig = mocker._ensureMockConfig(f);\n\n        mockState.instances.push(this);\n        mockState.calls.push(args); // Create and record an \"incomplete\" mock result immediately upon\n        // calling rather than waiting for the mock to return. This avoids\n        // issues caused by recursion where results can be recorded in the\n        // wrong order.\n\n        const mockResult = {\n          type: 'incomplete',\n          value: undefined\n        };\n        mockState.results.push(mockResult);\n        mockState.invocationCallOrder.push(mocker._invocationCallCounter++); // Will be set to the return value of the mock if an error is not thrown\n\n        let finalReturnValue; // Will be set to the error that is thrown by the mock (if it throws)\n\n        let thrownError; // Will be set to true if the mock throws an error. The presence of a\n        // value in `thrownError` is not a 100% reliable indicator because a\n        // function could throw a value of undefined.\n\n        let callDidThrowError = false;\n\n        try {\n          // The bulk of the implementation is wrapped in an immediately\n          // executed arrow function so the return value of the mock function\n          // can be easily captured and recorded, despite the many separate\n          // return points within the logic.\n          finalReturnValue = (() => {\n            if (this instanceof f) {\n              // This is probably being called as a constructor\n              prototypeSlots.forEach(slot => {\n                // Copy prototype methods to the instance to make\n                // it easier to interact with mock instance call and\n                // return values\n                if (prototype[slot].type === 'function') {\n                  // @ts-expect-error no index signature\n                  const protoImpl = this[slot]; // @ts-expect-error no index signature\n\n                  this[slot] = mocker.generateFromMetadata(prototype[slot]); // @ts-expect-error no index signature\n\n                  this[slot]._protoImpl = protoImpl;\n                }\n              }); // Run the mock constructor implementation\n\n              const mockImpl = mockConfig.specificMockImpls.length ? mockConfig.specificMockImpls.shift() : mockConfig.mockImpl;\n              return mockImpl && mockImpl.apply(this, arguments);\n            } // If mockImplementationOnce()/mockImplementation() is last set,\n            // implementation use the mock\n\n\n            let specificMockImpl = mockConfig.specificMockImpls.shift();\n\n            if (specificMockImpl === undefined) {\n              specificMockImpl = mockConfig.mockImpl;\n            }\n\n            if (specificMockImpl) {\n              return specificMockImpl.apply(this, arguments);\n            } // Otherwise use prototype implementation\n\n\n            if (f._protoImpl) {\n              return f._protoImpl.apply(this, arguments);\n            }\n\n            return undefined;\n          })();\n        } catch (error) {\n          // Store the thrown error so we can record it, then re-throw it.\n          thrownError = error;\n          callDidThrowError = true;\n          throw error;\n        } finally {\n          // Record the result of the function.\n          // NOTE: Intentionally NOT pushing/indexing into the array of mock\n          //       results here to avoid corrupting results data if mockClear()\n          //       is called during the execution of the mock.\n          mockResult.type = callDidThrowError ? 'throw' : 'return';\n          mockResult.value = callDidThrowError ? thrownError : finalReturnValue;\n        }\n\n        return finalReturnValue;\n      }, metadata.length || 0);\n\n      const f = this._createMockFunction(metadata, mockConstructor);\n\n      f._isMockFunction = true;\n\n      f.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;\n\n      if (typeof restore === 'function') {\n        this._spyState.add(restore);\n      }\n\n      this._mockState.set(f, this._defaultMockState());\n\n      this._mockConfigRegistry.set(f, this._defaultMockConfig());\n\n      Object.defineProperty(f, 'mock', {\n        configurable: false,\n        enumerable: true,\n        get: () => this._ensureMockState(f),\n        set: val => this._mockState.set(f, val)\n      });\n\n      f.mockClear = () => {\n        this._mockState.delete(f);\n\n        return f;\n      };\n\n      f.mockReset = () => {\n        f.mockClear();\n\n        this._mockConfigRegistry.delete(f);\n\n        return f;\n      };\n\n      f.mockRestore = () => {\n        f.mockReset();\n        return restore ? restore() : undefined;\n      };\n\n      f.mockReturnValueOnce = (value // next function call will return this value or default return value\n      ) => f.mockImplementationOnce(() => value);\n\n      f.mockResolvedValueOnce = value => f.mockImplementationOnce(() => Promise.resolve(value));\n\n      f.mockRejectedValueOnce = value => f.mockImplementationOnce(() => Promise.reject(value));\n\n      f.mockReturnValue = (value // next function call will return specified return value or this one\n      ) => f.mockImplementation(() => value);\n\n      f.mockResolvedValue = value => f.mockImplementation(() => Promise.resolve(value));\n\n      f.mockRejectedValue = value => f.mockImplementation(() => Promise.reject(value));\n\n      f.mockImplementationOnce = fn => {\n        // next function call will use this mock implementation return value\n        // or default mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n\n        mockConfig.specificMockImpls.push(fn);\n        return f;\n      };\n\n      f.mockImplementation = fn => {\n        // next function call will use mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n\n        mockConfig.mockImpl = fn;\n        return f;\n      };\n\n      f.mockReturnThis = () => f.mockImplementation(function () {\n        return this;\n      });\n\n      f.mockName = name => {\n        if (name) {\n          const mockConfig = this._ensureMockConfig(f);\n\n          mockConfig.mockName = name;\n        }\n\n        return f;\n      };\n\n      f.getMockName = () => {\n        const mockConfig = this._ensureMockConfig(f);\n\n        return mockConfig.mockName || 'jest.fn()';\n      };\n\n      if (metadata.mockImpl) {\n        f.mockImplementation(metadata.mockImpl);\n      }\n\n      return f;\n    } else {\n      const unknownType = metadata.type || 'undefined type';\n      throw new Error('Unrecognized type ' + unknownType);\n    }\n  }\n\n  _createMockFunction(metadata, mockConstructor) {\n    let name = metadata.name;\n\n    if (!name) {\n      return mockConstructor;\n    } // Preserve `name` property of mocked function.\n\n\n    const boundFunctionPrefix = 'bound ';\n    let bindCall = ''; // if-do-while for perf reasons. The common case is for the if to fail.\n\n    if (name && name.startsWith(boundFunctionPrefix)) {\n      do {\n        name = name.substring(boundFunctionPrefix.length); // Call bind() just to alter the function name.\n\n        bindCall = '.bind(null)';\n      } while (name && name.startsWith(boundFunctionPrefix));\n    } // Special case functions named `mockConstructor` to guard for infinite\n    // loops.\n\n\n    if (name === MOCK_CONSTRUCTOR_NAME) {\n      return mockConstructor;\n    }\n\n    if ( // It's a syntax error to define functions with a reserved keyword\n    // as name.\n    RESERVED_KEYWORDS.has(name) || // It's also a syntax error to define functions with a name that starts with a number\n    /^\\d/.test(name)) {\n      name = '$' + name;\n    } // It's also a syntax error to define a function with a reserved character\n    // as part of it's name.\n\n\n    if (FUNCTION_NAME_RESERVED_PATTERN.test(name)) {\n      name = name.replace(FUNCTION_NAME_RESERVED_REPLACE, '$');\n    }\n\n    const body = 'return function ' + name + '() {' + 'return ' + MOCK_CONSTRUCTOR_NAME + '.apply(this,arguments);' + '}' + bindCall;\n    const createConstructor = new this._environmentGlobal.Function(MOCK_CONSTRUCTOR_NAME, body);\n    return createConstructor(mockConstructor);\n  }\n\n  _generateMock(metadata, callbacks, refs) {\n    // metadata not compatible but it's the same type, maybe problem with\n    // overloading of _makeComponent and not _generateMock?\n    // @ts-expect-error\n    const mock = this._makeComponent(metadata);\n\n    if (metadata.refID != null) {\n      refs[metadata.refID] = mock;\n    }\n\n    this._getSlots(metadata.members).forEach(slot => {\n      const slotMetadata = metadata.members && metadata.members[slot] || {};\n\n      if (slotMetadata.ref != null) {\n        callbacks.push(function (ref) {\n          return () => mock[slot] = refs[ref];\n        }(slotMetadata.ref));\n      } else {\n        mock[slot] = this._generateMock(slotMetadata, callbacks, refs);\n      }\n    });\n\n    if (metadata.type !== 'undefined' && metadata.type !== 'null' && mock.prototype && typeof mock.prototype === 'object') {\n      mock.prototype.constructor = mock;\n    }\n\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param _metadata Metadata for the mock in the schema returned by the\n   * getMetadata method of this module.\n   */\n\n\n  generateFromMetadata(_metadata) {\n    const callbacks = [];\n    const refs = {};\n\n    const mock = this._generateMock(_metadata, callbacks, refs);\n\n    callbacks.forEach(setter => setter());\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param component The component for which to retrieve metadata.\n   */\n\n\n  getMetadata(component, _refs) {\n    const refs = _refs || new Map();\n    const ref = refs.get(component);\n\n    if (ref != null) {\n      return {\n        ref\n      };\n    }\n\n    const type = getType(component);\n\n    if (!type) {\n      return null;\n    }\n\n    const metadata = {\n      type\n    };\n\n    if (type === 'constant' || type === 'collection' || type === 'undefined' || type === 'null') {\n      metadata.value = component;\n      return metadata;\n    } else if (type === 'function') {\n      // @ts-expect-error this is a function so it has a name\n      metadata.name = component.name; // @ts-expect-error may be a mock\n\n      if (component._isMockFunction === true) {\n        // @ts-expect-error may be a mock\n        metadata.mockImpl = component.getMockImplementation();\n      }\n    }\n\n    metadata.refID = refs.size;\n    refs.set(component, metadata.refID);\n    let members = null; // Leave arrays alone\n\n    if (type !== 'array') {\n      this._getSlots(component).forEach(slot => {\n        if (type === 'function' && // @ts-expect-error may be a mock\n        component._isMockFunction === true && slot.match(/^mock/)) {\n          return;\n        } // @ts-expect-error no index signature\n\n\n        const slotMetadata = this.getMetadata(component[slot], refs);\n\n        if (slotMetadata) {\n          if (!members) {\n            members = {};\n          }\n\n          members[slot] = slotMetadata;\n        }\n      });\n    }\n\n    if (members) {\n      metadata.members = members;\n    }\n\n    return metadata;\n  }\n\n  isMockFunction(fn) {\n    return !!fn && fn._isMockFunction === true;\n  }\n\n  fn(implementation) {\n    const length = implementation ? implementation.length : 0;\n\n    const fn = this._makeComponent({\n      length,\n      type: 'function'\n    });\n\n    if (implementation) {\n      fn.mockImplementation(implementation);\n    }\n\n    return fn;\n  } // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\n  spyOn(object, methodName, accessType) {\n    if (accessType) {\n      return this._spyOnProperty(object, methodName, accessType);\n    }\n\n    if (typeof object !== 'object' && typeof object !== 'function') {\n      throw new Error('Cannot spyOn on a primitive value; ' + this._typeOf(object) + ' given');\n    }\n\n    const original = object[methodName];\n\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error('Cannot spy the ' + methodName + ' property because it is not a function; ' + this._typeOf(original) + ' given instead');\n      }\n\n      const isMethodOwner = Object.prototype.hasOwnProperty.call(object, methodName);\n      let descriptor = Object.getOwnPropertyDescriptor(object, methodName);\n      let proto = Object.getPrototypeOf(object);\n\n      while (!descriptor && proto !== null) {\n        descriptor = Object.getOwnPropertyDescriptor(proto, methodName);\n        proto = Object.getPrototypeOf(proto);\n      }\n\n      let mock;\n\n      if (descriptor && descriptor.get) {\n        const originalGet = descriptor.get;\n        mock = this._makeComponent({\n          type: 'function'\n        }, () => {\n          descriptor.get = originalGet;\n          Object.defineProperty(object, methodName, descriptor);\n        });\n\n        descriptor.get = () => mock;\n\n        Object.defineProperty(object, methodName, descriptor);\n      } else {\n        mock = this._makeComponent({\n          type: 'function'\n        }, () => {\n          if (isMethodOwner) {\n            object[methodName] = original;\n          } else {\n            delete object[methodName];\n          }\n        }); // @ts-expect-error overriding original method with a Mock\n\n        object[methodName] = mock;\n      }\n\n      mock.mockImplementation(function () {\n        return original.apply(this, arguments);\n      });\n    }\n\n    return object[methodName];\n  }\n\n  _spyOnProperty(obj, propertyName) {\n    let accessType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'get';\n\n    if (typeof obj !== 'object' && typeof obj !== 'function') {\n      throw new Error('Cannot spyOn on a primitive value; ' + this._typeOf(obj) + ' given');\n    }\n\n    if (!obj) {\n      throw new Error('spyOn could not find an object to spy upon for ' + propertyName + '');\n    }\n\n    if (!propertyName) {\n      throw new Error('No property name supplied');\n    }\n\n    let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n    let proto = Object.getPrototypeOf(obj);\n\n    while (!descriptor && proto !== null) {\n      descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    if (!descriptor) {\n      throw new Error(propertyName + ' property does not exist');\n    }\n\n    if (!descriptor.configurable) {\n      throw new Error(propertyName + ' is not declared configurable');\n    }\n\n    if (!descriptor[accessType]) {\n      throw new Error('Property ' + propertyName + ' does not have access type ' + accessType);\n    }\n\n    const original = descriptor[accessType];\n\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error('Cannot spy the ' + propertyName + ' property because it is not a function; ' + this._typeOf(original) + ' given instead');\n      } // @ts-expect-error: mock is assignable\n\n\n      descriptor[accessType] = this._makeComponent({\n        type: 'function'\n      }, () => {\n        // @ts-expect-error: mock is assignable\n        descriptor[accessType] = original;\n        Object.defineProperty(obj, propertyName, descriptor);\n      });\n      descriptor[accessType].mockImplementation(function () {\n        // @ts-expect-error\n        return original.apply(this, arguments);\n      });\n    }\n\n    Object.defineProperty(obj, propertyName, descriptor);\n    return descriptor[accessType];\n  }\n\n  clearAllMocks() {\n    this._mockState = new WeakMap();\n  }\n\n  resetAllMocks() {\n    this._mockConfigRegistry = new WeakMap();\n    this._mockState = new WeakMap();\n  }\n\n  restoreAllMocks() {\n    this._spyState.forEach(restore => restore());\n\n    this._spyState = new Set();\n  }\n\n  _typeOf(value) {\n    return value == null ? '' + value : typeof value;\n  } // the typings test helper\n\n\n  mocked(item) {\n    let _deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    return item;\n  }\n\n}\n\nexports.ModuleMocker = ModuleMocker;\nconst JestMock = new ModuleMocker(global);\nconst fn = JestMock.fn.bind(JestMock);\nexports.fn = fn;\nconst spyOn = JestMock.spyOn.bind(JestMock);\nexports.spyOn = spyOn;\nconst mocked = JestMock.mocked.bind(JestMock);\nexports.mocked = mocked;","map":{"version":3,"names":["Object","defineProperty","exports","value","spyOn","mocked","fn","ModuleMocker","_defineProperty","obj","key","enumerable","configurable","writable","MOCK_CONSTRUCTOR_NAME","FUNCTION_NAME_RESERVED_PATTERN","FUNCTION_NAME_RESERVED_REPLACE","RegExp","source","RESERVED_KEYWORDS","Set","matchArity","length","mockConstructor","_a","apply","arguments","_b","_c","_d","_e","_f","_g","_h","_i","getObjectType","prototype","toString","slice","getType","ref","typeName","Array","isArray","undefined","isReadonlyProp","object","prop","constructor","global","_environmentGlobal","_mockState","WeakMap","_mockConfigRegistry","_spyState","_invocationCallCounter","_getSlots","slots","EnvObjectProto","EnvFunctionProto","Function","EnvRegExpProto","ObjectProto","FunctionProto","RegExpProto","ownNames","getOwnPropertyNames","i","propDesc","getOwnPropertyDescriptor","get","__esModule","add","getPrototypeOf","from","_ensureMockConfig","f","config","_defaultMockConfig","set","_ensureMockState","state","_defaultMockState","calls","lastCall","mockImpl","mockName","specificMockImpls","specificReturnValues","instances","invocationCallOrder","results","_makeComponent","metadata","restore","type","members","prototypeSlots","mocker","args","mockState","mockConfig","push","mockResult","finalReturnValue","thrownError","callDidThrowError","forEach","slot","protoImpl","generateFromMetadata","_protoImpl","shift","specificMockImpl","error","_createMockFunction","_isMockFunction","getMockImplementation","val","mockClear","delete","mockReset","mockRestore","mockReturnValueOnce","mockImplementationOnce","mockResolvedValueOnce","Promise","resolve","mockRejectedValueOnce","reject","mockReturnValue","mockImplementation","mockResolvedValue","mockRejectedValue","mockReturnThis","name","getMockName","unknownType","Error","boundFunctionPrefix","bindCall","startsWith","substring","has","test","replace","body","createConstructor","_generateMock","callbacks","refs","mock","refID","slotMetadata","_metadata","setter","getMetadata","component","_refs","Map","size","match","isMockFunction","implementation","methodName","accessType","_spyOnProperty","_typeOf","original","isMethodOwner","hasOwnProperty","call","descriptor","proto","originalGet","propertyName","clearAllMocks","resetAllMocks","restoreAllMocks","item","_deep","JestMock","bind"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jest-mock/build/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.spyOn = exports.mocked = exports.fn = exports.ModuleMocker = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually, local/prefer-rest-params-eventually */\n\n/**\n * Possible types of a MockFunctionResult.\n * 'return': The call completed by returning normally.\n * 'throw': The call completed by throwing a value.\n * 'incomplete': The call has not completed yet. This is possible if you read\n *               the  mock function result from within the mock function itself\n *               (or a function called by the mock function).\n */\n\n/**\n * Represents the result of a single call to a mock function.\n */\n// see https://github.com/Microsoft/TypeScript/issues/25215\nconst MOCK_CONSTRUCTOR_NAME = 'mockConstructor';\nconst FUNCTION_NAME_RESERVED_PATTERN = /[\\s!-\\/:-@\\[-`{-~]/;\nconst FUNCTION_NAME_RESERVED_REPLACE = new RegExp(\n  FUNCTION_NAME_RESERVED_PATTERN.source,\n  'g'\n);\nconst RESERVED_KEYWORDS = new Set([\n  'arguments',\n  'await',\n  'break',\n  'case',\n  'catch',\n  'class',\n  'const',\n  'continue',\n  'debugger',\n  'default',\n  'delete',\n  'do',\n  'else',\n  'enum',\n  'eval',\n  'export',\n  'extends',\n  'false',\n  'finally',\n  'for',\n  'function',\n  'if',\n  'implements',\n  'import',\n  'in',\n  'instanceof',\n  'interface',\n  'let',\n  'new',\n  'null',\n  'package',\n  'private',\n  'protected',\n  'public',\n  'return',\n  'static',\n  'super',\n  'switch',\n  'this',\n  'throw',\n  'true',\n  'try',\n  'typeof',\n  'var',\n  'void',\n  'while',\n  'with',\n  'yield'\n]);\n\nfunction matchArity(fn, length) {\n  let mockConstructor;\n\n  switch (length) {\n    case 1:\n      mockConstructor = function (_a) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 2:\n      mockConstructor = function (_a, _b) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 3:\n      mockConstructor = function (_a, _b, _c) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 4:\n      mockConstructor = function (_a, _b, _c, _d) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 5:\n      mockConstructor = function (_a, _b, _c, _d, _e) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 6:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 7:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 8:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 9:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h, _i) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    default:\n      mockConstructor = function () {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n  }\n\n  return mockConstructor;\n}\n\nfunction getObjectType(value) {\n  return Object.prototype.toString.apply(value).slice(8, -1);\n}\n\nfunction getType(ref) {\n  const typeName = getObjectType(ref);\n\n  if (\n    typeName === 'Function' ||\n    typeName === 'AsyncFunction' ||\n    typeName === 'GeneratorFunction'\n  ) {\n    return 'function';\n  } else if (Array.isArray(ref)) {\n    return 'array';\n  } else if (typeName === 'Object') {\n    return 'object';\n  } else if (\n    typeName === 'Number' ||\n    typeName === 'String' ||\n    typeName === 'Boolean' ||\n    typeName === 'Symbol'\n  ) {\n    return 'constant';\n  } else if (\n    typeName === 'Map' ||\n    typeName === 'WeakMap' ||\n    typeName === 'Set'\n  ) {\n    return 'collection';\n  } else if (typeName === 'RegExp') {\n    return 'regexp';\n  } else if (ref === undefined) {\n    return 'undefined';\n  } else if (ref === null) {\n    return 'null';\n  } else {\n    return null;\n  }\n}\n\nfunction isReadonlyProp(object, prop) {\n  if (\n    prop === 'arguments' ||\n    prop === 'caller' ||\n    prop === 'callee' ||\n    prop === 'name' ||\n    prop === 'length'\n  ) {\n    const typeName = getObjectType(object);\n    return (\n      typeName === 'Function' ||\n      typeName === 'AsyncFunction' ||\n      typeName === 'GeneratorFunction'\n    );\n  }\n\n  if (\n    prop === 'source' ||\n    prop === 'global' ||\n    prop === 'ignoreCase' ||\n    prop === 'multiline'\n  ) {\n    return getObjectType(object) === 'RegExp';\n  }\n\n  return false;\n}\n\nclass ModuleMocker {\n  /**\n   * @see README.md\n   * @param global Global object of the test environment, used to create\n   * mocks\n   */\n  constructor(global) {\n    _defineProperty(this, '_environmentGlobal', void 0);\n\n    _defineProperty(this, '_mockState', void 0);\n\n    _defineProperty(this, '_mockConfigRegistry', void 0);\n\n    _defineProperty(this, '_spyState', void 0);\n\n    _defineProperty(this, '_invocationCallCounter', void 0);\n\n    this._environmentGlobal = global;\n    this._mockState = new WeakMap();\n    this._mockConfigRegistry = new WeakMap();\n    this._spyState = new Set();\n    this._invocationCallCounter = 1;\n  }\n\n  _getSlots(object) {\n    if (!object) {\n      return [];\n    }\n\n    const slots = new Set();\n    const EnvObjectProto = this._environmentGlobal.Object.prototype;\n    const EnvFunctionProto = this._environmentGlobal.Function.prototype;\n    const EnvRegExpProto = this._environmentGlobal.RegExp.prototype; // Also check the builtins in the current context as they leak through\n    // core node modules.\n\n    const ObjectProto = Object.prototype;\n    const FunctionProto = Function.prototype;\n    const RegExpProto = RegExp.prototype; // Properties of Object.prototype, Function.prototype and RegExp.prototype\n    // are never reported as slots\n\n    while (\n      object != null &&\n      object !== EnvObjectProto &&\n      object !== EnvFunctionProto &&\n      object !== EnvRegExpProto &&\n      object !== ObjectProto &&\n      object !== FunctionProto &&\n      object !== RegExpProto\n    ) {\n      const ownNames = Object.getOwnPropertyNames(object);\n\n      for (let i = 0; i < ownNames.length; i++) {\n        const prop = ownNames[i];\n\n        if (!isReadonlyProp(object, prop)) {\n          const propDesc = Object.getOwnPropertyDescriptor(object, prop);\n\n          if ((propDesc !== undefined && !propDesc.get) || object.__esModule) {\n            slots.add(prop);\n          }\n        }\n      }\n\n      object = Object.getPrototypeOf(object);\n    }\n\n    return Array.from(slots);\n  }\n\n  _ensureMockConfig(f) {\n    let config = this._mockConfigRegistry.get(f);\n\n    if (!config) {\n      config = this._defaultMockConfig();\n\n      this._mockConfigRegistry.set(f, config);\n    }\n\n    return config;\n  }\n\n  _ensureMockState(f) {\n    let state = this._mockState.get(f);\n\n    if (!state) {\n      state = this._defaultMockState();\n\n      this._mockState.set(f, state);\n    }\n\n    if (state.calls.length > 0) {\n      state.lastCall = state.calls[state.calls.length - 1];\n    }\n\n    return state;\n  }\n\n  _defaultMockConfig() {\n    return {\n      mockImpl: undefined,\n      mockName: 'jest.fn()',\n      specificMockImpls: [],\n      specificReturnValues: []\n    };\n  }\n\n  _defaultMockState() {\n    return {\n      calls: [],\n      instances: [],\n      invocationCallOrder: [],\n      results: []\n    };\n  }\n\n  _makeComponent(metadata, restore) {\n    if (metadata.type === 'object') {\n      return new this._environmentGlobal.Object();\n    } else if (metadata.type === 'array') {\n      return new this._environmentGlobal.Array();\n    } else if (metadata.type === 'regexp') {\n      return new this._environmentGlobal.RegExp('');\n    } else if (\n      metadata.type === 'constant' ||\n      metadata.type === 'collection' ||\n      metadata.type === 'null' ||\n      metadata.type === 'undefined'\n    ) {\n      return metadata.value;\n    } else if (metadata.type === 'function') {\n      const prototype =\n        (metadata.members &&\n          metadata.members.prototype &&\n          metadata.members.prototype.members) ||\n        {};\n\n      const prototypeSlots = this._getSlots(prototype);\n\n      const mocker = this;\n      const mockConstructor = matchArity(function (...args) {\n        const mockState = mocker._ensureMockState(f);\n\n        const mockConfig = mocker._ensureMockConfig(f);\n\n        mockState.instances.push(this);\n        mockState.calls.push(args); // Create and record an \"incomplete\" mock result immediately upon\n        // calling rather than waiting for the mock to return. This avoids\n        // issues caused by recursion where results can be recorded in the\n        // wrong order.\n\n        const mockResult = {\n          type: 'incomplete',\n          value: undefined\n        };\n        mockState.results.push(mockResult);\n        mockState.invocationCallOrder.push(mocker._invocationCallCounter++); // Will be set to the return value of the mock if an error is not thrown\n\n        let finalReturnValue; // Will be set to the error that is thrown by the mock (if it throws)\n\n        let thrownError; // Will be set to true if the mock throws an error. The presence of a\n        // value in `thrownError` is not a 100% reliable indicator because a\n        // function could throw a value of undefined.\n\n        let callDidThrowError = false;\n\n        try {\n          // The bulk of the implementation is wrapped in an immediately\n          // executed arrow function so the return value of the mock function\n          // can be easily captured and recorded, despite the many separate\n          // return points within the logic.\n          finalReturnValue = (() => {\n            if (this instanceof f) {\n              // This is probably being called as a constructor\n              prototypeSlots.forEach(slot => {\n                // Copy prototype methods to the instance to make\n                // it easier to interact with mock instance call and\n                // return values\n                if (prototype[slot].type === 'function') {\n                  // @ts-expect-error no index signature\n                  const protoImpl = this[slot]; // @ts-expect-error no index signature\n\n                  this[slot] = mocker.generateFromMetadata(prototype[slot]); // @ts-expect-error no index signature\n\n                  this[slot]._protoImpl = protoImpl;\n                }\n              }); // Run the mock constructor implementation\n\n              const mockImpl = mockConfig.specificMockImpls.length\n                ? mockConfig.specificMockImpls.shift()\n                : mockConfig.mockImpl;\n              return mockImpl && mockImpl.apply(this, arguments);\n            } // If mockImplementationOnce()/mockImplementation() is last set,\n            // implementation use the mock\n\n            let specificMockImpl = mockConfig.specificMockImpls.shift();\n\n            if (specificMockImpl === undefined) {\n              specificMockImpl = mockConfig.mockImpl;\n            }\n\n            if (specificMockImpl) {\n              return specificMockImpl.apply(this, arguments);\n            } // Otherwise use prototype implementation\n\n            if (f._protoImpl) {\n              return f._protoImpl.apply(this, arguments);\n            }\n\n            return undefined;\n          })();\n        } catch (error) {\n          // Store the thrown error so we can record it, then re-throw it.\n          thrownError = error;\n          callDidThrowError = true;\n          throw error;\n        } finally {\n          // Record the result of the function.\n          // NOTE: Intentionally NOT pushing/indexing into the array of mock\n          //       results here to avoid corrupting results data if mockClear()\n          //       is called during the execution of the mock.\n          mockResult.type = callDidThrowError ? 'throw' : 'return';\n          mockResult.value = callDidThrowError ? thrownError : finalReturnValue;\n        }\n\n        return finalReturnValue;\n      }, metadata.length || 0);\n\n      const f = this._createMockFunction(metadata, mockConstructor);\n\n      f._isMockFunction = true;\n\n      f.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;\n\n      if (typeof restore === 'function') {\n        this._spyState.add(restore);\n      }\n\n      this._mockState.set(f, this._defaultMockState());\n\n      this._mockConfigRegistry.set(f, this._defaultMockConfig());\n\n      Object.defineProperty(f, 'mock', {\n        configurable: false,\n        enumerable: true,\n        get: () => this._ensureMockState(f),\n        set: val => this._mockState.set(f, val)\n      });\n\n      f.mockClear = () => {\n        this._mockState.delete(f);\n\n        return f;\n      };\n\n      f.mockReset = () => {\n        f.mockClear();\n\n        this._mockConfigRegistry.delete(f);\n\n        return f;\n      };\n\n      f.mockRestore = () => {\n        f.mockReset();\n        return restore ? restore() : undefined;\n      };\n\n      f.mockReturnValueOnce = (\n        value // next function call will return this value or default return value\n      ) => f.mockImplementationOnce(() => value);\n\n      f.mockResolvedValueOnce = value =>\n        f.mockImplementationOnce(() => Promise.resolve(value));\n\n      f.mockRejectedValueOnce = value =>\n        f.mockImplementationOnce(() => Promise.reject(value));\n\n      f.mockReturnValue = (\n        value // next function call will return specified return value or this one\n      ) => f.mockImplementation(() => value);\n\n      f.mockResolvedValue = value =>\n        f.mockImplementation(() => Promise.resolve(value));\n\n      f.mockRejectedValue = value =>\n        f.mockImplementation(() => Promise.reject(value));\n\n      f.mockImplementationOnce = fn => {\n        // next function call will use this mock implementation return value\n        // or default mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n\n        mockConfig.specificMockImpls.push(fn);\n        return f;\n      };\n\n      f.mockImplementation = fn => {\n        // next function call will use mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n\n        mockConfig.mockImpl = fn;\n        return f;\n      };\n\n      f.mockReturnThis = () =>\n        f.mockImplementation(function () {\n          return this;\n        });\n\n      f.mockName = name => {\n        if (name) {\n          const mockConfig = this._ensureMockConfig(f);\n\n          mockConfig.mockName = name;\n        }\n\n        return f;\n      };\n\n      f.getMockName = () => {\n        const mockConfig = this._ensureMockConfig(f);\n\n        return mockConfig.mockName || 'jest.fn()';\n      };\n\n      if (metadata.mockImpl) {\n        f.mockImplementation(metadata.mockImpl);\n      }\n\n      return f;\n    } else {\n      const unknownType = metadata.type || 'undefined type';\n      throw new Error('Unrecognized type ' + unknownType);\n    }\n  }\n\n  _createMockFunction(metadata, mockConstructor) {\n    let name = metadata.name;\n\n    if (!name) {\n      return mockConstructor;\n    } // Preserve `name` property of mocked function.\n\n    const boundFunctionPrefix = 'bound ';\n    let bindCall = ''; // if-do-while for perf reasons. The common case is for the if to fail.\n\n    if (name && name.startsWith(boundFunctionPrefix)) {\n      do {\n        name = name.substring(boundFunctionPrefix.length); // Call bind() just to alter the function name.\n\n        bindCall = '.bind(null)';\n      } while (name && name.startsWith(boundFunctionPrefix));\n    } // Special case functions named `mockConstructor` to guard for infinite\n    // loops.\n\n    if (name === MOCK_CONSTRUCTOR_NAME) {\n      return mockConstructor;\n    }\n\n    if (\n      // It's a syntax error to define functions with a reserved keyword\n      // as name.\n      RESERVED_KEYWORDS.has(name) || // It's also a syntax error to define functions with a name that starts with a number\n      /^\\d/.test(name)\n    ) {\n      name = '$' + name;\n    } // It's also a syntax error to define a function with a reserved character\n    // as part of it's name.\n\n    if (FUNCTION_NAME_RESERVED_PATTERN.test(name)) {\n      name = name.replace(FUNCTION_NAME_RESERVED_REPLACE, '$');\n    }\n\n    const body =\n      'return function ' +\n      name +\n      '() {' +\n      'return ' +\n      MOCK_CONSTRUCTOR_NAME +\n      '.apply(this,arguments);' +\n      '}' +\n      bindCall;\n    const createConstructor = new this._environmentGlobal.Function(\n      MOCK_CONSTRUCTOR_NAME,\n      body\n    );\n    return createConstructor(mockConstructor);\n  }\n\n  _generateMock(metadata, callbacks, refs) {\n    // metadata not compatible but it's the same type, maybe problem with\n    // overloading of _makeComponent and not _generateMock?\n    // @ts-expect-error\n    const mock = this._makeComponent(metadata);\n\n    if (metadata.refID != null) {\n      refs[metadata.refID] = mock;\n    }\n\n    this._getSlots(metadata.members).forEach(slot => {\n      const slotMetadata = (metadata.members && metadata.members[slot]) || {};\n\n      if (slotMetadata.ref != null) {\n        callbacks.push(\n          (function (ref) {\n            return () => (mock[slot] = refs[ref]);\n          })(slotMetadata.ref)\n        );\n      } else {\n        mock[slot] = this._generateMock(slotMetadata, callbacks, refs);\n      }\n    });\n\n    if (\n      metadata.type !== 'undefined' &&\n      metadata.type !== 'null' &&\n      mock.prototype &&\n      typeof mock.prototype === 'object'\n    ) {\n      mock.prototype.constructor = mock;\n    }\n\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param _metadata Metadata for the mock in the schema returned by the\n   * getMetadata method of this module.\n   */\n\n  generateFromMetadata(_metadata) {\n    const callbacks = [];\n    const refs = {};\n\n    const mock = this._generateMock(_metadata, callbacks, refs);\n\n    callbacks.forEach(setter => setter());\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param component The component for which to retrieve metadata.\n   */\n\n  getMetadata(component, _refs) {\n    const refs = _refs || new Map();\n    const ref = refs.get(component);\n\n    if (ref != null) {\n      return {\n        ref\n      };\n    }\n\n    const type = getType(component);\n\n    if (!type) {\n      return null;\n    }\n\n    const metadata = {\n      type\n    };\n\n    if (\n      type === 'constant' ||\n      type === 'collection' ||\n      type === 'undefined' ||\n      type === 'null'\n    ) {\n      metadata.value = component;\n      return metadata;\n    } else if (type === 'function') {\n      // @ts-expect-error this is a function so it has a name\n      metadata.name = component.name; // @ts-expect-error may be a mock\n\n      if (component._isMockFunction === true) {\n        // @ts-expect-error may be a mock\n        metadata.mockImpl = component.getMockImplementation();\n      }\n    }\n\n    metadata.refID = refs.size;\n    refs.set(component, metadata.refID);\n    let members = null; // Leave arrays alone\n\n    if (type !== 'array') {\n      this._getSlots(component).forEach(slot => {\n        if (\n          type === 'function' && // @ts-expect-error may be a mock\n          component._isMockFunction === true &&\n          slot.match(/^mock/)\n        ) {\n          return;\n        } // @ts-expect-error no index signature\n\n        const slotMetadata = this.getMetadata(component[slot], refs);\n\n        if (slotMetadata) {\n          if (!members) {\n            members = {};\n          }\n\n          members[slot] = slotMetadata;\n        }\n      });\n    }\n\n    if (members) {\n      metadata.members = members;\n    }\n\n    return metadata;\n  }\n\n  isMockFunction(fn) {\n    return !!fn && fn._isMockFunction === true;\n  }\n\n  fn(implementation) {\n    const length = implementation ? implementation.length : 0;\n\n    const fn = this._makeComponent({\n      length,\n      type: 'function'\n    });\n\n    if (implementation) {\n      fn.mockImplementation(implementation);\n    }\n\n    return fn;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  spyOn(object, methodName, accessType) {\n    if (accessType) {\n      return this._spyOnProperty(object, methodName, accessType);\n    }\n\n    if (typeof object !== 'object' && typeof object !== 'function') {\n      throw new Error(\n        'Cannot spyOn on a primitive value; ' + this._typeOf(object) + ' given'\n      );\n    }\n\n    const original = object[methodName];\n\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error(\n          'Cannot spy the ' +\n            methodName +\n            ' property because it is not a function; ' +\n            this._typeOf(original) +\n            ' given instead'\n        );\n      }\n\n      const isMethodOwner = Object.prototype.hasOwnProperty.call(\n        object,\n        methodName\n      );\n      let descriptor = Object.getOwnPropertyDescriptor(object, methodName);\n      let proto = Object.getPrototypeOf(object);\n\n      while (!descriptor && proto !== null) {\n        descriptor = Object.getOwnPropertyDescriptor(proto, methodName);\n        proto = Object.getPrototypeOf(proto);\n      }\n\n      let mock;\n\n      if (descriptor && descriptor.get) {\n        const originalGet = descriptor.get;\n        mock = this._makeComponent(\n          {\n            type: 'function'\n          },\n          () => {\n            descriptor.get = originalGet;\n            Object.defineProperty(object, methodName, descriptor);\n          }\n        );\n\n        descriptor.get = () => mock;\n\n        Object.defineProperty(object, methodName, descriptor);\n      } else {\n        mock = this._makeComponent(\n          {\n            type: 'function'\n          },\n          () => {\n            if (isMethodOwner) {\n              object[methodName] = original;\n            } else {\n              delete object[methodName];\n            }\n          }\n        ); // @ts-expect-error overriding original method with a Mock\n\n        object[methodName] = mock;\n      }\n\n      mock.mockImplementation(function () {\n        return original.apply(this, arguments);\n      });\n    }\n\n    return object[methodName];\n  }\n\n  _spyOnProperty(obj, propertyName, accessType = 'get') {\n    if (typeof obj !== 'object' && typeof obj !== 'function') {\n      throw new Error(\n        'Cannot spyOn on a primitive value; ' + this._typeOf(obj) + ' given'\n      );\n    }\n\n    if (!obj) {\n      throw new Error(\n        'spyOn could not find an object to spy upon for ' + propertyName + ''\n      );\n    }\n\n    if (!propertyName) {\n      throw new Error('No property name supplied');\n    }\n\n    let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n    let proto = Object.getPrototypeOf(obj);\n\n    while (!descriptor && proto !== null) {\n      descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    if (!descriptor) {\n      throw new Error(propertyName + ' property does not exist');\n    }\n\n    if (!descriptor.configurable) {\n      throw new Error(propertyName + ' is not declared configurable');\n    }\n\n    if (!descriptor[accessType]) {\n      throw new Error(\n        'Property ' + propertyName + ' does not have access type ' + accessType\n      );\n    }\n\n    const original = descriptor[accessType];\n\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error(\n          'Cannot spy the ' +\n            propertyName +\n            ' property because it is not a function; ' +\n            this._typeOf(original) +\n            ' given instead'\n        );\n      } // @ts-expect-error: mock is assignable\n\n      descriptor[accessType] = this._makeComponent(\n        {\n          type: 'function'\n        },\n        () => {\n          // @ts-expect-error: mock is assignable\n          descriptor[accessType] = original;\n          Object.defineProperty(obj, propertyName, descriptor);\n        }\n      );\n      descriptor[accessType].mockImplementation(function () {\n        // @ts-expect-error\n        return original.apply(this, arguments);\n      });\n    }\n\n    Object.defineProperty(obj, propertyName, descriptor);\n    return descriptor[accessType];\n  }\n\n  clearAllMocks() {\n    this._mockState = new WeakMap();\n  }\n\n  resetAllMocks() {\n    this._mockConfigRegistry = new WeakMap();\n    this._mockState = new WeakMap();\n  }\n\n  restoreAllMocks() {\n    this._spyState.forEach(restore => restore());\n\n    this._spyState = new Set();\n  }\n\n  _typeOf(value) {\n    return value == null ? '' + value : typeof value;\n  } // the typings test helper\n\n  mocked(item, _deep = false) {\n    return item;\n  }\n}\n\nexports.ModuleMocker = ModuleMocker;\nconst JestMock = new ModuleMocker(global);\nconst fn = JestMock.fn.bind(JestMock);\nexports.fn = fn;\nconst spyOn = JestMock.spyOn.bind(JestMock);\nexports.spyOn = spyOn;\nconst mocked = JestMock.mocked.bind(JestMock);\nexports.mocked = mocked;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}