{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport TreeNode from './TreeNode';\nimport { Container } from \"../../ContainerBase/index\";\nimport { checkWithinAccessParams } from \"../../../utils/checkParams\";\n\nvar TreeContainer =\n/** @class */\nfunction (_super) {\n  __extends(TreeContainer, _super);\n\n  function TreeContainer(cmp) {\n    if (cmp === void 0) {\n      cmp = function (x, y) {\n        if (x < y) return -1;\n        if (x > y) return 1;\n        return 0;\n      };\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.root = undefined;\n    _this.header = new TreeNode();\n    /**\n     * @description InOrder traversal the tree.\n     * @protected\n     */\n\n    _this.inOrderTraversal = function (curNode, callback) {\n      if (curNode === undefined) return false;\n\n      var ifReturn = _this.inOrderTraversal(curNode.left, callback);\n\n      if (ifReturn) return true;\n      if (callback(curNode)) return true;\n      return _this.inOrderTraversal(curNode.right, callback);\n    };\n\n    _this.cmp = cmp;\n    return _this;\n  }\n  /**\n   * @param curNode The starting node of the search.\n   * @param key The key you want to search.\n   * @return TreeNode which key is greater than or equals to the given key.\n   * @protected\n   */\n\n\n  TreeContainer.prototype._lowerBound = function (curNode, key) {\n    var resNode;\n\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n\n      if (cmpResult < 0) {\n        curNode = curNode.right;\n      } else if (cmpResult > 0) {\n        resNode = curNode;\n        curNode = curNode.left;\n      } else return curNode;\n    }\n\n    return resNode === undefined ? this.header : resNode;\n  };\n  /**\n   * @param curNode The starting node of the search.\n   * @param key The key you want to search.\n   * @return TreeNode which key is greater than the given key.\n   * @protected\n   */\n\n\n  TreeContainer.prototype._upperBound = function (curNode, key) {\n    var resNode;\n\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n\n      if (cmpResult <= 0) {\n        curNode = curNode.right;\n      } else if (cmpResult > 0) {\n        resNode = curNode;\n        curNode = curNode.left;\n      }\n    }\n\n    return resNode === undefined ? this.header : resNode;\n  };\n  /**\n   * @param curNode The starting node of the search.\n   * @param key The key you want to search.\n   * @return TreeNode which key is less than or equals to the given key.\n   * @protected\n   */\n\n\n  TreeContainer.prototype._reverseLowerBound = function (curNode, key) {\n    var resNode;\n\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n\n      if (cmpResult < 0) {\n        resNode = curNode;\n        curNode = curNode.right;\n      } else if (cmpResult > 0) {\n        curNode = curNode.left;\n      } else return curNode;\n    }\n\n    return resNode === undefined ? this.header : resNode;\n  };\n  /**\n   * @param curNode The starting node of the search.\n   * @param key The key you want to search.\n   * @return TreeNode which key is less than the given key.\n   * @protected\n   */\n\n\n  TreeContainer.prototype._reverseUpperBound = function (curNode, key) {\n    var resNode;\n\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n\n      if (cmpResult < 0) {\n        resNode = curNode;\n        curNode = curNode.right;\n      } else if (cmpResult >= 0) {\n        curNode = curNode.left;\n      }\n    }\n\n    return resNode === undefined ? this.header : resNode;\n  };\n  /**\n   * @description Make self balance after erase a node.\n   * @param curNode The node want to remove.\n   * @protected\n   */\n\n\n  TreeContainer.prototype.eraseNodeSelfBalance = function (curNode) {\n    while (true) {\n      var parentNode = curNode.parent;\n      if (parentNode === this.header) return;\n\n      if (curNode.color === TreeNode.RED) {\n        curNode.color = TreeNode.BLACK;\n        return;\n      }\n\n      if (curNode === parentNode.left) {\n        var brother = parentNode.right;\n\n        if (brother.color === TreeNode.RED) {\n          brother.color = TreeNode.BLACK;\n          parentNode.color = TreeNode.RED;\n\n          if (parentNode === this.root) {\n            this.root = parentNode.rotateLeft();\n          } else parentNode.rotateLeft();\n        } else if (brother.color === TreeNode.BLACK) {\n          if (brother.right && brother.right.color === TreeNode.RED) {\n            brother.color = parentNode.color;\n            parentNode.color = TreeNode.BLACK;\n            brother.right.color = TreeNode.BLACK;\n\n            if (parentNode === this.root) {\n              this.root = parentNode.rotateLeft();\n            } else parentNode.rotateLeft();\n\n            return;\n          } else if (brother.left && brother.left.color === TreeNode.RED) {\n            brother.color = TreeNode.RED;\n            brother.left.color = TreeNode.BLACK;\n            brother.rotateRight();\n          } else {\n            brother.color = TreeNode.RED;\n            curNode = parentNode;\n          }\n        }\n      } else {\n        var brother = parentNode.left;\n\n        if (brother.color === TreeNode.RED) {\n          brother.color = TreeNode.BLACK;\n          parentNode.color = TreeNode.RED;\n\n          if (parentNode === this.root) {\n            this.root = parentNode.rotateRight();\n          } else parentNode.rotateRight();\n        } else {\n          if (brother.left && brother.left.color === TreeNode.RED) {\n            brother.color = parentNode.color;\n            parentNode.color = TreeNode.BLACK;\n            brother.left.color = TreeNode.BLACK;\n\n            if (parentNode === this.root) {\n              this.root = parentNode.rotateRight();\n            } else parentNode.rotateRight();\n\n            return;\n          } else if (brother.right && brother.right.color === TreeNode.RED) {\n            brother.color = TreeNode.RED;\n            brother.right.color = TreeNode.BLACK;\n            brother.rotateLeft();\n          } else {\n            brother.color = TreeNode.RED;\n            curNode = parentNode;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * @description Remove a node.\n   * @param curNode The node you want to remove.\n   * @protected\n   */\n\n\n  TreeContainer.prototype.eraseNode = function (curNode) {\n    var _a, _b;\n\n    if (this.length === 1) {\n      this.clear();\n      return;\n    }\n\n    var swapNode = curNode;\n\n    while (swapNode.left || swapNode.right) {\n      if (swapNode.right) {\n        swapNode = swapNode.right;\n\n        while (swapNode.left) swapNode = swapNode.left;\n      } else if (swapNode.left) {\n        swapNode = swapNode.left;\n      }\n\n      _a = __read([swapNode.key, curNode.key], 2), curNode.key = _a[0], swapNode.key = _a[1];\n      _b = __read([swapNode.value, curNode.value], 2), curNode.value = _b[0], swapNode.value = _b[1];\n      curNode = swapNode;\n    }\n\n    if (this.header.left === swapNode) {\n      this.header.left = swapNode.parent;\n    } else if (this.header.right === swapNode) {\n      this.header.right = swapNode.parent;\n    }\n\n    this.eraseNodeSelfBalance(swapNode);\n    swapNode.remove();\n    this.length -= 1;\n    this.root.color = TreeNode.BLACK;\n  };\n  /**\n   * @description Make self balance after insert a node.\n   * @param curNode The node want to insert.\n   * @protected\n   */\n\n\n  TreeContainer.prototype.insertNodeSelfBalance = function (curNode) {\n    while (true) {\n      var parentNode = curNode.parent;\n      if (parentNode.color === TreeNode.BLACK) return;\n      var grandParent = parentNode.parent;\n\n      if (parentNode === grandParent.left) {\n        var uncle = grandParent.right;\n\n        if (uncle && uncle.color === TreeNode.RED) {\n          uncle.color = parentNode.color = TreeNode.BLACK;\n          if (grandParent === this.root) return;\n          grandParent.color = TreeNode.RED;\n          curNode = grandParent;\n          continue;\n        } else if (curNode === parentNode.right) {\n          curNode.color = TreeNode.BLACK;\n          if (curNode.left) curNode.left.parent = parentNode;\n          if (curNode.right) curNode.right.parent = grandParent;\n          parentNode.right = curNode.left;\n          grandParent.left = curNode.right;\n          curNode.left = parentNode;\n          curNode.right = grandParent;\n\n          if (grandParent === this.root) {\n            this.root = curNode;\n            this.header.parent = curNode;\n          } else {\n            var GP = grandParent.parent;\n\n            if (GP.left === grandParent) {\n              GP.left = curNode;\n            } else GP.right = curNode;\n          }\n\n          curNode.parent = grandParent.parent;\n          parentNode.parent = curNode;\n          grandParent.parent = curNode;\n        } else {\n          parentNode.color = TreeNode.BLACK;\n\n          if (grandParent === this.root) {\n            this.root = grandParent.rotateRight();\n          } else grandParent.rotateRight();\n        }\n\n        grandParent.color = TreeNode.RED;\n      } else {\n        var uncle = grandParent.left;\n\n        if (uncle && uncle.color === TreeNode.RED) {\n          uncle.color = parentNode.color = TreeNode.BLACK;\n          if (grandParent === this.root) return;\n          grandParent.color = TreeNode.RED;\n          curNode = grandParent;\n          continue;\n        } else if (curNode === parentNode.left) {\n          curNode.color = TreeNode.BLACK;\n          if (curNode.left) curNode.left.parent = grandParent;\n          if (curNode.right) curNode.right.parent = parentNode;\n          grandParent.right = curNode.left;\n          parentNode.left = curNode.right;\n          curNode.left = grandParent;\n          curNode.right = parentNode;\n\n          if (grandParent === this.root) {\n            this.root = curNode;\n            this.header.parent = curNode;\n          } else {\n            var GP = grandParent.parent;\n\n            if (GP.left === grandParent) {\n              GP.left = curNode;\n            } else GP.right = curNode;\n          }\n\n          curNode.parent = grandParent.parent;\n          parentNode.parent = curNode;\n          grandParent.parent = curNode;\n        } else {\n          parentNode.color = TreeNode.BLACK;\n\n          if (grandParent === this.root) {\n            this.root = grandParent.rotateLeft();\n          } else grandParent.rotateLeft();\n        }\n\n        grandParent.color = TreeNode.RED;\n      }\n\n      return;\n    }\n  };\n  /**\n   * @description Find node which key is equals to the given key.\n   * @param curNode The starting node of the search.\n   * @param key The key you want to search.\n   * @protected\n   */\n\n\n  TreeContainer.prototype.findElementNode = function (curNode, key) {\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n\n      if (cmpResult < 0) {\n        curNode = curNode.right;\n      } else if (cmpResult > 0) {\n        curNode = curNode.left;\n      } else return curNode;\n    }\n\n    return curNode;\n  };\n  /**\n   * @description Insert a key-value pair or set value by the given key.\n   * @param key The key want to insert.\n   * @param value The value want to set.\n   * @param hint You can give an iterator hint to improve insertion efficiency.\n   * @protected\n   */\n\n\n  TreeContainer.prototype.set = function (key, value, hint) {\n    if (this.root === undefined) {\n      this.length += 1;\n      this.root = new TreeNode(key, value);\n      this.root.color = TreeNode.BLACK;\n      this.root.parent = this.header;\n      this.header.parent = this.root;\n      this.header.left = this.root;\n      this.header.right = this.root;\n      return;\n    }\n\n    var curNode;\n    var minNode = this.header.left;\n    var compareToMin = this.cmp(minNode.key, key);\n\n    if (compareToMin === 0) {\n      minNode.value = value;\n      return;\n    } else if (compareToMin > 0) {\n      minNode.left = new TreeNode(key, value);\n      minNode.left.parent = minNode;\n      curNode = minNode.left;\n      this.header.left = curNode;\n    } else {\n      var maxNode = this.header.right;\n      var compareToMax = this.cmp(maxNode.key, key);\n\n      if (compareToMax === 0) {\n        maxNode.value = value;\n        return;\n      } else if (compareToMax < 0) {\n        maxNode.right = new TreeNode(key, value);\n        maxNode.right.parent = maxNode;\n        curNode = maxNode.right;\n        this.header.right = curNode;\n      } else {\n        if (hint !== undefined) {\n          // @ts-ignore\n          var iterNode = hint.node;\n\n          if (iterNode !== this.header) {\n            var iterCmpRes = this.cmp(iterNode.key, key);\n\n            if (iterCmpRes === 0) {\n              iterNode.value = value;\n              return;\n            } else if (iterCmpRes > 0) {\n              var preNode = iterNode.pre();\n              var preCmpRes = this.cmp(preNode.key, key);\n\n              if (preCmpRes === 0) {\n                preNode.value = value;\n                return;\n              } else if (preCmpRes < 0) {\n                curNode = new TreeNode(key, value);\n\n                if (preNode.right === undefined) {\n                  preNode.right = curNode;\n                  curNode.parent = preNode;\n                } else {\n                  iterNode.left = curNode;\n                  curNode.parent = iterNode;\n                }\n              }\n            }\n          }\n        }\n\n        if (curNode === undefined) {\n          curNode = this.root;\n\n          while (true) {\n            var cmpResult = this.cmp(curNode.key, key);\n\n            if (cmpResult > 0) {\n              if (curNode.left === undefined) {\n                curNode.left = new TreeNode(key, value);\n                curNode.left.parent = curNode;\n                curNode = curNode.left;\n                break;\n              }\n\n              curNode = curNode.left;\n            } else if (cmpResult < 0) {\n              if (curNode.right === undefined) {\n                curNode.right = new TreeNode(key, value);\n                curNode.right.parent = curNode;\n                curNode = curNode.right;\n                break;\n              }\n\n              curNode = curNode.right;\n            } else {\n              curNode.value = value;\n              return;\n            }\n          }\n        }\n      }\n    }\n\n    this.length += 1;\n    this.insertNodeSelfBalance(curNode);\n  };\n\n  TreeContainer.prototype.clear = function () {\n    this.length = 0;\n    this.root = undefined;\n    this.header.parent = undefined;\n    this.header.left = this.header.right = undefined;\n  };\n  /**\n   * @description Update node's key by iterator.\n   * @param iter The iterator you want to change.\n   * @param key The key you want to update.\n   * @return Boolean about if the modification is successful.\n   */\n\n\n  TreeContainer.prototype.updateKeyByIterator = function (iter, key) {\n    // @ts-ignore\n    var node = iter.node;\n\n    if (node === this.header) {\n      throw new TypeError('Invalid iterator!');\n    }\n\n    if (this.length === 1) {\n      node.key = key;\n      return true;\n    }\n\n    if (node === this.header.left) {\n      if (this.cmp(node.next().key, key) > 0) {\n        node.key = key;\n        return true;\n      }\n\n      return false;\n    }\n\n    if (node === this.header.right) {\n      if (this.cmp(node.pre().key, key) < 0) {\n        node.key = key;\n        return true;\n      }\n\n      return false;\n    }\n\n    var preKey = node.pre().key;\n    if (this.cmp(preKey, key) >= 0) return false;\n    var nextKey = node.next().key;\n    if (this.cmp(nextKey, key) <= 0) return false;\n    node.key = key;\n    return true;\n  };\n\n  TreeContainer.prototype.eraseElementByPos = function (pos) {\n    var _this = this;\n\n    checkWithinAccessParams(pos, 0, this.length - 1);\n    var index = 0;\n    this.inOrderTraversal(this.root, function (curNode) {\n      if (pos === index) {\n        _this.eraseNode(curNode);\n\n        return true;\n      }\n\n      index += 1;\n      return false;\n    });\n  };\n  /**\n   * @description Remove the element of the specified key.\n   * @param key The key you want to remove.\n   */\n\n\n  TreeContainer.prototype.eraseElementByKey = function (key) {\n    if (!this.length) return;\n    var curNode = this.findElementNode(this.root, key);\n    if (curNode === undefined) return;\n    this.eraseNode(curNode);\n  };\n\n  TreeContainer.prototype.eraseElementByIterator = function (iter) {\n    // @ts-ignore\n    var node = iter.node;\n\n    if (node === this.header) {\n      throw new RangeError('Invalid iterator');\n    }\n\n    if (node.right === undefined) {\n      iter = iter.next();\n    }\n\n    this.eraseNode(node);\n    return iter;\n  };\n  /**\n   * @description Get the height of the tree.\n   * @return Number about the height of the RB-tree.\n   */\n\n\n  TreeContainer.prototype.getHeight = function () {\n    if (!this.length) return 0;\n\n    var traversal = function (curNode) {\n      if (!curNode) return 0;\n      return Math.max(traversal(curNode.left), traversal(curNode.right)) + 1;\n    };\n\n    return traversal(this.root);\n  };\n\n  return TreeContainer;\n}(Container);\n\nexport default TreeContainer;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__read","o","n","m","Symbol","iterator","i","r","ar","e","next","done","push","value","error","TreeNode","Container","checkWithinAccessParams","TreeContainer","_super","cmp","x","y","_this","root","undefined","header","inOrderTraversal","curNode","callback","ifReturn","left","right","_lowerBound","key","resNode","cmpResult","_upperBound","_reverseLowerBound","_reverseUpperBound","eraseNodeSelfBalance","parentNode","parent","color","RED","BLACK","brother","rotateLeft","rotateRight","eraseNode","_a","_b","length","clear","swapNode","remove","insertNodeSelfBalance","grandParent","uncle","GP","findElementNode","set","hint","minNode","compareToMin","maxNode","compareToMax","iterNode","node","iterCmpRes","preNode","pre","preCmpRes","updateKeyByIterator","iter","preKey","nextKey","eraseElementByPos","pos","index","eraseElementByKey","eraseElementByIterator","RangeError","getHeight","traversal","Math","max"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/js-sdsl/dist/esm/container/TreeContainer/Base/index.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport TreeNode from './TreeNode';\nimport { Container } from \"../../ContainerBase/index\";\nimport { checkWithinAccessParams } from \"../../../utils/checkParams\";\nvar TreeContainer = /** @class */ (function (_super) {\n    __extends(TreeContainer, _super);\n    function TreeContainer(cmp) {\n        if (cmp === void 0) { cmp = function (x, y) {\n            if (x < y)\n                return -1;\n            if (x > y)\n                return 1;\n            return 0;\n        }; }\n        var _this = _super.call(this) || this;\n        _this.root = undefined;\n        _this.header = new TreeNode();\n        /**\n         * @description InOrder traversal the tree.\n         * @protected\n         */\n        _this.inOrderTraversal = function (curNode, callback) {\n            if (curNode === undefined)\n                return false;\n            var ifReturn = _this.inOrderTraversal(curNode.left, callback);\n            if (ifReturn)\n                return true;\n            if (callback(curNode))\n                return true;\n            return _this.inOrderTraversal(curNode.right, callback);\n        };\n        _this.cmp = cmp;\n        return _this;\n    }\n    /**\n     * @param curNode The starting node of the search.\n     * @param key The key you want to search.\n     * @return TreeNode which key is greater than or equals to the given key.\n     * @protected\n     */\n    TreeContainer.prototype._lowerBound = function (curNode, key) {\n        var resNode;\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult < 0) {\n                curNode = curNode.right;\n            }\n            else if (cmpResult > 0) {\n                resNode = curNode;\n                curNode = curNode.left;\n            }\n            else\n                return curNode;\n        }\n        return resNode === undefined ? this.header : resNode;\n    };\n    /**\n     * @param curNode The starting node of the search.\n     * @param key The key you want to search.\n     * @return TreeNode which key is greater than the given key.\n     * @protected\n     */\n    TreeContainer.prototype._upperBound = function (curNode, key) {\n        var resNode;\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult <= 0) {\n                curNode = curNode.right;\n            }\n            else if (cmpResult > 0) {\n                resNode = curNode;\n                curNode = curNode.left;\n            }\n        }\n        return resNode === undefined ? this.header : resNode;\n    };\n    /**\n     * @param curNode The starting node of the search.\n     * @param key The key you want to search.\n     * @return TreeNode which key is less than or equals to the given key.\n     * @protected\n     */\n    TreeContainer.prototype._reverseLowerBound = function (curNode, key) {\n        var resNode;\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult < 0) {\n                resNode = curNode;\n                curNode = curNode.right;\n            }\n            else if (cmpResult > 0) {\n                curNode = curNode.left;\n            }\n            else\n                return curNode;\n        }\n        return resNode === undefined ? this.header : resNode;\n    };\n    /**\n     * @param curNode The starting node of the search.\n     * @param key The key you want to search.\n     * @return TreeNode which key is less than the given key.\n     * @protected\n     */\n    TreeContainer.prototype._reverseUpperBound = function (curNode, key) {\n        var resNode;\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult < 0) {\n                resNode = curNode;\n                curNode = curNode.right;\n            }\n            else if (cmpResult >= 0) {\n                curNode = curNode.left;\n            }\n        }\n        return resNode === undefined ? this.header : resNode;\n    };\n    /**\n     * @description Make self balance after erase a node.\n     * @param curNode The node want to remove.\n     * @protected\n     */\n    TreeContainer.prototype.eraseNodeSelfBalance = function (curNode) {\n        while (true) {\n            var parentNode = curNode.parent;\n            if (parentNode === this.header)\n                return;\n            if (curNode.color === TreeNode.RED) {\n                curNode.color = TreeNode.BLACK;\n                return;\n            }\n            if (curNode === parentNode.left) {\n                var brother = parentNode.right;\n                if (brother.color === TreeNode.RED) {\n                    brother.color = TreeNode.BLACK;\n                    parentNode.color = TreeNode.RED;\n                    if (parentNode === this.root) {\n                        this.root = parentNode.rotateLeft();\n                    }\n                    else\n                        parentNode.rotateLeft();\n                }\n                else if (brother.color === TreeNode.BLACK) {\n                    if (brother.right && brother.right.color === TreeNode.RED) {\n                        brother.color = parentNode.color;\n                        parentNode.color = TreeNode.BLACK;\n                        brother.right.color = TreeNode.BLACK;\n                        if (parentNode === this.root) {\n                            this.root = parentNode.rotateLeft();\n                        }\n                        else\n                            parentNode.rotateLeft();\n                        return;\n                    }\n                    else if (brother.left && brother.left.color === TreeNode.RED) {\n                        brother.color = TreeNode.RED;\n                        brother.left.color = TreeNode.BLACK;\n                        brother.rotateRight();\n                    }\n                    else {\n                        brother.color = TreeNode.RED;\n                        curNode = parentNode;\n                    }\n                }\n            }\n            else {\n                var brother = parentNode.left;\n                if (brother.color === TreeNode.RED) {\n                    brother.color = TreeNode.BLACK;\n                    parentNode.color = TreeNode.RED;\n                    if (parentNode === this.root) {\n                        this.root = parentNode.rotateRight();\n                    }\n                    else\n                        parentNode.rotateRight();\n                }\n                else {\n                    if (brother.left && brother.left.color === TreeNode.RED) {\n                        brother.color = parentNode.color;\n                        parentNode.color = TreeNode.BLACK;\n                        brother.left.color = TreeNode.BLACK;\n                        if (parentNode === this.root) {\n                            this.root = parentNode.rotateRight();\n                        }\n                        else\n                            parentNode.rotateRight();\n                        return;\n                    }\n                    else if (brother.right && brother.right.color === TreeNode.RED) {\n                        brother.color = TreeNode.RED;\n                        brother.right.color = TreeNode.BLACK;\n                        brother.rotateLeft();\n                    }\n                    else {\n                        brother.color = TreeNode.RED;\n                        curNode = parentNode;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @description Remove a node.\n     * @param curNode The node you want to remove.\n     * @protected\n     */\n    TreeContainer.prototype.eraseNode = function (curNode) {\n        var _a, _b;\n        if (this.length === 1) {\n            this.clear();\n            return;\n        }\n        var swapNode = curNode;\n        while (swapNode.left || swapNode.right) {\n            if (swapNode.right) {\n                swapNode = swapNode.right;\n                while (swapNode.left)\n                    swapNode = swapNode.left;\n            }\n            else if (swapNode.left) {\n                swapNode = swapNode.left;\n            }\n            _a = __read([swapNode.key, curNode.key], 2), curNode.key = _a[0], swapNode.key = _a[1];\n            _b = __read([swapNode.value, curNode.value], 2), curNode.value = _b[0], swapNode.value = _b[1];\n            curNode = swapNode;\n        }\n        if (this.header.left === swapNode) {\n            this.header.left = swapNode.parent;\n        }\n        else if (this.header.right === swapNode) {\n            this.header.right = swapNode.parent;\n        }\n        this.eraseNodeSelfBalance(swapNode);\n        swapNode.remove();\n        this.length -= 1;\n        this.root.color = TreeNode.BLACK;\n    };\n    /**\n     * @description Make self balance after insert a node.\n     * @param curNode The node want to insert.\n     * @protected\n     */\n    TreeContainer.prototype.insertNodeSelfBalance = function (curNode) {\n        while (true) {\n            var parentNode = curNode.parent;\n            if (parentNode.color === TreeNode.BLACK)\n                return;\n            var grandParent = parentNode.parent;\n            if (parentNode === grandParent.left) {\n                var uncle = grandParent.right;\n                if (uncle && uncle.color === TreeNode.RED) {\n                    uncle.color = parentNode.color = TreeNode.BLACK;\n                    if (grandParent === this.root)\n                        return;\n                    grandParent.color = TreeNode.RED;\n                    curNode = grandParent;\n                    continue;\n                }\n                else if (curNode === parentNode.right) {\n                    curNode.color = TreeNode.BLACK;\n                    if (curNode.left)\n                        curNode.left.parent = parentNode;\n                    if (curNode.right)\n                        curNode.right.parent = grandParent;\n                    parentNode.right = curNode.left;\n                    grandParent.left = curNode.right;\n                    curNode.left = parentNode;\n                    curNode.right = grandParent;\n                    if (grandParent === this.root) {\n                        this.root = curNode;\n                        this.header.parent = curNode;\n                    }\n                    else {\n                        var GP = grandParent.parent;\n                        if (GP.left === grandParent) {\n                            GP.left = curNode;\n                        }\n                        else\n                            GP.right = curNode;\n                    }\n                    curNode.parent = grandParent.parent;\n                    parentNode.parent = curNode;\n                    grandParent.parent = curNode;\n                }\n                else {\n                    parentNode.color = TreeNode.BLACK;\n                    if (grandParent === this.root) {\n                        this.root = grandParent.rotateRight();\n                    }\n                    else\n                        grandParent.rotateRight();\n                }\n                grandParent.color = TreeNode.RED;\n            }\n            else {\n                var uncle = grandParent.left;\n                if (uncle && uncle.color === TreeNode.RED) {\n                    uncle.color = parentNode.color = TreeNode.BLACK;\n                    if (grandParent === this.root)\n                        return;\n                    grandParent.color = TreeNode.RED;\n                    curNode = grandParent;\n                    continue;\n                }\n                else if (curNode === parentNode.left) {\n                    curNode.color = TreeNode.BLACK;\n                    if (curNode.left)\n                        curNode.left.parent = grandParent;\n                    if (curNode.right)\n                        curNode.right.parent = parentNode;\n                    grandParent.right = curNode.left;\n                    parentNode.left = curNode.right;\n                    curNode.left = grandParent;\n                    curNode.right = parentNode;\n                    if (grandParent === this.root) {\n                        this.root = curNode;\n                        this.header.parent = curNode;\n                    }\n                    else {\n                        var GP = grandParent.parent;\n                        if (GP.left === grandParent) {\n                            GP.left = curNode;\n                        }\n                        else\n                            GP.right = curNode;\n                    }\n                    curNode.parent = grandParent.parent;\n                    parentNode.parent = curNode;\n                    grandParent.parent = curNode;\n                }\n                else {\n                    parentNode.color = TreeNode.BLACK;\n                    if (grandParent === this.root) {\n                        this.root = grandParent.rotateLeft();\n                    }\n                    else\n                        grandParent.rotateLeft();\n                }\n                grandParent.color = TreeNode.RED;\n            }\n            return;\n        }\n    };\n    /**\n     * @description Find node which key is equals to the given key.\n     * @param curNode The starting node of the search.\n     * @param key The key you want to search.\n     * @protected\n     */\n    TreeContainer.prototype.findElementNode = function (curNode, key) {\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult < 0) {\n                curNode = curNode.right;\n            }\n            else if (cmpResult > 0) {\n                curNode = curNode.left;\n            }\n            else\n                return curNode;\n        }\n        return curNode;\n    };\n    /**\n     * @description Insert a key-value pair or set value by the given key.\n     * @param key The key want to insert.\n     * @param value The value want to set.\n     * @param hint You can give an iterator hint to improve insertion efficiency.\n     * @protected\n     */\n    TreeContainer.prototype.set = function (key, value, hint) {\n        if (this.root === undefined) {\n            this.length += 1;\n            this.root = new TreeNode(key, value);\n            this.root.color = TreeNode.BLACK;\n            this.root.parent = this.header;\n            this.header.parent = this.root;\n            this.header.left = this.root;\n            this.header.right = this.root;\n            return;\n        }\n        var curNode;\n        var minNode = this.header.left;\n        var compareToMin = this.cmp(minNode.key, key);\n        if (compareToMin === 0) {\n            minNode.value = value;\n            return;\n        }\n        else if (compareToMin > 0) {\n            minNode.left = new TreeNode(key, value);\n            minNode.left.parent = minNode;\n            curNode = minNode.left;\n            this.header.left = curNode;\n        }\n        else {\n            var maxNode = this.header.right;\n            var compareToMax = this.cmp(maxNode.key, key);\n            if (compareToMax === 0) {\n                maxNode.value = value;\n                return;\n            }\n            else if (compareToMax < 0) {\n                maxNode.right = new TreeNode(key, value);\n                maxNode.right.parent = maxNode;\n                curNode = maxNode.right;\n                this.header.right = curNode;\n            }\n            else {\n                if (hint !== undefined) {\n                    // @ts-ignore\n                    var iterNode = hint.node;\n                    if (iterNode !== this.header) {\n                        var iterCmpRes = this.cmp(iterNode.key, key);\n                        if (iterCmpRes === 0) {\n                            iterNode.value = value;\n                            return;\n                        }\n                        else if (iterCmpRes > 0) {\n                            var preNode = iterNode.pre();\n                            var preCmpRes = this.cmp(preNode.key, key);\n                            if (preCmpRes === 0) {\n                                preNode.value = value;\n                                return;\n                            }\n                            else if (preCmpRes < 0) {\n                                curNode = new TreeNode(key, value);\n                                if (preNode.right === undefined) {\n                                    preNode.right = curNode;\n                                    curNode.parent = preNode;\n                                }\n                                else {\n                                    iterNode.left = curNode;\n                                    curNode.parent = iterNode;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (curNode === undefined) {\n                    curNode = this.root;\n                    while (true) {\n                        var cmpResult = this.cmp(curNode.key, key);\n                        if (cmpResult > 0) {\n                            if (curNode.left === undefined) {\n                                curNode.left = new TreeNode(key, value);\n                                curNode.left.parent = curNode;\n                                curNode = curNode.left;\n                                break;\n                            }\n                            curNode = curNode.left;\n                        }\n                        else if (cmpResult < 0) {\n                            if (curNode.right === undefined) {\n                                curNode.right = new TreeNode(key, value);\n                                curNode.right.parent = curNode;\n                                curNode = curNode.right;\n                                break;\n                            }\n                            curNode = curNode.right;\n                        }\n                        else {\n                            curNode.value = value;\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n        this.length += 1;\n        this.insertNodeSelfBalance(curNode);\n    };\n    TreeContainer.prototype.clear = function () {\n        this.length = 0;\n        this.root = undefined;\n        this.header.parent = undefined;\n        this.header.left = this.header.right = undefined;\n    };\n    /**\n     * @description Update node's key by iterator.\n     * @param iter The iterator you want to change.\n     * @param key The key you want to update.\n     * @return Boolean about if the modification is successful.\n     */\n    TreeContainer.prototype.updateKeyByIterator = function (iter, key) {\n        // @ts-ignore\n        var node = iter.node;\n        if (node === this.header) {\n            throw new TypeError('Invalid iterator!');\n        }\n        if (this.length === 1) {\n            node.key = key;\n            return true;\n        }\n        if (node === this.header.left) {\n            if (this.cmp(node.next().key, key) > 0) {\n                node.key = key;\n                return true;\n            }\n            return false;\n        }\n        if (node === this.header.right) {\n            if (this.cmp(node.pre().key, key) < 0) {\n                node.key = key;\n                return true;\n            }\n            return false;\n        }\n        var preKey = node.pre().key;\n        if (this.cmp(preKey, key) >= 0)\n            return false;\n        var nextKey = node.next().key;\n        if (this.cmp(nextKey, key) <= 0)\n            return false;\n        node.key = key;\n        return true;\n    };\n    TreeContainer.prototype.eraseElementByPos = function (pos) {\n        var _this = this;\n        checkWithinAccessParams(pos, 0, this.length - 1);\n        var index = 0;\n        this.inOrderTraversal(this.root, function (curNode) {\n            if (pos === index) {\n                _this.eraseNode(curNode);\n                return true;\n            }\n            index += 1;\n            return false;\n        });\n    };\n    /**\n     * @description Remove the element of the specified key.\n     * @param key The key you want to remove.\n     */\n    TreeContainer.prototype.eraseElementByKey = function (key) {\n        if (!this.length)\n            return;\n        var curNode = this.findElementNode(this.root, key);\n        if (curNode === undefined)\n            return;\n        this.eraseNode(curNode);\n    };\n    TreeContainer.prototype.eraseElementByIterator = function (iter) {\n        // @ts-ignore\n        var node = iter.node;\n        if (node === this.header) {\n            throw new RangeError('Invalid iterator');\n        }\n        if (node.right === undefined) {\n            iter = iter.next();\n        }\n        this.eraseNode(node);\n        return iter;\n    };\n    /**\n     * @description Get the height of the tree.\n     * @return Number about the height of the RB-tree.\n     */\n    TreeContainer.prototype.getHeight = function () {\n        if (!this.length)\n            return 0;\n        var traversal = function (curNode) {\n            if (!curNode)\n                return 0;\n            return Math.max(traversal(curNode.left), traversal(curNode.right)) + 1;\n        };\n        return traversal(this.root);\n    };\n    return TreeContainer;\n}(Container));\nexport default TreeContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}