{"ast":null,"code":"/**\n * @fileoverview Rule to disallow async functions which have no `await` expression.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Capitalize the 1st letter of the given text.\n * @param {string} text The text to capitalize.\n * @returns {string} The text that the 1st letter was capitalized.\n */\n\n\nfunction capitalizeFirstLetter(text) {\n  return text[0].toUpperCase() + text.slice(1);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow async functions which have no `await` expression\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/require-await\"\n    },\n    schema: [],\n    messages: {\n      missingAwait: \"{{name}} has no 'await' expression.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let scopeInfo = null;\n    /**\n     * Push the scope info object to the stack.\n     * @returns {void}\n     */\n\n    function enterFunction() {\n      scopeInfo = {\n        upper: scopeInfo,\n        hasAwait: false\n      };\n    }\n    /**\n     * Pop the top scope info object from the stack.\n     * Also, it reports the function if needed.\n     * @param {ASTNode} node The node to report.\n     * @returns {void}\n     */\n\n\n    function exitFunction(node) {\n      if (!node.generator && node.async && !scopeInfo.hasAwait && !astUtils.isEmptyFunction(node)) {\n        context.report({\n          node,\n          loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n          messageId: \"missingAwait\",\n          data: {\n            name: capitalizeFirstLetter(astUtils.getFunctionNameWithKind(node))\n          }\n        });\n      }\n\n      scopeInfo = scopeInfo.upper;\n    }\n\n    return {\n      FunctionDeclaration: enterFunction,\n      FunctionExpression: enterFunction,\n      ArrowFunctionExpression: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      \"ArrowFunctionExpression:exit\": exitFunction,\n\n      AwaitExpression() {\n        if (!scopeInfo) {\n          return;\n        }\n\n        scopeInfo.hasAwait = true;\n      },\n\n      ForOfStatement(node) {\n        if (!scopeInfo) {\n          return;\n        }\n\n        if (node.await) {\n          scopeInfo.hasAwait = true;\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","capitalizeFirstLetter","text","toUpperCase","slice","module","exports","meta","type","docs","description","recommended","url","schema","messages","missingAwait","create","context","sourceCode","getSourceCode","scopeInfo","enterFunction","upper","hasAwait","exitFunction","node","generator","async","isEmptyFunction","report","loc","getFunctionHeadLoc","messageId","data","name","getFunctionNameWithKind","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","AwaitExpression","ForOfStatement","await"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/require-await.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow async functions which have no `await` expression.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Capitalize the 1st letter of the given text.\n * @param {string} text The text to capitalize.\n * @returns {string} The text that the 1st letter was capitalized.\n */\nfunction capitalizeFirstLetter(text) {\n    return text[0].toUpperCase() + text.slice(1);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow async functions which have no `await` expression\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/require-await\"\n        },\n\n        schema: [],\n\n        messages: {\n            missingAwait: \"{{name}} has no 'await' expression.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        let scopeInfo = null;\n\n        /**\n         * Push the scope info object to the stack.\n         * @returns {void}\n         */\n        function enterFunction() {\n            scopeInfo = {\n                upper: scopeInfo,\n                hasAwait: false\n            };\n        }\n\n        /**\n         * Pop the top scope info object from the stack.\n         * Also, it reports the function if needed.\n         * @param {ASTNode} node The node to report.\n         * @returns {void}\n         */\n        function exitFunction(node) {\n            if (!node.generator && node.async && !scopeInfo.hasAwait && !astUtils.isEmptyFunction(node)) {\n                context.report({\n                    node,\n                    loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n                    messageId: \"missingAwait\",\n                    data: {\n                        name: capitalizeFirstLetter(\n                            astUtils.getFunctionNameWithKind(node)\n                        )\n                    }\n                });\n            }\n\n            scopeInfo = scopeInfo.upper;\n        }\n\n        return {\n            FunctionDeclaration: enterFunction,\n            FunctionExpression: enterFunction,\n            ArrowFunctionExpression: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            \"ArrowFunctionExpression:exit\": exitFunction,\n\n            AwaitExpression() {\n                if (!scopeInfo) {\n                    return;\n                }\n\n                scopeInfo.hasAwait = true;\n            },\n            ForOfStatement(node) {\n                if (!scopeInfo) {\n                    return;\n                }\n\n                if (node.await) {\n                    scopeInfo.hasAwait = true;\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;EACjC,OAAOA,IAAI,CAAC,CAAD,CAAJ,CAAQC,WAAR,KAAwBD,IAAI,CAACE,KAAL,CAAW,CAAX,CAA/B;AACH,C,CAED;AACA;AACA;;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,2DADX;MAEFC,WAAW,EAAE,KAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAWFC,QAAQ,EAAE;MACNC,YAAY,EAAE;IADR;EAXR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IACA,IAAIC,SAAS,GAAG,IAAhB;IAEA;AACR;AACA;AACA;;IACQ,SAASC,aAAT,GAAyB;MACrBD,SAAS,GAAG;QACRE,KAAK,EAAEF,SADC;QAERG,QAAQ,EAAE;MAFF,CAAZ;IAIH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;MACxB,IAAI,CAACA,IAAI,CAACC,SAAN,IAAmBD,IAAI,CAACE,KAAxB,IAAiC,CAACP,SAAS,CAACG,QAA5C,IAAwD,CAACxB,QAAQ,CAAC6B,eAAT,CAAyBH,IAAzB,CAA7D,EAA6F;QACzFR,OAAO,CAACY,MAAR,CAAe;UACXJ,IADW;UAEXK,GAAG,EAAE/B,QAAQ,CAACgC,kBAAT,CAA4BN,IAA5B,EAAkCP,UAAlC,CAFM;UAGXc,SAAS,EAAE,cAHA;UAIXC,IAAI,EAAE;YACFC,IAAI,EAAEjC,qBAAqB,CACvBF,QAAQ,CAACoC,uBAAT,CAAiCV,IAAjC,CADuB;UADzB;QAJK,CAAf;MAUH;;MAEDL,SAAS,GAAGA,SAAS,CAACE,KAAtB;IACH;;IAED,OAAO;MACHc,mBAAmB,EAAEf,aADlB;MAEHgB,kBAAkB,EAAEhB,aAFjB;MAGHiB,uBAAuB,EAAEjB,aAHtB;MAIH,4BAA4BG,YAJzB;MAKH,2BAA2BA,YALxB;MAMH,gCAAgCA,YAN7B;;MAQHe,eAAe,GAAG;QACd,IAAI,CAACnB,SAAL,EAAgB;UACZ;QACH;;QAEDA,SAAS,CAACG,QAAV,GAAqB,IAArB;MACH,CAdE;;MAeHiB,cAAc,CAACf,IAAD,EAAO;QACjB,IAAI,CAACL,SAAL,EAAgB;UACZ;QACH;;QAED,IAAIK,IAAI,CAACgB,KAAT,EAAgB;UACZrB,SAAS,CAACG,QAAV,GAAqB,IAArB;QACH;MACJ;;IAvBE,CAAP;EAyBH;;AAhFY,CAAjB"},"metadata":{},"sourceType":"script"}