{"ast":null,"code":"/**\n * @fileoverview Prevent adjacent inline elements not separated by whitespace.\n * @author Sean Hayes\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst isCreateElement = require('../util/isCreateElement');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Helpers\n// ------------------------------------------------------------------------------\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements\n\n\nconst inlineNames = ['a', 'b', 'big', 'i', 'small', 'tt', 'abbr', 'acronym', 'cite', 'code', 'dfn', 'em', 'kbd', 'strong', 'samp', 'time', 'var', 'bdo', 'br', 'img', 'map', 'object', 'q', 'script', 'span', 'sub', 'sup', 'button', 'input', 'label', 'select', 'textarea']; // Note: raw &nbsp; will be transformed into \\u00a0.\n\nconst whitespaceRegex = /(?:^\\s|\\s$)/;\n\nfunction isInline(node) {\n  if (node.type === 'Literal') {\n    // Regular whitespace will be removed.\n    const value = node.value; // To properly separate inline elements, each end of the literal will need\n    // whitespace.\n\n    return !whitespaceRegex.test(value);\n  }\n\n  if (node.type === 'JSXElement' && inlineNames.indexOf(node.openingElement.name.name) > -1) {\n    return true;\n  }\n\n  if (node.type === 'CallExpression' && inlineNames.indexOf(node.arguments[0].value) > -1) {\n    return true;\n  }\n\n  return false;\n} // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  inlineElement: 'Child elements which render as inline HTML elements should be separated by a space or wrapped in block level elements.'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow adjacent inline elements not separated by whitespace.',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-adjacent-inline-elements')\n    },\n    schema: [],\n    messages\n  },\n\n  create(context) {\n    function validate(node, children) {\n      let currentIsInline = false;\n      let previousIsInline = false;\n\n      if (!children) {\n        return;\n      }\n\n      for (let i = 0; i < children.length; i++) {\n        currentIsInline = isInline(children[i]);\n\n        if (previousIsInline && currentIsInline) {\n          report(context, messages.inlineElement, 'inlineElement', {\n            node\n          });\n          return;\n        }\n\n        previousIsInline = currentIsInline;\n      }\n    }\n\n    return {\n      JSXElement(node) {\n        validate(node, node.children);\n      },\n\n      CallExpression(node) {\n        if (!isCreateElement(node, context)) {\n          return;\n        }\n\n        if (node.arguments.length < 2 || !node.arguments[2]) {\n          return;\n        }\n\n        const children = node.arguments[2].elements;\n        validate(node, children);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","isCreateElement","report","inlineNames","whitespaceRegex","isInline","node","type","value","test","indexOf","openingElement","name","arguments","messages","inlineElement","module","exports","meta","docs","description","category","recommended","url","schema","create","context","validate","children","currentIsInline","previousIsInline","i","length","JSXElement","CallExpression","elements"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/no-adjacent-inline-elements.js"],"sourcesContent":["/**\n * @fileoverview Prevent adjacent inline elements not separated by whitespace.\n * @author Sean Hayes\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst isCreateElement = require('../util/isCreateElement');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Helpers\n// ------------------------------------------------------------------------------\n\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements\nconst inlineNames = [\n  'a',\n  'b',\n  'big',\n  'i',\n  'small',\n  'tt',\n  'abbr',\n  'acronym',\n  'cite',\n  'code',\n  'dfn',\n  'em',\n  'kbd',\n  'strong',\n  'samp',\n  'time',\n  'var',\n  'bdo',\n  'br',\n  'img',\n  'map',\n  'object',\n  'q',\n  'script',\n  'span',\n  'sub',\n  'sup',\n  'button',\n  'input',\n  'label',\n  'select',\n  'textarea',\n];\n// Note: raw &nbsp; will be transformed into \\u00a0.\nconst whitespaceRegex = /(?:^\\s|\\s$)/;\n\nfunction isInline(node) {\n  if (node.type === 'Literal') {\n    // Regular whitespace will be removed.\n    const value = node.value;\n    // To properly separate inline elements, each end of the literal will need\n    // whitespace.\n    return !whitespaceRegex.test(value);\n  }\n  if (node.type === 'JSXElement' && inlineNames.indexOf(node.openingElement.name.name) > -1) {\n    return true;\n  }\n  if (node.type === 'CallExpression' && inlineNames.indexOf(node.arguments[0].value) > -1) {\n    return true;\n  }\n  return false;\n}\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  inlineElement: 'Child elements which render as inline HTML elements should be separated by a space or wrapped in block level elements.',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow adjacent inline elements not separated by whitespace.',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-adjacent-inline-elements'),\n    },\n    schema: [],\n\n    messages,\n  },\n  create(context) {\n    function validate(node, children) {\n      let currentIsInline = false;\n      let previousIsInline = false;\n      if (!children) {\n        return;\n      }\n      for (let i = 0; i < children.length; i++) {\n        currentIsInline = isInline(children[i]);\n        if (previousIsInline && currentIsInline) {\n          report(context, messages.inlineElement, 'inlineElement', {\n            node,\n          });\n          return;\n        }\n        previousIsInline = currentIsInline;\n      }\n    }\n    return {\n      JSXElement(node) {\n        validate(node, node.children);\n      },\n      CallExpression(node) {\n        if (!isCreateElement(node, context)) {\n          return;\n        }\n        if (node.arguments.length < 2 || !node.arguments[2]) {\n          return;\n        }\n        const children = node.arguments[2].elements;\n        validate(node, children);\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}