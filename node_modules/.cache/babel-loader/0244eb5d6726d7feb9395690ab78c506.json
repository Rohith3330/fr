{"ast":null,"code":"/**\n * @fileoverview Utility functions for props\n */\n'use strict';\n\nconst astUtil = require('./ast');\n/**\n * Checks if the Identifier node passed in looks like a propTypes declaration.\n * @param {ASTNode} node The node to check. Must be an Identifier node.\n * @returns {Boolean} `true` if the node is a propTypes declaration, `false` if not\n */\n\n\nfunction isPropTypesDeclaration(node) {\n  if (node && (node.type === 'ClassProperty' || node.type === 'PropertyDefinition')) {\n    // Flow support\n    if (node.typeAnnotation && node.key.name === 'props') {\n      return true;\n    }\n  }\n\n  return astUtil.getPropertyName(node) === 'propTypes';\n}\n/**\n * Checks if the node passed in looks like a contextTypes declaration.\n * @param {ASTNode} node The node to check.\n * @returns {Boolean} `true` if the node is a contextTypes declaration, `false` if not\n */\n\n\nfunction isContextTypesDeclaration(node) {\n  if (node && (node.type === 'ClassProperty' || node.type === 'PropertyDefinition')) {\n    // Flow support\n    if (node.typeAnnotation && node.key.name === 'context') {\n      return true;\n    }\n  }\n\n  return astUtil.getPropertyName(node) === 'contextTypes';\n}\n/**\n * Checks if the node passed in looks like a contextType declaration.\n * @param {ASTNode} node The node to check.\n * @returns {Boolean} `true` if the node is a contextType declaration, `false` if not\n */\n\n\nfunction isContextTypeDeclaration(node) {\n  return astUtil.getPropertyName(node) === 'contextType';\n}\n/**\n * Checks if the node passed in looks like a childContextTypes declaration.\n * @param {ASTNode} node The node to check.\n * @returns {Boolean} `true` if the node is a childContextTypes declaration, `false` if not\n */\n\n\nfunction isChildContextTypesDeclaration(node) {\n  return astUtil.getPropertyName(node) === 'childContextTypes';\n}\n/**\n * Checks if the Identifier node passed in looks like a defaultProps declaration.\n * @param {ASTNode} node The node to check. Must be an Identifier node.\n * @returns {Boolean} `true` if the node is a defaultProps declaration, `false` if not\n */\n\n\nfunction isDefaultPropsDeclaration(node) {\n  const propName = astUtil.getPropertyName(node);\n  return propName === 'defaultProps' || propName === 'getDefaultProps';\n}\n/**\n * Checks if we are declaring a display name\n * @param {ASTNode} node The AST node being checked.\n * @returns {Boolean} True if we are declaring a display name, false if not.\n */\n\n\nfunction isDisplayNameDeclaration(node) {\n  switch (node.type) {\n    case 'ClassProperty':\n    case 'PropertyDefinition':\n      return node.key && node.key.name === 'displayName';\n\n    case 'Identifier':\n      return node.name === 'displayName';\n\n    case 'Literal':\n      return node.value === 'displayName';\n\n    default:\n      return false;\n  }\n}\n/**\n * Checks if the PropTypes MemberExpression node passed in declares a required propType.\n * @param {ASTNode} propTypeExpression node to check. Must be a `PropTypes` MemberExpression.\n * @returns {Boolean} `true` if this PropType is required, `false` if not.\n */\n\n\nfunction isRequiredPropType(propTypeExpression) {\n  return propTypeExpression.type === 'MemberExpression' && propTypeExpression.property.name === 'isRequired';\n}\n\nmodule.exports = {\n  isPropTypesDeclaration,\n  isContextTypesDeclaration,\n  isContextTypeDeclaration,\n  isChildContextTypesDeclaration,\n  isDefaultPropsDeclaration,\n  isDisplayNameDeclaration,\n  isRequiredPropType\n};","map":{"version":3,"names":["astUtil","require","isPropTypesDeclaration","node","type","typeAnnotation","key","name","getPropertyName","isContextTypesDeclaration","isContextTypeDeclaration","isChildContextTypesDeclaration","isDefaultPropsDeclaration","propName","isDisplayNameDeclaration","value","isRequiredPropType","propTypeExpression","property","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/util/props.js"],"sourcesContent":["/**\n * @fileoverview Utility functions for props\n */\n\n'use strict';\n\nconst astUtil = require('./ast');\n\n/**\n * Checks if the Identifier node passed in looks like a propTypes declaration.\n * @param {ASTNode} node The node to check. Must be an Identifier node.\n * @returns {Boolean} `true` if the node is a propTypes declaration, `false` if not\n */\nfunction isPropTypesDeclaration(node) {\n  if (node && (node.type === 'ClassProperty' || node.type === 'PropertyDefinition')) {\n    // Flow support\n    if (node.typeAnnotation && node.key.name === 'props') {\n      return true;\n    }\n  }\n  return astUtil.getPropertyName(node) === 'propTypes';\n}\n\n/**\n * Checks if the node passed in looks like a contextTypes declaration.\n * @param {ASTNode} node The node to check.\n * @returns {Boolean} `true` if the node is a contextTypes declaration, `false` if not\n */\nfunction isContextTypesDeclaration(node) {\n  if (node && (node.type === 'ClassProperty' || node.type === 'PropertyDefinition')) {\n    // Flow support\n    if (node.typeAnnotation && node.key.name === 'context') {\n      return true;\n    }\n  }\n  return astUtil.getPropertyName(node) === 'contextTypes';\n}\n\n/**\n * Checks if the node passed in looks like a contextType declaration.\n * @param {ASTNode} node The node to check.\n * @returns {Boolean} `true` if the node is a contextType declaration, `false` if not\n */\nfunction isContextTypeDeclaration(node) {\n  return astUtil.getPropertyName(node) === 'contextType';\n}\n\n/**\n * Checks if the node passed in looks like a childContextTypes declaration.\n * @param {ASTNode} node The node to check.\n * @returns {Boolean} `true` if the node is a childContextTypes declaration, `false` if not\n */\nfunction isChildContextTypesDeclaration(node) {\n  return astUtil.getPropertyName(node) === 'childContextTypes';\n}\n\n/**\n * Checks if the Identifier node passed in looks like a defaultProps declaration.\n * @param {ASTNode} node The node to check. Must be an Identifier node.\n * @returns {Boolean} `true` if the node is a defaultProps declaration, `false` if not\n */\nfunction isDefaultPropsDeclaration(node) {\n  const propName = astUtil.getPropertyName(node);\n  return (propName === 'defaultProps' || propName === 'getDefaultProps');\n}\n\n/**\n * Checks if we are declaring a display name\n * @param {ASTNode} node The AST node being checked.\n * @returns {Boolean} True if we are declaring a display name, false if not.\n */\nfunction isDisplayNameDeclaration(node) {\n  switch (node.type) {\n    case 'ClassProperty':\n    case 'PropertyDefinition':\n      return node.key && node.key.name === 'displayName';\n    case 'Identifier':\n      return node.name === 'displayName';\n    case 'Literal':\n      return node.value === 'displayName';\n    default:\n      return false;\n  }\n}\n\n/**\n * Checks if the PropTypes MemberExpression node passed in declares a required propType.\n * @param {ASTNode} propTypeExpression node to check. Must be a `PropTypes` MemberExpression.\n * @returns {Boolean} `true` if this PropType is required, `false` if not.\n */\nfunction isRequiredPropType(propTypeExpression) {\n  return propTypeExpression.type === 'MemberExpression' && propTypeExpression.property.name === 'isRequired';\n}\n\nmodule.exports = {\n  isPropTypesDeclaration,\n  isContextTypesDeclaration,\n  isContextTypeDeclaration,\n  isChildContextTypesDeclaration,\n  isDefaultPropsDeclaration,\n  isDisplayNameDeclaration,\n  isRequiredPropType,\n};\n"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCC,IAAhC,EAAsC;EACpC,IAAIA,IAAI,KAAKA,IAAI,CAACC,IAAL,KAAc,eAAd,IAAiCD,IAAI,CAACC,IAAL,KAAc,oBAApD,CAAR,EAAmF;IACjF;IACA,IAAID,IAAI,CAACE,cAAL,IAAuBF,IAAI,CAACG,GAAL,CAASC,IAAT,KAAkB,OAA7C,EAAsD;MACpD,OAAO,IAAP;IACD;EACF;;EACD,OAAOP,OAAO,CAACQ,eAAR,CAAwBL,IAAxB,MAAkC,WAAzC;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASM,yBAAT,CAAmCN,IAAnC,EAAyC;EACvC,IAAIA,IAAI,KAAKA,IAAI,CAACC,IAAL,KAAc,eAAd,IAAiCD,IAAI,CAACC,IAAL,KAAc,oBAApD,CAAR,EAAmF;IACjF;IACA,IAAID,IAAI,CAACE,cAAL,IAAuBF,IAAI,CAACG,GAAL,CAASC,IAAT,KAAkB,SAA7C,EAAwD;MACtD,OAAO,IAAP;IACD;EACF;;EACD,OAAOP,OAAO,CAACQ,eAAR,CAAwBL,IAAxB,MAAkC,cAAzC;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASO,wBAAT,CAAkCP,IAAlC,EAAwC;EACtC,OAAOH,OAAO,CAACQ,eAAR,CAAwBL,IAAxB,MAAkC,aAAzC;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASQ,8BAAT,CAAwCR,IAAxC,EAA8C;EAC5C,OAAOH,OAAO,CAACQ,eAAR,CAAwBL,IAAxB,MAAkC,mBAAzC;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASS,yBAAT,CAAmCT,IAAnC,EAAyC;EACvC,MAAMU,QAAQ,GAAGb,OAAO,CAACQ,eAAR,CAAwBL,IAAxB,CAAjB;EACA,OAAQU,QAAQ,KAAK,cAAb,IAA+BA,QAAQ,KAAK,iBAApD;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,wBAAT,CAAkCX,IAAlC,EAAwC;EACtC,QAAQA,IAAI,CAACC,IAAb;IACE,KAAK,eAAL;IACA,KAAK,oBAAL;MACE,OAAOD,IAAI,CAACG,GAAL,IAAYH,IAAI,CAACG,GAAL,CAASC,IAAT,KAAkB,aAArC;;IACF,KAAK,YAAL;MACE,OAAOJ,IAAI,CAACI,IAAL,KAAc,aAArB;;IACF,KAAK,SAAL;MACE,OAAOJ,IAAI,CAACY,KAAL,KAAe,aAAtB;;IACF;MACE,OAAO,KAAP;EATJ;AAWD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4BC,kBAA5B,EAAgD;EAC9C,OAAOA,kBAAkB,CAACb,IAAnB,KAA4B,kBAA5B,IAAkDa,kBAAkB,CAACC,QAAnB,CAA4BX,IAA5B,KAAqC,YAA9F;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiB;EACflB,sBADe;EAEfO,yBAFe;EAGfC,wBAHe;EAIfC,8BAJe;EAKfC,yBALe;EAMfE,wBANe;EAOfE;AAPe,CAAjB"},"metadata":{},"sourceType":"script"}