{"ast":null,"code":"'use strict';\n\nconst {\n  stringify\n} = require('postcss-value-parser');\n/**\n * @param {import('postcss-value-parser').Node[][]} values\n * @return {string}\n */\n\n\nmodule.exports = function getValue(values) {\n  return stringify(flatten(values));\n};\n/**\n * @param {import('postcss-value-parser').Node[][]} values\n * @return {import('postcss-value-parser').Node[]}\n */\n\n\nfunction flatten(values) {\n  /** @type {import('postcss-value-parser').Node[]} */\n  const nodes = [];\n\n  for (const [index, arg] of values.entries()) {\n    arg.forEach((val, idx) => {\n      if (idx === arg.length - 1 && index === values.length - 1 && val.type === 'space') {\n        return;\n      }\n\n      nodes.push(val);\n    });\n\n    if (index !== values.length - 1) {\n      nodes[nodes.length - 1].type = 'div';\n      nodes[nodes.length - 1].value = ',';\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"names":["stringify","require","module","exports","getValue","values","flatten","nodes","index","arg","entries","forEach","val","idx","length","type","push","value"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-ordered-values/src/lib/getValue.js"],"sourcesContent":["'use strict';\nconst { stringify } = require('postcss-value-parser');\n\n/**\n * @param {import('postcss-value-parser').Node[][]} values\n * @return {string}\n */\nmodule.exports = function getValue(values) {\n  return stringify(flatten(values));\n};\n/**\n * @param {import('postcss-value-parser').Node[][]} values\n * @return {import('postcss-value-parser').Node[]}\n */\nfunction flatten(values) {\n  /** @type {import('postcss-value-parser').Node[]} */\n  const nodes = [];\n  for (const [index, arg] of values.entries()) {\n    arg.forEach((val, idx) => {\n      if (\n        idx === arg.length - 1 &&\n        index === values.length - 1 &&\n        val.type === 'space'\n      ) {\n        return;\n      }\n      nodes.push(val);\n    });\n\n    if (index !== values.length - 1) {\n      nodes[nodes.length - 1].type = 'div';\n      nodes[nodes.length - 1].value = ',';\n    }\n  }\n  return nodes;\n}\n"],"mappings":"AAAA;;AACA,MAAM;EAAEA;AAAF,IAAgBC,OAAO,CAAC,sBAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;EACzC,OAAOL,SAAS,CAACM,OAAO,CAACD,MAAD,CAAR,CAAhB;AACD,CAFD;AAGA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBD,MAAjB,EAAyB;EACvB;EACA,MAAME,KAAK,GAAG,EAAd;;EACA,KAAK,MAAM,CAACC,KAAD,EAAQC,GAAR,CAAX,IAA2BJ,MAAM,CAACK,OAAP,EAA3B,EAA6C;IAC3CD,GAAG,CAACE,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;MACxB,IACEA,GAAG,KAAKJ,GAAG,CAACK,MAAJ,GAAa,CAArB,IACAN,KAAK,KAAKH,MAAM,CAACS,MAAP,GAAgB,CAD1B,IAEAF,GAAG,CAACG,IAAJ,KAAa,OAHf,EAIE;QACA;MACD;;MACDR,KAAK,CAACS,IAAN,CAAWJ,GAAX;IACD,CATD;;IAWA,IAAIJ,KAAK,KAAKH,MAAM,CAACS,MAAP,GAAgB,CAA9B,EAAiC;MAC/BP,KAAK,CAACA,KAAK,CAACO,MAAN,GAAe,CAAhB,CAAL,CAAwBC,IAAxB,GAA+B,KAA/B;MACAR,KAAK,CAACA,KAAK,CAACO,MAAN,GAAe,CAAhB,CAAL,CAAwBG,KAAxB,GAAgC,GAAhC;IACD;EACF;;EACD,OAAOV,KAAP;AACD"},"metadata":{},"sourceType":"script"}