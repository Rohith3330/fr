{"ast":null,"code":"'use strict';\n\nconst browserslist = require('browserslist');\n\nconst valueParser = require('postcss-value-parser');\n\nconst {\n  getArguments\n} = require('cssnano-utils');\n/**\n * Return the greatest common divisor\n * of two numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\n\n\nfunction gcd(a, b) {\n  return b ? gcd(b, a % b) : a;\n}\n/**\n * @param {number} a\n * @param {number} b\n * @return {[number, number]}\n */\n\n\nfunction aspectRatio(a, b) {\n  const divisor = gcd(a, b);\n  return [a / divisor, b / divisor];\n}\n/**\n * @param {valueParser.Node[]} args\n * @return {string}\n */\n\n\nfunction split(args) {\n  return args.map(arg => valueParser.stringify(arg)).join('');\n}\n/**\n * @param {valueParser.Node} node\n * @return {void}\n */\n\n\nfunction removeNode(node) {\n  node.value = '';\n  node.type = 'word';\n}\n/**\n * @param {unknown[]} items\n * @return {string}\n */\n\n\nfunction sortAndDedupe(items) {\n  const a = [...new Set(items)];\n  a.sort();\n  return a.join();\n}\n/**\n * @param {boolean} legacy\n * @param {import('postcss').AtRule} rule\n * @return {void}\n */\n\n\nfunction transform(legacy, rule) {\n  const ruleName = rule.name.toLowerCase(); // We should re-arrange parameters only for `@media` and `@supports` at-rules\n\n  if (!rule.params || !['media', 'supports'].includes(ruleName)) {\n    return;\n  }\n\n  const params = valueParser(rule.params);\n  params.walk((node, index) => {\n    if (node.type === 'div') {\n      node.before = node.after = '';\n    } else if (node.type === 'function') {\n      node.before = '';\n\n      if (node.nodes[0] && node.nodes[0].type === 'word' && node.nodes[0].value.startsWith('--') && node.nodes[2] === undefined) {\n        node.after = ' ';\n      } else {\n        node.after = '';\n      }\n\n      if (node.nodes[4] && node.nodes[0].value.toLowerCase().indexOf('-aspect-ratio') === 3) {\n        const [a, b] = aspectRatio(Number(node.nodes[2].value), Number(node.nodes[4].value));\n        node.nodes[2].value = a.toString();\n        node.nodes[4].value = b.toString();\n      }\n    } else if (node.type === 'space') {\n      node.value = ' ';\n    } else {\n      const prevWord = params.nodes[index - 2];\n\n      if (node.value.toLowerCase() === 'all' && rule.name.toLowerCase() === 'media' && !prevWord) {\n        const nextWord = params.nodes[index + 2];\n\n        if (!legacy || nextWord) {\n          removeNode(node);\n        }\n\n        if (nextWord && nextWord.value.toLowerCase() === 'and') {\n          const nextSpace = params.nodes[index + 1];\n          const secondSpace = params.nodes[index + 3];\n          removeNode(nextWord);\n          removeNode(nextSpace);\n          removeNode(secondSpace);\n        }\n      }\n    }\n  }, true);\n  rule.params = sortAndDedupe(getArguments(params).map(split));\n\n  if (!rule.params.length) {\n    rule.raws.afterName = '';\n  }\n}\n\nconst allBugBrowers = new Set(['ie 10', 'ie 11']);\n/**\n * @type {import('postcss').PluginCreator<browserslist.Options>}\n * @param {browserslist.Options} options\n * @return {import('postcss').Plugin}\n */\n\nfunction pluginCreator() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const browsers = browserslist(null, {\n    stats: options.stats,\n    path: __dirname,\n    env: options.env\n  });\n  const hasAllBug = browsers.some(browser => allBugBrowers.has(browser));\n  return {\n    postcssPlugin: 'postcss-minify-params',\n\n    OnceExit(css) {\n      css.walkAtRules(rule => transform(hasAllBug, rule));\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"names":["browserslist","require","valueParser","getArguments","gcd","a","b","aspectRatio","divisor","split","args","map","arg","stringify","join","removeNode","node","value","type","sortAndDedupe","items","Set","sort","transform","legacy","rule","ruleName","name","toLowerCase","params","includes","walk","index","before","after","nodes","startsWith","undefined","indexOf","Number","toString","prevWord","nextWord","nextSpace","secondSpace","length","raws","afterName","allBugBrowers","pluginCreator","options","browsers","stats","path","__dirname","env","hasAllBug","some","browser","has","postcssPlugin","OnceExit","css","walkAtRules","postcss","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-minify-params/src/index.js"],"sourcesContent":["'use strict';\nconst browserslist = require('browserslist');\nconst valueParser = require('postcss-value-parser');\nconst { getArguments } = require('cssnano-utils');\n\n/**\n * Return the greatest common divisor\n * of two numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nfunction gcd(a, b) {\n  return b ? gcd(b, a % b) : a;\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @return {[number, number]}\n */\nfunction aspectRatio(a, b) {\n  const divisor = gcd(a, b);\n\n  return [a / divisor, b / divisor];\n}\n\n/**\n * @param {valueParser.Node[]} args\n * @return {string}\n */\nfunction split(args) {\n  return args.map((arg) => valueParser.stringify(arg)).join('');\n}\n\n/**\n * @param {valueParser.Node} node\n * @return {void}\n */\nfunction removeNode(node) {\n  node.value = '';\n  node.type = 'word';\n}\n\n/**\n * @param {unknown[]} items\n * @return {string}\n */\nfunction sortAndDedupe(items) {\n  const a = [...new Set(items)];\n  a.sort();\n  return a.join();\n}\n\n/**\n * @param {boolean} legacy\n * @param {import('postcss').AtRule} rule\n * @return {void}\n */\nfunction transform(legacy, rule) {\n  const ruleName = rule.name.toLowerCase();\n\n  // We should re-arrange parameters only for `@media` and `@supports` at-rules\n  if (!rule.params || !['media', 'supports'].includes(ruleName)) {\n    return;\n  }\n\n  const params = valueParser(rule.params);\n\n  params.walk((node, index) => {\n    if (node.type === 'div') {\n      node.before = node.after = '';\n    } else if (node.type === 'function') {\n      node.before = '';\n      if (\n        node.nodes[0] &&\n        node.nodes[0].type === 'word' &&\n        node.nodes[0].value.startsWith('--') &&\n        node.nodes[2] === undefined\n      ) {\n        node.after = ' ';\n      } else {\n        node.after = '';\n      }\n      if (\n        node.nodes[4] &&\n        node.nodes[0].value.toLowerCase().indexOf('-aspect-ratio') === 3\n      ) {\n        const [a, b] = aspectRatio(\n          Number(node.nodes[2].value),\n          Number(node.nodes[4].value)\n        );\n\n        node.nodes[2].value = a.toString();\n        node.nodes[4].value = b.toString();\n      }\n    } else if (node.type === 'space') {\n      node.value = ' ';\n    } else {\n      const prevWord = params.nodes[index - 2];\n\n      if (\n        node.value.toLowerCase() === 'all' &&\n        rule.name.toLowerCase() === 'media' &&\n        !prevWord\n      ) {\n        const nextWord = params.nodes[index + 2];\n\n        if (!legacy || nextWord) {\n          removeNode(node);\n        }\n\n        if (nextWord && nextWord.value.toLowerCase() === 'and') {\n          const nextSpace = params.nodes[index + 1];\n          const secondSpace = params.nodes[index + 3];\n\n          removeNode(nextWord);\n          removeNode(nextSpace);\n          removeNode(secondSpace);\n        }\n      }\n    }\n  }, true);\n\n  rule.params = sortAndDedupe(getArguments(params).map(split));\n\n  if (!rule.params.length) {\n    rule.raws.afterName = '';\n  }\n}\n\nconst allBugBrowers = new Set(['ie 10', 'ie 11']);\n\n/**\n * @type {import('postcss').PluginCreator<browserslist.Options>}\n * @param {browserslist.Options} options\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator(options = {}) {\n  const browsers = browserslist(null, {\n    stats: options.stats,\n    path: __dirname,\n    env: options.env,\n  });\n\n  const hasAllBug = browsers.some((browser) => allBugBrowers.has(browser));\n  return {\n    postcssPlugin: 'postcss-minify-params',\n\n    OnceExit(css) {\n      css.walkAtRules((rule) => transform(hasAllBug, rule));\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}