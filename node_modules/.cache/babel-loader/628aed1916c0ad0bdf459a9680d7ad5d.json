{"ast":null,"code":"const feature_unit = {\n  'width': 'px',\n  'height': 'px',\n  'device-width': 'px',\n  'device-height': 'px',\n  'aspect-ratio': '',\n  'device-aspect-ratio': '',\n  'color': '',\n  'color-index': '',\n  'monochrome': '',\n  'resolution': 'dpi'\n}; // Supported min-/max- attributes\n\nconst feature_name = Object.keys(feature_unit);\nconst step = .001; // smallest even number that won’t break complex queries (1in = 96px)\n\nconst power = {\n  '>': 1,\n  '<': -1\n};\nconst minmax = {\n  '>': 'min',\n  '<': 'max'\n};\n\nfunction create_query(name, gtlt, eq, value) {\n  return value.replace(/([-\\d\\.]+)(.*)/, function (_match, number, unit) {\n    const initialNumber = parseFloat(number);\n\n    if (parseFloat(number) || eq) {\n      // if eq is true, then number remains same\n      if (!eq) {\n        // change integer pixels value only on integer pixel\n        if (unit === 'px' && initialNumber === parseInt(number, 10)) {\n          number = initialNumber + power[gtlt];\n        } else {\n          number = Number(Math.round(parseFloat(number) + step * power[gtlt] + 'e6') + 'e-6');\n        }\n      }\n    } else {\n      number = power[gtlt] + feature_unit[name];\n    }\n\n    return '(' + minmax[gtlt] + '-' + name + ': ' + number + unit + ')';\n  });\n}\n\nfunction transform(rule) {\n  /**\n   * 转换 <mf-name> <|>= <mf-value>\n   *    $1  $2   $3\n   * (width >= 300px) => (min-width: 300px)\n   * (width <= 900px) => (max-width: 900px)\n   */\n  if (!rule.params.includes('<') && !rule.params.includes('>')) {\n    return;\n  } // The value doesn't support negative values\n  // But -0 is always equivalent to 0 in CSS, and so is also accepted as a valid <mq-boolean> value.\n\n\n  rule.params = rule.params.replace(/\\(\\s*([a-z-]+?)\\s*([<>])(=?)\\s*((?:-?\\d*\\.?(?:\\s*\\/?\\s*)?\\d+[a-z]*)?)\\s*\\)/gi, function ($0, $1, $2, $3, $4) {\n    if (feature_name.indexOf($1) > -1) {\n      return create_query($1, $2, $3, $4);\n    } // If it is not the specified attribute, don't replace\n\n\n    return $0;\n  });\n  /**\n   * 转换  <mf-value> <|<= <mf-name> <|<= <mf-value>\n   * 转换  <mf-value> >|>= <mf-name> >|>= <mf-value>\n   *   $1  $2$3 $4  $5$6  $7\n   * (500px <= width <= 1200px) => (min-width: 500px) and (max-width: 1200px)\n   * (500px < width <= 1200px) => (min-width: 501px) and (max-width: 1200px)\n   * (900px >= width >= 300px)  => (min-width: 300px) and (max-width: 900px)\n   */\n\n  rule.params = rule.params.replace(/\\(\\s*((?:-?\\d*\\.?(?:\\s*\\/?\\s*)?\\d+[a-z]*)?)\\s*(<|>)(=?)\\s*([a-z-]+)\\s*(<|>)(=?)\\s*((?:-?\\d*\\.?(?:\\s*\\/?\\s*)?\\d+[a-z]*)?)\\s*\\)/gi, function ($0, $1, $2, $3, $4, $5, $6, $7) {\n    if (feature_name.indexOf($4) > -1) {\n      if ($2 === '<' && $5 === '<' || $2 === '>' && $5 === '>') {\n        const min = $2 === '<' ? $1 : $7;\n        const max = $2 === '<' ? $7 : $1; // output differently depended on expression direction\n        // <mf-value> <|<= <mf-name> <|<= <mf-value>\n        // or\n        // <mf-value> >|>= <mf-name> >|>= <mf-value>\n\n        let equals_for_min = $3;\n        let equals_for_max = $6;\n\n        if ($2 === '>') {\n          equals_for_min = $6;\n          equals_for_max = $3;\n        }\n\n        return create_query($4, '>', equals_for_min, min) + ' and ' + create_query($4, '<', equals_for_max, max);\n      }\n    } // If it is not the specified attribute, don't replace\n\n\n    return $0;\n  });\n}\n\nmodule.exports = () => ({\n  postcssPlugin: 'postcss-media-minmax',\n  AtRule: {\n    media: atRule => {\n      transform(atRule);\n    },\n    'custom-media': atRule => {\n      transform(atRule);\n    }\n  }\n});\n\nmodule.exports.postcss = true;","map":{"version":3,"names":["feature_unit","feature_name","Object","keys","step","power","minmax","create_query","name","gtlt","eq","value","replace","_match","number","unit","initialNumber","parseFloat","parseInt","Number","Math","round","transform","rule","params","includes","$0","$1","$2","$3","$4","indexOf","$5","$6","$7","min","max","equals_for_min","equals_for_max","module","exports","postcssPlugin","AtRule","media","atRule","postcss"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-media-minmax/index.js"],"sourcesContent":["const feature_unit = {\n  'width': 'px',\n  'height': 'px',\n  'device-width': 'px',\n  'device-height': 'px',\n  'aspect-ratio': '',\n  'device-aspect-ratio': '',\n  'color': '',\n  'color-index': '',\n  'monochrome': '',\n  'resolution': 'dpi'\n};\n\n// Supported min-/max- attributes\nconst feature_name = Object.keys(feature_unit);\n\nconst step = .001; // smallest even number that won’t break complex queries (1in = 96px)\n\nconst power = {\n  '>': 1,\n  '<': -1\n};\n\nconst minmax = {\n  '>': 'min',\n  '<': 'max'\n};\n\nfunction create_query(name, gtlt, eq, value) {\n  return value.replace(/([-\\d\\.]+)(.*)/, function (_match, number, unit) {\n    const initialNumber = parseFloat(number);\n\n    if (parseFloat(number) || eq) {\n      // if eq is true, then number remains same\n      if (!eq) {\n        // change integer pixels value only on integer pixel\n        if (unit === 'px' && initialNumber === parseInt(number, 10)) {\n          number = initialNumber + power[gtlt];\n        } else {\n          number = Number(Math.round(parseFloat(number) + step * power[gtlt] + 'e6')+'e-6');\n        }\n      }\n    } else {\n      number = power[gtlt] + feature_unit[name];\n    }\n\n    return '(' + minmax[gtlt] + '-' + name + ': ' + number + unit + ')';\n  });\n}\n\nfunction transform(rule) {\n  /**\n   * 转换 <mf-name> <|>= <mf-value>\n   *    $1  $2   $3\n   * (width >= 300px) => (min-width: 300px)\n   * (width <= 900px) => (max-width: 900px)\n   */\n\n  if (!rule.params.includes('<') && !rule.params.includes('>')) {\n    return\n  }\n\n  // The value doesn't support negative values\n  // But -0 is always equivalent to 0 in CSS, and so is also accepted as a valid <mq-boolean> value.\n\n  rule.params = rule.params.replace(/\\(\\s*([a-z-]+?)\\s*([<>])(=?)\\s*((?:-?\\d*\\.?(?:\\s*\\/?\\s*)?\\d+[a-z]*)?)\\s*\\)/gi, function($0, $1, $2, $3, $4) {\n    if (feature_name.indexOf($1) > -1) {\n      return create_query($1, $2, $3, $4);\n    }\n    // If it is not the specified attribute, don't replace\n    return $0;\n  })\n\n  /**\n   * 转换  <mf-value> <|<= <mf-name> <|<= <mf-value>\n   * 转换  <mf-value> >|>= <mf-name> >|>= <mf-value>\n   *   $1  $2$3 $4  $5$6  $7\n   * (500px <= width <= 1200px) => (min-width: 500px) and (max-width: 1200px)\n   * (500px < width <= 1200px) => (min-width: 501px) and (max-width: 1200px)\n   * (900px >= width >= 300px)  => (min-width: 300px) and (max-width: 900px)\n   */\n\n  rule.params = rule.params.replace(/\\(\\s*((?:-?\\d*\\.?(?:\\s*\\/?\\s*)?\\d+[a-z]*)?)\\s*(<|>)(=?)\\s*([a-z-]+)\\s*(<|>)(=?)\\s*((?:-?\\d*\\.?(?:\\s*\\/?\\s*)?\\d+[a-z]*)?)\\s*\\)/gi, function($0, $1, $2, $3, $4, $5, $6, $7) {\n\n    if (feature_name.indexOf($4) > -1) {\n      if ($2 === '<' && $5 === '<' || $2 === '>' && $5 === '>') {\n        const min = ($2 === '<') ? $1 : $7;\n        const max = ($2 === '<') ? $7 : $1;\n\n        // output differently depended on expression direction\n        // <mf-value> <|<= <mf-name> <|<= <mf-value>\n        // or\n        // <mf-value> >|>= <mf-name> >|>= <mf-value>\n        let equals_for_min = $3;\n        let equals_for_max = $6;\n\n        if ($2 === '>') {\n          equals_for_min = $6;\n          equals_for_max = $3;\n        }\n\n        return create_query($4, '>', equals_for_min, min) + ' and ' + create_query($4, '<', equals_for_max, max);\n      }\n    }\n    // If it is not the specified attribute, don't replace\n    return $0;\n  });\n}\n\nmodule.exports = () => ({\n  postcssPlugin: 'postcss-media-minmax',\n  AtRule: {\n    media: (atRule) => {\n      transform(atRule);\n    },\n    'custom-media': (atRule) => {\n      transform(atRule);\n    },\n  },\n});\n\nmodule.exports.postcss = true\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}