{"ast":null,"code":"/*globals chai, spooks, require, tryer, suite, setup, test, setTimeout, Promise */\n(function (require, spooks) {\n  'use strict';\n\n  var assert, modulePath;\n\n  if (require === undefined) {\n    assert = chai.assert;\n\n    require = function () {\n      return tryer;\n    };\n  } else {\n    assert = require('chai').assert;\n    spooks = require('spooks');\n    modulePath = '../src/tryer';\n  }\n\n  suite('tryer:', function () {\n    test('require does not throw', function () {\n      assert.doesNotThrow(function () {\n        require(modulePath);\n      });\n    });\n    suite('require:', function () {\n      var tryer;\n      setup(function () {\n        tryer = require(modulePath);\n      });\n      test('function is exported', function () {\n        assert.isFunction(tryer);\n      });\n      test('tryer does not throw when options is missing', function () {\n        assert.doesNotThrow(function () {\n          tryer();\n        });\n      });\n      test('tryer does not throw when options is object', function () {\n        assert.doesNotThrow(function () {\n          tryer({});\n        });\n      });\n      suite('when passing immediately:', function () {\n        var log, predicate, action, fail, pass;\n        setup(function (done) {\n          log = {};\n          predicate = spooks.fn({\n            name: 'predicate',\n            log: log,\n            results: [true]\n          });\n          action = spooks.fn({\n            name: 'action',\n            log: log\n          });\n          fail = spooks.fn({\n            name: 'fail',\n            log: log,\n            callback: done\n          });\n          pass = spooks.fn({\n            name: 'pass',\n            log: log,\n            callback: done\n          });\n          tryer({\n            when: predicate,\n            action: action,\n            fail: fail,\n            pass: pass,\n            interval: 0,\n            limit: 3\n          });\n        });\n        test('predicate was called once', function () {\n          assert.strictEqual(log.counts.predicate, 1);\n        });\n        test('action was called once', function () {\n          assert.strictEqual(log.counts.action, 1);\n        });\n        test('fail was not called', function () {\n          assert.strictEqual(log.counts.fail, 0);\n        });\n        test('pass was called once', function () {\n          assert.strictEqual(log.counts.pass, 1);\n        });\n      });\n      suite('when failing three times:', function () {\n        var log, predicate, action, fail, pass;\n        setup(function (done) {\n          log = {};\n          predicate = spooks.fn({\n            name: 'predicate',\n            log: log,\n            results: [false]\n          });\n          action = spooks.fn({\n            name: 'action',\n            log: log\n          });\n          fail = spooks.fn({\n            name: 'fail',\n            log: log,\n            callback: done\n          });\n          pass = spooks.fn({\n            name: 'pass',\n            log: log,\n            callback: done\n          });\n          tryer({\n            when: predicate,\n            action: action,\n            fail: fail,\n            pass: pass,\n            interval: 0,\n            limit: 3\n          });\n        });\n        test('predicate was called three times', function () {\n          assert.strictEqual(log.counts.predicate, 3);\n        });\n        test('action was not called', function () {\n          assert.strictEqual(log.counts.action, 0);\n        });\n        test('fail was called once', function () {\n          assert.strictEqual(log.counts.fail, 1);\n        });\n        test('pass was not called', function () {\n          assert.strictEqual(log.counts.pass, 0);\n        });\n      });\n      suite('when failing five times:', function () {\n        var log, predicate, action, fail;\n        setup(function (done) {\n          log = {};\n          predicate = spooks.fn({\n            name: 'predicate',\n            log: log,\n            results: [false]\n          });\n          action = spooks.fn({\n            name: 'action',\n            log: log,\n            callback: done\n          });\n          fail = spooks.fn({\n            name: 'fail',\n            log: log,\n            callback: done\n          });\n          tryer({\n            when: predicate,\n            action: action,\n            fail: fail,\n            interval: 0,\n            limit: 5\n          });\n        });\n        test('predicate was called five times', function () {\n          assert.strictEqual(log.counts.predicate, 5);\n        });\n        test('action was not called', function () {\n          assert.strictEqual(log.counts.action, 0);\n        });\n        test('fail was called once', function () {\n          assert.strictEqual(log.counts.fail, 1);\n        });\n      });\n      suite('when failing exponentially:', function () {\n        var log, timestamps, predicate, action, fail;\n        setup(function (done) {\n          log = {};\n          timestamps = [];\n          predicate = spooks.fn({\n            name: 'predicate',\n            log: log,\n            results: [false],\n            callback: function () {\n              timestamps.push(Date.now());\n            }\n          });\n          action = spooks.fn({\n            name: 'action',\n            log: log,\n            callback: done\n          });\n          fail = spooks.fn({\n            name: 'fail',\n            log: log,\n            callback: done\n          });\n          timestamps.push(Date.now());\n          tryer({\n            when: predicate,\n            action: action,\n            fail: fail,\n            interval: -10,\n            limit: 4\n          });\n        });\n        test('five timestamps were recorded', function () {\n          assert.lengthOf(timestamps, 5);\n        });\n        test('first interval is immediate', function () {\n          assert.isTrue(timestamps[1] < timestamps[0] + 5);\n        });\n        test('second interval is about 10 ms', function () {\n          assert.isTrue(timestamps[2] >= timestamps[1] + 10);\n          assert.isTrue(timestamps[2] < timestamps[1] + 15);\n        });\n        test('third interval is about 20 ms', function () {\n          assert.isTrue(timestamps[3] >= timestamps[2] + 20);\n          assert.isTrue(timestamps[3] < timestamps[2] + 30);\n        });\n        test('fourth interval is about 40 ms', function () {\n          assert.isTrue(timestamps[4] >= timestamps[3] + 40);\n          assert.isTrue(timestamps[4] < timestamps[3] + 50);\n        });\n      });\n      suite('until passing immediately:', function () {\n        var log, predicate, action, fail, pass;\n        setup(function (done) {\n          log = {};\n          predicate = spooks.fn({\n            name: 'predicate',\n            log: log,\n            results: [true]\n          });\n          action = spooks.fn({\n            name: 'action',\n            log: log\n          });\n          fail = spooks.fn({\n            name: 'fail',\n            log: log,\n            callback: done\n          });\n          pass = spooks.fn({\n            name: 'pass',\n            log: log,\n            callback: done\n          });\n          tryer({\n            until: predicate,\n            action: action,\n            fail: fail,\n            pass: pass,\n            interval: 0,\n            limit: 3\n          });\n        });\n        test('predicate was called once', function () {\n          assert.strictEqual(log.counts.predicate, 1);\n        });\n        test('action was called once', function () {\n          assert.strictEqual(log.counts.action, 1);\n        });\n        test('fail was not called', function () {\n          assert.strictEqual(log.counts.fail, 0);\n        });\n        test('pass was called once', function () {\n          assert.strictEqual(log.counts.pass, 1);\n        });\n        test('pass was called once', function () {\n          assert.strictEqual(log.counts.pass, 1);\n        });\n      });\n      suite('until failing three times:', function () {\n        var log, predicate, action, fail, pass;\n        setup(function (done) {\n          log = {};\n          predicate = spooks.fn({\n            name: 'predicate',\n            log: log,\n            results: [false]\n          });\n          action = spooks.fn({\n            name: 'action',\n            log: log\n          });\n          fail = spooks.fn({\n            name: 'fail',\n            log: log,\n            callback: done\n          });\n          pass = spooks.fn({\n            name: 'pass',\n            log: log,\n            callback: done\n          });\n          tryer({\n            until: predicate,\n            action: action,\n            fail: fail,\n            pass: pass,\n            interval: 0,\n            limit: 3\n          });\n        });\n        test('predicate was called three times', function () {\n          assert.strictEqual(log.counts.predicate, 3);\n        });\n        test('action was called three times', function () {\n          assert.strictEqual(log.counts.action, 3);\n        });\n        test('fail was called once', function () {\n          assert.strictEqual(log.counts.fail, 1);\n        });\n        test('pass was not called', function () {\n          assert.strictEqual(log.counts.pass, 0);\n        });\n      });\n      suite('until failing five times:', function () {\n        var log, predicate, action, fail;\n        setup(function (done) {\n          log = {};\n          predicate = spooks.fn({\n            name: 'predicate',\n            log: log,\n            results: [false]\n          });\n          action = spooks.fn({\n            name: 'action',\n            log: log\n          });\n          fail = spooks.fn({\n            name: 'fail',\n            log: log,\n            callback: done\n          });\n          tryer({\n            until: predicate,\n            action: action,\n            fail: fail,\n            interval: 0,\n            limit: 5\n          });\n        });\n        test('predicate was called five times', function () {\n          assert.strictEqual(log.counts.predicate, 5);\n        });\n        test('action was called five times', function () {\n          assert.strictEqual(log.counts.action, 5);\n        });\n        test('fail was called once', function () {\n          assert.strictEqual(log.counts.fail, 1);\n        });\n      });\n      suite('until failing exponentially:', function () {\n        var log, timestamps, predicate, action, fail;\n        setup(function (done) {\n          log = {};\n          timestamps = [];\n          predicate = spooks.fn({\n            name: 'predicate',\n            log: log,\n            results: [false],\n            callback: function () {\n              timestamps.push(Date.now());\n            }\n          });\n          action = spooks.fn({\n            name: 'action',\n            log: log\n          });\n          fail = spooks.fn({\n            name: 'fail',\n            log: log,\n            callback: done\n          });\n          timestamps.push(Date.now());\n          tryer({\n            until: predicate,\n            action: action,\n            fail: fail,\n            interval: -10,\n            limit: 4\n          });\n        });\n        test('five timestamps were recorded', function () {\n          assert.lengthOf(timestamps, 5);\n        });\n        test('first interval is immediate', function () {\n          assert.isTrue(timestamps[1] < timestamps[0] + 5);\n        });\n        test('second interval is about 10 ms', function () {\n          assert.isTrue(timestamps[2] >= timestamps[1] + 10);\n          assert.isTrue(timestamps[2] < timestamps[1] + 20);\n        });\n        test('third interval is about 20 ms', function () {\n          assert.isTrue(timestamps[3] >= timestamps[2] + 20);\n          assert.isTrue(timestamps[3] < timestamps[2] + 30);\n        });\n        test('fourth interval is about 40 ms', function () {\n          assert.isTrue(timestamps[4] >= timestamps[3] + 40);\n          assert.isTrue(timestamps[4] < timestamps[3] + 50);\n        });\n      });\n      suite('when failing once then passing and until failing twice then passing', function () {\n        var log, predicateLoggers, predicates, action, fail, pass;\n        setup(function (done) {\n          log = {};\n          predicateLoggers = {\n            when: spooks.fn({\n              name: 'when',\n              log: log\n            }),\n            until: spooks.fn({\n              name: 'until',\n              log: log\n            })\n          };\n          predicates = {\n            when: function () {\n              predicateLoggers.when.apply(this, arguments);\n\n              if (log.counts.when === 1) {\n                return false;\n              }\n\n              return true;\n            },\n            until: function () {\n              predicateLoggers.until.apply(this, arguments);\n\n              if (log.counts.until < 3) {\n                return false;\n              }\n\n              return true;\n            }\n          };\n          action = spooks.fn({\n            name: 'action',\n            log: log\n          });\n          fail = spooks.fn({\n            name: 'fail',\n            log: log,\n            callback: done\n          });\n          pass = spooks.fn({\n            name: 'pass',\n            log: log,\n            callback: done\n          });\n          tryer({\n            when: predicates.when,\n            until: predicates.until,\n            action: action,\n            fail: fail,\n            pass: pass,\n            interval: 0,\n            limit: 4\n          });\n        });\n        test('when was called twice', function () {\n          assert.strictEqual(log.counts.when, 2);\n        });\n        test('action was called three times', function () {\n          assert.strictEqual(log.counts.action, 3);\n        });\n        test('until was called three times', function () {\n          assert.strictEqual(log.counts.until, 3);\n        });\n        test('fail was not called', function () {\n          assert.strictEqual(log.counts.fail, 0);\n        });\n        test('pass was called once', function () {\n          assert.strictEqual(log.counts.pass, 1);\n        });\n      });\n      suite('asynchronous action:', function () {\n        var log, timestamps, predicate, action;\n        setup(function (done) {\n          log = {};\n          timestamps = [];\n\n          predicate = function () {\n            timestamps.push(Date.now());\n            return false;\n          };\n\n          action = function (tryerDone) {\n            setTimeout(tryerDone, 10);\n          };\n\n          timestamps.push(Date.now());\n          tryer({\n            until: predicate,\n            action: action,\n            fail: done,\n            interval: 0,\n            limit: 3\n          });\n        });\n        test('four timestamps were recorded', function () {\n          assert.lengthOf(timestamps, 4);\n        });\n        test('first interval is about 10 ms', function () {\n          assert.isTrue(timestamps[1] >= timestamps[0] + 10);\n          assert.isTrue(timestamps[1] < timestamps[0] + 20);\n        });\n        test('second interval is about 10 ms', function () {\n          assert.isTrue(timestamps[2] >= timestamps[1] + 10);\n          assert.isTrue(timestamps[2] < timestamps[1] + 20);\n        });\n        test('third interval is about 10 ms', function () {\n          assert.isTrue(timestamps[3] >= timestamps[2] + 10);\n          assert.isTrue(timestamps[3] < timestamps[2] + 20);\n        });\n      });\n\n      if (typeof Promise === 'function') {\n        suite('promise-resolving action:', function () {\n          var log, timestamps, predicate, action;\n          setup(function (done) {\n            log = {};\n            timestamps = [];\n\n            predicate = function () {\n              timestamps.push(Date.now());\n              return false;\n            };\n\n            action = function () {\n              return new Promise(function (resolve) {\n                setTimeout(resolve, 10);\n              });\n            };\n\n            timestamps.push(Date.now());\n            tryer({\n              until: predicate,\n              action: action,\n              fail: done,\n              interval: 0,\n              limit: 3\n            });\n          });\n          test('four timestamps were recorded', function () {\n            assert.lengthOf(timestamps, 4);\n          });\n          test('first interval is about 10 ms', function () {\n            assert.isTrue(timestamps[1] >= timestamps[0] + 10);\n            assert.isTrue(timestamps[1] < timestamps[0] + 20);\n          });\n          test('second interval is about 10 ms', function () {\n            assert.isTrue(timestamps[2] >= timestamps[1] + 10);\n            assert.isTrue(timestamps[2] < timestamps[1] + 20);\n          });\n          test('third interval is about 10 ms', function () {\n            assert.isTrue(timestamps[3] >= timestamps[2] + 10);\n            assert.isTrue(timestamps[3] < timestamps[2] + 20);\n          });\n        });\n        suite('promise-rejecting action:', function () {\n          var log, timestamps, predicate, action;\n          setup(function (done) {\n            log = {};\n            timestamps = [];\n\n            predicate = function () {\n              timestamps.push(Date.now());\n              return false;\n            };\n\n            action = function () {\n              return new Promise(function (_, reject) {\n                setTimeout(reject, 10);\n              });\n            };\n\n            timestamps.push(Date.now());\n            tryer({\n              until: predicate,\n              action: action,\n              fail: done,\n              interval: 0,\n              limit: 3\n            });\n          });\n          test('four timestamps were recorded', function () {\n            assert.lengthOf(timestamps, 4);\n          });\n          test('first interval is about 10 ms', function () {\n            assert.isTrue(timestamps[1] >= timestamps[0] + 10);\n            assert.isTrue(timestamps[1] < timestamps[0] + 20);\n          });\n          test('second interval is about 10 ms', function () {\n            assert.isTrue(timestamps[2] >= timestamps[1] + 10);\n            assert.isTrue(timestamps[2] < timestamps[1] + 20);\n          });\n          test('third interval is about 10 ms', function () {\n            assert.isTrue(timestamps[3] >= timestamps[2] + 10);\n            assert.isTrue(timestamps[3] < timestamps[2] + 20);\n          });\n        });\n      }\n    });\n  });\n})(typeof require === 'function' ? require : undefined, typeof spooks === 'object' ? spooks : undefined);","map":{"version":3,"names":["require","spooks","assert","modulePath","undefined","chai","tryer","suite","test","doesNotThrow","setup","isFunction","log","predicate","action","fail","pass","done","fn","name","results","callback","when","interval","limit","strictEqual","counts","timestamps","push","Date","now","lengthOf","isTrue","until","predicateLoggers","predicates","apply","arguments","tryerDone","setTimeout","Promise","resolve","_","reject"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tryer/test/unit.js"],"sourcesContent":["/*globals chai, spooks, require, tryer, suite, setup, test, setTimeout, Promise */\n\n(function (require, spooks) {\n  'use strict';\n\n  var assert, modulePath;\n\n  if (require === undefined) {\n    assert = chai.assert;\n    require = function () { return tryer; };\n  } else {\n    assert = require('chai').assert;\n    spooks = require('spooks');\n    modulePath = '../src/tryer';\n  }\n  \n  suite('tryer:', function () {\n    test('require does not throw', function () {\n      assert.doesNotThrow(function () {\n        require(modulePath);\n      });\n    });\n  \n    suite('require:', function () {\n      var tryer;\n  \n      setup(function () {\n        tryer = require(modulePath);\n      });\n  \n      test('function is exported', function () {\n        assert.isFunction(tryer);\n      });\n  \n      test('tryer does not throw when options is missing', function () {\n        assert.doesNotThrow(function () {\n          tryer();\n        });\n      });\n  \n      test('tryer does not throw when options is object', function () {\n        assert.doesNotThrow(function () {\n          tryer({});\n        });\n      });\n  \n      suite('when passing immediately:', function () {\n        var log, predicate, action, fail, pass;\n  \n        setup(function (done) {\n          log = {};\n          predicate = spooks.fn({ name: 'predicate', log: log, results: [ true ] });\n          action = spooks.fn({ name: 'action', log: log });\n          fail = spooks.fn({ name: 'fail', log: log, callback: done });\n          pass = spooks.fn({ name: 'pass', log: log, callback: done });\n          tryer({\n            when: predicate,\n            action: action,\n            fail: fail,\n            pass: pass,\n            interval: 0,\n            limit: 3\n          });\n        });\n  \n        test('predicate was called once', function () {\n          assert.strictEqual(log.counts.predicate, 1);\n        });\n  \n        test('action was called once', function () {\n          assert.strictEqual(log.counts.action, 1);\n        });\n  \n        test('fail was not called', function () {\n          assert.strictEqual(log.counts.fail, 0);\n        });\n  \n        test('pass was called once', function () {\n          assert.strictEqual(log.counts.pass, 1);\n        });\n      });\n  \n      suite('when failing three times:', function () {\n        var log, predicate, action, fail, pass;\n  \n        setup(function (done) {\n          log = {};\n          predicate = spooks.fn({ name: 'predicate', log: log, results: [ false ] });\n          action = spooks.fn({ name: 'action', log: log });\n          fail = spooks.fn({ name: 'fail', log: log, callback: done });\n          pass = spooks.fn({ name: 'pass', log: log, callback: done });\n          tryer({\n            when: predicate,\n            action: action,\n            fail: fail,\n            pass: pass,\n            interval: 0,\n            limit: 3\n          });\n        });\n  \n        test('predicate was called three times', function () {\n          assert.strictEqual(log.counts.predicate, 3);\n        });\n  \n        test('action was not called', function () {\n          assert.strictEqual(log.counts.action, 0);\n        });\n  \n        test('fail was called once', function () {\n          assert.strictEqual(log.counts.fail, 1);\n        });\n  \n        test('pass was not called', function () {\n          assert.strictEqual(log.counts.pass, 0);\n        });\n      });\n  \n      suite('when failing five times:', function () {\n        var log, predicate, action, fail;\n  \n        setup(function (done) {\n          log = {};\n          predicate = spooks.fn({ name: 'predicate', log: log, results: [ false ] });\n          action = spooks.fn({ name: 'action', log: log, callback: done });\n          fail = spooks.fn({ name: 'fail', log: log, callback: done });\n          tryer({ when: predicate, action: action, fail: fail, interval: 0, limit: 5 });\n        });\n  \n        test('predicate was called five times', function () {\n          assert.strictEqual(log.counts.predicate, 5);\n        });\n  \n        test('action was not called', function () {\n          assert.strictEqual(log.counts.action, 0);\n        });\n  \n        test('fail was called once', function () {\n          assert.strictEqual(log.counts.fail, 1);\n        });\n      });\n  \n      suite('when failing exponentially:', function () {\n        var log, timestamps, predicate, action, fail;\n  \n        setup(function (done) {\n          log = {};\n          timestamps = [];\n          predicate = spooks.fn({\n            name: 'predicate',\n            log: log,\n            results: [ false ],\n            callback: function () {\n              timestamps.push(Date.now());\n            }\n          });\n          action = spooks.fn({ name: 'action', log: log, callback: done });\n          fail = spooks.fn({ name: 'fail', log: log, callback: done });\n          timestamps.push(Date.now());\n          tryer({ when: predicate, action: action, fail: fail, interval: -10, limit: 4 });\n        });\n  \n        test('five timestamps were recorded', function () {\n          assert.lengthOf(timestamps, 5);\n        });\n  \n        test('first interval is immediate', function () {\n          assert.isTrue(timestamps[1] < timestamps[0] + 5);\n        });\n  \n        test('second interval is about 10 ms', function () {\n          assert.isTrue(timestamps[2] >= timestamps[1] + 10);\n          assert.isTrue(timestamps[2] < timestamps[1] + 15);\n        });\n  \n        test('third interval is about 20 ms', function () {\n          assert.isTrue(timestamps[3] >= timestamps[2] + 20);\n          assert.isTrue(timestamps[3] < timestamps[2] + 30);\n        });\n  \n        test('fourth interval is about 40 ms', function () {\n          assert.isTrue(timestamps[4] >= timestamps[3] + 40);\n          assert.isTrue(timestamps[4] < timestamps[3] + 50);\n        });\n      });\n  \n      suite('until passing immediately:', function () {\n        var log, predicate, action, fail, pass;\n  \n        setup(function (done) {\n          log = {};\n          predicate = spooks.fn({ name: 'predicate', log: log, results: [ true ] });\n          action = spooks.fn({ name: 'action', log: log });\n          fail = spooks.fn({ name: 'fail', log: log, callback: done });\n          pass = spooks.fn({ name: 'pass', log: log, callback: done });\n          tryer({\n            until: predicate,\n            action: action,\n            fail: fail,\n            pass: pass,\n            interval: 0,\n            limit: 3\n          });\n        });\n  \n        test('predicate was called once', function () {\n          assert.strictEqual(log.counts.predicate, 1);\n        });\n  \n        test('action was called once', function () {\n          assert.strictEqual(log.counts.action, 1);\n        });\n  \n        test('fail was not called', function () {\n          assert.strictEqual(log.counts.fail, 0);\n        });\n  \n        test('pass was called once', function () {\n          assert.strictEqual(log.counts.pass, 1);\n        });\n  \n        test('pass was called once', function () {\n          assert.strictEqual(log.counts.pass, 1);\n        });\n      });\n  \n      suite('until failing three times:', function () {\n        var log, predicate, action, fail, pass;\n  \n        setup(function (done) {\n          log = {};\n          predicate = spooks.fn({ name: 'predicate', log: log, results: [ false ] });\n          action = spooks.fn({ name: 'action', log: log });\n          fail = spooks.fn({ name: 'fail', log: log, callback: done });\n          pass = spooks.fn({ name: 'pass', log: log, callback: done });\n          tryer({\n            until: predicate,\n            action: action,\n            fail: fail,\n            pass: pass,\n            interval: 0,\n            limit: 3\n          });\n        });\n  \n        test('predicate was called three times', function () {\n          assert.strictEqual(log.counts.predicate, 3);\n        });\n  \n        test('action was called three times', function () {\n          assert.strictEqual(log.counts.action, 3);\n        });\n  \n        test('fail was called once', function () {\n          assert.strictEqual(log.counts.fail, 1);\n        });\n  \n        test('pass was not called', function () {\n          assert.strictEqual(log.counts.pass, 0);\n        });\n      });\n  \n      suite('until failing five times:', function () {\n        var log, predicate, action, fail;\n  \n        setup(function (done) {\n          log = {};\n          predicate = spooks.fn({ name: 'predicate', log: log, results: [ false ] });\n          action = spooks.fn({ name: 'action', log: log });\n          fail = spooks.fn({ name: 'fail', log: log, callback: done });\n          tryer({ until: predicate, action: action, fail: fail, interval: 0, limit: 5 });\n        });\n  \n        test('predicate was called five times', function () {\n          assert.strictEqual(log.counts.predicate, 5);\n        });\n  \n        test('action was called five times', function () {\n          assert.strictEqual(log.counts.action, 5);\n        });\n  \n        test('fail was called once', function () {\n          assert.strictEqual(log.counts.fail, 1);\n        });\n      });\n  \n      suite('until failing exponentially:', function () {\n        var log, timestamps, predicate, action, fail;\n  \n        setup(function (done) {\n          log = {};\n          timestamps = [];\n          predicate = spooks.fn({\n            name: 'predicate',\n            log: log,\n            results: [ false ],\n            callback: function () {\n              timestamps.push(Date.now());\n            }\n          });\n          action = spooks.fn({ name: 'action', log: log });\n          fail = spooks.fn({ name: 'fail', log: log, callback: done });\n          timestamps.push(Date.now());\n          tryer({ until: predicate, action: action, fail: fail, interval: -10, limit: 4 });\n        });\n  \n        test('five timestamps were recorded', function () {\n          assert.lengthOf(timestamps, 5);\n        });\n  \n        test('first interval is immediate', function () {\n          assert.isTrue(timestamps[1] < timestamps[0] + 5);\n        });\n  \n        test('second interval is about 10 ms', function () {\n          assert.isTrue(timestamps[2] >= timestamps[1] + 10);\n          assert.isTrue(timestamps[2] < timestamps[1] + 20);\n        });\n  \n        test('third interval is about 20 ms', function () {\n          assert.isTrue(timestamps[3] >= timestamps[2] + 20);\n          assert.isTrue(timestamps[3] < timestamps[2] + 30);\n        });\n  \n        test('fourth interval is about 40 ms', function () {\n          assert.isTrue(timestamps[4] >= timestamps[3] + 40);\n          assert.isTrue(timestamps[4] < timestamps[3] + 50);\n        });\n      });\n  \n      suite('when failing once then passing and until failing twice then passing', function () {\n        var log, predicateLoggers, predicates, action, fail, pass;\n  \n        setup(function (done) {\n          log = {};\n          predicateLoggers = {\n            when: spooks.fn({ name: 'when', log: log }),\n            until: spooks.fn({ name: 'until', log: log })\n          };\n          predicates = {\n            when: function () {\n              predicateLoggers.when.apply(this, arguments);\n              if (log.counts.when === 1) {\n                return false;\n              }\n              return true;\n            },\n            until: function () {\n              predicateLoggers.until.apply(this, arguments);\n              if (log.counts.until < 3) {\n                return false;\n              }\n              return true;\n            }\n          };\n          action = spooks.fn({ name: 'action', log: log });\n          fail = spooks.fn({ name: 'fail', log: log, callback: done });\n          pass = spooks.fn({ name: 'pass', log: log, callback: done });\n          tryer({\n            when: predicates.when,\n            until: predicates.until,\n            action: action,\n            fail: fail,\n            pass: pass,\n            interval: 0,\n            limit: 4\n          });\n        });\n  \n        test('when was called twice', function () {\n          assert.strictEqual(log.counts.when, 2);\n        });\n  \n        test('action was called three times', function () {\n          assert.strictEqual(log.counts.action, 3);\n        });\n  \n        test('until was called three times', function () {\n          assert.strictEqual(log.counts.until, 3);\n        });\n  \n        test('fail was not called', function () {\n          assert.strictEqual(log.counts.fail, 0);\n        });\n  \n        test('pass was called once', function () {\n          assert.strictEqual(log.counts.pass, 1);\n        });\n      });\n  \n      suite('asynchronous action:', function () {\n        var log, timestamps, predicate, action;\n  \n        setup(function (done) {\n          log = {};\n          timestamps = [];\n          predicate = function () {\n            timestamps.push(Date.now());\n            return false;\n          };\n          action = function (tryerDone) {\n            setTimeout(tryerDone, 10);\n          };\n          timestamps.push(Date.now());\n          tryer({ until: predicate, action: action, fail: done, interval: 0, limit: 3 });\n        });\n  \n        test('four timestamps were recorded', function () {\n          assert.lengthOf(timestamps, 4);\n        });\n  \n        test('first interval is about 10 ms', function () {\n          assert.isTrue(timestamps[1] >= timestamps[0] + 10);\n          assert.isTrue(timestamps[1] < timestamps[0] + 20);\n        });\n  \n        test('second interval is about 10 ms', function () {\n          assert.isTrue(timestamps[2] >= timestamps[1] + 10);\n          assert.isTrue(timestamps[2] < timestamps[1] + 20);\n        });\n  \n        test('third interval is about 10 ms', function () {\n          assert.isTrue(timestamps[3] >= timestamps[2] + 10);\n          assert.isTrue(timestamps[3] < timestamps[2] + 20);\n        });\n      });\n  \n      if (typeof Promise === 'function') {\n        suite('promise-resolving action:', function () {\n          var log, timestamps, predicate, action;\n  \n          setup(function (done) {\n            log = {};\n            timestamps = [];\n            predicate = function () {\n              timestamps.push(Date.now());\n              return false;\n            };\n            action = function () {\n              return new Promise(function (resolve) {\n                setTimeout(resolve, 10);\n              });\n            };\n            timestamps.push(Date.now());\n            tryer({ until: predicate, action: action, fail: done, interval: 0, limit: 3 });\n          });\n  \n          test('four timestamps were recorded', function () {\n            assert.lengthOf(timestamps, 4);\n          });\n  \n          test('first interval is about 10 ms', function () {\n            assert.isTrue(timestamps[1] >= timestamps[0] + 10);\n            assert.isTrue(timestamps[1] < timestamps[0] + 20);\n          });\n  \n          test('second interval is about 10 ms', function () {\n            assert.isTrue(timestamps[2] >= timestamps[1] + 10);\n            assert.isTrue(timestamps[2] < timestamps[1] + 20);\n          });\n  \n          test('third interval is about 10 ms', function () {\n            assert.isTrue(timestamps[3] >= timestamps[2] + 10);\n            assert.isTrue(timestamps[3] < timestamps[2] + 20);\n          });\n        });\n\n        suite('promise-rejecting action:', function () {\n          var log, timestamps, predicate, action;\n  \n          setup(function (done) {\n            log = {};\n            timestamps = [];\n            predicate = function () {\n              timestamps.push(Date.now());\n              return false;\n            };\n            action = function () {\n              return new Promise(function (_, reject) {\n                setTimeout(reject, 10);\n              });\n            };\n            timestamps.push(Date.now());\n            tryer({ until: predicate, action: action, fail: done, interval: 0, limit: 3 });\n          });\n  \n          test('four timestamps were recorded', function () {\n            assert.lengthOf(timestamps, 4);\n          });\n  \n          test('first interval is about 10 ms', function () {\n            assert.isTrue(timestamps[1] >= timestamps[0] + 10);\n            assert.isTrue(timestamps[1] < timestamps[0] + 20);\n          });\n  \n          test('second interval is about 10 ms', function () {\n            assert.isTrue(timestamps[2] >= timestamps[1] + 10);\n            assert.isTrue(timestamps[2] < timestamps[1] + 20);\n          });\n  \n          test('third interval is about 10 ms', function () {\n            assert.isTrue(timestamps[3] >= timestamps[2] + 10);\n            assert.isTrue(timestamps[3] < timestamps[2] + 20);\n          });\n        });\n      }\n    });\n  });\n}(\n  typeof require === 'function' ? require : undefined,\n  typeof spooks === 'object' ? spooks : undefined)\n);\n  \n"],"mappings":"AAAA;AAEC,WAAUA,OAAV,EAAmBC,MAAnB,EAA2B;EAC1B;;EAEA,IAAIC,MAAJ,EAAYC,UAAZ;;EAEA,IAAIH,OAAO,KAAKI,SAAhB,EAA2B;IACzBF,MAAM,GAAGG,IAAI,CAACH,MAAd;;IACAF,OAAO,GAAG,YAAY;MAAE,OAAOM,KAAP;IAAe,CAAvC;EACD,CAHD,MAGO;IACLJ,MAAM,GAAGF,OAAO,CAAC,MAAD,CAAP,CAAgBE,MAAzB;IACAD,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAhB;IACAG,UAAU,GAAG,cAAb;EACD;;EAEDI,KAAK,CAAC,QAAD,EAAW,YAAY;IAC1BC,IAAI,CAAC,wBAAD,EAA2B,YAAY;MACzCN,MAAM,CAACO,YAAP,CAAoB,YAAY;QAC9BT,OAAO,CAACG,UAAD,CAAP;MACD,CAFD;IAGD,CAJG,CAAJ;IAMAI,KAAK,CAAC,UAAD,EAAa,YAAY;MAC5B,IAAID,KAAJ;MAEAI,KAAK,CAAC,YAAY;QAChBJ,KAAK,GAAGN,OAAO,CAACG,UAAD,CAAf;MACD,CAFI,CAAL;MAIAK,IAAI,CAAC,sBAAD,EAAyB,YAAY;QACvCN,MAAM,CAACS,UAAP,CAAkBL,KAAlB;MACD,CAFG,CAAJ;MAIAE,IAAI,CAAC,8CAAD,EAAiD,YAAY;QAC/DN,MAAM,CAACO,YAAP,CAAoB,YAAY;UAC9BH,KAAK;QACN,CAFD;MAGD,CAJG,CAAJ;MAMAE,IAAI,CAAC,6CAAD,EAAgD,YAAY;QAC9DN,MAAM,CAACO,YAAP,CAAoB,YAAY;UAC9BH,KAAK,CAAC,EAAD,CAAL;QACD,CAFD;MAGD,CAJG,CAAJ;MAMAC,KAAK,CAAC,2BAAD,EAA8B,YAAY;QAC7C,IAAIK,GAAJ,EAASC,SAAT,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,IAAlC;QAEAN,KAAK,CAAC,UAAUO,IAAV,EAAgB;UACpBL,GAAG,GAAG,EAAN;UACAC,SAAS,GAAGZ,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,WAAR;YAAqBP,GAAG,EAAEA,GAA1B;YAA+BQ,OAAO,EAAE,CAAE,IAAF;UAAxC,CAAV,CAAZ;UACAN,MAAM,GAAGb,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,QAAR;YAAkBP,GAAG,EAAEA;UAAvB,CAAV,CAAT;UACAG,IAAI,GAAGd,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAD,IAAI,GAAGf,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAX,KAAK,CAAC;YACJgB,IAAI,EAAET,SADF;YAEJC,MAAM,EAAEA,MAFJ;YAGJC,IAAI,EAAEA,IAHF;YAIJC,IAAI,EAAEA,IAJF;YAKJO,QAAQ,EAAE,CALN;YAMJC,KAAK,EAAE;UANH,CAAD,CAAL;QAQD,CAdI,CAAL;QAgBAhB,IAAI,CAAC,2BAAD,EAA8B,YAAY;UAC5CN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWb,SAA9B,EAAyC,CAAzC;QACD,CAFG,CAAJ;QAIAL,IAAI,CAAC,wBAAD,EAA2B,YAAY;UACzCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWZ,MAA9B,EAAsC,CAAtC;QACD,CAFG,CAAJ;QAIAN,IAAI,CAAC,qBAAD,EAAwB,YAAY;UACtCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWX,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;QAIAP,IAAI,CAAC,sBAAD,EAAyB,YAAY;UACvCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWV,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;MAGD,CAlCI,CAAL;MAoCAT,KAAK,CAAC,2BAAD,EAA8B,YAAY;QAC7C,IAAIK,GAAJ,EAASC,SAAT,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,IAAlC;QAEAN,KAAK,CAAC,UAAUO,IAAV,EAAgB;UACpBL,GAAG,GAAG,EAAN;UACAC,SAAS,GAAGZ,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,WAAR;YAAqBP,GAAG,EAAEA,GAA1B;YAA+BQ,OAAO,EAAE,CAAE,KAAF;UAAxC,CAAV,CAAZ;UACAN,MAAM,GAAGb,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,QAAR;YAAkBP,GAAG,EAAEA;UAAvB,CAAV,CAAT;UACAG,IAAI,GAAGd,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAD,IAAI,GAAGf,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAX,KAAK,CAAC;YACJgB,IAAI,EAAET,SADF;YAEJC,MAAM,EAAEA,MAFJ;YAGJC,IAAI,EAAEA,IAHF;YAIJC,IAAI,EAAEA,IAJF;YAKJO,QAAQ,EAAE,CALN;YAMJC,KAAK,EAAE;UANH,CAAD,CAAL;QAQD,CAdI,CAAL;QAgBAhB,IAAI,CAAC,kCAAD,EAAqC,YAAY;UACnDN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWb,SAA9B,EAAyC,CAAzC;QACD,CAFG,CAAJ;QAIAL,IAAI,CAAC,uBAAD,EAA0B,YAAY;UACxCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWZ,MAA9B,EAAsC,CAAtC;QACD,CAFG,CAAJ;QAIAN,IAAI,CAAC,sBAAD,EAAyB,YAAY;UACvCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWX,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;QAIAP,IAAI,CAAC,qBAAD,EAAwB,YAAY;UACtCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWV,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;MAGD,CAlCI,CAAL;MAoCAT,KAAK,CAAC,0BAAD,EAA6B,YAAY;QAC5C,IAAIK,GAAJ,EAASC,SAAT,EAAoBC,MAApB,EAA4BC,IAA5B;QAEAL,KAAK,CAAC,UAAUO,IAAV,EAAgB;UACpBL,GAAG,GAAG,EAAN;UACAC,SAAS,GAAGZ,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,WAAR;YAAqBP,GAAG,EAAEA,GAA1B;YAA+BQ,OAAO,EAAE,CAAE,KAAF;UAAxC,CAAV,CAAZ;UACAN,MAAM,GAAGb,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,QAAR;YAAkBP,GAAG,EAAEA,GAAvB;YAA4BS,QAAQ,EAAEJ;UAAtC,CAAV,CAAT;UACAF,IAAI,GAAGd,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAX,KAAK,CAAC;YAAEgB,IAAI,EAAET,SAAR;YAAmBC,MAAM,EAAEA,MAA3B;YAAmCC,IAAI,EAAEA,IAAzC;YAA+CQ,QAAQ,EAAE,CAAzD;YAA4DC,KAAK,EAAE;UAAnE,CAAD,CAAL;QACD,CANI,CAAL;QAQAhB,IAAI,CAAC,iCAAD,EAAoC,YAAY;UAClDN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWb,SAA9B,EAAyC,CAAzC;QACD,CAFG,CAAJ;QAIAL,IAAI,CAAC,uBAAD,EAA0B,YAAY;UACxCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWZ,MAA9B,EAAsC,CAAtC;QACD,CAFG,CAAJ;QAIAN,IAAI,CAAC,sBAAD,EAAyB,YAAY;UACvCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWX,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;MAGD,CAtBI,CAAL;MAwBAR,KAAK,CAAC,6BAAD,EAAgC,YAAY;QAC/C,IAAIK,GAAJ,EAASe,UAAT,EAAqBd,SAArB,EAAgCC,MAAhC,EAAwCC,IAAxC;QAEAL,KAAK,CAAC,UAAUO,IAAV,EAAgB;UACpBL,GAAG,GAAG,EAAN;UACAe,UAAU,GAAG,EAAb;UACAd,SAAS,GAAGZ,MAAM,CAACiB,EAAP,CAAU;YACpBC,IAAI,EAAE,WADc;YAEpBP,GAAG,EAAEA,GAFe;YAGpBQ,OAAO,EAAE,CAAE,KAAF,CAHW;YAIpBC,QAAQ,EAAE,YAAY;cACpBM,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACC,GAAL,EAAhB;YACD;UANmB,CAAV,CAAZ;UAQAhB,MAAM,GAAGb,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,QAAR;YAAkBP,GAAG,EAAEA,GAAvB;YAA4BS,QAAQ,EAAEJ;UAAtC,CAAV,CAAT;UACAF,IAAI,GAAGd,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAU,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACC,GAAL,EAAhB;UACAxB,KAAK,CAAC;YAAEgB,IAAI,EAAET,SAAR;YAAmBC,MAAM,EAAEA,MAA3B;YAAmCC,IAAI,EAAEA,IAAzC;YAA+CQ,QAAQ,EAAE,CAAC,EAA1D;YAA8DC,KAAK,EAAE;UAArE,CAAD,CAAL;QACD,CAfI,CAAL;QAiBAhB,IAAI,CAAC,+BAAD,EAAkC,YAAY;UAChDN,MAAM,CAAC6B,QAAP,CAAgBJ,UAAhB,EAA4B,CAA5B;QACD,CAFG,CAAJ;QAIAnB,IAAI,CAAC,6BAAD,EAAgC,YAAY;UAC9CN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,CAA9C;QACD,CAFG,CAAJ;QAIAnB,IAAI,CAAC,gCAAD,EAAmC,YAAY;UACjDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;UACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;QACD,CAHG,CAAJ;QAKAnB,IAAI,CAAC,+BAAD,EAAkC,YAAY;UAChDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;UACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;QACD,CAHG,CAAJ;QAKAnB,IAAI,CAAC,gCAAD,EAAmC,YAAY;UACjDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;UACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;QACD,CAHG,CAAJ;MAID,CA1CI,CAAL;MA4CApB,KAAK,CAAC,4BAAD,EAA+B,YAAY;QAC9C,IAAIK,GAAJ,EAASC,SAAT,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,IAAlC;QAEAN,KAAK,CAAC,UAAUO,IAAV,EAAgB;UACpBL,GAAG,GAAG,EAAN;UACAC,SAAS,GAAGZ,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,WAAR;YAAqBP,GAAG,EAAEA,GAA1B;YAA+BQ,OAAO,EAAE,CAAE,IAAF;UAAxC,CAAV,CAAZ;UACAN,MAAM,GAAGb,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,QAAR;YAAkBP,GAAG,EAAEA;UAAvB,CAAV,CAAT;UACAG,IAAI,GAAGd,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAD,IAAI,GAAGf,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAX,KAAK,CAAC;YACJ2B,KAAK,EAAEpB,SADH;YAEJC,MAAM,EAAEA,MAFJ;YAGJC,IAAI,EAAEA,IAHF;YAIJC,IAAI,EAAEA,IAJF;YAKJO,QAAQ,EAAE,CALN;YAMJC,KAAK,EAAE;UANH,CAAD,CAAL;QAQD,CAdI,CAAL;QAgBAhB,IAAI,CAAC,2BAAD,EAA8B,YAAY;UAC5CN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWb,SAA9B,EAAyC,CAAzC;QACD,CAFG,CAAJ;QAIAL,IAAI,CAAC,wBAAD,EAA2B,YAAY;UACzCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWZ,MAA9B,EAAsC,CAAtC;QACD,CAFG,CAAJ;QAIAN,IAAI,CAAC,qBAAD,EAAwB,YAAY;UACtCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWX,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;QAIAP,IAAI,CAAC,sBAAD,EAAyB,YAAY;UACvCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWV,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;QAIAR,IAAI,CAAC,sBAAD,EAAyB,YAAY;UACvCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWV,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;MAGD,CAtCI,CAAL;MAwCAT,KAAK,CAAC,4BAAD,EAA+B,YAAY;QAC9C,IAAIK,GAAJ,EAASC,SAAT,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,IAAlC;QAEAN,KAAK,CAAC,UAAUO,IAAV,EAAgB;UACpBL,GAAG,GAAG,EAAN;UACAC,SAAS,GAAGZ,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,WAAR;YAAqBP,GAAG,EAAEA,GAA1B;YAA+BQ,OAAO,EAAE,CAAE,KAAF;UAAxC,CAAV,CAAZ;UACAN,MAAM,GAAGb,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,QAAR;YAAkBP,GAAG,EAAEA;UAAvB,CAAV,CAAT;UACAG,IAAI,GAAGd,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAD,IAAI,GAAGf,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAX,KAAK,CAAC;YACJ2B,KAAK,EAAEpB,SADH;YAEJC,MAAM,EAAEA,MAFJ;YAGJC,IAAI,EAAEA,IAHF;YAIJC,IAAI,EAAEA,IAJF;YAKJO,QAAQ,EAAE,CALN;YAMJC,KAAK,EAAE;UANH,CAAD,CAAL;QAQD,CAdI,CAAL;QAgBAhB,IAAI,CAAC,kCAAD,EAAqC,YAAY;UACnDN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWb,SAA9B,EAAyC,CAAzC;QACD,CAFG,CAAJ;QAIAL,IAAI,CAAC,+BAAD,EAAkC,YAAY;UAChDN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWZ,MAA9B,EAAsC,CAAtC;QACD,CAFG,CAAJ;QAIAN,IAAI,CAAC,sBAAD,EAAyB,YAAY;UACvCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWX,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;QAIAP,IAAI,CAAC,qBAAD,EAAwB,YAAY;UACtCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWV,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;MAGD,CAlCI,CAAL;MAoCAT,KAAK,CAAC,2BAAD,EAA8B,YAAY;QAC7C,IAAIK,GAAJ,EAASC,SAAT,EAAoBC,MAApB,EAA4BC,IAA5B;QAEAL,KAAK,CAAC,UAAUO,IAAV,EAAgB;UACpBL,GAAG,GAAG,EAAN;UACAC,SAAS,GAAGZ,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,WAAR;YAAqBP,GAAG,EAAEA,GAA1B;YAA+BQ,OAAO,EAAE,CAAE,KAAF;UAAxC,CAAV,CAAZ;UACAN,MAAM,GAAGb,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,QAAR;YAAkBP,GAAG,EAAEA;UAAvB,CAAV,CAAT;UACAG,IAAI,GAAGd,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAX,KAAK,CAAC;YAAE2B,KAAK,EAAEpB,SAAT;YAAoBC,MAAM,EAAEA,MAA5B;YAAoCC,IAAI,EAAEA,IAA1C;YAAgDQ,QAAQ,EAAE,CAA1D;YAA6DC,KAAK,EAAE;UAApE,CAAD,CAAL;QACD,CANI,CAAL;QAQAhB,IAAI,CAAC,iCAAD,EAAoC,YAAY;UAClDN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWb,SAA9B,EAAyC,CAAzC;QACD,CAFG,CAAJ;QAIAL,IAAI,CAAC,8BAAD,EAAiC,YAAY;UAC/CN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWZ,MAA9B,EAAsC,CAAtC;QACD,CAFG,CAAJ;QAIAN,IAAI,CAAC,sBAAD,EAAyB,YAAY;UACvCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWX,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;MAGD,CAtBI,CAAL;MAwBAR,KAAK,CAAC,8BAAD,EAAiC,YAAY;QAChD,IAAIK,GAAJ,EAASe,UAAT,EAAqBd,SAArB,EAAgCC,MAAhC,EAAwCC,IAAxC;QAEAL,KAAK,CAAC,UAAUO,IAAV,EAAgB;UACpBL,GAAG,GAAG,EAAN;UACAe,UAAU,GAAG,EAAb;UACAd,SAAS,GAAGZ,MAAM,CAACiB,EAAP,CAAU;YACpBC,IAAI,EAAE,WADc;YAEpBP,GAAG,EAAEA,GAFe;YAGpBQ,OAAO,EAAE,CAAE,KAAF,CAHW;YAIpBC,QAAQ,EAAE,YAAY;cACpBM,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACC,GAAL,EAAhB;YACD;UANmB,CAAV,CAAZ;UAQAhB,MAAM,GAAGb,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,QAAR;YAAkBP,GAAG,EAAEA;UAAvB,CAAV,CAAT;UACAG,IAAI,GAAGd,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAU,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACC,GAAL,EAAhB;UACAxB,KAAK,CAAC;YAAE2B,KAAK,EAAEpB,SAAT;YAAoBC,MAAM,EAAEA,MAA5B;YAAoCC,IAAI,EAAEA,IAA1C;YAAgDQ,QAAQ,EAAE,CAAC,EAA3D;YAA+DC,KAAK,EAAE;UAAtE,CAAD,CAAL;QACD,CAfI,CAAL;QAiBAhB,IAAI,CAAC,+BAAD,EAAkC,YAAY;UAChDN,MAAM,CAAC6B,QAAP,CAAgBJ,UAAhB,EAA4B,CAA5B;QACD,CAFG,CAAJ;QAIAnB,IAAI,CAAC,6BAAD,EAAgC,YAAY;UAC9CN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,CAA9C;QACD,CAFG,CAAJ;QAIAnB,IAAI,CAAC,gCAAD,EAAmC,YAAY;UACjDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;UACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;QACD,CAHG,CAAJ;QAKAnB,IAAI,CAAC,+BAAD,EAAkC,YAAY;UAChDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;UACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;QACD,CAHG,CAAJ;QAKAnB,IAAI,CAAC,gCAAD,EAAmC,YAAY;UACjDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;UACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;QACD,CAHG,CAAJ;MAID,CA1CI,CAAL;MA4CApB,KAAK,CAAC,qEAAD,EAAwE,YAAY;QACvF,IAAIK,GAAJ,EAASsB,gBAAT,EAA2BC,UAA3B,EAAuCrB,MAAvC,EAA+CC,IAA/C,EAAqDC,IAArD;QAEAN,KAAK,CAAC,UAAUO,IAAV,EAAgB;UACpBL,GAAG,GAAG,EAAN;UACAsB,gBAAgB,GAAG;YACjBZ,IAAI,EAAErB,MAAM,CAACiB,EAAP,CAAU;cAAEC,IAAI,EAAE,MAAR;cAAgBP,GAAG,EAAEA;YAArB,CAAV,CADW;YAEjBqB,KAAK,EAAEhC,MAAM,CAACiB,EAAP,CAAU;cAAEC,IAAI,EAAE,OAAR;cAAiBP,GAAG,EAAEA;YAAtB,CAAV;UAFU,CAAnB;UAIAuB,UAAU,GAAG;YACXb,IAAI,EAAE,YAAY;cAChBY,gBAAgB,CAACZ,IAAjB,CAAsBc,KAAtB,CAA4B,IAA5B,EAAkCC,SAAlC;;cACA,IAAIzB,GAAG,CAACc,MAAJ,CAAWJ,IAAX,KAAoB,CAAxB,EAA2B;gBACzB,OAAO,KAAP;cACD;;cACD,OAAO,IAAP;YACD,CAPU;YAQXW,KAAK,EAAE,YAAY;cACjBC,gBAAgB,CAACD,KAAjB,CAAuBG,KAAvB,CAA6B,IAA7B,EAAmCC,SAAnC;;cACA,IAAIzB,GAAG,CAACc,MAAJ,CAAWO,KAAX,GAAmB,CAAvB,EAA0B;gBACxB,OAAO,KAAP;cACD;;cACD,OAAO,IAAP;YACD;UAdU,CAAb;UAgBAnB,MAAM,GAAGb,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,QAAR;YAAkBP,GAAG,EAAEA;UAAvB,CAAV,CAAT;UACAG,IAAI,GAAGd,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAD,IAAI,GAAGf,MAAM,CAACiB,EAAP,CAAU;YAAEC,IAAI,EAAE,MAAR;YAAgBP,GAAG,EAAEA,GAArB;YAA0BS,QAAQ,EAAEJ;UAApC,CAAV,CAAP;UACAX,KAAK,CAAC;YACJgB,IAAI,EAAEa,UAAU,CAACb,IADb;YAEJW,KAAK,EAAEE,UAAU,CAACF,KAFd;YAGJnB,MAAM,EAAEA,MAHJ;YAIJC,IAAI,EAAEA,IAJF;YAKJC,IAAI,EAAEA,IALF;YAMJO,QAAQ,EAAE,CANN;YAOJC,KAAK,EAAE;UAPH,CAAD,CAAL;QASD,CAlCI,CAAL;QAoCAhB,IAAI,CAAC,uBAAD,EAA0B,YAAY;UACxCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWJ,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;QAIAd,IAAI,CAAC,+BAAD,EAAkC,YAAY;UAChDN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWZ,MAA9B,EAAsC,CAAtC;QACD,CAFG,CAAJ;QAIAN,IAAI,CAAC,8BAAD,EAAiC,YAAY;UAC/CN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWO,KAA9B,EAAqC,CAArC;QACD,CAFG,CAAJ;QAIAzB,IAAI,CAAC,qBAAD,EAAwB,YAAY;UACtCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWX,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;QAIAP,IAAI,CAAC,sBAAD,EAAyB,YAAY;UACvCN,MAAM,CAACuB,WAAP,CAAmBb,GAAG,CAACc,MAAJ,CAAWV,IAA9B,EAAoC,CAApC;QACD,CAFG,CAAJ;MAGD,CA1DI,CAAL;MA4DAT,KAAK,CAAC,sBAAD,EAAyB,YAAY;QACxC,IAAIK,GAAJ,EAASe,UAAT,EAAqBd,SAArB,EAAgCC,MAAhC;QAEAJ,KAAK,CAAC,UAAUO,IAAV,EAAgB;UACpBL,GAAG,GAAG,EAAN;UACAe,UAAU,GAAG,EAAb;;UACAd,SAAS,GAAG,YAAY;YACtBc,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACC,GAAL,EAAhB;YACA,OAAO,KAAP;UACD,CAHD;;UAIAhB,MAAM,GAAG,UAAUwB,SAAV,EAAqB;YAC5BC,UAAU,CAACD,SAAD,EAAY,EAAZ,CAAV;UACD,CAFD;;UAGAX,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACC,GAAL,EAAhB;UACAxB,KAAK,CAAC;YAAE2B,KAAK,EAAEpB,SAAT;YAAoBC,MAAM,EAAEA,MAA5B;YAAoCC,IAAI,EAAEE,IAA1C;YAAgDM,QAAQ,EAAE,CAA1D;YAA6DC,KAAK,EAAE;UAApE,CAAD,CAAL;QACD,CAZI,CAAL;QAcAhB,IAAI,CAAC,+BAAD,EAAkC,YAAY;UAChDN,MAAM,CAAC6B,QAAP,CAAgBJ,UAAhB,EAA4B,CAA5B;QACD,CAFG,CAAJ;QAIAnB,IAAI,CAAC,+BAAD,EAAkC,YAAY;UAChDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;UACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;QACD,CAHG,CAAJ;QAKAnB,IAAI,CAAC,gCAAD,EAAmC,YAAY;UACjDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;UACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;QACD,CAHG,CAAJ;QAKAnB,IAAI,CAAC,+BAAD,EAAkC,YAAY;UAChDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;UACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;QACD,CAHG,CAAJ;MAID,CAnCI,CAAL;;MAqCA,IAAI,OAAOa,OAAP,KAAmB,UAAvB,EAAmC;QACjCjC,KAAK,CAAC,2BAAD,EAA8B,YAAY;UAC7C,IAAIK,GAAJ,EAASe,UAAT,EAAqBd,SAArB,EAAgCC,MAAhC;UAEAJ,KAAK,CAAC,UAAUO,IAAV,EAAgB;YACpBL,GAAG,GAAG,EAAN;YACAe,UAAU,GAAG,EAAb;;YACAd,SAAS,GAAG,YAAY;cACtBc,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACC,GAAL,EAAhB;cACA,OAAO,KAAP;YACD,CAHD;;YAIAhB,MAAM,GAAG,YAAY;cACnB,OAAO,IAAI0B,OAAJ,CAAY,UAAUC,OAAV,EAAmB;gBACpCF,UAAU,CAACE,OAAD,EAAU,EAAV,CAAV;cACD,CAFM,CAAP;YAGD,CAJD;;YAKAd,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACC,GAAL,EAAhB;YACAxB,KAAK,CAAC;cAAE2B,KAAK,EAAEpB,SAAT;cAAoBC,MAAM,EAAEA,MAA5B;cAAoCC,IAAI,EAAEE,IAA1C;cAAgDM,QAAQ,EAAE,CAA1D;cAA6DC,KAAK,EAAE;YAApE,CAAD,CAAL;UACD,CAdI,CAAL;UAgBAhB,IAAI,CAAC,+BAAD,EAAkC,YAAY;YAChDN,MAAM,CAAC6B,QAAP,CAAgBJ,UAAhB,EAA4B,CAA5B;UACD,CAFG,CAAJ;UAIAnB,IAAI,CAAC,+BAAD,EAAkC,YAAY;YAChDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;YACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;UACD,CAHG,CAAJ;UAKAnB,IAAI,CAAC,gCAAD,EAAmC,YAAY;YACjDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;YACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;UACD,CAHG,CAAJ;UAKAnB,IAAI,CAAC,+BAAD,EAAkC,YAAY;YAChDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;YACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;UACD,CAHG,CAAJ;QAID,CArCI,CAAL;QAuCApB,KAAK,CAAC,2BAAD,EAA8B,YAAY;UAC7C,IAAIK,GAAJ,EAASe,UAAT,EAAqBd,SAArB,EAAgCC,MAAhC;UAEAJ,KAAK,CAAC,UAAUO,IAAV,EAAgB;YACpBL,GAAG,GAAG,EAAN;YACAe,UAAU,GAAG,EAAb;;YACAd,SAAS,GAAG,YAAY;cACtBc,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACC,GAAL,EAAhB;cACA,OAAO,KAAP;YACD,CAHD;;YAIAhB,MAAM,GAAG,YAAY;cACnB,OAAO,IAAI0B,OAAJ,CAAY,UAAUE,CAAV,EAAaC,MAAb,EAAqB;gBACtCJ,UAAU,CAACI,MAAD,EAAS,EAAT,CAAV;cACD,CAFM,CAAP;YAGD,CAJD;;YAKAhB,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACC,GAAL,EAAhB;YACAxB,KAAK,CAAC;cAAE2B,KAAK,EAAEpB,SAAT;cAAoBC,MAAM,EAAEA,MAA5B;cAAoCC,IAAI,EAAEE,IAA1C;cAAgDM,QAAQ,EAAE,CAA1D;cAA6DC,KAAK,EAAE;YAApE,CAAD,CAAL;UACD,CAdI,CAAL;UAgBAhB,IAAI,CAAC,+BAAD,EAAkC,YAAY;YAChDN,MAAM,CAAC6B,QAAP,CAAgBJ,UAAhB,EAA4B,CAA5B;UACD,CAFG,CAAJ;UAIAnB,IAAI,CAAC,+BAAD,EAAkC,YAAY;YAChDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;YACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;UACD,CAHG,CAAJ;UAKAnB,IAAI,CAAC,gCAAD,EAAmC,YAAY;YACjDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;YACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;UACD,CAHG,CAAJ;UAKAnB,IAAI,CAAC,+BAAD,EAAkC,YAAY;YAChDN,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA/C;YACAzB,MAAM,CAAC8B,MAAP,CAAcL,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,EAA9C;UACD,CAHG,CAAJ;QAID,CArCI,CAAL;MAsCD;IACF,CAneI,CAAL;EAoeD,CA3eI,CAAL;AA4eD,CA1fA,EA2fC,OAAO3B,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0CI,SA3f3C,EA4fC,OAAOH,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCG,SA5fvC,CAAD"},"metadata":{},"sourceType":"script"}