{"ast":null,"code":"import expect from 'expect';\nimport isNonLiteralProperty from '../../../src/util/isNonLiteralProperty';\nimport IdentifierMock from '../../../__mocks__/IdentifierMock';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXSpreadAttributeMock from '../../../__mocks__/JSXSpreadAttributeMock';\nimport JSXTextMock from '../../../__mocks__/JSXTextMock';\nimport LiteralMock from '../../../__mocks__/LiteralMock';\nconst theProp = 'theProp';\nconst spread = JSXSpreadAttributeMock('theSpread');\ndescribe('isNonLiteralProperty', () => {\n  describe('elements without the property', () => {\n    it('should not identify them as non-literal role elements', () => {\n      expect(isNonLiteralProperty([], theProp)).toBe(false);\n    });\n  });\n  describe('elements with a literal property', () => {\n    it('should not identify them as non-literal role elements without spread operator', () => {\n      expect(isNonLiteralProperty([JSXAttributeMock(theProp, LiteralMock('theRole'))], theProp)).toBe(false);\n    });\n    it('should not identify them as non-literal role elements with spread operator', () => {\n      expect(isNonLiteralProperty([spread, JSXAttributeMock(theProp, LiteralMock('theRole'))], theProp)).toBe(false);\n    });\n  });\n  describe('elements with a JSXText property', () => {\n    it('should not identify them as non-literal role elements', () => {\n      expect(isNonLiteralProperty([JSXAttributeMock(theProp, JSXTextMock('theRole'))], theProp)).toBe(false);\n    });\n  });\n  describe('elements with a property of undefined', () => {\n    it('should not identify them as non-literal role elements', () => {\n      const undefinedExpression = IdentifierMock('undefined');\n      expect(isNonLiteralProperty([JSXAttributeMock(theProp, undefinedExpression)], theProp)).toBe(false);\n    });\n  });\n  describe('elements with a expression property', () => {\n    it('should identify them as non-literal role elements', () => {\n      const identifierExpression = IdentifierMock('theIdentifier');\n      expect(isNonLiteralProperty([JSXAttributeMock(theProp, identifierExpression)], theProp)).toBe(true);\n    });\n  });\n});","map":{"version":3,"names":["expect","isNonLiteralProperty","IdentifierMock","JSXAttributeMock","JSXSpreadAttributeMock","JSXTextMock","LiteralMock","theProp","spread","describe","it","toBe","undefinedExpression","identifierExpression"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/isNonLiteralProperty-test.js"],"sourcesContent":["import expect from 'expect';\nimport isNonLiteralProperty from '../../../src/util/isNonLiteralProperty';\nimport IdentifierMock from '../../../__mocks__/IdentifierMock';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXSpreadAttributeMock from '../../../__mocks__/JSXSpreadAttributeMock';\nimport JSXTextMock from '../../../__mocks__/JSXTextMock';\nimport LiteralMock from '../../../__mocks__/LiteralMock';\n\nconst theProp = 'theProp';\n\nconst spread = JSXSpreadAttributeMock('theSpread');\n\ndescribe('isNonLiteralProperty', () => {\n  describe('elements without the property', () => {\n    it('should not identify them as non-literal role elements', () => {\n      expect(isNonLiteralProperty([], theProp)).toBe(false);\n    });\n  });\n  describe('elements with a literal property', () => {\n    it('should not identify them as non-literal role elements without spread operator', () => {\n      expect(isNonLiteralProperty([JSXAttributeMock(theProp, LiteralMock('theRole'))], theProp)).toBe(false);\n    });\n    it('should not identify them as non-literal role elements with spread operator', () => {\n      expect(isNonLiteralProperty([spread, JSXAttributeMock(theProp, LiteralMock('theRole'))], theProp)).toBe(false);\n    });\n  });\n  describe('elements with a JSXText property', () => {\n    it('should not identify them as non-literal role elements', () => {\n      expect(isNonLiteralProperty([JSXAttributeMock(theProp, JSXTextMock('theRole'))], theProp)).toBe(false);\n    });\n  });\n  describe('elements with a property of undefined', () => {\n    it('should not identify them as non-literal role elements', () => {\n      const undefinedExpression = IdentifierMock('undefined');\n      expect(isNonLiteralProperty([JSXAttributeMock(theProp, undefinedExpression)], theProp)).toBe(false);\n    });\n  });\n  describe('elements with a expression property', () => {\n    it('should identify them as non-literal role elements', () => {\n      const identifierExpression = IdentifierMock('theIdentifier');\n      expect(isNonLiteralProperty([JSXAttributeMock(theProp, identifierExpression)], theProp)).toBe(true);\n    });\n  });\n});\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,oBAAP,MAAiC,wCAAjC;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;AACA,OAAOC,sBAAP,MAAmC,2CAAnC;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AAEA,MAAMC,OAAO,GAAG,SAAhB;AAEA,MAAMC,MAAM,GAAGJ,sBAAsB,CAAC,WAAD,CAArC;AAEAK,QAAQ,CAAC,sBAAD,EAAyB,MAAM;EACrCA,QAAQ,CAAC,+BAAD,EAAkC,MAAM;IAC9CC,EAAE,CAAC,uDAAD,EAA0D,MAAM;MAChEV,MAAM,CAACC,oBAAoB,CAAC,EAAD,EAAKM,OAAL,CAArB,CAAN,CAA0CI,IAA1C,CAA+C,KAA/C;IACD,CAFC,CAAF;EAGD,CAJO,CAAR;EAKAF,QAAQ,CAAC,kCAAD,EAAqC,MAAM;IACjDC,EAAE,CAAC,+EAAD,EAAkF,MAAM;MACxFV,MAAM,CAACC,oBAAoB,CAAC,CAACE,gBAAgB,CAACI,OAAD,EAAUD,WAAW,CAAC,SAAD,CAArB,CAAjB,CAAD,EAAsDC,OAAtD,CAArB,CAAN,CAA2FI,IAA3F,CAAgG,KAAhG;IACD,CAFC,CAAF;IAGAD,EAAE,CAAC,4EAAD,EAA+E,MAAM;MACrFV,MAAM,CAACC,oBAAoB,CAAC,CAACO,MAAD,EAASL,gBAAgB,CAACI,OAAD,EAAUD,WAAW,CAAC,SAAD,CAArB,CAAzB,CAAD,EAA8DC,OAA9D,CAArB,CAAN,CAAmGI,IAAnG,CAAwG,KAAxG;IACD,CAFC,CAAF;EAGD,CAPO,CAAR;EAQAF,QAAQ,CAAC,kCAAD,EAAqC,MAAM;IACjDC,EAAE,CAAC,uDAAD,EAA0D,MAAM;MAChEV,MAAM,CAACC,oBAAoB,CAAC,CAACE,gBAAgB,CAACI,OAAD,EAAUF,WAAW,CAAC,SAAD,CAArB,CAAjB,CAAD,EAAsDE,OAAtD,CAArB,CAAN,CAA2FI,IAA3F,CAAgG,KAAhG;IACD,CAFC,CAAF;EAGD,CAJO,CAAR;EAKAF,QAAQ,CAAC,uCAAD,EAA0C,MAAM;IACtDC,EAAE,CAAC,uDAAD,EAA0D,MAAM;MAChE,MAAME,mBAAmB,GAAGV,cAAc,CAAC,WAAD,CAA1C;MACAF,MAAM,CAACC,oBAAoB,CAAC,CAACE,gBAAgB,CAACI,OAAD,EAAUK,mBAAV,CAAjB,CAAD,EAAmDL,OAAnD,CAArB,CAAN,CAAwFI,IAAxF,CAA6F,KAA7F;IACD,CAHC,CAAF;EAID,CALO,CAAR;EAMAF,QAAQ,CAAC,qCAAD,EAAwC,MAAM;IACpDC,EAAE,CAAC,mDAAD,EAAsD,MAAM;MAC5D,MAAMG,oBAAoB,GAAGX,cAAc,CAAC,eAAD,CAA3C;MACAF,MAAM,CAACC,oBAAoB,CAAC,CAACE,gBAAgB,CAACI,OAAD,EAAUM,oBAAV,CAAjB,CAAD,EAAoDN,OAApD,CAArB,CAAN,CAAyFI,IAAzF,CAA8F,IAA9F;IACD,CAHC,CAAF;EAID,CALO,CAAR;AAMD,CA/BO,CAAR"},"metadata":{},"sourceType":"module"}