{"ast":null,"code":"\"use strict\";\n\nvar findRelation = require(\"./findRelation\");\n\nvar objUtils = require(\"../util/object\");\n\nvar pathUtils = require(\"../util/path\");\n\nfunction absolutize(urlObj, siteUrlObj, options) {\n  findRelation.upToPath(urlObj, siteUrlObj, options); // Fill in relative URLs\n\n  if (urlObj.extra.relation.minimumScheme) urlObj.scheme = siteUrlObj.scheme;\n  if (urlObj.extra.relation.minimumAuth) urlObj.auth = siteUrlObj.auth;\n  if (urlObj.extra.relation.minimumHost) urlObj.host = objUtils.clone(siteUrlObj.host);\n  if (urlObj.extra.relation.minimumPort) copyPort(urlObj, siteUrlObj);\n  if (urlObj.extra.relation.minimumScheme) copyPath(urlObj, siteUrlObj); // Check remaining relativeness now that path has been copied and/or resolved\n\n  findRelation.pathOn(urlObj, siteUrlObj, options); // Fill in relative URLs\n\n  if (urlObj.extra.relation.minimumResource) copyResource(urlObj, siteUrlObj);\n  if (urlObj.extra.relation.minimumQuery) urlObj.query = objUtils.clone(siteUrlObj.query);\n  if (urlObj.extra.relation.minimumHash) urlObj.hash = siteUrlObj.hash;\n}\n/*\n\tGet an absolute path that's relative to site url.\n*/\n\n\nfunction copyPath(urlObj, siteUrlObj) {\n  if (urlObj.extra.relation.maximumHost || !urlObj.extra.hrefInfo.minimumResourceOnly) {\n    var pathArray = urlObj.path.absolute.array;\n    var pathString = \"/\"; // If not erroneous URL\n\n    if (pathArray) {\n      // If is relative path\n      if (urlObj.extra.hrefInfo.minimumPathOnly && urlObj.path.absolute.string.indexOf(\"/\") !== 0) {\n        // Append path to site path\n        pathArray = siteUrlObj.path.absolute.array.concat(pathArray);\n      }\n\n      pathArray = pathUtils.resolveDotSegments(pathArray);\n      pathString += pathUtils.join(pathArray);\n    } else {\n      pathArray = [];\n    }\n\n    urlObj.path.absolute.array = pathArray;\n    urlObj.path.absolute.string = pathString;\n  } else {\n    // Resource-, query- or hash-only or empty\n    urlObj.path = objUtils.clone(siteUrlObj.path);\n  }\n}\n\nfunction copyPort(urlObj, siteUrlObj) {\n  urlObj.port = siteUrlObj.port;\n  urlObj.extra.portIsDefault = siteUrlObj.extra.portIsDefault;\n}\n\nfunction copyResource(urlObj, siteUrlObj) {\n  urlObj.resource = siteUrlObj.resource;\n  urlObj.extra.resourceIsIndex = siteUrlObj.extra.resourceIsIndex;\n}\n\nmodule.exports = absolutize;","map":{"version":3,"names":["findRelation","require","objUtils","pathUtils","absolutize","urlObj","siteUrlObj","options","upToPath","extra","relation","minimumScheme","scheme","minimumAuth","auth","minimumHost","host","clone","minimumPort","copyPort","copyPath","pathOn","minimumResource","copyResource","minimumQuery","query","minimumHash","hash","maximumHost","hrefInfo","minimumResourceOnly","pathArray","path","absolute","array","pathString","minimumPathOnly","string","indexOf","concat","resolveDotSegments","join","port","portIsDefault","resource","resourceIsIndex","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/relateurl/lib/relate/absolutize.js"],"sourcesContent":["\"use strict\";\n\nvar findRelation = require(\"./findRelation\");\nvar objUtils     = require(\"../util/object\");\nvar pathUtils    = require(\"../util/path\");\n\n\n\nfunction absolutize(urlObj, siteUrlObj, options)\n{\n\tfindRelation.upToPath(urlObj, siteUrlObj, options);\n\t\n\t// Fill in relative URLs\n\tif (urlObj.extra.relation.minimumScheme) urlObj.scheme = siteUrlObj.scheme;\n\tif (urlObj.extra.relation.minimumAuth)   urlObj.auth   = siteUrlObj.auth;\n\tif (urlObj.extra.relation.minimumHost)   urlObj.host   = objUtils.clone(siteUrlObj.host);\n\tif (urlObj.extra.relation.minimumPort)   copyPort(urlObj, siteUrlObj);\n\tif (urlObj.extra.relation.minimumScheme) copyPath(urlObj, siteUrlObj);\n\t\n\t// Check remaining relativeness now that path has been copied and/or resolved\n\tfindRelation.pathOn(urlObj, siteUrlObj, options);\n\t\n\t// Fill in relative URLs\n\tif (urlObj.extra.relation.minimumResource) copyResource(urlObj, siteUrlObj);\n\tif (urlObj.extra.relation.minimumQuery)    urlObj.query = objUtils.clone(siteUrlObj.query);\n\tif (urlObj.extra.relation.minimumHash)     urlObj.hash  = siteUrlObj.hash;\n}\n\n\n\n/*\n\tGet an absolute path that's relative to site url.\n*/\nfunction copyPath(urlObj, siteUrlObj)\n{\n\tif (urlObj.extra.relation.maximumHost || !urlObj.extra.hrefInfo.minimumResourceOnly)\n\t{\n\t\tvar pathArray = urlObj.path.absolute.array;\n\t\tvar pathString = \"/\";\n\t\t\n\t\t// If not erroneous URL\n\t\tif (pathArray)\n\t\t{\n\t\t\t// If is relative path\n\t\t\tif (urlObj.extra.hrefInfo.minimumPathOnly && urlObj.path.absolute.string.indexOf(\"/\")!==0)\n\t\t\t{\n\t\t\t\t// Append path to site path\n\t\t\t\tpathArray = siteUrlObj.path.absolute.array.concat(pathArray);\n\t\t\t}\n\t\t\t\n\t\t\tpathArray   = pathUtils.resolveDotSegments(pathArray);\n\t\t\tpathString += pathUtils.join(pathArray);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpathArray = [];\n\t\t}\n\t\t\n\t\turlObj.path.absolute.array  = pathArray;\n\t\turlObj.path.absolute.string = pathString;\n\t}\n\telse\n\t{\n\t\t// Resource-, query- or hash-only or empty\n\t\turlObj.path = objUtils.clone(siteUrlObj.path);\n\t}\n}\n\n\n\nfunction copyPort(urlObj, siteUrlObj)\n{\n\turlObj.port = siteUrlObj.port;\n\t\n\turlObj.extra.portIsDefault = siteUrlObj.extra.portIsDefault;\n}\n\n\n\nfunction copyResource(urlObj, siteUrlObj)\n{\n\turlObj.resource = siteUrlObj.resource;\n\t\n\turlObj.extra.resourceIsIndex = siteUrlObj.extra.resourceIsIndex;\n}\n\n\n\nmodule.exports = absolutize;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}