{"ast":null,"code":"'use strict';\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _resolve = require('eslint-module-utils/resolve');\n\nvar _resolve2 = _interopRequireDefault(_resolve);\n\nvar _importType = require('../core/importType');\n\nvar _moduleVisitor = require('eslint-module-utils/moduleVisitor');\n\nvar _moduleVisitor2 = _interopRequireDefault(_moduleVisitor);\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar enumValues = {\n  'enum': ['always', 'ignorePackages', 'never']\n};\nvar patternProperties = {\n  type: 'object',\n  patternProperties: {\n    '.*': enumValues\n  }\n};\nvar properties = {\n  type: 'object',\n  properties: {\n    'pattern': patternProperties,\n    'ignorePackages': {\n      type: 'boolean'\n    }\n  }\n};\n\nfunction buildProperties(context) {\n  var result = {\n    defaultConfig: 'never',\n    pattern: {},\n    ignorePackages: false\n  };\n  context.options.forEach(function (obj) {\n    // If this is a string, set defaultConfig to its value\n    if (typeof obj === 'string') {\n      result.defaultConfig = obj;\n      return;\n    } // If this is not the new structure, transfer all props to result.pattern\n\n\n    if (obj.pattern === undefined && obj.ignorePackages === undefined) {\n      Object.assign(result.pattern, obj);\n      return;\n    } // If pattern is provided, transfer all props\n\n\n    if (obj.pattern !== undefined) {\n      Object.assign(result.pattern, obj.pattern);\n    } // If ignorePackages is provided, transfer it to result\n\n\n    if (obj.ignorePackages !== undefined) {\n      result.ignorePackages = obj.ignorePackages;\n    }\n  });\n\n  if (result.defaultConfig === 'ignorePackages') {\n    result.defaultConfig = 'always';\n    result.ignorePackages = true;\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: (0, _docsUrl2['default'])('extensions')\n    },\n    schema: {\n      anyOf: [{\n        type: 'array',\n        items: [enumValues],\n        additionalItems: false\n      }, {\n        type: 'array',\n        items: [enumValues, properties],\n        additionalItems: false\n      }, {\n        type: 'array',\n        items: [properties],\n        additionalItems: false\n      }, {\n        type: 'array',\n        items: [patternProperties],\n        additionalItems: false\n      }, {\n        type: 'array',\n        items: [enumValues, patternProperties],\n        additionalItems: false\n      }]\n    }\n  },\n  create: function () {\n    function create(context) {\n      var props = buildProperties(context);\n\n      function getModifier(extension) {\n        return props.pattern[extension] || props.defaultConfig;\n      }\n\n      function isUseOfExtensionRequired(extension, isPackage) {\n        return getModifier(extension) === 'always' && (!props.ignorePackages || !isPackage);\n      }\n\n      function isUseOfExtensionForbidden(extension) {\n        return getModifier(extension) === 'never';\n      }\n\n      function isResolvableWithoutExtension(file) {\n        var extension = _path2['default'].extname(file);\n\n        var fileWithoutExtension = file.slice(0, -extension.length);\n        var resolvedFileWithoutExtension = (0, _resolve2['default'])(fileWithoutExtension, context);\n        return resolvedFileWithoutExtension === (0, _resolve2['default'])(file, context);\n      }\n\n      function isExternalRootModule(file) {\n        var slashCount = file.split('/').length - 1;\n        if (slashCount === 0) return true;\n        if ((0, _importType.isScoped)(file) && slashCount <= 1) return true;\n        return false;\n      }\n\n      function checkFileExtension(source, node) {\n        // bail if the declaration doesn't have a source, e.g. \"export { foo };\", or if it's only partially typed like in an editor\n        if (!source || !source.value) return;\n        var importPathWithQueryString = source.value; // don't enforce anything on builtins\n\n        if ((0, _importType.isBuiltIn)(importPathWithQueryString, context.settings)) return;\n        var importPath = importPathWithQueryString.replace(/\\?(.*)$/, ''); // don't enforce in root external packages as they may have names with `.js`.\n        // Like `import Decimal from decimal.js`)\n\n        if (isExternalRootModule(importPath)) return;\n        var resolvedPath = (0, _resolve2['default'])(importPath, context); // get extension from resolved path, if possible.\n        // for unresolved, use source value.\n\n        var extension = _path2['default'].extname(resolvedPath || importPath).substring(1); // determine if this is a module\n\n\n        var isPackage = (0, _importType.isExternalModule)(importPath, (0, _resolve2['default'])(importPath, context), context) || (0, _importType.isScoped)(importPath);\n\n        if (!extension || !importPath.endsWith('.' + String(extension))) {\n          // ignore type-only imports\n          if (node.importKind === 'type') return;\n          var extensionRequired = isUseOfExtensionRequired(extension, isPackage);\n          var extensionForbidden = isUseOfExtensionForbidden(extension);\n\n          if (extensionRequired && !extensionForbidden) {\n            context.report({\n              node: source,\n              message: 'Missing file extension ' + (extension ? '\"' + String(extension) + '\" ' : '') + 'for \"' + String(importPathWithQueryString) + '\"'\n            });\n          }\n        } else if (extension) {\n          if (isUseOfExtensionForbidden(extension) && isResolvableWithoutExtension(importPath)) {\n            context.report({\n              node: source,\n              message: 'Unexpected use of file extension \"' + String(extension) + '\" for \"' + String(importPathWithQueryString) + '\"'\n            });\n          }\n        }\n      }\n\n      return (0, _moduleVisitor2['default'])(checkFileExtension, {\n        commonjs: true\n      });\n    }\n\n    return create;\n  }()\n};","map":{"version":3,"mappings":"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","names":["enumValues","patternProperties","type","properties","buildProperties","context","result","defaultConfig","pattern","ignorePackages","options","forEach","obj","undefined","Object","assign","module","exports","meta","docs","url","schema","anyOf","items","additionalItems","create","props","getModifier","extension","isUseOfExtensionRequired","isPackage","isUseOfExtensionForbidden","isResolvableWithoutExtension","file","path","extname","fileWithoutExtension","slice","length","resolvedFileWithoutExtension","isExternalRootModule","slashCount","split","checkFileExtension","source","node","value","importPathWithQueryString","settings","importPath","replace","resolvedPath","substring","endsWith","importKind","extensionRequired","extensionForbidden","report","message","commonjs"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\extensions.js"],"sourcesContent":["import path from 'path';\n\nimport resolve from 'eslint-module-utils/resolve';\nimport { isBuiltIn, isExternalModule, isScoped } from '../core/importType';\nimport moduleVisitor from 'eslint-module-utils/moduleVisitor';\nimport docsUrl from '../docsUrl';\n\nconst enumValues = { enum: [ 'always', 'ignorePackages', 'never' ] };\nconst patternProperties = {\n  type: 'object',\n  patternProperties: { '.*': enumValues },\n};\nconst properties = {\n  type: 'object',\n  properties: {\n    'pattern': patternProperties,\n    'ignorePackages': { type: 'boolean' },\n  },\n};\n\nfunction buildProperties(context) {\n\n  const result = {\n    defaultConfig: 'never',\n    pattern: {},\n    ignorePackages: false,\n  };\n\n  context.options.forEach(obj => {\n\n    // If this is a string, set defaultConfig to its value\n    if (typeof obj === 'string') {\n      result.defaultConfig = obj;\n      return;\n    }\n\n    // If this is not the new structure, transfer all props to result.pattern\n    if (obj.pattern === undefined && obj.ignorePackages === undefined) {\n      Object.assign(result.pattern, obj);\n      return;\n    }\n\n    // If pattern is provided, transfer all props\n    if (obj.pattern !== undefined) {\n      Object.assign(result.pattern, obj.pattern);\n    }\n\n    // If ignorePackages is provided, transfer it to result\n    if (obj.ignorePackages !== undefined) {\n      result.ignorePackages = obj.ignorePackages;\n    }\n  });\n\n  if (result.defaultConfig === 'ignorePackages') {\n    result.defaultConfig = 'always';\n    result.ignorePackages = true;\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: docsUrl('extensions'),\n    },\n\n    schema: {\n      anyOf: [\n        {\n          type: 'array',\n          items: [enumValues],\n          additionalItems: false,\n        },\n        {\n          type: 'array',\n          items: [\n            enumValues,\n            properties,\n          ],\n          additionalItems: false,\n        },\n        {\n          type: 'array',\n          items: [properties],\n          additionalItems: false,\n        },\n        {\n          type: 'array',\n          items: [patternProperties],\n          additionalItems: false,\n        },\n        {\n          type: 'array',\n          items: [\n            enumValues,\n            patternProperties,\n          ],\n          additionalItems: false,\n        },\n      ],\n    },\n  },\n\n  create(context) {\n\n    const props = buildProperties(context);\n\n    function getModifier(extension) {\n      return props.pattern[extension] || props.defaultConfig;\n    }\n\n    function isUseOfExtensionRequired(extension, isPackage) {\n      return getModifier(extension) === 'always' && (!props.ignorePackages || !isPackage);\n    }\n\n    function isUseOfExtensionForbidden(extension) {\n      return getModifier(extension) === 'never';\n    }\n\n    function isResolvableWithoutExtension(file) {\n      const extension = path.extname(file);\n      const fileWithoutExtension = file.slice(0, -extension.length);\n      const resolvedFileWithoutExtension = resolve(fileWithoutExtension, context);\n\n      return resolvedFileWithoutExtension === resolve(file, context);\n    }\n\n    function isExternalRootModule(file) {\n      const slashCount = file.split('/').length - 1;\n\n      if (slashCount === 0)  return true;\n      if (isScoped(file) && slashCount <= 1) return true;\n      return false;\n    }\n\n    function checkFileExtension(source, node) {\n      // bail if the declaration doesn't have a source, e.g. \"export { foo };\", or if it's only partially typed like in an editor\n      if (!source || !source.value) return;\n      \n      const importPathWithQueryString = source.value;\n\n      // don't enforce anything on builtins\n      if (isBuiltIn(importPathWithQueryString, context.settings)) return;\n\n      const importPath = importPathWithQueryString.replace(/\\?(.*)$/, '');\n\n      // don't enforce in root external packages as they may have names with `.js`.\n      // Like `import Decimal from decimal.js`)\n      if (isExternalRootModule(importPath)) return;\n\n      const resolvedPath = resolve(importPath, context);\n\n      // get extension from resolved path, if possible.\n      // for unresolved, use source value.\n      const extension = path.extname(resolvedPath || importPath).substring(1);\n\n      // determine if this is a module\n      const isPackage = isExternalModule(\n        importPath,\n        resolve(importPath, context),\n        context,\n      ) || isScoped(importPath);\n\n      if (!extension || !importPath.endsWith(`.${extension}`)) {\n        // ignore type-only imports\n        if (node.importKind === 'type') return;\n        const extensionRequired = isUseOfExtensionRequired(extension, isPackage);\n        const extensionForbidden = isUseOfExtensionForbidden(extension);\n        if (extensionRequired && !extensionForbidden) {\n          context.report({\n            node: source,\n            message:\n              `Missing file extension ${extension ? `\"${extension}\" ` : ''}for \"${importPathWithQueryString}\"`,\n          });\n        }\n      } else if (extension) {\n        if (isUseOfExtensionForbidden(extension) && isResolvableWithoutExtension(importPath)) {\n          context.report({\n            node: source,\n            message: `Unexpected use of file extension \"${extension}\" for \"${importPathWithQueryString}\"`,\n          });\n        }\n      }\n    }\n\n    return moduleVisitor(checkFileExtension, { commonjs: true });\n  },\n};\n"]},"metadata":{},"sourceType":"script"}