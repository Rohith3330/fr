{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\n\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('no-unused-expressions');\nexports.default = util.createRule({\n  name: 'no-unused-expressions',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow unused expressions',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: baseRule.meta.schema,\n    // TODO: this rule has only had messages since v7.0 - remove this when we remove support for v6\n    messages: (_a = baseRule.meta.messages) !== null && _a !== void 0 ? _a : {\n      unusedExpression: 'Expected an assignment or function call and instead saw an expression.'\n    }\n  },\n  defaultOptions: [{\n    allowShortCircuit: false,\n    allowTernary: false,\n    allowTaggedTemplates: false\n  }],\n\n  create(context, _ref) {\n    let [{\n      allowShortCircuit = false,\n      allowTernary = false\n    }] = _ref;\n    const rules = baseRule.create(context);\n\n    function isValidExpression(node) {\n      if (allowShortCircuit && node.type === utils_1.AST_NODE_TYPES.LogicalExpression) {\n        return isValidExpression(node.right);\n      }\n\n      if (allowTernary && node.type === utils_1.AST_NODE_TYPES.ConditionalExpression) {\n        return isValidExpression(node.alternate) && isValidExpression(node.consequent);\n      }\n\n      return node.type === utils_1.AST_NODE_TYPES.ChainExpression && node.expression.type === utils_1.AST_NODE_TYPES.CallExpression || node.type === utils_1.AST_NODE_TYPES.ImportExpression;\n    }\n\n    return {\n      ExpressionStatement(node) {\n        if (node.directive || isValidExpression(node.expression)) {\n          return;\n        }\n\n        rules.ExpressionStatement(node);\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AACA;;AAEA,MAAMA,QAAQ,GAAG,2CAAkB,uBAAlB,CAAjB;AAKAC,kBAAeC,IAAI,CAACC,UAAL,CAAqC;EAClDC,IAAI,EAAE,uBAD4C;EAElDC,IAAI,EAAE;IACJC,IAAI,EAAE,YADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EAAE,6BADT;MAEJC,WAAW,EAAE,KAFT;MAGJC,eAAe,EAAE;IAHb,CAFF;IAOJC,cAAc,EAAEX,QAAQ,CAACK,IAAT,CAAcM,cAP1B;IAQJC,MAAM,EAAEZ,QAAQ,CAACK,IAAT,CAAcO,MARlB;IASJ;IACAC,QAAQ,EAAE,cAAQ,CAACR,IAAT,CAAcQ,QAAd,MAAsB,IAAtB,IAAsBC,aAAtB,GAAsBA,EAAtB,GAA0B;MAClCC,gBAAgB,EACd;IAFgC;EAVhC,CAF4C;EAiBlDC,cAAc,EAAE,CACd;IACEC,iBAAiB,EAAE,KADrB;IAEEC,YAAY,EAAE,KAFhB;IAGEC,oBAAoB,EAAE;EAHxB,CADc,CAjBkC;;EAwBlDC,MAAM,CAACC,OAAD,QAA+D;IAAA,IAArD,CAAC;MAAEJ,iBAAiB,GAAG,KAAtB;MAA6BC,YAAY,GAAG;IAA5C,CAAD,CAAqD;IACnE,MAAMI,KAAK,GAAGtB,QAAQ,CAACoB,MAAT,CAAgBC,OAAhB,CAAd;;IAEA,SAASE,iBAAT,CAA2BC,IAA3B,EAA8C;MAC5C,IAAIP,iBAAiB,IAAIO,IAAI,CAAClB,IAAL,KAAcmB,uBAAeC,iBAAtD,EAAyE;QACvE,OAAOH,iBAAiB,CAACC,IAAI,CAACG,KAAN,CAAxB;MACD;;MACD,IAAIT,YAAY,IAAIM,IAAI,CAAClB,IAAL,KAAcmB,uBAAeG,qBAAjD,EAAwE;QACtE,OACEL,iBAAiB,CAACC,IAAI,CAACK,SAAN,CAAjB,IACAN,iBAAiB,CAACC,IAAI,CAACM,UAAN,CAFnB;MAID;;MACD,OACGN,IAAI,CAAClB,IAAL,KAAcmB,uBAAeM,eAA7B,IACCP,IAAI,CAACQ,UAAL,CAAgB1B,IAAhB,KAAyBmB,uBAAeQ,cAD1C,IAEAT,IAAI,CAAClB,IAAL,KAAcmB,uBAAeS,gBAH/B;IAKD;;IAED,OAAO;MACLC,mBAAmB,CAACX,IAAD,EAAK;QACtB,IAAIA,IAAI,CAACY,SAAL,IAAkBb,iBAAiB,CAACC,IAAI,CAACQ,UAAN,CAAvC,EAA0D;UACxD;QACD;;QAEDV,KAAK,CAACa,mBAAN,CAA0BX,IAA1B;MACD;;IAPI,CAAP;EASD;;AArDiD,CAArC,CAAf","names":["baseRule","exports","util","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","hasSuggestions","schema","messages","_a","unusedExpression","defaultOptions","allowShortCircuit","allowTernary","allowTaggedTemplates","create","context","rules","isValidExpression","node","utils_1","LogicalExpression","right","ConditionalExpression","alternate","consequent","ChainExpression","expression","CallExpression","ImportExpression","ExpressionStatement","directive"],"sources":["../../src/rules/no-unused-expressions.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}