{"ast":null,"code":"'use strict';\n\nvar YAMLException = require('./exception');\n\nvar TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'multi', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'representName', 'defaultStyle', 'styleAliases'];\nvar YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type(tag, options) {\n  options = options || {};\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new YAMLException('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  }); // TODO: Add tag format check.\n\n  this.options = options; // keep original options in case user wants to extend this type later\n\n  this.tag = tag;\n  this.kind = options['kind'] || null;\n\n  this.resolve = options['resolve'] || function () {\n    return true;\n  };\n\n  this.construct = options['construct'] || function (data) {\n    return data;\n  };\n\n  this.instanceOf = options['instanceOf'] || null;\n  this.predicate = options['predicate'] || null;\n  this.represent = options['represent'] || null;\n  this.representName = options['representName'] || null;\n  this.defaultStyle = options['defaultStyle'] || null;\n  this.multi = options['multi'] || false;\n  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new YAMLException('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\n\nmodule.exports = Type;","map":{"version":3,"names":["YAMLException","require","TYPE_CONSTRUCTOR_OPTIONS","YAML_NODE_KINDS","compileStyleAliases","map","result","Object","keys","forEach","style","alias","String","Type","tag","options","name","indexOf","kind","resolve","construct","data","instanceOf","predicate","represent","representName","defaultStyle","multi","styleAliases","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@eslint/eslintrc/node_modules/js-yaml/lib/type.js"],"sourcesContent":["'use strict';\n\nvar YAMLException = require('./exception');\n\nvar TYPE_CONSTRUCTOR_OPTIONS = [\n  'kind',\n  'multi',\n  'resolve',\n  'construct',\n  'instanceOf',\n  'predicate',\n  'represent',\n  'representName',\n  'defaultStyle',\n  'styleAliases'\n];\n\nvar YAML_NODE_KINDS = [\n  'scalar',\n  'sequence',\n  'mapping'\n];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type(tag, options) {\n  options = options || {};\n\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new YAMLException('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  });\n\n  // TODO: Add tag format check.\n  this.options       = options; // keep original options in case user wants to extend this type later\n  this.tag           = tag;\n  this.kind          = options['kind']          || null;\n  this.resolve       = options['resolve']       || function () { return true; };\n  this.construct     = options['construct']     || function (data) { return data; };\n  this.instanceOf    = options['instanceOf']    || null;\n  this.predicate     = options['predicate']     || null;\n  this.represent     = options['represent']     || null;\n  this.representName = options['representName'] || null;\n  this.defaultStyle  = options['defaultStyle']  || null;\n  this.multi         = options['multi']         || false;\n  this.styleAliases  = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new YAMLException('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\n\nmodule.exports = Type;\n"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AAEA,IAAIC,wBAAwB,GAAG,CAC7B,MAD6B,EAE7B,OAF6B,EAG7B,SAH6B,EAI7B,WAJ6B,EAK7B,YAL6B,EAM7B,WAN6B,EAO7B,WAP6B,EAQ7B,eAR6B,EAS7B,cAT6B,EAU7B,cAV6B,CAA/B;AAaA,IAAIC,eAAe,GAAG,CACpB,QADoB,EAEpB,UAFoB,EAGpB,SAHoB,CAAtB;;AAMA,SAASC,mBAAT,CAA6BC,GAA7B,EAAkC;EAChC,IAAIC,MAAM,GAAG,EAAb;;EAEA,IAAID,GAAG,KAAK,IAAZ,EAAkB;IAChBE,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,OAAjB,CAAyB,UAAUC,KAAV,EAAiB;MACxCL,GAAG,CAACK,KAAD,CAAH,CAAWD,OAAX,CAAmB,UAAUE,KAAV,EAAiB;QAClCL,MAAM,CAACM,MAAM,CAACD,KAAD,CAAP,CAAN,GAAwBD,KAAxB;MACD,CAFD;IAGD,CAJD;EAKD;;EAED,OAAOJ,MAAP;AACD;;AAED,SAASO,IAAT,CAAcC,GAAd,EAAmBC,OAAnB,EAA4B;EAC1BA,OAAO,GAAGA,OAAO,IAAI,EAArB;EAEAR,MAAM,CAACC,IAAP,CAAYO,OAAZ,EAAqBN,OAArB,CAA6B,UAAUO,IAAV,EAAgB;IAC3C,IAAId,wBAAwB,CAACe,OAAzB,CAAiCD,IAAjC,MAA2C,CAAC,CAAhD,EAAmD;MACjD,MAAM,IAAIhB,aAAJ,CAAkB,qBAAqBgB,IAArB,GAA4B,6BAA5B,GAA4DF,GAA5D,GAAkE,cAApF,CAAN;IACD;EACF,CAJD,EAH0B,CAS1B;;EACA,KAAKC,OAAL,GAAqBA,OAArB,CAV0B,CAUI;;EAC9B,KAAKD,GAAL,GAAqBA,GAArB;EACA,KAAKI,IAAL,GAAqBH,OAAO,CAAC,MAAD,CAAP,IAA4B,IAAjD;;EACA,KAAKI,OAAL,GAAqBJ,OAAO,CAAC,SAAD,CAAP,IAA4B,YAAY;IAAE,OAAO,IAAP;EAAc,CAA7E;;EACA,KAAKK,SAAL,GAAqBL,OAAO,CAAC,WAAD,CAAP,IAA4B,UAAUM,IAAV,EAAgB;IAAE,OAAOA,IAAP;EAAc,CAAjF;;EACA,KAAKC,UAAL,GAAqBP,OAAO,CAAC,YAAD,CAAP,IAA4B,IAAjD;EACA,KAAKQ,SAAL,GAAqBR,OAAO,CAAC,WAAD,CAAP,IAA4B,IAAjD;EACA,KAAKS,SAAL,GAAqBT,OAAO,CAAC,WAAD,CAAP,IAA4B,IAAjD;EACA,KAAKU,aAAL,GAAqBV,OAAO,CAAC,eAAD,CAAP,IAA4B,IAAjD;EACA,KAAKW,YAAL,GAAqBX,OAAO,CAAC,cAAD,CAAP,IAA4B,IAAjD;EACA,KAAKY,KAAL,GAAqBZ,OAAO,CAAC,OAAD,CAAP,IAA4B,KAAjD;EACA,KAAKa,YAAL,GAAqBxB,mBAAmB,CAACW,OAAO,CAAC,cAAD,CAAP,IAA2B,IAA5B,CAAxC;;EAEA,IAAIZ,eAAe,CAACc,OAAhB,CAAwB,KAAKC,IAA7B,MAAuC,CAAC,CAA5C,EAA+C;IAC7C,MAAM,IAAIlB,aAAJ,CAAkB,mBAAmB,KAAKkB,IAAxB,GAA+B,sBAA/B,GAAwDJ,GAAxD,GAA8D,cAAhF,CAAN;EACD;AACF;;AAEDe,MAAM,CAACC,OAAP,GAAiBjB,IAAjB"},"metadata":{},"sourceType":"script"}