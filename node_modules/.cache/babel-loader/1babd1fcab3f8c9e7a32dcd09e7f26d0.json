{"ast":null,"code":"'use strict';\n\nvar StrictEqualityComparison = require('./StrictEqualityComparison');\n\nvar StringToBigInt = require('./StringToBigInt');\n\nvar ToNumber = require('./ToNumber');\n\nvar ToPrimitive = require('./ToPrimitive');\n\nvar Type = require('./Type');\n\nvar isNaN = require('../helpers/isNaN'); // https://ecma-international.org/ecma-262/11.0/#sec-abstract-equality-comparison\n\n\nmodule.exports = function AbstractEqualityComparison(x, y) {\n  var xType = Type(x);\n  var yType = Type(y);\n\n  if (xType === yType) {\n    return StrictEqualityComparison(x, y);\n  }\n\n  if (x == null && y == null) {\n    return true;\n  }\n\n  if (xType === 'Number' && yType === 'String') {\n    return AbstractEqualityComparison(x, ToNumber(y));\n  }\n\n  if (xType === 'String' && yType === 'Number') {\n    return AbstractEqualityComparison(ToNumber(x), y);\n  }\n\n  if (xType === 'BigInt' && yType === 'String') {\n    var n = StringToBigInt(y);\n\n    if (isNaN(n)) {\n      return false;\n    }\n\n    return AbstractEqualityComparison(x, n);\n  }\n\n  if (xType === 'String' && yType === 'BigInt') {\n    return AbstractEqualityComparison(y, x);\n  }\n\n  if (xType === 'Boolean') {\n    return AbstractEqualityComparison(ToNumber(x), y);\n  }\n\n  if (yType === 'Boolean') {\n    return AbstractEqualityComparison(x, ToNumber(y));\n  }\n\n  if ((xType === 'String' || xType === 'Number' || xType === 'BigInt' || xType === 'Symbol') && yType === 'Object') {\n    return AbstractEqualityComparison(x, ToPrimitive(y));\n  }\n\n  if (xType === 'Object' && (yType === 'String' || yType === 'Number' || yType === 'BigInt' || yType === 'Symbol')) {\n    return AbstractEqualityComparison(ToPrimitive(x), y);\n  }\n\n  if (xType === 'BigInt' && yType === 'Number' || xType === 'Number' && yType === 'BigInt') {\n    if (isNaN(x) || isNaN(y) || x === Infinity || y === Infinity || x === -Infinity || y === -Infinity) {\n      return false;\n    }\n\n    return x == y; // eslint-disable-line eqeqeq\n  }\n\n  return false;\n};","map":{"version":3,"names":["StrictEqualityComparison","require","StringToBigInt","ToNumber","ToPrimitive","Type","isNaN","module","exports","AbstractEqualityComparison","x","y","xType","yType","n","Infinity"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2020/AbstractEqualityComparison.js"],"sourcesContent":["'use strict';\n\nvar StrictEqualityComparison = require('./StrictEqualityComparison');\nvar StringToBigInt = require('./StringToBigInt');\nvar ToNumber = require('./ToNumber');\nvar ToPrimitive = require('./ToPrimitive');\nvar Type = require('./Type');\n\nvar isNaN = require('../helpers/isNaN');\n\n// https://ecma-international.org/ecma-262/11.0/#sec-abstract-equality-comparison\n\nmodule.exports = function AbstractEqualityComparison(x, y) {\n\tvar xType = Type(x);\n\tvar yType = Type(y);\n\tif (xType === yType) {\n\t\treturn StrictEqualityComparison(x, y);\n\t}\n\tif (x == null && y == null) {\n\t\treturn true;\n\t}\n\tif (xType === 'Number' && yType === 'String') {\n\t\treturn AbstractEqualityComparison(x, ToNumber(y));\n\t}\n\tif (xType === 'String' && yType === 'Number') {\n\t\treturn AbstractEqualityComparison(ToNumber(x), y);\n\t}\n\tif (xType === 'BigInt' && yType === 'String') {\n\t\tvar n = StringToBigInt(y);\n\t\tif (isNaN(n)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn AbstractEqualityComparison(x, n);\n\t}\n\tif (xType === 'String' && yType === 'BigInt') {\n\t\treturn AbstractEqualityComparison(y, x);\n\t}\n\tif (xType === 'Boolean') {\n\t\treturn AbstractEqualityComparison(ToNumber(x), y);\n\t}\n\tif (yType === 'Boolean') {\n\t\treturn AbstractEqualityComparison(x, ToNumber(y));\n\t}\n\tif ((xType === 'String' || xType === 'Number' || xType === 'BigInt' || xType === 'Symbol') && yType === 'Object') {\n\t\treturn AbstractEqualityComparison(x, ToPrimitive(y));\n\t}\n\tif (xType === 'Object' && (yType === 'String' || yType === 'Number' || yType === 'BigInt' || yType === 'Symbol')) {\n\t\treturn AbstractEqualityComparison(ToPrimitive(x), y);\n\t}\n\tif ((xType === 'BigInt' && yType === 'Number') || (xType === 'Number' && yType === 'BigInt')) {\n\t\tif (isNaN(x) || isNaN(y) || x === Infinity || y === Infinity || x === -Infinity || y === -Infinity) {\n\t\t\treturn false;\n\t\t}\n\t\treturn x == y; // eslint-disable-line eqeqeq\n\t}\n\treturn false;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}