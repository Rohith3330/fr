{"ast":null,"code":"/**\n * @fileoverview Forbid using another component's propTypes\n * @author Ian Christian Myers\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst ast = require('../util/ast');\n\nconst report = require('../util/report');\n\nconst messages = {\n  forbiddenPropType: 'Using propTypes from another component is not safe because they may be removed in production builds'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow using another component\\'s propTypes',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('forbid-foreign-prop-types')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        allowInPropTypes: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const config = context.options[0] || {};\n    const allowInPropTypes = config.allowInPropTypes || false; // --------------------------------------------------------------------------\n    // Helpers\n    // --------------------------------------------------------------------------\n\n    function findParentAssignmentExpression(node) {\n      let parent = node.parent;\n\n      while (parent && parent.type !== 'Program') {\n        if (parent.type === 'AssignmentExpression') {\n          return parent;\n        }\n\n        parent = parent.parent;\n      }\n\n      return null;\n    }\n\n    function findParentClassProperty(node) {\n      let parent = node.parent;\n\n      while (parent && parent.type !== 'Program') {\n        if (parent.type === 'ClassProperty' || parent.type === 'PropertyDefinition') {\n          return parent;\n        }\n\n        parent = parent.parent;\n      }\n\n      return null;\n    }\n\n    function isAllowedAssignment(node) {\n      if (!allowInPropTypes) {\n        return false;\n      }\n\n      const assignmentExpression = findParentAssignmentExpression(node);\n\n      if (assignmentExpression && assignmentExpression.left && assignmentExpression.left.property && assignmentExpression.left.property.name === 'propTypes') {\n        return true;\n      }\n\n      const classProperty = findParentClassProperty(node);\n\n      if (classProperty && classProperty.key && classProperty.key.name === 'propTypes') {\n        return true;\n      }\n\n      return false;\n    }\n\n    return {\n      MemberExpression(node) {\n        if (node.property && !node.computed && node.property.type === 'Identifier' && node.property.name === 'propTypes' && !ast.isAssignmentLHS(node) && !isAllowedAssignment(node) || (node.property.type === 'Literal' || node.property.type === 'JSXText') && node.property.value === 'propTypes' && !ast.isAssignmentLHS(node) && !isAllowedAssignment(node)) {\n          report(context, messages.forbiddenPropType, 'forbiddenPropType', {\n            node: node.property\n          });\n        }\n      },\n\n      ObjectPattern(node) {\n        const propTypesNode = node.properties.find(property => property.type === 'Property' && property.key.name === 'propTypes');\n\n        if (propTypesNode) {\n          report(context, messages.forbiddenPropType, 'forbiddenPropType', {\n            node: propTypesNode\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","ast","report","messages","forbiddenPropType","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","allowInPropTypes","additionalProperties","create","context","config","options","findParentAssignmentExpression","node","parent","findParentClassProperty","isAllowedAssignment","assignmentExpression","left","property","name","classProperty","key","MemberExpression","computed","isAssignmentLHS","value","ObjectPattern","propTypesNode","find"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/forbid-foreign-prop-types.js"],"sourcesContent":["/**\n * @fileoverview Forbid using another component's propTypes\n * @author Ian Christian Myers\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst ast = require('../util/ast');\nconst report = require('../util/report');\n\nconst messages = {\n  forbiddenPropType: 'Using propTypes from another component is not safe because they may be removed in production builds',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow using another component\\'s propTypes',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('forbid-foreign-prop-types'),\n    },\n\n    messages,\n\n    schema: [\n      {\n        type: 'object',\n        properties: {\n          allowInPropTypes: {\n            type: 'boolean',\n          },\n        },\n        additionalProperties: false,\n      },\n    ],\n  },\n\n  create(context) {\n    const config = context.options[0] || {};\n    const allowInPropTypes = config.allowInPropTypes || false;\n\n    // --------------------------------------------------------------------------\n    // Helpers\n    // --------------------------------------------------------------------------\n\n    function findParentAssignmentExpression(node) {\n      let parent = node.parent;\n\n      while (parent && parent.type !== 'Program') {\n        if (parent.type === 'AssignmentExpression') {\n          return parent;\n        }\n        parent = parent.parent;\n      }\n      return null;\n    }\n\n    function findParentClassProperty(node) {\n      let parent = node.parent;\n\n      while (parent && parent.type !== 'Program') {\n        if (parent.type === 'ClassProperty' || parent.type === 'PropertyDefinition') {\n          return parent;\n        }\n        parent = parent.parent;\n      }\n      return null;\n    }\n\n    function isAllowedAssignment(node) {\n      if (!allowInPropTypes) {\n        return false;\n      }\n\n      const assignmentExpression = findParentAssignmentExpression(node);\n\n      if (\n        assignmentExpression\n        && assignmentExpression.left\n        && assignmentExpression.left.property\n        && assignmentExpression.left.property.name === 'propTypes'\n      ) {\n        return true;\n      }\n\n      const classProperty = findParentClassProperty(node);\n\n      if (\n        classProperty\n        && classProperty.key\n        && classProperty.key.name === 'propTypes'\n      ) {\n        return true;\n      }\n      return false;\n    }\n\n    return {\n      MemberExpression(node) {\n        if (\n          (node.property\n          && (\n            !node.computed\n            && node.property.type === 'Identifier'\n            && node.property.name === 'propTypes'\n            && !ast.isAssignmentLHS(node)\n            && !isAllowedAssignment(node)\n          )) || (\n            (node.property.type === 'Literal' || node.property.type === 'JSXText')\n            && node.property.value === 'propTypes'\n            && !ast.isAssignmentLHS(node)\n            && !isAllowedAssignment(node)\n          )\n        ) {\n          report(context, messages.forbiddenPropType, 'forbiddenPropType', {\n            node: node.property,\n          });\n        }\n      },\n\n      ObjectPattern(node) {\n        const propTypesNode = node.properties.find((property) => property.type === 'Property' && property.key.name === 'propTypes');\n\n        if (propTypesNode) {\n          report(context, messages.forbiddenPropType, 'forbiddenPropType', {\n            node: propTypesNode,\n          });\n        }\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}