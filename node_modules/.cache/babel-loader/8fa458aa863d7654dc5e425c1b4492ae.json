{"ast":null,"code":"/**\n * @fileoverview Report when a DOM element is using both children and dangerouslySetInnerHTML\n * @author David Petersen\n */\n'use strict';\n\nconst variableUtil = require('../util/variable');\n\nconst jsxUtil = require('../util/jsx');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  dangerWithChildren: 'Only set one of `children` or `props.dangerouslySetInnerHTML`'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow when a DOM element is using both children and dangerouslySetInnerHTML',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('no-danger-with-children')\n    },\n    messages,\n    schema: [] // no options\n\n  },\n\n  create(context) {\n    function findSpreadVariable(name) {\n      return variableUtil.variablesInScope(context).find(item => item.name === name);\n    }\n    /**\n     * Takes a ObjectExpression and returns the value of the prop if it has it\n     * @param {object} node - ObjectExpression node\n     * @param {string} propName - name of the prop to look for\n     * @param {string[]} seenProps\n     * @returns {object | boolean}\n     */\n\n\n    function findObjectProp(node, propName, seenProps) {\n      if (!node.properties) {\n        return false;\n      }\n\n      return node.properties.find(prop => {\n        if (prop.type === 'Property') {\n          return prop.key.name === propName;\n        }\n\n        if (prop.type === 'ExperimentalSpreadProperty' || prop.type === 'SpreadElement') {\n          const variable = findSpreadVariable(prop.argument.name);\n\n          if (variable && variable.defs.length && variable.defs[0].node.init) {\n            if (seenProps.indexOf(prop.argument.name) > -1) {\n              return false;\n            }\n\n            const newSeenProps = seenProps.concat(prop.argument.name || []);\n            return findObjectProp(variable.defs[0].node.init, propName, newSeenProps);\n          }\n        }\n\n        return false;\n      });\n    }\n    /**\n     * Takes a JSXElement and returns the value of the prop if it has it\n     * @param {object} node - JSXElement node\n     * @param {string} propName - name of the prop to look for\n     * @returns {object | boolean}\n     */\n\n\n    function findJsxProp(node, propName) {\n      const attributes = node.openingElement.attributes;\n      return attributes.find(attribute => {\n        if (attribute.type === 'JSXSpreadAttribute') {\n          const variable = findSpreadVariable(attribute.argument.name);\n\n          if (variable && variable.defs.length && variable.defs[0].node.init) {\n            return findObjectProp(variable.defs[0].node.init, propName, []);\n          }\n        }\n\n        return attribute.name && attribute.name.name === propName;\n      });\n    }\n    /**\n     * Checks to see if a node is a line break\n     * @param {ASTNode} node The AST node being checked\n     * @returns {Boolean} True if node is a line break, false if not\n     */\n\n\n    function isLineBreak(node) {\n      const isLiteral = node.type === 'Literal' || node.type === 'JSXText';\n      const isMultiline = node.loc.start.line !== node.loc.end.line;\n      const isWhiteSpaces = jsxUtil.isWhiteSpaces(node.value);\n      return isLiteral && isMultiline && isWhiteSpaces;\n    }\n\n    return {\n      JSXElement(node) {\n        let hasChildren = false;\n\n        if (node.children.length && !isLineBreak(node.children[0])) {\n          hasChildren = true;\n        } else if (findJsxProp(node, 'children')) {\n          hasChildren = true;\n        }\n\n        if (node.openingElement.attributes && hasChildren && findJsxProp(node, 'dangerouslySetInnerHTML')) {\n          report(context, messages.dangerWithChildren, 'dangerWithChildren', {\n            node\n          });\n        }\n      },\n\n      CallExpression(node) {\n        if (node.callee && node.callee.type === 'MemberExpression' && node.callee.property.name === 'createElement' && node.arguments.length > 1) {\n          let hasChildren = false;\n          let props = node.arguments[1];\n\n          if (props.type === 'Identifier') {\n            const variable = variableUtil.variablesInScope(context).find(item => item.name === props.name);\n\n            if (variable && variable.defs.length && variable.defs[0].node.init) {\n              props = variable.defs[0].node.init;\n            }\n          }\n\n          const dangerously = findObjectProp(props, 'dangerouslySetInnerHTML', []);\n\n          if (node.arguments.length === 2) {\n            if (findObjectProp(props, 'children', [])) {\n              hasChildren = true;\n            }\n          } else {\n            hasChildren = true;\n          }\n\n          if (dangerously && hasChildren) {\n            report(context, messages.dangerWithChildren, 'dangerWithChildren', {\n              node\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["variableUtil","require","jsxUtil","docsUrl","report","messages","dangerWithChildren","module","exports","meta","docs","description","category","recommended","url","schema","create","context","findSpreadVariable","name","variablesInScope","find","item","findObjectProp","node","propName","seenProps","properties","prop","type","key","variable","argument","defs","length","init","indexOf","newSeenProps","concat","findJsxProp","attributes","openingElement","attribute","isLineBreak","isLiteral","isMultiline","loc","start","line","end","isWhiteSpaces","value","JSXElement","hasChildren","children","CallExpression","callee","property","arguments","props","dangerously"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/no-danger-with-children.js"],"sourcesContent":["/**\n * @fileoverview Report when a DOM element is using both children and dangerouslySetInnerHTML\n * @author David Petersen\n */\n\n'use strict';\n\nconst variableUtil = require('../util/variable');\nconst jsxUtil = require('../util/jsx');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\nconst messages = {\n  dangerWithChildren: 'Only set one of `children` or `props.dangerouslySetInnerHTML`',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow when a DOM element is using both children and dangerouslySetInnerHTML',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('no-danger-with-children'),\n    },\n\n    messages,\n\n    schema: [], // no options\n  },\n  create(context) {\n    function findSpreadVariable(name) {\n      return variableUtil.variablesInScope(context).find((item) => item.name === name);\n    }\n    /**\n     * Takes a ObjectExpression and returns the value of the prop if it has it\n     * @param {object} node - ObjectExpression node\n     * @param {string} propName - name of the prop to look for\n     * @param {string[]} seenProps\n     * @returns {object | boolean}\n     */\n    function findObjectProp(node, propName, seenProps) {\n      if (!node.properties) {\n        return false;\n      }\n      return node.properties.find((prop) => {\n        if (prop.type === 'Property') {\n          return prop.key.name === propName;\n        }\n        if (prop.type === 'ExperimentalSpreadProperty' || prop.type === 'SpreadElement') {\n          const variable = findSpreadVariable(prop.argument.name);\n          if (variable && variable.defs.length && variable.defs[0].node.init) {\n            if (seenProps.indexOf(prop.argument.name) > -1) {\n              return false;\n            }\n            const newSeenProps = seenProps.concat(prop.argument.name || []);\n            return findObjectProp(variable.defs[0].node.init, propName, newSeenProps);\n          }\n        }\n        return false;\n      });\n    }\n\n    /**\n     * Takes a JSXElement and returns the value of the prop if it has it\n     * @param {object} node - JSXElement node\n     * @param {string} propName - name of the prop to look for\n     * @returns {object | boolean}\n     */\n    function findJsxProp(node, propName) {\n      const attributes = node.openingElement.attributes;\n      return attributes.find((attribute) => {\n        if (attribute.type === 'JSXSpreadAttribute') {\n          const variable = findSpreadVariable(attribute.argument.name);\n          if (variable && variable.defs.length && variable.defs[0].node.init) {\n            return findObjectProp(variable.defs[0].node.init, propName, []);\n          }\n        }\n        return attribute.name && attribute.name.name === propName;\n      });\n    }\n\n    /**\n     * Checks to see if a node is a line break\n     * @param {ASTNode} node The AST node being checked\n     * @returns {Boolean} True if node is a line break, false if not\n     */\n    function isLineBreak(node) {\n      const isLiteral = node.type === 'Literal' || node.type === 'JSXText';\n      const isMultiline = node.loc.start.line !== node.loc.end.line;\n      const isWhiteSpaces = jsxUtil.isWhiteSpaces(node.value);\n\n      return isLiteral && isMultiline && isWhiteSpaces;\n    }\n\n    return {\n      JSXElement(node) {\n        let hasChildren = false;\n\n        if (node.children.length && !isLineBreak(node.children[0])) {\n          hasChildren = true;\n        } else if (findJsxProp(node, 'children')) {\n          hasChildren = true;\n        }\n\n        if (\n          node.openingElement.attributes\n          && hasChildren\n          && findJsxProp(node, 'dangerouslySetInnerHTML')\n        ) {\n          report(context, messages.dangerWithChildren, 'dangerWithChildren', {\n            node,\n          });\n        }\n      },\n      CallExpression(node) {\n        if (\n          node.callee\n          && node.callee.type === 'MemberExpression'\n          && node.callee.property.name === 'createElement'\n          && node.arguments.length > 1\n        ) {\n          let hasChildren = false;\n\n          let props = node.arguments[1];\n\n          if (props.type === 'Identifier') {\n            const variable = variableUtil.variablesInScope(context).find((item) => item.name === props.name);\n            if (variable && variable.defs.length && variable.defs[0].node.init) {\n              props = variable.defs[0].node.init;\n            }\n          }\n\n          const dangerously = findObjectProp(props, 'dangerouslySetInnerHTML', []);\n\n          if (node.arguments.length === 2) {\n            if (findObjectProp(props, 'children', [])) {\n              hasChildren = true;\n            }\n          } else {\n            hasChildren = true;\n          }\n\n          if (dangerously && hasChildren) {\n            report(context, messages.dangerWithChildren, 'dangerWithChildren', {\n              node,\n            });\n          }\n        }\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}