{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatLimitDefinition = void 0;\n\nconst ajv_1 = require(\"ajv\");\n\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\n\nconst ops = codegen_1.operators;\nconst KWDs = {\n  formatMaximum: {\n    okStr: \"<=\",\n    ok: ops.LTE,\n    fail: ops.GT\n  },\n  formatMinimum: {\n    okStr: \">=\",\n    ok: ops.GTE,\n    fail: ops.LT\n  },\n  formatExclusiveMaximum: {\n    okStr: \"<\",\n    ok: ops.LT,\n    fail: ops.GTE\n  },\n  formatExclusiveMinimum: {\n    okStr: \">\",\n    ok: ops.GT,\n    fail: ops.LTE\n  }\n};\nconst error = {\n  message: _ref => {\n    let {\n      keyword,\n      schemaCode\n    } = _ref;\n    return codegen_1.str`should be ${KWDs[keyword].okStr} ${schemaCode}`;\n  },\n  params: _ref2 => {\n    let {\n      keyword,\n      schemaCode\n    } = _ref2;\n    return codegen_1._`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`;\n  }\n};\nexports.formatLimitDefinition = {\n  keyword: Object.keys(KWDs),\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      data,\n      schemaCode,\n      keyword,\n      it\n    } = cxt;\n    const {\n      opts,\n      self\n    } = it;\n    if (!opts.validateFormats) return;\n    const fCxt = new ajv_1.KeywordCxt(it, self.RULES.all.format.definition, \"format\");\n    if (fCxt.$data) validate$DataFormat();else validateFormat();\n\n    function validate$DataFormat() {\n      const fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats\n      });\n      const fmt = gen.const(\"fmt\", codegen_1._`${fmts}[${fCxt.schemaCode}]`);\n      cxt.fail$data(codegen_1.or(codegen_1._`typeof ${fmt} != \"object\"`, codegen_1._`${fmt} instanceof RegExp`, codegen_1._`typeof ${fmt}.compare != \"function\"`, compareCode(fmt)));\n    }\n\n    function validateFormat() {\n      const format = fCxt.schema;\n      const fmtDef = self.formats[format];\n      if (!fmtDef || fmtDef === true) return;\n\n      if (typeof fmtDef != \"object\" || fmtDef instanceof RegExp || typeof fmtDef.compare != \"function\") {\n        throw new Error(`\"${keyword}\": format \"${format}\" does not define \"compare\" function`);\n      }\n\n      const fmt = gen.scopeValue(\"formats\", {\n        key: format,\n        ref: fmtDef,\n        code: opts.code.formats ? codegen_1._`${opts.code.formats}${codegen_1.getProperty(format)}` : undefined\n      });\n      cxt.fail$data(compareCode(fmt));\n    }\n\n    function compareCode(fmt) {\n      return codegen_1._`${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword].fail} 0`;\n    }\n  },\n\n  dependencies: [\"format\"]\n};\n\nconst formatLimitPlugin = ajv => {\n  ajv.addKeyword(exports.formatLimitDefinition);\n  return ajv;\n};\n\nexports.default = formatLimitPlugin;","map":{"version":3,"mappings":"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","names":["ops","codegen_1","KWDs","formatMaximum","okStr","ok","LTE","fail","GT","formatMinimum","GTE","LT","formatExclusiveMaximum","formatExclusiveMinimum","error","message","keyword","schemaCode","params","exports","Object","keys","type","schemaType","$data","code","cxt","gen","data","it","opts","self","validateFormats","fCxt","ajv_1","RULES","all","format","definition","validate$DataFormat","validateFormat","fmts","scopeValue","ref","formats","fmt","const","fail$data","compareCode","schema","fmtDef","RegExp","compare","Error","key","undefined","dependencies","formatLimitPlugin","ajv","addKeyword"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\ajv-formats\\src\\limit.ts"],"sourcesContent":["import type Ajv from \"ajv\"\nimport type {\n  Plugin,\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  Code,\n  Name,\n  ErrorObject,\n} from \"ajv\"\nimport type {AddedFormat} from \"ajv/dist/types\"\nimport type {Rule} from \"ajv/dist/compile/rules\"\nimport {KeywordCxt} from \"ajv\"\nimport {_, str, or, getProperty, operators} from \"ajv/dist/compile/codegen\"\n\ntype Kwd = \"formatMaximum\" | \"formatMinimum\" | \"formatExclusiveMaximum\" | \"formatExclusiveMinimum\"\n\ntype Comparison = \"<=\" | \">=\" | \"<\" | \">\"\n\nconst ops = operators\n\nconst KWDs: {[K in Kwd]: {okStr: Comparison; ok: Code; fail: Code}} = {\n  formatMaximum: {okStr: \"<=\", ok: ops.LTE, fail: ops.GT},\n  formatMinimum: {okStr: \">=\", ok: ops.GTE, fail: ops.LT},\n  formatExclusiveMaximum: {okStr: \"<\", ok: ops.LT, fail: ops.GTE},\n  formatExclusiveMinimum: {okStr: \">\", ok: ops.GT, fail: ops.LTE},\n}\n\nexport type LimitFormatError = ErrorObject<Kwd, {limit: string; comparison: Comparison}>\n\nconst error: KeywordErrorDefinition = {\n  message: ({keyword, schemaCode}) => str`should be ${KWDs[keyword as Kwd].okStr} ${schemaCode}`,\n  params: ({keyword, schemaCode}) =>\n    _`{comparison: ${KWDs[keyword as Kwd].okStr}, limit: ${schemaCode}}`,\n}\n\nexport const formatLimitDefinition: CodeKeywordDefinition = {\n  keyword: Object.keys(KWDs),\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {gen, data, schemaCode, keyword, it} = cxt\n    const {opts, self} = it\n    if (!opts.validateFormats) return\n\n    const fCxt = new KeywordCxt(it, (self.RULES.all.format as Rule).definition, \"format\")\n    if (fCxt.$data) validate$DataFormat()\n    else validateFormat()\n\n    function validate$DataFormat(): void {\n      const fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats,\n      })\n      const fmt = gen.const(\"fmt\", _`${fmts}[${fCxt.schemaCode}]`)\n      cxt.fail$data(\n        or(\n          _`typeof ${fmt} != \"object\"`,\n          _`${fmt} instanceof RegExp`,\n          _`typeof ${fmt}.compare != \"function\"`,\n          compareCode(fmt)\n        )\n      )\n    }\n\n    function validateFormat(): void {\n      const format = fCxt.schema as string\n      const fmtDef: AddedFormat | undefined = self.formats[format]\n      if (!fmtDef || fmtDef === true) return\n      if (\n        typeof fmtDef != \"object\" ||\n        fmtDef instanceof RegExp ||\n        typeof fmtDef.compare != \"function\"\n      ) {\n        throw new Error(`\"${keyword}\": format \"${format}\" does not define \"compare\" function`)\n      }\n      const fmt = gen.scopeValue(\"formats\", {\n        key: format,\n        ref: fmtDef,\n        code: opts.code.formats ? _`${opts.code.formats}${getProperty(format)}` : undefined,\n      })\n\n      cxt.fail$data(compareCode(fmt))\n    }\n\n    function compareCode(fmt: Name): Code {\n      return _`${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword as Kwd].fail} 0`\n    }\n  },\n  dependencies: [\"format\"],\n}\n\nconst formatLimitPlugin: Plugin<undefined> = (ajv: Ajv): Ajv => {\n  ajv.addKeyword(formatLimitDefinition)\n  return ajv\n}\n\nexport default formatLimitPlugin\n"]},"metadata":{},"sourceType":"script"}