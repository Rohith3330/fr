{"ast":null,"code":"import e from \"postcss-value-parser\";\n\nconst o = [\"woff\", \"truetype\", \"opentype\", \"woff2\", \"embedded-opentype\", \"collection\", \"svg\"],\n      t = t => {\n  const r = \"preserve\" in Object(t) && Boolean(t.preserve);\n  return {\n    postcssPlugin: \"postcss-font-format-keywords\",\n\n    AtRule(t) {\n      \"font-face\" === t.name.toLowerCase() && t.walkDecls(t => {\n        if (\"src\" !== t.prop.toLowerCase()) return;\n        if (!t.value.toLowerCase().includes(\"format(\")) return;\n        const s = e(t.value);\n        s.walk(t => {\n          \"function\" === t.type && \"format\" === t.value.toLowerCase() && t.nodes.forEach(t => {\n            \"word\" === t.type && o.includes(t.value.toLowerCase()) && (t.value = e.stringify({\n              type: \"string\",\n              value: t.value,\n              quote: '\"'\n            }));\n          });\n        }), s.toString() !== t.value && (t.cloneBefore({\n          value: s.toString()\n        }), r || t.remove());\n      });\n    }\n\n  };\n};\n\nt.postcss = !0;\nexport { t as default };","map":{"version":3,"names":["e","o","t","r","Object","Boolean","preserve","postcssPlugin","AtRule","name","toLowerCase","walkDecls","prop","value","includes","s","walk","type","nodes","forEach","stringify","quote","toString","cloneBefore","remove","postcss","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@csstools/postcss-font-format-keywords/dist/index.mjs"],"sourcesContent":["import e from\"postcss-value-parser\";const o=[\"woff\",\"truetype\",\"opentype\",\"woff2\",\"embedded-opentype\",\"collection\",\"svg\"],t=t=>{const r=\"preserve\"in Object(t)&&Boolean(t.preserve);return{postcssPlugin:\"postcss-font-format-keywords\",AtRule(t){\"font-face\"===t.name.toLowerCase()&&t.walkDecls((t=>{if(\"src\"!==t.prop.toLowerCase())return;if(!t.value.toLowerCase().includes(\"format(\"))return;const s=e(t.value);s.walk((t=>{\"function\"===t.type&&\"format\"===t.value.toLowerCase()&&t.nodes.forEach((t=>{\"word\"===t.type&&o.includes(t.value.toLowerCase())&&(t.value=e.stringify({type:\"string\",value:t.value,quote:'\"'}))}))})),s.toString()!==t.value&&(t.cloneBefore({value:s.toString()}),r||t.remove())}))}}};t.postcss=!0;export{t as default};\n"],"mappings":"AAAA,OAAOA,CAAP,MAAa,sBAAb;;AAAoC,MAAMC,CAAC,GAAC,CAAC,MAAD,EAAQ,UAAR,EAAmB,UAAnB,EAA8B,OAA9B,EAAsC,mBAAtC,EAA0D,YAA1D,EAAuE,KAAvE,CAAR;AAAA,MAAsFC,CAAC,GAACA,CAAC,IAAE;EAAC,MAAMC,CAAC,GAAC,cAAaC,MAAM,CAACF,CAAD,CAAnB,IAAwBG,OAAO,CAACH,CAAC,CAACI,QAAH,CAAvC;EAAoD,OAAM;IAACC,aAAa,EAAC,8BAAf;;IAA8CC,MAAM,CAACN,CAAD,EAAG;MAAC,gBAAcA,CAAC,CAACO,IAAF,CAAOC,WAAP,EAAd,IAAoCR,CAAC,CAACS,SAAF,CAAaT,CAAC,IAAE;QAAC,IAAG,UAAQA,CAAC,CAACU,IAAF,CAAOF,WAAP,EAAX,EAAgC;QAAO,IAAG,CAACR,CAAC,CAACW,KAAF,CAAQH,WAAR,GAAsBI,QAAtB,CAA+B,SAA/B,CAAJ,EAA8C;QAAO,MAAMC,CAAC,GAACf,CAAC,CAACE,CAAC,CAACW,KAAH,CAAT;QAAmBE,CAAC,CAACC,IAAF,CAAQd,CAAC,IAAE;UAAC,eAAaA,CAAC,CAACe,IAAf,IAAqB,aAAWf,CAAC,CAACW,KAAF,CAAQH,WAAR,EAAhC,IAAuDR,CAAC,CAACgB,KAAF,CAAQC,OAAR,CAAiBjB,CAAC,IAAE;YAAC,WAASA,CAAC,CAACe,IAAX,IAAiBhB,CAAC,CAACa,QAAF,CAAWZ,CAAC,CAACW,KAAF,CAAQH,WAAR,EAAX,CAAjB,KAAqDR,CAAC,CAACW,KAAF,GAAQb,CAAC,CAACoB,SAAF,CAAY;cAACH,IAAI,EAAC,QAAN;cAAeJ,KAAK,EAACX,CAAC,CAACW,KAAvB;cAA6BQ,KAAK,EAAC;YAAnC,CAAZ,CAA7D;UAAmH,CAAxI,CAAvD;QAAkM,CAA9M,GAAiNN,CAAC,CAACO,QAAF,OAAepB,CAAC,CAACW,KAAjB,KAAyBX,CAAC,CAACqB,WAAF,CAAc;UAACV,KAAK,EAACE,CAAC,CAACO,QAAF;QAAP,CAAd,GAAoCnB,CAAC,IAAED,CAAC,CAACsB,MAAF,EAAhE,CAAjN;MAA6R,CAA7Z,CAApC;IAAoc;;EAA5f,CAAN;AAAogB,CAAppB;;AAAqpBtB,CAAC,CAACuB,OAAF,GAAU,CAAC,CAAX;AAAa,SAAOvB,CAAC,IAAIwB,OAAZ"},"metadata":{},"sourceType":"module"}