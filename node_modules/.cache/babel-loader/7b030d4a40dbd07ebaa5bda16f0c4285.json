{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rohith\\\\Pictures\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nvar CHANNEL_CHAR_TO_INDEX_MAP = {\n  'R': 0,\n  'G': 1,\n  'B': 2,\n  'A': 3\n};\nexport var EncodeMatrixProgram = function EncodeMatrixProgram(outputShape) {\n  var inputIsUnsignedByte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var usedChannels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'RGBA';\n  _classCallCheck(this, EncodeMatrixProgram);\n  this.variableNames = ['A'];\n  this.customUniforms = [{\n    name: 'texShape',\n    type: 'ivec2'\n  }];\n  var glsl = getGlslDifferences();\n  this.outputShape = outputShape;\n  this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n  var output = \"result\";\n  if (inputIsUnsignedByte) {\n    output = \"floor(result * 255. + 0.5)\";\n  }\n  var mainLoop = '';\n  for (var usedChannelIndex = 0; usedChannelIndex < usedChannels.length; usedChannelIndex++) {\n    var curChannel = usedChannels[usedChannelIndex];\n    mainLoop += \"\\n          if(offset == \".concat(usedChannelIndex, \") {\\n            result = values[\").concat(CHANNEL_CHAR_TO_INDEX_MAP[curChannel], \"];\\n          }\");\n  }\n  this.userCode = \"\\n      \".concat(this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape), \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int flatIndex = getFlatIndex(coords);\\n        float result = 0.;\\n        int offset = imod(flatIndex, \").concat(usedChannels.length, \");\\n\\n        flatIndex = idiv(flatIndex, \").concat(usedChannels.length, \", 1.);\\n\\n        int r = flatIndex / texShape[1];\\n        if (r < texShape[0]) {\\n          int c = imod(flatIndex, texShape[1]);\\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\\n          vec4 values = \").concat(glsl.texture2D, \"(A, uv);\\n          \").concat(mainLoop, \"\\n        }\\n        \").concat(glsl.output, \" = vec4(\").concat(output, \", 0., 0., 0.);\\n      }\\n    \");\n};","map":null,"metadata":{},"sourceType":"module"}