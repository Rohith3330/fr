{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(findPackageData);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findPackageData = findPackageData;\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _utils = require(\"./utils\");\n\nvar _configError = require(\"../../errors/config-error\");\n\nvar PACKAGE_FILENAME = \"package.json\";\n\nfunction findPackageData(filepath) {\n  var pkg, directories, isPackage, dirname, nextLoc;\n  return _regeneratorRuntime().wrap(function findPackageData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pkg = null;\n          directories = [];\n          isPackage = true;\n          dirname = _path().dirname(filepath);\n\n        case 4:\n          if (!(!pkg && _path().basename(dirname) !== \"node_modules\")) {\n            _context.next = 15;\n            break;\n          }\n\n          directories.push(dirname);\n          return _context.delegateYield(readConfigPackage(_path().join(dirname, PACKAGE_FILENAME)), \"t0\", 7);\n\n        case 7:\n          pkg = _context.t0;\n          nextLoc = _path().dirname(dirname);\n\n          if (!(dirname === nextLoc)) {\n            _context.next = 12;\n            break;\n          }\n\n          isPackage = false;\n          return _context.abrupt(\"break\", 15);\n\n        case 12:\n          dirname = nextLoc;\n          _context.next = 4;\n          break;\n\n        case 15:\n          return _context.abrupt(\"return\", {\n            filepath: filepath,\n            directories: directories,\n            pkg: pkg,\n            isPackage: isPackage\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nvar readConfigPackage = (0, _utils.makeStaticFileCache)(function (filepath, content) {\n  var options;\n\n  try {\n    options = JSON.parse(content);\n  } catch (err) {\n    throw new _configError.default(\"Error while parsing JSON - \".concat(err.message), filepath);\n  }\n\n  if (!options) throw new Error(\"\".concat(filepath, \": No config detected\"));\n\n  if (typeof options !== \"object\") {\n    throw new _configError.default(\"Config returned typeof \".concat(typeof options), filepath);\n  }\n\n  if (Array.isArray(options)) {\n    throw new _configError.default(\"Expected config object but found array\", filepath);\n  }\n\n  return {\n    filepath: filepath,\n    dirname: _path().dirname(filepath),\n    options: options\n  };\n});\n0 && 0;","map":{"version":3,"mappings":";;;;sDAeiBA,e;;;;;;;AAfjB;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AAEA;;AAIA;;AAEA,IAAMC,gBAAgB,GAAG,cAAzB;;AAOO,SAAUF,eAAV,CAA0BG,QAA1B;EAAA;EAAA;IAAA;MAAA;QAAA;UACDC,GADC,GACK,IADL;UAECC,WAFD,GAEe,EAFf;UAGDC,SAHC,GAGW,IAHX;UAKDC,OALC,GAKSC,QAAKD,OAALC,CAAaL,QAAbK,CALT;;QAAA;UAAA,MAME,CAACJ,GAAD,IAAQI,QAAKC,QAALD,CAAcD,OAAdC,MAA2B,cANrC;YAAA;YAAA;UAAA;;UAOHH,WAAW,CAACK,IAAZL,CAAiBE,OAAjBF;UAEM,8BAAOM,iBAAiB,CAACH,QAAKI,IAALJ,CAAUD,OAAVC,EAAmBN,gBAAnBM,CAAD,CAAxB;;QATH;UASHJ,GATG;UAWGS,OAXH,GAWaL,QAAKD,OAALC,CAAaD,OAAbC,CAXb;;UAAA,MAYCD,OAAO,KAAKM,OAZb;YAAA;YAAA;UAAA;;UAaDP,SAAS,GAAG,KAAZA;UAbC;;QAAA;UAgBHC,OAAO,GAAGM,OAAVN;UAhBG;UAAA;;QAAA;UAAA,iCAmBE;YAAEJ,QAAF,EAAEA,QAAF;YAAYE,WAAZ,EAAYA,WAAZ;YAAyBD,GAAzB,EAAyBA,GAAzB;YAA8BE;UAA9B,CAnBF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAsBP,IAAMK,iBAAiB,GAAG,gCACxB,UAACR,QAAD,EAAWW,OAAX,EAAmC;EACjC,IAAIC,OAAJ;;EACA,IAAI;IACFA,OAAO,GAAGC,IAAI,CAACC,KAALD,CAAWF,OAAXE,CAAVD;EADF,EAEE,OAAOG,GAAP,EAAY;IACZ,MAAM,IAAIC,oBAAJ,sCAC0BD,GAAG,CAACE,OAD9B,GAEJjB,QAFI,CAAN;EAID;;EAED,IAAI,CAACY,OAAL,EAAc,MAAM,IAAIM,KAAJ,WAAalB,QAAb,0BAAN;;EAEd,IAAI,OAAOY,OAAP,KAAmB,QAAvB,EAAiC;IAC/B,MAAM,IAAII,oBAAJ,kCACsB,OAAOJ,OAD7B,GAEJZ,QAFI,CAAN;EAID;;EACD,IAAImB,KAAK,CAACC,OAAND,CAAcP,OAAdO,CAAJ,EAA4B;IAC1B,MAAM,IAAIH,oBAAJ,2CAA0DhB,QAA1D,CAAN;EACD;;EAED,OAAO;IACLA,QADK,EACLA,QADK;IAELI,OAAO,EAAEC,QAAKD,OAALC,CAAaL,QAAbK,CAFJ;IAGLO;EAHK,CAAP;AAxBsB,EAA1B","names":["findPackageData","_path","PACKAGE_FILENAME","filepath","pkg","directories","isPackage","dirname","path","basename","push","readConfigPackage","join","nextLoc","content","options","JSON","parse","err","ConfigError","message","Error","Array","isArray"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\config\\files\\package.ts"],"sourcesContent":["import path from \"path\";\nimport type { Handler } from \"gensync\";\nimport { makeStaticFileCache } from \"./utils\";\n\nimport type { ConfigFile, FilePackageData } from \"./types\";\n\nimport ConfigError from \"../../errors/config-error\";\n\nconst PACKAGE_FILENAME = \"package.json\";\n\n/**\n * Find metadata about the package that this file is inside of. Resolution\n * of Babel's config requires general package information to decide when to\n * search for .babelrc files\n */\nexport function* findPackageData(filepath: string): Handler<FilePackageData> {\n  let pkg = null;\n  const directories = [];\n  let isPackage = true;\n\n  let dirname = path.dirname(filepath);\n  while (!pkg && path.basename(dirname) !== \"node_modules\") {\n    directories.push(dirname);\n\n    pkg = yield* readConfigPackage(path.join(dirname, PACKAGE_FILENAME));\n\n    const nextLoc = path.dirname(dirname);\n    if (dirname === nextLoc) {\n      isPackage = false;\n      break;\n    }\n    dirname = nextLoc;\n  }\n\n  return { filepath, directories, pkg, isPackage };\n}\n\nconst readConfigPackage = makeStaticFileCache(\n  (filepath, content): ConfigFile => {\n    let options;\n    try {\n      options = JSON.parse(content) as unknown;\n    } catch (err) {\n      throw new ConfigError(\n        `Error while parsing JSON - ${err.message}`,\n        filepath,\n      );\n    }\n\n    if (!options) throw new Error(`${filepath}: No config detected`);\n\n    if (typeof options !== \"object\") {\n      throw new ConfigError(\n        `Config returned typeof ${typeof options}`,\n        filepath,\n      );\n    }\n    if (Array.isArray(options)) {\n      throw new ConfigError(`Expected config object but found array`, filepath);\n    }\n\n    return {\n      filepath,\n      dirname: path.dirname(filepath),\n      options,\n    };\n  },\n);\n"]},"metadata":{},"sourceType":"script"}