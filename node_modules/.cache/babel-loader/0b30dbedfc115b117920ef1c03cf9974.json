{"ast":null,"code":"'use strict';\n\nvar _ExportMap = require('../ExportMap');\n\nvar _ExportMap2 = _interopRequireDefault(_ExportMap);\n\nvar _importDeclaration = require('../importDeclaration');\n\nvar _importDeclaration2 = _interopRequireDefault(_importDeclaration);\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: (0, _docsUrl2['default'])('no-named-as-default-member')\n    },\n    schema: []\n  },\n  create: function () {\n    function create(context) {\n      var fileImports = new Map();\n      var allPropertyLookups = new Map();\n\n      function handleImportDefault(node) {\n        var declaration = (0, _importDeclaration2['default'])(context);\n\n        var exportMap = _ExportMap2['default'].get(declaration.source.value, context);\n\n        if (exportMap == null) return;\n\n        if (exportMap.errors.length) {\n          exportMap.reportErrors(context, declaration);\n          return;\n        }\n\n        fileImports.set(node.local.name, {\n          exportMap: exportMap,\n          sourcePath: declaration.source.value\n        });\n      }\n\n      function storePropertyLookup(objectName, propName, node) {\n        var lookups = allPropertyLookups.get(objectName) || [];\n        lookups.push({\n          node: node,\n          propName: propName\n        });\n        allPropertyLookups.set(objectName, lookups);\n      }\n\n      function handlePropLookup(node) {\n        var objectName = node.object.name;\n        var propName = node.property.name;\n        storePropertyLookup(objectName, propName, node);\n      }\n\n      function handleDestructuringAssignment(node) {\n        var isDestructure = node.id.type === 'ObjectPattern' && node.init != null && node.init.type === 'Identifier';\n        if (!isDestructure) return;\n        var objectName = node.init.name;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = node.id.properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref = _step.value;\n            var key = _ref.key;\n            if (key == null) continue; // true for rest properties\n\n            storePropertyLookup(objectName, key.name, key);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator['return']) {\n              _iterator['return']();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      function handleProgramExit() {\n        allPropertyLookups.forEach(function (lookups, objectName) {\n          var fileImport = fileImports.get(objectName);\n          if (fileImport == null) return;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = lookups[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _ref2 = _step2.value;\n              var propName = _ref2.propName,\n                  node = _ref2.node; // the default import can have a \"default\" property\n\n              if (propName === 'default') continue;\n              if (!fileImport.exportMap.namespace.has(propName)) continue;\n              context.report({\n                node: node,\n                message: 'Caution: `' + String(objectName) + '` also has a named export ' + ('`' + String(propName) + '`. Check if you meant to write ') + ('`import {' + String(propName) + '} from \\'' + String(fileImport.sourcePath) + '\\'` ') + 'instead.'\n              });\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2['return']) {\n                _iterator2['return']();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        });\n      }\n\n      return {\n        'ImportDefaultSpecifier': handleImportDefault,\n        'MemberExpression': handlePropLookup,\n        'VariableDeclarator': handleDestructuringAssignment,\n        'Program:exit': handleProgramExit\n      };\n    }\n\n    return create;\n  }()\n};\n/**\n * @fileoverview Rule to warn about potentially confused use of name exports\n * @author Desmond Brand\n * @copyright 2016 Desmond Brand. All rights reserved.\n * See LICENSE in root directory for full license.\n */","map":{"version":3,"mappings":"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","names":["module","exports","meta","type","docs","url","schema","create","context","fileImports","Map","allPropertyLookups","handleImportDefault","node","declaration","exportMap","Exports","get","source","value","errors","length","reportErrors","set","local","name","sourcePath","storePropertyLookup","objectName","propName","lookups","push","handlePropLookup","object","property","handleDestructuringAssignment","isDestructure","id","init","properties","Symbol","key","_didIteratorError","_iteratorError","_iterator","handleProgramExit","forEach","fileImport","namespace","has","report","message","_didIteratorError2","_iteratorError2","_iterator2"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\no-named-as-default-member.js"],"sourcesContent":["/**\n * @fileoverview Rule to warn about potentially confused use of name exports\n * @author Desmond Brand\n * @copyright 2016 Desmond Brand. All rights reserved.\n * See LICENSE in root directory for full license.\n */\nimport Exports from '../ExportMap';\nimport importDeclaration from '../importDeclaration';\nimport docsUrl from '../docsUrl';\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: docsUrl('no-named-as-default-member'),\n    },\n    schema: [],\n  },\n\n  create(context) {\n\n    const fileImports = new Map();\n    const allPropertyLookups = new Map();\n\n    function handleImportDefault(node) {\n      const declaration = importDeclaration(context);\n      const exportMap = Exports.get(declaration.source.value, context);\n      if (exportMap == null) return;\n\n      if (exportMap.errors.length) {\n        exportMap.reportErrors(context, declaration);\n        return;\n      }\n\n      fileImports.set(node.local.name, {\n        exportMap,\n        sourcePath: declaration.source.value,\n      });\n    }\n\n    function storePropertyLookup(objectName, propName, node) {\n      const lookups = allPropertyLookups.get(objectName) || [];\n      lookups.push({ node, propName });\n      allPropertyLookups.set(objectName, lookups);\n    }\n\n    function handlePropLookup(node) {\n      const objectName = node.object.name;\n      const propName = node.property.name;\n      storePropertyLookup(objectName, propName, node);\n    }\n\n    function handleDestructuringAssignment(node) {\n      const isDestructure = (\n        node.id.type === 'ObjectPattern' &&\n        node.init != null &&\n        node.init.type === 'Identifier'\n      );\n      if (!isDestructure) return;\n\n      const objectName = node.init.name;\n      for (const { key } of node.id.properties) {\n        if (key == null) continue;  // true for rest properties\n        storePropertyLookup(objectName, key.name, key);\n      }\n    }\n\n    function handleProgramExit() {\n      allPropertyLookups.forEach((lookups, objectName) => {\n        const fileImport = fileImports.get(objectName);\n        if (fileImport == null) return;\n\n        for (const { propName, node } of lookups) {\n          // the default import can have a \"default\" property\n          if (propName === 'default') continue;\n          if (!fileImport.exportMap.namespace.has(propName)) continue;\n\n          context.report({\n            node,\n            message: (\n              `Caution: \\`${objectName}\\` also has a named export ` +\n              `\\`${propName}\\`. Check if you meant to write ` +\n              `\\`import {${propName}} from '${fileImport.sourcePath}'\\` ` +\n              'instead.'\n            ),\n          });\n        }\n      });\n    }\n\n    return {\n      'ImportDefaultSpecifier': handleImportDefault,\n      'MemberExpression': handlePropLookup,\n      'VariableDeclarator': handleDestructuringAssignment,\n      'Program:exit': handleProgramExit,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}