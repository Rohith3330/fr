{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Filesystem = require(\"../filesystem\");\n\nvar path = require(\"path\");\n\ndescribe(\"filesystem\", function () {\n  var fileThatExists = path.join(__dirname, \"../../package.json\");\n  var fileThatNotExists = path.join(__dirname, \"../../package2.json\");\n  it(\"should find file that exists, sync\", function () {\n    var result = Filesystem.fileExistsSync(fileThatExists); // assert.equal(result, true);\n\n    expect(result).toBe(true);\n  });\n  it(\"should not find file that not exists, sync\", function () {\n    var result = Filesystem.fileExistsSync(fileThatNotExists); // assert.equal(result, false);\n\n    expect(result).toBe(false);\n  });\n  it(\"should find file that exists, async\", function (done) {\n    Filesystem.fileExistsAsync(fileThatExists, function (_err, result) {\n      try {\n        // assert.equal(result, true);\n        expect(result).toBe(true);\n        done();\n      } catch (error) {\n        done(error);\n      }\n    });\n  });\n  it(\"should not find file that not exists, async\", function (done) {\n    Filesystem.fileExistsAsync(fileThatNotExists, function (_err, result) {\n      try {\n        // assert.equal(result, false);\n        expect(result).toBe(false);\n        done();\n      } catch (error) {\n        done(error);\n      }\n    });\n  });\n  it(\"should load json, sync\", function () {\n    var result = Filesystem.readJsonFromDiskSync(fileThatExists); // assert.isOk(result);\n\n    expect(result); // assert.equal(result.main, \"lib/index.js\");\n\n    expect(result.main).toBe(\"lib/index.js\");\n  });\n  it(\"should load json, async\", function (done) {\n    Filesystem.readJsonFromDiskAsync(fileThatExists, function (_err, result) {\n      try {\n        // assert.isOk(result); // Asserts that object is truthy.\n        expect(result).toBeTruthy(); // assert.equal(result.main, \"lib/index.js\");\n\n        expect(result.main).toBe(\"lib/index.js\");\n        done();\n      } catch (error) {\n        done(error);\n      }\n    });\n  });\n});","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AAEAA,QAAQ,CAAC,YAAD,EAAe;EACrB,IAAMC,cAAc,GAAGC,IAAI,CAACC,IAAL,CAAUC,SAAV,EAAqB,oBAArB,CAAvB;EACA,IAAMC,iBAAiB,GAAGH,IAAI,CAACC,IAAL,CAAUC,SAAV,EAAqB,qBAArB,CAA1B;EAEAE,EAAE,CAAC,oCAAD,EAAuC;IACvC,IAAMC,MAAM,GAAGC,UAAU,CAACC,cAAX,CAA0BR,cAA1B,CAAf,CADuC,CAEvC;;IACAS,MAAM,CAACH,MAAD,CAAN,CAAeI,IAAf,CAAoB,IAApB;EACD,CAJC,CAAF;EAMAL,EAAE,CAAC,4CAAD,EAA+C;IAC/C,IAAMC,MAAM,GAAGC,UAAU,CAACC,cAAX,CAA0BJ,iBAA1B,CAAf,CAD+C,CAE/C;;IACAK,MAAM,CAACH,MAAD,CAAN,CAAeI,IAAf,CAAoB,KAApB;EACD,CAJC,CAAF;EAMAL,EAAE,CAAC,qCAAD,EAAwC,UAACM,IAAD,EAAK;IAC7CJ,UAAU,CAACK,eAAX,CAA2BZ,cAA3B,EAA2C,UAACa,IAAD,EAAOP,MAAP,EAAa;MACtD,IAAI;QACF;QACAG,MAAM,CAACH,MAAD,CAAN,CAAeI,IAAf,CAAoB,IAApB;QACAC,IAAI;MACL,CAJD,CAIE,OAAOG,KAAP,EAAc;QACdH,IAAI,CAACG,KAAD,CAAJ;MACD;IACF,CARD;EASD,CAVC,CAAF;EAYAT,EAAE,CAAC,6CAAD,EAAgD,UAACM,IAAD,EAAK;IACrDJ,UAAU,CAACK,eAAX,CAA2BR,iBAA3B,EAA8C,UAACS,IAAD,EAAOP,MAAP,EAAa;MACzD,IAAI;QACF;QACAG,MAAM,CAACH,MAAD,CAAN,CAAeI,IAAf,CAAoB,KAApB;QACAC,IAAI;MACL,CAJD,CAIE,OAAOG,KAAP,EAAc;QACdH,IAAI,CAACG,KAAD,CAAJ;MACD;IACF,CARD;EASD,CAVC,CAAF;EAYAT,EAAE,CAAC,wBAAD,EAA2B;IAC3B,IAAMC,MAAM,GAAGC,UAAU,CAACQ,oBAAX,CAAgCf,cAAhC,CAAf,CAD2B,CAE3B;;IACAS,MAAM,CAACH,MAAD,CAAN,CAH2B,CAI3B;;IACAG,MAAM,CAACH,MAAM,CAACU,IAAR,CAAN,CAAoBN,IAApB,CAAyB,cAAzB;EACD,CANC,CAAF;EAQAL,EAAE,CAAC,yBAAD,EAA4B,UAACM,IAAD,EAAK;IACjCJ,UAAU,CAACU,qBAAX,CAAiCjB,cAAjC,EAAiD,UAACa,IAAD,EAAOP,MAAP,EAAa;MAC5D,IAAI;QACF;QACAG,MAAM,CAACH,MAAD,CAAN,CAAeY,UAAf,GAFE,CAGF;;QACAT,MAAM,CAACH,MAAM,CAACU,IAAR,CAAN,CAAoBN,IAApB,CAAyB,cAAzB;QACAC,IAAI;MACL,CAND,CAME,OAAOG,KAAP,EAAc;QACdH,IAAI,CAACG,KAAD,CAAJ;MACD;IACF,CAVD;EAWD,CAZC,CAAF;AAaD,CA7DO,CAAR","names":["describe","fileThatExists","path","join","__dirname","fileThatNotExists","it","result","Filesystem","fileExistsSync","expect","toBe","done","fileExistsAsync","_err","error","readJsonFromDiskSync","main","readJsonFromDiskAsync","toBeTruthy"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\tsconfig-paths\\src\\__tests__\\filesystem.test.ts"],"sourcesContent":["import * as Filesystem from \"../filesystem\";\nimport * as path from \"path\";\n\ndescribe(\"filesystem\", () => {\n  const fileThatExists = path.join(__dirname, \"../../package.json\");\n  const fileThatNotExists = path.join(__dirname, \"../../package2.json\");\n\n  it(\"should find file that exists, sync\", () => {\n    const result = Filesystem.fileExistsSync(fileThatExists);\n    // assert.equal(result, true);\n    expect(result).toBe(true);\n  });\n\n  it(\"should not find file that not exists, sync\", () => {\n    const result = Filesystem.fileExistsSync(fileThatNotExists);\n    // assert.equal(result, false);\n    expect(result).toBe(false);\n  });\n\n  it(\"should find file that exists, async\", (done) => {\n    Filesystem.fileExistsAsync(fileThatExists, (_err, result) => {\n      try {\n        // assert.equal(result, true);\n        expect(result).toBe(true);\n        done();\n      } catch (error) {\n        done(error);\n      }\n    });\n  });\n\n  it(\"should not find file that not exists, async\", (done) => {\n    Filesystem.fileExistsAsync(fileThatNotExists, (_err, result) => {\n      try {\n        // assert.equal(result, false);\n        expect(result).toBe(false);\n        done();\n      } catch (error) {\n        done(error);\n      }\n    });\n  });\n\n  it(\"should load json, sync\", () => {\n    const result = Filesystem.readJsonFromDiskSync(fileThatExists);\n    // assert.isOk(result);\n    expect(result);\n    // assert.equal(result.main, \"lib/index.js\");\n    expect(result.main).toBe(\"lib/index.js\");\n  });\n\n  it(\"should load json, async\", (done) => {\n    Filesystem.readJsonFromDiskAsync(fileThatExists, (_err, result) => {\n      try {\n        // assert.isOk(result); // Asserts that object is truthy.\n        expect(result).toBeTruthy();\n        // assert.equal(result.main, \"lib/index.js\");\n        expect(result.main).toBe(\"lib/index.js\");\n        done();\n      } catch (error) {\n        done(error);\n      }\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}