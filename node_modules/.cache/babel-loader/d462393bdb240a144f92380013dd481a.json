{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst uniqueString = require('unique-string');\n\nconst tempDir = require('temp-dir');\n\nconst isStream = require('is-stream');\n\nconst stream = require('stream');\n\nconst {\n  promisify\n} = require('util');\n\nconst pipeline = promisify(stream.pipeline);\nconst {\n  writeFile\n} = fs.promises;\n\nconst getPath = function () {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return path.join(tempDir, prefix + uniqueString());\n};\n\nconst writeStream = async (filePath, data) => pipeline(data, fs.createWriteStream(filePath));\n\nmodule.exports.file = options => {\n  options = { ...options\n  };\n\n  if (options.name) {\n    if (options.extension !== undefined && options.extension !== null) {\n      throw new Error('The `name` and `extension` options are mutually exclusive');\n    }\n\n    return path.join(module.exports.directory(), options.name);\n  }\n\n  return getPath() + (options.extension === undefined || options.extension === null ? '' : '.' + options.extension.replace(/^\\./, ''));\n};\n\nmodule.exports.directory = function () {\n  let {\n    prefix = ''\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const directory = getPath(prefix);\n  fs.mkdirSync(directory);\n  return directory;\n};\n\nmodule.exports.write = async (data, options) => {\n  const filename = module.exports.file(options);\n  const write = isStream(data) ? writeStream : writeFile;\n  await write(filename, data);\n  return filename;\n};\n\nmodule.exports.writeSync = (data, options) => {\n  const filename = module.exports.file(options);\n  fs.writeFileSync(filename, data);\n  return filename;\n};\n\nObject.defineProperty(module.exports, 'root', {\n  get() {\n    return tempDir;\n  }\n\n});","map":{"version":3,"names":["fs","require","path","uniqueString","tempDir","isStream","stream","promisify","pipeline","writeFile","promises","getPath","prefix","join","writeStream","filePath","data","createWriteStream","module","exports","file","options","name","extension","undefined","Error","directory","replace","mkdirSync","write","filename","writeSync","writeFileSync","Object","defineProperty","get"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tempy/index.js"],"sourcesContent":["'use strict';\nconst fs = require('fs');\nconst path = require('path');\nconst uniqueString = require('unique-string');\nconst tempDir = require('temp-dir');\nconst isStream = require('is-stream');\nconst stream = require('stream');\nconst {promisify} = require('util');\n\nconst pipeline = promisify(stream.pipeline);\nconst {writeFile} = fs.promises;\n\nconst getPath = (prefix = '') => path.join(tempDir, prefix + uniqueString());\n\nconst writeStream = async (filePath, data) => pipeline(data, fs.createWriteStream(filePath));\n\nmodule.exports.file = options => {\n\toptions = {\n\t\t...options\n\t};\n\n\tif (options.name) {\n\t\tif (options.extension !== undefined && options.extension !== null) {\n\t\t\tthrow new Error('The `name` and `extension` options are mutually exclusive');\n\t\t}\n\n\t\treturn path.join(module.exports.directory(), options.name);\n\t}\n\n\treturn getPath() + (options.extension === undefined || options.extension === null ? '' : '.' + options.extension.replace(/^\\./, ''));\n};\n\nmodule.exports.directory = ({prefix = ''} = {}) => {\n\tconst directory = getPath(prefix);\n\tfs.mkdirSync(directory);\n\treturn directory;\n};\n\nmodule.exports.write = async (data, options) => {\n\tconst filename = module.exports.file(options);\n\tconst write = isStream(data) ? writeStream : writeFile;\n\tawait write(filename, data);\n\treturn filename;\n};\n\nmodule.exports.writeSync = (data, options) => {\n\tconst filename = module.exports.file(options);\n\tfs.writeFileSync(filename, data);\n\treturn filename;\n};\n\nObject.defineProperty(module.exports, 'root', {\n\tget() {\n\t\treturn tempDir;\n\t}\n});\n"],"mappings":"AAAA;;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;EAACM;AAAD,IAAcN,OAAO,CAAC,MAAD,CAA3B;;AAEA,MAAMO,QAAQ,GAAGD,SAAS,CAACD,MAAM,CAACE,QAAR,CAA1B;AACA,MAAM;EAACC;AAAD,IAAcT,EAAE,CAACU,QAAvB;;AAEA,MAAMC,OAAO,GAAG;EAAA,IAACC,MAAD,uEAAU,EAAV;EAAA,OAAiBV,IAAI,CAACW,IAAL,CAAUT,OAAV,EAAmBQ,MAAM,GAAGT,YAAY,EAAxC,CAAjB;AAAA,CAAhB;;AAEA,MAAMW,WAAW,GAAG,OAAOC,QAAP,EAAiBC,IAAjB,KAA0BR,QAAQ,CAACQ,IAAD,EAAOhB,EAAE,CAACiB,iBAAH,CAAqBF,QAArB,CAAP,CAAtD;;AAEAG,MAAM,CAACC,OAAP,CAAeC,IAAf,GAAsBC,OAAO,IAAI;EAChCA,OAAO,GAAG,EACT,GAAGA;EADM,CAAV;;EAIA,IAAIA,OAAO,CAACC,IAAZ,EAAkB;IACjB,IAAID,OAAO,CAACE,SAAR,KAAsBC,SAAtB,IAAmCH,OAAO,CAACE,SAAR,KAAsB,IAA7D,EAAmE;MAClE,MAAM,IAAIE,KAAJ,CAAU,2DAAV,CAAN;IACA;;IAED,OAAOvB,IAAI,CAACW,IAAL,CAAUK,MAAM,CAACC,OAAP,CAAeO,SAAf,EAAV,EAAsCL,OAAO,CAACC,IAA9C,CAAP;EACA;;EAED,OAAOX,OAAO,MAAMU,OAAO,CAACE,SAAR,KAAsBC,SAAtB,IAAmCH,OAAO,CAACE,SAAR,KAAsB,IAAzD,GAAgE,EAAhE,GAAqE,MAAMF,OAAO,CAACE,SAAR,CAAkBI,OAAlB,CAA0B,KAA1B,EAAiC,EAAjC,CAAjF,CAAd;AACA,CAdD;;AAgBAT,MAAM,CAACC,OAAP,CAAeO,SAAf,GAA2B,YAAwB;EAAA,IAAvB;IAACd,MAAM,GAAG;EAAV,CAAuB,uEAAP,EAAO;EAClD,MAAMc,SAAS,GAAGf,OAAO,CAACC,MAAD,CAAzB;EACAZ,EAAE,CAAC4B,SAAH,CAAaF,SAAb;EACA,OAAOA,SAAP;AACA,CAJD;;AAMAR,MAAM,CAACC,OAAP,CAAeU,KAAf,GAAuB,OAAOb,IAAP,EAAaK,OAAb,KAAyB;EAC/C,MAAMS,QAAQ,GAAGZ,MAAM,CAACC,OAAP,CAAeC,IAAf,CAAoBC,OAApB,CAAjB;EACA,MAAMQ,KAAK,GAAGxB,QAAQ,CAACW,IAAD,CAAR,GAAiBF,WAAjB,GAA+BL,SAA7C;EACA,MAAMoB,KAAK,CAACC,QAAD,EAAWd,IAAX,CAAX;EACA,OAAOc,QAAP;AACA,CALD;;AAOAZ,MAAM,CAACC,OAAP,CAAeY,SAAf,GAA2B,CAACf,IAAD,EAAOK,OAAP,KAAmB;EAC7C,MAAMS,QAAQ,GAAGZ,MAAM,CAACC,OAAP,CAAeC,IAAf,CAAoBC,OAApB,CAAjB;EACArB,EAAE,CAACgC,aAAH,CAAiBF,QAAjB,EAA2Bd,IAA3B;EACA,OAAOc,QAAP;AACA,CAJD;;AAMAG,MAAM,CAACC,cAAP,CAAsBhB,MAAM,CAACC,OAA7B,EAAsC,MAAtC,EAA8C;EAC7CgB,GAAG,GAAG;IACL,OAAO/B,OAAP;EACA;;AAH4C,CAA9C"},"metadata":{},"sourceType":"script"}