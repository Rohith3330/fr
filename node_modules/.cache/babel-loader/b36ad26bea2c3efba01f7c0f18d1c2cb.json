{"ast":null,"code":"/**\n * @fileoverview Enforce shorthand or standard form for React fragments.\n * @author Alex Zherdev\n */\n'use strict';\n\nconst elementType = require('jsx-ast-utils/elementType');\n\nconst pragmaUtil = require('../util/pragma');\n\nconst variableUtil = require('../util/variable');\n\nconst testReactVersion = require('../util/version').testReactVersion;\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nfunction replaceNode(source, node, text) {\n  return `${source.slice(0, node.range[0])}${text}${source.slice(node.range[1])}`;\n}\n\nconst messages = {\n  fragmentsNotSupported: 'Fragments are only supported starting from React v16.2. ' + 'Please disable the `react/jsx-fragments` rule in `eslint` settings or upgrade your version of React.',\n  preferPragma: 'Prefer {{react}}.{{fragment}} over fragment shorthand',\n  preferFragment: 'Prefer fragment shorthand over {{react}}.{{fragment}}'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce shorthand or standard form for React fragments',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-fragments')\n    },\n    fixable: 'code',\n    messages,\n    schema: [{\n      enum: ['syntax', 'element']\n    }]\n  },\n\n  create(context) {\n    const configuration = context.options[0] || 'syntax';\n    const reactPragma = pragmaUtil.getFromContext(context);\n    const fragmentPragma = pragmaUtil.getFragmentFromContext(context);\n    const openFragShort = '<>';\n    const closeFragShort = '</>';\n    const openFragLong = `<${reactPragma}.${fragmentPragma}>`;\n    const closeFragLong = `</${reactPragma}.${fragmentPragma}>`;\n\n    function reportOnReactVersion(node) {\n      if (!testReactVersion(context, '>= 16.2.0')) {\n        report(context, messages.fragmentsNotSupported, 'fragmentsNotSupported', {\n          node\n        });\n        return true;\n      }\n\n      return false;\n    }\n\n    function getFixerToLong(jsxFragment) {\n      const sourceCode = context.getSourceCode();\n\n      if (!jsxFragment.closingFragment || !jsxFragment.openingFragment) {\n        // the old TS parser crashes here\n        // TODO: FIXME: can we fake these two descriptors?\n        return null;\n      }\n\n      return function fix(fixer) {\n        let source = sourceCode.getText();\n        source = replaceNode(source, jsxFragment.closingFragment, closeFragLong);\n        source = replaceNode(source, jsxFragment.openingFragment, openFragLong);\n        const lengthDiff = openFragLong.length - sourceCode.getText(jsxFragment.openingFragment).length + closeFragLong.length - sourceCode.getText(jsxFragment.closingFragment).length;\n        const range = jsxFragment.range;\n        return fixer.replaceTextRange(range, source.slice(range[0], range[1] + lengthDiff));\n      };\n    }\n\n    function getFixerToShort(jsxElement) {\n      const sourceCode = context.getSourceCode();\n      return function fix(fixer) {\n        let source = sourceCode.getText();\n        let lengthDiff;\n\n        if (jsxElement.closingElement) {\n          source = replaceNode(source, jsxElement.closingElement, closeFragShort);\n          source = replaceNode(source, jsxElement.openingElement, openFragShort);\n          lengthDiff = sourceCode.getText(jsxElement.openingElement).length - openFragShort.length + sourceCode.getText(jsxElement.closingElement).length - closeFragShort.length;\n        } else {\n          source = replaceNode(source, jsxElement.openingElement, `${openFragShort}${closeFragShort}`);\n          lengthDiff = sourceCode.getText(jsxElement.openingElement).length - openFragShort.length - closeFragShort.length;\n        }\n\n        const range = jsxElement.range;\n        return fixer.replaceTextRange(range, source.slice(range[0], range[1] - lengthDiff));\n      };\n    }\n\n    function refersToReactFragment(name) {\n      const variableInit = variableUtil.findVariableByName(context, name);\n\n      if (!variableInit) {\n        return false;\n      } // const { Fragment } = React;\n\n\n      if (variableInit.type === 'Identifier' && variableInit.name === reactPragma) {\n        return true;\n      } // const Fragment = React.Fragment;\n\n\n      if (variableInit.type === 'MemberExpression' && variableInit.object.type === 'Identifier' && variableInit.object.name === reactPragma && variableInit.property.type === 'Identifier' && variableInit.property.name === fragmentPragma) {\n        return true;\n      } // const { Fragment } = require('react');\n\n\n      if (variableInit.callee && variableInit.callee.name === 'require' && variableInit.arguments && variableInit.arguments[0] && variableInit.arguments[0].value === 'react') {\n        return true;\n      }\n\n      return false;\n    }\n\n    const jsxElements = [];\n    const fragmentNames = new Set([`${reactPragma}.${fragmentPragma}`]); // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      JSXElement(node) {\n        jsxElements.push(node);\n      },\n\n      JSXFragment(node) {\n        if (reportOnReactVersion(node)) {\n          return;\n        }\n\n        if (configuration === 'element') {\n          report(context, messages.preferPragma, 'preferPragma', {\n            node,\n            data: {\n              react: reactPragma,\n              fragment: fragmentPragma\n            },\n            fix: getFixerToLong(node)\n          });\n        }\n      },\n\n      ImportDeclaration(node) {\n        if (node.source && node.source.value === 'react') {\n          node.specifiers.forEach(spec => {\n            if (spec.imported && spec.imported.name === fragmentPragma) {\n              if (spec.local) {\n                fragmentNames.add(spec.local.name);\n              }\n            }\n          });\n        }\n      },\n\n      'Program:exit'() {\n        jsxElements.forEach(node => {\n          const openingEl = node.openingElement;\n          const elName = elementType(openingEl);\n\n          if (fragmentNames.has(elName) || refersToReactFragment(elName)) {\n            if (reportOnReactVersion(node)) {\n              return;\n            }\n\n            const attrs = openingEl.attributes;\n\n            if (configuration === 'syntax' && !(attrs && attrs.length > 0)) {\n              report(context, messages.preferFragment, 'preferFragment', {\n                node,\n                data: {\n                  react: reactPragma,\n                  fragment: fragmentPragma\n                },\n                fix: getFixerToShort(node)\n              });\n            }\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["elementType","require","pragmaUtil","variableUtil","testReactVersion","docsUrl","report","replaceNode","source","node","text","slice","range","messages","fragmentsNotSupported","preferPragma","preferFragment","module","exports","meta","docs","description","category","recommended","url","fixable","schema","enum","create","context","configuration","options","reactPragma","getFromContext","fragmentPragma","getFragmentFromContext","openFragShort","closeFragShort","openFragLong","closeFragLong","reportOnReactVersion","getFixerToLong","jsxFragment","sourceCode","getSourceCode","closingFragment","openingFragment","fix","fixer","getText","lengthDiff","length","replaceTextRange","getFixerToShort","jsxElement","closingElement","openingElement","refersToReactFragment","name","variableInit","findVariableByName","type","object","property","callee","arguments","value","jsxElements","fragmentNames","Set","JSXElement","push","JSXFragment","data","react","fragment","ImportDeclaration","specifiers","forEach","spec","imported","local","add","openingEl","elName","has","attrs","attributes"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-fragments.js"],"sourcesContent":["/**\n * @fileoverview Enforce shorthand or standard form for React fragments.\n * @author Alex Zherdev\n */\n\n'use strict';\n\nconst elementType = require('jsx-ast-utils/elementType');\nconst pragmaUtil = require('../util/pragma');\nconst variableUtil = require('../util/variable');\nconst testReactVersion = require('../util/version').testReactVersion;\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nfunction replaceNode(source, node, text) {\n  return `${source.slice(0, node.range[0])}${text}${source.slice(node.range[1])}`;\n}\n\nconst messages = {\n  fragmentsNotSupported: 'Fragments are only supported starting from React v16.2. '\n    + 'Please disable the `react/jsx-fragments` rule in `eslint` settings or upgrade your version of React.',\n  preferPragma: 'Prefer {{react}}.{{fragment}} over fragment shorthand',\n  preferFragment: 'Prefer fragment shorthand over {{react}}.{{fragment}}',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce shorthand or standard form for React fragments',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-fragments'),\n    },\n    fixable: 'code',\n\n    messages,\n\n    schema: [{\n      enum: ['syntax', 'element'],\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || 'syntax';\n    const reactPragma = pragmaUtil.getFromContext(context);\n    const fragmentPragma = pragmaUtil.getFragmentFromContext(context);\n    const openFragShort = '<>';\n    const closeFragShort = '</>';\n    const openFragLong = `<${reactPragma}.${fragmentPragma}>`;\n    const closeFragLong = `</${reactPragma}.${fragmentPragma}>`;\n\n    function reportOnReactVersion(node) {\n      if (!testReactVersion(context, '>= 16.2.0')) {\n        report(context, messages.fragmentsNotSupported, 'fragmentsNotSupported', {\n          node,\n        });\n        return true;\n      }\n\n      return false;\n    }\n\n    function getFixerToLong(jsxFragment) {\n      const sourceCode = context.getSourceCode();\n      if (!jsxFragment.closingFragment || !jsxFragment.openingFragment) {\n        // the old TS parser crashes here\n        // TODO: FIXME: can we fake these two descriptors?\n        return null;\n      }\n      return function fix(fixer) {\n        let source = sourceCode.getText();\n        source = replaceNode(source, jsxFragment.closingFragment, closeFragLong);\n        source = replaceNode(source, jsxFragment.openingFragment, openFragLong);\n        const lengthDiff = openFragLong.length - sourceCode.getText(jsxFragment.openingFragment).length\n          + closeFragLong.length - sourceCode.getText(jsxFragment.closingFragment).length;\n        const range = jsxFragment.range;\n        return fixer.replaceTextRange(range, source.slice(range[0], range[1] + lengthDiff));\n      };\n    }\n\n    function getFixerToShort(jsxElement) {\n      const sourceCode = context.getSourceCode();\n      return function fix(fixer) {\n        let source = sourceCode.getText();\n        let lengthDiff;\n        if (jsxElement.closingElement) {\n          source = replaceNode(source, jsxElement.closingElement, closeFragShort);\n          source = replaceNode(source, jsxElement.openingElement, openFragShort);\n          lengthDiff = sourceCode.getText(jsxElement.openingElement).length - openFragShort.length\n            + sourceCode.getText(jsxElement.closingElement).length - closeFragShort.length;\n        } else {\n          source = replaceNode(source, jsxElement.openingElement, `${openFragShort}${closeFragShort}`);\n          lengthDiff = sourceCode.getText(jsxElement.openingElement).length - openFragShort.length\n            - closeFragShort.length;\n        }\n\n        const range = jsxElement.range;\n        return fixer.replaceTextRange(range, source.slice(range[0], range[1] - lengthDiff));\n      };\n    }\n\n    function refersToReactFragment(name) {\n      const variableInit = variableUtil.findVariableByName(context, name);\n      if (!variableInit) {\n        return false;\n      }\n\n      // const { Fragment } = React;\n      if (variableInit.type === 'Identifier' && variableInit.name === reactPragma) {\n        return true;\n      }\n\n      // const Fragment = React.Fragment;\n      if (\n        variableInit.type === 'MemberExpression'\n        && variableInit.object.type === 'Identifier'\n        && variableInit.object.name === reactPragma\n        && variableInit.property.type === 'Identifier'\n        && variableInit.property.name === fragmentPragma\n      ) {\n        return true;\n      }\n\n      // const { Fragment } = require('react');\n      if (\n        variableInit.callee\n        && variableInit.callee.name === 'require'\n        && variableInit.arguments\n        && variableInit.arguments[0]\n        && variableInit.arguments[0].value === 'react'\n      ) {\n        return true;\n      }\n\n      return false;\n    }\n\n    const jsxElements = [];\n    const fragmentNames = new Set([`${reactPragma}.${fragmentPragma}`]);\n\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      JSXElement(node) {\n        jsxElements.push(node);\n      },\n\n      JSXFragment(node) {\n        if (reportOnReactVersion(node)) {\n          return;\n        }\n\n        if (configuration === 'element') {\n          report(context, messages.preferPragma, 'preferPragma', {\n            node,\n            data: {\n              react: reactPragma,\n              fragment: fragmentPragma,\n            },\n            fix: getFixerToLong(node),\n          });\n        }\n      },\n\n      ImportDeclaration(node) {\n        if (node.source && node.source.value === 'react') {\n          node.specifiers.forEach((spec) => {\n            if (spec.imported && spec.imported.name === fragmentPragma) {\n              if (spec.local) {\n                fragmentNames.add(spec.local.name);\n              }\n            }\n          });\n        }\n      },\n\n      'Program:exit'() {\n        jsxElements.forEach((node) => {\n          const openingEl = node.openingElement;\n          const elName = elementType(openingEl);\n\n          if (fragmentNames.has(elName) || refersToReactFragment(elName)) {\n            if (reportOnReactVersion(node)) {\n              return;\n            }\n\n            const attrs = openingEl.attributes;\n            if (configuration === 'syntax' && !(attrs && attrs.length > 0)) {\n              report(context, messages.preferFragment, 'preferFragment', {\n                node,\n                data: {\n                  react: reactPragma,\n                  fragment: fragmentPragma,\n                },\n                fix: getFixerToShort(node),\n              });\n            }\n          }\n        });\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}