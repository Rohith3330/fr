{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._assertUnremoved = _assertUnremoved;\nexports._callRemovalHooks = _callRemovalHooks;\nexports._markRemoved = _markRemoved;\nexports._remove = _remove;\nexports._removeFromScope = _removeFromScope;\nexports.remove = remove;\n\nvar _removalHooks = require(\"./lib/removal-hooks\");\n\nvar _cache = require(\"../cache\");\n\nvar _index = require(\"./index\");\n\nfunction remove() {\n  var _this$opts;\n\n  this._assertUnremoved();\n\n  this.resync();\n\n  if (!((_this$opts = this.opts) != null && _this$opts.noScope)) {\n    this._removeFromScope();\n  }\n\n  if (this._callRemovalHooks()) {\n    this._markRemoved();\n\n    return;\n  }\n\n  this.shareCommentsWithSiblings();\n\n  this._remove();\n\n  this._markRemoved();\n}\n\nfunction _removeFromScope() {\n  const bindings = this.getBindingIdentifiers();\n  Object.keys(bindings).forEach(name => this.scope.removeBinding(name));\n}\n\nfunction _callRemovalHooks() {\n  for (const fn of _removalHooks.hooks) {\n    if (fn(this, this.parentPath)) return true;\n  }\n}\n\nfunction _remove() {\n  if (Array.isArray(this.container)) {\n    this.container.splice(this.key, 1);\n    this.updateSiblingKeys(this.key, -1);\n  } else {\n    this._replaceWith(null);\n  }\n}\n\nfunction _markRemoved() {\n  this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED;\n  if (this.parent) _cache.path.get(this.parent).delete(this.node);\n  this.node = null;\n}\n\nfunction _assertUnremoved() {\n  if (this.removed) {\n    throw this.buildCodeFrameError(\"NodePath has been removed so is read-only.\");\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;;AAEA;;AACA;;AAEA;;AAEO,SAASA,MAAT,GAAgC;EAAA;;EACrC,KAAKC,gBAAL;;EAEA,KAAKC,MAAL;;EACA,IAAI,gBAAC,KAAKC,IAAN,aAACC,WAAWC,OAAZ,CAAJ,EAAyB;IACvB,KAAKC,gBAAL;EACD;;EAED,IAAI,KAAKC,iBAAL,EAAJ,EAA8B;IAC5B,KAAKC,YAAL;;IACA;EACD;;EAED,KAAKC,yBAAL;;EACA,KAAKC,OAAL;;EACA,KAAKF,YAAL;AACD;;AAEM,SAASF,gBAAT,GAA0C;EAC/C,MAAMK,QAAQ,GAAG,KAAKC,qBAAL,EAAjB;EACAC,MAAM,CAACC,IAAPD,CAAYF,QAAZE,EAAsBE,OAAtBF,CAA8BG,IAAI,IAAI,KAAKC,KAAL,CAAWC,aAAX,CAAyBF,IAAzB,CAAtCH;AACD;;AAEM,SAASN,iBAAT,GAA2C;EAChD,KAAK,MAAMY,EAAX,IAAiBC,mBAAjB,EAAwB;IACtB,IAAID,EAAE,CAAC,IAAD,EAAO,KAAKE,UAAZ,CAAN,EAA+B,OAAO,IAAP;EAChC;AACF;;AAEM,SAASX,OAAT,GAAiC;EACtC,IAAIY,KAAK,CAACC,OAAND,CAAc,KAAKE,SAAnBF,CAAJ,EAAmC;IACjC,KAAKE,SAAL,CAAeC,MAAf,CAAsB,KAAKC,GAA3B,EAA0C,CAA1C;IACA,KAAKC,iBAAL,CAAuB,KAAKD,GAA5B,EAA2C,CAAC,CAA5C;EAFF,OAGO;IACL,KAAKE,YAAL,CAAkB,IAAlB;EACD;AACF;;AAEM,SAASpB,YAAT,GAAsC;EAE3C,KAAKqB,cAAL,IAAuBC,qBAAcC,cAArC;EACA,IAAI,KAAKC,MAAT,EAAiBC,YAAUC,GAAVD,CAAc,KAAKD,MAAnBC,EAA2BE,MAA3BF,CAAkC,KAAKG,IAAvCH;EACjB,KAAKG,IAAL,GAAY,IAAZ;AACD;;AAEM,SAASnC,gBAAT,GAA0C;EAC/C,IAAI,KAAKoC,OAAT,EAAkB;IAChB,MAAM,KAAKC,mBAAL,CACJ,4CADI,CAAN;EAGD;AACF","names":["remove","_assertUnremoved","resync","opts","_this$opts","noScope","_removeFromScope","_callRemovalHooks","_markRemoved","shareCommentsWithSiblings","_remove","bindings","getBindingIdentifiers","Object","keys","forEach","name","scope","removeBinding","fn","hooks","parentPath","Array","isArray","container","splice","key","updateSiblingKeys","_replaceWith","_traverseFlags","SHOULD_SKIP","REMOVED","parent","pathCache","get","delete","node","removed","buildCodeFrameError"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\traverse\\src\\path\\removal.ts"],"sourcesContent":["// This file contains methods responsible for removing a node.\n\nimport { hooks } from \"./lib/removal-hooks\";\nimport { path as pathCache } from \"../cache\";\nimport type NodePath from \"./index\";\nimport { REMOVED, SHOULD_SKIP } from \"./index\";\n\nexport function remove(this: NodePath) {\n  this._assertUnremoved();\n\n  this.resync();\n  if (!this.opts?.noScope) {\n    this._removeFromScope();\n  }\n\n  if (this._callRemovalHooks()) {\n    this._markRemoved();\n    return;\n  }\n\n  this.shareCommentsWithSiblings();\n  this._remove();\n  this._markRemoved();\n}\n\nexport function _removeFromScope(this: NodePath) {\n  const bindings = this.getBindingIdentifiers();\n  Object.keys(bindings).forEach(name => this.scope.removeBinding(name));\n}\n\nexport function _callRemovalHooks(this: NodePath) {\n  for (const fn of hooks) {\n    if (fn(this, this.parentPath)) return true;\n  }\n}\n\nexport function _remove(this: NodePath) {\n  if (Array.isArray(this.container)) {\n    this.container.splice(this.key as number, 1);\n    this.updateSiblingKeys(this.key as number, -1);\n  } else {\n    this._replaceWith(null);\n  }\n}\n\nexport function _markRemoved(this: NodePath) {\n  // this.shouldSkip = true; this.removed = true;\n  this._traverseFlags |= SHOULD_SKIP | REMOVED;\n  if (this.parent) pathCache.get(this.parent).delete(this.node);\n  this.node = null;\n}\n\nexport function _assertUnremoved(this: NodePath) {\n  if (this.removed) {\n    throw this.buildCodeFrameError(\n      \"NodePath has been removed so is read-only.\",\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}