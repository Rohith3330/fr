{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"./codegen\");\n\nconst names = {\n  // validation function arguments\n  data: new codegen_1.Name(\"data\"),\n  // args passed from referencing schema\n  valCxt: new codegen_1.Name(\"valCxt\"),\n  instancePath: new codegen_1.Name(\"instancePath\"),\n  parentData: new codegen_1.Name(\"parentData\"),\n  parentDataProperty: new codegen_1.Name(\"parentDataProperty\"),\n  rootData: new codegen_1.Name(\"rootData\"),\n  dynamicAnchors: new codegen_1.Name(\"dynamicAnchors\"),\n  // function scoped variables\n  vErrors: new codegen_1.Name(\"vErrors\"),\n  errors: new codegen_1.Name(\"errors\"),\n  this: new codegen_1.Name(\"this\"),\n  // \"globals\"\n  self: new codegen_1.Name(\"self\"),\n  scope: new codegen_1.Name(\"scope\"),\n  // JTD serialize/parse name for JSON string and position\n  json: new codegen_1.Name(\"json\"),\n  jsonPos: new codegen_1.Name(\"jsonPos\"),\n  jsonLen: new codegen_1.Name(\"jsonLen\"),\n  jsonPart: new codegen_1.Name(\"jsonPart\")\n};\nexports.default = names;","map":{"version":3,"mappings":";;;;;;AAAA;;AAEA,MAAMA,KAAK,GAAG;EACZ;EACAC,IAAI,EAAE,IAAIC,cAAJ,CAAS,MAAT,CAFM;EAGZ;EACAC,MAAM,EAAE,IAAID,cAAJ,CAAS,QAAT,CAJI;EAKZE,YAAY,EAAE,IAAIF,cAAJ,CAAS,cAAT,CALF;EAMZG,UAAU,EAAE,IAAIH,cAAJ,CAAS,YAAT,CANA;EAOZI,kBAAkB,EAAE,IAAIJ,cAAJ,CAAS,oBAAT,CAPR;EAQZK,QAAQ,EAAE,IAAIL,cAAJ,CAAS,UAAT,CARE;EASZM,cAAc,EAAE,IAAIN,cAAJ,CAAS,gBAAT,CATJ;EAUZ;EACAO,OAAO,EAAE,IAAIP,cAAJ,CAAS,SAAT,CAXG;EAYZQ,MAAM,EAAE,IAAIR,cAAJ,CAAS,QAAT,CAZI;EAaZS,IAAI,EAAE,IAAIT,cAAJ,CAAS,MAAT,CAbM;EAcZ;EACAU,IAAI,EAAE,IAAIV,cAAJ,CAAS,MAAT,CAfM;EAgBZW,KAAK,EAAE,IAAIX,cAAJ,CAAS,OAAT,CAhBK;EAiBZ;EACAY,IAAI,EAAE,IAAIZ,cAAJ,CAAS,MAAT,CAlBM;EAmBZa,OAAO,EAAE,IAAIb,cAAJ,CAAS,SAAT,CAnBG;EAoBZc,OAAO,EAAE,IAAId,cAAJ,CAAS,SAAT,CApBG;EAqBZe,QAAQ,EAAE,IAAIf,cAAJ,CAAS,UAAT;AArBE,CAAd;AAwBAgB,kBAAelB,KAAf","names":["names","data","codegen_1","valCxt","instancePath","parentData","parentDataProperty","rootData","dynamicAnchors","vErrors","errors","this","self","scope","json","jsonPos","jsonLen","jsonPart","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\mini-css-extract-plugin\\node_modules\\ajv\\lib\\compile\\names.ts"],"sourcesContent":["import {Name} from \"./codegen\"\n\nconst names = {\n  // validation function arguments\n  data: new Name(\"data\"), // data passed to validation function\n  // args passed from referencing schema\n  valCxt: new Name(\"valCxt\"), // validation/data context - should not be used directly, it is destructured to the names below\n  instancePath: new Name(\"instancePath\"),\n  parentData: new Name(\"parentData\"),\n  parentDataProperty: new Name(\"parentDataProperty\"),\n  rootData: new Name(\"rootData\"), // root data - same as the data passed to the first/top validation function\n  dynamicAnchors: new Name(\"dynamicAnchors\"), // used to support recursiveRef and dynamicRef\n  // function scoped variables\n  vErrors: new Name(\"vErrors\"), // null or array of validation errors\n  errors: new Name(\"errors\"), // counter of validation errors\n  this: new Name(\"this\"),\n  // \"globals\"\n  self: new Name(\"self\"),\n  scope: new Name(\"scope\"),\n  // JTD serialize/parse name for JSON string and position\n  json: new Name(\"json\"),\n  jsonPos: new Name(\"jsonPos\"),\n  jsonLen: new Name(\"jsonLen\"),\n  jsonPart: new Name(\"jsonPart\"),\n}\n\nexport default names\n"]},"metadata":{},"sourceType":"script"}