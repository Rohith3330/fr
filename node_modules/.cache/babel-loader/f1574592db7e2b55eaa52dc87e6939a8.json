{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypeName = void 0;\n\nconst ts = __importStar(require(\"typescript\"));\n/**\n * Get the type name of a given type.\n * @param typeChecker The context sensitive TypeScript TypeChecker.\n * @param type The type to get the name of.\n */\n\n\nfunction getTypeName(typeChecker, type) {\n  // It handles `string` and string literal types as string.\n  if ((type.flags & ts.TypeFlags.StringLike) !== 0) {\n    return 'string';\n  } // If the type is a type parameter which extends primitive string types,\n  // but it was not recognized as a string like. So check the constraint\n  // type of the type parameter.\n\n\n  if ((type.flags & ts.TypeFlags.TypeParameter) !== 0) {\n    // `type.getConstraint()` method doesn't return the constraint type of\n    // the type parameter for some reason. So this gets the constraint type\n    // via AST.\n    const symbol = type.getSymbol();\n    const decls = symbol === null || symbol === void 0 ? void 0 : symbol.getDeclarations();\n    const typeParamDecl = decls === null || decls === void 0 ? void 0 : decls[0];\n\n    if (ts.isTypeParameterDeclaration(typeParamDecl) && typeParamDecl.constraint != null) {\n      return getTypeName(typeChecker, typeChecker.getTypeFromTypeNode(typeParamDecl.constraint));\n    }\n  } // If the type is a union and all types in the union are string like,\n  // return `string`. For example:\n  // - `\"a\" | \"b\"` is string.\n  // - `string | string[]` is not string.\n\n\n  if (type.isUnion() && type.types.map(value => getTypeName(typeChecker, value)).every(t => t === 'string')) {\n    return 'string';\n  } // If the type is an intersection and a type in the intersection is string\n  // like, return `string`. For example: `string & {__htmlEscaped: void}`\n\n\n  if (type.isIntersection() && type.types.map(value => getTypeName(typeChecker, value)).some(t => t === 'string')) {\n    return 'string';\n  }\n\n  return typeChecker.typeToString(type);\n}\n\nexports.getTypeName = getTypeName;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;;;;AAKA,SAAgBA,WAAhB,CACEC,WADF,EAEEC,IAFF,EAEe;EAEb;EACA,IAAI,CAACA,IAAI,CAACC,KAAL,GAAaC,EAAE,CAACC,SAAH,CAAaC,UAA3B,MAA2C,CAA/C,EAAkD;IAChD,OAAO,QAAP;EACD,CALY,CAOb;EACA;EACA;;;EACA,IAAI,CAACJ,IAAI,CAACC,KAAL,GAAaC,EAAE,CAACC,SAAH,CAAaE,aAA3B,MAA8C,CAAlD,EAAqD;IACnD;IACA;IACA;IACA,MAAMC,MAAM,GAAGN,IAAI,CAACO,SAAL,EAAf;IACA,MAAMC,KAAK,GAAGF,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEG,eAAR,EAAd;IACA,MAAMC,aAAa,GAAGF,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAG,CAAH,CAA3B;;IACA,IACEN,EAAE,CAACS,0BAAH,CAA8BD,aAA9B,KACAA,aAAa,CAACE,UAAd,IAA4B,IAF9B,EAGE;MACA,OAAOd,WAAW,CAChBC,WADgB,EAEhBA,WAAW,CAACc,mBAAZ,CAAgCH,aAAa,CAACE,UAA9C,CAFgB,CAAlB;IAID;EACF,CA1BY,CA4Bb;EACA;EACA;EACA;;;EACA,IACEZ,IAAI,CAACc,OAAL,MACAd,IAAI,CAACe,KAAL,CACGC,GADH,CACOC,KAAK,IAAInB,WAAW,CAACC,WAAD,EAAckB,KAAd,CAD3B,EAEGC,KAFH,CAESC,CAAC,IAAIA,CAAC,KAAK,QAFpB,CAFF,EAKE;IACA,OAAO,QAAP;EACD,CAvCY,CAyCb;EACA;;;EACA,IACEnB,IAAI,CAACoB,cAAL,MACApB,IAAI,CAACe,KAAL,CACGC,GADH,CACOC,KAAK,IAAInB,WAAW,CAACC,WAAD,EAAckB,KAAd,CAD3B,EAEGI,IAFH,CAEQF,CAAC,IAAIA,CAAC,KAAK,QAFnB,CAFF,EAKE;IACA,OAAO,QAAP;EACD;;EAED,OAAOpB,WAAW,CAACuB,YAAZ,CAAyBtB,IAAzB,CAAP;AACD;;AAvDDuB","names":["getTypeName","typeChecker","type","flags","ts","TypeFlags","StringLike","TypeParameter","symbol","getSymbol","decls","getDeclarations","typeParamDecl","isTypeParameterDeclaration","constraint","getTypeFromTypeNode","isUnion","types","map","value","every","t","isIntersection","some","typeToString","exports"],"sources":["../src/getTypeName.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}