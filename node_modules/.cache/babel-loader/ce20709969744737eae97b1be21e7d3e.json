{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function () {\n  var AssertionError = function () {\n    function AssertionError(a) {\n      this.constructor$(a);\n      this.message = a;\n      this.name = \"AssertionError\";\n    }\n\n    AssertionError.prototype = new Error();\n    AssertionError.prototype.constructor = AssertionError;\n    AssertionError.prototype.constructor$ = Error;\n    return AssertionError;\n  }();\n\n  function getParams(args) {\n    var params = [];\n\n    for (var i = 0; i < args.length; ++i) params.push(\"arg\" + i);\n\n    return params;\n  }\n\n  function nativeAssert(callName, args, expect) {\n    try {\n      var params = getParams(args);\n      var constructorArgs = params;\n      constructorArgs.push(\"return \" + callName + \"(\" + params.join(\",\") + \");\");\n      var fn = Function.apply(null, constructorArgs);\n      return fn.apply(null, args);\n    } catch (e) {\n      if (!(e instanceof SyntaxError)) {\n        throw e;\n      } else {\n        return expect;\n      }\n    }\n  }\n\n  return function assert(boolExpr, message) {\n    if (boolExpr === true) return;\n\n    if (typeof boolExpr === \"string\" && boolExpr.charAt(0) === \"%\") {\n      var nativeCallName = boolExpr;\n      var $_len = arguments.length;\n      var args = new Array(Math.max($_len - 2, 0));\n\n      for (var $_i = 2; $_i < $_len; ++$_i) {\n        args[$_i - 2] = arguments[$_i];\n      }\n\n      ;\n      if (nativeAssert(nativeCallName, args, message) === message) return;\n      message = nativeCallName + \" !== \" + message;\n    }\n\n    var ret = new AssertionError(message);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(ret, assert);\n    }\n\n    throw ret;\n  };\n}();","map":{"version":3,"names":["module","exports","AssertionError","a","constructor$","message","name","prototype","Error","constructor","getParams","args","params","i","length","push","nativeAssert","callName","expect","constructorArgs","join","fn","Function","apply","e","SyntaxError","assert","boolExpr","charAt","nativeCallName","$_len","arguments","Array","Math","max","$_i","ret","captureStackTrace"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/bluebird/js/release/assert.js"],"sourcesContent":["\"use strict\";\nmodule.exports = (function(){\nvar AssertionError = (function() {\n    function AssertionError(a) {\n        this.constructor$(a);\n        this.message = a;\n        this.name = \"AssertionError\";\n    }\n    AssertionError.prototype = new Error();\n    AssertionError.prototype.constructor = AssertionError;\n    AssertionError.prototype.constructor$ = Error;\n    return AssertionError;\n})();\n\nfunction getParams(args) {\n    var params = [];\n    for (var i = 0; i < args.length; ++i) params.push(\"arg\" + i);\n    return params;\n}\n\nfunction nativeAssert(callName, args, expect) {\n    try {\n        var params = getParams(args);\n        var constructorArgs = params;\n        constructorArgs.push(\"return \" +\n                callName + \"(\"+ params.join(\",\") + \");\");\n        var fn = Function.apply(null, constructorArgs);\n        return fn.apply(null, args);\n    } catch (e) {\n        if (!(e instanceof SyntaxError)) {\n            throw e;\n        } else {\n            return expect;\n        }\n    }\n}\n\nreturn function assert(boolExpr, message) {\n    if (boolExpr === true) return;\n\n    if (typeof boolExpr === \"string\" &&\n        boolExpr.charAt(0) === \"%\") {\n        var nativeCallName = boolExpr;\n        var $_len = arguments.length;var args = new Array(Math.max($_len - 2, 0)); for(var $_i = 2; $_i < $_len; ++$_i) {args[$_i - 2] = arguments[$_i];};\n        if (nativeAssert(nativeCallName, args, message) === message) return;\n        message = (nativeCallName + \" !== \" + message);\n    }\n\n    var ret = new AssertionError(message);\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(ret, assert);\n    }\n    throw ret;\n};\n})();\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAkB,YAAU;EAC5B,IAAIC,cAAc,GAAI,YAAW;IAC7B,SAASA,cAAT,CAAwBC,CAAxB,EAA2B;MACvB,KAAKC,YAAL,CAAkBD,CAAlB;MACA,KAAKE,OAAL,GAAeF,CAAf;MACA,KAAKG,IAAL,GAAY,gBAAZ;IACH;;IACDJ,cAAc,CAACK,SAAf,GAA2B,IAAIC,KAAJ,EAA3B;IACAN,cAAc,CAACK,SAAf,CAAyBE,WAAzB,GAAuCP,cAAvC;IACAA,cAAc,CAACK,SAAf,CAAyBH,YAAzB,GAAwCI,KAAxC;IACA,OAAON,cAAP;EACH,CAVoB,EAArB;;EAYA,SAASQ,SAAT,CAAmBC,IAAnB,EAAyB;IACrB,IAAIC,MAAM,GAAG,EAAb;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiC,EAAED,CAAnC,EAAsCD,MAAM,CAACG,IAAP,CAAY,QAAQF,CAApB;;IACtC,OAAOD,MAAP;EACH;;EAED,SAASI,YAAT,CAAsBC,QAAtB,EAAgCN,IAAhC,EAAsCO,MAAtC,EAA8C;IAC1C,IAAI;MACA,IAAIN,MAAM,GAAGF,SAAS,CAACC,IAAD,CAAtB;MACA,IAAIQ,eAAe,GAAGP,MAAtB;MACAO,eAAe,CAACJ,IAAhB,CAAqB,YACbE,QADa,GACF,GADE,GACGL,MAAM,CAACQ,IAAP,CAAY,GAAZ,CADH,GACsB,IAD3C;MAEA,IAAIC,EAAE,GAAGC,QAAQ,CAACC,KAAT,CAAe,IAAf,EAAqBJ,eAArB,CAAT;MACA,OAAOE,EAAE,CAACE,KAAH,CAAS,IAAT,EAAeZ,IAAf,CAAP;IACH,CAPD,CAOE,OAAOa,CAAP,EAAU;MACR,IAAI,EAAEA,CAAC,YAAYC,WAAf,CAAJ,EAAiC;QAC7B,MAAMD,CAAN;MACH,CAFD,MAEO;QACH,OAAON,MAAP;MACH;IACJ;EACJ;;EAED,OAAO,SAASQ,MAAT,CAAgBC,QAAhB,EAA0BtB,OAA1B,EAAmC;IACtC,IAAIsB,QAAQ,KAAK,IAAjB,EAAuB;;IAEvB,IAAI,OAAOA,QAAP,KAAoB,QAApB,IACAA,QAAQ,CAACC,MAAT,CAAgB,CAAhB,MAAuB,GAD3B,EACgC;MAC5B,IAAIC,cAAc,GAAGF,QAArB;MACA,IAAIG,KAAK,GAAGC,SAAS,CAACjB,MAAtB;MAA6B,IAAIH,IAAI,GAAG,IAAIqB,KAAJ,CAAUC,IAAI,CAACC,GAAL,CAASJ,KAAK,GAAG,CAAjB,EAAoB,CAApB,CAAV,CAAX;;MAA8C,KAAI,IAAIK,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAGL,KAAvB,EAA8B,EAAEK,GAAhC,EAAqC;QAACxB,IAAI,CAACwB,GAAG,GAAG,CAAP,CAAJ,GAAgBJ,SAAS,CAACI,GAAD,CAAzB;MAAgC;;MAAA;MACjJ,IAAInB,YAAY,CAACa,cAAD,EAAiBlB,IAAjB,EAAuBN,OAAvB,CAAZ,KAAgDA,OAApD,EAA6D;MAC7DA,OAAO,GAAIwB,cAAc,GAAG,OAAjB,GAA2BxB,OAAtC;IACH;;IAED,IAAI+B,GAAG,GAAG,IAAIlC,cAAJ,CAAmBG,OAAnB,CAAV;;IACA,IAAIG,KAAK,CAAC6B,iBAAV,EAA6B;MACzB7B,KAAK,CAAC6B,iBAAN,CAAwBD,GAAxB,EAA6BV,MAA7B;IACH;;IACD,MAAMU,GAAN;EACH,CAhBD;AAiBC,CArDgB,EAAjB"},"metadata":{},"sourceType":"script"}