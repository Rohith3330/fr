{"ast":null,"code":"const MAX_SHORT_STRING = require(\"./wasm-hash\").MAX_SHORT_STRING;\n\nclass BatchedHash {\n  constructor(hash) {\n    this.string = undefined;\n    this.encoding = undefined;\n    this.hash = hash;\n  }\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n\n\n  update(data, inputEncoding) {\n    if (this.string !== undefined) {\n      if (typeof data === \"string\" && inputEncoding === this.encoding && this.string.length + data.length < MAX_SHORT_STRING) {\n        this.string += data;\n        return this;\n      }\n\n      this.hash.update(this.string, this.encoding);\n      this.string = undefined;\n    }\n\n    if (typeof data === \"string\") {\n      if (data.length < MAX_SHORT_STRING && ( // base64 encoding is not valid since it may contain padding chars\n      !inputEncoding || !inputEncoding.startsWith(\"ba\"))) {\n        this.string = data;\n        this.encoding = inputEncoding;\n      } else {\n        this.hash.update(data, inputEncoding);\n      }\n    } else {\n      this.hash.update(data);\n    }\n\n    return this;\n  }\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n\n\n  digest(encoding) {\n    if (this.string !== undefined) {\n      this.hash.update(this.string, this.encoding);\n    }\n\n    return this.hash.digest(encoding);\n  }\n\n}\n\nmodule.exports = BatchedHash;","map":{"version":3,"names":["MAX_SHORT_STRING","require","BatchedHash","constructor","hash","string","undefined","encoding","update","data","inputEncoding","length","startsWith","digest","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/react-dev-utils/node_modules/loader-utils/lib/hash/BatchedHash.js"],"sourcesContent":["const MAX_SHORT_STRING = require(\"./wasm-hash\").MAX_SHORT_STRING;\n\nclass BatchedHash {\n  constructor(hash) {\n    this.string = undefined;\n    this.encoding = undefined;\n    this.hash = hash;\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    if (this.string !== undefined) {\n      if (\n        typeof data === \"string\" &&\n        inputEncoding === this.encoding &&\n        this.string.length + data.length < MAX_SHORT_STRING\n      ) {\n        this.string += data;\n\n        return this;\n      }\n\n      this.hash.update(this.string, this.encoding);\n      this.string = undefined;\n    }\n\n    if (typeof data === \"string\") {\n      if (\n        data.length < MAX_SHORT_STRING &&\n        // base64 encoding is not valid since it may contain padding chars\n        (!inputEncoding || !inputEncoding.startsWith(\"ba\"))\n      ) {\n        this.string = data;\n        this.encoding = inputEncoding;\n      } else {\n        this.hash.update(data, inputEncoding);\n      }\n    } else {\n      this.hash.update(data);\n    }\n\n    return this;\n  }\n\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n  digest(encoding) {\n    if (this.string !== undefined) {\n      this.hash.update(this.string, this.encoding);\n    }\n\n    return this.hash.digest(encoding);\n  }\n}\n\nmodule.exports = BatchedHash;\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,gBAAhD;;AAEA,MAAME,WAAN,CAAkB;EAChBC,WAAW,CAACC,IAAD,EAAO;IAChB,KAAKC,MAAL,GAAcC,SAAd;IACA,KAAKC,QAAL,GAAgBD,SAAhB;IACA,KAAKF,IAAL,GAAYA,IAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEI,MAAM,CAACC,IAAD,EAAOC,aAAP,EAAsB;IAC1B,IAAI,KAAKL,MAAL,KAAgBC,SAApB,EAA+B;MAC7B,IACE,OAAOG,IAAP,KAAgB,QAAhB,IACAC,aAAa,KAAK,KAAKH,QADvB,IAEA,KAAKF,MAAL,CAAYM,MAAZ,GAAqBF,IAAI,CAACE,MAA1B,GAAmCX,gBAHrC,EAIE;QACA,KAAKK,MAAL,IAAeI,IAAf;QAEA,OAAO,IAAP;MACD;;MAED,KAAKL,IAAL,CAAUI,MAAV,CAAiB,KAAKH,MAAtB,EAA8B,KAAKE,QAAnC;MACA,KAAKF,MAAL,GAAcC,SAAd;IACD;;IAED,IAAI,OAAOG,IAAP,KAAgB,QAApB,EAA8B;MAC5B,IACEA,IAAI,CAACE,MAAL,GAAcX,gBAAd,MACA;MACC,CAACU,aAAD,IAAkB,CAACA,aAAa,CAACE,UAAd,CAAyB,IAAzB,CAFpB,CADF,EAIE;QACA,KAAKP,MAAL,GAAcI,IAAd;QACA,KAAKF,QAAL,GAAgBG,aAAhB;MACD,CAPD,MAOO;QACL,KAAKN,IAAL,CAAUI,MAAV,CAAiBC,IAAjB,EAAuBC,aAAvB;MACD;IACF,CAXD,MAWO;MACL,KAAKN,IAAL,CAAUI,MAAV,CAAiBC,IAAjB;IACD;;IAED,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEI,MAAM,CAACN,QAAD,EAAW;IACf,IAAI,KAAKF,MAAL,KAAgBC,SAApB,EAA+B;MAC7B,KAAKF,IAAL,CAAUI,MAAV,CAAiB,KAAKH,MAAtB,EAA8B,KAAKE,QAAnC;IACD;;IAED,OAAO,KAAKH,IAAL,CAAUS,MAAV,CAAiBN,QAAjB,CAAP;EACD;;AA1De;;AA6DlBO,MAAM,CAACC,OAAP,GAAiBb,WAAjB"},"metadata":{},"sourceType":"script"}