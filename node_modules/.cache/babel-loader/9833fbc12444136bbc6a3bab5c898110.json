{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _util() {\n  const data = _interopRequireDefault(require('util'));\n\n  _util = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst MS_IN_A_YEAR = 31536000000;\n\nclass FakeTimers {\n  constructor(_ref) {\n    let {\n      global,\n      moduleMocker,\n      timerConfig,\n      config,\n      maxLoops\n    } = _ref;\n\n    _defineProperty(this, '_cancelledTicks', void 0);\n\n    _defineProperty(this, '_config', void 0);\n\n    _defineProperty(this, '_disposed', void 0);\n\n    _defineProperty(this, '_fakeTimerAPIs', void 0);\n\n    _defineProperty(this, '_global', void 0);\n\n    _defineProperty(this, '_immediates', void 0);\n\n    _defineProperty(this, '_maxLoops', void 0);\n\n    _defineProperty(this, '_moduleMocker', void 0);\n\n    _defineProperty(this, '_now', void 0);\n\n    _defineProperty(this, '_ticks', void 0);\n\n    _defineProperty(this, '_timerAPIs', void 0);\n\n    _defineProperty(this, '_timers', void 0);\n\n    _defineProperty(this, '_uuidCounter', void 0);\n\n    _defineProperty(this, '_timerConfig', void 0);\n\n    this._global = global;\n    this._timerConfig = timerConfig;\n    this._config = config;\n    this._maxLoops = maxLoops || 100000;\n    this._uuidCounter = 1;\n    this._moduleMocker = moduleMocker; // Store original timer APIs for future reference\n\n    this._timerAPIs = {\n      cancelAnimationFrame: global.cancelAnimationFrame,\n      clearImmediate: global.clearImmediate,\n      clearInterval: global.clearInterval,\n      clearTimeout: global.clearTimeout,\n      nextTick: global.process && global.process.nextTick,\n      requestAnimationFrame: global.requestAnimationFrame,\n      setImmediate: global.setImmediate,\n      setInterval: global.setInterval,\n      setTimeout: global.setTimeout\n    };\n    this.reset();\n  }\n\n  clearAllTimers() {\n    this._immediates = [];\n\n    this._timers.clear();\n  }\n\n  dispose() {\n    this._disposed = true;\n    this.clearAllTimers();\n  }\n\n  reset() {\n    this._cancelledTicks = {};\n    this._now = 0;\n    this._ticks = [];\n    this._immediates = [];\n    this._timers = new Map();\n  }\n\n  runAllTicks() {\n    this._checkFakeTimers(); // Only run a generous number of ticks and then bail.\n    // This is just to help avoid recursive loops\n\n\n    let i;\n\n    for (i = 0; i < this._maxLoops; i++) {\n      const tick = this._ticks.shift();\n\n      if (tick === undefined) {\n        break;\n      }\n\n      if (!this._cancelledTicks.hasOwnProperty(tick.uuid)) {\n        // Callback may throw, so update the map prior calling.\n        this._cancelledTicks[tick.uuid] = true;\n        tick.callback();\n      }\n    }\n\n    if (i === this._maxLoops) {\n      throw new Error('Ran ' + this._maxLoops + ' ticks, and there are still more! ' + \"Assuming we've hit an infinite recursion and bailing out...\");\n    }\n  }\n\n  runAllImmediates() {\n    this._checkFakeTimers(); // Only run a generous number of immediates and then bail.\n\n\n    let i;\n\n    for (i = 0; i < this._maxLoops; i++) {\n      const immediate = this._immediates.shift();\n\n      if (immediate === undefined) {\n        break;\n      }\n\n      this._runImmediate(immediate);\n    }\n\n    if (i === this._maxLoops) {\n      throw new Error('Ran ' + this._maxLoops + ' immediates, and there are still more! Assuming ' + \"we've hit an infinite recursion and bailing out...\");\n    }\n  }\n\n  _runImmediate(immediate) {\n    try {\n      immediate.callback();\n    } finally {\n      this._fakeClearImmediate(immediate.uuid);\n    }\n  }\n\n  runAllTimers() {\n    this._checkFakeTimers();\n\n    this.runAllTicks();\n    this.runAllImmediates(); // Only run a generous number of timers and then bail.\n    // This is just to help avoid recursive loops\n\n    let i;\n\n    for (i = 0; i < this._maxLoops; i++) {\n      const nextTimerHandle = this._getNextTimerHandle(); // If there are no more timer handles, stop!\n\n\n      if (nextTimerHandle === null) {\n        break;\n      }\n\n      this._runTimerHandle(nextTimerHandle); // Some of the immediate calls could be enqueued\n      // during the previous handling of the timers, we should\n      // run them as well.\n\n\n      if (this._immediates.length) {\n        this.runAllImmediates();\n      }\n\n      if (this._ticks.length) {\n        this.runAllTicks();\n      }\n    }\n\n    if (i === this._maxLoops) {\n      throw new Error('Ran ' + this._maxLoops + ' timers, and there are still more! ' + \"Assuming we've hit an infinite recursion and bailing out...\");\n    }\n  }\n\n  runOnlyPendingTimers() {\n    // We need to hold the current shape of `this._timers` because existing\n    // timers can add new ones to the map and hence would run more than necessary.\n    // See https://github.com/facebook/jest/pull/4608 for details\n    const timerEntries = Array.from(this._timers.entries());\n\n    this._checkFakeTimers();\n\n    this._immediates.forEach(this._runImmediate, this);\n\n    timerEntries.sort((_ref2, _ref3) => {\n      let [, left] = _ref2;\n      let [, right] = _ref3;\n      return left.expiry - right.expiry;\n    }).forEach(_ref4 => {\n      let [timerHandle] = _ref4;\n      return this._runTimerHandle(timerHandle);\n    });\n  }\n\n  advanceTimersToNextTimer() {\n    let steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    if (steps < 1) {\n      return;\n    }\n\n    const nextExpiry = Array.from(this._timers.values()).reduce((minExpiry, timer) => {\n      if (minExpiry === null || timer.expiry < minExpiry) return timer.expiry;\n      return minExpiry;\n    }, null);\n\n    if (nextExpiry !== null) {\n      this.advanceTimersByTime(nextExpiry - this._now);\n      this.advanceTimersToNextTimer(steps - 1);\n    }\n  }\n\n  advanceTimersByTime(msToRun) {\n    this._checkFakeTimers(); // Only run a generous number of timers and then bail.\n    // This is just to help avoid recursive loops\n\n\n    let i;\n\n    for (i = 0; i < this._maxLoops; i++) {\n      const timerHandle = this._getNextTimerHandle(); // If there are no more timer handles, stop!\n\n\n      if (timerHandle === null) {\n        break;\n      }\n\n      const timerValue = this._timers.get(timerHandle);\n\n      if (timerValue === undefined) {\n        break;\n      }\n\n      const nextTimerExpiry = timerValue.expiry;\n\n      if (this._now + msToRun < nextTimerExpiry) {\n        // There are no timers between now and the target we're running to, so\n        // adjust our time cursor and quit\n        this._now += msToRun;\n        break;\n      } else {\n        msToRun -= nextTimerExpiry - this._now;\n        this._now = nextTimerExpiry;\n\n        this._runTimerHandle(timerHandle);\n      }\n    }\n\n    if (i === this._maxLoops) {\n      throw new Error('Ran ' + this._maxLoops + ' timers, and there are still more! ' + \"Assuming we've hit an infinite recursion and bailing out...\");\n    }\n  }\n\n  runWithRealTimers(cb) {\n    const prevClearImmediate = this._global.clearImmediate;\n    const prevClearInterval = this._global.clearInterval;\n    const prevClearTimeout = this._global.clearTimeout;\n    const prevNextTick = this._global.process.nextTick;\n    const prevSetImmediate = this._global.setImmediate;\n    const prevSetInterval = this._global.setInterval;\n    const prevSetTimeout = this._global.setTimeout;\n    this.useRealTimers();\n    let cbErr = null;\n    let errThrown = false;\n\n    try {\n      cb();\n    } catch (e) {\n      errThrown = true;\n      cbErr = e;\n    }\n\n    this._global.clearImmediate = prevClearImmediate;\n    this._global.clearInterval = prevClearInterval;\n    this._global.clearTimeout = prevClearTimeout;\n    this._global.process.nextTick = prevNextTick;\n    this._global.setImmediate = prevSetImmediate;\n    this._global.setInterval = prevSetInterval;\n    this._global.setTimeout = prevSetTimeout;\n\n    if (errThrown) {\n      throw cbErr;\n    }\n  }\n\n  useRealTimers() {\n    const global = this._global;\n\n    if (typeof global.cancelAnimationFrame === 'function') {\n      (0, _jestUtil().setGlobal)(global, 'cancelAnimationFrame', this._timerAPIs.cancelAnimationFrame);\n    }\n\n    if (typeof global.clearImmediate === 'function') {\n      (0, _jestUtil().setGlobal)(global, 'clearImmediate', this._timerAPIs.clearImmediate);\n    }\n\n    (0, _jestUtil().setGlobal)(global, 'clearInterval', this._timerAPIs.clearInterval);\n    (0, _jestUtil().setGlobal)(global, 'clearTimeout', this._timerAPIs.clearTimeout);\n\n    if (typeof global.requestAnimationFrame === 'function') {\n      (0, _jestUtil().setGlobal)(global, 'requestAnimationFrame', this._timerAPIs.requestAnimationFrame);\n    }\n\n    if (typeof global.setImmediate === 'function') {\n      (0, _jestUtil().setGlobal)(global, 'setImmediate', this._timerAPIs.setImmediate);\n    }\n\n    (0, _jestUtil().setGlobal)(global, 'setInterval', this._timerAPIs.setInterval);\n    (0, _jestUtil().setGlobal)(global, 'setTimeout', this._timerAPIs.setTimeout);\n    global.process.nextTick = this._timerAPIs.nextTick;\n  }\n\n  useFakeTimers() {\n    this._createMocks();\n\n    const global = this._global;\n\n    if (typeof global.cancelAnimationFrame === 'function') {\n      (0, _jestUtil().setGlobal)(global, 'cancelAnimationFrame', this._fakeTimerAPIs.cancelAnimationFrame);\n    }\n\n    if (typeof global.clearImmediate === 'function') {\n      (0, _jestUtil().setGlobal)(global, 'clearImmediate', this._fakeTimerAPIs.clearImmediate);\n    }\n\n    (0, _jestUtil().setGlobal)(global, 'clearInterval', this._fakeTimerAPIs.clearInterval);\n    (0, _jestUtil().setGlobal)(global, 'clearTimeout', this._fakeTimerAPIs.clearTimeout);\n\n    if (typeof global.requestAnimationFrame === 'function') {\n      (0, _jestUtil().setGlobal)(global, 'requestAnimationFrame', this._fakeTimerAPIs.requestAnimationFrame);\n    }\n\n    if (typeof global.setImmediate === 'function') {\n      (0, _jestUtil().setGlobal)(global, 'setImmediate', this._fakeTimerAPIs.setImmediate);\n    }\n\n    (0, _jestUtil().setGlobal)(global, 'setInterval', this._fakeTimerAPIs.setInterval);\n    (0, _jestUtil().setGlobal)(global, 'setTimeout', this._fakeTimerAPIs.setTimeout);\n    global.process.nextTick = this._fakeTimerAPIs.nextTick;\n  }\n\n  getTimerCount() {\n    this._checkFakeTimers();\n\n    return this._timers.size + this._immediates.length + this._ticks.length;\n  }\n\n  _checkFakeTimers() {\n    var _this$_fakeTimerAPIs;\n\n    if (this._global.setTimeout !== ((_this$_fakeTimerAPIs = this._fakeTimerAPIs) === null || _this$_fakeTimerAPIs === void 0 ? void 0 : _this$_fakeTimerAPIs.setTimeout)) {\n      this._global.console.warn('A function to advance timers was called but the timers API is not ' + 'mocked with fake timers. Call `jest.useFakeTimers()` in this ' + 'test or enable fake timers globally by setting ' + '`\"timers\": \"fake\"` in ' + 'the configuration file. This warning is likely a result of a ' + 'default configuration change in Jest 15.\\n\\n' + 'Release Blog Post: https://jestjs.io/blog/2016/09/01/jest-15\\n' + 'Stack Trace:\\n' + (0, _jestMessageUtil().formatStackTrace)(new Error().stack, this._config, {\n        noStackTrace: false\n      }));\n    }\n  }\n\n  _createMocks() {\n    const fn = (impl // @ts-expect-error TODO: figure out better typings here\n    ) => this._moduleMocker.fn().mockImplementation(impl);\n\n    const promisifiableFakeSetTimeout = fn(this._fakeSetTimeout.bind(this)); // @ts-expect-error TODO: figure out better typings here\n\n    promisifiableFakeSetTimeout[_util().default.promisify.custom] = (delay, arg) => new Promise(resolve => promisifiableFakeSetTimeout(resolve, delay, arg)); // TODO: add better typings; these are mocks, but typed as regular timers\n\n\n    this._fakeTimerAPIs = {\n      cancelAnimationFrame: fn(this._fakeClearTimer.bind(this)),\n      clearImmediate: fn(this._fakeClearImmediate.bind(this)),\n      clearInterval: fn(this._fakeClearTimer.bind(this)),\n      clearTimeout: fn(this._fakeClearTimer.bind(this)),\n      nextTick: fn(this._fakeNextTick.bind(this)),\n      // @ts-expect-error TODO: figure out better typings here\n      requestAnimationFrame: fn(this._fakeRequestAnimationFrame.bind(this)),\n      // @ts-expect-error TODO: figure out better typings here\n      setImmediate: fn(this._fakeSetImmediate.bind(this)),\n      // @ts-expect-error TODO: figure out better typings here\n      setInterval: fn(this._fakeSetInterval.bind(this)),\n      // @ts-expect-error TODO: figure out better typings here\n      setTimeout: promisifiableFakeSetTimeout\n    };\n  }\n\n  _fakeClearTimer(timerRef) {\n    const uuid = this._timerConfig.refToId(timerRef);\n\n    if (uuid) {\n      this._timers.delete(String(uuid));\n    }\n  }\n\n  _fakeClearImmediate(uuid) {\n    this._immediates = this._immediates.filter(immediate => immediate.uuid !== uuid);\n  }\n\n  _fakeNextTick(callback) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (this._disposed) {\n      return;\n    }\n\n    const uuid = String(this._uuidCounter++);\n\n    this._ticks.push({\n      callback: () => callback.apply(null, args),\n      uuid\n    });\n\n    const cancelledTicks = this._cancelledTicks;\n\n    this._timerAPIs.nextTick(() => {\n      if (!cancelledTicks.hasOwnProperty(uuid)) {\n        // Callback may throw, so update the map prior calling.\n        cancelledTicks[uuid] = true;\n        callback.apply(null, args);\n      }\n    });\n  }\n\n  _fakeRequestAnimationFrame(callback) {\n    return this._fakeSetTimeout(() => {\n      // TODO: Use performance.now() once it's mocked\n      callback(this._now);\n    }, 1000 / 60);\n  }\n\n  _fakeSetImmediate(callback) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    if (this._disposed) {\n      return null;\n    }\n\n    const uuid = String(this._uuidCounter++);\n\n    this._immediates.push({\n      callback: () => callback.apply(null, args),\n      uuid\n    });\n\n    this._timerAPIs.setImmediate(() => {\n      if (this._immediates.find(x => x.uuid === uuid)) {\n        try {\n          callback.apply(null, args);\n        } finally {\n          this._fakeClearImmediate(uuid);\n        }\n      }\n    });\n\n    return uuid;\n  }\n\n  _fakeSetInterval(callback, intervalDelay) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      args[_key3 - 2] = arguments[_key3];\n    }\n\n    if (this._disposed) {\n      return null;\n    }\n\n    if (intervalDelay == null) {\n      intervalDelay = 0;\n    }\n\n    const uuid = this._uuidCounter++;\n\n    this._timers.set(String(uuid), {\n      callback: () => callback.apply(null, args),\n      expiry: this._now + intervalDelay,\n      interval: intervalDelay,\n      type: 'interval'\n    });\n\n    return this._timerConfig.idToRef(uuid);\n  }\n\n  _fakeSetTimeout(callback, delay) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n      args[_key4 - 2] = arguments[_key4];\n    }\n\n    if (this._disposed) {\n      return null;\n    } // eslint-disable-next-line no-bitwise\n\n\n    delay = Number(delay) | 0;\n    const uuid = this._uuidCounter++;\n\n    this._timers.set(String(uuid), {\n      callback: () => callback.apply(null, args),\n      expiry: this._now + delay,\n      interval: undefined,\n      type: 'timeout'\n    });\n\n    return this._timerConfig.idToRef(uuid);\n  }\n\n  _getNextTimerHandle() {\n    let nextTimerHandle = null;\n    let soonestTime = MS_IN_A_YEAR;\n\n    this._timers.forEach((timer, uuid) => {\n      if (timer.expiry < soonestTime) {\n        soonestTime = timer.expiry;\n        nextTimerHandle = uuid;\n      }\n    });\n\n    return nextTimerHandle;\n  }\n\n  _runTimerHandle(timerHandle) {\n    const timer = this._timers.get(timerHandle);\n\n    if (!timer) {\n      return;\n    }\n\n    switch (timer.type) {\n      case 'timeout':\n        this._timers.delete(timerHandle);\n\n        timer.callback();\n        break;\n\n      case 'interval':\n        timer.expiry = this._now + (timer.interval || 0);\n        timer.callback();\n        break;\n\n      default:\n        throw new Error('Unexpected timer type: ' + timer.type);\n    }\n  }\n\n}\n\nexports.default = FakeTimers;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_util","data","_interopRequireDefault","require","_jestMessageUtil","_jestUtil","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","MS_IN_A_YEAR","FakeTimers","constructor","global","moduleMocker","timerConfig","config","maxLoops","_global","_timerConfig","_config","_maxLoops","_uuidCounter","_moduleMocker","_timerAPIs","cancelAnimationFrame","clearImmediate","clearInterval","clearTimeout","nextTick","process","requestAnimationFrame","setImmediate","setInterval","setTimeout","reset","clearAllTimers","_immediates","_timers","clear","dispose","_disposed","_cancelledTicks","_now","_ticks","Map","runAllTicks","_checkFakeTimers","i","tick","shift","undefined","hasOwnProperty","uuid","callback","Error","runAllImmediates","immediate","_runImmediate","_fakeClearImmediate","runAllTimers","nextTimerHandle","_getNextTimerHandle","_runTimerHandle","length","runOnlyPendingTimers","timerEntries","Array","from","entries","forEach","sort","left","right","expiry","timerHandle","advanceTimersToNextTimer","steps","nextExpiry","values","reduce","minExpiry","timer","advanceTimersByTime","msToRun","timerValue","get","nextTimerExpiry","runWithRealTimers","cb","prevClearImmediate","prevClearInterval","prevClearTimeout","prevNextTick","prevSetImmediate","prevSetInterval","prevSetTimeout","useRealTimers","cbErr","errThrown","e","setGlobal","useFakeTimers","_createMocks","_fakeTimerAPIs","getTimerCount","size","_this$_fakeTimerAPIs","console","warn","formatStackTrace","stack","noStackTrace","fn","impl","mockImplementation","promisifiableFakeSetTimeout","_fakeSetTimeout","bind","promisify","custom","delay","arg","Promise","resolve","_fakeClearTimer","_fakeNextTick","_fakeRequestAnimationFrame","_fakeSetImmediate","_fakeSetInterval","timerRef","refToId","delete","String","filter","args","push","apply","cancelledTicks","find","x","intervalDelay","set","interval","type","idToRef","Number","soonestTime"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@jest/fake-timers/build/legacyFakeTimers.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _util() {\n  const data = _interopRequireDefault(require('util'));\n\n  _util = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst MS_IN_A_YEAR = 31536000000;\n\nclass FakeTimers {\n  constructor({global, moduleMocker, timerConfig, config, maxLoops}) {\n    _defineProperty(this, '_cancelledTicks', void 0);\n\n    _defineProperty(this, '_config', void 0);\n\n    _defineProperty(this, '_disposed', void 0);\n\n    _defineProperty(this, '_fakeTimerAPIs', void 0);\n\n    _defineProperty(this, '_global', void 0);\n\n    _defineProperty(this, '_immediates', void 0);\n\n    _defineProperty(this, '_maxLoops', void 0);\n\n    _defineProperty(this, '_moduleMocker', void 0);\n\n    _defineProperty(this, '_now', void 0);\n\n    _defineProperty(this, '_ticks', void 0);\n\n    _defineProperty(this, '_timerAPIs', void 0);\n\n    _defineProperty(this, '_timers', void 0);\n\n    _defineProperty(this, '_uuidCounter', void 0);\n\n    _defineProperty(this, '_timerConfig', void 0);\n\n    this._global = global;\n    this._timerConfig = timerConfig;\n    this._config = config;\n    this._maxLoops = maxLoops || 100000;\n    this._uuidCounter = 1;\n    this._moduleMocker = moduleMocker; // Store original timer APIs for future reference\n\n    this._timerAPIs = {\n      cancelAnimationFrame: global.cancelAnimationFrame,\n      clearImmediate: global.clearImmediate,\n      clearInterval: global.clearInterval,\n      clearTimeout: global.clearTimeout,\n      nextTick: global.process && global.process.nextTick,\n      requestAnimationFrame: global.requestAnimationFrame,\n      setImmediate: global.setImmediate,\n      setInterval: global.setInterval,\n      setTimeout: global.setTimeout\n    };\n    this.reset();\n  }\n\n  clearAllTimers() {\n    this._immediates = [];\n\n    this._timers.clear();\n  }\n\n  dispose() {\n    this._disposed = true;\n    this.clearAllTimers();\n  }\n\n  reset() {\n    this._cancelledTicks = {};\n    this._now = 0;\n    this._ticks = [];\n    this._immediates = [];\n    this._timers = new Map();\n  }\n\n  runAllTicks() {\n    this._checkFakeTimers(); // Only run a generous number of ticks and then bail.\n    // This is just to help avoid recursive loops\n\n    let i;\n\n    for (i = 0; i < this._maxLoops; i++) {\n      const tick = this._ticks.shift();\n\n      if (tick === undefined) {\n        break;\n      }\n\n      if (!this._cancelledTicks.hasOwnProperty(tick.uuid)) {\n        // Callback may throw, so update the map prior calling.\n        this._cancelledTicks[tick.uuid] = true;\n        tick.callback();\n      }\n    }\n\n    if (i === this._maxLoops) {\n      throw new Error(\n        'Ran ' +\n          this._maxLoops +\n          ' ticks, and there are still more! ' +\n          \"Assuming we've hit an infinite recursion and bailing out...\"\n      );\n    }\n  }\n\n  runAllImmediates() {\n    this._checkFakeTimers(); // Only run a generous number of immediates and then bail.\n\n    let i;\n\n    for (i = 0; i < this._maxLoops; i++) {\n      const immediate = this._immediates.shift();\n\n      if (immediate === undefined) {\n        break;\n      }\n\n      this._runImmediate(immediate);\n    }\n\n    if (i === this._maxLoops) {\n      throw new Error(\n        'Ran ' +\n          this._maxLoops +\n          ' immediates, and there are still more! Assuming ' +\n          \"we've hit an infinite recursion and bailing out...\"\n      );\n    }\n  }\n\n  _runImmediate(immediate) {\n    try {\n      immediate.callback();\n    } finally {\n      this._fakeClearImmediate(immediate.uuid);\n    }\n  }\n\n  runAllTimers() {\n    this._checkFakeTimers();\n\n    this.runAllTicks();\n    this.runAllImmediates(); // Only run a generous number of timers and then bail.\n    // This is just to help avoid recursive loops\n\n    let i;\n\n    for (i = 0; i < this._maxLoops; i++) {\n      const nextTimerHandle = this._getNextTimerHandle(); // If there are no more timer handles, stop!\n\n      if (nextTimerHandle === null) {\n        break;\n      }\n\n      this._runTimerHandle(nextTimerHandle); // Some of the immediate calls could be enqueued\n      // during the previous handling of the timers, we should\n      // run them as well.\n\n      if (this._immediates.length) {\n        this.runAllImmediates();\n      }\n\n      if (this._ticks.length) {\n        this.runAllTicks();\n      }\n    }\n\n    if (i === this._maxLoops) {\n      throw new Error(\n        'Ran ' +\n          this._maxLoops +\n          ' timers, and there are still more! ' +\n          \"Assuming we've hit an infinite recursion and bailing out...\"\n      );\n    }\n  }\n\n  runOnlyPendingTimers() {\n    // We need to hold the current shape of `this._timers` because existing\n    // timers can add new ones to the map and hence would run more than necessary.\n    // See https://github.com/facebook/jest/pull/4608 for details\n    const timerEntries = Array.from(this._timers.entries());\n\n    this._checkFakeTimers();\n\n    this._immediates.forEach(this._runImmediate, this);\n\n    timerEntries\n      .sort(([, left], [, right]) => left.expiry - right.expiry)\n      .forEach(([timerHandle]) => this._runTimerHandle(timerHandle));\n  }\n\n  advanceTimersToNextTimer(steps = 1) {\n    if (steps < 1) {\n      return;\n    }\n\n    const nextExpiry = Array.from(this._timers.values()).reduce(\n      (minExpiry, timer) => {\n        if (minExpiry === null || timer.expiry < minExpiry) return timer.expiry;\n        return minExpiry;\n      },\n      null\n    );\n\n    if (nextExpiry !== null) {\n      this.advanceTimersByTime(nextExpiry - this._now);\n      this.advanceTimersToNextTimer(steps - 1);\n    }\n  }\n\n  advanceTimersByTime(msToRun) {\n    this._checkFakeTimers(); // Only run a generous number of timers and then bail.\n    // This is just to help avoid recursive loops\n\n    let i;\n\n    for (i = 0; i < this._maxLoops; i++) {\n      const timerHandle = this._getNextTimerHandle(); // If there are no more timer handles, stop!\n\n      if (timerHandle === null) {\n        break;\n      }\n\n      const timerValue = this._timers.get(timerHandle);\n\n      if (timerValue === undefined) {\n        break;\n      }\n\n      const nextTimerExpiry = timerValue.expiry;\n\n      if (this._now + msToRun < nextTimerExpiry) {\n        // There are no timers between now and the target we're running to, so\n        // adjust our time cursor and quit\n        this._now += msToRun;\n        break;\n      } else {\n        msToRun -= nextTimerExpiry - this._now;\n        this._now = nextTimerExpiry;\n\n        this._runTimerHandle(timerHandle);\n      }\n    }\n\n    if (i === this._maxLoops) {\n      throw new Error(\n        'Ran ' +\n          this._maxLoops +\n          ' timers, and there are still more! ' +\n          \"Assuming we've hit an infinite recursion and bailing out...\"\n      );\n    }\n  }\n\n  runWithRealTimers(cb) {\n    const prevClearImmediate = this._global.clearImmediate;\n    const prevClearInterval = this._global.clearInterval;\n    const prevClearTimeout = this._global.clearTimeout;\n    const prevNextTick = this._global.process.nextTick;\n    const prevSetImmediate = this._global.setImmediate;\n    const prevSetInterval = this._global.setInterval;\n    const prevSetTimeout = this._global.setTimeout;\n    this.useRealTimers();\n    let cbErr = null;\n    let errThrown = false;\n\n    try {\n      cb();\n    } catch (e) {\n      errThrown = true;\n      cbErr = e;\n    }\n\n    this._global.clearImmediate = prevClearImmediate;\n    this._global.clearInterval = prevClearInterval;\n    this._global.clearTimeout = prevClearTimeout;\n    this._global.process.nextTick = prevNextTick;\n    this._global.setImmediate = prevSetImmediate;\n    this._global.setInterval = prevSetInterval;\n    this._global.setTimeout = prevSetTimeout;\n\n    if (errThrown) {\n      throw cbErr;\n    }\n  }\n\n  useRealTimers() {\n    const global = this._global;\n\n    if (typeof global.cancelAnimationFrame === 'function') {\n      (0, _jestUtil().setGlobal)(\n        global,\n        'cancelAnimationFrame',\n        this._timerAPIs.cancelAnimationFrame\n      );\n    }\n\n    if (typeof global.clearImmediate === 'function') {\n      (0, _jestUtil().setGlobal)(\n        global,\n        'clearImmediate',\n        this._timerAPIs.clearImmediate\n      );\n    }\n\n    (0, _jestUtil().setGlobal)(\n      global,\n      'clearInterval',\n      this._timerAPIs.clearInterval\n    );\n    (0, _jestUtil().setGlobal)(\n      global,\n      'clearTimeout',\n      this._timerAPIs.clearTimeout\n    );\n\n    if (typeof global.requestAnimationFrame === 'function') {\n      (0, _jestUtil().setGlobal)(\n        global,\n        'requestAnimationFrame',\n        this._timerAPIs.requestAnimationFrame\n      );\n    }\n\n    if (typeof global.setImmediate === 'function') {\n      (0, _jestUtil().setGlobal)(\n        global,\n        'setImmediate',\n        this._timerAPIs.setImmediate\n      );\n    }\n\n    (0, _jestUtil().setGlobal)(\n      global,\n      'setInterval',\n      this._timerAPIs.setInterval\n    );\n    (0, _jestUtil().setGlobal)(\n      global,\n      'setTimeout',\n      this._timerAPIs.setTimeout\n    );\n    global.process.nextTick = this._timerAPIs.nextTick;\n  }\n\n  useFakeTimers() {\n    this._createMocks();\n\n    const global = this._global;\n\n    if (typeof global.cancelAnimationFrame === 'function') {\n      (0, _jestUtil().setGlobal)(\n        global,\n        'cancelAnimationFrame',\n        this._fakeTimerAPIs.cancelAnimationFrame\n      );\n    }\n\n    if (typeof global.clearImmediate === 'function') {\n      (0, _jestUtil().setGlobal)(\n        global,\n        'clearImmediate',\n        this._fakeTimerAPIs.clearImmediate\n      );\n    }\n\n    (0, _jestUtil().setGlobal)(\n      global,\n      'clearInterval',\n      this._fakeTimerAPIs.clearInterval\n    );\n    (0, _jestUtil().setGlobal)(\n      global,\n      'clearTimeout',\n      this._fakeTimerAPIs.clearTimeout\n    );\n\n    if (typeof global.requestAnimationFrame === 'function') {\n      (0, _jestUtil().setGlobal)(\n        global,\n        'requestAnimationFrame',\n        this._fakeTimerAPIs.requestAnimationFrame\n      );\n    }\n\n    if (typeof global.setImmediate === 'function') {\n      (0, _jestUtil().setGlobal)(\n        global,\n        'setImmediate',\n        this._fakeTimerAPIs.setImmediate\n      );\n    }\n\n    (0, _jestUtil().setGlobal)(\n      global,\n      'setInterval',\n      this._fakeTimerAPIs.setInterval\n    );\n    (0, _jestUtil().setGlobal)(\n      global,\n      'setTimeout',\n      this._fakeTimerAPIs.setTimeout\n    );\n    global.process.nextTick = this._fakeTimerAPIs.nextTick;\n  }\n\n  getTimerCount() {\n    this._checkFakeTimers();\n\n    return this._timers.size + this._immediates.length + this._ticks.length;\n  }\n\n  _checkFakeTimers() {\n    var _this$_fakeTimerAPIs;\n\n    if (\n      this._global.setTimeout !==\n      ((_this$_fakeTimerAPIs = this._fakeTimerAPIs) === null ||\n      _this$_fakeTimerAPIs === void 0\n        ? void 0\n        : _this$_fakeTimerAPIs.setTimeout)\n    ) {\n      this._global.console.warn(\n        'A function to advance timers was called but the timers API is not ' +\n          'mocked with fake timers. Call `jest.useFakeTimers()` in this ' +\n          'test or enable fake timers globally by setting ' +\n          '`\"timers\": \"fake\"` in ' +\n          'the configuration file. This warning is likely a result of a ' +\n          'default configuration change in Jest 15.\\n\\n' +\n          'Release Blog Post: https://jestjs.io/blog/2016/09/01/jest-15\\n' +\n          'Stack Trace:\\n' +\n          (0, _jestMessageUtil().formatStackTrace)(\n            new Error().stack,\n            this._config,\n            {\n              noStackTrace: false\n            }\n          )\n      );\n    }\n  }\n\n  _createMocks() {\n    const fn = (\n      impl // @ts-expect-error TODO: figure out better typings here\n    ) => this._moduleMocker.fn().mockImplementation(impl);\n\n    const promisifiableFakeSetTimeout = fn(this._fakeSetTimeout.bind(this)); // @ts-expect-error TODO: figure out better typings here\n\n    promisifiableFakeSetTimeout[_util().default.promisify.custom] = (\n      delay,\n      arg\n    ) =>\n      new Promise(resolve => promisifiableFakeSetTimeout(resolve, delay, arg)); // TODO: add better typings; these are mocks, but typed as regular timers\n\n    this._fakeTimerAPIs = {\n      cancelAnimationFrame: fn(this._fakeClearTimer.bind(this)),\n      clearImmediate: fn(this._fakeClearImmediate.bind(this)),\n      clearInterval: fn(this._fakeClearTimer.bind(this)),\n      clearTimeout: fn(this._fakeClearTimer.bind(this)),\n      nextTick: fn(this._fakeNextTick.bind(this)),\n      // @ts-expect-error TODO: figure out better typings here\n      requestAnimationFrame: fn(this._fakeRequestAnimationFrame.bind(this)),\n      // @ts-expect-error TODO: figure out better typings here\n      setImmediate: fn(this._fakeSetImmediate.bind(this)),\n      // @ts-expect-error TODO: figure out better typings here\n      setInterval: fn(this._fakeSetInterval.bind(this)),\n      // @ts-expect-error TODO: figure out better typings here\n      setTimeout: promisifiableFakeSetTimeout\n    };\n  }\n\n  _fakeClearTimer(timerRef) {\n    const uuid = this._timerConfig.refToId(timerRef);\n\n    if (uuid) {\n      this._timers.delete(String(uuid));\n    }\n  }\n\n  _fakeClearImmediate(uuid) {\n    this._immediates = this._immediates.filter(\n      immediate => immediate.uuid !== uuid\n    );\n  }\n\n  _fakeNextTick(callback, ...args) {\n    if (this._disposed) {\n      return;\n    }\n\n    const uuid = String(this._uuidCounter++);\n\n    this._ticks.push({\n      callback: () => callback.apply(null, args),\n      uuid\n    });\n\n    const cancelledTicks = this._cancelledTicks;\n\n    this._timerAPIs.nextTick(() => {\n      if (!cancelledTicks.hasOwnProperty(uuid)) {\n        // Callback may throw, so update the map prior calling.\n        cancelledTicks[uuid] = true;\n        callback.apply(null, args);\n      }\n    });\n  }\n\n  _fakeRequestAnimationFrame(callback) {\n    return this._fakeSetTimeout(() => {\n      // TODO: Use performance.now() once it's mocked\n      callback(this._now);\n    }, 1000 / 60);\n  }\n\n  _fakeSetImmediate(callback, ...args) {\n    if (this._disposed) {\n      return null;\n    }\n\n    const uuid = String(this._uuidCounter++);\n\n    this._immediates.push({\n      callback: () => callback.apply(null, args),\n      uuid\n    });\n\n    this._timerAPIs.setImmediate(() => {\n      if (this._immediates.find(x => x.uuid === uuid)) {\n        try {\n          callback.apply(null, args);\n        } finally {\n          this._fakeClearImmediate(uuid);\n        }\n      }\n    });\n\n    return uuid;\n  }\n\n  _fakeSetInterval(callback, intervalDelay, ...args) {\n    if (this._disposed) {\n      return null;\n    }\n\n    if (intervalDelay == null) {\n      intervalDelay = 0;\n    }\n\n    const uuid = this._uuidCounter++;\n\n    this._timers.set(String(uuid), {\n      callback: () => callback.apply(null, args),\n      expiry: this._now + intervalDelay,\n      interval: intervalDelay,\n      type: 'interval'\n    });\n\n    return this._timerConfig.idToRef(uuid);\n  }\n\n  _fakeSetTimeout(callback, delay, ...args) {\n    if (this._disposed) {\n      return null;\n    } // eslint-disable-next-line no-bitwise\n\n    delay = Number(delay) | 0;\n    const uuid = this._uuidCounter++;\n\n    this._timers.set(String(uuid), {\n      callback: () => callback.apply(null, args),\n      expiry: this._now + delay,\n      interval: undefined,\n      type: 'timeout'\n    });\n\n    return this._timerConfig.idToRef(uuid);\n  }\n\n  _getNextTimerHandle() {\n    let nextTimerHandle = null;\n    let soonestTime = MS_IN_A_YEAR;\n\n    this._timers.forEach((timer, uuid) => {\n      if (timer.expiry < soonestTime) {\n        soonestTime = timer.expiry;\n        nextTimerHandle = uuid;\n      }\n    });\n\n    return nextTimerHandle;\n  }\n\n  _runTimerHandle(timerHandle) {\n    const timer = this._timers.get(timerHandle);\n\n    if (!timer) {\n      return;\n    }\n\n    switch (timer.type) {\n      case 'timeout':\n        this._timers.delete(timerHandle);\n\n        timer.callback();\n        break;\n\n      case 'interval':\n        timer.expiry = this._now + (timer.interval || 0);\n        timer.callback();\n        break;\n\n      default:\n        throw new Error('Unexpected timer type: ' + timer.type);\n    }\n  }\n}\n\nexports.default = FakeTimers;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}