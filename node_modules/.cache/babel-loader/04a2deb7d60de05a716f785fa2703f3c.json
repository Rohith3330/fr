{"ast":null,"code":"// @remove-file-on-eject\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst chalk = require('react-dev-utils/chalk');\n\nconst fs = require('fs');\n\nconst resolve = require('resolve');\n\nconst path = require('path');\n\nconst paths = require('../../config/paths');\n\nconst os = require('os');\n\nconst semver = require('semver');\n\nconst immer = require('react-dev-utils/immer').produce;\n\nconst globby = require('react-dev-utils/globby').sync;\n\nconst hasJsxRuntime = (() => {\n  if (process.env.DISABLE_NEW_JSX_TRANSFORM === 'true') {\n    return false;\n  }\n\n  try {\n    require.resolve('react/jsx-runtime', {\n      paths: [paths.appPath]\n    });\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\nfunction writeJson(fileName, object) {\n  fs.writeFileSync(fileName, JSON.stringify(object, null, 2).replace(/\\n/g, os.EOL) + os.EOL);\n}\n\nfunction verifyNoTypeScript() {\n  const typescriptFiles = globby(['**/*.(ts|tsx)', '!**/node_modules', '!**/*.d.ts'], {\n    cwd: paths.appSrc\n  });\n\n  if (typescriptFiles.length > 0) {\n    console.warn(chalk.yellow(`We detected TypeScript in your project (${chalk.bold(`src${path.sep}${typescriptFiles[0]}`)}) and created a ${chalk.bold('tsconfig.json')} file for you.`));\n    console.warn();\n    return false;\n  }\n\n  return true;\n}\n\nfunction verifyTypeScriptSetup() {\n  let firstTimeSetup = false;\n\n  if (!fs.existsSync(paths.appTsConfig)) {\n    if (verifyNoTypeScript()) {\n      return;\n    }\n\n    writeJson(paths.appTsConfig, {});\n    firstTimeSetup = true;\n  }\n\n  const isYarn = fs.existsSync(paths.yarnLockFile); // Ensure typescript is installed\n\n  let ts;\n\n  try {\n    // TODO: Remove this hack once `globalThis` issue is resolved\n    // https://github.com/jsdom/jsdom/issues/2961\n    const globalThisWasDefined = !!global.globalThis;\n    ts = require(resolve.sync('typescript', {\n      basedir: paths.appNodeModules\n    }));\n\n    if (!globalThisWasDefined && !!global.globalThis) {\n      delete global.globalThis;\n    }\n  } catch (_) {\n    console.error(chalk.bold.red(`It looks like you're trying to use TypeScript but do not have ${chalk.bold('typescript')} installed.`));\n    console.error(chalk.bold('Please install', chalk.cyan.bold('typescript'), 'by running', chalk.cyan.bold(isYarn ? 'yarn add typescript' : 'npm install typescript') + '.'));\n    console.error(chalk.bold('If you are not trying to use TypeScript, please remove the ' + chalk.cyan('tsconfig.json') + ' file from your package root (and any TypeScript files).'));\n    console.error();\n    process.exit(1);\n  }\n\n  const compilerOptions = {\n    // These are suggested values and will be set when not present in the\n    // tsconfig.json\n    // 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()\n    target: {\n      parsedValue: ts.ScriptTarget.ES5,\n      suggested: 'es5'\n    },\n    lib: {\n      suggested: ['dom', 'dom.iterable', 'esnext']\n    },\n    allowJs: {\n      suggested: true\n    },\n    skipLibCheck: {\n      suggested: true\n    },\n    esModuleInterop: {\n      suggested: true\n    },\n    allowSyntheticDefaultImports: {\n      suggested: true\n    },\n    strict: {\n      suggested: true\n    },\n    forceConsistentCasingInFileNames: {\n      suggested: true\n    },\n    noFallthroughCasesInSwitch: {\n      suggested: true\n    },\n    // These values are required and cannot be changed by the user\n    // Keep this in sync with the webpack config\n    module: {\n      parsedValue: ts.ModuleKind.ESNext,\n      value: 'esnext',\n      reason: 'for import() and import/export'\n    },\n    moduleResolution: {\n      parsedValue: ts.ModuleResolutionKind.NodeJs,\n      value: 'node',\n      reason: 'to match webpack resolution'\n    },\n    resolveJsonModule: {\n      value: true,\n      reason: 'to match webpack loader'\n    },\n    isolatedModules: {\n      value: true,\n      reason: 'implementation limitation'\n    },\n    noEmit: {\n      value: true\n    },\n    jsx: {\n      parsedValue: hasJsxRuntime && semver.gte(ts.version, '4.1.0-beta') ? ts.JsxEmit.ReactJSX : ts.JsxEmit.React,\n      value: hasJsxRuntime && semver.gte(ts.version, '4.1.0-beta') ? 'react-jsx' : 'react',\n      reason: 'to support the new JSX transform in React 17'\n    },\n    paths: {\n      value: undefined,\n      reason: 'aliased imports are not supported'\n    }\n  };\n  const formatDiagnosticHost = {\n    getCanonicalFileName: fileName => fileName,\n    getCurrentDirectory: ts.sys.getCurrentDirectory,\n    getNewLine: () => os.EOL\n  };\n  const messages = [];\n  let appTsConfig;\n  let parsedTsConfig;\n  let parsedCompilerOptions;\n\n  try {\n    const {\n      config: readTsConfig,\n      error\n    } = ts.readConfigFile(paths.appTsConfig, ts.sys.readFile);\n\n    if (error) {\n      throw new Error(ts.formatDiagnostic(error, formatDiagnosticHost));\n    }\n\n    appTsConfig = readTsConfig; // Get TS to parse and resolve any \"extends\"\n    // Calling this function also mutates the tsconfig above,\n    // adding in \"include\" and \"exclude\", but the compilerOptions remain untouched\n\n    let result;\n    parsedTsConfig = immer(readTsConfig, config => {\n      result = ts.parseJsonConfigFileContent(config, ts.sys, path.dirname(paths.appTsConfig));\n    });\n\n    if (result.errors && result.errors.length) {\n      throw new Error(ts.formatDiagnostic(result.errors[0], formatDiagnosticHost));\n    }\n\n    parsedCompilerOptions = result.options;\n  } catch (e) {\n    if (e && e.name === 'SyntaxError') {\n      console.error(chalk.red.bold('Could not parse', chalk.cyan('tsconfig.json') + '.', 'Please make sure it contains syntactically correct JSON.'));\n    }\n\n    console.log(e && e.message ? `${e.message}` : '');\n    process.exit(1);\n  }\n\n  if (appTsConfig.compilerOptions == null) {\n    appTsConfig.compilerOptions = {};\n    firstTimeSetup = true;\n  }\n\n  for (const option of Object.keys(compilerOptions)) {\n    const {\n      parsedValue,\n      value,\n      suggested,\n      reason\n    } = compilerOptions[option];\n    const valueToCheck = parsedValue === undefined ? value : parsedValue;\n    const coloredOption = chalk.cyan('compilerOptions.' + option);\n\n    if (suggested != null) {\n      if (parsedCompilerOptions[option] === undefined) {\n        appTsConfig = immer(appTsConfig, config => {\n          config.compilerOptions[option] = suggested;\n        });\n        messages.push(`${coloredOption} to be ${chalk.bold('suggested')} value: ${chalk.cyan.bold(suggested)} (this can be changed)`);\n      }\n    } else if (parsedCompilerOptions[option] !== valueToCheck) {\n      appTsConfig = immer(appTsConfig, config => {\n        config.compilerOptions[option] = value;\n      });\n      messages.push(`${coloredOption} ${chalk.bold(valueToCheck == null ? 'must not' : 'must')} be ${valueToCheck == null ? 'set' : chalk.cyan.bold(value)}` + (reason != null ? ` (${reason})` : ''));\n    }\n  } // tsconfig will have the merged \"include\" and \"exclude\" by this point\n\n\n  if (parsedTsConfig.include == null) {\n    appTsConfig = immer(appTsConfig, config => {\n      config.include = ['src'];\n    });\n    messages.push(`${chalk.cyan('include')} should be ${chalk.cyan.bold('src')}`);\n  }\n\n  if (messages.length > 0) {\n    if (firstTimeSetup) {\n      console.log(chalk.bold('Your', chalk.cyan('tsconfig.json'), 'has been populated with default values.'));\n      console.log();\n    } else {\n      console.warn(chalk.bold('The following changes are being made to your', chalk.cyan('tsconfig.json'), 'file:'));\n      messages.forEach(message => {\n        console.warn('  - ' + message);\n      });\n      console.warn();\n    }\n\n    writeJson(paths.appTsConfig, appTsConfig);\n  } // Reference `react-scripts` types\n\n\n  if (!fs.existsSync(paths.appTypeDeclarations)) {\n    fs.writeFileSync(paths.appTypeDeclarations, `/// <reference types=\"react-scripts\" />${os.EOL}`);\n  }\n}\n\nmodule.exports = verifyTypeScriptSetup;","map":{"version":3,"names":["chalk","require","fs","resolve","path","paths","os","semver","immer","produce","globby","sync","hasJsxRuntime","process","env","DISABLE_NEW_JSX_TRANSFORM","appPath","e","writeJson","fileName","object","writeFileSync","JSON","stringify","replace","EOL","verifyNoTypeScript","typescriptFiles","cwd","appSrc","length","console","warn","yellow","bold","sep","verifyTypeScriptSetup","firstTimeSetup","existsSync","appTsConfig","isYarn","yarnLockFile","ts","globalThisWasDefined","global","globalThis","basedir","appNodeModules","_","error","red","cyan","exit","compilerOptions","target","parsedValue","ScriptTarget","ES5","suggested","lib","allowJs","skipLibCheck","esModuleInterop","allowSyntheticDefaultImports","strict","forceConsistentCasingInFileNames","noFallthroughCasesInSwitch","module","ModuleKind","ESNext","value","reason","moduleResolution","ModuleResolutionKind","NodeJs","resolveJsonModule","isolatedModules","noEmit","jsx","gte","version","JsxEmit","ReactJSX","React","undefined","formatDiagnosticHost","getCanonicalFileName","getCurrentDirectory","sys","getNewLine","messages","parsedTsConfig","parsedCompilerOptions","config","readTsConfig","readConfigFile","readFile","Error","formatDiagnostic","result","parseJsonConfigFileContent","dirname","errors","options","name","log","message","option","Object","keys","valueToCheck","coloredOption","push","include","forEach","appTypeDeclarations","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/react-scripts/scripts/utils/verifyTypeScriptSetup.js"],"sourcesContent":["// @remove-file-on-eject\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst chalk = require('react-dev-utils/chalk');\nconst fs = require('fs');\nconst resolve = require('resolve');\nconst path = require('path');\nconst paths = require('../../config/paths');\nconst os = require('os');\nconst semver = require('semver');\nconst immer = require('react-dev-utils/immer').produce;\nconst globby = require('react-dev-utils/globby').sync;\n\nconst hasJsxRuntime = (() => {\n  if (process.env.DISABLE_NEW_JSX_TRANSFORM === 'true') {\n    return false;\n  }\n\n  try {\n    require.resolve('react/jsx-runtime', { paths: [paths.appPath] });\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\nfunction writeJson(fileName, object) {\n  fs.writeFileSync(\n    fileName,\n    JSON.stringify(object, null, 2).replace(/\\n/g, os.EOL) + os.EOL\n  );\n}\n\nfunction verifyNoTypeScript() {\n  const typescriptFiles = globby(\n    ['**/*.(ts|tsx)', '!**/node_modules', '!**/*.d.ts'],\n    { cwd: paths.appSrc }\n  );\n  if (typescriptFiles.length > 0) {\n    console.warn(\n      chalk.yellow(\n        `We detected TypeScript in your project (${chalk.bold(\n          `src${path.sep}${typescriptFiles[0]}`\n        )}) and created a ${chalk.bold('tsconfig.json')} file for you.`\n      )\n    );\n    console.warn();\n    return false;\n  }\n  return true;\n}\n\nfunction verifyTypeScriptSetup() {\n  let firstTimeSetup = false;\n\n  if (!fs.existsSync(paths.appTsConfig)) {\n    if (verifyNoTypeScript()) {\n      return;\n    }\n    writeJson(paths.appTsConfig, {});\n    firstTimeSetup = true;\n  }\n\n  const isYarn = fs.existsSync(paths.yarnLockFile);\n\n  // Ensure typescript is installed\n  let ts;\n  try {\n    // TODO: Remove this hack once `globalThis` issue is resolved\n    // https://github.com/jsdom/jsdom/issues/2961\n    const globalThisWasDefined = !!global.globalThis;\n\n    ts = require(resolve.sync('typescript', {\n      basedir: paths.appNodeModules,\n    }));\n\n    if (!globalThisWasDefined && !!global.globalThis) {\n      delete global.globalThis;\n    }\n  } catch (_) {\n    console.error(\n      chalk.bold.red(\n        `It looks like you're trying to use TypeScript but do not have ${chalk.bold(\n          'typescript'\n        )} installed.`\n      )\n    );\n    console.error(\n      chalk.bold(\n        'Please install',\n        chalk.cyan.bold('typescript'),\n        'by running',\n        chalk.cyan.bold(\n          isYarn ? 'yarn add typescript' : 'npm install typescript'\n        ) + '.'\n      )\n    );\n    console.error(\n      chalk.bold(\n        'If you are not trying to use TypeScript, please remove the ' +\n          chalk.cyan('tsconfig.json') +\n          ' file from your package root (and any TypeScript files).'\n      )\n    );\n    console.error();\n    process.exit(1);\n  }\n\n  const compilerOptions = {\n    // These are suggested values and will be set when not present in the\n    // tsconfig.json\n    // 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()\n    target: {\n      parsedValue: ts.ScriptTarget.ES5,\n      suggested: 'es5',\n    },\n    lib: { suggested: ['dom', 'dom.iterable', 'esnext'] },\n    allowJs: { suggested: true },\n    skipLibCheck: { suggested: true },\n    esModuleInterop: { suggested: true },\n    allowSyntheticDefaultImports: { suggested: true },\n    strict: { suggested: true },\n    forceConsistentCasingInFileNames: { suggested: true },\n    noFallthroughCasesInSwitch: { suggested: true },\n\n    // These values are required and cannot be changed by the user\n    // Keep this in sync with the webpack config\n    module: {\n      parsedValue: ts.ModuleKind.ESNext,\n      value: 'esnext',\n      reason: 'for import() and import/export',\n    },\n    moduleResolution: {\n      parsedValue: ts.ModuleResolutionKind.NodeJs,\n      value: 'node',\n      reason: 'to match webpack resolution',\n    },\n    resolveJsonModule: { value: true, reason: 'to match webpack loader' },\n    isolatedModules: { value: true, reason: 'implementation limitation' },\n    noEmit: { value: true },\n    jsx: {\n      parsedValue:\n        hasJsxRuntime && semver.gte(ts.version, '4.1.0-beta')\n          ? ts.JsxEmit.ReactJSX\n          : ts.JsxEmit.React,\n      value:\n        hasJsxRuntime && semver.gte(ts.version, '4.1.0-beta')\n          ? 'react-jsx'\n          : 'react',\n      reason: 'to support the new JSX transform in React 17',\n    },\n    paths: { value: undefined, reason: 'aliased imports are not supported' },\n  };\n\n  const formatDiagnosticHost = {\n    getCanonicalFileName: fileName => fileName,\n    getCurrentDirectory: ts.sys.getCurrentDirectory,\n    getNewLine: () => os.EOL,\n  };\n\n  const messages = [];\n  let appTsConfig;\n  let parsedTsConfig;\n  let parsedCompilerOptions;\n  try {\n    const { config: readTsConfig, error } = ts.readConfigFile(\n      paths.appTsConfig,\n      ts.sys.readFile\n    );\n\n    if (error) {\n      throw new Error(ts.formatDiagnostic(error, formatDiagnosticHost));\n    }\n\n    appTsConfig = readTsConfig;\n\n    // Get TS to parse and resolve any \"extends\"\n    // Calling this function also mutates the tsconfig above,\n    // adding in \"include\" and \"exclude\", but the compilerOptions remain untouched\n    let result;\n    parsedTsConfig = immer(readTsConfig, config => {\n      result = ts.parseJsonConfigFileContent(\n        config,\n        ts.sys,\n        path.dirname(paths.appTsConfig)\n      );\n    });\n\n    if (result.errors && result.errors.length) {\n      throw new Error(\n        ts.formatDiagnostic(result.errors[0], formatDiagnosticHost)\n      );\n    }\n\n    parsedCompilerOptions = result.options;\n  } catch (e) {\n    if (e && e.name === 'SyntaxError') {\n      console.error(\n        chalk.red.bold(\n          'Could not parse',\n          chalk.cyan('tsconfig.json') + '.',\n          'Please make sure it contains syntactically correct JSON.'\n        )\n      );\n    }\n\n    console.log(e && e.message ? `${e.message}` : '');\n    process.exit(1);\n  }\n\n  if (appTsConfig.compilerOptions == null) {\n    appTsConfig.compilerOptions = {};\n    firstTimeSetup = true;\n  }\n\n  for (const option of Object.keys(compilerOptions)) {\n    const { parsedValue, value, suggested, reason } = compilerOptions[option];\n\n    const valueToCheck = parsedValue === undefined ? value : parsedValue;\n    const coloredOption = chalk.cyan('compilerOptions.' + option);\n\n    if (suggested != null) {\n      if (parsedCompilerOptions[option] === undefined) {\n        appTsConfig = immer(appTsConfig, config => {\n          config.compilerOptions[option] = suggested;\n        });\n        messages.push(\n          `${coloredOption} to be ${chalk.bold(\n            'suggested'\n          )} value: ${chalk.cyan.bold(suggested)} (this can be changed)`\n        );\n      }\n    } else if (parsedCompilerOptions[option] !== valueToCheck) {\n      appTsConfig = immer(appTsConfig, config => {\n        config.compilerOptions[option] = value;\n      });\n      messages.push(\n        `${coloredOption} ${chalk.bold(\n          valueToCheck == null ? 'must not' : 'must'\n        )} be ${valueToCheck == null ? 'set' : chalk.cyan.bold(value)}` +\n          (reason != null ? ` (${reason})` : '')\n      );\n    }\n  }\n\n  // tsconfig will have the merged \"include\" and \"exclude\" by this point\n  if (parsedTsConfig.include == null) {\n    appTsConfig = immer(appTsConfig, config => {\n      config.include = ['src'];\n    });\n    messages.push(\n      `${chalk.cyan('include')} should be ${chalk.cyan.bold('src')}`\n    );\n  }\n\n  if (messages.length > 0) {\n    if (firstTimeSetup) {\n      console.log(\n        chalk.bold(\n          'Your',\n          chalk.cyan('tsconfig.json'),\n          'has been populated with default values.'\n        )\n      );\n      console.log();\n    } else {\n      console.warn(\n        chalk.bold(\n          'The following changes are being made to your',\n          chalk.cyan('tsconfig.json'),\n          'file:'\n        )\n      );\n      messages.forEach(message => {\n        console.warn('  - ' + message);\n      });\n      console.warn();\n    }\n    writeJson(paths.appTsConfig, appTsConfig);\n  }\n\n  // Reference `react-scripts` types\n  if (!fs.existsSync(paths.appTypeDeclarations)) {\n    fs.writeFileSync(\n      paths.appTypeDeclarations,\n      `/// <reference types=\"react-scripts\" />${os.EOL}`\n    );\n  }\n}\n\nmodule.exports = verifyTypeScriptSetup;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}