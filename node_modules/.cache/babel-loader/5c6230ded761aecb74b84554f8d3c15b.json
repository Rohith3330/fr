{"ast":null,"code":"/**\n * @fileoverview Utility functions for React components detection\n * @author Yannick Croissant\n */\n'use strict';\n/**\n * Search a particular variable in a list\n * @param {Array} variables The variables list.\n * @param {string} name The name of the variable to search.\n * @returns {Boolean} True if the variable was found, false if not.\n */\n\nfunction findVariable(variables, name) {\n  return variables.some(variable => variable.name === name);\n}\n/**\n * Find and return a particular variable in a list\n * @param {Array} variables The variables list.\n * @param {string} name The name of the variable to search.\n * @returns {Object} Variable if the variable was found, null if not.\n */\n\n\nfunction getVariable(variables, name) {\n  return variables.find(variable => variable.name === name);\n}\n/**\n * List all variable in a given scope\n *\n * Contain a patch for babel-eslint to avoid https://github.com/babel/babel-eslint/issues/21\n *\n * @param {Object} context The current rule context.\n * @returns {Array} The variables list\n */\n\n\nfunction variablesInScope(context) {\n  let scope = context.getScope();\n  let variables = scope.variables;\n\n  while (scope.type !== 'global') {\n    scope = scope.upper;\n    variables = scope.variables.concat(variables);\n  }\n\n  if (scope.childScopes.length) {\n    variables = scope.childScopes[0].variables.concat(variables);\n\n    if (scope.childScopes[0].childScopes.length) {\n      variables = scope.childScopes[0].childScopes[0].variables.concat(variables);\n    }\n  }\n\n  variables.reverse();\n  return variables;\n}\n/**\n * Find a variable by name in the current scope.\n * @param {Object} context The current rule context.\n * @param  {string} name Name of the variable to look for.\n * @returns {ASTNode|null} Return null if the variable could not be found, ASTNode otherwise.\n */\n\n\nfunction findVariableByName(context, name) {\n  const variable = getVariable(variablesInScope(context), name);\n\n  if (!variable || !variable.defs[0] || !variable.defs[0].node) {\n    return null;\n  }\n\n  if (variable.defs[0].node.type === 'TypeAlias') {\n    return variable.defs[0].node.right;\n  }\n\n  if (variable.defs[0].type === 'ImportBinding') {\n    return variable.defs[0].node;\n  }\n\n  return variable.defs[0].node.init;\n}\n/**\n * Returns the latest definition of the variable.\n * @param {Object} variable\n * @returns {Object | undefined} The latest variable definition or undefined.\n */\n\n\nfunction getLatestVariableDefinition(variable) {\n  return variable.defs[variable.defs.length - 1];\n}\n\nmodule.exports = {\n  findVariable,\n  findVariableByName,\n  getVariable,\n  variablesInScope,\n  getLatestVariableDefinition\n};","map":{"version":3,"names":["findVariable","variables","name","some","variable","getVariable","find","variablesInScope","context","scope","getScope","type","upper","concat","childScopes","length","reverse","findVariableByName","defs","node","right","init","getLatestVariableDefinition","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/util/variable.js"],"sourcesContent":["/**\n * @fileoverview Utility functions for React components detection\n * @author Yannick Croissant\n */\n\n'use strict';\n\n/**\n * Search a particular variable in a list\n * @param {Array} variables The variables list.\n * @param {string} name The name of the variable to search.\n * @returns {Boolean} True if the variable was found, false if not.\n */\nfunction findVariable(variables, name) {\n  return variables.some((variable) => variable.name === name);\n}\n\n/**\n * Find and return a particular variable in a list\n * @param {Array} variables The variables list.\n * @param {string} name The name of the variable to search.\n * @returns {Object} Variable if the variable was found, null if not.\n */\nfunction getVariable(variables, name) {\n  return variables.find((variable) => variable.name === name);\n}\n\n/**\n * List all variable in a given scope\n *\n * Contain a patch for babel-eslint to avoid https://github.com/babel/babel-eslint/issues/21\n *\n * @param {Object} context The current rule context.\n * @returns {Array} The variables list\n */\nfunction variablesInScope(context) {\n  let scope = context.getScope();\n  let variables = scope.variables;\n\n  while (scope.type !== 'global') {\n    scope = scope.upper;\n    variables = scope.variables.concat(variables);\n  }\n  if (scope.childScopes.length) {\n    variables = scope.childScopes[0].variables.concat(variables);\n    if (scope.childScopes[0].childScopes.length) {\n      variables = scope.childScopes[0].childScopes[0].variables.concat(variables);\n    }\n  }\n  variables.reverse();\n\n  return variables;\n}\n\n/**\n * Find a variable by name in the current scope.\n * @param {Object} context The current rule context.\n * @param  {string} name Name of the variable to look for.\n * @returns {ASTNode|null} Return null if the variable could not be found, ASTNode otherwise.\n */\nfunction findVariableByName(context, name) {\n  const variable = getVariable(variablesInScope(context), name);\n\n  if (!variable || !variable.defs[0] || !variable.defs[0].node) {\n    return null;\n  }\n\n  if (variable.defs[0].node.type === 'TypeAlias') {\n    return variable.defs[0].node.right;\n  }\n\n  if (variable.defs[0].type === 'ImportBinding') {\n    return variable.defs[0].node;\n  }\n\n  return variable.defs[0].node.init;\n}\n\n/**\n * Returns the latest definition of the variable.\n * @param {Object} variable\n * @returns {Object | undefined} The latest variable definition or undefined.\n */\nfunction getLatestVariableDefinition(variable) {\n  return variable.defs[variable.defs.length - 1];\n}\n\nmodule.exports = {\n  findVariable,\n  findVariableByName,\n  getVariable,\n  variablesInScope,\n  getLatestVariableDefinition,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,YAAT,CAAsBC,SAAtB,EAAiCC,IAAjC,EAAuC;EACrC,OAAOD,SAAS,CAACE,IAAV,CAAgBC,QAAD,IAAcA,QAAQ,CAACF,IAAT,KAAkBA,IAA/C,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,WAAT,CAAqBJ,SAArB,EAAgCC,IAAhC,EAAsC;EACpC,OAAOD,SAAS,CAACK,IAAV,CAAgBF,QAAD,IAAcA,QAAQ,CAACF,IAAT,KAAkBA,IAA/C,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,gBAAT,CAA0BC,OAA1B,EAAmC;EACjC,IAAIC,KAAK,GAAGD,OAAO,CAACE,QAAR,EAAZ;EACA,IAAIT,SAAS,GAAGQ,KAAK,CAACR,SAAtB;;EAEA,OAAOQ,KAAK,CAACE,IAAN,KAAe,QAAtB,EAAgC;IAC9BF,KAAK,GAAGA,KAAK,CAACG,KAAd;IACAX,SAAS,GAAGQ,KAAK,CAACR,SAAN,CAAgBY,MAAhB,CAAuBZ,SAAvB,CAAZ;EACD;;EACD,IAAIQ,KAAK,CAACK,WAAN,CAAkBC,MAAtB,EAA8B;IAC5Bd,SAAS,GAAGQ,KAAK,CAACK,WAAN,CAAkB,CAAlB,EAAqBb,SAArB,CAA+BY,MAA/B,CAAsCZ,SAAtC,CAAZ;;IACA,IAAIQ,KAAK,CAACK,WAAN,CAAkB,CAAlB,EAAqBA,WAArB,CAAiCC,MAArC,EAA6C;MAC3Cd,SAAS,GAAGQ,KAAK,CAACK,WAAN,CAAkB,CAAlB,EAAqBA,WAArB,CAAiC,CAAjC,EAAoCb,SAApC,CAA8CY,MAA9C,CAAqDZ,SAArD,CAAZ;IACD;EACF;;EACDA,SAAS,CAACe,OAAV;EAEA,OAAOf,SAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgB,kBAAT,CAA4BT,OAA5B,EAAqCN,IAArC,EAA2C;EACzC,MAAME,QAAQ,GAAGC,WAAW,CAACE,gBAAgB,CAACC,OAAD,CAAjB,EAA4BN,IAA5B,CAA5B;;EAEA,IAAI,CAACE,QAAD,IAAa,CAACA,QAAQ,CAACc,IAAT,CAAc,CAAd,CAAd,IAAkC,CAACd,QAAQ,CAACc,IAAT,CAAc,CAAd,EAAiBC,IAAxD,EAA8D;IAC5D,OAAO,IAAP;EACD;;EAED,IAAIf,QAAQ,CAACc,IAAT,CAAc,CAAd,EAAiBC,IAAjB,CAAsBR,IAAtB,KAA+B,WAAnC,EAAgD;IAC9C,OAAOP,QAAQ,CAACc,IAAT,CAAc,CAAd,EAAiBC,IAAjB,CAAsBC,KAA7B;EACD;;EAED,IAAIhB,QAAQ,CAACc,IAAT,CAAc,CAAd,EAAiBP,IAAjB,KAA0B,eAA9B,EAA+C;IAC7C,OAAOP,QAAQ,CAACc,IAAT,CAAc,CAAd,EAAiBC,IAAxB;EACD;;EAED,OAAOf,QAAQ,CAACc,IAAT,CAAc,CAAd,EAAiBC,IAAjB,CAAsBE,IAA7B;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,2BAAT,CAAqClB,QAArC,EAA+C;EAC7C,OAAOA,QAAQ,CAACc,IAAT,CAAcd,QAAQ,CAACc,IAAT,CAAcH,MAAd,GAAuB,CAArC,CAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiB;EACfxB,YADe;EAEfiB,kBAFe;EAGfZ,WAHe;EAIfE,gBAJe;EAKfe;AALe,CAAjB"},"metadata":{},"sourceType":"script"}