{"ast":null,"code":"import { compareFunctionCovs, compareRangeCovs, compareScriptCovs } from \"./compare\";\nimport { RangeTree } from \"./range-tree\";\n/**\n * Normalizes a process coverage.\n *\n * Sorts the scripts alphabetically by `url`.\n * Reassigns script ids: the script at index `0` receives `\"0\"`, the script at\n * index `1` receives `\"1\"` etc.\n * This does not normalize the script coverages.\n *\n * @param processCov Process coverage to normalize.\n */\n\nexport function normalizeProcessCov(processCov) {\n  processCov.result.sort(compareScriptCovs);\n\n  for (const [scriptId, scriptCov] of processCov.result.entries()) {\n    scriptCov.scriptId = scriptId.toString(10);\n  }\n}\n/**\n * Normalizes a process coverage deeply.\n *\n * Normalizes the script coverages deeply, then normalizes the process coverage\n * itself.\n *\n * @param processCov Process coverage to normalize.\n */\n\nexport function deepNormalizeProcessCov(processCov) {\n  for (const scriptCov of processCov.result) {\n    deepNormalizeScriptCov(scriptCov);\n  }\n\n  normalizeProcessCov(processCov);\n}\n/**\n * Normalizes a script coverage.\n *\n * Sorts the function by root range (pre-order sort).\n * This does not normalize the function coverages.\n *\n * @param scriptCov Script coverage to normalize.\n */\n\nexport function normalizeScriptCov(scriptCov) {\n  scriptCov.functions.sort(compareFunctionCovs);\n}\n/**\n * Normalizes a script coverage deeply.\n *\n * Normalizes the function coverages deeply, then normalizes the script coverage\n * itself.\n *\n * @param scriptCov Script coverage to normalize.\n */\n\nexport function deepNormalizeScriptCov(scriptCov) {\n  for (const funcCov of scriptCov.functions) {\n    normalizeFunctionCov(funcCov);\n  }\n\n  normalizeScriptCov(scriptCov);\n}\n/**\n * Normalizes a function coverage.\n *\n * Sorts the ranges (pre-order sort).\n * TODO: Tree-based normalization of the ranges.\n *\n * @param funcCov Function coverage to normalize.\n */\n\nexport function normalizeFunctionCov(funcCov) {\n  funcCov.ranges.sort(compareRangeCovs);\n  const tree = RangeTree.fromSortedRanges(funcCov.ranges);\n  normalizeRangeTree(tree);\n  funcCov.ranges = tree.toRanges();\n}\n/**\n * @internal\n */\n\nexport function normalizeRangeTree(tree) {\n  tree.normalize();\n}","map":{"version":3,"mappings":"AAAA,SAASA,mBAAT,EAA8BC,gBAA9B,EAAgDC,iBAAhD,QAAyE,WAAzE;AACA,SAASC,SAAT,QAA0B,cAA1B;AAGA;;;;;;;;;;;AAUA,OAAM,SAAUC,mBAAV,CAA8BC,UAA9B,EAAoD;EACxDA,UAAU,CAACC,MAAX,CAAkBC,IAAlB,CAAuBL,iBAAvB;;EACA,KAAK,MAAM,CAACM,QAAD,EAAWC,SAAX,CAAX,IAAoCJ,UAAU,CAACC,MAAX,CAAkBI,OAAlB,EAApC,EAAiE;IAC/DD,SAAS,CAACD,QAAV,GAAqBA,QAAQ,CAACG,QAAT,CAAkB,EAAlB,CAArB;EACD;AACF;AAED;;;;;;;;;AAQA,OAAM,SAAUC,uBAAV,CAAkCP,UAAlC,EAAwD;EAC5D,KAAK,MAAMI,SAAX,IAAwBJ,UAAU,CAACC,MAAnC,EAA2C;IACzCO,sBAAsB,CAACJ,SAAD,CAAtB;EACD;;EACDL,mBAAmB,CAACC,UAAD,CAAnB;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAUS,kBAAV,CAA6BL,SAA7B,EAAiD;EACrDA,SAAS,CAACM,SAAV,CAAoBR,IAApB,CAAyBP,mBAAzB;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAUa,sBAAV,CAAiCJ,SAAjC,EAAqD;EACzD,KAAK,MAAMO,OAAX,IAAsBP,SAAS,CAACM,SAAhC,EAA2C;IACzCE,oBAAoB,CAACD,OAAD,CAApB;EACD;;EACDF,kBAAkB,CAACL,SAAD,CAAlB;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAUQ,oBAAV,CAA+BD,OAA/B,EAAmD;EACvDA,OAAO,CAACE,MAAR,CAAeX,IAAf,CAAoBN,gBAApB;EACA,MAAMkB,IAAI,GAAchB,SAAS,CAACiB,gBAAV,CAA2BJ,OAAO,CAACE,MAAnC,CAAxB;EACAG,kBAAkB,CAACF,IAAD,CAAlB;EACAH,OAAO,CAACE,MAAR,GAAiBC,IAAI,CAACG,QAAL,EAAjB;AACD;AAED;;;;AAGA,OAAM,SAAUD,kBAAV,CAA6BF,IAA7B,EAA4C;EAChDA,IAAI,CAACI,SAAL;AACD","names":["compareFunctionCovs","compareRangeCovs","compareScriptCovs","RangeTree","normalizeProcessCov","processCov","result","sort","scriptId","scriptCov","entries","toString","deepNormalizeProcessCov","deepNormalizeScriptCov","normalizeScriptCov","functions","funcCov","normalizeFunctionCov","ranges","tree","fromSortedRanges","normalizeRangeTree","toRanges","normalize"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\_src\\normalize.ts"],"sourcesContent":["import { compareFunctionCovs, compareRangeCovs, compareScriptCovs } from \"./compare\";\nimport { RangeTree } from \"./range-tree\";\nimport { FunctionCov, ProcessCov, ScriptCov } from \"./types\";\n\n/**\n * Normalizes a process coverage.\n *\n * Sorts the scripts alphabetically by `url`.\n * Reassigns script ids: the script at index `0` receives `\"0\"`, the script at\n * index `1` receives `\"1\"` etc.\n * This does not normalize the script coverages.\n *\n * @param processCov Process coverage to normalize.\n */\nexport function normalizeProcessCov(processCov: ProcessCov): void {\n  processCov.result.sort(compareScriptCovs);\n  for (const [scriptId, scriptCov] of processCov.result.entries()) {\n    scriptCov.scriptId = scriptId.toString(10);\n  }\n}\n\n/**\n * Normalizes a process coverage deeply.\n *\n * Normalizes the script coverages deeply, then normalizes the process coverage\n * itself.\n *\n * @param processCov Process coverage to normalize.\n */\nexport function deepNormalizeProcessCov(processCov: ProcessCov): void {\n  for (const scriptCov of processCov.result) {\n    deepNormalizeScriptCov(scriptCov);\n  }\n  normalizeProcessCov(processCov);\n}\n\n/**\n * Normalizes a script coverage.\n *\n * Sorts the function by root range (pre-order sort).\n * This does not normalize the function coverages.\n *\n * @param scriptCov Script coverage to normalize.\n */\nexport function normalizeScriptCov(scriptCov: ScriptCov): void {\n  scriptCov.functions.sort(compareFunctionCovs);\n}\n\n/**\n * Normalizes a script coverage deeply.\n *\n * Normalizes the function coverages deeply, then normalizes the script coverage\n * itself.\n *\n * @param scriptCov Script coverage to normalize.\n */\nexport function deepNormalizeScriptCov(scriptCov: ScriptCov): void {\n  for (const funcCov of scriptCov.functions) {\n    normalizeFunctionCov(funcCov);\n  }\n  normalizeScriptCov(scriptCov);\n}\n\n/**\n * Normalizes a function coverage.\n *\n * Sorts the ranges (pre-order sort).\n * TODO: Tree-based normalization of the ranges.\n *\n * @param funcCov Function coverage to normalize.\n */\nexport function normalizeFunctionCov(funcCov: FunctionCov): void {\n  funcCov.ranges.sort(compareRangeCovs);\n  const tree: RangeTree = RangeTree.fromSortedRanges(funcCov.ranges)!;\n  normalizeRangeTree(tree);\n  funcCov.ranges = tree.toRanges();\n}\n\n/**\n * @internal\n */\nexport function normalizeRangeTree(tree: RangeTree): void {\n  tree.normalize();\n}\n"]},"metadata":{},"sourceType":"module"}