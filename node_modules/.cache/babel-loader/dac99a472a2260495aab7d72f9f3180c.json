{"ast":null,"code":"/**\n * @filedescription Merge Strategy Tests\n */\n\n/* global it, describe, beforeEach */\n\"use strict\"; //-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst assert = require(\"chai\").assert;\n\nconst {\n  ValidationStrategy\n} = require(\"../src/\"); //-----------------------------------------------------------------------------\n// Class\n//-----------------------------------------------------------------------------\n\n\ndescribe(\"ValidationStrategy\", () => {\n  describe(\"boolean\", () => {\n    it(\"should not throw an error when the value is a boolean\", () => {\n      ValidationStrategy.boolean(true);\n    });\n    it(\"should throw an error when the value is null\", () => {\n      assert.throws(() => {\n        ValidationStrategy.boolean(null);\n      }, /Expected a Boolean/);\n    });\n    it(\"should throw an error when the value is a string\", () => {\n      assert.throws(() => {\n        ValidationStrategy.boolean(\"foo\");\n      }, /Expected a Boolean/);\n    });\n    it(\"should throw an error when the value is a number\", () => {\n      assert.throws(() => {\n        ValidationStrategy.boolean(123);\n      }, /Expected a Boolean/);\n    });\n    it(\"should throw an error when the value is an object\", () => {\n      assert.throws(() => {\n        ValidationStrategy.boolean({});\n      }, /Expected a Boolean/);\n    });\n  });\n  describe(\"number\", () => {\n    it(\"should not throw an error when the value is a number\", () => {\n      ValidationStrategy.number(25);\n    });\n    it(\"should throw an error when the value is null\", () => {\n      assert.throws(() => {\n        ValidationStrategy.number(null);\n      }, /Expected a number/);\n    });\n    it(\"should throw an error when the value is a string\", () => {\n      assert.throws(() => {\n        ValidationStrategy.number(\"foo\");\n      }, /Expected a number/);\n    });\n    it(\"should throw an error when the value is a boolean\", () => {\n      assert.throws(() => {\n        ValidationStrategy.number(true);\n      }, /Expected a number/);\n    });\n    it(\"should throw an error when the value is an object\", () => {\n      assert.throws(() => {\n        ValidationStrategy.number({});\n      }, /Expected a number/);\n    });\n  });\n  describe(\"object\", () => {\n    it(\"should not throw an error when the value is an object\", () => {\n      ValidationStrategy.object({});\n    });\n    it(\"should throw an error when the value is null\", () => {\n      assert.throws(() => {\n        ValidationStrategy.object(null);\n      }, /Expected an object/);\n    });\n    it(\"should throw an error when the value is a string\", () => {\n      assert.throws(() => {\n        ValidationStrategy.object(\"\");\n      }, /Expected an object/);\n    });\n  });\n  describe(\"array\", () => {\n    it(\"should not throw an error when the value is an array\", () => {\n      ValidationStrategy.array([]);\n    });\n    it(\"should throw an error when the value is null\", () => {\n      assert.throws(() => {\n        ValidationStrategy.array(null);\n      }, /Expected an array/);\n    });\n    it(\"should throw an error when the value is a string\", () => {\n      assert.throws(() => {\n        ValidationStrategy.array(\"\");\n      }, /Expected an array/);\n    });\n    it(\"should throw an error when the value is an object\", () => {\n      assert.throws(() => {\n        ValidationStrategy.array({});\n      }, /Expected an array/);\n    });\n  });\n  describe(\"object?\", () => {\n    it(\"should not throw an error when the value is an object\", () => {\n      ValidationStrategy[\"object?\"]({});\n    });\n    it(\"should not throw an error when the value is null\", () => {\n      ValidationStrategy[\"object?\"](null);\n    });\n    it(\"should throw an error when the value is a string\", () => {\n      assert.throws(() => {\n        ValidationStrategy[\"object?\"](\"\");\n      }, /Expected an object/);\n    });\n  });\n  describe(\"string\", () => {\n    it(\"should not throw an error when the value is a string\", () => {\n      ValidationStrategy.string(\"foo\");\n    });\n    it(\"should not throw an error when the value is an empty string\", () => {\n      ValidationStrategy.string(\"\");\n    });\n    it(\"should throw an error when the value is null\", () => {\n      assert.throws(() => {\n        ValidationStrategy.string(null);\n      }, /Expected a string/);\n    });\n    it(\"should throw an error when the value is an object\", () => {\n      assert.throws(() => {\n        ValidationStrategy.string({});\n      }, /Expected a string/);\n    });\n  });\n  describe(\"string!\", () => {\n    it(\"should not throw an error when the value is an string\", () => {\n      ValidationStrategy[\"string!\"](\"foo\");\n    });\n    it(\"should throw an error when the value is an empty string\", () => {\n      assert.throws(() => {\n        ValidationStrategy[\"string!\"](\"\");\n      }, /Expected a non-empty string/);\n    });\n    it(\"should throw an error when the value is null\", () => {\n      assert.throws(() => {\n        ValidationStrategy[\"string!\"](null);\n      }, /Expected a non-empty string/);\n    });\n    it(\"should throw an error when the value is an object\", () => {\n      assert.throws(() => {\n        ValidationStrategy[\"string!\"]({});\n      }, /Expected a non-empty string/);\n    });\n  });\n});","map":{"version":3,"names":["assert","require","ValidationStrategy","describe","it","boolean","throws","number","object","array","string"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@humanwhocodes/object-schema/tests/validation-strategy.js"],"sourcesContent":["/**\n * @filedescription Merge Strategy Tests\n */\n/* global it, describe, beforeEach */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst assert = require(\"chai\").assert;\nconst { ValidationStrategy } = require(\"../src/\");\n\n//-----------------------------------------------------------------------------\n// Class\n//-----------------------------------------------------------------------------\n\ndescribe(\"ValidationStrategy\", () => {\n\n    describe(\"boolean\", () => {\n        it(\"should not throw an error when the value is a boolean\", () => {\n            ValidationStrategy.boolean(true);\n        });\n\n        it(\"should throw an error when the value is null\", () => {\n            assert.throws(() => {\n                ValidationStrategy.boolean(null);\n            }, /Expected a Boolean/);\n        });\n\n        it(\"should throw an error when the value is a string\", () => {\n            assert.throws(() => {\n                ValidationStrategy.boolean(\"foo\");\n            }, /Expected a Boolean/);\n        });\n\n        it(\"should throw an error when the value is a number\", () => {\n            assert.throws(() => {\n                ValidationStrategy.boolean(123);\n            }, /Expected a Boolean/);\n        });\n\n        it(\"should throw an error when the value is an object\", () => {\n            assert.throws(() => {\n                ValidationStrategy.boolean({});\n            }, /Expected a Boolean/);\n        });\n    });\n\n    describe(\"number\", () => {\n        it(\"should not throw an error when the value is a number\", () => {\n            ValidationStrategy.number(25);\n        });\n\n        it(\"should throw an error when the value is null\", () => {\n            assert.throws(() => {\n                ValidationStrategy.number(null);\n            }, /Expected a number/);\n        });\n\n        it(\"should throw an error when the value is a string\", () => {\n            assert.throws(() => {\n                ValidationStrategy.number(\"foo\");\n            }, /Expected a number/);\n        });\n\n        it(\"should throw an error when the value is a boolean\", () => {\n            assert.throws(() => {\n                ValidationStrategy.number(true);\n            }, /Expected a number/);\n        });\n\n        it(\"should throw an error when the value is an object\", () => {\n            assert.throws(() => {\n                ValidationStrategy.number({});\n            }, /Expected a number/);\n        });\n    });\n\n    describe(\"object\", () => {\n        it(\"should not throw an error when the value is an object\", () => {\n            ValidationStrategy.object({});\n        });\n\n        it(\"should throw an error when the value is null\", () => {\n            assert.throws(() => {\n                ValidationStrategy.object(null);\n            }, /Expected an object/);\n        });\n\n        it(\"should throw an error when the value is a string\", () => {\n            assert.throws(() => {\n                ValidationStrategy.object(\"\");\n            }, /Expected an object/);\n        });\n    });\n\n    describe(\"array\", () => {\n        it(\"should not throw an error when the value is an array\", () => {\n            ValidationStrategy.array([]);\n        });\n\n        it(\"should throw an error when the value is null\", () => {\n            assert.throws(() => {\n                ValidationStrategy.array(null);\n            }, /Expected an array/);\n        });\n\n        it(\"should throw an error when the value is a string\", () => {\n            assert.throws(() => {\n                ValidationStrategy.array(\"\");\n            }, /Expected an array/);\n        });\n\n        it(\"should throw an error when the value is an object\", () => {\n            assert.throws(() => {\n                ValidationStrategy.array({});\n            }, /Expected an array/);\n        });\n    });\n\n    describe(\"object?\", () => {\n        it(\"should not throw an error when the value is an object\", () => {\n            ValidationStrategy[\"object?\"]({});\n        });\n\n        it(\"should not throw an error when the value is null\", () => {\n            ValidationStrategy[\"object?\"](null);\n        });\n\n        it(\"should throw an error when the value is a string\", () => {\n            assert.throws(() => {\n                ValidationStrategy[\"object?\"](\"\");\n            }, /Expected an object/);\n        });\n    });\n\n    describe(\"string\", () => {\n        it(\"should not throw an error when the value is a string\", () => {\n            ValidationStrategy.string(\"foo\");\n        });\n\n        it(\"should not throw an error when the value is an empty string\", () => {\n            ValidationStrategy.string(\"\");\n        });\n\n        it(\"should throw an error when the value is null\", () => {\n            assert.throws(() => {\n                ValidationStrategy.string(null);\n            }, /Expected a string/);\n        });\n\n        it(\"should throw an error when the value is an object\", () => {\n            assert.throws(() => {\n                ValidationStrategy.string({});\n            }, /Expected a string/);\n        });\n    });\n\n    describe(\"string!\", () => {\n        it(\"should not throw an error when the value is an string\", () => {\n            ValidationStrategy[\"string!\"](\"foo\");\n        });\n\n        it(\"should throw an error when the value is an empty string\", () => {\n            assert.throws(() => {\n                ValidationStrategy[\"string!\"](\"\");\n            }, /Expected a non-empty string/);\n        });\n\n        it(\"should throw an error when the value is null\", () => {\n            assert.throws(() => {\n                ValidationStrategy[\"string!\"](null);\n            }, /Expected a non-empty string/);\n        });\n\n        it(\"should throw an error when the value is an object\", () => {\n            assert.throws(() => {\n                ValidationStrategy[\"string!\"]({});\n            }, /Expected a non-empty string/);\n        });\n    });\n\n\n});\n"],"mappings":"AAAA;AACA;AACA;;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAA/B;;AACA,MAAM;EAAEE;AAAF,IAAyBD,OAAO,CAAC,SAAD,CAAtC,C,CAEA;AACA;AACA;;;AAEAE,QAAQ,CAAC,oBAAD,EAAuB,MAAM;EAEjCA,QAAQ,CAAC,SAAD,EAAY,MAAM;IACtBC,EAAE,CAAC,uDAAD,EAA0D,MAAM;MAC9DF,kBAAkB,CAACG,OAAnB,CAA2B,IAA3B;IACH,CAFC,CAAF;IAIAD,EAAE,CAAC,8CAAD,EAAiD,MAAM;MACrDJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACG,OAAnB,CAA2B,IAA3B;MACH,CAFD,EAEG,oBAFH;IAGH,CAJC,CAAF;IAMAD,EAAE,CAAC,kDAAD,EAAqD,MAAM;MACzDJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACG,OAAnB,CAA2B,KAA3B;MACH,CAFD,EAEG,oBAFH;IAGH,CAJC,CAAF;IAMAD,EAAE,CAAC,kDAAD,EAAqD,MAAM;MACzDJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACG,OAAnB,CAA2B,GAA3B;MACH,CAFD,EAEG,oBAFH;IAGH,CAJC,CAAF;IAMAD,EAAE,CAAC,mDAAD,EAAsD,MAAM;MAC1DJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACG,OAAnB,CAA2B,EAA3B;MACH,CAFD,EAEG,oBAFH;IAGH,CAJC,CAAF;EAKH,CA5BO,CAAR;EA8BAF,QAAQ,CAAC,QAAD,EAAW,MAAM;IACrBC,EAAE,CAAC,sDAAD,EAAyD,MAAM;MAC7DF,kBAAkB,CAACK,MAAnB,CAA0B,EAA1B;IACH,CAFC,CAAF;IAIAH,EAAE,CAAC,8CAAD,EAAiD,MAAM;MACrDJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACK,MAAnB,CAA0B,IAA1B;MACH,CAFD,EAEG,mBAFH;IAGH,CAJC,CAAF;IAMAH,EAAE,CAAC,kDAAD,EAAqD,MAAM;MACzDJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACK,MAAnB,CAA0B,KAA1B;MACH,CAFD,EAEG,mBAFH;IAGH,CAJC,CAAF;IAMAH,EAAE,CAAC,mDAAD,EAAsD,MAAM;MAC1DJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACK,MAAnB,CAA0B,IAA1B;MACH,CAFD,EAEG,mBAFH;IAGH,CAJC,CAAF;IAMAH,EAAE,CAAC,mDAAD,EAAsD,MAAM;MAC1DJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACK,MAAnB,CAA0B,EAA1B;MACH,CAFD,EAEG,mBAFH;IAGH,CAJC,CAAF;EAKH,CA5BO,CAAR;EA8BAJ,QAAQ,CAAC,QAAD,EAAW,MAAM;IACrBC,EAAE,CAAC,uDAAD,EAA0D,MAAM;MAC9DF,kBAAkB,CAACM,MAAnB,CAA0B,EAA1B;IACH,CAFC,CAAF;IAIAJ,EAAE,CAAC,8CAAD,EAAiD,MAAM;MACrDJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACM,MAAnB,CAA0B,IAA1B;MACH,CAFD,EAEG,oBAFH;IAGH,CAJC,CAAF;IAMAJ,EAAE,CAAC,kDAAD,EAAqD,MAAM;MACzDJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACM,MAAnB,CAA0B,EAA1B;MACH,CAFD,EAEG,oBAFH;IAGH,CAJC,CAAF;EAKH,CAhBO,CAAR;EAkBAL,QAAQ,CAAC,OAAD,EAAU,MAAM;IACpBC,EAAE,CAAC,sDAAD,EAAyD,MAAM;MAC7DF,kBAAkB,CAACO,KAAnB,CAAyB,EAAzB;IACH,CAFC,CAAF;IAIAL,EAAE,CAAC,8CAAD,EAAiD,MAAM;MACrDJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACO,KAAnB,CAAyB,IAAzB;MACH,CAFD,EAEG,mBAFH;IAGH,CAJC,CAAF;IAMAL,EAAE,CAAC,kDAAD,EAAqD,MAAM;MACzDJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACO,KAAnB,CAAyB,EAAzB;MACH,CAFD,EAEG,mBAFH;IAGH,CAJC,CAAF;IAMAL,EAAE,CAAC,mDAAD,EAAsD,MAAM;MAC1DJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACO,KAAnB,CAAyB,EAAzB;MACH,CAFD,EAEG,mBAFH;IAGH,CAJC,CAAF;EAKH,CAtBO,CAAR;EAwBAN,QAAQ,CAAC,SAAD,EAAY,MAAM;IACtBC,EAAE,CAAC,uDAAD,EAA0D,MAAM;MAC9DF,kBAAkB,CAAC,SAAD,CAAlB,CAA8B,EAA9B;IACH,CAFC,CAAF;IAIAE,EAAE,CAAC,kDAAD,EAAqD,MAAM;MACzDF,kBAAkB,CAAC,SAAD,CAAlB,CAA8B,IAA9B;IACH,CAFC,CAAF;IAIAE,EAAE,CAAC,kDAAD,EAAqD,MAAM;MACzDJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAAC,SAAD,CAAlB,CAA8B,EAA9B;MACH,CAFD,EAEG,oBAFH;IAGH,CAJC,CAAF;EAKH,CAdO,CAAR;EAgBAC,QAAQ,CAAC,QAAD,EAAW,MAAM;IACrBC,EAAE,CAAC,sDAAD,EAAyD,MAAM;MAC7DF,kBAAkB,CAACQ,MAAnB,CAA0B,KAA1B;IACH,CAFC,CAAF;IAIAN,EAAE,CAAC,6DAAD,EAAgE,MAAM;MACpEF,kBAAkB,CAACQ,MAAnB,CAA0B,EAA1B;IACH,CAFC,CAAF;IAIAN,EAAE,CAAC,8CAAD,EAAiD,MAAM;MACrDJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACQ,MAAnB,CAA0B,IAA1B;MACH,CAFD,EAEG,mBAFH;IAGH,CAJC,CAAF;IAMAN,EAAE,CAAC,mDAAD,EAAsD,MAAM;MAC1DJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAACQ,MAAnB,CAA0B,EAA1B;MACH,CAFD,EAEG,mBAFH;IAGH,CAJC,CAAF;EAKH,CApBO,CAAR;EAsBAP,QAAQ,CAAC,SAAD,EAAY,MAAM;IACtBC,EAAE,CAAC,uDAAD,EAA0D,MAAM;MAC9DF,kBAAkB,CAAC,SAAD,CAAlB,CAA8B,KAA9B;IACH,CAFC,CAAF;IAIAE,EAAE,CAAC,yDAAD,EAA4D,MAAM;MAChEJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAAC,SAAD,CAAlB,CAA8B,EAA9B;MACH,CAFD,EAEG,6BAFH;IAGH,CAJC,CAAF;IAMAE,EAAE,CAAC,8CAAD,EAAiD,MAAM;MACrDJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAAC,SAAD,CAAlB,CAA8B,IAA9B;MACH,CAFD,EAEG,6BAFH;IAGH,CAJC,CAAF;IAMAE,EAAE,CAAC,mDAAD,EAAsD,MAAM;MAC1DJ,MAAM,CAACM,MAAP,CAAc,MAAM;QAChBJ,kBAAkB,CAAC,SAAD,CAAlB,CAA8B,EAA9B;MACH,CAFD,EAEG,6BAFH;IAGH,CAJC,CAAF;EAKH,CAtBO,CAAR;AAyBH,CAvKO,CAAR"},"metadata":{},"sourceType":"script"}