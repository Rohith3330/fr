{"ast":null,"code":"import { minify, _default_options } from \"../main.js\";\nimport { parse } from \"./parse.js\";\nimport { AST_Assign, AST_Array, AST_Constant, AST_Node, AST_PropAccess, AST_RegExp, AST_Sequence, AST_Symbol, AST_Token, walk } from \"./ast.js\";\nimport { OutputStream } from \"./output.js\";\nexport async function run_cli(_ref) {\n  let {\n    program,\n    packageJson,\n    fs,\n    path\n  } = _ref;\n  const skip_keys = new Set([\"cname\", \"parent_scope\", \"scope\", \"uses_eval\", \"uses_with\"]);\n  var files = {};\n  var options = {\n    compress: false,\n    mangle: false\n  };\n  const default_options = await _default_options();\n  program.version(packageJson.name + \" \" + packageJson.version);\n  program.parseArgv = program.parse;\n  program.parse = undefined;\n  if (process.argv.includes(\"ast\")) program.helpInformation = describe_ast;else if (process.argv.includes(\"options\")) program.helpInformation = function () {\n    var text = [];\n\n    for (var option in default_options) {\n      text.push(\"--\" + (option === \"sourceMap\" ? \"source-map\" : option) + \" options:\");\n      text.push(format_object(default_options[option]));\n      text.push(\"\");\n    }\n\n    return text.join(\"\\n\");\n  };\n  program.option(\"-p, --parse <options>\", \"Specify parser options.\", parse_js());\n  program.option(\"-c, --compress [options]\", \"Enable compressor/specify compressor options.\", parse_js());\n  program.option(\"-m, --mangle [options]\", \"Mangle names/specify mangler options.\", parse_js());\n  program.option(\"--mangle-props [options]\", \"Mangle properties/specify mangler options.\", parse_js());\n  program.option(\"-f, --format [options]\", \"Format options.\", parse_js());\n  program.option(\"-b, --beautify [options]\", \"Alias for --format.\", parse_js());\n  program.option(\"-o, --output <file>\", \"Output file (default STDOUT).\");\n  program.option(\"--comments [filter]\", \"Preserve copyright comments in the output.\");\n  program.option(\"--config-file <file>\", \"Read minify() options from JSON file.\");\n  program.option(\"-d, --define <expr>[=value]\", \"Global definitions.\", parse_js(\"define\"));\n  program.option(\"--ecma <version>\", \"Specify ECMAScript release: 5, 2015, 2016 or 2017...\");\n  program.option(\"-e, --enclose [arg[,...][:value[,...]]]\", \"Embed output in a big function with configurable arguments and values.\");\n  program.option(\"--ie8\", \"Support non-standard Internet Explorer 8.\");\n  program.option(\"--keep-classnames\", \"Do not mangle/drop class names.\");\n  program.option(\"--keep-fnames\", \"Do not mangle/drop function names. Useful for code relying on Function.prototype.name.\");\n  program.option(\"--module\", \"Input is an ES6 module\");\n  program.option(\"--name-cache <file>\", \"File to hold mangled name mappings.\");\n  program.option(\"--rename\", \"Force symbol expansion.\");\n  program.option(\"--no-rename\", \"Disable symbol expansion.\");\n  program.option(\"--safari10\", \"Support non-standard Safari 10.\");\n  program.option(\"--source-map [options]\", \"Enable source map/specify source map options.\", parse_js());\n  program.option(\"--timings\", \"Display operations run time on STDERR.\");\n  program.option(\"--toplevel\", \"Compress and/or mangle variables in toplevel scope.\");\n  program.option(\"--wrap <name>\", \"Embed everything as a function with “exports” corresponding to “name” globally.\");\n  program.arguments(\"[files...]\").parseArgv(process.argv);\n\n  if (program.configFile) {\n    options = JSON.parse(read_file(program.configFile));\n  }\n\n  if (!program.output && program.sourceMap && program.sourceMap.url != \"inline\") {\n    fatal(\"ERROR: cannot write source map to STDOUT\");\n  }\n\n  [\"compress\", \"enclose\", \"ie8\", \"mangle\", \"module\", \"safari10\", \"sourceMap\", \"toplevel\", \"wrap\"].forEach(function (name) {\n    if (name in program) {\n      options[name] = program[name];\n    }\n  });\n\n  if (\"ecma\" in program) {\n    if (program.ecma != (program.ecma | 0)) fatal(\"ERROR: ecma must be an integer\");\n    const ecma = program.ecma | 0;\n    if (ecma > 5 && ecma < 2015) options.ecma = ecma + 2009;else options.ecma = ecma;\n  }\n\n  if (program.format || program.beautify) {\n    const chosenOption = program.format || program.beautify;\n    options.format = typeof chosenOption === \"object\" ? chosenOption : {};\n  }\n\n  if (program.comments) {\n    if (typeof options.format != \"object\") options.format = {};\n    options.format.comments = typeof program.comments == \"string\" ? program.comments == \"false\" ? false : program.comments : \"some\";\n  }\n\n  if (program.define) {\n    if (typeof options.compress != \"object\") options.compress = {};\n    if (typeof options.compress.global_defs != \"object\") options.compress.global_defs = {};\n\n    for (var expr in program.define) {\n      options.compress.global_defs[expr] = program.define[expr];\n    }\n  }\n\n  if (program.keepClassnames) {\n    options.keep_classnames = true;\n  }\n\n  if (program.keepFnames) {\n    options.keep_fnames = true;\n  }\n\n  if (program.mangleProps) {\n    if (program.mangleProps.domprops) {\n      delete program.mangleProps.domprops;\n    } else {\n      if (typeof program.mangleProps != \"object\") program.mangleProps = {};\n      if (!Array.isArray(program.mangleProps.reserved)) program.mangleProps.reserved = [];\n    }\n\n    if (typeof options.mangle != \"object\") options.mangle = {};\n    options.mangle.properties = program.mangleProps;\n  }\n\n  if (program.nameCache) {\n    options.nameCache = JSON.parse(read_file(program.nameCache, \"{}\"));\n  }\n\n  if (program.output == \"ast\") {\n    options.format = {\n      ast: true,\n      code: false\n    };\n  }\n\n  if (program.parse) {\n    if (!program.parse.acorn && !program.parse.spidermonkey) {\n      options.parse = program.parse;\n    } else if (program.sourceMap && program.sourceMap.content == \"inline\") {\n      fatal(\"ERROR: inline source map only works with built-in parser\");\n    }\n  }\n\n  if (~program.rawArgs.indexOf(\"--rename\")) {\n    options.rename = true;\n  } else if (!program.rename) {\n    options.rename = false;\n  }\n\n  let convert_path = name => name;\n\n  if (typeof program.sourceMap == \"object\" && \"base\" in program.sourceMap) {\n    convert_path = function () {\n      var base = program.sourceMap.base;\n      delete options.sourceMap.base;\n      return function (name) {\n        return path.relative(base, name);\n      };\n    }();\n  }\n\n  let filesList;\n\n  if (options.files && options.files.length) {\n    filesList = options.files;\n    delete options.files;\n  } else if (program.args.length) {\n    filesList = program.args;\n  }\n\n  if (filesList) {\n    simple_glob(filesList).forEach(function (name) {\n      files[convert_path(name)] = read_file(name);\n    });\n  } else {\n    await new Promise(resolve => {\n      var chunks = [];\n      process.stdin.setEncoding(\"utf8\");\n      process.stdin.on(\"data\", function (chunk) {\n        chunks.push(chunk);\n      }).on(\"end\", function () {\n        files = [chunks.join(\"\")];\n        resolve();\n      });\n      process.stdin.resume();\n    });\n  }\n\n  await run_cli();\n\n  function convert_ast(fn) {\n    return AST_Node.from_mozilla_ast(Object.keys(files).reduce(fn, null));\n  }\n\n  async function run_cli() {\n    var content = program.sourceMap && program.sourceMap.content;\n\n    if (content && content !== \"inline\") {\n      options.sourceMap.content = read_file(content, content);\n    }\n\n    if (program.timings) options.timings = true;\n\n    try {\n      if (program.parse) {\n        if (program.parse.acorn) {\n          files = convert_ast(function (toplevel, name) {\n            return require(\"acorn\").parse(files[name], {\n              ecmaVersion: 2018,\n              locations: true,\n              program: toplevel,\n              sourceFile: name,\n              sourceType: options.module || program.parse.module ? \"module\" : \"script\"\n            });\n          });\n        } else if (program.parse.spidermonkey) {\n          files = convert_ast(function (toplevel, name) {\n            var obj = JSON.parse(files[name]);\n            if (!toplevel) return obj;\n            toplevel.body = toplevel.body.concat(obj.body);\n            return toplevel;\n          });\n        }\n      }\n    } catch (ex) {\n      fatal(ex);\n    }\n\n    let result;\n\n    try {\n      result = await minify(files, options, fs);\n    } catch (ex) {\n      if (ex.name == \"SyntaxError\") {\n        print_error(\"Parse error at \" + ex.filename + \":\" + ex.line + \",\" + ex.col);\n        var col = ex.col;\n        var lines = files[ex.filename].split(/\\r?\\n/);\n        var line = lines[ex.line - 1];\n\n        if (!line && !col) {\n          line = lines[ex.line - 2];\n          col = line.length;\n        }\n\n        if (line) {\n          var limit = 70;\n\n          if (col > limit) {\n            line = line.slice(col - limit);\n            col = limit;\n          }\n\n          print_error(line.slice(0, 80));\n          print_error(line.slice(0, col).replace(/\\S/g, \" \") + \"^\");\n        }\n      }\n\n      if (ex.defs) {\n        print_error(\"Supported options:\");\n        print_error(format_object(ex.defs));\n      }\n\n      fatal(ex);\n      return;\n    }\n\n    if (program.output == \"ast\") {\n      if (!options.compress && !options.mangle) {\n        result.ast.figure_out_scope({});\n      }\n\n      console.log(JSON.stringify(result.ast, function (key, value) {\n        if (value) switch (key) {\n          case \"thedef\":\n            return symdef(value);\n\n          case \"enclosed\":\n            return value.length ? value.map(symdef) : undefined;\n\n          case \"variables\":\n          case \"globals\":\n            return value.size ? collect_from_map(value, symdef) : undefined;\n        }\n        if (skip_keys.has(key)) return;\n        if (value instanceof AST_Token) return;\n        if (value instanceof Map) return;\n\n        if (value instanceof AST_Node) {\n          var result = {\n            _class: \"AST_\" + value.TYPE\n          };\n\n          if (value.block_scope) {\n            result.variables = value.block_scope.variables;\n            result.enclosed = value.block_scope.enclosed;\n          }\n\n          value.CTOR.PROPS.forEach(function (prop) {\n            if (prop !== \"block_scope\") {\n              result[prop] = value[prop];\n            }\n          });\n          return result;\n        }\n\n        return value;\n      }, 2));\n    } else if (program.output == \"spidermonkey\") {\n      try {\n        const minified = await minify(result.code, {\n          compress: false,\n          mangle: false,\n          format: {\n            ast: true,\n            code: false\n          }\n        }, fs);\n        console.log(JSON.stringify(minified.ast.to_mozilla_ast(), null, 2));\n      } catch (ex) {\n        fatal(ex);\n        return;\n      }\n    } else if (program.output) {\n      fs.writeFileSync(program.output, result.code);\n\n      if (options.sourceMap && options.sourceMap.url !== \"inline\" && result.map) {\n        fs.writeFileSync(program.output + \".map\", result.map);\n      }\n    } else {\n      console.log(result.code);\n    }\n\n    if (program.nameCache) {\n      fs.writeFileSync(program.nameCache, JSON.stringify(options.nameCache));\n    }\n\n    if (result.timings) for (var phase in result.timings) {\n      print_error(\"- \" + phase + \": \" + result.timings[phase].toFixed(3) + \"s\");\n    }\n  }\n\n  function fatal(message) {\n    if (message instanceof Error) message = message.stack.replace(/^\\S*?Error:/, \"ERROR:\");\n    print_error(message);\n    process.exit(1);\n  } // A file glob function that only supports \"*\" and \"?\" wildcards in the basename.\n  // Example: \"foo/bar/*baz??.*.js\"\n  // Argument `glob` may be a string or an array of strings.\n  // Returns an array of strings. Garbage in, garbage out.\n\n\n  function simple_glob(glob) {\n    if (Array.isArray(glob)) {\n      return [].concat.apply([], glob.map(simple_glob));\n    }\n\n    if (glob && glob.match(/[*?]/)) {\n      var dir = path.dirname(glob);\n\n      try {\n        var entries = fs.readdirSync(dir);\n      } catch (ex) {}\n\n      if (entries) {\n        var pattern = \"^\" + path.basename(glob).replace(/[.+^$[\\]\\\\(){}]/g, \"\\\\$&\").replace(/\\*/g, \"[^/\\\\\\\\]*\").replace(/\\?/g, \"[^/\\\\\\\\]\") + \"$\";\n        var mod = process.platform === \"win32\" ? \"i\" : \"\";\n        var rx = new RegExp(pattern, mod);\n        var results = entries.filter(function (name) {\n          return rx.test(name);\n        }).map(function (name) {\n          return path.join(dir, name);\n        });\n        if (results.length) return results;\n      }\n    }\n\n    return [glob];\n  }\n\n  function read_file(path, default_value) {\n    try {\n      return fs.readFileSync(path, \"utf8\");\n    } catch (ex) {\n      if ((ex.code == \"ENOENT\" || ex.code == \"ENAMETOOLONG\") && default_value != null) return default_value;\n      fatal(ex);\n    }\n  }\n\n  function parse_js(flag) {\n    return function (value, options) {\n      options = options || {};\n\n      try {\n        walk(parse(value, {\n          expression: true\n        }), node => {\n          if (node instanceof AST_Assign) {\n            var name = node.left.print_to_string();\n            var value = node.right;\n\n            if (flag) {\n              options[name] = value;\n            } else if (value instanceof AST_Array) {\n              options[name] = value.elements.map(to_string);\n            } else if (value instanceof AST_RegExp) {\n              value = value.value;\n              options[name] = new RegExp(value.source, value.flags);\n            } else {\n              options[name] = to_string(value);\n            }\n\n            return true;\n          }\n\n          if (node instanceof AST_Symbol || node instanceof AST_PropAccess) {\n            var name = node.print_to_string();\n            options[name] = true;\n            return true;\n          }\n\n          if (!(node instanceof AST_Sequence)) throw node;\n\n          function to_string(value) {\n            return value instanceof AST_Constant ? value.getValue() : value.print_to_string({\n              quote_keys: true\n            });\n          }\n        });\n      } catch (ex) {\n        if (flag) {\n          fatal(\"Error parsing arguments for '\" + flag + \"': \" + value);\n        } else {\n          options[value] = null;\n        }\n      }\n\n      return options;\n    };\n  }\n\n  function symdef(def) {\n    var ret = 1e6 + def.id + \" \" + def.name;\n    if (def.mangled_name) ret += \" \" + def.mangled_name;\n    return ret;\n  }\n\n  function collect_from_map(map, callback) {\n    var result = [];\n    map.forEach(function (def) {\n      result.push(callback(def));\n    });\n    return result;\n  }\n\n  function format_object(obj) {\n    var lines = [];\n    var padding = \"\";\n    Object.keys(obj).map(function (name) {\n      if (padding.length < name.length) padding = Array(name.length + 1).join(\" \");\n      return [name, JSON.stringify(obj[name])];\n    }).forEach(function (tokens) {\n      lines.push(\"  \" + tokens[0] + padding.slice(tokens[0].length - 2) + tokens[1]);\n    });\n    return lines.join(\"\\n\");\n  }\n\n  function print_error(msg) {\n    process.stderr.write(msg);\n    process.stderr.write(\"\\n\");\n  }\n\n  function describe_ast() {\n    var out = OutputStream({\n      beautify: true\n    });\n\n    function doitem(ctor) {\n      out.print(\"AST_\" + ctor.TYPE);\n      const props = ctor.SELF_PROPS.filter(prop => !/^\\$/.test(prop));\n\n      if (props.length > 0) {\n        out.space();\n        out.with_parens(function () {\n          props.forEach(function (prop, i) {\n            if (i) out.space();\n            out.print(prop);\n          });\n        });\n      }\n\n      if (ctor.documentation) {\n        out.space();\n        out.print_string(ctor.documentation);\n      }\n\n      if (ctor.SUBCLASSES.length > 0) {\n        out.space();\n        out.with_block(function () {\n          ctor.SUBCLASSES.forEach(function (ctor) {\n            out.indent();\n            doitem(ctor);\n            out.newline();\n          });\n        });\n      }\n    }\n\n    doitem(AST_Node);\n    return out + \"\\n\";\n  }\n}","map":{"version":3,"names":["minify","_default_options","parse","AST_Assign","AST_Array","AST_Constant","AST_Node","AST_PropAccess","AST_RegExp","AST_Sequence","AST_Symbol","AST_Token","walk","OutputStream","run_cli","program","packageJson","fs","path","skip_keys","Set","files","options","compress","mangle","default_options","version","name","parseArgv","undefined","process","argv","includes","helpInformation","describe_ast","text","option","push","format_object","join","parse_js","arguments","configFile","JSON","read_file","output","sourceMap","url","fatal","forEach","ecma","format","beautify","chosenOption","comments","define","global_defs","expr","keepClassnames","keep_classnames","keepFnames","keep_fnames","mangleProps","domprops","Array","isArray","reserved","properties","nameCache","ast","code","acorn","spidermonkey","content","rawArgs","indexOf","rename","convert_path","base","relative","filesList","length","args","simple_glob","Promise","resolve","chunks","stdin","setEncoding","on","chunk","resume","convert_ast","fn","from_mozilla_ast","Object","keys","reduce","timings","toplevel","require","ecmaVersion","locations","sourceFile","sourceType","module","obj","body","concat","ex","result","print_error","filename","line","col","lines","split","limit","slice","replace","defs","figure_out_scope","console","log","stringify","key","value","symdef","map","size","collect_from_map","has","Map","_class","TYPE","block_scope","variables","enclosed","CTOR","PROPS","prop","minified","to_mozilla_ast","writeFileSync","phase","toFixed","message","Error","stack","exit","glob","apply","match","dir","dirname","entries","readdirSync","pattern","basename","mod","platform","rx","RegExp","results","filter","test","default_value","readFileSync","flag","expression","node","left","print_to_string","right","elements","to_string","source","flags","getValue","quote_keys","def","ret","id","mangled_name","callback","padding","tokens","msg","stderr","write","out","doitem","ctor","print","props","SELF_PROPS","space","with_parens","i","documentation","print_string","SUBCLASSES","with_block","indent","newline"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/terser/lib/cli.js"],"sourcesContent":["import { minify, _default_options } from \"../main.js\";\nimport { parse } from \"./parse.js\";\nimport {\n    AST_Assign,\n    AST_Array,\n    AST_Constant,\n    AST_Node,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Sequence,\n    AST_Symbol,\n    AST_Token,\n    walk\n} from \"./ast.js\";\nimport { OutputStream } from \"./output.js\";\n\nexport async function run_cli({ program, packageJson, fs, path }) {\n    const skip_keys = new Set([ \"cname\", \"parent_scope\", \"scope\", \"uses_eval\", \"uses_with\" ]);\n    var files = {};\n    var options = {\n        compress: false,\n        mangle: false\n    };\n    const default_options = await _default_options();\n    program.version(packageJson.name + \" \" + packageJson.version);\n    program.parseArgv = program.parse;\n    program.parse = undefined;\n\n    if (process.argv.includes(\"ast\")) program.helpInformation = describe_ast;\n    else if (process.argv.includes(\"options\")) program.helpInformation = function() {\n        var text = [];\n        for (var option in default_options) {\n            text.push(\"--\" + (option === \"sourceMap\" ? \"source-map\" : option) + \" options:\");\n            text.push(format_object(default_options[option]));\n            text.push(\"\");\n        }\n        return text.join(\"\\n\");\n    };\n\n    program.option(\"-p, --parse <options>\", \"Specify parser options.\", parse_js());\n    program.option(\"-c, --compress [options]\", \"Enable compressor/specify compressor options.\", parse_js());\n    program.option(\"-m, --mangle [options]\", \"Mangle names/specify mangler options.\", parse_js());\n    program.option(\"--mangle-props [options]\", \"Mangle properties/specify mangler options.\", parse_js());\n    program.option(\"-f, --format [options]\", \"Format options.\", parse_js());\n    program.option(\"-b, --beautify [options]\", \"Alias for --format.\", parse_js());\n    program.option(\"-o, --output <file>\", \"Output file (default STDOUT).\");\n    program.option(\"--comments [filter]\", \"Preserve copyright comments in the output.\");\n    program.option(\"--config-file <file>\", \"Read minify() options from JSON file.\");\n    program.option(\"-d, --define <expr>[=value]\", \"Global definitions.\", parse_js(\"define\"));\n    program.option(\"--ecma <version>\", \"Specify ECMAScript release: 5, 2015, 2016 or 2017...\");\n    program.option(\"-e, --enclose [arg[,...][:value[,...]]]\", \"Embed output in a big function with configurable arguments and values.\");\n    program.option(\"--ie8\", \"Support non-standard Internet Explorer 8.\");\n    program.option(\"--keep-classnames\", \"Do not mangle/drop class names.\");\n    program.option(\"--keep-fnames\", \"Do not mangle/drop function names. Useful for code relying on Function.prototype.name.\");\n    program.option(\"--module\", \"Input is an ES6 module\");\n    program.option(\"--name-cache <file>\", \"File to hold mangled name mappings.\");\n    program.option(\"--rename\", \"Force symbol expansion.\");\n    program.option(\"--no-rename\", \"Disable symbol expansion.\");\n    program.option(\"--safari10\", \"Support non-standard Safari 10.\");\n    program.option(\"--source-map [options]\", \"Enable source map/specify source map options.\", parse_js());\n    program.option(\"--timings\", \"Display operations run time on STDERR.\");\n    program.option(\"--toplevel\", \"Compress and/or mangle variables in toplevel scope.\");\n    program.option(\"--wrap <name>\", \"Embed everything as a function with “exports” corresponding to “name” globally.\");\n    program.arguments(\"[files...]\").parseArgv(process.argv);\n    if (program.configFile) {\n        options = JSON.parse(read_file(program.configFile));\n    }\n    if (!program.output && program.sourceMap && program.sourceMap.url != \"inline\") {\n        fatal(\"ERROR: cannot write source map to STDOUT\");\n    }\n\n    [\n        \"compress\",\n        \"enclose\",\n        \"ie8\",\n        \"mangle\",\n        \"module\",\n        \"safari10\",\n        \"sourceMap\",\n        \"toplevel\",\n        \"wrap\"\n    ].forEach(function(name) {\n        if (name in program) {\n            options[name] = program[name];\n        }\n    });\n\n    if (\"ecma\" in program) {\n        if (program.ecma != (program.ecma | 0)) fatal(\"ERROR: ecma must be an integer\");\n        const ecma = program.ecma | 0;\n        if (ecma > 5 && ecma < 2015)\n            options.ecma = ecma + 2009;\n        else\n            options.ecma = ecma;\n    }\n    if (program.format || program.beautify) {\n        const chosenOption = program.format || program.beautify;\n        options.format = typeof chosenOption === \"object\" ? chosenOption : {};\n    }\n    if (program.comments) {\n        if (typeof options.format != \"object\") options.format = {};\n        options.format.comments = typeof program.comments == \"string\" ? (program.comments == \"false\" ? false : program.comments) : \"some\";\n    }\n    if (program.define) {\n        if (typeof options.compress != \"object\") options.compress = {};\n        if (typeof options.compress.global_defs != \"object\") options.compress.global_defs = {};\n        for (var expr in program.define) {\n            options.compress.global_defs[expr] = program.define[expr];\n        }\n    }\n    if (program.keepClassnames) {\n        options.keep_classnames = true;\n    }\n    if (program.keepFnames) {\n        options.keep_fnames = true;\n    }\n    if (program.mangleProps) {\n        if (program.mangleProps.domprops) {\n            delete program.mangleProps.domprops;\n        } else {\n            if (typeof program.mangleProps != \"object\") program.mangleProps = {};\n            if (!Array.isArray(program.mangleProps.reserved)) program.mangleProps.reserved = [];\n        }\n        if (typeof options.mangle != \"object\") options.mangle = {};\n        options.mangle.properties = program.mangleProps;\n    }\n    if (program.nameCache) {\n        options.nameCache = JSON.parse(read_file(program.nameCache, \"{}\"));\n    }\n    if (program.output == \"ast\") {\n        options.format = {\n            ast: true,\n            code: false\n        };\n    }\n    if (program.parse) {\n        if (!program.parse.acorn && !program.parse.spidermonkey) {\n            options.parse = program.parse;\n        } else if (program.sourceMap && program.sourceMap.content == \"inline\") {\n            fatal(\"ERROR: inline source map only works with built-in parser\");\n        }\n    }\n    if (~program.rawArgs.indexOf(\"--rename\")) {\n        options.rename = true;\n    } else if (!program.rename) {\n        options.rename = false;\n    }\n\n    let convert_path = name => name;\n    if (typeof program.sourceMap == \"object\" && \"base\" in program.sourceMap) {\n        convert_path = function() {\n            var base = program.sourceMap.base;\n            delete options.sourceMap.base;\n            return function(name) {\n                return path.relative(base, name);\n            };\n        }();\n    }\n\n    let filesList;\n    if (options.files && options.files.length) {\n        filesList = options.files;\n\n        delete options.files;\n    } else if (program.args.length) {\n        filesList = program.args;\n    }\n\n    if (filesList) {\n        simple_glob(filesList).forEach(function(name) {\n            files[convert_path(name)] = read_file(name);\n        });\n    } else {\n        await new Promise((resolve) => {\n            var chunks = [];\n            process.stdin.setEncoding(\"utf8\");\n            process.stdin.on(\"data\", function(chunk) {\n                chunks.push(chunk);\n            }).on(\"end\", function() {\n                files = [ chunks.join(\"\") ];\n                resolve();\n            });\n            process.stdin.resume();\n        });\n    }\n\n    await run_cli();\n\n    function convert_ast(fn) {\n        return AST_Node.from_mozilla_ast(Object.keys(files).reduce(fn, null));\n    }\n\n    async function run_cli() {\n        var content = program.sourceMap && program.sourceMap.content;\n        if (content && content !== \"inline\") {\n            options.sourceMap.content = read_file(content, content);\n        }\n        if (program.timings) options.timings = true;\n\n        try {\n            if (program.parse) {\n                if (program.parse.acorn) {\n                    files = convert_ast(function(toplevel, name) {\n                        return require(\"acorn\").parse(files[name], {\n                            ecmaVersion: 2018,\n                            locations: true,\n                            program: toplevel,\n                            sourceFile: name,\n                            sourceType: options.module || program.parse.module ? \"module\" : \"script\"\n                        });\n                    });\n                } else if (program.parse.spidermonkey) {\n                    files = convert_ast(function(toplevel, name) {\n                        var obj = JSON.parse(files[name]);\n                        if (!toplevel) return obj;\n                        toplevel.body = toplevel.body.concat(obj.body);\n                        return toplevel;\n                    });\n                }\n            }\n        } catch (ex) {\n            fatal(ex);\n        }\n\n        let result;\n        try {\n            result = await minify(files, options, fs);\n        } catch (ex) {\n            if (ex.name == \"SyntaxError\") {\n                print_error(\"Parse error at \" + ex.filename + \":\" + ex.line + \",\" + ex.col);\n                var col = ex.col;\n                var lines = files[ex.filename].split(/\\r?\\n/);\n                var line = lines[ex.line - 1];\n                if (!line && !col) {\n                    line = lines[ex.line - 2];\n                    col = line.length;\n                }\n                if (line) {\n                    var limit = 70;\n                    if (col > limit) {\n                        line = line.slice(col - limit);\n                        col = limit;\n                    }\n                    print_error(line.slice(0, 80));\n                    print_error(line.slice(0, col).replace(/\\S/g, \" \") + \"^\");\n                }\n            }\n            if (ex.defs) {\n                print_error(\"Supported options:\");\n                print_error(format_object(ex.defs));\n            }\n            fatal(ex);\n            return;\n        }\n\n        if (program.output == \"ast\") {\n            if (!options.compress && !options.mangle) {\n                result.ast.figure_out_scope({});\n            }\n            console.log(JSON.stringify(result.ast, function(key, value) {\n                if (value) switch (key) {\n                  case \"thedef\":\n                    return symdef(value);\n                  case \"enclosed\":\n                    return value.length ? value.map(symdef) : undefined;\n                  case \"variables\":\n                  case \"globals\":\n                    return value.size ? collect_from_map(value, symdef) : undefined;\n                }\n                if (skip_keys.has(key)) return;\n                if (value instanceof AST_Token) return;\n                if (value instanceof Map) return;\n                if (value instanceof AST_Node) {\n                    var result = {\n                        _class: \"AST_\" + value.TYPE\n                    };\n                    if (value.block_scope) {\n                        result.variables = value.block_scope.variables;\n                        result.enclosed = value.block_scope.enclosed;\n                    }\n                    value.CTOR.PROPS.forEach(function(prop) {\n                        if (prop !== \"block_scope\") {\n                            result[prop] = value[prop];\n                        }\n                    });\n                    return result;\n                }\n                return value;\n            }, 2));\n        } else if (program.output == \"spidermonkey\") {\n            try {\n                const minified = await minify(\n                    result.code,\n                    {\n                        compress: false,\n                        mangle: false,\n                        format: {\n                            ast: true,\n                            code: false\n                        }\n                    },\n                    fs\n                );\n                console.log(JSON.stringify(minified.ast.to_mozilla_ast(), null, 2));\n            } catch (ex) {\n                fatal(ex);\n                return;\n            }\n        } else if (program.output) {\n            fs.writeFileSync(program.output, result.code);\n            if (options.sourceMap && options.sourceMap.url !== \"inline\" && result.map) {\n                fs.writeFileSync(program.output + \".map\", result.map);\n            }\n        } else {\n            console.log(result.code);\n        }\n        if (program.nameCache) {\n            fs.writeFileSync(program.nameCache, JSON.stringify(options.nameCache));\n        }\n        if (result.timings) for (var phase in result.timings) {\n            print_error(\"- \" + phase + \": \" + result.timings[phase].toFixed(3) + \"s\");\n        }\n    }\n\n    function fatal(message) {\n        if (message instanceof Error) message = message.stack.replace(/^\\S*?Error:/, \"ERROR:\");\n        print_error(message);\n        process.exit(1);\n    }\n\n    // A file glob function that only supports \"*\" and \"?\" wildcards in the basename.\n    // Example: \"foo/bar/*baz??.*.js\"\n    // Argument `glob` may be a string or an array of strings.\n    // Returns an array of strings. Garbage in, garbage out.\n    function simple_glob(glob) {\n        if (Array.isArray(glob)) {\n            return [].concat.apply([], glob.map(simple_glob));\n        }\n        if (glob && glob.match(/[*?]/)) {\n            var dir = path.dirname(glob);\n            try {\n                var entries = fs.readdirSync(dir);\n            } catch (ex) {}\n            if (entries) {\n                var pattern = \"^\" + path.basename(glob)\n                    .replace(/[.+^$[\\]\\\\(){}]/g, \"\\\\$&\")\n                    .replace(/\\*/g, \"[^/\\\\\\\\]*\")\n                    .replace(/\\?/g, \"[^/\\\\\\\\]\") + \"$\";\n                var mod = process.platform === \"win32\" ? \"i\" : \"\";\n                var rx = new RegExp(pattern, mod);\n                var results = entries.filter(function(name) {\n                    return rx.test(name);\n                }).map(function(name) {\n                    return path.join(dir, name);\n                });\n                if (results.length) return results;\n            }\n        }\n        return [ glob ];\n    }\n\n    function read_file(path, default_value) {\n        try {\n            return fs.readFileSync(path, \"utf8\");\n        } catch (ex) {\n            if ((ex.code == \"ENOENT\" || ex.code == \"ENAMETOOLONG\") && default_value != null) return default_value;\n            fatal(ex);\n        }\n    }\n\n    function parse_js(flag) {\n        return function(value, options) {\n            options = options || {};\n            try {\n                walk(parse(value, { expression: true }), node => {\n                    if (node instanceof AST_Assign) {\n                        var name = node.left.print_to_string();\n                        var value = node.right;\n                        if (flag) {\n                            options[name] = value;\n                        } else if (value instanceof AST_Array) {\n                            options[name] = value.elements.map(to_string);\n                        } else if (value instanceof AST_RegExp) {\n                            value = value.value;\n                            options[name] = new RegExp(value.source, value.flags);\n                        } else {\n                            options[name] = to_string(value);\n                        }\n                        return true;\n                    }\n                    if (node instanceof AST_Symbol || node instanceof AST_PropAccess) {\n                        var name = node.print_to_string();\n                        options[name] = true;\n                        return true;\n                    }\n                    if (!(node instanceof AST_Sequence)) throw node;\n\n                    function to_string(value) {\n                        return value instanceof AST_Constant ? value.getValue() : value.print_to_string({\n                            quote_keys: true\n                        });\n                    }\n                });\n            } catch(ex) {\n                if (flag) {\n                    fatal(\"Error parsing arguments for '\" + flag + \"': \" + value);\n                } else {\n                    options[value] = null;\n                }\n            }\n            return options;\n        };\n    }\n\n    function symdef(def) {\n        var ret = (1e6 + def.id) + \" \" + def.name;\n        if (def.mangled_name) ret += \" \" + def.mangled_name;\n        return ret;\n    }\n\n    function collect_from_map(map, callback) {\n        var result = [];\n        map.forEach(function (def) {\n            result.push(callback(def));\n        });\n        return result;\n    }\n\n    function format_object(obj) {\n        var lines = [];\n        var padding = \"\";\n        Object.keys(obj).map(function(name) {\n            if (padding.length < name.length) padding = Array(name.length + 1).join(\" \");\n            return [ name, JSON.stringify(obj[name]) ];\n        }).forEach(function(tokens) {\n            lines.push(\"  \" + tokens[0] + padding.slice(tokens[0].length - 2) + tokens[1]);\n        });\n        return lines.join(\"\\n\");\n    }\n\n    function print_error(msg) {\n        process.stderr.write(msg);\n        process.stderr.write(\"\\n\");\n    }\n\n    function describe_ast() {\n        var out = OutputStream({ beautify: true });\n        function doitem(ctor) {\n            out.print(\"AST_\" + ctor.TYPE);\n            const props = ctor.SELF_PROPS.filter(prop => !/^\\$/.test(prop));\n\n            if (props.length > 0) {\n                out.space();\n                out.with_parens(function() {\n                    props.forEach(function(prop, i) {\n                        if (i) out.space();\n                        out.print(prop);\n                    });\n                });\n            }\n\n            if (ctor.documentation) {\n                out.space();\n                out.print_string(ctor.documentation);\n            }\n\n            if (ctor.SUBCLASSES.length > 0) {\n                out.space();\n                out.with_block(function() {\n                    ctor.SUBCLASSES.forEach(function(ctor) {\n                        out.indent();\n                        doitem(ctor);\n                        out.newline();\n                    });\n                });\n            }\n        }\n        doitem(AST_Node);\n        return out + \"\\n\";\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}