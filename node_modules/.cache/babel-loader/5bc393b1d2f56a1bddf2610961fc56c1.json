{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\nvar _isHiddenFromScreenReader = _interopRequireDefault(require(\"../util/isHiddenFromScreenReader\"));\n/**\n * @fileoverview Enforce img alt attribute does not have the word image, picture, or photo.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\n\nvar REDUNDANT_WORDS = ['image', 'photo', 'picture'];\nvar errorMessage = 'Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.';\nvar schema = (0, _schemas.generateObjSchema)({\n  components: _schemas.arraySchema,\n  words: _schemas.arraySchema\n});\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md',\n      description: 'Enforce `<img>` alt prop does not contain the word \"image\", \"picture\", or \"photo\".'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typesToValidate = ['img'].concat(componentOptions);\n        var nodeType = elementType(node); // Only check 'label' elements and custom types.\n\n        if (typesToValidate.indexOf(nodeType) === -1) {\n          return;\n        }\n\n        var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt'); // Return if alt prop is not present.\n\n        if (altProp === undefined) {\n          return;\n        }\n\n        var value = (0, _jsxAstUtils.getLiteralPropValue)(altProp);\n        var isVisible = (0, _isHiddenFromScreenReader[\"default\"])(nodeType, node.attributes) === false;\n        var _options$words = options.words,\n            words = _options$words === void 0 ? [] : _options$words;\n        var redundantWords = REDUNDANT_WORDS.concat(words);\n\n        if (typeof value === 'string' && isVisible) {\n          var hasRedundancy = new RegExp(\"(?!{)\\\\b(\".concat(redundantWords.join('|'), \")\\\\b(?!})\"), 'i').test(value);\n\n          if (hasRedundancy === true) {\n            context.report({\n              node,\n              message: errorMessage\n            });\n          }\n        }\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_jsxAstUtils","_schemas","_getElementType","_isHiddenFromScreenReader","REDUNDANT_WORDS","errorMessage","schema","generateObjSchema","components","arraySchema","words","_default","meta","docs","url","description","create","context","elementType","JSXOpeningElement","node","options","componentOptions","typesToValidate","concat","nodeType","indexOf","altProp","getProp","attributes","undefined","getLiteralPropValue","isVisible","_options$words","redundantWords","hasRedundancy","RegExp","join","test","report","message","module","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/lib/rules/img-redundant-alt.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\nvar _isHiddenFromScreenReader = _interopRequireDefault(require(\"../util/isHiddenFromScreenReader\"));\n\n/**\n * @fileoverview Enforce img alt attribute does not have the word image, picture, or photo.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\nvar REDUNDANT_WORDS = ['image', 'photo', 'picture'];\nvar errorMessage = 'Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.';\nvar schema = (0, _schemas.generateObjSchema)({\n  components: _schemas.arraySchema,\n  words: _schemas.arraySchema\n});\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md',\n      description: 'Enforce `<img>` alt prop does not contain the word \"image\", \"picture\", or \"photo\".'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typesToValidate = ['img'].concat(componentOptions);\n        var nodeType = elementType(node); // Only check 'label' elements and custom types.\n\n        if (typesToValidate.indexOf(nodeType) === -1) {\n          return;\n        }\n\n        var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt'); // Return if alt prop is not present.\n\n        if (altProp === undefined) {\n          return;\n        }\n\n        var value = (0, _jsxAstUtils.getLiteralPropValue)(altProp);\n        var isVisible = (0, _isHiddenFromScreenReader[\"default\"])(nodeType, node.attributes) === false;\n        var _options$words = options.words,\n            words = _options$words === void 0 ? [] : _options$words;\n        var redundantWords = REDUNDANT_WORDS.concat(words);\n\n        if (typeof value === 'string' && isVisible) {\n          var hasRedundancy = new RegExp(\"(?!{)\\\\b(\".concat(redundantWords.join('|'), \")\\\\b(?!})\"), 'i').test(value);\n\n          if (hasRedundancy === true) {\n            context.report({\n              node,\n              message: errorMessage\n            });\n          }\n        }\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}