{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n\nvar execSync = require('child_process').execSync;\n\nvar exec = function (cmd) {\n  execSync(cmd, {\n    stdio: 'inherit'\n  });\n};\n/* global jake, task, desc, publishTask */\n\n\ntask('build', ['lint', 'clean', 'browserify', 'minify'], function () {\n  console.log('Build completed.');\n});\ndesc('Cleans browerified/minified files and package files');\ntask('clean', ['clobber'], function () {\n  jake.rmRf('./ejs.js');\n  jake.rmRf('./ejs.min.js');\n  console.log('Cleaned up compiled files.');\n});\ndesc('Lints the source code');\ntask('lint', ['clean'], function () {\n  var epath = path.join('./node_modules/.bin/eslint');\n  exec(epath + ' \"**/*.js\"');\n  console.log('Linting completed.');\n});\ntask('browserify', function () {\n  var epath = path.join('./node_modules/browserify/bin/cmd.js');\n  exec(epath + ' --standalone ejs lib/ejs.js > ejs.js');\n  console.log('Browserification completed.');\n});\ntask('minify', function () {\n  var epath = path.join('./node_modules/uglify-js/bin/uglifyjs');\n  exec(epath + ' ejs.js > ejs.min.js');\n  console.log('Minification completed.');\n});\ndesc('Generates the EJS API docs for the public API');\ntask('doc', function () {\n  jake.rmRf('out');\n  var epath = path.join('./node_modules/.bin/jsdoc');\n  exec(epath + ' --verbose -c jsdoc.json lib/* docs/jsdoc/*');\n  console.log('Documentation generated in ./out.');\n});\ndesc('Generates the EJS API docs for the public and private API');\ntask('devdoc', function () {\n  jake.rmRf('out');\n  var epath = path.join('./node_modules/.bin/jsdoc');\n  exec(epath + ' --verbose -p -c jsdoc.json lib/* docs/jsdoc/*');\n  console.log('Documentation generated in ./out.');\n});\ndesc('Publishes the EJS API docs');\ntask('docPublish', ['doc'], function () {\n  fs.writeFileSync('out/CNAME', 'api.ejs.co');\n  console.log('Pushing docs to gh-pages...');\n  var epath = path.join('./node_modules/.bin/git-directory-deploy');\n  exec(epath + ' --directory out/');\n  console.log('Docs published to gh-pages.');\n});\ndesc('Runs the EJS test suite');\ntask('test', ['lint'], function () {\n  exec(path.join('./node_modules/.bin/mocha'));\n});\npublishTask('ejs', ['build'], function () {\n  this.packageFiles.include(['jakefile.js', 'README.md', 'LICENSE', 'package.json', 'ejs.js', 'ejs.min.js', 'lib/**', 'bin/**', 'usage.txt']);\n});\njake.Task.publish.on('complete', function () {\n  console.log('Updating hosted docs...');\n  console.log('If this fails, run jake docPublish to re-try.');\n  jake.Task.docPublish.invoke();\n});","map":{"version":3,"names":["fs","require","path","execSync","exec","cmd","stdio","task","console","log","desc","jake","rmRf","epath","join","writeFileSync","publishTask","packageFiles","include","Task","publish","on","docPublish","invoke"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/ejs/jakefile.js"],"sourcesContent":["var fs = require('fs');\nvar path = require('path');\nvar execSync = require('child_process').execSync;\nvar exec = function (cmd) {\n  execSync(cmd, {stdio: 'inherit'});\n};\n\n/* global jake, task, desc, publishTask */\n\ntask('build', ['lint', 'clean', 'browserify', 'minify'], function () {\n  console.log('Build completed.');\n});\n\ndesc('Cleans browerified/minified files and package files');\ntask('clean', ['clobber'], function () {\n  jake.rmRf('./ejs.js');\n  jake.rmRf('./ejs.min.js');\n  console.log('Cleaned up compiled files.');\n});\n\ndesc('Lints the source code');\ntask('lint', ['clean'], function () {\n  var epath = path.join('./node_modules/.bin/eslint');\n  exec(epath+' \"**/*.js\"');\n  console.log('Linting completed.');\n});\n\ntask('browserify', function () {\n  var epath = path.join('./node_modules/browserify/bin/cmd.js');\n  exec(epath+' --standalone ejs lib/ejs.js > ejs.js');\n  console.log('Browserification completed.');\n});\n\ntask('minify', function () {\n  var epath = path.join('./node_modules/uglify-js/bin/uglifyjs');\n  exec(epath+' ejs.js > ejs.min.js');\n  console.log('Minification completed.');\n});\n\ndesc('Generates the EJS API docs for the public API');\ntask('doc', function () {\n  jake.rmRf('out');\n  var epath = path.join('./node_modules/.bin/jsdoc');\n  exec(epath+' --verbose -c jsdoc.json lib/* docs/jsdoc/*');\n  console.log('Documentation generated in ./out.');\n});\n\ndesc('Generates the EJS API docs for the public and private API');\ntask('devdoc', function () {\n  jake.rmRf('out');\n  var epath = path.join('./node_modules/.bin/jsdoc');\n  exec(epath+' --verbose -p -c jsdoc.json lib/* docs/jsdoc/*');\n  console.log('Documentation generated in ./out.');\n});\n\ndesc('Publishes the EJS API docs');\ntask('docPublish', ['doc'], function () {\n  fs.writeFileSync('out/CNAME', 'api.ejs.co');\n  console.log('Pushing docs to gh-pages...');\n  var epath = path.join('./node_modules/.bin/git-directory-deploy');\n  exec(epath+' --directory out/');\n  console.log('Docs published to gh-pages.');\n});\n\ndesc('Runs the EJS test suite');\ntask('test', ['lint'], function () {\n  exec(path.join('./node_modules/.bin/mocha'));\n});\n\npublishTask('ejs', ['build'], function () {\n  this.packageFiles.include([\n    'jakefile.js',\n    'README.md',\n    'LICENSE',\n    'package.json',\n    'ejs.js',\n    'ejs.min.js',\n    'lib/**',\n    'bin/**',\n    'usage.txt'\n  ]);\n});\n\njake.Task.publish.on('complete', function () {\n  console.log('Updating hosted docs...');\n  console.log('If this fails, run jake docPublish to re-try.');\n  jake.Task.docPublish.invoke();\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}