{"ast":null,"code":"/**\n * @fileoverview Enforce img alt attribute does not have the word image, picture, or photo.\n * @author Ethan Cohen\n */\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nimport { RuleTester } from 'eslint';\nimport semver from 'semver';\nimport { version as eslintVersion } from 'eslint/package.json';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/img-redundant-alt'; // -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst array = [{\n  components: ['Image'],\n  words: ['Word1', 'Word2']\n}];\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Image: 'img'\n    }\n  }\n};\nconst ruleTester = new RuleTester();\nconst expectedError = {\n  message: 'Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.',\n  type: 'JSXOpeningElement'\n};\nruleTester.run('img-redundant-alt', rule, {\n  valid: [].concat({\n    code: '<img alt=\"foo\" />;'\n  }, {\n    code: '<img alt=\"picture of me taking a photo of an image\" aria-hidden />'\n  }, {\n    code: '<img aria-hidden alt=\"photo of image\" />'\n  }, {\n    code: '<img ALt=\"foo\" />;'\n  }, {\n    code: '<img {...this.props} alt=\"foo\" />'\n  }, {\n    code: '<img {...this.props} alt={\"foo\"} />'\n  }, {\n    code: '<img {...this.props} alt={alt} />'\n  }, {\n    code: '<a />'\n  }, {\n    code: '<img />'\n  }, {\n    code: '<IMG />'\n  }, {\n    code: '<img alt={undefined} />'\n  }, {\n    code: '<img alt={`this should pass for ${now}`} />'\n  }, {\n    code: '<img alt={`this should pass for ${photo}`} />'\n  }, {\n    code: '<img alt={`this should pass for ${image}`} />'\n  }, {\n    code: '<img alt={`this should pass for ${picture}`} />'\n  }, {\n    code: '<img alt={`${photo}`} />'\n  }, {\n    code: '<img alt={`${image}`} />'\n  }, {\n    code: '<img alt={`${picture}`} />'\n  }, {\n    code: '<img alt={\"undefined\"} />'\n  }, {\n    code: '<img alt={() => {}} />'\n  }, {\n    code: '<img alt={function(e){}} />'\n  }, {\n    code: '<img aria-hidden={false} alt=\"Doing cool things.\" />'\n  }, {\n    code: '<UX.Layout>test</UX.Layout>'\n  }, {\n    code: '<img alt />'\n  }, {\n    code: '<img alt={imageAlt} />'\n  }, {\n    code: '<img alt={imageAlt.name} />'\n  }, semver.satisfies(eslintVersion, '>= 6') ? [{\n    code: '<img alt={imageAlt?.name} />',\n    parserOptions: {\n      ecmaVersion: 2020\n    }\n  }, {\n    code: '<img alt=\"Doing cool things\" aria-hidden={foo?.bar}/>',\n    parserOptions: {\n      ecmaVersion: 2020\n    }\n  }] : [], {\n    code: '<img alt=\"Photography\" />;'\n  }, {\n    code: '<img alt=\"ImageMagick\" />;'\n  }, {\n    code: '<Image alt=\"Photo of a friend\" />'\n  }, {\n    code: '<Image alt=\"Foo\" />',\n    settings: componentsSettings\n  }).map(parserOptionsMapper),\n  invalid: [{\n    code: '<img alt=\"Photo of friend.\" />;',\n    errors: [expectedError]\n  }, {\n    code: '<img alt=\"Picture of friend.\" />;',\n    errors: [expectedError]\n  }, {\n    code: '<img alt=\"Image of friend.\" />;',\n    errors: [expectedError]\n  }, {\n    code: '<img alt=\"PhOtO of friend.\" />;',\n    errors: [expectedError]\n  }, {\n    code: '<img alt={\"photo\"} />;',\n    errors: [expectedError]\n  }, {\n    code: '<img alt=\"piCTUre of friend.\" />;',\n    errors: [expectedError]\n  }, {\n    code: '<img alt=\"imAGE of friend.\" />;',\n    errors: [expectedError]\n  }, {\n    code: '<img alt=\"photo of cool person\" aria-hidden={false} />',\n    errors: [expectedError]\n  }, {\n    code: '<img alt=\"picture of cool person\" aria-hidden={false} />',\n    errors: [expectedError]\n  }, {\n    code: '<img alt=\"image of cool person\" aria-hidden={false} />',\n    errors: [expectedError]\n  }, {\n    code: '<img alt=\"photo\" {...this.props} />',\n    errors: [expectedError]\n  }, {\n    code: '<img alt=\"image\" {...this.props} />',\n    errors: [expectedError]\n  }, {\n    code: '<img alt=\"picture\" {...this.props} />',\n    errors: [expectedError]\n  }, {\n    code: '<img alt={`picture doing ${things}`} {...this.props} />',\n    errors: [expectedError]\n  }, {\n    code: '<img alt={`photo doing ${things}`} {...this.props} />',\n    errors: [expectedError]\n  }, {\n    code: '<img alt={`image doing ${things}`} {...this.props} />',\n    errors: [expectedError]\n  }, {\n    code: '<img alt={`picture doing ${picture}`} {...this.props} />',\n    errors: [expectedError]\n  }, {\n    code: '<img alt={`photo doing ${photo}`} {...this.props} />',\n    errors: [expectedError]\n  }, {\n    code: '<img alt={`image doing ${image}`} {...this.props} />',\n    errors: [expectedError]\n  }, {\n    code: '<Image alt=\"Photo of a friend\" />',\n    errors: [expectedError],\n    settings: componentsSettings\n  }, // TESTS FOR ARRAY OPTION TESTS\n  {\n    code: '<img alt=\"Word1\" />;',\n    options: array,\n    errors: [expectedError]\n  }, {\n    code: '<img alt=\"Word2\" />;',\n    options: array,\n    errors: [expectedError]\n  }, {\n    code: '<Image alt=\"Word1\" />;',\n    options: array,\n    errors: [expectedError]\n  }, {\n    code: '<Image alt=\"Word2\" />;',\n    options: array,\n    errors: [expectedError]\n  }].map(parserOptionsMapper)\n});","map":{"version":3,"names":["RuleTester","semver","version","eslintVersion","parserOptionsMapper","rule","array","components","words","componentsSettings","Image","ruleTester","expectedError","message","type","run","valid","concat","code","satisfies","parserOptions","ecmaVersion","settings","map","invalid","errors","options"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/img-redundant-alt-test.js"],"sourcesContent":["/**\n * @fileoverview Enforce img alt attribute does not have the word image, picture, or photo.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport semver from 'semver';\nimport { version as eslintVersion } from 'eslint/package.json';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/img-redundant-alt';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst array = [{\n  components: ['Image'],\n  words: ['Word1', 'Word2'],\n}];\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Image: 'img',\n    },\n  },\n};\n\nconst ruleTester = new RuleTester();\n\nconst expectedError = {\n  message: 'Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.',\n  type: 'JSXOpeningElement',\n};\n\nruleTester.run('img-redundant-alt', rule, {\n  valid: [].concat(\n    { code: '<img alt=\"foo\" />;' },\n    { code: '<img alt=\"picture of me taking a photo of an image\" aria-hidden />' },\n    { code: '<img aria-hidden alt=\"photo of image\" />' },\n    { code: '<img ALt=\"foo\" />;' },\n    { code: '<img {...this.props} alt=\"foo\" />' },\n    { code: '<img {...this.props} alt={\"foo\"} />' },\n    { code: '<img {...this.props} alt={alt} />' },\n    { code: '<a />' },\n    { code: '<img />' },\n    { code: '<IMG />' },\n    { code: '<img alt={undefined} />' },\n    { code: '<img alt={`this should pass for ${now}`} />' },\n    { code: '<img alt={`this should pass for ${photo}`} />' },\n    { code: '<img alt={`this should pass for ${image}`} />' },\n    { code: '<img alt={`this should pass for ${picture}`} />' },\n    { code: '<img alt={`${photo}`} />' },\n    { code: '<img alt={`${image}`} />' },\n    { code: '<img alt={`${picture}`} />' },\n    { code: '<img alt={\"undefined\"} />' },\n    { code: '<img alt={() => {}} />' },\n    { code: '<img alt={function(e){}} />' },\n    { code: '<img aria-hidden={false} alt=\"Doing cool things.\" />' },\n    { code: '<UX.Layout>test</UX.Layout>' },\n    { code: '<img alt />' },\n    { code: '<img alt={imageAlt} />' },\n    { code: '<img alt={imageAlt.name} />' },\n    semver.satisfies(eslintVersion, '>= 6') ? [\n      { code: '<img alt={imageAlt?.name} />', parserOptions: { ecmaVersion: 2020 } },\n      { code: '<img alt=\"Doing cool things\" aria-hidden={foo?.bar}/>', parserOptions: { ecmaVersion: 2020 } },\n    ] : [],\n    { code: '<img alt=\"Photography\" />;' },\n    { code: '<img alt=\"ImageMagick\" />;' },\n    { code: '<Image alt=\"Photo of a friend\" />' },\n    { code: '<Image alt=\"Foo\" />', settings: componentsSettings },\n  ).map(parserOptionsMapper),\n  invalid: [\n    { code: '<img alt=\"Photo of friend.\" />;', errors: [expectedError] },\n    { code: '<img alt=\"Picture of friend.\" />;', errors: [expectedError] },\n    { code: '<img alt=\"Image of friend.\" />;', errors: [expectedError] },\n    { code: '<img alt=\"PhOtO of friend.\" />;', errors: [expectedError] },\n    { code: '<img alt={\"photo\"} />;', errors: [expectedError] },\n    { code: '<img alt=\"piCTUre of friend.\" />;', errors: [expectedError] },\n    { code: '<img alt=\"imAGE of friend.\" />;', errors: [expectedError] },\n    {\n      code: '<img alt=\"photo of cool person\" aria-hidden={false} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt=\"picture of cool person\" aria-hidden={false} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt=\"image of cool person\" aria-hidden={false} />',\n      errors: [expectedError],\n    },\n    { code: '<img alt=\"photo\" {...this.props} />', errors: [expectedError] },\n    { code: '<img alt=\"image\" {...this.props} />', errors: [expectedError] },\n    { code: '<img alt=\"picture\" {...this.props} />', errors: [expectedError] },\n    {\n      code: '<img alt={`picture doing ${things}`} {...this.props} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt={`photo doing ${things}`} {...this.props} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt={`image doing ${things}`} {...this.props} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt={`picture doing ${picture}`} {...this.props} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt={`photo doing ${photo}`} {...this.props} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt={`image doing ${image}`} {...this.props} />',\n      errors: [expectedError],\n    },\n    { code: '<Image alt=\"Photo of a friend\" />', errors: [expectedError], settings: componentsSettings },\n\n    // TESTS FOR ARRAY OPTION TESTS\n    { code: '<img alt=\"Word1\" />;', options: array, errors: [expectedError] },\n    { code: '<img alt=\"Word2\" />;', options: array, errors: [expectedError] },\n    { code: '<Image alt=\"Word1\" />;', options: array, errors: [expectedError] },\n    { code: '<Image alt=\"Word2\" />;', options: array, errors: [expectedError] },\n  ].map(parserOptionsMapper),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}