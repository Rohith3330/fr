{"ast":null,"code":"\"use strict\";\n\nconst {\n  isIP\n} = require(\"net\");\n\nconst {\n  networkInterfaces\n} = require(\"os\");\n\nconst execa = require(\"execa\");\n\nconst gwArgs = \"path Win32_NetworkAdapterConfiguration where IPEnabled=true get DefaultIPGateway,GatewayCostMetric,IPConnectionMetric,Index /format:table\".split(\" \");\n\nconst ifArgs = index => `path Win32_NetworkAdapter where Index=${index} get NetConnectionID,MACAddress /format:table`.split(\" \");\n\nconst spawnOpts = {\n  windowsHide: true\n}; // Parsing tables like this. The final metric is GatewayCostMetric + IPConnectionMetric\n//\n// DefaultIPGateway             GatewayCostMetric  Index  IPConnectionMetric\n// {\"1.2.3.4\", \"2001:db8::1\"}   {0, 256}           12     25\n// {\"2.3.4.5\"}                  {25}               12     55\n\nfunction parseGwTable(gwTable, family) {\n  let [bestGw, bestMetric, bestId] = [null, null, null];\n\n  for (let line of (gwTable || \"\").trim().split(/\\r?\\n/).splice(1)) {\n    line = line.trim();\n    const [_, gwArr, gwCostsArr, id, ipMetric] = /({.+?}) +?({.+?}) +?([0-9]+) +?([0-9]+)/g.exec(line) || [];\n    if (!gwArr) continue;\n    const gateways = (gwArr.match(/\"(.+?)\"/g) || []).map(match => match.substring(1, match.length - 1));\n    const gatewayCosts = gwCostsArr.match(/[0-9]+/g) || [];\n\n    for (const [index, gateway] of Object.entries(gateways)) {\n      if (!gateway || `v${isIP(gateway)}` !== family) continue;\n      const metric = parseInt(gatewayCosts[index]) + parseInt(ipMetric);\n\n      if (!bestGw || metric < bestMetric) {\n        [bestGw, bestMetric, bestId] = [gateway, metric, id];\n      }\n    }\n  }\n\n  if (bestGw) return [bestGw, bestId];\n}\n\nfunction parseIfTable(ifTable) {\n  const line = (ifTable || \"\").trim().split(\"\\n\")[1];\n  let [mac, name] = line.trim().split(/\\s+/);\n  mac = mac.toLowerCase(); // try to get the interface name by matching the mac to os.networkInterfaces to avoid wmic's encoding issues\n  // https://github.com/silverwind/default-gateway/issues/14\n\n  for (const [osname, addrs] of Object.entries(networkInterfaces())) {\n    for (const addr of addrs) {\n      if (addr && addr.mac && addr.mac.toLowerCase() === mac) {\n        return osname;\n      }\n    }\n  }\n\n  return name;\n}\n\nconst promise = async family => {\n  const {\n    stdout\n  } = await execa(\"wmic\", gwArgs, spawnOpts);\n  const [gateway, id] = parseGwTable(stdout, family) || [];\n\n  if (!gateway) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  let name;\n\n  if (id) {\n    const {\n      stdout\n    } = await execa(\"wmic\", ifArgs(id), spawnOpts);\n    name = parseIfTable(stdout);\n  }\n\n  return {\n    gateway,\n    interface: name ? name : null\n  };\n};\n\nconst sync = family => {\n  const {\n    stdout\n  } = execa.sync(\"wmic\", gwArgs, spawnOpts);\n  const [gateway, id] = parseGwTable(stdout, family) || [];\n\n  if (!gateway) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  let name;\n\n  if (id) {\n    const {\n      stdout\n    } = execa.sync(\"wmic\", ifArgs(id), spawnOpts);\n    name = parseIfTable(stdout);\n  }\n\n  return {\n    gateway,\n    interface: name ? name : null\n  };\n};\n\nmodule.exports.v4 = () => promise(\"v4\");\n\nmodule.exports.v6 = () => promise(\"v6\");\n\nmodule.exports.v4.sync = () => sync(\"v4\");\n\nmodule.exports.v6.sync = () => sync(\"v6\");","map":{"version":3,"names":["isIP","require","networkInterfaces","execa","gwArgs","split","ifArgs","index","spawnOpts","windowsHide","parseGwTable","gwTable","family","bestGw","bestMetric","bestId","line","trim","splice","_","gwArr","gwCostsArr","id","ipMetric","exec","gateways","match","map","substring","length","gatewayCosts","gateway","Object","entries","metric","parseInt","parseIfTable","ifTable","mac","name","toLowerCase","osname","addrs","addr","promise","stdout","Error","interface","sync","module","exports","v4","v6"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/default-gateway/win32.js"],"sourcesContent":["\"use strict\";\n\nconst {isIP} = require(\"net\");\nconst {networkInterfaces} = require(\"os\");\nconst execa = require(\"execa\");\n\nconst gwArgs = \"path Win32_NetworkAdapterConfiguration where IPEnabled=true get DefaultIPGateway,GatewayCostMetric,IPConnectionMetric,Index /format:table\".split(\" \");\nconst ifArgs = index => `path Win32_NetworkAdapter where Index=${index} get NetConnectionID,MACAddress /format:table`.split(\" \");\n\nconst spawnOpts = {\n  windowsHide: true,\n};\n\n// Parsing tables like this. The final metric is GatewayCostMetric + IPConnectionMetric\n//\n// DefaultIPGateway             GatewayCostMetric  Index  IPConnectionMetric\n// {\"1.2.3.4\", \"2001:db8::1\"}   {0, 256}           12     25\n// {\"2.3.4.5\"}                  {25}               12     55\nfunction parseGwTable(gwTable, family) {\n  let [bestGw, bestMetric, bestId] = [null, null, null];\n\n  for (let line of (gwTable || \"\").trim().split(/\\r?\\n/).splice(1)) {\n    line = line.trim();\n    const [_, gwArr, gwCostsArr, id, ipMetric] = /({.+?}) +?({.+?}) +?([0-9]+) +?([0-9]+)/g.exec(line) || [];\n    if (!gwArr) continue;\n\n    const gateways = (gwArr.match(/\"(.+?)\"/g) || []).map(match => match.substring(1, match.length - 1));\n    const gatewayCosts = (gwCostsArr.match(/[0-9]+/g) || []);\n\n    for (const [index, gateway] of Object.entries(gateways)) {\n      if (!gateway || `v${isIP(gateway)}` !== family) continue;\n\n      const metric = parseInt(gatewayCosts[index]) + parseInt(ipMetric);\n      if (!bestGw || metric < bestMetric) {\n        [bestGw, bestMetric, bestId] = [gateway, metric, id];\n      }\n    }\n  }\n\n  if (bestGw) return [bestGw, bestId];\n}\n\nfunction parseIfTable(ifTable) {\n  const line = (ifTable || \"\").trim().split(\"\\n\")[1];\n\n  let [mac, name] = line.trim().split(/\\s+/);\n  mac = mac.toLowerCase();\n\n  // try to get the interface name by matching the mac to os.networkInterfaces to avoid wmic's encoding issues\n  // https://github.com/silverwind/default-gateway/issues/14\n  for (const [osname, addrs] of Object.entries(networkInterfaces())) {\n    for (const addr of addrs) {\n      if (addr && addr.mac && addr.mac.toLowerCase() === mac) {\n        return osname;\n      }\n    }\n  }\n  return name;\n}\n\nconst promise = async family => {\n  const {stdout} = await execa(\"wmic\", gwArgs, spawnOpts);\n  const [gateway, id] = parseGwTable(stdout, family) || [];\n\n  if (!gateway) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  let name;\n  if (id) {\n    const {stdout} = await execa(\"wmic\", ifArgs(id), spawnOpts);\n    name = parseIfTable(stdout);\n  }\n\n  return {gateway, interface: name ? name : null};\n};\n\nconst sync = family => {\n  const {stdout} = execa.sync(\"wmic\", gwArgs, spawnOpts);\n  const [gateway, id] = parseGwTable(stdout, family) || [];\n\n  if (!gateway) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  let name;\n  if (id) {\n    const {stdout} = execa.sync(\"wmic\", ifArgs(id), spawnOpts);\n    name = parseIfTable(stdout);\n  }\n\n  return {gateway, interface: name ? name : null};\n};\n\nmodule.exports.v4 = () => promise(\"v4\");\nmodule.exports.v6 = () => promise(\"v6\");\n\nmodule.exports.v4.sync = () => sync(\"v4\");\nmodule.exports.v6.sync = () => sync(\"v6\");\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}