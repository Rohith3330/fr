{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.setup = setup;\nexports.worker = worker;\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestHasteMap() {\n  const data = _interopRequireDefault(require('jest-haste-map'));\n\n  _jestHasteMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestRuntime() {\n  const data = _interopRequireDefault(require('jest-runtime'));\n\n  _jestRuntime = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWorker() {\n  const data = require('jest-worker');\n\n  _jestWorker = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _runTest = _interopRequireDefault(require('./runTest'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// Make sure uncaught errors are logged before we exit.\n\n\nprocess.on('uncaughtException', err => {\n  console.error(err.stack);\n  (0, _exit().default)(1);\n});\n\nconst formatError = error => {\n  if (typeof error === 'string') {\n    const {\n      message,\n      stack\n    } = (0, _jestMessageUtil().separateMessageFromStack)(error);\n    return {\n      message,\n      stack,\n      type: 'Error'\n    };\n  }\n\n  return {\n    code: error.code || undefined,\n    message: error.message,\n    stack: error.stack,\n    type: 'Error'\n  };\n};\n\nconst resolvers = new Map();\n\nconst getResolver = config => {\n  const resolver = resolvers.get(config.name);\n\n  if (!resolver) {\n    throw new Error('Cannot find resolver for: ' + config.name);\n  }\n\n  return resolver;\n};\n\nfunction setup(setupData) {\n  // Module maps that will be needed for the test runs are passed.\n  for (const {\n    config,\n    serializableModuleMap\n  } of setupData.serializableResolvers) {\n    const moduleMap = _jestHasteMap().default.getStatic(config).getModuleMapFromJSON(serializableModuleMap);\n\n    resolvers.set(config.name, _jestRuntime().default.createResolver(config, moduleMap));\n  }\n}\n\nconst sendMessageToJest = (eventName, args) => {\n  (0, _jestWorker().messageParent)([eventName, args]);\n};\n\nasync function worker(_ref) {\n  let {\n    config,\n    globalConfig,\n    path,\n    context\n  } = _ref;\n\n  try {\n    return await (0, _runTest.default)(path, globalConfig, config, getResolver(config), context && { ...context,\n      changedFiles: context.changedFiles && new Set(context.changedFiles),\n      sourcesRelatedToTestsInChangedFiles: context.sourcesRelatedToTestsInChangedFiles && new Set(context.sourcesRelatedToTestsInChangedFiles)\n    }, sendMessageToJest);\n  } catch (error) {\n    throw formatError(error);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","setup","worker","_exit","data","_interopRequireDefault","require","_jestHasteMap","_jestMessageUtil","_jestRuntime","_jestWorker","_runTest","obj","__esModule","default","process","on","err","console","error","stack","formatError","message","separateMessageFromStack","type","code","undefined","resolvers","Map","getResolver","config","resolver","get","name","Error","setupData","serializableModuleMap","serializableResolvers","moduleMap","getStatic","getModuleMapFromJSON","set","createResolver","sendMessageToJest","eventName","args","messageParent","globalConfig","path","context","changedFiles","Set","sourcesRelatedToTestsInChangedFiles"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jest-runner/build/testWorker.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.setup = setup;\nexports.worker = worker;\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestHasteMap() {\n  const data = _interopRequireDefault(require('jest-haste-map'));\n\n  _jestHasteMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestRuntime() {\n  const data = _interopRequireDefault(require('jest-runtime'));\n\n  _jestRuntime = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWorker() {\n  const data = require('jest-worker');\n\n  _jestWorker = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _runTest = _interopRequireDefault(require('./runTest'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// Make sure uncaught errors are logged before we exit.\nprocess.on('uncaughtException', err => {\n  console.error(err.stack);\n  (0, _exit().default)(1);\n});\n\nconst formatError = error => {\n  if (typeof error === 'string') {\n    const {message, stack} = (0, _jestMessageUtil().separateMessageFromStack)(\n      error\n    );\n    return {\n      message,\n      stack,\n      type: 'Error'\n    };\n  }\n\n  return {\n    code: error.code || undefined,\n    message: error.message,\n    stack: error.stack,\n    type: 'Error'\n  };\n};\n\nconst resolvers = new Map();\n\nconst getResolver = config => {\n  const resolver = resolvers.get(config.name);\n\n  if (!resolver) {\n    throw new Error('Cannot find resolver for: ' + config.name);\n  }\n\n  return resolver;\n};\n\nfunction setup(setupData) {\n  // Module maps that will be needed for the test runs are passed.\n  for (const {\n    config,\n    serializableModuleMap\n  } of setupData.serializableResolvers) {\n    const moduleMap = _jestHasteMap()\n      .default.getStatic(config)\n      .getModuleMapFromJSON(serializableModuleMap);\n\n    resolvers.set(\n      config.name,\n      _jestRuntime().default.createResolver(config, moduleMap)\n    );\n  }\n}\n\nconst sendMessageToJest = (eventName, args) => {\n  (0, _jestWorker().messageParent)([eventName, args]);\n};\n\nasync function worker({config, globalConfig, path, context}) {\n  try {\n    return await (0, _runTest.default)(\n      path,\n      globalConfig,\n      config,\n      getResolver(config),\n      context && {\n        ...context,\n        changedFiles: context.changedFiles && new Set(context.changedFiles),\n        sourcesRelatedToTestsInChangedFiles:\n          context.sourcesRelatedToTestsInChangedFiles &&\n          new Set(context.sourcesRelatedToTestsInChangedFiles)\n      },\n      sendMessageToJest\n    );\n  } catch (error) {\n    throw formatError(error);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}