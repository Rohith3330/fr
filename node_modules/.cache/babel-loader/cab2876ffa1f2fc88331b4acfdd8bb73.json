{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Require a message for `toThrow()`',\n      recommended: false\n    },\n    messages: {\n      addErrorMessage: 'Add an error message to {{ matcherName }}()'\n    },\n    type: 'suggestion',\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        var _matcher$arguments;\n\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          matcher,\n          modifier\n        } = (0, _utils.parseExpectCall)(node);\n\n        if ((matcher === null || matcher === void 0 ? void 0 : (_matcher$arguments = matcher.arguments) === null || _matcher$arguments === void 0 ? void 0 : _matcher$arguments.length) === 0 && ['toThrow', 'toThrowError'].includes(matcher.name) && (!modifier || !(modifier.name === _utils.ModifierName.not || modifier.negation))) {\n          // Look for `toThrow` calls with no arguments.\n          context.report({\n            messageId: 'addErrorMessage',\n            data: {\n              matcherName: matcher.name\n            },\n            node: matcher.node.property\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utils","require","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","addErrorMessage","type","schema","defaultOptions","create","context","CallExpression","node","_matcher$arguments","isExpectCall","matcher","modifier","parseExpectCall","arguments","length","includes","ModifierName","not","negation","report","messageId","data","matcherName","property"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/require-to-throw-message.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Require a message for `toThrow()`',\n      recommended: false\n    },\n    messages: {\n      addErrorMessage: 'Add an error message to {{ matcherName }}()'\n    },\n    type: 'suggestion',\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        var _matcher$arguments;\n\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          matcher,\n          modifier\n        } = (0, _utils.parseExpectCall)(node);\n\n        if ((matcher === null || matcher === void 0 ? void 0 : (_matcher$arguments = matcher.arguments) === null || _matcher$arguments === void 0 ? void 0 : _matcher$arguments.length) === 0 && ['toThrow', 'toThrowError'].includes(matcher.name) && (!modifier || !(modifier.name === _utils.ModifierName.not || modifier.negation))) {\n          // Look for `toThrow` calls with no arguments.\n          context.report({\n            messageId: 'addErrorMessage',\n            data: {\n              matcherName: matcher.name\n            },\n            node: matcher.node.property\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAG,CAAC,GAAGF,MAAM,CAACG,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,mCAFT;MAGJC,WAAW,EAAE;IAHT,CADF;IAMJC,QAAQ,EAAE;MACRC,eAAe,EAAE;IADT,CANN;IASJC,IAAI,EAAE,YATF;IAUJC,MAAM,EAAE;EAVJ,CAF8B;EAcpCC,cAAc,EAAE,EAdoB;;EAgBpCC,MAAM,CAACC,OAAD,EAAU;IACd,OAAO;MACLC,cAAc,CAACC,IAAD,EAAO;QACnB,IAAIC,kBAAJ;;QAEA,IAAI,CAAC,CAAC,GAAGpB,MAAM,CAACqB,YAAX,EAAyBF,IAAzB,CAAL,EAAqC;UACnC;QACD;;QAED,MAAM;UACJG,OADI;UAEJC;QAFI,IAGF,CAAC,GAAGvB,MAAM,CAACwB,eAAX,EAA4BL,IAA5B,CAHJ;;QAKA,IAAI,CAACG,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkD,CAACF,kBAAkB,GAAGE,OAAO,CAACG,SAA9B,MAA6C,IAA7C,IAAqDL,kBAAkB,KAAK,KAAK,CAAjF,GAAqF,KAAK,CAA1F,GAA8FA,kBAAkB,CAACM,MAApK,MAAgL,CAAhL,IAAqL,CAAC,SAAD,EAAY,cAAZ,EAA4BC,QAA5B,CAAqCL,OAAO,CAAClB,IAA7C,CAArL,KAA4O,CAACmB,QAAD,IAAa,EAAEA,QAAQ,CAACnB,IAAT,KAAkBJ,MAAM,CAAC4B,YAAP,CAAoBC,GAAtC,IAA6CN,QAAQ,CAACO,QAAxD,CAAzP,CAAJ,EAAiU;UAC/T;UACAb,OAAO,CAACc,MAAR,CAAe;YACbC,SAAS,EAAE,iBADE;YAEbC,IAAI,EAAE;cACJC,WAAW,EAAEZ,OAAO,CAAClB;YADjB,CAFO;YAKbe,IAAI,EAAEG,OAAO,CAACH,IAAR,CAAagB;UALN,CAAf;QAOD;MACF;;IAvBI,CAAP;EA0BD;;AA3CmC,CAAvB,CAAf;;AA+CAtC,OAAO,CAACE,OAAR,GAAkBG,QAAlB"},"metadata":{},"sourceType":"script"}