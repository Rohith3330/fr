{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $String = GetIntrinsic('%String%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Type = require('../Type'); // https://262.ecma-international.org/11.0/#sec-numeric-types-number-tostring\n\n\nmodule.exports = function NumberToString(x) {\n  if (Type(x) !== 'Number') {\n    throw new $TypeError('Assertion failed: `x` must be a Number');\n  }\n\n  return $String(x);\n};","map":{"version":3,"names":["GetIntrinsic","require","$String","$TypeError","Type","module","exports","NumberToString","x"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2021/Number/toString.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $String = GetIntrinsic('%String%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Type = require('../Type');\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-number-tostring\n\nmodule.exports = function NumberToString(x) {\n\tif (Type(x) !== 'Number') {\n\t\tthrow new $TypeError('Assertion failed: `x` must be a Number');\n\t}\n\n\treturn $String(x);\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,OAAO,GAAGF,YAAY,CAAC,UAAD,CAA1B;AACA,IAAIG,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAII,IAAI,GAAGH,OAAO,CAAC,SAAD,CAAlB,C,CAEA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,CAAxB,EAA2B;EAC3C,IAAIJ,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,MAAM,IAAIL,UAAJ,CAAe,wCAAf,CAAN;EACA;;EAED,OAAOD,OAAO,CAACM,CAAD,CAAd;AACA,CAND"},"metadata":{},"sourceType":"script"}