{"ast":null,"code":"/**\n * @fileoverview Rule to flag missing semicolons.\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst FixTracker = require(\"./utils/fix-tracker\");\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"Require or disallow semicolons instead of ASI\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/semi\"\n    },\n    fixable: \"code\",\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"never\"]\n        }, {\n          type: \"object\",\n          properties: {\n            beforeStatementContinuationChars: {\n              enum: [\"always\", \"any\", \"never\"]\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }, {\n        type: \"array\",\n        items: [{\n          enum: [\"always\"]\n        }, {\n          type: \"object\",\n          properties: {\n            omitLastInOneLineBlock: {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    },\n    messages: {\n      missingSemi: \"Missing semicolon.\",\n      extraSemi: \"Extra semicolon.\"\n    }\n  },\n\n  create(context) {\n    const OPT_OUT_PATTERN = /^[-[(/+`]/u; // One of [(/+-`\n\n    const unsafeClassFieldNames = new Set([\"get\", \"set\", \"static\"]);\n    const unsafeClassFieldFollowers = new Set([\"*\", \"in\", \"instanceof\"]);\n    const options = context.options[1];\n    const never = context.options[0] === \"never\";\n    const exceptOneLine = Boolean(options && options.omitLastInOneLineBlock);\n    const beforeStatementContinuationChars = options && options.beforeStatementContinuationChars || \"any\";\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports a semicolon error with appropriate location and message.\n     * @param {ASTNode} node The node with an extra or missing semicolon.\n     * @param {boolean} missing True if the semicolon is missing.\n     * @returns {void}\n     */\n\n    function report(node, missing) {\n      const lastToken = sourceCode.getLastToken(node);\n      let messageId, fix, loc;\n\n      if (!missing) {\n        messageId = \"missingSemi\";\n        loc = {\n          start: lastToken.loc.end,\n          end: astUtils.getNextLocation(sourceCode, lastToken.loc.end)\n        };\n\n        fix = function (fixer) {\n          return fixer.insertTextAfter(lastToken, \";\");\n        };\n      } else {\n        messageId = \"extraSemi\";\n        loc = lastToken.loc;\n\n        fix = function (fixer) {\n          /*\n           * Expand the replacement range to include the surrounding\n           * tokens to avoid conflicting with no-extra-semi.\n           * https://github.com/eslint/eslint/issues/7928\n           */\n          return new FixTracker(fixer, sourceCode).retainSurroundingTokens(lastToken).remove(lastToken);\n        };\n      }\n\n      context.report({\n        node,\n        loc,\n        messageId,\n        fix\n      });\n    }\n    /**\n     * Check whether a given semicolon token is redundant.\n     * @param {Token} semiToken A semicolon token to check.\n     * @returns {boolean} `true` if the next token is `;` or `}`.\n     */\n\n\n    function isRedundantSemi(semiToken) {\n      const nextToken = sourceCode.getTokenAfter(semiToken);\n      return !nextToken || astUtils.isClosingBraceToken(nextToken) || astUtils.isSemicolonToken(nextToken);\n    }\n    /**\n     * Check whether a given token is the closing brace of an arrow function.\n     * @param {Token} lastToken A token to check.\n     * @returns {boolean} `true` if the token is the closing brace of an arrow function.\n     */\n\n\n    function isEndOfArrowBlock(lastToken) {\n      if (!astUtils.isClosingBraceToken(lastToken)) {\n        return false;\n      }\n\n      const node = sourceCode.getNodeByRangeIndex(lastToken.range[0]);\n      return node.type === \"BlockStatement\" && node.parent.type === \"ArrowFunctionExpression\";\n    }\n    /**\n     * Checks if a given PropertyDefinition node followed by a semicolon\n     * can safely remove that semicolon. It is not to safe to remove if\n     * the class field name is \"get\", \"set\", or \"static\", or if\n     * followed by a generator method.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} `true` if the node cannot have the semicolon\n     *      removed.\n     */\n\n\n    function maybeClassFieldAsiHazard(node) {\n      if (node.type !== \"PropertyDefinition\") {\n        return false;\n      }\n      /*\n       * Computed property names and non-identifiers are always safe\n       * as they can be distinguished from keywords easily.\n       */\n\n\n      const needsNameCheck = !node.computed && node.key.type === \"Identifier\";\n      /*\n       * Certain names are problematic unless they also have a\n       * a way to distinguish between keywords and property\n       * names.\n       */\n\n      if (needsNameCheck && unsafeClassFieldNames.has(node.key.name)) {\n        /*\n         * Special case: If the field name is `static`,\n         * it is only valid if the field is marked as static,\n         * so \"static static\" is okay but \"static\" is not.\n         */\n        const isStaticStatic = node.static && node.key.name === \"static\";\n        /*\n         * For other unsafe names, we only care if there is no\n         * initializer. No initializer = hazard.\n         */\n\n        if (!isStaticStatic && !node.value) {\n          return true;\n        }\n      }\n\n      const followingToken = sourceCode.getTokenAfter(node);\n      return unsafeClassFieldFollowers.has(followingToken.value);\n    }\n    /**\n     * Check whether a given node is on the same line with the next token.\n     * @param {Node} node A statement node to check.\n     * @returns {boolean} `true` if the node is on the same line with the next token.\n     */\n\n\n    function isOnSameLineWithNextToken(node) {\n      const prevToken = sourceCode.getLastToken(node, 1);\n      const nextToken = sourceCode.getTokenAfter(node);\n      return !!nextToken && astUtils.isTokenOnSameLine(prevToken, nextToken);\n    }\n    /**\n     * Check whether a given node can connect the next line if the next line is unreliable.\n     * @param {Node} node A statement node to check.\n     * @returns {boolean} `true` if the node can connect the next line.\n     */\n\n\n    function maybeAsiHazardAfter(node) {\n      const t = node.type;\n\n      if (t === \"DoWhileStatement\" || t === \"BreakStatement\" || t === \"ContinueStatement\" || t === \"DebuggerStatement\" || t === \"ImportDeclaration\" || t === \"ExportAllDeclaration\") {\n        return false;\n      }\n\n      if (t === \"ReturnStatement\") {\n        return Boolean(node.argument);\n      }\n\n      if (t === \"ExportNamedDeclaration\") {\n        return Boolean(node.declaration);\n      }\n\n      if (isEndOfArrowBlock(sourceCode.getLastToken(node, 1))) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Check whether a given token can connect the previous statement.\n     * @param {Token} token A token to check.\n     * @returns {boolean} `true` if the token is one of `[`, `(`, `/`, `+`, `-`, ```, `++`, and `--`.\n     */\n\n\n    function maybeAsiHazardBefore(token) {\n      return Boolean(token) && OPT_OUT_PATTERN.test(token.value) && token.value !== \"++\" && token.value !== \"--\";\n    }\n    /**\n     * Check if the semicolon of a given node is unnecessary, only true if:\n     *   - next token is a valid statement divider (`;` or `}`).\n     *   - next token is on a new line and the node is not connectable to the new line.\n     * @param {Node} node A statement node to check.\n     * @returns {boolean} whether the semicolon is unnecessary.\n     */\n\n\n    function canRemoveSemicolon(node) {\n      if (isRedundantSemi(sourceCode.getLastToken(node))) {\n        return true; // `;;` or `;}`\n      }\n\n      if (maybeClassFieldAsiHazard(node)) {\n        return false;\n      }\n\n      if (isOnSameLineWithNextToken(node)) {\n        return false; // One liner.\n      } // continuation characters should not apply to class fields\n\n\n      if (node.type !== \"PropertyDefinition\" && beforeStatementContinuationChars === \"never\" && !maybeAsiHazardAfter(node)) {\n        return true; // ASI works. This statement doesn't connect to the next.\n      }\n\n      if (!maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {\n        return true; // ASI works. The next token doesn't connect to this statement.\n      }\n\n      return false;\n    }\n    /**\n     * Checks a node to see if it's the last item in a one-liner block.\n     * Block is any `BlockStatement` or `StaticBlock` node. Block is a one-liner if its\n     * braces (and consequently everything between them) are on the same line.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} whether the node is the last item in a one-liner block.\n     */\n\n\n    function isLastInOneLinerBlock(node) {\n      const parent = node.parent;\n      const nextToken = sourceCode.getTokenAfter(node);\n\n      if (!nextToken || nextToken.value !== \"}\") {\n        return false;\n      }\n\n      if (parent.type === \"BlockStatement\") {\n        return parent.loc.start.line === parent.loc.end.line;\n      }\n\n      if (parent.type === \"StaticBlock\") {\n        const openingBrace = sourceCode.getFirstToken(parent, {\n          skip: 1\n        }); // skip the `static` token\n\n        return openingBrace.loc.start.line === parent.loc.end.line;\n      }\n\n      return false;\n    }\n    /**\n     * Checks a node to see if it's followed by a semicolon.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     */\n\n\n    function checkForSemicolon(node) {\n      const isSemi = astUtils.isSemicolonToken(sourceCode.getLastToken(node));\n\n      if (never) {\n        if (isSemi && canRemoveSemicolon(node)) {\n          report(node, true);\n        } else if (!isSemi && beforeStatementContinuationChars === \"always\" && node.type !== \"PropertyDefinition\" && maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {\n          report(node);\n        }\n      } else {\n        const oneLinerBlock = exceptOneLine && isLastInOneLinerBlock(node);\n\n        if (isSemi && oneLinerBlock) {\n          report(node, true);\n        } else if (!isSemi && !oneLinerBlock) {\n          report(node);\n        }\n      }\n    }\n    /**\n     * Checks to see if there's a semicolon after a variable declaration.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     */\n\n\n    function checkForSemicolonForVariableDeclaration(node) {\n      const parent = node.parent;\n\n      if ((parent.type !== \"ForStatement\" || parent.init !== node) && (!/^For(?:In|Of)Statement/u.test(parent.type) || parent.left !== node)) {\n        checkForSemicolon(node);\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      VariableDeclaration: checkForSemicolonForVariableDeclaration,\n      ExpressionStatement: checkForSemicolon,\n      ReturnStatement: checkForSemicolon,\n      ThrowStatement: checkForSemicolon,\n      DoWhileStatement: checkForSemicolon,\n      DebuggerStatement: checkForSemicolon,\n      BreakStatement: checkForSemicolon,\n      ContinueStatement: checkForSemicolon,\n      ImportDeclaration: checkForSemicolon,\n      ExportAllDeclaration: checkForSemicolon,\n\n      ExportNamedDeclaration(node) {\n        if (!node.declaration) {\n          checkForSemicolon(node);\n        }\n      },\n\n      ExportDefaultDeclaration(node) {\n        if (!/(?:Class|Function)Declaration/u.test(node.declaration.type)) {\n          checkForSemicolon(node);\n        }\n      },\n\n      PropertyDefinition: checkForSemicolon\n    };\n  }\n\n};","map":{"version":3,"names":["FixTracker","require","astUtils","module","exports","meta","type","docs","description","recommended","url","fixable","schema","anyOf","items","enum","properties","beforeStatementContinuationChars","additionalProperties","minItems","maxItems","omitLastInOneLineBlock","messages","missingSemi","extraSemi","create","context","OPT_OUT_PATTERN","unsafeClassFieldNames","Set","unsafeClassFieldFollowers","options","never","exceptOneLine","Boolean","sourceCode","getSourceCode","report","node","missing","lastToken","getLastToken","messageId","fix","loc","start","end","getNextLocation","fixer","insertTextAfter","retainSurroundingTokens","remove","isRedundantSemi","semiToken","nextToken","getTokenAfter","isClosingBraceToken","isSemicolonToken","isEndOfArrowBlock","getNodeByRangeIndex","range","parent","maybeClassFieldAsiHazard","needsNameCheck","computed","key","has","name","isStaticStatic","static","value","followingToken","isOnSameLineWithNextToken","prevToken","isTokenOnSameLine","maybeAsiHazardAfter","t","argument","declaration","maybeAsiHazardBefore","token","test","canRemoveSemicolon","isLastInOneLinerBlock","line","openingBrace","getFirstToken","skip","checkForSemicolon","isSemi","oneLinerBlock","checkForSemicolonForVariableDeclaration","init","left","VariableDeclaration","ExpressionStatement","ReturnStatement","ThrowStatement","DoWhileStatement","DebuggerStatement","BreakStatement","ContinueStatement","ImportDeclaration","ExportAllDeclaration","ExportNamedDeclaration","ExportDefaultDeclaration","PropertyDefinition"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/semi.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag missing semicolons.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst FixTracker = require(\"./utils/fix-tracker\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"Require or disallow semicolons instead of ASI\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/semi\"\n        },\n\n        fixable: \"code\",\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                beforeStatementContinuationChars: {\n                                    enum: [\"always\", \"any\", \"never\"]\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                omitLastInOneLineBlock: { type: \"boolean\" }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        },\n\n        messages: {\n            missingSemi: \"Missing semicolon.\",\n            extraSemi: \"Extra semicolon.\"\n        }\n    },\n\n    create(context) {\n\n        const OPT_OUT_PATTERN = /^[-[(/+`]/u; // One of [(/+-`\n        const unsafeClassFieldNames = new Set([\"get\", \"set\", \"static\"]);\n        const unsafeClassFieldFollowers = new Set([\"*\", \"in\", \"instanceof\"]);\n        const options = context.options[1];\n        const never = context.options[0] === \"never\";\n        const exceptOneLine = Boolean(options && options.omitLastInOneLineBlock);\n        const beforeStatementContinuationChars = options && options.beforeStatementContinuationChars || \"any\";\n        const sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports a semicolon error with appropriate location and message.\n         * @param {ASTNode} node The node with an extra or missing semicolon.\n         * @param {boolean} missing True if the semicolon is missing.\n         * @returns {void}\n         */\n        function report(node, missing) {\n            const lastToken = sourceCode.getLastToken(node);\n            let messageId,\n                fix,\n                loc;\n\n            if (!missing) {\n                messageId = \"missingSemi\";\n                loc = {\n                    start: lastToken.loc.end,\n                    end: astUtils.getNextLocation(sourceCode, lastToken.loc.end)\n                };\n                fix = function(fixer) {\n                    return fixer.insertTextAfter(lastToken, \";\");\n                };\n            } else {\n                messageId = \"extraSemi\";\n                loc = lastToken.loc;\n                fix = function(fixer) {\n\n                    /*\n                     * Expand the replacement range to include the surrounding\n                     * tokens to avoid conflicting with no-extra-semi.\n                     * https://github.com/eslint/eslint/issues/7928\n                     */\n                    return new FixTracker(fixer, sourceCode)\n                        .retainSurroundingTokens(lastToken)\n                        .remove(lastToken);\n                };\n            }\n\n            context.report({\n                node,\n                loc,\n                messageId,\n                fix\n            });\n\n        }\n\n        /**\n         * Check whether a given semicolon token is redundant.\n         * @param {Token} semiToken A semicolon token to check.\n         * @returns {boolean} `true` if the next token is `;` or `}`.\n         */\n        function isRedundantSemi(semiToken) {\n            const nextToken = sourceCode.getTokenAfter(semiToken);\n\n            return (\n                !nextToken ||\n                astUtils.isClosingBraceToken(nextToken) ||\n                astUtils.isSemicolonToken(nextToken)\n            );\n        }\n\n        /**\n         * Check whether a given token is the closing brace of an arrow function.\n         * @param {Token} lastToken A token to check.\n         * @returns {boolean} `true` if the token is the closing brace of an arrow function.\n         */\n        function isEndOfArrowBlock(lastToken) {\n            if (!astUtils.isClosingBraceToken(lastToken)) {\n                return false;\n            }\n            const node = sourceCode.getNodeByRangeIndex(lastToken.range[0]);\n\n            return (\n                node.type === \"BlockStatement\" &&\n                node.parent.type === \"ArrowFunctionExpression\"\n            );\n        }\n\n        /**\n         * Checks if a given PropertyDefinition node followed by a semicolon\n         * can safely remove that semicolon. It is not to safe to remove if\n         * the class field name is \"get\", \"set\", or \"static\", or if\n         * followed by a generator method.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} `true` if the node cannot have the semicolon\n         *      removed.\n         */\n        function maybeClassFieldAsiHazard(node) {\n\n            if (node.type !== \"PropertyDefinition\") {\n                return false;\n            }\n\n            /*\n             * Computed property names and non-identifiers are always safe\n             * as they can be distinguished from keywords easily.\n             */\n            const needsNameCheck = !node.computed && node.key.type === \"Identifier\";\n\n            /*\n             * Certain names are problematic unless they also have a\n             * a way to distinguish between keywords and property\n             * names.\n             */\n            if (needsNameCheck && unsafeClassFieldNames.has(node.key.name)) {\n\n                /*\n                 * Special case: If the field name is `static`,\n                 * it is only valid if the field is marked as static,\n                 * so \"static static\" is okay but \"static\" is not.\n                 */\n                const isStaticStatic = node.static && node.key.name === \"static\";\n\n                /*\n                 * For other unsafe names, we only care if there is no\n                 * initializer. No initializer = hazard.\n                 */\n                if (!isStaticStatic && !node.value) {\n                    return true;\n                }\n            }\n\n            const followingToken = sourceCode.getTokenAfter(node);\n\n            return unsafeClassFieldFollowers.has(followingToken.value);\n        }\n\n        /**\n         * Check whether a given node is on the same line with the next token.\n         * @param {Node} node A statement node to check.\n         * @returns {boolean} `true` if the node is on the same line with the next token.\n         */\n        function isOnSameLineWithNextToken(node) {\n            const prevToken = sourceCode.getLastToken(node, 1);\n            const nextToken = sourceCode.getTokenAfter(node);\n\n            return !!nextToken && astUtils.isTokenOnSameLine(prevToken, nextToken);\n        }\n\n        /**\n         * Check whether a given node can connect the next line if the next line is unreliable.\n         * @param {Node} node A statement node to check.\n         * @returns {boolean} `true` if the node can connect the next line.\n         */\n        function maybeAsiHazardAfter(node) {\n            const t = node.type;\n\n            if (t === \"DoWhileStatement\" ||\n                t === \"BreakStatement\" ||\n                t === \"ContinueStatement\" ||\n                t === \"DebuggerStatement\" ||\n                t === \"ImportDeclaration\" ||\n                t === \"ExportAllDeclaration\"\n            ) {\n                return false;\n            }\n            if (t === \"ReturnStatement\") {\n                return Boolean(node.argument);\n            }\n            if (t === \"ExportNamedDeclaration\") {\n                return Boolean(node.declaration);\n            }\n            if (isEndOfArrowBlock(sourceCode.getLastToken(node, 1))) {\n                return false;\n            }\n\n            return true;\n        }\n\n        /**\n         * Check whether a given token can connect the previous statement.\n         * @param {Token} token A token to check.\n         * @returns {boolean} `true` if the token is one of `[`, `(`, `/`, `+`, `-`, ```, `++`, and `--`.\n         */\n        function maybeAsiHazardBefore(token) {\n            return (\n                Boolean(token) &&\n                OPT_OUT_PATTERN.test(token.value) &&\n                token.value !== \"++\" &&\n                token.value !== \"--\"\n            );\n        }\n\n        /**\n         * Check if the semicolon of a given node is unnecessary, only true if:\n         *   - next token is a valid statement divider (`;` or `}`).\n         *   - next token is on a new line and the node is not connectable to the new line.\n         * @param {Node} node A statement node to check.\n         * @returns {boolean} whether the semicolon is unnecessary.\n         */\n        function canRemoveSemicolon(node) {\n            if (isRedundantSemi(sourceCode.getLastToken(node))) {\n                return true; // `;;` or `;}`\n            }\n            if (maybeClassFieldAsiHazard(node)) {\n                return false;\n            }\n            if (isOnSameLineWithNextToken(node)) {\n                return false; // One liner.\n            }\n\n            // continuation characters should not apply to class fields\n            if (\n                node.type !== \"PropertyDefinition\" &&\n                beforeStatementContinuationChars === \"never\" &&\n                !maybeAsiHazardAfter(node)\n            ) {\n                return true; // ASI works. This statement doesn't connect to the next.\n            }\n            if (!maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {\n                return true; // ASI works. The next token doesn't connect to this statement.\n            }\n\n            return false;\n        }\n\n        /**\n         * Checks a node to see if it's the last item in a one-liner block.\n         * Block is any `BlockStatement` or `StaticBlock` node. Block is a one-liner if its\n         * braces (and consequently everything between them) are on the same line.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} whether the node is the last item in a one-liner block.\n         */\n        function isLastInOneLinerBlock(node) {\n            const parent = node.parent;\n            const nextToken = sourceCode.getTokenAfter(node);\n\n            if (!nextToken || nextToken.value !== \"}\") {\n                return false;\n            }\n\n            if (parent.type === \"BlockStatement\") {\n                return parent.loc.start.line === parent.loc.end.line;\n            }\n\n            if (parent.type === \"StaticBlock\") {\n                const openingBrace = sourceCode.getFirstToken(parent, { skip: 1 }); // skip the `static` token\n\n                return openingBrace.loc.start.line === parent.loc.end.line;\n            }\n\n            return false;\n        }\n\n        /**\n         * Checks a node to see if it's followed by a semicolon.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkForSemicolon(node) {\n            const isSemi = astUtils.isSemicolonToken(sourceCode.getLastToken(node));\n\n            if (never) {\n                if (isSemi && canRemoveSemicolon(node)) {\n                    report(node, true);\n                } else if (\n                    !isSemi && beforeStatementContinuationChars === \"always\" &&\n                    node.type !== \"PropertyDefinition\" &&\n                    maybeAsiHazardBefore(sourceCode.getTokenAfter(node))\n                ) {\n                    report(node);\n                }\n            } else {\n                const oneLinerBlock = (exceptOneLine && isLastInOneLinerBlock(node));\n\n                if (isSemi && oneLinerBlock) {\n                    report(node, true);\n                } else if (!isSemi && !oneLinerBlock) {\n                    report(node);\n                }\n            }\n        }\n\n        /**\n         * Checks to see if there's a semicolon after a variable declaration.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkForSemicolonForVariableDeclaration(node) {\n            const parent = node.parent;\n\n            if ((parent.type !== \"ForStatement\" || parent.init !== node) &&\n                (!/^For(?:In|Of)Statement/u.test(parent.type) || parent.left !== node)\n            ) {\n                checkForSemicolon(node);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            VariableDeclaration: checkForSemicolonForVariableDeclaration,\n            ExpressionStatement: checkForSemicolon,\n            ReturnStatement: checkForSemicolon,\n            ThrowStatement: checkForSemicolon,\n            DoWhileStatement: checkForSemicolon,\n            DebuggerStatement: checkForSemicolon,\n            BreakStatement: checkForSemicolon,\n            ContinueStatement: checkForSemicolon,\n            ImportDeclaration: checkForSemicolon,\n            ExportAllDeclaration: checkForSemicolon,\n            ExportNamedDeclaration(node) {\n                if (!node.declaration) {\n                    checkForSemicolon(node);\n                }\n            },\n            ExportDefaultDeclaration(node) {\n                if (!/(?:Class|Function)Declaration/u.test(node.declaration.type)) {\n                    checkForSemicolon(node);\n                }\n            },\n            PropertyDefinition: checkForSemicolon\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}