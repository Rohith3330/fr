{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction getRequiredDef(keyword) {\n  return () => ({\n    keyword,\n    type: \"object\",\n    schemaType: \"array\",\n\n    macro(schema) {\n      if (schema.length === 0) return true;\n      if (schema.length === 1) return {\n        required: schema\n      };\n      const comb = keyword === \"anyRequired\" ? \"anyOf\" : \"oneOf\";\n      return {\n        [comb]: schema.map(p => ({\n          required: [p]\n        }))\n      };\n    },\n\n    metaSchema: {\n      type: \"array\",\n      items: {\n        type: \"string\"\n      }\n    }\n  });\n}\n\nexports.default = getRequiredDef;","map":{"version":3,"mappings":";;;;;;AAKA,SAAwBA,cAAxB,CACEC,OADF,EACsB;EAEpB,OAAO,OAAO;IACZA,OADY;IAEZC,IAAI,EAAE,QAFM;IAGZC,UAAU,EAAE,OAHA;;IAIZC,KAAK,CAACC,MAAD,EAAiB;MACpB,IAAIA,MAAM,CAACC,MAAP,KAAkB,CAAtB,EAAyB,OAAO,IAAP;MACzB,IAAID,MAAM,CAACC,MAAP,KAAkB,CAAtB,EAAyB,OAAO;QAACC,QAAQ,EAAEF;MAAX,CAAP;MACzB,MAAMG,IAAI,GAAGP,OAAO,KAAK,aAAZ,GAA4B,OAA5B,GAAsC,OAAnD;MACA,OAAO;QAAC,CAACO,IAAD,GAAQH,MAAM,CAACI,GAAP,CAAYC,CAAD,KAAQ;UAACH,QAAQ,EAAE,CAACG,CAAD;QAAX,CAAR,CAAX;MAAT,CAAP;IACD,CATW;;IAUZC,UAAU,EAAE;MACVT,IAAI,EAAE,OADI;MAEVU,KAAK,EAAE;QAACV,IAAI,EAAE;MAAP;IAFG;EAVA,CAAP,CAAP;AAeD;;AAlBDW","names":["getRequiredDef","keyword","type","schemaType","macro","schema","length","required","comb","map","p","metaSchema","items","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-webpack-plugin\\node_modules\\ajv-keywords\\src\\definitions\\_required.ts"],"sourcesContent":["import type {MacroKeywordDefinition} from \"ajv\"\nimport type {GetDefinition} from \"./_types\"\n\ntype RequiredKwd = \"anyRequired\" | \"oneRequired\"\n\nexport default function getRequiredDef(\n  keyword: RequiredKwd\n): GetDefinition<MacroKeywordDefinition> {\n  return () => ({\n    keyword,\n    type: \"object\",\n    schemaType: \"array\",\n    macro(schema: string[]) {\n      if (schema.length === 0) return true\n      if (schema.length === 1) return {required: schema}\n      const comb = keyword === \"anyRequired\" ? \"anyOf\" : \"oneOf\"\n      return {[comb]: schema.map((p) => ({required: [p]}))}\n    },\n    metaSchema: {\n      type: \"array\",\n      items: {type: \"string\"},\n    },\n  })\n}\n"]},"metadata":{},"sourceType":"script"}