{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeOptions;\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction normalizeOptions(config) {\n  var _config$options = config.options,\n      filename = _config$options.filename,\n      cwd = _config$options.cwd,\n      _config$options$filen = _config$options.filenameRelative,\n      filenameRelative = _config$options$filen === void 0 ? typeof filename === \"string\" ? _path().relative(cwd, filename) : \"unknown\" : _config$options$filen,\n      _config$options$sourc = _config$options.sourceType,\n      sourceType = _config$options$sourc === void 0 ? \"module\" : _config$options$sourc,\n      inputSourceMap = _config$options.inputSourceMap,\n      _config$options$sourc2 = _config$options.sourceMaps,\n      sourceMaps = _config$options$sourc2 === void 0 ? !!inputSourceMap : _config$options$sourc2,\n      _config$options$sourc3 = _config$options.sourceRoot,\n      sourceRoot = _config$options$sourc3 === void 0 ? config.options.moduleRoot : _config$options$sourc3,\n      _config$options$sourc4 = _config$options.sourceFileName,\n      sourceFileName = _config$options$sourc4 === void 0 ? _path().basename(filenameRelative) : _config$options$sourc4,\n      _config$options$comme = _config$options.comments,\n      comments = _config$options$comme === void 0 ? true : _config$options$comme,\n      _config$options$compa = _config$options.compact,\n      compact = _config$options$compa === void 0 ? \"auto\" : _config$options$compa;\n  var opts = config.options;\n  var options = Object.assign({}, opts, {\n    parserOpts: Object.assign({\n      sourceType: _path().extname(filenameRelative) === \".mjs\" ? \"module\" : sourceType,\n      sourceFileName: filename,\n      plugins: []\n    }, opts.parserOpts),\n    generatorOpts: Object.assign({\n      filename: filename,\n      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,\n      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,\n      retainLines: opts.retainLines,\n      comments: comments,\n      shouldPrintComment: opts.shouldPrintComment,\n      compact: compact,\n      minified: opts.minified,\n      sourceMaps: sourceMaps,\n      sourceRoot: sourceRoot,\n      sourceFileName: sourceFileName\n    }, opts.generatorOpts)\n  });\n\n  var _iterator = _createForOfIteratorHelper(config.passes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var plugins = _step.value;\n\n      var _iterator2 = _createForOfIteratorHelper(plugins),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var plugin = _step2.value;\n\n          if (plugin.manipulateOptions) {\n            plugin.manipulateOptions(options, options.parserOpts);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return options;\n}\n\n0 && 0;","map":{"version":3,"mappings":";;;;;;;;;AAAA;EAAA;;EAAAA;IAAA;EAAA;;EAAA;AAAA;;AAGe,SAASC,gBAAT,CAA0BC,MAA1B,EAAsD;EACnE,sBAiBIA,MAAM,CAACC,OAjBX;EAAA,IACEC,QADF,mBACEA,QADF;EAAA,IAEEC,GAFF,mBAEEA,GAFF;EAAA,4CAGEC,gBAHF;EAAA,IAGEA,gBAHF,sCAGqB,OAAOF,QAAP,KAAoB,QAApB,GACfG,QAAKC,QAALD,CAAcF,GAAdE,EAAmBH,QAAnBG,CADe,GAEf,SALN;EAAA,4CAMEE,UANF;EAAA,IAMEA,UANF,sCAMe,QANf;EAAA,IAOEC,cAPF,mBAOEA,cAPF;EAAA,6CAQEC,UARF;EAAA,IAQEA,UARF,uCAQe,CAAC,CAACD,cARjB;EAAA,6CASEE,UATF;EAAA,IASEA,UATF,uCAWMV,MAAM,CAACC,OAAPD,CAAeW,UAXrB;EAAA,6CAaEC,cAbF;EAAA,IAaEA,cAbF,uCAamBP,QAAKQ,QAALR,CAAcD,gBAAdC,CAbnB;EAAA,4CAeES,QAfF;EAAA,IAeEA,QAfF,sCAea,IAfb;EAAA,4CAgBEC,OAhBF;EAAA,IAgBEA,OAhBF,sCAgBY,MAhBZ;EAmBA,IAAMC,IAAI,GAAGhB,MAAM,CAACC,OAApB;EAEA,IAAMA,OAAO,qBACRe,IADQ;IAGXC,UAAU;MACRV,UAAU,EACRF,QAAKa,OAALb,CAAaD,gBAAbC,MAAmC,MAAnCA,GAA4C,QAA5CA,GAAuDE,UAFjD;MAIRK,cAAc,EAAEV,QAJR;MAKRiB,OAAO,EAAE;IALD,GAMLH,IAAI,CAACC,UANA,CAHC;IAYXG,aAAa;MAEXlB,QAFW,EAEXA,QAFW;MAIXmB,sBAAsB,EAAEL,IAAI,CAACK,sBAJlB;MAKXC,qBAAqB,EAAEN,IAAI,CAACM,qBALjB;MAMXC,WAAW,EAAEP,IAAI,CAACO,WANP;MAOXT,QAPW,EAOXA,QAPW;MAQXU,kBAAkB,EAAER,IAAI,CAACQ,kBARd;MASXT,OATW,EASXA,OATW;MAUXU,QAAQ,EAAET,IAAI,CAACS,QAVJ;MAaXhB,UAbW,EAaXA,UAbW;MAeXC,UAfW,EAeXA,UAfW;MAgBXE;IAhBW,GAiBRI,IAAI,CAACI,aAjBG;EAZF,EAAb;;EAtBmE,2CAuD7CpB,MAAM,CAAC0B,MAvDsC;EAAA;;EAAA;IAuDnE,oDAAqC;MAAA,IAA1BP,OAA0B;;MAAA,4CACdA,OADc;MAAA;;MAAA;QACnC,uDAA8B;UAAA,IAAnBQ,MAAmB;;UAC5B,IAAIA,MAAM,CAACC,iBAAX,EAA8B;YAC5BD,MAAM,CAACC,iBAAPD,CAAyB1B,OAAzB0B,EAAkC1B,OAAO,CAACgB,UAA1CU;UACD;QACF;MALkC;QAAA;MAAA;QAAA;MAAA;IAMpC;EA7DkE;IAAA;EAAA;IAAA;EAAA;;EA+DnE,OAAO1B,OAAP;AACD","names":["_path","normalizeOptions","config","options","filename","cwd","filenameRelative","path","relative","sourceType","inputSourceMap","sourceMaps","sourceRoot","moduleRoot","sourceFileName","basename","comments","compact","opts","parserOpts","extname","plugins","generatorOpts","auxiliaryCommentBefore","auxiliaryCommentAfter","retainLines","shouldPrintComment","minified","passes","plugin","manipulateOptions"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\transformation\\normalize-opts.ts"],"sourcesContent":["import path from \"path\";\nimport type { ResolvedConfig } from \"../config\";\n\nexport default function normalizeOptions(config: ResolvedConfig): {} {\n  const {\n    filename,\n    cwd,\n    filenameRelative = typeof filename === \"string\"\n      ? path.relative(cwd, filename)\n      : \"unknown\",\n    sourceType = \"module\",\n    inputSourceMap,\n    sourceMaps = !!inputSourceMap,\n    sourceRoot = process.env.BABEL_8_BREAKING\n      ? undefined\n      : config.options.moduleRoot,\n\n    sourceFileName = path.basename(filenameRelative),\n\n    comments = true,\n    compact = \"auto\",\n  } = config.options;\n\n  const opts = config.options;\n\n  const options = {\n    ...opts,\n\n    parserOpts: {\n      sourceType:\n        path.extname(filenameRelative) === \".mjs\" ? \"module\" : sourceType,\n\n      sourceFileName: filename,\n      plugins: [],\n      ...opts.parserOpts,\n    },\n\n    generatorOpts: {\n      // General generator flags.\n      filename,\n\n      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,\n      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,\n      retainLines: opts.retainLines,\n      comments,\n      shouldPrintComment: opts.shouldPrintComment,\n      compact,\n      minified: opts.minified,\n\n      // Source-map generation flags.\n      sourceMaps,\n\n      sourceRoot,\n      sourceFileName,\n      ...opts.generatorOpts,\n    },\n  };\n\n  for (const plugins of config.passes) {\n    for (const plugin of plugins) {\n      if (plugin.manipulateOptions) {\n        plugin.manipulateOptions(options, options.parserOpts);\n      }\n    }\n  }\n\n  return options;\n}\n"]},"metadata":{},"sourceType":"script"}