{"ast":null,"code":"'use strict';\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction isRequire(node) {\n  return node && node.callee && node.callee.type === 'Identifier' && node.callee.name === 'require' && node.arguments.length >= 1;\n}\n\nfunction isDynamicImport(node) {\n  return node && node.callee && node.callee.type === 'Import';\n}\n\nfunction isStaticValue(arg) {\n  return arg.type === 'Literal' || arg.type === 'TemplateLiteral' && arg.expressions.length === 0;\n}\n\nvar dynamicImportErrorMessage = 'Calls to import() should use string literals';\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: (0, _docsUrl2['default'])('no-dynamic-require')\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        esmodule: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  create: function () {\n    function create(context) {\n      var options = context.options[0] || {};\n      return {\n        CallExpression: function () {\n          function CallExpression(node) {\n            if (!node.arguments[0] || isStaticValue(node.arguments[0])) {\n              return;\n            }\n\n            if (isRequire(node)) {\n              return context.report({\n                node: node,\n                message: 'Calls to require() should use string literals'\n              });\n            }\n\n            if (options.esmodule && isDynamicImport(node)) {\n              return context.report({\n                node: node,\n                message: dynamicImportErrorMessage\n              });\n            }\n          }\n\n          return CallExpression;\n        }(),\n        ImportExpression: function () {\n          function ImportExpression(node) {\n            if (!options.esmodule || isStaticValue(node.source)) {\n              return;\n            }\n\n            return context.report({\n              node: node,\n              message: dynamicImportErrorMessage\n            });\n          }\n\n          return ImportExpression;\n        }()\n      };\n    }\n\n    return create;\n  }()\n};","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;AAEA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;EACvB,OAAOA,QACLA,KAAKC,MADAD,IAELA,KAAKC,MAALD,CAAYE,IAAZF,KAAqB,YAFhBA,IAGLA,KAAKC,MAALD,CAAYG,IAAZH,KAAqB,SAHhBA,IAILA,KAAKI,SAALJ,CAAeK,MAAfL,IAAyB,CAJ3B;AAKD;;AAED,SAASM,eAAT,CAAyBN,IAAzB,EAA+B;EAC7B,OAAOA,QACLA,KAAKC,MADAD,IAELA,KAAKC,MAALD,CAAYE,IAAZF,KAAqB,QAFvB;AAGD;;AAED,SAASO,aAAT,CAAuBC,GAAvB,EAA4B;EAC1B,OAAOA,IAAIN,IAAJM,KAAa,SAAbA,IACJA,IAAIN,IAAJM,KAAa,iBAAbA,IAAkCA,IAAIC,WAAJD,CAAgBH,MAAhBG,KAA2B,CADhE;AAED;;AAED,IAAME,4BAA4B,8CAAlC;AAEAC,OAAOC,OAAPD,GAAiB;EACfE,MAAM;IACJX,MAAM,YADF;IAEJY,MAAM;MACJC,KAAK,0BAAQ,oBAAR;IADD,CAFF;IAKJC,QAAQ,CACN;MACEd,MAAM,QADR;MAEEe,YAAY;QACVC,UAAU;UACRhB,MAAM;QADE;MADA,CAFd;MAOEiB,sBAAsB;IAPxB,CADM;EALJ,CADS;EAmBfC,MAnBe;IAAA,gBAmBRC,OAnBQ,EAmBC;MACd,IAAMC,UAAUD,QAAQC,OAARD,CAAgB,CAAhBA,KAAsB,EAAtC;MAEA,OAAO;QACLE,cADK;UAAA,wBACUvB,IADV,EACgB;YACnB,IAAI,CAACA,KAAKI,SAALJ,CAAe,CAAfA,CAAD,IAAsBO,cAAcP,KAAKI,SAALJ,CAAe,CAAfA,CAAdO,CAA1B,EAA4D;cAC1D;YACD;;YACD,IAAIR,UAAUC,IAAVD,CAAJ,EAAqB;cACnB,OAAOsB,QAAQG,MAARH,CAAe;gBACpBrB,UADoB;gBAEpByB,SAAS;cAFW,CAAfJ,CAAP;YAID;;YACD,IAAIC,QAAQJ,QAARI,IAAoBhB,gBAAgBN,IAAhBM,CAAxB,EAA+C;cAC7C,OAAOe,QAAQG,MAARH,CAAe;gBACpBrB,UADoB;gBAEpByB,SAASf;cAFW,CAAfW,CAAP;YAID;UAhBE;;UAAA;QAAA;QAkBLK,gBAlBK;UAAA,0BAkBY1B,IAlBZ,EAkBkB;YACrB,IAAI,CAACsB,QAAQJ,QAAT,IAAqBX,cAAcP,KAAK2B,MAAnBpB,CAAzB,EAAqD;cACnD;YACD;;YACD,OAAOc,QAAQG,MAARH,CAAe;cACpBrB,UADoB;cAEpByB,SAASf;YAFW,CAAfW,CAAP;UAtBG;;UAAA;QAAA;MAAA,CAAP;IAtBa;;IAAA;EAAA;AAAA,CAAjBV","names":["isRequire","node","callee","type","name","arguments","length","isDynamicImport","isStaticValue","arg","expressions","dynamicImportErrorMessage","module","exports","meta","docs","url","schema","properties","esmodule","additionalProperties","create","context","options","CallExpression","report","message","ImportExpression","source"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\no-dynamic-require.js"],"sourcesContent":["import docsUrl from '../docsUrl';\n\nfunction isRequire(node) {\n  return node &&\n    node.callee &&\n    node.callee.type === 'Identifier' &&\n    node.callee.name === 'require' &&\n    node.arguments.length >= 1;\n}\n\nfunction isDynamicImport(node) {\n  return node &&\n    node.callee &&\n    node.callee.type === 'Import';\n}\n\nfunction isStaticValue(arg) {\n  return arg.type === 'Literal' ||\n    (arg.type === 'TemplateLiteral' && arg.expressions.length === 0);\n}\n\nconst dynamicImportErrorMessage = 'Calls to import() should use string literals';\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: docsUrl('no-dynamic-require'),\n    },\n    schema: [\n      {\n        type: 'object',\n        properties: {\n          esmodule: {\n            type: 'boolean',\n          },\n        },\n        additionalProperties: false,\n      },\n    ],\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n\n    return {\n      CallExpression(node) {\n        if (!node.arguments[0] || isStaticValue(node.arguments[0])) {\n          return;\n        }\n        if (isRequire(node)) {\n          return context.report({\n            node,\n            message: 'Calls to require() should use string literals',\n          });\n        }\n        if (options.esmodule && isDynamicImport(node)) {\n          return context.report({\n            node,\n            message: dynamicImportErrorMessage,\n          });\n        }\n      },\n      ImportExpression(node) {\n        if (!options.esmodule || isStaticValue(node.source)) {\n          return;\n        }\n        return context.report({\n          node,\n          message: dynamicImportErrorMessage,\n        });\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}