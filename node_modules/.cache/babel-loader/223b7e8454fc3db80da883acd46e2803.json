{"ast":null,"code":"'use strict';\n\nvar transport = require('../../../spdy-transport');\n\nvar util = require('util');\n\nvar utils = require('./').utils;\n\nvar OffsetBuffer = require('obuf');\n\nvar Transform = require('readable-stream').Transform;\n\nfunction Parser(options) {\n  Transform.call(this, {\n    readableObjectMode: true\n  });\n  this.buffer = new OffsetBuffer();\n  this.partial = false;\n  this.waiting = 0;\n  this.window = options.window;\n  this.version = null;\n  this.decompress = null;\n  this.dead = false;\n}\n\nmodule.exports = Parser;\nutil.inherits(Parser, Transform);\nParser.prototype.error = utils.error;\n\nParser.prototype.kill = function kill() {\n  this.dead = true;\n};\n\nParser.prototype._transform = function transform(data, encoding, cb) {\n  if (!this.dead) {\n    this.buffer.push(data);\n  }\n\n  this._consume(cb);\n};\n\nParser.prototype._consume = function _consume(cb) {\n  var self = this;\n\n  function next(err, frame) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (Array.isArray(frame)) {\n      for (var i = 0; i < frame.length; i++) {\n        self.push(frame[i]);\n      }\n    } else if (frame) {\n      self.push(frame);\n    } // Consume more packets\n\n\n    if (!sync) {\n      return self._consume(cb);\n    }\n\n    process.nextTick(function () {\n      self._consume(cb);\n    });\n  }\n\n  if (this.dead) {\n    return cb();\n  }\n\n  if (this.buffer.size < this.waiting) {\n    // No data at all\n    if (this.buffer.size === 0) {\n      return cb();\n    } // Partial DATA frame or something that we can process partially\n\n\n    if (this.partial) {\n      var partial = this.buffer.clone(this.buffer.size);\n      this.buffer.skip(partial.size);\n      this.waiting -= partial.size;\n      this.executePartial(partial, next);\n      return;\n    } // We shall not do anything until we get all expected data\n\n\n    return cb();\n  }\n\n  var sync = true;\n  var content = this.buffer.clone(this.waiting);\n  this.buffer.skip(this.waiting);\n  this.execute(content, next);\n  sync = false;\n};\n\nParser.prototype.setVersion = function setVersion(version) {\n  this.version = version;\n  this.emit('version', version);\n};\n\nParser.prototype.setCompression = function setCompresion(pair) {\n  this.decompress = new transport.utils.LockStream(pair.decompress);\n};","map":{"version":3,"names":["transport","require","util","utils","OffsetBuffer","Transform","Parser","options","call","readableObjectMode","buffer","partial","waiting","window","version","decompress","dead","module","exports","inherits","prototype","error","kill","_transform","transform","data","encoding","cb","push","_consume","self","next","err","frame","Array","isArray","i","length","sync","process","nextTick","size","clone","skip","executePartial","content","execute","setVersion","emit","setCompression","setCompresion","pair","LockStream"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/spdy-transport/lib/spdy-transport/protocol/base/parser.js"],"sourcesContent":["'use strict'\n\nvar transport = require('../../../spdy-transport')\n\nvar util = require('util')\nvar utils = require('./').utils\nvar OffsetBuffer = require('obuf')\nvar Transform = require('readable-stream').Transform\n\nfunction Parser (options) {\n  Transform.call(this, {\n    readableObjectMode: true\n  })\n\n  this.buffer = new OffsetBuffer()\n  this.partial = false\n  this.waiting = 0\n\n  this.window = options.window\n\n  this.version = null\n  this.decompress = null\n  this.dead = false\n}\nmodule.exports = Parser\nutil.inherits(Parser, Transform)\n\nParser.prototype.error = utils.error\n\nParser.prototype.kill = function kill () {\n  this.dead = true\n}\n\nParser.prototype._transform = function transform (data, encoding, cb) {\n  if (!this.dead) { this.buffer.push(data) }\n\n  this._consume(cb)\n}\n\nParser.prototype._consume = function _consume (cb) {\n  var self = this\n\n  function next (err, frame) {\n    if (err) {\n      return cb(err)\n    }\n\n    if (Array.isArray(frame)) {\n      for (var i = 0; i < frame.length; i++) {\n        self.push(frame[i])\n      }\n    } else if (frame) {\n      self.push(frame)\n    }\n\n    // Consume more packets\n    if (!sync) {\n      return self._consume(cb)\n    }\n\n    process.nextTick(function () {\n      self._consume(cb)\n    })\n  }\n\n  if (this.dead) {\n    return cb()\n  }\n\n  if (this.buffer.size < this.waiting) {\n    // No data at all\n    if (this.buffer.size === 0) {\n      return cb()\n    }\n\n    // Partial DATA frame or something that we can process partially\n    if (this.partial) {\n      var partial = this.buffer.clone(this.buffer.size)\n      this.buffer.skip(partial.size)\n      this.waiting -= partial.size\n\n      this.executePartial(partial, next)\n      return\n    }\n\n    // We shall not do anything until we get all expected data\n    return cb()\n  }\n\n  var sync = true\n\n  var content = this.buffer.clone(this.waiting)\n  this.buffer.skip(this.waiting)\n\n  this.execute(content, next)\n  sync = false\n}\n\nParser.prototype.setVersion = function setVersion (version) {\n  this.version = version\n  this.emit('version', version)\n}\n\nParser.prototype.setCompression = function setCompresion (pair) {\n  this.decompress = new transport.utils.LockStream(pair.decompress)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}