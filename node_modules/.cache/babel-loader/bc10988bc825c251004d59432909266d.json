{"ast":null,"code":"import negateValue from './negateValue';\nimport corePluginList from '../corePluginList';\nimport configurePlugins from './configurePlugins';\nimport defaultConfig from '../../stubs/defaultConfig.stub';\nimport colors from '../public/colors';\nimport { defaults } from './defaults';\nimport { toPath } from './toPath';\nimport { normalizeConfig } from './normalizeConfig';\nimport isPlainObject from './isPlainObject';\nimport { cloneDeep } from './cloneDeep';\nimport { parseColorFormat } from './pluginUtils';\nimport { withAlphaValue } from './withAlphaVariable';\nimport toColorValue from './toColorValue';\n\nfunction isFunction(input) {\n  return typeof input === 'function';\n}\n\nfunction isObject(input) {\n  return typeof input === 'object' && input !== null;\n}\n\nfunction mergeWith(target) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  let customizer = sources.pop();\n\n  for (let source of sources) {\n    for (let k in source) {\n      let merged = customizer(target[k], source[k]);\n\n      if (merged === undefined) {\n        if (isObject(target[k]) && isObject(source[k])) {\n          target[k] = mergeWith(target[k], source[k], customizer);\n        } else {\n          target[k] = source[k];\n        }\n      } else {\n        target[k] = merged;\n      }\n    }\n  }\n\n  return target;\n}\n\nconst configUtils = {\n  colors,\n\n  negative(scale) {\n    // TODO: Log that this function isn't really needed anymore?\n    return Object.keys(scale).filter(key => scale[key] !== '0').reduce((negativeScale, key) => {\n      let negativeValue = negateValue(scale[key]);\n\n      if (negativeValue !== undefined) {\n        negativeScale[`-${key}`] = negativeValue;\n      }\n\n      return negativeScale;\n    }, {});\n  },\n\n  breakpoints(screens) {\n    return Object.keys(screens).filter(key => typeof screens[key] === 'string').reduce((breakpoints, key) => ({ ...breakpoints,\n      [`screen-${key}`]: screens[key]\n    }), {});\n  }\n\n};\n\nfunction value(valueToResolve) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  return isFunction(valueToResolve) ? valueToResolve(...args) : valueToResolve;\n}\n\nfunction collectExtends(items) {\n  return items.reduce((merged, _ref) => {\n    let {\n      extend\n    } = _ref;\n    return mergeWith(merged, extend, (mergedValue, extendValue) => {\n      if (mergedValue === undefined) {\n        return [extendValue];\n      }\n\n      if (Array.isArray(mergedValue)) {\n        return [extendValue, ...mergedValue];\n      }\n\n      return [extendValue, mergedValue];\n    });\n  }, {});\n}\n\nfunction mergeThemes(themes) {\n  return { ...themes.reduce((merged, theme) => defaults(merged, theme), {}),\n    // In order to resolve n config objects, we combine all of their `extend` properties\n    // into arrays instead of objects so they aren't overridden.\n    extend: collectExtends(themes)\n  };\n}\n\nfunction mergeExtensionCustomizer(merged, value) {\n  // When we have an array of objects, we do want to merge it\n  if (Array.isArray(merged) && isObject(merged[0])) {\n    return merged.concat(value);\n  } // When the incoming value is an array, and the existing config is an object, prepend the existing object\n\n\n  if (Array.isArray(value) && isObject(value[0]) && isObject(merged)) {\n    return [merged, ...value];\n  } // Override arrays (for example for font-families, box-shadows, ...)\n\n\n  if (Array.isArray(value)) {\n    return value;\n  } // Execute default behaviour\n\n\n  return undefined;\n}\n\nfunction mergeExtensions(_ref2) {\n  let {\n    extend,\n    ...theme\n  } = _ref2;\n  return mergeWith(theme, extend, (themeValue, extensions) => {\n    // The `extend` property is an array, so we need to check if it contains any functions\n    if (!isFunction(themeValue) && !extensions.some(isFunction)) {\n      return mergeWith({}, themeValue, ...extensions, mergeExtensionCustomizer);\n    }\n\n    return (resolveThemePath, utils) => mergeWith({}, ...[themeValue, ...extensions].map(e => value(e, resolveThemePath, utils)), mergeExtensionCustomizer);\n  });\n}\n/**\n *\n * @param {string} key\n * @return {Iterable<string[] & {alpha: string | undefined}>}\n */\n\n\nfunction* toPaths(key) {\n  let path = toPath(key);\n\n  if (path.length === 0) {\n    return;\n  }\n\n  yield path;\n\n  if (Array.isArray(key)) {\n    return;\n  }\n\n  let pattern = /^(.*?)\\s*\\/\\s*([^/]+)$/;\n  let matches = key.match(pattern);\n\n  if (matches !== null) {\n    let [, prefix, alpha] = matches;\n    let newPath = toPath(prefix);\n    newPath.alpha = alpha;\n    yield newPath;\n  }\n}\n\nfunction resolveFunctionKeys(object) {\n  // theme('colors.red.500 / 0.5') -> ['colors', 'red', '500 / 0', '5]\n  const resolvePath = (key, defaultValue) => {\n    for (const path of toPaths(key)) {\n      let index = 0;\n      let val = object;\n\n      while (val !== undefined && val !== null && index < path.length) {\n        val = val[path[index++]];\n        let shouldResolveAsFn = isFunction(val) && (path.alpha === undefined || index <= path.length - 1);\n        val = shouldResolveAsFn ? val(resolvePath, configUtils) : val;\n      }\n\n      if (val !== undefined) {\n        if (path.alpha !== undefined) {\n          let normalized = parseColorFormat(val);\n          return withAlphaValue(normalized, path.alpha, toColorValue(normalized));\n        }\n\n        if (isPlainObject(val)) {\n          return cloneDeep(val);\n        }\n\n        return val;\n      }\n    }\n\n    return defaultValue;\n  };\n\n  Object.assign(resolvePath, {\n    theme: resolvePath,\n    ...configUtils\n  });\n  return Object.keys(object).reduce((resolved, key) => {\n    resolved[key] = isFunction(object[key]) ? object[key](resolvePath, configUtils) : object[key];\n    return resolved;\n  }, {});\n}\n\nfunction extractPluginConfigs(configs) {\n  let allConfigs = [];\n  configs.forEach(config => {\n    allConfigs = [...allConfigs, config];\n    const plugins = config?.plugins ?? [];\n\n    if (plugins.length === 0) {\n      return;\n    }\n\n    plugins.forEach(plugin => {\n      if (plugin.__isOptionsFunction) {\n        plugin = plugin();\n      }\n\n      allConfigs = [...allConfigs, ...extractPluginConfigs([plugin?.config ?? {}])];\n    });\n  });\n  return allConfigs;\n}\n\nfunction resolveCorePlugins(corePluginConfigs) {\n  const result = [...corePluginConfigs].reduceRight((resolved, corePluginConfig) => {\n    if (isFunction(corePluginConfig)) {\n      return corePluginConfig({\n        corePlugins: resolved\n      });\n    }\n\n    return configurePlugins(corePluginConfig, resolved);\n  }, corePluginList);\n  return result;\n}\n\nfunction resolvePluginLists(pluginLists) {\n  const result = [...pluginLists].reduceRight((resolved, pluginList) => {\n    return [...resolved, ...pluginList];\n  }, []);\n  return result;\n}\n\nexport default function resolveConfig(configs) {\n  let allConfigs = [...extractPluginConfigs(configs), {\n    prefix: '',\n    important: false,\n    separator: ':',\n    variantOrder: defaultConfig.variantOrder\n  }];\n  return normalizeConfig(defaults({\n    theme: resolveFunctionKeys(mergeExtensions(mergeThemes(allConfigs.map(t => t?.theme ?? {})))),\n    corePlugins: resolveCorePlugins(allConfigs.map(c => c.corePlugins)),\n    plugins: resolvePluginLists(configs.map(c => c?.plugins ?? []))\n  }, ...allConfigs));\n}","map":{"version":3,"names":["negateValue","corePluginList","configurePlugins","defaultConfig","colors","defaults","toPath","normalizeConfig","isPlainObject","cloneDeep","parseColorFormat","withAlphaValue","toColorValue","isFunction","input","isObject","mergeWith","target","sources","customizer","pop","source","k","merged","undefined","configUtils","negative","scale","Object","keys","filter","key","reduce","negativeScale","negativeValue","breakpoints","screens","value","valueToResolve","args","collectExtends","items","extend","mergedValue","extendValue","Array","isArray","mergeThemes","themes","theme","mergeExtensionCustomizer","concat","mergeExtensions","themeValue","extensions","some","resolveThemePath","utils","map","e","toPaths","path","length","pattern","matches","match","prefix","alpha","newPath","resolveFunctionKeys","object","resolvePath","defaultValue","index","val","shouldResolveAsFn","normalized","assign","resolved","extractPluginConfigs","configs","allConfigs","forEach","config","plugins","plugin","__isOptionsFunction","resolveCorePlugins","corePluginConfigs","result","reduceRight","corePluginConfig","corePlugins","resolvePluginLists","pluginLists","pluginList","resolveConfig","important","separator","variantOrder","t","c"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/util/resolveConfig.js"],"sourcesContent":["import negateValue from './negateValue'\nimport corePluginList from '../corePluginList'\nimport configurePlugins from './configurePlugins'\nimport defaultConfig from '../../stubs/defaultConfig.stub'\nimport colors from '../public/colors'\nimport { defaults } from './defaults'\nimport { toPath } from './toPath'\nimport { normalizeConfig } from './normalizeConfig'\nimport isPlainObject from './isPlainObject'\nimport { cloneDeep } from './cloneDeep'\nimport { parseColorFormat } from './pluginUtils'\nimport { withAlphaValue } from './withAlphaVariable'\nimport toColorValue from './toColorValue'\n\nfunction isFunction(input) {\n  return typeof input === 'function'\n}\n\nfunction isObject(input) {\n  return typeof input === 'object' && input !== null\n}\n\nfunction mergeWith(target, ...sources) {\n  let customizer = sources.pop()\n\n  for (let source of sources) {\n    for (let k in source) {\n      let merged = customizer(target[k], source[k])\n\n      if (merged === undefined) {\n        if (isObject(target[k]) && isObject(source[k])) {\n          target[k] = mergeWith(target[k], source[k], customizer)\n        } else {\n          target[k] = source[k]\n        }\n      } else {\n        target[k] = merged\n      }\n    }\n  }\n\n  return target\n}\n\nconst configUtils = {\n  colors,\n  negative(scale) {\n    // TODO: Log that this function isn't really needed anymore?\n    return Object.keys(scale)\n      .filter((key) => scale[key] !== '0')\n      .reduce((negativeScale, key) => {\n        let negativeValue = negateValue(scale[key])\n\n        if (negativeValue !== undefined) {\n          negativeScale[`-${key}`] = negativeValue\n        }\n\n        return negativeScale\n      }, {})\n  },\n  breakpoints(screens) {\n    return Object.keys(screens)\n      .filter((key) => typeof screens[key] === 'string')\n      .reduce(\n        (breakpoints, key) => ({\n          ...breakpoints,\n          [`screen-${key}`]: screens[key],\n        }),\n        {}\n      )\n  },\n}\n\nfunction value(valueToResolve, ...args) {\n  return isFunction(valueToResolve) ? valueToResolve(...args) : valueToResolve\n}\n\nfunction collectExtends(items) {\n  return items.reduce((merged, { extend }) => {\n    return mergeWith(merged, extend, (mergedValue, extendValue) => {\n      if (mergedValue === undefined) {\n        return [extendValue]\n      }\n\n      if (Array.isArray(mergedValue)) {\n        return [extendValue, ...mergedValue]\n      }\n\n      return [extendValue, mergedValue]\n    })\n  }, {})\n}\n\nfunction mergeThemes(themes) {\n  return {\n    ...themes.reduce((merged, theme) => defaults(merged, theme), {}),\n\n    // In order to resolve n config objects, we combine all of their `extend` properties\n    // into arrays instead of objects so they aren't overridden.\n    extend: collectExtends(themes),\n  }\n}\n\nfunction mergeExtensionCustomizer(merged, value) {\n  // When we have an array of objects, we do want to merge it\n  if (Array.isArray(merged) && isObject(merged[0])) {\n    return merged.concat(value)\n  }\n\n  // When the incoming value is an array, and the existing config is an object, prepend the existing object\n  if (Array.isArray(value) && isObject(value[0]) && isObject(merged)) {\n    return [merged, ...value]\n  }\n\n  // Override arrays (for example for font-families, box-shadows, ...)\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  // Execute default behaviour\n  return undefined\n}\n\nfunction mergeExtensions({ extend, ...theme }) {\n  return mergeWith(theme, extend, (themeValue, extensions) => {\n    // The `extend` property is an array, so we need to check if it contains any functions\n    if (!isFunction(themeValue) && !extensions.some(isFunction)) {\n      return mergeWith({}, themeValue, ...extensions, mergeExtensionCustomizer)\n    }\n\n    return (resolveThemePath, utils) =>\n      mergeWith(\n        {},\n        ...[themeValue, ...extensions].map((e) => value(e, resolveThemePath, utils)),\n        mergeExtensionCustomizer\n      )\n  })\n}\n\n/**\n *\n * @param {string} key\n * @return {Iterable<string[] & {alpha: string | undefined}>}\n */\nfunction* toPaths(key) {\n  let path = toPath(key)\n\n  if (path.length === 0) {\n    return\n  }\n\n  yield path\n\n  if (Array.isArray(key)) {\n    return\n  }\n\n  let pattern = /^(.*?)\\s*\\/\\s*([^/]+)$/\n  let matches = key.match(pattern)\n\n  if (matches !== null) {\n    let [, prefix, alpha] = matches\n\n    let newPath = toPath(prefix)\n    newPath.alpha = alpha\n\n    yield newPath\n  }\n}\n\nfunction resolveFunctionKeys(object) {\n  // theme('colors.red.500 / 0.5') -> ['colors', 'red', '500 / 0', '5]\n\n  const resolvePath = (key, defaultValue) => {\n    for (const path of toPaths(key)) {\n      let index = 0\n      let val = object\n\n      while (val !== undefined && val !== null && index < path.length) {\n        val = val[path[index++]]\n\n        let shouldResolveAsFn =\n          isFunction(val) && (path.alpha === undefined || index <= path.length - 1)\n\n        val = shouldResolveAsFn ? val(resolvePath, configUtils) : val\n      }\n\n      if (val !== undefined) {\n        if (path.alpha !== undefined) {\n          let normalized = parseColorFormat(val)\n\n          return withAlphaValue(normalized, path.alpha, toColorValue(normalized))\n        }\n\n        if (isPlainObject(val)) {\n          return cloneDeep(val)\n        }\n\n        return val\n      }\n    }\n\n    return defaultValue\n  }\n\n  Object.assign(resolvePath, {\n    theme: resolvePath,\n    ...configUtils,\n  })\n\n  return Object.keys(object).reduce((resolved, key) => {\n    resolved[key] = isFunction(object[key]) ? object[key](resolvePath, configUtils) : object[key]\n\n    return resolved\n  }, {})\n}\n\nfunction extractPluginConfigs(configs) {\n  let allConfigs = []\n\n  configs.forEach((config) => {\n    allConfigs = [...allConfigs, config]\n\n    const plugins = config?.plugins ?? []\n\n    if (plugins.length === 0) {\n      return\n    }\n\n    plugins.forEach((plugin) => {\n      if (plugin.__isOptionsFunction) {\n        plugin = plugin()\n      }\n      allConfigs = [...allConfigs, ...extractPluginConfigs([plugin?.config ?? {}])]\n    })\n  })\n\n  return allConfigs\n}\n\nfunction resolveCorePlugins(corePluginConfigs) {\n  const result = [...corePluginConfigs].reduceRight((resolved, corePluginConfig) => {\n    if (isFunction(corePluginConfig)) {\n      return corePluginConfig({ corePlugins: resolved })\n    }\n    return configurePlugins(corePluginConfig, resolved)\n  }, corePluginList)\n\n  return result\n}\n\nfunction resolvePluginLists(pluginLists) {\n  const result = [...pluginLists].reduceRight((resolved, pluginList) => {\n    return [...resolved, ...pluginList]\n  }, [])\n\n  return result\n}\n\nexport default function resolveConfig(configs) {\n  let allConfigs = [\n    ...extractPluginConfigs(configs),\n    {\n      prefix: '',\n      important: false,\n      separator: ':',\n      variantOrder: defaultConfig.variantOrder,\n    },\n  ]\n\n  return normalizeConfig(\n    defaults(\n      {\n        theme: resolveFunctionKeys(\n          mergeExtensions(mergeThemes(allConfigs.map((t) => t?.theme ?? {})))\n        ),\n        corePlugins: resolveCorePlugins(allConfigs.map((c) => c.corePlugins)),\n        plugins: resolvePluginLists(configs.map((c) => c?.plugins ?? [])),\n      },\n      ...allConfigs\n    )\n  )\n}\n"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;EACzB,OAAO,OAAOA,KAAP,KAAiB,UAAxB;AACD;;AAED,SAASC,QAAT,CAAkBD,KAAlB,EAAyB;EACvB,OAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA9C;AACD;;AAED,SAASE,SAAT,CAAmBC,MAAnB,EAAuC;EAAA,kCAATC,OAAS;IAATA,OAAS;EAAA;;EACrC,IAAIC,UAAU,GAAGD,OAAO,CAACE,GAAR,EAAjB;;EAEA,KAAK,IAAIC,MAAT,IAAmBH,OAAnB,EAA4B;IAC1B,KAAK,IAAII,CAAT,IAAcD,MAAd,EAAsB;MACpB,IAAIE,MAAM,GAAGJ,UAAU,CAACF,MAAM,CAACK,CAAD,CAAP,EAAYD,MAAM,CAACC,CAAD,CAAlB,CAAvB;;MAEA,IAAIC,MAAM,KAAKC,SAAf,EAA0B;QACxB,IAAIT,QAAQ,CAACE,MAAM,CAACK,CAAD,CAAP,CAAR,IAAuBP,QAAQ,CAACM,MAAM,CAACC,CAAD,CAAP,CAAnC,EAAgD;UAC9CL,MAAM,CAACK,CAAD,CAAN,GAAYN,SAAS,CAACC,MAAM,CAACK,CAAD,CAAP,EAAYD,MAAM,CAACC,CAAD,CAAlB,EAAuBH,UAAvB,CAArB;QACD,CAFD,MAEO;UACLF,MAAM,CAACK,CAAD,CAAN,GAAYD,MAAM,CAACC,CAAD,CAAlB;QACD;MACF,CAND,MAMO;QACLL,MAAM,CAACK,CAAD,CAAN,GAAYC,MAAZ;MACD;IACF;EACF;;EAED,OAAON,MAAP;AACD;;AAED,MAAMQ,WAAW,GAAG;EAClBrB,MADkB;;EAElBsB,QAAQ,CAACC,KAAD,EAAQ;IACd;IACA,OAAOC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EACJG,MADI,CACIC,GAAD,IAASJ,KAAK,CAACI,GAAD,CAAL,KAAe,GAD3B,EAEJC,MAFI,CAEG,CAACC,aAAD,EAAgBF,GAAhB,KAAwB;MAC9B,IAAIG,aAAa,GAAGlC,WAAW,CAAC2B,KAAK,CAACI,GAAD,CAAN,CAA/B;;MAEA,IAAIG,aAAa,KAAKV,SAAtB,EAAiC;QAC/BS,aAAa,CAAE,IAAGF,GAAI,EAAT,CAAb,GAA2BG,aAA3B;MACD;;MAED,OAAOD,aAAP;IACD,CAVI,EAUF,EAVE,CAAP;EAWD,CAfiB;;EAgBlBE,WAAW,CAACC,OAAD,EAAU;IACnB,OAAOR,MAAM,CAACC,IAAP,CAAYO,OAAZ,EACJN,MADI,CACIC,GAAD,IAAS,OAAOK,OAAO,CAACL,GAAD,CAAd,KAAwB,QADpC,EAEJC,MAFI,CAGH,CAACG,WAAD,EAAcJ,GAAd,MAAuB,EACrB,GAAGI,WADkB;MAErB,CAAE,UAASJ,GAAI,EAAf,GAAmBK,OAAO,CAACL,GAAD;IAFL,CAAvB,CAHG,EAOH,EAPG,CAAP;EASD;;AA1BiB,CAApB;;AA6BA,SAASM,KAAT,CAAeC,cAAf,EAAwC;EAAA,mCAANC,IAAM;IAANA,IAAM;EAAA;;EACtC,OAAO1B,UAAU,CAACyB,cAAD,CAAV,GAA6BA,cAAc,CAAC,GAAGC,IAAJ,CAA3C,GAAuDD,cAA9D;AACD;;AAED,SAASE,cAAT,CAAwBC,KAAxB,EAA+B;EAC7B,OAAOA,KAAK,CAACT,MAAN,CAAa,CAACT,MAAD,WAAwB;IAAA,IAAf;MAAEmB;IAAF,CAAe;IAC1C,OAAO1B,SAAS,CAACO,MAAD,EAASmB,MAAT,EAAiB,CAACC,WAAD,EAAcC,WAAd,KAA8B;MAC7D,IAAID,WAAW,KAAKnB,SAApB,EAA+B;QAC7B,OAAO,CAACoB,WAAD,CAAP;MACD;;MAED,IAAIC,KAAK,CAACC,OAAN,CAAcH,WAAd,CAAJ,EAAgC;QAC9B,OAAO,CAACC,WAAD,EAAc,GAAGD,WAAjB,CAAP;MACD;;MAED,OAAO,CAACC,WAAD,EAAcD,WAAd,CAAP;IACD,CAVe,CAAhB;EAWD,CAZM,EAYJ,EAZI,CAAP;AAaD;;AAED,SAASI,WAAT,CAAqBC,MAArB,EAA6B;EAC3B,OAAO,EACL,GAAGA,MAAM,CAAChB,MAAP,CAAc,CAACT,MAAD,EAAS0B,KAAT,KAAmB5C,QAAQ,CAACkB,MAAD,EAAS0B,KAAT,CAAzC,EAA0D,EAA1D,CADE;IAGL;IACA;IACAP,MAAM,EAAEF,cAAc,CAACQ,MAAD;EALjB,CAAP;AAOD;;AAED,SAASE,wBAAT,CAAkC3B,MAAlC,EAA0Cc,KAA1C,EAAiD;EAC/C;EACA,IAAIQ,KAAK,CAACC,OAAN,CAAcvB,MAAd,KAAyBR,QAAQ,CAACQ,MAAM,CAAC,CAAD,CAAP,CAArC,EAAkD;IAChD,OAAOA,MAAM,CAAC4B,MAAP,CAAcd,KAAd,CAAP;EACD,CAJ8C,CAM/C;;;EACA,IAAIQ,KAAK,CAACC,OAAN,CAAcT,KAAd,KAAwBtB,QAAQ,CAACsB,KAAK,CAAC,CAAD,CAAN,CAAhC,IAA8CtB,QAAQ,CAACQ,MAAD,CAA1D,EAAoE;IAClE,OAAO,CAACA,MAAD,EAAS,GAAGc,KAAZ,CAAP;EACD,CAT8C,CAW/C;;;EACA,IAAIQ,KAAK,CAACC,OAAN,CAAcT,KAAd,CAAJ,EAA0B;IACxB,OAAOA,KAAP;EACD,CAd8C,CAgB/C;;;EACA,OAAOb,SAAP;AACD;;AAED,SAAS4B,eAAT,QAA+C;EAAA,IAAtB;IAAEV,MAAF;IAAU,GAAGO;EAAb,CAAsB;EAC7C,OAAOjC,SAAS,CAACiC,KAAD,EAAQP,MAAR,EAAgB,CAACW,UAAD,EAAaC,UAAb,KAA4B;IAC1D;IACA,IAAI,CAACzC,UAAU,CAACwC,UAAD,CAAX,IAA2B,CAACC,UAAU,CAACC,IAAX,CAAgB1C,UAAhB,CAAhC,EAA6D;MAC3D,OAAOG,SAAS,CAAC,EAAD,EAAKqC,UAAL,EAAiB,GAAGC,UAApB,EAAgCJ,wBAAhC,CAAhB;IACD;;IAED,OAAO,CAACM,gBAAD,EAAmBC,KAAnB,KACLzC,SAAS,CACP,EADO,EAEP,GAAG,CAACqC,UAAD,EAAa,GAAGC,UAAhB,EAA4BI,GAA5B,CAAiCC,CAAD,IAAOtB,KAAK,CAACsB,CAAD,EAAIH,gBAAJ,EAAsBC,KAAtB,CAA5C,CAFI,EAGPP,wBAHO,CADX;EAMD,CAZe,CAAhB;AAaD;AAED;AACA;AACA;AACA;AACA;;;AACA,UAAUU,OAAV,CAAkB7B,GAAlB,EAAuB;EACrB,IAAI8B,IAAI,GAAGvD,MAAM,CAACyB,GAAD,CAAjB;;EAEA,IAAI8B,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;IACrB;EACD;;EAED,MAAMD,IAAN;;EAEA,IAAIhB,KAAK,CAACC,OAAN,CAAcf,GAAd,CAAJ,EAAwB;IACtB;EACD;;EAED,IAAIgC,OAAO,GAAG,wBAAd;EACA,IAAIC,OAAO,GAAGjC,GAAG,CAACkC,KAAJ,CAAUF,OAAV,CAAd;;EAEA,IAAIC,OAAO,KAAK,IAAhB,EAAsB;IACpB,IAAI,GAAGE,MAAH,EAAWC,KAAX,IAAoBH,OAAxB;IAEA,IAAII,OAAO,GAAG9D,MAAM,CAAC4D,MAAD,CAApB;IACAE,OAAO,CAACD,KAAR,GAAgBA,KAAhB;IAEA,MAAMC,OAAN;EACD;AACF;;AAED,SAASC,mBAAT,CAA6BC,MAA7B,EAAqC;EACnC;EAEA,MAAMC,WAAW,GAAG,CAACxC,GAAD,EAAMyC,YAAN,KAAuB;IACzC,KAAK,MAAMX,IAAX,IAAmBD,OAAO,CAAC7B,GAAD,CAA1B,EAAiC;MAC/B,IAAI0C,KAAK,GAAG,CAAZ;MACA,IAAIC,GAAG,GAAGJ,MAAV;;MAEA,OAAOI,GAAG,KAAKlD,SAAR,IAAqBkD,GAAG,KAAK,IAA7B,IAAqCD,KAAK,GAAGZ,IAAI,CAACC,MAAzD,EAAiE;QAC/DY,GAAG,GAAGA,GAAG,CAACb,IAAI,CAACY,KAAK,EAAN,CAAL,CAAT;QAEA,IAAIE,iBAAiB,GACnB9D,UAAU,CAAC6D,GAAD,CAAV,KAAoBb,IAAI,CAACM,KAAL,KAAe3C,SAAf,IAA4BiD,KAAK,IAAIZ,IAAI,CAACC,MAAL,GAAc,CAAvE,CADF;QAGAY,GAAG,GAAGC,iBAAiB,GAAGD,GAAG,CAACH,WAAD,EAAc9C,WAAd,CAAN,GAAmCiD,GAA1D;MACD;;MAED,IAAIA,GAAG,KAAKlD,SAAZ,EAAuB;QACrB,IAAIqC,IAAI,CAACM,KAAL,KAAe3C,SAAnB,EAA8B;UAC5B,IAAIoD,UAAU,GAAGlE,gBAAgB,CAACgE,GAAD,CAAjC;UAEA,OAAO/D,cAAc,CAACiE,UAAD,EAAaf,IAAI,CAACM,KAAlB,EAAyBvD,YAAY,CAACgE,UAAD,CAArC,CAArB;QACD;;QAED,IAAIpE,aAAa,CAACkE,GAAD,CAAjB,EAAwB;UACtB,OAAOjE,SAAS,CAACiE,GAAD,CAAhB;QACD;;QAED,OAAOA,GAAP;MACD;IACF;;IAED,OAAOF,YAAP;EACD,CA9BD;;EAgCA5C,MAAM,CAACiD,MAAP,CAAcN,WAAd,EAA2B;IACzBtB,KAAK,EAAEsB,WADkB;IAEzB,GAAG9C;EAFsB,CAA3B;EAKA,OAAOG,MAAM,CAACC,IAAP,CAAYyC,MAAZ,EAAoBtC,MAApB,CAA2B,CAAC8C,QAAD,EAAW/C,GAAX,KAAmB;IACnD+C,QAAQ,CAAC/C,GAAD,CAAR,GAAgBlB,UAAU,CAACyD,MAAM,CAACvC,GAAD,CAAP,CAAV,GAA0BuC,MAAM,CAACvC,GAAD,CAAN,CAAYwC,WAAZ,EAAyB9C,WAAzB,CAA1B,GAAkE6C,MAAM,CAACvC,GAAD,CAAxF;IAEA,OAAO+C,QAAP;EACD,CAJM,EAIJ,EAJI,CAAP;AAKD;;AAED,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;EACrC,IAAIC,UAAU,GAAG,EAAjB;EAEAD,OAAO,CAACE,OAAR,CAAiBC,MAAD,IAAY;IAC1BF,UAAU,GAAG,CAAC,GAAGA,UAAJ,EAAgBE,MAAhB,CAAb;IAEA,MAAMC,OAAO,GAAGD,MAAM,EAAEC,OAAR,IAAmB,EAAnC;;IAEA,IAAIA,OAAO,CAACtB,MAAR,KAAmB,CAAvB,EAA0B;MACxB;IACD;;IAEDsB,OAAO,CAACF,OAAR,CAAiBG,MAAD,IAAY;MAC1B,IAAIA,MAAM,CAACC,mBAAX,EAAgC;QAC9BD,MAAM,GAAGA,MAAM,EAAf;MACD;;MACDJ,UAAU,GAAG,CAAC,GAAGA,UAAJ,EAAgB,GAAGF,oBAAoB,CAAC,CAACM,MAAM,EAAEF,MAAR,IAAkB,EAAnB,CAAD,CAAvC,CAAb;IACD,CALD;EAMD,CAfD;EAiBA,OAAOF,UAAP;AACD;;AAED,SAASM,kBAAT,CAA4BC,iBAA5B,EAA+C;EAC7C,MAAMC,MAAM,GAAG,CAAC,GAAGD,iBAAJ,EAAuBE,WAAvB,CAAmC,CAACZ,QAAD,EAAWa,gBAAX,KAAgC;IAChF,IAAI9E,UAAU,CAAC8E,gBAAD,CAAd,EAAkC;MAChC,OAAOA,gBAAgB,CAAC;QAAEC,WAAW,EAAEd;MAAf,CAAD,CAAvB;IACD;;IACD,OAAO5E,gBAAgB,CAACyF,gBAAD,EAAmBb,QAAnB,CAAvB;EACD,CALc,EAKZ7E,cALY,CAAf;EAOA,OAAOwF,MAAP;AACD;;AAED,SAASI,kBAAT,CAA4BC,WAA5B,EAAyC;EACvC,MAAML,MAAM,GAAG,CAAC,GAAGK,WAAJ,EAAiBJ,WAAjB,CAA6B,CAACZ,QAAD,EAAWiB,UAAX,KAA0B;IACpE,OAAO,CAAC,GAAGjB,QAAJ,EAAc,GAAGiB,UAAjB,CAAP;EACD,CAFc,EAEZ,EAFY,CAAf;EAIA,OAAON,MAAP;AACD;;AAED,eAAe,SAASO,aAAT,CAAuBhB,OAAvB,EAAgC;EAC7C,IAAIC,UAAU,GAAG,CACf,GAAGF,oBAAoB,CAACC,OAAD,CADR,EAEf;IACEd,MAAM,EAAE,EADV;IAEE+B,SAAS,EAAE,KAFb;IAGEC,SAAS,EAAE,GAHb;IAIEC,YAAY,EAAEhG,aAAa,CAACgG;EAJ9B,CAFe,CAAjB;EAUA,OAAO5F,eAAe,CACpBF,QAAQ,CACN;IACE4C,KAAK,EAAEoB,mBAAmB,CACxBjB,eAAe,CAACL,WAAW,CAACkC,UAAU,CAACvB,GAAX,CAAgB0C,CAAD,IAAOA,CAAC,EAAEnD,KAAH,IAAY,EAAlC,CAAD,CAAZ,CADS,CAD5B;IAIE2C,WAAW,EAAEL,kBAAkB,CAACN,UAAU,CAACvB,GAAX,CAAgB2C,CAAD,IAAOA,CAAC,CAACT,WAAxB,CAAD,CAJjC;IAKER,OAAO,EAAES,kBAAkB,CAACb,OAAO,CAACtB,GAAR,CAAa2C,CAAD,IAAOA,CAAC,EAAEjB,OAAH,IAAc,EAAjC,CAAD;EAL7B,CADM,EAQN,GAAGH,UARG,CADY,CAAtB;AAYD"},"metadata":{},"sourceType":"module"}