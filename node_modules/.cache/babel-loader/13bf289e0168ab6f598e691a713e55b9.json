{"ast":null,"code":"#!/usr/bin/env node\n\nconst rimraf = require('./');\n\nconst path = require('path');\n\nconst isRoot = arg => /^(\\/|[a-zA-Z]:\\\\)$/.test(path.resolve(arg));\n\nconst filterOutRoot = arg => {\n  const ok = preserveRoot === false || !isRoot(arg);\n\n  if (!ok) {\n    console.error(`refusing to remove ${arg}`);\n    console.error('Set --no-preserve-root to allow this');\n  }\n\n  return ok;\n};\n\nlet help = false;\nlet dashdash = false;\nlet noglob = false;\nlet preserveRoot = true;\nconst args = process.argv.slice(2).filter(arg => {\n  if (dashdash) return !!arg;else if (arg === '--') dashdash = true;else if (arg === '--no-glob' || arg === '-G') noglob = true;else if (arg === '--glob' || arg === '-g') noglob = false;else if (arg.match(/^(-+|\\/)(h(elp)?|\\?)$/)) help = true;else if (arg === '--preserve-root') preserveRoot = true;else if (arg === '--no-preserve-root') preserveRoot = false;else return !!arg;\n}).filter(arg => !preserveRoot || filterOutRoot(arg));\n\nconst go = n => {\n  if (n >= args.length) return;\n  const options = noglob ? {\n    glob: false\n  } : {};\n  rimraf(args[n], options, er => {\n    if (er) throw er;\n    go(n + 1);\n  });\n};\n\nif (help || args.length === 0) {\n  // If they didn't ask for help, then this is not a \"success\"\n  const log = help ? console.log : console.error;\n  log('Usage: rimraf <path> [<path> ...]');\n  log('');\n  log('  Deletes all files and folders at \"path\" recursively.');\n  log('');\n  log('Options:');\n  log('');\n  log('  -h, --help          Display this usage info');\n  log('  -G, --no-glob       Do not expand glob patterns in arguments');\n  log('  -g, --glob          Expand glob patterns in arguments (default)');\n  log('  --preserve-root     Do not remove \\'/\\' (default)');\n  log('  --no-preserve-root  Do not treat \\'/\\' specially');\n  log('  --                  Stop parsing flags');\n  process.exit(help ? 0 : 1);\n} else go(0);","map":{"version":3,"names":["rimraf","require","path","isRoot","arg","test","resolve","filterOutRoot","ok","preserveRoot","console","error","help","dashdash","noglob","args","process","argv","slice","filter","match","go","n","length","options","glob","er","log","exit"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/rimraf/bin.js"],"sourcesContent":["#!/usr/bin/env node\n\nconst rimraf = require('./')\n\nconst path = require('path')\n\nconst isRoot = arg => /^(\\/|[a-zA-Z]:\\\\)$/.test(path.resolve(arg))\nconst filterOutRoot = arg => {\n  const ok = preserveRoot === false || !isRoot(arg)\n  if (!ok) {\n    console.error(`refusing to remove ${arg}`)\n    console.error('Set --no-preserve-root to allow this')\n  }\n  return ok\n}\n\nlet help = false\nlet dashdash = false\nlet noglob = false\nlet preserveRoot = true\nconst args = process.argv.slice(2).filter(arg => {\n  if (dashdash)\n    return !!arg\n  else if (arg === '--')\n    dashdash = true\n  else if (arg === '--no-glob' || arg === '-G')\n    noglob = true\n  else if (arg === '--glob' || arg === '-g')\n    noglob = false\n  else if (arg.match(/^(-+|\\/)(h(elp)?|\\?)$/))\n    help = true\n  else if (arg === '--preserve-root')\n    preserveRoot = true\n  else if (arg === '--no-preserve-root')\n    preserveRoot = false\n  else\n    return !!arg\n}).filter(arg => !preserveRoot || filterOutRoot(arg))\n\nconst go = n => {\n  if (n >= args.length)\n    return\n  const options = noglob ? { glob: false } : {}\n  rimraf(args[n], options, er => {\n    if (er)\n      throw er\n    go(n+1)\n  })\n}\n\nif (help || args.length === 0) {\n  // If they didn't ask for help, then this is not a \"success\"\n  const log = help ? console.log : console.error\n  log('Usage: rimraf <path> [<path> ...]')\n  log('')\n  log('  Deletes all files and folders at \"path\" recursively.')\n  log('')\n  log('Options:')\n  log('')\n  log('  -h, --help          Display this usage info')\n  log('  -G, --no-glob       Do not expand glob patterns in arguments')\n  log('  -g, --glob          Expand glob patterns in arguments (default)')\n  log('  --preserve-root     Do not remove \\'/\\' (default)')\n  log('  --no-preserve-root  Do not treat \\'/\\' specially')\n  log('  --                  Stop parsing flags')\n  process.exit(help ? 0 : 1)\n} else\n  go(0)\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}