{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\n\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial; // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        } // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n\n\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n\n      return substitution;\n    }\n  };\n};\n\nexports.default = inlineArrayTransformer;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;;AAAA,IAAMA,WAAW;EACfC,WAAW,EADI;EAEfC,aAAa,EAFE;EAGfC,QAAQ;AAHO,CAAjB;AAMA;;;;;;;;;AAQA,IAAMC,yBAAyB,SAAzBA,sBAAyB;EAAA,IAACC,IAAD,uEAAQL,QAAR;EAAA,OAAsB;IACnDM,cADmD,0BACpCC,YADoC,EACtBC,WADsB,EACT;MACxC;MACA,IAAIC,MAAMC,OAAND,CAAcF,YAAdE,CAAJ,EAAiC;QAC/B,IAAME,cAAcJ,aAAaK,MAAjC;QACA,IAAMX,YAAYI,KAAKJ,SAAvB;QACA,IAAMC,cAAcG,KAAKH,WAAzB;QACA,IAAMC,SAASE,KAAKF,MAApB,CAJ+B,CAK/B;QACA;;QACA,IAAMU,SAASL,YAAYM,KAAZN,CAAkB,gBAAlBA,CAAf;;QACA,IAAIK,MAAJ,EAAY;UACVN,eAAeA,aAAaQ,IAAbR,CAAkBN,YAAYY,OAAO,CAAPA,CAA9BN,CAAfA;QADF,OAEO;UACLA,eAAeA,aAAaQ,IAAbR,CAAkBN,YAAY,GAA9BM,CAAfA;QACD,CAZ8B,CAa/B;;;QACA,IAAIL,eAAeS,cAAc,CAAjC,EAAoC;UAClC,IAAMK,iBAAiBT,aAAaU,WAAbV,CAAyBN,SAAzBM,CAAvB;UACAA,eACEA,aAAaW,KAAbX,CAAmB,CAAnBA,EAAsBS,cAAtBT,KACCJ,SAASF,SAATE,GAAqB,EADtBI,IAEA,GAFAA,GAGAL,WAHAK,GAIAA,aAAaW,KAAbX,CAAmBS,iBAAiB,CAApCT,CALFA;QAMD;MACF;;MACD,OAAOA,YAAP;IACD;EA5BkD,CAAtB;AAA/B;;kBA+BeH","names":["defaults","separator","conjunction","serial","inlineArrayTransformer","opts","onSubstitution","substitution","resultSoFar","Array","isArray","arrayLength","length","indent","match","join","separatorIndex","lastIndexOf","slice"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\common-tags\\src\\inlineArrayTransformer\\inlineArrayTransformer.js"],"sourcesContent":["const defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false,\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nconst inlineArrayTransformer = (opts = defaults) => ({\n  onSubstitution(substitution, resultSoFar) {\n    // only operate on arrays\n    if (Array.isArray(substitution)) {\n      const arrayLength = substitution.length;\n      const separator = opts.separator;\n      const conjunction = opts.conjunction;\n      const serial = opts.serial;\n      // join each item in the array into a string where each item is separated by separator\n      // be sure to maintain indentation\n      const indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n      if (indent) {\n        substitution = substitution.join(separator + indent[1]);\n      } else {\n        substitution = substitution.join(separator + ' ');\n      }\n      // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n      if (conjunction && arrayLength > 1) {\n        const separatorIndex = substitution.lastIndexOf(separator);\n        substitution =\n          substitution.slice(0, separatorIndex) +\n          (serial ? separator : '') +\n          ' ' +\n          conjunction +\n          substitution.slice(separatorIndex + 1);\n      }\n    }\n    return substitution;\n  },\n});\n\nexport default inlineArrayTransformer;\n"]},"metadata":{},"sourceType":"script"}