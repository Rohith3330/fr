{"ast":null,"code":"\"use strict\";\n\nconst Range = require(\"./Range\");\n/** @typedef {import(\"../validate\").Schema} Schema */\n\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.stringHints = function stringHints(schema, logic) {\n  const hints = [];\n  let type = \"string\";\n  const currentSchema = { ...schema\n  };\n\n  if (!logic) {\n    const tmpLength = currentSchema.minLength;\n    const tmpFormat = currentSchema.formatMinimum;\n    currentSchema.minLength = currentSchema.maxLength;\n    currentSchema.maxLength = tmpLength;\n    currentSchema.formatMinimum = currentSchema.formatMaximum;\n    currentSchema.formatMaximum = tmpFormat;\n  }\n\n  if (typeof currentSchema.minLength === \"number\") {\n    if (currentSchema.minLength === 1) {\n      type = \"non-empty string\";\n    } else {\n      const length = Math.max(currentSchema.minLength - 1, 0);\n      hints.push(`should be longer than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (typeof currentSchema.maxLength === \"number\") {\n    if (currentSchema.maxLength === 0) {\n      type = \"empty string\";\n    } else {\n      const length = currentSchema.maxLength + 1;\n      hints.push(`should be shorter than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (currentSchema.pattern) {\n    hints.push(`should${logic ? \"\" : \" not\"} match pattern ${JSON.stringify(currentSchema.pattern)}`);\n  }\n\n  if (currentSchema.format) {\n    hints.push(`should${logic ? \"\" : \" not\"} match format ${JSON.stringify(currentSchema.format)}`);\n  }\n\n  if (currentSchema.formatMinimum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMinimum ? \">\" : \">=\"} ${JSON.stringify(currentSchema.formatMinimum)}`);\n  }\n\n  if (currentSchema.formatMaximum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMaximum ? \"<\" : \"<=\"} ${JSON.stringify(currentSchema.formatMaximum)}`);\n  }\n\n  return [type].concat(hints);\n};\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.numberHints = function numberHints(schema, logic) {\n  const hints = [schema.type === \"integer\" ? \"integer\" : \"number\"];\n  const range = new Range();\n\n  if (typeof schema.minimum === \"number\") {\n    range.left(schema.minimum);\n  }\n\n  if (typeof schema.exclusiveMinimum === \"number\") {\n    range.left(schema.exclusiveMinimum, true);\n  }\n\n  if (typeof schema.maximum === \"number\") {\n    range.right(schema.maximum);\n  }\n\n  if (typeof schema.exclusiveMaximum === \"number\") {\n    range.right(schema.exclusiveMaximum, true);\n  }\n\n  const rangeFormat = range.format(logic);\n\n  if (rangeFormat) {\n    hints.push(rangeFormat);\n  }\n\n  if (typeof schema.multipleOf === \"number\") {\n    hints.push(`should${logic ? \"\" : \" not\"} be multiple of ${schema.multipleOf}`);\n  }\n\n  return hints;\n};","map":{"version":3,"names":["Range","require","module","exports","stringHints","schema","logic","hints","type","currentSchema","tmpLength","minLength","tmpFormat","formatMinimum","maxLength","formatMaximum","length","Math","max","push","pattern","JSON","stringify","format","formatExclusiveMinimum","formatExclusiveMaximum","concat","numberHints","range","minimum","left","exclusiveMinimum","maximum","right","exclusiveMaximum","rangeFormat","multipleOf"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/css-minimizer-webpack-plugin/node_modules/schema-utils/dist/util/hints.js"],"sourcesContent":["\"use strict\";\n\nconst Range = require(\"./Range\");\n/** @typedef {import(\"../validate\").Schema} Schema */\n\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.stringHints = function stringHints(schema, logic) {\n  const hints = [];\n  let type = \"string\";\n  const currentSchema = { ...schema\n  };\n\n  if (!logic) {\n    const tmpLength = currentSchema.minLength;\n    const tmpFormat = currentSchema.formatMinimum;\n    currentSchema.minLength = currentSchema.maxLength;\n    currentSchema.maxLength = tmpLength;\n    currentSchema.formatMinimum = currentSchema.formatMaximum;\n    currentSchema.formatMaximum = tmpFormat;\n  }\n\n  if (typeof currentSchema.minLength === \"number\") {\n    if (currentSchema.minLength === 1) {\n      type = \"non-empty string\";\n    } else {\n      const length = Math.max(currentSchema.minLength - 1, 0);\n      hints.push(`should be longer than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (typeof currentSchema.maxLength === \"number\") {\n    if (currentSchema.maxLength === 0) {\n      type = \"empty string\";\n    } else {\n      const length = currentSchema.maxLength + 1;\n      hints.push(`should be shorter than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (currentSchema.pattern) {\n    hints.push(`should${logic ? \"\" : \" not\"} match pattern ${JSON.stringify(currentSchema.pattern)}`);\n  }\n\n  if (currentSchema.format) {\n    hints.push(`should${logic ? \"\" : \" not\"} match format ${JSON.stringify(currentSchema.format)}`);\n  }\n\n  if (currentSchema.formatMinimum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMinimum ? \">\" : \">=\"} ${JSON.stringify(currentSchema.formatMinimum)}`);\n  }\n\n  if (currentSchema.formatMaximum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMaximum ? \"<\" : \"<=\"} ${JSON.stringify(currentSchema.formatMaximum)}`);\n  }\n\n  return [type].concat(hints);\n};\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.numberHints = function numberHints(schema, logic) {\n  const hints = [schema.type === \"integer\" ? \"integer\" : \"number\"];\n  const range = new Range();\n\n  if (typeof schema.minimum === \"number\") {\n    range.left(schema.minimum);\n  }\n\n  if (typeof schema.exclusiveMinimum === \"number\") {\n    range.left(schema.exclusiveMinimum, true);\n  }\n\n  if (typeof schema.maximum === \"number\") {\n    range.right(schema.maximum);\n  }\n\n  if (typeof schema.exclusiveMaximum === \"number\") {\n    range.right(schema.exclusiveMaximum, true);\n  }\n\n  const rangeFormat = range.format(logic);\n\n  if (rangeFormat) {\n    hints.push(rangeFormat);\n  }\n\n  if (typeof schema.multipleOf === \"number\") {\n    hints.push(`should${logic ? \"\" : \" not\"} be multiple of ${schema.multipleOf}`);\n  }\n\n  return hints;\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}