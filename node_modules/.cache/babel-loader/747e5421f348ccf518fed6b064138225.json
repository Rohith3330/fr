{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n/**\n * Check whatever node can be considered as simple\n * @param node the node to be evaluated.\n */\n\n\nfunction isSimpleType(node) {\n  switch (node.type) {\n    case utils_1.AST_NODE_TYPES.Identifier:\n    case utils_1.AST_NODE_TYPES.TSAnyKeyword:\n    case utils_1.AST_NODE_TYPES.TSBooleanKeyword:\n    case utils_1.AST_NODE_TYPES.TSNeverKeyword:\n    case utils_1.AST_NODE_TYPES.TSNumberKeyword:\n    case utils_1.AST_NODE_TYPES.TSBigIntKeyword:\n    case utils_1.AST_NODE_TYPES.TSObjectKeyword:\n    case utils_1.AST_NODE_TYPES.TSStringKeyword:\n    case utils_1.AST_NODE_TYPES.TSSymbolKeyword:\n    case utils_1.AST_NODE_TYPES.TSUnknownKeyword:\n    case utils_1.AST_NODE_TYPES.TSVoidKeyword:\n    case utils_1.AST_NODE_TYPES.TSNullKeyword:\n    case utils_1.AST_NODE_TYPES.TSArrayType:\n    case utils_1.AST_NODE_TYPES.TSUndefinedKeyword:\n    case utils_1.AST_NODE_TYPES.TSThisType:\n    case utils_1.AST_NODE_TYPES.TSQualifiedName:\n      return true;\n\n    case utils_1.AST_NODE_TYPES.TSTypeReference:\n      if (node.typeName && node.typeName.type === utils_1.AST_NODE_TYPES.Identifier && node.typeName.name === 'Array') {\n        if (!node.typeParameters) {\n          return true;\n        }\n\n        if (node.typeParameters.params.length === 1) {\n          return isSimpleType(node.typeParameters.params[0]);\n        }\n      } else {\n        if (node.typeParameters) {\n          return false;\n        }\n\n        return isSimpleType(node.typeName);\n      }\n\n      return false;\n\n    default:\n      return false;\n  }\n}\n/**\n * Check if node needs parentheses\n * @param node the node to be evaluated.\n */\n\n\nfunction typeNeedsParentheses(node) {\n  switch (node.type) {\n    case utils_1.AST_NODE_TYPES.TSTypeReference:\n      return typeNeedsParentheses(node.typeName);\n\n    case utils_1.AST_NODE_TYPES.TSUnionType:\n    case utils_1.AST_NODE_TYPES.TSFunctionType:\n    case utils_1.AST_NODE_TYPES.TSIntersectionType:\n    case utils_1.AST_NODE_TYPES.TSTypeOperator:\n    case utils_1.AST_NODE_TYPES.TSInferType:\n    case utils_1.AST_NODE_TYPES.TSConstructorType:\n      return true;\n\n    case utils_1.AST_NODE_TYPES.Identifier:\n      return node.name === 'ReadonlyArray';\n\n    default:\n      return false;\n  }\n}\n\nexports.default = util.createRule({\n  name: 'array-type',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Require using either `T[]` or `Array<T>` for arrays',\n      recommended: 'strict'\n    },\n    fixable: 'code',\n    messages: {\n      errorStringGeneric: \"Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.\",\n      errorStringArray: \"Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.\",\n      errorStringArraySimple: \"Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.\",\n      errorStringGenericSimple: \"Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead.\"\n    },\n    schema: {\n      $defs: {\n        arrayOption: {\n          enum: ['array', 'generic', 'array-simple']\n        }\n      },\n      prefixItems: [{\n        properties: {\n          default: {\n            $ref: '#/$defs/arrayOption',\n            description: 'The array type expected for mutable cases...'\n          },\n          readonly: {\n            $ref: '#/$defs/arrayOption',\n            description: 'The array type expected for readonly cases. If omitted, the value for `default` will be used.'\n          }\n        },\n        type: 'object'\n      }],\n      type: 'array'\n    }\n  },\n  defaultOptions: [{\n    default: 'array'\n  }],\n\n  create(context, _ref) {\n    let [options] = _ref;\n\n    var _a;\n\n    const sourceCode = context.getSourceCode();\n    const defaultOption = options.default;\n    const readonlyOption = (_a = options.readonly) !== null && _a !== void 0 ? _a : defaultOption;\n    /**\n     * @param node the node to be evaluated.\n     */\n\n    function getMessageType(node) {\n      if (node && isSimpleType(node)) {\n        return sourceCode.getText(node);\n      }\n\n      return 'T';\n    }\n\n    return {\n      TSArrayType(node) {\n        const isReadonly = node.parent && node.parent.type === utils_1.AST_NODE_TYPES.TSTypeOperator && node.parent.operator === 'readonly';\n        const currentOption = isReadonly ? readonlyOption : defaultOption;\n\n        if (currentOption === 'array' || currentOption === 'array-simple' && isSimpleType(node.elementType)) {\n          return;\n        }\n\n        const messageId = currentOption === 'generic' ? 'errorStringGeneric' : 'errorStringGenericSimple';\n        const errorNode = isReadonly ? node.parent : node;\n        context.report({\n          node: errorNode,\n          messageId,\n          data: {\n            className: isReadonly ? 'ReadonlyArray' : 'Array',\n            readonlyPrefix: isReadonly ? 'readonly ' : '',\n            type: getMessageType(node.elementType)\n          },\n\n          fix(fixer) {\n            const typeNode = node.elementType;\n            const arrayType = isReadonly ? 'ReadonlyArray' : 'Array';\n            return [fixer.replaceTextRange([errorNode.range[0], typeNode.range[0]], `${arrayType}<`), fixer.replaceTextRange([typeNode.range[1], errorNode.range[1]], '>')];\n          }\n\n        });\n      },\n\n      TSTypeReference(node) {\n        var _a, _b;\n\n        if (node.typeName.type !== utils_1.AST_NODE_TYPES.Identifier || !(node.typeName.name === 'Array' || node.typeName.name === 'ReadonlyArray')) {\n          return;\n        }\n\n        const isReadonlyArrayType = node.typeName.name === 'ReadonlyArray';\n        const currentOption = isReadonlyArrayType ? readonlyOption : defaultOption;\n\n        if (currentOption === 'generic') {\n          return;\n        }\n\n        const readonlyPrefix = isReadonlyArrayType ? 'readonly ' : '';\n        const typeParams = (_a = node.typeParameters) === null || _a === void 0 ? void 0 : _a.params;\n        const messageId = currentOption === 'array' ? 'errorStringArray' : 'errorStringArraySimple';\n\n        if (!typeParams || typeParams.length === 0) {\n          // Create an 'any' array\n          context.report({\n            node,\n            messageId,\n            data: {\n              className: isReadonlyArrayType ? 'ReadonlyArray' : 'Array',\n              readonlyPrefix,\n              type: 'any'\n            },\n\n            fix(fixer) {\n              return fixer.replaceText(node, `${readonlyPrefix}any[]`);\n            }\n\n          });\n          return;\n        }\n\n        if (typeParams.length !== 1 || currentOption === 'array-simple' && !isSimpleType(typeParams[0])) {\n          return;\n        }\n\n        const type = typeParams[0];\n        const typeParens = !util.isParenthesized(type, sourceCode) && typeNeedsParentheses(type);\n        const parentParens = readonlyPrefix && ((_b = node.parent) === null || _b === void 0 ? void 0 : _b.type) === utils_1.AST_NODE_TYPES.TSArrayType && !util.isParenthesized(node.parent.elementType, sourceCode);\n        const start = `${parentParens ? '(' : ''}${readonlyPrefix}${typeParens ? '(' : ''}`;\n        const end = `${typeParens ? ')' : ''}[]${parentParens ? ')' : ''}`;\n        context.report({\n          node,\n          messageId,\n          data: {\n            className: isReadonlyArrayType ? 'ReadonlyArray' : 'Array',\n            readonlyPrefix,\n            type: getMessageType(type)\n          },\n\n          fix(fixer) {\n            return [fixer.replaceTextRange([node.range[0], type.range[0]], start), fixer.replaceTextRange([type.range[1], node.range[1]], end)];\n          }\n\n        });\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["isSimpleType","node","type","utils_1","Identifier","TSAnyKeyword","TSBooleanKeyword","TSNeverKeyword","TSNumberKeyword","TSBigIntKeyword","TSObjectKeyword","TSStringKeyword","TSSymbolKeyword","TSUnknownKeyword","TSVoidKeyword","TSNullKeyword","TSArrayType","TSUndefinedKeyword","TSThisType","TSQualifiedName","TSTypeReference","typeName","name","typeParameters","params","length","typeNeedsParentheses","TSUnionType","TSFunctionType","TSIntersectionType","TSTypeOperator","TSInferType","TSConstructorType","exports","util","createRule","meta","docs","description","recommended","fixable","messages","errorStringGeneric","errorStringArray","errorStringArraySimple","errorStringGenericSimple","schema","$defs","arrayOption","enum","prefixItems","properties","default","$ref","readonly","defaultOptions","create","context","options","sourceCode","getSourceCode","defaultOption","readonlyOption","_a","getMessageType","getText","isReadonly","parent","operator","currentOption","elementType","messageId","errorNode","report","data","className","readonlyPrefix","fix","fixer","typeNode","arrayType","replaceTextRange","range","isReadonlyArrayType","typeParams","replaceText","typeParens","isParenthesized","parentParens","_b","start","end"],"sources":["../../src/rules/array-type.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}