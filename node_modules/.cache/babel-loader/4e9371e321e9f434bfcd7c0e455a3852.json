{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nconst accessibilityLevel = {\n  oneOf: [{\n    const: 'explicit',\n    description: 'Always require an accessor.'\n  }, {\n    const: 'no-public',\n    description: 'Require an accessor except when public.'\n  }, {\n    const: 'off',\n    description: 'Never check whether there is an accessor.'\n  }]\n};\nexports.default = util.createRule({\n  name: 'explicit-member-accessibility',\n  meta: {\n    hasSuggestions: true,\n    type: 'problem',\n    docs: {\n      description: 'Require explicit accessibility modifiers on class properties and methods',\n      // too opinionated to be recommended\n      recommended: false\n    },\n    fixable: 'code',\n    messages: {\n      missingAccessibility: 'Missing accessibility modifier on {{type}} {{name}}.',\n      unwantedPublicAccessibility: 'Public accessibility modifier on {{type}} {{name}}.',\n      addExplicitAccessibility: \"Add '{{ type }}' accessibility modifier\"\n    },\n    schema: {\n      $defs: {\n        accessibilityLevel\n      },\n      prefixItems: [{\n        type: 'object',\n        properties: {\n          accessibility: {\n            $ref: '#/$defs/accessibilityLevel'\n          },\n          overrides: {\n            type: 'object',\n            properties: {\n              accessors: {\n                $ref: '#/$defs/accessibilityLevel'\n              },\n              constructors: {\n                $ref: '#/$defs/accessibilityLevel'\n              },\n              methods: {\n                $ref: '#/$defs/accessibilityLevel'\n              },\n              properties: {\n                $ref: '#/$defs/accessibilityLevel'\n              },\n              parameterProperties: {\n                $ref: '#/$defs/accessibilityLevel'\n              }\n            },\n            additionalProperties: false\n          },\n          ignoredMethodNames: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        },\n        additionalProperties: false\n      }],\n      type: 'array'\n    }\n  },\n  defaultOptions: [{\n    accessibility: 'explicit'\n  }],\n\n  create(context, _ref) {\n    let [option] = _ref;\n\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    const sourceCode = context.getSourceCode();\n    const baseCheck = (_a = option.accessibility) !== null && _a !== void 0 ? _a : 'explicit';\n    const overrides = (_b = option.overrides) !== null && _b !== void 0 ? _b : {};\n    const ctorCheck = (_c = overrides.constructors) !== null && _c !== void 0 ? _c : baseCheck;\n    const accessorCheck = (_d = overrides.accessors) !== null && _d !== void 0 ? _d : baseCheck;\n    const methodCheck = (_e = overrides.methods) !== null && _e !== void 0 ? _e : baseCheck;\n    const propCheck = (_f = overrides.properties) !== null && _f !== void 0 ? _f : baseCheck;\n    const paramPropCheck = (_g = overrides.parameterProperties) !== null && _g !== void 0 ? _g : baseCheck;\n    const ignoredMethodNames = new Set((_h = option.ignoredMethodNames) !== null && _h !== void 0 ? _h : []);\n    /**\n     * Checks if a method declaration has an accessibility modifier.\n     * @param methodDefinition The node representing a MethodDefinition.\n     */\n\n    function checkMethodAccessibilityModifier(methodDefinition) {\n      if (methodDefinition.key.type === utils_1.AST_NODE_TYPES.PrivateIdentifier) {\n        return;\n      }\n\n      let nodeType = 'method definition';\n      let check = baseCheck;\n\n      switch (methodDefinition.kind) {\n        case 'method':\n          check = methodCheck;\n          break;\n\n        case 'constructor':\n          check = ctorCheck;\n          break;\n\n        case 'get':\n        case 'set':\n          check = accessorCheck;\n          nodeType = `${methodDefinition.kind} property accessor`;\n          break;\n      }\n\n      const {\n        name: methodName\n      } = util.getNameFromMember(methodDefinition, sourceCode);\n\n      if (check === 'off' || ignoredMethodNames.has(methodName)) {\n        return;\n      }\n\n      if (check === 'no-public' && methodDefinition.accessibility === 'public') {\n        context.report({\n          node: methodDefinition,\n          messageId: 'unwantedPublicAccessibility',\n          data: {\n            type: nodeType,\n            name: methodName\n          },\n          fix: getUnwantedPublicAccessibilityFixer(methodDefinition)\n        });\n      } else if (check === 'explicit' && !methodDefinition.accessibility) {\n        context.report({\n          node: methodDefinition,\n          messageId: 'missingAccessibility',\n          data: {\n            type: nodeType,\n            name: methodName\n          },\n          suggest: getMissingAccessibilitySuggestions(methodDefinition)\n        });\n      }\n    }\n    /**\n     * Creates a fixer that removes a \"public\" keyword with following spaces\n     */\n\n\n    function getUnwantedPublicAccessibilityFixer(node) {\n      return function (fixer) {\n        const tokens = sourceCode.getTokens(node);\n        let rangeToRemove;\n\n        for (let i = 0; i < tokens.length; i++) {\n          const token = tokens[i];\n\n          if (token.type === utils_1.AST_TOKEN_TYPES.Keyword && token.value === 'public') {\n            const commensAfterPublicKeyword = sourceCode.getCommentsAfter(token);\n\n            if (commensAfterPublicKeyword.length) {\n              // public /* Hi there! */ static foo()\n              // ^^^^^^^\n              rangeToRemove = [token.range[0], commensAfterPublicKeyword[0].range[0]];\n              break;\n            } else {\n              // public static foo()\n              // ^^^^^^^\n              rangeToRemove = [token.range[0], tokens[i + 1].range[0]];\n              break;\n            }\n          }\n        }\n\n        return fixer.removeRange(rangeToRemove);\n      };\n    }\n    /**\n     * Creates a fixer that adds a \"public\" keyword with following spaces\n     */\n\n\n    function getMissingAccessibilitySuggestions(node) {\n      function fix(accessibility, fixer) {\n        var _a;\n\n        if ((_a = node === null || node === void 0 ? void 0 : node.decorators) === null || _a === void 0 ? void 0 : _a.length) {\n          const lastDecorator = node.decorators[node.decorators.length - 1];\n          const nextToken = sourceCode.getTokenAfter(lastDecorator);\n          return fixer.insertTextBefore(nextToken, `${accessibility} `);\n        }\n\n        return fixer.insertTextBefore(node, `${accessibility} `);\n      }\n\n      return [{\n        messageId: 'addExplicitAccessibility',\n        data: {\n          type: 'public'\n        },\n        fix: fixer => fix('public', fixer)\n      }, {\n        messageId: 'addExplicitAccessibility',\n        data: {\n          type: 'private'\n        },\n        fix: fixer => fix('private', fixer)\n      }, {\n        messageId: 'addExplicitAccessibility',\n        data: {\n          type: 'protected'\n        },\n        fix: fixer => fix('protected', fixer)\n      }];\n    }\n    /**\n     * Checks if property has an accessibility modifier.\n     * @param propertyDefinition The node representing a PropertyDefinition.\n     */\n\n\n    function checkPropertyAccessibilityModifier(propertyDefinition) {\n      if (propertyDefinition.key.type === utils_1.AST_NODE_TYPES.PrivateIdentifier) {\n        return;\n      }\n\n      const nodeType = 'class property';\n      const {\n        name: propertyName\n      } = util.getNameFromMember(propertyDefinition, sourceCode);\n\n      if (propCheck === 'no-public' && propertyDefinition.accessibility === 'public') {\n        context.report({\n          node: propertyDefinition,\n          messageId: 'unwantedPublicAccessibility',\n          data: {\n            type: nodeType,\n            name: propertyName\n          },\n          fix: getUnwantedPublicAccessibilityFixer(propertyDefinition)\n        });\n      } else if (propCheck === 'explicit' && !propertyDefinition.accessibility) {\n        context.report({\n          node: propertyDefinition,\n          messageId: 'missingAccessibility',\n          data: {\n            type: nodeType,\n            name: propertyName\n          },\n          suggest: getMissingAccessibilitySuggestions(propertyDefinition)\n        });\n      }\n    }\n    /**\n     * Checks that the parameter property has the desired accessibility modifiers set.\n     * @param node The node representing a Parameter Property\n     */\n\n\n    function checkParameterPropertyAccessibilityModifier(node) {\n      const nodeType = 'parameter property'; // HAS to be an identifier or assignment or TSC will throw\n\n      if (node.parameter.type !== utils_1.AST_NODE_TYPES.Identifier && node.parameter.type !== utils_1.AST_NODE_TYPES.AssignmentPattern) {\n        return;\n      }\n\n      const nodeName = node.parameter.type === utils_1.AST_NODE_TYPES.Identifier ? node.parameter.name : // has to be an Identifier or TSC will throw an error\n      node.parameter.left.name;\n\n      switch (paramPropCheck) {\n        case 'explicit':\n          {\n            if (!node.accessibility) {\n              context.report({\n                node,\n                messageId: 'missingAccessibility',\n                data: {\n                  type: nodeType,\n                  name: nodeName\n                },\n                suggest: getMissingAccessibilitySuggestions(node)\n              });\n            }\n\n            break;\n          }\n\n        case 'no-public':\n          {\n            if (node.accessibility === 'public' && node.readonly) {\n              context.report({\n                node,\n                messageId: 'unwantedPublicAccessibility',\n                data: {\n                  type: nodeType,\n                  name: nodeName\n                },\n                fix: getUnwantedPublicAccessibilityFixer(node)\n              });\n            }\n\n            break;\n          }\n      }\n    }\n\n    return {\n      'MethodDefinition, TSAbstractMethodDefinition': checkMethodAccessibilityModifier,\n      'PropertyDefinition, TSAbstractPropertyDefinition': checkPropertyAccessibilityModifier,\n      TSParameterProperty: checkParameterPropertyAccessibilityModifier\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["accessibilityLevel","oneOf","const","description","exports","util","createRule","name","meta","hasSuggestions","type","docs","recommended","fixable","messages","missingAccessibility","unwantedPublicAccessibility","addExplicitAccessibility","schema","$defs","prefixItems","properties","accessibility","$ref","overrides","accessors","constructors","methods","parameterProperties","additionalProperties","ignoredMethodNames","items","defaultOptions","create","context","option","sourceCode","getSourceCode","baseCheck","_a","_b","ctorCheck","_c","accessorCheck","_d","methodCheck","_e","propCheck","_f","paramPropCheck","_g","Set","_h","checkMethodAccessibilityModifier","methodDefinition","key","utils_1","PrivateIdentifier","nodeType","check","kind","methodName","getNameFromMember","has","report","node","messageId","data","fix","getUnwantedPublicAccessibilityFixer","suggest","getMissingAccessibilitySuggestions","fixer","tokens","getTokens","rangeToRemove","i","length","token","Keyword","value","commensAfterPublicKeyword","getCommentsAfter","range","removeRange","decorators","lastDecorator","nextToken","getTokenAfter","insertTextBefore","checkPropertyAccessibilityModifier","propertyDefinition","propertyName","checkParameterPropertyAccessibilityModifier","parameter","Identifier","AssignmentPattern","nodeName","left","readonly","TSParameterProperty"],"sources":["../../src/rules/explicit-member-accessibility.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}