{"ast":null,"code":"/**\n * @fileoverview Enforce tabIndex value is not greater than zero.\n * @author Ethan Cohen\n */\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/tabindex-no-positive'; // -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\nconst expectedError = {\n  message: 'Avoid positive integer values for tabIndex.',\n  type: 'JSXAttribute'\n};\nruleTester.run('tabindex-no-positive', rule, {\n  valid: [{\n    code: '<div />;'\n  }, {\n    code: '<div {...props} />'\n  }, {\n    code: '<div id=\"main\" />'\n  }, {\n    code: '<div tabIndex={undefined} />'\n  }, {\n    code: '<div tabIndex={`${undefined}`} />'\n  }, {\n    code: '<div tabIndex={`${undefined}${undefined}`} />'\n  }, {\n    code: '<div tabIndex={0} />'\n  }, {\n    code: '<div tabIndex={-1} />'\n  }, {\n    code: '<div tabIndex={null} />'\n  }, {\n    code: '<div tabIndex={bar()} />'\n  }, {\n    code: '<div tabIndex={bar} />'\n  }, {\n    code: '<div tabIndex={\"foobar\"} />'\n  }, {\n    code: '<div tabIndex=\"0\" />'\n  }, {\n    code: '<div tabIndex=\"-1\" />'\n  }, {\n    code: '<div tabIndex=\"-5\" />'\n  }, {\n    code: '<div tabIndex=\"-5.5\" />'\n  }, {\n    code: '<div tabIndex={-5.5} />'\n  }, {\n    code: '<div tabIndex={-5} />'\n  }].map(parserOptionsMapper),\n  invalid: [{\n    code: '<div tabIndex=\"1\" />',\n    errors: [expectedError]\n  }, {\n    code: '<div tabIndex={1} />',\n    errors: [expectedError]\n  }, {\n    code: '<div tabIndex={\"1\"} />',\n    errors: [expectedError]\n  }, {\n    code: '<div tabIndex={`1`} />',\n    errors: [expectedError]\n  }, {\n    code: '<div tabIndex={1.589} />',\n    errors: [expectedError]\n  }].map(parserOptionsMapper)\n});","map":{"version":3,"names":["RuleTester","parserOptionsMapper","rule","ruleTester","expectedError","message","type","run","valid","code","map","invalid","errors"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/tabindex-no-positive-test.js"],"sourcesContent":["/**\n * @fileoverview Enforce tabIndex value is not greater than zero.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/tabindex-no-positive';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst expectedError = {\n  message: 'Avoid positive integer values for tabIndex.',\n  type: 'JSXAttribute',\n};\n\nruleTester.run('tabindex-no-positive', rule, {\n  valid: [\n    { code: '<div />;' },\n    { code: '<div {...props} />' },\n    { code: '<div id=\"main\" />' },\n    { code: '<div tabIndex={undefined} />' },\n    { code: '<div tabIndex={`${undefined}`} />' },\n    { code: '<div tabIndex={`${undefined}${undefined}`} />' },\n    { code: '<div tabIndex={0} />' },\n    { code: '<div tabIndex={-1} />' },\n    { code: '<div tabIndex={null} />' },\n    { code: '<div tabIndex={bar()} />' },\n    { code: '<div tabIndex={bar} />' },\n    { code: '<div tabIndex={\"foobar\"} />' },\n    { code: '<div tabIndex=\"0\" />' },\n    { code: '<div tabIndex=\"-1\" />' },\n    { code: '<div tabIndex=\"-5\" />' },\n    { code: '<div tabIndex=\"-5.5\" />' },\n    { code: '<div tabIndex={-5.5} />' },\n    { code: '<div tabIndex={-5} />' },\n  ].map(parserOptionsMapper),\n\n  invalid: [\n    { code: '<div tabIndex=\"1\" />', errors: [expectedError] },\n    { code: '<div tabIndex={1} />', errors: [expectedError] },\n    { code: '<div tabIndex={\"1\"} />', errors: [expectedError] },\n    { code: '<div tabIndex={`1`} />', errors: [expectedError] },\n    { code: '<div tabIndex={1.589} />', errors: [expectedError] },\n  ].map(parserOptionsMapper),\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,SAASA,UAAT,QAA2B,QAA3B;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AACA,OAAOC,IAAP,MAAiB,yCAAjB,C,CAEA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG,IAAIH,UAAJ,EAAnB;AAEA,MAAMI,aAAa,GAAG;EACpBC,OAAO,EAAE,6CADW;EAEpBC,IAAI,EAAE;AAFc,CAAtB;AAKAH,UAAU,CAACI,GAAX,CAAe,sBAAf,EAAuCL,IAAvC,EAA6C;EAC3CM,KAAK,EAAE,CACL;IAAEC,IAAI,EAAE;EAAR,CADK,EAEL;IAAEA,IAAI,EAAE;EAAR,CAFK,EAGL;IAAEA,IAAI,EAAE;EAAR,CAHK,EAIL;IAAEA,IAAI,EAAE;EAAR,CAJK,EAKL;IAAEA,IAAI,EAAE;EAAR,CALK,EAML;IAAEA,IAAI,EAAE;EAAR,CANK,EAOL;IAAEA,IAAI,EAAE;EAAR,CAPK,EAQL;IAAEA,IAAI,EAAE;EAAR,CARK,EASL;IAAEA,IAAI,EAAE;EAAR,CATK,EAUL;IAAEA,IAAI,EAAE;EAAR,CAVK,EAWL;IAAEA,IAAI,EAAE;EAAR,CAXK,EAYL;IAAEA,IAAI,EAAE;EAAR,CAZK,EAaL;IAAEA,IAAI,EAAE;EAAR,CAbK,EAcL;IAAEA,IAAI,EAAE;EAAR,CAdK,EAeL;IAAEA,IAAI,EAAE;EAAR,CAfK,EAgBL;IAAEA,IAAI,EAAE;EAAR,CAhBK,EAiBL;IAAEA,IAAI,EAAE;EAAR,CAjBK,EAkBL;IAAEA,IAAI,EAAE;EAAR,CAlBK,EAmBLC,GAnBK,CAmBDT,mBAnBC,CADoC;EAsB3CU,OAAO,EAAE,CACP;IAAEF,IAAI,EAAE,sBAAR;IAAgCG,MAAM,EAAE,CAACR,aAAD;EAAxC,CADO,EAEP;IAAEK,IAAI,EAAE,sBAAR;IAAgCG,MAAM,EAAE,CAACR,aAAD;EAAxC,CAFO,EAGP;IAAEK,IAAI,EAAE,wBAAR;IAAkCG,MAAM,EAAE,CAACR,aAAD;EAA1C,CAHO,EAIP;IAAEK,IAAI,EAAE,wBAAR;IAAkCG,MAAM,EAAE,CAACR,aAAD;EAA1C,CAJO,EAKP;IAAEK,IAAI,EAAE,0BAAR;IAAoCG,MAAM,EAAE,CAACR,aAAD;EAA5C,CALO,EAMPM,GANO,CAMHT,mBANG;AAtBkC,CAA7C"},"metadata":{},"sourceType":"module"}