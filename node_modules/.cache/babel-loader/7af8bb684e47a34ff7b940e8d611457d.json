{"ast":null,"code":"import chalk from 'chalk';\nimport ansiEscapes from 'ansi-escapes';\nimport stringLength from 'string-length';\nimport { PatternPrompt, printPatternCaret, printRestoredPatternCaret } from 'jest-watcher';\nimport { escapeStrForRegex } from 'jest-regex-util';\nimport { highlight, getTerminalWidth, trimAndFormatPath, removeTrimmingDots } from \"../lib/utils.js\";\nimport { formatTypeaheadSelection, printMore, printPatternMatches, printStartTyping, printTypeaheadItem } from \"../lib/pattern_mode_helpers.js\";\nimport scroll from \"../lib/scroll.js\";\nexport default class FileNamePatternPrompt extends PatternPrompt {\n  constructor(pipe, prompt) {\n    super(pipe, prompt);\n    this._entityName = 'filenames';\n    this._searchSources = [];\n  }\n\n  _onChange(pattern, options) {\n    super._onChange(pattern, options);\n\n    this._printTypeahead(pattern, options);\n  }\n\n  _printTypeahead(pattern, options) {\n    const matchedTests = this._getMatchedTests(pattern);\n\n    const total = matchedTests.length;\n    const pipe = this._pipe;\n    const prompt = this._prompt;\n    printPatternCaret(pattern, pipe);\n    pipe.write(ansiEscapes.cursorLeft);\n\n    if (pattern) {\n      printPatternMatches(total, 'file', pipe);\n      const prefix = `  ${chalk.dim('\\u203A')} `;\n      const padding = stringLength(prefix) + 2;\n      const width = getTerminalWidth(pipe);\n      const {\n        start,\n        end,\n        index\n      } = scroll(total, options);\n      prompt.setPromptLength(total);\n      matchedTests.slice(start, end).map(_ref => {\n        let {\n          path,\n          context\n        } = _ref;\n        const filePath = trimAndFormatPath(padding, context.config, path, width);\n        return highlight(path, filePath, pattern);\n      }).map((item, i) => formatTypeaheadSelection(item, i, index, prompt)).forEach(item => printTypeaheadItem(item, pipe));\n\n      if (total > end) {\n        printMore('file', pipe, total - end);\n      }\n    } else {\n      printStartTyping('filename', pipe);\n    }\n\n    printRestoredPatternCaret(pattern, this._currentUsageRows, pipe);\n  }\n\n  _getMatchedTests(pattern) {\n    let regex;\n\n    try {\n      regex = new RegExp(pattern, 'i');\n    } catch (e) {\n      return [];\n    }\n\n    return this._searchSources.reduce((tests, _ref2) => {\n      let {\n        testPaths,\n        config\n      } = _ref2;\n      return tests.concat(testPaths.filter(testPath => regex.test(testPath)).map(path => ({\n        path,\n        context: {\n          config\n        }\n      })));\n    }, []);\n  }\n\n  updateSearchSources(searchSources) {\n    this._searchSources = searchSources;\n  }\n\n  run(onSuccess, onCancel, options) {\n    super.run(value => {\n      onSuccess(removeTrimmingDots(value).split('/').map(escapeStrForRegex).join('/'));\n    }, onCancel, options);\n  }\n\n}","map":{"version":3,"names":["chalk","ansiEscapes","stringLength","PatternPrompt","printPatternCaret","printRestoredPatternCaret","escapeStrForRegex","highlight","getTerminalWidth","trimAndFormatPath","removeTrimmingDots","formatTypeaheadSelection","printMore","printPatternMatches","printStartTyping","printTypeaheadItem","scroll","FileNamePatternPrompt","constructor","pipe","prompt","_entityName","_searchSources","_onChange","pattern","options","_printTypeahead","matchedTests","_getMatchedTests","total","length","_pipe","_prompt","write","cursorLeft","prefix","dim","padding","width","start","end","index","setPromptLength","slice","map","path","context","filePath","config","item","i","forEach","_currentUsageRows","regex","RegExp","e","reduce","tests","testPaths","concat","filter","testPath","test","updateSearchSources","searchSources","run","onSuccess","onCancel","value","split","join"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jest-watch-typeahead/build/file_name_plugin/prompt.js"],"sourcesContent":["import chalk from 'chalk';\nimport ansiEscapes from 'ansi-escapes';\nimport stringLength from 'string-length';\nimport { PatternPrompt, printPatternCaret, printRestoredPatternCaret } from 'jest-watcher';\nimport { escapeStrForRegex } from 'jest-regex-util';\nimport { highlight, getTerminalWidth, trimAndFormatPath, removeTrimmingDots } from \"../lib/utils.js\";\nimport { formatTypeaheadSelection, printMore, printPatternMatches, printStartTyping, printTypeaheadItem } from \"../lib/pattern_mode_helpers.js\";\nimport scroll from \"../lib/scroll.js\";\nexport default class FileNamePatternPrompt extends PatternPrompt {\n  constructor(pipe, prompt) {\n    super(pipe, prompt);\n    this._entityName = 'filenames';\n    this._searchSources = [];\n  }\n\n  _onChange(pattern, options) {\n    super._onChange(pattern, options);\n\n    this._printTypeahead(pattern, options);\n  }\n\n  _printTypeahead(pattern, options) {\n    const matchedTests = this._getMatchedTests(pattern);\n\n    const total = matchedTests.length;\n    const pipe = this._pipe;\n    const prompt = this._prompt;\n    printPatternCaret(pattern, pipe);\n    pipe.write(ansiEscapes.cursorLeft);\n\n    if (pattern) {\n      printPatternMatches(total, 'file', pipe);\n      const prefix = `  ${chalk.dim('\\u203A')} `;\n      const padding = stringLength(prefix) + 2;\n      const width = getTerminalWidth(pipe);\n      const {\n        start,\n        end,\n        index\n      } = scroll(total, options);\n      prompt.setPromptLength(total);\n      matchedTests.slice(start, end).map(({\n        path,\n        context\n      }) => {\n        const filePath = trimAndFormatPath(padding, context.config, path, width);\n        return highlight(path, filePath, pattern);\n      }).map((item, i) => formatTypeaheadSelection(item, i, index, prompt)).forEach(item => printTypeaheadItem(item, pipe));\n\n      if (total > end) {\n        printMore('file', pipe, total - end);\n      }\n    } else {\n      printStartTyping('filename', pipe);\n    }\n\n    printRestoredPatternCaret(pattern, this._currentUsageRows, pipe);\n  }\n\n  _getMatchedTests(pattern) {\n    let regex;\n\n    try {\n      regex = new RegExp(pattern, 'i');\n    } catch (e) {\n      return [];\n    }\n\n    return this._searchSources.reduce((tests, {\n      testPaths,\n      config\n    }) => {\n      return tests.concat(testPaths.filter(testPath => regex.test(testPath)).map(path => ({\n        path,\n        context: {\n          config\n        }\n      })));\n    }, []);\n  }\n\n  updateSearchSources(searchSources) {\n    this._searchSources = searchSources;\n  }\n\n  run(onSuccess, onCancel, options) {\n    super.run(value => {\n      onSuccess(removeTrimmingDots(value).split('/').map(escapeStrForRegex).join('/'));\n    }, onCancel, options);\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}