{"ast":null,"code":"import postcssBrowserComments from 'postcss-browser-comments';\nimport Module from 'module';\nimport path from 'path';\nimport { URL } from 'url';\nimport fs from 'fs';\nimport postcss from 'postcss';\n\nconst assign = function () {\n  return Object.assign(...arguments);\n};\n\nconst create = function () {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return assign(Object.create(null), ...objects);\n};\n\nconst currentURL = import.meta.url;\nconst currentFilename = new URL(currentURL).pathname;\nconst currentDirname = path.dirname(currentFilename); // get resolved filenames for normalize.css\n\nconst normalizeCSS = resolve('@csstools/normalize.css');\nconst normalizeDir = path.dirname(normalizeCSS);\nconst normalizeOpinionatedCSS = path.join(normalizeDir, 'opinionated.css'); // get resolved filenames for sanitize.css\n\nconst sanitizeCSS = resolve('sanitize.css');\nconst sanitizeDir = path.dirname(sanitizeCSS);\nconst sanitizeAssetsCSS = path.join(sanitizeDir, 'assets.css');\nconst sanitizeFormsCSS = path.join(sanitizeDir, 'forms.css');\nconst sanitizeReduceMotionCSS = path.join(sanitizeDir, 'reduce-motion.css');\nconst sanitizeTypographyCSS = path.join(sanitizeDir, 'typography.css');\nconst sanitizeSystemUiCSS = path.join(sanitizeDir, 'system-ui.css');\nconst sanitizeUiMonospace = path.join(sanitizeDir, 'ui-monospace.css'); // export a hashmap of css library filenames\n\nconst parsableFilenames = create({\n  [normalizeCSS]: true,\n  [normalizeOpinionatedCSS]: true,\n  [sanitizeCSS]: true,\n  [sanitizeAssetsCSS]: true,\n  [sanitizeFormsCSS]: true,\n  [sanitizeReduceMotionCSS]: true,\n  [sanitizeTypographyCSS]: true,\n  [sanitizeSystemUiCSS]: true,\n  [sanitizeUiMonospace]: true\n}); // export a hashmap of css library filenames by id\n\nconst resolvedFilenamesById = create({\n  'normalize': [normalizeCSS],\n  'normalize/opinionated': [normalizeOpinionatedCSS],\n  'normalize/*': [normalizeOpinionatedCSS],\n  'sanitize': [sanitizeCSS],\n  'sanitize/assets': [sanitizeAssetsCSS],\n  'sanitize/forms': [sanitizeCSS, sanitizeFormsCSS],\n  'sanitize/page': [sanitizeAssetsCSS],\n  // deprecated; remaining for v10.0.0 compatibility\n  'sanitize/reduce-motion': [sanitizeCSS, sanitizeReduceMotionCSS],\n  'sanitize/system-ui': [sanitizeCSS, sanitizeSystemUiCSS],\n  'sanitize/typography': [sanitizeCSS, sanitizeTypographyCSS],\n  'sanitize/ui-monospace': [sanitizeCSS, sanitizeUiMonospace],\n  'sanitize/*': [sanitizeCSS, sanitizeFormsCSS]\n}); // get the resolved filename of a package/module\n\nfunction resolve(id) {\n  return resolve[id] = resolve[id] || Module._resolveFilename(id, {\n    id: currentFilename,\n    filename: currentFilename,\n    paths: Module._nodeModulePaths(currentDirname)\n  });\n}\n\nconst cache$1 = create();\n\nasync function readFile(filename) {\n  filename = path.resolve(filename);\n  cache$1[filename] = cache$1[filename] || create();\n  return new Promise((resolve, reject) => fs.stat(filename, (statsError, _ref) => {\n    let {\n      mtime\n    } = _ref;\n    return statsError ? reject(statsError) : mtime === cache$1[filename].mtime ? resolve(cache$1[filename].data) : fs.readFile(filename, 'utf8', (readFileError, data) => readFileError ? reject(readFileError) : resolve((cache$1[filename] = {\n      data,\n      mtime\n    }).data));\n  }));\n}\n\nconst cache = create(null);\n\nvar parse = (filename, transformer) => readFile(filename).then( // cache the parsed css root\ncss => cache[css] = cache[css] || postcss.parse(css, {\n  from: filename\n})).then( // clone the cached root\nroot => root.clone()).then( // transform the cloned root\nclone => Promise.resolve(transformer(clone)).then( // resolve the cloned root\n() => clone));\n\nvar postcssImportNormalize = commentsTransformer => opts => {\n  opts = create(opts); // return an postcss-import configuration\n\n  return create({\n    load(filename, importOptions) {\n      return filename in parsableFilenames // parse the file (the file and css are conservatively cached)\n      ? parse(filename, commentsTransformer).then(root => root.toResult({\n        to: filename,\n        map: true\n      }).css) : typeof opts.load === 'function' // otherwise, use the override loader\n      ? opts.load.call(null, filename, importOptions) // otherwise, return the (conservatively cached) contents of the file\n      : readFile(filename);\n    },\n\n    resolve(id, basedir, importOptions) {\n      // get the css id by removing css extensions\n      const cssId = id.replace(cssExtRegExp$1, '');\n      return cssId in resolvedFilenamesById // return the known resolved path for the css id\n      ? resolvedFilenamesById[cssId] : typeof opts.resolve === 'function' // otherwise, use the override resolver\n      ? opts.resolve.call(null, id, basedir, importOptions) // otherwise, return the id to be resolved by postcss-import\n      : id;\n    }\n\n  });\n};\n\nconst cssExtRegExp$1 = /\\.css\\b/g;\n\nconst postcssPlugin = (commentsTransformer, opts) => root => {\n  const promises = [];\n  const insertedFilenames = {}; // use @import insertion point\n\n  root.walkAtRules(importRegExp, atrule => {\n    // get name as a fallback value for the library (e.g. @import-normalize is like @import \"normalize.css\")\n    const name = atrule.name.match(importRegExp)[1]; // get url from \"library\", 'library', url(\"library\"), url('library'), or the fallback value\n\n    const url = (atrule.params.match(paramsRegExp) || []).slice(1).find(part => part) || name;\n\n    if (url) {\n      // get the css id by removing css extensions\n      const cssId = url.replace(cssExtRegExp, '');\n\n      if (cssId in resolvedFilenamesById) {\n        // promise the library import is replaced with its contents\n        promises.push(Promise.all(resolvedFilenamesById[cssId].filter( // ignore filenames that have already been inserted\n        filename => insertedFilenames[filename] = opts.allowDuplicates || !(filename in insertedFilenames)).map( // parse the file (the file and css are conservatively cached)\n        filename => parse(filename, commentsTransformer))).then(roots => {\n          if (roots.length) {\n            // combine all the library nodes returned by the parsed files\n            const nodes = roots.reduce((all, root) => all.concat(root.nodes), []); // replace the import with all the library nodes\n\n            atrule.replaceWith(...nodes);\n          }\n        }));\n      }\n    }\n  });\n  return Promise.all([].concat( // promise the library imports are replaced with their contents\n  promises, // promise certain libraries are prepended\n  Promise.all([].concat(opts.forceImport || []).reduce( // filter the id to be a known id or boolean true\n  (all, id) => {\n    if (id === true) {\n      all.push(...resolvedFilenamesById.normalize);\n    } else if (typeof id === 'string') {\n      const cssId = id.replace(cssExtRegExp, '');\n\n      if (cssId in resolvedFilenamesById) {\n        all.push(...resolvedFilenamesById[cssId]);\n      }\n    }\n\n    return all;\n  }, []).filter( // ignore filenames that have already been inserted\n  filename => insertedFilenames[filename] = opts.allowDuplicates || !(filename in insertedFilenames)).map( // parse the file (the file and css are conservatively cached)\n  filename => parse(filename, commentsTransformer))).then(roots => {\n    if (roots.length) {\n      // combine all the library nodes returned by the parsed files\n      const nodes = roots.reduce((all, root) => all.concat(root.nodes), []); // prepend the stylesheet with all the library nodes\n\n      root.prepend(...nodes);\n    }\n  })));\n};\n\nconst cssExtRegExp = /\\.css\\b/g;\nconst importRegExp = /^import(?:-(normalize|sanitize))?$/;\nconst paramsRegExp = /^\\s*(?:url\\((?:\"(.+)\"|'(.+)')\\)|\"(.+)\"|'(.+)')[\\W\\w]*$/;\n\nconst plugin = opts => {\n  opts = create(opts);\n  const commentsTransformer = postcssBrowserComments(opts).Once;\n  const normalizeTransformer = postcssPlugin(commentsTransformer, opts);\n  const postcssImportConfig = postcssImportNormalize(commentsTransformer);\n  return {\n    postcssPlugin: 'postcss-normalize',\n\n    Once(root) {\n      return normalizeTransformer(root);\n    },\n\n    postcssImport: postcssImportConfig\n  };\n};\n\nplugin.postcss = true;\nexport { plugin as default };","map":{"version":3,"names":["postcssBrowserComments","Module","path","URL","fs","postcss","assign","Object","create","objects","currentURL","import","meta","url","currentFilename","pathname","currentDirname","dirname","normalizeCSS","resolve","normalizeDir","normalizeOpinionatedCSS","join","sanitizeCSS","sanitizeDir","sanitizeAssetsCSS","sanitizeFormsCSS","sanitizeReduceMotionCSS","sanitizeTypographyCSS","sanitizeSystemUiCSS","sanitizeUiMonospace","parsableFilenames","resolvedFilenamesById","id","_resolveFilename","filename","paths","_nodeModulePaths","cache$1","readFile","Promise","reject","stat","statsError","mtime","data","readFileError","cache","parse","transformer","then","css","from","root","clone","postcssImportNormalize","commentsTransformer","opts","load","importOptions","toResult","to","map","call","basedir","cssId","replace","cssExtRegExp$1","postcssPlugin","promises","insertedFilenames","walkAtRules","importRegExp","atrule","name","match","params","paramsRegExp","slice","find","part","cssExtRegExp","push","all","filter","allowDuplicates","roots","length","nodes","reduce","concat","replaceWith","forceImport","normalize","prepend","plugin","Once","normalizeTransformer","postcssImportConfig","postcssImport","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-normalize/index.mjs"],"sourcesContent":["import postcssBrowserComments from 'postcss-browser-comments';\nimport Module from 'module';\nimport path from 'path';\nimport { URL } from 'url';\nimport fs from 'fs';\nimport postcss from 'postcss';\n\nconst assign = (...objects) => Object.assign(...objects);\nconst create = (...objects) => assign(Object.create(null), ...objects);\n\nconst currentURL = import.meta.url;\nconst currentFilename = new URL(currentURL).pathname;\nconst currentDirname = path.dirname(currentFilename); // get resolved filenames for normalize.css\n\nconst normalizeCSS = resolve('@csstools/normalize.css');\nconst normalizeDir = path.dirname(normalizeCSS);\nconst normalizeOpinionatedCSS = path.join(normalizeDir, 'opinionated.css'); // get resolved filenames for sanitize.css\n\nconst sanitizeCSS = resolve('sanitize.css');\nconst sanitizeDir = path.dirname(sanitizeCSS);\nconst sanitizeAssetsCSS = path.join(sanitizeDir, 'assets.css');\nconst sanitizeFormsCSS = path.join(sanitizeDir, 'forms.css');\nconst sanitizeReduceMotionCSS = path.join(sanitizeDir, 'reduce-motion.css');\nconst sanitizeTypographyCSS = path.join(sanitizeDir, 'typography.css');\nconst sanitizeSystemUiCSS = path.join(sanitizeDir, 'system-ui.css');\nconst sanitizeUiMonospace = path.join(sanitizeDir, 'ui-monospace.css'); // export a hashmap of css library filenames\n\nconst parsableFilenames = create({\n  [normalizeCSS]: true,\n  [normalizeOpinionatedCSS]: true,\n  [sanitizeCSS]: true,\n  [sanitizeAssetsCSS]: true,\n  [sanitizeFormsCSS]: true,\n  [sanitizeReduceMotionCSS]: true,\n  [sanitizeTypographyCSS]: true,\n  [sanitizeSystemUiCSS]: true,\n  [sanitizeUiMonospace]: true\n}); // export a hashmap of css library filenames by id\n\nconst resolvedFilenamesById = create({\n  'normalize': [normalizeCSS],\n  'normalize/opinionated': [normalizeOpinionatedCSS],\n  'normalize/*': [normalizeOpinionatedCSS],\n  'sanitize': [sanitizeCSS],\n  'sanitize/assets': [sanitizeAssetsCSS],\n  'sanitize/forms': [sanitizeCSS, sanitizeFormsCSS],\n  'sanitize/page': [sanitizeAssetsCSS],\n  // deprecated; remaining for v10.0.0 compatibility\n  'sanitize/reduce-motion': [sanitizeCSS, sanitizeReduceMotionCSS],\n  'sanitize/system-ui': [sanitizeCSS, sanitizeSystemUiCSS],\n  'sanitize/typography': [sanitizeCSS, sanitizeTypographyCSS],\n  'sanitize/ui-monospace': [sanitizeCSS, sanitizeUiMonospace],\n  'sanitize/*': [sanitizeCSS, sanitizeFormsCSS]\n}); // get the resolved filename of a package/module\n\nfunction resolve(id) {\n  return resolve[id] = resolve[id] || Module._resolveFilename(id, {\n    id: currentFilename,\n    filename: currentFilename,\n    paths: Module._nodeModulePaths(currentDirname)\n  });\n}\n\nconst cache$1 = create();\nasync function readFile(filename) {\n  filename = path.resolve(filename);\n  cache$1[filename] = cache$1[filename] || create();\n  return new Promise((resolve, reject) => fs.stat(filename, (statsError, {\n    mtime\n  }) => statsError ? reject(statsError) : mtime === cache$1[filename].mtime ? resolve(cache$1[filename].data) : fs.readFile(filename, 'utf8', (readFileError, data) => readFileError ? reject(readFileError) : resolve((cache$1[filename] = {\n    data,\n    mtime\n  }).data))));\n}\n\nconst cache = create(null);\nvar parse = ((filename, transformer) => readFile(filename).then( // cache the parsed css root\ncss => cache[css] = cache[css] || postcss.parse(css, {\n  from: filename\n})).then( // clone the cached root\nroot => root.clone()).then( // transform the cloned root\nclone => Promise.resolve(transformer(clone)).then( // resolve the cloned root\n() => clone)));\n\nvar postcssImportNormalize = (commentsTransformer => opts => {\n  opts = create(opts); // return an postcss-import configuration\n\n  return create({\n    load(filename, importOptions) {\n      return filename in parsableFilenames // parse the file (the file and css are conservatively cached)\n      ? parse(filename, commentsTransformer).then(root => root.toResult({\n        to: filename,\n        map: true\n      }).css) : typeof opts.load === 'function' // otherwise, use the override loader\n      ? opts.load.call(null, filename, importOptions) // otherwise, return the (conservatively cached) contents of the file\n      : readFile(filename);\n    },\n\n    resolve(id, basedir, importOptions) {\n      // get the css id by removing css extensions\n      const cssId = id.replace(cssExtRegExp$1, '');\n      return cssId in resolvedFilenamesById // return the known resolved path for the css id\n      ? resolvedFilenamesById[cssId] : typeof opts.resolve === 'function' // otherwise, use the override resolver\n      ? opts.resolve.call(null, id, basedir, importOptions) // otherwise, return the id to be resolved by postcss-import\n      : id;\n    }\n\n  });\n});\nconst cssExtRegExp$1 = /\\.css\\b/g;\n\nconst postcssPlugin = (commentsTransformer, opts) => root => {\n  const promises = [];\n  const insertedFilenames = {}; // use @import insertion point\n\n  root.walkAtRules(importRegExp, atrule => {\n    // get name as a fallback value for the library (e.g. @import-normalize is like @import \"normalize.css\")\n    const name = atrule.name.match(importRegExp)[1]; // get url from \"library\", 'library', url(\"library\"), url('library'), or the fallback value\n\n    const url = (atrule.params.match(paramsRegExp) || []).slice(1).find(part => part) || name;\n\n    if (url) {\n      // get the css id by removing css extensions\n      const cssId = url.replace(cssExtRegExp, '');\n\n      if (cssId in resolvedFilenamesById) {\n        // promise the library import is replaced with its contents\n        promises.push(Promise.all(resolvedFilenamesById[cssId].filter( // ignore filenames that have already been inserted\n        filename => insertedFilenames[filename] = opts.allowDuplicates || !(filename in insertedFilenames)).map( // parse the file (the file and css are conservatively cached)\n        filename => parse(filename, commentsTransformer))).then(roots => {\n          if (roots.length) {\n            // combine all the library nodes returned by the parsed files\n            const nodes = roots.reduce((all, root) => all.concat(root.nodes), []); // replace the import with all the library nodes\n\n            atrule.replaceWith(...nodes);\n          }\n        }));\n      }\n    }\n  });\n  return Promise.all([].concat( // promise the library imports are replaced with their contents\n  promises, // promise certain libraries are prepended\n  Promise.all([].concat(opts.forceImport || []).reduce( // filter the id to be a known id or boolean true\n  (all, id) => {\n    if (id === true) {\n      all.push(...resolvedFilenamesById.normalize);\n    } else if (typeof id === 'string') {\n      const cssId = id.replace(cssExtRegExp, '');\n\n      if (cssId in resolvedFilenamesById) {\n        all.push(...resolvedFilenamesById[cssId]);\n      }\n    }\n\n    return all;\n  }, []).filter( // ignore filenames that have already been inserted\n  filename => insertedFilenames[filename] = opts.allowDuplicates || !(filename in insertedFilenames)).map( // parse the file (the file and css are conservatively cached)\n  filename => parse(filename, commentsTransformer))).then(roots => {\n    if (roots.length) {\n      // combine all the library nodes returned by the parsed files\n      const nodes = roots.reduce((all, root) => all.concat(root.nodes), []); // prepend the stylesheet with all the library nodes\n\n      root.prepend(...nodes);\n    }\n  })));\n};\n\nconst cssExtRegExp = /\\.css\\b/g;\nconst importRegExp = /^import(?:-(normalize|sanitize))?$/;\nconst paramsRegExp = /^\\s*(?:url\\((?:\"(.+)\"|'(.+)')\\)|\"(.+)\"|'(.+)')[\\W\\w]*$/;\n\nconst plugin = opts => {\n  opts = create(opts);\n  const commentsTransformer = postcssBrowserComments(opts).Once;\n  const normalizeTransformer = postcssPlugin(commentsTransformer, opts);\n  const postcssImportConfig = postcssImportNormalize(commentsTransformer);\n  return {\n    postcssPlugin: 'postcss-normalize',\n\n    Once(root) {\n      return normalizeTransformer(root);\n    },\n\n    postcssImport: postcssImportConfig\n  };\n};\n\nplugin.postcss = true;\n\nexport { plugin as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}