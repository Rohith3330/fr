{"ast":null,"code":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\nimport { AST_Accessor, AST_Array, AST_Arrow, AST_Assign, AST_Binary, AST_Call, AST_Chain, AST_Class, AST_ClassStaticBlock, AST_ClassProperty, AST_ConciseMethod, AST_Conditional, AST_Constant, AST_Dot, AST_Expansion, AST_Function, AST_Node, AST_Number, AST_Object, AST_ObjectGetter, AST_ObjectKeyVal, AST_ObjectProperty, AST_ObjectSetter, AST_PropAccess, AST_Scope, AST_Sequence, AST_Sub, AST_SymbolRef, AST_TemplateSegment, AST_TemplateString, AST_This, AST_Unary } from \"../ast.js\";\nimport { make_node, return_null, return_this } from \"../utils/index.js\";\nimport { first_in_statement } from \"../utils/first_in_statement.js\";\nimport { pure_prop_access_globals } from \"./native-objects.js\";\nimport { lazy_op, unary_side_effects, is_nullish_shortcircuited } from \"./inference.js\";\nimport { WRITE_ONLY, set_flag, clear_flag } from \"./compressor-flags.js\";\nimport { make_sequence, is_func_expr, is_iife_call } from \"./common.js\"; // AST_Node#drop_side_effect_free() gets called when we don't care about the value,\n// only about side effects. We'll be defining this method for each node type in this module\n//\n// Examples:\n// foo++ -> foo++\n// 1 + func() -> func()\n// 10 -> (nothing)\n// knownPureFunc(foo++) -> foo++\n\nfunction def_drop_side_effect_free(node, func) {\n  node.DEFMETHOD(\"drop_side_effect_free\", func);\n} // Drop side-effect-free elements from an array of expressions.\n// Returns an array of expressions with side-effects or null\n// if all elements were dropped. Note: original array may be\n// returned if nothing changed.\n\n\nfunction trim(nodes, compressor, first_in_statement) {\n  var len = nodes.length;\n  if (!len) return null;\n  var ret = [],\n      changed = false;\n\n  for (var i = 0; i < len; i++) {\n    var node = nodes[i].drop_side_effect_free(compressor, first_in_statement);\n    changed |= node !== nodes[i];\n\n    if (node) {\n      ret.push(node);\n      first_in_statement = false;\n    }\n  }\n\n  return changed ? ret.length ? ret : null : nodes;\n}\n\ndef_drop_side_effect_free(AST_Node, return_this);\ndef_drop_side_effect_free(AST_Constant, return_null);\ndef_drop_side_effect_free(AST_This, return_null);\ndef_drop_side_effect_free(AST_Call, function (compressor, first_in_statement) {\n  if (is_nullish_shortcircuited(this, compressor)) {\n    return this.expression.drop_side_effect_free(compressor, first_in_statement);\n  }\n\n  if (!this.is_callee_pure(compressor)) {\n    if (this.expression.is_call_pure(compressor)) {\n      var exprs = this.args.slice();\n      exprs.unshift(this.expression.expression);\n      exprs = trim(exprs, compressor, first_in_statement);\n      return exprs && make_sequence(this, exprs);\n    }\n\n    if (is_func_expr(this.expression) && (!this.expression.name || !this.expression.name.definition().references.length)) {\n      var node = this.clone();\n      node.expression.process_expression(false, compressor);\n      return node;\n    }\n\n    return this;\n  }\n\n  var args = trim(this.args, compressor, first_in_statement);\n  return args && make_sequence(this, args);\n});\ndef_drop_side_effect_free(AST_Accessor, return_null);\ndef_drop_side_effect_free(AST_Function, return_null);\ndef_drop_side_effect_free(AST_Arrow, return_null);\ndef_drop_side_effect_free(AST_Class, function (compressor) {\n  const with_effects = [];\n  const trimmed_extends = this.extends && this.extends.drop_side_effect_free(compressor);\n  if (trimmed_extends) with_effects.push(trimmed_extends);\n\n  for (const prop of this.properties) {\n    if (prop instanceof AST_ClassStaticBlock) {\n      if (prop.body.some(stat => stat.has_side_effects(compressor))) {\n        return this;\n      } else {\n        continue;\n      }\n    }\n\n    const trimmed_prop = prop.drop_side_effect_free(compressor);\n    if (trimmed_prop) with_effects.push(trimmed_prop);\n  }\n\n  if (!with_effects.length) return null;\n  return make_sequence(this, with_effects);\n});\ndef_drop_side_effect_free(AST_Binary, function (compressor, first_in_statement) {\n  var right = this.right.drop_side_effect_free(compressor);\n  if (!right) return this.left.drop_side_effect_free(compressor, first_in_statement);\n\n  if (lazy_op.has(this.operator)) {\n    if (right === this.right) return this;\n    var node = this.clone();\n    node.right = right;\n    return node;\n  } else {\n    var left = this.left.drop_side_effect_free(compressor, first_in_statement);\n    if (!left) return this.right.drop_side_effect_free(compressor, first_in_statement);\n    return make_sequence(this, [left, right]);\n  }\n});\ndef_drop_side_effect_free(AST_Assign, function (compressor) {\n  if (this.logical) return this;\n  var left = this.left;\n\n  if (left.has_side_effects(compressor) || compressor.has_directive(\"use strict\") && left instanceof AST_PropAccess && left.expression.is_constant()) {\n    return this;\n  }\n\n  set_flag(this, WRITE_ONLY);\n\n  while (left instanceof AST_PropAccess) {\n    left = left.expression;\n  }\n\n  if (left.is_constant_expression(compressor.find_parent(AST_Scope))) {\n    return this.right.drop_side_effect_free(compressor);\n  }\n\n  return this;\n});\ndef_drop_side_effect_free(AST_Conditional, function (compressor) {\n  var consequent = this.consequent.drop_side_effect_free(compressor);\n  var alternative = this.alternative.drop_side_effect_free(compressor);\n  if (consequent === this.consequent && alternative === this.alternative) return this;\n  if (!consequent) return alternative ? make_node(AST_Binary, this, {\n    operator: \"||\",\n    left: this.condition,\n    right: alternative\n  }) : this.condition.drop_side_effect_free(compressor);\n  if (!alternative) return make_node(AST_Binary, this, {\n    operator: \"&&\",\n    left: this.condition,\n    right: consequent\n  });\n  var node = this.clone();\n  node.consequent = consequent;\n  node.alternative = alternative;\n  return node;\n});\ndef_drop_side_effect_free(AST_Unary, function (compressor, first_in_statement) {\n  if (unary_side_effects.has(this.operator)) {\n    if (!this.expression.has_side_effects(compressor)) {\n      set_flag(this, WRITE_ONLY);\n    } else {\n      clear_flag(this, WRITE_ONLY);\n    }\n\n    return this;\n  }\n\n  if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef) return null;\n  var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n\n  if (first_in_statement && expression && is_iife_call(expression)) {\n    if (expression === this.expression && this.operator == \"!\") return this;\n    return expression.negate(compressor, first_in_statement);\n  }\n\n  return expression;\n});\ndef_drop_side_effect_free(AST_SymbolRef, function (compressor) {\n  const safe_access = this.is_declared(compressor) || pure_prop_access_globals.has(this.name);\n  return safe_access ? null : this;\n});\ndef_drop_side_effect_free(AST_Object, function (compressor, first_in_statement) {\n  var values = trim(this.properties, compressor, first_in_statement);\n  return values && make_sequence(this, values);\n});\ndef_drop_side_effect_free(AST_ObjectProperty, function (compressor, first_in_statement) {\n  const computed_key = this instanceof AST_ObjectKeyVal && this.key instanceof AST_Node;\n  const key = computed_key && this.key.drop_side_effect_free(compressor, first_in_statement);\n  const value = this.value && this.value.drop_side_effect_free(compressor, first_in_statement);\n\n  if (key && value) {\n    return make_sequence(this, [key, value]);\n  }\n\n  return key || value;\n});\ndef_drop_side_effect_free(AST_ClassProperty, function (compressor) {\n  const key = this.computed_key() && this.key.drop_side_effect_free(compressor);\n  const value = this.static && this.value && this.value.drop_side_effect_free(compressor);\n  if (key && value) return make_sequence(this, [key, value]);\n  return key || value || null;\n});\ndef_drop_side_effect_free(AST_ConciseMethod, function () {\n  return this.computed_key() ? this.key : null;\n});\ndef_drop_side_effect_free(AST_ObjectGetter, function () {\n  return this.computed_key() ? this.key : null;\n});\ndef_drop_side_effect_free(AST_ObjectSetter, function () {\n  return this.computed_key() ? this.key : null;\n});\ndef_drop_side_effect_free(AST_Array, function (compressor, first_in_statement) {\n  var values = trim(this.elements, compressor, first_in_statement);\n  return values && make_sequence(this, values);\n});\ndef_drop_side_effect_free(AST_Dot, function (compressor, first_in_statement) {\n  if (is_nullish_shortcircuited(this, compressor)) {\n    return this.expression.drop_side_effect_free(compressor, first_in_statement);\n  }\n\n  if (this.expression.may_throw_on_access(compressor)) return this;\n  return this.expression.drop_side_effect_free(compressor, first_in_statement);\n});\ndef_drop_side_effect_free(AST_Sub, function (compressor, first_in_statement) {\n  if (is_nullish_shortcircuited(this, compressor)) {\n    return this.expression.drop_side_effect_free(compressor, first_in_statement);\n  }\n\n  if (this.expression.may_throw_on_access(compressor)) return this;\n  var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n  if (!expression) return this.property.drop_side_effect_free(compressor, first_in_statement);\n  var property = this.property.drop_side_effect_free(compressor);\n  if (!property) return expression;\n  return make_sequence(this, [expression, property]);\n});\ndef_drop_side_effect_free(AST_Chain, function (compressor, first_in_statement) {\n  return this.expression.drop_side_effect_free(compressor, first_in_statement);\n});\ndef_drop_side_effect_free(AST_Sequence, function (compressor) {\n  var last = this.tail_node();\n  var expr = last.drop_side_effect_free(compressor);\n  if (expr === last) return this;\n  var expressions = this.expressions.slice(0, -1);\n  if (expr) expressions.push(expr);\n\n  if (!expressions.length) {\n    return make_node(AST_Number, this, {\n      value: 0\n    });\n  }\n\n  return make_sequence(this, expressions);\n});\ndef_drop_side_effect_free(AST_Expansion, function (compressor, first_in_statement) {\n  return this.expression.drop_side_effect_free(compressor, first_in_statement);\n});\ndef_drop_side_effect_free(AST_TemplateSegment, return_null);\ndef_drop_side_effect_free(AST_TemplateString, function (compressor) {\n  var values = trim(this.segments, compressor, first_in_statement);\n  return values && make_sequence(this, values);\n});","map":{"version":3,"names":["AST_Accessor","AST_Array","AST_Arrow","AST_Assign","AST_Binary","AST_Call","AST_Chain","AST_Class","AST_ClassStaticBlock","AST_ClassProperty","AST_ConciseMethod","AST_Conditional","AST_Constant","AST_Dot","AST_Expansion","AST_Function","AST_Node","AST_Number","AST_Object","AST_ObjectGetter","AST_ObjectKeyVal","AST_ObjectProperty","AST_ObjectSetter","AST_PropAccess","AST_Scope","AST_Sequence","AST_Sub","AST_SymbolRef","AST_TemplateSegment","AST_TemplateString","AST_This","AST_Unary","make_node","return_null","return_this","first_in_statement","pure_prop_access_globals","lazy_op","unary_side_effects","is_nullish_shortcircuited","WRITE_ONLY","set_flag","clear_flag","make_sequence","is_func_expr","is_iife_call","def_drop_side_effect_free","node","func","DEFMETHOD","trim","nodes","compressor","len","length","ret","changed","i","drop_side_effect_free","push","expression","is_callee_pure","is_call_pure","exprs","args","slice","unshift","name","definition","references","clone","process_expression","with_effects","trimmed_extends","extends","prop","properties","body","some","stat","has_side_effects","trimmed_prop","right","left","has","operator","logical","has_directive","is_constant","is_constant_expression","find_parent","consequent","alternative","condition","negate","safe_access","is_declared","values","computed_key","key","value","static","elements","may_throw_on_access","property","last","tail_node","expr","expressions","segments"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/terser/lib/compress/drop-side-effect-free.js"],"sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Binary,\n    AST_Call,\n    AST_Chain,\n    AST_Class,\n    AST_ClassStaticBlock,\n    AST_ClassProperty,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Constant,\n    AST_Dot,\n    AST_Expansion,\n    AST_Function,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PropAccess,\n    AST_Scope,\n    AST_Sequence,\n    AST_Sub,\n    AST_SymbolRef,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Unary,\n} from \"../ast.js\";\nimport { make_node, return_null, return_this } from \"../utils/index.js\";\nimport { first_in_statement } from \"../utils/first_in_statement.js\";\n\nimport { pure_prop_access_globals } from \"./native-objects.js\";\nimport { lazy_op, unary_side_effects, is_nullish_shortcircuited } from \"./inference.js\";\nimport { WRITE_ONLY, set_flag, clear_flag } from \"./compressor-flags.js\";\nimport { make_sequence, is_func_expr, is_iife_call } from \"./common.js\";\n\n// AST_Node#drop_side_effect_free() gets called when we don't care about the value,\n// only about side effects. We'll be defining this method for each node type in this module\n//\n// Examples:\n// foo++ -> foo++\n// 1 + func() -> func()\n// 10 -> (nothing)\n// knownPureFunc(foo++) -> foo++\n\nfunction def_drop_side_effect_free(node, func) {\n    node.DEFMETHOD(\"drop_side_effect_free\", func);\n}\n\n// Drop side-effect-free elements from an array of expressions.\n// Returns an array of expressions with side-effects or null\n// if all elements were dropped. Note: original array may be\n// returned if nothing changed.\nfunction trim(nodes, compressor, first_in_statement) {\n    var len = nodes.length;\n    if (!len)  return null;\n\n    var ret = [], changed = false;\n    for (var i = 0; i < len; i++) {\n        var node = nodes[i].drop_side_effect_free(compressor, first_in_statement);\n        changed |= node !== nodes[i];\n        if (node) {\n            ret.push(node);\n            first_in_statement = false;\n        }\n    }\n    return changed ? ret.length ? ret : null : nodes;\n}\n\ndef_drop_side_effect_free(AST_Node, return_this);\ndef_drop_side_effect_free(AST_Constant, return_null);\ndef_drop_side_effect_free(AST_This, return_null);\n\ndef_drop_side_effect_free(AST_Call, function (compressor, first_in_statement) {\n    if (is_nullish_shortcircuited(this, compressor)) {\n        return this.expression.drop_side_effect_free(compressor, first_in_statement);\n    }\n\n    if (!this.is_callee_pure(compressor)) {\n        if (this.expression.is_call_pure(compressor)) {\n            var exprs = this.args.slice();\n            exprs.unshift(this.expression.expression);\n            exprs = trim(exprs, compressor, first_in_statement);\n            return exprs && make_sequence(this, exprs);\n        }\n        if (is_func_expr(this.expression)\n            && (!this.expression.name || !this.expression.name.definition().references.length)) {\n            var node = this.clone();\n            node.expression.process_expression(false, compressor);\n            return node;\n        }\n        return this;\n    }\n\n    var args = trim(this.args, compressor, first_in_statement);\n    return args && make_sequence(this, args);\n});\n\ndef_drop_side_effect_free(AST_Accessor, return_null);\n\ndef_drop_side_effect_free(AST_Function, return_null);\n\ndef_drop_side_effect_free(AST_Arrow, return_null);\n\ndef_drop_side_effect_free(AST_Class, function (compressor) {\n    const with_effects = [];\n    const trimmed_extends = this.extends && this.extends.drop_side_effect_free(compressor);\n    if (trimmed_extends)\n        with_effects.push(trimmed_extends);\n    for (const prop of this.properties) {\n        if (prop instanceof AST_ClassStaticBlock) {\n            if (prop.body.some(stat => stat.has_side_effects(compressor))) {\n                return this;\n            } else {\n                continue;\n            }\n        }\n\n        const trimmed_prop = prop.drop_side_effect_free(compressor);\n        if (trimmed_prop)\n            with_effects.push(trimmed_prop);\n    }\n    if (!with_effects.length)\n        return null;\n    return make_sequence(this, with_effects);\n});\n\ndef_drop_side_effect_free(AST_Binary, function (compressor, first_in_statement) {\n    var right = this.right.drop_side_effect_free(compressor);\n    if (!right)\n        return this.left.drop_side_effect_free(compressor, first_in_statement);\n    if (lazy_op.has(this.operator)) {\n        if (right === this.right)\n            return this;\n        var node = this.clone();\n        node.right = right;\n        return node;\n    } else {\n        var left = this.left.drop_side_effect_free(compressor, first_in_statement);\n        if (!left)\n            return this.right.drop_side_effect_free(compressor, first_in_statement);\n        return make_sequence(this, [left, right]);\n    }\n});\n\ndef_drop_side_effect_free(AST_Assign, function (compressor) {\n    if (this.logical)\n        return this;\n\n    var left = this.left;\n    if (left.has_side_effects(compressor)\n        || compressor.has_directive(\"use strict\")\n        && left instanceof AST_PropAccess\n        && left.expression.is_constant()) {\n        return this;\n    }\n    set_flag(this, WRITE_ONLY);\n    while (left instanceof AST_PropAccess) {\n        left = left.expression;\n    }\n    if (left.is_constant_expression(compressor.find_parent(AST_Scope))) {\n        return this.right.drop_side_effect_free(compressor);\n    }\n    return this;\n});\n\ndef_drop_side_effect_free(AST_Conditional, function (compressor) {\n    var consequent = this.consequent.drop_side_effect_free(compressor);\n    var alternative = this.alternative.drop_side_effect_free(compressor);\n    if (consequent === this.consequent && alternative === this.alternative)\n        return this;\n    if (!consequent)\n        return alternative ? make_node(AST_Binary, this, {\n            operator: \"||\",\n            left: this.condition,\n            right: alternative\n        }) : this.condition.drop_side_effect_free(compressor);\n    if (!alternative)\n        return make_node(AST_Binary, this, {\n            operator: \"&&\",\n            left: this.condition,\n            right: consequent\n        });\n    var node = this.clone();\n    node.consequent = consequent;\n    node.alternative = alternative;\n    return node;\n});\n\ndef_drop_side_effect_free(AST_Unary, function (compressor, first_in_statement) {\n    if (unary_side_effects.has(this.operator)) {\n        if (!this.expression.has_side_effects(compressor)) {\n            set_flag(this, WRITE_ONLY);\n        } else {\n            clear_flag(this, WRITE_ONLY);\n        }\n        return this;\n    }\n    if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef)\n        return null;\n    var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n    if (first_in_statement && expression && is_iife_call(expression)) {\n        if (expression === this.expression && this.operator == \"!\")\n            return this;\n        return expression.negate(compressor, first_in_statement);\n    }\n    return expression;\n});\n\ndef_drop_side_effect_free(AST_SymbolRef, function (compressor) {\n    const safe_access = this.is_declared(compressor)\n        || pure_prop_access_globals.has(this.name);\n    return safe_access ? null : this;\n});\n\ndef_drop_side_effect_free(AST_Object, function (compressor, first_in_statement) {\n    var values = trim(this.properties, compressor, first_in_statement);\n    return values && make_sequence(this, values);\n});\n\ndef_drop_side_effect_free(AST_ObjectProperty, function (compressor, first_in_statement) {\n    const computed_key = this instanceof AST_ObjectKeyVal && this.key instanceof AST_Node;\n    const key = computed_key && this.key.drop_side_effect_free(compressor, first_in_statement);\n    const value = this.value && this.value.drop_side_effect_free(compressor, first_in_statement);\n    if (key && value) {\n        return make_sequence(this, [key, value]);\n    }\n    return key || value;\n});\n\ndef_drop_side_effect_free(AST_ClassProperty, function (compressor) {\n    const key = this.computed_key() && this.key.drop_side_effect_free(compressor);\n\n    const value = this.static && this.value\n        && this.value.drop_side_effect_free(compressor);\n\n    if (key && value)\n        return make_sequence(this, [key, value]);\n    return key || value || null;\n});\n\ndef_drop_side_effect_free(AST_ConciseMethod, function () {\n    return this.computed_key() ? this.key : null;\n});\n\ndef_drop_side_effect_free(AST_ObjectGetter, function () {\n    return this.computed_key() ? this.key : null;\n});\n\ndef_drop_side_effect_free(AST_ObjectSetter, function () {\n    return this.computed_key() ? this.key : null;\n});\n\ndef_drop_side_effect_free(AST_Array, function (compressor, first_in_statement) {\n    var values = trim(this.elements, compressor, first_in_statement);\n    return values && make_sequence(this, values);\n});\n\ndef_drop_side_effect_free(AST_Dot, function (compressor, first_in_statement) {\n    if (is_nullish_shortcircuited(this, compressor)) {\n        return this.expression.drop_side_effect_free(compressor, first_in_statement);\n    }\n    if (this.expression.may_throw_on_access(compressor)) return this;\n\n    return this.expression.drop_side_effect_free(compressor, first_in_statement);\n});\n\ndef_drop_side_effect_free(AST_Sub, function (compressor, first_in_statement) {\n    if (is_nullish_shortcircuited(this, compressor)) {\n        return this.expression.drop_side_effect_free(compressor, first_in_statement);\n    }\n    if (this.expression.may_throw_on_access(compressor)) return this;\n\n    var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n    if (!expression)\n        return this.property.drop_side_effect_free(compressor, first_in_statement);\n    var property = this.property.drop_side_effect_free(compressor);\n    if (!property)\n        return expression;\n    return make_sequence(this, [expression, property]);\n});\n\ndef_drop_side_effect_free(AST_Chain, function (compressor, first_in_statement) {\n    return this.expression.drop_side_effect_free(compressor, first_in_statement);\n});\n\ndef_drop_side_effect_free(AST_Sequence, function (compressor) {\n    var last = this.tail_node();\n    var expr = last.drop_side_effect_free(compressor);\n    if (expr === last)\n        return this;\n    var expressions = this.expressions.slice(0, -1);\n    if (expr)\n        expressions.push(expr);\n    if (!expressions.length) {\n        return make_node(AST_Number, this, { value: 0 });\n    }\n    return make_sequence(this, expressions);\n});\n\ndef_drop_side_effect_free(AST_Expansion, function (compressor, first_in_statement) {\n    return this.expression.drop_side_effect_free(compressor, first_in_statement);\n});\n\ndef_drop_side_effect_free(AST_TemplateSegment, return_null);\n\ndef_drop_side_effect_free(AST_TemplateString, function (compressor) {\n    var values = trim(this.segments, compressor, first_in_statement);\n    return values && make_sequence(this, values);\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACIA,YADJ,EAEIC,SAFJ,EAGIC,SAHJ,EAIIC,UAJJ,EAKIC,UALJ,EAMIC,QANJ,EAOIC,SAPJ,EAQIC,SARJ,EASIC,oBATJ,EAUIC,iBAVJ,EAWIC,iBAXJ,EAYIC,eAZJ,EAaIC,YAbJ,EAcIC,OAdJ,EAeIC,aAfJ,EAgBIC,YAhBJ,EAiBIC,QAjBJ,EAkBIC,UAlBJ,EAmBIC,UAnBJ,EAoBIC,gBApBJ,EAqBIC,gBArBJ,EAsBIC,kBAtBJ,EAuBIC,gBAvBJ,EAwBIC,cAxBJ,EAyBIC,SAzBJ,EA0BIC,YA1BJ,EA2BIC,OA3BJ,EA4BIC,aA5BJ,EA6BIC,mBA7BJ,EA8BIC,kBA9BJ,EA+BIC,QA/BJ,EAgCIC,SAhCJ,QAiCO,WAjCP;AAkCA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,WAAjC,QAAoD,mBAApD;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AAEA,SAASC,wBAAT,QAAyC,qBAAzC;AACA,SAASC,OAAT,EAAkBC,kBAAlB,EAAsCC,yBAAtC,QAAuE,gBAAvE;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,UAA/B,QAAiD,uBAAjD;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,YAAtC,QAA0D,aAA1D,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,yBAAT,CAAmCC,IAAnC,EAAyCC,IAAzC,EAA+C;EAC3CD,IAAI,CAACE,SAAL,CAAe,uBAAf,EAAwCD,IAAxC;AACH,C,CAED;AACA;AACA;AACA;;;AACA,SAASE,IAAT,CAAcC,KAAd,EAAqBC,UAArB,EAAiCjB,kBAAjC,EAAqD;EACjD,IAAIkB,GAAG,GAAGF,KAAK,CAACG,MAAhB;EACA,IAAI,CAACD,GAAL,EAAW,OAAO,IAAP;EAEX,IAAIE,GAAG,GAAG,EAAV;EAAA,IAAcC,OAAO,GAAG,KAAxB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAApB,EAAyBI,CAAC,EAA1B,EAA8B;IAC1B,IAAIV,IAAI,GAAGI,KAAK,CAACM,CAAD,CAAL,CAASC,qBAAT,CAA+BN,UAA/B,EAA2CjB,kBAA3C,CAAX;IACAqB,OAAO,IAAIT,IAAI,KAAKI,KAAK,CAACM,CAAD,CAAzB;;IACA,IAAIV,IAAJ,EAAU;MACNQ,GAAG,CAACI,IAAJ,CAASZ,IAAT;MACAZ,kBAAkB,GAAG,KAArB;IACH;EACJ;;EACD,OAAOqB,OAAO,GAAGD,GAAG,CAACD,MAAJ,GAAaC,GAAb,GAAmB,IAAtB,GAA6BJ,KAA3C;AACH;;AAEDL,yBAAyB,CAAC9B,QAAD,EAAWkB,WAAX,CAAzB;AACAY,yBAAyB,CAAClC,YAAD,EAAeqB,WAAf,CAAzB;AACAa,yBAAyB,CAAChB,QAAD,EAAWG,WAAX,CAAzB;AAEAa,yBAAyB,CAACzC,QAAD,EAAW,UAAU+C,UAAV,EAAsBjB,kBAAtB,EAA0C;EAC1E,IAAII,yBAAyB,CAAC,IAAD,EAAOa,UAAP,CAA7B,EAAiD;IAC7C,OAAO,KAAKQ,UAAL,CAAgBF,qBAAhB,CAAsCN,UAAtC,EAAkDjB,kBAAlD,CAAP;EACH;;EAED,IAAI,CAAC,KAAK0B,cAAL,CAAoBT,UAApB,CAAL,EAAsC;IAClC,IAAI,KAAKQ,UAAL,CAAgBE,YAAhB,CAA6BV,UAA7B,CAAJ,EAA8C;MAC1C,IAAIW,KAAK,GAAG,KAAKC,IAAL,CAAUC,KAAV,EAAZ;MACAF,KAAK,CAACG,OAAN,CAAc,KAAKN,UAAL,CAAgBA,UAA9B;MACAG,KAAK,GAAGb,IAAI,CAACa,KAAD,EAAQX,UAAR,EAAoBjB,kBAApB,CAAZ;MACA,OAAO4B,KAAK,IAAIpB,aAAa,CAAC,IAAD,EAAOoB,KAAP,CAA7B;IACH;;IACD,IAAInB,YAAY,CAAC,KAAKgB,UAAN,CAAZ,KACI,CAAC,KAAKA,UAAL,CAAgBO,IAAjB,IAAyB,CAAC,KAAKP,UAAL,CAAgBO,IAAhB,CAAqBC,UAArB,GAAkCC,UAAlC,CAA6Cf,MAD3E,CAAJ,EACwF;MACpF,IAAIP,IAAI,GAAG,KAAKuB,KAAL,EAAX;MACAvB,IAAI,CAACa,UAAL,CAAgBW,kBAAhB,CAAmC,KAAnC,EAA0CnB,UAA1C;MACA,OAAOL,IAAP;IACH;;IACD,OAAO,IAAP;EACH;;EAED,IAAIiB,IAAI,GAAGd,IAAI,CAAC,KAAKc,IAAN,EAAYZ,UAAZ,EAAwBjB,kBAAxB,CAAf;EACA,OAAO6B,IAAI,IAAIrB,aAAa,CAAC,IAAD,EAAOqB,IAAP,CAA5B;AACH,CAvBwB,CAAzB;AAyBAlB,yBAAyB,CAAC9C,YAAD,EAAeiC,WAAf,CAAzB;AAEAa,yBAAyB,CAAC/B,YAAD,EAAekB,WAAf,CAAzB;AAEAa,yBAAyB,CAAC5C,SAAD,EAAY+B,WAAZ,CAAzB;AAEAa,yBAAyB,CAACvC,SAAD,EAAY,UAAU6C,UAAV,EAAsB;EACvD,MAAMoB,YAAY,GAAG,EAArB;EACA,MAAMC,eAAe,GAAG,KAAKC,OAAL,IAAgB,KAAKA,OAAL,CAAahB,qBAAb,CAAmCN,UAAnC,CAAxC;EACA,IAAIqB,eAAJ,EACID,YAAY,CAACb,IAAb,CAAkBc,eAAlB;;EACJ,KAAK,MAAME,IAAX,IAAmB,KAAKC,UAAxB,EAAoC;IAChC,IAAID,IAAI,YAAYnE,oBAApB,EAA0C;MACtC,IAAImE,IAAI,CAACE,IAAL,CAAUC,IAAV,CAAeC,IAAI,IAAIA,IAAI,CAACC,gBAAL,CAAsB5B,UAAtB,CAAvB,CAAJ,EAA+D;QAC3D,OAAO,IAAP;MACH,CAFD,MAEO;QACH;MACH;IACJ;;IAED,MAAM6B,YAAY,GAAGN,IAAI,CAACjB,qBAAL,CAA2BN,UAA3B,CAArB;IACA,IAAI6B,YAAJ,EACIT,YAAY,CAACb,IAAb,CAAkBsB,YAAlB;EACP;;EACD,IAAI,CAACT,YAAY,CAAClB,MAAlB,EACI,OAAO,IAAP;EACJ,OAAOX,aAAa,CAAC,IAAD,EAAO6B,YAAP,CAApB;AACH,CArBwB,CAAzB;AAuBA1B,yBAAyB,CAAC1C,UAAD,EAAa,UAAUgD,UAAV,EAAsBjB,kBAAtB,EAA0C;EAC5E,IAAI+C,KAAK,GAAG,KAAKA,KAAL,CAAWxB,qBAAX,CAAiCN,UAAjC,CAAZ;EACA,IAAI,CAAC8B,KAAL,EACI,OAAO,KAAKC,IAAL,CAAUzB,qBAAV,CAAgCN,UAAhC,EAA4CjB,kBAA5C,CAAP;;EACJ,IAAIE,OAAO,CAAC+C,GAAR,CAAY,KAAKC,QAAjB,CAAJ,EAAgC;IAC5B,IAAIH,KAAK,KAAK,KAAKA,KAAnB,EACI,OAAO,IAAP;IACJ,IAAInC,IAAI,GAAG,KAAKuB,KAAL,EAAX;IACAvB,IAAI,CAACmC,KAAL,GAAaA,KAAb;IACA,OAAOnC,IAAP;EACH,CAND,MAMO;IACH,IAAIoC,IAAI,GAAG,KAAKA,IAAL,CAAUzB,qBAAV,CAAgCN,UAAhC,EAA4CjB,kBAA5C,CAAX;IACA,IAAI,CAACgD,IAAL,EACI,OAAO,KAAKD,KAAL,CAAWxB,qBAAX,CAAiCN,UAAjC,EAA6CjB,kBAA7C,CAAP;IACJ,OAAOQ,aAAa,CAAC,IAAD,EAAO,CAACwC,IAAD,EAAOD,KAAP,CAAP,CAApB;EACH;AACJ,CAhBwB,CAAzB;AAkBApC,yBAAyB,CAAC3C,UAAD,EAAa,UAAUiD,UAAV,EAAsB;EACxD,IAAI,KAAKkC,OAAT,EACI,OAAO,IAAP;EAEJ,IAAIH,IAAI,GAAG,KAAKA,IAAhB;;EACA,IAAIA,IAAI,CAACH,gBAAL,CAAsB5B,UAAtB,KACGA,UAAU,CAACmC,aAAX,CAAyB,YAAzB,KACAJ,IAAI,YAAY5D,cADhB,IAEA4D,IAAI,CAACvB,UAAL,CAAgB4B,WAAhB,EAHP,EAGsC;IAClC,OAAO,IAAP;EACH;;EACD/C,QAAQ,CAAC,IAAD,EAAOD,UAAP,CAAR;;EACA,OAAO2C,IAAI,YAAY5D,cAAvB,EAAuC;IACnC4D,IAAI,GAAGA,IAAI,CAACvB,UAAZ;EACH;;EACD,IAAIuB,IAAI,CAACM,sBAAL,CAA4BrC,UAAU,CAACsC,WAAX,CAAuBlE,SAAvB,CAA5B,CAAJ,EAAoE;IAChE,OAAO,KAAK0D,KAAL,CAAWxB,qBAAX,CAAiCN,UAAjC,CAAP;EACH;;EACD,OAAO,IAAP;AACH,CAnBwB,CAAzB;AAqBAN,yBAAyB,CAACnC,eAAD,EAAkB,UAAUyC,UAAV,EAAsB;EAC7D,IAAIuC,UAAU,GAAG,KAAKA,UAAL,CAAgBjC,qBAAhB,CAAsCN,UAAtC,CAAjB;EACA,IAAIwC,WAAW,GAAG,KAAKA,WAAL,CAAiBlC,qBAAjB,CAAuCN,UAAvC,CAAlB;EACA,IAAIuC,UAAU,KAAK,KAAKA,UAApB,IAAkCC,WAAW,KAAK,KAAKA,WAA3D,EACI,OAAO,IAAP;EACJ,IAAI,CAACD,UAAL,EACI,OAAOC,WAAW,GAAG5D,SAAS,CAAC5B,UAAD,EAAa,IAAb,EAAmB;IAC7CiF,QAAQ,EAAE,IADmC;IAE7CF,IAAI,EAAE,KAAKU,SAFkC;IAG7CX,KAAK,EAAEU;EAHsC,CAAnB,CAAZ,GAIb,KAAKC,SAAL,CAAenC,qBAAf,CAAqCN,UAArC,CAJL;EAKJ,IAAI,CAACwC,WAAL,EACI,OAAO5D,SAAS,CAAC5B,UAAD,EAAa,IAAb,EAAmB;IAC/BiF,QAAQ,EAAE,IADqB;IAE/BF,IAAI,EAAE,KAAKU,SAFoB;IAG/BX,KAAK,EAAES;EAHwB,CAAnB,CAAhB;EAKJ,IAAI5C,IAAI,GAAG,KAAKuB,KAAL,EAAX;EACAvB,IAAI,CAAC4C,UAAL,GAAkBA,UAAlB;EACA5C,IAAI,CAAC6C,WAAL,GAAmBA,WAAnB;EACA,OAAO7C,IAAP;AACH,CArBwB,CAAzB;AAuBAD,yBAAyB,CAACf,SAAD,EAAY,UAAUqB,UAAV,EAAsBjB,kBAAtB,EAA0C;EAC3E,IAAIG,kBAAkB,CAAC8C,GAAnB,CAAuB,KAAKC,QAA5B,CAAJ,EAA2C;IACvC,IAAI,CAAC,KAAKzB,UAAL,CAAgBoB,gBAAhB,CAAiC5B,UAAjC,CAAL,EAAmD;MAC/CX,QAAQ,CAAC,IAAD,EAAOD,UAAP,CAAR;IACH,CAFD,MAEO;MACHE,UAAU,CAAC,IAAD,EAAOF,UAAP,CAAV;IACH;;IACD,OAAO,IAAP;EACH;;EACD,IAAI,KAAK6C,QAAL,IAAiB,QAAjB,IAA6B,KAAKzB,UAAL,YAA2BjC,aAA5D,EACI,OAAO,IAAP;EACJ,IAAIiC,UAAU,GAAG,KAAKA,UAAL,CAAgBF,qBAAhB,CAAsCN,UAAtC,EAAkDjB,kBAAlD,CAAjB;;EACA,IAAIA,kBAAkB,IAAIyB,UAAtB,IAAoCf,YAAY,CAACe,UAAD,CAApD,EAAkE;IAC9D,IAAIA,UAAU,KAAK,KAAKA,UAApB,IAAkC,KAAKyB,QAAL,IAAiB,GAAvD,EACI,OAAO,IAAP;IACJ,OAAOzB,UAAU,CAACkC,MAAX,CAAkB1C,UAAlB,EAA8BjB,kBAA9B,CAAP;EACH;;EACD,OAAOyB,UAAP;AACH,CAlBwB,CAAzB;AAoBAd,yBAAyB,CAACnB,aAAD,EAAgB,UAAUyB,UAAV,EAAsB;EAC3D,MAAM2C,WAAW,GAAG,KAAKC,WAAL,CAAiB5C,UAAjB,KACbhB,wBAAwB,CAACgD,GAAzB,CAA6B,KAAKjB,IAAlC,CADP;EAEA,OAAO4B,WAAW,GAAG,IAAH,GAAU,IAA5B;AACH,CAJwB,CAAzB;AAMAjD,yBAAyB,CAAC5B,UAAD,EAAa,UAAUkC,UAAV,EAAsBjB,kBAAtB,EAA0C;EAC5E,IAAI8D,MAAM,GAAG/C,IAAI,CAAC,KAAK0B,UAAN,EAAkBxB,UAAlB,EAA8BjB,kBAA9B,CAAjB;EACA,OAAO8D,MAAM,IAAItD,aAAa,CAAC,IAAD,EAAOsD,MAAP,CAA9B;AACH,CAHwB,CAAzB;AAKAnD,yBAAyB,CAACzB,kBAAD,EAAqB,UAAU+B,UAAV,EAAsBjB,kBAAtB,EAA0C;EACpF,MAAM+D,YAAY,GAAG,gBAAgB9E,gBAAhB,IAAoC,KAAK+E,GAAL,YAAoBnF,QAA7E;EACA,MAAMmF,GAAG,GAAGD,YAAY,IAAI,KAAKC,GAAL,CAASzC,qBAAT,CAA+BN,UAA/B,EAA2CjB,kBAA3C,CAA5B;EACA,MAAMiE,KAAK,GAAG,KAAKA,KAAL,IAAc,KAAKA,KAAL,CAAW1C,qBAAX,CAAiCN,UAAjC,EAA6CjB,kBAA7C,CAA5B;;EACA,IAAIgE,GAAG,IAAIC,KAAX,EAAkB;IACd,OAAOzD,aAAa,CAAC,IAAD,EAAO,CAACwD,GAAD,EAAMC,KAAN,CAAP,CAApB;EACH;;EACD,OAAOD,GAAG,IAAIC,KAAd;AACH,CARwB,CAAzB;AAUAtD,yBAAyB,CAACrC,iBAAD,EAAoB,UAAU2C,UAAV,EAAsB;EAC/D,MAAM+C,GAAG,GAAG,KAAKD,YAAL,MAAuB,KAAKC,GAAL,CAASzC,qBAAT,CAA+BN,UAA/B,CAAnC;EAEA,MAAMgD,KAAK,GAAG,KAAKC,MAAL,IAAe,KAAKD,KAApB,IACP,KAAKA,KAAL,CAAW1C,qBAAX,CAAiCN,UAAjC,CADP;EAGA,IAAI+C,GAAG,IAAIC,KAAX,EACI,OAAOzD,aAAa,CAAC,IAAD,EAAO,CAACwD,GAAD,EAAMC,KAAN,CAAP,CAApB;EACJ,OAAOD,GAAG,IAAIC,KAAP,IAAgB,IAAvB;AACH,CATwB,CAAzB;AAWAtD,yBAAyB,CAACpC,iBAAD,EAAoB,YAAY;EACrD,OAAO,KAAKwF,YAAL,KAAsB,KAAKC,GAA3B,GAAiC,IAAxC;AACH,CAFwB,CAAzB;AAIArD,yBAAyB,CAAC3B,gBAAD,EAAmB,YAAY;EACpD,OAAO,KAAK+E,YAAL,KAAsB,KAAKC,GAA3B,GAAiC,IAAxC;AACH,CAFwB,CAAzB;AAIArD,yBAAyB,CAACxB,gBAAD,EAAmB,YAAY;EACpD,OAAO,KAAK4E,YAAL,KAAsB,KAAKC,GAA3B,GAAiC,IAAxC;AACH,CAFwB,CAAzB;AAIArD,yBAAyB,CAAC7C,SAAD,EAAY,UAAUmD,UAAV,EAAsBjB,kBAAtB,EAA0C;EAC3E,IAAI8D,MAAM,GAAG/C,IAAI,CAAC,KAAKoD,QAAN,EAAgBlD,UAAhB,EAA4BjB,kBAA5B,CAAjB;EACA,OAAO8D,MAAM,IAAItD,aAAa,CAAC,IAAD,EAAOsD,MAAP,CAA9B;AACH,CAHwB,CAAzB;AAKAnD,yBAAyB,CAACjC,OAAD,EAAU,UAAUuC,UAAV,EAAsBjB,kBAAtB,EAA0C;EACzE,IAAII,yBAAyB,CAAC,IAAD,EAAOa,UAAP,CAA7B,EAAiD;IAC7C,OAAO,KAAKQ,UAAL,CAAgBF,qBAAhB,CAAsCN,UAAtC,EAAkDjB,kBAAlD,CAAP;EACH;;EACD,IAAI,KAAKyB,UAAL,CAAgB2C,mBAAhB,CAAoCnD,UAApC,CAAJ,EAAqD,OAAO,IAAP;EAErD,OAAO,KAAKQ,UAAL,CAAgBF,qBAAhB,CAAsCN,UAAtC,EAAkDjB,kBAAlD,CAAP;AACH,CAPwB,CAAzB;AASAW,yBAAyB,CAACpB,OAAD,EAAU,UAAU0B,UAAV,EAAsBjB,kBAAtB,EAA0C;EACzE,IAAII,yBAAyB,CAAC,IAAD,EAAOa,UAAP,CAA7B,EAAiD;IAC7C,OAAO,KAAKQ,UAAL,CAAgBF,qBAAhB,CAAsCN,UAAtC,EAAkDjB,kBAAlD,CAAP;EACH;;EACD,IAAI,KAAKyB,UAAL,CAAgB2C,mBAAhB,CAAoCnD,UAApC,CAAJ,EAAqD,OAAO,IAAP;EAErD,IAAIQ,UAAU,GAAG,KAAKA,UAAL,CAAgBF,qBAAhB,CAAsCN,UAAtC,EAAkDjB,kBAAlD,CAAjB;EACA,IAAI,CAACyB,UAAL,EACI,OAAO,KAAK4C,QAAL,CAAc9C,qBAAd,CAAoCN,UAApC,EAAgDjB,kBAAhD,CAAP;EACJ,IAAIqE,QAAQ,GAAG,KAAKA,QAAL,CAAc9C,qBAAd,CAAoCN,UAApC,CAAf;EACA,IAAI,CAACoD,QAAL,EACI,OAAO5C,UAAP;EACJ,OAAOjB,aAAa,CAAC,IAAD,EAAO,CAACiB,UAAD,EAAa4C,QAAb,CAAP,CAApB;AACH,CAbwB,CAAzB;AAeA1D,yBAAyB,CAACxC,SAAD,EAAY,UAAU8C,UAAV,EAAsBjB,kBAAtB,EAA0C;EAC3E,OAAO,KAAKyB,UAAL,CAAgBF,qBAAhB,CAAsCN,UAAtC,EAAkDjB,kBAAlD,CAAP;AACH,CAFwB,CAAzB;AAIAW,yBAAyB,CAACrB,YAAD,EAAe,UAAU2B,UAAV,EAAsB;EAC1D,IAAIqD,IAAI,GAAG,KAAKC,SAAL,EAAX;EACA,IAAIC,IAAI,GAAGF,IAAI,CAAC/C,qBAAL,CAA2BN,UAA3B,CAAX;EACA,IAAIuD,IAAI,KAAKF,IAAb,EACI,OAAO,IAAP;EACJ,IAAIG,WAAW,GAAG,KAAKA,WAAL,CAAiB3C,KAAjB,CAAuB,CAAvB,EAA0B,CAAC,CAA3B,CAAlB;EACA,IAAI0C,IAAJ,EACIC,WAAW,CAACjD,IAAZ,CAAiBgD,IAAjB;;EACJ,IAAI,CAACC,WAAW,CAACtD,MAAjB,EAAyB;IACrB,OAAOtB,SAAS,CAACf,UAAD,EAAa,IAAb,EAAmB;MAAEmF,KAAK,EAAE;IAAT,CAAnB,CAAhB;EACH;;EACD,OAAOzD,aAAa,CAAC,IAAD,EAAOiE,WAAP,CAApB;AACH,CAZwB,CAAzB;AAcA9D,yBAAyB,CAAChC,aAAD,EAAgB,UAAUsC,UAAV,EAAsBjB,kBAAtB,EAA0C;EAC/E,OAAO,KAAKyB,UAAL,CAAgBF,qBAAhB,CAAsCN,UAAtC,EAAkDjB,kBAAlD,CAAP;AACH,CAFwB,CAAzB;AAIAW,yBAAyB,CAAClB,mBAAD,EAAsBK,WAAtB,CAAzB;AAEAa,yBAAyB,CAACjB,kBAAD,EAAqB,UAAUuB,UAAV,EAAsB;EAChE,IAAI6C,MAAM,GAAG/C,IAAI,CAAC,KAAK2D,QAAN,EAAgBzD,UAAhB,EAA4BjB,kBAA5B,CAAjB;EACA,OAAO8D,MAAM,IAAItD,aAAa,CAAC,IAAD,EAAOsD,MAAP,CAA9B;AACH,CAHwB,CAAzB"},"metadata":{},"sourceType":"module"}