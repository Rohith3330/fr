{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utilities = require(\"../../utilities\");\n\nconst getColon = (context, objectTypeProperty) => {\n  let tokenIndex = 1;\n\n  if (objectTypeProperty.optional) {\n    tokenIndex++;\n  }\n\n  if (objectTypeProperty.static) {\n    tokenIndex++;\n  }\n\n  if (objectTypeProperty.variance) {\n    tokenIndex++;\n  }\n\n  return context.getSourceCode().getFirstToken(objectTypeProperty, tokenIndex);\n}; // 1) type X = { foo(): A; }\n// 2) type X = { foo: () => A; }\n// the above have identical ASTs (save for their ranges)\n// case 1 doesn't have a type annotation colon and must be ignored\n\n\nconst isShortPropertyFunction = objectTypeProperty => {\n  return objectTypeProperty.value.type === 'FunctionTypeAnnotation' && objectTypeProperty.range[0] === objectTypeProperty.value.range[0];\n};\n\nvar _default = (context, report) => {\n  return objectTypeProperty => {\n    if (isShortPropertyFunction(objectTypeProperty)) {\n      // potential difference: not checked in before\n      return;\n    }\n\n    report({\n      colon: getColon(context, objectTypeProperty),\n      name: (0, _utilities.quoteName)((0, _utilities.getParameterName)(objectTypeProperty, context)),\n      node: objectTypeProperty\n    });\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utilities","require","getColon","context","objectTypeProperty","tokenIndex","optional","static","variance","getSourceCode","getFirstToken","isShortPropertyFunction","type","range","_default","report","colon","name","quoteName","getParameterName","node","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/typeColonSpacing/evaluateObjectTypeProperty.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utilities = require(\"../../utilities\");\n\nconst getColon = (context, objectTypeProperty) => {\n  let tokenIndex = 1;\n\n  if (objectTypeProperty.optional) {\n    tokenIndex++;\n  }\n\n  if (objectTypeProperty.static) {\n    tokenIndex++;\n  }\n\n  if (objectTypeProperty.variance) {\n    tokenIndex++;\n  }\n\n  return context.getSourceCode().getFirstToken(objectTypeProperty, tokenIndex);\n}; // 1) type X = { foo(): A; }\n// 2) type X = { foo: () => A; }\n// the above have identical ASTs (save for their ranges)\n// case 1 doesn't have a type annotation colon and must be ignored\n\n\nconst isShortPropertyFunction = objectTypeProperty => {\n  return objectTypeProperty.value.type === 'FunctionTypeAnnotation' && objectTypeProperty.range[0] === objectTypeProperty.value.range[0];\n};\n\nvar _default = (context, report) => {\n  return objectTypeProperty => {\n    if (isShortPropertyFunction(objectTypeProperty)) {\n      // potential difference: not checked in before\n      return;\n    }\n\n    report({\n      colon: getColon(context, objectTypeProperty),\n      name: (0, _utilities.quoteName)((0, _utilities.getParameterName)(objectTypeProperty, context)),\n      node: objectTypeProperty\n    });\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,OAAD,EAAUC,kBAAV,KAAiC;EAChD,IAAIC,UAAU,GAAG,CAAjB;;EAEA,IAAID,kBAAkB,CAACE,QAAvB,EAAiC;IAC/BD,UAAU;EACX;;EAED,IAAID,kBAAkB,CAACG,MAAvB,EAA+B;IAC7BF,UAAU;EACX;;EAED,IAAID,kBAAkB,CAACI,QAAvB,EAAiC;IAC/BH,UAAU;EACX;;EAED,OAAOF,OAAO,CAACM,aAAR,GAAwBC,aAAxB,CAAsCN,kBAAtC,EAA0DC,UAA1D,CAAP;AACD,CAhBD,C,CAgBG;AACH;AACA;AACA;;;AAGA,MAAMM,uBAAuB,GAAGP,kBAAkB,IAAI;EACpD,OAAOA,kBAAkB,CAACN,KAAnB,CAAyBc,IAAzB,KAAkC,wBAAlC,IAA8DR,kBAAkB,CAACS,KAAnB,CAAyB,CAAzB,MAAgCT,kBAAkB,CAACN,KAAnB,CAAyBe,KAAzB,CAA+B,CAA/B,CAArG;AACD,CAFD;;AAIA,IAAIC,QAAQ,GAAG,CAACX,OAAD,EAAUY,MAAV,KAAqB;EAClC,OAAOX,kBAAkB,IAAI;IAC3B,IAAIO,uBAAuB,CAACP,kBAAD,CAA3B,EAAiD;MAC/C;MACA;IACD;;IAEDW,MAAM,CAAC;MACLC,KAAK,EAAEd,QAAQ,CAACC,OAAD,EAAUC,kBAAV,CADV;MAELa,IAAI,EAAE,CAAC,GAAGjB,UAAU,CAACkB,SAAf,EAA0B,CAAC,GAAGlB,UAAU,CAACmB,gBAAf,EAAiCf,kBAAjC,EAAqDD,OAArD,CAA1B,CAFD;MAGLiB,IAAI,EAAEhB;IAHD,CAAD,CAAN;EAKD,CAXD;AAYD,CAbD;;AAeAP,OAAO,CAACE,OAAR,GAAkBe,QAAlB;AACAO,MAAM,CAACxB,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}