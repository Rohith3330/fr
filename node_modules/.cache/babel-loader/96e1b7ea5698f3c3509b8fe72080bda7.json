{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forEachReturnStatement = exports.getNameLocationInGlobalDirectiveComment = void 0;\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst escapeRegExp_1 = require(\"./escapeRegExp\"); // deeply re-export, for convenience\n\n\n__exportStar(require(\"@typescript-eslint/utils/dist/ast-utils\"), exports); // The following is copied from `eslint`'s source code since it doesn't exist in eslint@5.\n// https://github.com/eslint/eslint/blob/145aec1ab9052fbca96a44d04927c595951b1536/lib/rules/utils/ast-utils.js#L1751-L1779\n// Could be export { getNameLocationInGlobalDirectiveComment } from 'eslint/lib/rules/utils/ast-utils'\n\n/**\n * Get the `loc` object of a given name in a `/*globals` directive comment.\n * @param {SourceCode} sourceCode The source code to convert index to loc.\n * @param {Comment} comment The `/*globals` directive comment which include the name.\n * @param {string} name The name to find.\n * @returns {SourceLocation} The `loc` object.\n */\n\n\nfunction getNameLocationInGlobalDirectiveComment(sourceCode, comment, name) {\n  const namePattern = new RegExp(`[\\\\s,]${(0, escapeRegExp_1.escapeRegExp)(name)}(?:$|[\\\\s,:])`, 'gu'); // To ignore the first text \"global\".\n\n  namePattern.lastIndex = comment.value.indexOf('global') + 6; // Search a given variable name.\n\n  const match = namePattern.exec(comment.value); // Convert the index to loc.\n\n  const start = sourceCode.getLocFromIndex(comment.range[0] + '/*'.length + (match ? match.index + 1 : 0));\n  const end = {\n    line: start.line,\n    column: start.column + (match ? name.length : 1)\n  };\n  return {\n    start,\n    end\n  };\n}\n\nexports.getNameLocationInGlobalDirectiveComment = getNameLocationInGlobalDirectiveComment; // Copied from typescript https://github.com/microsoft/TypeScript/blob/42b0e3c4630c129ca39ce0df9fff5f0d1b4dd348/src/compiler/utilities.ts#L1335\n// Warning: This has the same semantics as the forEach family of functions,\n//          in that traversal terminates in the event that 'visitor' supplies a truthy value.\n\nfunction forEachReturnStatement(body, visitor) {\n  return traverse(body);\n\n  function traverse(node) {\n    switch (node.kind) {\n      case ts.SyntaxKind.ReturnStatement:\n        return visitor(node);\n\n      case ts.SyntaxKind.CaseBlock:\n      case ts.SyntaxKind.Block:\n      case ts.SyntaxKind.IfStatement:\n      case ts.SyntaxKind.DoStatement:\n      case ts.SyntaxKind.WhileStatement:\n      case ts.SyntaxKind.ForStatement:\n      case ts.SyntaxKind.ForInStatement:\n      case ts.SyntaxKind.ForOfStatement:\n      case ts.SyntaxKind.WithStatement:\n      case ts.SyntaxKind.SwitchStatement:\n      case ts.SyntaxKind.CaseClause:\n      case ts.SyntaxKind.DefaultClause:\n      case ts.SyntaxKind.LabeledStatement:\n      case ts.SyntaxKind.TryStatement:\n      case ts.SyntaxKind.CatchClause:\n        return ts.forEachChild(node, traverse);\n    }\n\n    return undefined;\n  }\n}\n\nexports.forEachReturnStatement = forEachReturnStatement;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA,iD,CAEA;;;AACAA,0E,CAEA;AACA;AACA;;AACA;;;;;;;;;AAOA,SAAgBC,uCAAhB,CACEC,UADF,EAEEC,OAFF,EAGEC,IAHF,EAGc;EAEZ,MAAMC,WAAW,GAAG,IAAIC,MAAJ,CAClB,SAAS,iCAAaF,IAAb,CAAkB,eADT,EAElB,IAFkB,CAApB,CAFY,CAOZ;;EACAC,WAAW,CAACE,SAAZ,GAAwBJ,OAAO,CAACK,KAAR,CAAcC,OAAd,CAAsB,QAAtB,IAAkC,CAA1D,CARY,CAUZ;;EACA,MAAMC,KAAK,GAAGL,WAAW,CAACM,IAAZ,CAAiBR,OAAO,CAACK,KAAzB,CAAd,CAXY,CAaZ;;EACA,MAAMI,KAAK,GAAGV,UAAU,CAACW,eAAX,CACZV,OAAO,CAACW,KAAR,CAAc,CAAd,IAAmB,KAAKC,MAAxB,IAAkCL,KAAK,GAAGA,KAAK,CAACM,KAAN,GAAc,CAAjB,GAAqB,CAA5D,CADY,CAAd;EAGA,MAAMC,GAAG,GAAG;IACVC,IAAI,EAAEN,KAAK,CAACM,IADF;IAEVC,MAAM,EAAEP,KAAK,CAACO,MAAN,IAAgBT,KAAK,GAAGN,IAAI,CAACW,MAAR,GAAiB,CAAtC;EAFE,CAAZ;EAKA,OAAO;IAAEH,KAAF;IAASK;EAAT,CAAP;AACD;;AA1BDG,0F,CA4BA;AACA;AACA;;AACA,SAAgBC,sBAAhB,CACEC,IADF,EAEEC,OAFF,EAE0C;EAExC,OAAOC,QAAQ,CAACF,IAAD,CAAf;;EAEA,SAASE,QAAT,CAAkBC,IAAlB,EAA+B;IAC7B,QAAQA,IAAI,CAACC,IAAb;MACE,KAAKC,EAAE,CAACC,UAAH,CAAcC,eAAnB;QACE,OAAON,OAAO,CAAqBE,IAArB,CAAd;;MACF,KAAKE,EAAE,CAACC,UAAH,CAAcE,SAAnB;MACA,KAAKH,EAAE,CAACC,UAAH,CAAcG,KAAnB;MACA,KAAKJ,EAAE,CAACC,UAAH,CAAcI,WAAnB;MACA,KAAKL,EAAE,CAACC,UAAH,CAAcK,WAAnB;MACA,KAAKN,EAAE,CAACC,UAAH,CAAcM,cAAnB;MACA,KAAKP,EAAE,CAACC,UAAH,CAAcO,YAAnB;MACA,KAAKR,EAAE,CAACC,UAAH,CAAcQ,cAAnB;MACA,KAAKT,EAAE,CAACC,UAAH,CAAcS,cAAnB;MACA,KAAKV,EAAE,CAACC,UAAH,CAAcU,aAAnB;MACA,KAAKX,EAAE,CAACC,UAAH,CAAcW,eAAnB;MACA,KAAKZ,EAAE,CAACC,UAAH,CAAcY,UAAnB;MACA,KAAKb,EAAE,CAACC,UAAH,CAAca,aAAnB;MACA,KAAKd,EAAE,CAACC,UAAH,CAAcc,gBAAnB;MACA,KAAKf,EAAE,CAACC,UAAH,CAAce,YAAnB;MACA,KAAKhB,EAAE,CAACC,UAAH,CAAcgB,WAAnB;QACE,OAAOjB,EAAE,CAACkB,YAAH,CAAgBpB,IAAhB,EAAsBD,QAAtB,CAAP;IAlBJ;;IAqBA,OAAOsB,SAAP;EACD;AACF;;AA9BD1B","names":["__exportStar","getNameLocationInGlobalDirectiveComment","sourceCode","comment","name","namePattern","RegExp","lastIndex","value","indexOf","match","exec","start","getLocFromIndex","range","length","index","end","line","column","exports","forEachReturnStatement","body","visitor","traverse","node","kind","ts","SyntaxKind","ReturnStatement","CaseBlock","Block","IfStatement","DoStatement","WhileStatement","ForStatement","ForInStatement","ForOfStatement","WithStatement","SwitchStatement","CaseClause","DefaultClause","LabeledStatement","TryStatement","CatchClause","forEachChild","undefined"],"sources":["../../src/util/astUtils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}