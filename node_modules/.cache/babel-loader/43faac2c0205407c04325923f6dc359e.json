{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst browserslist = require('browserslist');\n\nconst chalk = require('chalk');\n\nconst os = require('os');\n\nconst prompts = require('prompts');\n\nconst pkgUp = require('pkg-up');\n\nconst fs = require('fs');\n\nconst defaultBrowsers = {\n  production: ['>0.2%', 'not dead', 'not op_mini all'],\n  development: ['last 1 chrome version', 'last 1 firefox version', 'last 1 safari version']\n};\n\nfunction shouldSetBrowsers(isInteractive) {\n  if (!isInteractive) {\n    return Promise.resolve(true);\n  }\n\n  const question = {\n    type: 'confirm',\n    name: 'shouldSetBrowsers',\n    message: chalk.yellow(\"We're unable to detect target browsers.\") + `\\n\\nWould you like to add the defaults to your ${chalk.bold('package.json')}?`,\n    initial: true\n  };\n  return prompts(question).then(answer => answer.shouldSetBrowsers);\n}\n\nfunction checkBrowsers(dir, isInteractive) {\n  let retry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const current = browserslist.loadConfig({\n    path: dir\n  });\n\n  if (current != null) {\n    return Promise.resolve(current);\n  }\n\n  if (!retry) {\n    return Promise.reject(new Error(chalk.red('As of react-scripts >=2 you must specify targeted browsers.') + os.EOL + `Please add a ${chalk.underline('browserslist')} key to your ${chalk.bold('package.json')}.`));\n  }\n\n  return shouldSetBrowsers(isInteractive).then(shouldSetBrowsers => {\n    if (!shouldSetBrowsers) {\n      return checkBrowsers(dir, isInteractive, false);\n    }\n\n    return pkgUp({\n      cwd: dir\n    }).then(filePath => {\n      if (filePath == null) {\n        return Promise.reject();\n      }\n\n      const pkg = JSON.parse(fs.readFileSync(filePath));\n      pkg['browserslist'] = defaultBrowsers;\n      fs.writeFileSync(filePath, JSON.stringify(pkg, null, 2) + os.EOL);\n      browserslist.clearCaches();\n      console.log();\n      console.log(`${chalk.green('Set target browsers:')} ${chalk.cyan(defaultBrowsers.join(', '))}`);\n      console.log();\n    }) // Swallow any error\n    .catch(() => {}).then(() => checkBrowsers(dir, isInteractive, false));\n  });\n}\n\nmodule.exports = {\n  defaultBrowsers,\n  checkBrowsers\n};","map":{"version":3,"names":["browserslist","require","chalk","os","prompts","pkgUp","fs","defaultBrowsers","production","development","shouldSetBrowsers","isInteractive","Promise","resolve","question","type","name","message","yellow","bold","initial","then","answer","checkBrowsers","dir","retry","current","loadConfig","path","reject","Error","red","EOL","underline","cwd","filePath","pkg","JSON","parse","readFileSync","writeFileSync","stringify","clearCaches","console","log","green","cyan","join","catch","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/react-dev-utils/browsersHelper.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst browserslist = require('browserslist');\nconst chalk = require('chalk');\nconst os = require('os');\nconst prompts = require('prompts');\nconst pkgUp = require('pkg-up');\nconst fs = require('fs');\n\nconst defaultBrowsers = {\n  production: ['>0.2%', 'not dead', 'not op_mini all'],\n  development: [\n    'last 1 chrome version',\n    'last 1 firefox version',\n    'last 1 safari version',\n  ],\n};\n\nfunction shouldSetBrowsers(isInteractive) {\n  if (!isInteractive) {\n    return Promise.resolve(true);\n  }\n\n  const question = {\n    type: 'confirm',\n    name: 'shouldSetBrowsers',\n    message:\n      chalk.yellow(\"We're unable to detect target browsers.\") +\n      `\\n\\nWould you like to add the defaults to your ${chalk.bold(\n        'package.json'\n      )}?`,\n    initial: true,\n  };\n\n  return prompts(question).then(answer => answer.shouldSetBrowsers);\n}\n\nfunction checkBrowsers(dir, isInteractive, retry = true) {\n  const current = browserslist.loadConfig({ path: dir });\n  if (current != null) {\n    return Promise.resolve(current);\n  }\n\n  if (!retry) {\n    return Promise.reject(\n      new Error(\n        chalk.red(\n          'As of react-scripts >=2 you must specify targeted browsers.'\n        ) +\n          os.EOL +\n          `Please add a ${chalk.underline(\n            'browserslist'\n          )} key to your ${chalk.bold('package.json')}.`\n      )\n    );\n  }\n\n  return shouldSetBrowsers(isInteractive).then(shouldSetBrowsers => {\n    if (!shouldSetBrowsers) {\n      return checkBrowsers(dir, isInteractive, false);\n    }\n\n    return (\n      pkgUp({ cwd: dir })\n        .then(filePath => {\n          if (filePath == null) {\n            return Promise.reject();\n          }\n          const pkg = JSON.parse(fs.readFileSync(filePath));\n          pkg['browserslist'] = defaultBrowsers;\n          fs.writeFileSync(filePath, JSON.stringify(pkg, null, 2) + os.EOL);\n\n          browserslist.clearCaches();\n          console.log();\n          console.log(\n            `${chalk.green('Set target browsers:')} ${chalk.cyan(\n              defaultBrowsers.join(', ')\n            )}`\n          );\n          console.log();\n        })\n        // Swallow any error\n        .catch(() => {})\n        .then(() => checkBrowsers(dir, isInteractive, false))\n    );\n  });\n}\n\nmodule.exports = { defaultBrowsers, checkBrowsers };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}