{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\n\n\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n\n        return endResult;\n      }\n\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\nexports.default = stripIndentTransformer;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;;AAKA,IAAMA,yBAAyB,SAAzBA,sBAAyB;EAAA,IAACC,IAAD,uEAAQ,SAAR;EAAA,OAAuB;IACpDC,WADoD,uBACxCC,SADwC,EAC7B;MACrB,IAAIF,SAAS,SAAb,EAAwB;QACtB;QACA,IAAMG,QAAQD,UAAUC,KAAVD,CAAgB,mBAAhBA,CAAd;QACA,IAAME,SAASD,SAASE,KAAKC,GAALD,gCAAYF,MAAMI,GAANJ,CAAU;UAAA,OAAMK,GAAGC,MAAT;QAAV,EAAZ,EAAxB;;QACA,IAAIL,MAAJ,EAAY;UACV,IAAMM,SAAS,IAAIC,MAAJ,SAAiBP,MAAjB,QAA4B,IAA5B,CAAf;UACA,OAAOF,UAAUU,OAAVV,CAAkBQ,MAAlBR,EAA0B,EAA1BA,CAAP;QACD;;QACD,OAAOA,SAAP;MACD;;MACD,IAAIF,SAAS,KAAb,EAAoB;QAClB;QACA,OAAOE,UAAUU,OAAVV,CAAkB,aAAlBA,EAAiC,EAAjCA,CAAP;MACD;;MACD,MAAM,IAAIW,KAAJ,oBAA2Bb,IAA3B,CAAN;IACD;EAjBmD,CAAvB;AAA/B;;kBAoBeD","names":["stripIndentTransformer","type","onEndResult","endResult","match","indent","Math","min","map","el","length","regexp","RegExp","replace","Error"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\common-tags\\src\\stripIndentTransformer\\stripIndentTransformer.js"],"sourcesContent":["/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nconst stripIndentTransformer = (type = 'initial') => ({\n  onEndResult(endResult) {\n    if (type === 'initial') {\n      // remove the shortest leading indentation from each line\n      const match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n      const indent = match && Math.min(...match.map(el => el.length));\n      if (indent) {\n        const regexp = new RegExp(`^.{${indent}}`, 'gm');\n        return endResult.replace(regexp, '');\n      }\n      return endResult;\n    }\n    if (type === 'all') {\n      // remove all indentation from each line\n      return endResult.replace(/^[^\\S\\n]+/gm, '');\n    }\n    throw new Error(`Unknown type: ${type}`);\n  },\n});\n\nexport default stripIndentTransformer;\n"]},"metadata":{},"sourceType":"script"}