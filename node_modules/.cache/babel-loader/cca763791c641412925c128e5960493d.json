{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nconst explicitReturnTypeUtils_1 = require(\"../util/explicitReturnTypeUtils\");\n\nexports.default = util.createRule({\n  name: 'explicit-function-return-type',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Require explicit return types on functions and class methods',\n      recommended: false\n    },\n    messages: {\n      missingReturnType: 'Missing return type on function.'\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        allowConciseArrowFunctionExpressionsStartingWithVoid: {\n          description: 'Whether to allow arrow functions that start with the `void` keyword.',\n          type: 'boolean'\n        },\n        allowExpressions: {\n          description: 'Whether to ignore function expressions (functions which are not part of a declaration).',\n          type: 'boolean'\n        },\n        allowHigherOrderFunctions: {\n          description: 'Whether to ignore functions immediately returning another function expression.',\n          type: 'boolean'\n        },\n        allowTypedFunctionExpressions: {\n          description: 'Whether to ignore type annotations on the variable of function expressions.',\n          type: 'boolean'\n        },\n        allowDirectConstAssertionInArrowFunctions: {\n          description: 'Whether to ignore arrow functions immediately returning a `as const` value.',\n          type: 'boolean'\n        },\n        allowedNames: {\n          description: 'An array of function/method names that will not have their arguments or return values checked.',\n          items: {\n            type: 'string'\n          },\n          type: 'array'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{\n    allowExpressions: false,\n    allowTypedFunctionExpressions: true,\n    allowHigherOrderFunctions: true,\n    allowDirectConstAssertionInArrowFunctions: true,\n    allowConciseArrowFunctionExpressionsStartingWithVoid: false,\n    allowedNames: []\n  }],\n\n  create(context, _ref) {\n    let [options] = _ref;\n    const sourceCode = context.getSourceCode();\n\n    function isAllowedName(node) {\n      var _a, _b;\n\n      if (!((_a = options.allowedNames) === null || _a === void 0 ? void 0 : _a.length)) {\n        return false;\n      }\n\n      if (node.type === utils_1.AST_NODE_TYPES.ArrowFunctionExpression || node.type === utils_1.AST_NODE_TYPES.FunctionExpression) {\n        const parent = node.parent;\n        let funcName;\n\n        if ((_b = node.id) === null || _b === void 0 ? void 0 : _b.name) {\n          funcName = node.id.name;\n        } else if (parent) {\n          switch (parent.type) {\n            case utils_1.AST_NODE_TYPES.VariableDeclarator:\n              {\n                if (parent.id.type === utils_1.AST_NODE_TYPES.Identifier) {\n                  funcName = parent.id.name;\n                }\n\n                break;\n              }\n\n            case utils_1.AST_NODE_TYPES.MethodDefinition:\n            case utils_1.AST_NODE_TYPES.PropertyDefinition:\n            case utils_1.AST_NODE_TYPES.Property:\n              {\n                if (parent.key.type === utils_1.AST_NODE_TYPES.Identifier && parent.computed === false) {\n                  funcName = parent.key.name;\n                }\n\n                break;\n              }\n          }\n        }\n\n        if (!!funcName && !!options.allowedNames.includes(funcName)) {\n          return true;\n        }\n      }\n\n      if (node.type === utils_1.AST_NODE_TYPES.FunctionDeclaration && node.id && node.id.type === utils_1.AST_NODE_TYPES.Identifier && !!options.allowedNames.includes(node.id.name)) {\n        return true;\n      }\n\n      return false;\n    }\n\n    return {\n      'ArrowFunctionExpression, FunctionExpression'(node) {\n        if (options.allowConciseArrowFunctionExpressionsStartingWithVoid && node.type === utils_1.AST_NODE_TYPES.ArrowFunctionExpression && node.expression && node.body.type === utils_1.AST_NODE_TYPES.UnaryExpression && node.body.operator === 'void') {\n          return;\n        }\n\n        if (isAllowedName(node)) {\n          return;\n        }\n\n        if (options.allowTypedFunctionExpressions && ((0, explicitReturnTypeUtils_1.isValidFunctionExpressionReturnType)(node, options) || (0, explicitReturnTypeUtils_1.ancestorHasReturnType)(node))) {\n          return;\n        }\n\n        (0, explicitReturnTypeUtils_1.checkFunctionReturnType)(node, options, sourceCode, loc => context.report({\n          node,\n          loc,\n          messageId: 'missingReturnType'\n        }));\n      },\n\n      FunctionDeclaration(node) {\n        if (isAllowedName(node)) {\n          return;\n        }\n\n        if (options.allowTypedFunctionExpressions && node.returnType) {\n          return;\n        }\n\n        (0, explicitReturnTypeUtils_1.checkFunctionReturnType)(node, options, sourceCode, loc => context.report({\n          node,\n          loc,\n          messageId: 'missingReturnType'\n        }));\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["exports","util","createRule","name","meta","type","docs","description","recommended","messages","missingReturnType","schema","properties","allowConciseArrowFunctionExpressionsStartingWithVoid","allowExpressions","allowHigherOrderFunctions","allowTypedFunctionExpressions","allowDirectConstAssertionInArrowFunctions","allowedNames","items","additionalProperties","defaultOptions","create","context","options","sourceCode","getSourceCode","isAllowedName","node","_a","length","utils_1","ArrowFunctionExpression","FunctionExpression","parent","funcName","id","_b","VariableDeclarator","Identifier","MethodDefinition","PropertyDefinition","Property","key","computed","includes","FunctionDeclaration","expression","body","UnaryExpression","operator","loc","report","messageId","returnType"],"sources":["../../src/rules/explicit-function-return-type.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}