{"ast":null,"code":"var List = require('../common/List');\n\nvar SyntaxError = require('../common/SyntaxError');\n\nvar TokenStream = require('../common/TokenStream');\n\nvar Lexer = require('../lexer/Lexer');\n\nvar definitionSyntax = require('../definition-syntax');\n\nvar tokenize = require('../tokenizer');\n\nvar createParser = require('../parser/create');\n\nvar createGenerator = require('../generator/create');\n\nvar createConvertor = require('../convertor/create');\n\nvar createWalker = require('../walker/create');\n\nvar clone = require('../utils/clone');\n\nvar names = require('../utils/names');\n\nvar mix = require('./config/mix');\n\nfunction createSyntax(config) {\n  var parse = createParser(config);\n  var walk = createWalker(config);\n  var generate = createGenerator(config);\n  var convert = createConvertor(walk);\n  var syntax = {\n    List: List,\n    SyntaxError: SyntaxError,\n    TokenStream: TokenStream,\n    Lexer: Lexer,\n    vendorPrefix: names.vendorPrefix,\n    keyword: names.keyword,\n    property: names.property,\n    isCustomProperty: names.isCustomProperty,\n    definitionSyntax: definitionSyntax,\n    lexer: null,\n    createLexer: function (config) {\n      return new Lexer(config, syntax, syntax.lexer.structure);\n    },\n    tokenize: tokenize,\n    parse: parse,\n    walk: walk,\n    generate: generate,\n    find: walk.find,\n    findLast: walk.findLast,\n    findAll: walk.findAll,\n    clone: clone,\n    fromPlainObject: convert.fromPlainObject,\n    toPlainObject: convert.toPlainObject,\n    createSyntax: function (config) {\n      return createSyntax(mix({}, config));\n    },\n    fork: function (extension) {\n      var base = mix({}, config); // copy of config\n\n      return createSyntax(typeof extension === 'function' ? extension(base, Object.assign) : mix(base, extension));\n    }\n  };\n  syntax.lexer = new Lexer({\n    generic: true,\n    types: config.types,\n    atrules: config.atrules,\n    properties: config.properties,\n    node: config.node\n  }, syntax);\n  return syntax;\n}\n\n;\n\nexports.create = function (config) {\n  return createSyntax(mix({}, config));\n};","map":{"version":3,"names":["List","require","SyntaxError","TokenStream","Lexer","definitionSyntax","tokenize","createParser","createGenerator","createConvertor","createWalker","clone","names","mix","createSyntax","config","parse","walk","generate","convert","syntax","vendorPrefix","keyword","property","isCustomProperty","lexer","createLexer","structure","find","findLast","findAll","fromPlainObject","toPlainObject","fork","extension","base","Object","assign","generic","types","atrules","properties","node","exports","create"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/csso/node_modules/css-tree/lib/syntax/create.js"],"sourcesContent":["var List = require('../common/List');\nvar SyntaxError = require('../common/SyntaxError');\nvar TokenStream = require('../common/TokenStream');\nvar Lexer = require('../lexer/Lexer');\nvar definitionSyntax = require('../definition-syntax');\nvar tokenize = require('../tokenizer');\nvar createParser = require('../parser/create');\nvar createGenerator = require('../generator/create');\nvar createConvertor = require('../convertor/create');\nvar createWalker = require('../walker/create');\nvar clone = require('../utils/clone');\nvar names = require('../utils/names');\nvar mix = require('./config/mix');\n\nfunction createSyntax(config) {\n    var parse = createParser(config);\n    var walk = createWalker(config);\n    var generate = createGenerator(config);\n    var convert = createConvertor(walk);\n\n    var syntax = {\n        List: List,\n        SyntaxError: SyntaxError,\n        TokenStream: TokenStream,\n        Lexer: Lexer,\n\n        vendorPrefix: names.vendorPrefix,\n        keyword: names.keyword,\n        property: names.property,\n        isCustomProperty: names.isCustomProperty,\n\n        definitionSyntax: definitionSyntax,\n        lexer: null,\n        createLexer: function(config) {\n            return new Lexer(config, syntax, syntax.lexer.structure);\n        },\n\n        tokenize: tokenize,\n        parse: parse,\n        walk: walk,\n        generate: generate,\n\n        find: walk.find,\n        findLast: walk.findLast,\n        findAll: walk.findAll,\n\n        clone: clone,\n        fromPlainObject: convert.fromPlainObject,\n        toPlainObject: convert.toPlainObject,\n\n        createSyntax: function(config) {\n            return createSyntax(mix({}, config));\n        },\n        fork: function(extension) {\n            var base = mix({}, config); // copy of config\n            return createSyntax(\n                typeof extension === 'function'\n                    ? extension(base, Object.assign)\n                    : mix(base, extension)\n            );\n        }\n    };\n\n    syntax.lexer = new Lexer({\n        generic: true,\n        types: config.types,\n        atrules: config.atrules,\n        properties: config.properties,\n        node: config.node\n    }, syntax);\n\n    return syntax;\n};\n\nexports.create = function(config) {\n    return createSyntax(mix({}, config));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}