{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nconst printNodeModifiers = (node, final) => {\n  var _a;\n\n  return `${(_a = node.accessibility) !== null && _a !== void 0 ? _a : ''}${node.static ? ' static' : ''} ${final} `.trimStart();\n};\n\nconst isSupportedLiteral = node => {\n  if (node.type === utils_1.AST_NODE_TYPES.Literal) {\n    return true;\n  }\n\n  if (node.type === utils_1.AST_NODE_TYPES.TaggedTemplateExpression || node.type === utils_1.AST_NODE_TYPES.TemplateLiteral) {\n    return ('quasi' in node ? node.quasi.quasis : node.quasis).length === 1;\n  }\n\n  return false;\n};\n\nexports.default = util.createRule({\n  name: 'class-literal-property-style',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Enforce that literals on classes are exposed in a consistent style',\n      recommended: 'strict'\n    },\n    fixable: 'code',\n    messages: {\n      preferFieldStyle: 'Literals should be exposed using readonly fields.',\n      preferGetterStyle: 'Literals should be exposed using getters.'\n    },\n    schema: [{\n      enum: ['fields', 'getters']\n    }]\n  },\n  defaultOptions: ['fields'],\n\n  create(context, _ref) {\n    let [style] = _ref;\n    return Object.assign(Object.assign({}, style === 'fields' && {\n      MethodDefinition(node) {\n        if (node.kind !== 'get' || !node.value.body || !node.value.body.body.length) {\n          return;\n        }\n\n        const [statement] = node.value.body.body;\n\n        if (statement.type !== utils_1.AST_NODE_TYPES.ReturnStatement) {\n          return;\n        }\n\n        const {\n          argument\n        } = statement;\n\n        if (!argument || !isSupportedLiteral(argument)) {\n          return;\n        }\n\n        context.report({\n          node: node.key,\n          messageId: 'preferFieldStyle',\n\n          fix(fixer) {\n            const sourceCode = context.getSourceCode();\n            const name = sourceCode.getText(node.key);\n            let text = '';\n            text += printNodeModifiers(node, 'readonly');\n            text += node.computed ? `[${name}]` : name;\n            text += ` = ${sourceCode.getText(argument)};`;\n            return fixer.replaceText(node, text);\n          }\n\n        });\n      }\n\n    }), style === 'getters' && {\n      PropertyDefinition(node) {\n        if (!node.readonly || node.declare) {\n          return;\n        }\n\n        const {\n          value\n        } = node;\n\n        if (!value || !isSupportedLiteral(value)) {\n          return;\n        }\n\n        context.report({\n          node: node.key,\n          messageId: 'preferGetterStyle',\n\n          fix(fixer) {\n            const sourceCode = context.getSourceCode();\n            const name = sourceCode.getText(node.key);\n            let text = '';\n            text += printNodeModifiers(node, 'get');\n            text += node.computed ? `[${name}]` : name;\n            text += `() { return ${sourceCode.getText(value)}; }`;\n            return fixer.replaceText(node, text);\n          }\n\n        });\n      }\n\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["printNodeModifiers","node","final","accessibility","_a","static","trimStart","isSupportedLiteral","type","utils_1","Literal","TaggedTemplateExpression","TemplateLiteral","quasi","quasis","length","exports","util","createRule","name","meta","docs","description","recommended","fixable","messages","preferFieldStyle","preferGetterStyle","schema","enum","defaultOptions","create","context","style","MethodDefinition","kind","value","body","statement","ReturnStatement","argument","report","key","messageId","fix","fixer","sourceCode","getSourceCode","getText","text","computed","replaceText","PropertyDefinition","readonly","declare"],"sources":["../../src/rules/class-literal-property-style.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}