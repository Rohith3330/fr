{"ast":null,"code":"/**\n * Parse a path string into an array of path segments.\n *\n * Square bracket notation `a[b]` may be used to \"escape\" dots that would otherwise be interpreted as path separators.\n *\n * Example:\n * a -> ['a']\n * a.b.c -> ['a', 'b', 'c']\n * a[b].c -> ['a', 'b', 'c']\n * a[b.c].e.f -> ['a', 'b.c', 'e', 'f']\n * a[b][c][d] -> ['a', 'b', 'c', 'd']\n *\n * @param {string|string[]} path\n **/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"toPath\", {\n  enumerable: true,\n  get: () => toPath\n});\n\nfunction toPath(path) {\n  if (Array.isArray(path)) return path;\n  let openBrackets = path.split(\"[\").length - 1;\n  let closedBrackets = path.split(\"]\").length - 1;\n\n  if (openBrackets !== closedBrackets) {\n    throw new Error(`Path is invalid. Has unbalanced brackets: ${path}`);\n  }\n\n  return path.split(/\\.(?![^\\[]*\\])|[\\[\\]]/g).filter(Boolean);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","toPath","path","Array","isArray","openBrackets","split","length","closedBrackets","Error","filter","Boolean"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/lib/util/toPath.js"],"sourcesContent":["/**\n * Parse a path string into an array of path segments.\n *\n * Square bracket notation `a[b]` may be used to \"escape\" dots that would otherwise be interpreted as path separators.\n *\n * Example:\n * a -> ['a']\n * a.b.c -> ['a', 'b', 'c']\n * a[b].c -> ['a', 'b', 'c']\n * a[b.c].e.f -> ['a', 'b.c', 'e', 'f']\n * a[b][c][d] -> ['a', 'b', 'c', 'd']\n *\n * @param {string|string[]} path\n **/ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"toPath\", {\n    enumerable: true,\n    get: ()=>toPath\n});\nfunction toPath(path) {\n    if (Array.isArray(path)) return path;\n    let openBrackets = path.split(\"[\").length - 1;\n    let closedBrackets = path.split(\"]\").length - 1;\n    if (openBrackets !== closedBrackets) {\n        throw new Error(`Path is invalid. Has unbalanced brackets: ${path}`);\n    }\n    return path.split(/\\.(?![^\\[]*\\])|[\\[\\]]/g).filter(Boolean);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAK;;AACLA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EACzCC,KAAK,EAAE;AADkC,CAA7C;AAGAH,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,QAA/B,EAAyC;EACrCE,UAAU,EAAE,IADyB;EAErCC,GAAG,EAAE,MAAIC;AAF4B,CAAzC;;AAIA,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;EAClB,IAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB,OAAOA,IAAP;EACzB,IAAIG,YAAY,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAAhB,GAAyB,CAA5C;EACA,IAAIC,cAAc,GAAGN,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAAhB,GAAyB,CAA9C;;EACA,IAAIF,YAAY,KAAKG,cAArB,EAAqC;IACjC,MAAM,IAAIC,KAAJ,CAAW,6CAA4CP,IAAK,EAA5D,CAAN;EACH;;EACD,OAAOA,IAAI,CAACI,KAAL,CAAW,wBAAX,EAAqCI,MAArC,CAA4CC,OAA5C,CAAP;AACH"},"metadata":{},"sourceType":"script"}