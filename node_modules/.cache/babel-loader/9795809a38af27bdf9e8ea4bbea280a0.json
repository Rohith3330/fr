{"ast":null,"code":"/**\n * @fileoverview Prevent usage of setState in lifecycle methods\n * @author Yannick Croissant\n */\n'use strict';\n\nconst docsUrl = require('./docsUrl');\n\nconst report = require('./report');\n\nconst testReactVersion = require('./version').testReactVersion; // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nfunction mapTitle(methodName) {\n  const map = {\n    componentDidMount: 'did-mount',\n    componentDidUpdate: 'did-update',\n    componentWillUpdate: 'will-update'\n  };\n  const title = map[methodName];\n\n  if (!title) {\n    throw Error(`No docsUrl for '${methodName}'`);\n  }\n\n  return `no-${title}-set-state`;\n}\n\nconst messages = {\n  noSetState: 'Do not use setState in {{name}}'\n};\nconst methodNoopsAsOf = {\n  componentDidMount: '>= 16.3.0',\n  componentDidUpdate: '>= 16.3.0'\n};\n\nfunction shouldBeNoop(context, methodName) {\n  return methodName in methodNoopsAsOf && testReactVersion(context, methodNoopsAsOf[methodName]) && !testReactVersion(context, '999.999.999'); // for when the version is not specified\n}\n\nmodule.exports = function makeNoMethodSetStateRule(methodName, shouldCheckUnsafeCb) {\n  return {\n    meta: {\n      docs: {\n        description: `Disallow usage of setState in ${methodName}`,\n        category: 'Best Practices',\n        recommended: false,\n        url: docsUrl(mapTitle(methodName))\n      },\n      messages,\n      schema: [{\n        enum: ['disallow-in-func']\n      }]\n    },\n\n    create(context) {\n      const mode = context.options[0] || 'allow-in-func';\n\n      function nameMatches(name) {\n        if (name === methodName) {\n          return true;\n        }\n\n        if (typeof shouldCheckUnsafeCb === 'function' && shouldCheckUnsafeCb(context)) {\n          return name === `UNSAFE_${methodName}`;\n        }\n\n        return false;\n      }\n\n      if (shouldBeNoop(context, methodName)) {\n        return {};\n      } // --------------------------------------------------------------------------\n      // Public\n      // --------------------------------------------------------------------------\n\n\n      return {\n        CallExpression(node) {\n          const callee = node.callee;\n\n          if (callee.type !== 'MemberExpression' || callee.object.type !== 'ThisExpression' || callee.property.name !== 'setState') {\n            return;\n          }\n\n          const ancestors = context.getAncestors(callee).reverse();\n          let depth = 0;\n          ancestors.some(ancestor => {\n            if (/Function(Expression|Declaration)$/.test(ancestor.type)) {\n              depth += 1;\n            }\n\n            if (ancestor.type !== 'Property' && ancestor.type !== 'MethodDefinition' && ancestor.type !== 'ClassProperty' && ancestor.type !== 'PropertyDefinition' || !nameMatches(ancestor.key.name) || mode !== 'disallow-in-func' && depth > 1) {\n              return false;\n            }\n\n            report(context, messages.noSetState, 'noSetState', {\n              node: callee,\n              data: {\n                name: ancestor.key.name\n              }\n            });\n            return true;\n          });\n        }\n\n      };\n    }\n\n  };\n};","map":{"version":3,"names":["docsUrl","require","report","testReactVersion","mapTitle","methodName","map","componentDidMount","componentDidUpdate","componentWillUpdate","title","Error","messages","noSetState","methodNoopsAsOf","shouldBeNoop","context","module","exports","makeNoMethodSetStateRule","shouldCheckUnsafeCb","meta","docs","description","category","recommended","url","schema","enum","create","mode","options","nameMatches","name","CallExpression","node","callee","type","object","property","ancestors","getAncestors","reverse","depth","some","ancestor","test","key","data"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/util/makeNoMethodSetStateRule.js"],"sourcesContent":["/**\n * @fileoverview Prevent usage of setState in lifecycle methods\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst docsUrl = require('./docsUrl');\nconst report = require('./report');\nconst testReactVersion = require('./version').testReactVersion;\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nfunction mapTitle(methodName) {\n  const map = {\n    componentDidMount: 'did-mount',\n    componentDidUpdate: 'did-update',\n    componentWillUpdate: 'will-update',\n  };\n  const title = map[methodName];\n  if (!title) {\n    throw Error(`No docsUrl for '${methodName}'`);\n  }\n  return `no-${title}-set-state`;\n}\n\nconst messages = {\n  noSetState: 'Do not use setState in {{name}}',\n};\n\nconst methodNoopsAsOf = {\n  componentDidMount: '>= 16.3.0',\n  componentDidUpdate: '>= 16.3.0',\n};\n\nfunction shouldBeNoop(context, methodName) {\n  return methodName in methodNoopsAsOf\n    && testReactVersion(context, methodNoopsAsOf[methodName])\n    && !testReactVersion(context, '999.999.999'); // for when the version is not specified\n}\n\nmodule.exports = function makeNoMethodSetStateRule(methodName, shouldCheckUnsafeCb) {\n  return {\n    meta: {\n      docs: {\n        description: `Disallow usage of setState in ${methodName}`,\n        category: 'Best Practices',\n        recommended: false,\n        url: docsUrl(mapTitle(methodName)),\n      },\n\n      messages,\n\n      schema: [{\n        enum: ['disallow-in-func'],\n      }],\n    },\n\n    create(context) {\n      const mode = context.options[0] || 'allow-in-func';\n\n      function nameMatches(name) {\n        if (name === methodName) {\n          return true;\n        }\n\n        if (typeof shouldCheckUnsafeCb === 'function' && shouldCheckUnsafeCb(context)) {\n          return name === `UNSAFE_${methodName}`;\n        }\n\n        return false;\n      }\n\n      if (shouldBeNoop(context, methodName)) {\n        return {};\n      }\n\n      // --------------------------------------------------------------------------\n      // Public\n      // --------------------------------------------------------------------------\n\n      return {\n        CallExpression(node) {\n          const callee = node.callee;\n          if (\n            callee.type !== 'MemberExpression'\n            || callee.object.type !== 'ThisExpression'\n            || callee.property.name !== 'setState'\n          ) {\n            return;\n          }\n          const ancestors = context.getAncestors(callee).reverse();\n          let depth = 0;\n          ancestors.some((ancestor) => {\n            if (/Function(Expression|Declaration)$/.test(ancestor.type)) {\n              depth += 1;\n            }\n            if (\n              (ancestor.type !== 'Property' && ancestor.type !== 'MethodDefinition' && ancestor.type !== 'ClassProperty' && ancestor.type !== 'PropertyDefinition')\n              || !nameMatches(ancestor.key.name)\n              || (mode !== 'disallow-in-func' && depth > 1)\n            ) {\n              return false;\n            }\n            report(context, messages.noSetState, 'noSetState', {\n              node: callee,\n              data: {\n                name: ancestor.key.name,\n              },\n            });\n            return true;\n          });\n        },\n      };\n    },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}