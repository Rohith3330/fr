{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: () => collapseAdjacentRules\n});\nlet comparisonMap = {\n  atrule: [\"name\", \"params\"],\n  rule: [\"selector\"]\n};\nlet types = new Set(Object.keys(comparisonMap));\n\nfunction collapseAdjacentRules() {\n  function collapseRulesIn(root) {\n    let currentRule = null;\n    root.each(node => {\n      if (!types.has(node.type)) {\n        currentRule = null;\n        return;\n      }\n\n      if (currentRule === null) {\n        currentRule = node;\n        return;\n      }\n\n      let properties = comparisonMap[node.type];\n\n      var _property, _property1;\n\n      if (node.type === \"atrule\" && node.name === \"font-face\") {\n        currentRule = node;\n      } else if (properties.every(property => ((_property = node[property]) !== null && _property !== void 0 ? _property : \"\").replace(/\\s+/g, \" \") === ((_property1 = currentRule[property]) !== null && _property1 !== void 0 ? _property1 : \"\").replace(/\\s+/g, \" \"))) {\n        // An AtRule may not have children (for example if we encounter duplicate @import url(…) rules)\n        if (node.nodes) {\n          currentRule.append(node.nodes);\n        }\n\n        node.remove();\n      } else {\n        currentRule = node;\n      }\n    }); // After we've collapsed adjacent rules & at-rules, we need to collapse\n    // adjacent rules & at-rules that are children of at-rules.\n    // We do not care about nesting rules because Tailwind CSS\n    // explicitly does not handle rule nesting on its own as\n    // the user is expected to use a nesting plugin\n\n    root.each(node => {\n      if (node.type === \"atrule\") {\n        collapseRulesIn(node);\n      }\n    });\n  }\n\n  return root => {\n    collapseRulesIn(root);\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","collapseAdjacentRules","comparisonMap","atrule","rule","types","Set","keys","collapseRulesIn","root","currentRule","each","node","has","type","properties","_property","_property1","name","every","property","replace","nodes","append","remove"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/lib/lib/collapseAdjacentRules.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: ()=>collapseAdjacentRules\n});\nlet comparisonMap = {\n    atrule: [\n        \"name\",\n        \"params\"\n    ],\n    rule: [\n        \"selector\"\n    ]\n};\nlet types = new Set(Object.keys(comparisonMap));\nfunction collapseAdjacentRules() {\n    function collapseRulesIn(root) {\n        let currentRule = null;\n        root.each((node)=>{\n            if (!types.has(node.type)) {\n                currentRule = null;\n                return;\n            }\n            if (currentRule === null) {\n                currentRule = node;\n                return;\n            }\n            let properties = comparisonMap[node.type];\n            var _property, _property1;\n            if (node.type === \"atrule\" && node.name === \"font-face\") {\n                currentRule = node;\n            } else if (properties.every((property)=>((_property = node[property]) !== null && _property !== void 0 ? _property : \"\").replace(/\\s+/g, \" \") === ((_property1 = currentRule[property]) !== null && _property1 !== void 0 ? _property1 : \"\").replace(/\\s+/g, \" \"))) {\n                // An AtRule may not have children (for example if we encounter duplicate @import url(…) rules)\n                if (node.nodes) {\n                    currentRule.append(node.nodes);\n                }\n                node.remove();\n            } else {\n                currentRule = node;\n            }\n        });\n        // After we've collapsed adjacent rules & at-rules, we need to collapse\n        // adjacent rules & at-rules that are children of at-rules.\n        // We do not care about nesting rules because Tailwind CSS\n        // explicitly does not handle rule nesting on its own as\n        // the user is expected to use a nesting plugin\n        root.each((node)=>{\n            if (node.type === \"atrule\") {\n                collapseRulesIn(node);\n            }\n        });\n    }\n    return (root)=>{\n        collapseRulesIn(root);\n    };\n}\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EACzCC,KAAK,EAAE;AADkC,CAA7C;AAGAH,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,SAA/B,EAA0C;EACtCE,UAAU,EAAE,IAD0B;EAEtCC,GAAG,EAAE,MAAIC;AAF6B,CAA1C;AAIA,IAAIC,aAAa,GAAG;EAChBC,MAAM,EAAE,CACJ,MADI,EAEJ,QAFI,CADQ;EAKhBC,IAAI,EAAE,CACF,UADE;AALU,CAApB;AASA,IAAIC,KAAK,GAAG,IAAIC,GAAJ,CAAQX,MAAM,CAACY,IAAP,CAAYL,aAAZ,CAAR,CAAZ;;AACA,SAASD,qBAAT,GAAiC;EAC7B,SAASO,eAAT,CAAyBC,IAAzB,EAA+B;IAC3B,IAAIC,WAAW,GAAG,IAAlB;IACAD,IAAI,CAACE,IAAL,CAAWC,IAAD,IAAQ;MACd,IAAI,CAACP,KAAK,CAACQ,GAAN,CAAUD,IAAI,CAACE,IAAf,CAAL,EAA2B;QACvBJ,WAAW,GAAG,IAAd;QACA;MACH;;MACD,IAAIA,WAAW,KAAK,IAApB,EAA0B;QACtBA,WAAW,GAAGE,IAAd;QACA;MACH;;MACD,IAAIG,UAAU,GAAGb,aAAa,CAACU,IAAI,CAACE,IAAN,CAA9B;;MACA,IAAIE,SAAJ,EAAeC,UAAf;;MACA,IAAIL,IAAI,CAACE,IAAL,KAAc,QAAd,IAA0BF,IAAI,CAACM,IAAL,KAAc,WAA5C,EAAyD;QACrDR,WAAW,GAAGE,IAAd;MACH,CAFD,MAEO,IAAIG,UAAU,CAACI,KAAX,CAAkBC,QAAD,IAAY,CAAC,CAACJ,SAAS,GAAGJ,IAAI,CAACQ,QAAD,CAAjB,MAAiC,IAAjC,IAAyCJ,SAAS,KAAK,KAAK,CAA5D,GAAgEA,SAAhE,GAA4E,EAA7E,EAAiFK,OAAjF,CAAyF,MAAzF,EAAiG,GAAjG,MAA0G,CAAC,CAACJ,UAAU,GAAGP,WAAW,CAACU,QAAD,CAAzB,MAAyC,IAAzC,IAAiDH,UAAU,KAAK,KAAK,CAArE,GAAyEA,UAAzE,GAAsF,EAAvF,EAA2FI,OAA3F,CAAmG,MAAnG,EAA2G,GAA3G,CAAvI,CAAJ,EAA6P;QAChQ;QACA,IAAIT,IAAI,CAACU,KAAT,EAAgB;UACZZ,WAAW,CAACa,MAAZ,CAAmBX,IAAI,CAACU,KAAxB;QACH;;QACDV,IAAI,CAACY,MAAL;MACH,CANM,MAMA;QACHd,WAAW,GAAGE,IAAd;MACH;IACJ,CAtBD,EAF2B,CAyB3B;IACA;IACA;IACA;IACA;;IACAH,IAAI,CAACE,IAAL,CAAWC,IAAD,IAAQ;MACd,IAAIA,IAAI,CAACE,IAAL,KAAc,QAAlB,EAA4B;QACxBN,eAAe,CAACI,IAAD,CAAf;MACH;IACJ,CAJD;EAKH;;EACD,OAAQH,IAAD,IAAQ;IACXD,eAAe,CAACC,IAAD,CAAf;EACH,CAFD;AAGH"},"metadata":{},"sourceType":"script"}