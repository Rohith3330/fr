{"ast":null,"code":"import log, { dim } from './log';\nexport function normalizeConfig(config) {\n  // Quick structure validation\n\n  /**\n   * type FilePath = string\n   * type RawFile = { raw: string, extension?: string }\n   * type ExtractorFn = (content: string) => Array<string>\n   * type TransformerFn = (content: string) => string\n   *\n   * type Content =\n   *   | Array<FilePath | RawFile>\n   *   | {\n   *       files: Array<FilePath | RawFile>,\n   *       extract?: ExtractorFn | { [extension: string]: ExtractorFn }\n   *       transform?: TransformerFn | { [extension: string]: TransformerFn }\n   *   }\n   */\n  let valid = (() => {\n    // `config.purge` should not exist anymore\n    if (config.purge) {\n      return false;\n    } // `config.content` should exist\n\n\n    if (!config.content) {\n      return false;\n    } // `config.content` should be an object or an array\n\n\n    if (!Array.isArray(config.content) && !(typeof config.content === 'object' && config.content !== null)) {\n      return false;\n    } // When `config.content` is an array, it should consist of FilePaths or RawFiles\n\n\n    if (Array.isArray(config.content)) {\n      return config.content.every(path => {\n        // `path` can be a string\n        if (typeof path === 'string') return true; // `path` can be an object { raw: string, extension?: string }\n        // `raw` must be a string\n\n        if (typeof path?.raw !== 'string') return false; // `extension` (if provided) should also be a string\n\n        if (path?.extension && typeof path?.extension !== 'string') {\n          return false;\n        }\n\n        return true;\n      });\n    } // When `config.content` is an object\n\n\n    if (typeof config.content === 'object' && config.content !== null) {\n      // Only `files`, `extract` and `transform` can exist in `config.content`\n      if (Object.keys(config.content).some(key => !['files', 'extract', 'transform'].includes(key))) {\n        return false;\n      } // `config.content.files` should exist of FilePaths or RawFiles\n\n\n      if (Array.isArray(config.content.files)) {\n        if (!config.content.files.every(path => {\n          // `path` can be a string\n          if (typeof path === 'string') return true; // `path` can be an object { raw: string, extension?: string }\n          // `raw` must be a string\n\n          if (typeof path?.raw !== 'string') return false; // `extension` (if provided) should also be a string\n\n          if (path?.extension && typeof path?.extension !== 'string') {\n            return false;\n          }\n\n          return true;\n        })) {\n          return false;\n        } // `config.content.extract` is optional, and can be a Function or a Record<String, Function>\n\n\n        if (typeof config.content.extract === 'object') {\n          for (let value of Object.values(config.content.extract)) {\n            if (typeof value !== 'function') {\n              return false;\n            }\n          }\n        } else if (!(config.content.extract === undefined || typeof config.content.extract === 'function')) {\n          return false;\n        } // `config.content.transform` is optional, and can be a Function or a Record<String, Function>\n\n\n        if (typeof config.content.transform === 'object') {\n          for (let value of Object.values(config.content.transform)) {\n            if (typeof value !== 'function') {\n              return false;\n            }\n          }\n        } else if (!(config.content.transform === undefined || typeof config.content.transform === 'function')) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  })();\n\n  if (!valid) {\n    log.warn('purge-deprecation', ['The `purge`/`content` options have changed in Tailwind CSS v3.0.', 'Update your configuration file to eliminate this warning.', 'https://tailwindcss.com/docs/upgrade-guide#configure-content-sources']);\n  } // Normalize the `safelist`\n\n\n  config.safelist = (() => {\n    let {\n      content,\n      purge,\n      safelist\n    } = config;\n    if (Array.isArray(safelist)) return safelist;\n    if (Array.isArray(content?.safelist)) return content.safelist;\n    if (Array.isArray(purge?.safelist)) return purge.safelist;\n    if (Array.isArray(purge?.options?.safelist)) return purge.options.safelist;\n    return [];\n  })(); // Normalize prefix option\n\n\n  if (typeof config.prefix === 'function') {\n    log.warn('prefix-function', ['As of Tailwind CSS v3.0, `prefix` cannot be a function.', 'Update `prefix` in your configuration to be a string to eliminate this warning.', 'https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function']);\n    config.prefix = '';\n  } else {\n    config.prefix = config.prefix ?? '';\n  } // Normalize the `content`\n\n\n  config.content = {\n    files: (() => {\n      let {\n        content,\n        purge\n      } = config;\n      if (Array.isArray(purge)) return purge;\n      if (Array.isArray(purge?.content)) return purge.content;\n      if (Array.isArray(content)) return content;\n      if (Array.isArray(content?.content)) return content.content;\n      if (Array.isArray(content?.files)) return content.files;\n      return [];\n    })(),\n    extract: (() => {\n      let extract = (() => {\n        if (config.purge?.extract) return config.purge.extract;\n        if (config.content?.extract) return config.content.extract;\n        if (config.purge?.extract?.DEFAULT) return config.purge.extract.DEFAULT;\n        if (config.content?.extract?.DEFAULT) return config.content.extract.DEFAULT;\n        if (config.purge?.options?.extractors) return config.purge.options.extractors;\n        if (config.content?.options?.extractors) return config.content.options.extractors;\n        return {};\n      })();\n\n      let extractors = {};\n\n      let defaultExtractor = (() => {\n        if (config.purge?.options?.defaultExtractor) {\n          return config.purge.options.defaultExtractor;\n        }\n\n        if (config.content?.options?.defaultExtractor) {\n          return config.content.options.defaultExtractor;\n        }\n\n        return undefined;\n      })();\n\n      if (defaultExtractor !== undefined) {\n        extractors.DEFAULT = defaultExtractor;\n      } // Functions\n\n\n      if (typeof extract === 'function') {\n        extractors.DEFAULT = extract;\n      } // Arrays\n      else if (Array.isArray(extract)) {\n        for (let {\n          extensions,\n          extractor\n        } of extract ?? []) {\n          for (let extension of extensions) {\n            extractors[extension] = extractor;\n          }\n        }\n      } // Objects\n      else if (typeof extract === 'object' && extract !== null) {\n        Object.assign(extractors, extract);\n      }\n\n      return extractors;\n    })(),\n    transform: (() => {\n      let transform = (() => {\n        if (config.purge?.transform) return config.purge.transform;\n        if (config.content?.transform) return config.content.transform;\n        if (config.purge?.transform?.DEFAULT) return config.purge.transform.DEFAULT;\n        if (config.content?.transform?.DEFAULT) return config.content.transform.DEFAULT;\n        return {};\n      })();\n\n      let transformers = {};\n\n      if (typeof transform === 'function') {\n        transformers.DEFAULT = transform;\n      }\n\n      if (typeof transform === 'object' && transform !== null) {\n        Object.assign(transformers, transform);\n      }\n\n      return transformers;\n    })()\n  }; // Validate globs to prevent bogus globs.\n  // E.g.: `./src/*.{html}` is invalid, the `{html}` should just be `html`\n\n  for (let file of config.content.files) {\n    if (typeof file === 'string' && /{([^,]*?)}/g.test(file)) {\n      log.warn('invalid-glob-braces', [`The glob pattern ${dim(file)} in your Tailwind CSS configuration is invalid.`, `Update it to ${dim(file.replace(/{([^,]*?)}/g, '$1'))} to silence this warning.` // TODO: Add https://tw.wtf/invalid-glob-braces\n      ]);\n      break;\n    }\n  }\n\n  return config;\n}","map":{"version":3,"names":["log","dim","normalizeConfig","config","valid","purge","content","Array","isArray","every","path","raw","extension","Object","keys","some","key","includes","files","extract","value","values","undefined","transform","warn","safelist","options","prefix","DEFAULT","extractors","defaultExtractor","extensions","extractor","assign","transformers","file","test","replace"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/util/normalizeConfig.js"],"sourcesContent":["import log, { dim } from './log'\n\nexport function normalizeConfig(config) {\n  // Quick structure validation\n  /**\n   * type FilePath = string\n   * type RawFile = { raw: string, extension?: string }\n   * type ExtractorFn = (content: string) => Array<string>\n   * type TransformerFn = (content: string) => string\n   *\n   * type Content =\n   *   | Array<FilePath | RawFile>\n   *   | {\n   *       files: Array<FilePath | RawFile>,\n   *       extract?: ExtractorFn | { [extension: string]: ExtractorFn }\n   *       transform?: TransformerFn | { [extension: string]: TransformerFn }\n   *   }\n   */\n  let valid = (() => {\n    // `config.purge` should not exist anymore\n    if (config.purge) {\n      return false\n    }\n\n    // `config.content` should exist\n    if (!config.content) {\n      return false\n    }\n\n    // `config.content` should be an object or an array\n    if (\n      !Array.isArray(config.content) &&\n      !(typeof config.content === 'object' && config.content !== null)\n    ) {\n      return false\n    }\n\n    // When `config.content` is an array, it should consist of FilePaths or RawFiles\n    if (Array.isArray(config.content)) {\n      return config.content.every((path) => {\n        // `path` can be a string\n        if (typeof path === 'string') return true\n\n        // `path` can be an object { raw: string, extension?: string }\n        // `raw` must be a string\n        if (typeof path?.raw !== 'string') return false\n\n        // `extension` (if provided) should also be a string\n        if (path?.extension && typeof path?.extension !== 'string') {\n          return false\n        }\n\n        return true\n      })\n    }\n\n    // When `config.content` is an object\n    if (typeof config.content === 'object' && config.content !== null) {\n      // Only `files`, `extract` and `transform` can exist in `config.content`\n      if (\n        Object.keys(config.content).some((key) => !['files', 'extract', 'transform'].includes(key))\n      ) {\n        return false\n      }\n\n      // `config.content.files` should exist of FilePaths or RawFiles\n      if (Array.isArray(config.content.files)) {\n        if (\n          !config.content.files.every((path) => {\n            // `path` can be a string\n            if (typeof path === 'string') return true\n\n            // `path` can be an object { raw: string, extension?: string }\n            // `raw` must be a string\n            if (typeof path?.raw !== 'string') return false\n\n            // `extension` (if provided) should also be a string\n            if (path?.extension && typeof path?.extension !== 'string') {\n              return false\n            }\n\n            return true\n          })\n        ) {\n          return false\n        }\n\n        // `config.content.extract` is optional, and can be a Function or a Record<String, Function>\n        if (typeof config.content.extract === 'object') {\n          for (let value of Object.values(config.content.extract)) {\n            if (typeof value !== 'function') {\n              return false\n            }\n          }\n        } else if (\n          !(config.content.extract === undefined || typeof config.content.extract === 'function')\n        ) {\n          return false\n        }\n\n        // `config.content.transform` is optional, and can be a Function or a Record<String, Function>\n        if (typeof config.content.transform === 'object') {\n          for (let value of Object.values(config.content.transform)) {\n            if (typeof value !== 'function') {\n              return false\n            }\n          }\n        } else if (\n          !(\n            config.content.transform === undefined || typeof config.content.transform === 'function'\n          )\n        ) {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    return false\n  })()\n\n  if (!valid) {\n    log.warn('purge-deprecation', [\n      'The `purge`/`content` options have changed in Tailwind CSS v3.0.',\n      'Update your configuration file to eliminate this warning.',\n      'https://tailwindcss.com/docs/upgrade-guide#configure-content-sources',\n    ])\n  }\n\n  // Normalize the `safelist`\n  config.safelist = (() => {\n    let { content, purge, safelist } = config\n\n    if (Array.isArray(safelist)) return safelist\n    if (Array.isArray(content?.safelist)) return content.safelist\n    if (Array.isArray(purge?.safelist)) return purge.safelist\n    if (Array.isArray(purge?.options?.safelist)) return purge.options.safelist\n\n    return []\n  })()\n\n  // Normalize prefix option\n  if (typeof config.prefix === 'function') {\n    log.warn('prefix-function', [\n      'As of Tailwind CSS v3.0, `prefix` cannot be a function.',\n      'Update `prefix` in your configuration to be a string to eliminate this warning.',\n      'https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function',\n    ])\n    config.prefix = ''\n  } else {\n    config.prefix = config.prefix ?? ''\n  }\n\n  // Normalize the `content`\n  config.content = {\n    files: (() => {\n      let { content, purge } = config\n\n      if (Array.isArray(purge)) return purge\n      if (Array.isArray(purge?.content)) return purge.content\n      if (Array.isArray(content)) return content\n      if (Array.isArray(content?.content)) return content.content\n      if (Array.isArray(content?.files)) return content.files\n\n      return []\n    })(),\n\n    extract: (() => {\n      let extract = (() => {\n        if (config.purge?.extract) return config.purge.extract\n        if (config.content?.extract) return config.content.extract\n\n        if (config.purge?.extract?.DEFAULT) return config.purge.extract.DEFAULT\n        if (config.content?.extract?.DEFAULT) return config.content.extract.DEFAULT\n\n        if (config.purge?.options?.extractors) return config.purge.options.extractors\n        if (config.content?.options?.extractors) return config.content.options.extractors\n\n        return {}\n      })()\n\n      let extractors = {}\n\n      let defaultExtractor = (() => {\n        if (config.purge?.options?.defaultExtractor) {\n          return config.purge.options.defaultExtractor\n        }\n\n        if (config.content?.options?.defaultExtractor) {\n          return config.content.options.defaultExtractor\n        }\n\n        return undefined\n      })()\n\n      if (defaultExtractor !== undefined) {\n        extractors.DEFAULT = defaultExtractor\n      }\n\n      // Functions\n      if (typeof extract === 'function') {\n        extractors.DEFAULT = extract\n      }\n\n      // Arrays\n      else if (Array.isArray(extract)) {\n        for (let { extensions, extractor } of extract ?? []) {\n          for (let extension of extensions) {\n            extractors[extension] = extractor\n          }\n        }\n      }\n\n      // Objects\n      else if (typeof extract === 'object' && extract !== null) {\n        Object.assign(extractors, extract)\n      }\n\n      return extractors\n    })(),\n\n    transform: (() => {\n      let transform = (() => {\n        if (config.purge?.transform) return config.purge.transform\n        if (config.content?.transform) return config.content.transform\n\n        if (config.purge?.transform?.DEFAULT) return config.purge.transform.DEFAULT\n        if (config.content?.transform?.DEFAULT) return config.content.transform.DEFAULT\n\n        return {}\n      })()\n\n      let transformers = {}\n\n      if (typeof transform === 'function') {\n        transformers.DEFAULT = transform\n      }\n\n      if (typeof transform === 'object' && transform !== null) {\n        Object.assign(transformers, transform)\n      }\n\n      return transformers\n    })(),\n  }\n\n  // Validate globs to prevent bogus globs.\n  // E.g.: `./src/*.{html}` is invalid, the `{html}` should just be `html`\n  for (let file of config.content.files) {\n    if (typeof file === 'string' && /{([^,]*?)}/g.test(file)) {\n      log.warn('invalid-glob-braces', [\n        `The glob pattern ${dim(file)} in your Tailwind CSS configuration is invalid.`,\n        `Update it to ${dim(file.replace(/{([^,]*?)}/g, '$1'))} to silence this warning.`,\n        // TODO: Add https://tw.wtf/invalid-glob-braces\n      ])\n      break\n    }\n  }\n\n  return config\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}