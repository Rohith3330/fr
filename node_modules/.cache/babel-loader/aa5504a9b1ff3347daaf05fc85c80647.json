{"ast":null,"code":"const importPattern = /^:import\\((\"[^\"]*\"|'[^']*'|[^\"']+)\\)$/;\nconst balancedQuotes = /^(\"[^\"]*\"|'[^']*'|[^\"']+)$/;\n\nconst getDeclsObject = rule => {\n  const object = {};\n  rule.walkDecls(decl => {\n    const before = decl.raws.before ? decl.raws.before.trim() : \"\";\n    object[before + decl.prop] = decl.value;\n  });\n  return object;\n};\n/**\n *\n * @param {string} css\n * @param {boolean} removeRules\n * @param {'auto' | 'rule' | 'at-rule'} mode\n */\n\n\nconst extractICSS = function (css) {\n  let removeRules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"auto\";\n  const icssImports = {};\n  const icssExports = {};\n\n  function addImports(node, path) {\n    const unquoted = path.replace(/'|\"/g, \"\");\n    icssImports[unquoted] = Object.assign(icssImports[unquoted] || {}, getDeclsObject(node));\n\n    if (removeRules) {\n      node.remove();\n    }\n  }\n\n  function addExports(node) {\n    Object.assign(icssExports, getDeclsObject(node));\n\n    if (removeRules) {\n      node.remove();\n    }\n  }\n\n  css.each(node => {\n    if (node.type === \"rule\" && mode !== \"at-rule\") {\n      if (node.selector.slice(0, 7) === \":import\") {\n        const matches = importPattern.exec(node.selector);\n\n        if (matches) {\n          addImports(node, matches[1]);\n        }\n      }\n\n      if (node.selector === \":export\") {\n        addExports(node);\n      }\n    }\n\n    if (node.type === \"atrule\" && mode !== \"rule\") {\n      if (node.name === \"icss-import\") {\n        const matches = balancedQuotes.exec(node.params);\n\n        if (matches) {\n          addImports(node, matches[1]);\n        }\n      }\n\n      if (node.name === \"icss-export\") {\n        addExports(node);\n      }\n    }\n  });\n  return {\n    icssImports,\n    icssExports\n  };\n};\n\nmodule.exports = extractICSS;","map":{"version":3,"names":["importPattern","balancedQuotes","getDeclsObject","rule","object","walkDecls","decl","before","raws","trim","prop","value","extractICSS","css","removeRules","mode","icssImports","icssExports","addImports","node","path","unquoted","replace","Object","assign","remove","addExports","each","type","selector","slice","matches","exec","name","params","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/icss-utils/src/extractICSS.js"],"sourcesContent":["const importPattern = /^:import\\((\"[^\"]*\"|'[^']*'|[^\"']+)\\)$/;\nconst balancedQuotes = /^(\"[^\"]*\"|'[^']*'|[^\"']+)$/;\n\nconst getDeclsObject = (rule) => {\n  const object = {};\n\n  rule.walkDecls((decl) => {\n    const before = decl.raws.before ? decl.raws.before.trim() : \"\";\n\n    object[before + decl.prop] = decl.value;\n  });\n\n  return object;\n};\n/**\n *\n * @param {string} css\n * @param {boolean} removeRules\n * @param {'auto' | 'rule' | 'at-rule'} mode\n */\nconst extractICSS = (css, removeRules = true, mode = \"auto\") => {\n  const icssImports = {};\n  const icssExports = {};\n\n  function addImports(node, path) {\n    const unquoted = path.replace(/'|\"/g, \"\");\n    icssImports[unquoted] = Object.assign(\n      icssImports[unquoted] || {},\n      getDeclsObject(node)\n    );\n\n    if (removeRules) {\n      node.remove();\n    }\n  }\n\n  function addExports(node) {\n    Object.assign(icssExports, getDeclsObject(node));\n    if (removeRules) {\n      node.remove();\n    }\n  }\n\n  css.each((node) => {\n    if (node.type === \"rule\" && mode !== \"at-rule\") {\n      if (node.selector.slice(0, 7) === \":import\") {\n        const matches = importPattern.exec(node.selector);\n\n        if (matches) {\n          addImports(node, matches[1]);\n        }\n      }\n\n      if (node.selector === \":export\") {\n        addExports(node);\n      }\n    }\n\n    if (node.type === \"atrule\" && mode !== \"rule\") {\n      if (node.name === \"icss-import\") {\n        const matches = balancedQuotes.exec(node.params);\n\n        if (matches) {\n          addImports(node, matches[1]);\n        }\n      }\n      if (node.name === \"icss-export\") {\n        addExports(node);\n      }\n    }\n  });\n\n  return { icssImports, icssExports };\n};\n\nmodule.exports = extractICSS;\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG,uCAAtB;AACA,MAAMC,cAAc,GAAG,4BAAvB;;AAEA,MAAMC,cAAc,GAAIC,IAAD,IAAU;EAC/B,MAAMC,MAAM,GAAG,EAAf;EAEAD,IAAI,CAACE,SAAL,CAAgBC,IAAD,IAAU;IACvB,MAAMC,MAAM,GAAGD,IAAI,CAACE,IAAL,CAAUD,MAAV,GAAmBD,IAAI,CAACE,IAAL,CAAUD,MAAV,CAAiBE,IAAjB,EAAnB,GAA6C,EAA5D;IAEAL,MAAM,CAACG,MAAM,GAAGD,IAAI,CAACI,IAAf,CAAN,GAA6BJ,IAAI,CAACK,KAAlC;EACD,CAJD;EAMA,OAAOP,MAAP;AACD,CAVD;AAWA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMQ,WAAW,GAAG,UAACC,GAAD,EAA4C;EAAA,IAAtCC,WAAsC,uEAAxB,IAAwB;EAAA,IAAlBC,IAAkB,uEAAX,MAAW;EAC9D,MAAMC,WAAW,GAAG,EAApB;EACA,MAAMC,WAAW,GAAG,EAApB;;EAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;IAC9B,MAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAjB;IACAN,WAAW,CAACK,QAAD,CAAX,GAAwBE,MAAM,CAACC,MAAP,CACtBR,WAAW,CAACK,QAAD,CAAX,IAAyB,EADH,EAEtBnB,cAAc,CAACiB,IAAD,CAFQ,CAAxB;;IAKA,IAAIL,WAAJ,EAAiB;MACfK,IAAI,CAACM,MAAL;IACD;EACF;;EAED,SAASC,UAAT,CAAoBP,IAApB,EAA0B;IACxBI,MAAM,CAACC,MAAP,CAAcP,WAAd,EAA2Bf,cAAc,CAACiB,IAAD,CAAzC;;IACA,IAAIL,WAAJ,EAAiB;MACfK,IAAI,CAACM,MAAL;IACD;EACF;;EAEDZ,GAAG,CAACc,IAAJ,CAAUR,IAAD,IAAU;IACjB,IAAIA,IAAI,CAACS,IAAL,KAAc,MAAd,IAAwBb,IAAI,KAAK,SAArC,EAAgD;MAC9C,IAAII,IAAI,CAACU,QAAL,CAAcC,KAAd,CAAoB,CAApB,EAAuB,CAAvB,MAA8B,SAAlC,EAA6C;QAC3C,MAAMC,OAAO,GAAG/B,aAAa,CAACgC,IAAd,CAAmBb,IAAI,CAACU,QAAxB,CAAhB;;QAEA,IAAIE,OAAJ,EAAa;UACXb,UAAU,CAACC,IAAD,EAAOY,OAAO,CAAC,CAAD,CAAd,CAAV;QACD;MACF;;MAED,IAAIZ,IAAI,CAACU,QAAL,KAAkB,SAAtB,EAAiC;QAC/BH,UAAU,CAACP,IAAD,CAAV;MACD;IACF;;IAED,IAAIA,IAAI,CAACS,IAAL,KAAc,QAAd,IAA0Bb,IAAI,KAAK,MAAvC,EAA+C;MAC7C,IAAII,IAAI,CAACc,IAAL,KAAc,aAAlB,EAAiC;QAC/B,MAAMF,OAAO,GAAG9B,cAAc,CAAC+B,IAAf,CAAoBb,IAAI,CAACe,MAAzB,CAAhB;;QAEA,IAAIH,OAAJ,EAAa;UACXb,UAAU,CAACC,IAAD,EAAOY,OAAO,CAAC,CAAD,CAAd,CAAV;QACD;MACF;;MACD,IAAIZ,IAAI,CAACc,IAAL,KAAc,aAAlB,EAAiC;QAC/BP,UAAU,CAACP,IAAD,CAAV;MACD;IACF;EACF,CA3BD;EA6BA,OAAO;IAAEH,WAAF;IAAeC;EAAf,CAAP;AACD,CArDD;;AAuDAkB,MAAM,CAACC,OAAP,GAAiBxB,WAAjB"},"metadata":{},"sourceType":"script"}