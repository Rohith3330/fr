{"ast":null,"code":"#!/usr/bin/env node\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst pkg = require('../package.json');\n\nconst JSON5 = require('./');\n\nconst argv = parseArgs();\n\nif (argv.version) {\n  version();\n} else if (argv.help) {\n  usage();\n} else {\n  const inFilename = argv.defaults[0];\n  let readStream;\n\n  if (inFilename) {\n    readStream = fs.createReadStream(inFilename);\n  } else {\n    readStream = process.stdin;\n  }\n\n  let json5 = '';\n  readStream.on('data', data => {\n    json5 += data;\n  });\n  readStream.on('end', () => {\n    let space;\n\n    if (argv.space === 't' || argv.space === 'tab') {\n      space = '\\t';\n    } else {\n      space = Number(argv.space);\n    }\n\n    let value;\n\n    try {\n      value = JSON5.parse(json5);\n\n      if (!argv.validate) {\n        const json = JSON.stringify(value, null, space);\n        let writeStream; // --convert is for backward compatibility with v0.5.1. If\n        // specified with <file> and not --out-file, then a file with\n        // the same name but with a .json extension will be written.\n\n        if (argv.convert && inFilename && !argv.outFile) {\n          const parsedFilename = path.parse(inFilename);\n          const outFilename = path.format(Object.assign(parsedFilename, {\n            base: path.basename(parsedFilename.base, parsedFilename.ext) + '.json'\n          }));\n          writeStream = fs.createWriteStream(outFilename);\n        } else if (argv.outFile) {\n          writeStream = fs.createWriteStream(argv.outFile);\n        } else {\n          writeStream = process.stdout;\n        }\n\n        writeStream.write(json);\n      }\n    } catch (err) {\n      console.error(err.message);\n      process.exit(1);\n    }\n  });\n}\n\nfunction parseArgs() {\n  let convert;\n  let space;\n  let validate;\n  let outFile;\n  let version;\n  let help;\n  const defaults = [];\n  const args = process.argv.slice(2);\n\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n\n    switch (arg) {\n      case '--convert':\n      case '-c':\n        convert = true;\n        break;\n\n      case '--space':\n      case '-s':\n        space = args[++i];\n        break;\n\n      case '--validate':\n      case '-v':\n        validate = true;\n        break;\n\n      case '--out-file':\n      case '-o':\n        outFile = args[++i];\n        break;\n\n      case '--version':\n      case '-V':\n        version = true;\n        break;\n\n      case '--help':\n      case '-h':\n        help = true;\n        break;\n\n      default:\n        defaults.push(arg);\n        break;\n    }\n  }\n\n  return {\n    convert,\n    space,\n    validate,\n    outFile,\n    version,\n    help,\n    defaults\n  };\n}\n\nfunction version() {\n  console.log(pkg.version);\n}\n\nfunction usage() {\n  console.log(`\n  Usage: json5 [options] <file>\n\n  If <file> is not provided, then STDIN is used.\n\n  Options:\n\n    -s, --space              The number of spaces to indent or 't' for tabs\n    -o, --out-file [file]    Output to the specified file, otherwise STDOUT\n    -v, --validate           Validate JSON5 but do not output JSON\n    -V, --version            Output the version number\n    -h, --help               Output usage information`);\n}","map":{"version":3,"names":["fs","require","path","pkg","JSON5","argv","parseArgs","version","help","usage","inFilename","defaults","readStream","createReadStream","process","stdin","json5","on","data","space","Number","value","parse","validate","json","JSON","stringify","writeStream","convert","outFile","parsedFilename","outFilename","format","Object","assign","base","basename","ext","createWriteStream","stdout","write","err","console","error","message","exit","args","slice","i","length","arg","push","log"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/json5/lib/cli.js"],"sourcesContent":["#!/usr/bin/env node\n\nconst fs = require('fs')\nconst path = require('path')\nconst pkg = require('../package.json')\nconst JSON5 = require('./')\n\nconst argv = parseArgs()\n\nif (argv.version) {\n    version()\n} else if (argv.help) {\n    usage()\n} else {\n    const inFilename = argv.defaults[0]\n\n    let readStream\n    if (inFilename) {\n        readStream = fs.createReadStream(inFilename)\n    } else {\n        readStream = process.stdin\n    }\n\n    let json5 = ''\n    readStream.on('data', data => {\n        json5 += data\n    })\n\n    readStream.on('end', () => {\n        let space\n        if (argv.space === 't' || argv.space === 'tab') {\n            space = '\\t'\n        } else {\n            space = Number(argv.space)\n        }\n\n        let value\n        try {\n            value = JSON5.parse(json5)\n            if (!argv.validate) {\n                const json = JSON.stringify(value, null, space)\n\n                let writeStream\n\n                // --convert is for backward compatibility with v0.5.1. If\n                // specified with <file> and not --out-file, then a file with\n                // the same name but with a .json extension will be written.\n                if (argv.convert && inFilename && !argv.outFile) {\n                    const parsedFilename = path.parse(inFilename)\n                    const outFilename = path.format(\n                        Object.assign(\n                            parsedFilename,\n                            {base: path.basename(parsedFilename.base, parsedFilename.ext) + '.json'}\n                        )\n                    )\n\n                    writeStream = fs.createWriteStream(outFilename)\n                } else if (argv.outFile) {\n                    writeStream = fs.createWriteStream(argv.outFile)\n                } else {\n                    writeStream = process.stdout\n                }\n\n                writeStream.write(json)\n            }\n        } catch (err) {\n            console.error(err.message)\n            process.exit(1)\n        }\n    })\n}\n\nfunction parseArgs () {\n    let convert\n    let space\n    let validate\n    let outFile\n    let version\n    let help\n    const defaults = []\n\n    const args = process.argv.slice(2)\n    for (let i = 0; i < args.length; i++) {\n        const arg = args[i]\n        switch (arg) {\n        case '--convert':\n        case '-c':\n            convert = true\n            break\n\n        case '--space':\n        case '-s':\n            space = args[++i]\n            break\n\n        case '--validate':\n        case '-v':\n            validate = true\n            break\n\n        case '--out-file':\n        case '-o':\n            outFile = args[++i]\n            break\n\n        case '--version':\n        case '-V':\n            version = true\n            break\n\n        case '--help':\n        case '-h':\n            help = true\n            break\n\n        default:\n            defaults.push(arg)\n            break\n        }\n    }\n\n    return {\n        convert,\n        space,\n        validate,\n        outFile,\n        version,\n        help,\n        defaults,\n    }\n}\n\nfunction version () {\n    console.log(pkg.version)\n}\n\nfunction usage () {\n    console.log(\n        `\n  Usage: json5 [options] <file>\n\n  If <file> is not provided, then STDIN is used.\n\n  Options:\n\n    -s, --space              The number of spaces to indent or 't' for tabs\n    -o, --out-file [file]    Output to the specified file, otherwise STDOUT\n    -v, --validate           Validate JSON5 but do not output JSON\n    -V, --version            Output the version number\n    -h, --help               Output usage information`\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}