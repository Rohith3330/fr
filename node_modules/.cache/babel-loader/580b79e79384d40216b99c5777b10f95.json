{"ast":null,"code":"\"use strict\";\n/**\n * Returns true when fn returns true for all members of obj.\n * This is an every implementation that works for all iterables\n *\n * @param  {object}   obj\n * @param  {Function} fn\n * @returns {boolean}\n */\n\nmodule.exports = function every(obj, fn) {\n  var pass = true;\n\n  try {\n    // eslint-disable-next-line @sinonjs/no-prototype-methods/no-prototype-methods\n    obj.forEach(function () {\n      if (!fn.apply(this, arguments)) {\n        // Throwing an error is the only way to break `forEach`\n        throw new Error();\n      }\n    });\n  } catch (e) {\n    pass = false;\n  }\n\n  return pass;\n};","map":{"version":3,"names":["module","exports","every","obj","fn","pass","forEach","apply","arguments","Error","e"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@sinonjs/commons/lib/every.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Returns true when fn returns true for all members of obj.\n * This is an every implementation that works for all iterables\n *\n * @param  {object}   obj\n * @param  {Function} fn\n * @returns {boolean}\n */\nmodule.exports = function every(obj, fn) {\n    var pass = true;\n\n    try {\n        // eslint-disable-next-line @sinonjs/no-prototype-methods/no-prototype-methods\n        obj.forEach(function() {\n            if (!fn.apply(this, arguments)) {\n                // Throwing an error is the only way to break `forEach`\n                throw new Error();\n            }\n        });\n    } catch (e) {\n        pass = false;\n    }\n\n    return pass;\n};\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeC,GAAf,EAAoBC,EAApB,EAAwB;EACrC,IAAIC,IAAI,GAAG,IAAX;;EAEA,IAAI;IACA;IACAF,GAAG,CAACG,OAAJ,CAAY,YAAW;MACnB,IAAI,CAACF,EAAE,CAACG,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAL,EAAgC;QAC5B;QACA,MAAM,IAAIC,KAAJ,EAAN;MACH;IACJ,CALD;EAMH,CARD,CAQE,OAAOC,CAAP,EAAU;IACRL,IAAI,GAAG,KAAP;EACH;;EAED,OAAOA,IAAP;AACH,CAhBD"},"metadata":{},"sourceType":"script"}