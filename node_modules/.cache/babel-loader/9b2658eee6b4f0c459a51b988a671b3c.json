{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst code_1 = require(\"../code\");\n\nconst additionalItems_1 = require(\"./additionalItems\");\n\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        len\n      }\n    } = _ref;\n    return (0, codegen_1.str)`must NOT have more than ${len} items`;\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        len\n      }\n    } = _ref2;\n    return (0, codegen_1._)`{limit: ${len}}`;\n  }\n};\nconst def = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"boolean\"],\n  before: \"uniqueItems\",\n  error,\n\n  code(cxt) {\n    const {\n      schema,\n      parentSchema,\n      it\n    } = cxt;\n    const {\n      prefixItems\n    } = parentSchema;\n    it.items = true;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    if (prefixItems) (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);else cxt.ok((0, code_1.validateArray)(cxt));\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAOA;;AACA;;AACA;;AACA;;AAIA,MAAMA,KAAK,GAA2B;EACpCC,OAAO,EAAE;IAAA,IAAC;MAACC,MAAM,EAAE;QAACC;MAAD;IAAT,CAAD;IAAA,OAAqB,kBAAG,2BAA2BA,GAAG,QAAtD;EAAA,CAD2B;EAEpCD,MAAM,EAAE;IAAA,IAAC;MAACA,MAAM,EAAE;QAACC;MAAD;IAAT,CAAD;IAAA,OAAqB,gBAAC,WAAWA,GAAG,GAApC;EAAA;AAF4B,CAAtC;AAKA,MAAMC,GAAG,GAA0B;EACjCC,OAAO,EAAE,OADwB;EAEjCC,IAAI,EAAE,OAF2B;EAGjCC,UAAU,EAAE,CAAC,QAAD,EAAW,SAAX,CAHqB;EAIjCC,MAAM,EAAE,aAJyB;EAKjCR,KALiC;;EAMjCS,IAAI,CAACC,GAAD,EAAgB;IAClB,MAAM;MAACC,MAAD;MAASC,YAAT;MAAuBC;IAAvB,IAA6BH,GAAnC;IACA,MAAM;MAACI;IAAD,IAAgBF,YAAtB;IACAC,EAAE,CAACE,KAAH,GAAW,IAAX;IACA,IAAI,8BAAkBF,EAAlB,EAAsBF,MAAtB,CAAJ,EAAmC;IACnC,IAAIG,WAAJ,EAAiB,+CAAwBJ,GAAxB,EAA6BI,WAA7B,EAAjB,KACKJ,GAAG,CAACM,EAAJ,CAAO,0BAAcN,GAAd,CAAP;EACN;;AAbgC,CAAnC;AAgBAO,kBAAeb,GAAf","names":["error","message","params","len","def","keyword","type","schemaType","before","code","cxt","schema","parentSchema","it","prefixItems","items","ok","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\mini-css-extract-plugin\\node_modules\\ajv\\lib\\vocabularies\\applicator\\items2020.ts"],"sourcesContent":["import type {\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  ErrorObject,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\nimport {validateArray} from \"../code\"\nimport {validateAdditionalItems} from \"./additionalItems\"\n\nexport type ItemsError = ErrorObject<\"items\", {limit: number}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {len}}) => str`must NOT have more than ${len} items`,\n  params: ({params: {len}}) => _`{limit: ${len}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"boolean\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt: KeywordCxt) {\n    const {schema, parentSchema, it} = cxt\n    const {prefixItems} = parentSchema\n    it.items = true\n    if (alwaysValidSchema(it, schema)) return\n    if (prefixItems) validateAdditionalItems(cxt, prefixItems)\n    else cxt.ok(validateArray(cxt))\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}