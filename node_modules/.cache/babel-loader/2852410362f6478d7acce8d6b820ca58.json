{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transform = void 0;\nexports.transformAsync = transformAsync;\nexports.transformSync = transformSync;\n\nfunction _gensync() {\n  const data = require(\"gensync\");\n\n  _gensync = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _config = require(\"./config\");\n\nvar _transformation = require(\"./transformation\");\n\nvar _rewriteStackTrace = require(\"./errors/rewrite-stack-trace\");\n\nconst transformRunner = _gensync()(function* transform(code, opts) {\n  const config = yield* (0, _config.default)(opts);\n  if (config === null) return null;\n  return yield* (0, _transformation.run)(config, code);\n});\n\nconst transform = function transform(code, optsOrCallback, maybeCallback) {\n  let opts;\n  let callback;\n\n  if (typeof optsOrCallback === \"function\") {\n    callback = optsOrCallback;\n    opts = undefined;\n  } else {\n    opts = optsOrCallback;\n    callback = maybeCallback;\n  }\n\n  if (callback === undefined) {\n    {\n      return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(code, opts);\n    }\n  }\n\n  (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.errback)(code, opts, callback);\n};\n\nexports.transform = transform;\n\nfunction transformSync() {\n  return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(...arguments);\n}\n\nfunction transformAsync() {\n  return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.async)(...arguments);\n}\n\n0 && 0;","map":{"version":3,"mappings":";;;;;;;;;AAAA;EAAA;;EAAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;;AAEA;;AAGA;;AAcA,MAAMC,eAAe,GAAGC,WAAQ,UAAUC,SAAV,CAC9BC,IAD8B,EAE9BC,IAF8B,EAGF;EAC5B,MAAMC,MAA6B,GAAG,OAAO,qBAAWD,IAAX,CAA7C;EACA,IAAIC,MAAM,KAAK,IAAf,EAAqB,OAAO,IAAP;EAErB,OAAO,OAAO,yBAAIA,MAAJ,EAAYF,IAAZ,CAAd;AAPsB,EAAxB;;AAUO,MAAMD,SAAoB,GAAG,SAASA,SAAT,CAClCC,IADkC,EAElCG,cAFkC,EAGlCC,aAHkC,EAIlC;EACA,IAAIH,IAAJ;EACA,IAAII,QAAJ;;EACA,IAAI,OAAOF,cAAP,KAA0B,UAA9B,EAA0C;IACxCE,QAAQ,GAAGF,cAAXE;IACAJ,IAAI,GAAGK,SAAPL;EAFF,OAGO;IACLA,IAAI,GAAGE,cAAPF;IACAI,QAAQ,GAAGD,aAAXC;EACD;;EAED,IAAIA,QAAQ,KAAKC,SAAjB,EAA4B;IAKnB;MAIL,OAAO,6CAAqBT,eAAe,CAACU,IAArC,EAA2CP,IAA3C,EAAiDC,IAAjD,CAAP;IACD;EACF;;EAED,6CAAqBJ,eAAe,CAACW,OAArC,EAA8CR,IAA9C,EAAoDC,IAApD,EAA0DI,QAA1D;AA5BK;;;;AA+BA,SAASI,aAAT,GAEL;EACA,OAAO,6CAAqBZ,eAAe,CAACU,IAArC,EAA2C,YAA3C,CAAP;AACD;;AACM,SAASG,cAAT,GAEL;EACA,OAAO,6CAAqBb,eAAe,CAACc,KAArC,EAA4C,YAA5C,CAAP;AACD","names":["_gensync","transformRunner","gensync","transform","code","opts","config","optsOrCallback","maybeCallback","callback","undefined","sync","errback","transformSync","transformAsync","async"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\transform.ts"],"sourcesContent":["import gensync, { type Handler } from \"gensync\";\n\nimport loadConfig from \"./config\";\nimport type { InputOptions, ResolvedConfig } from \"./config\";\nimport { run } from \"./transformation\";\n\nimport type { FileResult, FileResultCallback } from \"./transformation\";\nimport { beginHiddenCallStack } from \"./errors/rewrite-stack-trace\";\n\nexport type { FileResult } from \"./transformation\";\n\ntype Transform = {\n  (code: string, callback: FileResultCallback): void;\n  (\n    code: string,\n    opts: InputOptions | undefined | null,\n    callback: FileResultCallback,\n  ): void;\n  (code: string, opts?: InputOptions | null): FileResult | null;\n};\n\nconst transformRunner = gensync(function* transform(\n  code: string,\n  opts?: InputOptions,\n): Handler<FileResult | null> {\n  const config: ResolvedConfig | null = yield* loadConfig(opts);\n  if (config === null) return null;\n\n  return yield* run(config, code);\n});\n\nexport const transform: Transform = function transform(\n  code,\n  optsOrCallback?: InputOptions | null | undefined | FileResultCallback,\n  maybeCallback?: FileResultCallback,\n) {\n  let opts: InputOptions | undefined | null;\n  let callback: FileResultCallback | undefined;\n  if (typeof optsOrCallback === \"function\") {\n    callback = optsOrCallback;\n    opts = undefined;\n  } else {\n    opts = optsOrCallback;\n    callback = maybeCallback;\n  }\n\n  if (callback === undefined) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"Starting from Babel 8.0.0, the 'transform' function expects a callback. If you need to call it synchronously, please use 'transformSync'.\",\n      );\n    } else {\n      // console.warn(\n      //   \"Starting from Babel 8.0.0, the 'transform' function will expect a callback. If you need to call it synchronously, please use 'transformSync'.\",\n      // );\n      return beginHiddenCallStack(transformRunner.sync)(code, opts);\n    }\n  }\n\n  beginHiddenCallStack(transformRunner.errback)(code, opts, callback);\n};\n\nexport function transformSync(\n  ...args: Parameters<typeof transformRunner.sync>\n) {\n  return beginHiddenCallStack(transformRunner.sync)(...args);\n}\nexport function transformAsync(\n  ...args: Parameters<typeof transformRunner.async>\n) {\n  return beginHiddenCallStack(transformRunner.async)(...args);\n}\n"]},"metadata":{},"sourceType":"script"}