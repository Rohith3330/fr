{"ast":null,"code":"'use strict';\n\nvar transport = require('../spdy-transport');\n\nvar utils = transport.utils;\n\nvar assert = require('assert');\n\nvar debug = require('debug')('spdy:priority');\n\nfunction PriorityNode(tree, options) {\n  this.tree = tree;\n  this.id = options.id;\n  this.parent = options.parent;\n  this.weight = options.weight; // To be calculated in `addChild`\n\n  this.priorityFrom = 0;\n  this.priorityTo = 1;\n  this.priority = 1;\n  this.children = {\n    list: [],\n    weight: 0\n  };\n\n  if (this.parent !== null) {\n    this.parent.addChild(this);\n  }\n}\n\nfunction compareChildren(a, b) {\n  return a.weight === b.weight ? a.id - b.id : a.weight - b.weight;\n}\n\nPriorityNode.prototype.toJSON = function toJSON() {\n  return {\n    parent: this.parent,\n    weight: this.weight,\n    exclusive: this.exclusive\n  };\n};\n\nPriorityNode.prototype.getPriority = function getPriority() {\n  return this.priority;\n};\n\nPriorityNode.prototype.getPriorityRange = function getPriorityRange() {\n  return {\n    from: this.priorityFrom,\n    to: this.priorityTo\n  };\n};\n\nPriorityNode.prototype.addChild = function addChild(child) {\n  child.parent = this;\n  utils.binaryInsert(this.children.list, child, compareChildren);\n  this.children.weight += child.weight;\n\n  this._updatePriority(this.priorityFrom, this.priorityTo);\n};\n\nPriorityNode.prototype.remove = function remove() {\n  assert(this.parent, 'Can\\'t remove root node');\n  this.parent.removeChild(this);\n\n  this.tree._removeNode(this); // Move all children to the parent\n\n\n  for (var i = 0; i < this.children.list.length; i++) {\n    this.parent.addChild(this.children.list[i]);\n  }\n};\n\nPriorityNode.prototype.removeChild = function removeChild(child) {\n  this.children.weight -= child.weight;\n  var index = utils.binarySearch(this.children.list, child, compareChildren);\n\n  if (index !== -1 && this.children.list.length >= index) {\n    this.children.list.splice(index, 1);\n  }\n};\n\nPriorityNode.prototype.removeChildren = function removeChildren() {\n  var children = this.children.list;\n  this.children.list = [];\n  this.children.weight = 0;\n  return children;\n};\n\nPriorityNode.prototype._updatePriority = function _updatePriority(from, to) {\n  this.priority = to - from;\n  this.priorityFrom = from;\n  this.priorityTo = to;\n  var weight = 0;\n\n  for (var i = 0; i < this.children.list.length; i++) {\n    var node = this.children.list[i];\n    var nextWeight = weight + node.weight;\n\n    node._updatePriority(from + this.priority * (weight / this.children.weight), from + this.priority * (nextWeight / this.children.weight));\n\n    weight = nextWeight;\n  }\n};\n\nfunction PriorityTree(options) {\n  this.map = {};\n  this.list = [];\n  this.defaultWeight = options.defaultWeight || 16;\n  this.count = 0;\n  this.maxCount = options.maxCount; // Root\n\n  this.root = this.add({\n    id: 0,\n    parent: null,\n    weight: 1\n  });\n}\n\nmodule.exports = PriorityTree;\n\nPriorityTree.create = function create(options) {\n  return new PriorityTree(options);\n};\n\nPriorityTree.prototype.add = function add(options) {\n  if (options.id === options.parent) {\n    return this.addDefault(options.id);\n  }\n\n  var parent = options.parent === null ? null : this.map[options.parent];\n\n  if (parent === undefined) {\n    return this.addDefault(options.id);\n  }\n\n  debug('add node=%d parent=%d weight=%d exclusive=%d', options.id, options.parent === null ? -1 : options.parent, options.weight || this.defaultWeight, options.exclusive ? 1 : 0);\n  var children;\n\n  if (options.exclusive) {\n    children = parent.removeChildren();\n  }\n\n  var node = new PriorityNode(this, {\n    id: options.id,\n    parent: parent,\n    weight: options.weight || this.defaultWeight\n  });\n  this.map[options.id] = node;\n\n  if (options.exclusive) {\n    for (var i = 0; i < children.length; i++) {\n      node.addChild(children[i]);\n    }\n  }\n\n  this.count++;\n\n  if (this.count > this.maxCount) {\n    debug('hit maximum remove id=%d', this.list[0].id);\n    this.list.shift().remove();\n  } // Root node is not subject to removal\n\n\n  if (node.parent !== null) {\n    this.list.push(node);\n  }\n\n  return node;\n}; // Only for testing, should use `node`'s methods\n\n\nPriorityTree.prototype.get = function get(id) {\n  return this.map[id];\n};\n\nPriorityTree.prototype.addDefault = function addDefault(id) {\n  debug('creating default node');\n  return this.add({\n    id: id,\n    parent: 0,\n    weight: this.defaultWeight\n  });\n};\n\nPriorityTree.prototype._removeNode = function _removeNode(node) {\n  delete this.map[node.id];\n  var index = utils.binarySearch(this.list, node, compareChildren);\n  this.list.splice(index, 1);\n  this.count--;\n};","map":{"version":3,"names":["transport","require","utils","assert","debug","PriorityNode","tree","options","id","parent","weight","priorityFrom","priorityTo","priority","children","list","addChild","compareChildren","a","b","prototype","toJSON","exclusive","getPriority","getPriorityRange","from","to","child","binaryInsert","_updatePriority","remove","removeChild","_removeNode","i","length","index","binarySearch","splice","removeChildren","node","nextWeight","PriorityTree","map","defaultWeight","count","maxCount","root","add","module","exports","create","addDefault","undefined","shift","push","get"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/spdy-transport/lib/spdy-transport/priority.js"],"sourcesContent":["'use strict'\n\nvar transport = require('../spdy-transport')\nvar utils = transport.utils\n\nvar assert = require('assert')\nvar debug = require('debug')('spdy:priority')\n\nfunction PriorityNode (tree, options) {\n  this.tree = tree\n\n  this.id = options.id\n  this.parent = options.parent\n  this.weight = options.weight\n\n  // To be calculated in `addChild`\n  this.priorityFrom = 0\n  this.priorityTo = 1\n  this.priority = 1\n\n  this.children = {\n    list: [],\n    weight: 0\n  }\n\n  if (this.parent !== null) {\n    this.parent.addChild(this)\n  }\n}\n\nfunction compareChildren (a, b) {\n  return a.weight === b.weight ? a.id - b.id : a.weight - b.weight\n}\n\nPriorityNode.prototype.toJSON = function toJSON () {\n  return {\n    parent: this.parent,\n    weight: this.weight,\n    exclusive: this.exclusive\n  }\n}\n\nPriorityNode.prototype.getPriority = function getPriority () {\n  return this.priority\n}\n\nPriorityNode.prototype.getPriorityRange = function getPriorityRange () {\n  return { from: this.priorityFrom, to: this.priorityTo }\n}\n\nPriorityNode.prototype.addChild = function addChild (child) {\n  child.parent = this\n  utils.binaryInsert(this.children.list, child, compareChildren)\n  this.children.weight += child.weight\n\n  this._updatePriority(this.priorityFrom, this.priorityTo)\n}\n\nPriorityNode.prototype.remove = function remove () {\n  assert(this.parent, 'Can\\'t remove root node')\n\n  this.parent.removeChild(this)\n  this.tree._removeNode(this)\n\n  // Move all children to the parent\n  for (var i = 0; i < this.children.list.length; i++) {\n    this.parent.addChild(this.children.list[i])\n  }\n}\n\nPriorityNode.prototype.removeChild = function removeChild (child) {\n  this.children.weight -= child.weight\n  var index = utils.binarySearch(this.children.list, child, compareChildren)\n  if (index !== -1 && this.children.list.length >= index) {\n    this.children.list.splice(index, 1)\n  }\n}\n\nPriorityNode.prototype.removeChildren = function removeChildren () {\n  var children = this.children.list\n  this.children.list = []\n  this.children.weight = 0\n  return children\n}\n\nPriorityNode.prototype._updatePriority = function _updatePriority (from, to) {\n  this.priority = to - from\n  this.priorityFrom = from\n  this.priorityTo = to\n\n  var weight = 0\n  for (var i = 0; i < this.children.list.length; i++) {\n    var node = this.children.list[i]\n    var nextWeight = weight + node.weight\n\n    node._updatePriority(\n      from + this.priority * (weight / this.children.weight),\n      from + this.priority * (nextWeight / this.children.weight)\n    )\n    weight = nextWeight\n  }\n}\n\nfunction PriorityTree (options) {\n  this.map = {}\n  this.list = []\n  this.defaultWeight = options.defaultWeight || 16\n\n  this.count = 0\n  this.maxCount = options.maxCount\n\n  // Root\n  this.root = this.add({\n    id: 0,\n    parent: null,\n    weight: 1\n  })\n}\nmodule.exports = PriorityTree\n\nPriorityTree.create = function create (options) {\n  return new PriorityTree(options)\n}\n\nPriorityTree.prototype.add = function add (options) {\n  if (options.id === options.parent) {\n    return this.addDefault(options.id)\n  }\n\n  var parent = options.parent === null ? null : this.map[options.parent]\n  if (parent === undefined) {\n    return this.addDefault(options.id)\n  }\n\n  debug('add node=%d parent=%d weight=%d exclusive=%d',\n    options.id,\n    options.parent === null ? -1 : options.parent,\n    options.weight || this.defaultWeight,\n    options.exclusive ? 1 : 0)\n\n  var children\n  if (options.exclusive) {\n    children = parent.removeChildren()\n  }\n\n  var node = new PriorityNode(this, {\n    id: options.id,\n    parent: parent,\n    weight: options.weight || this.defaultWeight\n  })\n  this.map[options.id] = node\n\n  if (options.exclusive) {\n    for (var i = 0; i < children.length; i++) {\n      node.addChild(children[i])\n    }\n  }\n\n  this.count++\n  if (this.count > this.maxCount) {\n    debug('hit maximum remove id=%d', this.list[0].id)\n    this.list.shift().remove()\n  }\n\n  // Root node is not subject to removal\n  if (node.parent !== null) {\n    this.list.push(node)\n  }\n\n  return node\n}\n\n// Only for testing, should use `node`'s methods\nPriorityTree.prototype.get = function get (id) {\n  return this.map[id]\n}\n\nPriorityTree.prototype.addDefault = function addDefault (id) {\n  debug('creating default node')\n  return this.add({ id: id, parent: 0, weight: this.defaultWeight })\n}\n\nPriorityTree.prototype._removeNode = function _removeNode (node) {\n  delete this.map[node.id]\n  var index = utils.binarySearch(this.list, node, compareChildren)\n  this.list.splice(index, 1)\n  this.count--\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}