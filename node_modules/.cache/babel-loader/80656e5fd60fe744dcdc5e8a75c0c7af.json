{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\n\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('keyword-spacing');\nexports.default = util.createRule({\n  name: 'keyword-spacing',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Enforce consistent spacing before and after keywords',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: 'whitespace',\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: baseRule.meta.schema,\n    messages: baseRule.meta.messages\n  },\n  defaultOptions: [{}],\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const baseRules = baseRule.create(context);\n    return Object.assign(Object.assign({}, baseRules), {\n      TSAsExpression(node) {\n        const asToken = util.nullThrows(sourceCode.getTokenAfter(node.expression, token => token.value === 'as'), util.NullThrowsReasons.MissingToken('as', node.type));\n        const oldTokenType = asToken.type; // as is a contextual keyword, so it's always reported as an Identifier\n        // the rule looks for keyword tokens, so we temporarily override it\n        // we mutate it at the token level because the rule calls sourceCode.getFirstToken,\n        // so mutating a copy would not change the underlying copy returned by that method\n\n        asToken.type = utils_1.AST_TOKEN_TYPES.Keyword; // use this selector just because it is just a call to `checkSpacingAroundFirstToken`\n\n        baseRules.DebuggerStatement(asToken); // make sure to reset the type afterward so we don't permanently mutate the AST\n\n        asToken.type = oldTokenType;\n      }\n\n    });\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA,MAAMA,QAAQ,GAAG,2CAAkB,iBAAlB,CAAjB;AAKAC,kBAAeC,IAAI,CAACC,UAAL,CAAqC;EAClDC,IAAI,EAAE,iBAD4C;EAElDC,IAAI,EAAE;IACJC,IAAI,EAAE,QADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EAAE,sDADT;MAEJC,WAAW,EAAE,KAFT;MAGJC,eAAe,EAAE;IAHb,CAFF;IAOJC,OAAO,EAAE,YAPL;IAQJC,cAAc,EAAEZ,QAAQ,CAACK,IAAT,CAAcO,cAR1B;IASJC,MAAM,EAAEb,QAAQ,CAACK,IAAT,CAAcQ,MATlB;IAUJC,QAAQ,EAAEd,QAAQ,CAACK,IAAT,CAAcS;EAVpB,CAF4C;EAclDC,cAAc,EAAE,CAAC,EAAD,CAdkC;;EAgBlDC,MAAM,CAACC,OAAD,EAAQ;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IACA,MAAMC,SAAS,GAAGpB,QAAQ,CAACgB,MAAT,CAAgBC,OAAhB,CAAlB;IACA,uCACKG,SADL,GACc;MACZC,cAAc,CAACC,IAAD,EAAK;QACjB,MAAMC,OAAO,GAAGrB,IAAI,CAACsB,UAAL,CACdN,UAAU,CAACO,aAAX,CACEH,IAAI,CAACI,UADP,EAEEC,KAAK,IAAIA,KAAK,CAACC,KAAN,KAAgB,IAF3B,CADc,EAKd1B,IAAI,CAAC2B,iBAAL,CAAuBC,YAAvB,CAAoC,IAApC,EAA0CR,IAAI,CAAChB,IAA/C,CALc,CAAhB;QAOA,MAAMyB,YAAY,GAAGR,OAAO,CAACjB,IAA7B,CARiB,CASjB;QACA;QACA;QACA;;QACAiB,OAAO,CAACjB,IAAR,GAAe0B,wBAAgBC,OAA/B,CAbiB,CAejB;;QACAb,SAAS,CAACc,iBAAV,CAA4BX,OAA5B,EAhBiB,CAkBjB;;QACAA,OAAO,CAACjB,IAAR,GAAeyB,YAAf;MACD;;IArBW,CADd;EAwBD;;AA3CiD,CAArC,CAAf","names":["baseRule","exports","util","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","hasSuggestions","schema","messages","defaultOptions","create","context","sourceCode","getSourceCode","baseRules","TSAsExpression","node","asToken","nullThrows","getTokenAfter","expression","token","value","NullThrowsReasons","MissingToken","oldTokenType","utils_1","Keyword","DebuggerStatement"],"sources":["../../src/rules/keyword-spacing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}