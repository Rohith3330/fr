{"ast":null,"code":"let parser = require('postcss-selector-parser');\n\nfunction parse(str, rule) {\n  let nodes;\n  let saver = parser(parsed => {\n    nodes = parsed;\n  });\n\n  try {\n    saver.processSync(str);\n  } catch (e) {\n    if (str.includes(':')) {\n      throw rule ? rule.error('Missed semicolon') : e;\n    } else {\n      throw rule ? rule.error(e.message) : e;\n    }\n  }\n\n  return nodes.at(0);\n}\n\nfunction replace(nodes, parent) {\n  let replaced = false;\n  nodes.each(i => {\n    if (i.type === 'nesting') {\n      let clonedParent = parent.clone();\n\n      if (i.value !== '&') {\n        i.replaceWith(parse(i.value.replace('&', clonedParent.toString())));\n      } else {\n        i.replaceWith(clonedParent);\n      }\n\n      replaced = true;\n    } else if (i.nodes) {\n      if (replace(i, parent)) {\n        replaced = true;\n      }\n    }\n  });\n  return replaced;\n}\n\nfunction selectors(parent, child) {\n  let result = [];\n  parent.selectors.forEach(i => {\n    let parentNode = parse(i, parent);\n    child.selectors.forEach(j => {\n      if (j.length) {\n        let node = parse(j, child);\n        let replaced = replace(node, parentNode);\n\n        if (!replaced) {\n          node.prepend(parser.combinator({\n            value: ' '\n          }));\n          node.prepend(parentNode.clone());\n        }\n\n        result.push(node.toString());\n      }\n    });\n  });\n  return result;\n}\n\nfunction pickComment(comment, after) {\n  if (comment && comment.type === 'comment') {\n    after.after(comment);\n    return comment;\n  } else {\n    return after;\n  }\n}\n\nfunction createFnAtruleChilds(bubble) {\n  return function atruleChilds(rule, atrule, bubbling) {\n    let children = [];\n    atrule.each(child => {\n      if (child.type === 'comment') {\n        children.push(child);\n      } else if (child.type === 'decl') {\n        children.push(child);\n      } else if (child.type === 'rule' && bubbling) {\n        child.selectors = selectors(rule, child);\n      } else if (child.type === 'atrule') {\n        if (child.nodes && bubble[child.name]) {\n          atruleChilds(rule, child, true);\n        } else {\n          children.push(child);\n        }\n      }\n    });\n\n    if (bubbling) {\n      if (children.length) {\n        let clone = rule.clone({\n          nodes: []\n        });\n\n        for (let child of children) {\n          clone.append(child);\n        }\n\n        atrule.prepend(clone);\n      }\n    }\n  };\n}\n\nfunction pickDeclarations(selector, declarations, after, Rule) {\n  let parent = new Rule({\n    selector,\n    nodes: []\n  });\n\n  for (let declaration of declarations) {\n    parent.append(declaration);\n  }\n\n  after.after(parent);\n  return parent;\n}\n\nfunction atruleNames(defaults, custom) {\n  let list = {};\n\n  for (let i of defaults) {\n    list[i] = true;\n  }\n\n  if (custom) {\n    for (let i of custom) {\n      let name = i.replace(/^@/, '');\n      list[name] = true;\n    }\n  }\n\n  return list;\n}\n\nmodule.exports = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let bubble = atruleNames(['media', 'supports'], opts.bubble);\n  let atruleChilds = createFnAtruleChilds(bubble);\n  let unwrap = atruleNames(['document', 'font-face', 'keyframes', '-webkit-keyframes', '-moz-keyframes'], opts.unwrap);\n  let preserveEmpty = opts.preserveEmpty;\n  return {\n    postcssPlugin: 'postcss-nested',\n\n    Rule(rule, _ref) {\n      let {\n        Rule\n      } = _ref;\n      let unwrapped = false;\n      let after = rule;\n      let copyDeclarations = false;\n      let declarations = [];\n      rule.each(child => {\n        if (child.type === 'rule') {\n          if (declarations.length) {\n            after = pickDeclarations(rule.selector, declarations, after, Rule);\n            declarations = [];\n          }\n\n          copyDeclarations = true;\n          unwrapped = true;\n          child.selectors = selectors(rule, child);\n          after = pickComment(child.prev(), after);\n          after.after(child);\n          after = child;\n        } else if (child.type === 'atrule') {\n          if (declarations.length) {\n            after = pickDeclarations(rule.selector, declarations, after, Rule);\n            declarations = [];\n          }\n\n          if (child.name === 'at-root') {\n            unwrapped = true;\n            atruleChilds(rule, child, false);\n            let nodes = child.nodes;\n\n            if (child.params) {\n              nodes = new Rule({\n                selector: child.params,\n                nodes\n              });\n            }\n\n            after.after(nodes);\n            after = nodes;\n            child.remove();\n          } else if (bubble[child.name]) {\n            copyDeclarations = true;\n            unwrapped = true;\n            atruleChilds(rule, child, true);\n            after = pickComment(child.prev(), after);\n            after.after(child);\n            after = child;\n          } else if (unwrap[child.name]) {\n            copyDeclarations = true;\n            unwrapped = true;\n            atruleChilds(rule, child, false);\n            after = pickComment(child.prev(), after);\n            after.after(child);\n            after = child;\n          } else if (copyDeclarations) {\n            declarations.push(child);\n          }\n        } else if (child.type === 'decl' && copyDeclarations) {\n          declarations.push(child);\n        }\n      });\n\n      if (declarations.length) {\n        after = pickDeclarations(rule.selector, declarations, after, Rule);\n      }\n\n      if (unwrapped && preserveEmpty !== true) {\n        rule.raws.semicolon = true;\n        if (rule.nodes.length === 0) rule.remove();\n      }\n    }\n\n  };\n};\n\nmodule.exports.postcss = true;","map":{"version":3,"names":["parser","require","parse","str","rule","nodes","saver","parsed","processSync","e","includes","error","message","at","replace","parent","replaced","each","i","type","clonedParent","clone","value","replaceWith","toString","selectors","child","result","forEach","parentNode","j","length","node","prepend","combinator","push","pickComment","comment","after","createFnAtruleChilds","bubble","atruleChilds","atrule","bubbling","children","name","append","pickDeclarations","selector","declarations","Rule","declaration","atruleNames","defaults","custom","list","module","exports","opts","unwrap","preserveEmpty","postcssPlugin","unwrapped","copyDeclarations","prev","params","remove","raws","semicolon","postcss"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-nested/index.js"],"sourcesContent":["let parser = require('postcss-selector-parser')\n\nfunction parse (str, rule) {\n  let nodes\n  let saver = parser(parsed => {\n    nodes = parsed\n  })\n  try {\n    saver.processSync(str)\n  } catch (e) {\n    if (str.includes(':')) {\n      throw rule ? rule.error('Missed semicolon') : e\n    } else {\n      throw rule ? rule.error(e.message) : e\n    }\n  }\n  return nodes.at(0)\n}\n\nfunction replace (nodes, parent) {\n  let replaced = false\n  nodes.each(i => {\n    if (i.type === 'nesting') {\n      let clonedParent = parent.clone()\n      if (i.value !== '&') {\n        i.replaceWith(parse(i.value.replace('&', clonedParent.toString())))\n      } else {\n        i.replaceWith(clonedParent)\n      }\n      replaced = true\n    } else if (i.nodes) {\n      if (replace(i, parent)) {\n        replaced = true\n      }\n    }\n  })\n  return replaced\n}\n\nfunction selectors (parent, child) {\n  let result = []\n  parent.selectors.forEach(i => {\n    let parentNode = parse(i, parent)\n\n    child.selectors.forEach(j => {\n      if (j.length) {\n        let node = parse(j, child)\n        let replaced = replace(node, parentNode)\n        if (!replaced) {\n          node.prepend(parser.combinator({ value: ' ' }))\n          node.prepend(parentNode.clone())\n        }\n        result.push(node.toString())\n      }\n    })\n  })\n  return result\n}\n\nfunction pickComment (comment, after) {\n  if (comment && comment.type === 'comment') {\n    after.after(comment)\n    return comment\n  } else {\n    return after\n  }\n}\n\nfunction createFnAtruleChilds (bubble) {\n  return function atruleChilds (rule, atrule, bubbling) {\n    let children = []\n    atrule.each(child => {\n      if (child.type === 'comment') {\n        children.push(child)\n      } else if (child.type === 'decl') {\n        children.push(child)\n      } else if (child.type === 'rule' && bubbling) {\n        child.selectors = selectors(rule, child)\n      } else if (child.type === 'atrule') {\n        if (child.nodes && bubble[child.name]) {\n          atruleChilds(rule, child, true)\n        } else {\n          children.push(child)\n        }\n      }\n    })\n    if (bubbling) {\n      if (children.length) {\n        let clone = rule.clone({ nodes: [] })\n        for (let child of children) {\n          clone.append(child)\n        }\n        atrule.prepend(clone)\n      }\n    }\n  }\n}\n\nfunction pickDeclarations (selector, declarations, after, Rule) {\n  let parent = new Rule({\n    selector,\n    nodes: []\n  })\n\n  for (let declaration of declarations) {\n    parent.append(declaration)\n  }\n\n  after.after(parent)\n  return parent\n}\n\nfunction atruleNames (defaults, custom) {\n  let list = {}\n  for (let i of defaults) {\n    list[i] = true\n  }\n  if (custom) {\n    for (let i of custom) {\n      let name = i.replace(/^@/, '')\n      list[name] = true\n    }\n  }\n  return list\n}\n\nmodule.exports = (opts = {}) => {\n  let bubble = atruleNames(['media', 'supports'], opts.bubble)\n  let atruleChilds = createFnAtruleChilds(bubble)\n  let unwrap = atruleNames(\n    [\n      'document',\n      'font-face',\n      'keyframes',\n      '-webkit-keyframes',\n      '-moz-keyframes'\n    ],\n    opts.unwrap\n  )\n  let preserveEmpty = opts.preserveEmpty\n\n  return {\n    postcssPlugin: 'postcss-nested',\n    Rule (rule, { Rule }) {\n      let unwrapped = false\n      let after = rule\n      let copyDeclarations = false\n      let declarations = []\n\n      rule.each(child => {\n        if (child.type === 'rule') {\n          if (declarations.length) {\n            after = pickDeclarations(rule.selector, declarations, after, Rule)\n            declarations = []\n          }\n\n          copyDeclarations = true\n          unwrapped = true\n          child.selectors = selectors(rule, child)\n          after = pickComment(child.prev(), after)\n          after.after(child)\n          after = child\n        } else if (child.type === 'atrule') {\n          if (declarations.length) {\n            after = pickDeclarations(rule.selector, declarations, after, Rule)\n            declarations = []\n          }\n\n          if (child.name === 'at-root') {\n            unwrapped = true\n            atruleChilds(rule, child, false)\n\n            let nodes = child.nodes\n            if (child.params) {\n              nodes = new Rule({ selector: child.params, nodes })\n            }\n\n            after.after(nodes)\n            after = nodes\n            child.remove()\n          } else if (bubble[child.name]) {\n            copyDeclarations = true\n            unwrapped = true\n            atruleChilds(rule, child, true)\n            after = pickComment(child.prev(), after)\n            after.after(child)\n            after = child\n          } else if (unwrap[child.name]) {\n            copyDeclarations = true\n            unwrapped = true\n            atruleChilds(rule, child, false)\n            after = pickComment(child.prev(), after)\n            after.after(child)\n            after = child\n          } else if (copyDeclarations) {\n            declarations.push(child)\n          }\n        } else if (child.type === 'decl' && copyDeclarations) {\n          declarations.push(child)\n        }\n      })\n\n      if (declarations.length) {\n        after = pickDeclarations(rule.selector, declarations, after, Rule)\n      }\n\n      if (unwrapped && preserveEmpty !== true) {\n        rule.raws.semicolon = true\n        if (rule.nodes.length === 0) rule.remove()\n      }\n    }\n  }\n}\nmodule.exports.postcss = true\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}