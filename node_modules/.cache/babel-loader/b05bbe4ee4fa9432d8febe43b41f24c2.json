{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsIntegralNumber = require('./IsIntegralNumber');\n\nvar Type = require('./Type');\n\nvar $slice = callBound('String.prototype.slice'); // https://ecma-international.org/ecma-262/12.0/#sec-stringindexof\n\nmodule.exports = function StringIndexOf(string, searchValue, fromIndex) {\n  if (Type(string) !== 'String') {\n    throw new $TypeError('Assertion failed: `string` must be a String');\n  }\n\n  if (Type(searchValue) !== 'String') {\n    throw new $TypeError('Assertion failed: `searchValue` must be a String');\n  }\n\n  if (!IsIntegralNumber(fromIndex) || fromIndex < 0) {\n    throw new $TypeError('Assertion failed: `fromIndex` must be a non-negative integer');\n  }\n\n  var len = string.length;\n\n  if (searchValue === '' && fromIndex <= len) {\n    return fromIndex;\n  }\n\n  var searchLen = searchValue.length;\n\n  for (var i = fromIndex; i <= len - searchLen; i += 1) {\n    var candidate = $slice(string, i, i + searchLen);\n\n    if (candidate === searchValue) {\n      return i;\n    }\n  }\n\n  return -1;\n};","map":{"version":3,"names":["GetIntrinsic","require","callBound","$TypeError","IsIntegralNumber","Type","$slice","module","exports","StringIndexOf","string","searchValue","fromIndex","len","length","searchLen","i","candidate"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2021/StringIndexOf.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsIntegralNumber = require('./IsIntegralNumber');\nvar Type = require('./Type');\n\nvar $slice = callBound('String.prototype.slice');\n\n// https://ecma-international.org/ecma-262/12.0/#sec-stringindexof\n\nmodule.exports = function StringIndexOf(string, searchValue, fromIndex) {\n\tif (Type(string) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `string` must be a String');\n\t}\n\tif (Type(searchValue) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `searchValue` must be a String');\n\t}\n\tif (!IsIntegralNumber(fromIndex) || fromIndex < 0) {\n\t\tthrow new $TypeError('Assertion failed: `fromIndex` must be a non-negative integer');\n\t}\n\n\tvar len = string.length;\n\tif (searchValue === '' && fromIndex <= len) {\n\t\treturn fromIndex;\n\t}\n\n\tvar searchLen = searchValue.length;\n\tfor (var i = fromIndex; i <= (len - searchLen); i += 1) {\n\t\tvar candidate = $slice(string, i, i + searchLen);\n\t\tif (candidate === searchValue) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIE,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAII,gBAAgB,GAAGH,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIK,MAAM,GAAGJ,SAAS,CAAC,wBAAD,CAAtB,C,CAEA;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,WAA/B,EAA4CC,SAA5C,EAAuD;EACvE,IAAIP,IAAI,CAACK,MAAD,CAAJ,KAAiB,QAArB,EAA+B;IAC9B,MAAM,IAAIP,UAAJ,CAAe,6CAAf,CAAN;EACA;;EACD,IAAIE,IAAI,CAACM,WAAD,CAAJ,KAAsB,QAA1B,EAAoC;IACnC,MAAM,IAAIR,UAAJ,CAAe,kDAAf,CAAN;EACA;;EACD,IAAI,CAACC,gBAAgB,CAACQ,SAAD,CAAjB,IAAgCA,SAAS,GAAG,CAAhD,EAAmD;IAClD,MAAM,IAAIT,UAAJ,CAAe,8DAAf,CAAN;EACA;;EAED,IAAIU,GAAG,GAAGH,MAAM,CAACI,MAAjB;;EACA,IAAIH,WAAW,KAAK,EAAhB,IAAsBC,SAAS,IAAIC,GAAvC,EAA4C;IAC3C,OAAOD,SAAP;EACA;;EAED,IAAIG,SAAS,GAAGJ,WAAW,CAACG,MAA5B;;EACA,KAAK,IAAIE,CAAC,GAAGJ,SAAb,EAAwBI,CAAC,IAAKH,GAAG,GAAGE,SAApC,EAAgDC,CAAC,IAAI,CAArD,EAAwD;IACvD,IAAIC,SAAS,GAAGX,MAAM,CAACI,MAAD,EAASM,CAAT,EAAYA,CAAC,GAAGD,SAAhB,CAAtB;;IACA,IAAIE,SAAS,KAAKN,WAAlB,EAA+B;MAC9B,OAAOK,CAAP;IACA;EACD;;EACD,OAAO,CAAC,CAAR;AACA,CAxBD"},"metadata":{},"sourceType":"script"}