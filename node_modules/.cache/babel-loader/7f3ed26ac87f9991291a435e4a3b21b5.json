{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n/**\n * @fileoverview Enforce tabIndex value is not greater than zero.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\n\nvar errorMessage = 'Avoid positive integer values for tabIndex.';\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/tabindex-no-positive.md',\n      description: 'Enforce `tabIndex` value is not greater than zero.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        var name = (0, _jsxAstUtils.propName)(attribute).toUpperCase(); // Check if tabIndex is the attribute\n\n        if (name !== 'TABINDEX') {\n          return;\n        } // Only check literals because we can't infer values from certain expressions.\n\n\n        var value = Number((0, _jsxAstUtils.getLiteralPropValue)(attribute)); // eslint-disable-next-line no-restricted-globals\n\n        if (isNaN(value) || value <= 0) {\n          return;\n        }\n\n        context.report({\n          node: attribute,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","_jsxAstUtils","require","_schemas","errorMessage","schema","generateObjSchema","_default","meta","docs","url","description","create","context","JSXAttribute","attribute","name","propName","toUpperCase","Number","getLiteralPropValue","isNaN","report","node","message","module","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/lib/rules/tabindex-no-positive.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\n/**\n * @fileoverview Enforce tabIndex value is not greater than zero.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\nvar errorMessage = 'Avoid positive integer values for tabIndex.';\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/tabindex-no-positive.md',\n      description: 'Enforce `tabIndex` value is not greater than zero.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        var name = (0, _jsxAstUtils.propName)(attribute).toUpperCase(); // Check if tabIndex is the attribute\n\n        if (name !== 'TABINDEX') {\n          return;\n        } // Only check literals because we can't infer values from certain expressions.\n\n\n        var value = Number((0, _jsxAstUtils.getLiteralPropValue)(attribute)); // eslint-disable-next-line no-restricted-globals\n\n        if (isNaN(value) || value <= 0) {\n          return;\n        }\n\n        context.report({\n          node: attribute,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,iBAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,YAAY,GAAG,6CAAnB;AACA,IAAIC,MAAM,GAAG,CAAC,GAAGF,QAAQ,CAACG,iBAAb,GAAb;AACA,IAAIC,QAAQ,GAAG;EACbC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,GAAG,EAAE,mGADD;MAEJC,WAAW,EAAE;IAFT,CADF;IAKJN,MAAM,EAAE,CAACA,MAAD;EALJ,CADO;EAQbO,MAAM,EAAE,SAASA,MAAT,CAAgBC,OAAhB,EAAyB;IAC/B,OAAO;MACLC,YAAY,EAAE,SAASA,YAAT,CAAsBC,SAAtB,EAAiC;QAC7C,IAAIC,IAAI,GAAG,CAAC,GAAGf,YAAY,CAACgB,QAAjB,EAA2BF,SAA3B,EAAsCG,WAAtC,EAAX,CAD6C,CACmB;;QAEhE,IAAIF,IAAI,KAAK,UAAb,EAAyB;UACvB;QACD,CAL4C,CAK3C;;;QAGF,IAAIhB,KAAK,GAAGmB,MAAM,CAAC,CAAC,GAAGlB,YAAY,CAACmB,mBAAjB,EAAsCL,SAAtC,CAAD,CAAlB,CAR6C,CAQyB;;QAEtE,IAAIM,KAAK,CAACrB,KAAD,CAAL,IAAgBA,KAAK,IAAI,CAA7B,EAAgC;UAC9B;QACD;;QAEDa,OAAO,CAACS,MAAR,CAAe;UACbC,IAAI,EAAER,SADO;UAEbS,OAAO,EAAEpB;QAFI,CAAf;MAID;IAnBI,CAAP;EAqBD;AA9BY,CAAf;AAgCAL,OAAO,CAAC,SAAD,CAAP,GAAqBQ,QAArB;AACAkB,MAAM,CAAC1B,OAAP,GAAiBA,OAAO,CAAC2B,OAAzB"},"metadata":{},"sourceType":"script"}