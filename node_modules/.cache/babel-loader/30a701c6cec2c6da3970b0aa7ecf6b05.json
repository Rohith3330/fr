{"ast":null,"code":"/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport assert from \"assert\";\nimport * as leap from \"./leap\";\nimport * as meta from \"./meta\";\nimport * as util from \"./util\";\nlet hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Emitter(contextId) {\n  assert.ok(this instanceof Emitter);\n  util.getTypes().assertIdentifier(contextId); // Used to generate unique temporary names.\n\n  this.nextTempId = 0; // In order to make sure the context object does not collide with\n  // anything in the local scope, we might have to rename it, so we\n  // refer to it symbolically instead of just assuming that it will be\n  // called \"context\".\n\n  this.contextId = contextId; // An append-only list of Statements that grows each time this.emit is\n  // called.\n\n  this.listing = []; // A sparse array whose keys correspond to locations in this.listing\n  // that have been marked as branch/jump targets.\n\n  this.marked = [true];\n  this.insertedLocs = new Set(); // The last location will be marked when this.getDispatchLoop is\n  // called.\n\n  this.finalLoc = this.loc(); // A list of all leap.TryEntry statements emitted.\n\n  this.tryEntries = []; // Each time we evaluate the body of a loop, we tell this.leapManager\n  // to enter a nested loop context that determines the meaning of break\n  // and continue statements therein.\n\n  this.leapManager = new leap.LeapManager(this);\n}\n\nlet Ep = Emitter.prototype;\nexports.Emitter = Emitter; // Offsets into this.listing that could be used as targets for branches or\n// jumps are represented as numeric Literal nodes. This representation has\n// the amazingly convenient benefit of allowing the exact value of the\n// location to be determined at any time, even after generating code that\n// refers to the location.\n\nEp.loc = function () {\n  const l = util.getTypes().numericLiteral(-1);\n  this.insertedLocs.add(l);\n  return l;\n};\n\nEp.getInsertedLocs = function () {\n  return this.insertedLocs;\n};\n\nEp.getContextId = function () {\n  return util.getTypes().clone(this.contextId);\n}; // Sets the exact value of the given location to the offset of the next\n// Statement emitted.\n\n\nEp.mark = function (loc) {\n  util.getTypes().assertLiteral(loc);\n  let index = this.listing.length;\n\n  if (loc.value === -1) {\n    loc.value = index;\n  } else {\n    // Locations can be marked redundantly, but their values cannot change\n    // once set the first time.\n    assert.strictEqual(loc.value, index);\n  }\n\n  this.marked[index] = true;\n  return loc;\n};\n\nEp.emit = function (node) {\n  const t = util.getTypes();\n\n  if (t.isExpression(node)) {\n    node = t.expressionStatement(node);\n  }\n\n  t.assertStatement(node);\n  this.listing.push(node);\n}; // Shorthand for emitting assignment statements. This will come in handy\n// for assignments to temporary variables.\n\n\nEp.emitAssign = function (lhs, rhs) {\n  this.emit(this.assign(lhs, rhs));\n  return lhs;\n}; // Shorthand for an assignment statement.\n\n\nEp.assign = function (lhs, rhs) {\n  const t = util.getTypes();\n  return t.expressionStatement(t.assignmentExpression(\"=\", t.cloneDeep(lhs), rhs));\n}; // Convenience function for generating expressions like context.next,\n// context.sent, and context.rval.\n\n\nEp.contextProperty = function (name, computed) {\n  const t = util.getTypes();\n  return t.memberExpression(this.getContextId(), computed ? t.stringLiteral(name) : t.identifier(name), !!computed);\n}; // Shorthand for setting context.rval and jumping to `context.stop()`.\n\n\nEp.stop = function (rval) {\n  if (rval) {\n    this.setReturnValue(rval);\n  }\n\n  this.jump(this.finalLoc);\n};\n\nEp.setReturnValue = function (valuePath) {\n  util.getTypes().assertExpression(valuePath.value);\n  this.emitAssign(this.contextProperty(\"rval\"), this.explodeExpression(valuePath));\n};\n\nEp.clearPendingException = function (tryLoc, assignee) {\n  const t = util.getTypes();\n  t.assertLiteral(tryLoc);\n  let catchCall = t.callExpression(this.contextProperty(\"catch\", true), [t.clone(tryLoc)]);\n\n  if (assignee) {\n    this.emitAssign(assignee, catchCall);\n  } else {\n    this.emit(catchCall);\n  }\n}; // Emits code for an unconditional jump to the given location, even if the\n// exact value of the location is not yet known.\n\n\nEp.jump = function (toLoc) {\n  this.emitAssign(this.contextProperty(\"next\"), toLoc);\n  this.emit(util.getTypes().breakStatement());\n}; // Conditional jump.\n\n\nEp.jumpIf = function (test, toLoc) {\n  const t = util.getTypes();\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n  this.emit(t.ifStatement(test, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n}; // Conditional jump, with the condition negated.\n\n\nEp.jumpIfNot = function (test, toLoc) {\n  const t = util.getTypes();\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n  let negatedTest;\n\n  if (t.isUnaryExpression(test) && test.operator === \"!\") {\n    // Avoid double negation.\n    negatedTest = test.argument;\n  } else {\n    negatedTest = t.unaryExpression(\"!\", test);\n  }\n\n  this.emit(t.ifStatement(negatedTest, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n}; // Returns a unique MemberExpression that can be used to store and\n// retrieve temporary values. Since the object of the member expression is\n// the context object, which is presumed to coexist peacefully with all\n// other local variables, and since we just increment `nextTempId`\n// monotonically, uniqueness is assured.\n\n\nEp.makeTempVar = function () {\n  return this.contextProperty(\"t\" + this.nextTempId++);\n};\n\nEp.getContextFunction = function (id) {\n  const t = util.getTypes();\n  return t.functionExpression(id || null\n  /*Anonymous*/\n  , [this.getContextId()], t.blockStatement([this.getDispatchLoop()]), false, // Not a generator anymore!\n  false // Nor an expression.\n  );\n}; // Turns this.listing into a loop of the form\n//\n//   while (1) switch (context.next) {\n//   case 0:\n//   ...\n//   case n:\n//     return context.stop();\n//   }\n//\n// Each marked location in this.listing will correspond to one generated\n// case statement.\n\n\nEp.getDispatchLoop = function () {\n  const self = this;\n  const t = util.getTypes();\n  let cases = [];\n  let current; // If we encounter a break, continue, or return statement in a switch\n  // case, we can skip the rest of the statements until the next case.\n\n  let alreadyEnded = false;\n  self.listing.forEach(function (stmt, i) {\n    if (self.marked.hasOwnProperty(i)) {\n      cases.push(t.switchCase(t.numericLiteral(i), current = []));\n      alreadyEnded = false;\n    }\n\n    if (!alreadyEnded) {\n      current.push(stmt);\n      if (t.isCompletionStatement(stmt)) alreadyEnded = true;\n    }\n  }); // Now that we know how many statements there will be in this.listing,\n  // we can finally resolve this.finalLoc.value.\n\n  this.finalLoc.value = this.listing.length;\n  cases.push(t.switchCase(this.finalLoc, [// Intentionally fall through to the \"end\" case...\n  ]), // So that the runtime can jump to the final location without having\n  // to know its offset, we provide the \"end\" case as a synonym.\n  t.switchCase(t.stringLiteral(\"end\"), [// This will check/clear both context.thrown and context.rval.\n  t.returnStatement(t.callExpression(this.contextProperty(\"stop\"), []))]));\n  return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression(\"=\", this.contextProperty(\"prev\"), this.contextProperty(\"next\")), cases));\n};\n\nEp.getTryLocsList = function () {\n  if (this.tryEntries.length === 0) {\n    // To avoid adding a needless [] to the majority of runtime.wrap\n    // argument lists, force the caller to handle this case specially.\n    return null;\n  }\n\n  const t = util.getTypes();\n  let lastLocValue = 0;\n  return t.arrayExpression(this.tryEntries.map(function (tryEntry) {\n    let thisLocValue = tryEntry.firstLoc.value;\n    assert.ok(thisLocValue >= lastLocValue, \"try entries out of order\");\n    lastLocValue = thisLocValue;\n    let ce = tryEntry.catchEntry;\n    let fe = tryEntry.finallyEntry;\n    let locs = [tryEntry.firstLoc, // The null here makes a hole in the array.\n    ce ? ce.firstLoc : null];\n\n    if (fe) {\n      locs[2] = fe.firstLoc;\n      locs[3] = fe.afterLoc;\n    }\n\n    return t.arrayExpression(locs.map(loc => loc && t.clone(loc)));\n  }));\n}; // All side effects must be realized in order.\n// If any subexpression harbors a leap, all subexpressions must be\n// neutered of side effects.\n// No destructive modification of AST nodes.\n\n\nEp.explode = function (path, ignoreResult) {\n  const t = util.getTypes();\n  let node = path.node;\n  let self = this;\n  t.assertNode(node);\n  if (t.isDeclaration(node)) throw getDeclError(node);\n  if (t.isStatement(node)) return self.explodeStatement(path);\n  if (t.isExpression(node)) return self.explodeExpression(path, ignoreResult);\n\n  switch (node.type) {\n    case \"Program\":\n      return path.get(\"body\").map(self.explodeStatement, self);\n\n    case \"VariableDeclarator\":\n      throw getDeclError(node);\n    // These node types should be handled by their parent nodes\n    // (ObjectExpression, SwitchStatement, and TryStatement, respectively).\n\n    case \"Property\":\n    case \"SwitchCase\":\n    case \"CatchClause\":\n      throw new Error(node.type + \" nodes should be handled by their parents\");\n\n    default:\n      throw new Error(\"unknown Node of type \" + JSON.stringify(node.type));\n  }\n};\n\nfunction getDeclError(node) {\n  return new Error(\"all declarations should have been transformed into \" + \"assignments before the Exploder began its work: \" + JSON.stringify(node));\n}\n\nEp.explodeStatement = function (path, labelId) {\n  const t = util.getTypes();\n  let stmt = path.node;\n  let self = this;\n  let before, after, head;\n  t.assertStatement(stmt);\n\n  if (labelId) {\n    t.assertIdentifier(labelId);\n  } else {\n    labelId = null;\n  } // Explode BlockStatement nodes even if they do not contain a yield,\n  // because we don't want or need the curly braces.\n\n\n  if (t.isBlockStatement(stmt)) {\n    path.get(\"body\").forEach(function (path) {\n      self.explodeStatement(path);\n    });\n    return;\n  }\n\n  if (!meta.containsLeap(stmt)) {\n    // Technically we should be able to avoid emitting the statement\n    // altogether if !meta.hasSideEffects(stmt), but that leads to\n    // confusing generated code (for instance, `while (true) {}` just\n    // disappears) and is probably a more appropriate job for a dedicated\n    // dead code elimination pass.\n    self.emit(stmt);\n    return;\n  }\n\n  switch (stmt.type) {\n    case \"ExpressionStatement\":\n      self.explodeExpression(path.get(\"expression\"), true);\n      break;\n\n    case \"LabeledStatement\":\n      after = this.loc(); // Did you know you can break from any labeled block statement or\n      // control structure? Well, you can! Note: when a labeled loop is\n      // encountered, the leap.LabeledEntry created here will immediately\n      // enclose a leap.LoopEntry on the leap manager's stack, and both\n      // entries will have the same label. Though this works just fine, it\n      // may seem a bit redundant. In theory, we could check here to\n      // determine if stmt knows how to handle its own label; for example,\n      // stmt happens to be a WhileStatement and so we know it's going to\n      // establish its own LoopEntry when we explode it (below). Then this\n      // LabeledEntry would be unnecessary. Alternatively, we might be\n      // tempted not to pass stmt.label down into self.explodeStatement,\n      // because we've handled the label here, but that's a mistake because\n      // labeled loops may contain labeled continue statements, which is not\n      // something we can handle in this generic case. All in all, I think a\n      // little redundancy greatly simplifies the logic of this case, since\n      // it's clear that we handle all possible LabeledStatements correctly\n      // here, regardless of whether they interact with the leap manager\n      // themselves. Also remember that labels and break/continue-to-label\n      // statements are rare, and all of this logic happens at transform\n      // time, so it has no additional runtime cost.\n\n      self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function () {\n        self.explodeStatement(path.get(\"body\"), stmt.label);\n      });\n      self.mark(after);\n      break;\n\n    case \"WhileStatement\":\n      before = this.loc();\n      after = this.loc();\n      self.mark(before);\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.jump(before);\n      self.mark(after);\n      break;\n\n    case \"DoWhileStatement\":\n      let first = this.loc();\n      let test = this.loc();\n      after = this.loc();\n      self.mark(first);\n      self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function () {\n        self.explode(path.get(\"body\"));\n      });\n      self.mark(test);\n      self.jumpIf(self.explodeExpression(path.get(\"test\")), first);\n      self.mark(after);\n      break;\n\n    case \"ForStatement\":\n      head = this.loc();\n      let update = this.loc();\n      after = this.loc();\n\n      if (stmt.init) {\n        // We pass true here to indicate that if stmt.init is an expression\n        // then we do not care about its result.\n        self.explode(path.get(\"init\"), true);\n      }\n\n      self.mark(head);\n\n      if (stmt.test) {\n        self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      } else {// No test means continue unconditionally.\n      }\n\n      self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.mark(update);\n\n      if (stmt.update) {\n        // We pass true here to indicate that if stmt.update is an\n        // expression then we do not care about its result.\n        self.explode(path.get(\"update\"), true);\n      }\n\n      self.jump(head);\n      self.mark(after);\n      break;\n\n    case \"TypeCastExpression\":\n      return self.explodeExpression(path.get(\"expression\"));\n\n    case \"ForInStatement\":\n      head = this.loc();\n      after = this.loc();\n      let keyIterNextFn = self.makeTempVar();\n      self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty(\"keys\"), [self.explodeExpression(path.get(\"right\"))]));\n      self.mark(head);\n      let keyInfoTmpVar = self.makeTempVar();\n      self.jumpIf(t.memberExpression(t.assignmentExpression(\"=\", keyInfoTmpVar, t.callExpression(t.cloneDeep(keyIterNextFn), [])), t.identifier(\"done\"), false), after);\n      self.emitAssign(stmt.left, t.memberExpression(t.cloneDeep(keyInfoTmpVar), t.identifier(\"value\"), false));\n      self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.jump(head);\n      self.mark(after);\n      break;\n\n    case \"BreakStatement\":\n      self.emitAbruptCompletion({\n        type: \"break\",\n        target: self.leapManager.getBreakLoc(stmt.label)\n      });\n      break;\n\n    case \"ContinueStatement\":\n      self.emitAbruptCompletion({\n        type: \"continue\",\n        target: self.leapManager.getContinueLoc(stmt.label)\n      });\n      break;\n\n    case \"SwitchStatement\":\n      // Always save the discriminant into a temporary variable in case the\n      // test expressions overwrite values like context.sent.\n      let disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get(\"discriminant\")));\n      after = this.loc();\n      let defaultLoc = this.loc();\n      let condition = defaultLoc;\n      let caseLocs = []; // If there are no cases, .cases might be undefined.\n\n      let cases = stmt.cases || [];\n\n      for (let i = cases.length - 1; i >= 0; --i) {\n        let c = cases[i];\n        t.assertSwitchCase(c);\n\n        if (c.test) {\n          condition = t.conditionalExpression(t.binaryExpression(\"===\", t.cloneDeep(disc), c.test), caseLocs[i] = this.loc(), condition);\n        } else {\n          caseLocs[i] = defaultLoc;\n        }\n      }\n\n      let discriminant = path.get(\"discriminant\");\n      util.replaceWithOrRemove(discriminant, condition);\n      self.jump(self.explodeExpression(discriminant));\n      self.leapManager.withEntry(new leap.SwitchEntry(after), function () {\n        path.get(\"cases\").forEach(function (casePath) {\n          let i = casePath.key;\n          self.mark(caseLocs[i]);\n          casePath.get(\"consequent\").forEach(function (path) {\n            self.explodeStatement(path);\n          });\n        });\n      });\n      self.mark(after);\n\n      if (defaultLoc.value === -1) {\n        self.mark(defaultLoc);\n        assert.strictEqual(after.value, defaultLoc.value);\n      }\n\n      break;\n\n    case \"IfStatement\":\n      let elseLoc = stmt.alternate && this.loc();\n      after = this.loc();\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), elseLoc || after);\n      self.explodeStatement(path.get(\"consequent\"));\n\n      if (elseLoc) {\n        self.jump(after);\n        self.mark(elseLoc);\n        self.explodeStatement(path.get(\"alternate\"));\n      }\n\n      self.mark(after);\n      break;\n\n    case \"ReturnStatement\":\n      self.emitAbruptCompletion({\n        type: \"return\",\n        value: self.explodeExpression(path.get(\"argument\"))\n      });\n      break;\n\n    case \"WithStatement\":\n      throw new Error(\"WithStatement not supported in generator functions.\");\n\n    case \"TryStatement\":\n      after = this.loc();\n      let handler = stmt.handler;\n      let catchLoc = handler && this.loc();\n      let catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);\n      let finallyLoc = stmt.finalizer && this.loc();\n      let finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);\n      let tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);\n      self.tryEntries.push(tryEntry);\n      self.updateContextPrevLoc(tryEntry.firstLoc);\n      self.leapManager.withEntry(tryEntry, function () {\n        self.explodeStatement(path.get(\"block\"));\n\n        if (catchLoc) {\n          if (finallyLoc) {\n            // If we have both a catch block and a finally block, then\n            // because we emit the catch block first, we need to jump over\n            // it to the finally block.\n            self.jump(finallyLoc);\n          } else {\n            // If there is no finally block, then we need to jump over the\n            // catch block to the fall-through location.\n            self.jump(after);\n          }\n\n          self.updateContextPrevLoc(self.mark(catchLoc));\n          let bodyPath = path.get(\"handler.body\");\n          let safeParam = self.makeTempVar();\n          self.clearPendingException(tryEntry.firstLoc, safeParam);\n          bodyPath.traverse(catchParamVisitor, {\n            getSafeParam: () => t.cloneDeep(safeParam),\n            catchParamName: handler.param.name\n          });\n          self.leapManager.withEntry(catchEntry, function () {\n            self.explodeStatement(bodyPath);\n          });\n        }\n\n        if (finallyLoc) {\n          self.updateContextPrevLoc(self.mark(finallyLoc));\n          self.leapManager.withEntry(finallyEntry, function () {\n            self.explodeStatement(path.get(\"finalizer\"));\n          });\n          self.emit(t.returnStatement(t.callExpression(self.contextProperty(\"finish\"), [finallyEntry.firstLoc])));\n        }\n      });\n      self.mark(after);\n      break;\n\n    case \"ThrowStatement\":\n      self.emit(t.throwStatement(self.explodeExpression(path.get(\"argument\"))));\n      break;\n\n    case \"ClassDeclaration\":\n      self.emit(self.explodeClass(path));\n      break;\n\n    default:\n      throw new Error(\"unknown Statement of type \" + JSON.stringify(stmt.type));\n  }\n};\n\nlet catchParamVisitor = {\n  Identifier: function (path, state) {\n    if (path.node.name === state.catchParamName && util.isReference(path)) {\n      util.replaceWithOrRemove(path, state.getSafeParam());\n    }\n  },\n  Scope: function (path, state) {\n    if (path.scope.hasOwnBinding(state.catchParamName)) {\n      // Don't descend into nested scopes that shadow the catch\n      // parameter with their own declarations.\n      path.skip();\n    }\n  }\n};\n\nEp.emitAbruptCompletion = function (record) {\n  if (!isValidCompletion(record)) {\n    assert.ok(false, \"invalid completion record: \" + JSON.stringify(record));\n  }\n\n  assert.notStrictEqual(record.type, \"normal\", \"normal completions are not abrupt\");\n  const t = util.getTypes();\n  let abruptArgs = [t.stringLiteral(record.type)];\n\n  if (record.type === \"break\" || record.type === \"continue\") {\n    t.assertLiteral(record.target);\n    abruptArgs[1] = this.insertedLocs.has(record.target) ? record.target : t.cloneDeep(record.target);\n  } else if (record.type === \"return\" || record.type === \"throw\") {\n    if (record.value) {\n      t.assertExpression(record.value);\n      abruptArgs[1] = this.insertedLocs.has(record.value) ? record.value : t.cloneDeep(record.value);\n    }\n  }\n\n  this.emit(t.returnStatement(t.callExpression(this.contextProperty(\"abrupt\"), abruptArgs)));\n};\n\nfunction isValidCompletion(record) {\n  let type = record.type;\n\n  if (type === \"normal\") {\n    return !hasOwn.call(record, \"target\");\n  }\n\n  if (type === \"break\" || type === \"continue\") {\n    return !hasOwn.call(record, \"value\") && util.getTypes().isLiteral(record.target);\n  }\n\n  if (type === \"return\" || type === \"throw\") {\n    return hasOwn.call(record, \"value\") && !hasOwn.call(record, \"target\");\n  }\n\n  return false;\n} // Not all offsets into emitter.listing are potential jump targets. For\n// example, execution typically falls into the beginning of a try block\n// without jumping directly there. This method returns the current offset\n// without marking it, so that a switch case will not necessarily be\n// generated for this offset (I say \"not necessarily\" because the same\n// location might end up being marked in the process of emitting other\n// statements). There's no logical harm in marking such locations as jump\n// targets, but minimizing the number of switch cases keeps the generated\n// code shorter.\n\n\nEp.getUnmarkedCurrentLoc = function () {\n  return util.getTypes().numericLiteral(this.listing.length);\n}; // The context.prev property takes the value of context.next whenever we\n// evaluate the switch statement discriminant, which is generally good\n// enough for tracking the last location we jumped to, but sometimes\n// context.prev needs to be more precise, such as when we fall\n// successfully out of a try block and into a finally block without\n// jumping. This method exists to update context.prev to the freshest\n// available location. If we were implementing a full interpreter, we\n// would know the location of the current instruction with complete\n// precision at all times, but we don't have that luxury here, as it would\n// be costly and verbose to set context.prev before every statement.\n\n\nEp.updateContextPrevLoc = function (loc) {\n  const t = util.getTypes();\n\n  if (loc) {\n    t.assertLiteral(loc);\n\n    if (loc.value === -1) {\n      // If an uninitialized location literal was passed in, set its value\n      // to the current this.listing.length.\n      loc.value = this.listing.length;\n    } else {\n      // Otherwise assert that the location matches the current offset.\n      assert.strictEqual(loc.value, this.listing.length);\n    }\n  } else {\n    loc = this.getUnmarkedCurrentLoc();\n  } // Make sure context.prev is up to date in case we fell into this try\n  // statement without jumping to it. TODO Consider avoiding this\n  // assignment when we know control must have jumped here.\n\n\n  this.emitAssign(this.contextProperty(\"prev\"), loc);\n}; // In order to save the rest of explodeExpression from a combinatorial\n// trainwreck of special cases, explodeViaTempVar is responsible for\n// deciding when a subexpression needs to be \"exploded,\" which is my\n// very technical term for emitting the subexpression as an assignment\n// to a temporary variable and the substituting the temporary variable\n// for the original subexpression. Think of exploded view diagrams, not\n// Michael Bay movies. The point of exploding subexpressions is to\n// control the precise order in which the generated code realizes the\n// side effects of those subexpressions.\n\n\nEp.explodeViaTempVar = function (tempVar, childPath, hasLeapingChildren, ignoreChildResult) {\n  assert.ok(!ignoreChildResult || !tempVar, \"Ignoring the result of a child expression but forcing it to \" + \"be assigned to a temporary variable?\");\n  const t = util.getTypes();\n  let result = this.explodeExpression(childPath, ignoreChildResult);\n\n  if (ignoreChildResult) {// Side effects already emitted above.\n  } else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {\n    // If tempVar was provided, then the result will always be assigned\n    // to it, even if the result does not otherwise need to be assigned\n    // to a temporary variable.  When no tempVar is provided, we have\n    // the flexibility to decide whether a temporary variable is really\n    // necessary.  Unfortunately, in general, a temporary variable is\n    // required whenever any child contains a yield expression, since it\n    // is difficult to prove (at all, let alone efficiently) whether\n    // this result would evaluate to the same value before and after the\n    // yield (see #206).  One narrow case where we can prove it doesn't\n    // matter (and thus we do not need a temporary variable) is when the\n    // result in question is a Literal value.\n    result = this.emitAssign(tempVar || this.makeTempVar(), result);\n  }\n\n  return result;\n};\n\nEp.explodeExpression = function (path, ignoreResult) {\n  const t = util.getTypes();\n  let expr = path.node;\n\n  if (expr) {\n    t.assertExpression(expr);\n  } else {\n    return expr;\n  }\n\n  let self = this;\n  let result; // Used optionally by several cases below.\n\n  let after;\n\n  function finish(expr) {\n    t.assertExpression(expr);\n\n    if (ignoreResult) {\n      self.emit(expr);\n    }\n\n    return expr;\n  } // If the expression does not contain a leap, then we either emit the\n  // expression as a standalone statement or return it whole.\n\n\n  if (!meta.containsLeap(expr)) {\n    return finish(expr);\n  } // If any child contains a leap (such as a yield or labeled continue or\n  // break statement), then any sibling subexpressions will almost\n  // certainly have to be exploded in order to maintain the order of their\n  // side effects relative to the leaping child(ren).\n\n\n  let hasLeapingChildren = meta.containsLeap.onlyChildren(expr); // If ignoreResult is true, then we must take full responsibility for\n  // emitting the expression with all its side effects, and we should not\n  // return a result.\n\n  switch (expr.type) {\n    case \"MemberExpression\":\n      return finish(t.memberExpression(self.explodeExpression(path.get(\"object\")), expr.computed ? self.explodeViaTempVar(null, path.get(\"property\"), hasLeapingChildren) : expr.property, expr.computed));\n\n    case \"CallExpression\":\n      let calleePath = path.get(\"callee\");\n      let argsPath = path.get(\"arguments\");\n      let newCallee;\n      let newArgs;\n      let hasLeapingArgs = argsPath.some(argPath => meta.containsLeap(argPath.node));\n      let injectFirstArg = null;\n\n      if (t.isMemberExpression(calleePath.node)) {\n        if (hasLeapingArgs) {\n          // If the arguments of the CallExpression contained any yield\n          // expressions, then we need to be sure to evaluate the callee\n          // before evaluating the arguments, but if the callee was a member\n          // expression, then we must be careful that the object of the\n          // member expression still gets bound to `this` for the call.\n          let newObject = self.explodeViaTempVar( // Assign the exploded callee.object expression to a temporary\n          // variable so that we can use it twice without reevaluating it.\n          self.makeTempVar(), calleePath.get(\"object\"), hasLeapingChildren);\n          let newProperty = calleePath.node.computed ? self.explodeViaTempVar(null, calleePath.get(\"property\"), hasLeapingChildren) : calleePath.node.property;\n          injectFirstArg = newObject;\n          newCallee = t.memberExpression(t.memberExpression(t.cloneDeep(newObject), newProperty, calleePath.node.computed), t.identifier(\"call\"), false);\n        } else {\n          newCallee = self.explodeExpression(calleePath);\n        }\n      } else {\n        newCallee = self.explodeViaTempVar(null, calleePath, hasLeapingChildren);\n\n        if (t.isMemberExpression(newCallee)) {\n          // If the callee was not previously a MemberExpression, then the\n          // CallExpression was \"unqualified,\" meaning its `this` object\n          // should be the global object. If the exploded expression has\n          // become a MemberExpression (e.g. a context property, probably a\n          // temporary variable), then we need to force it to be unqualified\n          // by using the (0, object.property)(...) trick; otherwise, it\n          // will receive the object of the MemberExpression as its `this`\n          // object.\n          newCallee = t.sequenceExpression([t.numericLiteral(0), t.cloneDeep(newCallee)]);\n        }\n      }\n\n      if (hasLeapingArgs) {\n        newArgs = argsPath.map(argPath => self.explodeViaTempVar(null, argPath, hasLeapingChildren));\n        if (injectFirstArg) newArgs.unshift(injectFirstArg);\n        newArgs = newArgs.map(arg => t.cloneDeep(arg));\n      } else {\n        newArgs = path.node.arguments;\n      }\n\n      return finish(t.callExpression(newCallee, newArgs));\n\n    case \"NewExpression\":\n      return finish(t.newExpression(self.explodeViaTempVar(null, path.get(\"callee\"), hasLeapingChildren), path.get(\"arguments\").map(function (argPath) {\n        return self.explodeViaTempVar(null, argPath, hasLeapingChildren);\n      })));\n\n    case \"ObjectExpression\":\n      return finish(t.objectExpression(path.get(\"properties\").map(function (propPath) {\n        if (propPath.isObjectProperty()) {\n          return t.objectProperty(propPath.node.key, self.explodeViaTempVar(null, propPath.get(\"value\"), hasLeapingChildren), propPath.node.computed);\n        } else {\n          return propPath.node;\n        }\n      })));\n\n    case \"ArrayExpression\":\n      return finish(t.arrayExpression(path.get(\"elements\").map(function (elemPath) {\n        if (elemPath.isSpreadElement()) {\n          return t.spreadElement(self.explodeViaTempVar(null, elemPath.get(\"argument\"), hasLeapingChildren));\n        } else {\n          return self.explodeViaTempVar(null, elemPath, hasLeapingChildren);\n        }\n      })));\n\n    case \"SequenceExpression\":\n      let lastIndex = expr.expressions.length - 1;\n      path.get(\"expressions\").forEach(function (exprPath) {\n        if (exprPath.key === lastIndex) {\n          result = self.explodeExpression(exprPath, ignoreResult);\n        } else {\n          self.explodeExpression(exprPath, true);\n        }\n      });\n      return result;\n\n    case \"LogicalExpression\":\n      after = this.loc();\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      let left = self.explodeViaTempVar(result, path.get(\"left\"), hasLeapingChildren);\n\n      if (expr.operator === \"&&\") {\n        self.jumpIfNot(left, after);\n      } else {\n        assert.strictEqual(expr.operator, \"||\");\n        self.jumpIf(left, after);\n      }\n\n      self.explodeViaTempVar(result, path.get(\"right\"), hasLeapingChildren, ignoreResult);\n      self.mark(after);\n      return result;\n\n    case \"ConditionalExpression\":\n      let elseLoc = this.loc();\n      after = this.loc();\n      let test = self.explodeExpression(path.get(\"test\"));\n      self.jumpIfNot(test, elseLoc);\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      self.explodeViaTempVar(result, path.get(\"consequent\"), hasLeapingChildren, ignoreResult);\n      self.jump(after);\n      self.mark(elseLoc);\n      self.explodeViaTempVar(result, path.get(\"alternate\"), hasLeapingChildren, ignoreResult);\n      self.mark(after);\n      return result;\n\n    case \"UnaryExpression\":\n      return finish(t.unaryExpression(expr.operator, // Can't (and don't need to) break up the syntax of the argument.\n      // Think about delete a[b].\n      self.explodeExpression(path.get(\"argument\")), !!expr.prefix));\n\n    case \"BinaryExpression\":\n      return finish(t.binaryExpression(expr.operator, self.explodeViaTempVar(null, path.get(\"left\"), hasLeapingChildren), self.explodeViaTempVar(null, path.get(\"right\"), hasLeapingChildren)));\n\n    case \"AssignmentExpression\":\n      if (expr.operator === \"=\") {\n        // If this is a simple assignment, the left hand side does not need\n        // to be read before the right hand side is evaluated, so we can\n        // avoid the more complicated logic below.\n        return finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get(\"left\")), self.explodeExpression(path.get(\"right\"))));\n      }\n\n      const lhs = self.explodeExpression(path.get(\"left\"));\n      const temp = self.emitAssign(self.makeTempVar(), lhs); // For example,\n      //\n      //   x += yield y\n      //\n      // becomes\n      //\n      //   context.t0 = x\n      //   x = context.t0 += yield y\n      //\n      // so that the left-hand side expression is read before the yield.\n      // Fixes https://github.com/facebook/regenerator/issues/345.\n\n      return finish(t.assignmentExpression(\"=\", t.cloneDeep(lhs), t.assignmentExpression(expr.operator, t.cloneDeep(temp), self.explodeExpression(path.get(\"right\")))));\n\n    case \"UpdateExpression\":\n      return finish(t.updateExpression(expr.operator, self.explodeExpression(path.get(\"argument\")), expr.prefix));\n\n    case \"YieldExpression\":\n      after = this.loc();\n      let arg = expr.argument && self.explodeExpression(path.get(\"argument\"));\n\n      if (arg && expr.delegate) {\n        let result = self.makeTempVar();\n        let ret = t.returnStatement(t.callExpression(self.contextProperty(\"delegateYield\"), [arg, t.stringLiteral(result.property.name), after]));\n        ret.loc = expr.loc;\n        self.emit(ret);\n        self.mark(after);\n        return result;\n      }\n\n      self.emitAssign(self.contextProperty(\"next\"), after);\n      let ret = t.returnStatement(t.cloneDeep(arg) || null); // Preserve the `yield` location so that source mappings for the statements\n      // link back to the yield properly.\n\n      ret.loc = expr.loc;\n      self.emit(ret);\n      self.mark(after);\n      return self.contextProperty(\"sent\");\n\n    case \"ClassExpression\":\n      return finish(self.explodeClass(path));\n\n    default:\n      throw new Error(\"unknown Expression of type \" + JSON.stringify(expr.type));\n  }\n};\n\nEp.explodeClass = function (path) {\n  const explodingChildren = [];\n\n  if (path.node.superClass) {\n    explodingChildren.push(path.get(\"superClass\"));\n  }\n\n  path.get(\"body.body\").forEach(member => {\n    if (member.node.computed) {\n      explodingChildren.push(member.get(\"key\"));\n    }\n  });\n  const hasLeapingChildren = explodingChildren.some(child => meta.containsLeap(child));\n\n  for (let i = 0; i < explodingChildren.length; i++) {\n    const child = explodingChildren[i];\n    const isLast = i === explodingChildren.length - 1;\n\n    if (isLast) {\n      child.replaceWith(this.explodeExpression(child));\n    } else {\n      child.replaceWith(this.explodeViaTempVar(null, child, hasLeapingChildren));\n    }\n  }\n\n  return path.node;\n};","map":{"version":3,"names":["assert","leap","meta","util","hasOwn","Object","prototype","hasOwnProperty","Emitter","contextId","ok","getTypes","assertIdentifier","nextTempId","listing","marked","insertedLocs","Set","finalLoc","loc","tryEntries","leapManager","LeapManager","Ep","exports","l","numericLiteral","add","getInsertedLocs","getContextId","clone","mark","assertLiteral","index","length","value","strictEqual","emit","node","t","isExpression","expressionStatement","assertStatement","push","emitAssign","lhs","rhs","assign","assignmentExpression","cloneDeep","contextProperty","name","computed","memberExpression","stringLiteral","identifier","stop","rval","setReturnValue","jump","valuePath","assertExpression","explodeExpression","clearPendingException","tryLoc","assignee","catchCall","callExpression","toLoc","breakStatement","jumpIf","test","ifStatement","blockStatement","jumpIfNot","negatedTest","isUnaryExpression","operator","argument","unaryExpression","makeTempVar","getContextFunction","id","functionExpression","getDispatchLoop","self","cases","current","alreadyEnded","forEach","stmt","i","switchCase","isCompletionStatement","returnStatement","whileStatement","switchStatement","getTryLocsList","lastLocValue","arrayExpression","map","tryEntry","thisLocValue","firstLoc","ce","catchEntry","fe","finallyEntry","locs","afterLoc","explode","path","ignoreResult","assertNode","isDeclaration","getDeclError","isStatement","explodeStatement","type","get","Error","JSON","stringify","labelId","before","after","head","isBlockStatement","containsLeap","withEntry","LabeledEntry","label","LoopEntry","first","update","init","keyIterNextFn","runtimeProperty","keyInfoTmpVar","left","emitAbruptCompletion","target","getBreakLoc","getContinueLoc","disc","defaultLoc","condition","caseLocs","c","assertSwitchCase","conditionalExpression","binaryExpression","discriminant","replaceWithOrRemove","SwitchEntry","casePath","key","elseLoc","alternate","handler","catchLoc","CatchEntry","param","finallyLoc","finalizer","FinallyEntry","TryEntry","getUnmarkedCurrentLoc","updateContextPrevLoc","bodyPath","safeParam","traverse","catchParamVisitor","getSafeParam","catchParamName","throwStatement","explodeClass","Identifier","state","isReference","Scope","scope","hasOwnBinding","skip","record","isValidCompletion","notStrictEqual","abruptArgs","has","call","isLiteral","explodeViaTempVar","tempVar","childPath","hasLeapingChildren","ignoreChildResult","result","expr","finish","onlyChildren","property","calleePath","argsPath","newCallee","newArgs","hasLeapingArgs","some","argPath","injectFirstArg","isMemberExpression","newObject","newProperty","sequenceExpression","unshift","arg","arguments","newExpression","objectExpression","propPath","isObjectProperty","objectProperty","elemPath","isSpreadElement","spreadElement","lastIndex","expressions","exprPath","prefix","temp","updateExpression","delegate","ret","explodingChildren","superClass","member","child","isLast","replaceWith"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/regenerator-transform/src/emit.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport assert from \"assert\";\nimport * as leap from \"./leap\";\nimport * as meta from \"./meta\";\nimport * as util from \"./util\";\n\nlet hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Emitter(contextId) {\n  assert.ok(this instanceof Emitter);\n\n  util.getTypes().assertIdentifier(contextId);\n\n  // Used to generate unique temporary names.\n  this.nextTempId = 0;\n\n  // In order to make sure the context object does not collide with\n  // anything in the local scope, we might have to rename it, so we\n  // refer to it symbolically instead of just assuming that it will be\n  // called \"context\".\n  this.contextId = contextId;\n\n  // An append-only list of Statements that grows each time this.emit is\n  // called.\n  this.listing = [];\n\n  // A sparse array whose keys correspond to locations in this.listing\n  // that have been marked as branch/jump targets.\n  this.marked = [true];\n\n  this.insertedLocs = new Set();\n\n  // The last location will be marked when this.getDispatchLoop is\n  // called.\n  this.finalLoc = this.loc();\n\n  // A list of all leap.TryEntry statements emitted.\n  this.tryEntries = [];\n\n  // Each time we evaluate the body of a loop, we tell this.leapManager\n  // to enter a nested loop context that determines the meaning of break\n  // and continue statements therein.\n  this.leapManager = new leap.LeapManager(this);\n}\n\nlet Ep = Emitter.prototype;\nexports.Emitter = Emitter;\n\n// Offsets into this.listing that could be used as targets for branches or\n// jumps are represented as numeric Literal nodes. This representation has\n// the amazingly convenient benefit of allowing the exact value of the\n// location to be determined at any time, even after generating code that\n// refers to the location.\nEp.loc = function() {\n  const l = util.getTypes().numericLiteral(-1)\n  this.insertedLocs.add(l);\n  return l;\n}\n\nEp.getInsertedLocs = function() {\n  return this.insertedLocs;\n}\n\nEp.getContextId = function() {\n  return util.getTypes().clone(this.contextId);\n}\n\n// Sets the exact value of the given location to the offset of the next\n// Statement emitted.\nEp.mark = function(loc) {\n  util.getTypes().assertLiteral(loc);\n  let index = this.listing.length;\n  if (loc.value === -1) {\n    loc.value = index;\n  } else {\n    // Locations can be marked redundantly, but their values cannot change\n    // once set the first time.\n    assert.strictEqual(loc.value, index);\n  }\n  this.marked[index] = true;\n  return loc;\n};\n\nEp.emit = function(node) {\n  const t = util.getTypes();\n\n  if (t.isExpression(node)) {\n    node = t.expressionStatement(node);\n  }\n\n  t.assertStatement(node);\n  this.listing.push(node);\n};\n\n// Shorthand for emitting assignment statements. This will come in handy\n// for assignments to temporary variables.\nEp.emitAssign = function(lhs, rhs) {\n  this.emit(this.assign(lhs, rhs));\n  return lhs;\n};\n\n// Shorthand for an assignment statement.\nEp.assign = function(lhs, rhs) {\n  const t = util.getTypes();\n  return t.expressionStatement(\n    t.assignmentExpression(\"=\", t.cloneDeep(lhs), rhs));\n};\n\n// Convenience function for generating expressions like context.next,\n// context.sent, and context.rval.\nEp.contextProperty = function(name, computed) {\n  const t = util.getTypes();\n  return t.memberExpression(\n    this.getContextId(),\n    computed ? t.stringLiteral(name) : t.identifier(name),\n    !!computed\n  );\n};\n\n// Shorthand for setting context.rval and jumping to `context.stop()`.\nEp.stop = function(rval) {\n  if (rval) {\n    this.setReturnValue(rval);\n  }\n\n  this.jump(this.finalLoc);\n};\n\nEp.setReturnValue = function(valuePath) {\n  util.getTypes().assertExpression(valuePath.value);\n\n  this.emitAssign(\n    this.contextProperty(\"rval\"),\n    this.explodeExpression(valuePath)\n  );\n};\n\nEp.clearPendingException = function(tryLoc, assignee) {\n  const t = util.getTypes();\n\n  t.assertLiteral(tryLoc);\n\n  let catchCall = t.callExpression(\n    this.contextProperty(\"catch\", true),\n    [t.clone(tryLoc)]\n  );\n\n  if (assignee) {\n    this.emitAssign(assignee, catchCall);\n  } else {\n    this.emit(catchCall);\n  }\n};\n\n// Emits code for an unconditional jump to the given location, even if the\n// exact value of the location is not yet known.\nEp.jump = function(toLoc) {\n  this.emitAssign(this.contextProperty(\"next\"), toLoc);\n  this.emit(util.getTypes().breakStatement());\n};\n\n// Conditional jump.\nEp.jumpIf = function(test, toLoc) {\n  const t = util.getTypes();\n\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n\n  this.emit(t.ifStatement(\n    test,\n    t.blockStatement([\n      this.assign(this.contextProperty(\"next\"), toLoc),\n      t.breakStatement()\n    ])\n  ));\n};\n\n// Conditional jump, with the condition negated.\nEp.jumpIfNot = function(test, toLoc) {\n  const t = util.getTypes();\n\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n\n  let negatedTest;\n  if (t.isUnaryExpression(test) &&\n      test.operator === \"!\") {\n    // Avoid double negation.\n    negatedTest = test.argument;\n  } else {\n    negatedTest = t.unaryExpression(\"!\", test);\n  }\n\n  this.emit(t.ifStatement(\n    negatedTest,\n    t.blockStatement([\n      this.assign(this.contextProperty(\"next\"), toLoc),\n      t.breakStatement()\n    ])\n  ));\n};\n\n// Returns a unique MemberExpression that can be used to store and\n// retrieve temporary values. Since the object of the member expression is\n// the context object, which is presumed to coexist peacefully with all\n// other local variables, and since we just increment `nextTempId`\n// monotonically, uniqueness is assured.\nEp.makeTempVar = function() {\n  return this.contextProperty(\"t\" + this.nextTempId++);\n};\n\nEp.getContextFunction = function(id) {\n  const t = util.getTypes();\n\n  return t.functionExpression(\n    id || null/*Anonymous*/,\n    [this.getContextId()],\n    t.blockStatement([this.getDispatchLoop()]),\n    false, // Not a generator anymore!\n    false // Nor an expression.\n  );\n};\n\n// Turns this.listing into a loop of the form\n//\n//   while (1) switch (context.next) {\n//   case 0:\n//   ...\n//   case n:\n//     return context.stop();\n//   }\n//\n// Each marked location in this.listing will correspond to one generated\n// case statement.\nEp.getDispatchLoop = function() {\n  const self = this;\n  const t = util.getTypes();\n  let cases = [];\n  let current;\n\n  // If we encounter a break, continue, or return statement in a switch\n  // case, we can skip the rest of the statements until the next case.\n  let alreadyEnded = false;\n\n  self.listing.forEach(function(stmt, i) {\n    if (self.marked.hasOwnProperty(i)) {\n      cases.push(t.switchCase(\n        t.numericLiteral(i),\n        current = []));\n      alreadyEnded = false;\n    }\n\n    if (!alreadyEnded) {\n      current.push(stmt);\n      if (t.isCompletionStatement(stmt))\n        alreadyEnded = true;\n    }\n  });\n\n  // Now that we know how many statements there will be in this.listing,\n  // we can finally resolve this.finalLoc.value.\n  this.finalLoc.value = this.listing.length;\n\n  cases.push(\n    t.switchCase(this.finalLoc, [\n      // Intentionally fall through to the \"end\" case...\n    ]),\n\n    // So that the runtime can jump to the final location without having\n    // to know its offset, we provide the \"end\" case as a synonym.\n    t.switchCase(t.stringLiteral(\"end\"), [\n      // This will check/clear both context.thrown and context.rval.\n      t.returnStatement(\n        t.callExpression(this.contextProperty(\"stop\"), [])\n      )\n    ])\n  );\n\n  return t.whileStatement(\n    t.numericLiteral(1),\n    t.switchStatement(\n      t.assignmentExpression(\n        \"=\",\n        this.contextProperty(\"prev\"),\n        this.contextProperty(\"next\")\n      ),\n      cases\n    )\n  );\n};\n\nEp.getTryLocsList = function() {\n  if (this.tryEntries.length === 0) {\n    // To avoid adding a needless [] to the majority of runtime.wrap\n    // argument lists, force the caller to handle this case specially.\n    return null;\n  }\n\n  const t = util.getTypes();\n  let lastLocValue = 0;\n\n  return t.arrayExpression(\n    this.tryEntries.map(function(tryEntry) {\n      let thisLocValue = tryEntry.firstLoc.value;\n      assert.ok(thisLocValue >= lastLocValue, \"try entries out of order\");\n      lastLocValue = thisLocValue;\n\n      let ce = tryEntry.catchEntry;\n      let fe = tryEntry.finallyEntry;\n\n      let locs = [\n        tryEntry.firstLoc,\n        // The null here makes a hole in the array.\n        ce ? ce.firstLoc : null\n      ];\n\n      if (fe) {\n        locs[2] = fe.firstLoc;\n        locs[3] = fe.afterLoc;\n      }\n\n      return t.arrayExpression(locs.map(loc => loc && t.clone(loc)));\n    })\n  );\n};\n\n// All side effects must be realized in order.\n\n// If any subexpression harbors a leap, all subexpressions must be\n// neutered of side effects.\n\n// No destructive modification of AST nodes.\n\nEp.explode = function(path, ignoreResult) {\n  const t = util.getTypes();\n  let node = path.node;\n  let self = this;\n\n  t.assertNode(node);\n\n  if (t.isDeclaration(node))\n    throw getDeclError(node);\n\n  if (t.isStatement(node))\n    return self.explodeStatement(path);\n\n  if (t.isExpression(node))\n    return self.explodeExpression(path, ignoreResult);\n\n  switch (node.type) {\n  case \"Program\":\n    return path.get(\"body\").map(\n      self.explodeStatement,\n      self\n    );\n\n  case \"VariableDeclarator\":\n    throw getDeclError(node);\n\n  // These node types should be handled by their parent nodes\n  // (ObjectExpression, SwitchStatement, and TryStatement, respectively).\n  case \"Property\":\n  case \"SwitchCase\":\n  case \"CatchClause\":\n    throw new Error(\n      node.type + \" nodes should be handled by their parents\");\n\n  default:\n    throw new Error(\n      \"unknown Node of type \" +\n        JSON.stringify(node.type));\n  }\n};\n\nfunction getDeclError(node) {\n  return new Error(\n    \"all declarations should have been transformed into \" +\n    \"assignments before the Exploder began its work: \" +\n    JSON.stringify(node));\n}\n\nEp.explodeStatement = function(path, labelId) {\n  const t = util.getTypes();\n  let stmt = path.node;\n  let self = this;\n  let before, after, head;\n\n  t.assertStatement(stmt);\n\n  if (labelId) {\n    t.assertIdentifier(labelId);\n  } else {\n    labelId = null;\n  }\n\n  // Explode BlockStatement nodes even if they do not contain a yield,\n  // because we don't want or need the curly braces.\n  if (t.isBlockStatement(stmt)) {\n    path.get(\"body\").forEach(function (path) {\n      self.explodeStatement(path);\n    });\n    return;\n  }\n\n  if (!meta.containsLeap(stmt)) {\n    // Technically we should be able to avoid emitting the statement\n    // altogether if !meta.hasSideEffects(stmt), but that leads to\n    // confusing generated code (for instance, `while (true) {}` just\n    // disappears) and is probably a more appropriate job for a dedicated\n    // dead code elimination pass.\n    self.emit(stmt);\n    return;\n  }\n\n  switch (stmt.type) {\n  case \"ExpressionStatement\":\n    self.explodeExpression(path.get(\"expression\"), true);\n    break;\n\n  case \"LabeledStatement\":\n    after = this.loc();\n\n    // Did you know you can break from any labeled block statement or\n    // control structure? Well, you can! Note: when a labeled loop is\n    // encountered, the leap.LabeledEntry created here will immediately\n    // enclose a leap.LoopEntry on the leap manager's stack, and both\n    // entries will have the same label. Though this works just fine, it\n    // may seem a bit redundant. In theory, we could check here to\n    // determine if stmt knows how to handle its own label; for example,\n    // stmt happens to be a WhileStatement and so we know it's going to\n    // establish its own LoopEntry when we explode it (below). Then this\n    // LabeledEntry would be unnecessary. Alternatively, we might be\n    // tempted not to pass stmt.label down into self.explodeStatement,\n    // because we've handled the label here, but that's a mistake because\n    // labeled loops may contain labeled continue statements, which is not\n    // something we can handle in this generic case. All in all, I think a\n    // little redundancy greatly simplifies the logic of this case, since\n    // it's clear that we handle all possible LabeledStatements correctly\n    // here, regardless of whether they interact with the leap manager\n    // themselves. Also remember that labels and break/continue-to-label\n    // statements are rare, and all of this logic happens at transform\n    // time, so it has no additional runtime cost.\n    self.leapManager.withEntry(\n      new leap.LabeledEntry(after, stmt.label),\n      function() {\n        self.explodeStatement(path.get(\"body\"), stmt.label);\n      }\n    );\n\n    self.mark(after);\n\n    break;\n\n  case \"WhileStatement\":\n    before = this.loc();\n    after = this.loc();\n\n    self.mark(before);\n    self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n    self.leapManager.withEntry(\n      new leap.LoopEntry(after, before, labelId),\n      function() { self.explodeStatement(path.get(\"body\")); }\n    );\n    self.jump(before);\n    self.mark(after);\n\n    break;\n\n  case \"DoWhileStatement\":\n    let first = this.loc();\n    let test = this.loc();\n    after = this.loc();\n\n    self.mark(first);\n    self.leapManager.withEntry(\n      new leap.LoopEntry(after, test, labelId),\n      function() { self.explode(path.get(\"body\")); }\n    );\n    self.mark(test);\n    self.jumpIf(self.explodeExpression(path.get(\"test\")), first);\n    self.mark(after);\n\n    break;\n\n  case \"ForStatement\":\n    head = this.loc();\n    let update = this.loc();\n    after = this.loc();\n\n    if (stmt.init) {\n      // We pass true here to indicate that if stmt.init is an expression\n      // then we do not care about its result.\n      self.explode(path.get(\"init\"), true);\n    }\n\n    self.mark(head);\n\n    if (stmt.test) {\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n    } else {\n      // No test means continue unconditionally.\n    }\n\n    self.leapManager.withEntry(\n      new leap.LoopEntry(after, update, labelId),\n      function() { self.explodeStatement(path.get(\"body\")); }\n    );\n\n    self.mark(update);\n\n    if (stmt.update) {\n      // We pass true here to indicate that if stmt.update is an\n      // expression then we do not care about its result.\n      self.explode(path.get(\"update\"), true);\n    }\n\n    self.jump(head);\n\n    self.mark(after);\n\n    break;\n\n  case \"TypeCastExpression\":\n    return self.explodeExpression(path.get(\"expression\"));\n\n  case \"ForInStatement\":\n    head = this.loc();\n    after = this.loc();\n\n    let keyIterNextFn = self.makeTempVar();\n    self.emitAssign(\n      keyIterNextFn,\n      t.callExpression(\n        util.runtimeProperty(\"keys\"),\n        [self.explodeExpression(path.get(\"right\"))]\n      )\n    );\n\n    self.mark(head);\n\n    let keyInfoTmpVar = self.makeTempVar();\n    self.jumpIf(\n      t.memberExpression(\n        t.assignmentExpression(\n          \"=\",\n          keyInfoTmpVar,\n          t.callExpression(t.cloneDeep(keyIterNextFn), [])\n        ),\n        t.identifier(\"done\"),\n        false\n      ),\n      after\n    );\n\n    self.emitAssign(\n      stmt.left,\n      t.memberExpression(\n        t.cloneDeep(keyInfoTmpVar),\n        t.identifier(\"value\"),\n        false\n      )\n    );\n\n    self.leapManager.withEntry(\n      new leap.LoopEntry(after, head, labelId),\n      function() { self.explodeStatement(path.get(\"body\")); }\n    );\n\n    self.jump(head);\n\n    self.mark(after);\n\n    break;\n\n  case \"BreakStatement\":\n    self.emitAbruptCompletion({\n      type: \"break\",\n      target: self.leapManager.getBreakLoc(stmt.label)\n    });\n\n    break;\n\n  case \"ContinueStatement\":\n    self.emitAbruptCompletion({\n      type: \"continue\",\n      target: self.leapManager.getContinueLoc(stmt.label)\n    });\n\n    break;\n\n  case \"SwitchStatement\":\n    // Always save the discriminant into a temporary variable in case the\n    // test expressions overwrite values like context.sent.\n    let disc = self.emitAssign(\n      self.makeTempVar(),\n      self.explodeExpression(path.get(\"discriminant\"))\n    );\n\n    after = this.loc();\n    let defaultLoc = this.loc();\n    let condition = defaultLoc;\n    let caseLocs = [];\n\n    // If there are no cases, .cases might be undefined.\n    let cases = stmt.cases || [];\n\n    for (let i = cases.length - 1; i >= 0; --i) {\n      let c = cases[i];\n      t.assertSwitchCase(c);\n\n      if (c.test) {\n        condition = t.conditionalExpression(\n          t.binaryExpression(\"===\", t.cloneDeep(disc), c.test),\n          caseLocs[i] = this.loc(),\n          condition\n        );\n      } else {\n        caseLocs[i] = defaultLoc;\n      }\n    }\n\n    let discriminant = path.get(\"discriminant\");\n    util.replaceWithOrRemove(discriminant, condition);\n    self.jump(self.explodeExpression(discriminant));\n\n    self.leapManager.withEntry(\n      new leap.SwitchEntry(after),\n      function() {\n        path.get(\"cases\").forEach(function(casePath) {\n          let i = casePath.key;\n          self.mark(caseLocs[i]);\n\n          casePath.get(\"consequent\").forEach(function (path) {\n            self.explodeStatement(path);\n          });\n        });\n      }\n    );\n\n    self.mark(after);\n    if (defaultLoc.value === -1) {\n      self.mark(defaultLoc);\n      assert.strictEqual(after.value, defaultLoc.value);\n    }\n\n    break;\n\n  case \"IfStatement\":\n    let elseLoc = stmt.alternate && this.loc();\n    after = this.loc();\n\n    self.jumpIfNot(\n      self.explodeExpression(path.get(\"test\")),\n      elseLoc || after\n    );\n\n    self.explodeStatement(path.get(\"consequent\"));\n\n    if (elseLoc) {\n      self.jump(after);\n      self.mark(elseLoc);\n      self.explodeStatement(path.get(\"alternate\"));\n    }\n\n    self.mark(after);\n\n    break;\n\n  case \"ReturnStatement\":\n    self.emitAbruptCompletion({\n      type: \"return\",\n      value: self.explodeExpression(path.get(\"argument\"))\n    });\n\n    break;\n\n  case \"WithStatement\":\n    throw new Error(\"WithStatement not supported in generator functions.\");\n\n  case \"TryStatement\":\n    after = this.loc();\n\n    let handler = stmt.handler;\n\n    let catchLoc = handler && this.loc();\n    let catchEntry = catchLoc && new leap.CatchEntry(\n      catchLoc,\n      handler.param\n    );\n\n    let finallyLoc = stmt.finalizer && this.loc();\n    let finallyEntry = finallyLoc &&\n      new leap.FinallyEntry(finallyLoc, after);\n\n    let tryEntry = new leap.TryEntry(\n      self.getUnmarkedCurrentLoc(),\n      catchEntry,\n      finallyEntry\n    );\n\n    self.tryEntries.push(tryEntry);\n    self.updateContextPrevLoc(tryEntry.firstLoc);\n\n    self.leapManager.withEntry(tryEntry, function() {\n      self.explodeStatement(path.get(\"block\"));\n\n      if (catchLoc) {\n        if (finallyLoc) {\n          // If we have both a catch block and a finally block, then\n          // because we emit the catch block first, we need to jump over\n          // it to the finally block.\n          self.jump(finallyLoc);\n\n        } else {\n          // If there is no finally block, then we need to jump over the\n          // catch block to the fall-through location.\n          self.jump(after);\n        }\n\n        self.updateContextPrevLoc(self.mark(catchLoc));\n\n        let bodyPath = path.get(\"handler.body\");\n        let safeParam = self.makeTempVar();\n        self.clearPendingException(tryEntry.firstLoc, safeParam);\n\n        bodyPath.traverse(catchParamVisitor, {\n          getSafeParam: () => t.cloneDeep(safeParam),\n          catchParamName: handler.param.name\n        });\n\n        self.leapManager.withEntry(catchEntry, function() {\n          self.explodeStatement(bodyPath);\n        });\n      }\n\n      if (finallyLoc) {\n        self.updateContextPrevLoc(self.mark(finallyLoc));\n\n        self.leapManager.withEntry(finallyEntry, function() {\n          self.explodeStatement(path.get(\"finalizer\"));\n        });\n\n        self.emit(t.returnStatement(t.callExpression(\n          self.contextProperty(\"finish\"),\n          [finallyEntry.firstLoc]\n        )));\n      }\n    });\n\n    self.mark(after);\n\n    break;\n\n  case \"ThrowStatement\":\n    self.emit(t.throwStatement(\n      self.explodeExpression(path.get(\"argument\"))\n    ));\n\n    break;\n\n  case \"ClassDeclaration\":\n    self.emit(self.explodeClass(path));\n    break;\n\n  default:\n    throw new Error(\n      \"unknown Statement of type \" +\n        JSON.stringify(stmt.type));\n  }\n};\n\nlet catchParamVisitor = {\n  Identifier: function(path, state) {\n    if (path.node.name === state.catchParamName && util.isReference(path)) {\n      util.replaceWithOrRemove(path, state.getSafeParam());\n    }\n  },\n\n  Scope: function(path, state) {\n    if (path.scope.hasOwnBinding(state.catchParamName)) {\n      // Don't descend into nested scopes that shadow the catch\n      // parameter with their own declarations.\n      path.skip();\n    }\n  }\n};\n\nEp.emitAbruptCompletion = function(record) {\n  if (!isValidCompletion(record)) {\n    assert.ok(\n      false,\n      \"invalid completion record: \" +\n        JSON.stringify(record)\n    );\n  }\n\n  assert.notStrictEqual(\n    record.type, \"normal\",\n    \"normal completions are not abrupt\"\n  );\n\n  const t = util.getTypes();\n  let abruptArgs = [t.stringLiteral(record.type)];\n\n  if (record.type === \"break\" ||\n      record.type === \"continue\") {\n    t.assertLiteral(record.target);\n    abruptArgs[1] = this.insertedLocs.has(record.target)\n      ? record.target\n      : t.cloneDeep(record.target);\n  } else if (record.type === \"return\" ||\n             record.type === \"throw\") {\n    if (record.value) {\n      t.assertExpression(record.value);\n      abruptArgs[1] = this.insertedLocs.has(record.value)\n        ? record.value\n        : t.cloneDeep(record.value);\n    }\n  }\n\n  this.emit(\n    t.returnStatement(\n      t.callExpression(\n        this.contextProperty(\"abrupt\"),\n        abruptArgs\n      )\n    )\n  );\n};\n\nfunction isValidCompletion(record) {\n  let type = record.type;\n\n  if (type === \"normal\") {\n    return !hasOwn.call(record, \"target\");\n  }\n\n  if (type === \"break\" ||\n      type === \"continue\") {\n    return !hasOwn.call(record, \"value\")\n        && util.getTypes().isLiteral(record.target);\n  }\n\n  if (type === \"return\" ||\n      type === \"throw\") {\n    return hasOwn.call(record, \"value\")\n        && !hasOwn.call(record, \"target\");\n  }\n\n  return false;\n}\n\n\n// Not all offsets into emitter.listing are potential jump targets. For\n// example, execution typically falls into the beginning of a try block\n// without jumping directly there. This method returns the current offset\n// without marking it, so that a switch case will not necessarily be\n// generated for this offset (I say \"not necessarily\" because the same\n// location might end up being marked in the process of emitting other\n// statements). There's no logical harm in marking such locations as jump\n// targets, but minimizing the number of switch cases keeps the generated\n// code shorter.\nEp.getUnmarkedCurrentLoc = function() {\n  return util.getTypes().numericLiteral(this.listing.length);\n};\n\n// The context.prev property takes the value of context.next whenever we\n// evaluate the switch statement discriminant, which is generally good\n// enough for tracking the last location we jumped to, but sometimes\n// context.prev needs to be more precise, such as when we fall\n// successfully out of a try block and into a finally block without\n// jumping. This method exists to update context.prev to the freshest\n// available location. If we were implementing a full interpreter, we\n// would know the location of the current instruction with complete\n// precision at all times, but we don't have that luxury here, as it would\n// be costly and verbose to set context.prev before every statement.\nEp.updateContextPrevLoc = function(loc) {\n  const t = util.getTypes();\n  if (loc) {\n    t.assertLiteral(loc);\n\n    if (loc.value === -1) {\n      // If an uninitialized location literal was passed in, set its value\n      // to the current this.listing.length.\n      loc.value = this.listing.length;\n    } else {\n      // Otherwise assert that the location matches the current offset.\n      assert.strictEqual(loc.value, this.listing.length);\n    }\n\n  } else {\n    loc = this.getUnmarkedCurrentLoc();\n  }\n\n  // Make sure context.prev is up to date in case we fell into this try\n  // statement without jumping to it. TODO Consider avoiding this\n  // assignment when we know control must have jumped here.\n  this.emitAssign(this.contextProperty(\"prev\"), loc);\n};\n\n\n// In order to save the rest of explodeExpression from a combinatorial\n// trainwreck of special cases, explodeViaTempVar is responsible for\n// deciding when a subexpression needs to be \"exploded,\" which is my\n// very technical term for emitting the subexpression as an assignment\n// to a temporary variable and the substituting the temporary variable\n// for the original subexpression. Think of exploded view diagrams, not\n// Michael Bay movies. The point of exploding subexpressions is to\n// control the precise order in which the generated code realizes the\n// side effects of those subexpressions.\nEp.explodeViaTempVar = function(tempVar, childPath, hasLeapingChildren, ignoreChildResult) {\n  assert.ok(\n    !ignoreChildResult || !tempVar,\n    \"Ignoring the result of a child expression but forcing it to \" +\n      \"be assigned to a temporary variable?\"\n  );\n  const t = util.getTypes();\n\n  let result = this.explodeExpression(childPath, ignoreChildResult);\n\n  if (ignoreChildResult) {\n    // Side effects already emitted above.\n\n  } else if (tempVar || (hasLeapingChildren &&\n                          !t.isLiteral(result))) {\n    // If tempVar was provided, then the result will always be assigned\n    // to it, even if the result does not otherwise need to be assigned\n    // to a temporary variable.  When no tempVar is provided, we have\n    // the flexibility to decide whether a temporary variable is really\n    // necessary.  Unfortunately, in general, a temporary variable is\n    // required whenever any child contains a yield expression, since it\n    // is difficult to prove (at all, let alone efficiently) whether\n    // this result would evaluate to the same value before and after the\n    // yield (see #206).  One narrow case where we can prove it doesn't\n    // matter (and thus we do not need a temporary variable) is when the\n    // result in question is a Literal value.\n    result = this.emitAssign(\n      tempVar || this.makeTempVar(),\n      result\n    );\n  }\n  return result;\n};\n\nEp.explodeExpression = function(path, ignoreResult) {\n  const t = util.getTypes();\n  let expr = path.node;\n  if (expr) {\n    t.assertExpression(expr);\n  } else {\n    return expr;\n  }\n\n  let self = this;\n  let result; // Used optionally by several cases below.\n  let after;\n\n  function finish(expr) {\n    t.assertExpression(expr);\n    if (ignoreResult) {\n      self.emit(expr);\n    }\n    return expr;\n  }\n\n  // If the expression does not contain a leap, then we either emit the\n  // expression as a standalone statement or return it whole.\n  if (!meta.containsLeap(expr)) {\n    return finish(expr);\n  }\n\n  // If any child contains a leap (such as a yield or labeled continue or\n  // break statement), then any sibling subexpressions will almost\n  // certainly have to be exploded in order to maintain the order of their\n  // side effects relative to the leaping child(ren).\n  let hasLeapingChildren = meta.containsLeap.onlyChildren(expr);\n\n  // If ignoreResult is true, then we must take full responsibility for\n  // emitting the expression with all its side effects, and we should not\n  // return a result.\n\n  switch (expr.type) {\n  case \"MemberExpression\":\n    return finish(t.memberExpression(\n      self.explodeExpression(path.get(\"object\")),\n      expr.computed\n        ? self.explodeViaTempVar(null, path.get(\"property\"), hasLeapingChildren)\n        : expr.property,\n      expr.computed\n    ));\n\n  case \"CallExpression\":\n    let calleePath = path.get(\"callee\");\n    let argsPath = path.get(\"arguments\");\n\n    let newCallee;\n    let newArgs;\n\n    let hasLeapingArgs = argsPath.some(\n      argPath => meta.containsLeap(argPath.node)\n    );\n\n    let injectFirstArg = null;\n\n    if (t.isMemberExpression(calleePath.node)) {\n      if (hasLeapingArgs) {\n        // If the arguments of the CallExpression contained any yield\n        // expressions, then we need to be sure to evaluate the callee\n        // before evaluating the arguments, but if the callee was a member\n        // expression, then we must be careful that the object of the\n        // member expression still gets bound to `this` for the call.\n\n        let newObject = self.explodeViaTempVar(\n          // Assign the exploded callee.object expression to a temporary\n          // variable so that we can use it twice without reevaluating it.\n          self.makeTempVar(),\n          calleePath.get(\"object\"),\n          hasLeapingChildren\n        );\n\n        let newProperty = calleePath.node.computed\n          ? self.explodeViaTempVar(null, calleePath.get(\"property\"), hasLeapingChildren)\n          : calleePath.node.property;\n\n        injectFirstArg = newObject;\n\n        newCallee = t.memberExpression(\n          t.memberExpression(\n            t.cloneDeep(newObject),\n            newProperty,\n            calleePath.node.computed\n          ),\n          t.identifier(\"call\"),\n          false\n        );\n\n      } else {\n        newCallee = self.explodeExpression(calleePath);\n      }\n\n    } else {\n      newCallee = self.explodeViaTempVar(null, calleePath, hasLeapingChildren);\n\n      if (t.isMemberExpression(newCallee)) {\n        // If the callee was not previously a MemberExpression, then the\n        // CallExpression was \"unqualified,\" meaning its `this` object\n        // should be the global object. If the exploded expression has\n        // become a MemberExpression (e.g. a context property, probably a\n        // temporary variable), then we need to force it to be unqualified\n        // by using the (0, object.property)(...) trick; otherwise, it\n        // will receive the object of the MemberExpression as its `this`\n        // object.\n        newCallee = t.sequenceExpression([\n          t.numericLiteral(0),\n          t.cloneDeep(newCallee)\n        ]);\n      }\n    }\n\n    if (hasLeapingArgs) {\n      newArgs = argsPath.map(argPath => self.explodeViaTempVar(null, argPath, hasLeapingChildren));\n      if (injectFirstArg) newArgs.unshift(injectFirstArg);\n\n      newArgs = newArgs.map(arg => t.cloneDeep(arg));\n    } else {\n      newArgs = path.node.arguments;\n    }\n\n    return finish(t.callExpression(newCallee, newArgs));\n\n  case \"NewExpression\":\n    return finish(t.newExpression(\n     self.explodeViaTempVar(null, path.get(\"callee\"), hasLeapingChildren),\n       path.get(\"arguments\").map(function(argPath) {\n        return self.explodeViaTempVar(null, argPath, hasLeapingChildren);\n      })\n    ));\n\n  case \"ObjectExpression\":\n    return finish(t.objectExpression(\n      path.get(\"properties\").map(function(propPath) {\n        if (propPath.isObjectProperty()) {\n          return t.objectProperty(\n            propPath.node.key,\n            self.explodeViaTempVar(null, propPath.get(\"value\"), hasLeapingChildren),\n            propPath.node.computed\n          );\n        } else {\n          return propPath.node;\n        }\n      })\n    ));\n\n  case \"ArrayExpression\":\n    return finish(t.arrayExpression(\n      path.get(\"elements\").map(function(elemPath) {\n        if (elemPath.isSpreadElement()) {\n          return t.spreadElement(\n            self.explodeViaTempVar(null, elemPath.get(\"argument\"), hasLeapingChildren)\n          );\n        } else {\n          return self.explodeViaTempVar(null, elemPath, hasLeapingChildren);\n        }\n      })\n    ));\n\n  case \"SequenceExpression\":\n    let lastIndex = expr.expressions.length - 1;\n\n    path.get(\"expressions\").forEach(function(exprPath) {\n      if (exprPath.key === lastIndex) {\n        result = self.explodeExpression(exprPath, ignoreResult);\n      } else {\n        self.explodeExpression(exprPath, true);\n      }\n    });\n\n    return result;\n\n  case \"LogicalExpression\":\n    after = this.loc();\n\n    if (!ignoreResult) {\n      result = self.makeTempVar();\n    }\n\n    let left = self.explodeViaTempVar(result, path.get(\"left\"), hasLeapingChildren);\n\n    if (expr.operator === \"&&\") {\n      self.jumpIfNot(left, after);\n    } else {\n      assert.strictEqual(expr.operator, \"||\");\n      self.jumpIf(left, after);\n    }\n\n    self.explodeViaTempVar(result, path.get(\"right\"), hasLeapingChildren, ignoreResult);\n\n    self.mark(after);\n\n    return result;\n\n  case \"ConditionalExpression\":\n    let elseLoc = this.loc();\n    after = this.loc();\n    let test = self.explodeExpression(path.get(\"test\"));\n\n    self.jumpIfNot(test, elseLoc);\n\n    if (!ignoreResult) {\n      result = self.makeTempVar();\n    }\n\n    self.explodeViaTempVar(result, path.get(\"consequent\"), hasLeapingChildren, ignoreResult);\n    self.jump(after);\n\n    self.mark(elseLoc);\n    self.explodeViaTempVar(result, path.get(\"alternate\"), hasLeapingChildren, ignoreResult);\n\n    self.mark(after);\n\n    return result;\n\n  case \"UnaryExpression\":\n    return finish(t.unaryExpression(\n      expr.operator,\n      // Can't (and don't need to) break up the syntax of the argument.\n      // Think about delete a[b].\n      self.explodeExpression(path.get(\"argument\")),\n      !!expr.prefix\n    ));\n\n  case \"BinaryExpression\":\n    return finish(t.binaryExpression(\n      expr.operator,\n      self.explodeViaTempVar(null, path.get(\"left\"), hasLeapingChildren),\n      self.explodeViaTempVar(null, path.get(\"right\"), hasLeapingChildren)\n    ));\n\n  case \"AssignmentExpression\":\n    if (expr.operator === \"=\") {\n      // If this is a simple assignment, the left hand side does not need\n      // to be read before the right hand side is evaluated, so we can\n      // avoid the more complicated logic below.\n      return finish(t.assignmentExpression(\n        expr.operator,\n        self.explodeExpression(path.get(\"left\")),\n        self.explodeExpression(path.get(\"right\"))\n      ));\n    }\n\n    const lhs = self.explodeExpression(path.get(\"left\"));\n    const temp = self.emitAssign(self.makeTempVar(), lhs);\n\n    // For example,\n    //\n    //   x += yield y\n    //\n    // becomes\n    //\n    //   context.t0 = x\n    //   x = context.t0 += yield y\n    //\n    // so that the left-hand side expression is read before the yield.\n    // Fixes https://github.com/facebook/regenerator/issues/345.\n\n    return finish(t.assignmentExpression(\n      \"=\",\n      t.cloneDeep(lhs),\n      t.assignmentExpression(\n        expr.operator,\n        t.cloneDeep(temp),\n        self.explodeExpression(path.get(\"right\"))\n      )\n    ));\n\n  case \"UpdateExpression\":\n    return finish(t.updateExpression(\n      expr.operator,\n      self.explodeExpression(path.get(\"argument\")),\n      expr.prefix\n    ));\n\n  case \"YieldExpression\":\n    after = this.loc();\n    let arg = expr.argument && self.explodeExpression(path.get(\"argument\"));\n\n    if (arg && expr.delegate) {\n      let result = self.makeTempVar();\n\n      let ret = t.returnStatement(t.callExpression(\n        self.contextProperty(\"delegateYield\"),\n        [\n          arg,\n          t.stringLiteral(result.property.name),\n          after\n        ]\n      ));\n      ret.loc = expr.loc;\n\n      self.emit(ret);\n      self.mark(after);\n\n      return result;\n    }\n\n    self.emitAssign(self.contextProperty(\"next\"), after);\n\n    let ret = t.returnStatement(t.cloneDeep(arg) || null);\n    // Preserve the `yield` location so that source mappings for the statements\n    // link back to the yield properly.\n    ret.loc = expr.loc;\n    self.emit(ret);\n    self.mark(after);\n\n    return self.contextProperty(\"sent\");\n\n  case \"ClassExpression\":\n    return finish(self.explodeClass(path));\n\n  default:\n    throw new Error(\n      \"unknown Expression of type \" +\n        JSON.stringify(expr.type));\n  }\n};\n\nEp.explodeClass = function(path) {\n  const explodingChildren = [];\n\n  if (path.node.superClass) {\n    explodingChildren.push(path.get(\"superClass\"));\n  }\n\n  path.get(\"body.body\").forEach(member => {\n    if (member.node.computed) {\n      explodingChildren.push(member.get(\"key\"));\n    }\n  });\n\n  const hasLeapingChildren = explodingChildren.some(\n    child => meta.containsLeap(child));\n\n  for (let i = 0; i < explodingChildren.length; i++) {\n    const child = explodingChildren[i];\n    const isLast = i === explodingChildren.length - 1;\n\n    if (isLast) {\n      child.replaceWith(this.explodeExpression(child));\n    } else {\n      child.replaceWith(this.explodeViaTempVar(null, child, hasLeapingChildren));\n    }\n  }\n\n  return path.node;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}