{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar helperPluginUtils = require('@babel/helper-plugin-utils');\n\nvar syntaxOptionalChaining = require('@babel/plugin-syntax-optional-chaining');\n\nvar core = require('@babel/core');\n\nvar helperSkipTransparentExpressionWrappers = require('@babel/helper-skip-transparent-expression-wrappers');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar syntaxOptionalChaining__default = /*#__PURE__*/_interopDefaultLegacy(syntaxOptionalChaining);\n\nfunction willPathCastToBoolean(path) {\n  const maybeWrapped = findOutermostTransparentParent(path);\n  const {\n    node,\n    parentPath\n  } = maybeWrapped;\n\n  if (parentPath.isLogicalExpression()) {\n    const {\n      operator,\n      right\n    } = parentPath.node;\n\n    if (operator === \"&&\" || operator === \"||\" || operator === \"??\" && node === right) {\n      return willPathCastToBoolean(parentPath);\n    }\n  }\n\n  if (parentPath.isSequenceExpression()) {\n    const {\n      expressions\n    } = parentPath.node;\n\n    if (expressions[expressions.length - 1] === node) {\n      return willPathCastToBoolean(parentPath);\n    } else {\n      return true;\n    }\n  }\n\n  return parentPath.isConditional({\n    test: node\n  }) || parentPath.isUnaryExpression({\n    operator: \"!\"\n  }) || parentPath.isLoop({\n    test: node\n  });\n}\n\nfunction findOutermostTransparentParent(path) {\n  let maybeWrapped = path;\n  path.findParent(p => {\n    if (!helperSkipTransparentExpressionWrappers.isTransparentExprWrapper(p.node)) return true;\n    maybeWrapped = p;\n  });\n  return maybeWrapped;\n}\n\nconst {\n  ast\n} = core.template.expression;\n\nfunction isSimpleMemberExpression(expression) {\n  expression = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(expression);\n  return core.types.isIdentifier(expression) || core.types.isSuper(expression) || core.types.isMemberExpression(expression) && !expression.computed && isSimpleMemberExpression(expression.object);\n}\n\nfunction needsMemoize(path) {\n  let optionalPath = path;\n  const {\n    scope\n  } = path;\n\n  while (optionalPath.isOptionalMemberExpression() || optionalPath.isOptionalCallExpression()) {\n    const {\n      node\n    } = optionalPath;\n    const childPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.isOptionalMemberExpression() ? optionalPath.get(\"object\") : optionalPath.get(\"callee\"));\n\n    if (node.optional) {\n      return !scope.isStatic(childPath.node);\n    }\n\n    optionalPath = childPath;\n  }\n}\n\nfunction transform(path, _ref) {\n  let {\n    pureGetters,\n    noDocumentAll\n  } = _ref;\n  const {\n    scope\n  } = path;\n  const maybeWrapped = findOutermostTransparentParent(path);\n  const {\n    parentPath\n  } = maybeWrapped;\n  const willReplacementCastToBoolean = willPathCastToBoolean(maybeWrapped);\n  let isDeleteOperation = false;\n  const parentIsCall = parentPath.isCallExpression({\n    callee: maybeWrapped.node\n  }) && path.isOptionalMemberExpression();\n  const optionals = [];\n  let optionalPath = path;\n\n  if (scope.path.isPattern() && needsMemoize(optionalPath)) {\n    path.replaceWith(core.template.ast`(() => ${path.node})()`);\n    return;\n  }\n\n  while (optionalPath.isOptionalMemberExpression() || optionalPath.isOptionalCallExpression()) {\n    const {\n      node\n    } = optionalPath;\n\n    if (node.optional) {\n      optionals.push(node);\n    }\n\n    if (optionalPath.isOptionalMemberExpression()) {\n      optionalPath.node.type = \"MemberExpression\";\n      optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get(\"object\"));\n    } else if (optionalPath.isOptionalCallExpression()) {\n      optionalPath.node.type = \"CallExpression\";\n      optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get(\"callee\"));\n    }\n  }\n\n  let replacementPath = path;\n\n  if (parentPath.isUnaryExpression({\n    operator: \"delete\"\n  })) {\n    replacementPath = parentPath;\n    isDeleteOperation = true;\n  }\n\n  for (let i = optionals.length - 1; i >= 0; i--) {\n    const node = optionals[i];\n    const isCall = core.types.isCallExpression(node);\n    const chainWithTypes = isCall ? node.callee : node.object;\n    const chain = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(chainWithTypes);\n    let ref;\n    let check;\n\n    if (isCall && core.types.isIdentifier(chain, {\n      name: \"eval\"\n    })) {\n      check = ref = chain;\n      node.callee = core.types.sequenceExpression([core.types.numericLiteral(0), ref]);\n    } else if (pureGetters && isCall && isSimpleMemberExpression(chain)) {\n      check = ref = node.callee;\n    } else {\n      ref = scope.maybeGenerateMemoised(chain);\n\n      if (ref) {\n        check = core.types.assignmentExpression(\"=\", core.types.cloneNode(ref), chainWithTypes);\n        isCall ? node.callee = ref : node.object = ref;\n      } else {\n        check = ref = chainWithTypes;\n      }\n    }\n\n    if (isCall && core.types.isMemberExpression(chain)) {\n      if (pureGetters && isSimpleMemberExpression(chain)) {\n        node.callee = chainWithTypes;\n      } else {\n        const {\n          object\n        } = chain;\n        let context;\n\n        if (core.types.isSuper(object)) {\n          context = core.types.thisExpression();\n        } else {\n          const memoized = scope.maybeGenerateMemoised(object);\n\n          if (memoized) {\n            context = memoized;\n            chain.object = core.types.assignmentExpression(\"=\", memoized, object);\n          } else {\n            context = object;\n          }\n        }\n\n        node.arguments.unshift(core.types.cloneNode(context));\n        node.callee = core.types.memberExpression(node.callee, core.types.identifier(\"call\"));\n      }\n    }\n\n    let replacement = replacementPath.node;\n\n    if (i === 0 && parentIsCall) {\n      var _baseRef;\n\n      const object = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(replacement.object);\n      let baseRef;\n\n      if (!pureGetters || !isSimpleMemberExpression(object)) {\n        baseRef = scope.maybeGenerateMemoised(object);\n\n        if (baseRef) {\n          replacement.object = core.types.assignmentExpression(\"=\", baseRef, object);\n        }\n      }\n\n      replacement = core.types.callExpression(core.types.memberExpression(replacement, core.types.identifier(\"bind\")), [core.types.cloneNode((_baseRef = baseRef) != null ? _baseRef : object)]);\n    }\n\n    if (willReplacementCastToBoolean) {\n      const nonNullishCheck = noDocumentAll ? ast`${core.types.cloneNode(check)} != null` : ast`\n            ${core.types.cloneNode(check)} !== null && ${core.types.cloneNode(ref)} !== void 0`;\n      replacementPath.replaceWith(core.types.logicalExpression(\"&&\", nonNullishCheck, replacement));\n      replacementPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(replacementPath.get(\"right\"));\n    } else {\n      const nullishCheck = noDocumentAll ? ast`${core.types.cloneNode(check)} == null` : ast`\n            ${core.types.cloneNode(check)} === null || ${core.types.cloneNode(ref)} === void 0`;\n      const returnValue = isDeleteOperation ? ast`true` : ast`void 0`;\n      replacementPath.replaceWith(core.types.conditionalExpression(nullishCheck, returnValue, replacement));\n      replacementPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(replacementPath.get(\"alternate\"));\n    }\n  }\n}\n\nvar index = helperPluginUtils.declare((api, options) => {\n  var _api$assumption, _api$assumption2;\n\n  api.assertVersion(7);\n  const {\n    loose = false\n  } = options;\n  const noDocumentAll = (_api$assumption = api.assumption(\"noDocumentAll\")) != null ? _api$assumption : loose;\n  const pureGetters = (_api$assumption2 = api.assumption(\"pureGetters\")) != null ? _api$assumption2 : loose;\n  return {\n    name: \"proposal-optional-chaining\",\n    inherits: syntaxOptionalChaining__default[\"default\"].default,\n    visitor: {\n      \"OptionalCallExpression|OptionalMemberExpression\"(path) {\n        transform(path, {\n          noDocumentAll,\n          pureGetters\n        });\n      }\n\n    }\n  };\n});\nexports[\"default\"] = index;\nexports.transform = transform;","map":{"version":3,"mappings":"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","names":["willPathCastToBoolean","path","maybeWrapped","findOutermostTransparentParent","node","parentPath","isLogicalExpression","operator","right","isSequenceExpression","expressions","length","isConditional","test","isUnaryExpression","isLoop","findParent","p","isTransparentExprWrapper","ast","template","expression","isSimpleMemberExpression","skipTransparentExprWrapperNodes","t","isIdentifier","isSuper","isMemberExpression","computed","object","needsMemoize","optionalPath","scope","isOptionalMemberExpression","isOptionalCallExpression","childPath","skipTransparentExprWrappers","get","optional","isStatic","transform","pureGetters","noDocumentAll","willReplacementCastToBoolean","isDeleteOperation","parentIsCall","isCallExpression","callee","optionals","isPattern","replaceWith","push","type","replacementPath","i","isCall","chainWithTypes","chain","ref","check","name","sequenceExpression","numericLiteral","maybeGenerateMemoised","assignmentExpression","cloneNode","context","thisExpression","memoized","arguments","unshift","memberExpression","identifier","replacement","baseRef","callExpression","nonNullishCheck","logicalExpression","nullishCheck","returnValue","conditionalExpression","declare","api","options","assertVersion","loose","assumption","inherits","syntaxOptionalChaining","default","visitor"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\plugin-proposal-optional-chaining\\src\\util.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\plugin-proposal-optional-chaining\\src\\transform.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\plugin-proposal-optional-chaining\\src\\index.ts"],"sourcesContent":["import type { NodePath } from \"@babel/traverse\";\nimport { isTransparentExprWrapper } from \"@babel/helper-skip-transparent-expression-wrappers\";\n/**\n * Test if a NodePath will be cast to boolean when evaluated.\n * It respects transparent expression wrappers defined in\n * \"@babel/helper-skip-transparent-expression-wrappers\"\n *\n * @example\n * // returns true\n * const nodePathADotB = NodePath(\"if (a.b) {}\").get(\"test\"); // a.b\n * willPathCastToBoolean(nodePathADotB)\n * @example\n * // returns false\n * willPathCastToBoolean(NodePath(\"a.b\"))\n * @param {NodePath} path\n * @returns {boolean}\n */\nexport function willPathCastToBoolean(path: NodePath): boolean {\n  const maybeWrapped = findOutermostTransparentParent(path);\n  const { node, parentPath } = maybeWrapped;\n  if (parentPath.isLogicalExpression()) {\n    const { operator, right } = parentPath.node;\n    if (\n      operator === \"&&\" ||\n      operator === \"||\" ||\n      (operator === \"??\" && node === right)\n    ) {\n      return willPathCastToBoolean(parentPath);\n    }\n  }\n  if (parentPath.isSequenceExpression()) {\n    const { expressions } = parentPath.node;\n    if (expressions[expressions.length - 1] === node) {\n      return willPathCastToBoolean(parentPath);\n    } else {\n      // if it is in the middle of a sequence expression, we don't\n      // care the return value so just cast to boolean for smaller\n      // output\n      return true;\n    }\n  }\n  return (\n    parentPath.isConditional({ test: node }) ||\n    parentPath.isUnaryExpression({ operator: \"!\" }) ||\n    parentPath.isLoop({ test: node })\n  );\n}\n\n/**\n * Return the outermost transparent expression wrapper of a given path,\n * otherwise returns path itself.\n * @example\n * const nodePathADotB = NodePath(\"(a.b as any)\").get(\"expression\"); // a.b\n * // returns NodePath(\"(a.b as any)\")\n * findOutermostTransparentParent(nodePathADotB);\n * @param {NodePath} path\n * @returns {NodePath}\n */\nexport function findOutermostTransparentParent(path: NodePath): NodePath {\n  let maybeWrapped = path;\n  path.findParent(p => {\n    if (!isTransparentExprWrapper(p.node)) return true;\n    maybeWrapped = p;\n  });\n  return maybeWrapped;\n}\n","import { types as t, template } from \"@babel/core\";\nimport type { NodePath } from \"@babel/traverse\";\nimport {\n  skipTransparentExprWrapperNodes,\n  skipTransparentExprWrappers,\n} from \"@babel/helper-skip-transparent-expression-wrappers\";\nimport { willPathCastToBoolean, findOutermostTransparentParent } from \"./util\";\n\nconst { ast } = template.expression;\n\nfunction isSimpleMemberExpression(\n  expression: t.Expression | t.Super,\n): expression is t.Identifier | t.Super | t.MemberExpression {\n  expression = skipTransparentExprWrapperNodes(expression);\n  return (\n    t.isIdentifier(expression) ||\n    t.isSuper(expression) ||\n    (t.isMemberExpression(expression) &&\n      !expression.computed &&\n      isSimpleMemberExpression(expression.object))\n  );\n}\n\n/**\n * Test if a given optional chain `path` needs to be memoized\n * @param {NodePath} path\n * @returns {boolean}\n */\nfunction needsMemoize(\n  path: NodePath<t.OptionalCallExpression | t.OptionalMemberExpression>,\n) {\n  let optionalPath: NodePath = path;\n  const { scope } = path;\n  while (\n    optionalPath.isOptionalMemberExpression() ||\n    optionalPath.isOptionalCallExpression()\n  ) {\n    const { node } = optionalPath;\n    const childPath = skipTransparentExprWrappers(\n      // @ts-expect-error isOptionalMemberExpression does not work with NodePath union\n      optionalPath.isOptionalMemberExpression()\n        ? optionalPath.get(\"object\")\n        : optionalPath.get(\"callee\"),\n    );\n    if (node.optional) {\n      return !scope.isStatic(childPath.node);\n    }\n\n    optionalPath = childPath;\n  }\n}\n\nexport function transform(\n  path: NodePath<t.OptionalCallExpression | t.OptionalMemberExpression>,\n  {\n    pureGetters,\n    noDocumentAll,\n  }: { pureGetters: boolean; noDocumentAll: boolean },\n) {\n  const { scope } = path;\n  // maybeWrapped points to the outermost transparent expression wrapper\n  // or the path itself\n  const maybeWrapped = findOutermostTransparentParent(path);\n  const { parentPath } = maybeWrapped;\n  const willReplacementCastToBoolean = willPathCastToBoolean(maybeWrapped);\n  let isDeleteOperation = false;\n  const parentIsCall =\n    parentPath.isCallExpression({ callee: maybeWrapped.node }) &&\n    // note that the first condition must implies that `path.optional` is `true`,\n    // otherwise the parentPath should be an OptionalCallExpression\n    path.isOptionalMemberExpression();\n\n  const optionals = [];\n\n  let optionalPath = path;\n  // Replace `function (a, x = a.b?.c) {}` to `function (a, x = (() => a.b?.c)() ){}`\n  // so the temporary variable can be injected in correct scope\n  if (scope.path.isPattern() && needsMemoize(optionalPath)) {\n    path.replaceWith(template.ast`(() => ${path.node})()` as t.Statement);\n    // The injected optional chain will be queued and eventually transformed when visited\n    return;\n  }\n  while (\n    optionalPath.isOptionalMemberExpression() ||\n    optionalPath.isOptionalCallExpression()\n  ) {\n    const { node } = optionalPath;\n    if (node.optional) {\n      optionals.push(node);\n    }\n    // @ts-expect-error isOptionalMemberExpression does not work with NodePath union\n    if (optionalPath.isOptionalMemberExpression()) {\n      // @ts-expect-error todo(flow->ts) avoid changing more type\n      optionalPath.node.type = \"MemberExpression\";\n      // @ts-expect-error todo(flow->ts)\n      optionalPath = skipTransparentExprWrappers(optionalPath.get(\"object\"));\n    } else if (optionalPath.isOptionalCallExpression()) {\n      // @ts-expect-error todo(flow->ts) avoid changing more type\n      optionalPath.node.type = \"CallExpression\";\n      // @ts-expect-error todo(flow->ts)\n      optionalPath = skipTransparentExprWrappers(optionalPath.get(\"callee\"));\n    }\n  }\n\n  // todo: Improve replacementPath typings\n  let replacementPath: NodePath<any> = path;\n  if (parentPath.isUnaryExpression({ operator: \"delete\" })) {\n    replacementPath = parentPath;\n    isDeleteOperation = true;\n  }\n  for (let i = optionals.length - 1; i >= 0; i--) {\n    const node = optionals[i] as unknown as\n      | t.MemberExpression\n      | t.CallExpression;\n\n    const isCall = t.isCallExpression(node);\n\n    const chainWithTypes = isCall\n      ? // V8 intrinsics must not be an optional call\n        (node.callee as t.Expression)\n      : node.object;\n    const chain = skipTransparentExprWrapperNodes(chainWithTypes);\n\n    let ref;\n    let check;\n    if (isCall && t.isIdentifier(chain, { name: \"eval\" })) {\n      check = ref = chain;\n      // `eval?.()` is an indirect eval call transformed to `(0,eval)()`\n      node.callee = t.sequenceExpression([t.numericLiteral(0), ref]);\n    } else if (pureGetters && isCall && isSimpleMemberExpression(chain)) {\n      // If we assume getters are pure (avoiding a Function#call) and we are at the call,\n      // we can avoid a needless memoize. We only do this if the callee is a simple member\n      // expression, to avoid multiple calls to nested call expressions.\n      check = ref = node.callee;\n    } else {\n      ref = scope.maybeGenerateMemoised(chain);\n      if (ref) {\n        check = t.assignmentExpression(\n          \"=\",\n          t.cloneNode(ref),\n          // Here `chainWithTypes` MUST NOT be cloned because it could be\n          // updated when generating the memoised context of a call\n          // expression. It must be an Expression when `ref` is an identifier\n          chainWithTypes as t.Expression,\n        );\n\n        isCall ? (node.callee = ref) : (node.object = ref);\n      } else {\n        check = ref = chainWithTypes;\n      }\n    }\n\n    // Ensure call expressions have the proper `this`\n    // `foo.bar()` has context `foo`.\n    if (isCall && t.isMemberExpression(chain)) {\n      if (pureGetters && isSimpleMemberExpression(chain)) {\n        // To avoid a Function#call, we can instead re-grab the property from the context object.\n        // `a.?b.?()` translates roughly to `_a.b != null && _a.b()`\n        node.callee = chainWithTypes;\n      } else {\n        // Otherwise, we need to memoize the context object, and change the call into a Function#call.\n        // `a.?b.?()` translates roughly to `(_b = _a.b) != null && _b.call(_a)`\n        const { object } = chain;\n        let context: t.Expression;\n        if (t.isSuper(object)) {\n          context = t.thisExpression();\n        } else {\n          const memoized = scope.maybeGenerateMemoised(object);\n          if (memoized) {\n            context = memoized;\n            chain.object = t.assignmentExpression(\"=\", memoized, object);\n          } else {\n            context = object;\n          }\n        }\n\n        node.arguments.unshift(t.cloneNode(context));\n        // @ts-expect-error node.callee can not be an V8IntrinsicIdentifier: V8 intrinsic is disallowed in optional chain\n        node.callee = t.memberExpression(node.callee, t.identifier(\"call\"));\n      }\n    }\n    let replacement = replacementPath.node;\n    // Ensure (a?.b)() has proper `this`\n    // The `parentIsCall` is constant within loop, we should check i === 0\n    // to ensure that it is only applied to the first optional chain element\n    // i.e. `?.b` in `(a?.b.c)()`\n    if (i === 0 && parentIsCall) {\n      // `(a?.b)()` to `(a == null ? undefined : a.b.bind(a))()`\n      // object must not be Super as super?.foo is invalid\n      const object = skipTransparentExprWrapperNodes(\n        replacement.object,\n      ) as t.Expression;\n      let baseRef;\n      if (!pureGetters || !isSimpleMemberExpression(object)) {\n        // memoize the context object when getters are not always pure\n        // or the object is not a simple member expression\n        // `(a?.b.c)()` to `(a == null ? undefined : (_a$b = a.b).c.bind(_a$b))()`\n        baseRef = scope.maybeGenerateMemoised(object);\n        if (baseRef) {\n          replacement.object = t.assignmentExpression(\"=\", baseRef, object);\n        }\n      }\n      replacement = t.callExpression(\n        t.memberExpression(replacement, t.identifier(\"bind\")),\n        [t.cloneNode(baseRef ?? object)],\n      );\n    }\n\n    if (willReplacementCastToBoolean) {\n      // `if (a?.b) {}` transformed to `if (a != null && a.b) {}`\n      // we don't need to return `void 0` because the returned value will\n      // eveutally cast to boolean.\n      const nonNullishCheck = noDocumentAll\n        ? ast`${t.cloneNode(check)} != null`\n        : ast`\n            ${t.cloneNode(check)} !== null && ${t.cloneNode(ref)} !== void 0`;\n      replacementPath.replaceWith(\n        t.logicalExpression(\"&&\", nonNullishCheck, replacement),\n      );\n      replacementPath = skipTransparentExprWrappers(\n        // @ts-expect-error todo(flow->ts)\n        replacementPath.get(\"right\"),\n      );\n    } else {\n      const nullishCheck = noDocumentAll\n        ? ast`${t.cloneNode(check)} == null`\n        : ast`\n            ${t.cloneNode(check)} === null || ${t.cloneNode(ref)} === void 0`;\n\n      const returnValue = isDeleteOperation ? ast`true` : ast`void 0`;\n      replacementPath.replaceWith(\n        t.conditionalExpression(nullishCheck, returnValue, replacement),\n      );\n      replacementPath = skipTransparentExprWrappers(\n        // @ts-expect-error todo(flow->ts)\n        replacementPath.get(\"alternate\"),\n      );\n    }\n  }\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport syntaxOptionalChaining from \"@babel/plugin-syntax-optional-chaining\";\nimport { transform } from \"./transform\";\nimport type { NodePath } from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\n\nexport interface Options {\n  loose?: boolean;\n}\nexport default declare((api, options: Options) => {\n  api.assertVersion(7);\n\n  const { loose = false } = options;\n  const noDocumentAll = (api.assumption(\"noDocumentAll\") ?? loose) as boolean;\n  const pureGetters = (api.assumption(\"pureGetters\") ?? loose) as boolean;\n\n  return {\n    name: \"proposal-optional-chaining\",\n    inherits: syntaxOptionalChaining.default,\n\n    visitor: {\n      \"OptionalCallExpression|OptionalMemberExpression\"(\n        path: NodePath<t.OptionalCallExpression | t.OptionalMemberExpression>,\n      ) {\n        transform(path, { noDocumentAll, pureGetters });\n      },\n    },\n  };\n});\n\nexport { transform };\n"]},"metadata":{},"sourceType":"script"}