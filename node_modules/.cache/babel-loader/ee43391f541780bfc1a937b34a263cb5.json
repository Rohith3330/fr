{"ast":null,"code":"/**\n * @fileoverview Rule to flag dangling underscores in variable declarations.\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow dangling underscores in identifiers\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-underscore-dangle\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allow: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        },\n        allowAfterThis: {\n          type: \"boolean\",\n          default: false\n        },\n        allowAfterSuper: {\n          type: \"boolean\",\n          default: false\n        },\n        allowAfterThisConstructor: {\n          type: \"boolean\",\n          default: false\n        },\n        enforceInMethodNames: {\n          type: \"boolean\",\n          default: false\n        },\n        allowFunctionParams: {\n          type: \"boolean\",\n          default: true\n        },\n        enforceInClassFields: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedUnderscore: \"Unexpected dangling '_' in '{{identifier}}'.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const ALLOWED_VARIABLES = options.allow ? options.allow : [];\n    const allowAfterThis = typeof options.allowAfterThis !== \"undefined\" ? options.allowAfterThis : false;\n    const allowAfterSuper = typeof options.allowAfterSuper !== \"undefined\" ? options.allowAfterSuper : false;\n    const allowAfterThisConstructor = typeof options.allowAfterThisConstructor !== \"undefined\" ? options.allowAfterThisConstructor : false;\n    const enforceInMethodNames = typeof options.enforceInMethodNames !== \"undefined\" ? options.enforceInMethodNames : false;\n    const enforceInClassFields = typeof options.enforceInClassFields !== \"undefined\" ? options.enforceInClassFields : false;\n    const allowFunctionParams = typeof options.allowFunctionParams !== \"undefined\" ? options.allowFunctionParams : true; //-------------------------------------------------------------------------\n    // Helpers\n    //-------------------------------------------------------------------------\n\n    /**\n     * Check if identifier is present inside the allowed option\n     * @param {string} identifier name of the node\n     * @returns {boolean} true if its is present\n     * @private\n     */\n\n    function isAllowed(identifier) {\n      return ALLOWED_VARIABLES.includes(identifier);\n    }\n    /**\n     * Check if identifier has a dangling underscore\n     * @param {string} identifier name of the node\n     * @returns {boolean} true if its is present\n     * @private\n     */\n\n\n    function hasDanglingUnderscore(identifier) {\n      const len = identifier.length;\n      return identifier !== \"_\" && (identifier[0] === \"_\" || identifier[len - 1] === \"_\");\n    }\n    /**\n     * Check if identifier is a special case member expression\n     * @param {string} identifier name of the node\n     * @returns {boolean} true if its is a special case\n     * @private\n     */\n\n\n    function isSpecialCaseIdentifierForMemberExpression(identifier) {\n      return identifier === \"__proto__\";\n    }\n    /**\n     * Check if identifier is a special case variable expression\n     * @param {string} identifier name of the node\n     * @returns {boolean} true if its is a special case\n     * @private\n     */\n\n\n    function isSpecialCaseIdentifierInVariableExpression(identifier) {\n      // Checks for the underscore library usage here\n      return identifier === \"_\";\n    }\n    /**\n     * Check if a node is a member reference of this.constructor\n     * @param {ASTNode} node node to evaluate\n     * @returns {boolean} true if it is a reference on this.constructor\n     * @private\n     */\n\n\n    function isThisConstructorReference(node) {\n      return node.object.type === \"MemberExpression\" && node.object.property.name === \"constructor\" && node.object.object.type === \"ThisExpression\";\n    }\n    /**\n     * Check if function parameter has a dangling underscore.\n     * @param {ASTNode} node function node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForDanglingUnderscoreInFunctionParameters(node) {\n      if (!allowFunctionParams) {\n        node.params.forEach(param => {\n          const {\n            type\n          } = param;\n          let nodeToCheck;\n\n          if (type === \"RestElement\") {\n            nodeToCheck = param.argument;\n          } else if (type === \"AssignmentPattern\") {\n            nodeToCheck = param.left;\n          } else {\n            nodeToCheck = param;\n          }\n\n          if (nodeToCheck.type === \"Identifier\") {\n            const identifier = nodeToCheck.name;\n\n            if (hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {\n              context.report({\n                node: param,\n                messageId: \"unexpectedUnderscore\",\n                data: {\n                  identifier\n                }\n              });\n            }\n          }\n        });\n      }\n    }\n    /**\n     * Check if function has a dangling underscore\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForDanglingUnderscoreInFunction(node) {\n      if (node.type === \"FunctionDeclaration\" && node.id) {\n        const identifier = node.id.name;\n\n        if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {\n          context.report({\n            node,\n            messageId: \"unexpectedUnderscore\",\n            data: {\n              identifier\n            }\n          });\n        }\n      }\n\n      checkForDanglingUnderscoreInFunctionParameters(node);\n    }\n    /**\n     * Check if variable expression has a dangling underscore\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForDanglingUnderscoreInVariableExpression(node) {\n      const identifier = node.id.name;\n\n      if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) && !isSpecialCaseIdentifierInVariableExpression(identifier) && !isAllowed(identifier)) {\n        context.report({\n          node,\n          messageId: \"unexpectedUnderscore\",\n          data: {\n            identifier\n          }\n        });\n      }\n    }\n    /**\n     * Check if member expression has a dangling underscore\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForDanglingUnderscoreInMemberExpression(node) {\n      const identifier = node.property.name,\n            isMemberOfThis = node.object.type === \"ThisExpression\",\n            isMemberOfSuper = node.object.type === \"Super\",\n            isMemberOfThisConstructor = isThisConstructorReference(node);\n\n      if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) && !(isMemberOfThis && allowAfterThis) && !(isMemberOfSuper && allowAfterSuper) && !(isMemberOfThisConstructor && allowAfterThisConstructor) && !isSpecialCaseIdentifierForMemberExpression(identifier) && !isAllowed(identifier)) {\n        context.report({\n          node,\n          messageId: \"unexpectedUnderscore\",\n          data: {\n            identifier\n          }\n        });\n      }\n    }\n    /**\n     * Check if method declaration or method property has a dangling underscore\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForDanglingUnderscoreInMethod(node) {\n      const identifier = node.key.name;\n      const isMethod = node.type === \"MethodDefinition\" || node.type === \"Property\" && node.method;\n\n      if (typeof identifier !== \"undefined\" && enforceInMethodNames && isMethod && hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {\n        context.report({\n          node,\n          messageId: \"unexpectedUnderscore\",\n          data: {\n            identifier: node.key.type === \"PrivateIdentifier\" ? `#${identifier}` : identifier\n          }\n        });\n      }\n    }\n    /**\n     * Check if a class field has a dangling underscore\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForDanglingUnderscoreInClassField(node) {\n      const identifier = node.key.name;\n\n      if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) && enforceInClassFields && !isAllowed(identifier)) {\n        context.report({\n          node,\n          messageId: \"unexpectedUnderscore\",\n          data: {\n            identifier: node.key.type === \"PrivateIdentifier\" ? `#${identifier}` : identifier\n          }\n        });\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      FunctionDeclaration: checkForDanglingUnderscoreInFunction,\n      VariableDeclarator: checkForDanglingUnderscoreInVariableExpression,\n      MemberExpression: checkForDanglingUnderscoreInMemberExpression,\n      MethodDefinition: checkForDanglingUnderscoreInMethod,\n      PropertyDefinition: checkForDanglingUnderscoreInClassField,\n      Property: checkForDanglingUnderscoreInMethod,\n      FunctionExpression: checkForDanglingUnderscoreInFunction,\n      ArrowFunctionExpression: checkForDanglingUnderscoreInFunction\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","properties","allow","items","allowAfterThis","default","allowAfterSuper","allowAfterThisConstructor","enforceInMethodNames","allowFunctionParams","enforceInClassFields","additionalProperties","messages","unexpectedUnderscore","create","context","options","ALLOWED_VARIABLES","isAllowed","identifier","includes","hasDanglingUnderscore","len","length","isSpecialCaseIdentifierForMemberExpression","isSpecialCaseIdentifierInVariableExpression","isThisConstructorReference","node","object","property","name","checkForDanglingUnderscoreInFunctionParameters","params","forEach","param","nodeToCheck","argument","left","report","messageId","data","checkForDanglingUnderscoreInFunction","id","checkForDanglingUnderscoreInVariableExpression","checkForDanglingUnderscoreInMemberExpression","isMemberOfThis","isMemberOfSuper","isMemberOfThisConstructor","checkForDanglingUnderscoreInMethod","key","isMethod","method","checkForDanglingUnderscoreInClassField","FunctionDeclaration","VariableDeclarator","MemberExpression","MethodDefinition","PropertyDefinition","Property","FunctionExpression","ArrowFunctionExpression"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-underscore-dangle.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag dangling underscores in variable declarations.\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow dangling underscores in identifiers\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-underscore-dangle\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        }\n                    },\n                    allowAfterThis: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowAfterSuper: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowAfterThisConstructor: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    enforceInMethodNames: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowFunctionParams: {\n                        type: \"boolean\",\n                        default: true\n                    },\n                    enforceInClassFields: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedUnderscore: \"Unexpected dangling '_' in '{{identifier}}'.\"\n        }\n    },\n\n    create(context) {\n\n        const options = context.options[0] || {};\n        const ALLOWED_VARIABLES = options.allow ? options.allow : [];\n        const allowAfterThis = typeof options.allowAfterThis !== \"undefined\" ? options.allowAfterThis : false;\n        const allowAfterSuper = typeof options.allowAfterSuper !== \"undefined\" ? options.allowAfterSuper : false;\n        const allowAfterThisConstructor = typeof options.allowAfterThisConstructor !== \"undefined\" ? options.allowAfterThisConstructor : false;\n        const enforceInMethodNames = typeof options.enforceInMethodNames !== \"undefined\" ? options.enforceInMethodNames : false;\n        const enforceInClassFields = typeof options.enforceInClassFields !== \"undefined\" ? options.enforceInClassFields : false;\n        const allowFunctionParams = typeof options.allowFunctionParams !== \"undefined\" ? options.allowFunctionParams : true;\n\n        //-------------------------------------------------------------------------\n        // Helpers\n        //-------------------------------------------------------------------------\n\n        /**\n         * Check if identifier is present inside the allowed option\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is present\n         * @private\n         */\n        function isAllowed(identifier) {\n            return ALLOWED_VARIABLES.includes(identifier);\n        }\n\n        /**\n         * Check if identifier has a dangling underscore\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is present\n         * @private\n         */\n        function hasDanglingUnderscore(identifier) {\n            const len = identifier.length;\n\n            return identifier !== \"_\" && (identifier[0] === \"_\" || identifier[len - 1] === \"_\");\n        }\n\n        /**\n         * Check if identifier is a special case member expression\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is a special case\n         * @private\n         */\n        function isSpecialCaseIdentifierForMemberExpression(identifier) {\n            return identifier === \"__proto__\";\n        }\n\n        /**\n         * Check if identifier is a special case variable expression\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is a special case\n         * @private\n         */\n        function isSpecialCaseIdentifierInVariableExpression(identifier) {\n\n            // Checks for the underscore library usage here\n            return identifier === \"_\";\n        }\n\n        /**\n         * Check if a node is a member reference of this.constructor\n         * @param {ASTNode} node node to evaluate\n         * @returns {boolean} true if it is a reference on this.constructor\n         * @private\n         */\n        function isThisConstructorReference(node) {\n            return node.object.type === \"MemberExpression\" &&\n                node.object.property.name === \"constructor\" &&\n                node.object.object.type === \"ThisExpression\";\n        }\n\n        /**\n         * Check if function parameter has a dangling underscore.\n         * @param {ASTNode} node function node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForDanglingUnderscoreInFunctionParameters(node) {\n            if (!allowFunctionParams) {\n                node.params.forEach(param => {\n                    const { type } = param;\n                    let nodeToCheck;\n\n                    if (type === \"RestElement\") {\n                        nodeToCheck = param.argument;\n                    } else if (type === \"AssignmentPattern\") {\n                        nodeToCheck = param.left;\n                    } else {\n                        nodeToCheck = param;\n                    }\n\n                    if (nodeToCheck.type === \"Identifier\") {\n                        const identifier = nodeToCheck.name;\n\n                        if (hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {\n                            context.report({\n                                node: param,\n                                messageId: \"unexpectedUnderscore\",\n                                data: {\n                                    identifier\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        }\n\n        /**\n         * Check if function has a dangling underscore\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForDanglingUnderscoreInFunction(node) {\n            if (node.type === \"FunctionDeclaration\" && node.id) {\n                const identifier = node.id.name;\n\n                if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {\n                    context.report({\n                        node,\n                        messageId: \"unexpectedUnderscore\",\n                        data: {\n                            identifier\n                        }\n                    });\n                }\n            }\n            checkForDanglingUnderscoreInFunctionParameters(node);\n        }\n\n        /**\n         * Check if variable expression has a dangling underscore\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForDanglingUnderscoreInVariableExpression(node) {\n            const identifier = node.id.name;\n\n            if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) &&\n                !isSpecialCaseIdentifierInVariableExpression(identifier) && !isAllowed(identifier)) {\n                context.report({\n                    node,\n                    messageId: \"unexpectedUnderscore\",\n                    data: {\n                        identifier\n                    }\n                });\n            }\n        }\n\n        /**\n         * Check if member expression has a dangling underscore\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForDanglingUnderscoreInMemberExpression(node) {\n            const identifier = node.property.name,\n                isMemberOfThis = node.object.type === \"ThisExpression\",\n                isMemberOfSuper = node.object.type === \"Super\",\n                isMemberOfThisConstructor = isThisConstructorReference(node);\n\n            if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) &&\n                !(isMemberOfThis && allowAfterThis) &&\n                !(isMemberOfSuper && allowAfterSuper) &&\n                !(isMemberOfThisConstructor && allowAfterThisConstructor) &&\n                !isSpecialCaseIdentifierForMemberExpression(identifier) && !isAllowed(identifier)) {\n                context.report({\n                    node,\n                    messageId: \"unexpectedUnderscore\",\n                    data: {\n                        identifier\n                    }\n                });\n            }\n        }\n\n        /**\n         * Check if method declaration or method property has a dangling underscore\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForDanglingUnderscoreInMethod(node) {\n            const identifier = node.key.name;\n            const isMethod = node.type === \"MethodDefinition\" || node.type === \"Property\" && node.method;\n\n            if (typeof identifier !== \"undefined\" && enforceInMethodNames && isMethod && hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {\n                context.report({\n                    node,\n                    messageId: \"unexpectedUnderscore\",\n                    data: {\n                        identifier: node.key.type === \"PrivateIdentifier\"\n                            ? `#${identifier}`\n                            : identifier\n                    }\n                });\n            }\n        }\n\n        /**\n         * Check if a class field has a dangling underscore\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForDanglingUnderscoreInClassField(node) {\n            const identifier = node.key.name;\n\n            if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) &&\n                enforceInClassFields &&\n                !isAllowed(identifier)) {\n                context.report({\n                    node,\n                    messageId: \"unexpectedUnderscore\",\n                    data: {\n                        identifier: node.key.type === \"PrivateIdentifier\"\n                            ? `#${identifier}`\n                            : identifier\n                    }\n                });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: checkForDanglingUnderscoreInFunction,\n            VariableDeclarator: checkForDanglingUnderscoreInVariableExpression,\n            MemberExpression: checkForDanglingUnderscoreInMemberExpression,\n            MethodDefinition: checkForDanglingUnderscoreInMethod,\n            PropertyDefinition: checkForDanglingUnderscoreInClassField,\n            Property: checkForDanglingUnderscoreInMethod,\n            FunctionExpression: checkForDanglingUnderscoreInFunction,\n            ArrowFunctionExpression: checkForDanglingUnderscoreInFunction\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}