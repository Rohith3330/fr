{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utilities = require(\"../utilities\");\n\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst create = context => {\n  const sourceCode = context.getSourceCode();\n  const never = (context.options[0] || 'never') === 'never';\n  return {\n    GenericTypeAnnotation(node) {\n      const types = node.typeParameters; // Promise<foo>\n      // ^^^^^^^^^^^^ GenericTypeAnnotation (with typeParameters)\n      //         ^^^  GenericTypeAnnotation (without typeParameters)\n\n      if (!types) {\n        return;\n      }\n\n      const [opener, firstInnerToken] = sourceCode.getFirstTokens(types, 2);\n      const [lastInnerToken, closer] = sourceCode.getLastTokens(types, 2);\n      const spacesBefore = firstInnerToken.range[0] - opener.range[1];\n      const spacesAfter = closer.range[0] - lastInnerToken.range[1];\n\n      if (never) {\n        if (spacesBefore) {\n          const whiteSpaceBefore = sourceCode.text[opener.range[1]];\n\n          if (whiteSpaceBefore !== '\\n' && whiteSpaceBefore !== '\\r') {\n            context.report({\n              data: {\n                name: node.id.name\n              },\n              fix: _utilities.spacingFixers.stripSpacesAfter(opener, spacesBefore),\n              message: 'There must be no space at start of \"{{name}}\" generic type annotation',\n              node: types\n            });\n          }\n        }\n\n        if (spacesAfter) {\n          const whiteSpaceAfter = sourceCode.text[closer.range[0] - 1];\n\n          if (whiteSpaceAfter !== '\\n' && whiteSpaceAfter !== '\\r') {\n            context.report({\n              data: {\n                name: node.id.name\n              },\n              fix: _utilities.spacingFixers.stripSpacesAfter(lastInnerToken, spacesAfter),\n              message: 'There must be no space at end of \"{{name}}\" generic type annotation',\n              node: types\n            });\n          }\n        }\n      } else {\n        if (spacesBefore > 1) {\n          context.report({\n            data: {\n              name: node.id.name\n            },\n            fix: _utilities.spacingFixers.stripSpacesAfter(opener, spacesBefore - 1),\n            message: 'There must be one space at start of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        } else if (spacesBefore === 0) {\n          context.report({\n            data: {\n              name: node.id.name\n            },\n            fix: _utilities.spacingFixers.addSpaceAfter(opener),\n            message: 'There must be a space at start of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        }\n\n        if (spacesAfter > 1) {\n          context.report({\n            data: {\n              name: node.id.name\n            },\n            fix: _utilities.spacingFixers.stripSpacesAfter(lastInnerToken, spacesAfter - 1),\n            message: 'There must be one space at end of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        } else if (spacesAfter === 0) {\n          context.report({\n            data: {\n              name: node.id.name\n            },\n            fix: _utilities.spacingFixers.addSpaceAfter(lastInnerToken),\n            message: 'There must be a space at end of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        }\n      }\n    }\n\n  };\n};\n\nconst meta = {\n  fixable: 'whitespace'\n};\nvar _default = {\n  create,\n  meta,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utilities","require","schema","enum","type","create","context","sourceCode","getSourceCode","never","options","GenericTypeAnnotation","node","types","typeParameters","opener","firstInnerToken","getFirstTokens","lastInnerToken","closer","getLastTokens","spacesBefore","range","spacesAfter","whiteSpaceBefore","text","report","data","name","id","fix","spacingFixers","stripSpacesAfter","message","whiteSpaceAfter","addSpaceAfter","meta","fixable","_default","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/genericSpacing.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utilities = require(\"../utilities\");\n\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst create = context => {\n  const sourceCode = context.getSourceCode();\n  const never = (context.options[0] || 'never') === 'never';\n  return {\n    GenericTypeAnnotation(node) {\n      const types = node.typeParameters; // Promise<foo>\n      // ^^^^^^^^^^^^ GenericTypeAnnotation (with typeParameters)\n      //         ^^^  GenericTypeAnnotation (without typeParameters)\n\n      if (!types) {\n        return;\n      }\n\n      const [opener, firstInnerToken] = sourceCode.getFirstTokens(types, 2);\n      const [lastInnerToken, closer] = sourceCode.getLastTokens(types, 2);\n      const spacesBefore = firstInnerToken.range[0] - opener.range[1];\n      const spacesAfter = closer.range[0] - lastInnerToken.range[1];\n\n      if (never) {\n        if (spacesBefore) {\n          const whiteSpaceBefore = sourceCode.text[opener.range[1]];\n\n          if (whiteSpaceBefore !== '\\n' && whiteSpaceBefore !== '\\r') {\n            context.report({\n              data: {\n                name: node.id.name\n              },\n              fix: _utilities.spacingFixers.stripSpacesAfter(opener, spacesBefore),\n              message: 'There must be no space at start of \"{{name}}\" generic type annotation',\n              node: types\n            });\n          }\n        }\n\n        if (spacesAfter) {\n          const whiteSpaceAfter = sourceCode.text[closer.range[0] - 1];\n\n          if (whiteSpaceAfter !== '\\n' && whiteSpaceAfter !== '\\r') {\n            context.report({\n              data: {\n                name: node.id.name\n              },\n              fix: _utilities.spacingFixers.stripSpacesAfter(lastInnerToken, spacesAfter),\n              message: 'There must be no space at end of \"{{name}}\" generic type annotation',\n              node: types\n            });\n          }\n        }\n      } else {\n        if (spacesBefore > 1) {\n          context.report({\n            data: {\n              name: node.id.name\n            },\n            fix: _utilities.spacingFixers.stripSpacesAfter(opener, spacesBefore - 1),\n            message: 'There must be one space at start of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        } else if (spacesBefore === 0) {\n          context.report({\n            data: {\n              name: node.id.name\n            },\n            fix: _utilities.spacingFixers.addSpaceAfter(opener),\n            message: 'There must be a space at start of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        }\n\n        if (spacesAfter > 1) {\n          context.report({\n            data: {\n              name: node.id.name\n            },\n            fix: _utilities.spacingFixers.stripSpacesAfter(lastInnerToken, spacesAfter - 1),\n            message: 'There must be one space at end of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        } else if (spacesAfter === 0) {\n          context.report({\n            data: {\n              name: node.id.name\n            },\n            fix: _utilities.spacingFixers.addSpaceAfter(lastInnerToken),\n            message: 'There must be a space at end of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        }\n      }\n    }\n\n  };\n};\n\nconst meta = {\n  fixable: 'whitespace'\n};\nvar _default = {\n  create,\n  meta,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}