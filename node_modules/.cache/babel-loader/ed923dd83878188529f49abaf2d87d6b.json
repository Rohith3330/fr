{"ast":null,"code":"const {\n  InvalidArgumentError\n} = require('./error.js'); // @ts-check\n\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<':\n        // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n\n      case '[':\n        // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n\n  name() {\n    return this._name;\n  }\n\n  /**\n   * @api private\n   */\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n  choices(values) {\n    this.argChoices = values;\n\n    this.parseArg = (arg, previous) => {\n      if (!values.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n\n      return arg;\n    };\n\n    return this;\n  }\n\n  /**\n   * Make option-argument required.\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n  /**\n   * Make option-argument optional.\n   */\n\n\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n\n}\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @api private\n */\n\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n  return arg.required ? '<' + nameOutput + '>' : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;","map":{"version":3,"names":["InvalidArgumentError","require","Argument","constructor","name","description","variadic","parseArg","undefined","defaultValue","defaultValueDescription","argChoices","required","_name","slice","length","_concatValue","value","previous","Array","isArray","concat","default","argParser","fn","choices","values","arg","includes","join","argRequired","argOptional","humanReadableArgName","nameOutput","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/commander/lib/argument.js"],"sourcesContent":["const { InvalidArgumentError } = require('./error.js');\n\n// @ts-check\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  };\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  };\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  };\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values;\n    this.parseArg = (arg, previous) => {\n      if (!values.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  };\n\n  /**\n   * Make option-argument required.\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make option-argument optional.\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}