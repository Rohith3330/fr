{"ast":null,"code":"'use strict';\n\nconst parsers = require('./parsers');\n\ndescribe('valueType', () => {\n  it('returns color for red', () => {\n    let input = 'red';\n    let output = parsers.valueType(input);\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n  it('returns color for #nnnnnn', () => {\n    let input = '#fefefe';\n    let output = parsers.valueType(input);\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n  it('returns color for rgb(n, n, n)', () => {\n    let input = 'rgb(10, 10, 10)';\n    let output = parsers.valueType(input);\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n  it('returns color for rgb(p, p, p)', () => {\n    let input = 'rgb(10%, 10%, 10%)';\n    let output = parsers.valueType(input);\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n  it('returns color for rgba(n, n, n, n)', () => {\n    let input = 'rgba(10, 10, 10, 1)';\n    let output = parsers.valueType(input);\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n  it('returns color for rgba(n, n, n, n) with decimal alpha', () => {\n    let input = 'rgba(10, 10, 10, 0.5)';\n    let output = parsers.valueType(input);\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n  it('returns color for rgba(p, p, p, n)', () => {\n    let input = 'rgba(10%, 10%, 10%, 1)';\n    let output = parsers.valueType(input);\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n  it('returns color for rgba(p, p, p, n) with decimal alpha', () => {\n    let input = 'rgba(10%, 10%, 10%, 0.5)';\n    let output = parsers.valueType(input);\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n  it('returns length for 100ch', () => {\n    let input = '100ch';\n    let output = parsers.valueType(input);\n    expect(output).toEqual(parsers.TYPES.LENGTH);\n  });\n  it('returns calc from calc(100px * 2)', () => {\n    let input = 'calc(100px * 2)';\n    let output = parsers.valueType(input);\n    expect(output).toEqual(parsers.TYPES.CALC);\n  });\n});\ndescribe('parseInteger', () => {\n  it.todo('test');\n});\ndescribe('parseNumber', () => {\n  it.todo('test');\n});\ndescribe('parseLength', () => {\n  it.todo('test');\n});\ndescribe('parsePercent', () => {\n  it.todo('test');\n});\ndescribe('parseMeasurement', () => {\n  it.todo('test');\n});\ndescribe('parseUrl', () => {\n  it.todo('test');\n});\ndescribe('parseString', () => {\n  it.todo('test');\n});\ndescribe('parseColor', () => {\n  it('should convert hsl to rgb values', () => {\n    let input = 'hsla(0, 1%, 2%)';\n    let output = parsers.parseColor(input);\n    expect(output).toEqual('rgb(5, 5, 5)');\n  });\n  it('should convert hsla to rgba values', () => {\n    let input = 'hsla(0, 1%, 2%, 0.5)';\n    let output = parsers.parseColor(input);\n    expect(output).toEqual('rgba(5, 5, 5, 0.5)');\n  });\n  it.todo('Add more tests');\n});\ndescribe('parseAngle', () => {\n  it.todo('test');\n});\ndescribe('parseKeyword', () => {\n  it.todo('test');\n});\ndescribe('dashedToCamelCase', () => {\n  it.todo('test');\n});\ndescribe('shorthandParser', () => {\n  it.todo('test');\n});\ndescribe('shorthandSetter', () => {\n  it.todo('test');\n});\ndescribe('shorthandGetter', () => {\n  it.todo('test');\n});\ndescribe('implicitSetter', () => {\n  it.todo('test');\n});\ndescribe('subImplicitSetter', () => {\n  it.todo('test');\n});\ndescribe('camelToDashed', () => {\n  it.todo('test');\n});","map":{"version":3,"names":["parsers","require","describe","it","input","output","valueType","expect","toEqual","TYPES","COLOR","LENGTH","CALC","todo","parseColor"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/cssstyle/lib/parsers.test.js"],"sourcesContent":["'use strict';\n\nconst parsers = require('./parsers');\n\ndescribe('valueType', () => {\n  it('returns color for red', () => {\n    let input = 'red';\n    let output = parsers.valueType(input);\n\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n\n  it('returns color for #nnnnnn', () => {\n    let input = '#fefefe';\n    let output = parsers.valueType(input);\n\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n\n  it('returns color for rgb(n, n, n)', () => {\n    let input = 'rgb(10, 10, 10)';\n    let output = parsers.valueType(input);\n\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n\n  it('returns color for rgb(p, p, p)', () => {\n    let input = 'rgb(10%, 10%, 10%)';\n    let output = parsers.valueType(input);\n\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n\n  it('returns color for rgba(n, n, n, n)', () => {\n    let input = 'rgba(10, 10, 10, 1)';\n    let output = parsers.valueType(input);\n\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n\n  it('returns color for rgba(n, n, n, n) with decimal alpha', () => {\n    let input = 'rgba(10, 10, 10, 0.5)';\n    let output = parsers.valueType(input);\n\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n\n  it('returns color for rgba(p, p, p, n)', () => {\n    let input = 'rgba(10%, 10%, 10%, 1)';\n    let output = parsers.valueType(input);\n\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n\n  it('returns color for rgba(p, p, p, n) with decimal alpha', () => {\n    let input = 'rgba(10%, 10%, 10%, 0.5)';\n    let output = parsers.valueType(input);\n\n    expect(output).toEqual(parsers.TYPES.COLOR);\n  });\n\n  it('returns length for 100ch', () => {\n    let input = '100ch';\n    let output = parsers.valueType(input);\n\n    expect(output).toEqual(parsers.TYPES.LENGTH);\n  });\n\n  it('returns calc from calc(100px * 2)', () => {\n    let input = 'calc(100px * 2)';\n    let output = parsers.valueType(input);\n\n    expect(output).toEqual(parsers.TYPES.CALC);\n  });\n});\ndescribe('parseInteger', () => {\n  it.todo('test');\n});\ndescribe('parseNumber', () => {\n  it.todo('test');\n});\ndescribe('parseLength', () => {\n  it.todo('test');\n});\ndescribe('parsePercent', () => {\n  it.todo('test');\n});\ndescribe('parseMeasurement', () => {\n  it.todo('test');\n});\ndescribe('parseUrl', () => {\n  it.todo('test');\n});\ndescribe('parseString', () => {\n  it.todo('test');\n});\ndescribe('parseColor', () => {\n  it('should convert hsl to rgb values', () => {\n    let input = 'hsla(0, 1%, 2%)';\n    let output = parsers.parseColor(input);\n\n    expect(output).toEqual('rgb(5, 5, 5)');\n  });\n  it('should convert hsla to rgba values', () => {\n    let input = 'hsla(0, 1%, 2%, 0.5)';\n    let output = parsers.parseColor(input);\n\n    expect(output).toEqual('rgba(5, 5, 5, 0.5)');\n  });\n\n  it.todo('Add more tests');\n});\ndescribe('parseAngle', () => {\n  it.todo('test');\n});\ndescribe('parseKeyword', () => {\n  it.todo('test');\n});\ndescribe('dashedToCamelCase', () => {\n  it.todo('test');\n});\ndescribe('shorthandParser', () => {\n  it.todo('test');\n});\ndescribe('shorthandSetter', () => {\n  it.todo('test');\n});\ndescribe('shorthandGetter', () => {\n  it.todo('test');\n});\ndescribe('implicitSetter', () => {\n  it.todo('test');\n});\ndescribe('subImplicitSetter', () => {\n  it.todo('test');\n});\ndescribe('camelToDashed', () => {\n  it.todo('test');\n});\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEAC,QAAQ,CAAC,WAAD,EAAc,MAAM;EAC1BC,EAAE,CAAC,uBAAD,EAA0B,MAAM;IAChC,IAAIC,KAAK,GAAG,KAAZ;IACA,IAAIC,MAAM,GAAGL,OAAO,CAACM,SAAR,CAAkBF,KAAlB,CAAb;IAEAG,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuBR,OAAO,CAACS,KAAR,CAAcC,KAArC;EACD,CALC,CAAF;EAOAP,EAAE,CAAC,2BAAD,EAA8B,MAAM;IACpC,IAAIC,KAAK,GAAG,SAAZ;IACA,IAAIC,MAAM,GAAGL,OAAO,CAACM,SAAR,CAAkBF,KAAlB,CAAb;IAEAG,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuBR,OAAO,CAACS,KAAR,CAAcC,KAArC;EACD,CALC,CAAF;EAOAP,EAAE,CAAC,gCAAD,EAAmC,MAAM;IACzC,IAAIC,KAAK,GAAG,iBAAZ;IACA,IAAIC,MAAM,GAAGL,OAAO,CAACM,SAAR,CAAkBF,KAAlB,CAAb;IAEAG,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuBR,OAAO,CAACS,KAAR,CAAcC,KAArC;EACD,CALC,CAAF;EAOAP,EAAE,CAAC,gCAAD,EAAmC,MAAM;IACzC,IAAIC,KAAK,GAAG,oBAAZ;IACA,IAAIC,MAAM,GAAGL,OAAO,CAACM,SAAR,CAAkBF,KAAlB,CAAb;IAEAG,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuBR,OAAO,CAACS,KAAR,CAAcC,KAArC;EACD,CALC,CAAF;EAOAP,EAAE,CAAC,oCAAD,EAAuC,MAAM;IAC7C,IAAIC,KAAK,GAAG,qBAAZ;IACA,IAAIC,MAAM,GAAGL,OAAO,CAACM,SAAR,CAAkBF,KAAlB,CAAb;IAEAG,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuBR,OAAO,CAACS,KAAR,CAAcC,KAArC;EACD,CALC,CAAF;EAOAP,EAAE,CAAC,uDAAD,EAA0D,MAAM;IAChE,IAAIC,KAAK,GAAG,uBAAZ;IACA,IAAIC,MAAM,GAAGL,OAAO,CAACM,SAAR,CAAkBF,KAAlB,CAAb;IAEAG,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuBR,OAAO,CAACS,KAAR,CAAcC,KAArC;EACD,CALC,CAAF;EAOAP,EAAE,CAAC,oCAAD,EAAuC,MAAM;IAC7C,IAAIC,KAAK,GAAG,wBAAZ;IACA,IAAIC,MAAM,GAAGL,OAAO,CAACM,SAAR,CAAkBF,KAAlB,CAAb;IAEAG,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuBR,OAAO,CAACS,KAAR,CAAcC,KAArC;EACD,CALC,CAAF;EAOAP,EAAE,CAAC,uDAAD,EAA0D,MAAM;IAChE,IAAIC,KAAK,GAAG,0BAAZ;IACA,IAAIC,MAAM,GAAGL,OAAO,CAACM,SAAR,CAAkBF,KAAlB,CAAb;IAEAG,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuBR,OAAO,CAACS,KAAR,CAAcC,KAArC;EACD,CALC,CAAF;EAOAP,EAAE,CAAC,0BAAD,EAA6B,MAAM;IACnC,IAAIC,KAAK,GAAG,OAAZ;IACA,IAAIC,MAAM,GAAGL,OAAO,CAACM,SAAR,CAAkBF,KAAlB,CAAb;IAEAG,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuBR,OAAO,CAACS,KAAR,CAAcE,MAArC;EACD,CALC,CAAF;EAOAR,EAAE,CAAC,mCAAD,EAAsC,MAAM;IAC5C,IAAIC,KAAK,GAAG,iBAAZ;IACA,IAAIC,MAAM,GAAGL,OAAO,CAACM,SAAR,CAAkBF,KAAlB,CAAb;IAEAG,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuBR,OAAO,CAACS,KAAR,CAAcG,IAArC;EACD,CALC,CAAF;AAMD,CAtEO,CAAR;AAuEAV,QAAQ,CAAC,cAAD,EAAiB,MAAM;EAC7BC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,aAAD,EAAgB,MAAM;EAC5BC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,aAAD,EAAgB,MAAM;EAC5BC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,cAAD,EAAiB,MAAM;EAC7BC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,kBAAD,EAAqB,MAAM;EACjCC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,UAAD,EAAa,MAAM;EACzBC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,aAAD,EAAgB,MAAM;EAC5BC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,YAAD,EAAe,MAAM;EAC3BC,EAAE,CAAC,kCAAD,EAAqC,MAAM;IAC3C,IAAIC,KAAK,GAAG,iBAAZ;IACA,IAAIC,MAAM,GAAGL,OAAO,CAACc,UAAR,CAAmBV,KAAnB,CAAb;IAEAG,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuB,cAAvB;EACD,CALC,CAAF;EAMAL,EAAE,CAAC,oCAAD,EAAuC,MAAM;IAC7C,IAAIC,KAAK,GAAG,sBAAZ;IACA,IAAIC,MAAM,GAAGL,OAAO,CAACc,UAAR,CAAmBV,KAAnB,CAAb;IAEAG,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuB,oBAAvB;EACD,CALC,CAAF;EAOAL,EAAE,CAACU,IAAH,CAAQ,gBAAR;AACD,CAfO,CAAR;AAgBAX,QAAQ,CAAC,YAAD,EAAe,MAAM;EAC3BC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,cAAD,EAAiB,MAAM;EAC7BC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,mBAAD,EAAsB,MAAM;EAClCC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,iBAAD,EAAoB,MAAM;EAChCC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,iBAAD,EAAoB,MAAM;EAChCC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,iBAAD,EAAoB,MAAM;EAChCC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,gBAAD,EAAmB,MAAM;EAC/BC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,mBAAD,EAAsB,MAAM;EAClCC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR;AAGAX,QAAQ,CAAC,eAAD,EAAkB,MAAM;EAC9BC,EAAE,CAACU,IAAH,CAAQ,MAAR;AACD,CAFO,CAAR"},"metadata":{},"sourceType":"script"}