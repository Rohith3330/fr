{"ast":null,"code":"/* Generated by `npm run build`, do not edit! */\n\"use strict\";\n\nmodule.exports = function (Parser) {\n  return /*@__PURE__*/function (Parser) {\n    function anonymous() {\n      Parser.apply(this, arguments);\n    }\n\n    if (Parser) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create(Parser && Parser.prototype);\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.readInt = function readInt(radix, len) {\n      // Hack: len is only != null for unicode escape sequences,\n      // where numeric separators are not allowed\n      if (len != null) {\n        return Parser.prototype.readInt.call(this, radix, len);\n      }\n\n      var start = this.pos,\n          total = 0,\n          acceptUnderscore = false;\n\n      for (;;) {\n        var code = this.input.charCodeAt(this.pos),\n            val = void 0;\n\n        if (code >= 97) {\n          val = code - 97 + 10;\n        } // a\n        else if (code == 95) {\n          if (!acceptUnderscore) {\n            this.raise(this.pos, \"Invalid numeric separator\");\n          }\n\n          ++this.pos;\n          acceptUnderscore = false;\n          continue;\n        } else if (code >= 65) {\n          val = code - 65 + 10;\n        } // A\n        else if (code >= 48 && code <= 57) {\n          val = code - 48;\n        } // 0-9\n        else {\n          val = Infinity;\n        }\n\n        if (val >= radix) {\n          break;\n        }\n\n        ++this.pos;\n        total = total * radix + val;\n        acceptUnderscore = true;\n      }\n\n      if (this.pos === start) {\n        return null;\n      }\n\n      if (!acceptUnderscore) {\n        this.raise(this.pos - 1, \"Invalid numeric separator\");\n      }\n\n      return total;\n    };\n\n    anonymous.prototype.readNumber = function readNumber(startsWithDot) {\n      var token = Parser.prototype.readNumber.call(this, startsWithDot);\n      var octal = this.end - this.start >= 2 && this.input.charCodeAt(this.start) === 48;\n      var stripped = this.getNumberInput(this.start, this.end);\n\n      if (stripped.length < this.end - this.start) {\n        if (octal) {\n          this.raise(this.start, \"Invalid number\");\n        }\n\n        this.value = parseFloat(stripped);\n      }\n\n      return token;\n    }; // This is used by acorn-bigint\n\n\n    anonymous.prototype.getNumberInput = function getNumberInput(start, end) {\n      return this.input.slice(start, end).replace(/_/g, \"\");\n    };\n\n    return anonymous;\n  }(Parser);\n};","map":{"version":3,"names":["module","exports","Parser","anonymous","apply","arguments","__proto__","prototype","Object","create","constructor","readInt","radix","len","call","start","pos","total","acceptUnderscore","code","input","charCodeAt","val","raise","Infinity","readNumber","startsWithDot","token","octal","end","stripped","getNumberInput","length","value","parseFloat","slice","replace"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/acorn-node/lib/numeric-separator/index.js"],"sourcesContent":["/* Generated by `npm run build`, do not edit! */\n\n\"use strict\"\n\nmodule.exports = function(Parser) {\n  return /*@__PURE__*/(function (Parser) {\n    function anonymous () {\n      Parser.apply(this, arguments);\n    }\n\n    if ( Parser ) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create( Parser && Parser.prototype );\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.readInt = function readInt (radix, len) {\n      // Hack: len is only != null for unicode escape sequences,\n      // where numeric separators are not allowed\n      if (len != null) { return Parser.prototype.readInt.call(this, radix, len) }\n\n      var start = this.pos, total = 0, acceptUnderscore = false\n      for (;;) {\n        var code = this.input.charCodeAt(this.pos), val = (void 0)\n        if (code >= 97) { val = code - 97 + 10 } // a\n        else if (code == 95) {\n          if (!acceptUnderscore) { this.raise(this.pos, \"Invalid numeric separator\") }\n          ++this.pos\n          acceptUnderscore = false\n          continue\n        } else if (code >= 65) { val = code - 65 + 10 } // A\n        else if (code >= 48 && code <= 57) { val = code - 48 } // 0-9\n        else { val = Infinity }\n        if (val >= radix) { break }\n        ++this.pos\n        total = total * radix + val\n        acceptUnderscore = true\n      }\n      if (this.pos === start) { return null }\n      if (!acceptUnderscore) { this.raise(this.pos - 1, \"Invalid numeric separator\") }\n\n      return total\n    };\n\n    anonymous.prototype.readNumber = function readNumber (startsWithDot) {\n      var token = Parser.prototype.readNumber.call(this, startsWithDot)\n      var octal = this.end - this.start >= 2 && this.input.charCodeAt(this.start) === 48\n      var stripped = this.getNumberInput(this.start, this.end)\n      if (stripped.length < this.end - this.start) {\n        if (octal) { this.raise(this.start, \"Invalid number\") }\n        this.value = parseFloat(stripped)\n      }\n      return token\n    };\n\n    // This is used by acorn-bigint\n    anonymous.prototype.getNumberInput = function getNumberInput (start, end) {\n      return this.input.slice(start, end).replace(/_/g, \"\")\n    };\n\n    return anonymous;\n  }(Parser))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}