{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"../util\");\n\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\n\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('brace-style');\nexports.default = (0, util_1.createRule)({\n  name: 'brace-style',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Enforce consistent brace style for blocks',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    messages: baseRule.meta.messages,\n    fixable: baseRule.meta.fixable,\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: baseRule.meta.schema\n  },\n  defaultOptions: ['1tbs'],\n\n  create(context) {\n    const [style, {\n      allowSingleLine\n    } = {\n      allowSingleLine: false\n    }] = context.options;\n    const isAllmanStyle = style === 'allman';\n    const sourceCode = context.getSourceCode();\n    const rules = baseRule.create(context);\n    /**\n     * Checks a pair of curly brackets based on the user's config\n     */\n\n    function validateCurlyPair(openingCurlyToken, closingCurlyToken) {\n      if (allowSingleLine && (0, util_1.isTokenOnSameLine)(openingCurlyToken, closingCurlyToken)) {\n        return;\n      }\n\n      const tokenBeforeOpeningCurly = sourceCode.getTokenBefore(openingCurlyToken);\n      const tokenBeforeClosingCurly = sourceCode.getTokenBefore(closingCurlyToken);\n      const tokenAfterOpeningCurly = sourceCode.getTokenAfter(openingCurlyToken);\n\n      if (!isAllmanStyle && !(0, util_1.isTokenOnSameLine)(tokenBeforeOpeningCurly, openingCurlyToken)) {\n        context.report({\n          node: openingCurlyToken,\n          messageId: 'nextLineOpen',\n          fix: fixer => {\n            const textRange = [tokenBeforeOpeningCurly.range[1], openingCurlyToken.range[0]];\n            const textBetween = sourceCode.text.slice(textRange[0], textRange[1]);\n\n            if (textBetween.trim()) {\n              return null;\n            }\n\n            return fixer.replaceTextRange(textRange, ' ');\n          }\n        });\n      }\n\n      if (isAllmanStyle && (0, util_1.isTokenOnSameLine)(tokenBeforeOpeningCurly, openingCurlyToken)) {\n        context.report({\n          node: openingCurlyToken,\n          messageId: 'sameLineOpen',\n          fix: fixer => fixer.insertTextBefore(openingCurlyToken, '\\n')\n        });\n      }\n\n      if ((0, util_1.isTokenOnSameLine)(openingCurlyToken, tokenAfterOpeningCurly) && tokenAfterOpeningCurly !== closingCurlyToken) {\n        context.report({\n          node: openingCurlyToken,\n          messageId: 'blockSameLine',\n          fix: fixer => fixer.insertTextAfter(openingCurlyToken, '\\n')\n        });\n      }\n\n      if ((0, util_1.isTokenOnSameLine)(tokenBeforeClosingCurly, closingCurlyToken) && tokenBeforeClosingCurly !== openingCurlyToken) {\n        context.report({\n          node: closingCurlyToken,\n          messageId: 'singleLineClose',\n          fix: fixer => fixer.insertTextBefore(closingCurlyToken, '\\n')\n        });\n      }\n    }\n\n    return Object.assign(Object.assign({}, rules), {\n      'TSInterfaceBody, TSModuleBlock'(node) {\n        const openingCurly = sourceCode.getFirstToken(node);\n        const closingCurly = sourceCode.getLastToken(node);\n        validateCurlyPair(openingCurly, closingCurly);\n      },\n\n      TSEnumDeclaration(node) {\n        const closingCurly = sourceCode.getLastToken(node);\n        const openingCurly = sourceCode.getTokenBefore(node.members.length ? node.members[0] : closingCurly);\n        validateCurlyPair(openingCurly, closingCurly);\n      }\n\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["baseRule","exports","name","meta","type","docs","description","recommended","extendsBaseRule","messages","fixable","hasSuggestions","schema","defaultOptions","create","context","style","allowSingleLine","options","isAllmanStyle","sourceCode","getSourceCode","rules","validateCurlyPair","openingCurlyToken","closingCurlyToken","tokenBeforeOpeningCurly","getTokenBefore","tokenBeforeClosingCurly","tokenAfterOpeningCurly","getTokenAfter","report","node","messageId","fix","fixer","textRange","range","textBetween","text","slice","trim","replaceTextRange","insertTextBefore","insertTextAfter","openingCurly","getFirstToken","closingCurly","getLastToken","TSEnumDeclaration","members","length"],"sources":["../../src/rules/brace-style.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}