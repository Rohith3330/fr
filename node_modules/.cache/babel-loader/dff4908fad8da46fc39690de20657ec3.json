{"ast":null,"code":"const comma = ','.charCodeAt(0);\nconst semicolon = ';'.charCodeAt(0);\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst intToChar = new Uint8Array(64); // 64 possible chars.\n\nconst charToInt = new Uint8Array(128); // z is 122 in ASCII\n\nfor (let i = 0; i < chars.length; i++) {\n  const c = chars.charCodeAt(i);\n  intToChar[i] = c;\n  charToInt[c] = i;\n} // Provide a fallback for older environments.\n\n\nconst td = typeof TextDecoder !== 'undefined' ? /* #__PURE__ */new TextDecoder() : typeof Buffer !== 'undefined' ? {\n  decode(buf) {\n    const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);\n    return out.toString();\n  }\n\n} : {\n  decode(buf) {\n    let out = '';\n\n    for (let i = 0; i < buf.length; i++) {\n      out += String.fromCharCode(buf[i]);\n    }\n\n    return out;\n  }\n\n};\n\nfunction decode(mappings) {\n  const state = new Int32Array(5);\n  const decoded = [];\n  let index = 0;\n\n  do {\n    const semi = indexOf(mappings, index);\n    const line = [];\n    let sorted = true;\n    let lastCol = 0;\n    state[0] = 0;\n\n    for (let i = index; i < semi; i++) {\n      let seg;\n      i = decodeInteger(mappings, i, state, 0); // genColumn\n\n      const col = state[0];\n      if (col < lastCol) sorted = false;\n      lastCol = col;\n\n      if (hasMoreVlq(mappings, i, semi)) {\n        i = decodeInteger(mappings, i, state, 1); // sourcesIndex\n\n        i = decodeInteger(mappings, i, state, 2); // sourceLine\n\n        i = decodeInteger(mappings, i, state, 3); // sourceColumn\n\n        if (hasMoreVlq(mappings, i, semi)) {\n          i = decodeInteger(mappings, i, state, 4); // namesIndex\n\n          seg = [col, state[1], state[2], state[3], state[4]];\n        } else {\n          seg = [col, state[1], state[2], state[3]];\n        }\n      } else {\n        seg = [col];\n      }\n\n      line.push(seg);\n    }\n\n    if (!sorted) sort(line);\n    decoded.push(line);\n    index = semi + 1;\n  } while (index <= mappings.length);\n\n  return decoded;\n}\n\nfunction indexOf(mappings, index) {\n  const idx = mappings.indexOf(';', index);\n  return idx === -1 ? mappings.length : idx;\n}\n\nfunction decodeInteger(mappings, pos, state, j) {\n  let value = 0;\n  let shift = 0;\n  let integer = 0;\n\n  do {\n    const c = mappings.charCodeAt(pos++);\n    integer = charToInt[c];\n    value |= (integer & 31) << shift;\n    shift += 5;\n  } while (integer & 32);\n\n  const shouldNegate = value & 1;\n  value >>>= 1;\n\n  if (shouldNegate) {\n    value = -0x80000000 | -value;\n  }\n\n  state[j] += value;\n  return pos;\n}\n\nfunction hasMoreVlq(mappings, i, length) {\n  if (i >= length) return false;\n  return mappings.charCodeAt(i) !== comma;\n}\n\nfunction sort(line) {\n  line.sort(sortComparator);\n}\n\nfunction sortComparator(a, b) {\n  return a[0] - b[0];\n}\n\nfunction encode(decoded) {\n  const state = new Int32Array(5);\n  const bufLength = 1024 * 16;\n  const subLength = bufLength - 36;\n  const buf = new Uint8Array(bufLength);\n  const sub = buf.subarray(0, subLength);\n  let pos = 0;\n  let out = '';\n\n  for (let i = 0; i < decoded.length; i++) {\n    const line = decoded[i];\n\n    if (i > 0) {\n      if (pos === bufLength) {\n        out += td.decode(buf);\n        pos = 0;\n      }\n\n      buf[pos++] = semicolon;\n    }\n\n    if (line.length === 0) continue;\n    state[0] = 0;\n\n    for (let j = 0; j < line.length; j++) {\n      const segment = line[j]; // We can push up to 5 ints, each int can take at most 7 chars, and we\n      // may push a comma.\n\n      if (pos > subLength) {\n        out += td.decode(sub);\n        buf.copyWithin(0, subLength, pos);\n        pos -= subLength;\n      }\n\n      if (j > 0) buf[pos++] = comma;\n      pos = encodeInteger(buf, pos, state, segment, 0); // genColumn\n\n      if (segment.length === 1) continue;\n      pos = encodeInteger(buf, pos, state, segment, 1); // sourcesIndex\n\n      pos = encodeInteger(buf, pos, state, segment, 2); // sourceLine\n\n      pos = encodeInteger(buf, pos, state, segment, 3); // sourceColumn\n\n      if (segment.length === 4) continue;\n      pos = encodeInteger(buf, pos, state, segment, 4); // namesIndex\n    }\n  }\n\n  return out + td.decode(buf.subarray(0, pos));\n}\n\nfunction encodeInteger(buf, pos, state, segment, j) {\n  const next = segment[j];\n  let num = next - state[j];\n  state[j] = next;\n  num = num < 0 ? -num << 1 | 1 : num << 1;\n\n  do {\n    let clamped = num & 0b011111;\n    num >>>= 5;\n    if (num > 0) clamped |= 0b100000;\n    buf[pos++] = intToChar[clamped];\n  } while (num > 0);\n\n  return pos;\n}\n\nexport { decode, encode };","map":{"version":3,"mappings":"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","names":["comma","charCodeAt","semicolon","chars","intToChar","Uint8Array","charToInt","i","length","c","td","TextDecoder","Buffer","decode","buf","out","from","buffer","byteOffset","byteLength","toString","String","fromCharCode","mappings","state","Int32Array","decoded","index","semi","indexOf","line","sorted","lastCol","seg","decodeInteger","col","hasMoreVlq","push","sort","idx","pos","j","value","shift","integer","shouldNegate","sortComparator","a","b","encode","bufLength","subLength","sub","subarray","segment","copyWithin","encodeInteger","next","num","clamped"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@jridgewell\\sourcemap-codec\\src\\sourcemap-codec.ts"],"sourcesContent":["export type SourceMapSegment =\n  | [number]\n  | [number, number, number, number]\n  | [number, number, number, number, number];\nexport type SourceMapLine = SourceMapSegment[];\nexport type SourceMapMappings = SourceMapLine[];\n\nconst comma = ','.charCodeAt(0);\nconst semicolon = ';'.charCodeAt(0);\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst intToChar = new Uint8Array(64); // 64 possible chars.\nconst charToInt = new Uint8Array(128); // z is 122 in ASCII\n\nfor (let i = 0; i < chars.length; i++) {\n  const c = chars.charCodeAt(i);\n  intToChar[i] = c;\n  charToInt[c] = i;\n}\n\n// Provide a fallback for older environments.\nconst td =\n  typeof TextDecoder !== 'undefined'\n    ? /* #__PURE__ */ new TextDecoder()\n    : typeof Buffer !== 'undefined'\n    ? {\n        decode(buf: Uint8Array) {\n          const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);\n          return out.toString();\n        },\n      }\n    : {\n        decode(buf: Uint8Array) {\n          let out = '';\n          for (let i = 0; i < buf.length; i++) {\n            out += String.fromCharCode(buf[i]);\n          }\n          return out;\n        },\n      };\n\nexport function decode(mappings: string): SourceMapMappings {\n  const state: [number, number, number, number, number] = new Int32Array(5) as any;\n  const decoded: SourceMapMappings = [];\n\n  let index = 0;\n  do {\n    const semi = indexOf(mappings, index);\n    const line: SourceMapLine = [];\n    let sorted = true;\n    let lastCol = 0;\n    state[0] = 0;\n\n    for (let i = index; i < semi; i++) {\n      let seg: SourceMapSegment;\n\n      i = decodeInteger(mappings, i, state, 0); // genColumn\n      const col = state[0];\n      if (col < lastCol) sorted = false;\n      lastCol = col;\n\n      if (hasMoreVlq(mappings, i, semi)) {\n        i = decodeInteger(mappings, i, state, 1); // sourcesIndex\n        i = decodeInteger(mappings, i, state, 2); // sourceLine\n        i = decodeInteger(mappings, i, state, 3); // sourceColumn\n\n        if (hasMoreVlq(mappings, i, semi)) {\n          i = decodeInteger(mappings, i, state, 4); // namesIndex\n          seg = [col, state[1], state[2], state[3], state[4]];\n        } else {\n          seg = [col, state[1], state[2], state[3]];\n        }\n      } else {\n        seg = [col];\n      }\n\n      line.push(seg);\n    }\n\n    if (!sorted) sort(line);\n    decoded.push(line);\n    index = semi + 1;\n  } while (index <= mappings.length);\n\n  return decoded;\n}\n\nfunction indexOf(mappings: string, index: number): number {\n  const idx = mappings.indexOf(';', index);\n  return idx === -1 ? mappings.length : idx;\n}\n\nfunction decodeInteger(mappings: string, pos: number, state: SourceMapSegment, j: number): number {\n  let value = 0;\n  let shift = 0;\n  let integer = 0;\n\n  do {\n    const c = mappings.charCodeAt(pos++);\n    integer = charToInt[c];\n    value |= (integer & 31) << shift;\n    shift += 5;\n  } while (integer & 32);\n\n  const shouldNegate = value & 1;\n  value >>>= 1;\n\n  if (shouldNegate) {\n    value = -0x80000000 | -value;\n  }\n\n  state[j] += value;\n  return pos;\n}\n\nfunction hasMoreVlq(mappings: string, i: number, length: number): boolean {\n  if (i >= length) return false;\n  return mappings.charCodeAt(i) !== comma;\n}\n\nfunction sort(line: SourceMapSegment[]) {\n  line.sort(sortComparator);\n}\n\nfunction sortComparator(a: SourceMapSegment, b: SourceMapSegment): number {\n  return a[0] - b[0];\n}\n\nexport function encode(decoded: SourceMapMappings): string;\nexport function encode(decoded: Readonly<SourceMapMappings>): string;\nexport function encode(decoded: Readonly<SourceMapMappings>): string {\n  const state: [number, number, number, number, number] = new Int32Array(5) as any;\n  const bufLength = 1024 * 16;\n  const subLength = bufLength - 36;\n  const buf = new Uint8Array(bufLength);\n  const sub = buf.subarray(0, subLength);\n  let pos = 0;\n  let out = '';\n\n  for (let i = 0; i < decoded.length; i++) {\n    const line = decoded[i];\n    if (i > 0) {\n      if (pos === bufLength) {\n        out += td.decode(buf);\n        pos = 0;\n      }\n      buf[pos++] = semicolon;\n    }\n    if (line.length === 0) continue;\n\n    state[0] = 0;\n\n    for (let j = 0; j < line.length; j++) {\n      const segment = line[j];\n      // We can push up to 5 ints, each int can take at most 7 chars, and we\n      // may push a comma.\n      if (pos > subLength) {\n        out += td.decode(sub);\n        buf.copyWithin(0, subLength, pos);\n        pos -= subLength;\n      }\n      if (j > 0) buf[pos++] = comma;\n\n      pos = encodeInteger(buf, pos, state, segment, 0); // genColumn\n\n      if (segment.length === 1) continue;\n      pos = encodeInteger(buf, pos, state, segment, 1); // sourcesIndex\n      pos = encodeInteger(buf, pos, state, segment, 2); // sourceLine\n      pos = encodeInteger(buf, pos, state, segment, 3); // sourceColumn\n\n      if (segment.length === 4) continue;\n      pos = encodeInteger(buf, pos, state, segment, 4); // namesIndex\n    }\n  }\n\n  return out + td.decode(buf.subarray(0, pos));\n}\n\nfunction encodeInteger(\n  buf: Uint8Array,\n  pos: number,\n  state: SourceMapSegment,\n  segment: SourceMapSegment,\n  j: number,\n): number {\n  const next = segment[j];\n  let num = next - state[j];\n  state[j] = next;\n\n  num = num < 0 ? (-num << 1) | 1 : num << 1;\n  do {\n    let clamped = num & 0b011111;\n    num >>>= 5;\n    if (num > 0) clamped |= 0b100000;\n    buf[pos++] = intToChar[clamped];\n  } while (num > 0);\n\n  return pos;\n}\n"]},"metadata":{},"sourceType":"module"}