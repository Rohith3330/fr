{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar mongoose = require('mongoose');\n\nvar bcrypt = require('bcryptjs');\n\nvar UserSchema = mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  isAdmin: {\n    type: Boolean,\n    required: true,\n    default: false\n  },\n  pic: {\n    type: String,\n    required: true,\n    default: \"https://assets.pokemon.com/assets/cms2/img/pokedex/full/001.png\"\n  },\n  roll: {\n    type: String,\n    required: true\n  },\n  branch: {\n    type: String,\n    required: true\n  }\n}, {\n  timestamps: true\n});\nUserSchema.pre(\"save\", /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(next) {\n    var salt;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!this.isModified('password')) {\n              next();\n            }\n\n            _context.next = 3;\n            return bcrypt.genSalt(10);\n\n          case 3:\n            salt = _context.sent;\n            _context.next = 6;\n            return bcrypt.hash(this.password, salt);\n\n          case 6:\n            this.password = _context.sent;\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\nUserSchema.methods.matchPassword = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(enteredPassword) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return bcrypt.compare(enteredPassword, this.password);\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar user = mongoose.model('user', UserSchema);\nmodule.exports = user;","map":{"version":3,"names":["mongoose","require","bcrypt","UserSchema","Schema","name","type","String","required","email","unique","password","isAdmin","Boolean","default","pic","roll","branch","timestamps","pre","next","isModified","genSalt","salt","hash","methods","matchPassword","enteredPassword","compare","user","model","module","exports"],"sources":["C:/Users/Rohith/mern/backend/models/usermodel.js"],"sourcesContent":["const mongoose =require('mongoose');\r\nconst bcrypt=require('bcryptjs');\r\n\r\nconst UserSchema =mongoose.Schema(\r\n    {\r\n        name:{\r\n            type: String,\r\n            required:true\r\n        },\r\n        email:{\r\n            type:String,\r\n            required:true,\r\n            unique:true\r\n        },\r\n        password:{\r\n            type:String,\r\n            required:true,\r\n        },\r\n        isAdmin:{\r\n            type:Boolean,\r\n            required:true,\r\n            default:false,\r\n        },\r\n        pic:{\r\n            type:String,\r\n            required:true,\r\n            default:\r\n                \"https://assets.pokemon.com/assets/cms2/img/pokedex/full/001.png\"\r\n        },\r\n        roll:{\r\n            type:String,\r\n            required:true,\r\n        },\r\n        branch:{\r\n            type:String,\r\n            required:true,\r\n        },\r\n    },\r\n    {\r\n        timestamps:true,\r\n    }\r\n);\r\nUserSchema.pre(\"save\",async function(next){\r\n    if(!this.isModified('password')){\r\n        next();\r\n    }\r\n    const salt = await bcrypt.genSalt(10);\r\n    this.password = await bcrypt.hash(this.password, salt);\r\n});\r\nUserSchema.methods.matchPassword= async function(enteredPassword){\r\n    return await bcrypt.compare(enteredPassword,this.password);\r\n};\r\n\r\nconst user=mongoose.model('user',UserSchema);\r\nmodule.exports=user;"],"mappings":";;;;AAAA,IAAMA,QAAQ,GAAEC,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMC,MAAM,GAACD,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAME,UAAU,GAAEH,QAAQ,CAACI,MAAT,CACd;EACIC,IAAI,EAAC;IACDC,IAAI,EAAEC,MADL;IAEDC,QAAQ,EAAC;EAFR,CADT;EAKIC,KAAK,EAAC;IACFH,IAAI,EAACC,MADH;IAEFC,QAAQ,EAAC,IAFP;IAGFE,MAAM,EAAC;EAHL,CALV;EAUIC,QAAQ,EAAC;IACLL,IAAI,EAACC,MADA;IAELC,QAAQ,EAAC;EAFJ,CAVb;EAcII,OAAO,EAAC;IACJN,IAAI,EAACO,OADD;IAEJL,QAAQ,EAAC,IAFL;IAGJM,OAAO,EAAC;EAHJ,CAdZ;EAmBIC,GAAG,EAAC;IACAT,IAAI,EAACC,MADL;IAEAC,QAAQ,EAAC,IAFT;IAGAM,OAAO,EACH;EAJJ,CAnBR;EAyBIE,IAAI,EAAC;IACDV,IAAI,EAACC,MADJ;IAEDC,QAAQ,EAAC;EAFR,CAzBT;EA6BIS,MAAM,EAAC;IACHX,IAAI,EAACC,MADF;IAEHC,QAAQ,EAAC;EAFN;AA7BX,CADc,EAmCd;EACIU,UAAU,EAAC;AADf,CAnCc,CAAlB;AAuCAf,UAAU,CAACgB,GAAX,CAAe,MAAf;EAAA,sEAAsB,iBAAeC,IAAf;IAAA;IAAA;MAAA;QAAA;UAAA;YAClB,IAAG,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAJ,EAAgC;cAC5BD,IAAI;YACP;;YAHiB;YAAA,OAIClB,MAAM,CAACoB,OAAP,CAAe,EAAf,CAJD;;UAAA;YAIZC,IAJY;YAAA;YAAA,OAKIrB,MAAM,CAACsB,IAAP,CAAY,KAAKb,QAAjB,EAA2BY,IAA3B,CALJ;;UAAA;YAKlB,KAAKZ,QALa;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAtB;;EAAA;IAAA;EAAA;AAAA;;AAOAR,UAAU,CAACsB,OAAX,CAAmBC,aAAnB;EAAA,uEAAkC,kBAAeC,eAAf;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACjBzB,MAAM,CAAC0B,OAAP,CAAeD,eAAf,EAA+B,KAAKhB,QAApC,CADiB;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAlC;;EAAA;IAAA;EAAA;AAAA;;AAIA,IAAMkB,IAAI,GAAC7B,QAAQ,CAAC8B,KAAT,CAAe,MAAf,EAAsB3B,UAAtB,CAAX;AACA4B,MAAM,CAACC,OAAP,GAAeH,IAAf"},"metadata":{},"sourceType":"script"}