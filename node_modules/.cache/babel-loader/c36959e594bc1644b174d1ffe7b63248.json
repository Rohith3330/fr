{"ast":null,"code":"/**\n * @fileoverview Rule to replace assignment expressions with operator assignment\n * @author Brandon Mills\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether an operator is commutative and has an operator assignment\n * shorthand form.\n * @param {string} operator Operator to check.\n * @returns {boolean} True if the operator is commutative and has a\n *     shorthand form.\n */\n\n\nfunction isCommutativeOperatorWithShorthand(operator) {\n  return [\"*\", \"&\", \"^\", \"|\"].includes(operator);\n}\n/**\n * Checks whether an operator is not commutative and has an operator assignment\n * shorthand form.\n * @param {string} operator Operator to check.\n * @returns {boolean} True if the operator is not commutative and has\n *     a shorthand form.\n */\n\n\nfunction isNonCommutativeOperatorWithShorthand(operator) {\n  return [\"+\", \"-\", \"/\", \"%\", \"<<\", \">>\", \">>>\", \"**\"].includes(operator);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/**\n * Determines if the left side of a node can be safely fixed (i.e. if it activates the same getters/setters and)\n * toString calls regardless of whether assignment shorthand is used)\n * @param {ASTNode} node The node on the left side of the expression\n * @returns {boolean} `true` if the node can be fixed\n */\n\n\nfunction canBeFixed(node) {\n  return node.type === \"Identifier\" || node.type === \"MemberExpression\" && (node.object.type === \"Identifier\" || node.object.type === \"ThisExpression\") && (!node.computed || node.property.type === \"Literal\");\n}\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Require or disallow assignment operator shorthand where possible\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/operator-assignment\"\n    },\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    fixable: \"code\",\n    messages: {\n      replaced: \"Assignment (=) can be replaced with operator assignment ({{operator}}).\",\n      unexpected: \"Unexpected operator assignment ({{operator}}) shorthand.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\n     * Returns the operator token of an AssignmentExpression or BinaryExpression\n     * @param {ASTNode} node An AssignmentExpression or BinaryExpression node\n     * @returns {Token} The operator token in the node\n     */\n\n    function getOperatorToken(node) {\n      return sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);\n    }\n    /**\n     * Ensures that an assignment uses the shorthand form where possible.\n     * @param {ASTNode} node An AssignmentExpression node.\n     * @returns {void}\n     */\n\n\n    function verify(node) {\n      if (node.operator !== \"=\" || node.right.type !== \"BinaryExpression\") {\n        return;\n      }\n\n      const left = node.left;\n      const expr = node.right;\n      const operator = expr.operator;\n\n      if (isCommutativeOperatorWithShorthand(operator) || isNonCommutativeOperatorWithShorthand(operator)) {\n        const replacementOperator = `${operator}=`;\n\n        if (astUtils.isSameReference(left, expr.left, true)) {\n          context.report({\n            node,\n            messageId: \"replaced\",\n            data: {\n              operator: replacementOperator\n            },\n\n            fix(fixer) {\n              if (canBeFixed(left) && canBeFixed(expr.left)) {\n                const equalsToken = getOperatorToken(node);\n                const operatorToken = getOperatorToken(expr);\n                const leftText = sourceCode.getText().slice(node.range[0], equalsToken.range[0]);\n                const rightText = sourceCode.getText().slice(operatorToken.range[1], node.right.range[1]); // Check for comments that would be removed.\n\n                if (sourceCode.commentsExistBetween(equalsToken, operatorToken)) {\n                  return null;\n                }\n\n                return fixer.replaceText(node, `${leftText}${replacementOperator}${rightText}`);\n              }\n\n              return null;\n            }\n\n          });\n        } else if (astUtils.isSameReference(left, expr.right, true) && isCommutativeOperatorWithShorthand(operator)) {\n          /*\n           * This case can't be fixed safely.\n           * If `a` and `b` both have custom valueOf() behavior, then fixing `a = b * a` to `a *= b` would\n           * change the execution order of the valueOf() functions.\n           */\n          context.report({\n            node,\n            messageId: \"replaced\",\n            data: {\n              operator: replacementOperator\n            }\n          });\n        }\n      }\n    }\n    /**\n     * Warns if an assignment expression uses operator assignment shorthand.\n     * @param {ASTNode} node An AssignmentExpression node.\n     * @returns {void}\n     */\n\n\n    function prohibit(node) {\n      if (node.operator !== \"=\" && !astUtils.isLogicalAssignmentOperator(node.operator)) {\n        context.report({\n          node,\n          messageId: \"unexpected\",\n          data: {\n            operator: node.operator\n          },\n\n          fix(fixer) {\n            if (canBeFixed(node.left)) {\n              const firstToken = sourceCode.getFirstToken(node);\n              const operatorToken = getOperatorToken(node);\n              const leftText = sourceCode.getText().slice(node.range[0], operatorToken.range[0]);\n              const newOperator = node.operator.slice(0, -1);\n              let rightText; // Check for comments that would be duplicated.\n\n              if (sourceCode.commentsExistBetween(firstToken, operatorToken)) {\n                return null;\n              } // If this change would modify precedence (e.g. `foo *= bar + 1` => `foo = foo * (bar + 1)`), parenthesize the right side.\n\n\n              if (astUtils.getPrecedence(node.right) <= astUtils.getPrecedence({\n                type: \"BinaryExpression\",\n                operator: newOperator\n              }) && !astUtils.isParenthesised(sourceCode, node.right)) {\n                rightText = `${sourceCode.text.slice(operatorToken.range[1], node.right.range[0])}(${sourceCode.getText(node.right)})`;\n              } else {\n                const tokenAfterOperator = sourceCode.getTokenAfter(operatorToken, {\n                  includeComments: true\n                });\n                let rightTextPrefix = \"\";\n\n                if (operatorToken.range[1] === tokenAfterOperator.range[0] && !astUtils.canTokensBeAdjacent({\n                  type: \"Punctuator\",\n                  value: newOperator\n                }, tokenAfterOperator)) {\n                  rightTextPrefix = \" \"; // foo+=+bar -> foo= foo+ +bar\n                }\n\n                rightText = `${rightTextPrefix}${sourceCode.text.slice(operatorToken.range[1], node.range[1])}`;\n              }\n\n              return fixer.replaceText(node, `${leftText}= ${leftText}${newOperator}${rightText}`);\n            }\n\n            return null;\n          }\n\n        });\n      }\n    }\n\n    return {\n      AssignmentExpression: context.options[0] !== \"never\" ? verify : prohibit\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","isCommutativeOperatorWithShorthand","operator","includes","isNonCommutativeOperatorWithShorthand","canBeFixed","node","type","object","computed","property","module","exports","meta","docs","description","recommended","url","schema","enum","fixable","messages","replaced","unexpected","create","context","sourceCode","getSourceCode","getOperatorToken","getFirstTokenBetween","left","right","token","value","verify","expr","replacementOperator","isSameReference","report","messageId","data","fix","fixer","equalsToken","operatorToken","leftText","getText","slice","range","rightText","commentsExistBetween","replaceText","prohibit","isLogicalAssignmentOperator","firstToken","getFirstToken","newOperator","getPrecedence","isParenthesised","text","tokenAfterOperator","getTokenAfter","includeComments","rightTextPrefix","canTokensBeAdjacent","AssignmentExpression","options"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/operator-assignment.js"],"sourcesContent":["/**\n * @fileoverview Rule to replace assignment expressions with operator assignment\n * @author Brandon Mills\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether an operator is commutative and has an operator assignment\n * shorthand form.\n * @param {string} operator Operator to check.\n * @returns {boolean} True if the operator is commutative and has a\n *     shorthand form.\n */\nfunction isCommutativeOperatorWithShorthand(operator) {\n    return [\"*\", \"&\", \"^\", \"|\"].includes(operator);\n}\n\n/**\n * Checks whether an operator is not commutative and has an operator assignment\n * shorthand form.\n * @param {string} operator Operator to check.\n * @returns {boolean} True if the operator is not commutative and has\n *     a shorthand form.\n */\nfunction isNonCommutativeOperatorWithShorthand(operator) {\n    return [\"+\", \"-\", \"/\", \"%\", \"<<\", \">>\", \">>>\", \"**\"].includes(operator);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/**\n * Determines if the left side of a node can be safely fixed (i.e. if it activates the same getters/setters and)\n * toString calls regardless of whether assignment shorthand is used)\n * @param {ASTNode} node The node on the left side of the expression\n * @returns {boolean} `true` if the node can be fixed\n */\nfunction canBeFixed(node) {\n    return (\n        node.type === \"Identifier\" ||\n        (\n            node.type === \"MemberExpression\" &&\n            (node.object.type === \"Identifier\" || node.object.type === \"ThisExpression\") &&\n            (!node.computed || node.property.type === \"Literal\")\n        )\n    );\n}\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Require or disallow assignment operator shorthand where possible\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/operator-assignment\"\n        },\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            }\n        ],\n\n        fixable: \"code\",\n        messages: {\n            replaced: \"Assignment (=) can be replaced with operator assignment ({{operator}}).\",\n            unexpected: \"Unexpected operator assignment ({{operator}}) shorthand.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Returns the operator token of an AssignmentExpression or BinaryExpression\n         * @param {ASTNode} node An AssignmentExpression or BinaryExpression node\n         * @returns {Token} The operator token in the node\n         */\n        function getOperatorToken(node) {\n            return sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);\n        }\n\n        /**\n         * Ensures that an assignment uses the shorthand form where possible.\n         * @param {ASTNode} node An AssignmentExpression node.\n         * @returns {void}\n         */\n        function verify(node) {\n            if (node.operator !== \"=\" || node.right.type !== \"BinaryExpression\") {\n                return;\n            }\n\n            const left = node.left;\n            const expr = node.right;\n            const operator = expr.operator;\n\n            if (isCommutativeOperatorWithShorthand(operator) || isNonCommutativeOperatorWithShorthand(operator)) {\n                const replacementOperator = `${operator}=`;\n\n                if (astUtils.isSameReference(left, expr.left, true)) {\n                    context.report({\n                        node,\n                        messageId: \"replaced\",\n                        data: { operator: replacementOperator },\n                        fix(fixer) {\n                            if (canBeFixed(left) && canBeFixed(expr.left)) {\n                                const equalsToken = getOperatorToken(node);\n                                const operatorToken = getOperatorToken(expr);\n                                const leftText = sourceCode.getText().slice(node.range[0], equalsToken.range[0]);\n                                const rightText = sourceCode.getText().slice(operatorToken.range[1], node.right.range[1]);\n\n                                // Check for comments that would be removed.\n                                if (sourceCode.commentsExistBetween(equalsToken, operatorToken)) {\n                                    return null;\n                                }\n\n                                return fixer.replaceText(node, `${leftText}${replacementOperator}${rightText}`);\n                            }\n                            return null;\n                        }\n                    });\n                } else if (astUtils.isSameReference(left, expr.right, true) && isCommutativeOperatorWithShorthand(operator)) {\n\n                    /*\n                     * This case can't be fixed safely.\n                     * If `a` and `b` both have custom valueOf() behavior, then fixing `a = b * a` to `a *= b` would\n                     * change the execution order of the valueOf() functions.\n                     */\n                    context.report({\n                        node,\n                        messageId: \"replaced\",\n                        data: { operator: replacementOperator }\n                    });\n                }\n            }\n        }\n\n        /**\n         * Warns if an assignment expression uses operator assignment shorthand.\n         * @param {ASTNode} node An AssignmentExpression node.\n         * @returns {void}\n         */\n        function prohibit(node) {\n            if (node.operator !== \"=\" && !astUtils.isLogicalAssignmentOperator(node.operator)) {\n                context.report({\n                    node,\n                    messageId: \"unexpected\",\n                    data: { operator: node.operator },\n                    fix(fixer) {\n                        if (canBeFixed(node.left)) {\n                            const firstToken = sourceCode.getFirstToken(node);\n                            const operatorToken = getOperatorToken(node);\n                            const leftText = sourceCode.getText().slice(node.range[0], operatorToken.range[0]);\n                            const newOperator = node.operator.slice(0, -1);\n                            let rightText;\n\n                            // Check for comments that would be duplicated.\n                            if (sourceCode.commentsExistBetween(firstToken, operatorToken)) {\n                                return null;\n                            }\n\n                            // If this change would modify precedence (e.g. `foo *= bar + 1` => `foo = foo * (bar + 1)`), parenthesize the right side.\n                            if (\n                                astUtils.getPrecedence(node.right) <= astUtils.getPrecedence({ type: \"BinaryExpression\", operator: newOperator }) &&\n                                !astUtils.isParenthesised(sourceCode, node.right)\n                            ) {\n                                rightText = `${sourceCode.text.slice(operatorToken.range[1], node.right.range[0])}(${sourceCode.getText(node.right)})`;\n                            } else {\n                                const tokenAfterOperator = sourceCode.getTokenAfter(operatorToken, { includeComments: true });\n                                let rightTextPrefix = \"\";\n\n                                if (\n                                    operatorToken.range[1] === tokenAfterOperator.range[0] &&\n                                    !astUtils.canTokensBeAdjacent({ type: \"Punctuator\", value: newOperator }, tokenAfterOperator)\n                                ) {\n                                    rightTextPrefix = \" \"; // foo+=+bar -> foo= foo+ +bar\n                                }\n\n                                rightText = `${rightTextPrefix}${sourceCode.text.slice(operatorToken.range[1], node.range[1])}`;\n                            }\n\n                            return fixer.replaceText(node, `${leftText}= ${leftText}${newOperator}${rightText}`);\n                        }\n                        return null;\n                    }\n                });\n            }\n        }\n\n        return {\n            AssignmentExpression: context.options[0] !== \"never\" ? verify : prohibit\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}