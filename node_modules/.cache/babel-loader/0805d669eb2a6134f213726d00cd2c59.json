{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RULE_NAME = void 0;\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\n\nconst node_utils_1 = require(\"../node-utils\");\n\nexports.RULE_NAME = 'no-unnecessary-act';\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n  name: exports.RULE_NAME,\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallow wrapping Testing Library utils or empty callbacks in `act`',\n      recommendedConfig: {\n        dom: false,\n        angular: false,\n        react: 'error',\n        vue: false,\n        marko: 'error'\n      }\n    },\n    messages: {\n      noUnnecessaryActTestingLibraryUtil: 'Avoid wrapping Testing Library util calls in `act`',\n      noUnnecessaryActEmptyFunction: 'Avoid wrapping empty function in `act`'\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        isStrict: {\n          type: 'boolean'\n        }\n      }\n    }]\n  },\n  defaultOptions: [{\n    isStrict: true\n  }],\n\n  create(context, _ref, helpers) {\n    let [{\n      isStrict = true\n    }] = _ref;\n\n    function getStatementIdentifier(statement) {\n      const callExpression = (0, node_utils_1.getStatementCallExpression)(statement);\n\n      if (!callExpression && !(0, node_utils_1.isExpressionStatement)(statement) && !(0, node_utils_1.isReturnStatement)(statement)) {\n        return null;\n      }\n\n      if (callExpression) {\n        return (0, node_utils_1.getDeepestIdentifierNode)(callExpression);\n      }\n\n      if ((0, node_utils_1.isExpressionStatement)(statement) && utils_1.ASTUtils.isAwaitExpression(statement.expression)) {\n        return (0, node_utils_1.getPropertyIdentifierNode)(statement.expression.argument);\n      }\n\n      if ((0, node_utils_1.isReturnStatement)(statement) && statement.argument) {\n        return (0, node_utils_1.getPropertyIdentifierNode)(statement.argument);\n      }\n\n      return null;\n    }\n\n    function hasSomeNonTestingLibraryCall(statements) {\n      return statements.some(statement => {\n        const identifier = getStatementIdentifier(statement);\n\n        if (!identifier) {\n          return false;\n        }\n\n        return !helpers.isTestingLibraryUtil(identifier);\n      });\n    }\n\n    function hasTestingLibraryCall(statements) {\n      return statements.some(statement => {\n        const identifier = getStatementIdentifier(statement);\n\n        if (!identifier) {\n          return false;\n        }\n\n        return helpers.isTestingLibraryUtil(identifier);\n      });\n    }\n\n    function checkNoUnnecessaryActFromBlockStatement(blockStatementNode) {\n      const functionNode = blockStatementNode.parent;\n      const callExpressionNode = functionNode === null || functionNode === void 0 ? void 0 : functionNode.parent;\n\n      if (!callExpressionNode || !functionNode) {\n        return;\n      }\n\n      const identifierNode = (0, node_utils_1.getDeepestIdentifierNode)(callExpressionNode);\n\n      if (!identifierNode) {\n        return;\n      }\n\n      if (!helpers.isActUtil(identifierNode)) {\n        return;\n      }\n\n      if ((0, node_utils_1.isEmptyFunction)(functionNode)) {\n        context.report({\n          node: identifierNode,\n          messageId: 'noUnnecessaryActEmptyFunction'\n        });\n        return;\n      }\n\n      const shouldBeReported = isStrict ? hasTestingLibraryCall(blockStatementNode.body) : !hasSomeNonTestingLibraryCall(blockStatementNode.body);\n\n      if (shouldBeReported) {\n        context.report({\n          node: identifierNode,\n          messageId: 'noUnnecessaryActTestingLibraryUtil'\n        });\n      }\n    }\n\n    function checkNoUnnecessaryActFromImplicitReturn(node) {\n      var _a;\n\n      const nodeIdentifier = (0, node_utils_1.getDeepestIdentifierNode)(node);\n\n      if (!nodeIdentifier) {\n        return;\n      }\n\n      const parentCallExpression = (_a = node.parent) === null || _a === void 0 ? void 0 : _a.parent;\n\n      if (!parentCallExpression) {\n        return;\n      }\n\n      const identifierNode = (0, node_utils_1.getDeepestIdentifierNode)(parentCallExpression);\n\n      if (!identifierNode) {\n        return;\n      }\n\n      if (!helpers.isActUtil(identifierNode)) {\n        return;\n      }\n\n      if (!helpers.isTestingLibraryUtil(nodeIdentifier)) {\n        return;\n      }\n\n      context.report({\n        node: identifierNode,\n        messageId: 'noUnnecessaryActTestingLibraryUtil'\n      });\n    }\n\n    return {\n      'CallExpression > ArrowFunctionExpression > BlockStatement': checkNoUnnecessaryActFromBlockStatement,\n      'CallExpression > FunctionExpression > BlockStatement': checkNoUnnecessaryActFromBlockStatement,\n      'CallExpression > ArrowFunctionExpression > CallExpression': checkNoUnnecessaryActFromImplicitReturn\n    };\n  }\n\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","RULE_NAME","utils_1","require","create_testing_library_rule_1","node_utils_1","default","createTestingLibraryRule","name","meta","type","docs","description","recommendedConfig","dom","angular","react","vue","marko","messages","noUnnecessaryActTestingLibraryUtil","noUnnecessaryActEmptyFunction","schema","properties","isStrict","defaultOptions","create","context","helpers","getStatementIdentifier","statement","callExpression","getStatementCallExpression","isExpressionStatement","isReturnStatement","getDeepestIdentifierNode","ASTUtils","isAwaitExpression","expression","getPropertyIdentifierNode","argument","hasSomeNonTestingLibraryCall","statements","some","identifier","isTestingLibraryUtil","hasTestingLibraryCall","checkNoUnnecessaryActFromBlockStatement","blockStatementNode","functionNode","parent","callExpressionNode","identifierNode","isActUtil","isEmptyFunction","report","node","messageId","shouldBeReported","body","checkNoUnnecessaryActFromImplicitReturn","_a","nodeIdentifier","parentCallExpression"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-testing-library/rules/no-unnecessary-act.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RULE_NAME = void 0;\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\nconst node_utils_1 = require(\"../node-utils\");\nexports.RULE_NAME = 'no-unnecessary-act';\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n    name: exports.RULE_NAME,\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow wrapping Testing Library utils or empty callbacks in `act`',\n            recommendedConfig: {\n                dom: false,\n                angular: false,\n                react: 'error',\n                vue: false,\n                marko: 'error',\n            },\n        },\n        messages: {\n            noUnnecessaryActTestingLibraryUtil: 'Avoid wrapping Testing Library util calls in `act`',\n            noUnnecessaryActEmptyFunction: 'Avoid wrapping empty function in `act`',\n        },\n        schema: [\n            {\n                type: 'object',\n                properties: {\n                    isStrict: {\n                        type: 'boolean',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            isStrict: true,\n        },\n    ],\n    create(context, [{ isStrict = true }], helpers) {\n        function getStatementIdentifier(statement) {\n            const callExpression = (0, node_utils_1.getStatementCallExpression)(statement);\n            if (!callExpression &&\n                !(0, node_utils_1.isExpressionStatement)(statement) &&\n                !(0, node_utils_1.isReturnStatement)(statement)) {\n                return null;\n            }\n            if (callExpression) {\n                return (0, node_utils_1.getDeepestIdentifierNode)(callExpression);\n            }\n            if ((0, node_utils_1.isExpressionStatement)(statement) &&\n                utils_1.ASTUtils.isAwaitExpression(statement.expression)) {\n                return (0, node_utils_1.getPropertyIdentifierNode)(statement.expression.argument);\n            }\n            if ((0, node_utils_1.isReturnStatement)(statement) && statement.argument) {\n                return (0, node_utils_1.getPropertyIdentifierNode)(statement.argument);\n            }\n            return null;\n        }\n        function hasSomeNonTestingLibraryCall(statements) {\n            return statements.some((statement) => {\n                const identifier = getStatementIdentifier(statement);\n                if (!identifier) {\n                    return false;\n                }\n                return !helpers.isTestingLibraryUtil(identifier);\n            });\n        }\n        function hasTestingLibraryCall(statements) {\n            return statements.some((statement) => {\n                const identifier = getStatementIdentifier(statement);\n                if (!identifier) {\n                    return false;\n                }\n                return helpers.isTestingLibraryUtil(identifier);\n            });\n        }\n        function checkNoUnnecessaryActFromBlockStatement(blockStatementNode) {\n            const functionNode = blockStatementNode.parent;\n            const callExpressionNode = functionNode === null || functionNode === void 0 ? void 0 : functionNode.parent;\n            if (!callExpressionNode || !functionNode) {\n                return;\n            }\n            const identifierNode = (0, node_utils_1.getDeepestIdentifierNode)(callExpressionNode);\n            if (!identifierNode) {\n                return;\n            }\n            if (!helpers.isActUtil(identifierNode)) {\n                return;\n            }\n            if ((0, node_utils_1.isEmptyFunction)(functionNode)) {\n                context.report({\n                    node: identifierNode,\n                    messageId: 'noUnnecessaryActEmptyFunction',\n                });\n                return;\n            }\n            const shouldBeReported = isStrict\n                ? hasTestingLibraryCall(blockStatementNode.body)\n                : !hasSomeNonTestingLibraryCall(blockStatementNode.body);\n            if (shouldBeReported) {\n                context.report({\n                    node: identifierNode,\n                    messageId: 'noUnnecessaryActTestingLibraryUtil',\n                });\n            }\n        }\n        function checkNoUnnecessaryActFromImplicitReturn(node) {\n            var _a;\n            const nodeIdentifier = (0, node_utils_1.getDeepestIdentifierNode)(node);\n            if (!nodeIdentifier) {\n                return;\n            }\n            const parentCallExpression = (_a = node.parent) === null || _a === void 0 ? void 0 : _a.parent;\n            if (!parentCallExpression) {\n                return;\n            }\n            const identifierNode = (0, node_utils_1.getDeepestIdentifierNode)(parentCallExpression);\n            if (!identifierNode) {\n                return;\n            }\n            if (!helpers.isActUtil(identifierNode)) {\n                return;\n            }\n            if (!helpers.isTestingLibraryUtil(nodeIdentifier)) {\n                return;\n            }\n            context.report({\n                node: identifierNode,\n                messageId: 'noUnnecessaryActTestingLibraryUtil',\n            });\n        }\n        return {\n            'CallExpression > ArrowFunctionExpression > BlockStatement': checkNoUnnecessaryActFromBlockStatement,\n            'CallExpression > FunctionExpression > BlockStatement': checkNoUnnecessaryActFromBlockStatement,\n            'CallExpression > ArrowFunctionExpression > CallExpression': checkNoUnnecessaryActFromImplicitReturn,\n        };\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}