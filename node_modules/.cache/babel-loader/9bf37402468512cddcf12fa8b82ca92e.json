{"ast":null,"code":"import chalk from 'chalk';\nimport stripAnsi from 'strip-ansi';\n\nconst pluralize = (count, text) => count === 1 ? text : `${text}s`;\n\nexport const printPatternMatches = function (count, entity, pipe) {\n  let extraText = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  const pluralized = pluralize(count, entity);\n  const result = count ? `\\n\\n Pattern matches ${count} ${pluralized}` : `\\n\\n Pattern matches no ${pluralized}`;\n  pipe.write(result + extraText);\n};\nexport const printStartTyping = (entity, pipe) => {\n  pipe.write(`\\n\\n ${chalk.italic.yellow(`Start typing to filter by a ${entity} regex pattern.`)}`);\n};\nexport const printMore = (entity, pipe, more) => {\n  pipe.write(`\\n   ${chalk.dim(`...and ${more} more ${pluralize(more, entity)}`)}`);\n};\nexport const printTypeaheadItem = (item, pipe) => {\n  pipe.write(`\\n ${chalk.dim('\\u203A')} ${item}`);\n};\nexport const formatTypeaheadSelection = (item, index, activeIndex, prompt) => {\n  if (index === activeIndex) {\n    prompt.setPromptSelection(stripAnsi(item));\n    return chalk.black.bgYellow(stripAnsi(item));\n  }\n\n  return item;\n};","map":{"version":3,"names":["chalk","stripAnsi","pluralize","count","text","printPatternMatches","entity","pipe","extraText","pluralized","result","write","printStartTyping","italic","yellow","printMore","more","dim","printTypeaheadItem","item","formatTypeaheadSelection","index","activeIndex","prompt","setPromptSelection","black","bgYellow"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jest-watch-typeahead/build/lib/pattern_mode_helpers.js"],"sourcesContent":["import chalk from 'chalk';\nimport stripAnsi from 'strip-ansi';\n\nconst pluralize = (count, text) => count === 1 ? text : `${text}s`;\n\nexport const printPatternMatches = (count, entity, pipe, extraText = '') => {\n  const pluralized = pluralize(count, entity);\n  const result = count ? `\\n\\n Pattern matches ${count} ${pluralized}` : `\\n\\n Pattern matches no ${pluralized}`;\n  pipe.write(result + extraText);\n};\nexport const printStartTyping = (entity, pipe) => {\n  pipe.write(`\\n\\n ${chalk.italic.yellow(`Start typing to filter by a ${entity} regex pattern.`)}`);\n};\nexport const printMore = (entity, pipe, more) => {\n  pipe.write(`\\n   ${chalk.dim(`...and ${more} more ${pluralize(more, entity)}`)}`);\n};\nexport const printTypeaheadItem = (item, pipe) => {\n  pipe.write(`\\n ${chalk.dim('\\u203A')} ${item}`);\n};\nexport const formatTypeaheadSelection = (item, index, activeIndex, prompt) => {\n  if (index === activeIndex) {\n    prompt.setPromptSelection(stripAnsi(item));\n    return chalk.black.bgYellow(stripAnsi(item));\n  }\n\n  return item;\n};"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiBD,KAAK,KAAK,CAAV,GAAcC,IAAd,GAAsB,GAAEA,IAAK,GAAhE;;AAEA,OAAO,MAAMC,mBAAmB,GAAG,UAACF,KAAD,EAAQG,MAAR,EAAgBC,IAAhB,EAAyC;EAAA,IAAnBC,SAAmB,uEAAP,EAAO;EAC1E,MAAMC,UAAU,GAAGP,SAAS,CAACC,KAAD,EAAQG,MAAR,CAA5B;EACA,MAAMI,MAAM,GAAGP,KAAK,GAAI,wBAAuBA,KAAM,IAAGM,UAAW,EAA/C,GAAoD,2BAA0BA,UAAW,EAA7G;EACAF,IAAI,CAACI,KAAL,CAAWD,MAAM,GAAGF,SAApB;AACD,CAJM;AAKP,OAAO,MAAMI,gBAAgB,GAAG,CAACN,MAAD,EAASC,IAAT,KAAkB;EAChDA,IAAI,CAACI,KAAL,CAAY,QAAOX,KAAK,CAACa,MAAN,CAAaC,MAAb,CAAqB,+BAA8BR,MAAO,iBAA1D,CAA4E,EAA/F;AACD,CAFM;AAGP,OAAO,MAAMS,SAAS,GAAG,CAACT,MAAD,EAASC,IAAT,EAAeS,IAAf,KAAwB;EAC/CT,IAAI,CAACI,KAAL,CAAY,QAAOX,KAAK,CAACiB,GAAN,CAAW,UAASD,IAAK,SAAQd,SAAS,CAACc,IAAD,EAAOV,MAAP,CAAe,EAAzD,CAA4D,EAA/E;AACD,CAFM;AAGP,OAAO,MAAMY,kBAAkB,GAAG,CAACC,IAAD,EAAOZ,IAAP,KAAgB;EAChDA,IAAI,CAACI,KAAL,CAAY,MAAKX,KAAK,CAACiB,GAAN,CAAU,QAAV,CAAoB,IAAGE,IAAK,EAA7C;AACD,CAFM;AAGP,OAAO,MAAMC,wBAAwB,GAAG,CAACD,IAAD,EAAOE,KAAP,EAAcC,WAAd,EAA2BC,MAA3B,KAAsC;EAC5E,IAAIF,KAAK,KAAKC,WAAd,EAA2B;IACzBC,MAAM,CAACC,kBAAP,CAA0BvB,SAAS,CAACkB,IAAD,CAAnC;IACA,OAAOnB,KAAK,CAACyB,KAAN,CAAYC,QAAZ,CAAqBzB,SAAS,CAACkB,IAAD,CAA9B,CAAP;EACD;;EAED,OAAOA,IAAP;AACD,CAPM"},"metadata":{},"sourceType":"module"}