{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar ArrayCreate = require('./ArrayCreate');\n\nvar CreateDataPropertyOrThrow = require('./CreateDataPropertyOrThrow');\n\nvar GetMatchIndexPair = require('./GetMatchIndexPair');\n\nvar IsArray = require('./IsArray');\n\nvar OrdinaryObjectCreate = require('./OrdinaryObjectCreate');\n\nvar ToString = require('./ToString');\n\nvar Type = require('./Type');\n\nvar every = require('../helpers/every');\n\nvar isMatchRecord = require('../helpers/isMatchRecord');\n\nvar isStringOrUndefined = function isStringOrUndefined(s) {\n  return typeof s === 'undefined' || typeof s === 'string';\n};\n\nvar isMatchRecordOrUndefined = function isMatchRecordOrUndefined(m) {\n  return typeof m === 'undefined' || isMatchRecord(m);\n};\n\nvar MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1; // https://ecma-international.org/ecma-262/13.0/#sec-getmatchindexpair\n\nmodule.exports = function MakeMatchIndicesIndexPairArray(S, indices, groupNames, hasGroups) {\n  if (Type(S) !== 'String') {\n    throw new $TypeError('Assertion failed: `S` must be a String');\n  }\n\n  if (!IsArray(indices) || !every(indices, isMatchRecordOrUndefined)) {\n    throw new $TypeError('Assertion failed: `indices` must be a List of either Match Records or `undefined`');\n  }\n\n  if (!IsArray(groupNames) || !every(groupNames, isStringOrUndefined)) {\n    throw new $TypeError('Assertion failed: `groupNames` must be a List of either Strings or `undefined`');\n  }\n\n  if (Type(hasGroups) !== 'Boolean') {\n    throw new $TypeError('Assertion failed: `hasGroups` must be a Boolean');\n  }\n\n  var n = indices.length; // step 1\n\n  if (!(n < MAX_ARRAY_LENGTH)) {\n    throw new $TypeError('Assertion failed: `indices` length must be less than the max array size, 2**32 - 1');\n  }\n\n  if (groupNames.length !== n - 1) {\n    throw new $TypeError('Assertion failed: `groupNames` must have exactly one fewer item than `indices`');\n  }\n\n  var A = ArrayCreate(n); // step 5\n\n  var groups = hasGroups ? OrdinaryObjectCreate(null) : void undefined; // step 6-7\n\n  CreateDataPropertyOrThrow(A, 'groups', groups); // step 8\n\n  for (var i = 0; i < n; i += 1) {\n    // step 9\n    var matchIndices = indices[i]; // step 9.a\n    // eslint-disable-next-line no-negated-condition\n\n    var matchIndexPair = typeof matchIndices !== 'undefined' ? GetMatchIndexPair(S, matchIndices) : void undefined; // step 9.b-9.c\n\n    CreateDataPropertyOrThrow(A, ToString(i), matchIndexPair); // step 9.d\n\n    if (i > 0 && typeof groupNames[i - 1] !== 'undefined') {\n      // step 9.e\n      if (!groups) {\n        throw new $TypeError('if `hasGroups` is `false`, `groupNames` can only contain `undefined` values');\n      }\n\n      CreateDataPropertyOrThrow(groups, groupNames[i - 1], matchIndexPair); // step 9.e.i\n    }\n  }\n\n  return A; // step 10\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","ArrayCreate","CreateDataPropertyOrThrow","GetMatchIndexPair","IsArray","OrdinaryObjectCreate","ToString","Type","every","isMatchRecord","isStringOrUndefined","s","isMatchRecordOrUndefined","m","MAX_ARRAY_LENGTH","Math","pow","module","exports","MakeMatchIndicesIndexPairArray","S","indices","groupNames","hasGroups","n","length","A","groups","undefined","i","matchIndices","matchIndexPair"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2022/MakeMatchIndicesIndexPairArray.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar ArrayCreate = require('./ArrayCreate');\nvar CreateDataPropertyOrThrow = require('./CreateDataPropertyOrThrow');\nvar GetMatchIndexPair = require('./GetMatchIndexPair');\nvar IsArray = require('./IsArray');\nvar OrdinaryObjectCreate = require('./OrdinaryObjectCreate');\nvar ToString = require('./ToString');\nvar Type = require('./Type');\n\nvar every = require('../helpers/every');\nvar isMatchRecord = require('../helpers/isMatchRecord');\n\nvar isStringOrUndefined = function isStringOrUndefined(s) {\n\treturn typeof s === 'undefined' || typeof s === 'string';\n};\n\nvar isMatchRecordOrUndefined = function isMatchRecordOrUndefined(m) {\n\treturn typeof m === 'undefined' || isMatchRecord(m);\n};\n\nvar MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1;\n\n// https://ecma-international.org/ecma-262/13.0/#sec-getmatchindexpair\n\nmodule.exports = function MakeMatchIndicesIndexPairArray(S, indices, groupNames, hasGroups) {\n\tif (Type(S) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `S` must be a String');\n\t}\n\tif (!IsArray(indices) || !every(indices, isMatchRecordOrUndefined)) {\n\t\tthrow new $TypeError('Assertion failed: `indices` must be a List of either Match Records or `undefined`');\n\t}\n\tif (!IsArray(groupNames) || !every(groupNames, isStringOrUndefined)) {\n\t\tthrow new $TypeError('Assertion failed: `groupNames` must be a List of either Strings or `undefined`');\n\t}\n\tif (Type(hasGroups) !== 'Boolean') {\n\t\tthrow new $TypeError('Assertion failed: `hasGroups` must be a Boolean');\n\t}\n\n\tvar n = indices.length; // step 1\n\tif (!(n < MAX_ARRAY_LENGTH)) {\n\t\tthrow new $TypeError('Assertion failed: `indices` length must be less than the max array size, 2**32 - 1');\n\t}\n\tif (groupNames.length !== n - 1) {\n\t\tthrow new $TypeError('Assertion failed: `groupNames` must have exactly one fewer item than `indices`');\n\t}\n\n\tvar A = ArrayCreate(n); // step 5\n\tvar groups = hasGroups ? OrdinaryObjectCreate(null) : void undefined; // step 6-7\n\tCreateDataPropertyOrThrow(A, 'groups', groups); // step 8\n\n\tfor (var i = 0; i < n; i += 1) { // step 9\n\t\tvar matchIndices = indices[i]; // step 9.a\n\t\t// eslint-disable-next-line no-negated-condition\n\t\tvar matchIndexPair = typeof matchIndices !== 'undefined' ? GetMatchIndexPair(S, matchIndices) : void undefined; // step 9.b-9.c\n\t\tCreateDataPropertyOrThrow(A, ToString(i), matchIndexPair); // step 9.d\n\t\tif (i > 0 && typeof groupNames[i - 1] !== 'undefined') { // step 9.e\n\t\t\tif (!groups) {\n\t\t\t\tthrow new $TypeError('if `hasGroups` is `false`, `groupNames` can only contain `undefined` values');\n\t\t\t}\n\t\t\tCreateDataPropertyOrThrow(groups, groupNames[i - 1], matchIndexPair); // step 9.e.i\n\t\t}\n\t}\n\treturn A; // step 10\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}