{"ast":null,"code":"/**\n * @fileoverview Comments inside children section of tag should be placed inside braces.\n * @author Ben Vinegar\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  putCommentInBraces: 'Comments inside children section of tag should be placed inside braces'\n};\n\nfunction checkText(node, context) {\n  // since babel-eslint has the wrong node.raw, we'll get the source text\n  const rawValue = context.getSourceCode().getText(node);\n\n  if (/^\\s*\\/(\\/|\\*)/m.test(rawValue)) {\n    // inside component, e.g. <div>literal</div>\n    if (node.parent.type !== 'JSXAttribute' && node.parent.type !== 'JSXExpressionContainer' && node.parent.type.indexOf('JSX') !== -1) {\n      report(context, messages.putCommentInBraces, 'putCommentInBraces', {\n        node\n      });\n    }\n  }\n}\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow comments from being inserted as text nodes',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('jsx-no-comment-textnodes')\n    },\n    messages,\n    schema: []\n  },\n\n  create(context) {\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n    return {\n      Literal(node) {\n        checkText(node, context);\n      },\n\n      JSXText(node) {\n        checkText(node, context);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","report","messages","putCommentInBraces","checkText","node","context","rawValue","getSourceCode","getText","test","parent","type","indexOf","module","exports","meta","docs","description","category","recommended","url","schema","create","Literal","JSXText"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-no-comment-textnodes.js"],"sourcesContent":["/**\n * @fileoverview Comments inside children section of tag should be placed inside braces.\n * @author Ben Vinegar\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  putCommentInBraces: 'Comments inside children section of tag should be placed inside braces',\n};\n\nfunction checkText(node, context) {\n  // since babel-eslint has the wrong node.raw, we'll get the source text\n  const rawValue = context.getSourceCode().getText(node);\n  if (/^\\s*\\/(\\/|\\*)/m.test(rawValue)) {\n    // inside component, e.g. <div>literal</div>\n    if (\n      node.parent.type !== 'JSXAttribute'\n      && node.parent.type !== 'JSXExpressionContainer'\n      && node.parent.type.indexOf('JSX') !== -1\n    ) {\n      report(context, messages.putCommentInBraces, 'putCommentInBraces', {\n        node,\n      });\n    }\n  }\n}\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow comments from being inserted as text nodes',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('jsx-no-comment-textnodes'),\n    },\n\n    messages,\n\n    schema: [],\n  },\n\n  create(context) {\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      Literal(node) {\n        checkText(node, context);\n      },\n      JSXText(node) {\n        checkText(node, context);\n      },\n    };\n  },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAAtB,C,CAEA;AACA;AACA;;;AAEA,MAAME,QAAQ,GAAG;EACfC,kBAAkB,EAAE;AADL,CAAjB;;AAIA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkC;EAChC;EACA,MAAMC,QAAQ,GAAGD,OAAO,CAACE,aAAR,GAAwBC,OAAxB,CAAgCJ,IAAhC,CAAjB;;EACA,IAAI,iBAAiBK,IAAjB,CAAsBH,QAAtB,CAAJ,EAAqC;IACnC;IACA,IACEF,IAAI,CAACM,MAAL,CAAYC,IAAZ,KAAqB,cAArB,IACGP,IAAI,CAACM,MAAL,CAAYC,IAAZ,KAAqB,wBADxB,IAEGP,IAAI,CAACM,MAAL,CAAYC,IAAZ,CAAiBC,OAAjB,CAAyB,KAAzB,MAAoC,CAAC,CAH1C,EAIE;MACAZ,MAAM,CAACK,OAAD,EAAUJ,QAAQ,CAACC,kBAAnB,EAAuC,oBAAvC,EAA6D;QACjEE;MADiE,CAA7D,CAAN;IAGD;EACF;AACF;;AAEDS,MAAM,CAACC,OAAP,GAAiB;EACfC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,WAAW,EAAE,qDADT;MAEJC,QAAQ,EAAE,iBAFN;MAGJC,WAAW,EAAE,IAHT;MAIJC,GAAG,EAAEtB,OAAO,CAAC,0BAAD;IAJR,CADF;IAQJG,QARI;IAUJoB,MAAM,EAAE;EAVJ,CADS;;EAcfC,MAAM,CAACjB,OAAD,EAAU;IACd;IACA;IACA;IAEA,OAAO;MACLkB,OAAO,CAACnB,IAAD,EAAO;QACZD,SAAS,CAACC,IAAD,EAAOC,OAAP,CAAT;MACD,CAHI;;MAILmB,OAAO,CAACpB,IAAD,EAAO;QACZD,SAAS,CAACC,IAAD,EAAOC,OAAP,CAAT;MACD;;IANI,CAAP;EAQD;;AA3Bc,CAAjB"},"metadata":{},"sourceType":"script"}