{"ast":null,"code":"var List = require('css-tree').List;\n\nvar walk = require('css-tree').walk;\n\nfunction processRule(node, item, list) {\n  var selectors = node.prelude.children; // generate new rule sets:\n  // .a, .b { color: red; }\n  // ->\n  // .a { color: red; }\n  // .b { color: red; }\n  // while there are more than 1 simple selector split for rulesets\n\n  while (selectors.head !== selectors.tail) {\n    var newSelectors = new List();\n    newSelectors.insert(selectors.remove(selectors.head));\n    list.insert(list.createItem({\n      type: 'Rule',\n      loc: node.loc,\n      prelude: {\n        type: 'SelectorList',\n        loc: node.prelude.loc,\n        children: newSelectors\n      },\n      block: {\n        type: 'Block',\n        loc: node.block.loc,\n        children: node.block.children.copy()\n      },\n      pseudoSignature: node.pseudoSignature\n    }), item);\n  }\n}\n\nmodule.exports = function disjoinRule(ast) {\n  walk(ast, {\n    visit: 'Rule',\n    reverse: true,\n    enter: processRule\n  });\n};","map":{"version":3,"names":["List","require","walk","processRule","node","item","list","selectors","prelude","children","head","tail","newSelectors","insert","remove","createItem","type","loc","block","copy","pseudoSignature","module","exports","disjoinRule","ast","visit","reverse","enter"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/csso/lib/restructure/3-disjoinRuleset.js"],"sourcesContent":["var List = require('css-tree').List;\nvar walk = require('css-tree').walk;\n\nfunction processRule(node, item, list) {\n    var selectors = node.prelude.children;\n\n    // generate new rule sets:\n    // .a, .b { color: red; }\n    // ->\n    // .a { color: red; }\n    // .b { color: red; }\n\n    // while there are more than 1 simple selector split for rulesets\n    while (selectors.head !== selectors.tail) {\n        var newSelectors = new List();\n        newSelectors.insert(selectors.remove(selectors.head));\n\n        list.insert(list.createItem({\n            type: 'Rule',\n            loc: node.loc,\n            prelude: {\n                type: 'SelectorList',\n                loc: node.prelude.loc,\n                children: newSelectors\n            },\n            block: {\n                type: 'Block',\n                loc: node.block.loc,\n                children: node.block.children.copy()\n            },\n            pseudoSignature: node.pseudoSignature\n        }), item);\n    }\n}\n\nmodule.exports = function disjoinRule(ast) {\n    walk(ast, {\n        visit: 'Rule',\n        reverse: true,\n        enter: processRule\n    });\n};\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBD,IAA/B;;AACA,IAAIE,IAAI,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,IAA/B;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,IAAjC,EAAuC;EACnC,IAAIC,SAAS,GAAGH,IAAI,CAACI,OAAL,CAAaC,QAA7B,CADmC,CAGnC;EACA;EACA;EACA;EACA;EAEA;;EACA,OAAOF,SAAS,CAACG,IAAV,KAAmBH,SAAS,CAACI,IAApC,EAA0C;IACtC,IAAIC,YAAY,GAAG,IAAIZ,IAAJ,EAAnB;IACAY,YAAY,CAACC,MAAb,CAAoBN,SAAS,CAACO,MAAV,CAAiBP,SAAS,CAACG,IAA3B,CAApB;IAEAJ,IAAI,CAACO,MAAL,CAAYP,IAAI,CAACS,UAAL,CAAgB;MACxBC,IAAI,EAAE,MADkB;MAExBC,GAAG,EAAEb,IAAI,CAACa,GAFc;MAGxBT,OAAO,EAAE;QACLQ,IAAI,EAAE,cADD;QAELC,GAAG,EAAEb,IAAI,CAACI,OAAL,CAAaS,GAFb;QAGLR,QAAQ,EAAEG;MAHL,CAHe;MAQxBM,KAAK,EAAE;QACHF,IAAI,EAAE,OADH;QAEHC,GAAG,EAAEb,IAAI,CAACc,KAAL,CAAWD,GAFb;QAGHR,QAAQ,EAAEL,IAAI,CAACc,KAAL,CAAWT,QAAX,CAAoBU,IAApB;MAHP,CARiB;MAaxBC,eAAe,EAAEhB,IAAI,CAACgB;IAbE,CAAhB,CAAZ,EAcIf,IAdJ;EAeH;AACJ;;AAEDgB,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,GAArB,EAA0B;EACvCtB,IAAI,CAACsB,GAAD,EAAM;IACNC,KAAK,EAAE,MADD;IAENC,OAAO,EAAE,IAFH;IAGNC,KAAK,EAAExB;EAHD,CAAN,CAAJ;AAKH,CAND"},"metadata":{},"sourceType":"script"}