{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst findOnlyNode = node => {\n  const callee = node.callee.type === _experimentalUtils.AST_NODE_TYPES.TaggedTemplateExpression ? node.callee.tag : node.callee.type === _experimentalUtils.AST_NODE_TYPES.CallExpression ? node.callee.callee : node.callee;\n\n  if (callee.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression) {\n    if (callee.object.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression) {\n      if ((0, _utils.isSupportedAccessor)(callee.object.property, 'only')) {\n        return callee.object.property;\n      }\n    }\n\n    if ((0, _utils.isSupportedAccessor)(callee.property, 'only')) {\n      return callee.property;\n    }\n  }\n\n  return null;\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow focused tests',\n      recommended: 'error',\n      suggestion: true\n    },\n    messages: {\n      focusedTest: 'Unexpected focused test.',\n      suggestRemoveFocus: 'Remove focus from test.'\n    },\n    schema: [],\n    type: 'suggestion',\n    hasSuggestions: true\n  },\n  defaultOptions: [],\n  create: context => ({\n    CallExpression(node) {\n      if (!(0, _utils.isDescribeCall)(node) && !(0, _utils.isTestCaseCall)(node)) {\n        return;\n      }\n\n      if ((0, _utils.getNodeName)(node).startsWith('f')) {\n        context.report({\n          messageId: 'focusedTest',\n          node,\n          suggest: [{\n            messageId: 'suggestRemoveFocus',\n            fix: fixer => fixer.removeRange([node.range[0], node.range[0] + 1])\n          }]\n        });\n        return;\n      }\n\n      const onlyNode = findOnlyNode(node);\n\n      if (!onlyNode) {\n        return;\n      }\n\n      context.report({\n        messageId: 'focusedTest',\n        node: onlyNode,\n        suggest: [{\n          messageId: 'suggestRemoveFocus',\n          fix: fixer => fixer.removeRange([onlyNode.range[0] - 1, onlyNode.range[1] + Number(onlyNode.type !== _experimentalUtils.AST_NODE_TYPES.Identifier)])\n        }]\n      });\n    }\n\n  })\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","findOnlyNode","node","callee","type","AST_NODE_TYPES","TaggedTemplateExpression","tag","CallExpression","MemberExpression","object","isSupportedAccessor","property","_default","createRule","name","__filename","meta","docs","category","description","recommended","suggestion","messages","focusedTest","suggestRemoveFocus","schema","hasSuggestions","defaultOptions","create","context","isDescribeCall","isTestCaseCall","getNodeName","startsWith","report","messageId","suggest","fix","fixer","removeRange","range","onlyNode","Number","Identifier"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-focused-tests.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst findOnlyNode = node => {\n  const callee = node.callee.type === _experimentalUtils.AST_NODE_TYPES.TaggedTemplateExpression ? node.callee.tag : node.callee.type === _experimentalUtils.AST_NODE_TYPES.CallExpression ? node.callee.callee : node.callee;\n\n  if (callee.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression) {\n    if (callee.object.type === _experimentalUtils.AST_NODE_TYPES.MemberExpression) {\n      if ((0, _utils.isSupportedAccessor)(callee.object.property, 'only')) {\n        return callee.object.property;\n      }\n    }\n\n    if ((0, _utils.isSupportedAccessor)(callee.property, 'only')) {\n      return callee.property;\n    }\n  }\n\n  return null;\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow focused tests',\n      recommended: 'error',\n      suggestion: true\n    },\n    messages: {\n      focusedTest: 'Unexpected focused test.',\n      suggestRemoveFocus: 'Remove focus from test.'\n    },\n    schema: [],\n    type: 'suggestion',\n    hasSuggestions: true\n  },\n  defaultOptions: [],\n  create: context => ({\n    CallExpression(node) {\n      if (!(0, _utils.isDescribeCall)(node) && !(0, _utils.isTestCaseCall)(node)) {\n        return;\n      }\n\n      if ((0, _utils.getNodeName)(node).startsWith('f')) {\n        context.report({\n          messageId: 'focusedTest',\n          node,\n          suggest: [{\n            messageId: 'suggestRemoveFocus',\n            fix: fixer => fixer.removeRange([node.range[0], node.range[0] + 1])\n          }]\n        });\n        return;\n      }\n\n      const onlyNode = findOnlyNode(node);\n\n      if (!onlyNode) {\n        return;\n      }\n\n      context.report({\n        messageId: 'focusedTest',\n        node: onlyNode,\n        suggest: [{\n          messageId: 'suggestRemoveFocus',\n          fix: fixer => fixer.removeRange([onlyNode.range[0] - 1, onlyNode.range[1] + Number(onlyNode.type !== _experimentalUtils.AST_NODE_TYPES.Identifier)])\n        }]\n      });\n    }\n\n  })\n});\n\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}