{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst valueParser = require('postcss-value-parser');\n\nconst normalize = require('normalize-url');\n\nconst multiline = /\\\\[\\r\\n]/; // eslint-disable-next-line no-useless-escape\n\nconst escapeChars = /([\\s\\(\\)\"'])/g; // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\n\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/; // Windows paths like `c:\\`\n\nconst WINDOWS_PATH_REGEX = /^[a-zA-Z]:\\\\/;\n/**\n * Originally in sindresorhus/is-absolute-url\n *\n * @param {string} url\n */\n\nfunction isAbsolute(url) {\n  if (WINDOWS_PATH_REGEX.test(url)) {\n    return false;\n  }\n\n  return ABSOLUTE_URL_REGEX.test(url);\n}\n/**\n * @param {string} url\n * @param {normalize.Options} options\n * @return {string}\n */\n\n\nfunction convert(url, options) {\n  if (isAbsolute(url) || url.startsWith('//')) {\n    let normalizedURL;\n\n    try {\n      normalizedURL = normalize(url, options);\n    } catch (e) {\n      normalizedURL = url;\n    }\n\n    return normalizedURL;\n  } // `path.normalize` always returns backslashes on Windows, need replace in `/`\n\n\n  return path.normalize(url).replace(new RegExp('\\\\' + path.sep, 'g'), '/');\n}\n/**\n * @param {import('postcss').AtRule} rule\n * @return {void}\n */\n\n\nfunction transformNamespace(rule) {\n  rule.params = valueParser(rule.params).walk(node => {\n    if (node.type === 'function' && node.value.toLowerCase() === 'url' && node.nodes.length) {\n      /** @type {valueParser.Node} */\n      node.type = 'string';\n      /** @type {any} */\n\n      node.quote = node.nodes[0].type === 'string' ? node.nodes[0].quote : '\"';\n      node.value = node.nodes[0].value;\n    }\n\n    if (node.type === 'string') {\n      node.value = node.value.trim();\n    }\n\n    return false;\n  }).toString();\n}\n/**\n * @param {import('postcss').Declaration} decl\n * @param {normalize.Options} opts\n * @return {void}\n */\n\n\nfunction transformDecl(decl, opts) {\n  decl.value = valueParser(decl.value).walk(node => {\n    if (node.type !== 'function' || node.value.toLowerCase() !== 'url') {\n      return false;\n    }\n\n    node.before = node.after = '';\n\n    if (!node.nodes.length) {\n      return false;\n    }\n\n    let url = node.nodes[0];\n    let escaped;\n    url.value = url.value.trim().replace(multiline, ''); // Skip empty URLs\n    // Empty URL function equals request to current stylesheet where it is declared\n\n    if (url.value.length === 0) {\n      /** @type {any} */\n      url.quote = '';\n      return false;\n    }\n\n    if (/^data:(.*)?,/i.test(url.value)) {\n      return false;\n    }\n\n    if (!/^.+-extension:\\//i.test(url.value)) {\n      url.value = convert(url.value, opts);\n    }\n\n    if (escapeChars.test(url.value) && url.type === 'string') {\n      escaped = url.value.replace(escapeChars, '\\\\$1');\n\n      if (escaped.length < url.value.length + 2) {\n        url.value = escaped;\n        /** @type {valueParser.Node} */\n\n        url.type = 'word';\n      }\n    } else {\n      url.type = 'word';\n    }\n\n    return false;\n  }).toString();\n}\n/** @typedef {normalize.Options} Options */\n\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options} opts\n * @return {import('postcss').Plugin}\n */\n\n\nfunction pluginCreator(opts) {\n  opts = Object.assign({}, {\n    normalizeProtocol: false,\n    sortQueryParameters: false,\n    stripHash: false,\n    stripWWW: false,\n    stripTextFragment: false\n  }, opts);\n  return {\n    postcssPlugin: 'postcss-normalize-url',\n\n    OnceExit(css) {\n      css.walk(node => {\n        if (node.type === 'decl') {\n          return transformDecl(node, opts);\n        } else if (node.type === 'atrule' && node.name.toLowerCase() === 'namespace') {\n          return transformNamespace(node);\n        }\n      });\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"names":["path","require","valueParser","normalize","multiline","escapeChars","ABSOLUTE_URL_REGEX","WINDOWS_PATH_REGEX","isAbsolute","url","test","convert","options","startsWith","normalizedURL","e","replace","RegExp","sep","transformNamespace","rule","params","walk","node","type","value","toLowerCase","nodes","length","quote","trim","toString","transformDecl","decl","opts","before","after","escaped","pluginCreator","Object","assign","normalizeProtocol","sortQueryParameters","stripHash","stripWWW","stripTextFragment","postcssPlugin","OnceExit","css","name","postcss","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-normalize-url/src/index.js"],"sourcesContent":["'use strict';\nconst path = require('path');\nconst valueParser = require('postcss-value-parser');\nconst normalize = require('normalize-url');\n\nconst multiline = /\\\\[\\r\\n]/;\n// eslint-disable-next-line no-useless-escape\nconst escapeChars = /([\\s\\(\\)\"'])/g;\n\n// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/;\n// Windows paths like `c:\\`\nconst WINDOWS_PATH_REGEX = /^[a-zA-Z]:\\\\/;\n\n/**\n * Originally in sindresorhus/is-absolute-url\n *\n * @param {string} url\n */\nfunction isAbsolute(url) {\n  if (WINDOWS_PATH_REGEX.test(url)) {\n    return false;\n  }\n  return ABSOLUTE_URL_REGEX.test(url);\n}\n\n/**\n * @param {string} url\n * @param {normalize.Options} options\n * @return {string}\n */\nfunction convert(url, options) {\n  if (isAbsolute(url) || url.startsWith('//')) {\n    let normalizedURL;\n\n    try {\n      normalizedURL = normalize(url, options);\n    } catch (e) {\n      normalizedURL = url;\n    }\n\n    return normalizedURL;\n  }\n\n  // `path.normalize` always returns backslashes on Windows, need replace in `/`\n  return path.normalize(url).replace(new RegExp('\\\\' + path.sep, 'g'), '/');\n}\n\n/**\n * @param {import('postcss').AtRule} rule\n * @return {void}\n */\nfunction transformNamespace(rule) {\n  rule.params = valueParser(rule.params)\n    .walk((node) => {\n      if (\n        node.type === 'function' &&\n        node.value.toLowerCase() === 'url' &&\n        node.nodes.length\n      ) {\n        /** @type {valueParser.Node} */ (node).type = 'string';\n        /** @type {any} */ (node).quote =\n          node.nodes[0].type === 'string' ? node.nodes[0].quote : '\"';\n        node.value = node.nodes[0].value;\n      }\n      if (node.type === 'string') {\n        node.value = node.value.trim();\n      }\n      return false;\n    })\n    .toString();\n}\n\n/**\n * @param {import('postcss').Declaration} decl\n * @param {normalize.Options} opts\n * @return {void}\n */\nfunction transformDecl(decl, opts) {\n  decl.value = valueParser(decl.value)\n    .walk((node) => {\n      if (node.type !== 'function' || node.value.toLowerCase() !== 'url') {\n        return false;\n      }\n\n      node.before = node.after = '';\n\n      if (!node.nodes.length) {\n        return false;\n      }\n      let url = node.nodes[0];\n      let escaped;\n\n      url.value = url.value.trim().replace(multiline, '');\n\n      // Skip empty URLs\n      // Empty URL function equals request to current stylesheet where it is declared\n      if (url.value.length === 0) {\n        /** @type {any} */ (url).quote = '';\n\n        return false;\n      }\n\n      if (/^data:(.*)?,/i.test(url.value)) {\n        return false;\n      }\n\n      if (!/^.+-extension:\\//i.test(url.value)) {\n        url.value = convert(url.value, opts);\n      }\n\n      if (escapeChars.test(url.value) && url.type === 'string') {\n        escaped = url.value.replace(escapeChars, '\\\\$1');\n\n        if (escaped.length < url.value.length + 2) {\n          url.value = escaped;\n          /** @type {valueParser.Node} */ (url).type = 'word';\n        }\n      } else {\n        url.type = 'word';\n      }\n\n      return false;\n    })\n    .toString();\n}\n\n/** @typedef {normalize.Options} Options */\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options} opts\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator(opts) {\n  opts = Object.assign(\n    {},\n    {\n      normalizeProtocol: false,\n      sortQueryParameters: false,\n      stripHash: false,\n      stripWWW: false,\n      stripTextFragment: false,\n    },\n    opts\n  );\n\n  return {\n    postcssPlugin: 'postcss-normalize-url',\n\n    OnceExit(css) {\n      css.walk((node) => {\n        if (node.type === 'decl') {\n          return transformDecl(node, opts);\n        } else if (\n          node.type === 'atrule' &&\n          node.name.toLowerCase() === 'namespace'\n        ) {\n          return transformNamespace(node);\n        }\n      });\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}