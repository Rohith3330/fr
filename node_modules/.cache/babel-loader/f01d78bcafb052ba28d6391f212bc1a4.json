{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nconst moduleRequire = require('./module-require').default;\n\nconst extname = require('path').extname;\n\nconst fs = require('fs');\n\nconst log = require('debug')('eslint-plugin-import:parse');\n\nfunction getBabelEslintVisitorKeys(parserPath) {\n  if (parserPath.endsWith('index.js')) {\n    const hypotheticalLocation = parserPath.replace('index.js', 'visitor-keys.js');\n\n    if (fs.existsSync(hypotheticalLocation)) {\n      const keys = moduleRequire(hypotheticalLocation);\n      return keys.default || keys;\n    }\n  }\n\n  return null;\n}\n\nfunction keysFromParser(parserPath, parserInstance, parsedResult) {\n  // Exposed by @typescript-eslint/parser and @babel/eslint-parser\n  if (parsedResult && parsedResult.visitorKeys) {\n    return parsedResult.visitorKeys;\n  }\n\n  if (/.*espree.*/.test(parserPath)) {\n    return parserInstance.VisitorKeys;\n  }\n\n  if (/.*babel-eslint.*/.test(parserPath)) {\n    return getBabelEslintVisitorKeys(parserPath);\n  }\n\n  return null;\n} // this exists to smooth over the unintentional breaking change in v2.7.\n// TODO, semver-major: avoid mutating `ast` and return a plain object instead.\n\n\nfunction makeParseReturn(ast, visitorKeys) {\n  if (ast) {\n    ast.visitorKeys = visitorKeys;\n    ast.ast = ast;\n  }\n\n  return ast;\n}\n\nfunction stripUnicodeBOM(text) {\n  return text.charCodeAt(0) === 0xFEFF ? text.slice(1) : text;\n}\n\nfunction transformHashbang(text) {\n  return text.replace(/^#!([^\\r\\n]+)/u, (_, captured) => `//${captured}`);\n}\n\nexports.default = function parse(path, content, context) {\n  if (context == null) throw new Error('need context to parse properly');\n  let parserOptions = context.parserOptions;\n  const parserPath = getParserPath(path, context);\n  if (!parserPath) throw new Error('parserPath is required!'); // hack: espree blows up with frozen options\n\n  parserOptions = Object.assign({}, parserOptions);\n  parserOptions.ecmaFeatures = Object.assign({}, parserOptions.ecmaFeatures); // always include comments and tokens (for doc parsing)\n\n  parserOptions.comment = true;\n  parserOptions.attachComment = true; // keeping this for backward-compat with  older parsers\n\n  parserOptions.tokens = true; // attach node locations\n\n  parserOptions.loc = true;\n  parserOptions.range = true; // provide the `filePath` like eslint itself does, in `parserOptions`\n  // https://github.com/eslint/eslint/blob/3ec436ee/lib/linter.js#L637\n\n  parserOptions.filePath = path; // @typescript-eslint/parser will parse the entire project with typechecking if you provide\n  // \"project\" or \"projects\" in parserOptions. Removing these options means the parser will\n  // only parse one file in isolate mode, which is much, much faster.\n  // https://github.com/import-js/eslint-plugin-import/issues/1408#issuecomment-509298962\n\n  delete parserOptions.project;\n  delete parserOptions.projects; // require the parser relative to the main module (i.e., ESLint)\n\n  const parser = moduleRequire(parserPath); // replicate bom strip and hashbang transform of ESLint\n  // https://github.com/eslint/eslint/blob/b93af98b3c417225a027cabc964c38e779adb945/lib/linter/linter.js#L779\n\n  content = transformHashbang(stripUnicodeBOM(String(content)));\n\n  if (typeof parser.parseForESLint === 'function') {\n    let ast;\n\n    try {\n      const parserRaw = parser.parseForESLint(content, parserOptions);\n      ast = parserRaw.ast;\n      return makeParseReturn(ast, keysFromParser(parserPath, parser, parserRaw));\n    } catch (e) {\n      console.warn();\n      console.warn('Error while parsing ' + parserOptions.filePath);\n      console.warn('Line ' + e.lineNumber + ', column ' + e.column + ': ' + e.message);\n    }\n\n    if (!ast || typeof ast !== 'object') {\n      console.warn('`parseForESLint` from parser `' + parserPath + '` is invalid and will just be ignored');\n    } else {\n      return makeParseReturn(ast, keysFromParser(parserPath, parser, undefined));\n    }\n  }\n\n  const ast = parser.parse(content, parserOptions);\n  return makeParseReturn(ast, keysFromParser(parserPath, parser, undefined));\n};\n\nfunction getParserPath(path, context) {\n  const parsers = context.settings['import/parsers'];\n\n  if (parsers != null) {\n    const extension = extname(path);\n\n    for (const parserPath in parsers) {\n      if (parsers[parserPath].indexOf(extension) > -1) {\n        // use this alternate parser\n        log('using alt parser:', parserPath);\n        return parserPath;\n      }\n    }\n  } // default to use ESLint parser\n\n\n  return context.parserPath;\n}","map":{"version":3,"names":["exports","__esModule","moduleRequire","require","default","extname","fs","log","getBabelEslintVisitorKeys","parserPath","endsWith","hypotheticalLocation","replace","existsSync","keys","keysFromParser","parserInstance","parsedResult","visitorKeys","test","VisitorKeys","makeParseReturn","ast","stripUnicodeBOM","text","charCodeAt","slice","transformHashbang","_","captured","parse","path","content","context","Error","parserOptions","getParserPath","Object","assign","ecmaFeatures","comment","attachComment","tokens","loc","range","filePath","project","projects","parser","String","parseForESLint","parserRaw","e","console","warn","lineNumber","column","message","undefined","parsers","settings","extension","indexOf"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-module-utils/parse.js"],"sourcesContent":["'use strict';\nexports.__esModule = true;\n\nconst moduleRequire = require('./module-require').default;\nconst extname = require('path').extname;\nconst fs = require('fs');\n\nconst log = require('debug')('eslint-plugin-import:parse');\n\nfunction getBabelEslintVisitorKeys(parserPath) {\n  if (parserPath.endsWith('index.js')) {\n    const hypotheticalLocation = parserPath.replace('index.js', 'visitor-keys.js');\n    if (fs.existsSync(hypotheticalLocation)) {\n      const keys = moduleRequire(hypotheticalLocation);\n      return keys.default || keys;\n    }\n  }\n  return null;\n}\n\nfunction keysFromParser(parserPath, parserInstance, parsedResult) {\n  // Exposed by @typescript-eslint/parser and @babel/eslint-parser\n  if (parsedResult && parsedResult.visitorKeys) {\n    return parsedResult.visitorKeys;\n  }\n  if (/.*espree.*/.test(parserPath)) {\n    return parserInstance.VisitorKeys;\n  }\n  if (/.*babel-eslint.*/.test(parserPath)) {\n    return getBabelEslintVisitorKeys(parserPath);\n  }\n  return null;\n}\n\n// this exists to smooth over the unintentional breaking change in v2.7.\n// TODO, semver-major: avoid mutating `ast` and return a plain object instead.\nfunction makeParseReturn(ast, visitorKeys) {\n  if (ast) {\n    ast.visitorKeys = visitorKeys;\n    ast.ast = ast;\n  }\n  return ast;\n}\n\nfunction stripUnicodeBOM(text) {\n  return text.charCodeAt(0) === 0xFEFF ? text.slice(1) : text;\n}\n\nfunction transformHashbang(text) {\n  return text.replace(/^#!([^\\r\\n]+)/u, (_, captured) => `//${captured}`);\n}\n\nexports.default = function parse(path, content, context) {\n\n  if (context == null) throw new Error('need context to parse properly');\n\n  let parserOptions = context.parserOptions;\n  const parserPath = getParserPath(path, context);\n\n  if (!parserPath) throw new Error('parserPath is required!');\n\n  // hack: espree blows up with frozen options\n  parserOptions = Object.assign({}, parserOptions);\n  parserOptions.ecmaFeatures = Object.assign({}, parserOptions.ecmaFeatures);\n\n  // always include comments and tokens (for doc parsing)\n  parserOptions.comment = true;\n  parserOptions.attachComment = true;  // keeping this for backward-compat with  older parsers\n  parserOptions.tokens = true;\n\n  // attach node locations\n  parserOptions.loc = true;\n  parserOptions.range = true;\n\n  // provide the `filePath` like eslint itself does, in `parserOptions`\n  // https://github.com/eslint/eslint/blob/3ec436ee/lib/linter.js#L637\n  parserOptions.filePath = path;\n\n  // @typescript-eslint/parser will parse the entire project with typechecking if you provide\n  // \"project\" or \"projects\" in parserOptions. Removing these options means the parser will\n  // only parse one file in isolate mode, which is much, much faster.\n  // https://github.com/import-js/eslint-plugin-import/issues/1408#issuecomment-509298962\n  delete parserOptions.project;\n  delete parserOptions.projects;\n\n  // require the parser relative to the main module (i.e., ESLint)\n  const parser = moduleRequire(parserPath);\n\n  // replicate bom strip and hashbang transform of ESLint\n  // https://github.com/eslint/eslint/blob/b93af98b3c417225a027cabc964c38e779adb945/lib/linter/linter.js#L779\n  content = transformHashbang(stripUnicodeBOM(String(content)));\n\n  if (typeof parser.parseForESLint === 'function') {\n    let ast;\n    try {\n      const parserRaw = parser.parseForESLint(content, parserOptions);\n      ast = parserRaw.ast;\n      return makeParseReturn(ast, keysFromParser(parserPath, parser, parserRaw));\n    } catch (e) {\n      console.warn();\n      console.warn('Error while parsing ' + parserOptions.filePath);\n      console.warn('Line ' + e.lineNumber + ', column ' + e.column + ': ' + e.message);\n    }\n    if (!ast || typeof ast !== 'object') {\n      console.warn(\n        '`parseForESLint` from parser `' +\n          parserPath +\n          '` is invalid and will just be ignored'\n      );\n    } else {\n      return makeParseReturn(ast, keysFromParser(parserPath, parser, undefined));\n    }\n  }\n\n  const ast = parser.parse(content, parserOptions);\n  return makeParseReturn(ast, keysFromParser(parserPath, parser, undefined));\n};\n\nfunction getParserPath(path, context) {\n  const parsers = context.settings['import/parsers'];\n  if (parsers != null) {\n    const extension = extname(path);\n    for (const parserPath in parsers) {\n      if (parsers[parserPath].indexOf(extension) > -1) {\n        // use this alternate parser\n        log('using alt parser:', parserPath);\n        return parserPath;\n      }\n    }\n  }\n  // default to use ESLint parser\n  return context.parserPath;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}