{"ast":null,"code":"/**\n * @fileoverview Enforce that elements that do not support ARIA roles,\n *  states and properties do not have those attributes.\n * @author Ethan Cohen\n */\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nimport { dom } from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/aria-unsupported-elements'; // -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst errorMessage = invalidProp => ({\n  message: `This element does not support ARIA roles, states and properties. \\\nTry removing the prop '${invalidProp}'.`,\n  type: 'JSXOpeningElement'\n});\n\nconst domElements = [...dom.keys()]; // Generate valid test cases\n\nconst roleValidityTests = domElements.map(element => {\n  const isReserved = dom.get(element).reserved || false;\n  const role = isReserved ? '' : 'role';\n  return {\n    code: `<${element} ${role} />`\n  };\n});\nconst ariaValidityTests = domElements.map(element => {\n  const isReserved = dom.get(element).reserved || false;\n  const aria = isReserved ? '' : 'aria-hidden';\n  return {\n    code: `<${element} ${aria} />`\n  };\n}).concat({\n  code: '<fake aria-hidden />',\n  errors: [errorMessage('aria-hidden')]\n}); // Generate invalid test cases.\n\nconst invalidRoleValidityTests = domElements.filter(element => Boolean(dom.get(element).reserved)).map(reservedElem => ({\n  code: `<${reservedElem} role {...props} />`,\n  errors: [errorMessage('role')]\n})).concat({\n  code: '<Meta aria-hidden />',\n  errors: [errorMessage('aria-hidden')],\n  settings: {\n    'jsx-a11y': {\n      components: {\n        Meta: 'meta'\n      }\n    }\n  }\n});\nconst invalidAriaValidityTests = domElements.filter(element => Boolean(dom.get(element).reserved)).map(reservedElem => ({\n  code: `<${reservedElem} aria-hidden aria-role=\"none\" {...props} />`,\n  errors: [errorMessage('aria-hidden')]\n}));\nruleTester.run('aria-unsupported-elements', rule, {\n  valid: roleValidityTests.concat(ariaValidityTests).map(parserOptionsMapper),\n  invalid: invalidRoleValidityTests.concat(invalidAriaValidityTests).map(parserOptionsMapper)\n});","map":{"version":3,"names":["dom","RuleTester","parserOptionsMapper","rule","ruleTester","errorMessage","invalidProp","message","type","domElements","keys","roleValidityTests","map","element","isReserved","get","reserved","role","code","ariaValidityTests","aria","concat","errors","invalidRoleValidityTests","filter","Boolean","reservedElem","settings","components","Meta","invalidAriaValidityTests","run","valid","invalid"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/aria-unsupported-elements-test.js"],"sourcesContent":["/**\n * @fileoverview Enforce that elements that do not support ARIA roles,\n *  states and properties do not have those attributes.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { dom } from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/aria-unsupported-elements';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst errorMessage = (invalidProp) => ({\n  message: `This element does not support ARIA roles, states and properties. \\\nTry removing the prop '${invalidProp}'.`,\n  type: 'JSXOpeningElement',\n});\n\nconst domElements = [...dom.keys()];\n// Generate valid test cases\nconst roleValidityTests = domElements.map((element) => {\n  const isReserved = dom.get(element).reserved || false;\n  const role = isReserved ? '' : 'role';\n\n  return {\n    code: `<${element} ${role} />`,\n  };\n});\n\nconst ariaValidityTests = domElements.map((element) => {\n  const isReserved = dom.get(element).reserved || false;\n  const aria = isReserved ? '' : 'aria-hidden';\n\n  return {\n    code: `<${element} ${aria} />`,\n  };\n}).concat({\n  code: '<fake aria-hidden />',\n  errors: [errorMessage('aria-hidden')],\n});\n\n// Generate invalid test cases.\nconst invalidRoleValidityTests = domElements\n  .filter((element) => Boolean(dom.get(element).reserved))\n  .map((reservedElem) => ({\n    code: `<${reservedElem} role {...props} />`,\n    errors: [errorMessage('role')],\n  })).concat({\n    code: '<Meta aria-hidden />',\n    errors: [errorMessage('aria-hidden')],\n    settings: { 'jsx-a11y': { components: { Meta: 'meta' } } },\n  });\n\nconst invalidAriaValidityTests = domElements\n  .filter((element) => Boolean(dom.get(element).reserved))\n  .map((reservedElem) => ({\n    code: `<${reservedElem} aria-hidden aria-role=\"none\" {...props} />`,\n    errors: [errorMessage('aria-hidden')],\n  }));\n\nruleTester.run('aria-unsupported-elements', rule, {\n  valid: roleValidityTests.concat(ariaValidityTests).map(parserOptionsMapper),\n  invalid: invalidRoleValidityTests.concat(invalidAriaValidityTests)\n    .map(parserOptionsMapper),\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,SAASA,GAAT,QAAoB,YAApB;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AACA,OAAOC,IAAP,MAAiB,8CAAjB,C,CAEA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG,IAAIH,UAAJ,EAAnB;;AAEA,MAAMI,YAAY,GAAIC,WAAD,KAAkB;EACrCC,OAAO,EAAG;AACZ,yBAAyBD,WAAY,IAFE;EAGrCE,IAAI,EAAE;AAH+B,CAAlB,CAArB;;AAMA,MAAMC,WAAW,GAAG,CAAC,GAAGT,GAAG,CAACU,IAAJ,EAAJ,CAApB,C,CACA;;AACA,MAAMC,iBAAiB,GAAGF,WAAW,CAACG,GAAZ,CAAiBC,OAAD,IAAa;EACrD,MAAMC,UAAU,GAAGd,GAAG,CAACe,GAAJ,CAAQF,OAAR,EAAiBG,QAAjB,IAA6B,KAAhD;EACA,MAAMC,IAAI,GAAGH,UAAU,GAAG,EAAH,GAAQ,MAA/B;EAEA,OAAO;IACLI,IAAI,EAAG,IAAGL,OAAQ,IAAGI,IAAK;EADrB,CAAP;AAGD,CAPyB,CAA1B;AASA,MAAME,iBAAiB,GAAGV,WAAW,CAACG,GAAZ,CAAiBC,OAAD,IAAa;EACrD,MAAMC,UAAU,GAAGd,GAAG,CAACe,GAAJ,CAAQF,OAAR,EAAiBG,QAAjB,IAA6B,KAAhD;EACA,MAAMI,IAAI,GAAGN,UAAU,GAAG,EAAH,GAAQ,aAA/B;EAEA,OAAO;IACLI,IAAI,EAAG,IAAGL,OAAQ,IAAGO,IAAK;EADrB,CAAP;AAGD,CAPyB,EAOvBC,MAPuB,CAOhB;EACRH,IAAI,EAAE,sBADE;EAERI,MAAM,EAAE,CAACjB,YAAY,CAAC,aAAD,CAAb;AAFA,CAPgB,CAA1B,C,CAYA;;AACA,MAAMkB,wBAAwB,GAAGd,WAAW,CACzCe,MAD8B,CACtBX,OAAD,IAAaY,OAAO,CAACzB,GAAG,CAACe,GAAJ,CAAQF,OAAR,EAAiBG,QAAlB,CADG,EAE9BJ,GAF8B,CAEzBc,YAAD,KAAmB;EACtBR,IAAI,EAAG,IAAGQ,YAAa,qBADD;EAEtBJ,MAAM,EAAE,CAACjB,YAAY,CAAC,MAAD,CAAb;AAFc,CAAnB,CAF0B,EAK3BgB,MAL2B,CAKpB;EACTH,IAAI,EAAE,sBADG;EAETI,MAAM,EAAE,CAACjB,YAAY,CAAC,aAAD,CAAb,CAFC;EAGTsB,QAAQ,EAAE;IAAE,YAAY;MAAEC,UAAU,EAAE;QAAEC,IAAI,EAAE;MAAR;IAAd;EAAd;AAHD,CALoB,CAAjC;AAWA,MAAMC,wBAAwB,GAAGrB,WAAW,CACzCe,MAD8B,CACtBX,OAAD,IAAaY,OAAO,CAACzB,GAAG,CAACe,GAAJ,CAAQF,OAAR,EAAiBG,QAAlB,CADG,EAE9BJ,GAF8B,CAEzBc,YAAD,KAAmB;EACtBR,IAAI,EAAG,IAAGQ,YAAa,6CADD;EAEtBJ,MAAM,EAAE,CAACjB,YAAY,CAAC,aAAD,CAAb;AAFc,CAAnB,CAF0B,CAAjC;AAOAD,UAAU,CAAC2B,GAAX,CAAe,2BAAf,EAA4C5B,IAA5C,EAAkD;EAChD6B,KAAK,EAAErB,iBAAiB,CAACU,MAAlB,CAAyBF,iBAAzB,EAA4CP,GAA5C,CAAgDV,mBAAhD,CADyC;EAEhD+B,OAAO,EAAEV,wBAAwB,CAACF,MAAzB,CAAgCS,wBAAhC,EACNlB,GADM,CACFV,mBADE;AAFuC,CAAlD"},"metadata":{},"sourceType":"module"}