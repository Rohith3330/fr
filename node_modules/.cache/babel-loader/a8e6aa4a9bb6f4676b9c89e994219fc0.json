{"ast":null,"code":"let matchingBrackets = new Map([['{', '}'], ['[', ']'], ['(', ')']]);\nlet inverseMatchingBrackets = new Map(Array.from(matchingBrackets.entries()).map(_ref => {\n  let [k, v] = _ref;\n  return [v, k];\n}));\nlet quotes = new Set(['\"', \"'\", '`']); // Arbitrary values must contain balanced brackets (), [] and {}. Escaped\n// values don't count, and brackets inside quotes also don't count.\n//\n// E.g.: w-[this-is]w-[weird-and-invalid]\n// E.g.: w-[this-is\\\\]w-\\\\[weird-but-valid]\n// E.g.: content-['this-is-also-valid]-weirdly-enough']\n\nexport default function isValidArbitraryValue(value) {\n  let stack = [];\n  let inQuotes = false;\n\n  for (let i = 0; i < value.length; i++) {\n    let char = value[i];\n\n    if (char === ':' && !inQuotes && stack.length === 0) {\n      return false;\n    } // Non-escaped quotes allow us to \"allow\" anything in between\n\n\n    if (quotes.has(char) && value[i - 1] !== '\\\\') {\n      inQuotes = !inQuotes;\n    }\n\n    if (inQuotes) continue;\n    if (value[i - 1] === '\\\\') continue; // Escaped\n\n    if (matchingBrackets.has(char)) {\n      stack.push(char);\n    } else if (inverseMatchingBrackets.has(char)) {\n      let inverse = inverseMatchingBrackets.get(char); // Nothing to pop from, therefore it is unbalanced\n\n      if (stack.length <= 0) {\n        return false;\n      } // Popped value must match the inverse value, otherwise it is unbalanced\n\n\n      if (stack.pop() !== inverse) {\n        return false;\n      }\n    }\n  } // If there is still something on the stack, it is also unbalanced\n\n\n  if (stack.length > 0) {\n    return false;\n  } // All good, totally balanced!\n\n\n  return true;\n}","map":{"version":3,"names":["matchingBrackets","Map","inverseMatchingBrackets","Array","from","entries","map","k","v","quotes","Set","isValidArbitraryValue","value","stack","inQuotes","i","length","char","has","push","inverse","get","pop"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/util/isValidArbitraryValue.js"],"sourcesContent":["let matchingBrackets = new Map([\n  ['{', '}'],\n  ['[', ']'],\n  ['(', ')'],\n])\nlet inverseMatchingBrackets = new Map(\n  Array.from(matchingBrackets.entries()).map(([k, v]) => [v, k])\n)\n\nlet quotes = new Set(['\"', \"'\", '`'])\n\n// Arbitrary values must contain balanced brackets (), [] and {}. Escaped\n// values don't count, and brackets inside quotes also don't count.\n//\n// E.g.: w-[this-is]w-[weird-and-invalid]\n// E.g.: w-[this-is\\\\]w-\\\\[weird-but-valid]\n// E.g.: content-['this-is-also-valid]-weirdly-enough']\nexport default function isValidArbitraryValue(value) {\n  let stack = []\n  let inQuotes = false\n\n  for (let i = 0; i < value.length; i++) {\n    let char = value[i]\n\n    if (char === ':' && !inQuotes && stack.length === 0) {\n      return false\n    }\n\n    // Non-escaped quotes allow us to \"allow\" anything in between\n    if (quotes.has(char) && value[i - 1] !== '\\\\') {\n      inQuotes = !inQuotes\n    }\n\n    if (inQuotes) continue\n    if (value[i - 1] === '\\\\') continue // Escaped\n\n    if (matchingBrackets.has(char)) {\n      stack.push(char)\n    } else if (inverseMatchingBrackets.has(char)) {\n      let inverse = inverseMatchingBrackets.get(char)\n\n      // Nothing to pop from, therefore it is unbalanced\n      if (stack.length <= 0) {\n        return false\n      }\n\n      // Popped value must match the inverse value, otherwise it is unbalanced\n      if (stack.pop() !== inverse) {\n        return false\n      }\n    }\n  }\n\n  // If there is still something on the stack, it is also unbalanced\n  if (stack.length > 0) {\n    return false\n  }\n\n  // All good, totally balanced!\n  return true\n}\n"],"mappings":"AAAA,IAAIA,gBAAgB,GAAG,IAAIC,GAAJ,CAAQ,CAC7B,CAAC,GAAD,EAAM,GAAN,CAD6B,EAE7B,CAAC,GAAD,EAAM,GAAN,CAF6B,EAG7B,CAAC,GAAD,EAAM,GAAN,CAH6B,CAAR,CAAvB;AAKA,IAAIC,uBAAuB,GAAG,IAAID,GAAJ,CAC5BE,KAAK,CAACC,IAAN,CAAWJ,gBAAgB,CAACK,OAAjB,EAAX,EAAuCC,GAAvC,CAA2C;EAAA,IAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD;EAAA,OAAY,CAACA,CAAD,EAAID,CAAJ,CAAZ;AAAA,CAA3C,CAD4B,CAA9B;AAIA,IAAIE,MAAM,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAb,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;EACnD,IAAIC,KAAK,GAAG,EAAZ;EACA,IAAIC,QAAQ,GAAG,KAAf;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrC,IAAIE,IAAI,GAAGL,KAAK,CAACG,CAAD,CAAhB;;IAEA,IAAIE,IAAI,KAAK,GAAT,IAAgB,CAACH,QAAjB,IAA6BD,KAAK,CAACG,MAAN,KAAiB,CAAlD,EAAqD;MACnD,OAAO,KAAP;IACD,CALoC,CAOrC;;;IACA,IAAIP,MAAM,CAACS,GAAP,CAAWD,IAAX,KAAoBL,KAAK,CAACG,CAAC,GAAG,CAAL,CAAL,KAAiB,IAAzC,EAA+C;MAC7CD,QAAQ,GAAG,CAACA,QAAZ;IACD;;IAED,IAAIA,QAAJ,EAAc;IACd,IAAIF,KAAK,CAACG,CAAC,GAAG,CAAL,CAAL,KAAiB,IAArB,EAA2B,SAbU,CAaD;;IAEpC,IAAIf,gBAAgB,CAACkB,GAAjB,CAAqBD,IAArB,CAAJ,EAAgC;MAC9BJ,KAAK,CAACM,IAAN,CAAWF,IAAX;IACD,CAFD,MAEO,IAAIf,uBAAuB,CAACgB,GAAxB,CAA4BD,IAA5B,CAAJ,EAAuC;MAC5C,IAAIG,OAAO,GAAGlB,uBAAuB,CAACmB,GAAxB,CAA4BJ,IAA5B,CAAd,CAD4C,CAG5C;;MACA,IAAIJ,KAAK,CAACG,MAAN,IAAgB,CAApB,EAAuB;QACrB,OAAO,KAAP;MACD,CAN2C,CAQ5C;;;MACA,IAAIH,KAAK,CAACS,GAAN,OAAgBF,OAApB,EAA6B;QAC3B,OAAO,KAAP;MACD;IACF;EACF,CAlCkD,CAoCnD;;;EACA,IAAIP,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;IACpB,OAAO,KAAP;EACD,CAvCkD,CAyCnD;;;EACA,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"module"}