{"ast":null,"code":"/**\n * Gets the index associated with `key` in the backing array, if it is already present.\n */\nlet get;\n/**\n * Puts `key` into the backing array, if it is not already present. Returns\n * the index of the `key` in the backing array.\n */\n\nlet put;\n/**\n * Pops the last added item out of the SetArray.\n */\n\nlet pop;\n/**\n * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the\n * index of the `key` in the backing array.\n *\n * This is designed to allow synchronizing a second array with the contents of the backing array,\n * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,\n * and there are never duplicates.\n */\n\nclass SetArray {\n  constructor() {\n    this._indexes = {\n      __proto__: null\n    };\n    this.array = [];\n  }\n\n}\n\n(() => {\n  get = (strarr, key) => strarr._indexes[key];\n\n  put = (strarr, key) => {\n    // The key may or may not be present. If it is present, it's a number.\n    const index = get(strarr, key);\n    if (index !== undefined) return index;\n    const {\n      array,\n      _indexes: indexes\n    } = strarr;\n    return indexes[key] = array.push(key) - 1;\n  };\n\n  pop = strarr => {\n    const {\n      array,\n      _indexes: indexes\n    } = strarr;\n    if (array.length === 0) return;\n    const last = array.pop();\n    indexes[last] = undefined;\n  };\n})();\n\nexport { SetArray, get, pop, put };","map":{"version":3,"mappings":"AAAA;;;IAGWA;AAEX;;;;;IAIWC;AAEX;;;;IAGWC;AAEX;;;;;;;;;MAQaC,SAAQ;EAInBC;IACE,KAAKC,QAAL,GAAgB;MAAEC,SAAS,EAAE;IAAb,CAAhB;IACA,KAAKC,KAAL,GAAa,EAAb;EACD;;AAPkB;;AASnB;EACEP,GAAG,GAAG,CAACQ,MAAD,EAASC,GAAT,KAAiBD,MAAM,CAACH,QAAP,CAAgBI,GAAhB,CAAvB;;EAEAR,GAAG,GAAG,CAACO,MAAD,EAASC,GAAT,KAAY;;IAEhB,MAAMC,KAAK,GAAGV,GAAG,CAACQ,MAAD,EAASC,GAAT,CAAjB;IACA,IAAIC,KAAK,KAAKC,SAAd,EAAyB,OAAOD,KAAP;IAEzB,MAAM;MAAEH,KAAF;MAASF,QAAQ,EAAEO;IAAnB,IAA+BJ,MAArC;IAEA,OAAQI,OAAO,CAACH,GAAD,CAAP,GAAgBF,KAAkB,CAACM,IAAnB,CAAwBJ,GAAxB,IAA+B,CAAvD;EACD,CARD;;EAUAP,GAAG,GAAIM,MAAD,IAAO;IACX,MAAM;MAAED,KAAF;MAASF,QAAQ,EAAEO;IAAnB,IAA+BJ,MAArC;IACA,IAAID,KAAK,CAACO,MAAN,KAAiB,CAArB,EAAwB;IAExB,MAAMC,IAAI,GAAIR,KAAkB,CAACL,GAAnB,EAAd;IACAU,OAAO,CAACG,IAAD,CAAP,GAAgBJ,SAAhB;EACD,CAND;AAOD,CApBD","names":["get","put","pop","SetArray","constructor","_indexes","__proto__","array","strarr","key","index","undefined","indexes","push","length","last"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@jridgewell\\set-array\\src\\set-array.ts"],"sourcesContent":["/**\n * Gets the index associated with `key` in the backing array, if it is already present.\n */\nexport let get: (strarr: SetArray, key: string) => number | undefined;\n\n/**\n * Puts `key` into the backing array, if it is not already present. Returns\n * the index of the `key` in the backing array.\n */\nexport let put: (strarr: SetArray, key: string) => number;\n\n/**\n * Pops the last added item out of the SetArray.\n */\nexport let pop: (strarr: SetArray) => void;\n\n/**\n * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the\n * index of the `key` in the backing array.\n *\n * This is designed to allow synchronizing a second array with the contents of the backing array,\n * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,\n * and there are never duplicates.\n */\nexport class SetArray {\n  private declare _indexes: { [key: string]: number | undefined };\n  declare array: readonly string[];\n\n  constructor() {\n    this._indexes = { __proto__: null } as any;\n    this.array = [];\n  }\n\n  static {\n    get = (strarr, key) => strarr._indexes[key];\n\n    put = (strarr, key) => {\n      // The key may or may not be present. If it is present, it's a number.\n      const index = get(strarr, key);\n      if (index !== undefined) return index;\n\n      const { array, _indexes: indexes } = strarr;\n\n      return (indexes[key] = (array as string[]).push(key) - 1);\n    };\n\n    pop = (strarr) => {\n      const { array, _indexes: indexes } = strarr;\n      if (array.length === 0) return;\n\n      const last = (array as string[]).pop()!;\n      indexes[last] = undefined;\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}