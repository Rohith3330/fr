{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PatternMatcher = void 0;\n\nconst eslintUtils = __importStar(require(\"eslint-utils\"));\n/**\n * The class to find a pattern in strings as handling escape sequences.\n * It ignores the found pattern if it's escaped with `\\`.\n *\n * @see {@link https://eslint-utils.mysticatea.dev/api/ast-utils.html#patternmatcher-class}\n */\n\n\nconst PatternMatcher = eslintUtils.PatternMatcher;\nexports.PatternMatcher = PatternMatcher;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AA6CA;;;;;;;;AAMA,MAAMA,cAAc,GAAGC,WAAW,CAACD,cAAnC;AAISE","names":["PatternMatcher","eslintUtils","exports"],"sources":["../../../src/ast-utils/eslint-utils/PatternMatcher.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}