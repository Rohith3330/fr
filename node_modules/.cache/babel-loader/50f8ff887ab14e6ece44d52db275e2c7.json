{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alloc = alloc;\nexports.free = free;\nexports.resize = resize;\nexports.readInt = readInt;\nexports.readUInt = readUInt;\nexports.writeInt64 = writeInt64;\nexports.writeUInt64 = writeUInt64; // Copyright 2012 The Obvious Corporation.\n\n/*\n * bufs: Buffer utilities.\n */\n\n/*\n * Module variables\n */\n\n/** Pool of buffers, where `bufPool[x].length === x`. */\n\nvar bufPool = [];\n/** Maximum length of kept temporary buffers. */\n\nvar TEMP_BUF_MAXIMUM_LENGTH = 20;\n/** Minimum exactly-representable 64-bit int. */\n\nvar MIN_EXACT_INT64 = -0x8000000000000000;\n/** Maximum exactly-representable 64-bit int. */\n\nvar MAX_EXACT_INT64 = 0x7ffffffffffffc00;\n/** Maximum exactly-representable 64-bit uint. */\n\nvar MAX_EXACT_UINT64 = 0xfffffffffffff800;\n/**\n * The int value consisting just of a 1 in bit #32 (that is, one more\n * than the maximum 32-bit unsigned value).\n */\n\nvar BIT_32 = 0x100000000;\n/**\n * The int value consisting just of a 1 in bit #64 (that is, one more\n * than the maximum 64-bit unsigned value).\n */\n\nvar BIT_64 = 0x10000000000000000;\n/*\n * Helper functions\n */\n\n/**\n * Masks off all but the lowest bit set of the given number.\n */\n\nfunction lowestBit(num) {\n  return num & -num;\n}\n/**\n * Gets whether trying to add the second number to the first is lossy\n * (inexact). The first number is meant to be an accumulated result.\n */\n\n\nfunction isLossyToAdd(accum, num) {\n  if (num === 0) {\n    return false;\n  }\n\n  var lowBit = lowestBit(num);\n  var added = accum + lowBit;\n\n  if (added === accum) {\n    return true;\n  }\n\n  if (added - lowBit !== accum) {\n    return true;\n  }\n\n  return false;\n}\n/*\n * Exported functions\n */\n\n/**\n * Allocates a buffer of the given length, which is initialized\n * with all zeroes. This returns a buffer from the pool if it is\n * available, or a freshly-allocated buffer if not.\n */\n\n\nfunction alloc(length) {\n  var result = bufPool[length];\n\n  if (result) {\n    bufPool[length] = undefined;\n  } else {\n    result = new Buffer(length);\n  }\n\n  result.fill(0);\n  return result;\n}\n/**\n * Releases a buffer back to the pool.\n */\n\n\nfunction free(buffer) {\n  var length = buffer.length;\n\n  if (length < TEMP_BUF_MAXIMUM_LENGTH) {\n    bufPool[length] = buffer;\n  }\n}\n/**\n * Resizes a buffer, returning a new buffer. Returns the argument if\n * the length wouldn't actually change. This function is only safe to\n * use if the given buffer was allocated within this module (since\n * otherwise the buffer might possibly be shared externally).\n */\n\n\nfunction resize(buffer, length) {\n  if (length === buffer.length) {\n    return buffer;\n  }\n\n  var newBuf = alloc(length);\n  buffer.copy(newBuf);\n  free(buffer);\n  return newBuf;\n}\n/**\n * Reads an arbitrary signed int from a buffer.\n */\n\n\nfunction readInt(buffer) {\n  var length = buffer.length;\n  var positive = buffer[length - 1] < 0x80;\n  var result = positive ? 0 : -1;\n  var lossy = false; // Note: We can't use bit manipulation here, since that stops\n  // working if the result won't fit in a 32-bit int.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (because the result has\n    // no more than 48 bits, and loss only happens with 54 or more).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i = length - 1; _i >= 0; _i--) {\n      var one = buffer[_i];\n      result *= 0x100;\n\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n\n      result += one;\n    }\n  }\n\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\n * Reads an arbitrary unsigned int from a buffer.\n */\n\n\nfunction readUInt(buffer) {\n  var length = buffer.length;\n  var result = 0;\n  var lossy = false; // Note: See above in re bit manipulation.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (see above).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i2 = length - 1; _i2 >= 0; _i2--) {\n      var one = buffer[_i2];\n      result *= 0x100;\n\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n\n      result += one;\n    }\n  }\n\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\n * Writes a little-endian 64-bit signed int into a buffer.\n */\n\n\nfunction writeInt64(value, buffer) {\n  if (value < MIN_EXACT_INT64 || value > MAX_EXACT_INT64) {\n    throw new Error(\"Value out of range.\");\n  }\n\n  if (value < 0) {\n    value += BIT_64;\n  }\n\n  writeUInt64(value, buffer);\n}\n/**\n * Writes a little-endian 64-bit unsigned int into a buffer.\n */\n\n\nfunction writeUInt64(value, buffer) {\n  if (value < 0 || value > MAX_EXACT_UINT64) {\n    throw new Error(\"Value out of range.\");\n  }\n\n  var lowWord = value % BIT_32;\n  var highWord = Math.floor(value / BIT_32);\n  buffer.writeUInt32LE(lowWord, 0);\n  buffer.writeUInt32LE(highWord, 4);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","alloc","free","resize","readInt","readUInt","writeInt64","writeUInt64","bufPool","TEMP_BUF_MAXIMUM_LENGTH","MIN_EXACT_INT64","MAX_EXACT_INT64","MAX_EXACT_UINT64","BIT_32","BIT_64","lowestBit","num","isLossyToAdd","accum","lowBit","added","length","result","undefined","Buffer","fill","buffer","newBuf","copy","positive","lossy","i","_i","one","_i2","Error","lowWord","highWord","Math","floor","writeUInt32LE"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@webassemblyjs/leb128/lib/bufs.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alloc = alloc;\nexports.free = free;\nexports.resize = resize;\nexports.readInt = readInt;\nexports.readUInt = readUInt;\nexports.writeInt64 = writeInt64;\nexports.writeUInt64 = writeUInt64;\n// Copyright 2012 The Obvious Corporation.\n\n/*\n * bufs: Buffer utilities.\n */\n\n/*\n * Module variables\n */\n\n/** Pool of buffers, where `bufPool[x].length === x`. */\nvar bufPool = [];\n/** Maximum length of kept temporary buffers. */\n\nvar TEMP_BUF_MAXIMUM_LENGTH = 20;\n/** Minimum exactly-representable 64-bit int. */\n\nvar MIN_EXACT_INT64 = -0x8000000000000000;\n/** Maximum exactly-representable 64-bit int. */\n\nvar MAX_EXACT_INT64 = 0x7ffffffffffffc00;\n/** Maximum exactly-representable 64-bit uint. */\n\nvar MAX_EXACT_UINT64 = 0xfffffffffffff800;\n/**\n * The int value consisting just of a 1 in bit #32 (that is, one more\n * than the maximum 32-bit unsigned value).\n */\n\nvar BIT_32 = 0x100000000;\n/**\n * The int value consisting just of a 1 in bit #64 (that is, one more\n * than the maximum 64-bit unsigned value).\n */\n\nvar BIT_64 = 0x10000000000000000;\n/*\n * Helper functions\n */\n\n/**\n * Masks off all but the lowest bit set of the given number.\n */\n\nfunction lowestBit(num) {\n  return num & -num;\n}\n/**\n * Gets whether trying to add the second number to the first is lossy\n * (inexact). The first number is meant to be an accumulated result.\n */\n\n\nfunction isLossyToAdd(accum, num) {\n  if (num === 0) {\n    return false;\n  }\n\n  var lowBit = lowestBit(num);\n  var added = accum + lowBit;\n\n  if (added === accum) {\n    return true;\n  }\n\n  if (added - lowBit !== accum) {\n    return true;\n  }\n\n  return false;\n}\n/*\n * Exported functions\n */\n\n/**\n * Allocates a buffer of the given length, which is initialized\n * with all zeroes. This returns a buffer from the pool if it is\n * available, or a freshly-allocated buffer if not.\n */\n\n\nfunction alloc(length) {\n  var result = bufPool[length];\n\n  if (result) {\n    bufPool[length] = undefined;\n  } else {\n    result = new Buffer(length);\n  }\n\n  result.fill(0);\n  return result;\n}\n/**\n * Releases a buffer back to the pool.\n */\n\n\nfunction free(buffer) {\n  var length = buffer.length;\n\n  if (length < TEMP_BUF_MAXIMUM_LENGTH) {\n    bufPool[length] = buffer;\n  }\n}\n/**\n * Resizes a buffer, returning a new buffer. Returns the argument if\n * the length wouldn't actually change. This function is only safe to\n * use if the given buffer was allocated within this module (since\n * otherwise the buffer might possibly be shared externally).\n */\n\n\nfunction resize(buffer, length) {\n  if (length === buffer.length) {\n    return buffer;\n  }\n\n  var newBuf = alloc(length);\n  buffer.copy(newBuf);\n  free(buffer);\n  return newBuf;\n}\n/**\n * Reads an arbitrary signed int from a buffer.\n */\n\n\nfunction readInt(buffer) {\n  var length = buffer.length;\n  var positive = buffer[length - 1] < 0x80;\n  var result = positive ? 0 : -1;\n  var lossy = false; // Note: We can't use bit manipulation here, since that stops\n  // working if the result won't fit in a 32-bit int.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (because the result has\n    // no more than 48 bits, and loss only happens with 54 or more).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i = length - 1; _i >= 0; _i--) {\n      var one = buffer[_i];\n      result *= 0x100;\n\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n\n      result += one;\n    }\n  }\n\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\n * Reads an arbitrary unsigned int from a buffer.\n */\n\n\nfunction readUInt(buffer) {\n  var length = buffer.length;\n  var result = 0;\n  var lossy = false; // Note: See above in re bit manipulation.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (see above).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i2 = length - 1; _i2 >= 0; _i2--) {\n      var one = buffer[_i2];\n      result *= 0x100;\n\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n\n      result += one;\n    }\n  }\n\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\n * Writes a little-endian 64-bit signed int into a buffer.\n */\n\n\nfunction writeInt64(value, buffer) {\n  if (value < MIN_EXACT_INT64 || value > MAX_EXACT_INT64) {\n    throw new Error(\"Value out of range.\");\n  }\n\n  if (value < 0) {\n    value += BIT_64;\n  }\n\n  writeUInt64(value, buffer);\n}\n/**\n * Writes a little-endian 64-bit unsigned int into a buffer.\n */\n\n\nfunction writeUInt64(value, buffer) {\n  if (value < 0 || value > MAX_EXACT_UINT64) {\n    throw new Error(\"Value out of range.\");\n  }\n\n  var lowWord = value % BIT_32;\n  var highWord = Math.floor(value / BIT_32);\n  buffer.writeUInt32LE(lowWord, 0);\n  buffer.writeUInt32LE(highWord, 4);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}