{"ast":null,"code":"import expect from 'expect';\nimport { elementType } from 'jsx-ast-utils';\nimport isNonInteractiveElement from '../../../src/util/isNonInteractiveElement';\nimport { genElementSymbol, genIndeterminantInteractiveElements, genInteractiveElements, genInteractiveRoleElements, genNonInteractiveElements, genNonInteractiveRoleElements } from '../../../__mocks__/genInteractives';\ndescribe('isNonInteractiveElement', () => {\n  describe('JSX Components (no tagName)', () => {\n    it('should identify them as interactive elements', () => {\n      expect(isNonInteractiveElement(undefined, [])).toBe(false);\n    });\n  });\n  describe('non-interactive elements', () => {\n    genNonInteractiveElements().forEach(_ref => {\n      let {\n        openingElement\n      } = _ref;\n      it(`should identify \\`${genElementSymbol(openingElement)}\\` as a non-interactive element`, () => {\n        expect(isNonInteractiveElement(elementType(openingElement), openingElement.attributes)).toBe(true);\n      });\n    });\n  });\n  describe('non-interactive role elements', () => {\n    genNonInteractiveRoleElements().forEach(_ref2 => {\n      let {\n        openingElement\n      } = _ref2;\n      it(`should NOT identify \\`${genElementSymbol(openingElement)}\\` as a non-interactive element`, () => {\n        expect(isNonInteractiveElement(elementType(openingElement), openingElement.attributes)).toBe(false);\n      });\n    });\n  });\n  describe('interactive elements', () => {\n    genInteractiveElements().forEach(_ref3 => {\n      let {\n        openingElement\n      } = _ref3;\n      it(`should NOT identify \\`${genElementSymbol(openingElement)}\\` as a non-interactive element`, () => {\n        expect(isNonInteractiveElement(elementType(openingElement), openingElement.attributes)).toBe(false);\n      });\n    });\n  });\n  describe('interactive role elements', () => {\n    genInteractiveRoleElements().forEach(_ref4 => {\n      let {\n        openingElement\n      } = _ref4;\n      it(`should NOT identify \\`${genElementSymbol(openingElement)}\\` as a non-interactive element`, () => {\n        expect(isNonInteractiveElement(elementType(openingElement), openingElement.attributes)).toBe(false);\n      });\n    });\n  });\n  describe('indeterminate elements', () => {\n    genIndeterminantInteractiveElements().forEach(_ref5 => {\n      let {\n        openingElement\n      } = _ref5;\n      it(`should NOT identify \\`${openingElement.name.name}\\` as a non-interactive element`, () => {\n        expect(isNonInteractiveElement(elementType(openingElement), openingElement.attributes)).toBe(false);\n      });\n    });\n  });\n});","map":{"version":3,"names":["expect","elementType","isNonInteractiveElement","genElementSymbol","genIndeterminantInteractiveElements","genInteractiveElements","genInteractiveRoleElements","genNonInteractiveElements","genNonInteractiveRoleElements","describe","it","undefined","toBe","forEach","openingElement","attributes","name"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/isNonInteractiveElement-test.js"],"sourcesContent":["import expect from 'expect';\nimport { elementType } from 'jsx-ast-utils';\nimport isNonInteractiveElement from '../../../src/util/isNonInteractiveElement';\nimport {\n  genElementSymbol,\n  genIndeterminantInteractiveElements,\n  genInteractiveElements,\n  genInteractiveRoleElements,\n  genNonInteractiveElements,\n  genNonInteractiveRoleElements,\n} from '../../../__mocks__/genInteractives';\n\ndescribe('isNonInteractiveElement', () => {\n  describe('JSX Components (no tagName)', () => {\n    it('should identify them as interactive elements', () => {\n      expect(isNonInteractiveElement(undefined, []))\n        .toBe(false);\n    });\n  });\n  describe('non-interactive elements', () => {\n    genNonInteractiveElements().forEach(({ openingElement }) => {\n      it(`should identify \\`${genElementSymbol(openingElement)}\\` as a non-interactive element`, () => {\n        expect(isNonInteractiveElement(\n          elementType(openingElement),\n          openingElement.attributes,\n        )).toBe(true);\n      });\n    });\n  });\n  describe('non-interactive role elements', () => {\n    genNonInteractiveRoleElements().forEach(({ openingElement }) => {\n      it(`should NOT identify \\`${genElementSymbol(openingElement)}\\` as a non-interactive element`, () => {\n        expect(isNonInteractiveElement(\n          elementType(openingElement),\n          openingElement.attributes,\n        )).toBe(false);\n      });\n    });\n  });\n  describe('interactive elements', () => {\n    genInteractiveElements().forEach(({ openingElement }) => {\n      it(`should NOT identify \\`${genElementSymbol(openingElement)}\\` as a non-interactive element`, () => {\n        expect(isNonInteractiveElement(\n          elementType(openingElement),\n          openingElement.attributes,\n        )).toBe(false);\n      });\n    });\n  });\n  describe('interactive role elements', () => {\n    genInteractiveRoleElements().forEach(({ openingElement }) => {\n      it(`should NOT identify \\`${genElementSymbol(openingElement)}\\` as a non-interactive element`, () => {\n        expect(isNonInteractiveElement(\n          elementType(openingElement),\n          openingElement.attributes,\n        )).toBe(false);\n      });\n    });\n  });\n  describe('indeterminate elements', () => {\n    genIndeterminantInteractiveElements().forEach(({ openingElement }) => {\n      it(`should NOT identify \\`${openingElement.name.name}\\` as a non-interactive element`, () => {\n        expect(isNonInteractiveElement(\n          elementType(openingElement),\n          openingElement.attributes,\n        )).toBe(false);\n      });\n    });\n  });\n});\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,uBAAP,MAAoC,2CAApC;AACA,SACEC,gBADF,EAEEC,mCAFF,EAGEC,sBAHF,EAIEC,0BAJF,EAKEC,yBALF,EAMEC,6BANF,QAOO,oCAPP;AASAC,QAAQ,CAAC,yBAAD,EAA4B,MAAM;EACxCA,QAAQ,CAAC,6BAAD,EAAgC,MAAM;IAC5CC,EAAE,CAAC,8CAAD,EAAiD,MAAM;MACvDV,MAAM,CAACE,uBAAuB,CAACS,SAAD,EAAY,EAAZ,CAAxB,CAAN,CACGC,IADH,CACQ,KADR;IAED,CAHC,CAAF;EAID,CALO,CAAR;EAMAH,QAAQ,CAAC,0BAAD,EAA6B,MAAM;IACzCF,yBAAyB,GAAGM,OAA5B,CAAoC,QAAwB;MAAA,IAAvB;QAAEC;MAAF,CAAuB;MAC1DJ,EAAE,CAAE,qBAAoBP,gBAAgB,CAACW,cAAD,CAAiB,iCAAvD,EAAyF,MAAM;QAC/Fd,MAAM,CAACE,uBAAuB,CAC5BD,WAAW,CAACa,cAAD,CADiB,EAE5BA,cAAc,CAACC,UAFa,CAAxB,CAAN,CAGGH,IAHH,CAGQ,IAHR;MAID,CALC,CAAF;IAMD,CAPD;EAQD,CATO,CAAR;EAUAH,QAAQ,CAAC,+BAAD,EAAkC,MAAM;IAC9CD,6BAA6B,GAAGK,OAAhC,CAAwC,SAAwB;MAAA,IAAvB;QAAEC;MAAF,CAAuB;MAC9DJ,EAAE,CAAE,yBAAwBP,gBAAgB,CAACW,cAAD,CAAiB,iCAA3D,EAA6F,MAAM;QACnGd,MAAM,CAACE,uBAAuB,CAC5BD,WAAW,CAACa,cAAD,CADiB,EAE5BA,cAAc,CAACC,UAFa,CAAxB,CAAN,CAGGH,IAHH,CAGQ,KAHR;MAID,CALC,CAAF;IAMD,CAPD;EAQD,CATO,CAAR;EAUAH,QAAQ,CAAC,sBAAD,EAAyB,MAAM;IACrCJ,sBAAsB,GAAGQ,OAAzB,CAAiC,SAAwB;MAAA,IAAvB;QAAEC;MAAF,CAAuB;MACvDJ,EAAE,CAAE,yBAAwBP,gBAAgB,CAACW,cAAD,CAAiB,iCAA3D,EAA6F,MAAM;QACnGd,MAAM,CAACE,uBAAuB,CAC5BD,WAAW,CAACa,cAAD,CADiB,EAE5BA,cAAc,CAACC,UAFa,CAAxB,CAAN,CAGGH,IAHH,CAGQ,KAHR;MAID,CALC,CAAF;IAMD,CAPD;EAQD,CATO,CAAR;EAUAH,QAAQ,CAAC,2BAAD,EAA8B,MAAM;IAC1CH,0BAA0B,GAAGO,OAA7B,CAAqC,SAAwB;MAAA,IAAvB;QAAEC;MAAF,CAAuB;MAC3DJ,EAAE,CAAE,yBAAwBP,gBAAgB,CAACW,cAAD,CAAiB,iCAA3D,EAA6F,MAAM;QACnGd,MAAM,CAACE,uBAAuB,CAC5BD,WAAW,CAACa,cAAD,CADiB,EAE5BA,cAAc,CAACC,UAFa,CAAxB,CAAN,CAGGH,IAHH,CAGQ,KAHR;MAID,CALC,CAAF;IAMD,CAPD;EAQD,CATO,CAAR;EAUAH,QAAQ,CAAC,wBAAD,EAA2B,MAAM;IACvCL,mCAAmC,GAAGS,OAAtC,CAA8C,SAAwB;MAAA,IAAvB;QAAEC;MAAF,CAAuB;MACpEJ,EAAE,CAAE,yBAAwBI,cAAc,CAACE,IAAf,CAAoBA,IAAK,iCAAnD,EAAqF,MAAM;QAC3FhB,MAAM,CAACE,uBAAuB,CAC5BD,WAAW,CAACa,cAAD,CADiB,EAE5BA,cAAc,CAACC,UAFa,CAAxB,CAAN,CAGGH,IAHH,CAGQ,KAHR;MAID,CALC,CAAF;IAMD,CAPD;EAQD,CATO,CAAR;AAUD,CAzDO,CAAR"},"metadata":{},"sourceType":"module"}