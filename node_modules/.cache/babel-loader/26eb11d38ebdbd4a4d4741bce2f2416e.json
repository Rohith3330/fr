{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDefaultProgram = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst shared_1 = require(\"./shared\");\n\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:createDefaultProgram');\n/**\n * @param code The code of the file being linted\n * @param extra The config object\n * @param extra.tsconfigRootDir The root directory for relative tsconfig paths\n * @param extra.projects Provided tsconfig paths\n * @returns If found, returns the source file corresponding to the code and the containing program\n */\n\nfunction createDefaultProgram(code, extra) {\n  log('Getting default program for: %s', extra.filePath || 'unnamed file');\n\n  if (!extra.projects || extra.projects.length !== 1) {\n    return undefined;\n  }\n\n  const tsconfigPath = extra.projects[0];\n  const commandLine = ts.getParsedCommandLineOfConfigFile(tsconfigPath, (0, shared_1.createDefaultCompilerOptionsFromExtra)(extra), Object.assign(Object.assign({}, ts.sys), {\n    onUnRecoverableConfigFileDiagnostic: () => {}\n  }));\n\n  if (!commandLine) {\n    return undefined;\n  }\n\n  const compilerHost = ts.createCompilerHost(commandLine.options,\n  /* setParentNodes */\n  true);\n\n  if (extra.moduleResolver) {\n    compilerHost.resolveModuleNames = (0, shared_1.getModuleResolver)(extra.moduleResolver).resolveModuleNames;\n  }\n\n  const oldReadFile = compilerHost.readFile;\n\n  compilerHost.readFile = fileName => path_1.default.normalize(fileName) === path_1.default.normalize(extra.filePath) ? code : oldReadFile(fileName);\n\n  const program = ts.createProgram([extra.filePath], commandLine.options, compilerHost);\n  const ast = program.getSourceFile(extra.filePath);\n  return ast && {\n    ast,\n    program\n  };\n}\n\nexports.createDefaultProgram = createDefaultProgram;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAIA;;AAKA,MAAMA,GAAG,GAAG,qBAAM,0DAAN,CAAZ;AAEA;;;;;;;;AAOA,SAASC,oBAAT,CACEC,IADF,EAEEC,KAFF,EAEc;EAEZH,GAAG,CAAC,iCAAD,EAAoCG,KAAK,CAACC,QAAN,IAAkB,cAAtD,CAAH;;EAEA,IAAI,CAACD,KAAK,CAACE,QAAP,IAAmBF,KAAK,CAACE,QAAN,CAAeC,MAAf,KAA0B,CAAjD,EAAoD;IAClD,OAAOC,SAAP;EACD;;EAED,MAAMC,YAAY,GAAkBL,KAAK,CAACE,QAAN,CAAe,CAAf,CAApC;EAEA,MAAMI,WAAW,GAAGC,EAAE,CAACC,gCAAH,CAClBH,YADkB,EAElB,oDAAsCL,KAAtC,CAFkB,EAE0BS,gCACvCF,EAAE,CAACG,GADoC,GACjC;IAAEC,mCAAmC,EAAE,MAAK,CAAG;EAA/C,CADiC,CAF1B,CAApB;;EAMA,IAAI,CAACL,WAAL,EAAkB;IAChB,OAAOF,SAAP;EACD;;EAED,MAAMQ,YAAY,GAAGL,EAAE,CAACM,kBAAH,CACnBP,WAAW,CAACQ,OADO;EAEnB;EAAqB,IAFF,CAArB;;EAKA,IAAId,KAAK,CAACe,cAAV,EAA0B;IACxBH,YAAY,CAACI,kBAAb,GAAkC,gCAChChB,KAAK,CAACe,cAD0B,EAEhCC,kBAFF;EAGD;;EAED,MAAMC,WAAW,GAAGL,YAAY,CAACM,QAAjC;;EACAN,YAAY,CAACM,QAAb,GAAyBC,QAAD,IACtBC,eAAKC,SAAL,CAAeF,QAAf,MAA6BC,eAAKC,SAAL,CAAerB,KAAK,CAACC,QAArB,CAA7B,GACIF,IADJ,GAEIkB,WAAW,CAACE,QAAD,CAHjB;;EAKA,MAAMG,OAAO,GAAGf,EAAE,CAACgB,aAAH,CACd,CAACvB,KAAK,CAACC,QAAP,CADc,EAEdK,WAAW,CAACQ,OAFE,EAGdF,YAHc,CAAhB;EAKA,MAAMY,GAAG,GAAGF,OAAO,CAACG,aAAR,CAAsBzB,KAAK,CAACC,QAA5B,CAAZ;EAEA,OAAOuB,GAAG,IAAI;IAAEA,GAAF;IAAOF;EAAP,CAAd;AACD;;AAEQI","names":["log","createDefaultProgram","code","extra","filePath","projects","length","undefined","tsconfigPath","commandLine","ts","getParsedCommandLineOfConfigFile","Object","sys","onUnRecoverableConfigFileDiagnostic","compilerHost","createCompilerHost","options","moduleResolver","resolveModuleNames","oldReadFile","readFile","fileName","path_1","normalize","program","createProgram","ast","getSourceFile","exports"],"sources":["../../src/create-program/createDefaultProgram.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}