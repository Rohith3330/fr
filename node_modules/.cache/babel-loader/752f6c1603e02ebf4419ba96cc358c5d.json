{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FunctionScope = void 0;\n\nconst types_1 = require(\"@typescript-eslint/types\");\n\nconst ScopeBase_1 = require(\"./ScopeBase\");\n\nconst ScopeType_1 = require(\"./ScopeType\");\n\nclass FunctionScope extends ScopeBase_1.ScopeBase {\n  constructor(scopeManager, upperScope, block, isMethodDefinition) {\n    super(scopeManager, ScopeType_1.ScopeType.function, upperScope, block, isMethodDefinition); // section 9.2.13, FunctionDeclarationInstantiation.\n    // NOTE Arrow functions never have an arguments objects.\n\n    if (this.block.type !== types_1.AST_NODE_TYPES.ArrowFunctionExpression) {\n      this.defineVariable('arguments', this.set, this.variables, null, null);\n    }\n  } // References in default parameters isn't resolved to variables which are in their function body.\n  //     const x = 1\n  //     function f(a = x) { // This `x` is resolved to the `x` in the outer scope.\n  //         const x = 2\n  //         console.log(a)\n  //     }\n\n\n  isValidResolution(ref, variable) {\n    var _a, _b; // If `options.globalReturn` is true, `this.block` becomes a Program node.\n\n\n    if (this.block.type === types_1.AST_NODE_TYPES.Program) {\n      return true;\n    }\n\n    const bodyStart = (_b = (_a = this.block.body) === null || _a === void 0 ? void 0 : _a.range[0]) !== null && _b !== void 0 ? _b : -1; // It's invalid resolution in the following case:\n\n    return !(variable.scope === this && ref.identifier.range[0] < bodyStart && // the reference is in the parameter part.\n    variable.defs.every(d => d.name.range[0] >= bodyStart) // the variable is in the body.\n    );\n  }\n\n}\n\nexports.FunctionScope = FunctionScope;","map":{"version":3,"mappings":";;;;;;;AACA;;AAMA;;AACA;;AAEA,MAAMA,aAAN,SAA4BC,qBAA5B,CASC;EACCC,YACEC,YADF,EAEEC,UAFF,EAGEC,KAHF,EAIEC,kBAJF,EAI6B;IAE3B,MACEH,YADF,EAEEI,sBAAUC,QAFZ,EAGEJ,UAHF,EAIEC,KAJF,EAKEC,kBALF,EAF2B,CAU3B;IACA;;IACA,IAAI,KAAKD,KAAL,CAAWI,IAAX,KAAoBC,uBAAeC,uBAAvC,EAAgE;MAC9D,KAAKC,cAAL,CAAoB,WAApB,EAAiC,KAAKC,GAAtC,EAA2C,KAAKC,SAAhD,EAA2D,IAA3D,EAAiE,IAAjE;IACD;EACF,CApBF,CAsBC;EACA;EACA;EACA;EACA;EACA;;;EACUC,iBAAiB,CAACC,GAAD,EAAiBC,QAAjB,EAAmC;eAAA,CAC5D;;;IACA,IAAI,KAAKZ,KAAL,CAAWI,IAAX,KAAoBC,uBAAeQ,OAAvC,EAAgD;MAC9C,OAAO,IAAP;IACD;;IAED,MAAMC,SAAS,GAAG,iBAAKd,KAAL,CAAWe,IAAX,MAAe,IAAf,IAAeC,aAAf,GAAe,MAAf,GAAeA,GAAEC,KAAF,CAAQ,CAAR,CAAf,MAAyB,IAAzB,IAAyBC,aAAzB,GAAyBA,EAAzB,GAA6B,CAAC,CAAhD,CAN4D,CAQ5D;;IACA,OAAO,EAEHN,QAAQ,CAACO,KAAT,KAAmB,IAAnB,IACAR,GAAG,CAACS,UAAJ,CAAeH,KAAf,CAAqB,CAArB,IAA0BH,SAD1B,IACuC;IACvCF,QAAQ,CAACS,IAAT,CAAcC,KAAd,CAAoBC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOP,KAAP,CAAa,CAAb,KAAmBH,SAA5C,CAJG,CAKH;IALG,CAAP;EAOD;;AA5CF;;AA+CQW","names":["FunctionScope","ScopeBase_1","constructor","scopeManager","upperScope","block","isMethodDefinition","ScopeType_1","function","type","types_1","ArrowFunctionExpression","defineVariable","set","variables","isValidResolution","ref","variable","Program","bodyStart","body","_a","range","_b","scope","identifier","defs","every","d","name","exports"],"sources":["../../src/scope/FunctionScope.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}