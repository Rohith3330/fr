{"ast":null,"code":"// @ts-check\n\n/** @typedef {import(\"../typings\").HtmlTagObject} HtmlTagObject */\n\n/**\n * @file\n * This file provides to helper to create html as a object representation as\n * those objects are easier to modify than pure string representations\n *\n * Usage:\n * ```\n * const element = createHtmlTagObject('h1', {class: 'demo'}, 'Hello World');\n * const html = htmlTagObjectToString(element);\n * console.log(html) // -> <h1 class=\"demo\">Hello World</h1>\n * ```\n */\n\n/**\n * All html tag elements which must not contain innerHTML\n * @see https://www.w3.org/TR/html5/syntax.html#void-elements\n */\nconst voidTags = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];\n/**\n * Turn a tag definition into a html string\n * @param {HtmlTagObject} tagDefinition\n *  A tag element according to the htmlWebpackPlugin object notation\n *\n * @param xhtml {boolean}\n *   Whether the generated html should add closing slashes to be xhtml compliant\n */\n\nfunction htmlTagObjectToString(tagDefinition, xhtml) {\n  const attributes = Object.keys(tagDefinition.attributes || {}).filter(function (attributeName) {\n    return tagDefinition.attributes[attributeName] === '' || tagDefinition.attributes[attributeName];\n  }).map(function (attributeName) {\n    if (tagDefinition.attributes[attributeName] === true) {\n      return xhtml ? attributeName + '=\"' + attributeName + '\"' : attributeName;\n    }\n\n    return attributeName + '=\"' + tagDefinition.attributes[attributeName] + '\"';\n  });\n  return '<' + [tagDefinition.tagName].concat(attributes).join(' ') + (tagDefinition.voidTag && xhtml ? '/' : '') + '>' + (tagDefinition.innerHTML || '') + (tagDefinition.voidTag ? '' : '</' + tagDefinition.tagName + '>');\n}\n/**\n * Static helper to create a tag object to be get injected into the dom\n *\n * @param {string} tagName\n * the name of the tag e.g. 'div'\n *\n * @param {{[attributeName: string]: string|boolean|null|undefined}} [attributes]\n * tag attributes e.g. `{ 'class': 'example', disabled: true }`\n *\n * @param {string} [innerHTML]\n *\n * @param {{[attributeName: string]: string|boolean|null|undefined}} [meta]\n * meta information about the tag e.g. `{ 'plugin': 'html-webpack-plugin' }`\n *\n * @returns {HtmlTagObject}\n */\n\n\nfunction createHtmlTagObject(tagName, attributes, innerHTML, meta) {\n  return {\n    tagName: tagName,\n    voidTag: voidTags.indexOf(tagName) !== -1,\n    attributes: attributes || {},\n    meta: meta || {},\n    innerHTML: innerHTML\n  };\n}\n/**\n * The `HtmlTagArray Array with a custom `.toString()` method.\n *\n * This allows the following:\n * ```\n *   const tags = HtmlTagArray.from([tag1, tag2]);\n *   const scriptTags = tags.filter((tag) => tag.tagName === 'script');\n *   const html = scriptTags.toString();\n * ```\n *\n * Or inside a string literal:\n * ```\n *   const tags = HtmlTagArray.from([tag1, tag2]);\n *   const html = `<html><body>${tags.filter((tag) => tag.tagName === 'script')}</body></html>`;\n * ```\n *\n */\n\n\nclass HtmlTagArray extends Array {\n  toString() {\n    return this.join('');\n  }\n\n}\n\nmodule.exports = {\n  HtmlTagArray: HtmlTagArray,\n  createHtmlTagObject: createHtmlTagObject,\n  htmlTagObjectToString: htmlTagObjectToString\n};","map":{"version":3,"names":["voidTags","htmlTagObjectToString","tagDefinition","xhtml","attributes","Object","keys","filter","attributeName","map","tagName","concat","join","voidTag","innerHTML","createHtmlTagObject","meta","indexOf","HtmlTagArray","Array","toString","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/html-webpack-plugin/lib/html-tags.js"],"sourcesContent":["// @ts-check\n/** @typedef {import(\"../typings\").HtmlTagObject} HtmlTagObject */\n/**\n * @file\n * This file provides to helper to create html as a object representation as\n * those objects are easier to modify than pure string representations\n *\n * Usage:\n * ```\n * const element = createHtmlTagObject('h1', {class: 'demo'}, 'Hello World');\n * const html = htmlTagObjectToString(element);\n * console.log(html) // -> <h1 class=\"demo\">Hello World</h1>\n * ```\n */\n\n/**\n * All html tag elements which must not contain innerHTML\n * @see https://www.w3.org/TR/html5/syntax.html#void-elements\n */\nconst voidTags = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];\n\n/**\n * Turn a tag definition into a html string\n * @param {HtmlTagObject} tagDefinition\n *  A tag element according to the htmlWebpackPlugin object notation\n *\n * @param xhtml {boolean}\n *   Whether the generated html should add closing slashes to be xhtml compliant\n */\nfunction htmlTagObjectToString (tagDefinition, xhtml) {\n  const attributes = Object.keys(tagDefinition.attributes || {})\n    .filter(function (attributeName) {\n      return tagDefinition.attributes[attributeName] === '' || tagDefinition.attributes[attributeName];\n    })\n    .map(function (attributeName) {\n      if (tagDefinition.attributes[attributeName] === true) {\n        return xhtml ? attributeName + '=\"' + attributeName + '\"' : attributeName;\n      }\n      return attributeName + '=\"' + tagDefinition.attributes[attributeName] + '\"';\n    });\n  return '<' + [tagDefinition.tagName].concat(attributes).join(' ') + (tagDefinition.voidTag && xhtml ? '/' : '') + '>' +\n    (tagDefinition.innerHTML || '') +\n    (tagDefinition.voidTag ? '' : '</' + tagDefinition.tagName + '>');\n}\n\n/**\n * Static helper to create a tag object to be get injected into the dom\n *\n * @param {string} tagName\n * the name of the tag e.g. 'div'\n *\n * @param {{[attributeName: string]: string|boolean|null|undefined}} [attributes]\n * tag attributes e.g. `{ 'class': 'example', disabled: true }`\n *\n * @param {string} [innerHTML]\n *\n * @param {{[attributeName: string]: string|boolean|null|undefined}} [meta]\n * meta information about the tag e.g. `{ 'plugin': 'html-webpack-plugin' }`\n *\n * @returns {HtmlTagObject}\n */\nfunction createHtmlTagObject (tagName, attributes, innerHTML, meta) {\n  return {\n    tagName: tagName,\n    voidTag: voidTags.indexOf(tagName) !== -1,\n    attributes: attributes || {},\n    meta: meta || {},\n    innerHTML: innerHTML\n  };\n}\n\n/**\n * The `HtmlTagArray Array with a custom `.toString()` method.\n *\n * This allows the following:\n * ```\n *   const tags = HtmlTagArray.from([tag1, tag2]);\n *   const scriptTags = tags.filter((tag) => tag.tagName === 'script');\n *   const html = scriptTags.toString();\n * ```\n *\n * Or inside a string literal:\n * ```\n *   const tags = HtmlTagArray.from([tag1, tag2]);\n *   const html = `<html><body>${tags.filter((tag) => tag.tagName === 'script')}</body></html>`;\n * ```\n *\n */\nclass HtmlTagArray extends Array {\n  toString () {\n    return this.join('');\n  }\n}\n\nmodule.exports = {\n  HtmlTagArray: HtmlTagArray,\n  createHtmlTagObject: createHtmlTagObject,\n  htmlTagObjectToString: htmlTagObjectToString\n};\n"],"mappings":"AAAA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,IAAjB,EAAuB,KAAvB,EAA8B,OAA9B,EAAuC,IAAvC,EAA6C,KAA7C,EAAoD,OAApD,EAA6D,QAA7D,EAAuE,MAAvE,EAA+E,MAA/E,EAAuF,OAAvF,EAAgG,QAAhG,EAA0G,OAA1G,EAAmH,KAAnH,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,qBAAT,CAAgCC,aAAhC,EAA+CC,KAA/C,EAAsD;EACpD,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYJ,aAAa,CAACE,UAAd,IAA4B,EAAxC,EAChBG,MADgB,CACT,UAAUC,aAAV,EAAyB;IAC/B,OAAON,aAAa,CAACE,UAAd,CAAyBI,aAAzB,MAA4C,EAA5C,IAAkDN,aAAa,CAACE,UAAd,CAAyBI,aAAzB,CAAzD;EACD,CAHgB,EAIhBC,GAJgB,CAIZ,UAAUD,aAAV,EAAyB;IAC5B,IAAIN,aAAa,CAACE,UAAd,CAAyBI,aAAzB,MAA4C,IAAhD,EAAsD;MACpD,OAAOL,KAAK,GAAGK,aAAa,GAAG,IAAhB,GAAuBA,aAAvB,GAAuC,GAA1C,GAAgDA,aAA5D;IACD;;IACD,OAAOA,aAAa,GAAG,IAAhB,GAAuBN,aAAa,CAACE,UAAd,CAAyBI,aAAzB,CAAvB,GAAiE,GAAxE;EACD,CATgB,CAAnB;EAUA,OAAO,MAAM,CAACN,aAAa,CAACQ,OAAf,EAAwBC,MAAxB,CAA+BP,UAA/B,EAA2CQ,IAA3C,CAAgD,GAAhD,CAAN,IAA8DV,aAAa,CAACW,OAAd,IAAyBV,KAAzB,GAAiC,GAAjC,GAAuC,EAArG,IAA2G,GAA3G,IACJD,aAAa,CAACY,SAAd,IAA2B,EADvB,KAEJZ,aAAa,CAACW,OAAd,GAAwB,EAAxB,GAA6B,OAAOX,aAAa,CAACQ,OAArB,GAA+B,GAFxD,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,mBAAT,CAA8BL,OAA9B,EAAuCN,UAAvC,EAAmDU,SAAnD,EAA8DE,IAA9D,EAAoE;EAClE,OAAO;IACLN,OAAO,EAAEA,OADJ;IAELG,OAAO,EAAEb,QAAQ,CAACiB,OAAT,CAAiBP,OAAjB,MAA8B,CAAC,CAFnC;IAGLN,UAAU,EAAEA,UAAU,IAAI,EAHrB;IAILY,IAAI,EAAEA,IAAI,IAAI,EAJT;IAKLF,SAAS,EAAEA;EALN,CAAP;AAOD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,YAAN,SAA2BC,KAA3B,CAAiC;EAC/BC,QAAQ,GAAI;IACV,OAAO,KAAKR,IAAL,CAAU,EAAV,CAAP;EACD;;AAH8B;;AAMjCS,MAAM,CAACC,OAAP,GAAiB;EACfJ,YAAY,EAAEA,YADC;EAEfH,mBAAmB,EAAEA,mBAFN;EAGfd,qBAAqB,EAAEA;AAHR,CAAjB"},"metadata":{},"sourceType":"script"}