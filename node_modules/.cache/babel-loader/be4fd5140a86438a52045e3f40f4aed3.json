{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rohith\\\\Pictures\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rohith\\\\Pictures\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport var getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: function importFetch() {\n    return require('node-fetch');\n  }\n};\nvar systemFetch;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch() {\n  return systemFetch;\n}\nexport var PlatformNode = /*#__PURE__*/function () {\n  function PlatformNode() {\n    _classCallCheck(this, PlatformNode);\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util');\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new this.util.TextEncoder();\n  }\n  _createClass(PlatformNode, [{\n    key: \"fetch\",\n    value: function fetch(path, requestInits) {\n      if (env().global.fetch != null) {\n        return env().global.fetch(path, requestInits);\n      }\n      if (systemFetch == null) {\n        systemFetch = getNodeFetch.importFetch();\n      }\n      return systemFetch(path, requestInits);\n    }\n  }, {\n    key: \"now\",\n    value: function now() {\n      var time = process.hrtime();\n      return time[0] * 1000 + time[1] / 1000000;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(text, encoding) {\n      if (encoding !== 'utf-8' && encoding !== 'utf8') {\n        throw new Error(\"Node built-in encoder only supports utf-8, but got \".concat(encoding));\n      }\n      return this.textEncoder.encode(text);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(bytes, encoding) {\n      if (bytes.length === 0) {\n        return '';\n      }\n      return new this.util.TextDecoder(encoding).decode(bytes);\n    }\n  }]);\n  return PlatformNode;\n}();\nif (env().get('IS_NODE') && !env().get('IS_BROWSER')) {\n  env().setPlatform('node', new PlatformNode());\n}","map":null,"metadata":{},"sourceType":"module"}