{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst schema_utils_1 = __importDefault(require(\"schema-utils\"));\n\nconst cosmiconfig_1 = require(\"cosmiconfig\");\n\nconst deepmerge_1 = __importDefault(require(\"deepmerge\"));\n\nconst ForkTsCheckerWebpackPluginOptions_json_1 = __importDefault(require(\"./ForkTsCheckerWebpackPluginOptions.json\"));\n\nconst ForkTsCheckerWebpackPluginConfiguration_1 = require(\"./ForkTsCheckerWebpackPluginConfiguration\");\n\nconst ForkTsCheckerWebpackPluginState_1 = require(\"./ForkTsCheckerWebpackPluginState\");\n\nconst reporter_1 = require(\"./reporter\");\n\nconst TypeScriptSupport_1 = require(\"./typescript-reporter/TypeScriptSupport\");\n\nconst TypeScriptReporterRpcClient_1 = require(\"./typescript-reporter/reporter/TypeScriptReporterRpcClient\");\n\nconst assertEsLintSupport_1 = require(\"./eslint-reporter/assertEsLintSupport\");\n\nconst EsLintReporterRpcClient_1 = require(\"./eslint-reporter/reporter/EsLintReporterRpcClient\");\n\nconst tapStartToConnectAndRunReporter_1 = require(\"./hooks/tapStartToConnectAndRunReporter\");\n\nconst tapStopToDisconnectReporter_1 = require(\"./hooks/tapStopToDisconnectReporter\");\n\nconst tapAfterCompileToAddDependencies_1 = require(\"./hooks/tapAfterCompileToAddDependencies\");\n\nconst tapErrorToLogMessage_1 = require(\"./hooks/tapErrorToLogMessage\");\n\nconst pluginHooks_1 = require(\"./hooks/pluginHooks\");\n\nconst tapAfterEnvironmentToPatchWatching_1 = require(\"./hooks/tapAfterEnvironmentToPatchWatching\");\n\nconst pool_1 = require(\"./utils/async/pool\");\n\nconst os_1 = __importDefault(require(\"os\"));\n\nclass ForkTsCheckerWebpackPlugin {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const explorerSync = cosmiconfig_1.cosmiconfigSync('fork-ts-checker');\n    const {\n      config: externalOptions\n    } = explorerSync.search() || {}; // first validate options directly passed to the constructor\n\n    const configuration = {\n      name: 'ForkTsCheckerWebpackPlugin'\n    };\n    schema_utils_1.default(ForkTsCheckerWebpackPluginOptions_json_1.default, options, configuration);\n    this.options = deepmerge_1.default(externalOptions || {}, options || {}); // then validate merged options\n\n    schema_utils_1.default(ForkTsCheckerWebpackPluginOptions_json_1.default, this.options, configuration);\n  }\n  /**\n   * @deprecated Use ForkTsCheckerWebpackPlugin.issuesPool instead\n   */\n\n\n  static get pool() {\n    // for backward compatibility\n    return ForkTsCheckerWebpackPlugin.issuesPool;\n  }\n\n  static getCompilerHooks(compiler) {\n    return pluginHooks_1.getForkTsCheckerWebpackPluginHooks(compiler);\n  }\n\n  apply(compiler) {\n    const configuration = ForkTsCheckerWebpackPluginConfiguration_1.createForkTsCheckerWebpackPluginConfiguration(compiler, this.options);\n    const state = ForkTsCheckerWebpackPluginState_1.createForkTsCheckerWebpackPluginState();\n    const issuesReporters = [];\n    const dependenciesReporters = [];\n\n    if (configuration.typescript.enabled) {\n      TypeScriptSupport_1.assertTypeScriptSupport(configuration.typescript);\n      issuesReporters.push(TypeScriptReporterRpcClient_1.createTypeScriptReporterRpcClient(configuration.typescript));\n      dependenciesReporters.push(TypeScriptReporterRpcClient_1.createTypeScriptReporterRpcClient(configuration.typescript));\n    }\n\n    if (configuration.eslint.enabled) {\n      assertEsLintSupport_1.assertEsLintSupport(configuration.eslint);\n      issuesReporters.push(EsLintReporterRpcClient_1.createEsLintReporterRpcClient(configuration.eslint));\n      dependenciesReporters.push(EsLintReporterRpcClient_1.createEsLintReporterRpcClient(configuration.eslint));\n    }\n\n    if (issuesReporters.length) {\n      const issuesReporter = reporter_1.createAggregatedReporter(reporter_1.composeReporterRpcClients(issuesReporters));\n      const dependenciesReporter = reporter_1.createAggregatedReporter(reporter_1.composeReporterRpcClients(dependenciesReporters));\n      tapAfterEnvironmentToPatchWatching_1.tapAfterEnvironmentToPatchWatching(compiler, state);\n      tapStartToConnectAndRunReporter_1.tapStartToConnectAndRunReporter(compiler, issuesReporter, dependenciesReporter, configuration, state);\n      tapAfterCompileToAddDependencies_1.tapAfterCompileToAddDependencies(compiler, configuration, state);\n      tapStopToDisconnectReporter_1.tapStopToDisconnectReporter(compiler, issuesReporter, dependenciesReporter, state);\n      tapErrorToLogMessage_1.tapErrorToLogMessage(compiler, configuration);\n    } else {\n      throw new Error(`ForkTsCheckerWebpackPlugin is configured to not use any issue reporter. It's probably a configuration issue.`);\n    }\n  }\n\n}\n\nexports.ForkTsCheckerWebpackPlugin = ForkTsCheckerWebpackPlugin;\n/**\n * Current version of the plugin\n */\n\nForkTsCheckerWebpackPlugin.version = '6.5.2'; // will be replaced by the @semantic-release/exec\n\n/**\n * Default pools for the plugin concurrency limit\n */\n\nForkTsCheckerWebpackPlugin.issuesPool = pool_1.createPool(Math.max(1, os_1.default.cpus().length));\nForkTsCheckerWebpackPlugin.dependenciesPool = pool_1.createPool(Math.max(1, os_1.default.cpus().length));","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","schema_utils_1","require","cosmiconfig_1","deepmerge_1","ForkTsCheckerWebpackPluginOptions_json_1","ForkTsCheckerWebpackPluginConfiguration_1","ForkTsCheckerWebpackPluginState_1","reporter_1","TypeScriptSupport_1","TypeScriptReporterRpcClient_1","assertEsLintSupport_1","EsLintReporterRpcClient_1","tapStartToConnectAndRunReporter_1","tapStopToDisconnectReporter_1","tapAfterCompileToAddDependencies_1","tapErrorToLogMessage_1","pluginHooks_1","tapAfterEnvironmentToPatchWatching_1","pool_1","os_1","ForkTsCheckerWebpackPlugin","constructor","options","explorerSync","cosmiconfigSync","config","externalOptions","search","configuration","name","default","pool","issuesPool","getCompilerHooks","compiler","getForkTsCheckerWebpackPluginHooks","apply","createForkTsCheckerWebpackPluginConfiguration","state","createForkTsCheckerWebpackPluginState","issuesReporters","dependenciesReporters","typescript","enabled","assertTypeScriptSupport","push","createTypeScriptReporterRpcClient","eslint","assertEsLintSupport","createEsLintReporterRpcClient","length","issuesReporter","createAggregatedReporter","composeReporterRpcClients","dependenciesReporter","tapAfterEnvironmentToPatchWatching","tapStartToConnectAndRunReporter","tapAfterCompileToAddDependencies","tapStopToDisconnectReporter","tapErrorToLogMessage","Error","version","createPool","Math","max","cpus","dependenciesPool"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/fork-ts-checker-webpack-plugin/lib/ForkTsCheckerWebpackPlugin.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst schema_utils_1 = __importDefault(require(\"schema-utils\"));\nconst cosmiconfig_1 = require(\"cosmiconfig\");\nconst deepmerge_1 = __importDefault(require(\"deepmerge\"));\nconst ForkTsCheckerWebpackPluginOptions_json_1 = __importDefault(require(\"./ForkTsCheckerWebpackPluginOptions.json\"));\nconst ForkTsCheckerWebpackPluginConfiguration_1 = require(\"./ForkTsCheckerWebpackPluginConfiguration\");\nconst ForkTsCheckerWebpackPluginState_1 = require(\"./ForkTsCheckerWebpackPluginState\");\nconst reporter_1 = require(\"./reporter\");\nconst TypeScriptSupport_1 = require(\"./typescript-reporter/TypeScriptSupport\");\nconst TypeScriptReporterRpcClient_1 = require(\"./typescript-reporter/reporter/TypeScriptReporterRpcClient\");\nconst assertEsLintSupport_1 = require(\"./eslint-reporter/assertEsLintSupport\");\nconst EsLintReporterRpcClient_1 = require(\"./eslint-reporter/reporter/EsLintReporterRpcClient\");\nconst tapStartToConnectAndRunReporter_1 = require(\"./hooks/tapStartToConnectAndRunReporter\");\nconst tapStopToDisconnectReporter_1 = require(\"./hooks/tapStopToDisconnectReporter\");\nconst tapAfterCompileToAddDependencies_1 = require(\"./hooks/tapAfterCompileToAddDependencies\");\nconst tapErrorToLogMessage_1 = require(\"./hooks/tapErrorToLogMessage\");\nconst pluginHooks_1 = require(\"./hooks/pluginHooks\");\nconst tapAfterEnvironmentToPatchWatching_1 = require(\"./hooks/tapAfterEnvironmentToPatchWatching\");\nconst pool_1 = require(\"./utils/async/pool\");\nconst os_1 = __importDefault(require(\"os\"));\nclass ForkTsCheckerWebpackPlugin {\n    constructor(options = {}) {\n        const explorerSync = cosmiconfig_1.cosmiconfigSync('fork-ts-checker');\n        const { config: externalOptions } = explorerSync.search() || {};\n        // first validate options directly passed to the constructor\n        const configuration = { name: 'ForkTsCheckerWebpackPlugin' };\n        schema_utils_1.default(ForkTsCheckerWebpackPluginOptions_json_1.default, options, configuration);\n        this.options = deepmerge_1.default(externalOptions || {}, options || {});\n        // then validate merged options\n        schema_utils_1.default(ForkTsCheckerWebpackPluginOptions_json_1.default, this.options, configuration);\n    }\n    /**\n     * @deprecated Use ForkTsCheckerWebpackPlugin.issuesPool instead\n     */\n    static get pool() {\n        // for backward compatibility\n        return ForkTsCheckerWebpackPlugin.issuesPool;\n    }\n    static getCompilerHooks(compiler) {\n        return pluginHooks_1.getForkTsCheckerWebpackPluginHooks(compiler);\n    }\n    apply(compiler) {\n        const configuration = ForkTsCheckerWebpackPluginConfiguration_1.createForkTsCheckerWebpackPluginConfiguration(compiler, this.options);\n        const state = ForkTsCheckerWebpackPluginState_1.createForkTsCheckerWebpackPluginState();\n        const issuesReporters = [];\n        const dependenciesReporters = [];\n        if (configuration.typescript.enabled) {\n            TypeScriptSupport_1.assertTypeScriptSupport(configuration.typescript);\n            issuesReporters.push(TypeScriptReporterRpcClient_1.createTypeScriptReporterRpcClient(configuration.typescript));\n            dependenciesReporters.push(TypeScriptReporterRpcClient_1.createTypeScriptReporterRpcClient(configuration.typescript));\n        }\n        if (configuration.eslint.enabled) {\n            assertEsLintSupport_1.assertEsLintSupport(configuration.eslint);\n            issuesReporters.push(EsLintReporterRpcClient_1.createEsLintReporterRpcClient(configuration.eslint));\n            dependenciesReporters.push(EsLintReporterRpcClient_1.createEsLintReporterRpcClient(configuration.eslint));\n        }\n        if (issuesReporters.length) {\n            const issuesReporter = reporter_1.createAggregatedReporter(reporter_1.composeReporterRpcClients(issuesReporters));\n            const dependenciesReporter = reporter_1.createAggregatedReporter(reporter_1.composeReporterRpcClients(dependenciesReporters));\n            tapAfterEnvironmentToPatchWatching_1.tapAfterEnvironmentToPatchWatching(compiler, state);\n            tapStartToConnectAndRunReporter_1.tapStartToConnectAndRunReporter(compiler, issuesReporter, dependenciesReporter, configuration, state);\n            tapAfterCompileToAddDependencies_1.tapAfterCompileToAddDependencies(compiler, configuration, state);\n            tapStopToDisconnectReporter_1.tapStopToDisconnectReporter(compiler, issuesReporter, dependenciesReporter, state);\n            tapErrorToLogMessage_1.tapErrorToLogMessage(compiler, configuration);\n        }\n        else {\n            throw new Error(`ForkTsCheckerWebpackPlugin is configured to not use any issue reporter. It's probably a configuration issue.`);\n        }\n    }\n}\nexports.ForkTsCheckerWebpackPlugin = ForkTsCheckerWebpackPlugin;\n/**\n * Current version of the plugin\n */\nForkTsCheckerWebpackPlugin.version = '6.5.2'; // will be replaced by the @semantic-release/exec\n/**\n * Default pools for the plugin concurrency limit\n */\nForkTsCheckerWebpackPlugin.issuesPool = pool_1.createPool(Math.max(1, os_1.default.cpus().length));\nForkTsCheckerWebpackPlugin.dependenciesPool = pool_1.createPool(Math.max(1, os_1.default.cpus().length));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}