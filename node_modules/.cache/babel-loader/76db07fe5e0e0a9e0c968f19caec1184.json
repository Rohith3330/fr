{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.astConverter = void 0;\n\nconst convert_1 = require(\"./convert\");\n\nconst convert_comments_1 = require(\"./convert-comments\");\n\nconst node_utils_1 = require(\"./node-utils\");\n\nconst simple_traverse_1 = require(\"./simple-traverse\");\n\nfunction astConverter(ast, extra, shouldPreserveNodeMaps) {\n  /**\n   * The TypeScript compiler produced fundamental parse errors when parsing the\n   * source.\n   */\n  const {\n    parseDiagnostics\n  } = ast;\n\n  if (parseDiagnostics.length) {\n    throw (0, convert_1.convertError)(parseDiagnostics[0]);\n  }\n  /**\n   * Recursively convert the TypeScript AST into an ESTree-compatible AST\n   */\n\n\n  const instance = new convert_1.Converter(ast, {\n    errorOnUnknownASTType: extra.errorOnUnknownASTType || false,\n    shouldPreserveNodeMaps\n  });\n  const estree = instance.convertProgram();\n  /**\n   * Optionally remove range and loc if specified\n   */\n\n  if (!extra.range || !extra.loc) {\n    (0, simple_traverse_1.simpleTraverse)(estree, {\n      enter: node => {\n        if (!extra.range) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- TS 4.0 made this an error because the types aren't optional\n          // @ts-expect-error\n          delete node.range;\n        }\n\n        if (!extra.loc) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- TS 4.0 made this an error because the types aren't optional\n          // @ts-expect-error\n          delete node.loc;\n        }\n      }\n    });\n  }\n  /**\n   * Optionally convert and include all tokens in the AST\n   */\n\n\n  if (extra.tokens) {\n    estree.tokens = (0, node_utils_1.convertTokens)(ast);\n  }\n  /**\n   * Optionally convert and include all comments in the AST\n   */\n\n\n  if (extra.comment) {\n    estree.comments = (0, convert_comments_1.convertComments)(ast, extra.code);\n  }\n\n  const astMaps = instance.getASTMaps();\n  return {\n    estree,\n    astMaps\n  };\n}\n\nexports.astConverter = astConverter;","map":{"version":3,"mappings":";;;;;;;AAGA;;AACA;;AACA;;AAEA;;AAGA,SAAgBA,YAAhB,CACEC,GADF,EAEEC,KAFF,EAGEC,sBAHF,EAGiC;EAE/B;;;;EAIA,MAAM;IAAEC;EAAF,IAAuBH,GAA7B;;EACA,IAAIG,gBAAgB,CAACC,MAArB,EAA6B;IAC3B,MAAM,4BAAaD,gBAAgB,CAAC,CAAD,CAA7B,CAAN;EACD;EAED;;;;;EAGA,MAAME,QAAQ,GAAG,IAAIC,mBAAJ,CAAcN,GAAd,EAAmB;IAClCO,qBAAqB,EAAEN,KAAK,CAACM,qBAAN,IAA+B,KADpB;IAElCL;EAFkC,CAAnB,CAAjB;EAKA,MAAMM,MAAM,GAAGH,QAAQ,CAACI,cAAT,EAAf;EAEA;;;;EAGA,IAAI,CAACR,KAAK,CAACS,KAAP,IAAgB,CAACT,KAAK,CAACU,GAA3B,EAAgC;IAC9B,sCAAeH,MAAf,EAAuB;MACrBI,KAAK,EAAEC,IAAI,IAAG;QACZ,IAAI,CAACZ,KAAK,CAACS,KAAX,EAAkB;UAChB;UACA;UACA,OAAOG,IAAI,CAACH,KAAZ;QACD;;QACD,IAAI,CAACT,KAAK,CAACU,GAAX,EAAgB;UACd;UACA;UACA,OAAOE,IAAI,CAACF,GAAZ;QACD;MACF;IAZoB,CAAvB;EAcD;EAED;;;;;EAGA,IAAIV,KAAK,CAACa,MAAV,EAAkB;IAChBN,MAAM,CAACM,MAAP,GAAgB,gCAAcd,GAAd,CAAhB;EACD;EAED;;;;;EAGA,IAAIC,KAAK,CAACc,OAAV,EAAmB;IACjBP,MAAM,CAACQ,QAAP,GAAkB,wCAAgBhB,GAAhB,EAAqBC,KAAK,CAACgB,IAA3B,CAAlB;EACD;;EAED,MAAMC,OAAO,GAAGb,QAAQ,CAACc,UAAT,EAAhB;EAEA,OAAO;IAAEX,MAAF;IAAUU;EAAV,CAAP;AACD;;AA7DDE","names":["astConverter","ast","extra","shouldPreserveNodeMaps","parseDiagnostics","length","instance","convert_1","errorOnUnknownASTType","estree","convertProgram","range","loc","enter","node","tokens","comment","comments","code","astMaps","getASTMaps","exports"],"sources":["../src/ast-converter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}