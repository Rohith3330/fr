{"ast":null,"code":"/**\n * @fileoverview Enforce aria role attribute is valid.\n * @author Ethan Cohen\n */\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nimport { roles } from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/aria-role'; // -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\nconst errorMessage = {\n  message: 'Elements with ARIA roles must use a valid, non-abstract ARIA role.',\n  type: 'JSXAttribute'\n};\nconst roleKeys = [...roles.keys()];\nconst validRoles = roleKeys.filter(role => roles.get(role).abstract === false);\nconst invalidRoles = roleKeys.filter(role => roles.get(role).abstract === true);\n\nconst createTests = roleNames => roleNames.map(role => ({\n  code: `<div role=\"${role.toLowerCase()}\" />`\n}));\n\nconst validTests = createTests(validRoles);\nconst invalidTests = createTests(invalidRoles).map(test => {\n  const invalidTest = { ...test\n  };\n  invalidTest.errors = [errorMessage];\n  return invalidTest;\n});\nconst allowedInvalidRoles = [{\n  allowedInvalidRoles: ['invalid-role', 'other-invalid-role']\n}];\nconst ignoreNonDOMSchema = [{\n  ignoreNonDOM: true\n}];\nconst customDivSettings = {\n  'jsx-a11y': {\n    components: {\n      Div: 'div'\n    }\n  }\n};\nruleTester.run('aria-role', rule, {\n  valid: [// Variables should pass, as we are only testing literals.\n  {\n    code: '<div />'\n  }, {\n    code: '<div></div>'\n  }, {\n    code: '<div role={role} />'\n  }, {\n    code: '<div role={role || \"button\"} />'\n  }, {\n    code: '<div role={role || \"foobar\"} />'\n  }, {\n    code: '<div role=\"tabpanel row\" />'\n  }, {\n    code: '<div role=\"switch\" />'\n  }, {\n    code: '<div role=\"doc-abstract\" />'\n  }, {\n    code: '<div role=\"doc-appendix doc-bibliography\" />'\n  }, {\n    code: '<Bar baz />'\n  }, {\n    code: '<img role=\"invalid-role\" />',\n    options: allowedInvalidRoles\n  }, {\n    code: '<img role=\"invalid-role tabpanel\" />',\n    options: allowedInvalidRoles\n  }, {\n    code: '<img role=\"invalid-role other-invalid-role\" />',\n    options: allowedInvalidRoles\n  }, {\n    code: '<Foo role=\"bar\" />',\n    options: ignoreNonDOMSchema\n  }, {\n    code: '<fakeDOM role=\"bar\" />',\n    options: ignoreNonDOMSchema\n  }, {\n    code: '<img role=\"presentation\" />',\n    options: ignoreNonDOMSchema\n  }, {\n    code: '<Div role=\"button\" />',\n    errors: [errorMessage],\n    settings: customDivSettings\n  }].concat(validTests).map(parserOptionsMapper),\n  invalid: [{\n    code: '<div role=\"foobar\" />',\n    errors: [errorMessage]\n  }, {\n    code: '<div role=\"datepicker\"></div>',\n    errors: [errorMessage]\n  }, {\n    code: '<div role=\"range\"></div>',\n    errors: [errorMessage]\n  }, {\n    code: '<div role=\"Button\"></div>',\n    errors: [errorMessage]\n  }, {\n    code: '<div role=\"\"></div>',\n    errors: [errorMessage]\n  }, {\n    code: '<div role=\"tabpanel row foobar\"></div>',\n    errors: [errorMessage]\n  }, {\n    code: '<div role=\"tabpanel row range\"></div>',\n    errors: [errorMessage]\n  }, {\n    code: '<div role=\"doc-endnotes range\"></div>',\n    errors: [errorMessage]\n  }, {\n    code: '<div role />',\n    errors: [errorMessage]\n  }, {\n    code: '<div role=\"unknown-invalid-role\" />',\n    errors: [errorMessage],\n    options: allowedInvalidRoles\n  }, {\n    code: '<div role={null}></div>',\n    errors: [errorMessage]\n  }, {\n    code: '<Foo role=\"datepicker\" />',\n    errors: [errorMessage]\n  }, {\n    code: '<Foo role=\"Button\" />',\n    errors: [errorMessage]\n  }, {\n    code: '<Div role=\"Button\" />',\n    errors: [errorMessage],\n    settings: customDivSettings\n  }, {\n    code: '<Div role=\"Button\" />',\n    errors: [errorMessage],\n    options: ignoreNonDOMSchema,\n    settings: customDivSettings\n  }].concat(invalidTests).map(parserOptionsMapper)\n});","map":{"version":3,"names":["roles","RuleTester","parserOptionsMapper","rule","ruleTester","errorMessage","message","type","roleKeys","keys","validRoles","filter","role","get","abstract","invalidRoles","createTests","roleNames","map","code","toLowerCase","validTests","invalidTests","test","invalidTest","errors","allowedInvalidRoles","ignoreNonDOMSchema","ignoreNonDOM","customDivSettings","components","Div","run","valid","options","settings","concat","invalid"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/aria-role-test.js"],"sourcesContent":["/**\n * @fileoverview Enforce aria role attribute is valid.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { roles } from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/aria-role';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst errorMessage = {\n  message: 'Elements with ARIA roles must use a valid, non-abstract ARIA role.',\n  type: 'JSXAttribute',\n};\n\nconst roleKeys = [...roles.keys()];\n\nconst validRoles = roleKeys.filter((role) => roles.get(role).abstract === false);\nconst invalidRoles = roleKeys.filter((role) => roles.get(role).abstract === true);\n\nconst createTests = (roleNames) => roleNames.map((role) => ({\n  code: `<div role=\"${role.toLowerCase()}\" />`,\n}));\n\nconst validTests = createTests(validRoles);\nconst invalidTests = createTests(invalidRoles).map((test) => {\n  const invalidTest = { ...test };\n  invalidTest.errors = [errorMessage];\n  return invalidTest;\n});\n\nconst allowedInvalidRoles = [{\n  allowedInvalidRoles: ['invalid-role', 'other-invalid-role'],\n}];\n\nconst ignoreNonDOMSchema = [{\n  ignoreNonDOM: true,\n}];\n\nconst customDivSettings = {\n  'jsx-a11y': {\n    components: {\n      Div: 'div',\n    },\n  },\n};\n\nruleTester.run('aria-role', rule, {\n  valid: [\n    // Variables should pass, as we are only testing literals.\n    { code: '<div />' },\n    { code: '<div></div>' },\n    { code: '<div role={role} />' },\n    { code: '<div role={role || \"button\"} />' },\n    { code: '<div role={role || \"foobar\"} />' },\n    { code: '<div role=\"tabpanel row\" />' },\n    { code: '<div role=\"switch\" />' },\n    { code: '<div role=\"doc-abstract\" />' },\n    { code: '<div role=\"doc-appendix doc-bibliography\" />' },\n    { code: '<Bar baz />' },\n    { code: '<img role=\"invalid-role\" />', options: allowedInvalidRoles },\n    { code: '<img role=\"invalid-role tabpanel\" />', options: allowedInvalidRoles },\n    { code: '<img role=\"invalid-role other-invalid-role\" />', options: allowedInvalidRoles },\n    { code: '<Foo role=\"bar\" />', options: ignoreNonDOMSchema },\n    { code: '<fakeDOM role=\"bar\" />', options: ignoreNonDOMSchema },\n    { code: '<img role=\"presentation\" />', options: ignoreNonDOMSchema },\n    {\n      code: '<Div role=\"button\" />',\n      errors: [errorMessage],\n      settings: customDivSettings,\n    },\n  ].concat(validTests).map(parserOptionsMapper),\n\n  invalid: [\n    { code: '<div role=\"foobar\" />', errors: [errorMessage] },\n    { code: '<div role=\"datepicker\"></div>', errors: [errorMessage] },\n    { code: '<div role=\"range\"></div>', errors: [errorMessage] },\n    { code: '<div role=\"Button\"></div>', errors: [errorMessage] },\n    { code: '<div role=\"\"></div>', errors: [errorMessage] },\n    { code: '<div role=\"tabpanel row foobar\"></div>', errors: [errorMessage] },\n    { code: '<div role=\"tabpanel row range\"></div>', errors: [errorMessage] },\n    { code: '<div role=\"doc-endnotes range\"></div>', errors: [errorMessage] },\n    { code: '<div role />', errors: [errorMessage] },\n    { code: '<div role=\"unknown-invalid-role\" />', errors: [errorMessage], options: allowedInvalidRoles },\n    { code: '<div role={null}></div>', errors: [errorMessage] },\n    { code: '<Foo role=\"datepicker\" />', errors: [errorMessage] },\n    { code: '<Foo role=\"Button\" />', errors: [errorMessage] },\n    { code: '<Div role=\"Button\" />', errors: [errorMessage], settings: customDivSettings },\n    {\n      code: '<Div role=\"Button\" />',\n      errors: [errorMessage],\n      options: ignoreNonDOMSchema,\n      settings: customDivSettings,\n    },\n  ].concat(invalidTests).map(parserOptionsMapper),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}