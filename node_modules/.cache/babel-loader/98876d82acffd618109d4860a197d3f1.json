{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _utils = require(\"./utils\");\n\nfunction isRegeneratorSource(source) {\n  return source === \"regenerator-runtime/runtime\" || source === \"regenerator-runtime/runtime.js\";\n}\n\nfunction _default() {\n  const visitor = {\n    ImportDeclaration(path) {\n      if (isRegeneratorSource((0, _utils.getImportSource)(path))) {\n        this.regeneratorImportExcluded = true;\n        path.remove();\n      }\n    },\n\n    Program(path) {\n      path.get(\"body\").forEach(bodyPath => {\n        if (isRegeneratorSource((0, _utils.getRequireSource)(bodyPath))) {\n          this.regeneratorImportExcluded = true;\n          bodyPath.remove();\n        }\n      });\n    }\n\n  };\n  return {\n    name: \"preset-env/remove-regenerator\",\n    visitor,\n\n    pre() {\n      this.regeneratorImportExcluded = false;\n    },\n\n    post() {\n      if (this.opts.debug && this.regeneratorImportExcluded) {\n        let filename = this.file.opts.filename;\n\n        if (process.env.BABEL_ENV === \"test\") {\n          filename = filename.replace(/\\\\/g, \"/\");\n        }\n\n        console.log(`\\n[${filename}] Based on your targets, regenerator-runtime import excluded.`);\n      }\n    }\n\n  };\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAIA,SAASA,mBAAT,CAA6BC,MAA7B,EAA6C;EAC3C,OACEA,MAAM,KAAK,6BAAXA,IACAA,MAAM,KAAK,gCAFb;AAID;;AAMc,oBAA8C;EAC3D,MAAMC,OAAoC,GAAG;IAC3CC,iBAAiB,CAACC,IAAD,EAAO;MACtB,IAAIJ,mBAAmB,CAAC,4BAAgBI,IAAhB,CAAD,CAAvB,EAAgD;QAC9C,KAAKC,yBAAL,GAAiC,IAAjC;QACAD,IAAI,CAACE,MAALF;MACD;IALwC;;IAO3CG,OAAO,CAACH,IAAD,EAAO;MACZA,IAAI,CAACI,GAALJ,CAAS,MAATA,EAAiBK,OAAjBL,CAAyBM,QAAQ,IAAI;QACnC,IAAIV,mBAAmB,CAAC,6BAAiBU,QAAjB,CAAD,CAAvB,EAAqD;UACnD,KAAKL,yBAAL,GAAiC,IAAjC;UACAK,QAAQ,CAACJ,MAATI;QACD;MAJH;IAMD;;EAd0C,CAA7C;EAiBA,OAAO;IACLC,IAAI,EAAE,+BADD;IAELT,OAFK;;IAGLU,GAAG,GAAG;MACJ,KAAKP,yBAAL,GAAiC,KAAjC;IAJG;;IAMLQ,IAAI,GAAG;MACL,IAAI,KAAKC,IAAL,CAAUC,KAAV,IAAmB,KAAKV,yBAA5B,EAAuD;QACrD,IAAIW,QAAQ,GAAG,KAAKC,IAAL,CAAUH,IAAV,CAAeE,QAA9B;;QAEA,IAAIE,OAAO,CAACC,GAARD,CAAYE,SAAZF,KAA0B,MAA9B,EAAsC;UACpCF,QAAQ,GAAGA,QAAQ,CAACK,OAATL,CAAiB,KAAjBA,EAAwB,GAAxBA,CAAXA;QACD;;QACDM,OAAO,CAACC,GAARD,CACG,MAAKN,QAAS,+DADjBM;MAGD;IACF;;EAjBI,CAAP;AAmBD","names":["isRegeneratorSource","source","visitor","ImportDeclaration","path","regeneratorImportExcluded","remove","Program","get","forEach","bodyPath","name","pre","post","opts","debug","filename","file","process","env","BABEL_ENV","replace","console","log"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\preset-env\\src\\polyfills\\regenerator.ts"],"sourcesContent":["import { getImportSource, getRequireSource } from \"./utils\";\nimport type { Visitor } from \"@babel/traverse\";\nimport type { PluginObject, PluginPass } from \"@babel/core\";\n\nfunction isRegeneratorSource(source: string) {\n  return (\n    source === \"regenerator-runtime/runtime\" ||\n    source === \"regenerator-runtime/runtime.js\"\n  );\n}\n\ntype State = {\n  regeneratorImportExcluded: boolean;\n};\n\nexport default function (): PluginObject<State & PluginPass> {\n  const visitor: Visitor<State & PluginPass> = {\n    ImportDeclaration(path) {\n      if (isRegeneratorSource(getImportSource(path))) {\n        this.regeneratorImportExcluded = true;\n        path.remove();\n      }\n    },\n    Program(path) {\n      path.get(\"body\").forEach(bodyPath => {\n        if (isRegeneratorSource(getRequireSource(bodyPath))) {\n          this.regeneratorImportExcluded = true;\n          bodyPath.remove();\n        }\n      });\n    },\n  };\n\n  return {\n    name: \"preset-env/remove-regenerator\",\n    visitor,\n    pre() {\n      this.regeneratorImportExcluded = false;\n    },\n    post() {\n      if (this.opts.debug && this.regeneratorImportExcluded) {\n        let filename = this.file.opts.filename;\n        // normalize filename to generate consistent preset-env test fixtures\n        if (process.env.BABEL_ENV === \"test\") {\n          filename = filename.replace(/\\\\/g, \"/\");\n        }\n        console.log(\n          `\\n[${filename}] Based on your targets, regenerator-runtime import excluded.`,\n        );\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}