{"ast":null,"code":"import expect from 'expect';\nimport getElementType from '../../../src/util/getElementType';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\ndescribe('getElementType', () => {\n  describe('no settings in context', () => {\n    const elementType = getElementType({\n      settings: {}\n    });\n    it('should return the exact tag name for a DOM element', () => {\n      expect(elementType(JSXElementMock('input').openingElement)).toBe('input');\n    });\n    it('should return the exact tag name for a custom element', () => {\n      expect(elementType(JSXElementMock('CustomInput').openingElement)).toBe('CustomInput');\n    });\n    it('should return the exact tag name for names that are in Object.prototype', () => {\n      expect(elementType(JSXElementMock('toString').openingElement)).toBe('toString');\n    });\n  });\n  describe('components settings in context', () => {\n    const elementType = getElementType({\n      settings: {\n        'jsx-a11y': {\n          components: {\n            CustomInput: 'input'\n          }\n        }\n      }\n    });\n    it('should return the exact tag name for a DOM element', () => {\n      expect(elementType(JSXElementMock('input').openingElement)).toBe('input');\n    });\n    it('should return the mapped tag name for a custom element', () => {\n      expect(elementType(JSXElementMock('CustomInput').openingElement)).toBe('input');\n    });\n    it('should return the exact tag name for a custom element not in the components map', () => {\n      expect(elementType(JSXElementMock('CityInput').openingElement)).toBe('CityInput');\n    });\n  });\n});","map":{"version":3,"names":["expect","getElementType","JSXElementMock","describe","elementType","settings","it","openingElement","toBe","components","CustomInput"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/getElementType-test.js"],"sourcesContent":["import expect from 'expect';\nimport getElementType from '../../../src/util/getElementType';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\n\ndescribe('getElementType', () => {\n  describe('no settings in context', () => {\n    const elementType = getElementType({ settings: {} });\n\n    it('should return the exact tag name for a DOM element', () => {\n      expect(elementType(JSXElementMock('input').openingElement)).toBe('input');\n    });\n\n    it('should return the exact tag name for a custom element', () => {\n      expect(elementType(JSXElementMock('CustomInput').openingElement)).toBe('CustomInput');\n    });\n\n    it('should return the exact tag name for names that are in Object.prototype', () => {\n      expect(elementType(JSXElementMock('toString').openingElement)).toBe('toString');\n    });\n  });\n\n  describe('components settings in context', () => {\n    const elementType = getElementType({\n      settings: {\n        'jsx-a11y': {\n          components: {\n            CustomInput: 'input',\n          },\n        },\n      },\n    });\n\n    it('should return the exact tag name for a DOM element', () => {\n      expect(elementType(JSXElementMock('input').openingElement)).toBe('input');\n    });\n\n    it('should return the mapped tag name for a custom element', () => {\n      expect(elementType(JSXElementMock('CustomInput').openingElement)).toBe('input');\n    });\n\n    it('should return the exact tag name for a custom element not in the components map', () => {\n      expect(elementType(JSXElementMock('CityInput').openingElement)).toBe('CityInput');\n    });\n  });\n});\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AAEAC,QAAQ,CAAC,gBAAD,EAAmB,MAAM;EAC/BA,QAAQ,CAAC,wBAAD,EAA2B,MAAM;IACvC,MAAMC,WAAW,GAAGH,cAAc,CAAC;MAAEI,QAAQ,EAAE;IAAZ,CAAD,CAAlC;IAEAC,EAAE,CAAC,oDAAD,EAAuD,MAAM;MAC7DN,MAAM,CAACI,WAAW,CAACF,cAAc,CAAC,OAAD,CAAd,CAAwBK,cAAzB,CAAZ,CAAN,CAA4DC,IAA5D,CAAiE,OAAjE;IACD,CAFC,CAAF;IAIAF,EAAE,CAAC,uDAAD,EAA0D,MAAM;MAChEN,MAAM,CAACI,WAAW,CAACF,cAAc,CAAC,aAAD,CAAd,CAA8BK,cAA/B,CAAZ,CAAN,CAAkEC,IAAlE,CAAuE,aAAvE;IACD,CAFC,CAAF;IAIAF,EAAE,CAAC,yEAAD,EAA4E,MAAM;MAClFN,MAAM,CAACI,WAAW,CAACF,cAAc,CAAC,UAAD,CAAd,CAA2BK,cAA5B,CAAZ,CAAN,CAA+DC,IAA/D,CAAoE,UAApE;IACD,CAFC,CAAF;EAGD,CAdO,CAAR;EAgBAL,QAAQ,CAAC,gCAAD,EAAmC,MAAM;IAC/C,MAAMC,WAAW,GAAGH,cAAc,CAAC;MACjCI,QAAQ,EAAE;QACR,YAAY;UACVI,UAAU,EAAE;YACVC,WAAW,EAAE;UADH;QADF;MADJ;IADuB,CAAD,CAAlC;IAUAJ,EAAE,CAAC,oDAAD,EAAuD,MAAM;MAC7DN,MAAM,CAACI,WAAW,CAACF,cAAc,CAAC,OAAD,CAAd,CAAwBK,cAAzB,CAAZ,CAAN,CAA4DC,IAA5D,CAAiE,OAAjE;IACD,CAFC,CAAF;IAIAF,EAAE,CAAC,wDAAD,EAA2D,MAAM;MACjEN,MAAM,CAACI,WAAW,CAACF,cAAc,CAAC,aAAD,CAAd,CAA8BK,cAA/B,CAAZ,CAAN,CAAkEC,IAAlE,CAAuE,OAAvE;IACD,CAFC,CAAF;IAIAF,EAAE,CAAC,iFAAD,EAAoF,MAAM;MAC1FN,MAAM,CAACI,WAAW,CAACF,cAAc,CAAC,WAAD,CAAd,CAA4BK,cAA7B,CAAZ,CAAN,CAAgEC,IAAhE,CAAqE,WAArE;IACD,CAFC,CAAF;EAGD,CAtBO,CAAR;AAuBD,CAxCO,CAAR"},"metadata":{},"sourceType":"module"}