{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@jridgewell/trace-mapping'), require('@jridgewell/gen-mapping')) : typeof define === 'function' && define.amd ? define(['@jridgewell/trace-mapping', '@jridgewell/gen-mapping'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.remapping = factory(global.traceMapping, global.genMapping));\n})(this, function (traceMapping, genMapping) {\n  'use strict';\n\n  const SOURCELESS_MAPPING = {\n    source: null,\n    column: null,\n    line: null,\n    name: null,\n    content: null\n  };\n  const EMPTY_SOURCES = [];\n\n  function Source(map, sources, source, content) {\n    return {\n      map,\n      sources,\n      source,\n      content\n    };\n  }\n  /**\n   * MapSource represents a single sourcemap, with the ability to trace mappings into its child nodes\n   * (which may themselves be SourceMapTrees).\n   */\n\n\n  function MapSource(map, sources) {\n    return Source(map, sources, '', null);\n  }\n  /**\n   * A \"leaf\" node in the sourcemap tree, representing an original, unmodified source file. Recursive\n   * segment tracing ends at the `OriginalSource`.\n   */\n\n\n  function OriginalSource(source, content) {\n    return Source(null, EMPTY_SOURCES, source, content);\n  }\n  /**\n   * traceMappings is only called on the root level SourceMapTree, and begins the process of\n   * resolving each mapping in terms of the original source files.\n   */\n\n\n  function traceMappings(tree) {\n    const gen = new genMapping.GenMapping({\n      file: tree.map.file\n    });\n    const {\n      sources: rootSources,\n      map\n    } = tree;\n    const rootNames = map.names;\n    const rootMappings = traceMapping.decodedMappings(map);\n\n    for (let i = 0; i < rootMappings.length; i++) {\n      const segments = rootMappings[i];\n      let lastSource = null;\n      let lastSourceLine = null;\n      let lastSourceColumn = null;\n\n      for (let j = 0; j < segments.length; j++) {\n        const segment = segments[j];\n        const genCol = segment[0];\n        let traced = SOURCELESS_MAPPING; // 1-length segments only move the current generated column, there's no source information\n        // to gather from it.\n\n        if (segment.length !== 1) {\n          const source = rootSources[segment[1]];\n          traced = originalPositionFor(source, segment[2], segment[3], segment.length === 5 ? rootNames[segment[4]] : ''); // If the trace is invalid, then the trace ran into a sourcemap that doesn't contain a\n          // respective segment into an original source.\n\n          if (traced == null) continue;\n        } // So we traced a segment down into its original source file. Now push a\n        // new segment pointing to this location.\n\n\n        const {\n          column,\n          line,\n          name,\n          content,\n          source\n        } = traced;\n\n        if (line === lastSourceLine && column === lastSourceColumn && source === lastSource) {\n          continue;\n        }\n\n        lastSourceLine = line;\n        lastSourceColumn = column;\n        lastSource = source; // Sigh, TypeScript can't figure out source/line/column are either all null, or all non-null...\n\n        genMapping.addSegment(gen, i, genCol, source, line, column, name);\n        if (content != null) genMapping.setSourceContent(gen, source, content);\n      }\n    }\n\n    return gen;\n  }\n  /**\n   * originalPositionFor is only called on children SourceMapTrees. It recurses down into its own\n   * child SourceMapTrees, until we find the original source map.\n   */\n\n\n  function originalPositionFor(source, line, column, name) {\n    if (!source.map) {\n      return {\n        column,\n        line,\n        name,\n        source: source.source,\n        content: source.content\n      };\n    }\n\n    const segment = traceMapping.traceSegment(source.map, line, column); // If we couldn't find a segment, then this doesn't exist in the sourcemap.\n\n    if (segment == null) return null; // 1-length segments only move the current generated column, there's no source information\n    // to gather from it.\n\n    if (segment.length === 1) return SOURCELESS_MAPPING;\n    return originalPositionFor(source.sources[segment[1]], segment[2], segment[3], segment.length === 5 ? source.map.names[segment[4]] : name);\n  }\n\n  function asArray(value) {\n    if (Array.isArray(value)) return value;\n    return [value];\n  }\n  /**\n   * Recursively builds a tree structure out of sourcemap files, with each node\n   * being either an `OriginalSource` \"leaf\" or a `SourceMapTree` composed of\n   * `OriginalSource`s and `SourceMapTree`s.\n   *\n   * Every sourcemap is composed of a collection of source files and mappings\n   * into locations of those source files. When we generate a `SourceMapTree` for\n   * the sourcemap, we attempt to load each source file's own sourcemap. If it\n   * does not have an associated sourcemap, it is considered an original,\n   * unmodified source file.\n   */\n\n\n  function buildSourceMapTree(input, loader) {\n    const maps = asArray(input).map(m => new traceMapping.TraceMap(m, ''));\n    const map = maps.pop();\n\n    for (let i = 0; i < maps.length; i++) {\n      if (maps[i].sources.length > 1) {\n        throw new Error(`Transformation map ${i} must have exactly one source file.\\n` + 'Did you specify these with the most recent transformation maps first?');\n      }\n    }\n\n    let tree = build(map, loader, '', 0);\n\n    for (let i = maps.length - 1; i >= 0; i--) {\n      tree = MapSource(maps[i], [tree]);\n    }\n\n    return tree;\n  }\n\n  function build(map, loader, importer, importerDepth) {\n    const {\n      resolvedSources,\n      sourcesContent\n    } = map;\n    const depth = importerDepth + 1;\n    const children = resolvedSources.map((sourceFile, i) => {\n      // The loading context gives the loader more information about why this file is being loaded\n      // (eg, from which importer). It also allows the loader to override the location of the loaded\n      // sourcemap/original source, or to override the content in the sourcesContent field if it's\n      // an unmodified source file.\n      const ctx = {\n        importer,\n        depth,\n        source: sourceFile || '',\n        content: undefined\n      }; // Use the provided loader callback to retrieve the file's sourcemap.\n      // TODO: We should eventually support async loading of sourcemap files.\n\n      const sourceMap = loader(ctx.source, ctx);\n      const {\n        source,\n        content\n      } = ctx; // If there is a sourcemap, then we need to recurse into it to load its source files.\n\n      if (sourceMap) return build(new traceMapping.TraceMap(sourceMap, source), loader, source, depth); // Else, it's an an unmodified source file.\n      // The contents of this unmodified source file can be overridden via the loader context,\n      // allowing it to be explicitly null or a string. If it remains undefined, we fall back to\n      // the importing sourcemap's `sourcesContent` field.\n\n      const sourceContent = content !== undefined ? content : sourcesContent ? sourcesContent[i] : null;\n      return OriginalSource(source, sourceContent);\n    });\n    return MapSource(map, children);\n  }\n  /**\n   * A SourceMap v3 compatible sourcemap, which only includes fields that were\n   * provided to it.\n   */\n\n\n  class SourceMap {\n    constructor(map, options) {\n      const out = options.decodedMappings ? genMapping.decodedMap(map) : genMapping.encodedMap(map);\n      this.version = out.version; // SourceMap spec says this should be first.\n\n      this.file = out.file;\n      this.mappings = out.mappings;\n      this.names = out.names;\n      this.sourceRoot = out.sourceRoot;\n      this.sources = out.sources;\n\n      if (!options.excludeContent) {\n        this.sourcesContent = out.sourcesContent;\n      }\n    }\n\n    toString() {\n      return JSON.stringify(this);\n    }\n\n  }\n  /**\n   * Traces through all the mappings in the root sourcemap, through the sources\n   * (and their sourcemaps), all the way back to the original source location.\n   *\n   * `loader` will be called every time we encounter a source file. If it returns\n   * a sourcemap, we will recurse into that sourcemap to continue the trace. If\n   * it returns a falsey value, that source file is treated as an original,\n   * unmodified source file.\n   *\n   * Pass `excludeContent` to exclude any self-containing source file content\n   * from the output sourcemap.\n   *\n   * Pass `decodedMappings` to receive a SourceMap with decoded (instead of\n   * VLQ encoded) mappings.\n   */\n\n\n  function remapping(input, loader, options) {\n    const opts = typeof options === 'object' ? options : {\n      excludeContent: !!options,\n      decodedMappings: false\n    };\n    const tree = buildSourceMapTree(input, loader);\n    return new SourceMap(traceMappings(tree), opts);\n  }\n\n  return remapping;\n});","map":{"version":3,"mappings":"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","names":["SOURCELESS_MAPPING","source","column","line","name","content","EMPTY_SOURCES","Source","map","sources","traceMappings","tree","gen","GenMapping","file","rootSources","rootNames","names","rootMappings","decodedMappings","i","length","segments","lastSource","lastSourceLine","lastSourceColumn","j","segment","genCol","traced","originalPositionFor","addSegment","setSourceContent","traceSegment","asArray","value","Array","isArray","buildSourceMapTree","input","loader","maps","m","TraceMap","pop","Error","build","MapSource","importer","importerDepth","resolvedSources","sourcesContent","depth","children","sourceFile","ctx","undefined","sourceMap","sourceContent","OriginalSource","SourceMap","constructor","options","out","decodedMap","encodedMap","version","mappings","sourceRoot","excludeContent","toString","JSON","stringify","opts"],"sources":["../../src/source-map-tree.ts","../../src/build-source-map-tree.ts","../../src/source-map.ts","../../src/remapping.ts"],"sourcesContent":[null,null,null,null]},"metadata":{},"sourceType":"script"}