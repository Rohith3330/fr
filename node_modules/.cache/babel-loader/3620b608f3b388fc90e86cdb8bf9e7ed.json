{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'no-confusing-non-null-assertion',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallow non-null assertion in locations that may be confusing',\n      recommended: 'strict'\n    },\n    fixable: 'code',\n    hasSuggestions: true,\n    messages: {\n      confusingEqual: 'Confusing combinations of non-null assertion and equal test like \"a! == b\", which looks very similar to not equal \"a !== b\".',\n      confusingAssign: 'Confusing combinations of non-null assertion and equal test like \"a! = b\", which looks very similar to not equal \"a != b\".',\n      notNeedInEqualTest: 'Unnecessary non-null assertion (!) in equal test.',\n      notNeedInAssign: 'Unnecessary non-null assertion (!) in assignment left hand.',\n      wrapUpLeft: 'Wrap up left hand to avoid putting non-null assertion \"!\" and \"=\" together.'\n    },\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      'BinaryExpression, AssignmentExpression'(node) {\n        function isLeftHandPrimaryExpression(node) {\n          return node.type === utils_1.AST_NODE_TYPES.TSNonNullExpression;\n        }\n\n        if (node.operator === '==' || node.operator === '===' || node.operator === '=') {\n          const isAssign = node.operator === '=';\n          const leftHandFinalToken = sourceCode.getLastToken(node.left);\n          const tokenAfterLeft = sourceCode.getTokenAfter(node.left);\n\n          if ((leftHandFinalToken === null || leftHandFinalToken === void 0 ? void 0 : leftHandFinalToken.type) === utils_1.AST_TOKEN_TYPES.Punctuator && (leftHandFinalToken === null || leftHandFinalToken === void 0 ? void 0 : leftHandFinalToken.value) === '!' && (tokenAfterLeft === null || tokenAfterLeft === void 0 ? void 0 : tokenAfterLeft.value) !== ')') {\n            if (isLeftHandPrimaryExpression(node.left)) {\n              context.report({\n                node,\n                messageId: isAssign ? 'confusingAssign' : 'confusingEqual',\n                suggest: [{\n                  messageId: isAssign ? 'notNeedInAssign' : 'notNeedInEqualTest',\n                  fix: fixer => [fixer.remove(leftHandFinalToken)]\n                }]\n              });\n            } else {\n              context.report({\n                node,\n                messageId: isAssign ? 'confusingAssign' : 'confusingEqual',\n                suggest: [{\n                  messageId: 'wrapUpLeft',\n                  fix: fixer => [fixer.insertTextBefore(node.left, '('), fixer.insertTextAfter(node.left, ')')]\n                }]\n              });\n            }\n          }\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AAEAA,kBAAeC,IAAI,CAACC,UAAL,CAAgB;EAC7BC,IAAI,EAAE,iCADuB;EAE7BC,IAAI,EAAE;IACJC,IAAI,EAAE,SADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EACT,gEAFE;MAGJC,WAAW,EAAE;IAHT,CAFF;IAOJC,OAAO,EAAE,MAPL;IAQJC,cAAc,EAAE,IARZ;IASJC,QAAQ,EAAE;MACRC,cAAc,EACZ,8HAFM;MAGRC,eAAe,EACb,4HAJM;MAKRC,kBAAkB,EAAE,mDALZ;MAMRC,eAAe,EACb,6DAPM;MAQRC,UAAU,EACR;IATM,CATN;IAoBJC,MAAM,EAAE;EApBJ,CAFuB;EAwB7BC,cAAc,EAAE,EAxBa;;EAyB7BC,MAAM,CAACC,OAAD,EAAQ;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IACA,OAAO;MACL,yCACEC,IADF,EACiE;QAE/D,SAASC,2BAAT,CACED,IADF,EACwD;UAEtD,OAAOA,IAAI,CAAClB,IAAL,KAAcoB,uBAAeC,mBAApC;QACD;;QAED,IACEH,IAAI,CAACI,QAAL,KAAkB,IAAlB,IACAJ,IAAI,CAACI,QAAL,KAAkB,KADlB,IAEAJ,IAAI,CAACI,QAAL,KAAkB,GAHpB,EAIE;UACA,MAAMC,QAAQ,GAAGL,IAAI,CAACI,QAAL,KAAkB,GAAnC;UACA,MAAME,kBAAkB,GAAGR,UAAU,CAACS,YAAX,CAAwBP,IAAI,CAACQ,IAA7B,CAA3B;UACA,MAAMC,cAAc,GAAGX,UAAU,CAACY,aAAX,CAAyBV,IAAI,CAACQ,IAA9B,CAAvB;;UACA,IACE,mBAAkB,SAAlB,sBAAkB,WAAlB,GAAkB,MAAlB,qBAAkB,CAAE1B,IAApB,MAA6BoB,wBAAgBS,UAA7C,IACA,mBAAkB,SAAlB,sBAAkB,WAAlB,GAAkB,MAAlB,qBAAkB,CAAEC,KAApB,MAA8B,GAD9B,IAEA,eAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEA,KAAhB,MAA0B,GAH5B,EAIE;YACA,IAAIX,2BAA2B,CAACD,IAAI,CAACQ,IAAN,CAA/B,EAA4C;cAC1CX,OAAO,CAACgB,MAAR,CAAe;gBACbb,IADa;gBAEbc,SAAS,EAAET,QAAQ,GAAG,iBAAH,GAAuB,gBAF7B;gBAGbU,OAAO,EAAE,CACP;kBACED,SAAS,EAAET,QAAQ,GACf,iBADe,GAEf,oBAHN;kBAIEW,GAAG,EAAGC,KAAD,IAA+B,CAClCA,KAAK,CAACC,MAAN,CAAaZ,kBAAb,CADkC;gBAJtC,CADO;cAHI,CAAf;YAcD,CAfD,MAeO;cACLT,OAAO,CAACgB,MAAR,CAAe;gBACbb,IADa;gBAEbc,SAAS,EAAET,QAAQ,GAAG,iBAAH,GAAuB,gBAF7B;gBAGbU,OAAO,EAAE,CACP;kBACED,SAAS,EAAE,YADb;kBAEEE,GAAG,EAAGC,KAAD,IAA+B,CAClCA,KAAK,CAACE,gBAAN,CAAuBnB,IAAI,CAACQ,IAA5B,EAAkC,GAAlC,CADkC,EAElCS,KAAK,CAACG,eAAN,CAAsBpB,IAAI,CAACQ,IAA3B,EAAiC,GAAjC,CAFkC;gBAFtC,CADO;cAHI,CAAf;YAaD;UACF;QACF;MACF;;IAvDI,CAAP;EAyDD;;AApF4B,CAAhB,CAAf","names":["exports","util","createRule","name","meta","type","docs","description","recommended","fixable","hasSuggestions","messages","confusingEqual","confusingAssign","notNeedInEqualTest","notNeedInAssign","wrapUpLeft","schema","defaultOptions","create","context","sourceCode","getSourceCode","node","isLeftHandPrimaryExpression","utils_1","TSNonNullExpression","operator","isAssign","leftHandFinalToken","getLastToken","left","tokenAfterLeft","getTokenAfter","Punctuator","value","report","messageId","suggest","fix","fixer","remove","insertTextBefore","insertTextAfter"],"sources":["../../src/rules/no-confusing-non-null-assertion.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}