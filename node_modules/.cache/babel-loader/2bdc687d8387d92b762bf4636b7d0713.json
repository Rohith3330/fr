{"ast":null,"code":"/**\n * @fileoverview `FileEnumerator` class.\n *\n * `FileEnumerator` class has two responsibilities:\n *\n * 1. Find target files by processing glob patterns.\n * 2. Tie each target file and appropriate configuration.\n *\n * It provides a method:\n *\n * - `iterateFiles(patterns)`\n *     Iterate files which are matched by given patterns together with the\n *     corresponded configuration. This is for `CLIEngine#executeOnFiles()`.\n *     While iterating files, it loads the configuration file of each directory\n *     before iterate files on the directory, so we can use the configuration\n *     files to determine target files.\n *\n * @example\n * const enumerator = new FileEnumerator();\n * const linter = new Linter();\n *\n * for (const { config, filePath } of enumerator.iterateFiles([\"*.js\"])) {\n *     const code = fs.readFileSync(filePath, \"utf8\");\n *     const messages = linter.verify(code, config, filePath);\n *\n *     console.log(messages);\n * }\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst getGlobParent = require(\"glob-parent\");\n\nconst isGlob = require(\"is-glob\");\n\nconst escapeRegExp = require(\"escape-string-regexp\");\n\nconst {\n  Minimatch\n} = require(\"minimatch\");\n\nconst {\n  Legacy: {\n    IgnorePattern,\n    CascadingConfigArrayFactory\n  }\n} = require(\"@eslint/eslintrc\");\n\nconst debug = require(\"debug\")(\"eslint:file-enumerator\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst minimatchOpts = {\n  dot: true,\n  matchBase: true\n};\nconst dotfilesPattern = /(?:(?:^\\.)|(?:[/\\\\]\\.))[^/\\\\.].*/u;\nconst NONE = 0;\nconst IGNORED_SILENTLY = 1;\nconst IGNORED = 2; // For VSCode intellisense\n\n/** @typedef {ReturnType<CascadingConfigArrayFactory.getConfigArrayForFile>} ConfigArray */\n\n/**\n * @typedef {Object} FileEnumeratorOptions\n * @property {CascadingConfigArrayFactory} [configArrayFactory] The factory for config arrays.\n * @property {string} [cwd] The base directory to start lookup.\n * @property {string[]} [extensions] The extensions to match files for directory patterns.\n * @property {boolean} [globInputPaths] Set to false to skip glob resolution of input file paths to lint (default: true). If false, each input file paths is assumed to be a non-glob path to an existing file.\n * @property {boolean} [ignore] The flag to check ignored files.\n * @property {string[]} [rulePaths] The value of `--rulesdir` option.\n */\n\n/**\n * @typedef {Object} FileAndConfig\n * @property {string} filePath The path to a target file.\n * @property {ConfigArray} config The config entries of that file.\n * @property {boolean} ignored If `true` then this file should be ignored and warned because it was directly specified.\n */\n\n/**\n * @typedef {Object} FileEntry\n * @property {string} filePath The path to a target file.\n * @property {ConfigArray} config The config entries of that file.\n * @property {NONE|IGNORED_SILENTLY|IGNORED} flag The flag.\n * - `NONE` means the file is a target file.\n * - `IGNORED_SILENTLY` means the file should be ignored silently.\n * - `IGNORED` means the file should be ignored and warned because it was directly specified.\n */\n\n/**\n * @typedef {Object} FileEnumeratorInternalSlots\n * @property {CascadingConfigArrayFactory} configArrayFactory The factory for config arrays.\n * @property {string} cwd The base directory to start lookup.\n * @property {RegExp|null} extensionRegExp The RegExp to test if a string ends with specific file extensions.\n * @property {boolean} globInputPaths Set to false to skip glob resolution of input file paths to lint (default: true). If false, each input file paths is assumed to be a non-glob path to an existing file.\n * @property {boolean} ignoreFlag The flag to check ignored files.\n * @property {(filePath:string, dot:boolean) => boolean} defaultIgnores The default predicate function to ignore files.\n */\n\n/** @type {WeakMap<FileEnumerator, FileEnumeratorInternalSlots>} */\n\nconst internalSlotsMap = new WeakMap();\n/**\n * Check if a string is a glob pattern or not.\n * @param {string} pattern A glob pattern.\n * @returns {boolean} `true` if the string is a glob pattern.\n */\n\nfunction isGlobPattern(pattern) {\n  return isGlob(path.sep === \"\\\\\" ? pattern.replace(/\\\\/gu, \"/\") : pattern);\n}\n/**\n * Get stats of a given path.\n * @param {string} filePath The path to target file.\n * @throws {Error} As may be thrown by `fs.statSync`.\n * @returns {fs.Stats|null} The stats.\n * @private\n */\n\n\nfunction statSafeSync(filePath) {\n  try {\n    return fs.statSync(filePath);\n  } catch (error) {\n    /* c8 ignore next */\n    if (error.code !== \"ENOENT\") {\n      throw error;\n    }\n\n    return null;\n  }\n}\n/**\n * Get filenames in a given path to a directory.\n * @param {string} directoryPath The path to target directory.\n * @throws {Error} As may be thrown by `fs.readdirSync`.\n * @returns {import(\"fs\").Dirent[]} The filenames.\n * @private\n */\n\n\nfunction readdirSafeSync(directoryPath) {\n  try {\n    return fs.readdirSync(directoryPath, {\n      withFileTypes: true\n    });\n  } catch (error) {\n    /* c8 ignore next */\n    if (error.code !== \"ENOENT\") {\n      throw error;\n    }\n\n    return [];\n  }\n}\n/**\n * Create a `RegExp` object to detect extensions.\n * @param {string[] | null} extensions The extensions to create.\n * @returns {RegExp | null} The created `RegExp` object or null.\n */\n\n\nfunction createExtensionRegExp(extensions) {\n  if (extensions) {\n    const normalizedExts = extensions.map(ext => escapeRegExp(ext.startsWith(\".\") ? ext.slice(1) : ext));\n    return new RegExp(`.\\\\.(?:${normalizedExts.join(\"|\")})$`, \"u\");\n  }\n\n  return null;\n}\n/**\n * The error type when no files match a glob.\n */\n\n\nclass NoFilesFoundError extends Error {\n  /**\n   * @param {string} pattern The glob pattern which was not found.\n   * @param {boolean} globDisabled If `true` then the pattern was a glob pattern, but glob was disabled.\n   */\n  constructor(pattern, globDisabled) {\n    super(`No files matching '${pattern}' were found${globDisabled ? \" (glob was disabled)\" : \"\"}.`);\n    this.messageTemplate = \"file-not-found\";\n    this.messageData = {\n      pattern,\n      globDisabled\n    };\n  }\n\n}\n/**\n * The error type when there are files matched by a glob, but all of them have been ignored.\n */\n\n\nclass AllFilesIgnoredError extends Error {\n  /**\n   * @param {string} pattern The glob pattern which was not found.\n   */\n  constructor(pattern) {\n    super(`All files matched by '${pattern}' are ignored.`);\n    this.messageTemplate = \"all-files-ignored\";\n    this.messageData = {\n      pattern\n    };\n  }\n\n}\n/**\n * This class provides the functionality that enumerates every file which is\n * matched by given glob patterns and that configuration.\n */\n\n\nclass FileEnumerator {\n  /**\n   * Initialize this enumerator.\n   * @param {FileEnumeratorOptions} options The options.\n   */\n  constructor() {\n    let {\n      cwd = process.cwd(),\n      configArrayFactory = new CascadingConfigArrayFactory({\n        cwd,\n        getEslintRecommendedConfig: () => require(\"../../conf/eslint-recommended.js\"),\n        getEslintAllConfig: () => require(\"../../conf/eslint-all.js\")\n      }),\n      extensions = null,\n      globInputPaths = true,\n      errorOnUnmatchedPattern = true,\n      ignore = true\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    internalSlotsMap.set(this, {\n      configArrayFactory,\n      cwd,\n      defaultIgnores: IgnorePattern.createDefaultIgnore(cwd),\n      extensionRegExp: createExtensionRegExp(extensions),\n      globInputPaths,\n      errorOnUnmatchedPattern,\n      ignoreFlag: ignore\n    });\n  }\n  /**\n   * Check if a given file is target or not.\n   * @param {string} filePath The path to a candidate file.\n   * @param {ConfigArray} [providedConfig] Optional. The configuration for the file.\n   * @returns {boolean} `true` if the file is a target.\n   */\n\n\n  isTargetPath(filePath, providedConfig) {\n    const {\n      configArrayFactory,\n      extensionRegExp\n    } = internalSlotsMap.get(this); // If `--ext` option is present, use it.\n\n    if (extensionRegExp) {\n      return extensionRegExp.test(filePath);\n    } // `.js` file is target by default.\n\n\n    if (filePath.endsWith(\".js\")) {\n      return true;\n    } // use `overrides[].files` to check additional targets.\n\n\n    const config = providedConfig || configArrayFactory.getConfigArrayForFile(filePath, {\n      ignoreNotFoundError: true\n    });\n    return config.isAdditionalTargetPath(filePath);\n  }\n  /**\n   * Iterate files which are matched by given glob patterns.\n   * @param {string|string[]} patternOrPatterns The glob patterns to iterate files.\n   * @throws {NoFilesFoundError|AllFilesIgnoredError} On an unmatched pattern.\n   * @returns {IterableIterator<FileAndConfig>} The found files.\n   */\n\n\n  *iterateFiles(patternOrPatterns) {\n    const {\n      globInputPaths,\n      errorOnUnmatchedPattern\n    } = internalSlotsMap.get(this);\n    const patterns = Array.isArray(patternOrPatterns) ? patternOrPatterns : [patternOrPatterns];\n    debug(\"Start to iterate files: %o\", patterns); // The set of paths to remove duplicate.\n\n    const set = new Set();\n\n    for (const pattern of patterns) {\n      let foundRegardlessOfIgnored = false;\n      let found = false; // Skip empty string.\n\n      if (!pattern) {\n        continue;\n      } // Iterate files of this pattern.\n\n\n      for (const {\n        config,\n        filePath,\n        flag\n      } of this._iterateFiles(pattern)) {\n        foundRegardlessOfIgnored = true;\n\n        if (flag === IGNORED_SILENTLY) {\n          continue;\n        }\n\n        found = true; // Remove duplicate paths while yielding paths.\n\n        if (!set.has(filePath)) {\n          set.add(filePath);\n          yield {\n            config,\n            filePath,\n            ignored: flag === IGNORED\n          };\n        }\n      } // Raise an error if any files were not found.\n\n\n      if (errorOnUnmatchedPattern) {\n        if (!foundRegardlessOfIgnored) {\n          throw new NoFilesFoundError(pattern, !globInputPaths && isGlob(pattern));\n        }\n\n        if (!found) {\n          throw new AllFilesIgnoredError(pattern);\n        }\n      }\n    }\n\n    debug(`Complete iterating files: ${JSON.stringify(patterns)}`);\n  }\n  /**\n   * Iterate files which are matched by a given glob pattern.\n   * @param {string} pattern The glob pattern to iterate files.\n   * @returns {IterableIterator<FileEntry>} The found files.\n   */\n\n\n  _iterateFiles(pattern) {\n    const {\n      cwd,\n      globInputPaths\n    } = internalSlotsMap.get(this);\n    const absolutePath = path.resolve(cwd, pattern);\n    const isDot = dotfilesPattern.test(pattern);\n    const stat = statSafeSync(absolutePath);\n\n    if (stat && stat.isDirectory()) {\n      return this._iterateFilesWithDirectory(absolutePath, isDot);\n    }\n\n    if (stat && stat.isFile()) {\n      return this._iterateFilesWithFile(absolutePath);\n    }\n\n    if (globInputPaths && isGlobPattern(pattern)) {\n      return this._iterateFilesWithGlob(absolutePath, isDot);\n    }\n\n    return [];\n  }\n  /**\n   * Iterate a file which is matched by a given path.\n   * @param {string} filePath The path to the target file.\n   * @returns {IterableIterator<FileEntry>} The found files.\n   * @private\n   */\n\n\n  _iterateFilesWithFile(filePath) {\n    debug(`File: ${filePath}`);\n    const {\n      configArrayFactory\n    } = internalSlotsMap.get(this);\n    const config = configArrayFactory.getConfigArrayForFile(filePath);\n\n    const ignored = this._isIgnoredFile(filePath, {\n      config,\n      direct: true\n    });\n\n    const flag = ignored ? IGNORED : NONE;\n    return [{\n      config,\n      filePath,\n      flag\n    }];\n  }\n  /**\n   * Iterate files in a given path.\n   * @param {string} directoryPath The path to the target directory.\n   * @param {boolean} dotfiles If `true` then it doesn't skip dot files by default.\n   * @returns {IterableIterator<FileEntry>} The found files.\n   * @private\n   */\n\n\n  _iterateFilesWithDirectory(directoryPath, dotfiles) {\n    debug(`Directory: ${directoryPath}`);\n    return this._iterateFilesRecursive(directoryPath, {\n      dotfiles,\n      recursive: true,\n      selector: null\n    });\n  }\n  /**\n   * Iterate files which are matched by a given glob pattern.\n   * @param {string} pattern The glob pattern to iterate files.\n   * @param {boolean} dotfiles If `true` then it doesn't skip dot files by default.\n   * @returns {IterableIterator<FileEntry>} The found files.\n   * @private\n   */\n\n\n  _iterateFilesWithGlob(pattern, dotfiles) {\n    debug(`Glob: ${pattern}`);\n    const directoryPath = path.resolve(getGlobParent(pattern));\n    const globPart = pattern.slice(directoryPath.length + 1);\n    /*\n     * recursive if there are `**` or path separators in the glob part.\n     * Otherwise, patterns such as `src/*.js`, it doesn't need recursive.\n     */\n\n    const recursive = /\\*\\*|\\/|\\\\/u.test(globPart);\n    const selector = new Minimatch(pattern, minimatchOpts);\n    debug(`recursive? ${recursive}`);\n    return this._iterateFilesRecursive(directoryPath, {\n      dotfiles,\n      recursive,\n      selector\n    });\n  }\n  /**\n   * Iterate files in a given path.\n   * @param {string} directoryPath The path to the target directory.\n   * @param {Object} options The options to iterate files.\n   * @param {boolean} [options.dotfiles] If `true` then it doesn't skip dot files by default.\n   * @param {boolean} [options.recursive] If `true` then it dives into sub directories.\n   * @param {InstanceType<Minimatch>} [options.selector] The matcher to choose files.\n   * @returns {IterableIterator<FileEntry>} The found files.\n   * @private\n   */\n\n\n  *_iterateFilesRecursive(directoryPath, options) {\n    debug(`Enter the directory: ${directoryPath}`);\n    const {\n      configArrayFactory\n    } = internalSlotsMap.get(this);\n    /** @type {ConfigArray|null} */\n\n    let config = null; // Enumerate the files of this directory.\n\n    for (const entry of readdirSafeSync(directoryPath)) {\n      const filePath = path.join(directoryPath, entry.name);\n      const fileInfo = entry.isSymbolicLink() ? statSafeSync(filePath) : entry;\n\n      if (!fileInfo) {\n        continue;\n      } // Check if the file is matched.\n\n\n      if (fileInfo.isFile()) {\n        if (!config) {\n          config = configArrayFactory.getConfigArrayForFile(filePath,\n          /*\n           * We must ignore `ConfigurationNotFoundError` at this\n           * point because we don't know if target files exist in\n           * this directory.\n           */\n          {\n            ignoreNotFoundError: true\n          });\n        }\n\n        const matched = options.selector // Started with a glob pattern; choose by the pattern.\n        ? options.selector.match(filePath) // Started with a directory path; choose by file extensions.\n        : this.isTargetPath(filePath, config);\n\n        if (matched) {\n          const ignored = this._isIgnoredFile(filePath, { ...options,\n            config\n          });\n\n          const flag = ignored ? IGNORED_SILENTLY : NONE;\n          debug(`Yield: ${entry.name}${ignored ? \" but ignored\" : \"\"}`);\n          yield {\n            config: configArrayFactory.getConfigArrayForFile(filePath),\n            filePath,\n            flag\n          };\n        } else {\n          debug(`Didn't match: ${entry.name}`);\n        } // Dive into the sub directory.\n\n      } else if (options.recursive && fileInfo.isDirectory()) {\n        if (!config) {\n          config = configArrayFactory.getConfigArrayForFile(filePath, {\n            ignoreNotFoundError: true\n          });\n        }\n\n        const ignored = this._isIgnoredFile(filePath + path.sep, { ...options,\n          config\n        });\n\n        if (!ignored) {\n          yield* this._iterateFilesRecursive(filePath, options);\n        }\n      }\n    }\n\n    debug(`Leave the directory: ${directoryPath}`);\n  }\n  /**\n   * Check if a given file should be ignored.\n   * @param {string} filePath The path to a file to check.\n   * @param {Object} options Options\n   * @param {ConfigArray} [options.config] The config for this file.\n   * @param {boolean} [options.dotfiles] If `true` then this is not ignore dot files by default.\n   * @param {boolean} [options.direct] If `true` then this is a direct specified file.\n   * @returns {boolean} `true` if the file should be ignored.\n   * @private\n   */\n\n\n  _isIgnoredFile(filePath, _ref) {\n    let {\n      config: providedConfig,\n      dotfiles = false,\n      direct = false\n    } = _ref;\n    const {\n      configArrayFactory,\n      defaultIgnores,\n      ignoreFlag\n    } = internalSlotsMap.get(this);\n\n    if (ignoreFlag) {\n      const config = providedConfig || configArrayFactory.getConfigArrayForFile(filePath, {\n        ignoreNotFoundError: true\n      });\n      const ignores = config.extractConfig(filePath).ignores || defaultIgnores;\n      return ignores(filePath, dotfiles);\n    }\n\n    return !direct && defaultIgnores(filePath, dotfiles);\n  }\n\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  FileEnumerator\n};","map":{"version":3,"names":["fs","require","path","getGlobParent","isGlob","escapeRegExp","Minimatch","Legacy","IgnorePattern","CascadingConfigArrayFactory","debug","minimatchOpts","dot","matchBase","dotfilesPattern","NONE","IGNORED_SILENTLY","IGNORED","internalSlotsMap","WeakMap","isGlobPattern","pattern","sep","replace","statSafeSync","filePath","statSync","error","code","readdirSafeSync","directoryPath","readdirSync","withFileTypes","createExtensionRegExp","extensions","normalizedExts","map","ext","startsWith","slice","RegExp","join","NoFilesFoundError","Error","constructor","globDisabled","messageTemplate","messageData","AllFilesIgnoredError","FileEnumerator","cwd","process","configArrayFactory","getEslintRecommendedConfig","getEslintAllConfig","globInputPaths","errorOnUnmatchedPattern","ignore","set","defaultIgnores","createDefaultIgnore","extensionRegExp","ignoreFlag","isTargetPath","providedConfig","get","test","endsWith","config","getConfigArrayForFile","ignoreNotFoundError","isAdditionalTargetPath","iterateFiles","patternOrPatterns","patterns","Array","isArray","Set","foundRegardlessOfIgnored","found","flag","_iterateFiles","has","add","ignored","JSON","stringify","absolutePath","resolve","isDot","stat","isDirectory","_iterateFilesWithDirectory","isFile","_iterateFilesWithFile","_iterateFilesWithGlob","_isIgnoredFile","direct","dotfiles","_iterateFilesRecursive","recursive","selector","globPart","length","options","entry","name","fileInfo","isSymbolicLink","matched","match","ignores","extractConfig","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/cli-engine/file-enumerator.js"],"sourcesContent":["/**\n * @fileoverview `FileEnumerator` class.\n *\n * `FileEnumerator` class has two responsibilities:\n *\n * 1. Find target files by processing glob patterns.\n * 2. Tie each target file and appropriate configuration.\n *\n * It provides a method:\n *\n * - `iterateFiles(patterns)`\n *     Iterate files which are matched by given patterns together with the\n *     corresponded configuration. This is for `CLIEngine#executeOnFiles()`.\n *     While iterating files, it loads the configuration file of each directory\n *     before iterate files on the directory, so we can use the configuration\n *     files to determine target files.\n *\n * @example\n * const enumerator = new FileEnumerator();\n * const linter = new Linter();\n *\n * for (const { config, filePath } of enumerator.iterateFiles([\"*.js\"])) {\n *     const code = fs.readFileSync(filePath, \"utf8\");\n *     const messages = linter.verify(code, config, filePath);\n *\n *     console.log(messages);\n * }\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst getGlobParent = require(\"glob-parent\");\nconst isGlob = require(\"is-glob\");\nconst escapeRegExp = require(\"escape-string-regexp\");\nconst { Minimatch } = require(\"minimatch\");\n\nconst {\n    Legacy: {\n        IgnorePattern,\n        CascadingConfigArrayFactory\n    }\n} = require(\"@eslint/eslintrc\");\nconst debug = require(\"debug\")(\"eslint:file-enumerator\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst minimatchOpts = { dot: true, matchBase: true };\nconst dotfilesPattern = /(?:(?:^\\.)|(?:[/\\\\]\\.))[^/\\\\.].*/u;\nconst NONE = 0;\nconst IGNORED_SILENTLY = 1;\nconst IGNORED = 2;\n\n// For VSCode intellisense\n/** @typedef {ReturnType<CascadingConfigArrayFactory.getConfigArrayForFile>} ConfigArray */\n\n/**\n * @typedef {Object} FileEnumeratorOptions\n * @property {CascadingConfigArrayFactory} [configArrayFactory] The factory for config arrays.\n * @property {string} [cwd] The base directory to start lookup.\n * @property {string[]} [extensions] The extensions to match files for directory patterns.\n * @property {boolean} [globInputPaths] Set to false to skip glob resolution of input file paths to lint (default: true). If false, each input file paths is assumed to be a non-glob path to an existing file.\n * @property {boolean} [ignore] The flag to check ignored files.\n * @property {string[]} [rulePaths] The value of `--rulesdir` option.\n */\n\n/**\n * @typedef {Object} FileAndConfig\n * @property {string} filePath The path to a target file.\n * @property {ConfigArray} config The config entries of that file.\n * @property {boolean} ignored If `true` then this file should be ignored and warned because it was directly specified.\n */\n\n/**\n * @typedef {Object} FileEntry\n * @property {string} filePath The path to a target file.\n * @property {ConfigArray} config The config entries of that file.\n * @property {NONE|IGNORED_SILENTLY|IGNORED} flag The flag.\n * - `NONE` means the file is a target file.\n * - `IGNORED_SILENTLY` means the file should be ignored silently.\n * - `IGNORED` means the file should be ignored and warned because it was directly specified.\n */\n\n/**\n * @typedef {Object} FileEnumeratorInternalSlots\n * @property {CascadingConfigArrayFactory} configArrayFactory The factory for config arrays.\n * @property {string} cwd The base directory to start lookup.\n * @property {RegExp|null} extensionRegExp The RegExp to test if a string ends with specific file extensions.\n * @property {boolean} globInputPaths Set to false to skip glob resolution of input file paths to lint (default: true). If false, each input file paths is assumed to be a non-glob path to an existing file.\n * @property {boolean} ignoreFlag The flag to check ignored files.\n * @property {(filePath:string, dot:boolean) => boolean} defaultIgnores The default predicate function to ignore files.\n */\n\n/** @type {WeakMap<FileEnumerator, FileEnumeratorInternalSlots>} */\nconst internalSlotsMap = new WeakMap();\n\n/**\n * Check if a string is a glob pattern or not.\n * @param {string} pattern A glob pattern.\n * @returns {boolean} `true` if the string is a glob pattern.\n */\nfunction isGlobPattern(pattern) {\n    return isGlob(path.sep === \"\\\\\" ? pattern.replace(/\\\\/gu, \"/\") : pattern);\n}\n\n/**\n * Get stats of a given path.\n * @param {string} filePath The path to target file.\n * @throws {Error} As may be thrown by `fs.statSync`.\n * @returns {fs.Stats|null} The stats.\n * @private\n */\nfunction statSafeSync(filePath) {\n    try {\n        return fs.statSync(filePath);\n    } catch (error) {\n\n        /* c8 ignore next */\n        if (error.code !== \"ENOENT\") {\n            throw error;\n        }\n        return null;\n    }\n}\n\n/**\n * Get filenames in a given path to a directory.\n * @param {string} directoryPath The path to target directory.\n * @throws {Error} As may be thrown by `fs.readdirSync`.\n * @returns {import(\"fs\").Dirent[]} The filenames.\n * @private\n */\nfunction readdirSafeSync(directoryPath) {\n    try {\n        return fs.readdirSync(directoryPath, { withFileTypes: true });\n    } catch (error) {\n\n        /* c8 ignore next */\n        if (error.code !== \"ENOENT\") {\n            throw error;\n        }\n        return [];\n    }\n}\n\n/**\n * Create a `RegExp` object to detect extensions.\n * @param {string[] | null} extensions The extensions to create.\n * @returns {RegExp | null} The created `RegExp` object or null.\n */\nfunction createExtensionRegExp(extensions) {\n    if (extensions) {\n        const normalizedExts = extensions.map(ext => escapeRegExp(\n            ext.startsWith(\".\")\n                ? ext.slice(1)\n                : ext\n        ));\n\n        return new RegExp(\n            `.\\\\.(?:${normalizedExts.join(\"|\")})$`,\n            \"u\"\n        );\n    }\n    return null;\n}\n\n/**\n * The error type when no files match a glob.\n */\nclass NoFilesFoundError extends Error {\n\n    /**\n     * @param {string} pattern The glob pattern which was not found.\n     * @param {boolean} globDisabled If `true` then the pattern was a glob pattern, but glob was disabled.\n     */\n    constructor(pattern, globDisabled) {\n        super(`No files matching '${pattern}' were found${globDisabled ? \" (glob was disabled)\" : \"\"}.`);\n        this.messageTemplate = \"file-not-found\";\n        this.messageData = { pattern, globDisabled };\n    }\n}\n\n/**\n * The error type when there are files matched by a glob, but all of them have been ignored.\n */\nclass AllFilesIgnoredError extends Error {\n\n    /**\n     * @param {string} pattern The glob pattern which was not found.\n     */\n    constructor(pattern) {\n        super(`All files matched by '${pattern}' are ignored.`);\n        this.messageTemplate = \"all-files-ignored\";\n        this.messageData = { pattern };\n    }\n}\n\n/**\n * This class provides the functionality that enumerates every file which is\n * matched by given glob patterns and that configuration.\n */\nclass FileEnumerator {\n\n    /**\n     * Initialize this enumerator.\n     * @param {FileEnumeratorOptions} options The options.\n     */\n    constructor({\n        cwd = process.cwd(),\n        configArrayFactory = new CascadingConfigArrayFactory({\n            cwd,\n            getEslintRecommendedConfig: () => require(\"../../conf/eslint-recommended.js\"),\n            getEslintAllConfig: () => require(\"../../conf/eslint-all.js\")\n        }),\n        extensions = null,\n        globInputPaths = true,\n        errorOnUnmatchedPattern = true,\n        ignore = true\n    } = {}) {\n        internalSlotsMap.set(this, {\n            configArrayFactory,\n            cwd,\n            defaultIgnores: IgnorePattern.createDefaultIgnore(cwd),\n            extensionRegExp: createExtensionRegExp(extensions),\n            globInputPaths,\n            errorOnUnmatchedPattern,\n            ignoreFlag: ignore\n        });\n    }\n\n    /**\n     * Check if a given file is target or not.\n     * @param {string} filePath The path to a candidate file.\n     * @param {ConfigArray} [providedConfig] Optional. The configuration for the file.\n     * @returns {boolean} `true` if the file is a target.\n     */\n    isTargetPath(filePath, providedConfig) {\n        const {\n            configArrayFactory,\n            extensionRegExp\n        } = internalSlotsMap.get(this);\n\n        // If `--ext` option is present, use it.\n        if (extensionRegExp) {\n            return extensionRegExp.test(filePath);\n        }\n\n        // `.js` file is target by default.\n        if (filePath.endsWith(\".js\")) {\n            return true;\n        }\n\n        // use `overrides[].files` to check additional targets.\n        const config =\n            providedConfig ||\n            configArrayFactory.getConfigArrayForFile(\n                filePath,\n                { ignoreNotFoundError: true }\n            );\n\n        return config.isAdditionalTargetPath(filePath);\n    }\n\n    /**\n     * Iterate files which are matched by given glob patterns.\n     * @param {string|string[]} patternOrPatterns The glob patterns to iterate files.\n     * @throws {NoFilesFoundError|AllFilesIgnoredError} On an unmatched pattern.\n     * @returns {IterableIterator<FileAndConfig>} The found files.\n     */\n    *iterateFiles(patternOrPatterns) {\n        const { globInputPaths, errorOnUnmatchedPattern } = internalSlotsMap.get(this);\n        const patterns = Array.isArray(patternOrPatterns)\n            ? patternOrPatterns\n            : [patternOrPatterns];\n\n        debug(\"Start to iterate files: %o\", patterns);\n\n        // The set of paths to remove duplicate.\n        const set = new Set();\n\n        for (const pattern of patterns) {\n            let foundRegardlessOfIgnored = false;\n            let found = false;\n\n            // Skip empty string.\n            if (!pattern) {\n                continue;\n            }\n\n            // Iterate files of this pattern.\n            for (const { config, filePath, flag } of this._iterateFiles(pattern)) {\n                foundRegardlessOfIgnored = true;\n                if (flag === IGNORED_SILENTLY) {\n                    continue;\n                }\n                found = true;\n\n                // Remove duplicate paths while yielding paths.\n                if (!set.has(filePath)) {\n                    set.add(filePath);\n                    yield {\n                        config,\n                        filePath,\n                        ignored: flag === IGNORED\n                    };\n                }\n            }\n\n            // Raise an error if any files were not found.\n            if (errorOnUnmatchedPattern) {\n                if (!foundRegardlessOfIgnored) {\n                    throw new NoFilesFoundError(\n                        pattern,\n                        !globInputPaths && isGlob(pattern)\n                    );\n                }\n                if (!found) {\n                    throw new AllFilesIgnoredError(pattern);\n                }\n            }\n        }\n\n        debug(`Complete iterating files: ${JSON.stringify(patterns)}`);\n    }\n\n    /**\n     * Iterate files which are matched by a given glob pattern.\n     * @param {string} pattern The glob pattern to iterate files.\n     * @returns {IterableIterator<FileEntry>} The found files.\n     */\n    _iterateFiles(pattern) {\n        const { cwd, globInputPaths } = internalSlotsMap.get(this);\n        const absolutePath = path.resolve(cwd, pattern);\n        const isDot = dotfilesPattern.test(pattern);\n        const stat = statSafeSync(absolutePath);\n\n        if (stat && stat.isDirectory()) {\n            return this._iterateFilesWithDirectory(absolutePath, isDot);\n        }\n        if (stat && stat.isFile()) {\n            return this._iterateFilesWithFile(absolutePath);\n        }\n        if (globInputPaths && isGlobPattern(pattern)) {\n            return this._iterateFilesWithGlob(absolutePath, isDot);\n        }\n\n        return [];\n    }\n\n    /**\n     * Iterate a file which is matched by a given path.\n     * @param {string} filePath The path to the target file.\n     * @returns {IterableIterator<FileEntry>} The found files.\n     * @private\n     */\n    _iterateFilesWithFile(filePath) {\n        debug(`File: ${filePath}`);\n\n        const { configArrayFactory } = internalSlotsMap.get(this);\n        const config = configArrayFactory.getConfigArrayForFile(filePath);\n        const ignored = this._isIgnoredFile(filePath, { config, direct: true });\n        const flag = ignored ? IGNORED : NONE;\n\n        return [{ config, filePath, flag }];\n    }\n\n    /**\n     * Iterate files in a given path.\n     * @param {string} directoryPath The path to the target directory.\n     * @param {boolean} dotfiles If `true` then it doesn't skip dot files by default.\n     * @returns {IterableIterator<FileEntry>} The found files.\n     * @private\n     */\n    _iterateFilesWithDirectory(directoryPath, dotfiles) {\n        debug(`Directory: ${directoryPath}`);\n\n        return this._iterateFilesRecursive(\n            directoryPath,\n            { dotfiles, recursive: true, selector: null }\n        );\n    }\n\n    /**\n     * Iterate files which are matched by a given glob pattern.\n     * @param {string} pattern The glob pattern to iterate files.\n     * @param {boolean} dotfiles If `true` then it doesn't skip dot files by default.\n     * @returns {IterableIterator<FileEntry>} The found files.\n     * @private\n     */\n    _iterateFilesWithGlob(pattern, dotfiles) {\n        debug(`Glob: ${pattern}`);\n\n        const directoryPath = path.resolve(getGlobParent(pattern));\n        const globPart = pattern.slice(directoryPath.length + 1);\n\n        /*\n         * recursive if there are `**` or path separators in the glob part.\n         * Otherwise, patterns such as `src/*.js`, it doesn't need recursive.\n         */\n        const recursive = /\\*\\*|\\/|\\\\/u.test(globPart);\n        const selector = new Minimatch(pattern, minimatchOpts);\n\n        debug(`recursive? ${recursive}`);\n\n        return this._iterateFilesRecursive(\n            directoryPath,\n            { dotfiles, recursive, selector }\n        );\n    }\n\n    /**\n     * Iterate files in a given path.\n     * @param {string} directoryPath The path to the target directory.\n     * @param {Object} options The options to iterate files.\n     * @param {boolean} [options.dotfiles] If `true` then it doesn't skip dot files by default.\n     * @param {boolean} [options.recursive] If `true` then it dives into sub directories.\n     * @param {InstanceType<Minimatch>} [options.selector] The matcher to choose files.\n     * @returns {IterableIterator<FileEntry>} The found files.\n     * @private\n     */\n    *_iterateFilesRecursive(directoryPath, options) {\n        debug(`Enter the directory: ${directoryPath}`);\n        const { configArrayFactory } = internalSlotsMap.get(this);\n\n        /** @type {ConfigArray|null} */\n        let config = null;\n\n        // Enumerate the files of this directory.\n        for (const entry of readdirSafeSync(directoryPath)) {\n            const filePath = path.join(directoryPath, entry.name);\n            const fileInfo = entry.isSymbolicLink() ? statSafeSync(filePath) : entry;\n\n            if (!fileInfo) {\n                continue;\n            }\n\n            // Check if the file is matched.\n            if (fileInfo.isFile()) {\n                if (!config) {\n                    config = configArrayFactory.getConfigArrayForFile(\n                        filePath,\n\n                        /*\n                         * We must ignore `ConfigurationNotFoundError` at this\n                         * point because we don't know if target files exist in\n                         * this directory.\n                         */\n                        { ignoreNotFoundError: true }\n                    );\n                }\n                const matched = options.selector\n\n                    // Started with a glob pattern; choose by the pattern.\n                    ? options.selector.match(filePath)\n\n                    // Started with a directory path; choose by file extensions.\n                    : this.isTargetPath(filePath, config);\n\n                if (matched) {\n                    const ignored = this._isIgnoredFile(filePath, { ...options, config });\n                    const flag = ignored ? IGNORED_SILENTLY : NONE;\n\n                    debug(`Yield: ${entry.name}${ignored ? \" but ignored\" : \"\"}`);\n                    yield {\n                        config: configArrayFactory.getConfigArrayForFile(filePath),\n                        filePath,\n                        flag\n                    };\n                } else {\n                    debug(`Didn't match: ${entry.name}`);\n                }\n\n            // Dive into the sub directory.\n            } else if (options.recursive && fileInfo.isDirectory()) {\n                if (!config) {\n                    config = configArrayFactory.getConfigArrayForFile(\n                        filePath,\n                        { ignoreNotFoundError: true }\n                    );\n                }\n                const ignored = this._isIgnoredFile(\n                    filePath + path.sep,\n                    { ...options, config }\n                );\n\n                if (!ignored) {\n                    yield* this._iterateFilesRecursive(filePath, options);\n                }\n            }\n        }\n\n        debug(`Leave the directory: ${directoryPath}`);\n    }\n\n    /**\n     * Check if a given file should be ignored.\n     * @param {string} filePath The path to a file to check.\n     * @param {Object} options Options\n     * @param {ConfigArray} [options.config] The config for this file.\n     * @param {boolean} [options.dotfiles] If `true` then this is not ignore dot files by default.\n     * @param {boolean} [options.direct] If `true` then this is a direct specified file.\n     * @returns {boolean} `true` if the file should be ignored.\n     * @private\n     */\n    _isIgnoredFile(filePath, {\n        config: providedConfig,\n        dotfiles = false,\n        direct = false\n    }) {\n        const {\n            configArrayFactory,\n            defaultIgnores,\n            ignoreFlag\n        } = internalSlotsMap.get(this);\n\n        if (ignoreFlag) {\n            const config =\n                providedConfig ||\n                configArrayFactory.getConfigArrayForFile(\n                    filePath,\n                    { ignoreNotFoundError: true }\n                );\n            const ignores =\n                config.extractConfig(filePath).ignores || defaultIgnores;\n\n            return ignores(filePath, dotfiles);\n        }\n\n        return !direct && defaultIgnores(filePath, dotfiles);\n    }\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = { FileEnumerator };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}