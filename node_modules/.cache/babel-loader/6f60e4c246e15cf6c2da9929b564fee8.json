{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _path = require(\"path\");\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst reportOnViolation = (context, node, _ref) => {\n  let {\n    maxSize: lineLimit = 50,\n    allowedSnapshots = {}\n  } = _ref;\n  const startLine = node.loc.start.line;\n  const endLine = node.loc.end.line;\n  const lineCount = endLine - startLine;\n  const allPathsAreAbsolute = Object.keys(allowedSnapshots).every(_path.isAbsolute);\n\n  if (!allPathsAreAbsolute) {\n    throw new Error('All paths for allowedSnapshots must be absolute. You can use JS config and `path.resolve`');\n  }\n\n  let isAllowed = false;\n\n  if (node.type === _experimentalUtils.AST_NODE_TYPES.ExpressionStatement && 'left' in node.expression && (0, _utils.isExpectMember)(node.expression.left)) {\n    const fileName = context.getFilename();\n    const allowedSnapshotsInFile = allowedSnapshots[fileName];\n\n    if (allowedSnapshotsInFile) {\n      const snapshotName = (0, _utils.getAccessorValue)(node.expression.left.property);\n      isAllowed = allowedSnapshotsInFile.some(name => {\n        if (name instanceof RegExp) {\n          return name.test(snapshotName);\n        }\n\n        return snapshotName === name;\n      });\n    }\n  }\n\n  if (!isAllowed && lineCount > lineLimit) {\n    context.report({\n      messageId: lineLimit === 0 ? 'noSnapshot' : 'tooLongSnapshots',\n      data: {\n        lineLimit,\n        lineCount\n      },\n      node\n    });\n  }\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'disallow large snapshots',\n      recommended: false\n    },\n    messages: {\n      noSnapshot: '`{{ lineCount }}`s should begin with lowercase',\n      tooLongSnapshots: 'Expected Jest snapshot to be smaller than {{ lineLimit }} lines but was {{ lineCount }} lines long'\n    },\n    type: 'suggestion',\n    schema: [{\n      type: 'object',\n      properties: {\n        maxSize: {\n          type: 'number'\n        },\n        inlineMaxSize: {\n          type: 'number'\n        },\n        allowedSnapshots: {\n          type: 'object',\n          additionalProperties: {\n            type: 'array'\n          }\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{}],\n\n  create(context, _ref2) {\n    let [options] = _ref2;\n\n    if (context.getFilename().endsWith('.snap')) {\n      return {\n        ExpressionStatement(node) {\n          reportOnViolation(context, node, options);\n        }\n\n      };\n    }\n\n    return {\n      CallExpression(node) {\n        var _matcher$arguments;\n\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          matcher\n        } = (0, _utils.parseExpectCall)(node);\n\n        if ((matcher === null || matcher === void 0 ? void 0 : matcher.node.parent.type) !== _experimentalUtils.AST_NODE_TYPES.CallExpression) {\n          return;\n        }\n\n        if (['toMatchInlineSnapshot', 'toThrowErrorMatchingInlineSnapshot'].includes(matcher.name) && (_matcher$arguments = matcher.arguments) !== null && _matcher$arguments !== void 0 && _matcher$arguments.length) {\n          var _options$inlineMaxSiz;\n\n          reportOnViolation(context, matcher.arguments[0], { ...options,\n            maxSize: (_options$inlineMaxSiz = options.inlineMaxSize) !== null && _options$inlineMaxSiz !== void 0 ? _options$inlineMaxSiz : options.maxSize\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_path","require","_experimentalUtils","_utils","reportOnViolation","context","node","maxSize","lineLimit","allowedSnapshots","startLine","loc","start","line","endLine","end","lineCount","allPathsAreAbsolute","keys","every","isAbsolute","Error","isAllowed","type","AST_NODE_TYPES","ExpressionStatement","expression","isExpectMember","left","fileName","getFilename","allowedSnapshotsInFile","snapshotName","getAccessorValue","property","some","name","RegExp","test","report","messageId","data","_default","createRule","__filename","meta","docs","category","description","recommended","messages","noSnapshot","tooLongSnapshots","schema","properties","inlineMaxSize","additionalProperties","defaultOptions","create","options","endsWith","CallExpression","_matcher$arguments","isExpectCall","matcher","parseExpectCall","parent","includes","arguments","length","_options$inlineMaxSiz"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-large-snapshots.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _path = require(\"path\");\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst reportOnViolation = (context, node, {\n  maxSize: lineLimit = 50,\n  allowedSnapshots = {}\n}) => {\n  const startLine = node.loc.start.line;\n  const endLine = node.loc.end.line;\n  const lineCount = endLine - startLine;\n  const allPathsAreAbsolute = Object.keys(allowedSnapshots).every(_path.isAbsolute);\n\n  if (!allPathsAreAbsolute) {\n    throw new Error('All paths for allowedSnapshots must be absolute. You can use JS config and `path.resolve`');\n  }\n\n  let isAllowed = false;\n\n  if (node.type === _experimentalUtils.AST_NODE_TYPES.ExpressionStatement && 'left' in node.expression && (0, _utils.isExpectMember)(node.expression.left)) {\n    const fileName = context.getFilename();\n    const allowedSnapshotsInFile = allowedSnapshots[fileName];\n\n    if (allowedSnapshotsInFile) {\n      const snapshotName = (0, _utils.getAccessorValue)(node.expression.left.property);\n      isAllowed = allowedSnapshotsInFile.some(name => {\n        if (name instanceof RegExp) {\n          return name.test(snapshotName);\n        }\n\n        return snapshotName === name;\n      });\n    }\n  }\n\n  if (!isAllowed && lineCount > lineLimit) {\n    context.report({\n      messageId: lineLimit === 0 ? 'noSnapshot' : 'tooLongSnapshots',\n      data: {\n        lineLimit,\n        lineCount\n      },\n      node\n    });\n  }\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'disallow large snapshots',\n      recommended: false\n    },\n    messages: {\n      noSnapshot: '`{{ lineCount }}`s should begin with lowercase',\n      tooLongSnapshots: 'Expected Jest snapshot to be smaller than {{ lineLimit }} lines but was {{ lineCount }} lines long'\n    },\n    type: 'suggestion',\n    schema: [{\n      type: 'object',\n      properties: {\n        maxSize: {\n          type: 'number'\n        },\n        inlineMaxSize: {\n          type: 'number'\n        },\n        allowedSnapshots: {\n          type: 'object',\n          additionalProperties: {\n            type: 'array'\n          }\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{}],\n\n  create(context, [options]) {\n    if (context.getFilename().endsWith('.snap')) {\n      return {\n        ExpressionStatement(node) {\n          reportOnViolation(context, node, options);\n        }\n\n      };\n    }\n\n    return {\n      CallExpression(node) {\n        var _matcher$arguments;\n\n        if (!(0, _utils.isExpectCall)(node)) {\n          return;\n        }\n\n        const {\n          matcher\n        } = (0, _utils.parseExpectCall)(node);\n\n        if ((matcher === null || matcher === void 0 ? void 0 : matcher.node.parent.type) !== _experimentalUtils.AST_NODE_TYPES.CallExpression) {\n          return;\n        }\n\n        if (['toMatchInlineSnapshot', 'toThrowErrorMatchingInlineSnapshot'].includes(matcher.name) && (_matcher$arguments = matcher.arguments) !== null && _matcher$arguments !== void 0 && _matcher$arguments.length) {\n          var _options$inlineMaxSiz;\n\n          reportOnViolation(context, matcher.arguments[0], { ...options,\n            maxSize: (_options$inlineMaxSiz = options.inlineMaxSize) !== null && _options$inlineMaxSiz !== void 0 ? _options$inlineMaxSiz : options.maxSize\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}