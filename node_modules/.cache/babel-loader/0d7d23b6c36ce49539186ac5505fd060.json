{"ast":null,"code":"'use strict';\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: (0, _docsUrl2['default'])('prefer-default-export')\n    },\n    schema: []\n  },\n  create: function () {\n    function create(context) {\n      var specifierExportCount = 0;\n      var hasDefaultExport = false;\n      var hasStarExport = false;\n      var hasTypeExport = false;\n      var namedExportNode = null;\n\n      function captureDeclaration(identifierOrPattern) {\n        if (identifierOrPattern && identifierOrPattern.type === 'ObjectPattern') {\n          // recursively capture\n          identifierOrPattern.properties.forEach(function (property) {\n            captureDeclaration(property.value);\n          });\n        } else if (identifierOrPattern && identifierOrPattern.type === 'ArrayPattern') {\n          identifierOrPattern.elements.forEach(captureDeclaration);\n        } else {\n          // assume it's a single standard identifier\n          specifierExportCount++;\n        }\n      }\n\n      return {\n        'ExportDefaultSpecifier': function () {\n          function ExportDefaultSpecifier() {\n            hasDefaultExport = true;\n          }\n\n          return ExportDefaultSpecifier;\n        }(),\n        'ExportSpecifier': function () {\n          function ExportSpecifier(node) {\n            if ((node.exported.name || node.exported.value) === 'default') {\n              hasDefaultExport = true;\n            } else {\n              specifierExportCount++;\n              namedExportNode = node;\n            }\n          }\n\n          return ExportSpecifier;\n        }(),\n        'ExportNamedDeclaration': function () {\n          function ExportNamedDeclaration(node) {\n            // if there are specifiers, node.declaration should be null\n            if (!node.declaration) return;\n            var type = node.declaration.type;\n\n            if (type === 'TSTypeAliasDeclaration' || type === 'TypeAlias' || type === 'TSInterfaceDeclaration' || type === 'InterfaceDeclaration') {\n              specifierExportCount++;\n              hasTypeExport = true;\n              return;\n            }\n\n            if (node.declaration.declarations) {\n              node.declaration.declarations.forEach(function (declaration) {\n                captureDeclaration(declaration.id);\n              });\n            } else {\n              // captures 'export function foo() {}' syntax\n              specifierExportCount++;\n            }\n\n            namedExportNode = node;\n          }\n\n          return ExportNamedDeclaration;\n        }(),\n        'ExportDefaultDeclaration': function () {\n          function ExportDefaultDeclaration() {\n            hasDefaultExport = true;\n          }\n\n          return ExportDefaultDeclaration;\n        }(),\n        'ExportAllDeclaration': function () {\n          function ExportAllDeclaration() {\n            hasStarExport = true;\n          }\n\n          return ExportAllDeclaration;\n        }(),\n        'Program:exit': function () {\n          function ProgramExit() {\n            if (specifierExportCount === 1 && !hasDefaultExport && !hasStarExport && !hasTypeExport) {\n              context.report(namedExportNode, 'Prefer default export.');\n            }\n          }\n\n          return ProgramExit;\n        }()\n      };\n    }\n\n    return create;\n  }()\n};","map":{"version":3,"mappings":"AAAA;;AAEA;;;;;;;;;;AAEAA,OAAOC,OAAPD,GAAiB;EACfE,MAAM;IACJC,MAAM,YADF;IAEJC,MAAM;MACJC,KAAK,0BAAQ,uBAAR;IADD,CAFF;IAKJC,QAAQ;EALJ,CADS;EASfC,MATe;IAAA,gBASRC,OATQ,EASC;MACd,IAAIC,uBAAuB,CAA3B;MACA,IAAIC,mBAAmB,KAAvB;MACA,IAAIC,gBAAgB,KAApB;MACA,IAAIC,gBAAgB,KAApB;MACA,IAAIC,kBAAkB,IAAtB;;MAEA,SAASC,kBAAT,CAA4BC,mBAA5B,EAAiD;QAC/C,IAAIA,uBAAuBA,oBAAoBZ,IAApBY,KAA6B,eAAxD,EAAyE;UACvE;UACAA,oBAAoBC,UAApBD,CACGE,OADHF,CACW,UAAUG,QAAV,EAAoB;YAC3BJ,mBAAmBI,SAASC,KAA5BL;UAFJ;QAFF,OAMO,IAAIC,uBAAuBA,oBAAoBZ,IAApBY,KAA6B,cAAxD,EAAwE;UAC7EA,oBAAoBK,QAApBL,CACGE,OADHF,CACWD,kBADXC;QADK,OAGC;UACR;UACEN;QACD;MACF;;MAED,OAAO;QACL;UAA0B,kCAAY;YACpCC,mBAAmB,IAAnBA;UADF;;UAAA;QAAA,GADK;QAKL;UAAmB,yBAAUW,IAAV,EAAgB;YACjC,IAAI,CAACA,KAAKC,QAALD,CAAcE,IAAdF,IAAsBA,KAAKC,QAALD,CAAcF,KAArC,MAAgD,SAApD,EAA+D;cAC7DT,mBAAmB,IAAnBA;YADF,OAEO;cACLD;cACAI,kBAAkBQ,IAAlBR;YACD;UANH;;UAAA;QAAA,GALK;QAcL;UAA0B,gCAAUQ,IAAV,EAAgB;YACxC;YACA,IAAI,CAACA,KAAKG,WAAV,EAAuB;YAFiB,IAIhCrB,IAJgC,GAIvBkB,KAAKG,WAALH,CAATlB,IAJgC;;YAMxC,IACEA,SAAS,wBAATA,IACAA,SAAS,WADTA,IAEAA,SAAS,wBAFTA,IAGAA,SAAS,sBAJX,EAKE;cACAM;cACAG,gBAAgB,IAAhBA;cACA;YACD;;YAED,IAAIS,KAAKG,WAALH,CAAiBI,YAArB,EAAmC;cACjCJ,KAAKG,WAALH,CAAiBI,YAAjBJ,CAA8BJ,OAA9BI,CAAsC,UAAUG,WAAV,EAAuB;gBAC3DV,mBAAmBU,YAAYE,EAA/BZ;cADF;YADF,OAIO;cACL;cACAL;YACD;;YAEDI,kBAAkBQ,IAAlBR;UA1BF;;UAAA;QAAA,GAdK;QA2CL;UAA4B,oCAAY;YACtCH,mBAAmB,IAAnBA;UADF;;UAAA;QAAA,GA3CK;QA+CL;UAAwB,gCAAY;YAClCC,gBAAgB,IAAhBA;UADF;;UAAA;QAAA,GA/CK;QAmDL;UAAgB,uBAAY;YAC1B,IAAIF,yBAAyB,CAAzBA,IAA8B,CAACC,gBAA/BD,IAAmD,CAACE,aAApDF,IAAqE,CAACG,aAA1E,EAAyF;cACvFJ,QAAQmB,MAARnB,CAAeK,eAAfL,EAAgC,wBAAhCA;YACD;UAHH;;UAAA;QAAA;MAnDK,CAAP;IAhCa;;IAAA;EAAA;AAAA,CAAjBR","names":["module","exports","meta","type","docs","url","schema","create","context","specifierExportCount","hasDefaultExport","hasStarExport","hasTypeExport","namedExportNode","captureDeclaration","identifierOrPattern","properties","forEach","property","value","elements","node","exported","name","declaration","declarations","id","report"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\prefer-default-export.js"],"sourcesContent":["'use strict';\n\nimport docsUrl from '../docsUrl';\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: docsUrl('prefer-default-export'),\n    },\n    schema: [],\n  },\n\n  create(context) {\n    let specifierExportCount = 0;\n    let hasDefaultExport = false;\n    let hasStarExport = false;\n    let hasTypeExport = false;\n    let namedExportNode = null;\n\n    function captureDeclaration(identifierOrPattern) {\n      if (identifierOrPattern && identifierOrPattern.type === 'ObjectPattern') {\n        // recursively capture\n        identifierOrPattern.properties\n          .forEach(function (property) {\n            captureDeclaration(property.value);\n          });\n      } else if (identifierOrPattern && identifierOrPattern.type === 'ArrayPattern') {\n        identifierOrPattern.elements\n          .forEach(captureDeclaration);\n      } else  {\n      // assume it's a single standard identifier\n        specifierExportCount++;\n      }\n    }\n\n    return {\n      'ExportDefaultSpecifier': function () {\n        hasDefaultExport = true;\n      },\n\n      'ExportSpecifier': function (node) {\n        if ((node.exported.name || node.exported.value) === 'default') {\n          hasDefaultExport = true;\n        } else {\n          specifierExportCount++;\n          namedExportNode = node;\n        }\n      },\n\n      'ExportNamedDeclaration': function (node) {\n        // if there are specifiers, node.declaration should be null\n        if (!node.declaration) return;\n\n        const { type } = node.declaration;\n\n        if (\n          type === 'TSTypeAliasDeclaration' ||\n          type === 'TypeAlias' ||\n          type === 'TSInterfaceDeclaration' ||\n          type === 'InterfaceDeclaration'\n        ) {\n          specifierExportCount++;\n          hasTypeExport = true;\n          return;\n        }\n\n        if (node.declaration.declarations) {\n          node.declaration.declarations.forEach(function (declaration) {\n            captureDeclaration(declaration.id);\n          });\n        } else {\n          // captures 'export function foo() {}' syntax\n          specifierExportCount++;\n        }\n\n        namedExportNode = node;\n      },\n\n      'ExportDefaultDeclaration': function () {\n        hasDefaultExport = true;\n      },\n\n      'ExportAllDeclaration': function () {\n        hasStarExport = true;\n      },\n\n      'Program:exit': function () {\n        if (specifierExportCount === 1 && !hasDefaultExport && !hasStarExport && !hasTypeExport) {\n          context.report(namedExportNode, 'Prefer default export.');\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}