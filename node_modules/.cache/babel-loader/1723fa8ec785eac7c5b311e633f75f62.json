{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util_1 = require(\"../util\");\n\nexports.default = (0, util_1.createRule)({\n  name: 'prefer-literal-enum-member',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Require all enum members to be literal values',\n      recommended: 'strict',\n      requiresTypeChecking: false\n    },\n    messages: {\n      notLiteral: `Explicit enum value must only be a literal value (string, number, boolean, etc).`\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        allowBitwiseExpressions: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{\n    allowBitwiseExpressions: false\n  }],\n\n  create(context, _ref) {\n    let [{\n      allowBitwiseExpressions\n    }] = _ref;\n    return {\n      TSEnumMember(node) {\n        // If there is no initializer, then this node is just the name of the member, so ignore.\n        if (node.initializer == null) {\n          return;\n        } // any old literal\n\n\n        if (node.initializer.type === utils_1.AST_NODE_TYPES.Literal) {\n          return;\n        } // TemplateLiteral without expressions\n\n\n        if (node.initializer.type === utils_1.AST_NODE_TYPES.TemplateLiteral && node.initializer.expressions.length === 0) {\n          return;\n        } // -1 and +1\n\n\n        if (node.initializer.type === utils_1.AST_NODE_TYPES.UnaryExpression && node.initializer.argument.type === utils_1.AST_NODE_TYPES.Literal && (['+', '-'].includes(node.initializer.operator) || allowBitwiseExpressions && node.initializer.operator === '~')) {\n          return;\n        }\n\n        if (allowBitwiseExpressions && node.initializer.type === utils_1.AST_NODE_TYPES.BinaryExpression && ['|', '&', '^', '<<', '>>', '>>>'].includes(node.initializer.operator) && node.initializer.left.type === utils_1.AST_NODE_TYPES.Literal && node.initializer.right.type === utils_1.AST_NODE_TYPES.Literal) {\n          return;\n        }\n\n        context.report({\n          node: node.id,\n          messageId: 'notLiteral'\n        });\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;AAAA;;AAEA;;AAEAA,kBAAe,uBAAW;EACxBC,IAAI,EAAE,4BADkB;EAExBC,IAAI,EAAE;IACJC,IAAI,EAAE,YADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EAAE,+CADT;MAEJC,WAAW,EAAE,QAFT;MAGJC,oBAAoB,EAAE;IAHlB,CAFF;IAOJC,QAAQ,EAAE;MACRC,UAAU,EAAE;IADJ,CAPN;IAUJC,MAAM,EAAE,CACN;MACEP,IAAI,EAAE,QADR;MAEEQ,UAAU,EAAE;QACVC,uBAAuB,EAAE;UACvBT,IAAI,EAAE;QADiB;MADf,CAFd;MAOEU,oBAAoB,EAAE;IAPxB,CADM;EAVJ,CAFkB;EAwBxBC,cAAc,EAAE,CACd;IACEF,uBAAuB,EAAE;EAD3B,CADc,CAxBQ;;EA6BxBG,MAAM,CAACC,OAAD,QAAuC;IAAA,IAA7B,CAAC;MAAEJ;IAAF,CAAD,CAA6B;IAC3C,OAAO;MACLK,YAAY,CAACC,IAAD,EAAK;QACf;QACA,IAAIA,IAAI,CAACC,WAAL,IAAoB,IAAxB,EAA8B;UAC5B;QACD,CAJc,CAKf;;;QACA,IAAID,IAAI,CAACC,WAAL,CAAiBhB,IAAjB,KAA0BiB,uBAAeC,OAA7C,EAAsD;UACpD;QACD,CARc,CASf;;;QACA,IACEH,IAAI,CAACC,WAAL,CAAiBhB,IAAjB,KAA0BiB,uBAAeE,eAAzC,IACAJ,IAAI,CAACC,WAAL,CAAiBI,WAAjB,CAA6BC,MAA7B,KAAwC,CAF1C,EAGE;UACA;QACD,CAfc,CAgBf;;;QACA,IACEN,IAAI,CAACC,WAAL,CAAiBhB,IAAjB,KAA0BiB,uBAAeK,eAAzC,IACAP,IAAI,CAACC,WAAL,CAAiBO,QAAjB,CAA0BvB,IAA1B,KAAmCiB,uBAAeC,OADlD,KAEC,CAAC,GAAD,EAAM,GAAN,EAAWM,QAAX,CAAoBT,IAAI,CAACC,WAAL,CAAiBS,QAArC,KACEhB,uBAAuB,IAAIM,IAAI,CAACC,WAAL,CAAiBS,QAAjB,KAA8B,GAH5D,CADF,EAKE;UACA;QACD;;QAED,IACEhB,uBAAuB,IACvBM,IAAI,CAACC,WAAL,CAAiBhB,IAAjB,KAA0BiB,uBAAeS,gBADzC,IAEA,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,KAA5B,EAAmCF,QAAnC,CACET,IAAI,CAACC,WAAL,CAAiBS,QADnB,CAFA,IAKAV,IAAI,CAACC,WAAL,CAAiBW,IAAjB,CAAsB3B,IAAtB,KAA+BiB,uBAAeC,OAL9C,IAMAH,IAAI,CAACC,WAAL,CAAiBY,KAAjB,CAAuB5B,IAAvB,KAAgCiB,uBAAeC,OAPjD,EAQE;UACA;QACD;;QAEDL,OAAO,CAACgB,MAAR,CAAe;UACbd,IAAI,EAAEA,IAAI,CAACe,EADE;UAEbC,SAAS,EAAE;QAFE,CAAf;MAID;;IA3CI,CAAP;EA6CD;;AA3EuB,CAAX,CAAf","names":["exports","name","meta","type","docs","description","recommended","requiresTypeChecking","messages","notLiteral","schema","properties","allowBitwiseExpressions","additionalProperties","defaultOptions","create","context","TSEnumMember","node","initializer","utils_1","Literal","TemplateLiteral","expressions","length","UnaryExpression","argument","includes","operator","BinaryExpression","left","right","report","id","messageId"],"sources":["../../src/rules/prefer-literal-enum-member.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}