{"ast":null,"code":"const ROOT_NAMESPACE_NAME = '__rootNamespace__';\n\nclass Namespace {\n  constructor(name, parentNamespace) {\n    this.name = name;\n    this.parentNamespace = parentNamespace;\n    this.childNamespaces = {};\n    this.tasks = {};\n    this.rules = {};\n    this.path = this.getPath();\n  }\n\n  get fullName() {\n    return this._getFullName();\n  }\n\n  addTask(task) {\n    this.tasks[task.name] = task;\n    task.namespace = this;\n  }\n\n  resolveTask(name) {\n    if (!name) {\n      return;\n    }\n\n    let taskPath = name.split(':');\n    let taskName = taskPath.pop();\n    let task;\n    let ns; // Namespaced, return either relative to current, or from root\n\n    if (taskPath.length) {\n      taskPath = taskPath.join(':');\n      ns = this.resolveNamespace(taskPath) || Namespace.ROOT_NAMESPACE.resolveNamespace(taskPath);\n      task = ns && ns.resolveTask(taskName);\n    } // Bare task, return either local, or top-level\n    else {\n      task = this.tasks[name] || Namespace.ROOT_NAMESPACE.tasks[name];\n    }\n\n    return task || null;\n  }\n\n  resolveNamespace(relativeName) {\n    if (!relativeName) {\n      return this;\n    }\n\n    let parts = relativeName.split(':');\n    let ns = this;\n\n    for (let i = 0, ii = parts.length; ns && i < ii; i++) {\n      ns = ns.childNamespaces[parts[i]];\n    }\n\n    return ns || null;\n  }\n\n  matchRule(relativeName) {\n    let parts = relativeName.split(':');\n    parts.pop();\n    let ns = this.resolveNamespace(parts.join(':'));\n    let rules = ns ? ns.rules : [];\n    let r;\n    let match;\n\n    for (let p in rules) {\n      r = rules[p];\n\n      if (r.match(relativeName)) {\n        match = r;\n      }\n    }\n\n    return ns && match || this.parentNamespace && this.parentNamespace.matchRule(relativeName);\n  }\n\n  getPath() {\n    let parts = [];\n    let next = this.parentNamespace;\n\n    while (next) {\n      parts.push(next.name);\n      next = next.parentNamespace;\n    }\n\n    parts.pop(); // Remove '__rootNamespace__'\n\n    return parts.reverse().join(':');\n  }\n\n  _getFullName() {\n    let path = this.path;\n    path = path && path.split(':') || [];\n    path.push(this.name);\n    return path.join(':');\n  }\n\n  isRootNamespace() {\n    return !this.parentNamespace;\n  }\n\n}\n\nclass RootNamespace extends Namespace {\n  constructor() {\n    super(ROOT_NAMESPACE_NAME, null);\n    Namespace.ROOT_NAMESPACE = this;\n  }\n\n}\n\nmodule.exports.Namespace = Namespace;\nmodule.exports.RootNamespace = RootNamespace;","map":{"version":3,"names":["ROOT_NAMESPACE_NAME","Namespace","constructor","name","parentNamespace","childNamespaces","tasks","rules","path","getPath","fullName","_getFullName","addTask","task","namespace","resolveTask","taskPath","split","taskName","pop","ns","length","join","resolveNamespace","ROOT_NAMESPACE","relativeName","parts","i","ii","matchRule","r","match","p","next","push","reverse","isRootNamespace","RootNamespace","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jake/lib/namespace.js"],"sourcesContent":["const ROOT_NAMESPACE_NAME = '__rootNamespace__';\n\nclass Namespace {\n  constructor(name, parentNamespace) {\n    this.name = name;\n    this.parentNamespace = parentNamespace;\n    this.childNamespaces = {};\n    this.tasks = {};\n    this.rules = {};\n    this.path = this.getPath();\n  }\n\n  get fullName() {\n    return this._getFullName();\n  }\n\n  addTask(task) {\n    this.tasks[task.name] = task;\n    task.namespace = this;\n  }\n\n  resolveTask(name) {\n    if (!name) {\n      return;\n    }\n\n    let taskPath = name.split(':');\n    let taskName = taskPath.pop();\n    let task;\n    let ns;\n\n    // Namespaced, return either relative to current, or from root\n    if (taskPath.length) {\n      taskPath = taskPath.join(':');\n      ns = this.resolveNamespace(taskPath) ||\n        Namespace.ROOT_NAMESPACE.resolveNamespace(taskPath);\n      task = (ns && ns.resolveTask(taskName));\n    }\n    // Bare task, return either local, or top-level\n    else {\n      task = this.tasks[name] || Namespace.ROOT_NAMESPACE.tasks[name];\n    }\n\n    return task || null;\n  }\n\n\n  resolveNamespace(relativeName) {\n    if (!relativeName) {\n      return this;\n    }\n\n    let parts = relativeName.split(':');\n    let ns = this;\n\n    for (let i = 0, ii = parts.length; (ns && i < ii); i++) {\n      ns = ns.childNamespaces[parts[i]];\n    }\n\n    return ns || null;\n  }\n\n  matchRule(relativeName) {\n    let parts = relativeName.split(':');\n    parts.pop();\n    let ns = this.resolveNamespace(parts.join(':'));\n    let rules = ns ? ns.rules : [];\n    let r;\n    let match;\n\n    for (let p in rules) {\n      r = rules[p];\n      if (r.match(relativeName)) {\n        match = r;\n      }\n    }\n\n    return (ns && match) ||\n        (this.parentNamespace &&\n        this.parentNamespace.matchRule(relativeName));\n  }\n\n  getPath() {\n    let parts = [];\n    let next = this.parentNamespace;\n    while (next) {\n      parts.push(next.name);\n      next = next.parentNamespace;\n    }\n    parts.pop(); // Remove '__rootNamespace__'\n    return parts.reverse().join(':');\n  }\n\n  _getFullName() {\n    let path = this.path;\n    path = (path && path.split(':')) || [];\n    path.push(this.name);\n    return path.join(':');\n  }\n\n  isRootNamespace() {\n    return !this.parentNamespace;\n  }\n}\n\nclass RootNamespace extends Namespace {\n  constructor() {\n    super(ROOT_NAMESPACE_NAME, null);\n    Namespace.ROOT_NAMESPACE = this;\n  }\n}\n\nmodule.exports.Namespace = Namespace;\nmodule.exports.RootNamespace = RootNamespace;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}