{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rohith\\\\mern\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { image, serialization, tidy } from '@tensorflow/tfjs-core'; // mul, add\nimport { Layer } from '../../engine/topology';\nimport { ValueError } from '../../errors';\nimport { getExactlyOneShape } from '../../utils/types_utils'; //, getExactlyOneTensor\n// tf methods unimplemented in tfjs: 'bicubic', 'area', 'lanczos3', 'lanczos5',\n//                                   'gaussian', 'mitchellcubic'\nvar INTERPOLATION_KEYS = ['bilinear', 'nearest'];\nvar INTERPOLATION_METHODS = new Set(INTERPOLATION_KEYS);\n/**\n * Preprocessing Resizing Layer\n *\n * This resizes images by a scaling and offset factor\n */\nexport var Resizing = /*#__PURE__*/function (_Layer) {\n  _inherits(Resizing, _Layer);\n  function Resizing(args) {\n    var _this;\n    _classCallCheck(this, Resizing);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Resizing).call(this, args));\n    _this.height = args.height;\n    _this.width = args.width;\n    if (args.interpolation) {\n      if (INTERPOLATION_METHODS.has(args.interpolation)) {\n        _this.interpolation = args.interpolation;\n      } else {\n        throw new ValueError(\"Invalid interpolation parameter: \".concat(args.interpolation, \" is not implemented\"));\n      }\n    } else {\n      _this.interpolation = 'bilinear';\n    }\n    _this.cropToAspectRatio = Boolean(args.cropToAspectRatio);\n    return _this;\n  }\n  _createClass(Resizing, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var numChannels = inputShape[2];\n      return [this.height, this.width, numChannels];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        'height': this.height,\n        'width': this.width,\n        'interpolation': this.interpolation,\n        'cropToAspectRatio': this.cropToAspectRatio\n      };\n      var baseConfig = _get(_getPrototypeOf(Resizing.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n      return tidy(function () {\n        var size = [_this2.height, _this2.width];\n        if (_this2.interpolation === 'bilinear') {\n          return image.resizeBilinear(inputs, size, !_this2.cropToAspectRatio);\n        } else if (_this2.interpolation === 'nearest') {\n          return image.resizeNearestNeighbor(inputs, size, !_this2.cropToAspectRatio);\n        } else {\n          throw new Error(\"Interpolation is \".concat(_this2.interpolation, \" but only \").concat(_toConsumableArray(INTERPOLATION_METHODS), \" are supported\"));\n        }\n      });\n    }\n  }]);\n  return Resizing;\n}(Layer);\n/** @nocollapse */\nResizing.className = 'Resizing';\nserialization.registerClass(Resizing);","map":null,"metadata":{},"sourceType":"module"}