{"ast":null,"code":"'use strict';\n\nconst lengthConv = new Map([['in', 96], ['px', 1], ['pt', 4 / 3], ['pc', 16]]);\nconst timeConv = new Map([['s', 1000], ['ms', 1]]);\nconst angleConv = new Map([['turn', 360], ['deg', 1]]);\n/**\n * @param {number} number\n * @return {string}\n */\n\nfunction dropLeadingZero(number) {\n  const value = String(number);\n\n  if (number % 1) {\n    if (value[0] === '0') {\n      return value.slice(1);\n    }\n\n    if (value[0] === '-' && value[1] === '0') {\n      return '-' + value.slice(2);\n    }\n  }\n\n  return value;\n}\n/**\n * @param {number} number\n * @param {string} originalUnit\n * @param {lengthConv | timeConv | angleConv} conversions\n * @return {string}\n */\n\n\nfunction transform(number, originalUnit, conversions) {\n  let conversionUnits = [...conversions.keys()].filter(u => {\n    return originalUnit !== u;\n  });\n  const base = number *\n  /** @type {number} */\n  conversions.get(originalUnit);\n  return conversionUnits.map(u => dropLeadingZero(base /\n  /** @type {number} */\n  conversions.get(u)) + u).reduce((a, b) => a.length < b.length ? a : b);\n}\n/**\n * @param {number} number\n * @param {string} unit\n * @param {{time?: boolean, length?: boolean, angle?: boolean}} options\n * @return {string}\n */\n\n\nmodule.exports = function (number, unit, _ref) {\n  let {\n    time,\n    length,\n    angle\n  } = _ref;\n  let value = dropLeadingZero(number) + (unit ? unit : '');\n  let converted;\n  const lowerCaseUnit = unit.toLowerCase();\n\n  if (length !== false && lengthConv.has(lowerCaseUnit)) {\n    converted = transform(number, lowerCaseUnit, lengthConv);\n  }\n\n  if (time !== false && timeConv.has(lowerCaseUnit)) {\n    converted = transform(number, lowerCaseUnit, timeConv);\n  }\n\n  if (angle !== false && angleConv.has(lowerCaseUnit)) {\n    converted = transform(number, lowerCaseUnit, angleConv);\n  }\n\n  if (converted && converted.length < value.length) {\n    value = converted;\n  }\n\n  return value;\n};","map":{"version":3,"names":["lengthConv","Map","timeConv","angleConv","dropLeadingZero","number","value","String","slice","transform","originalUnit","conversions","conversionUnits","keys","filter","u","base","get","map","reduce","a","b","length","module","exports","unit","time","angle","converted","lowerCaseUnit","toLowerCase","has"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-convert-values/src/lib/convert.js"],"sourcesContent":["'use strict';\nconst lengthConv = new Map([\n  ['in', 96],\n  ['px', 1],\n  ['pt', 4 / 3],\n  ['pc', 16],\n]);\n\nconst timeConv = new Map([\n  ['s', 1000],\n  ['ms', 1],\n]);\n\nconst angleConv = new Map([\n  ['turn', 360],\n  ['deg', 1],\n]);\n/**\n * @param {number} number\n * @return {string}\n */\nfunction dropLeadingZero(number) {\n  const value = String(number);\n\n  if (number % 1) {\n    if (value[0] === '0') {\n      return value.slice(1);\n    }\n\n    if (value[0] === '-' && value[1] === '0') {\n      return '-' + value.slice(2);\n    }\n  }\n\n  return value;\n}\n/**\n * @param {number} number\n * @param {string} originalUnit\n * @param {lengthConv | timeConv | angleConv} conversions\n * @return {string}\n */\nfunction transform(number, originalUnit, conversions) {\n  let conversionUnits = [...conversions.keys()].filter((u) => {\n    return originalUnit !== u;\n  });\n\n  const base = number * /** @type {number} */ (conversions.get(originalUnit));\n\n  return conversionUnits\n    .map(\n      (u) =>\n        dropLeadingZero(base / /** @type {number} */ (conversions.get(u))) + u\n    )\n    .reduce((a, b) => (a.length < b.length ? a : b));\n}\n\n/**\n * @param {number} number\n * @param {string} unit\n * @param {{time?: boolean, length?: boolean, angle?: boolean}} options\n * @return {string}\n */\nmodule.exports = function (number, unit, { time, length, angle }) {\n  let value = dropLeadingZero(number) + (unit ? unit : '');\n  let converted;\n  const lowerCaseUnit = unit.toLowerCase();\n  if (length !== false && lengthConv.has(lowerCaseUnit)) {\n    converted = transform(number, lowerCaseUnit, lengthConv);\n  }\n\n  if (time !== false && timeConv.has(lowerCaseUnit)) {\n    converted = transform(number, lowerCaseUnit, timeConv);\n  }\n\n  if (angle !== false && angleConv.has(lowerCaseUnit)) {\n    converted = transform(number, lowerCaseUnit, angleConv);\n  }\n\n  if (converted && converted.length < value.length) {\n    value = converted;\n  }\n\n  return value;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}