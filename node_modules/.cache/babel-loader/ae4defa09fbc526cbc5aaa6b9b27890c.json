{"ast":null,"code":"'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst {\n  getArguments\n} = require('cssnano-utils');\n\nconst isColorStop = require('./isColorStop.js');\n\nconst angles = {\n  top: '0deg',\n  right: '90deg',\n  bottom: '180deg',\n  left: '270deg'\n};\n/**\n * @param {valueParser.Dimension} a\n * @param {valueParser.Dimension} b\n * @return {boolean}\n */\n\nfunction isLessThan(a, b) {\n  return a.unit.toLowerCase() === b.unit.toLowerCase() && parseFloat(a.number) >= parseFloat(b.number);\n}\n/**\n * @param {import('postcss').Declaration} decl\n * @return {void}\n */\n\n\nfunction optimise(decl) {\n  const value = decl.value;\n\n  if (!value) {\n    return;\n  }\n\n  const normalizedValue = value.toLowerCase();\n\n  if (normalizedValue.includes('var(') || normalizedValue.includes('env(')) {\n    return;\n  }\n\n  if (!normalizedValue.includes('gradient')) {\n    return;\n  }\n\n  decl.value = valueParser(value).walk(node => {\n    if (node.type !== 'function' || !node.nodes.length) {\n      return false;\n    }\n\n    const lowerCasedValue = node.value.toLowerCase();\n\n    if (lowerCasedValue === 'linear-gradient' || lowerCasedValue === 'repeating-linear-gradient' || lowerCasedValue === '-webkit-linear-gradient' || lowerCasedValue === '-webkit-repeating-linear-gradient') {\n      let args = getArguments(node);\n\n      if (node.nodes[0].value.toLowerCase() === 'to' && args[0].length === 3) {\n        node.nodes = node.nodes.slice(2);\n        node.nodes[0].value = angles[\n        /** @type {'top'|'right'|'bottom'|'left'}*/\n        node.nodes[0].value.toLowerCase()];\n      }\n      /** @type {valueParser.Dimension | false} */\n\n\n      let lastStop;\n      args.forEach((arg, index) => {\n        if (arg.length !== 3) {\n          return;\n        }\n\n        let isFinalStop = index === args.length - 1;\n        let thisStop = valueParser.unit(arg[2].value);\n\n        if (lastStop === undefined) {\n          lastStop = thisStop;\n\n          if (!isFinalStop && lastStop && lastStop.number === '0' && lastStop.unit.toLowerCase() !== 'deg') {\n            arg[1].value = arg[2].value = '';\n          }\n\n          return;\n        }\n\n        if (lastStop && thisStop && isLessThan(lastStop, thisStop)) {\n          arg[2].value = '0';\n        }\n\n        lastStop = thisStop;\n\n        if (isFinalStop && arg[2].value === '100%') {\n          arg[1].value = arg[2].value = '';\n        }\n      });\n      return false;\n    }\n\n    if (lowerCasedValue === 'radial-gradient' || lowerCasedValue === 'repeating-radial-gradient') {\n      let args = getArguments(node);\n      /** @type {valueParser.Dimension | false} */\n\n      let lastStop;\n      const hasAt = args[0].find(n => n.value.toLowerCase() === 'at');\n      args.forEach((arg, index) => {\n        if (!arg[2] || !index && hasAt) {\n          return;\n        }\n\n        let thisStop = valueParser.unit(arg[2].value);\n\n        if (!lastStop) {\n          lastStop = thisStop;\n          return;\n        }\n\n        if (lastStop && thisStop && isLessThan(lastStop, thisStop)) {\n          arg[2].value = '0';\n        }\n\n        lastStop = thisStop;\n      });\n      return false;\n    }\n\n    if (lowerCasedValue === '-webkit-radial-gradient' || lowerCasedValue === '-webkit-repeating-radial-gradient') {\n      let args = getArguments(node);\n      /** @type {valueParser.Dimension | false} */\n\n      let lastStop;\n      args.forEach(arg => {\n        let color;\n        let stop;\n\n        if (arg[2] !== undefined) {\n          if (arg[0].type === 'function') {\n            color = `${arg[0].value}(${valueParser.stringify(arg[0].nodes)})`;\n          } else {\n            color = arg[0].value;\n          }\n\n          if (arg[2].type === 'function') {\n            stop = `${arg[2].value}(${valueParser.stringify(arg[2].nodes)})`;\n          } else {\n            stop = arg[2].value;\n          }\n        } else {\n          if (arg[0].type === 'function') {\n            color = `${arg[0].value}(${valueParser.stringify(arg[0].nodes)})`;\n          }\n\n          color = arg[0].value;\n        }\n\n        color = color.toLowerCase();\n        const colorStop = stop !== undefined ? isColorStop(color, stop.toLowerCase()) : isColorStop(color);\n\n        if (!colorStop || !arg[2]) {\n          return;\n        }\n\n        let thisStop = valueParser.unit(arg[2].value);\n\n        if (!lastStop) {\n          lastStop = thisStop;\n          return;\n        }\n\n        if (lastStop && thisStop && isLessThan(lastStop, thisStop)) {\n          arg[2].value = '0';\n        }\n\n        lastStop = thisStop;\n      });\n      return false;\n    }\n  }).toString();\n}\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\n\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-minify-gradients',\n\n    OnceExit(css) {\n      css.walkDecls(optimise);\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"names":["valueParser","require","getArguments","isColorStop","angles","top","right","bottom","left","isLessThan","a","b","unit","toLowerCase","parseFloat","number","optimise","decl","value","normalizedValue","includes","walk","node","type","nodes","length","lowerCasedValue","args","slice","lastStop","forEach","arg","index","isFinalStop","thisStop","undefined","hasAt","find","n","color","stop","stringify","colorStop","toString","pluginCreator","postcssPlugin","OnceExit","css","walkDecls","postcss","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-minify-gradients/src/index.js"],"sourcesContent":["'use strict';\nconst valueParser = require('postcss-value-parser');\nconst { getArguments } = require('cssnano-utils');\nconst isColorStop = require('./isColorStop.js');\n\nconst angles = {\n  top: '0deg',\n  right: '90deg',\n  bottom: '180deg',\n  left: '270deg',\n};\n\n/**\n * @param {valueParser.Dimension} a\n * @param {valueParser.Dimension} b\n * @return {boolean}\n */\nfunction isLessThan(a, b) {\n  return (\n    a.unit.toLowerCase() === b.unit.toLowerCase() &&\n    parseFloat(a.number) >= parseFloat(b.number)\n  );\n}\n/**\n * @param {import('postcss').Declaration} decl\n * @return {void}\n */\nfunction optimise(decl) {\n  const value = decl.value;\n\n  if (!value) {\n    return;\n  }\n\n  const normalizedValue = value.toLowerCase();\n\n  if (normalizedValue.includes('var(') || normalizedValue.includes('env(')) {\n    return;\n  }\n\n  if (!normalizedValue.includes('gradient')) {\n    return;\n  }\n\n  decl.value = valueParser(value)\n    .walk((node) => {\n      if (node.type !== 'function' || !node.nodes.length) {\n        return false;\n      }\n\n      const lowerCasedValue = node.value.toLowerCase();\n\n      if (\n        lowerCasedValue === 'linear-gradient' ||\n        lowerCasedValue === 'repeating-linear-gradient' ||\n        lowerCasedValue === '-webkit-linear-gradient' ||\n        lowerCasedValue === '-webkit-repeating-linear-gradient'\n      ) {\n        let args = getArguments(node);\n\n        if (\n          node.nodes[0].value.toLowerCase() === 'to' &&\n          args[0].length === 3\n        ) {\n          node.nodes = node.nodes.slice(2);\n          node.nodes[0].value =\n            angles[\n              /** @type {'top'|'right'|'bottom'|'left'}*/ (\n                node.nodes[0].value.toLowerCase()\n              )\n            ];\n        }\n\n        /** @type {valueParser.Dimension | false} */\n        let lastStop;\n\n        args.forEach((arg, index) => {\n          if (arg.length !== 3) {\n            return;\n          }\n\n          let isFinalStop = index === args.length - 1;\n          let thisStop = valueParser.unit(arg[2].value);\n\n          if (lastStop === undefined) {\n            lastStop = thisStop;\n\n            if (\n              !isFinalStop &&\n              lastStop &&\n              lastStop.number === '0' &&\n              lastStop.unit.toLowerCase() !== 'deg'\n            ) {\n              arg[1].value = arg[2].value = '';\n            }\n\n            return;\n          }\n\n          if (lastStop && thisStop && isLessThan(lastStop, thisStop)) {\n            arg[2].value = '0';\n          }\n\n          lastStop = thisStop;\n\n          if (isFinalStop && arg[2].value === '100%') {\n            arg[1].value = arg[2].value = '';\n          }\n        });\n\n        return false;\n      }\n\n      if (\n        lowerCasedValue === 'radial-gradient' ||\n        lowerCasedValue === 'repeating-radial-gradient'\n      ) {\n        let args = getArguments(node);\n        /** @type {valueParser.Dimension | false} */\n        let lastStop;\n\n        const hasAt = args[0].find((n) => n.value.toLowerCase() === 'at');\n\n        args.forEach((arg, index) => {\n          if (!arg[2] || (!index && hasAt)) {\n            return;\n          }\n\n          let thisStop = valueParser.unit(arg[2].value);\n\n          if (!lastStop) {\n            lastStop = thisStop;\n\n            return;\n          }\n\n          if (lastStop && thisStop && isLessThan(lastStop, thisStop)) {\n            arg[2].value = '0';\n          }\n\n          lastStop = thisStop;\n        });\n\n        return false;\n      }\n\n      if (\n        lowerCasedValue === '-webkit-radial-gradient' ||\n        lowerCasedValue === '-webkit-repeating-radial-gradient'\n      ) {\n        let args = getArguments(node);\n        /** @type {valueParser.Dimension | false} */\n        let lastStop;\n\n        args.forEach((arg) => {\n          let color;\n          let stop;\n\n          if (arg[2] !== undefined) {\n            if (arg[0].type === 'function') {\n              color = `${arg[0].value}(${valueParser.stringify(arg[0].nodes)})`;\n            } else {\n              color = arg[0].value;\n            }\n\n            if (arg[2].type === 'function') {\n              stop = `${arg[2].value}(${valueParser.stringify(arg[2].nodes)})`;\n            } else {\n              stop = arg[2].value;\n            }\n          } else {\n            if (arg[0].type === 'function') {\n              color = `${arg[0].value}(${valueParser.stringify(arg[0].nodes)})`;\n            }\n\n            color = arg[0].value;\n          }\n\n          color = color.toLowerCase();\n\n          const colorStop =\n            stop !== undefined\n              ? isColorStop(color, stop.toLowerCase())\n              : isColorStop(color);\n\n          if (!colorStop || !arg[2]) {\n            return;\n          }\n\n          let thisStop = valueParser.unit(arg[2].value);\n\n          if (!lastStop) {\n            lastStop = thisStop;\n\n            return;\n          }\n\n          if (lastStop && thisStop && isLessThan(lastStop, thisStop)) {\n            arg[2].value = '0';\n          }\n\n          lastStop = thisStop;\n        });\n\n        return false;\n      }\n    })\n    .toString();\n}\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-minify-gradients',\n    OnceExit(css) {\n      css.walkDecls(optimise);\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}