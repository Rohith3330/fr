{"ast":null,"code":"/* eslint-env mocha */\nimport assert from 'assert';\nimport { getOpeningElement, setParserName } from '../helper';\nimport getProp from '../../src/getProp';\ndescribe('getProp', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof getProp;\n    assert.equal(actual, expected);\n  });\n  it('should return undefined if no arguments are provided', () => {\n    const expected = undefined;\n    const actual = getProp();\n    assert.equal(actual, expected);\n  });\n  it('should return undefined if the attribute is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = undefined;\n    const actual = getProp(props, prop);\n    assert.equal(actual, expected);\n  });\n  it('should return the correct attribute if the attribute exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = 'id';\n    const actual = getProp(props, prop).name.name;\n    assert.equal(actual, expected);\n  });\n  it('should return the correct attribute if the attribute exists in spread', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'ID';\n    const expected = 'id';\n    const actual = getProp(props, prop).name.name;\n    assert.equal(actual, expected);\n  });\n  it('should return the correct attribute if the attribute exists in spread as an expression', () => {\n    const code = '<div {...{ id }} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = 'id';\n    const actual = getProp(props, prop);\n    const actualName = actual.name.name;\n    const actualValue = actual.value.expression.name;\n    assert.equal(actualName, expected);\n    assert.equal(actualValue, expected);\n  });\n  it('should return the correct attribute if the attribute exists in spread (case sensitive)', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false\n    };\n    const expected = 'id';\n    const actual = getProp(props, prop, options).name.name;\n    assert.equal(actual, expected);\n  });\n  it('should return undefined if the attribute does not exist in spread (case sensitive)', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'ID';\n    const options = {\n      ignoreCase: false\n    };\n    const expected = undefined;\n    const actual = getProp(props, prop, options);\n    assert.equal(actual, expected);\n  });\n  it('should return undefined for key in spread', () => {\n    // https://github.com/reactjs/rfcs/pull/107\n    const code = '<div {...{ key }} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'key';\n    const expected = undefined;\n    const actual = getProp(props, prop);\n    assert.equal(actual, expected);\n  });\n  it('should return undefined if the attribute may exist in spread', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = undefined;\n    const actual = getProp(props, prop);\n    assert.equal(actual, expected);\n  });\n  it('should not crash if the spread contains a spread', () => {\n    const code = '<div {...{ ...props }} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    getProp(props, prop);\n  });\n  it('should return undefined if the attribute is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false\n    };\n    const expected = undefined;\n    const actual = getProp(props, prop, options);\n    assert.equal(actual, expected);\n  });\n});","map":{"version":3,"names":["assert","getOpeningElement","setParserName","getProp","describe","beforeEach","it","expected","actual","equal","undefined","code","node","attributes","props","prop","name","actualName","actualValue","value","expression","options","ignoreCase"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/__tests__/src/getProp-test.js"],"sourcesContent":["/* eslint-env mocha */\nimport assert from 'assert';\nimport { getOpeningElement, setParserName } from '../helper';\nimport getProp from '../../src/getProp';\n\ndescribe('getProp', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof getProp;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return undefined if no arguments are provided', () => {\n    const expected = undefined;\n    const actual = getProp();\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return undefined if the attribute is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = undefined;\n    const actual = getProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return the correct attribute if the attribute exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = 'id';\n    const actual = getProp(props, prop).name.name;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return the correct attribute if the attribute exists in spread', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'ID';\n\n    const expected = 'id';\n    const actual = getProp(props, prop).name.name;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return the correct attribute if the attribute exists in spread as an expression', () => {\n    const code = '<div {...{ id }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = 'id';\n    const actual = getProp(props, prop);\n    const actualName = actual.name.name;\n    const actualValue = actual.value.expression.name;\n\n    assert.equal(actualName, expected);\n    assert.equal(actualValue, expected);\n  });\n\n  it('should return the correct attribute if the attribute exists in spread (case sensitive)', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = { ignoreCase: false };\n\n    const expected = 'id';\n    const actual = getProp(props, prop, options).name.name;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return undefined if the attribute does not exist in spread (case sensitive)', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'ID';\n    const options = { ignoreCase: false };\n\n    const expected = undefined;\n    const actual = getProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return undefined for key in spread', () => {\n    // https://github.com/reactjs/rfcs/pull/107\n    const code = '<div {...{ key }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'key';\n\n    const expected = undefined;\n    const actual = getProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return undefined if the attribute may exist in spread', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = undefined;\n    const actual = getProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should not crash if the spread contains a spread', () => {\n    const code = '<div {...{ ...props }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    getProp(props, prop);\n  });\n\n  it('should return undefined if the attribute is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = undefined;\n    const actual = getProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}