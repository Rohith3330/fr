{"ast":null,"code":"/**\n * @fileoverview JSLint XML reporter\n * @author Ian Christian Myers\n */\n\"use strict\";\n\nconst xmlEscape = require(\"../xml-escape\"); //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nmodule.exports = function (results) {\n  let output = \"\";\n  output += \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\";\n  output += \"<jslint>\";\n  results.forEach(result => {\n    const messages = result.messages;\n    output += `<file name=\"${result.filePath}\">`;\n    messages.forEach(message => {\n      output += [`<issue line=\"${message.line}\"`, `char=\"${message.column}\"`, `evidence=\"${xmlEscape(message.source || \"\")}\"`, `reason=\"${xmlEscape(message.message || \"\")}${message.ruleId ? ` (${message.ruleId})` : \"\"}\" />`].join(\" \");\n    });\n    output += \"</file>\";\n  });\n  output += \"</jslint>\";\n  return output;\n};","map":{"version":3,"names":["xmlEscape","require","module","exports","results","output","forEach","result","messages","filePath","message","line","column","source","ruleId","join"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/cli-engine/formatters/jslint-xml.js"],"sourcesContent":["/**\n * @fileoverview JSLint XML reporter\n * @author Ian Christian Myers\n */\n\"use strict\";\n\nconst xmlEscape = require(\"../xml-escape\");\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = function(results) {\n\n    let output = \"\";\n\n    output += \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\";\n    output += \"<jslint>\";\n\n    results.forEach(result => {\n        const messages = result.messages;\n\n        output += `<file name=\"${result.filePath}\">`;\n\n        messages.forEach(message => {\n            output += [\n                `<issue line=\"${message.line}\"`,\n                `char=\"${message.column}\"`,\n                `evidence=\"${xmlEscape(message.source || \"\")}\"`,\n                `reason=\"${xmlEscape(message.message || \"\")}${message.ruleId ? ` (${message.ruleId})` : \"\"}\" />`\n            ].join(\" \");\n        });\n\n        output += \"</file>\";\n\n    });\n\n    output += \"</jslint>\";\n\n    return output;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;EAE/B,IAAIC,MAAM,GAAG,EAAb;EAEAA,MAAM,IAAI,4CAAV;EACAA,MAAM,IAAI,UAAV;EAEAD,OAAO,CAACE,OAAR,CAAgBC,MAAM,IAAI;IACtB,MAAMC,QAAQ,GAAGD,MAAM,CAACC,QAAxB;IAEAH,MAAM,IAAK,eAAcE,MAAM,CAACE,QAAS,IAAzC;IAEAD,QAAQ,CAACF,OAAT,CAAiBI,OAAO,IAAI;MACxBL,MAAM,IAAI,CACL,gBAAeK,OAAO,CAACC,IAAK,GADvB,EAEL,SAAQD,OAAO,CAACE,MAAO,GAFlB,EAGL,aAAYZ,SAAS,CAACU,OAAO,CAACG,MAAR,IAAkB,EAAnB,CAAuB,GAHvC,EAIL,WAAUb,SAAS,CAACU,OAAO,CAACA,OAAR,IAAmB,EAApB,CAAwB,GAAEA,OAAO,CAACI,MAAR,GAAkB,KAAIJ,OAAO,CAACI,MAAO,GAArC,GAA0C,EAAG,MAJrF,EAKRC,IALQ,CAKH,GALG,CAAV;IAMH,CAPD;IASAV,MAAM,IAAI,SAAV;EAEH,CAhBD;EAkBAA,MAAM,IAAI,WAAV;EAEA,OAAOA,MAAP;AACH,CA5BD"},"metadata":{},"sourceType":"script"}