{"ast":null,"code":"'use strict';\n\nvar _declaredScope = require('eslint-module-utils/declaredScope');\n\nvar _declaredScope2 = _interopRequireDefault(_declaredScope);\n\nvar _ExportMap = require('../ExportMap');\n\nvar _ExportMap2 = _interopRequireDefault(_ExportMap);\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction message(deprecation) {\n  return 'Deprecated' + (deprecation.description ? ': ' + deprecation.description : '.');\n}\n\nfunction getDeprecation(metadata) {\n  if (!metadata || !metadata.doc) return;\n  return metadata.doc.tags.find(function (t) {\n    return t.title === 'deprecated';\n  });\n}\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: (0, _docsUrl2['default'])('no-deprecated')\n    },\n    schema: []\n  },\n  create: function () {\n    function create(context) {\n      var deprecated = new Map();\n      var namespaces = new Map();\n\n      function checkSpecifiers(node) {\n        if (node.type !== 'ImportDeclaration') return;\n        if (node.source == null) return; // local export, ignore\n\n        var imports = _ExportMap2['default'].get(node.source.value, context);\n\n        if (imports == null) return;\n        var moduleDeprecation = imports.doc && imports.doc.tags.find(function (t) {\n          return t.title === 'deprecated';\n        });\n\n        if (moduleDeprecation) {\n          context.report({\n            node: node,\n            message: message(moduleDeprecation)\n          });\n        }\n\n        if (imports.errors.length) {\n          imports.reportErrors(context, node);\n          return;\n        }\n\n        node.specifiers.forEach(function (im) {\n          var imported = void 0;\n          var local = void 0;\n\n          switch (im.type) {\n            case 'ImportNamespaceSpecifier':\n              {\n                if (!imports.size) return;\n                namespaces.set(im.local.name, imports);\n                return;\n              }\n\n            case 'ImportDefaultSpecifier':\n              imported = 'default';\n              local = im.local.name;\n              break;\n\n            case 'ImportSpecifier':\n              imported = im.imported.name;\n              local = im.local.name;\n              break;\n\n            default:\n              return;\n            // can't handle this one\n          } // unknown thing can't be deprecated\n\n\n          var exported = imports.get(imported);\n          if (exported == null) return; // capture import of deep namespace\n\n          if (exported.namespace) namespaces.set(local, exported.namespace);\n          var deprecation = getDeprecation(imports.get(imported));\n          if (!deprecation) return;\n          context.report({\n            node: im,\n            message: message(deprecation)\n          });\n          deprecated.set(local, deprecation);\n        });\n      }\n\n      return {\n        'Program': function () {\n          function Program(_ref) {\n            var body = _ref.body;\n            return body.forEach(checkSpecifiers);\n          }\n\n          return Program;\n        }(),\n        'Identifier': function () {\n          function Identifier(node) {\n            if (node.parent.type === 'MemberExpression' && node.parent.property === node) {\n              return; // handled by MemberExpression\n            } // ignore specifier identifiers\n\n\n            if (node.parent.type.slice(0, 6) === 'Import') return;\n            if (!deprecated.has(node.name)) return;\n            if ((0, _declaredScope2['default'])(context, node.name) !== 'module') return;\n            context.report({\n              node: node,\n              message: message(deprecated.get(node.name))\n            });\n          }\n\n          return Identifier;\n        }(),\n        'MemberExpression': function () {\n          function MemberExpression(dereference) {\n            if (dereference.object.type !== 'Identifier') return;\n            if (!namespaces.has(dereference.object.name)) return;\n            if ((0, _declaredScope2['default'])(context, dereference.object.name) !== 'module') return; // go deep\n\n            var namespace = namespaces.get(dereference.object.name);\n            var namepath = [dereference.object.name]; // while property is namespace and parent is member expression, keep validating\n\n            while (namespace instanceof _ExportMap2['default'] && dereference.type === 'MemberExpression') {\n              // ignore computed parts for now\n              if (dereference.computed) return;\n              var metadata = namespace.get(dereference.property.name);\n              if (!metadata) break;\n              var deprecation = getDeprecation(metadata);\n\n              if (deprecation) {\n                context.report({\n                  node: dereference.property,\n                  message: message(deprecation)\n                });\n              } // stash and pop\n\n\n              namepath.push(dereference.property.name);\n              namespace = metadata.namespace;\n              dereference = dereference.parent;\n            }\n          }\n\n          return MemberExpression;\n        }()\n      };\n    }\n\n    return create;\n  }()\n};","map":{"version":3,"mappings":"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","names":["message","deprecation","description","getDeprecation","metadata","doc","tags","find","t","title","module","exports","meta","type","docs","url","schema","create","context","deprecated","Map","namespaces","checkSpecifiers","node","source","imports","Exports","get","value","moduleDeprecation","report","errors","length","reportErrors","specifiers","forEach","im","imported","local","size","set","name","exported","namespace","body","parent","property","slice","has","dereference","object","namepath","computed","push"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\no-deprecated.js"],"sourcesContent":["import declaredScope from 'eslint-module-utils/declaredScope';\nimport Exports from '../ExportMap';\nimport docsUrl from '../docsUrl';\n\nfunction message(deprecation) {\n  return 'Deprecated' + (deprecation.description ? ': ' + deprecation.description : '.');\n}\n\nfunction getDeprecation(metadata) {\n  if (!metadata || !metadata.doc) return;\n\n  return metadata.doc.tags.find(t => t.title === 'deprecated');\n}\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: docsUrl('no-deprecated'),\n    },\n    schema: [],\n  },\n\n  create(context) {\n    const deprecated = new Map();\n    const namespaces = new Map();\n\n    function checkSpecifiers(node) {\n      if (node.type !== 'ImportDeclaration') return;\n      if (node.source == null) return; // local export, ignore\n\n      const imports = Exports.get(node.source.value, context);\n      if (imports == null) return;\n\n      const moduleDeprecation = imports.doc && imports.doc.tags.find(t => t.title === 'deprecated');\n      if (moduleDeprecation) {\n        context.report({ node, message: message(moduleDeprecation) });\n      }\n\n      if (imports.errors.length) {\n        imports.reportErrors(context, node);\n        return;\n      }\n\n      node.specifiers.forEach(function (im) {\n        let imported; let local;\n        switch (im.type) {\n\n\n        case 'ImportNamespaceSpecifier':{\n          if (!imports.size) return;\n          namespaces.set(im.local.name, imports);\n          return;\n        }\n\n        case 'ImportDefaultSpecifier':\n          imported = 'default';\n          local = im.local.name;\n          break;\n\n        case 'ImportSpecifier':\n          imported = im.imported.name;\n          local = im.local.name;\n          break;\n\n        default: return; // can't handle this one\n        }\n\n        // unknown thing can't be deprecated\n        const exported = imports.get(imported);\n        if (exported == null) return;\n\n        // capture import of deep namespace\n        if (exported.namespace) namespaces.set(local, exported.namespace);\n\n        const deprecation = getDeprecation(imports.get(imported));\n        if (!deprecation) return;\n\n        context.report({ node: im, message: message(deprecation) });\n\n        deprecated.set(local, deprecation);\n\n      });\n    }\n\n    return {\n      'Program': ({ body }) => body.forEach(checkSpecifiers),\n\n      'Identifier': function (node) {\n        if (node.parent.type === 'MemberExpression' && node.parent.property === node) {\n          return; // handled by MemberExpression\n        }\n\n        // ignore specifier identifiers\n        if (node.parent.type.slice(0, 6) === 'Import') return;\n\n        if (!deprecated.has(node.name)) return;\n\n        if (declaredScope(context, node.name) !== 'module') return;\n        context.report({\n          node,\n          message: message(deprecated.get(node.name)),\n        });\n      },\n\n      'MemberExpression': function (dereference) {\n        if (dereference.object.type !== 'Identifier') return;\n        if (!namespaces.has(dereference.object.name)) return;\n\n        if (declaredScope(context, dereference.object.name) !== 'module') return;\n\n        // go deep\n        let namespace = namespaces.get(dereference.object.name);\n        const namepath = [dereference.object.name];\n        // while property is namespace and parent is member expression, keep validating\n        while (namespace instanceof Exports &&\n               dereference.type === 'MemberExpression') {\n\n          // ignore computed parts for now\n          if (dereference.computed) return;\n\n          const metadata = namespace.get(dereference.property.name);\n\n          if (!metadata) break;\n          const deprecation = getDeprecation(metadata);\n\n          if (deprecation) {\n            context.report({ node: dereference.property, message: message(deprecation) });\n          }\n\n          // stash and pop\n          namepath.push(dereference.property.name);\n          namespace = metadata.namespace;\n          dereference = dereference.parent;\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}