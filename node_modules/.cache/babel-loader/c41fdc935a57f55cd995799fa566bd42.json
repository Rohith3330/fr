{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * It's an implementation of FileSystem interface which reads from the real file system, but write to the in-memory file system.\n *\n * @param memFileSystem\n * @param realFileSystem\n */\n\nfunction createPassiveFileSystem(memFileSystem, realFileSystem) {\n  function exists(path) {\n    return realFileSystem.exists(path) || memFileSystem.exists(path);\n  }\n\n  function readFile(path, encoding) {\n    const fsStats = realFileSystem.readStats(path);\n    const memStats = memFileSystem.readStats(path);\n\n    if (fsStats && memStats) {\n      return fsStats.mtimeMs > memStats.mtimeMs ? realFileSystem.readFile(path, encoding) : memFileSystem.readFile(path, encoding);\n    } else if (fsStats) {\n      return realFileSystem.readFile(path, encoding);\n    } else if (memStats) {\n      return memFileSystem.readFile(path, encoding);\n    }\n  }\n\n  function readDir(path) {\n    const fsDirents = realFileSystem.readDir(path);\n    const memDirents = memFileSystem.readDir(path); // merge list of dirents from fs and mem\n\n    return fsDirents.filter(fsDirent => !memDirents.some(memDirent => memDirent.name === fsDirent.name)).concat(memDirents);\n  }\n\n  function readStats(path) {\n    const fsStats = realFileSystem.readStats(path);\n    const memStats = memFileSystem.readStats(path);\n\n    if (fsStats && memStats) {\n      return fsStats.mtimeMs > memStats.mtimeMs ? fsStats : memStats;\n    } else if (fsStats) {\n      return fsStats;\n    } else if (memStats) {\n      return memStats;\n    }\n  }\n\n  return Object.assign(Object.assign({}, memFileSystem), {\n    exists(path) {\n      return exists(realFileSystem.realPath(path));\n    },\n\n    readFile(path, encoding) {\n      return readFile(realFileSystem.realPath(path), encoding);\n    },\n\n    readDir(path) {\n      return readDir(realFileSystem.realPath(path));\n    },\n\n    readStats(path) {\n      return readStats(realFileSystem.realPath(path));\n    },\n\n    realPath(path) {\n      return realFileSystem.realPath(path);\n    },\n\n    clearCache() {\n      realFileSystem.clearCache();\n    }\n\n  });\n}\n\nexports.createPassiveFileSystem = createPassiveFileSystem;","map":{"version":3,"names":["Object","defineProperty","exports","value","createPassiveFileSystem","memFileSystem","realFileSystem","exists","path","readFile","encoding","fsStats","readStats","memStats","mtimeMs","readDir","fsDirents","memDirents","filter","fsDirent","some","memDirent","name","concat","assign","realPath","clearCache"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/fork-ts-checker-webpack-plugin/lib/typescript-reporter/file-system/PassiveFileSystem.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * It's an implementation of FileSystem interface which reads from the real file system, but write to the in-memory file system.\n *\n * @param memFileSystem\n * @param realFileSystem\n */\nfunction createPassiveFileSystem(memFileSystem, realFileSystem) {\n    function exists(path) {\n        return realFileSystem.exists(path) || memFileSystem.exists(path);\n    }\n    function readFile(path, encoding) {\n        const fsStats = realFileSystem.readStats(path);\n        const memStats = memFileSystem.readStats(path);\n        if (fsStats && memStats) {\n            return fsStats.mtimeMs > memStats.mtimeMs\n                ? realFileSystem.readFile(path, encoding)\n                : memFileSystem.readFile(path, encoding);\n        }\n        else if (fsStats) {\n            return realFileSystem.readFile(path, encoding);\n        }\n        else if (memStats) {\n            return memFileSystem.readFile(path, encoding);\n        }\n    }\n    function readDir(path) {\n        const fsDirents = realFileSystem.readDir(path);\n        const memDirents = memFileSystem.readDir(path);\n        // merge list of dirents from fs and mem\n        return fsDirents\n            .filter((fsDirent) => !memDirents.some((memDirent) => memDirent.name === fsDirent.name))\n            .concat(memDirents);\n    }\n    function readStats(path) {\n        const fsStats = realFileSystem.readStats(path);\n        const memStats = memFileSystem.readStats(path);\n        if (fsStats && memStats) {\n            return fsStats.mtimeMs > memStats.mtimeMs ? fsStats : memStats;\n        }\n        else if (fsStats) {\n            return fsStats;\n        }\n        else if (memStats) {\n            return memStats;\n        }\n    }\n    return Object.assign(Object.assign({}, memFileSystem), { exists(path) {\n            return exists(realFileSystem.realPath(path));\n        },\n        readFile(path, encoding) {\n            return readFile(realFileSystem.realPath(path), encoding);\n        },\n        readDir(path) {\n            return readDir(realFileSystem.realPath(path));\n        },\n        readStats(path) {\n            return readStats(realFileSystem.realPath(path));\n        },\n        realPath(path) {\n            return realFileSystem.realPath(path);\n        },\n        clearCache() {\n            realFileSystem.clearCache();\n        } });\n}\nexports.createPassiveFileSystem = createPassiveFileSystem;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}