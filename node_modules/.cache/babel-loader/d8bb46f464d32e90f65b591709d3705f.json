{"ast":null,"code":"'use strict';\n\nconst CommentRemover = require('./lib/commentRemover');\n\nconst commentParser = require('./lib/commentParser');\n/** @typedef {object} Options\n *  @property {boolean=} removeAll\n *  @property {boolean=} removeAllButFirst\n *  @property {(s: string) => boolean=} remove\n */\n\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options} opts\n * @return {import('postcss').Plugin}\n */\n\n\nfunction pluginCreator() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const remover = new CommentRemover(opts);\n  const matcherCache = new Map();\n  const replacerCache = new Map();\n  /**\n   * @param {string} source\n   * @return {[number, number, number][]}\n   */\n\n  function matchesComments(source) {\n    if (matcherCache.has(source)) {\n      return matcherCache.get(source);\n    }\n\n    const result = commentParser(source).filter(_ref => {\n      let [type] = _ref;\n      return type;\n    });\n    matcherCache.set(source, result);\n    return result;\n  }\n  /**\n   * @param {string} source\n   * @param {(s: string) => string[]} space\n   * @return {string}\n   */\n\n\n  function replaceComments(source, space) {\n    let separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ' ';\n    const key = source + '@|@' + separator;\n\n    if (replacerCache.has(key)) {\n      return replacerCache.get(key);\n    }\n\n    const parsed = commentParser(source).reduce((value, _ref2) => {\n      let [type, start, end] = _ref2;\n      const contents = source.slice(start, end);\n\n      if (!type) {\n        return value + contents;\n      }\n\n      if (remover.canRemove(contents)) {\n        return value + separator;\n      }\n\n      return `${value}/*${contents}*/`;\n    }, '');\n    const result = space(parsed).join(' ');\n    replacerCache.set(key, result);\n    return result;\n  }\n\n  return {\n    postcssPlugin: 'postcss-discard-comments',\n\n    OnceExit(css, _ref3) {\n      let {\n        list\n      } = _ref3;\n      css.walk(node => {\n        if (node.type === 'comment' && remover.canRemove(node.text)) {\n          node.remove();\n          return;\n        }\n\n        if (typeof node.raws.between === 'string') {\n          node.raws.between = replaceComments(node.raws.between, list.space);\n        }\n\n        if (node.type === 'decl') {\n          if (node.raws.value && node.raws.value.raw) {\n            if (node.raws.value.value === node.value) {\n              node.value = replaceComments(node.raws.value.raw, list.space);\n            } else {\n              node.value = replaceComments(node.value, list.space);\n            }\n            /** @type {null | {value: string, raw: string}} */\n\n\n            node.raws.value = null;\n          }\n\n          if (node.raws.important) {\n            node.raws.important = replaceComments(node.raws.important, list.space);\n            const b = matchesComments(node.raws.important);\n            node.raws.important = b.length ? node.raws.important : '!important';\n          } else {\n            node.value = replaceComments(node.value, list.space);\n          }\n\n          return;\n        }\n\n        if (node.type === 'rule' && node.raws.selector && node.raws.selector.raw) {\n          node.raws.selector.raw = replaceComments(node.raws.selector.raw, list.space, '');\n          return;\n        }\n\n        if (node.type === 'atrule') {\n          if (node.raws.afterName) {\n            const commentsReplaced = replaceComments(node.raws.afterName, list.space);\n\n            if (!commentsReplaced.length) {\n              node.raws.afterName = commentsReplaced + ' ';\n            } else {\n              node.raws.afterName = ' ' + commentsReplaced + ' ';\n            }\n          }\n\n          if (node.raws.params && node.raws.params.raw) {\n            node.raws.params.raw = replaceComments(node.raws.params.raw, list.space);\n          }\n        }\n      });\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"names":["CommentRemover","require","commentParser","pluginCreator","opts","remover","matcherCache","Map","replacerCache","matchesComments","source","has","get","result","filter","type","set","replaceComments","space","separator","key","parsed","reduce","value","start","end","contents","slice","canRemove","join","postcssPlugin","OnceExit","css","list","walk","node","text","remove","raws","between","raw","important","b","length","selector","afterName","commentsReplaced","params","postcss","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-discard-comments/src/index.js"],"sourcesContent":["'use strict';\nconst CommentRemover = require('./lib/commentRemover');\nconst commentParser = require('./lib/commentParser');\n\n/** @typedef {object} Options\n *  @property {boolean=} removeAll\n *  @property {boolean=} removeAllButFirst\n *  @property {(s: string) => boolean=} remove\n */\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options} opts\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator(opts = {}) {\n  const remover = new CommentRemover(opts);\n  const matcherCache = new Map();\n  const replacerCache = new Map();\n\n  /**\n   * @param {string} source\n   * @return {[number, number, number][]}\n   */\n  function matchesComments(source) {\n    if (matcherCache.has(source)) {\n      return matcherCache.get(source);\n    }\n\n    const result = commentParser(source).filter(([type]) => type);\n\n    matcherCache.set(source, result);\n\n    return result;\n  }\n\n  /**\n   * @param {string} source\n   * @param {(s: string) => string[]} space\n   * @return {string}\n   */\n  function replaceComments(source, space, separator = ' ') {\n    const key = source + '@|@' + separator;\n\n    if (replacerCache.has(key)) {\n      return replacerCache.get(key);\n    }\n    const parsed = commentParser(source).reduce((value, [type, start, end]) => {\n      const contents = source.slice(start, end);\n\n      if (!type) {\n        return value + contents;\n      }\n\n      if (remover.canRemove(contents)) {\n        return value + separator;\n      }\n\n      return `${value}/*${contents}*/`;\n    }, '');\n\n    const result = space(parsed).join(' ');\n\n    replacerCache.set(key, result);\n\n    return result;\n  }\n\n  return {\n    postcssPlugin: 'postcss-discard-comments',\n\n    OnceExit(css, { list }) {\n      css.walk((node) => {\n        if (node.type === 'comment' && remover.canRemove(node.text)) {\n          node.remove();\n\n          return;\n        }\n\n        if (typeof node.raws.between === 'string') {\n          node.raws.between = replaceComments(node.raws.between, list.space);\n        }\n\n        if (node.type === 'decl') {\n          if (node.raws.value && node.raws.value.raw) {\n            if (node.raws.value.value === node.value) {\n              node.value = replaceComments(node.raws.value.raw, list.space);\n            } else {\n              node.value = replaceComments(node.value, list.space);\n            }\n\n            /** @type {null | {value: string, raw: string}} */ (\n              node.raws.value\n            ) = null;\n          }\n\n          if (node.raws.important) {\n            node.raws.important = replaceComments(\n              node.raws.important,\n              list.space\n            );\n\n            const b = matchesComments(node.raws.important);\n\n            node.raws.important = b.length ? node.raws.important : '!important';\n          } else {\n            node.value = replaceComments(node.value, list.space);\n          }\n\n          return;\n        }\n\n        if (\n          node.type === 'rule' &&\n          node.raws.selector &&\n          node.raws.selector.raw\n        ) {\n          node.raws.selector.raw = replaceComments(\n            node.raws.selector.raw,\n            list.space,\n            ''\n          );\n\n          return;\n        }\n\n        if (node.type === 'atrule') {\n          if (node.raws.afterName) {\n            const commentsReplaced = replaceComments(\n              node.raws.afterName,\n              list.space\n            );\n\n            if (!commentsReplaced.length) {\n              node.raws.afterName = commentsReplaced + ' ';\n            } else {\n              node.raws.afterName = ' ' + commentsReplaced + ' ';\n            }\n          }\n\n          if (node.raws.params && node.raws.params.raw) {\n            node.raws.params.raw = replaceComments(\n              node.raws.params.raw,\n              list.space\n            );\n          }\n        }\n      });\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}