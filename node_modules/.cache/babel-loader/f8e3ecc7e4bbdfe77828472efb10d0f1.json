{"ast":null,"code":"'use strict';\n\nconst {\n  unit\n} = require('postcss-value-parser');\n\nconst {\n  getArguments\n} = require('cssnano-utils');\n\nconst addSpace = require('../lib/addSpace');\n\nconst getValue = require('../lib/getValue'); // transition: [ none | <single-transition-property> ] || <time> || <single-transition-timing-function> || <time>\n\n\nconst timingFunctions = new Set(['ease', 'linear', 'ease-in', 'ease-out', 'ease-in-out', 'step-start', 'step-end']);\n/**\n * @param {import('postcss-value-parser').Node[][]} args\n * @return {import('postcss-value-parser').Node[][]}\n */\n\nfunction normalize(args) {\n  const list = [];\n\n  for (const arg of args) {\n    /** @type {Record<string, import('postcss-value-parser').Node[]>} */\n    let state = {\n      timingFunction: [],\n      property: [],\n      time1: [],\n      time2: []\n    };\n    arg.forEach(node => {\n      const {\n        type,\n        value\n      } = node;\n\n      if (type === 'space') {\n        return;\n      }\n\n      if (type === 'function' && new Set(['steps', 'cubic-bezier']).has(value.toLowerCase())) {\n        state.timingFunction = [...state.timingFunction, node, addSpace()];\n      } else if (unit(value)) {\n        if (!state.time1.length) {\n          state.time1 = [...state.time1, node, addSpace()];\n        } else {\n          state.time2 = [...state.time2, node, addSpace()];\n        }\n      } else if (timingFunctions.has(value.toLowerCase())) {\n        state.timingFunction = [...state.timingFunction, node, addSpace()];\n      } else {\n        state.property = [...state.property, node, addSpace()];\n      }\n    });\n    list.push([...state.property, ...state.time1, ...state.timingFunction, ...state.time2]);\n  }\n\n  return list;\n}\n/**\n * @param {import('postcss-value-parser').ParsedValue} parsed\n * @return {string}\n */\n\n\nmodule.exports = function normalizeTransition(parsed) {\n  const values = normalize(getArguments(parsed));\n  return getValue(values);\n};","map":{"version":3,"names":["unit","require","getArguments","addSpace","getValue","timingFunctions","Set","normalize","args","list","arg","state","timingFunction","property","time1","time2","forEach","node","type","value","has","toLowerCase","length","push","module","exports","normalizeTransition","parsed","values"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-ordered-values/src/rules/transition.js"],"sourcesContent":["'use strict';\nconst { unit } = require('postcss-value-parser');\nconst { getArguments } = require('cssnano-utils');\nconst addSpace = require('../lib/addSpace');\nconst getValue = require('../lib/getValue');\n\n// transition: [ none | <single-transition-property> ] || <time> || <single-transition-timing-function> || <time>\n\nconst timingFunctions = new Set([\n  'ease',\n  'linear',\n  'ease-in',\n  'ease-out',\n  'ease-in-out',\n  'step-start',\n  'step-end',\n]);\n\n/**\n * @param {import('postcss-value-parser').Node[][]} args\n * @return {import('postcss-value-parser').Node[][]}\n */\nfunction normalize(args) {\n  const list = [];\n  for (const arg of args) {\n    /** @type {Record<string, import('postcss-value-parser').Node[]>} */\n    let state = {\n      timingFunction: [],\n      property: [],\n      time1: [],\n      time2: [],\n    };\n\n    arg.forEach((node) => {\n      const { type, value } = node;\n\n      if (type === 'space') {\n        return;\n      }\n\n      if (\n        type === 'function' &&\n        new Set(['steps', 'cubic-bezier']).has(value.toLowerCase())\n      ) {\n        state.timingFunction = [...state.timingFunction, node, addSpace()];\n      } else if (unit(value)) {\n        if (!state.time1.length) {\n          state.time1 = [...state.time1, node, addSpace()];\n        } else {\n          state.time2 = [...state.time2, node, addSpace()];\n        }\n      } else if (timingFunctions.has(value.toLowerCase())) {\n        state.timingFunction = [...state.timingFunction, node, addSpace()];\n      } else {\n        state.property = [...state.property, node, addSpace()];\n      }\n    });\n\n    list.push([\n      ...state.property,\n      ...state.time1,\n      ...state.timingFunction,\n      ...state.time2,\n    ]);\n  }\n  return list;\n}\n/**\n * @param {import('postcss-value-parser').ParsedValue} parsed\n * @return {string}\n */\nmodule.exports = function normalizeTransition(parsed) {\n  const values = normalize(getArguments(parsed));\n\n  return getValue(values);\n};\n"],"mappings":"AAAA;;AACA,MAAM;EAAEA;AAAF,IAAWC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAM;EAAEC;AAAF,IAAmBD,OAAO,CAAC,eAAD,CAAhC;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,iBAAD,CAAxB,C,CAEA;;;AAEA,MAAMI,eAAe,GAAG,IAAIC,GAAJ,CAAQ,CAC9B,MAD8B,EAE9B,QAF8B,EAG9B,SAH8B,EAI9B,UAJ8B,EAK9B,aAL8B,EAM9B,YAN8B,EAO9B,UAP8B,CAAR,CAAxB;AAUA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;EACvB,MAAMC,IAAI,GAAG,EAAb;;EACA,KAAK,MAAMC,GAAX,IAAkBF,IAAlB,EAAwB;IACtB;IACA,IAAIG,KAAK,GAAG;MACVC,cAAc,EAAE,EADN;MAEVC,QAAQ,EAAE,EAFA;MAGVC,KAAK,EAAE,EAHG;MAIVC,KAAK,EAAE;IAJG,CAAZ;IAOAL,GAAG,CAACM,OAAJ,CAAaC,IAAD,IAAU;MACpB,MAAM;QAAEC,IAAF;QAAQC;MAAR,IAAkBF,IAAxB;;MAEA,IAAIC,IAAI,KAAK,OAAb,EAAsB;QACpB;MACD;;MAED,IACEA,IAAI,KAAK,UAAT,IACA,IAAIZ,GAAJ,CAAQ,CAAC,OAAD,EAAU,cAAV,CAAR,EAAmCc,GAAnC,CAAuCD,KAAK,CAACE,WAAN,EAAvC,CAFF,EAGE;QACAV,KAAK,CAACC,cAAN,GAAuB,CAAC,GAAGD,KAAK,CAACC,cAAV,EAA0BK,IAA1B,EAAgCd,QAAQ,EAAxC,CAAvB;MACD,CALD,MAKO,IAAIH,IAAI,CAACmB,KAAD,CAAR,EAAiB;QACtB,IAAI,CAACR,KAAK,CAACG,KAAN,CAAYQ,MAAjB,EAAyB;UACvBX,KAAK,CAACG,KAAN,GAAc,CAAC,GAAGH,KAAK,CAACG,KAAV,EAAiBG,IAAjB,EAAuBd,QAAQ,EAA/B,CAAd;QACD,CAFD,MAEO;UACLQ,KAAK,CAACI,KAAN,GAAc,CAAC,GAAGJ,KAAK,CAACI,KAAV,EAAiBE,IAAjB,EAAuBd,QAAQ,EAA/B,CAAd;QACD;MACF,CANM,MAMA,IAAIE,eAAe,CAACe,GAAhB,CAAoBD,KAAK,CAACE,WAAN,EAApB,CAAJ,EAA8C;QACnDV,KAAK,CAACC,cAAN,GAAuB,CAAC,GAAGD,KAAK,CAACC,cAAV,EAA0BK,IAA1B,EAAgCd,QAAQ,EAAxC,CAAvB;MACD,CAFM,MAEA;QACLQ,KAAK,CAACE,QAAN,GAAiB,CAAC,GAAGF,KAAK,CAACE,QAAV,EAAoBI,IAApB,EAA0Bd,QAAQ,EAAlC,CAAjB;MACD;IACF,CAvBD;IAyBAM,IAAI,CAACc,IAAL,CAAU,CACR,GAAGZ,KAAK,CAACE,QADD,EAER,GAAGF,KAAK,CAACG,KAFD,EAGR,GAAGH,KAAK,CAACC,cAHD,EAIR,GAAGD,KAAK,CAACI,KAJD,CAAV;EAMD;;EACD,OAAON,IAAP;AACD;AACD;AACA;AACA;AACA;;;AACAe,MAAM,CAACC,OAAP,GAAiB,SAASC,mBAAT,CAA6BC,MAA7B,EAAqC;EACpD,MAAMC,MAAM,GAAGrB,SAAS,CAACL,YAAY,CAACyB,MAAD,CAAb,CAAxB;EAEA,OAAOvB,QAAQ,CAACwB,MAAD,CAAf;AACD,CAJD"},"metadata":{},"sourceType":"script"}