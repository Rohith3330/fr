{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rohith\\\\Pictures\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport { getCoordsDataType } from './shader_compiler';\nexport var CumOpType;\n(function (CumOpType) {\n  CumOpType[\"Prod\"] = \"*\";\n  CumOpType[\"Sum\"] = \"+\";\n})(CumOpType || (CumOpType = {}));\nexport var CumProgram = function CumProgram(op, outputShape, exclusive, reverse) {\n  _classCallCheck(this, CumProgram);\n  this.op = op;\n  this.outputShape = outputShape;\n  this.variableNames = ['x'];\n  this.customUniforms = [{\n    name: 'index',\n    type: 'float'\n  }];\n  var rank = this.outputShape.length;\n  var initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n  var val = exclusive ? initVal : \"getX(\".concat(getCoords(rank, 'coords', this.op), \")\");\n  var length = this.outputShape[this.outputShape.length - 1];\n  var condition = '';\n  var idxString = '';\n  // When exclusive is set, the cum op becomes roll op that copies the\n  // value from the previous index based on the direction specified by the\n  // reverse flag.\n  if (exclusive) {\n    condition = reverse ? \"end != \".concat(length - 1) : 'end != 0';\n    idxString = reverse ? 'end + 1' : 'end - 1';\n  } else {\n    condition = reverse ? \"end + pow2 < \".concat(length) : 'end >= pow2';\n    idxString = reverse ? 'end + pow2' : 'end - pow2';\n  }\n  this.userCode = \"\\n      void main() {\\n        \".concat(getCoordsDataType(rank), \" coords = getOutputCoords();\\n        int end = \").concat(getFinalCoord(rank, 'coords', this.op), \";\\n        float val = \").concat(val, \";\\n        int pow2 = int(pow(2.0, index));\\n        if (\").concat(condition, \") {\\n          int idx = \").concat(idxString, \";\\n          \").concat(getFinalCoord(rank, 'coords', this.op), \" = idx;\\n          val \").concat(this.op, \"= getX(\").concat(getCoords(rank, 'coords', this.op), \");\\n        }\\n        setOutput(val);\\n      }\\n    \");\n};\nfunction getCoords(rank, name, op) {\n  if (rank === 1) {\n    return \"\".concat(name);\n  } else if (rank === 2) {\n    return \"\".concat(name, \".x, \").concat(name, \".y\");\n  } else if (rank === 3) {\n    return \"\".concat(name, \".x, \").concat(name, \".y, \").concat(name, \".z\");\n  } else if (rank === 4) {\n    return \"\".concat(name, \".x, \").concat(name, \".y, \").concat(name, \".z, \").concat(name, \".w\");\n  } else {\n    throw new Error(\"Cumulative \".concat(op, \" for rank \").concat(rank, \" is not yet supported\"));\n  }\n}\nfunction getFinalCoord(rank, name, op) {\n  if (rank === 1) {\n    return \"\".concat(name);\n  } else if (rank === 2) {\n    return \"\".concat(name, \".y\");\n  } else if (rank === 3) {\n    return \"\".concat(name, \".z\");\n  } else if (rank === 4) {\n    return \"\".concat(name, \".w\");\n  } else {\n    throw new Error(\"Cumulative \".concat(op, \" for rank \").concat(rank, \" is not yet supported\"));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}