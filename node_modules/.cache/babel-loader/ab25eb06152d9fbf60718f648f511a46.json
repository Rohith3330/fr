{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = readFromFixture;\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _node = require('when/node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * reads the text contents of <name>.txt in the fixtures folder\n * relative to the caller module's test file\n * @param  {String} name - the name of the fixture you want to read\n * @return {Promise<String>} - the retrieved fixture's file contents\n */\n\n\nfunction readFromFixture(dirname, name) {\n  return _node2.default.call(_fs2.default.readFile, _path2.default.join(dirname, 'fixtures/' + name + '.txt'), 'utf8').then(function (contents) {\n    return contents.replace(/\\r\\n/g, '\\n').trim();\n  });\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;;kBAUwBA;;AAVxB;;;;AACA;;;;AACA;;;;;;;;;AAEA;;;;;;;;AAMe,SAASA,eAAT,CAAyBC,OAAzB,EAAkCC,IAAlC,EAAwC;EACrD,OAAOC,eACJC,IADID,CACCE,aAAGC,QADJH,EACcI,eAAKC,IAALD,CAAUN,OAAVM,gBAA+BL,IAA/B,UADdC,EAC0D,MAD1DA,EAEJM,IAFIN,CAEC;IAAA,OAAYO,SAASC,OAATD,CAAiB,OAAjBA,EAA0B,IAA1BA,EAAgCE,IAAhCF,EAAZ;EAFD,EAAP;AAGD","names":["readFromFixture","dirname","name","node","call","fs","readFile","path","join","then","contents","replace","trim"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\common-tags\\src\\utils\\readFromFixture\\readFromFixture.js"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport node from 'when/node';\n\n/**\n * reads the text contents of <name>.txt in the fixtures folder\n * relative to the caller module's test file\n * @param  {String} name - the name of the fixture you want to read\n * @return {Promise<String>} - the retrieved fixture's file contents\n */\nexport default function readFromFixture(dirname, name) {\n  return node\n    .call(fs.readFile, path.join(dirname, `fixtures/${name}.txt`), 'utf8')\n    .then(contents => contents.replace(/\\r\\n/g, '\\n').trim());\n}\n"]},"metadata":{},"sourceType":"script"}