{"ast":null,"code":"/* eslint-disable no-param-reassign */\nfunction isInside(scope, regex) {\n  if (!scope.hub.file.opts) {\n    return true;\n  }\n\n  const filename = scope.hub.file.opts.filename;\n\n  if (!filename) {\n    return true;\n  }\n\n  if (!regex) {\n    return false;\n  }\n\n  return regex.test(filename);\n} // Remove a specific path.\n\n\nexport default function remove(path, globalOptions, options) {\n  const {\n    visitedKey,\n    unsafeWrapTemplate,\n    wrapTemplate,\n    mode,\n    ignoreFilenames,\n    types\n  } = globalOptions;\n\n  if (ignoreFilenames && isInside(path.scope, ignoreFilenames)) {\n    return;\n  } // Prevent infinity loop.\n\n\n  if (path.node[visitedKey]) {\n    return;\n  }\n\n  path.node[visitedKey] = true;\n\n  if (mode === 'remove') {\n    // remove() crash in some conditions.\n    if (path.parentPath.type === 'ConditionalExpression') {\n      path.replaceWith(types.unaryExpression('void', types.numericLiteral(0)));\n    } else {\n      path.remove();\n    }\n\n    return;\n  }\n\n  if (mode === 'wrap' || mode === 'unsafe-wrap') {\n    switch (options.type) {\n      // This is legacy, we do not optimize it.\n      case 'createClass':\n        break;\n      // Inspired from babel-plugin-transform-class-properties.\n\n      case 'class static':\n        {\n          let ref;\n          let pathClassDeclaration = options.pathClassDeclaration;\n\n          if (!pathClassDeclaration.isClassExpression() && pathClassDeclaration.node.id) {\n            ref = pathClassDeclaration.node.id;\n          } else {\n            // Class without name not supported\n            return;\n          }\n\n          const node = types.expressionStatement(types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value)); // We need to append the node at the parent level in this case.\n\n          if (pathClassDeclaration.parentPath.isExportDeclaration()) {\n            pathClassDeclaration = pathClassDeclaration.parentPath;\n          }\n\n          pathClassDeclaration.insertAfter(node);\n          path.remove();\n          break;\n        }\n\n      case 'assign':\n        if (mode === 'unsafe-wrap') {\n          path.replaceWith(unsafeWrapTemplate({\n            NODE: path.node\n          }));\n        } else {\n          path.replaceWith(wrapTemplate({\n            LEFT: path.node.left,\n            RIGHT: path.node.right\n          }));\n        }\n\n        path.node[visitedKey] = true;\n        break;\n\n      case 'declarator':\n        path.replaceWith(wrapTemplate({\n          LEFT: path.node.id,\n          RIGHT: path.node.init\n        }, {\n          as: 'variableDeclarator'\n        }));\n        path.node[visitedKey] = true;\n        break;\n\n      default:\n        break;\n    }\n\n    return;\n  }\n\n  throw new Error(`transform-react-remove-prop-type: unsupported mode ${mode}.`);\n}","map":{"version":3,"names":["isInside","scope","regex","hub","file","opts","filename","test","remove","path","globalOptions","options","visitedKey","unsafeWrapTemplate","wrapTemplate","mode","ignoreFilenames","types","node","parentPath","type","replaceWith","unaryExpression","numericLiteral","ref","pathClassDeclaration","isClassExpression","id","expressionStatement","assignmentExpression","memberExpression","key","value","isExportDeclaration","insertAfter","NODE","LEFT","left","RIGHT","right","init","as","Error"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/babel-plugin-transform-react-remove-prop-types/src/remove.js"],"sourcesContent":["/* eslint-disable no-param-reassign */\n\nfunction isInside(scope, regex) {\n  if (!scope.hub.file.opts) {\n    return true\n  }\n\n  const filename = scope.hub.file.opts.filename\n\n  if (!filename) {\n    return true\n  }\n\n  if (!regex) {\n    return false\n  }\n\n  return regex.test(filename)\n}\n\n// Remove a specific path.\nexport default function remove(path, globalOptions, options) {\n  const {\n    visitedKey,\n    unsafeWrapTemplate,\n    wrapTemplate,\n    mode,\n    ignoreFilenames,\n    types,\n  } = globalOptions\n\n  if (ignoreFilenames && isInside(path.scope, ignoreFilenames)) {\n    return\n  }\n\n  // Prevent infinity loop.\n  if (path.node[visitedKey]) {\n    return\n  }\n\n  path.node[visitedKey] = true\n\n  if (mode === 'remove') {\n    // remove() crash in some conditions.\n    if (path.parentPath.type === 'ConditionalExpression') {\n      path.replaceWith(types.unaryExpression('void', types.numericLiteral(0)))\n    } else {\n      path.remove()\n    }\n\n    return\n  }\n\n  if (mode === 'wrap' || mode === 'unsafe-wrap') {\n    switch (options.type) {\n      // This is legacy, we do not optimize it.\n      case 'createClass':\n        break\n\n      // Inspired from babel-plugin-transform-class-properties.\n      case 'class static': {\n        let ref\n        let pathClassDeclaration = options.pathClassDeclaration\n\n        if (!pathClassDeclaration.isClassExpression() && pathClassDeclaration.node.id) {\n          ref = pathClassDeclaration.node.id\n        } else {\n          // Class without name not supported\n          return\n        }\n\n        const node = types.expressionStatement(\n          types.assignmentExpression(\n            '=',\n            types.memberExpression(ref, path.node.key),\n            path.node.value\n          )\n        )\n\n        // We need to append the node at the parent level in this case.\n        if (pathClassDeclaration.parentPath.isExportDeclaration()) {\n          pathClassDeclaration = pathClassDeclaration.parentPath\n        }\n        pathClassDeclaration.insertAfter(node)\n        path.remove()\n        break\n      }\n\n      case 'assign':\n        if (mode === 'unsafe-wrap') {\n          path.replaceWith(\n            unsafeWrapTemplate({\n              NODE: path.node,\n            })\n          )\n        } else {\n          path.replaceWith(\n            wrapTemplate({\n              LEFT: path.node.left,\n              RIGHT: path.node.right,\n            })\n          )\n        }\n        path.node[visitedKey] = true\n        break\n\n      case 'declarator':\n        path.replaceWith(\n          wrapTemplate(\n            {\n              LEFT: path.node.id,\n              RIGHT: path.node.init,\n            },\n            { as: 'variableDeclarator' }\n          )\n        )\n        path.node[visitedKey] = true\n        break\n\n      default:\n        break\n    }\n\n    return\n  }\n\n  throw new Error(`transform-react-remove-prop-type: unsupported mode ${mode}.`)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}