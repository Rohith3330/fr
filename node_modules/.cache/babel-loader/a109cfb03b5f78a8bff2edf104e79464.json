{"ast":null,"code":"import { dotCase } from \".\";\nvar TEST_CASES = [[\"\", \"\"], [\"test\", \"test\"], [\"test string\", \"test.string\"], [\"Test String\", \"test.string\"], [\"dot.case\", \"dot.case\"], [\"path/case\", \"path.case\"], [\"TestV2\", \"test.v2\"], [\"version 1.2.10\", \"version.1.2.10\"], [\"version 1.21.0\", \"version.1.21.0\"]];\ndescribe(\"dot case\", function () {\n  var _loop_1 = function (input, result) {\n    it(input + \" -> \" + result, function () {\n      expect(dotCase(input)).toEqual(result);\n    });\n  };\n\n  for (var _i = 0, TEST_CASES_1 = TEST_CASES; _i < TEST_CASES_1.length; _i++) {\n    var _a = TEST_CASES_1[_i],\n        input = _a[0],\n        result = _a[1];\n\n    _loop_1(input, result);\n  }\n});","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,GAAxB;AAEA,IAAMC,UAAU,GAAuB,CACrC,CAAC,EAAD,EAAK,EAAL,CADqC,EAErC,CAAC,MAAD,EAAS,MAAT,CAFqC,EAGrC,CAAC,aAAD,EAAgB,aAAhB,CAHqC,EAIrC,CAAC,aAAD,EAAgB,aAAhB,CAJqC,EAKrC,CAAC,UAAD,EAAa,UAAb,CALqC,EAMrC,CAAC,WAAD,EAAc,WAAd,CANqC,EAOrC,CAAC,QAAD,EAAW,SAAX,CAPqC,EAQrC,CAAC,gBAAD,EAAmB,gBAAnB,CARqC,EASrC,CAAC,gBAAD,EAAmB,gBAAnB,CATqC,CAAvC;AAYAC,QAAQ,CAAC,UAAD,EAAa;0BACPC,OAAOC,QAAM;IACvBC,EAAE,CAAIF,KAAK,SAAL,GAAYC,MAAhB,EAA0B;MAC1BE,MAAM,CAACN,OAAO,CAACG,KAAD,CAAR,CAAN,CAAuBI,OAAvB,CAA+BH,MAA/B;IACD,CAFC,CAAF;;;EADF,KAA8B,qCAA9B,EAA8BI,wBAA9B,EAA8BA,IAA9B,EAAwC;IAA7B;IAAA,IAACL,KAAK,QAAN;IAAA,IAAQC,MAAM,QAAd;;YAACD,OAAOC;EAIlB;AACF,CANO,CAAR","names":["dotCase","TEST_CASES","describe","input","result","it","expect","toEqual","_i"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\dot-case\\src\\index.spec.ts"],"sourcesContent":["import { dotCase } from \".\";\n\nconst TEST_CASES: [string, string][] = [\n  [\"\", \"\"],\n  [\"test\", \"test\"],\n  [\"test string\", \"test.string\"],\n  [\"Test String\", \"test.string\"],\n  [\"dot.case\", \"dot.case\"],\n  [\"path/case\", \"path.case\"],\n  [\"TestV2\", \"test.v2\"],\n  [\"version 1.2.10\", \"version.1.2.10\"],\n  [\"version 1.21.0\", \"version.1.21.0\"],\n];\n\ndescribe(\"dot case\", () => {\n  for (const [input, result] of TEST_CASES) {\n    it(`${input} -> ${result}`, () => {\n      expect(dotCase(input)).toEqual(result);\n    });\n  }\n});\n"]},"metadata":{},"sourceType":"module"}