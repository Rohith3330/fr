{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.extract = extract;\nexports.parse = parse;\nexports.parseWithComments = parseWithComments;\nexports.print = print;\nexports.strip = strip;\n\nfunction _os() {\n  const data = require('os');\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _detectNewline() {\n  const data = _interopRequireDefault(require('detect-newline'));\n\n  _detectNewline = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst commentEndRe = /\\*\\/$/;\nconst commentStartRe = /^\\/\\*\\*/;\nconst docblockRe = /^\\s*(\\/\\*\\*?(.|\\r?\\n)*?\\*\\/)/;\nconst lineCommentRe = /(^|\\s+)\\/\\/([^\\r\\n]*)/g;\nconst ltrimNewlineRe = /^(\\r?\\n)+/;\nconst multilineRe = /(?:^|\\r?\\n) *(@[^\\r\\n]*?) *\\r?\\n *(?![^@\\r\\n]*\\/\\/[^]*)([^@\\r\\n\\s][^@\\r\\n]+?) *\\r?\\n/g;\nconst propertyRe = /(?:^|\\r?\\n) *@(\\S+) *([^\\r\\n]*)/g;\nconst stringStartRe = /(\\r?\\n|^) *\\* ?/g;\nconst STRING_ARRAY = [];\n\nfunction extract(contents) {\n  const match = contents.match(docblockRe);\n  return match ? match[0].trimLeft() : '';\n}\n\nfunction strip(contents) {\n  const match = contents.match(docblockRe);\n  return match && match[0] ? contents.substring(match[0].length) : contents;\n}\n\nfunction parse(docblock) {\n  return parseWithComments(docblock).pragmas;\n}\n\nfunction parseWithComments(docblock) {\n  const line = (0, _detectNewline().default)(docblock) || _os().EOL;\n\n  docblock = docblock.replace(commentStartRe, '').replace(commentEndRe, '').replace(stringStartRe, '$1'); // Normalize multi-line directives\n\n  let prev = '';\n\n  while (prev !== docblock) {\n    prev = docblock;\n    docblock = docblock.replace(multilineRe, `${line}$1 $2${line}`);\n  }\n\n  docblock = docblock.replace(ltrimNewlineRe, '').trimRight();\n  const result = Object.create(null);\n  const comments = docblock.replace(propertyRe, '').replace(ltrimNewlineRe, '').trimRight();\n  let match;\n\n  while (match = propertyRe.exec(docblock)) {\n    // strip linecomments from pragmas\n    const nextPragma = match[2].replace(lineCommentRe, '');\n\n    if (typeof result[match[1]] === 'string' || Array.isArray(result[match[1]])) {\n      result[match[1]] = STRING_ARRAY.concat(result[match[1]], nextPragma);\n    } else {\n      result[match[1]] = nextPragma;\n    }\n  }\n\n  return {\n    comments,\n    pragmas: result\n  };\n}\n\nfunction print(_ref) {\n  let {\n    comments = '',\n    pragmas = {}\n  } = _ref;\n\n  const line = (0, _detectNewline().default)(comments) || _os().EOL;\n\n  const head = '/**';\n  const start = ' *';\n  const tail = ' */';\n  const keys = Object.keys(pragmas);\n  const printedObject = keys.map(key => printKeyValues(key, pragmas[key])).reduce((arr, next) => arr.concat(next), []).map(keyValue => start + ' ' + keyValue + line).join('');\n\n  if (!comments) {\n    if (keys.length === 0) {\n      return '';\n    }\n\n    if (keys.length === 1 && !Array.isArray(pragmas[keys[0]])) {\n      const value = pragmas[keys[0]];\n      return `${head} ${printKeyValues(keys[0], value)[0]}${tail}`;\n    }\n  }\n\n  const printedComments = comments.split(line).map(textLine => `${start} ${textLine}`).join(line) + line;\n  return head + line + (comments ? printedComments : '') + (comments && keys.length ? start + line : '') + printedObject + tail;\n}\n\nfunction printKeyValues(key, valueOrArray) {\n  return STRING_ARRAY.concat(valueOrArray).map(value => `@${key} ${value}`.trim());\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","extract","parse","parseWithComments","print","strip","_os","data","require","_detectNewline","_interopRequireDefault","obj","__esModule","default","commentEndRe","commentStartRe","docblockRe","lineCommentRe","ltrimNewlineRe","multilineRe","propertyRe","stringStartRe","STRING_ARRAY","contents","match","trimLeft","substring","length","docblock","pragmas","line","EOL","replace","prev","trimRight","result","create","comments","exec","nextPragma","Array","isArray","concat","head","start","tail","keys","printedObject","map","key","printKeyValues","reduce","arr","next","keyValue","join","printedComments","split","textLine","valueOrArray","trim"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jest-docblock/build/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.extract = extract;\nexports.parse = parse;\nexports.parseWithComments = parseWithComments;\nexports.print = print;\nexports.strip = strip;\n\nfunction _os() {\n  const data = require('os');\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _detectNewline() {\n  const data = _interopRequireDefault(require('detect-newline'));\n\n  _detectNewline = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst commentEndRe = /\\*\\/$/;\nconst commentStartRe = /^\\/\\*\\*/;\nconst docblockRe = /^\\s*(\\/\\*\\*?(.|\\r?\\n)*?\\*\\/)/;\nconst lineCommentRe = /(^|\\s+)\\/\\/([^\\r\\n]*)/g;\nconst ltrimNewlineRe = /^(\\r?\\n)+/;\nconst multilineRe =\n  /(?:^|\\r?\\n) *(@[^\\r\\n]*?) *\\r?\\n *(?![^@\\r\\n]*\\/\\/[^]*)([^@\\r\\n\\s][^@\\r\\n]+?) *\\r?\\n/g;\nconst propertyRe = /(?:^|\\r?\\n) *@(\\S+) *([^\\r\\n]*)/g;\nconst stringStartRe = /(\\r?\\n|^) *\\* ?/g;\nconst STRING_ARRAY = [];\n\nfunction extract(contents) {\n  const match = contents.match(docblockRe);\n  return match ? match[0].trimLeft() : '';\n}\n\nfunction strip(contents) {\n  const match = contents.match(docblockRe);\n  return match && match[0] ? contents.substring(match[0].length) : contents;\n}\n\nfunction parse(docblock) {\n  return parseWithComments(docblock).pragmas;\n}\n\nfunction parseWithComments(docblock) {\n  const line = (0, _detectNewline().default)(docblock) || _os().EOL;\n\n  docblock = docblock\n    .replace(commentStartRe, '')\n    .replace(commentEndRe, '')\n    .replace(stringStartRe, '$1'); // Normalize multi-line directives\n\n  let prev = '';\n\n  while (prev !== docblock) {\n    prev = docblock;\n    docblock = docblock.replace(multilineRe, `${line}$1 $2${line}`);\n  }\n\n  docblock = docblock.replace(ltrimNewlineRe, '').trimRight();\n  const result = Object.create(null);\n  const comments = docblock\n    .replace(propertyRe, '')\n    .replace(ltrimNewlineRe, '')\n    .trimRight();\n  let match;\n\n  while ((match = propertyRe.exec(docblock))) {\n    // strip linecomments from pragmas\n    const nextPragma = match[2].replace(lineCommentRe, '');\n\n    if (\n      typeof result[match[1]] === 'string' ||\n      Array.isArray(result[match[1]])\n    ) {\n      result[match[1]] = STRING_ARRAY.concat(result[match[1]], nextPragma);\n    } else {\n      result[match[1]] = nextPragma;\n    }\n  }\n\n  return {\n    comments,\n    pragmas: result\n  };\n}\n\nfunction print({comments = '', pragmas = {}}) {\n  const line = (0, _detectNewline().default)(comments) || _os().EOL;\n\n  const head = '/**';\n  const start = ' *';\n  const tail = ' */';\n  const keys = Object.keys(pragmas);\n  const printedObject = keys\n    .map(key => printKeyValues(key, pragmas[key]))\n    .reduce((arr, next) => arr.concat(next), [])\n    .map(keyValue => start + ' ' + keyValue + line)\n    .join('');\n\n  if (!comments) {\n    if (keys.length === 0) {\n      return '';\n    }\n\n    if (keys.length === 1 && !Array.isArray(pragmas[keys[0]])) {\n      const value = pragmas[keys[0]];\n      return `${head} ${printKeyValues(keys[0], value)[0]}${tail}`;\n    }\n  }\n\n  const printedComments =\n    comments\n      .split(line)\n      .map(textLine => `${start} ${textLine}`)\n      .join(line) + line;\n  return (\n    head +\n    line +\n    (comments ? printedComments : '') +\n    (comments && keys.length ? start + line : '') +\n    printedObject +\n    tail\n  );\n}\n\nfunction printKeyValues(key, valueOrArray) {\n  return STRING_ARRAY.concat(valueOrArray).map(value =>\n    `@${key} ${value}`.trim()\n  );\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACAF,OAAO,CAACG,KAAR,GAAgBA,KAAhB;AACAH,OAAO,CAACI,iBAAR,GAA4BA,iBAA5B;AACAJ,OAAO,CAACK,KAAR,GAAgBA,KAAhB;AACAL,OAAO,CAACM,KAAR,GAAgBA,KAAhB;;AAEA,SAASC,GAAT,GAAe;EACb,MAAMC,IAAI,GAAGC,OAAO,CAAC,IAAD,CAApB;;EAEAF,GAAG,GAAG,YAAY;IAChB,OAAOC,IAAP;EACD,CAFD;;EAIA,OAAOA,IAAP;AACD;;AAED,SAASE,cAAT,GAA0B;EACxB,MAAMF,IAAI,GAAGG,sBAAsB,CAACF,OAAO,CAAC,gBAAD,CAAR,CAAnC;;EAEAC,cAAc,GAAG,YAAY;IAC3B,OAAOF,IAAP;EACD,CAFD;;EAIA,OAAOA,IAAP;AACD;;AAED,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;EACnC,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAACE,OAAO,EAAEF;EAAV,CAArC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,YAAY,GAAG,OAArB;AACA,MAAMC,cAAc,GAAG,SAAvB;AACA,MAAMC,UAAU,GAAG,8BAAnB;AACA,MAAMC,aAAa,GAAG,wBAAtB;AACA,MAAMC,cAAc,GAAG,WAAvB;AACA,MAAMC,WAAW,GACf,uFADF;AAEA,MAAMC,UAAU,GAAG,kCAAnB;AACA,MAAMC,aAAa,GAAG,kBAAtB;AACA,MAAMC,YAAY,GAAG,EAArB;;AAEA,SAASrB,OAAT,CAAiBsB,QAAjB,EAA2B;EACzB,MAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAT,CAAeR,UAAf,CAAd;EACA,OAAOQ,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAL,CAASC,QAAT,EAAH,GAAyB,EAArC;AACD;;AAED,SAASpB,KAAT,CAAekB,QAAf,EAAyB;EACvB,MAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAT,CAAeR,UAAf,CAAd;EACA,OAAOQ,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAd,GAAoBD,QAAQ,CAACG,SAAT,CAAmBF,KAAK,CAAC,CAAD,CAAL,CAASG,MAA5B,CAApB,GAA0DJ,QAAjE;AACD;;AAED,SAASrB,KAAT,CAAe0B,QAAf,EAAyB;EACvB,OAAOzB,iBAAiB,CAACyB,QAAD,CAAjB,CAA4BC,OAAnC;AACD;;AAED,SAAS1B,iBAAT,CAA2ByB,QAA3B,EAAqC;EACnC,MAAME,IAAI,GAAG,CAAC,GAAGrB,cAAc,GAAGI,OAArB,EAA8Be,QAA9B,KAA2CtB,GAAG,GAAGyB,GAA9D;;EAEAH,QAAQ,GAAGA,QAAQ,CAChBI,OADQ,CACAjB,cADA,EACgB,EADhB,EAERiB,OAFQ,CAEAlB,YAFA,EAEc,EAFd,EAGRkB,OAHQ,CAGAX,aAHA,EAGe,IAHf,CAAX,CAHmC,CAMF;;EAEjC,IAAIY,IAAI,GAAG,EAAX;;EAEA,OAAOA,IAAI,KAAKL,QAAhB,EAA0B;IACxBK,IAAI,GAAGL,QAAP;IACAA,QAAQ,GAAGA,QAAQ,CAACI,OAAT,CAAiBb,WAAjB,EAA+B,GAAEW,IAAK,QAAOA,IAAK,EAAlD,CAAX;EACD;;EAEDF,QAAQ,GAAGA,QAAQ,CAACI,OAAT,CAAiBd,cAAjB,EAAiC,EAAjC,EAAqCgB,SAArC,EAAX;EACA,MAAMC,MAAM,GAAGtC,MAAM,CAACuC,MAAP,CAAc,IAAd,CAAf;EACA,MAAMC,QAAQ,GAAGT,QAAQ,CACtBI,OADc,CACNZ,UADM,EACM,EADN,EAEdY,OAFc,CAENd,cAFM,EAEU,EAFV,EAGdgB,SAHc,EAAjB;EAIA,IAAIV,KAAJ;;EAEA,OAAQA,KAAK,GAAGJ,UAAU,CAACkB,IAAX,CAAgBV,QAAhB,CAAhB,EAA4C;IAC1C;IACA,MAAMW,UAAU,GAAGf,KAAK,CAAC,CAAD,CAAL,CAASQ,OAAT,CAAiBf,aAAjB,EAAgC,EAAhC,CAAnB;;IAEA,IACE,OAAOkB,MAAM,CAACX,KAAK,CAAC,CAAD,CAAN,CAAb,KAA4B,QAA5B,IACAgB,KAAK,CAACC,OAAN,CAAcN,MAAM,CAACX,KAAK,CAAC,CAAD,CAAN,CAApB,CAFF,EAGE;MACAW,MAAM,CAACX,KAAK,CAAC,CAAD,CAAN,CAAN,GAAmBF,YAAY,CAACoB,MAAb,CAAoBP,MAAM,CAACX,KAAK,CAAC,CAAD,CAAN,CAA1B,EAAsCe,UAAtC,CAAnB;IACD,CALD,MAKO;MACLJ,MAAM,CAACX,KAAK,CAAC,CAAD,CAAN,CAAN,GAAmBe,UAAnB;IACD;EACF;;EAED,OAAO;IACLF,QADK;IAELR,OAAO,EAAEM;EAFJ,CAAP;AAID;;AAED,SAAS/B,KAAT,OAA8C;EAAA,IAA/B;IAACiC,QAAQ,GAAG,EAAZ;IAAgBR,OAAO,GAAG;EAA1B,CAA+B;;EAC5C,MAAMC,IAAI,GAAG,CAAC,GAAGrB,cAAc,GAAGI,OAArB,EAA8BwB,QAA9B,KAA2C/B,GAAG,GAAGyB,GAA9D;;EAEA,MAAMY,IAAI,GAAG,KAAb;EACA,MAAMC,KAAK,GAAG,IAAd;EACA,MAAMC,IAAI,GAAG,KAAb;EACA,MAAMC,IAAI,GAAGjD,MAAM,CAACiD,IAAP,CAAYjB,OAAZ,CAAb;EACA,MAAMkB,aAAa,GAAGD,IAAI,CACvBE,GADmB,CACfC,GAAG,IAAIC,cAAc,CAACD,GAAD,EAAMpB,OAAO,CAACoB,GAAD,CAAb,CADN,EAEnBE,MAFmB,CAEZ,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,CAACV,MAAJ,CAAWW,IAAX,CAFH,EAEqB,EAFrB,EAGnBL,GAHmB,CAGfM,QAAQ,IAAIV,KAAK,GAAG,GAAR,GAAcU,QAAd,GAAyBxB,IAHtB,EAInByB,IAJmB,CAId,EAJc,CAAtB;;EAMA,IAAI,CAAClB,QAAL,EAAe;IACb,IAAIS,IAAI,CAACnB,MAAL,KAAgB,CAApB,EAAuB;MACrB,OAAO,EAAP;IACD;;IAED,IAAImB,IAAI,CAACnB,MAAL,KAAgB,CAAhB,IAAqB,CAACa,KAAK,CAACC,OAAN,CAAcZ,OAAO,CAACiB,IAAI,CAAC,CAAD,CAAL,CAArB,CAA1B,EAA2D;MACzD,MAAM9C,KAAK,GAAG6B,OAAO,CAACiB,IAAI,CAAC,CAAD,CAAL,CAArB;MACA,OAAQ,GAAEH,IAAK,IAAGO,cAAc,CAACJ,IAAI,CAAC,CAAD,CAAL,EAAU9C,KAAV,CAAd,CAA+B,CAA/B,CAAkC,GAAE6C,IAAK,EAA3D;IACD;EACF;;EAED,MAAMW,eAAe,GACnBnB,QAAQ,CACLoB,KADH,CACS3B,IADT,EAEGkB,GAFH,CAEOU,QAAQ,IAAK,GAAEd,KAAM,IAAGc,QAAS,EAFxC,EAGGH,IAHH,CAGQzB,IAHR,IAGgBA,IAJlB;EAKA,OACEa,IAAI,GACJb,IADA,IAECO,QAAQ,GAAGmB,eAAH,GAAqB,EAF9B,KAGCnB,QAAQ,IAAIS,IAAI,CAACnB,MAAjB,GAA0BiB,KAAK,GAAGd,IAAlC,GAAyC,EAH1C,IAIAiB,aAJA,GAKAF,IANF;AAQD;;AAED,SAASK,cAAT,CAAwBD,GAAxB,EAA6BU,YAA7B,EAA2C;EACzC,OAAOrC,YAAY,CAACoB,MAAb,CAAoBiB,YAApB,EAAkCX,GAAlC,CAAsChD,KAAK,IAC/C,IAAGiD,GAAI,IAAGjD,KAAM,EAAjB,CAAmB4D,IAAnB,EADK,CAAP;AAGD"},"metadata":{},"sourceType":"script"}