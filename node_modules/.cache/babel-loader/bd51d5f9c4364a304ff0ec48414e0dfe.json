{"ast":null,"code":"'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n\nconst valueParser = require('postcss-value-parser');\n\nconst {\n  parser\n} = require('../parser.js');\n\nconst reducer = require('./reducer.js');\n\nconst stringifier = require('./stringifier.js');\n\nconst MATCH_CALC = /((?:-(moz|webkit)-)?calc)/i;\n/**\n * @param {string} value\n * @param {{precision: number, warnWhenCannotResolve: boolean}} options\n * @param {import(\"postcss\").Result} result\n * @param {import(\"postcss\").ChildNode} item\n */\n\nfunction transformValue(value, options, result, item) {\n  return valueParser(value).walk(node => {\n    // skip anything which isn't a calc() function\n    if (node.type !== 'function' || !MATCH_CALC.test(node.value)) {\n      return;\n    } // stringify calc expression and produce an AST\n\n\n    const contents = valueParser.stringify(node.nodes);\n    const ast = parser.parse(contents); // reduce AST to its simplest form, that is, either to a single value\n    // or a simplified calc expression\n\n    const reducedAst = reducer(ast, options.precision); // stringify AST and write it back\n\n    /** @type {valueParser.Node} */\n\n    node.type = 'word';\n    node.value = stringifier(node.value, reducedAst, value, options, result, item);\n    return false;\n  }).toString();\n}\n/**\n * @param {import(\"postcss-selector-parser\").Selectors} value\n * @param {{precision: number, warnWhenCannotResolve: boolean}} options\n * @param {import(\"postcss\").Result} result\n * @param {import(\"postcss\").ChildNode} item\n */\n\n\nfunction transformSelector(value, options, result, item) {\n  return selectorParser(selectors => {\n    selectors.walk(node => {\n      // attribute value\n      // e.g. the \"calc(3*3)\" part of \"div[data-size=\"calc(3*3)\"]\"\n      if (node.type === 'attribute' && node.value) {\n        node.setValue(transformValue(node.value, options, result, item));\n      } // tag value\n      // e.g. the \"calc(3*3)\" part of \"div:nth-child(2n + calc(3*3))\"\n\n\n      if (node.type === 'tag') {\n        node.value = transformValue(node.value, options, result, item);\n      }\n\n      return;\n    });\n  }).processSync(value);\n}\n/**\n * @param {any} node\n * @param {{precision: number, preserve: boolean, warnWhenCannotResolve: boolean}} options\n * @param {'value'|'params'|'selector'} property\n * @param {import(\"postcss\").Result} result\n */\n\n\nmodule.exports = (node, property, options, result) => {\n  let value = node[property];\n\n  try {\n    value = property === 'selector' ? transformSelector(node[property], options, result, node) : transformValue(node[property], options, result, node);\n  } catch (error) {\n    if (error instanceof Error) {\n      result.warn(error.message, {\n        node\n      });\n    } else {\n      result.warn('Error', {\n        node\n      });\n    }\n\n    return;\n  } // if the preserve option is enabled and the value has changed, write the\n  // transformed value into a cloned node which is inserted before the current\n  // node, preserving the original value. Otherwise, overwrite the original\n  // value.\n\n\n  if (options.preserve && node[property] !== value) {\n    const clone = node.clone();\n    clone[property] = value;\n    node.parent.insertBefore(node, clone);\n  } else {\n    node[property] = value;\n  }\n};","map":{"version":3,"names":["selectorParser","require","valueParser","parser","reducer","stringifier","MATCH_CALC","transformValue","value","options","result","item","walk","node","type","test","contents","stringify","nodes","ast","parse","reducedAst","precision","toString","transformSelector","selectors","setValue","processSync","module","exports","property","error","Error","warn","message","preserve","clone","parent","insertBefore"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-calc/src/lib/transform.js"],"sourcesContent":["'use strict';\nconst selectorParser = require('postcss-selector-parser');\nconst valueParser = require('postcss-value-parser');\n\nconst { parser } = require('../parser.js');\n\nconst reducer = require('./reducer.js');\nconst stringifier = require('./stringifier.js');\n\nconst MATCH_CALC = /((?:-(moz|webkit)-)?calc)/i;\n\n/**\n * @param {string} value\n * @param {{precision: number, warnWhenCannotResolve: boolean}} options\n * @param {import(\"postcss\").Result} result\n * @param {import(\"postcss\").ChildNode} item\n */\nfunction transformValue(value, options, result, item) {\n  return valueParser(value)\n    .walk((node) => {\n      // skip anything which isn't a calc() function\n      if (node.type !== 'function' || !MATCH_CALC.test(node.value)) {\n        return;\n      }\n\n      // stringify calc expression and produce an AST\n      const contents = valueParser.stringify(node.nodes);\n      const ast = parser.parse(contents);\n\n      // reduce AST to its simplest form, that is, either to a single value\n      // or a simplified calc expression\n      const reducedAst = reducer(ast, options.precision);\n\n      // stringify AST and write it back\n      /** @type {valueParser.Node} */ (node).type = 'word';\n      node.value = stringifier(\n        node.value,\n        reducedAst,\n        value,\n        options,\n        result,\n        item\n      );\n\n      return false;\n    })\n    .toString();\n}\n/**\n * @param {import(\"postcss-selector-parser\").Selectors} value\n * @param {{precision: number, warnWhenCannotResolve: boolean}} options\n * @param {import(\"postcss\").Result} result\n * @param {import(\"postcss\").ChildNode} item\n */\nfunction transformSelector(value, options, result, item) {\n  return selectorParser((selectors) => {\n    selectors.walk((node) => {\n      // attribute value\n      // e.g. the \"calc(3*3)\" part of \"div[data-size=\"calc(3*3)\"]\"\n      if (node.type === 'attribute' && node.value) {\n        node.setValue(transformValue(node.value, options, result, item));\n      }\n\n      // tag value\n      // e.g. the \"calc(3*3)\" part of \"div:nth-child(2n + calc(3*3))\"\n      if (node.type === 'tag') {\n        node.value = transformValue(node.value, options, result, item);\n      }\n\n      return;\n    });\n  }).processSync(value);\n}\n\n/**\n * @param {any} node\n * @param {{precision: number, preserve: boolean, warnWhenCannotResolve: boolean}} options\n * @param {'value'|'params'|'selector'} property\n * @param {import(\"postcss\").Result} result\n */\nmodule.exports = (node, property, options, result) => {\n  let value = node[property];\n\n  try {\n    value =\n      property === 'selector'\n        ? transformSelector(node[property], options, result, node)\n        : transformValue(node[property], options, result, node);\n  } catch (error) {\n    if (error instanceof Error) {\n      result.warn(error.message, { node });\n    } else {\n      result.warn('Error', { node });\n    }\n    return;\n  }\n\n  // if the preserve option is enabled and the value has changed, write the\n  // transformed value into a cloned node which is inserted before the current\n  // node, preserving the original value. Otherwise, overwrite the original\n  // value.\n  if (options.preserve && node[property] !== value) {\n    const clone = node.clone();\n    clone[property] = value;\n    node.parent.insertBefore(node, clone);\n  } else {\n    node[property] = value;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}