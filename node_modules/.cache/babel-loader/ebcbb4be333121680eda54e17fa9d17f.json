{"ast":null,"code":"/**\n * A function that normalizes the various forms that the screens object can be\n * provided in.\n *\n * Input(s):\n *   - ['100px', '200px'] // Raw strings\n *   - { sm: '100px', md: '200px' } // Object with string values\n *   - { sm: { min: '100px' }, md: { max: '100px' } } // Object with object values\n *   - { sm: [{ min: '100px' }, { max: '200px' }] } // Object with object array (multiple values)\n *\n * Output(s):\n *   - [{ name: 'sm', values: [{ min: '100px', max: '200px' }] }] // List of objects, that contains multiple values\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"normalizeScreens\", {\n  enumerable: true,\n  get: () => normalizeScreens\n});\n\nfunction normalizeScreens(screens) {\n  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (Array.isArray(screens)) {\n    return screens.map(screen => {\n      if (root && Array.isArray(screen)) {\n        throw new Error(\"The tuple syntax is not supported for `screens`.\");\n      }\n\n      if (typeof screen === \"string\") {\n        return {\n          name: screen.toString(),\n          values: [{\n            min: screen,\n            max: undefined\n          }]\n        };\n      }\n\n      let [name, options] = screen;\n      name = name.toString();\n\n      if (typeof options === \"string\") {\n        return {\n          name,\n          values: [{\n            min: options,\n            max: undefined\n          }]\n        };\n      }\n\n      if (Array.isArray(options)) {\n        return {\n          name,\n          values: options.map(option => resolveValue(option))\n        };\n      }\n\n      return {\n        name,\n        values: [resolveValue(options)]\n      };\n    });\n  }\n\n  return normalizeScreens(Object.entries(screens !== null && screens !== void 0 ? screens : {}), false);\n}\n\nfunction resolveValue() {\n  let {\n    \"min-width\": _minWidth,\n    min = _minWidth,\n    max,\n    raw\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    min,\n    max,\n    raw\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","normalizeScreens","screens","root","Array","isArray","map","screen","Error","name","toString","values","min","max","undefined","options","option","resolveValue","entries","_minWidth","raw"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/lib/util/normalizeScreens.js"],"sourcesContent":["/**\n * A function that normalizes the various forms that the screens object can be\n * provided in.\n *\n * Input(s):\n *   - ['100px', '200px'] // Raw strings\n *   - { sm: '100px', md: '200px' } // Object with string values\n *   - { sm: { min: '100px' }, md: { max: '100px' } } // Object with object values\n *   - { sm: [{ min: '100px' }, { max: '200px' }] } // Object with object array (multiple values)\n *\n * Output(s):\n *   - [{ name: 'sm', values: [{ min: '100px', max: '200px' }] }] // List of objects, that contains multiple values\n */ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"normalizeScreens\", {\n    enumerable: true,\n    get: ()=>normalizeScreens\n});\nfunction normalizeScreens(screens, root = true) {\n    if (Array.isArray(screens)) {\n        return screens.map((screen)=>{\n            if (root && Array.isArray(screen)) {\n                throw new Error(\"The tuple syntax is not supported for `screens`.\");\n            }\n            if (typeof screen === \"string\") {\n                return {\n                    name: screen.toString(),\n                    values: [\n                        {\n                            min: screen,\n                            max: undefined\n                        }\n                    ]\n                };\n            }\n            let [name, options] = screen;\n            name = name.toString();\n            if (typeof options === \"string\") {\n                return {\n                    name,\n                    values: [\n                        {\n                            min: options,\n                            max: undefined\n                        }\n                    ]\n                };\n            }\n            if (Array.isArray(options)) {\n                return {\n                    name,\n                    values: options.map((option)=>resolveValue(option))\n                };\n            }\n            return {\n                name,\n                values: [\n                    resolveValue(options)\n                ]\n            };\n        });\n    }\n    return normalizeScreens(Object.entries(screens !== null && screens !== void 0 ? screens : {}), false);\n}\nfunction resolveValue({ \"min-width\": _minWidth , min =_minWidth , max , raw  } = {}) {\n    return {\n        min,\n        max,\n        raw\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI;;AACJA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EACzCC,KAAK,EAAE;AADkC,CAA7C;AAGAH,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,kBAA/B,EAAmD;EAC/CE,UAAU,EAAE,IADmC;EAE/CC,GAAG,EAAE,MAAIC;AAFsC,CAAnD;;AAIA,SAASA,gBAAT,CAA0BC,OAA1B,EAAgD;EAAA,IAAbC,IAAa,uEAAN,IAAM;;EAC5C,IAAIC,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;IACxB,OAAOA,OAAO,CAACI,GAAR,CAAaC,MAAD,IAAU;MACzB,IAAIJ,IAAI,IAAIC,KAAK,CAACC,OAAN,CAAcE,MAAd,CAAZ,EAAmC;QAC/B,MAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;MACH;;MACD,IAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;QAC5B,OAAO;UACHE,IAAI,EAAEF,MAAM,CAACG,QAAP,EADH;UAEHC,MAAM,EAAE,CACJ;YACIC,GAAG,EAAEL,MADT;YAEIM,GAAG,EAAEC;UAFT,CADI;QAFL,CAAP;MASH;;MACD,IAAI,CAACL,IAAD,EAAOM,OAAP,IAAkBR,MAAtB;MACAE,IAAI,GAAGA,IAAI,CAACC,QAAL,EAAP;;MACA,IAAI,OAAOK,OAAP,KAAmB,QAAvB,EAAiC;QAC7B,OAAO;UACHN,IADG;UAEHE,MAAM,EAAE,CACJ;YACIC,GAAG,EAAEG,OADT;YAEIF,GAAG,EAAEC;UAFT,CADI;QAFL,CAAP;MASH;;MACD,IAAIV,KAAK,CAACC,OAAN,CAAcU,OAAd,CAAJ,EAA4B;QACxB,OAAO;UACHN,IADG;UAEHE,MAAM,EAAEI,OAAO,CAACT,GAAR,CAAaU,MAAD,IAAUC,YAAY,CAACD,MAAD,CAAlC;QAFL,CAAP;MAIH;;MACD,OAAO;QACHP,IADG;QAEHE,MAAM,EAAE,CACJM,YAAY,CAACF,OAAD,CADR;MAFL,CAAP;IAMH,CAxCM,CAAP;EAyCH;;EACD,OAAOd,gBAAgB,CAACN,MAAM,CAACuB,OAAP,CAAehB,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyCA,OAAzC,GAAmD,EAAlE,CAAD,EAAwE,KAAxE,CAAvB;AACH;;AACD,SAASe,YAAT,GAAqF;EAAA,IAA/D;IAAE,aAAaE,SAAf;IAA2BP,GAAG,GAAEO,SAAhC;IAA4CN,GAA5C;IAAkDO;EAAlD,CAA+D,uEAAJ,EAAI;EACjF,OAAO;IACHR,GADG;IAEHC,GAFG;IAGHO;EAHG,CAAP;AAKH"},"metadata":{},"sourceType":"script"}