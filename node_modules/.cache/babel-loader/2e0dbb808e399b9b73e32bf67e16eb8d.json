{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _path = require(\"path\");\n\nvar _utils = require(\"./utils\");\n\nconst mocksDirName = '__mocks__';\n\nconst isMockPath = path => path.split(_path.posix.sep).includes(mocksDirName);\n\nconst isMockImportLiteral = expression => (0, _utils.isStringNode)(expression) && isMockPath((0, _utils.getStringValue)(expression));\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    type: 'problem',\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow manually importing from `__mocks__`',\n      recommended: 'error'\n    },\n    messages: {\n      noManualImport: `Mocks should not be manually imported from a ${mocksDirName} directory. Instead use \\`jest.mock\\` and import from the original module path.`\n    },\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      ImportDeclaration(node) {\n        if (isMockImportLiteral(node.source)) {\n          context.report({\n            node,\n            messageId: 'noManualImport'\n          });\n        }\n      },\n\n      'CallExpression[callee.name=\"require\"]'(node) {\n        const [arg] = node.arguments;\n\n        if (arg && isMockImportLiteral(arg)) {\n          context.report({\n            node: arg,\n            messageId: 'noManualImport'\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_path","require","_utils","mocksDirName","isMockPath","path","split","posix","sep","includes","isMockImportLiteral","expression","isStringNode","getStringValue","_default","createRule","name","__filename","meta","type","docs","category","description","recommended","messages","noManualImport","schema","defaultOptions","create","context","ImportDeclaration","node","source","report","messageId","arg","arguments"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-mocks-import.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _path = require(\"path\");\n\nvar _utils = require(\"./utils\");\n\nconst mocksDirName = '__mocks__';\n\nconst isMockPath = path => path.split(_path.posix.sep).includes(mocksDirName);\n\nconst isMockImportLiteral = expression => (0, _utils.isStringNode)(expression) && isMockPath((0, _utils.getStringValue)(expression));\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    type: 'problem',\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow manually importing from `__mocks__`',\n      recommended: 'error'\n    },\n    messages: {\n      noManualImport: `Mocks should not be manually imported from a ${mocksDirName} directory. Instead use \\`jest.mock\\` and import from the original module path.`\n    },\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      ImportDeclaration(node) {\n        if (isMockImportLiteral(node.source)) {\n          context.report({\n            node,\n            messageId: 'noManualImport'\n          });\n        }\n      },\n\n      'CallExpression[callee.name=\"require\"]'(node) {\n        const [arg] = node.arguments;\n\n        if (arg && isMockImportLiteral(arg)) {\n          context.report({\n            node: arg,\n            messageId: 'noManualImport'\n          });\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,MAAME,YAAY,GAAG,WAArB;;AAEA,MAAMC,UAAU,GAAGC,IAAI,IAAIA,IAAI,CAACC,KAAL,CAAWN,KAAK,CAACO,KAAN,CAAYC,GAAvB,EAA4BC,QAA5B,CAAqCN,YAArC,CAA3B;;AAEA,MAAMO,mBAAmB,GAAGC,UAAU,IAAI,CAAC,GAAGT,MAAM,CAACU,YAAX,EAAyBD,UAAzB,KAAwCP,UAAU,CAAC,CAAC,GAAGF,MAAM,CAACW,cAAX,EAA2BF,UAA3B,CAAD,CAA5F;;AAEA,IAAIG,QAAQ,GAAG,CAAC,GAAGZ,MAAM,CAACa,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE,SADF;IAEJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,8CAFT;MAGJC,WAAW,EAAE;IAHT,CAFF;IAOJC,QAAQ,EAAE;MACRC,cAAc,EAAG,gDAA+CtB,YAAa;IADrE,CAPN;IAUJuB,MAAM,EAAE;EAVJ,CAF8B;EAcpCC,cAAc,EAAE,EAdoB;;EAgBpCC,MAAM,CAACC,OAAD,EAAU;IACd,OAAO;MACLC,iBAAiB,CAACC,IAAD,EAAO;QACtB,IAAIrB,mBAAmB,CAACqB,IAAI,CAACC,MAAN,CAAvB,EAAsC;UACpCH,OAAO,CAACI,MAAR,CAAe;YACbF,IADa;YAEbG,SAAS,EAAE;UAFE,CAAf;QAID;MACF,CARI;;MAUL,wCAAwCH,IAAxC,EAA8C;QAC5C,MAAM,CAACI,GAAD,IAAQJ,IAAI,CAACK,SAAnB;;QAEA,IAAID,GAAG,IAAIzB,mBAAmB,CAACyB,GAAD,CAA9B,EAAqC;UACnCN,OAAO,CAACI,MAAR,CAAe;YACbF,IAAI,EAAEI,GADO;YAEbD,SAAS,EAAE;UAFE,CAAf;QAID;MACF;;IAnBI,CAAP;EAsBD;;AAvCmC,CAAvB,CAAf;;AA2CArC,OAAO,CAACE,OAAR,GAAkBe,QAAlB"},"metadata":{},"sourceType":"script"}