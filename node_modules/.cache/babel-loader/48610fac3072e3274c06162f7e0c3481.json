{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _ariaQuery = require(\"aria-query\");\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n/**\n * @fileoverview Enforce that elements that do not support ARIA roles,\n *  states and properties do not have those attributes.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\n\nvar errorMessage = function errorMessage(invalidProp) {\n  return \"This element does not support ARIA roles, states and properties. Try removing the prop '\".concat(invalidProp, \"'.\");\n};\n\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md',\n      description: 'Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var nodeType = elementType(node);\n        var nodeAttrs = _ariaQuery.dom.get(nodeType) || {};\n        var _nodeAttrs$reserved = nodeAttrs.reserved,\n            isReservedNodeType = _nodeAttrs$reserved === void 0 ? false : _nodeAttrs$reserved; // If it's not reserved, then it can have aria-* roles, states, and properties\n\n        if (isReservedNodeType === false) {\n          return;\n        }\n\n        var invalidAttributes = [].concat((0, _toConsumableArray2[\"default\"])(_ariaQuery.aria.keys()), ['role']);\n        node.attributes.forEach(function (prop) {\n          if (prop.type === 'JSXSpreadAttribute') {\n            return;\n          }\n\n          var name = (0, _jsxAstUtils.propName)(prop).toLowerCase();\n\n          if (invalidAttributes.indexOf(name) > -1) {\n            context.report({\n              node,\n              message: errorMessage(name)\n            });\n          }\n        });\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_toConsumableArray2","_ariaQuery","_jsxAstUtils","_schemas","_getElementType","errorMessage","invalidProp","concat","schema","generateObjSchema","_default","meta","docs","url","description","create","context","elementType","JSXOpeningElement","node","nodeType","nodeAttrs","dom","get","_nodeAttrs$reserved","reserved","isReservedNodeType","invalidAttributes","aria","keys","attributes","forEach","prop","type","name","propName","toLowerCase","indexOf","report","message","module","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/lib/rules/aria-unsupported-elements.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _ariaQuery = require(\"aria-query\");\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\n/**\n * @fileoverview Enforce that elements that do not support ARIA roles,\n *  states and properties do not have those attributes.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\nvar errorMessage = function errorMessage(invalidProp) {\n  return \"This element does not support ARIA roles, states and properties. Try removing the prop '\".concat(invalidProp, \"'.\");\n};\n\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md',\n      description: 'Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var nodeType = elementType(node);\n        var nodeAttrs = _ariaQuery.dom.get(nodeType) || {};\n        var _nodeAttrs$reserved = nodeAttrs.reserved,\n            isReservedNodeType = _nodeAttrs$reserved === void 0 ? false : _nodeAttrs$reserved; // If it's not reserved, then it can have aria-* roles, states, and properties\n\n        if (isReservedNodeType === false) {\n          return;\n        }\n\n        var invalidAttributes = [].concat((0, _toConsumableArray2[\"default\"])(_ariaQuery.aria.keys()), ['role']);\n        node.attributes.forEach(function (prop) {\n          if (prop.type === 'JSXSpreadAttribute') {\n            return;\n          }\n\n          var name = (0, _jsxAstUtils.propName)(prop).toLowerCase();\n\n          if (invalidAttributes.indexOf(name) > -1) {\n            context.report({\n              node,\n              message: errorMessage(name)\n            });\n          }\n        });\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,mBAAmB,GAAGN,sBAAsB,CAACC,OAAO,CAAC,0CAAD,CAAR,CAAhD;;AAEA,IAAIM,UAAU,GAAGN,OAAO,CAAC,YAAD,CAAxB;;AAEA,IAAIO,YAAY,GAAGP,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIQ,QAAQ,GAAGR,OAAO,CAAC,iBAAD,CAAtB;;AAEA,IAAIS,eAAe,GAAGV,sBAAsB,CAACC,OAAO,CAAC,wBAAD,CAAR,CAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIU,YAAY,GAAG,SAASA,YAAT,CAAsBC,WAAtB,EAAmC;EACpD,OAAO,2FAA2FC,MAA3F,CAAkGD,WAAlG,EAA+G,IAA/G,CAAP;AACD,CAFD;;AAIA,IAAIE,MAAM,GAAG,CAAC,GAAGL,QAAQ,CAACM,iBAAb,GAAb;AACA,IAAIC,QAAQ,GAAG;EACbC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,GAAG,EAAE,wGADD;MAEJC,WAAW,EAAE;IAFT,CADF;IAKJN,MAAM,EAAE,CAACA,MAAD;EALJ,CADO;EAQbO,MAAM,EAAE,SAASA,MAAT,CAAgBC,OAAhB,EAAyB;IAC/B,IAAIC,WAAW,GAAG,CAAC,GAAGb,eAAe,CAAC,SAAD,CAAnB,EAAgCY,OAAhC,CAAlB;IACA,OAAO;MACLE,iBAAiB,EAAE,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;QAClD,IAAIC,QAAQ,GAAGH,WAAW,CAACE,IAAD,CAA1B;QACA,IAAIE,SAAS,GAAGpB,UAAU,CAACqB,GAAX,CAAeC,GAAf,CAAmBH,QAAnB,KAAgC,EAAhD;QACA,IAAII,mBAAmB,GAAGH,SAAS,CAACI,QAApC;QAAA,IACIC,kBAAkB,GAAGF,mBAAmB,KAAK,KAAK,CAA7B,GAAiC,KAAjC,GAAyCA,mBADlE,CAHkD,CAIqC;;QAEvF,IAAIE,kBAAkB,KAAK,KAA3B,EAAkC;UAChC;QACD;;QAED,IAAIC,iBAAiB,GAAG,GAAGpB,MAAH,CAAU,CAAC,GAAGP,mBAAmB,CAAC,SAAD,CAAvB,EAAoCC,UAAU,CAAC2B,IAAX,CAAgBC,IAAhB,EAApC,CAAV,EAAuE,CAAC,MAAD,CAAvE,CAAxB;QACAV,IAAI,CAACW,UAAL,CAAgBC,OAAhB,CAAwB,UAAUC,IAAV,EAAgB;UACtC,IAAIA,IAAI,CAACC,IAAL,KAAc,oBAAlB,EAAwC;YACtC;UACD;;UAED,IAAIC,IAAI,GAAG,CAAC,GAAGhC,YAAY,CAACiC,QAAjB,EAA2BH,IAA3B,EAAiCI,WAAjC,EAAX;;UAEA,IAAIT,iBAAiB,CAACU,OAAlB,CAA0BH,IAA1B,IAAkC,CAAC,CAAvC,EAA0C;YACxClB,OAAO,CAACsB,MAAR,CAAe;cACbnB,IADa;cAEboB,OAAO,EAAElC,YAAY,CAAC6B,IAAD;YAFR,CAAf;UAID;QACF,CAbD;MAcD;IA1BI,CAAP;EA4BD;AAtCY,CAAf;AAwCApC,OAAO,CAAC,SAAD,CAAP,GAAqBY,QAArB;AACA8B,MAAM,CAAC1C,OAAP,GAAiBA,OAAO,CAAC2C,OAAzB"},"metadata":{},"sourceType":"script"}