{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nconst util_1 = require(\"../util\");\n\nvar Group;\n\n(function (Group) {\n  Group[\"conditional\"] = \"conditional\";\n  Group[\"function\"] = \"function\";\n  Group[\"import\"] = \"import\";\n  Group[\"intersection\"] = \"intersection\";\n  Group[\"keyword\"] = \"keyword\";\n  Group[\"nullish\"] = \"nullish\";\n  Group[\"literal\"] = \"literal\";\n  Group[\"named\"] = \"named\";\n  Group[\"object\"] = \"object\";\n  Group[\"operator\"] = \"operator\";\n  Group[\"tuple\"] = \"tuple\";\n  Group[\"union\"] = \"union\";\n})(Group || (Group = {}));\n\nfunction getGroup(node) {\n  switch (node.type) {\n    case utils_1.AST_NODE_TYPES.TSConditionalType:\n      return Group.conditional;\n\n    case utils_1.AST_NODE_TYPES.TSConstructorType:\n    case utils_1.AST_NODE_TYPES.TSFunctionType:\n      return Group.function;\n\n    case utils_1.AST_NODE_TYPES.TSImportType:\n      return Group.import;\n\n    case utils_1.AST_NODE_TYPES.TSIntersectionType:\n      return Group.intersection;\n\n    case utils_1.AST_NODE_TYPES.TSAnyKeyword:\n    case utils_1.AST_NODE_TYPES.TSBigIntKeyword:\n    case utils_1.AST_NODE_TYPES.TSBooleanKeyword:\n    case utils_1.AST_NODE_TYPES.TSNeverKeyword:\n    case utils_1.AST_NODE_TYPES.TSNumberKeyword:\n    case utils_1.AST_NODE_TYPES.TSObjectKeyword:\n    case utils_1.AST_NODE_TYPES.TSStringKeyword:\n    case utils_1.AST_NODE_TYPES.TSSymbolKeyword:\n    case utils_1.AST_NODE_TYPES.TSThisType:\n    case utils_1.AST_NODE_TYPES.TSUnknownKeyword:\n    case utils_1.AST_NODE_TYPES.TSIntrinsicKeyword:\n      return Group.keyword;\n\n    case utils_1.AST_NODE_TYPES.TSNullKeyword:\n    case utils_1.AST_NODE_TYPES.TSUndefinedKeyword:\n    case utils_1.AST_NODE_TYPES.TSVoidKeyword:\n      return Group.nullish;\n\n    case utils_1.AST_NODE_TYPES.TSLiteralType:\n    case utils_1.AST_NODE_TYPES.TSTemplateLiteralType:\n      return Group.literal;\n\n    case utils_1.AST_NODE_TYPES.TSArrayType:\n    case utils_1.AST_NODE_TYPES.TSIndexedAccessType:\n    case utils_1.AST_NODE_TYPES.TSInferType:\n    case utils_1.AST_NODE_TYPES.TSTypeReference:\n      return Group.named;\n\n    case utils_1.AST_NODE_TYPES.TSMappedType:\n    case utils_1.AST_NODE_TYPES.TSTypeLiteral:\n      return Group.object;\n\n    case utils_1.AST_NODE_TYPES.TSTypeOperator:\n    case utils_1.AST_NODE_TYPES.TSTypeQuery:\n      return Group.operator;\n\n    case utils_1.AST_NODE_TYPES.TSTupleType:\n      return Group.tuple;\n\n    case utils_1.AST_NODE_TYPES.TSUnionType:\n      return Group.union;\n    // These types should never occur as part of a union/intersection\n\n    case utils_1.AST_NODE_TYPES.TSAbstractKeyword:\n    case utils_1.AST_NODE_TYPES.TSAsyncKeyword:\n    case utils_1.AST_NODE_TYPES.TSDeclareKeyword:\n    case utils_1.AST_NODE_TYPES.TSExportKeyword:\n    case utils_1.AST_NODE_TYPES.TSNamedTupleMember:\n    case utils_1.AST_NODE_TYPES.TSOptionalType:\n    case utils_1.AST_NODE_TYPES.TSPrivateKeyword:\n    case utils_1.AST_NODE_TYPES.TSProtectedKeyword:\n    case utils_1.AST_NODE_TYPES.TSPublicKeyword:\n    case utils_1.AST_NODE_TYPES.TSReadonlyKeyword:\n    case utils_1.AST_NODE_TYPES.TSRestType:\n    case utils_1.AST_NODE_TYPES.TSStaticKeyword:\n    case utils_1.AST_NODE_TYPES.TSTypePredicate:\n      /* istanbul ignore next */\n      throw new Error(`Unexpected Type ${node.type}`);\n  }\n}\n\nfunction requiresParentheses(node) {\n  return node.type === utils_1.AST_NODE_TYPES.TSFunctionType || node.type === utils_1.AST_NODE_TYPES.TSConstructorType;\n}\n\nexports.default = util.createRule({\n  name: 'sort-type-union-intersection-members',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Enforce members of a type union/intersection to be sorted alphabetically',\n      recommended: false\n    },\n    fixable: 'code',\n    hasSuggestions: true,\n    messages: {\n      notSorted: '{{type}} type members must be sorted.',\n      notSortedNamed: '{{type}} type {{name}} members must be sorted.',\n      suggestFix: 'Sort members of type (removes all comments).'\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        checkIntersections: {\n          description: 'Whether to check intersection types.',\n          type: 'boolean'\n        },\n        checkUnions: {\n          description: 'Whether to check union types.',\n          type: 'boolean'\n        },\n        groupOrder: {\n          description: 'Ordering of the groups.',\n          type: 'array',\n          items: {\n            type: 'string',\n            enum: (0, util_1.getEnumNames)(Group)\n          }\n        }\n      }\n    }]\n  },\n  defaultOptions: [{\n    checkIntersections: true,\n    checkUnions: true,\n    groupOrder: [Group.named, Group.keyword, Group.operator, Group.literal, Group.function, Group.import, Group.conditional, Group.object, Group.tuple, Group.intersection, Group.union, Group.nullish]\n  }],\n\n  create(context, _ref) {\n    let [{\n      checkIntersections,\n      checkUnions,\n      groupOrder\n    }] = _ref;\n    const sourceCode = context.getSourceCode();\n    const collator = new Intl.Collator('en', {\n      sensitivity: 'base',\n      numeric: true\n    });\n\n    function checkSorting(node) {\n      var _a;\n\n      const sourceOrder = node.types.map(type => {\n        var _a;\n\n        const group = (_a = groupOrder === null || groupOrder === void 0 ? void 0 : groupOrder.indexOf(getGroup(type))) !== null && _a !== void 0 ? _a : -1;\n        return {\n          group: group === -1 ? Number.MAX_SAFE_INTEGER : group,\n          node: type,\n          text: sourceCode.getText(type)\n        };\n      });\n      const expectedOrder = [...sourceOrder].sort((a, b) => {\n        if (a.group !== b.group) {\n          return a.group - b.group;\n        }\n\n        return collator.compare(a.text, b.text) || (a.text < b.text ? -1 : a.text > b.text ? 1 : 0);\n      });\n      const hasComments = node.types.some(type => {\n        const count = sourceCode.getCommentsBefore(type).length + sourceCode.getCommentsAfter(type).length;\n        return count > 0;\n      });\n\n      for (let i = 0; i < expectedOrder.length; i += 1) {\n        if (expectedOrder[i].node !== sourceOrder[i].node) {\n          let messageId = 'notSorted';\n          const data = {\n            name: '',\n            type: node.type === utils_1.AST_NODE_TYPES.TSIntersectionType ? 'Intersection' : 'Union'\n          };\n\n          if (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === utils_1.AST_NODE_TYPES.TSTypeAliasDeclaration) {\n            messageId = 'notSortedNamed';\n            data.name = node.parent.id.name;\n          }\n\n          const fix = fixer => {\n            const sorted = expectedOrder.map(t => requiresParentheses(t.node) ? `(${t.text})` : t.text).join(node.type === utils_1.AST_NODE_TYPES.TSIntersectionType ? ' & ' : ' | ');\n            return fixer.replaceText(node, sorted);\n          };\n\n          return context.report(Object.assign({\n            node,\n            messageId,\n            data\n          }, hasComments ? {\n            suggest: [{\n              messageId: 'suggestFix',\n              fix\n            }]\n          } : {\n            fix\n          }));\n        }\n      }\n    }\n\n    return Object.assign(Object.assign({}, checkIntersections && {\n      TSIntersectionType(node) {\n        checkSorting(node);\n      }\n\n    }), checkUnions && {\n      TSUnionType(node) {\n        checkSorting(node);\n      }\n\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["Group","getGroup","node","type","utils_1","TSConditionalType","conditional","TSConstructorType","TSFunctionType","function","TSImportType","import","TSIntersectionType","intersection","TSAnyKeyword","TSBigIntKeyword","TSBooleanKeyword","TSNeverKeyword","TSNumberKeyword","TSObjectKeyword","TSStringKeyword","TSSymbolKeyword","TSThisType","TSUnknownKeyword","TSIntrinsicKeyword","keyword","TSNullKeyword","TSUndefinedKeyword","TSVoidKeyword","nullish","TSLiteralType","TSTemplateLiteralType","literal","TSArrayType","TSIndexedAccessType","TSInferType","TSTypeReference","named","TSMappedType","TSTypeLiteral","object","TSTypeOperator","TSTypeQuery","operator","TSTupleType","tuple","TSUnionType","union","TSAbstractKeyword","TSAsyncKeyword","TSDeclareKeyword","TSExportKeyword","TSNamedTupleMember","TSOptionalType","TSPrivateKeyword","TSProtectedKeyword","TSPublicKeyword","TSReadonlyKeyword","TSRestType","TSStaticKeyword","TSTypePredicate","Error","requiresParentheses","exports","util","createRule","name","meta","docs","description","recommended","fixable","hasSuggestions","messages","notSorted","notSortedNamed","suggestFix","schema","properties","checkIntersections","checkUnions","groupOrder","items","enum","defaultOptions","create","context","sourceCode","getSourceCode","collator","Intl","Collator","sensitivity","numeric","checkSorting","sourceOrder","types","map","group","indexOf","_a","Number","MAX_SAFE_INTEGER","text","getText","expectedOrder","sort","a","b","compare","hasComments","some","count","getCommentsBefore","length","getCommentsAfter","i","messageId","data","parent","TSTypeAliasDeclaration","id","fix","fixer","sorted","t","join","replaceText","report","Object","suggest"],"sources":["../../src/rules/sort-type-union-intersection-members.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}