{"ast":null,"code":"import postcss from 'postcss';\nimport postcssNested from 'postcss-nested';\nexport function nesting() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : postcssNested;\n  return (root, result) => {\n    root.walkAtRules('screen', rule => {\n      rule.name = 'media';\n      rule.params = `screen(${rule.params})`;\n    });\n    root.walkAtRules('apply', rule => {\n      rule.before(postcss.decl({\n        prop: '__apply',\n        value: rule.params,\n        source: rule.source\n      }));\n      rule.remove();\n    });\n\n    let plugin = (() => {\n      if (typeof opts === 'function' || typeof opts === 'object' && opts?.hasOwnProperty?.('postcssPlugin')) {\n        return opts;\n      }\n\n      if (typeof opts === 'string') {\n        return require(opts);\n      }\n\n      if (Object.keys(opts).length <= 0) {\n        return postcssNested;\n      }\n\n      throw new Error('tailwindcss/nesting should be loaded with a nesting plugin.');\n    })();\n\n    postcss([plugin]).process(root, result.opts).sync();\n    root.walkDecls('__apply', decl => {\n      decl.before(postcss.atRule({\n        name: 'apply',\n        params: decl.value,\n        source: decl.source\n      }));\n      decl.remove();\n    });\n    /**\n     * Use a private PostCSS API to remove the \"clean\" flag from the entire AST.\n     * This is done because running process() on the AST will set the \"clean\"\n     * flag on all nodes, which we don't want.\n     *\n     * This causes downstream plugins using the visitor API to be skipped.\n     *\n     * This is guarded because the PostCSS API is not public\n     * and may change in future versions of PostCSS.\n     *\n     * See https://github.com/postcss/postcss/issues/1712 for more details\n     *\n     * @param {import('postcss').Node} node\n     */\n\n    function markDirty(node) {\n      if (!('markDirty' in node)) {\n        return;\n      } // Traverse the tree down to the leaf nodes\n\n\n      if (node.nodes) {\n        node.nodes.forEach(n => markDirty(n));\n      } // If it's a leaf node mark it as dirty\n      // We do this here because marking a node as dirty\n      // will walk up the tree and mark all parents as dirty\n      // resulting in a lot of unnecessary work if we did this\n      // for every single node\n\n\n      if (!node.nodes) {\n        node.markDirty();\n      }\n    }\n\n    markDirty(root);\n    return root;\n  };\n}","map":{"version":3,"names":["postcss","postcssNested","nesting","opts","root","result","walkAtRules","rule","name","params","before","decl","prop","value","source","remove","plugin","hasOwnProperty","require","Object","keys","length","Error","process","sync","walkDecls","atRule","markDirty","node","nodes","forEach","n"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/postcss-plugins/nesting/plugin.js"],"sourcesContent":["import postcss from 'postcss'\nimport postcssNested from 'postcss-nested'\n\nexport function nesting(opts = postcssNested) {\n  return (root, result) => {\n    root.walkAtRules('screen', (rule) => {\n      rule.name = 'media'\n      rule.params = `screen(${rule.params})`\n    })\n\n    root.walkAtRules('apply', (rule) => {\n      rule.before(postcss.decl({ prop: '__apply', value: rule.params, source: rule.source }))\n      rule.remove()\n    })\n\n    let plugin = (() => {\n      if (\n        typeof opts === 'function' ||\n        (typeof opts === 'object' && opts?.hasOwnProperty?.('postcssPlugin'))\n      ) {\n        return opts\n      }\n\n      if (typeof opts === 'string') {\n        return require(opts)\n      }\n\n      if (Object.keys(opts).length <= 0) {\n        return postcssNested\n      }\n\n      throw new Error('tailwindcss/nesting should be loaded with a nesting plugin.')\n    })()\n\n    postcss([plugin]).process(root, result.opts).sync()\n\n    root.walkDecls('__apply', (decl) => {\n      decl.before(postcss.atRule({ name: 'apply', params: decl.value, source: decl.source }))\n      decl.remove()\n    })\n\n    /**\n     * Use a private PostCSS API to remove the \"clean\" flag from the entire AST.\n     * This is done because running process() on the AST will set the \"clean\"\n     * flag on all nodes, which we don't want.\n     *\n     * This causes downstream plugins using the visitor API to be skipped.\n     *\n     * This is guarded because the PostCSS API is not public\n     * and may change in future versions of PostCSS.\n     *\n     * See https://github.com/postcss/postcss/issues/1712 for more details\n     *\n     * @param {import('postcss').Node} node\n     */\n    function markDirty(node) {\n      if (!('markDirty' in node)) {\n        return\n      }\n\n      // Traverse the tree down to the leaf nodes\n      if (node.nodes) {\n        node.nodes.forEach((n) => markDirty(n))\n      }\n\n      // If it's a leaf node mark it as dirty\n      // We do this here because marking a node as dirty\n      // will walk up the tree and mark all parents as dirty\n      // resulting in a lot of unnecessary work if we did this\n      // for every single node\n      if (!node.nodes) {\n        node.markDirty()\n      }\n    }\n\n    markDirty(root)\n\n    return root\n  }\n}\n"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,OAAO,SAASC,OAAT,GAAuC;EAAA,IAAtBC,IAAsB,uEAAfF,aAAe;EAC5C,OAAO,CAACG,IAAD,EAAOC,MAAP,KAAkB;IACvBD,IAAI,CAACE,WAAL,CAAiB,QAAjB,EAA4BC,IAAD,IAAU;MACnCA,IAAI,CAACC,IAAL,GAAY,OAAZ;MACAD,IAAI,CAACE,MAAL,GAAe,UAASF,IAAI,CAACE,MAAO,GAApC;IACD,CAHD;IAKAL,IAAI,CAACE,WAAL,CAAiB,OAAjB,EAA2BC,IAAD,IAAU;MAClCA,IAAI,CAACG,MAAL,CAAYV,OAAO,CAACW,IAAR,CAAa;QAAEC,IAAI,EAAE,SAAR;QAAmBC,KAAK,EAAEN,IAAI,CAACE,MAA/B;QAAuCK,MAAM,EAAEP,IAAI,CAACO;MAApD,CAAb,CAAZ;MACAP,IAAI,CAACQ,MAAL;IACD,CAHD;;IAKA,IAAIC,MAAM,GAAG,CAAC,MAAM;MAClB,IACE,OAAOb,IAAP,KAAgB,UAAhB,IACC,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,EAAEc,cAAN,GAAuB,eAAvB,CAF/B,EAGE;QACA,OAAOd,IAAP;MACD;;MAED,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;QAC5B,OAAOe,OAAO,CAACf,IAAD,CAAd;MACD;;MAED,IAAIgB,MAAM,CAACC,IAAP,CAAYjB,IAAZ,EAAkBkB,MAAlB,IAA4B,CAAhC,EAAmC;QACjC,OAAOpB,aAAP;MACD;;MAED,MAAM,IAAIqB,KAAJ,CAAU,6DAAV,CAAN;IACD,CAjBY,GAAb;;IAmBAtB,OAAO,CAAC,CAACgB,MAAD,CAAD,CAAP,CAAkBO,OAAlB,CAA0BnB,IAA1B,EAAgCC,MAAM,CAACF,IAAvC,EAA6CqB,IAA7C;IAEApB,IAAI,CAACqB,SAAL,CAAe,SAAf,EAA2Bd,IAAD,IAAU;MAClCA,IAAI,CAACD,MAAL,CAAYV,OAAO,CAAC0B,MAAR,CAAe;QAAElB,IAAI,EAAE,OAAR;QAAiBC,MAAM,EAAEE,IAAI,CAACE,KAA9B;QAAqCC,MAAM,EAAEH,IAAI,CAACG;MAAlD,CAAf,CAAZ;MACAH,IAAI,CAACI,MAAL;IACD,CAHD;IAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACI,SAASY,SAAT,CAAmBC,IAAnB,EAAyB;MACvB,IAAI,EAAE,eAAeA,IAAjB,CAAJ,EAA4B;QAC1B;MACD,CAHsB,CAKvB;;;MACA,IAAIA,IAAI,CAACC,KAAT,EAAgB;QACdD,IAAI,CAACC,KAAL,CAAWC,OAAX,CAAoBC,CAAD,IAAOJ,SAAS,CAACI,CAAD,CAAnC;MACD,CARsB,CAUvB;MACA;MACA;MACA;MACA;;;MACA,IAAI,CAACH,IAAI,CAACC,KAAV,EAAiB;QACfD,IAAI,CAACD,SAAL;MACD;IACF;;IAEDA,SAAS,CAACvB,IAAD,CAAT;IAEA,OAAOA,IAAP;EACD,CA1ED;AA2ED"},"metadata":{},"sourceType":"module"}