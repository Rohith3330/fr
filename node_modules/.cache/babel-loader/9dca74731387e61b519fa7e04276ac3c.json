{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.finalize = finalize;\nexports.flattenToSet = flattenToSet;\n\nfunction finalize(deepArr) {\n  return Object.freeze(deepArr);\n}\n\nfunction flattenToSet(arr) {\n  var result = new Set();\n  var stack = [arr];\n\n  while (stack.length > 0) {\n    var _iterator = _createForOfIteratorHelper(stack.pop()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var el = _step.value;\n        if (Array.isArray(el)) stack.push(el);else result.add(el);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return result;\n}\n\n0 && 0;","map":{"version":3,"mappings":";;;;;;;;;;AAQO,SAASA,QAAT,CAAqBC,OAArB,EAAkE;EACvE,OAAOC,MAAM,CAACC,MAAPD,CAAcD,OAAdC,CAAP;AACD;;AAEM,SAASE,YAAT,CACLC,GADK,EAEG;EACR,IAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;EACA,IAAMC,KAAK,GAAG,CAACH,GAAD,CAAd;;EACA,OAAOG,KAAK,CAACC,MAAND,GAAe,CAAtB,EAAyB;IAAA,2CACNA,KAAK,CAACE,GAANF,EADM;IAAA;;IAAA;MACvB,oDAA8B;QAAA,IAAnBG,EAAmB;QAC5B,IAAIC,KAAK,CAACC,OAAND,CAAcD,EAAdC,CAAJ,EAAuBJ,KAAK,CAACM,IAANN,CAAWG,EAAXH,EAAvB,KACKF,MAAM,CAACS,GAAPT,CAAWK,EAAXL;MACN;IAJsB;MAAA;IAAA;MAAA;IAAA;EAKxB;;EACD,OAAOA,MAAP;AACD","names":["finalize","deepArr","Object","freeze","flattenToSet","arr","result","Set","stack","length","pop","el","Array","isArray","push","add"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\config\\helpers\\deep-array.ts"],"sourcesContent":["export type DeepArray<T> = Array<T | ReadonlyDeepArray<T>>;\n\n// Just to make sure that DeepArray<T> is not assignable to ReadonlyDeepArray<T>\ndeclare const __marker: unique symbol;\nexport type ReadonlyDeepArray<T> = ReadonlyArray<T | ReadonlyDeepArray<T>> & {\n  [__marker]: true;\n};\n\nexport function finalize<T>(deepArr: DeepArray<T>): ReadonlyDeepArray<T> {\n  return Object.freeze(deepArr) as ReadonlyDeepArray<T>;\n}\n\nexport function flattenToSet<T extends string>(\n  arr: ReadonlyDeepArray<T>,\n): Set<T> {\n  const result = new Set<T>();\n  const stack = [arr];\n  while (stack.length > 0) {\n    for (const el of stack.pop()) {\n      if (Array.isArray(el)) stack.push(el as ReadonlyDeepArray<T>);\n      else result.add(el as T);\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}