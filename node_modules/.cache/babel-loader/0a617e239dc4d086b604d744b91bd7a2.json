{"ast":null,"code":"'use strict';\n\nconst charset = 'charset'; // eslint-disable-next-line no-control-regex\n\nconst nonAscii = /[^\\x00-\\x7F]/;\n/**\n * @typedef {{add?: boolean}} Options\n */\n\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options} opts\n * @return {import('postcss').Plugin}\n */\n\nfunction pluginCreator() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    postcssPlugin: 'postcss-normalize-' + charset,\n\n    OnceExit(css, _ref) {\n      let {\n        AtRule\n      } = _ref;\n\n      /** @type {import('postcss').AtRule | undefined} */\n      let charsetRule;\n      /** @type {import('postcss').Node | undefined} */\n\n      let nonAsciiNode;\n      css.walk(node => {\n        if (node.type === 'atrule' && node.name === charset) {\n          if (!charsetRule) {\n            charsetRule = node;\n          }\n\n          node.remove();\n        } else if (!nonAsciiNode && node.parent === css && nonAscii.test(node.toString())) {\n          nonAsciiNode = node;\n        }\n      });\n\n      if (nonAsciiNode) {\n        if (!charsetRule && opts.add !== false) {\n          charsetRule = new AtRule({\n            name: charset,\n            params: '\"utf-8\"'\n          });\n        }\n\n        if (charsetRule) {\n          charsetRule.source = nonAsciiNode.source;\n          css.prepend(charsetRule);\n        }\n      }\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"names":["charset","nonAscii","pluginCreator","opts","postcssPlugin","OnceExit","css","AtRule","charsetRule","nonAsciiNode","walk","node","type","name","remove","parent","test","toString","add","params","source","prepend","postcss","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-normalize-charset/src/index.js"],"sourcesContent":["'use strict';\nconst charset = 'charset';\n// eslint-disable-next-line no-control-regex\nconst nonAscii = /[^\\x00-\\x7F]/;\n\n/**\n * @typedef {{add?: boolean}} Options\n */\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options} opts\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator(opts = {}) {\n  return {\n    postcssPlugin: 'postcss-normalize-' + charset,\n\n    OnceExit(css, { AtRule }) {\n      /** @type {import('postcss').AtRule | undefined} */\n      let charsetRule;\n      /** @type {import('postcss').Node | undefined} */\n      let nonAsciiNode;\n\n      css.walk((node) => {\n        if (node.type === 'atrule' && node.name === charset) {\n          if (!charsetRule) {\n            charsetRule = node;\n          }\n          node.remove();\n        } else if (\n          !nonAsciiNode &&\n          node.parent === css &&\n          nonAscii.test(node.toString())\n        ) {\n          nonAsciiNode = node;\n        }\n      });\n\n      if (nonAsciiNode) {\n        if (!charsetRule && opts.add !== false) {\n          charsetRule = new AtRule({\n            name: charset,\n            params: '\"utf-8\"',\n          });\n        }\n        if (charsetRule) {\n          charsetRule.source = nonAsciiNode.source;\n          css.prepend(charsetRule);\n        }\n      }\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"],"mappings":"AAAA;;AACA,MAAMA,OAAO,GAAG,SAAhB,C,CACA;;AACA,MAAMC,QAAQ,GAAG,cAAjB;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,GAAkC;EAAA,IAAXC,IAAW,uEAAJ,EAAI;EAChC,OAAO;IACLC,aAAa,EAAE,uBAAuBJ,OADjC;;IAGLK,QAAQ,CAACC,GAAD,QAAkB;MAAA,IAAZ;QAAEC;MAAF,CAAY;;MACxB;MACA,IAAIC,WAAJ;MACA;;MACA,IAAIC,YAAJ;MAEAH,GAAG,CAACI,IAAJ,CAAUC,IAAD,IAAU;QACjB,IAAIA,IAAI,CAACC,IAAL,KAAc,QAAd,IAA0BD,IAAI,CAACE,IAAL,KAAcb,OAA5C,EAAqD;UACnD,IAAI,CAACQ,WAAL,EAAkB;YAChBA,WAAW,GAAGG,IAAd;UACD;;UACDA,IAAI,CAACG,MAAL;QACD,CALD,MAKO,IACL,CAACL,YAAD,IACAE,IAAI,CAACI,MAAL,KAAgBT,GADhB,IAEAL,QAAQ,CAACe,IAAT,CAAcL,IAAI,CAACM,QAAL,EAAd,CAHK,EAIL;UACAR,YAAY,GAAGE,IAAf;QACD;MACF,CAbD;;MAeA,IAAIF,YAAJ,EAAkB;QAChB,IAAI,CAACD,WAAD,IAAgBL,IAAI,CAACe,GAAL,KAAa,KAAjC,EAAwC;UACtCV,WAAW,GAAG,IAAID,MAAJ,CAAW;YACvBM,IAAI,EAAEb,OADiB;YAEvBmB,MAAM,EAAE;UAFe,CAAX,CAAd;QAID;;QACD,IAAIX,WAAJ,EAAiB;UACfA,WAAW,CAACY,MAAZ,GAAqBX,YAAY,CAACW,MAAlC;UACAd,GAAG,CAACe,OAAJ,CAAYb,WAAZ;QACD;MACF;IACF;;EApCI,CAAP;AAsCD;;AAEDN,aAAa,CAACoB,OAAd,GAAwB,IAAxB;AACAC,MAAM,CAACC,OAAP,GAAiBtB,aAAjB"},"metadata":{},"sourceType":"script"}