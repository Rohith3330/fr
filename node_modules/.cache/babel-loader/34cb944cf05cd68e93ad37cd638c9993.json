{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RULE_NAME = void 0;\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\n\nconst node_utils_1 = require(\"../node-utils\");\n\nexports.RULE_NAME = 'render-result-naming-convention';\nconst ALLOWED_VAR_NAMES = ['view', 'utils'];\nconst ALLOWED_VAR_NAMES_TEXT = ALLOWED_VAR_NAMES.map(name => `\\`${name}\\``).join(', ').replace(/, ([^,]*)$/, ', or $1');\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n  name: exports.RULE_NAME,\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Enforce a valid naming for return value from `render`',\n      recommendedConfig: {\n        dom: false,\n        angular: 'error',\n        react: 'error',\n        vue: 'error',\n        marko: 'error'\n      }\n    },\n    messages: {\n      renderResultNamingConvention: `\\`{{ renderResultName }}\\` is not a recommended name for \\`render\\` returned value. Instead, you should destructure it, or name it using one of: ${ALLOWED_VAR_NAMES_TEXT}`\n    },\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context, _, helpers) {\n    const renderWrapperNames = [];\n\n    function detectRenderWrapper(node) {\n      const innerFunction = (0, node_utils_1.getInnermostReturningFunction)(context, node);\n\n      if (innerFunction) {\n        renderWrapperNames.push((0, node_utils_1.getFunctionName)(innerFunction));\n      }\n    }\n\n    return {\n      CallExpression(node) {\n        const callExpressionIdentifier = (0, node_utils_1.getDeepestIdentifierNode)(node);\n\n        if (!callExpressionIdentifier) {\n          return;\n        }\n\n        if (helpers.isRenderUtil(callExpressionIdentifier)) {\n          detectRenderWrapper(callExpressionIdentifier);\n        }\n      },\n\n      VariableDeclarator(node) {\n        if (!node.init) {\n          return;\n        }\n\n        const initIdentifierNode = (0, node_utils_1.getDeepestIdentifierNode)(node.init);\n\n        if (!initIdentifierNode) {\n          return;\n        }\n\n        if (!helpers.isRenderVariableDeclarator(node) && !renderWrapperNames.includes(initIdentifierNode.name)) {\n          return;\n        }\n\n        if ((0, node_utils_1.isObjectPattern)(node.id)) {\n          return;\n        }\n\n        const renderResultName = utils_1.ASTUtils.isIdentifier(node.id) && node.id.name;\n\n        if (!renderResultName) {\n          return;\n        }\n\n        const isAllowedRenderResultName = ALLOWED_VAR_NAMES.includes(renderResultName);\n\n        if (isAllowedRenderResultName) {\n          return;\n        }\n\n        context.report({\n          node,\n          messageId: 'renderResultNamingConvention',\n          data: {\n            renderResultName\n          }\n        });\n      }\n\n    };\n  }\n\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","RULE_NAME","utils_1","require","create_testing_library_rule_1","node_utils_1","ALLOWED_VAR_NAMES","ALLOWED_VAR_NAMES_TEXT","map","name","join","replace","default","createTestingLibraryRule","meta","type","docs","description","recommendedConfig","dom","angular","react","vue","marko","messages","renderResultNamingConvention","schema","defaultOptions","create","context","_","helpers","renderWrapperNames","detectRenderWrapper","node","innerFunction","getInnermostReturningFunction","push","getFunctionName","CallExpression","callExpressionIdentifier","getDeepestIdentifierNode","isRenderUtil","VariableDeclarator","init","initIdentifierNode","isRenderVariableDeclarator","includes","isObjectPattern","id","renderResultName","ASTUtils","isIdentifier","isAllowedRenderResultName","report","messageId","data"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-testing-library/rules/render-result-naming-convention.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RULE_NAME = void 0;\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\nconst node_utils_1 = require(\"../node-utils\");\nexports.RULE_NAME = 'render-result-naming-convention';\nconst ALLOWED_VAR_NAMES = ['view', 'utils'];\nconst ALLOWED_VAR_NAMES_TEXT = ALLOWED_VAR_NAMES.map((name) => `\\`${name}\\``)\n    .join(', ')\n    .replace(/, ([^,]*)$/, ', or $1');\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n    name: exports.RULE_NAME,\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Enforce a valid naming for return value from `render`',\n            recommendedConfig: {\n                dom: false,\n                angular: 'error',\n                react: 'error',\n                vue: 'error',\n                marko: 'error',\n            },\n        },\n        messages: {\n            renderResultNamingConvention: `\\`{{ renderResultName }}\\` is not a recommended name for \\`render\\` returned value. Instead, you should destructure it, or name it using one of: ${ALLOWED_VAR_NAMES_TEXT}`,\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context, _, helpers) {\n        const renderWrapperNames = [];\n        function detectRenderWrapper(node) {\n            const innerFunction = (0, node_utils_1.getInnermostReturningFunction)(context, node);\n            if (innerFunction) {\n                renderWrapperNames.push((0, node_utils_1.getFunctionName)(innerFunction));\n            }\n        }\n        return {\n            CallExpression(node) {\n                const callExpressionIdentifier = (0, node_utils_1.getDeepestIdentifierNode)(node);\n                if (!callExpressionIdentifier) {\n                    return;\n                }\n                if (helpers.isRenderUtil(callExpressionIdentifier)) {\n                    detectRenderWrapper(callExpressionIdentifier);\n                }\n            },\n            VariableDeclarator(node) {\n                if (!node.init) {\n                    return;\n                }\n                const initIdentifierNode = (0, node_utils_1.getDeepestIdentifierNode)(node.init);\n                if (!initIdentifierNode) {\n                    return;\n                }\n                if (!helpers.isRenderVariableDeclarator(node) &&\n                    !renderWrapperNames.includes(initIdentifierNode.name)) {\n                    return;\n                }\n                if ((0, node_utils_1.isObjectPattern)(node.id)) {\n                    return;\n                }\n                const renderResultName = utils_1.ASTUtils.isIdentifier(node.id) && node.id.name;\n                if (!renderResultName) {\n                    return;\n                }\n                const isAllowedRenderResultName = ALLOWED_VAR_NAMES.includes(renderResultName);\n                if (isAllowedRenderResultName) {\n                    return;\n                }\n                context.report({\n                    node,\n                    messageId: 'renderResultNamingConvention',\n                    data: {\n                        renderResultName,\n                    },\n                });\n            },\n        };\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}