{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RULE_NAME = void 0;\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\n\nconst node_utils_1 = require(\"../node-utils\");\n\nconst utils_2 = require(\"../utils\");\n\nexports.RULE_NAME = 'no-debugging-utils';\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n  name: exports.RULE_NAME,\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallow the use of debugging utilities like `debug`',\n      recommendedConfig: {\n        dom: false,\n        angular: 'error',\n        react: 'error',\n        vue: 'error',\n        marko: 'error'\n      }\n    },\n    messages: {\n      noDebug: 'Unexpected debug statement'\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        utilsToCheckFor: {\n          type: 'object',\n          properties: utils_2.DEBUG_UTILS.reduce((obj, name) => Object.assign({\n            [name]: {\n              type: 'boolean'\n            }\n          }, obj), {}),\n          additionalProperties: false\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{\n    utilsToCheckFor: {\n      debug: true,\n      logTestingPlaygroundURL: true\n    }\n  }],\n\n  create(context, _ref, helpers) {\n    let [{\n      utilsToCheckFor = {}\n    }] = _ref;\n    const suspiciousDebugVariableNames = [];\n    const suspiciousReferenceNodes = [];\n    const renderWrapperNames = [];\n    const builtInConsoleNodes = [];\n    const utilsToReport = Object.entries(utilsToCheckFor).filter(_ref2 => {\n      let [, shouldCheckFor] = _ref2;\n      return shouldCheckFor;\n    }).map(_ref3 => {\n      let [name] = _ref3;\n      return name;\n    });\n\n    function detectRenderWrapper(node) {\n      const innerFunction = (0, node_utils_1.getInnermostReturningFunction)(context, node);\n\n      if (innerFunction) {\n        renderWrapperNames.push((0, node_utils_1.getFunctionName)(innerFunction));\n      }\n    }\n\n    return {\n      VariableDeclarator(node) {\n        if (!node.init) {\n          return;\n        }\n\n        const initIdentifierNode = (0, node_utils_1.getDeepestIdentifierNode)(node.init);\n\n        if (!initIdentifierNode) {\n          return;\n        }\n\n        if (initIdentifierNode.name === 'console') {\n          builtInConsoleNodes.push(node);\n          return;\n        }\n\n        const isRenderWrapperVariableDeclarator = renderWrapperNames.includes(initIdentifierNode.name);\n\n        if (!helpers.isRenderVariableDeclarator(node) && !isRenderWrapperVariableDeclarator) {\n          return;\n        }\n\n        if ((0, node_utils_1.isObjectPattern)(node.id)) {\n          for (const property of node.id.properties) {\n            if ((0, node_utils_1.isProperty)(property) && utils_1.ASTUtils.isIdentifier(property.key) && utilsToReport.includes(property.key.name)) {\n              const identifierNode = (0, node_utils_1.getDeepestIdentifierNode)(property.value);\n\n              if (identifierNode) {\n                suspiciousDebugVariableNames.push(identifierNode.name);\n              }\n            }\n          }\n        }\n\n        if (utils_1.ASTUtils.isIdentifier(node.id)) {\n          suspiciousReferenceNodes.push(node.id);\n        }\n      },\n\n      CallExpression(node) {\n        const callExpressionIdentifier = (0, node_utils_1.getDeepestIdentifierNode)(node);\n\n        if (!callExpressionIdentifier) {\n          return;\n        }\n\n        if (helpers.isRenderUtil(callExpressionIdentifier)) {\n          detectRenderWrapper(callExpressionIdentifier);\n        }\n\n        const referenceNode = (0, node_utils_1.getReferenceNode)(node);\n        const referenceIdentifier = (0, node_utils_1.getPropertyIdentifierNode)(referenceNode);\n\n        if (!referenceIdentifier) {\n          return;\n        }\n\n        const isDebugUtil = helpers.isDebugUtil(callExpressionIdentifier, utilsToReport);\n        const isDeclaredDebugVariable = suspiciousDebugVariableNames.includes(callExpressionIdentifier.name);\n        const isChainedReferenceDebug = suspiciousReferenceNodes.some(suspiciousReferenceIdentifier => {\n          return utilsToReport.includes(callExpressionIdentifier.name) && suspiciousReferenceIdentifier.name === referenceIdentifier.name;\n        });\n        const isVariableFromBuiltInConsole = builtInConsoleNodes.some(variableDeclarator => {\n          const variables = context.getDeclaredVariables(variableDeclarator);\n          return variables.some(_ref4 => {\n            let {\n              name\n            } = _ref4;\n            return name === callExpressionIdentifier.name && (0, node_utils_1.isCallExpression)(callExpressionIdentifier.parent);\n          });\n        });\n\n        if (!isVariableFromBuiltInConsole && (isDebugUtil || isDeclaredDebugVariable || isChainedReferenceDebug)) {\n          context.report({\n            node: callExpressionIdentifier,\n            messageId: 'noDebug'\n          });\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","RULE_NAME","utils_1","require","create_testing_library_rule_1","node_utils_1","utils_2","default","createTestingLibraryRule","name","meta","type","docs","description","recommendedConfig","dom","angular","react","vue","marko","messages","noDebug","schema","properties","utilsToCheckFor","DEBUG_UTILS","reduce","obj","assign","additionalProperties","defaultOptions","debug","logTestingPlaygroundURL","create","context","helpers","suspiciousDebugVariableNames","suspiciousReferenceNodes","renderWrapperNames","builtInConsoleNodes","utilsToReport","entries","filter","shouldCheckFor","map","detectRenderWrapper","node","innerFunction","getInnermostReturningFunction","push","getFunctionName","VariableDeclarator","init","initIdentifierNode","getDeepestIdentifierNode","isRenderWrapperVariableDeclarator","includes","isRenderVariableDeclarator","isObjectPattern","id","property","isProperty","ASTUtils","isIdentifier","key","identifierNode","CallExpression","callExpressionIdentifier","isRenderUtil","referenceNode","getReferenceNode","referenceIdentifier","getPropertyIdentifierNode","isDebugUtil","isDeclaredDebugVariable","isChainedReferenceDebug","some","suspiciousReferenceIdentifier","isVariableFromBuiltInConsole","variableDeclarator","variables","getDeclaredVariables","isCallExpression","parent","report","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-testing-library/rules/no-debugging-utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RULE_NAME = void 0;\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst create_testing_library_rule_1 = require(\"../create-testing-library-rule\");\nconst node_utils_1 = require(\"../node-utils\");\nconst utils_2 = require(\"../utils\");\nexports.RULE_NAME = 'no-debugging-utils';\nexports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({\n    name: exports.RULE_NAME,\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow the use of debugging utilities like `debug`',\n            recommendedConfig: {\n                dom: false,\n                angular: 'error',\n                react: 'error',\n                vue: 'error',\n                marko: 'error',\n            },\n        },\n        messages: {\n            noDebug: 'Unexpected debug statement',\n        },\n        schema: [\n            {\n                type: 'object',\n                properties: {\n                    utilsToCheckFor: {\n                        type: 'object',\n                        properties: utils_2.DEBUG_UTILS.reduce((obj, name) => (Object.assign({ [name]: { type: 'boolean' } }, obj)), {}),\n                        additionalProperties: false,\n                    },\n                },\n                additionalProperties: false,\n            },\n        ],\n    },\n    defaultOptions: [\n        { utilsToCheckFor: { debug: true, logTestingPlaygroundURL: true } },\n    ],\n    create(context, [{ utilsToCheckFor = {} }], helpers) {\n        const suspiciousDebugVariableNames = [];\n        const suspiciousReferenceNodes = [];\n        const renderWrapperNames = [];\n        const builtInConsoleNodes = [];\n        const utilsToReport = Object.entries(utilsToCheckFor)\n            .filter(([, shouldCheckFor]) => shouldCheckFor)\n            .map(([name]) => name);\n        function detectRenderWrapper(node) {\n            const innerFunction = (0, node_utils_1.getInnermostReturningFunction)(context, node);\n            if (innerFunction) {\n                renderWrapperNames.push((0, node_utils_1.getFunctionName)(innerFunction));\n            }\n        }\n        return {\n            VariableDeclarator(node) {\n                if (!node.init) {\n                    return;\n                }\n                const initIdentifierNode = (0, node_utils_1.getDeepestIdentifierNode)(node.init);\n                if (!initIdentifierNode) {\n                    return;\n                }\n                if (initIdentifierNode.name === 'console') {\n                    builtInConsoleNodes.push(node);\n                    return;\n                }\n                const isRenderWrapperVariableDeclarator = renderWrapperNames.includes(initIdentifierNode.name);\n                if (!helpers.isRenderVariableDeclarator(node) &&\n                    !isRenderWrapperVariableDeclarator) {\n                    return;\n                }\n                if ((0, node_utils_1.isObjectPattern)(node.id)) {\n                    for (const property of node.id.properties) {\n                        if ((0, node_utils_1.isProperty)(property) &&\n                            utils_1.ASTUtils.isIdentifier(property.key) &&\n                            utilsToReport.includes(property.key.name)) {\n                            const identifierNode = (0, node_utils_1.getDeepestIdentifierNode)(property.value);\n                            if (identifierNode) {\n                                suspiciousDebugVariableNames.push(identifierNode.name);\n                            }\n                        }\n                    }\n                }\n                if (utils_1.ASTUtils.isIdentifier(node.id)) {\n                    suspiciousReferenceNodes.push(node.id);\n                }\n            },\n            CallExpression(node) {\n                const callExpressionIdentifier = (0, node_utils_1.getDeepestIdentifierNode)(node);\n                if (!callExpressionIdentifier) {\n                    return;\n                }\n                if (helpers.isRenderUtil(callExpressionIdentifier)) {\n                    detectRenderWrapper(callExpressionIdentifier);\n                }\n                const referenceNode = (0, node_utils_1.getReferenceNode)(node);\n                const referenceIdentifier = (0, node_utils_1.getPropertyIdentifierNode)(referenceNode);\n                if (!referenceIdentifier) {\n                    return;\n                }\n                const isDebugUtil = helpers.isDebugUtil(callExpressionIdentifier, utilsToReport);\n                const isDeclaredDebugVariable = suspiciousDebugVariableNames.includes(callExpressionIdentifier.name);\n                const isChainedReferenceDebug = suspiciousReferenceNodes.some((suspiciousReferenceIdentifier) => {\n                    return (utilsToReport.includes(callExpressionIdentifier.name) &&\n                        suspiciousReferenceIdentifier.name === referenceIdentifier.name);\n                });\n                const isVariableFromBuiltInConsole = builtInConsoleNodes.some((variableDeclarator) => {\n                    const variables = context.getDeclaredVariables(variableDeclarator);\n                    return variables.some(({ name }) => name === callExpressionIdentifier.name &&\n                        (0, node_utils_1.isCallExpression)(callExpressionIdentifier.parent));\n                });\n                if (!isVariableFromBuiltInConsole &&\n                    (isDebugUtil || isDeclaredDebugVariable || isChainedReferenceDebug)) {\n                    context.report({\n                        node: callExpressionIdentifier,\n                        messageId: 'noDebug',\n                    });\n                }\n            },\n        };\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}