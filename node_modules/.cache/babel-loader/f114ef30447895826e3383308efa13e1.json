{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util_1 = require(\"../util\");\n\nexports.default = (0, util_1.createRule)({\n  name: 'consistent-generic-constructors',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Enforce specifying generic type arguments on type annotation or constructor name of a constructor call',\n      recommended: 'strict'\n    },\n    messages: {\n      preferTypeAnnotation: 'The generic type arguments should be specified as part of the type annotation.',\n      preferConstructor: 'The generic type arguments should be specified as part of the constructor type arguments.'\n    },\n    fixable: 'code',\n    schema: [{\n      enum: ['type-annotation', 'constructor']\n    }]\n  },\n  defaultOptions: ['constructor'],\n\n  create(context, _ref) {\n    let [mode] = _ref;\n    const sourceCode = context.getSourceCode();\n    return {\n      'VariableDeclarator,PropertyDefinition'(node) {\n        var _a, _b;\n\n        const lhs = (_a = (node.type === utils_1.AST_NODE_TYPES.VariableDeclarator ? node.id : node).typeAnnotation) === null || _a === void 0 ? void 0 : _a.typeAnnotation;\n        const rhs = node.type === utils_1.AST_NODE_TYPES.VariableDeclarator ? node.init : node.value;\n\n        if (!rhs || rhs.type !== utils_1.AST_NODE_TYPES.NewExpression || rhs.callee.type !== utils_1.AST_NODE_TYPES.Identifier) {\n          return;\n        }\n\n        if (lhs && (lhs.type !== utils_1.AST_NODE_TYPES.TSTypeReference || lhs.typeName.type !== utils_1.AST_NODE_TYPES.Identifier || lhs.typeName.name !== rhs.callee.name)) {\n          return;\n        }\n\n        if (mode === 'type-annotation') {\n          if (!lhs && rhs.typeParameters) {\n            const {\n              typeParameters,\n              callee\n            } = rhs;\n            const typeAnnotation = sourceCode.getText(callee) + sourceCode.getText(typeParameters);\n            context.report({\n              node,\n              messageId: 'preferTypeAnnotation',\n\n              fix(fixer) {\n                function getIDToAttachAnnotation() {\n                  if (node.type === utils_1.AST_NODE_TYPES.VariableDeclarator) {\n                    return node.id;\n                  }\n\n                  if (!node.computed) {\n                    return node.key;\n                  } // If the property's computed, we have to attach the\n                  // annotation after the square bracket, not the enclosed expression\n\n\n                  return sourceCode.getTokenAfter(node.key);\n                }\n\n                return [fixer.remove(typeParameters), fixer.insertTextAfter(getIDToAttachAnnotation(), ': ' + typeAnnotation)];\n              }\n\n            });\n          }\n\n          return;\n        }\n\n        if (mode === 'constructor') {\n          if ((lhs === null || lhs === void 0 ? void 0 : lhs.typeParameters) && !rhs.typeParameters) {\n            const hasParens = ((_b = sourceCode.getTokenAfter(rhs.callee)) === null || _b === void 0 ? void 0 : _b.value) === '(';\n            const extraComments = new Set(sourceCode.getCommentsInside(lhs.parent));\n            sourceCode.getCommentsInside(lhs.typeParameters).forEach(c => extraComments.delete(c));\n            context.report({\n              node,\n              messageId: 'preferConstructor',\n\n              *fix(fixer) {\n                yield fixer.remove(lhs.parent);\n\n                for (const comment of extraComments) {\n                  yield fixer.insertTextAfter(rhs.callee, sourceCode.getText(comment));\n                }\n\n                yield fixer.insertTextAfter(rhs.callee, sourceCode.getText(lhs.typeParameters));\n\n                if (!hasParens) {\n                  yield fixer.insertTextAfter(rhs.callee, '()');\n                }\n              }\n\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["exports","name","meta","type","docs","description","recommended","messages","preferTypeAnnotation","preferConstructor","fixable","schema","enum","defaultOptions","create","context","mode","sourceCode","getSourceCode","node","lhs","utils_1","VariableDeclarator","id","typeAnnotation","_a","rhs","init","value","NewExpression","callee","Identifier","TSTypeReference","typeName","typeParameters","getText","report","messageId","fix","fixer","getIDToAttachAnnotation","computed","key","getTokenAfter","remove","insertTextAfter","hasParens","_b","extraComments","Set","getCommentsInside","parent","forEach","c","delete","comment"],"sources":["../../src/rules/consistent-generic-constructors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}