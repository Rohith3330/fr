{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"@sinonjs/referee-sinon\").assert;\n\nvar calledInOrder = require(\"./called-in-order\");\n\nvar sinon = require(\"@sinonjs/referee-sinon\").sinon;\n\nvar testObject1 = {\n  someFunction: function () {\n    return;\n  }\n};\nvar testObject2 = {\n  otherFunction: function () {\n    return;\n  }\n};\nvar testObject3 = {\n  thirdFunction: function () {\n    return;\n  }\n};\n\nfunction testMethod() {\n  testObject1.someFunction();\n  testObject2.otherFunction();\n  testObject2.otherFunction();\n  testObject2.otherFunction();\n  testObject3.thirdFunction();\n}\n\ndescribe(\"calledInOrder\", function () {\n  beforeEach(function () {\n    sinon.stub(testObject1, \"someFunction\");\n    sinon.stub(testObject2, \"otherFunction\");\n    sinon.stub(testObject3, \"thirdFunction\");\n    testMethod();\n  });\n  afterEach(function () {\n    testObject1.someFunction.restore();\n    testObject2.otherFunction.restore();\n    testObject3.thirdFunction.restore();\n  });\n  describe(\"given single array argument\", function () {\n    describe(\"when stubs were called in expected order\", function () {\n      it(\"returns true\", function () {\n        assert.isTrue(calledInOrder([testObject1.someFunction, testObject2.otherFunction]));\n        assert.isTrue(calledInOrder([testObject1.someFunction, testObject2.otherFunction, testObject2.otherFunction, testObject3.thirdFunction]));\n      });\n    });\n    describe(\"when stubs were called in unexpected order\", function () {\n      it(\"returns false\", function () {\n        assert.isFalse(calledInOrder([testObject2.otherFunction, testObject1.someFunction]));\n        assert.isFalse(calledInOrder([testObject2.otherFunction, testObject1.someFunction, testObject1.someFunction, testObject3.thirdFunction]));\n      });\n    });\n  });\n  describe(\"given multiple arguments\", function () {\n    describe(\"when stubs were called in expected order\", function () {\n      it(\"returns true\", function () {\n        assert.isTrue(calledInOrder(testObject1.someFunction, testObject2.otherFunction));\n        assert.isTrue(calledInOrder(testObject1.someFunction, testObject2.otherFunction, testObject3.thirdFunction));\n      });\n    });\n    describe(\"when stubs were called in unexpected order\", function () {\n      it(\"returns false\", function () {\n        assert.isFalse(calledInOrder(testObject2.otherFunction, testObject1.someFunction));\n        assert.isFalse(calledInOrder(testObject2.otherFunction, testObject1.someFunction, testObject3.thirdFunction));\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","calledInOrder","sinon","testObject1","someFunction","testObject2","otherFunction","testObject3","thirdFunction","testMethod","describe","beforeEach","stub","afterEach","restore","it","isTrue","isFalse"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@sinonjs/commons/lib/called-in-order.test.js"],"sourcesContent":["\"use strict\";\n\nvar assert = require(\"@sinonjs/referee-sinon\").assert;\nvar calledInOrder = require(\"./called-in-order\");\nvar sinon = require(\"@sinonjs/referee-sinon\").sinon;\n\nvar testObject1 = {\n    someFunction: function() {\n        return;\n    }\n};\nvar testObject2 = {\n    otherFunction: function() {\n        return;\n    }\n};\nvar testObject3 = {\n    thirdFunction: function() {\n        return;\n    }\n};\n\nfunction testMethod() {\n    testObject1.someFunction();\n    testObject2.otherFunction();\n    testObject2.otherFunction();\n    testObject2.otherFunction();\n    testObject3.thirdFunction();\n}\n\ndescribe(\"calledInOrder\", function() {\n    beforeEach(function() {\n        sinon.stub(testObject1, \"someFunction\");\n        sinon.stub(testObject2, \"otherFunction\");\n        sinon.stub(testObject3, \"thirdFunction\");\n        testMethod();\n    });\n    afterEach(function() {\n        testObject1.someFunction.restore();\n        testObject2.otherFunction.restore();\n        testObject3.thirdFunction.restore();\n    });\n\n    describe(\"given single array argument\", function() {\n        describe(\"when stubs were called in expected order\", function() {\n            it(\"returns true\", function() {\n                assert.isTrue(\n                    calledInOrder([\n                        testObject1.someFunction,\n                        testObject2.otherFunction\n                    ])\n                );\n                assert.isTrue(\n                    calledInOrder([\n                        testObject1.someFunction,\n                        testObject2.otherFunction,\n                        testObject2.otherFunction,\n                        testObject3.thirdFunction\n                    ])\n                );\n            });\n        });\n\n        describe(\"when stubs were called in unexpected order\", function() {\n            it(\"returns false\", function() {\n                assert.isFalse(\n                    calledInOrder([\n                        testObject2.otherFunction,\n                        testObject1.someFunction\n                    ])\n                );\n                assert.isFalse(\n                    calledInOrder([\n                        testObject2.otherFunction,\n                        testObject1.someFunction,\n                        testObject1.someFunction,\n                        testObject3.thirdFunction\n                    ])\n                );\n            });\n        });\n    });\n\n    describe(\"given multiple arguments\", function() {\n        describe(\"when stubs were called in expected order\", function() {\n            it(\"returns true\", function() {\n                assert.isTrue(\n                    calledInOrder(\n                        testObject1.someFunction,\n                        testObject2.otherFunction\n                    )\n                );\n                assert.isTrue(\n                    calledInOrder(\n                        testObject1.someFunction,\n                        testObject2.otherFunction,\n                        testObject3.thirdFunction\n                    )\n                );\n            });\n        });\n\n        describe(\"when stubs were called in unexpected order\", function() {\n            it(\"returns false\", function() {\n                assert.isFalse(\n                    calledInOrder(\n                        testObject2.otherFunction,\n                        testObject1.someFunction\n                    )\n                );\n                assert.isFalse(\n                    calledInOrder(\n                        testObject2.otherFunction,\n                        testObject1.someFunction,\n                        testObject3.thirdFunction\n                    )\n                );\n            });\n        });\n    });\n});\n"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,wBAAD,CAAP,CAAkCD,MAA/C;;AACA,IAAIE,aAAa,GAAGD,OAAO,CAAC,mBAAD,CAA3B;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,wBAAD,CAAP,CAAkCE,KAA9C;;AAEA,IAAIC,WAAW,GAAG;EACdC,YAAY,EAAE,YAAW;IACrB;EACH;AAHa,CAAlB;AAKA,IAAIC,WAAW,GAAG;EACdC,aAAa,EAAE,YAAW;IACtB;EACH;AAHa,CAAlB;AAKA,IAAIC,WAAW,GAAG;EACdC,aAAa,EAAE,YAAW;IACtB;EACH;AAHa,CAAlB;;AAMA,SAASC,UAAT,GAAsB;EAClBN,WAAW,CAACC,YAAZ;EACAC,WAAW,CAACC,aAAZ;EACAD,WAAW,CAACC,aAAZ;EACAD,WAAW,CAACC,aAAZ;EACAC,WAAW,CAACC,aAAZ;AACH;;AAEDE,QAAQ,CAAC,eAAD,EAAkB,YAAW;EACjCC,UAAU,CAAC,YAAW;IAClBT,KAAK,CAACU,IAAN,CAAWT,WAAX,EAAwB,cAAxB;IACAD,KAAK,CAACU,IAAN,CAAWP,WAAX,EAAwB,eAAxB;IACAH,KAAK,CAACU,IAAN,CAAWL,WAAX,EAAwB,eAAxB;IACAE,UAAU;EACb,CALS,CAAV;EAMAI,SAAS,CAAC,YAAW;IACjBV,WAAW,CAACC,YAAZ,CAAyBU,OAAzB;IACAT,WAAW,CAACC,aAAZ,CAA0BQ,OAA1B;IACAP,WAAW,CAACC,aAAZ,CAA0BM,OAA1B;EACH,CAJQ,CAAT;EAMAJ,QAAQ,CAAC,6BAAD,EAAgC,YAAW;IAC/CA,QAAQ,CAAC,0CAAD,EAA6C,YAAW;MAC5DK,EAAE,CAAC,cAAD,EAAiB,YAAW;QAC1BhB,MAAM,CAACiB,MAAP,CACIf,aAAa,CAAC,CACVE,WAAW,CAACC,YADF,EAEVC,WAAW,CAACC,aAFF,CAAD,CADjB;QAMAP,MAAM,CAACiB,MAAP,CACIf,aAAa,CAAC,CACVE,WAAW,CAACC,YADF,EAEVC,WAAW,CAACC,aAFF,EAGVD,WAAW,CAACC,aAHF,EAIVC,WAAW,CAACC,aAJF,CAAD,CADjB;MAQH,CAfC,CAAF;IAgBH,CAjBO,CAAR;IAmBAE,QAAQ,CAAC,4CAAD,EAA+C,YAAW;MAC9DK,EAAE,CAAC,eAAD,EAAkB,YAAW;QAC3BhB,MAAM,CAACkB,OAAP,CACIhB,aAAa,CAAC,CACVI,WAAW,CAACC,aADF,EAEVH,WAAW,CAACC,YAFF,CAAD,CADjB;QAMAL,MAAM,CAACkB,OAAP,CACIhB,aAAa,CAAC,CACVI,WAAW,CAACC,aADF,EAEVH,WAAW,CAACC,YAFF,EAGVD,WAAW,CAACC,YAHF,EAIVG,WAAW,CAACC,aAJF,CAAD,CADjB;MAQH,CAfC,CAAF;IAgBH,CAjBO,CAAR;EAkBH,CAtCO,CAAR;EAwCAE,QAAQ,CAAC,0BAAD,EAA6B,YAAW;IAC5CA,QAAQ,CAAC,0CAAD,EAA6C,YAAW;MAC5DK,EAAE,CAAC,cAAD,EAAiB,YAAW;QAC1BhB,MAAM,CAACiB,MAAP,CACIf,aAAa,CACTE,WAAW,CAACC,YADH,EAETC,WAAW,CAACC,aAFH,CADjB;QAMAP,MAAM,CAACiB,MAAP,CACIf,aAAa,CACTE,WAAW,CAACC,YADH,EAETC,WAAW,CAACC,aAFH,EAGTC,WAAW,CAACC,aAHH,CADjB;MAOH,CAdC,CAAF;IAeH,CAhBO,CAAR;IAkBAE,QAAQ,CAAC,4CAAD,EAA+C,YAAW;MAC9DK,EAAE,CAAC,eAAD,EAAkB,YAAW;QAC3BhB,MAAM,CAACkB,OAAP,CACIhB,aAAa,CACTI,WAAW,CAACC,aADH,EAETH,WAAW,CAACC,YAFH,CADjB;QAMAL,MAAM,CAACkB,OAAP,CACIhB,aAAa,CACTI,WAAW,CAACC,aADH,EAETH,WAAW,CAACC,YAFH,EAGTG,WAAW,CAACC,aAHH,CADjB;MAOH,CAdC,CAAF;IAeH,CAhBO,CAAR;EAiBH,CApCO,CAAR;AAqCH,CA1FO,CAAR"},"metadata":{},"sourceType":"script"}