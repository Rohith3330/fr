{"ast":null,"code":"/* eslint-env mocha */\nimport assert from 'assert';\nimport { extractProp, setParserName } from '../helper';\nimport propName from '../../src/propName';\ndescribe('propName', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof propName;\n    assert.equal(actual, expected);\n  });\n  it('should throw an error if the argument is missing', () => {\n    assert.throws(() => {\n      propName();\n    }, Error);\n  });\n  it('should throw an error if the argument not a JSX node', () => {\n    assert.throws(() => {\n      propName({\n        a: 'foo'\n      });\n    }, Error);\n  });\n  it('should return correct name for normal prop', () => {\n    const prop = extractProp('<div foo=\"bar\" />');\n    const expected = 'foo';\n    const actual = propName(prop);\n    assert.equal(actual, expected);\n  });\n  it('should return correct name for namespaced prop', () => {\n    const prop = extractProp('<div foo:bar=\"baz\" />', 'foo:bar');\n    const expected = 'foo:bar';\n    const actual = propName(prop);\n    assert.equal(actual, expected);\n  });\n});","map":{"version":3,"names":["assert","extractProp","setParserName","propName","describe","beforeEach","it","expected","actual","equal","throws","Error","a","prop"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/__tests__/src/propName-test.js"],"sourcesContent":["/* eslint-env mocha */\nimport assert from 'assert';\nimport { extractProp, setParserName } from '../helper';\nimport propName from '../../src/propName';\n\ndescribe('propName', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof propName;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should throw an error if the argument is missing', () => {\n    assert.throws(() => { propName(); }, Error);\n  });\n\n  it('should throw an error if the argument not a JSX node', () => {\n    assert.throws(() => { propName({ a: 'foo' }); }, Error);\n  });\n\n  it('should return correct name for normal prop', () => {\n    const prop = extractProp('<div foo=\"bar\" />');\n\n    const expected = 'foo';\n    const actual = propName(prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return correct name for namespaced prop', () => {\n    const prop = extractProp('<div foo:bar=\"baz\" />', 'foo:bar');\n\n    const expected = 'foo:bar';\n    const actual = propName(prop);\n\n    assert.equal(actual, expected);\n  });\n});\n"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,WAA3C;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAEAC,QAAQ,CAAC,UAAD,EAAa,MAAM;EACzBC,UAAU,CAAC,MAAM;IACfH,aAAa,CAAC,OAAD,CAAb;EACD,CAFS,CAAV;EAGAI,EAAE,CAAC,0BAAD,EAA6B,MAAM;IACnC,MAAMC,QAAQ,GAAG,UAAjB;IACA,MAAMC,MAAM,GAAG,OAAOL,QAAtB;IAEAH,MAAM,CAACS,KAAP,CAAaD,MAAb,EAAqBD,QAArB;EACD,CALC,CAAF;EAOAD,EAAE,CAAC,kDAAD,EAAqD,MAAM;IAC3DN,MAAM,CAACU,MAAP,CAAc,MAAM;MAAEP,QAAQ;IAAK,CAAnC,EAAqCQ,KAArC;EACD,CAFC,CAAF;EAIAL,EAAE,CAAC,sDAAD,EAAyD,MAAM;IAC/DN,MAAM,CAACU,MAAP,CAAc,MAAM;MAAEP,QAAQ,CAAC;QAAES,CAAC,EAAE;MAAL,CAAD,CAAR;IAAyB,CAA/C,EAAiDD,KAAjD;EACD,CAFC,CAAF;EAIAL,EAAE,CAAC,4CAAD,EAA+C,MAAM;IACrD,MAAMO,IAAI,GAAGZ,WAAW,CAAC,mBAAD,CAAxB;IAEA,MAAMM,QAAQ,GAAG,KAAjB;IACA,MAAMC,MAAM,GAAGL,QAAQ,CAACU,IAAD,CAAvB;IAEAb,MAAM,CAACS,KAAP,CAAaD,MAAb,EAAqBD,QAArB;EACD,CAPC,CAAF;EASAD,EAAE,CAAC,gDAAD,EAAmD,MAAM;IACzD,MAAMO,IAAI,GAAGZ,WAAW,CAAC,uBAAD,EAA0B,SAA1B,CAAxB;IAEA,MAAMM,QAAQ,GAAG,SAAjB;IACA,MAAMC,MAAM,GAAGL,QAAQ,CAACU,IAAD,CAAvB;IAEAb,MAAM,CAACS,KAAP,CAAaD,MAAb,EAAqBD,QAArB;EACD,CAPC,CAAF;AAQD,CApCO,CAAR"},"metadata":{},"sourceType":"module"}