{"ast":null,"code":"const querystring = require('querystring');\n/**\n * @typedef {Object} AdditionalEntries\n * @property {string[]} prependEntries\n * @property {string[]} overlayEntries\n */\n\n/**\n * Creates an object that contains two entry arrays: the prependEntries and overlayEntries\n * @param {Object} optionsContainer This is the container for the options to this function\n * @param {import('../types').NormalizedPluginOptions} optionsContainer.options Configuration options for this plugin.\n * @param {import('webpack').Compiler[\"options\"][\"devServer\"]} [optionsContainer.devServer] The webpack devServer config\n * @returns {AdditionalEntries} An object that contains the Webpack entries for prepending and the overlay feature\n */\n\n\nfunction getAdditionalEntries(_ref) {\n  let {\n    devServer,\n    options\n  } = _ref;\n\n  /** @type {Record<string, string | number>} */\n  let resourceQuery = {};\n\n  if (devServer) {\n    const {\n      client,\n      https,\n      http2,\n      sockHost,\n      sockPath,\n      sockPort\n    } = devServer;\n    let {\n      host,\n      path,\n      port\n    } = devServer;\n    let protocol = https || http2 ? 'https' : 'http';\n    if (sockHost) host = sockHost;\n    if (sockPath) path = sockPath;\n    if (sockPort) port = sockPort;\n\n    if (client && client.webSocketURL != null) {\n      let parsedUrl = client.webSocketURL;\n      if (typeof parsedUrl === 'string') parsedUrl = new URL(parsedUrl);\n      let auth;\n\n      if (parsedUrl.username) {\n        auth = parsedUrl.username;\n\n        if (parsedUrl.password) {\n          auth += ':' + parsedUrl.password;\n        }\n      }\n\n      if (parsedUrl.hostname != null) {\n        host = [auth != null && auth, parsedUrl.hostname].filter(Boolean).join('@');\n      }\n\n      if (parsedUrl.pathname != null) {\n        path = parsedUrl.pathname;\n      }\n\n      if (parsedUrl.port != null) {\n        port = !['0', 'auto'].includes(String(parsedUrl.port)) ? parsedUrl.port : undefined;\n      }\n\n      if (parsedUrl.protocol != null) {\n        protocol = parsedUrl.protocol !== 'auto' ? parsedUrl.protocol.replace(':', '') : 'ws';\n      }\n    }\n\n    if (host) resourceQuery.sockHost = host;\n    if (path) resourceQuery.sockPath = path;\n    if (port) resourceQuery.sockPort = port;\n    resourceQuery.sockProtocol = protocol;\n  }\n\n  if (options.overlay) {\n    const {\n      sockHost,\n      sockPath,\n      sockPort,\n      sockProtocol\n    } = options.overlay;\n    if (sockHost) resourceQuery.sockHost = sockHost;\n    if (sockPath) resourceQuery.sockPath = sockPath;\n    if (sockPort) resourceQuery.sockPort = sockPort;\n    if (sockProtocol) resourceQuery.sockProtocol = sockProtocol;\n  } // We don't need to URI encode the resourceQuery as it will be parsed by Webpack\n\n\n  const queryString = querystring.stringify(resourceQuery, undefined, undefined, {\n    /**\n     * @param {string} string\n     * @returns {string}\n     */\n    encodeURIComponent(string) {\n      return string;\n    }\n\n  });\n  const prependEntries = [// React-refresh runtime\n  require.resolve('../../client/ReactRefreshEntry')];\n  const overlayEntries = [// Error overlay runtime\n  options.overlay && options.overlay.entry && `${require.resolve(options.overlay.entry)}${queryString ? `?${queryString}` : ''}`].filter(Boolean);\n  return {\n    prependEntries,\n    overlayEntries\n  };\n}\n\nmodule.exports = getAdditionalEntries;","map":{"version":3,"names":["querystring","require","getAdditionalEntries","devServer","options","resourceQuery","client","https","http2","sockHost","sockPath","sockPort","host","path","port","protocol","webSocketURL","parsedUrl","URL","auth","username","password","hostname","filter","Boolean","join","pathname","includes","String","undefined","replace","sockProtocol","overlay","queryString","stringify","encodeURIComponent","string","prependEntries","resolve","overlayEntries","entry","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/utils/getAdditionalEntries.js"],"sourcesContent":["const querystring = require('querystring');\n\n/**\n * @typedef {Object} AdditionalEntries\n * @property {string[]} prependEntries\n * @property {string[]} overlayEntries\n */\n\n/**\n * Creates an object that contains two entry arrays: the prependEntries and overlayEntries\n * @param {Object} optionsContainer This is the container for the options to this function\n * @param {import('../types').NormalizedPluginOptions} optionsContainer.options Configuration options for this plugin.\n * @param {import('webpack').Compiler[\"options\"][\"devServer\"]} [optionsContainer.devServer] The webpack devServer config\n * @returns {AdditionalEntries} An object that contains the Webpack entries for prepending and the overlay feature\n */\nfunction getAdditionalEntries({ devServer, options }) {\n  /** @type {Record<string, string | number>} */\n  let resourceQuery = {};\n\n  if (devServer) {\n    const { client, https, http2, sockHost, sockPath, sockPort } = devServer;\n    let { host, path, port } = devServer;\n\n    let protocol = https || http2 ? 'https' : 'http';\n    if (sockHost) host = sockHost;\n    if (sockPath) path = sockPath;\n    if (sockPort) port = sockPort;\n\n    if (client && client.webSocketURL != null) {\n      let parsedUrl = client.webSocketURL;\n      if (typeof parsedUrl === 'string') parsedUrl = new URL(parsedUrl);\n\n      let auth;\n      if (parsedUrl.username) {\n        auth = parsedUrl.username;\n        if (parsedUrl.password) {\n          auth += ':' + parsedUrl.password;\n        }\n      }\n\n      if (parsedUrl.hostname != null) {\n        host = [auth != null && auth, parsedUrl.hostname].filter(Boolean).join('@');\n      }\n      if (parsedUrl.pathname != null) {\n        path = parsedUrl.pathname;\n      }\n      if (parsedUrl.port != null) {\n        port = !['0', 'auto'].includes(String(parsedUrl.port)) ? parsedUrl.port : undefined;\n      }\n      if (parsedUrl.protocol != null) {\n        protocol = parsedUrl.protocol !== 'auto' ? parsedUrl.protocol.replace(':', '') : 'ws';\n      }\n    }\n\n    if (host) resourceQuery.sockHost = host;\n    if (path) resourceQuery.sockPath = path;\n    if (port) resourceQuery.sockPort = port;\n    resourceQuery.sockProtocol = protocol;\n  }\n\n  if (options.overlay) {\n    const { sockHost, sockPath, sockPort, sockProtocol } = options.overlay;\n    if (sockHost) resourceQuery.sockHost = sockHost;\n    if (sockPath) resourceQuery.sockPath = sockPath;\n    if (sockPort) resourceQuery.sockPort = sockPort;\n    if (sockProtocol) resourceQuery.sockProtocol = sockProtocol;\n  }\n\n  // We don't need to URI encode the resourceQuery as it will be parsed by Webpack\n  const queryString = querystring.stringify(resourceQuery, undefined, undefined, {\n    /**\n     * @param {string} string\n     * @returns {string}\n     */\n    encodeURIComponent(string) {\n      return string;\n    },\n  });\n\n  const prependEntries = [\n    // React-refresh runtime\n    require.resolve('../../client/ReactRefreshEntry'),\n  ];\n\n  const overlayEntries = [\n    // Error overlay runtime\n    options.overlay &&\n      options.overlay.entry &&\n      `${require.resolve(options.overlay.entry)}${queryString ? `?${queryString}` : ''}`,\n  ].filter(Boolean);\n\n  return { prependEntries, overlayEntries };\n}\n\nmodule.exports = getAdditionalEntries;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}