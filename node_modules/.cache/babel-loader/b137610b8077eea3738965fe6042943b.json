{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parser;\n\nfunction _parser() {\n  const data = require(\"@babel/parser\");\n\n  _parser = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _codeFrame() {\n  const data = require(\"@babel/code-frame\");\n\n  _codeFrame = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _missingPluginHelper = require(\"./util/missing-plugin-helper\");\n\nfunction* parser(pluginPasses, _ref, code) {\n  let {\n    parserOpts,\n    highlightCode = true,\n    filename = \"unknown\"\n  } = _ref;\n\n  try {\n    const results = [];\n\n    for (const plugins of pluginPasses) {\n      for (const plugin of plugins) {\n        const {\n          parserOverride\n        } = plugin;\n\n        if (parserOverride) {\n          const ast = parserOverride(code, parserOpts, _parser().parse);\n          if (ast !== undefined) results.push(ast);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      return (0, _parser().parse)(code, parserOpts);\n    } else if (results.length === 1) {\n      yield* [];\n\n      if (typeof results[0].then === \"function\") {\n        throw new Error(`You appear to be using an async parser plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);\n      }\n\n      return results[0];\n    }\n\n    throw new Error(\"More than one plugin attempted to override parsing.\");\n  } catch (err) {\n    if (err.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n      err.message += \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" + \"or sourceType:unambiguous in your Babel config for this file.\";\n    }\n\n    const {\n      loc,\n      missingPlugin\n    } = err;\n\n    if (loc) {\n      const codeFrame = (0, _codeFrame().codeFrameColumns)(code, {\n        start: {\n          line: loc.line,\n          column: loc.column + 1\n        }\n      }, {\n        highlightCode\n      });\n\n      if (missingPlugin) {\n        err.message = `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame);\n      } else {\n        err.message = `${filename}: ${err.message}\\n\\n` + codeFrame;\n      }\n\n      err.code = \"BABEL_PARSE_ERROR\";\n    }\n\n    throw err;\n  }\n}\n\n0 && 0;","map":{"version":3,"mappings":";;;;;;;AACA;EAAA;;EAAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AACA;;AAKe,UAAUC,MAAV,CACbC,YADa,QAGbC,IAHa,EAIS;EAAA,IAFtB;IAAEC,UAAF;IAAcC,aAAa,GAAG,IAA9B;IAAoCC,QAAQ,GAAG;EAA/C,CAEsB;;EACtB,IAAI;IACF,MAAMC,OAAO,GAAG,EAAhB;;IACA,KAAK,MAAMC,OAAX,IAAsBN,YAAtB,EAAoC;MAClC,KAAK,MAAMO,MAAX,IAAqBD,OAArB,EAA8B;QAC5B,MAAM;UAAEE;QAAF,IAAqBD,MAA3B;;QACA,IAAIC,cAAJ,EAAoB;UAClB,MAAMC,GAAG,GAAGD,cAAc,CAACP,IAAD,EAAOC,UAAP,EAAmBQ,eAAnB,CAA1B;UAEA,IAAID,GAAG,KAAKE,SAAZ,EAAuBN,OAAO,CAACO,IAARP,CAAaI,GAAbJ;QACxB;MACF;IACF;;IAED,IAAIA,OAAO,CAACQ,MAARR,KAAmB,CAAvB,EAA0B;MACxB,OAAO,qBAAMJ,IAAN,EAAYC,UAAZ,CAAP;IADF,OAEO,IAAIG,OAAO,CAACQ,MAARR,KAAmB,CAAvB,EAA0B;MAE/B,OAAO,EAAP;;MACA,IAAI,OAAOA,OAAO,CAAC,CAAD,CAAPA,CAAWS,IAAlB,KAA2B,UAA/B,EAA2C;QACzC,MAAM,IAAIC,KAAJ,CACH,oDACE,wDADF,GAEE,8DAFF,GAGE,2BAJC,CAAN;MAMD;;MACD,OAAOV,OAAO,CAAC,CAAD,CAAd;IACD;;IAED,MAAM,IAAIU,KAAJ,CAAU,qDAAV,CAAN;EA7BF,EA8BE,OAAOC,GAAP,EAAY;IACZ,IAAIA,GAAG,CAACf,IAAJe,KAAa,yCAAjB,EAA4D;MAC1DA,GAAG,CAACC,OAAJD,IACE,0EACA,+DAFFA;IAID;;IAED,MAAM;MAAEE,GAAF;MAAOC;IAAP,IAAyBH,GAA/B;;IACA,IAAIE,GAAJ,EAAS;MACP,MAAME,SAAS,GAAG,mCAChBnB,IADgB,EAEhB;QACEoB,KAAK,EAAE;UACLC,IAAI,EAAEJ,GAAG,CAACI,IADL;UAELC,MAAM,EAAEL,GAAG,CAACK,MAAJL,GAAa;QAFhB;MADT,CAFgB,EAQhB;QACEf;MADF,CARgB,CAAlB;;MAYA,IAAIgB,aAAJ,EAAmB;QACjBH,GAAG,CAACC,OAAJD,GACG,GAAEZ,QAAS,IAAX,GACD,kCAA6Be,aAAa,CAAC,CAAD,CAA1C,EAA+CD,GAA/C,EAAoDE,SAApD,CAFFJ;MADF,OAIO;QACLA,GAAG,CAACC,OAAJD,GAAe,GAAEZ,QAAS,KAAIY,GAAG,CAACC,OAAQ,MAA3B,GAAmCG,SAAlDJ;MACD;;MACDA,GAAG,CAACf,IAAJe,GAAW,mBAAXA;IACD;;IACD,MAAMA,GAAN;EACD;AACF","names":["_parser","_codeFrame","parser","pluginPasses","code","parserOpts","highlightCode","filename","results","plugins","plugin","parserOverride","ast","parse","undefined","push","length","then","Error","err","message","loc","missingPlugin","codeFrame","start","line","column"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\parser\\index.ts"],"sourcesContent":["import type { Handler } from \"gensync\";\nimport { parse } from \"@babel/parser\";\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport generateMissingPluginMessage from \"./util/missing-plugin-helper\";\nimport type { PluginPasses } from \"../config\";\n\nexport type ParseResult = ReturnType<typeof parse>;\n\nexport default function* parser(\n  pluginPasses: PluginPasses,\n  { parserOpts, highlightCode = true, filename = \"unknown\" }: any,\n  code: string,\n): Handler<ParseResult> {\n  try {\n    const results = [];\n    for (const plugins of pluginPasses) {\n      for (const plugin of plugins) {\n        const { parserOverride } = plugin;\n        if (parserOverride) {\n          const ast = parserOverride(code, parserOpts, parse);\n\n          if (ast !== undefined) results.push(ast);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      return parse(code, parserOpts);\n    } else if (results.length === 1) {\n      // @ts-expect-error - If we want to allow async parsers\n      yield* [];\n      if (typeof results[0].then === \"function\") {\n        throw new Error(\n          `You appear to be using an async parser plugin, ` +\n            `which your current version of Babel does not support. ` +\n            `If you're using a published plugin, you may need to upgrade ` +\n            `your @babel/core version.`,\n        );\n      }\n      return results[0];\n    }\n    // TODO: Add an error code\n    throw new Error(\"More than one plugin attempted to override parsing.\");\n  } catch (err) {\n    if (err.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n      err.message +=\n        \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" +\n        \"or sourceType:unambiguous in your Babel config for this file.\";\n      // err.code will be changed to BABEL_PARSE_ERROR later.\n    }\n\n    const { loc, missingPlugin } = err;\n    if (loc) {\n      const codeFrame = codeFrameColumns(\n        code,\n        {\n          start: {\n            line: loc.line,\n            column: loc.column + 1,\n          },\n        },\n        {\n          highlightCode,\n        },\n      );\n      if (missingPlugin) {\n        err.message =\n          `${filename}: ` +\n          generateMissingPluginMessage(missingPlugin[0], loc, codeFrame);\n      } else {\n        err.message = `${filename}: ${err.message}\\n\\n` + codeFrame;\n      }\n      err.code = \"BABEL_PARSE_ERROR\";\n    }\n    throw err;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}