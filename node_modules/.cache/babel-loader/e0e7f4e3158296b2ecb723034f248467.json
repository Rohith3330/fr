{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nconst messages = {\n  tooManyDescribes: 'There should not be more than {{ max }} describe{{ s }} at the top level',\n  unexpectedTestCase: 'All test cases must be wrapped in a describe block.',\n  unexpectedHook: 'All hooks must be wrapped in a describe block.'\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Require test cases and hooks to be inside a `describe` block',\n      recommended: false\n    },\n    messages,\n    type: 'suggestion',\n    schema: [{\n      type: 'object',\n      properties: {\n        maxNumberOfTopLevelDescribes: {\n          type: 'number',\n          minimum: 1\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{}],\n\n  create(context) {\n    var _context$options$;\n\n    const {\n      maxNumberOfTopLevelDescribes = Infinity\n    } = (_context$options$ = context.options[0]) !== null && _context$options$ !== void 0 ? _context$options$ : {};\n    let numberOfTopLevelDescribeBlocks = 0;\n    let numberOfDescribeBlocks = 0;\n    return {\n      CallExpression(node) {\n        if ((0, _utils.isDescribeCall)(node)) {\n          numberOfDescribeBlocks++;\n\n          if (numberOfDescribeBlocks === 1) {\n            numberOfTopLevelDescribeBlocks++;\n\n            if (numberOfTopLevelDescribeBlocks > maxNumberOfTopLevelDescribes) {\n              context.report({\n                node,\n                messageId: 'tooManyDescribes',\n                data: {\n                  max: maxNumberOfTopLevelDescribes,\n                  s: maxNumberOfTopLevelDescribes === 1 ? '' : 's'\n                }\n              });\n            }\n          }\n\n          return;\n        }\n\n        if (numberOfDescribeBlocks === 0) {\n          if ((0, _utils.isTestCaseCall)(node)) {\n            context.report({\n              node,\n              messageId: 'unexpectedTestCase'\n            });\n            return;\n          }\n\n          if ((0, _utils.isHook)(node)) {\n            context.report({\n              node,\n              messageId: 'unexpectedHook'\n            });\n            return;\n          }\n        }\n      },\n\n      'CallExpression:exit'(node) {\n        if ((0, _utils.isDescribeCall)(node)) {\n          numberOfDescribeBlocks--;\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utils","require","messages","tooManyDescribes","unexpectedTestCase","unexpectedHook","_default","createRule","name","__filename","meta","docs","category","description","recommended","type","schema","properties","maxNumberOfTopLevelDescribes","minimum","additionalProperties","defaultOptions","create","context","_context$options$","Infinity","options","numberOfTopLevelDescribeBlocks","numberOfDescribeBlocks","CallExpression","node","isDescribeCall","report","messageId","data","max","s","isTestCaseCall","isHook"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/require-top-level-describe.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nconst messages = {\n  tooManyDescribes: 'There should not be more than {{ max }} describe{{ s }} at the top level',\n  unexpectedTestCase: 'All test cases must be wrapped in a describe block.',\n  unexpectedHook: 'All hooks must be wrapped in a describe block.'\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Require test cases and hooks to be inside a `describe` block',\n      recommended: false\n    },\n    messages,\n    type: 'suggestion',\n    schema: [{\n      type: 'object',\n      properties: {\n        maxNumberOfTopLevelDescribes: {\n          type: 'number',\n          minimum: 1\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{}],\n\n  create(context) {\n    var _context$options$;\n\n    const {\n      maxNumberOfTopLevelDescribes = Infinity\n    } = (_context$options$ = context.options[0]) !== null && _context$options$ !== void 0 ? _context$options$ : {};\n    let numberOfTopLevelDescribeBlocks = 0;\n    let numberOfDescribeBlocks = 0;\n    return {\n      CallExpression(node) {\n        if ((0, _utils.isDescribeCall)(node)) {\n          numberOfDescribeBlocks++;\n\n          if (numberOfDescribeBlocks === 1) {\n            numberOfTopLevelDescribeBlocks++;\n\n            if (numberOfTopLevelDescribeBlocks > maxNumberOfTopLevelDescribes) {\n              context.report({\n                node,\n                messageId: 'tooManyDescribes',\n                data: {\n                  max: maxNumberOfTopLevelDescribes,\n                  s: maxNumberOfTopLevelDescribes === 1 ? '' : 's'\n                }\n              });\n            }\n          }\n\n          return;\n        }\n\n        if (numberOfDescribeBlocks === 0) {\n          if ((0, _utils.isTestCaseCall)(node)) {\n            context.report({\n              node,\n              messageId: 'unexpectedTestCase'\n            });\n            return;\n          }\n\n          if ((0, _utils.isHook)(node)) {\n            context.report({\n              node,\n              messageId: 'unexpectedHook'\n            });\n            return;\n          }\n        }\n      },\n\n      'CallExpression:exit'(node) {\n        if ((0, _utils.isDescribeCall)(node)) {\n          numberOfDescribeBlocks--;\n        }\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,MAAMC,QAAQ,GAAG;EACfC,gBAAgB,EAAE,0EADH;EAEfC,kBAAkB,EAAE,qDAFL;EAGfC,cAAc,EAAE;AAHD,CAAjB;;AAMA,IAAIC,QAAQ,GAAG,CAAC,GAAGN,MAAM,CAACO,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,8DAFT;MAGJC,WAAW,EAAE;IAHT,CADF;IAMJZ,QANI;IAOJa,IAAI,EAAE,YAPF;IAQJC,MAAM,EAAE,CAAC;MACPD,IAAI,EAAE,QADC;MAEPE,UAAU,EAAE;QACVC,4BAA4B,EAAE;UAC5BH,IAAI,EAAE,QADsB;UAE5BI,OAAO,EAAE;QAFmB;MADpB,CAFL;MAQPC,oBAAoB,EAAE;IARf,CAAD;EARJ,CAF8B;EAqBpCC,cAAc,EAAE,CAAC,EAAD,CArBoB;;EAuBpCC,MAAM,CAACC,OAAD,EAAU;IACd,IAAIC,iBAAJ;;IAEA,MAAM;MACJN,4BAA4B,GAAGO;IAD3B,IAEF,CAACD,iBAAiB,GAAGD,OAAO,CAACG,OAAR,CAAgB,CAAhB,CAArB,MAA6C,IAA7C,IAAqDF,iBAAiB,KAAK,KAAK,CAAhF,GAAoFA,iBAApF,GAAwG,EAF5G;IAGA,IAAIG,8BAA8B,GAAG,CAArC;IACA,IAAIC,sBAAsB,GAAG,CAA7B;IACA,OAAO;MACLC,cAAc,CAACC,IAAD,EAAO;QACnB,IAAI,CAAC,GAAG9B,MAAM,CAAC+B,cAAX,EAA2BD,IAA3B,CAAJ,EAAsC;UACpCF,sBAAsB;;UAEtB,IAAIA,sBAAsB,KAAK,CAA/B,EAAkC;YAChCD,8BAA8B;;YAE9B,IAAIA,8BAA8B,GAAGT,4BAArC,EAAmE;cACjEK,OAAO,CAACS,MAAR,CAAe;gBACbF,IADa;gBAEbG,SAAS,EAAE,kBAFE;gBAGbC,IAAI,EAAE;kBACJC,GAAG,EAAEjB,4BADD;kBAEJkB,CAAC,EAAElB,4BAA4B,KAAK,CAAjC,GAAqC,EAArC,GAA0C;gBAFzC;cAHO,CAAf;YAQD;UACF;;UAED;QACD;;QAED,IAAIU,sBAAsB,KAAK,CAA/B,EAAkC;UAChC,IAAI,CAAC,GAAG5B,MAAM,CAACqC,cAAX,EAA2BP,IAA3B,CAAJ,EAAsC;YACpCP,OAAO,CAACS,MAAR,CAAe;cACbF,IADa;cAEbG,SAAS,EAAE;YAFE,CAAf;YAIA;UACD;;UAED,IAAI,CAAC,GAAGjC,MAAM,CAACsC,MAAX,EAAmBR,IAAnB,CAAJ,EAA8B;YAC5BP,OAAO,CAACS,MAAR,CAAe;cACbF,IADa;cAEbG,SAAS,EAAE;YAFE,CAAf;YAIA;UACD;QACF;MACF,CAxCI;;MA0CL,sBAAsBH,IAAtB,EAA4B;QAC1B,IAAI,CAAC,GAAG9B,MAAM,CAAC+B,cAAX,EAA2BD,IAA3B,CAAJ,EAAsC;UACpCF,sBAAsB;QACvB;MACF;;IA9CI,CAAP;EAiDD;;AAhFmC,CAAvB,CAAf;;AAoFA/B,OAAO,CAACE,OAAR,GAAkBO,QAAlB"},"metadata":{},"sourceType":"script"}