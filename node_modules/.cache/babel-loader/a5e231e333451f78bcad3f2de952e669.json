{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  var ops = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : tfOps;\n  switch (node.op) {\n    case 'Fill':\n      {\n        var shape = getParamValue('shape', node, tensorMap, context);\n        var dtype = getParamValue('dtype', node, tensorMap, context);\n        var value = getParamValue('value', node, tensorMap, context);\n        return [ops.fill(shape, value, dtype)];\n      }\n    case 'LinSpace':\n      {\n        var start = getParamValue('start', node, tensorMap, context);\n        var stop = getParamValue('stop', node, tensorMap, context);\n        var num = getParamValue('num', node, tensorMap, context);\n        return [ops.linspace(start, stop, num)];\n      }\n    case 'Multinomial':\n      {\n        var logits = getParamValue('logits', node, tensorMap, context);\n        var numSamples = getParamValue('numSamples', node, tensorMap, context);\n        var seed = getParamValue('seed', node, tensorMap, context);\n        return [ops.multinomial(logits, numSamples, seed)];\n      }\n    case 'OneHot':\n      {\n        var indices = getParamValue('indices', node, tensorMap, context);\n        var depth = getParamValue('depth', node, tensorMap, context);\n        var onValue = getParamValue('onValue', node, tensorMap, context);\n        var offValue = getParamValue('offValue', node, tensorMap, context);\n        var _dtype = getParamValue('dtype', node, tensorMap, context);\n        return [ops.oneHot(indices, depth, onValue, offValue, _dtype)];\n      }\n    case 'Ones':\n      {\n        return [ops.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'OnesLike':\n      {\n        return [ops.onesLike(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'RandomStandardNormal':\n      {\n        return [ops.randomStandardNormal(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context), getParamValue('seed', node, tensorMap, context))];\n      }\n    case 'RandomUniform':\n      {\n        return [ops.randomUniform(\n        // tslint:disable-next-line:no-any\n        getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'Range':\n      {\n        var _start = getParamValue('start', node, tensorMap, context);\n        var _stop = getParamValue('stop', node, tensorMap, context);\n        var step = getParamValue('step', node, tensorMap, context);\n        return [ops.range(_start, _stop, step, getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'TruncatedNormal':\n      {\n        var _shape = getParamValue('shape', node, tensorMap, context);\n        var mean = getParamValue('mean', node, tensorMap, context);\n        var stdDev = getParamValue('stdDev', node, tensorMap, context);\n        var _seed = getParamValue('seed', node, tensorMap, context);\n        return [ops.truncatedNormal(_shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), _seed)];\n      }\n    case 'Zeros':\n      {\n        return [ops.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'ZerosLike':\n      {\n        return [ops.zerosLike(getParamValue('x', node, tensorMap, context))];\n      }\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'creation';","map":null,"metadata":{},"sourceType":"module"}