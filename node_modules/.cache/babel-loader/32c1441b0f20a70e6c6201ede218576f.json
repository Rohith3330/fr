{"ast":null,"code":"const UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\nconst UUID_PARSE = /^[0-9A-Fa-f\\-]{36}/; //RFC 4122\n\nconst handler = {\n  scheme: \"urn:uuid\",\n  parse: function (urnComponents, options) {\n    const uuidComponents = urnComponents;\n    uuidComponents.uuid = uuidComponents.nss;\n    uuidComponents.nss = undefined;\n\n    if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n      uuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n    }\n\n    return uuidComponents;\n  },\n  serialize: function (uuidComponents, options) {\n    const urnComponents = uuidComponents; //normalize UUID\n\n    urnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n    return urnComponents;\n  }\n};\nexport default handler;","map":{"version":3,"mappings":"AAQA,MAAMA,IAAI,GAAG,0DAAb;AACA,MAAMC,UAAU,GAAG,oBAAnB,C,CAEA;;AACA,MAAMC,OAAO,GAA+D;EAC3EC,MAAM,EAAG,UADkE;EAG3EC,KAAK,EAAG,UAAUC,aAAV,EAAuCC,OAAvC,EAAyD;IAChE,MAAMC,cAAc,GAAGF,aAAvB;IACAE,cAAc,CAACC,IAAf,GAAsBD,cAAc,CAACE,GAArC;IACAF,cAAc,CAACE,GAAf,GAAqBC,SAArB;;IAEA,IAAI,CAACJ,OAAO,CAACK,QAAT,KAAsB,CAACJ,cAAc,CAACC,IAAhB,IAAwB,CAACD,cAAc,CAACC,IAAf,CAAoBI,KAApB,CAA0BZ,IAA1B,CAA/C,CAAJ,EAAqF;MACpFO,cAAc,CAACM,KAAf,GAAuBN,cAAc,CAACM,KAAf,IAAwB,oBAA/C;IACA;;IAED,OAAON,cAAP;EACA,CAb0E;EAe3EO,SAAS,EAAG,UAAUP,cAAV,EAAyCD,OAAzC,EAA2D;IACtE,MAAMD,aAAa,GAAGE,cAAtB,CADsE,CAEtE;;IACAF,aAAa,CAACI,GAAd,GAAoB,CAACF,cAAc,CAACC,IAAf,IAAuB,EAAxB,EAA4BO,WAA5B,EAApB;IACA,OAAOV,aAAP;EACA;AApB0E,CAA5E;AAuBA,eAAeH,OAAf","names":["UUID","UUID_PARSE","handler","scheme","parse","urnComponents","options","uuidComponents","uuid","nss","undefined","tolerant","match","error","serialize","toLowerCase"],"sources":["../../../src/schemes/urn-uuid.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}