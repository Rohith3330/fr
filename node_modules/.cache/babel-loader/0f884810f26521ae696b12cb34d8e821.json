{"ast":null,"code":"import propName from './propName';\nconst DEFAULT_OPTIONS = {\n  spreadStrict: true,\n  ignoreCase: true\n};\n/**\n * Returns boolean indicating whether an prop exists on the props\n * property of a JSX element node.\n */\n\nexport default function hasProp() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS;\n  const propToCheck = options.ignoreCase ? prop.toUpperCase() : prop;\n  return props.some(attribute => {\n    // If the props contain a spread prop, then refer to strict param.\n    if (attribute.type === 'JSXSpreadAttribute') {\n      return !options.spreadStrict;\n    }\n\n    const currentProp = options.ignoreCase ? propName(attribute).toUpperCase() : propName(attribute);\n    return propToCheck === currentProp;\n  });\n}\n/**\n * Given the props on a node and a list of props to check, this returns a boolean\n * indicating if any of them exist on the node.\n */\n\nexport function hasAnyProp() {\n  let nodeProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS;\n  const propsToCheck = typeof props === 'string' ? props.split(' ') : props;\n  return propsToCheck.some(prop => hasProp(nodeProps, prop, options));\n}\n/**\n * Given the props on a node and a list of props to check, this returns a boolean\n * indicating if all of them exist on the node\n */\n\nexport function hasEveryProp() {\n  let nodeProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS;\n  const propsToCheck = typeof props === 'string' ? props.split(' ') : props;\n  return propsToCheck.every(prop => hasProp(nodeProps, prop, options));\n}","map":{"version":3,"names":["propName","DEFAULT_OPTIONS","spreadStrict","ignoreCase","hasProp","props","prop","options","propToCheck","toUpperCase","some","attribute","type","currentProp","hasAnyProp","nodeProps","propsToCheck","split","hasEveryProp","every"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/src/hasProp.js"],"sourcesContent":["import propName from './propName';\n\nconst DEFAULT_OPTIONS = {\n  spreadStrict: true,\n  ignoreCase: true,\n};\n\n/**\n * Returns boolean indicating whether an prop exists on the props\n * property of a JSX element node.\n */\nexport default function hasProp(props = [], prop = '', options = DEFAULT_OPTIONS) {\n  const propToCheck = options.ignoreCase ? prop.toUpperCase() : prop;\n\n  return props.some((attribute) => {\n    // If the props contain a spread prop, then refer to strict param.\n    if (attribute.type === 'JSXSpreadAttribute') {\n      return !options.spreadStrict;\n    }\n\n    const currentProp = options.ignoreCase\n      ? propName(attribute).toUpperCase()\n      : propName(attribute);\n\n    return propToCheck === currentProp;\n  });\n}\n\n/**\n * Given the props on a node and a list of props to check, this returns a boolean\n * indicating if any of them exist on the node.\n */\nexport function hasAnyProp(nodeProps = [], props = [], options = DEFAULT_OPTIONS) {\n  const propsToCheck = typeof props === 'string' ? props.split(' ') : props;\n\n  return propsToCheck.some((prop) => hasProp(nodeProps, prop, options));\n}\n\n/**\n * Given the props on a node and a list of props to check, this returns a boolean\n * indicating if all of them exist on the node\n */\nexport function hasEveryProp(nodeProps = [], props = [], options = DEFAULT_OPTIONS) {\n  const propsToCheck = typeof props === 'string' ? props.split(' ') : props;\n\n  return propsToCheck.every((prop) => hasProp(nodeProps, prop, options));\n}\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,MAAMC,eAAe,GAAG;EACtBC,YAAY,EAAE,IADQ;EAEtBC,UAAU,EAAE;AAFU,CAAxB;AAKA;AACA;AACA;AACA;;AACA,eAAe,SAASC,OAAT,GAAmE;EAAA,IAAlDC,KAAkD,uEAA1C,EAA0C;EAAA,IAAtCC,IAAsC,uEAA/B,EAA+B;EAAA,IAA3BC,OAA2B,uEAAjBN,eAAiB;EAChF,MAAMO,WAAW,GAAGD,OAAO,CAACJ,UAAR,GAAqBG,IAAI,CAACG,WAAL,EAArB,GAA0CH,IAA9D;EAEA,OAAOD,KAAK,CAACK,IAAN,CAAYC,SAAD,IAAe;IAC/B;IACA,IAAIA,SAAS,CAACC,IAAV,KAAmB,oBAAvB,EAA6C;MAC3C,OAAO,CAACL,OAAO,CAACL,YAAhB;IACD;;IAED,MAAMW,WAAW,GAAGN,OAAO,CAACJ,UAAR,GAChBH,QAAQ,CAACW,SAAD,CAAR,CAAoBF,WAApB,EADgB,GAEhBT,QAAQ,CAACW,SAAD,CAFZ;IAIA,OAAOH,WAAW,KAAKK,WAAvB;EACD,CAXM,CAAP;AAYD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,GAA2E;EAAA,IAAvDC,SAAuD,uEAA3C,EAA2C;EAAA,IAAvCV,KAAuC,uEAA/B,EAA+B;EAAA,IAA3BE,OAA2B,uEAAjBN,eAAiB;EAChF,MAAMe,YAAY,GAAG,OAAOX,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACY,KAAN,CAAY,GAAZ,CAA5B,GAA+CZ,KAApE;EAEA,OAAOW,YAAY,CAACN,IAAb,CAAmBJ,IAAD,IAAUF,OAAO,CAACW,SAAD,EAAYT,IAAZ,EAAkBC,OAAlB,CAAnC,CAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASW,YAAT,GAA6E;EAAA,IAAvDH,SAAuD,uEAA3C,EAA2C;EAAA,IAAvCV,KAAuC,uEAA/B,EAA+B;EAAA,IAA3BE,OAA2B,uEAAjBN,eAAiB;EAClF,MAAMe,YAAY,GAAG,OAAOX,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACY,KAAN,CAAY,GAAZ,CAA5B,GAA+CZ,KAApE;EAEA,OAAOW,YAAY,CAACG,KAAb,CAAoBb,IAAD,IAAUF,OAAO,CAACW,SAAD,EAAYT,IAAZ,EAAkBC,OAAlB,CAApC,CAAP;AACD"},"metadata":{},"sourceType":"module"}