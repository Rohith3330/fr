{"ast":null,"code":"/**\n * @fileoverview Main Espree file that converts Acorn into Esprima output.\n *\n * This file contains code from the following MIT-licensed projects:\n * 1. Acorn\n * 2. Babylon\n * 3. Babel-ESLint\n *\n * This file also contains code from Esprima, which is BSD licensed.\n *\n * Acorn is Copyright 2012-2015 Acorn Contributors (https://github.com/marijnh/acorn/blob/master/AUTHORS)\n * Babylon is Copyright 2014-2015 various contributors (https://github.com/babel/babel/blob/master/packages/babylon/AUTHORS)\n * Babel-ESLint is Copyright 2014-2015 Sebastian McKenzie <sebmck@gmail.com>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Esprima is Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint no-undefined:0, no-use-before-define: 0 */\nimport * as acorn from \"acorn\";\nimport jsx from \"acorn-jsx\";\nimport espree from \"./lib/espree.js\";\nimport espreeVersion from \"./lib/version.js\";\nimport * as visitorKeys from \"eslint-visitor-keys\";\nimport { getLatestEcmaVersion, getSupportedEcmaVersions } from \"./lib/options.js\"; // To initialize lazily.\n\nconst parsers = {\n  _regular: null,\n  _jsx: null,\n\n  get regular() {\n    if (this._regular === null) {\n      this._regular = acorn.Parser.extend(espree());\n    }\n\n    return this._regular;\n  },\n\n  get jsx() {\n    if (this._jsx === null) {\n      this._jsx = acorn.Parser.extend(jsx(), espree());\n    }\n\n    return this._jsx;\n  },\n\n  get(options) {\n    const useJsx = Boolean(options && options.ecmaFeatures && options.ecmaFeatures.jsx);\n    return useJsx ? this.jsx : this.regular;\n  }\n\n}; //------------------------------------------------------------------------------\n// Tokenizer\n//------------------------------------------------------------------------------\n\n/**\n * Tokenizes the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {Token[]} An array of tokens.\n * @throws {SyntaxError} If the input code is invalid.\n * @private\n */\n\nexport function tokenize(code, options) {\n  const Parser = parsers.get(options); // Ensure to collect tokens.\n\n  if (!options || options.tokens !== true) {\n    options = Object.assign({}, options, {\n      tokens: true\n    }); // eslint-disable-line no-param-reassign\n  }\n\n  return new Parser(options, code).tokenize();\n} //------------------------------------------------------------------------------\n// Parser\n//------------------------------------------------------------------------------\n\n/**\n * Parses the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {ASTNode} The \"Program\" AST node.\n * @throws {SyntaxError} If the input code is invalid.\n */\n\nexport function parse(code, options) {\n  const Parser = parsers.get(options);\n  return new Parser(options, code).parse();\n} //------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nexport const version = espreeVersion;\n/* istanbul ignore next */\n\nexport const VisitorKeys = function () {\n  return visitorKeys.KEYS;\n}(); // Derive node types from VisitorKeys\n\n/* istanbul ignore next */\n\nexport const Syntax = function () {\n  let name,\n      types = {};\n\n  if (typeof Object.create === \"function\") {\n    types = Object.create(null);\n  }\n\n  for (name in VisitorKeys) {\n    if (Object.hasOwnProperty.call(VisitorKeys, name)) {\n      types[name] = name;\n    }\n  }\n\n  if (typeof Object.freeze === \"function\") {\n    Object.freeze(types);\n  }\n\n  return types;\n}();\nexport const latestEcmaVersion = getLatestEcmaVersion();\nexport const supportedEcmaVersions = getSupportedEcmaVersions();","map":{"version":3,"names":["acorn","jsx","espree","espreeVersion","visitorKeys","getLatestEcmaVersion","getSupportedEcmaVersions","parsers","_regular","_jsx","regular","Parser","extend","get","options","useJsx","Boolean","ecmaFeatures","tokenize","code","tokens","Object","assign","parse","version","VisitorKeys","KEYS","Syntax","name","types","create","hasOwnProperty","call","freeze","latestEcmaVersion","supportedEcmaVersions"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/espree/espree.js"],"sourcesContent":["/**\n * @fileoverview Main Espree file that converts Acorn into Esprima output.\n *\n * This file contains code from the following MIT-licensed projects:\n * 1. Acorn\n * 2. Babylon\n * 3. Babel-ESLint\n *\n * This file also contains code from Esprima, which is BSD licensed.\n *\n * Acorn is Copyright 2012-2015 Acorn Contributors (https://github.com/marijnh/acorn/blob/master/AUTHORS)\n * Babylon is Copyright 2014-2015 various contributors (https://github.com/babel/babel/blob/master/packages/babylon/AUTHORS)\n * Babel-ESLint is Copyright 2014-2015 Sebastian McKenzie <sebmck@gmail.com>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Esprima is Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* eslint no-undefined:0, no-use-before-define: 0 */\n\nimport * as acorn from \"acorn\";\nimport jsx from \"acorn-jsx\";\nimport espree from \"./lib/espree.js\";\nimport espreeVersion from \"./lib/version.js\";\nimport * as visitorKeys from \"eslint-visitor-keys\";\nimport { getLatestEcmaVersion, getSupportedEcmaVersions } from \"./lib/options.js\";\n\n\n// To initialize lazily.\nconst parsers = {\n    _regular: null,\n    _jsx: null,\n\n    get regular() {\n        if (this._regular === null) {\n            this._regular = acorn.Parser.extend(espree());\n        }\n        return this._regular;\n    },\n\n    get jsx() {\n        if (this._jsx === null) {\n            this._jsx = acorn.Parser.extend(jsx(), espree());\n        }\n        return this._jsx;\n    },\n\n    get(options) {\n        const useJsx = Boolean(\n            options &&\n            options.ecmaFeatures &&\n            options.ecmaFeatures.jsx\n        );\n\n        return useJsx ? this.jsx : this.regular;\n    }\n};\n\n//------------------------------------------------------------------------------\n// Tokenizer\n//------------------------------------------------------------------------------\n\n/**\n * Tokenizes the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {Token[]} An array of tokens.\n * @throws {SyntaxError} If the input code is invalid.\n * @private\n */\nexport function tokenize(code, options) {\n    const Parser = parsers.get(options);\n\n    // Ensure to collect tokens.\n    if (!options || options.tokens !== true) {\n        options = Object.assign({}, options, { tokens: true }); // eslint-disable-line no-param-reassign\n    }\n\n    return new Parser(options, code).tokenize();\n}\n\n//------------------------------------------------------------------------------\n// Parser\n//------------------------------------------------------------------------------\n\n/**\n * Parses the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {ASTNode} The \"Program\" AST node.\n * @throws {SyntaxError} If the input code is invalid.\n */\nexport function parse(code, options) {\n    const Parser = parsers.get(options);\n\n    return new Parser(options, code).parse();\n}\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nexport const version = espreeVersion;\n\n/* istanbul ignore next */\nexport const VisitorKeys = (function() {\n    return visitorKeys.KEYS;\n}());\n\n// Derive node types from VisitorKeys\n/* istanbul ignore next */\nexport const Syntax = (function() {\n    let name,\n        types = {};\n\n    if (typeof Object.create === \"function\") {\n        types = Object.create(null);\n    }\n\n    for (name in VisitorKeys) {\n        if (Object.hasOwnProperty.call(VisitorKeys, name)) {\n            types[name] = name;\n        }\n    }\n\n    if (typeof Object.freeze === \"function\") {\n        Object.freeze(types);\n    }\n\n    return types;\n}());\n\nexport const latestEcmaVersion = getLatestEcmaVersion();\n\nexport const supportedEcmaVersions = getSupportedEcmaVersions();\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAO,KAAKC,WAAZ,MAA6B,qBAA7B;AACA,SAASC,oBAAT,EAA+BC,wBAA/B,QAA+D,kBAA/D,C,CAGA;;AACA,MAAMC,OAAO,GAAG;EACZC,QAAQ,EAAE,IADE;EAEZC,IAAI,EAAE,IAFM;;EAIZ,IAAIC,OAAJ,GAAc;IACV,IAAI,KAAKF,QAAL,KAAkB,IAAtB,EAA4B;MACxB,KAAKA,QAAL,GAAgBR,KAAK,CAACW,MAAN,CAAaC,MAAb,CAAoBV,MAAM,EAA1B,CAAhB;IACH;;IACD,OAAO,KAAKM,QAAZ;EACH,CATW;;EAWZ,IAAIP,GAAJ,GAAU;IACN,IAAI,KAAKQ,IAAL,KAAc,IAAlB,EAAwB;MACpB,KAAKA,IAAL,GAAYT,KAAK,CAACW,MAAN,CAAaC,MAAb,CAAoBX,GAAG,EAAvB,EAA2BC,MAAM,EAAjC,CAAZ;IACH;;IACD,OAAO,KAAKO,IAAZ;EACH,CAhBW;;EAkBZI,GAAG,CAACC,OAAD,EAAU;IACT,MAAMC,MAAM,GAAGC,OAAO,CAClBF,OAAO,IACPA,OAAO,CAACG,YADR,IAEAH,OAAO,CAACG,YAAR,CAAqBhB,GAHH,CAAtB;IAMA,OAAOc,MAAM,GAAG,KAAKd,GAAR,GAAc,KAAKS,OAAhC;EACH;;AA1BW,CAAhB,C,CA6BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,QAAT,CAAkBC,IAAlB,EAAwBL,OAAxB,EAAiC;EACpC,MAAMH,MAAM,GAAGJ,OAAO,CAACM,GAAR,CAAYC,OAAZ,CAAf,CADoC,CAGpC;;EACA,IAAI,CAACA,OAAD,IAAYA,OAAO,CAACM,MAAR,KAAmB,IAAnC,EAAyC;IACrCN,OAAO,GAAGO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,OAAlB,EAA2B;MAAEM,MAAM,EAAE;IAAV,CAA3B,CAAV,CADqC,CACmB;EAC3D;;EAED,OAAO,IAAIT,MAAJ,CAAWG,OAAX,EAAoBK,IAApB,EAA0BD,QAA1B,EAAP;AACH,C,CAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,KAAT,CAAeJ,IAAf,EAAqBL,OAArB,EAA8B;EACjC,MAAMH,MAAM,GAAGJ,OAAO,CAACM,GAAR,CAAYC,OAAZ,CAAf;EAEA,OAAO,IAAIH,MAAJ,CAAWG,OAAX,EAAoBK,IAApB,EAA0BI,KAA1B,EAAP;AACH,C,CAED;AACA;AACA;;AAEA,OAAO,MAAMC,OAAO,GAAGrB,aAAhB;AAEP;;AACA,OAAO,MAAMsB,WAAW,GAAI,YAAW;EACnC,OAAOrB,WAAW,CAACsB,IAAnB;AACH,CAF2B,EAArB,C,CAIP;;AACA;;AACA,OAAO,MAAMC,MAAM,GAAI,YAAW;EAC9B,IAAIC,IAAJ;EAAA,IACIC,KAAK,GAAG,EADZ;;EAGA,IAAI,OAAOR,MAAM,CAACS,MAAd,KAAyB,UAA7B,EAAyC;IACrCD,KAAK,GAAGR,MAAM,CAACS,MAAP,CAAc,IAAd,CAAR;EACH;;EAED,KAAKF,IAAL,IAAaH,WAAb,EAA0B;IACtB,IAAIJ,MAAM,CAACU,cAAP,CAAsBC,IAAtB,CAA2BP,WAA3B,EAAwCG,IAAxC,CAAJ,EAAmD;MAC/CC,KAAK,CAACD,IAAD,CAAL,GAAcA,IAAd;IACH;EACJ;;EAED,IAAI,OAAOP,MAAM,CAACY,MAAd,KAAyB,UAA7B,EAAyC;IACrCZ,MAAM,CAACY,MAAP,CAAcJ,KAAd;EACH;;EAED,OAAOA,KAAP;AACH,CAnBsB,EAAhB;AAqBP,OAAO,MAAMK,iBAAiB,GAAG7B,oBAAoB,EAA9C;AAEP,OAAO,MAAM8B,qBAAqB,GAAG7B,wBAAwB,EAAtD"},"metadata":{},"sourceType":"module"}