{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(loadPrivatePartialConfig);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loadPrivatePartialConfig;\nexports.loadPartialConfig = void 0;\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _gensync() {\n  var data = require(\"gensync\");\n\n  _gensync = function _gensync() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _plugin = require(\"./plugin\");\n\nvar _util = require(\"./util\");\n\nvar _item = require(\"./item\");\n\nvar _configChain = require(\"./config-chain\");\n\nvar _environment = require(\"./helpers/environment\");\n\nvar _options = require(\"./validation/options\");\n\nvar _files = require(\"./files\");\n\nvar _resolveTargets = require(\"./resolve-targets\");\n\nvar _excluded = [\"showIgnoredFiles\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction resolveRootMode(rootDir, rootMode) {\n  switch (rootMode) {\n    case \"root\":\n      return rootDir;\n\n    case \"upward-optional\":\n      {\n        var upwardRootDir = (0, _files.findConfigUpwards)(rootDir);\n        return upwardRootDir === null ? rootDir : upwardRootDir;\n      }\n\n    case \"upward\":\n      {\n        var _upwardRootDir = (0, _files.findConfigUpwards)(rootDir);\n\n        if (_upwardRootDir !== null) return _upwardRootDir;\n        throw Object.assign(new Error(\"Babel was run with rootMode:\\\"upward\\\" but a root could not \" + \"be found when searching upward from \\\"\".concat(rootDir, \"\\\".\\n\") + \"One of the following config files must be in the directory tree: \" + \"\\\"\".concat(_files.ROOT_CONFIG_FILENAMES.join(\", \"), \"\\\".\")), {\n          code: \"BABEL_ROOT_NOT_FOUND\",\n          dirname: rootDir\n        });\n      }\n\n    default:\n      throw new Error(\"Assertion failure - unknown rootMode value.\");\n  }\n}\n\nfunction loadPrivatePartialConfig(inputOpts) {\n  var args, _args$envName, envName, _args$cwd, cwd, _args$root, rootDir, _args$rootMode, rootMode, caller, _args$cloneInputAst, cloneInputAst, absoluteCwd, absoluteRootDir, filename, showConfigPath, context, configChain, merged, options;\n\n  return _regeneratorRuntime().wrap(function loadPrivatePartialConfig$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(inputOpts != null && (typeof inputOpts !== \"object\" || Array.isArray(inputOpts)))) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new Error(\"Babel options must be an object, null, or undefined\");\n\n        case 2:\n          args = inputOpts ? (0, _options.validate)(\"arguments\", inputOpts) : {};\n          _args$envName = args.envName, envName = _args$envName === void 0 ? (0, _environment.getEnv)() : _args$envName, _args$cwd = args.cwd, cwd = _args$cwd === void 0 ? \".\" : _args$cwd, _args$root = args.root, rootDir = _args$root === void 0 ? \".\" : _args$root, _args$rootMode = args.rootMode, rootMode = _args$rootMode === void 0 ? \"root\" : _args$rootMode, caller = args.caller, _args$cloneInputAst = args.cloneInputAst, cloneInputAst = _args$cloneInputAst === void 0 ? true : _args$cloneInputAst;\n          absoluteCwd = _path().resolve(cwd);\n          absoluteRootDir = resolveRootMode(_path().resolve(absoluteCwd, rootDir), rootMode);\n          filename = typeof args.filename === \"string\" ? _path().resolve(cwd, args.filename) : undefined;\n          return _context.delegateYield((0, _files.resolveShowConfigPath)(absoluteCwd), \"t0\", 8);\n\n        case 8:\n          showConfigPath = _context.t0;\n          context = {\n            filename: filename,\n            cwd: absoluteCwd,\n            root: absoluteRootDir,\n            envName: envName,\n            caller: caller,\n            showConfig: showConfigPath === filename\n          };\n          return _context.delegateYield((0, _configChain.buildRootChain)(args, context), \"t1\", 11);\n\n        case 11:\n          configChain = _context.t1;\n\n          if (configChain) {\n            _context.next = 14;\n            break;\n          }\n\n          return _context.abrupt(\"return\", null);\n\n        case 14:\n          merged = {\n            assumptions: {}\n          };\n          configChain.options.forEach(function (opts) {\n            (0, _util.mergeOptions)(merged, opts);\n          });\n          options = Object.assign({}, merged, {\n            targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir),\n            cloneInputAst: cloneInputAst,\n            babelrc: false,\n            configFile: false,\n            browserslistConfigFile: false,\n            passPerPreset: false,\n            envName: context.envName,\n            cwd: context.cwd,\n            root: context.root,\n            rootMode: \"root\",\n            filename: typeof context.filename === \"string\" ? context.filename : undefined,\n            plugins: configChain.plugins.map(function (descriptor) {\n              return (0, _item.createItemFromDescriptor)(descriptor);\n            }),\n            presets: configChain.presets.map(function (descriptor) {\n              return (0, _item.createItemFromDescriptor)(descriptor);\n            })\n          });\n          return _context.abrupt(\"return\", {\n            options: options,\n            context: context,\n            fileHandling: configChain.fileHandling,\n            ignore: configChain.ignore,\n            babelrc: configChain.babelrc,\n            config: configChain.config,\n            files: configChain.files\n          });\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nvar loadPartialConfig = _gensync()( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(opts) {\n  var showIgnoredFiles, _opts, result, options, babelrc, ignore, config, fileHandling, files;\n\n  return _regeneratorRuntime().wrap(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          showIgnoredFiles = false;\n\n          if (typeof opts === \"object\" && opts !== null && !Array.isArray(opts)) {\n            _opts = opts;\n            showIgnoredFiles = _opts.showIgnoredFiles;\n            opts = _objectWithoutPropertiesLoose(_opts, _excluded);\n            _opts;\n          }\n\n          return _context2.delegateYield(loadPrivatePartialConfig(opts), \"t0\", 3);\n\n        case 3:\n          result = _context2.t0;\n\n          if (result) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", null);\n\n        case 6:\n          options = result.options, babelrc = result.babelrc, ignore = result.ignore, config = result.config, fileHandling = result.fileHandling, files = result.files;\n\n          if (!(fileHandling === \"ignored\" && !showIgnoredFiles)) {\n            _context2.next = 9;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", null);\n\n        case 9:\n          (options.plugins || []).forEach(function (item) {\n            if (item.value instanceof _plugin.default) {\n              throw new Error(\"Passing cached plugin instances is not supported in \" + \"babel.loadPartialConfig()\");\n            }\n          });\n          return _context2.abrupt(\"return\", new PartialConfig(options, babelrc ? babelrc.filepath : undefined, ignore ? ignore.filepath : undefined, config ? config.filepath : undefined, fileHandling, files));\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee);\n}));\n\nexports.loadPartialConfig = loadPartialConfig;\n\nvar PartialConfig = /*#__PURE__*/function () {\n  function PartialConfig(options, babelrc, ignore, config, fileHandling, files) {\n    _classCallCheck(this, PartialConfig);\n\n    this.options = void 0;\n    this.babelrc = void 0;\n    this.babelignore = void 0;\n    this.config = void 0;\n    this.fileHandling = void 0;\n    this.files = void 0;\n    this.options = options;\n    this.babelignore = ignore;\n    this.babelrc = babelrc;\n    this.config = config;\n    this.fileHandling = fileHandling;\n    this.files = files;\n    Object.freeze(this);\n  }\n\n  _createClass(PartialConfig, [{\n    key: \"hasFilesystemConfig\",\n    value: function hasFilesystemConfig() {\n      return this.babelrc !== undefined || this.config !== undefined;\n    }\n  }]);\n\n  return PartialConfig;\n}();\n\nObject.freeze(PartialConfig.prototype);\n0 && 0;","map":{"version":3,"mappings":";;;;;;;;sDAmEyBA,wB;;;;;;;;AAnEzB;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AAEA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAQA;;AAMA;;;;;;;;;;;;;;;;;;;AAEA,SAASC,eAAT,CAAyBC,OAAzB,EAA0CC,QAA1C,EAAsE;EACpE,QAAQA,QAAR;IACE,KAAK,MAAL;MACE,OAAOD,OAAP;;IAEF,KAAK,iBAAL;MAAwB;QACtB,IAAME,aAAa,GAAG,8BAAkBF,OAAlB,CAAtB;QACA,OAAOE,aAAa,KAAK,IAAlBA,GAAyBF,OAAzBE,GAAmCA,aAA1C;MACD;;IAED,KAAK,QAAL;MAAe;QACb,IAAMA,cAAa,GAAG,8BAAkBF,OAAlB,CAAtB;;QACA,IAAIE,cAAa,KAAK,IAAtB,EAA4B,OAAOA,cAAP;QAE5B,MAAMC,MAAM,CAACC,MAAPD,CACJ,IAAIE,KAAJ,CACG,iHACyCL,OADzC,+FAGKM,6BAAsBC,IAAtBD,CAA2B,IAA3BA,CAHL,QADH,CADIH,EAOJ;UACEK,IAAI,EAAE,sBADR;UAEEC,OAAO,EAAET;QAFX,CAPIG,CAAN;MAYD;;IACD;MACE,MAAM,IAAIE,KAAJ,+CAAN;EA3BJ;AA6BD;;AAYc,SAAUT,wBAAV,CACbc,SADa;EAAA;;EAAA;IAAA;MAAA;QAAA;UAAA,MAIXA,SAAS,IAAI,IAAbA,KACC,OAAOA,SAAP,KAAqB,QAArB,IAAiCC,KAAK,CAACC,OAAND,CAAcD,SAAdC,CADlCD,CAJW;YAAA;YAAA;UAAA;;UAAA,MAOL,IAAIL,KAAJ,CAAU,qDAAV,CAPK;;QAAA;UAUPQ,IAVO,GAUAH,SAAS,GAAG,uBAAS,WAAT,EAAsBA,SAAtB,CAAH,GAAsC,EAV/C;UAAA,gBAmBTG,IAnBS,CAaXC,OAbW,EAaXA,OAbW,8BAaD,0BAbC,8BAmBTD,IAnBS,CAcXE,GAdW,EAcXA,GAdW,0BAcL,GAdK,2BAmBTF,IAnBS,CAeXG,IAfW,EAeLhB,OAfK,2BAeK,GAfL,gCAmBTa,IAnBS,CAgBXZ,QAhBW,EAgBXA,QAhBW,+BAgBA,MAhBA,mBAiBXgB,MAjBW,GAmBTJ,IAnBS,CAiBXI,MAjBW,wBAmBTJ,IAnBS,CAkBXK,aAlBW,EAkBXA,aAlBW,oCAkBK,IAlBL;UAoBPC,WApBO,GAoBOC,QAAKC,OAALD,CAAaL,GAAbK,CApBP;UAqBPE,eArBO,GAqBWvB,eAAe,CACrCqB,QAAKC,OAALD,CAAaD,WAAbC,EAA0BpB,OAA1BoB,CADqC,EAErCnB,QAFqC,CArB1B;UA0BPsB,QA1BO,GA2BX,OAAOV,IAAI,CAACU,QAAZ,KAAyB,QAAzB,GACIH,QAAKC,OAALD,CAAaL,GAAbK,EAAkBP,IAAI,CAACU,QAAvBH,CADJ,GAEII,SA7BO;UA+BU,8BAAO,kCAAsBL,WAAtB,CAAP;;QA/BV;UA+BPM,cA/BO;UAiCPC,OAjCO,GAiCkB;YAC7BH,QAD6B,EAC7BA,QAD6B;YAE7BR,GAAG,EAAEI,WAFwB;YAG7BH,IAAI,EAAEM,eAHuB;YAI7BR,OAJ6B,EAI7BA,OAJ6B;YAK7BG,MAL6B,EAK7BA,MAL6B;YAM7BU,UAAU,EAAEF,cAAc,KAAKF;UANF,CAjClB;UA0CO,8BAAO,iCAAeV,IAAf,EAAqBa,OAArB,CAAP;;QA1CP;UA0CPE,WA1CO;;UAAA,IA2CRA,WA3CQ;YAAA;YAAA;UAAA;;UAAA,iCA2CY,IA3CZ;;QAAA;UA6CPC,MA7CO,GA6CoB;YAC/BC,WAAW,EAAE;UADkB,CA7CpB;UAgDbF,WAAW,CAACG,OAAZH,CAAoBI,OAApBJ,CAA4BK,cAAI,EAAI;YAClC,wBAAaJ,MAAb,EAA4BI,IAA5B;UADF;UAIMF,OApDO,GAoDmB5B,kBAC3B0B,MAD2B;YAE9BK,OAAO,EAAE,oCAAeL,MAAf,EAAuBP,eAAvB,CAFqB;YAO9BJ,aAP8B,EAO9BA,aAP8B;YAQ9BiB,OAAO,EAAE,KARqB;YAS9BC,UAAU,EAAE,KATkB;YAU9BC,sBAAsB,EAAE,KAVM;YAW9BC,aAAa,EAAE,KAXe;YAY9BxB,OAAO,EAAEY,OAAO,CAACZ,OAZa;YAa9BC,GAAG,EAAEW,OAAO,CAACX,GAbiB;YAc9BC,IAAI,EAAEU,OAAO,CAACV,IAdgB;YAe9Bf,QAAQ,EAAE,MAfoB;YAgB9BsB,QAAQ,EACN,OAAOG,OAAO,CAACH,QAAf,KAA4B,QAA5B,GAAuCG,OAAO,CAACH,QAA/C,GAA0DC,SAjB9B;YAmB9Be,OAAO,EAAEX,WAAW,CAACW,OAAZX,CAAoBY,GAApBZ,CAAwBa,oBAAU;cAAA,OACzC,oCAAyBA,UAAzB,CADyC;YAAA,CAAlCb,CAnBqB;YAsB9Bc,OAAO,EAAEd,WAAW,CAACc,OAAZd,CAAoBY,GAApBZ,CAAwBa,oBAAU;cAAA,OACzC,oCAAyBA,UAAzB,CADyC;YAAA,CAAlCb;UAtBqB,EApDnB;UAAA,iCA+EN;YACLG,OADK,EACLA,OADK;YAELL,OAFK,EAELA,OAFK;YAGLiB,YAAY,EAAEf,WAAW,CAACe,YAHrB;YAILC,MAAM,EAAEhB,WAAW,CAACgB,MAJf;YAKLT,OAAO,EAAEP,WAAW,CAACO,OALhB;YAMLU,MAAM,EAAEjB,WAAW,CAACiB,MANf;YAOLC,KAAK,EAAElB,WAAW,CAACkB;UAPd,CA/EM;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AA8FR,IAAMC,iBAAiB,GAAGC,oDAAQ,iBACvCf,IADuC;EAAA;;EAAA;IAAA;MAAA;QAAA;UAGnCgB,gBAHmC,GAGhB,KAHgB;;UAMvC,IAAI,OAAOhB,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAArC,IAA6C,CAACtB,KAAK,CAACC,OAAND,CAAcsB,IAAdtB,CAAlD,EAAuE;YAAAuC,QACpCjB,IADoC;YAClEgB,gBADkE,GACpEC,KADoE,CAClED,gBADkE;YAC7ChB,IAD6C,kDAC7CA;YAD6CiB;UAEtE;;UAGC,+BAAOtD,wBAAwB,CAACqC,IAAD,CAA/B;;QAXqC;UAUjCkB,MAViC;;UAAA,IAYlCA,MAZkC;YAAA;YAAA;UAAA;;UAAA,kCAYnB,IAZmB;;QAAA;UAc/BpB,OAd+B,GAc2BoB,MAd3B,CAc/BpB,OAd+B,EActBI,OAdsB,GAc2BgB,MAd3B,CActBhB,OAdsB,EAcbS,MAda,GAc2BO,MAd3B,CAcbP,MAda,EAcLC,MAdK,GAc2BM,MAd3B,CAcLN,MAdK,EAcGF,YAdH,GAc2BQ,MAd3B,CAcGR,YAdH,EAciBG,KAdjB,GAc2BK,MAd3B,CAciBL,KAdjB;;UAAA,MAgBnCH,YAAY,KAAK,SAAjBA,IAA8B,CAACM,gBAhBI;YAAA;YAAA;UAAA;;UAAA,kCAiB9B,IAjB8B;;QAAA;UAoBvC,CAAClB,OAAO,CAACQ,OAARR,IAAmB,EAApB,EAAwBC,OAAxB,CAAgCoB,cAAI,EAAI;YAEtC,IAAIA,IAAI,CAACC,KAALD,YAAsBE,eAA1B,EAAkC;cAChC,MAAM,IAAIjD,KAAJ,CACJ,yDACE,2BAFE,CAAN;YAID;UAPH;UApBuC,kCA8BhC,IAAIkD,aAAJ,CACLxB,OADK,EAELI,OAAO,GAAGA,OAAO,CAACqB,QAAX,GAAsBhC,SAFxB,EAGLoB,MAAM,GAAGA,MAAM,CAACY,QAAV,GAAqBhC,SAHtB,EAILqB,MAAM,GAAGA,MAAM,CAACW,QAAV,GAAqBhC,SAJtB,EAKLmB,YALK,EAMLG,KANK,CA9BgC;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAARE,EAA1B;;;;IA0CDO,a;EAYJE,uBACE1B,OADF0B,EAEEtB,OAFFsB,EAGEb,MAHFa,EAIEZ,MAJFY,EAKEd,YALFc,EAMEX,KANFW,EAOE;IAAA;;IAAA,KAdF1B,OAcE;IAAA,KAbFI,OAaE;IAAA,KAZFuB,WAYE;IAAA,KAXFb,MAWE;IAAA,KAVFF,YAUE;IAAA,KATFG,KASE;IACA,KAAKf,OAAL,GAAeA,OAAf;IACA,KAAK2B,WAAL,GAAmBd,MAAnB;IACA,KAAKT,OAAL,GAAeA,OAAf;IACA,KAAKU,MAAL,GAAcA,MAAd;IACA,KAAKF,YAAL,GAAoBA,YAApB;IACA,KAAKG,KAAL,GAAaA,KAAb;IAIA3C,MAAM,CAACwD,MAAPxD,CAAc,IAAdA;EACD;;;;WAKDyD,+BAA+B;MAC7B,OAAO,KAAKzB,OAAL,KAAiBX,SAAjB,IAA8B,KAAKqB,MAAL,KAAgBrB,SAArD;IACD;;;;;;AAEHrB,MAAM,CAACwD,MAAPxD,CAAcoD,aAAa,CAACM,SAA5B1D","names":["loadPrivatePartialConfig","_path","_gensync","resolveRootMode","rootDir","rootMode","upwardRootDir","Object","assign","Error","ROOT_CONFIG_FILENAMES","join","code","dirname","inputOpts","Array","isArray","args","envName","cwd","root","caller","cloneInputAst","absoluteCwd","path","resolve","absoluteRootDir","filename","undefined","showConfigPath","context","showConfig","configChain","merged","assumptions","options","forEach","opts","targets","babelrc","configFile","browserslistConfigFile","passPerPreset","plugins","map","descriptor","presets","fileHandling","ignore","config","files","loadPartialConfig","gensync","showIgnoredFiles","_opts","result","item","value","Plugin","PartialConfig","filepath","constructor","babelignore","freeze","hasFilesystemConfig","prototype"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\config\\partial.ts"],"sourcesContent":["import path from \"path\";\nimport gensync from \"gensync\";\nimport type { Handler } from \"gensync\";\nimport Plugin from \"./plugin\";\nimport { mergeOptions } from \"./util\";\nimport { createItemFromDescriptor } from \"./item\";\nimport { buildRootChain } from \"./config-chain\";\nimport type { ConfigContext, FileHandling } from \"./config-chain\";\nimport { getEnv } from \"./helpers/environment\";\nimport { validate } from \"./validation/options\";\n\nimport type {\n  ValidatedOptions,\n  NormalizedOptions,\n  RootMode,\n} from \"./validation/options\";\n\nimport {\n  findConfigUpwards,\n  resolveShowConfigPath,\n  ROOT_CONFIG_FILENAMES,\n} from \"./files\";\nimport type { ConfigFile, IgnoreFile } from \"./files\";\nimport { resolveTargets } from \"./resolve-targets\";\n\nfunction resolveRootMode(rootDir: string, rootMode: RootMode): string {\n  switch (rootMode) {\n    case \"root\":\n      return rootDir;\n\n    case \"upward-optional\": {\n      const upwardRootDir = findConfigUpwards(rootDir);\n      return upwardRootDir === null ? rootDir : upwardRootDir;\n    }\n\n    case \"upward\": {\n      const upwardRootDir = findConfigUpwards(rootDir);\n      if (upwardRootDir !== null) return upwardRootDir;\n\n      throw Object.assign(\n        new Error(\n          `Babel was run with rootMode:\"upward\" but a root could not ` +\n            `be found when searching upward from \"${rootDir}\".\\n` +\n            `One of the following config files must be in the directory tree: ` +\n            `\"${ROOT_CONFIG_FILENAMES.join(\", \")}\".`,\n        ) as any,\n        {\n          code: \"BABEL_ROOT_NOT_FOUND\",\n          dirname: rootDir,\n        },\n      );\n    }\n    default:\n      throw new Error(`Assertion failure - unknown rootMode value.`);\n  }\n}\n\ntype PrivPartialConfig = {\n  options: NormalizedOptions;\n  context: ConfigContext;\n  fileHandling: FileHandling;\n  ignore: IgnoreFile | void;\n  babelrc: ConfigFile | void;\n  config: ConfigFile | void;\n  files: Set<string>;\n};\n\nexport default function* loadPrivatePartialConfig(\n  inputOpts: unknown,\n): Handler<PrivPartialConfig | null> {\n  if (\n    inputOpts != null &&\n    (typeof inputOpts !== \"object\" || Array.isArray(inputOpts))\n  ) {\n    throw new Error(\"Babel options must be an object, null, or undefined\");\n  }\n\n  const args = inputOpts ? validate(\"arguments\", inputOpts) : {};\n\n  const {\n    envName = getEnv(),\n    cwd = \".\",\n    root: rootDir = \".\",\n    rootMode = \"root\",\n    caller,\n    cloneInputAst = true,\n  } = args;\n  const absoluteCwd = path.resolve(cwd);\n  const absoluteRootDir = resolveRootMode(\n    path.resolve(absoluteCwd, rootDir),\n    rootMode,\n  );\n\n  const filename =\n    typeof args.filename === \"string\"\n      ? path.resolve(cwd, args.filename)\n      : undefined;\n\n  const showConfigPath = yield* resolveShowConfigPath(absoluteCwd);\n\n  const context: ConfigContext = {\n    filename,\n    cwd: absoluteCwd,\n    root: absoluteRootDir,\n    envName,\n    caller,\n    showConfig: showConfigPath === filename,\n  };\n\n  const configChain = yield* buildRootChain(args, context);\n  if (!configChain) return null;\n\n  const merged: ValidatedOptions = {\n    assumptions: {},\n  };\n  configChain.options.forEach(opts => {\n    mergeOptions(merged as any, opts);\n  });\n\n  const options: NormalizedOptions = {\n    ...merged,\n    targets: resolveTargets(merged, absoluteRootDir),\n\n    // Tack the passes onto the object itself so that, if this object is\n    // passed back to Babel a second time, it will be in the right structure\n    // to not change behavior.\n    cloneInputAst,\n    babelrc: false,\n    configFile: false,\n    browserslistConfigFile: false,\n    passPerPreset: false,\n    envName: context.envName,\n    cwd: context.cwd,\n    root: context.root,\n    rootMode: \"root\",\n    filename:\n      typeof context.filename === \"string\" ? context.filename : undefined,\n\n    plugins: configChain.plugins.map(descriptor =>\n      createItemFromDescriptor(descriptor),\n    ),\n    presets: configChain.presets.map(descriptor =>\n      createItemFromDescriptor(descriptor),\n    ),\n  };\n\n  return {\n    options,\n    context,\n    fileHandling: configChain.fileHandling,\n    ignore: configChain.ignore,\n    babelrc: configChain.babelrc,\n    config: configChain.config,\n    files: configChain.files,\n  };\n}\n\ntype LoadPartialConfigOpts = {\n  showIgnoredFiles?: boolean;\n};\n\nexport const loadPartialConfig = gensync(function* (\n  opts?: LoadPartialConfigOpts,\n): Handler<PartialConfig | null> {\n  let showIgnoredFiles = false;\n  // We only extract showIgnoredFiles if opts is an object, so that\n  // loadPrivatePartialConfig can throw the appropriate error if it's not.\n  if (typeof opts === \"object\" && opts !== null && !Array.isArray(opts)) {\n    ({ showIgnoredFiles, ...opts } = opts);\n  }\n\n  const result: PrivPartialConfig | undefined | null =\n    yield* loadPrivatePartialConfig(opts);\n  if (!result) return null;\n\n  const { options, babelrc, ignore, config, fileHandling, files } = result;\n\n  if (fileHandling === \"ignored\" && !showIgnoredFiles) {\n    return null;\n  }\n\n  (options.plugins || []).forEach(item => {\n    // @ts-expect-error todo(flow->ts): better type annotation for `item.value`\n    if (item.value instanceof Plugin) {\n      throw new Error(\n        \"Passing cached plugin instances is not supported in \" +\n          \"babel.loadPartialConfig()\",\n      );\n    }\n  });\n\n  return new PartialConfig(\n    options,\n    babelrc ? babelrc.filepath : undefined,\n    ignore ? ignore.filepath : undefined,\n    config ? config.filepath : undefined,\n    fileHandling,\n    files,\n  );\n});\n\nexport type { PartialConfig };\n\nclass PartialConfig {\n  /**\n   * These properties are public, so any changes to them should be considered\n   * a breaking change to Babel's API.\n   */\n  options: NormalizedOptions;\n  babelrc: string | void;\n  babelignore: string | void;\n  config: string | void;\n  fileHandling: FileHandling;\n  files: Set<string>;\n\n  constructor(\n    options: NormalizedOptions,\n    babelrc: string | void,\n    ignore: string | void,\n    config: string | void,\n    fileHandling: FileHandling,\n    files: Set<string>,\n  ) {\n    this.options = options;\n    this.babelignore = ignore;\n    this.babelrc = babelrc;\n    this.config = config;\n    this.fileHandling = fileHandling;\n    this.files = files;\n\n    // Freeze since this is a public API and it should be extremely obvious that\n    // reassigning properties on here does nothing.\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns true if there is a config file in the filesystem for this config.\n   */\n  hasFilesystemConfig(): boolean {\n    return this.babelrc !== undefined || this.config !== undefined;\n  }\n}\nObject.freeze(PartialConfig.prototype);\n"]},"metadata":{},"sourceType":"script"}