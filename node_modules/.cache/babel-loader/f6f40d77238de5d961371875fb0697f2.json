{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\n\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('no-duplicate-imports');\nexports.default = util.createRule({\n  name: 'no-duplicate-imports',\n  meta: {\n    deprecated: true,\n    replacedBy: ['import/no-duplicates'],\n    type: 'problem',\n    docs: {\n      description: 'Disallow duplicate imports',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: baseRule.meta.schema,\n    messages: Object.assign(Object.assign({}, baseRule.meta.messages), {\n      importType: '{{module}} type import is duplicated.',\n      importTypeAs: '{{module}} type import is duplicated as type export.',\n      exportType: '{{module}} type export is duplicated.',\n      exportTypeAs: '{{module}} type export is duplicated as type import.'\n    })\n  },\n  defaultOptions: [{\n    includeExports: false\n  }],\n\n  create(context, _ref) {\n    let [{\n      includeExports\n    }] = _ref;\n    const rules = baseRule.create(context);\n    const typeMemberImports = new Set();\n    const typeDefaultImports = new Set();\n    const typeExports = new Set();\n\n    function report(messageId, node, module) {\n      context.report({\n        messageId,\n        node,\n        data: {\n          module\n        }\n      });\n    }\n\n    function isAllMemberImport(node) {\n      return node.specifiers.every(specifier => specifier.type === utils_1.AST_NODE_TYPES.ImportSpecifier);\n    }\n\n    function checkTypeImport(node) {\n      if (node.source) {\n        const value = node.source.value;\n        const isMemberImport = isAllMemberImport(node);\n\n        if (isMemberImport ? typeMemberImports.has(value) : typeDefaultImports.has(value)) {\n          report('importType', node, value);\n        }\n\n        if (includeExports && typeExports.has(value)) {\n          report('importTypeAs', node, value);\n        }\n\n        if (isMemberImport) {\n          typeMemberImports.add(value);\n        } else {\n          typeDefaultImports.add(value);\n        }\n      }\n    }\n\n    function checkTypeExport(node) {\n      if (node.source) {\n        const value = node.source.value;\n\n        if (typeExports.has(value)) {\n          report('exportType', node, value);\n        }\n\n        if (typeMemberImports.has(value) || typeDefaultImports.has(value)) {\n          report('exportTypeAs', node, value);\n        }\n\n        typeExports.add(value);\n      }\n    }\n\n    return Object.assign(Object.assign({}, rules), {\n      ImportDeclaration(node) {\n        if (node.importKind === 'type') {\n          checkTypeImport(node);\n          return;\n        }\n\n        rules.ImportDeclaration(node);\n      },\n\n      ExportNamedDeclaration(node) {\n        var _a;\n\n        if (includeExports && node.exportKind === 'type') {\n          checkTypeExport(node);\n          return;\n        }\n\n        (_a = rules.ExportNamedDeclaration) === null || _a === void 0 ? void 0 : _a.call(rules, node);\n      },\n\n      ExportAllDeclaration(node) {\n        var _a;\n\n        if (includeExports && node.exportKind === 'type') {\n          checkTypeExport(node);\n          return;\n        }\n\n        (_a = rules.ExportAllDeclaration) === null || _a === void 0 ? void 0 : _a.call(rules, node);\n      }\n\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["baseRule","exports","util","createRule","name","meta","deprecated","replacedBy","type","docs","description","recommended","extendsBaseRule","hasSuggestions","schema","messages","importType","importTypeAs","exportType","exportTypeAs","defaultOptions","includeExports","create","context","rules","typeMemberImports","Set","typeDefaultImports","typeExports","report","messageId","node","module","data","isAllMemberImport","specifiers","every","specifier","utils_1","ImportSpecifier","checkTypeImport","source","value","isMemberImport","has","add","checkTypeExport","ImportDeclaration","importKind","ExportNamedDeclaration","exportKind","_a","ExportAllDeclaration"],"sources":["../../src/rules/no-duplicate-imports.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}