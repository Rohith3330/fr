{"ast":null,"code":"var globToRegexp = require(\"./index.js\");\n\nvar assert = require(\"assert\");\n\nfunction assertMatch(glob, str, opts) {\n  //console.log(glob, globToRegexp(glob, opts));\n  assert.ok(globToRegexp(glob, opts).test(str));\n}\n\nfunction assertNotMatch(glob, str, opts) {\n  //console.log(glob, globToRegexp(glob, opts));\n  assert.equal(false, globToRegexp(glob, opts).test(str));\n}\n\nfunction test(globstar) {\n  // Match everything\n  assertMatch(\"*\", \"foo\");\n  assertMatch(\"*\", \"foo\", {\n    flags: 'g'\n  }); // Match the end\n\n  assertMatch(\"f*\", \"foo\");\n  assertMatch(\"f*\", \"foo\", {\n    flags: 'g'\n  }); // Match the start\n\n  assertMatch(\"*o\", \"foo\");\n  assertMatch(\"*o\", \"foo\", {\n    flags: 'g'\n  }); // Match the middle\n\n  assertMatch(\"f*uck\", \"firetruck\");\n  assertMatch(\"f*uck\", \"firetruck\", {\n    flags: 'g'\n  }); // Don't match without Regexp 'g'\n\n  assertNotMatch(\"uc\", \"firetruck\"); // Match anywhere with RegExp 'g'\n\n  assertMatch(\"uc\", \"firetruck\", {\n    flags: 'g'\n  }); // Match zero characters\n\n  assertMatch(\"f*uck\", \"fuck\");\n  assertMatch(\"f*uck\", \"fuck\", {\n    flags: 'g'\n  }); // More complex matches\n\n  assertMatch(\"*.min.js\", \"http://example.com/jquery.min.js\", {\n    globstar: false\n  });\n  assertMatch(\"*.min.*\", \"http://example.com/jquery.min.js\", {\n    globstar: false\n  });\n  assertMatch(\"*/js/*.js\", \"http://example.com/js/jquery.min.js\", {\n    globstar: false\n  }); // More complex matches with RegExp 'g' flag (complex regression)\n\n  assertMatch(\"*.min.*\", \"http://example.com/jquery.min.js\", {\n    flags: 'g'\n  });\n  assertMatch(\"*.min.js\", \"http://example.com/jquery.min.js\", {\n    flags: 'g'\n  });\n  assertMatch(\"*/js/*.js\", \"http://example.com/js/jquery.min.js\", {\n    flags: 'g'\n  }); // Test string  \"\\\\\\\\/$^+?.()=!|{},[].*\"  represents  <glob>\\\\/$^+?.()=!|{},[].*</glob>\n  // The equivalent regex is:  /^\\\\\\/\\$\\^\\+\\?\\.\\(\\)\\=\\!\\|\\{\\}\\,\\[\\]\\..*$/\n  // Both glob and regex match:  \\/$^+?.()=!|{},[].*\n\n  var testStr = \"\\\\\\\\/$^+?.()=!|{},[].*\";\n  var targetStr = \"\\\\/$^+?.()=!|{},[].*\";\n  assertMatch(testStr, targetStr);\n  assertMatch(testStr, targetStr, {\n    flags: 'g'\n  }); // Equivalent matches without/with using RegExp 'g'\n\n  assertNotMatch(\".min.\", \"http://example.com/jquery.min.js\");\n  assertMatch(\"*.min.*\", \"http://example.com/jquery.min.js\");\n  assertMatch(\".min.\", \"http://example.com/jquery.min.js\", {\n    flags: 'g'\n  });\n  assertNotMatch(\"http:\", \"http://example.com/jquery.min.js\");\n  assertMatch(\"http:*\", \"http://example.com/jquery.min.js\");\n  assertMatch(\"http:\", \"http://example.com/jquery.min.js\", {\n    flags: 'g'\n  });\n  assertNotMatch(\"min.js\", \"http://example.com/jquery.min.js\");\n  assertMatch(\"*.min.js\", \"http://example.com/jquery.min.js\");\n  assertMatch(\"min.js\", \"http://example.com/jquery.min.js\", {\n    flags: 'g'\n  }); // Match anywhere (globally) using RegExp 'g'\n\n  assertMatch(\"min\", \"http://example.com/jquery.min.js\", {\n    flags: 'g'\n  });\n  assertMatch(\"/js/\", \"http://example.com/js/jquery.min.js\", {\n    flags: 'g'\n  });\n  assertNotMatch(\"/js*jq*.js\", \"http://example.com/js/jquery.min.js\");\n  assertMatch(\"/js*jq*.js\", \"http://example.com/js/jquery.min.js\", {\n    flags: 'g'\n  }); // Extended mode\n  // ?: Match one character, no more and no less\n\n  assertMatch(\"f?o\", \"foo\", {\n    extended: true\n  });\n  assertNotMatch(\"f?o\", \"fooo\", {\n    extended: true\n  });\n  assertNotMatch(\"f?oo\", \"foo\", {\n    extended: true\n  }); // ?: Match one character with RegExp 'g'\n\n  assertMatch(\"f?o\", \"foo\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertMatch(\"f?o\", \"fooo\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertMatch(\"f?o?\", \"fooo\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertNotMatch(\"?fo\", \"fooo\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertNotMatch(\"f?oo\", \"foo\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertNotMatch(\"foo?\", \"foo\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  }); // []: Match a character range\n\n  assertMatch(\"fo[oz]\", \"foo\", {\n    extended: true\n  });\n  assertMatch(\"fo[oz]\", \"foz\", {\n    extended: true\n  });\n  assertNotMatch(\"fo[oz]\", \"fog\", {\n    extended: true\n  }); // []: Match a character range and RegExp 'g' (regresion)\n\n  assertMatch(\"fo[oz]\", \"foo\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertMatch(\"fo[oz]\", \"foz\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertNotMatch(\"fo[oz]\", \"fog\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  }); // {}: Match a choice of different substrings\n\n  assertMatch(\"foo{bar,baaz}\", \"foobaaz\", {\n    extended: true\n  });\n  assertMatch(\"foo{bar,baaz}\", \"foobar\", {\n    extended: true\n  });\n  assertNotMatch(\"foo{bar,baaz}\", \"foobuzz\", {\n    extended: true\n  });\n  assertMatch(\"foo{bar,b*z}\", \"foobuzz\", {\n    extended: true\n  }); // {}: Match a choice of different substrings and RegExp 'g' (regression)\n\n  assertMatch(\"foo{bar,baaz}\", \"foobaaz\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertMatch(\"foo{bar,baaz}\", \"foobar\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertNotMatch(\"foo{bar,baaz}\", \"foobuzz\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertMatch(\"foo{bar,b*z}\", \"foobuzz\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  }); // More complex extended matches\n\n  assertMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\", \"http://foo.baaz.com/jquery.min.js\", {\n    extended: true\n  });\n  assertMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\", \"http://moz.buzz.com/index.html\", {\n    extended: true\n  });\n  assertNotMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\", \"http://moz.buzz.com/index.htm\", {\n    extended: true\n  });\n  assertNotMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\", \"http://moz.bar.com/index.html\", {\n    extended: true\n  });\n  assertNotMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\", \"http://flozz.buzz.com/index.html\", {\n    extended: true\n  }); // More complex extended matches and RegExp 'g' (regresion)\n\n  assertMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\", \"http://foo.baaz.com/jquery.min.js\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\", \"http://moz.buzz.com/index.html\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertNotMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\", \"http://moz.buzz.com/index.htm\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertNotMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\", \"http://moz.bar.com/index.html\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertNotMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\", \"http://flozz.buzz.com/index.html\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  }); // globstar\n\n  assertMatch(\"http://foo.com/**/{*.js,*.html}\", \"http://foo.com/bar/jquery.min.js\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertMatch(\"http://foo.com/**/{*.js,*.html}\", \"http://foo.com/bar/baz/jquery.min.js\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n  assertMatch(\"http://foo.com/**\", \"http://foo.com/bar/baz/jquery.min.js\", {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  }); // Remaining special chars should still match themselves\n  // Test string  \"\\\\\\\\/$^+.()=!|,.*\"  represents  <glob>\\\\/$^+.()=!|,.*</glob>\n  // The equivalent regex is:  /^\\\\\\/\\$\\^\\+\\.\\(\\)\\=\\!\\|\\,\\..*$/\n  // Both glob and regex match:  \\/$^+.()=!|,.*\n\n  var testExtStr = \"\\\\\\\\/$^+.()=!|,.*\";\n  var targetExtStr = \"\\\\/$^+.()=!|,.*\";\n  assertMatch(testExtStr, targetExtStr, {\n    extended: true\n  });\n  assertMatch(testExtStr, targetExtStr, {\n    extended: true,\n    globstar: globstar,\n    flags: 'g'\n  });\n} // regression\n// globstar false\n\n\ntest(false); // globstar true\n\ntest(true); // globstar specific tests\n\nassertMatch(\"/foo/*\", \"/foo/bar.txt\", {\n  globstar: true\n});\nassertMatch(\"/foo/**\", \"/foo/baz.txt\", {\n  globstar: true\n});\nassertMatch(\"/foo/**\", \"/foo/bar/baz.txt\", {\n  globstar: true\n});\nassertMatch(\"/foo/*/*.txt\", \"/foo/bar/baz.txt\", {\n  globstar: true\n});\nassertMatch(\"/foo/**/*.txt\", \"/foo/bar/baz.txt\", {\n  globstar: true\n});\nassertMatch(\"/foo/**/*.txt\", \"/foo/bar/baz/qux.txt\", {\n  globstar: true\n});\nassertMatch(\"/foo/**/bar.txt\", \"/foo/bar.txt\", {\n  globstar: true\n});\nassertMatch(\"/foo/**/**/bar.txt\", \"/foo/bar.txt\", {\n  globstar: true\n});\nassertMatch(\"/foo/**/*/baz.txt\", \"/foo/bar/baz.txt\", {\n  globstar: true\n});\nassertMatch(\"/foo/**/*.txt\", \"/foo/bar.txt\", {\n  globstar: true\n});\nassertMatch(\"/foo/**/**/*.txt\", \"/foo/bar.txt\", {\n  globstar: true\n});\nassertMatch(\"/foo/**/*/*.txt\", \"/foo/bar/baz.txt\", {\n  globstar: true\n});\nassertMatch(\"**/*.txt\", \"/foo/bar/baz/qux.txt\", {\n  globstar: true\n});\nassertMatch(\"**/foo.txt\", \"foo.txt\", {\n  globstar: true\n});\nassertMatch(\"**/*.txt\", \"foo.txt\", {\n  globstar: true\n});\nassertNotMatch(\"/foo/*\", \"/foo/bar/baz.txt\", {\n  globstar: true\n});\nassertNotMatch(\"/foo/*.txt\", \"/foo/bar/baz.txt\", {\n  globstar: true\n});\nassertNotMatch(\"/foo/*/*.txt\", \"/foo/bar/baz/qux.txt\", {\n  globstar: true\n});\nassertNotMatch(\"/foo/*/bar.txt\", \"/foo/bar.txt\", {\n  globstar: true\n});\nassertNotMatch(\"/foo/*/*/baz.txt\", \"/foo/bar/baz.txt\", {\n  globstar: true\n});\nassertNotMatch(\"/foo/**.txt\", \"/foo/bar/baz/qux.txt\", {\n  globstar: true\n});\nassertNotMatch(\"/foo/bar**/*.txt\", \"/foo/bar/baz/qux.txt\", {\n  globstar: true\n});\nassertNotMatch(\"/foo/bar**\", \"/foo/bar/baz.txt\", {\n  globstar: true\n});\nassertNotMatch(\"**/.txt\", \"/foo/bar/baz/qux.txt\", {\n  globstar: true\n});\nassertNotMatch(\"*/*.txt\", \"/foo/bar/baz/qux.txt\", {\n  globstar: true\n});\nassertNotMatch(\"*/*.txt\", \"foo.txt\", {\n  globstar: true\n});\nassertNotMatch(\"http://foo.com/*\", \"http://foo.com/bar/baz/jquery.min.js\", {\n  extended: true,\n  globstar: true\n});\nassertNotMatch(\"http://foo.com/*\", \"http://foo.com/bar/baz/jquery.min.js\", {\n  globstar: true\n});\nassertMatch(\"http://foo.com/*\", \"http://foo.com/bar/baz/jquery.min.js\", {\n  globstar: false\n});\nassertMatch(\"http://foo.com/**\", \"http://foo.com/bar/baz/jquery.min.js\", {\n  globstar: true\n});\nassertMatch(\"http://foo.com/*/*/jquery.min.js\", \"http://foo.com/bar/baz/jquery.min.js\", {\n  globstar: true\n});\nassertMatch(\"http://foo.com/**/jquery.min.js\", \"http://foo.com/bar/baz/jquery.min.js\", {\n  globstar: true\n});\nassertMatch(\"http://foo.com/*/*/jquery.min.js\", \"http://foo.com/bar/baz/jquery.min.js\", {\n  globstar: false\n});\nassertMatch(\"http://foo.com/*/jquery.min.js\", \"http://foo.com/bar/baz/jquery.min.js\", {\n  globstar: false\n});\nassertNotMatch(\"http://foo.com/*/jquery.min.js\", \"http://foo.com/bar/baz/jquery.min.js\", {\n  globstar: true\n});\nconsole.log(\"Ok!\");","map":{"version":3,"names":["globToRegexp","require","assert","assertMatch","glob","str","opts","ok","test","assertNotMatch","equal","globstar","flags","testStr","targetStr","extended","testExtStr","targetExtStr","console","log"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/glob-to-regexp/test.js"],"sourcesContent":["var globToRegexp = require(\"./index.js\");\nvar assert = require(\"assert\");\n\nfunction assertMatch(glob, str, opts) {\n  //console.log(glob, globToRegexp(glob, opts));\n  assert.ok(globToRegexp(glob, opts).test(str));\n}\n\nfunction assertNotMatch(glob, str, opts) {\n  //console.log(glob, globToRegexp(glob, opts));\n  assert.equal(false, globToRegexp(glob, opts).test(str));\n}\n\nfunction test(globstar) {\n  // Match everything\n  assertMatch(\"*\", \"foo\");\n  assertMatch(\"*\", \"foo\", { flags: 'g' });\n\n  // Match the end\n  assertMatch(\"f*\", \"foo\");\n  assertMatch(\"f*\", \"foo\", { flags: 'g' });\n\n  // Match the start\n  assertMatch(\"*o\", \"foo\");\n  assertMatch(\"*o\", \"foo\", { flags: 'g' });\n\n  // Match the middle\n  assertMatch(\"f*uck\", \"firetruck\");\n  assertMatch(\"f*uck\", \"firetruck\", { flags: 'g' });\n\n  // Don't match without Regexp 'g'\n  assertNotMatch(\"uc\", \"firetruck\");\n  // Match anywhere with RegExp 'g'\n  assertMatch(\"uc\", \"firetruck\", { flags: 'g' });\n\n  // Match zero characters\n  assertMatch(\"f*uck\", \"fuck\");\n  assertMatch(\"f*uck\", \"fuck\", { flags: 'g' });\n\n  // More complex matches\n  assertMatch(\"*.min.js\", \"http://example.com/jquery.min.js\", {globstar: false});\n  assertMatch(\"*.min.*\", \"http://example.com/jquery.min.js\", {globstar: false});\n  assertMatch(\"*/js/*.js\", \"http://example.com/js/jquery.min.js\", {globstar: false});\n\n  // More complex matches with RegExp 'g' flag (complex regression)\n  assertMatch(\"*.min.*\", \"http://example.com/jquery.min.js\", { flags: 'g' });\n  assertMatch(\"*.min.js\", \"http://example.com/jquery.min.js\", { flags: 'g' });\n  assertMatch(\"*/js/*.js\", \"http://example.com/js/jquery.min.js\", { flags: 'g' });\n\n  // Test string  \"\\\\\\\\/$^+?.()=!|{},[].*\"  represents  <glob>\\\\/$^+?.()=!|{},[].*</glob>\n  // The equivalent regex is:  /^\\\\\\/\\$\\^\\+\\?\\.\\(\\)\\=\\!\\|\\{\\}\\,\\[\\]\\..*$/\n  // Both glob and regex match:  \\/$^+?.()=!|{},[].*\n  var testStr = \"\\\\\\\\/$^+?.()=!|{},[].*\";\n  var targetStr = \"\\\\/$^+?.()=!|{},[].*\";\n  assertMatch(testStr, targetStr);\n  assertMatch(testStr, targetStr, { flags: 'g' });\n\n  // Equivalent matches without/with using RegExp 'g'\n  assertNotMatch(\".min.\", \"http://example.com/jquery.min.js\");\n  assertMatch(\"*.min.*\", \"http://example.com/jquery.min.js\");\n  assertMatch(\".min.\", \"http://example.com/jquery.min.js\", { flags: 'g' });\n\n  assertNotMatch(\"http:\", \"http://example.com/jquery.min.js\");\n  assertMatch(\"http:*\", \"http://example.com/jquery.min.js\");\n  assertMatch(\"http:\", \"http://example.com/jquery.min.js\", { flags: 'g' });\n\n  assertNotMatch(\"min.js\", \"http://example.com/jquery.min.js\");\n  assertMatch(\"*.min.js\", \"http://example.com/jquery.min.js\");\n  assertMatch(\"min.js\", \"http://example.com/jquery.min.js\", { flags: 'g' });\n\n  // Match anywhere (globally) using RegExp 'g'\n  assertMatch(\"min\", \"http://example.com/jquery.min.js\", { flags: 'g' });\n  assertMatch(\"/js/\", \"http://example.com/js/jquery.min.js\", { flags: 'g' });\n\n  assertNotMatch(\"/js*jq*.js\", \"http://example.com/js/jquery.min.js\");\n  assertMatch(\"/js*jq*.js\", \"http://example.com/js/jquery.min.js\", { flags: 'g' });\n\n  // Extended mode\n\n  // ?: Match one character, no more and no less\n  assertMatch(\"f?o\", \"foo\", { extended: true });\n  assertNotMatch(\"f?o\", \"fooo\", { extended: true });\n  assertNotMatch(\"f?oo\", \"foo\", { extended: true });\n\n  // ?: Match one character with RegExp 'g'\n  assertMatch(\"f?o\", \"foo\", { extended: true,  globstar: globstar, flags: 'g' });\n  assertMatch(\"f?o\", \"fooo\", { extended: true,  globstar: globstar, flags: 'g' });\n  assertMatch(\"f?o?\", \"fooo\", { extended: true,  globstar: globstar, flags: 'g' });\n  assertNotMatch(\"?fo\", \"fooo\", { extended: true,  globstar: globstar, flags: 'g' });\n  assertNotMatch(\"f?oo\", \"foo\", { extended: true,  globstar: globstar, flags: 'g' });\n  assertNotMatch(\"foo?\", \"foo\", { extended: true,  globstar: globstar, flags: 'g' });\n\n  // []: Match a character range\n  assertMatch(\"fo[oz]\", \"foo\", { extended: true });\n  assertMatch(\"fo[oz]\", \"foz\", { extended: true });\n  assertNotMatch(\"fo[oz]\", \"fog\", { extended: true });\n\n  // []: Match a character range and RegExp 'g' (regresion)\n  assertMatch(\"fo[oz]\", \"foo\", { extended: true,  globstar: globstar, flags: 'g' });\n  assertMatch(\"fo[oz]\", \"foz\", { extended: true,  globstar: globstar, flags: 'g' });\n  assertNotMatch(\"fo[oz]\", \"fog\", { extended: true,  globstar: globstar, flags: 'g' });\n\n  // {}: Match a choice of different substrings\n  assertMatch(\"foo{bar,baaz}\", \"foobaaz\", { extended: true });\n  assertMatch(\"foo{bar,baaz}\", \"foobar\", { extended: true });\n  assertNotMatch(\"foo{bar,baaz}\", \"foobuzz\", { extended: true });\n  assertMatch(\"foo{bar,b*z}\", \"foobuzz\", { extended: true });\n\n  // {}: Match a choice of different substrings and RegExp 'g' (regression)\n  assertMatch(\"foo{bar,baaz}\", \"foobaaz\", { extended: true,  globstar: globstar, flags: 'g' });\n  assertMatch(\"foo{bar,baaz}\", \"foobar\", { extended: true,  globstar: globstar, flags: 'g' });\n  assertNotMatch(\"foo{bar,baaz}\", \"foobuzz\", { extended: true,  globstar: globstar, flags: 'g' });\n  assertMatch(\"foo{bar,b*z}\", \"foobuzz\", { extended: true,  globstar: globstar, flags: 'g' });\n\n  // More complex extended matches\n  assertMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\",\n              \"http://foo.baaz.com/jquery.min.js\",\n              { extended: true });\n  assertMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\",\n              \"http://moz.buzz.com/index.html\",\n              { extended: true });\n  assertNotMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\",\n                 \"http://moz.buzz.com/index.htm\",\n                 { extended: true });\n  assertNotMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\",\n                 \"http://moz.bar.com/index.html\",\n                 { extended: true });\n  assertNotMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\",\n                 \"http://flozz.buzz.com/index.html\",\n                 { extended: true });\n\n  // More complex extended matches and RegExp 'g' (regresion)\n  assertMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\",\n              \"http://foo.baaz.com/jquery.min.js\",\n              { extended: true,  globstar: globstar, flags: 'g' });\n  assertMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\",\n              \"http://moz.buzz.com/index.html\",\n              { extended: true,  globstar: globstar, flags: 'g' });\n  assertNotMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\",\n                 \"http://moz.buzz.com/index.htm\",\n                 { extended: true,  globstar: globstar, flags: 'g' });\n  assertNotMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\",\n                 \"http://moz.bar.com/index.html\",\n                 { extended: true,  globstar: globstar, flags: 'g' });\n  assertNotMatch(\"http://?o[oz].b*z.com/{*.js,*.html}\",\n                 \"http://flozz.buzz.com/index.html\",\n                 { extended: true,  globstar: globstar, flags: 'g' });\n\n  // globstar\n  assertMatch(\"http://foo.com/**/{*.js,*.html}\",\n              \"http://foo.com/bar/jquery.min.js\",\n              { extended: true,  globstar: globstar, flags: 'g' });\n  assertMatch(\"http://foo.com/**/{*.js,*.html}\",\n              \"http://foo.com/bar/baz/jquery.min.js\",\n              { extended: true,  globstar: globstar, flags: 'g' });\n  assertMatch(\"http://foo.com/**\",\n              \"http://foo.com/bar/baz/jquery.min.js\",\n              { extended: true,  globstar: globstar, flags: 'g' });\n\n  // Remaining special chars should still match themselves\n  // Test string  \"\\\\\\\\/$^+.()=!|,.*\"  represents  <glob>\\\\/$^+.()=!|,.*</glob>\n  // The equivalent regex is:  /^\\\\\\/\\$\\^\\+\\.\\(\\)\\=\\!\\|\\,\\..*$/\n  // Both glob and regex match:  \\/$^+.()=!|,.*\n  var testExtStr = \"\\\\\\\\/$^+.()=!|,.*\";\n  var targetExtStr = \"\\\\/$^+.()=!|,.*\";\n  assertMatch(testExtStr, targetExtStr, { extended: true });\n  assertMatch(testExtStr, targetExtStr, { extended: true,  globstar: globstar, flags: 'g' });\n}\n\n// regression\n// globstar false\ntest(false)\n// globstar true\ntest(true);\n\n// globstar specific tests\nassertMatch(\"/foo/*\", \"/foo/bar.txt\", {globstar: true });\nassertMatch(\"/foo/**\", \"/foo/baz.txt\", {globstar: true });\nassertMatch(\"/foo/**\", \"/foo/bar/baz.txt\", {globstar: true });\nassertMatch(\"/foo/*/*.txt\", \"/foo/bar/baz.txt\", {globstar: true });\nassertMatch(\"/foo/**/*.txt\", \"/foo/bar/baz.txt\", {globstar: true });\nassertMatch(\"/foo/**/*.txt\", \"/foo/bar/baz/qux.txt\", {globstar: true });\nassertMatch(\"/foo/**/bar.txt\", \"/foo/bar.txt\", {globstar: true });\nassertMatch(\"/foo/**/**/bar.txt\", \"/foo/bar.txt\", {globstar: true });\nassertMatch(\"/foo/**/*/baz.txt\", \"/foo/bar/baz.txt\", {globstar: true });\nassertMatch(\"/foo/**/*.txt\", \"/foo/bar.txt\", {globstar: true });\nassertMatch(\"/foo/**/**/*.txt\", \"/foo/bar.txt\", {globstar: true });\nassertMatch(\"/foo/**/*/*.txt\", \"/foo/bar/baz.txt\", {globstar: true });\nassertMatch(\"**/*.txt\", \"/foo/bar/baz/qux.txt\", {globstar: true });\nassertMatch(\"**/foo.txt\", \"foo.txt\", {globstar: true });\nassertMatch(\"**/*.txt\", \"foo.txt\", {globstar: true });\n\nassertNotMatch(\"/foo/*\", \"/foo/bar/baz.txt\", {globstar: true });\nassertNotMatch(\"/foo/*.txt\", \"/foo/bar/baz.txt\", {globstar: true });\nassertNotMatch(\"/foo/*/*.txt\", \"/foo/bar/baz/qux.txt\", {globstar: true });\nassertNotMatch(\"/foo/*/bar.txt\", \"/foo/bar.txt\", {globstar: true });\nassertNotMatch(\"/foo/*/*/baz.txt\", \"/foo/bar/baz.txt\", {globstar: true });\nassertNotMatch(\"/foo/**.txt\", \"/foo/bar/baz/qux.txt\", {globstar: true });\nassertNotMatch(\"/foo/bar**/*.txt\", \"/foo/bar/baz/qux.txt\", {globstar: true });\nassertNotMatch(\"/foo/bar**\", \"/foo/bar/baz.txt\", {globstar: true });\nassertNotMatch(\"**/.txt\", \"/foo/bar/baz/qux.txt\", {globstar: true });\nassertNotMatch(\"*/*.txt\", \"/foo/bar/baz/qux.txt\", {globstar: true });\nassertNotMatch(\"*/*.txt\", \"foo.txt\", {globstar: true });\n\nassertNotMatch(\"http://foo.com/*\",\n               \"http://foo.com/bar/baz/jquery.min.js\",\n               { extended: true,  globstar: true });\nassertNotMatch(\"http://foo.com/*\",\n               \"http://foo.com/bar/baz/jquery.min.js\",\n               { globstar: true });\n\nassertMatch(\"http://foo.com/*\",\n            \"http://foo.com/bar/baz/jquery.min.js\",\n            { globstar: false });\nassertMatch(\"http://foo.com/**\",\n            \"http://foo.com/bar/baz/jquery.min.js\",\n            { globstar: true });\n\nassertMatch(\"http://foo.com/*/*/jquery.min.js\",\n            \"http://foo.com/bar/baz/jquery.min.js\",\n            { globstar: true });\nassertMatch(\"http://foo.com/**/jquery.min.js\",\n            \"http://foo.com/bar/baz/jquery.min.js\",\n            { globstar: true });\nassertMatch(\"http://foo.com/*/*/jquery.min.js\",\n            \"http://foo.com/bar/baz/jquery.min.js\",\n            { globstar: false });\nassertMatch(\"http://foo.com/*/jquery.min.js\",\n            \"http://foo.com/bar/baz/jquery.min.js\",\n            { globstar: false });\nassertNotMatch(\"http://foo.com/*/jquery.min.js\",\n               \"http://foo.com/bar/baz/jquery.min.js\",\n               { globstar: true });\n\nconsole.log(\"Ok!\");\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}