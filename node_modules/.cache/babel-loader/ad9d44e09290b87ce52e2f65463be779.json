{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst compare_1 = require(\"./compare\");\n\nconst range_tree_1 = require(\"./range-tree\");\n/**\n * Normalizes a process coverage.\n *\n * Sorts the scripts alphabetically by `url`.\n * Reassigns script ids: the script at index `0` receives `\"0\"`, the script at\n * index `1` receives `\"1\"` etc.\n * This does not normalize the script coverages.\n *\n * @param processCov Process coverage to normalize.\n */\n\n\nfunction normalizeProcessCov(processCov) {\n  processCov.result.sort(compare_1.compareScriptCovs);\n\n  for (const [scriptId, scriptCov] of processCov.result.entries()) {\n    scriptCov.scriptId = scriptId.toString(10);\n  }\n}\n\nexports.normalizeProcessCov = normalizeProcessCov;\n/**\n * Normalizes a process coverage deeply.\n *\n * Normalizes the script coverages deeply, then normalizes the process coverage\n * itself.\n *\n * @param processCov Process coverage to normalize.\n */\n\nfunction deepNormalizeProcessCov(processCov) {\n  for (const scriptCov of processCov.result) {\n    deepNormalizeScriptCov(scriptCov);\n  }\n\n  normalizeProcessCov(processCov);\n}\n\nexports.deepNormalizeProcessCov = deepNormalizeProcessCov;\n/**\n * Normalizes a script coverage.\n *\n * Sorts the function by root range (pre-order sort).\n * This does not normalize the function coverages.\n *\n * @param scriptCov Script coverage to normalize.\n */\n\nfunction normalizeScriptCov(scriptCov) {\n  scriptCov.functions.sort(compare_1.compareFunctionCovs);\n}\n\nexports.normalizeScriptCov = normalizeScriptCov;\n/**\n * Normalizes a script coverage deeply.\n *\n * Normalizes the function coverages deeply, then normalizes the script coverage\n * itself.\n *\n * @param scriptCov Script coverage to normalize.\n */\n\nfunction deepNormalizeScriptCov(scriptCov) {\n  for (const funcCov of scriptCov.functions) {\n    normalizeFunctionCov(funcCov);\n  }\n\n  normalizeScriptCov(scriptCov);\n}\n\nexports.deepNormalizeScriptCov = deepNormalizeScriptCov;\n/**\n * Normalizes a function coverage.\n *\n * Sorts the ranges (pre-order sort).\n * TODO: Tree-based normalization of the ranges.\n *\n * @param funcCov Function coverage to normalize.\n */\n\nfunction normalizeFunctionCov(funcCov) {\n  funcCov.ranges.sort(compare_1.compareRangeCovs);\n  const tree = range_tree_1.RangeTree.fromSortedRanges(funcCov.ranges);\n  normalizeRangeTree(tree);\n  funcCov.ranges = tree.toRanges();\n}\n\nexports.normalizeFunctionCov = normalizeFunctionCov;\n/**\n * @internal\n */\n\nfunction normalizeRangeTree(tree) {\n  tree.normalize();\n}\n\nexports.normalizeRangeTree = normalizeRangeTree;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;AAGA;;;;;;;;;;;;AAUA,SAAgBA,mBAAhB,CAAoCC,UAApC,EAA0D;EACxDA,UAAU,CAACC,MAAX,CAAkBC,IAAlB,CAAuBC,2BAAvB;;EACA,KAAK,MAAM,CAACC,QAAD,EAAWC,SAAX,CAAX,IAAoCL,UAAU,CAACC,MAAX,CAAkBK,OAAlB,EAApC,EAAiE;IAC/DD,SAAS,CAACD,QAAV,GAAqBA,QAAQ,CAACG,QAAT,CAAkB,EAAlB,CAArB;EACD;AACF;;AALDC;AAOA;;;;;;;;;AAQA,SAAgBC,uBAAhB,CAAwCT,UAAxC,EAA8D;EAC5D,KAAK,MAAMK,SAAX,IAAwBL,UAAU,CAACC,MAAnC,EAA2C;IACzCS,sBAAsB,CAACL,SAAD,CAAtB;EACD;;EACDN,mBAAmB,CAACC,UAAD,CAAnB;AACD;;AALDQ;AAOA;;;;;;;;;AAQA,SAAgBG,kBAAhB,CAAmCN,SAAnC,EAAuD;EACrDA,SAAS,CAACO,SAAV,CAAoBV,IAApB,CAAyBC,6BAAzB;AACD;;AAFDK;AAIA;;;;;;;;;AAQA,SAAgBE,sBAAhB,CAAuCL,SAAvC,EAA2D;EACzD,KAAK,MAAMQ,OAAX,IAAsBR,SAAS,CAACO,SAAhC,EAA2C;IACzCE,oBAAoB,CAACD,OAAD,CAApB;EACD;;EACDF,kBAAkB,CAACN,SAAD,CAAlB;AACD;;AALDG;AAOA;;;;;;;;;AAQA,SAAgBM,oBAAhB,CAAqCD,OAArC,EAAyD;EACvDA,OAAO,CAACE,MAAR,CAAeb,IAAf,CAAoBC,0BAApB;EACA,MAAMa,IAAI,GAAcC,uBAAUC,gBAAV,CAA2BL,OAAO,CAACE,MAAnC,CAAxB;EACAI,kBAAkB,CAACH,IAAD,CAAlB;EACAH,OAAO,CAACE,MAAR,GAAiBC,IAAI,CAACI,QAAL,EAAjB;AACD;;AALDZ;AAOA;;;;AAGA,SAAgBW,kBAAhB,CAAmCH,IAAnC,EAAkD;EAChDA,IAAI,CAACK,SAAL;AACD;;AAFDb","names":["normalizeProcessCov","processCov","result","sort","compare_1","scriptId","scriptCov","entries","toString","exports","deepNormalizeProcessCov","deepNormalizeScriptCov","normalizeScriptCov","functions","funcCov","normalizeFunctionCov","ranges","tree","range_tree_1","fromSortedRanges","normalizeRangeTree","toRanges","normalize"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\_src\\normalize.ts"],"sourcesContent":["import { compareFunctionCovs, compareRangeCovs, compareScriptCovs } from \"./compare\";\nimport { RangeTree } from \"./range-tree\";\nimport { FunctionCov, ProcessCov, ScriptCov } from \"./types\";\n\n/**\n * Normalizes a process coverage.\n *\n * Sorts the scripts alphabetically by `url`.\n * Reassigns script ids: the script at index `0` receives `\"0\"`, the script at\n * index `1` receives `\"1\"` etc.\n * This does not normalize the script coverages.\n *\n * @param processCov Process coverage to normalize.\n */\nexport function normalizeProcessCov(processCov: ProcessCov): void {\n  processCov.result.sort(compareScriptCovs);\n  for (const [scriptId, scriptCov] of processCov.result.entries()) {\n    scriptCov.scriptId = scriptId.toString(10);\n  }\n}\n\n/**\n * Normalizes a process coverage deeply.\n *\n * Normalizes the script coverages deeply, then normalizes the process coverage\n * itself.\n *\n * @param processCov Process coverage to normalize.\n */\nexport function deepNormalizeProcessCov(processCov: ProcessCov): void {\n  for (const scriptCov of processCov.result) {\n    deepNormalizeScriptCov(scriptCov);\n  }\n  normalizeProcessCov(processCov);\n}\n\n/**\n * Normalizes a script coverage.\n *\n * Sorts the function by root range (pre-order sort).\n * This does not normalize the function coverages.\n *\n * @param scriptCov Script coverage to normalize.\n */\nexport function normalizeScriptCov(scriptCov: ScriptCov): void {\n  scriptCov.functions.sort(compareFunctionCovs);\n}\n\n/**\n * Normalizes a script coverage deeply.\n *\n * Normalizes the function coverages deeply, then normalizes the script coverage\n * itself.\n *\n * @param scriptCov Script coverage to normalize.\n */\nexport function deepNormalizeScriptCov(scriptCov: ScriptCov): void {\n  for (const funcCov of scriptCov.functions) {\n    normalizeFunctionCov(funcCov);\n  }\n  normalizeScriptCov(scriptCov);\n}\n\n/**\n * Normalizes a function coverage.\n *\n * Sorts the ranges (pre-order sort).\n * TODO: Tree-based normalization of the ranges.\n *\n * @param funcCov Function coverage to normalize.\n */\nexport function normalizeFunctionCov(funcCov: FunctionCov): void {\n  funcCov.ranges.sort(compareRangeCovs);\n  const tree: RangeTree = RangeTree.fromSortedRanges(funcCov.ranges)!;\n  normalizeRangeTree(tree);\n  funcCov.ranges = tree.toRanges();\n}\n\n/**\n * @internal\n */\nexport function normalizeRangeTree(tree: RangeTree): void {\n  tree.normalize();\n}\n"]},"metadata":{},"sourceType":"script"}