{"ast":null,"code":"'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst mappings = require('./lib/map');\n/**\n * @param {unknown} item\n * @param {number} index\n * @return {boolean}\n */\n\n\nfunction evenValues(item, index) {\n  return index % 2 === 0;\n}\n\nconst repeatKeywords = new Set(mappings.values());\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\n\nfunction isCommaNode(node) {\n  return node.type === 'div' && node.value === ',';\n}\n\nconst variableFunctions = new Set(['var', 'env', 'constant']);\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\n\nfunction isVariableFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return variableFunctions.has(node.value.toLowerCase());\n}\n/**\n * @param {string} value\n * @return {string}\n */\n\n\nfunction transform(value) {\n  const parsed = valueParser(value);\n\n  if (parsed.nodes.length === 1) {\n    return value;\n  }\n  /** @type {{start: number?, end: number?}[]} */\n\n\n  const ranges = [];\n  let rangeIndex = 0;\n  let shouldContinue = true;\n  parsed.nodes.forEach((node, index) => {\n    // After comma (`,`) follows next background\n    if (isCommaNode(node)) {\n      rangeIndex += 1;\n      shouldContinue = true;\n      return;\n    }\n\n    if (!shouldContinue) {\n      return;\n    } // After separator (`/`) follows `background-size` values\n    // Avoid them\n\n\n    if (node.type === 'div' && node.value === '/') {\n      shouldContinue = false;\n      return;\n    }\n\n    if (!ranges[rangeIndex]) {\n      ranges[rangeIndex] = {\n        start: null,\n        end: null\n      };\n    } // Do not try to be processed `var and `env` function inside background\n\n\n    if (isVariableFunctionNode(node)) {\n      shouldContinue = false;\n      ranges[rangeIndex].start = null;\n      ranges[rangeIndex].end = null;\n      return;\n    }\n\n    const isRepeatKeyword = node.type === 'word' && repeatKeywords.has(node.value.toLowerCase());\n\n    if (ranges[rangeIndex].start === null && isRepeatKeyword) {\n      ranges[rangeIndex].start = index;\n      ranges[rangeIndex].end = index;\n      return;\n    }\n\n    if (ranges[rangeIndex].start !== null) {\n      if (node.type === 'space') {\n        return;\n      } else if (isRepeatKeyword) {\n        ranges[rangeIndex].end = index;\n        return;\n      }\n\n      return;\n    }\n  });\n  ranges.forEach(range => {\n    if (range.start === null) {\n      return;\n    }\n\n    const nodes = parsed.nodes.slice(range.start,\n    /** @type {number} */\n    range.end + 1);\n\n    if (nodes.length !== 3) {\n      return;\n    }\n\n    const key = nodes.filter(evenValues).map(n => n.value.toLowerCase()).toString();\n    const match = mappings.get(key);\n\n    if (match) {\n      nodes[0].value = match;\n      nodes[1].value = nodes[2].value = '';\n    }\n  });\n  return parsed.toString();\n}\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\n\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-repeat-style',\n\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(/^(background(-repeat)?|(-\\w+-)?mask-repeat)$/i, decl => {\n            const value = decl.value;\n\n            if (!value) {\n              return;\n            }\n\n            if (cache.has(value)) {\n              decl.value = cache.get(value);\n              return;\n            }\n\n            const result = transform(value);\n            decl.value = result;\n            cache.set(value, result);\n          });\n        }\n\n      };\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"names":["valueParser","require","mappings","evenValues","item","index","repeatKeywords","Set","values","isCommaNode","node","type","value","variableFunctions","isVariableFunctionNode","has","toLowerCase","transform","parsed","nodes","length","ranges","rangeIndex","shouldContinue","forEach","start","end","isRepeatKeyword","range","slice","key","filter","map","n","toString","match","get","pluginCreator","postcssPlugin","prepare","cache","Map","OnceExit","css","walkDecls","decl","result","set","postcss","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-normalize-repeat-style/src/index.js"],"sourcesContent":["'use strict';\nconst valueParser = require('postcss-value-parser');\nconst mappings = require('./lib/map');\n\n/**\n * @param {unknown} item\n * @param {number} index\n * @return {boolean}\n */\nfunction evenValues(item, index) {\n  return index % 2 === 0;\n}\n\nconst repeatKeywords = new Set(mappings.values());\n\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isCommaNode(node) {\n  return node.type === 'div' && node.value === ',';\n}\n\nconst variableFunctions = new Set(['var', 'env', 'constant']);\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isVariableFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return variableFunctions.has(node.value.toLowerCase());\n}\n\n/**\n * @param {string} value\n * @return {string}\n */\nfunction transform(value) {\n  const parsed = valueParser(value);\n\n  if (parsed.nodes.length === 1) {\n    return value;\n  }\n  /** @type {{start: number?, end: number?}[]} */\n  const ranges = [];\n  let rangeIndex = 0;\n  let shouldContinue = true;\n\n  parsed.nodes.forEach((node, index) => {\n    // After comma (`,`) follows next background\n    if (isCommaNode(node)) {\n      rangeIndex += 1;\n      shouldContinue = true;\n\n      return;\n    }\n\n    if (!shouldContinue) {\n      return;\n    }\n\n    // After separator (`/`) follows `background-size` values\n    // Avoid them\n    if (node.type === 'div' && node.value === '/') {\n      shouldContinue = false;\n\n      return;\n    }\n\n    if (!ranges[rangeIndex]) {\n      ranges[rangeIndex] = {\n        start: null,\n        end: null,\n      };\n    }\n\n    // Do not try to be processed `var and `env` function inside background\n    if (isVariableFunctionNode(node)) {\n      shouldContinue = false;\n      ranges[rangeIndex].start = null;\n      ranges[rangeIndex].end = null;\n\n      return;\n    }\n\n    const isRepeatKeyword =\n      node.type === 'word' && repeatKeywords.has(node.value.toLowerCase());\n\n    if (ranges[rangeIndex].start === null && isRepeatKeyword) {\n      ranges[rangeIndex].start = index;\n      ranges[rangeIndex].end = index;\n\n      return;\n    }\n\n    if (ranges[rangeIndex].start !== null) {\n      if (node.type === 'space') {\n        return;\n      } else if (isRepeatKeyword) {\n        ranges[rangeIndex].end = index;\n\n        return;\n      }\n\n      return;\n    }\n  });\n\n  ranges.forEach((range) => {\n    if (range.start === null) {\n      return;\n    }\n\n    const nodes = parsed.nodes.slice(\n      range.start,\n      /** @type {number} */ (range.end) + 1\n    );\n\n    if (nodes.length !== 3) {\n      return;\n    }\n    const key = nodes\n      .filter(evenValues)\n      .map((n) => n.value.toLowerCase())\n      .toString();\n\n    const match = mappings.get(key);\n\n    if (match) {\n      nodes[0].value = match;\n      nodes[1].value = nodes[2].value = '';\n    }\n  });\n\n  return parsed.toString();\n}\n\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-repeat-style',\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(\n            /^(background(-repeat)?|(-\\w+-)?mask-repeat)$/i,\n            (decl) => {\n              const value = decl.value;\n\n              if (!value) {\n                return;\n              }\n\n              if (cache.has(value)) {\n                decl.value = cache.get(value);\n\n                return;\n              }\n\n              const result = transform(value);\n\n              decl.value = result;\n              cache.set(value, result);\n            }\n          );\n        },\n      };\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}