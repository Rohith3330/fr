{"ast":null,"code":"'use strict';\n\nconst isTag = node => {\n  return node.type === 'element';\n};\n\nconst existsOne = (test, elems) => {\n  return elems.some(elem => {\n    if (isTag(elem)) {\n      return test(elem) || existsOne(test, getChildren(elem));\n    } else {\n      return false;\n    }\n  });\n};\n\nconst getAttributeValue = (elem, name) => {\n  return elem.attributes[name];\n};\n\nconst getChildren = node => {\n  return node.children || [];\n};\n\nconst getName = elemAst => {\n  return elemAst.name;\n};\n\nconst getParent = node => {\n  return node.parentNode || null;\n};\n\nconst getSiblings = elem => {\n  var parent = getParent(elem);\n  return parent ? getChildren(parent) : [];\n};\n\nconst getText = node => {\n  if (node.children[0].type === 'text' && node.children[0].type === 'cdata') {\n    return node.children[0].value;\n  }\n\n  return '';\n};\n\nconst hasAttrib = (elem, name) => {\n  return elem.attributes[name] !== undefined;\n};\n\nconst removeSubsets = nodes => {\n  let idx = nodes.length;\n  let node;\n  let ancestor;\n  let replace; // Check if each node (or one of its ancestors) is already contained in the\n  // array.\n\n  while (--idx > -1) {\n    node = ancestor = nodes[idx]; // Temporarily remove the node under consideration\n\n    nodes[idx] = null;\n    replace = true;\n\n    while (ancestor) {\n      if (nodes.includes(ancestor)) {\n        replace = false;\n        nodes.splice(idx, 1);\n        break;\n      }\n\n      ancestor = getParent(ancestor);\n    } // If the node has been found to be unique, re-insert it.\n\n\n    if (replace) {\n      nodes[idx] = node;\n    }\n  }\n\n  return nodes;\n};\n\nconst findAll = (test, elems) => {\n  const result = [];\n\n  for (const elem of elems) {\n    if (isTag(elem)) {\n      if (test(elem)) {\n        result.push(elem);\n      }\n\n      result.push(...findAll(test, getChildren(elem)));\n    }\n  }\n\n  return result;\n};\n\nconst findOne = (test, elems) => {\n  for (const elem of elems) {\n    if (isTag(elem)) {\n      if (test(elem)) {\n        return elem;\n      }\n\n      const result = findOne(test, getChildren(elem));\n\n      if (result) {\n        return result;\n      }\n    }\n  }\n\n  return null;\n};\n\nconst svgoCssSelectAdapter = {\n  isTag,\n  existsOne,\n  getAttributeValue,\n  getChildren,\n  getName,\n  getParent,\n  getSiblings,\n  getText,\n  hasAttrib,\n  removeSubsets,\n  findAll,\n  findOne\n};\nmodule.exports = svgoCssSelectAdapter;","map":{"version":3,"names":["isTag","node","type","existsOne","test","elems","some","elem","getChildren","getAttributeValue","name","attributes","children","getName","elemAst","getParent","parentNode","getSiblings","parent","getText","value","hasAttrib","undefined","removeSubsets","nodes","idx","length","ancestor","replace","includes","splice","findAll","result","push","findOne","svgoCssSelectAdapter","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-svgo/node_modules/svgo/lib/svgo/css-select-adapter.js"],"sourcesContent":["'use strict';\n\nconst isTag = (node) => {\n  return node.type === 'element';\n};\n\nconst existsOne = (test, elems) => {\n  return elems.some((elem) => {\n    if (isTag(elem)) {\n      return test(elem) || existsOne(test, getChildren(elem));\n    } else {\n      return false;\n    }\n  });\n};\n\nconst getAttributeValue = (elem, name) => {\n  return elem.attributes[name];\n};\n\nconst getChildren = (node) => {\n  return node.children || [];\n};\n\nconst getName = (elemAst) => {\n  return elemAst.name;\n};\n\nconst getParent = (node) => {\n  return node.parentNode || null;\n};\n\nconst getSiblings = (elem) => {\n  var parent = getParent(elem);\n  return parent ? getChildren(parent) : [];\n};\n\nconst getText = (node) => {\n  if (node.children[0].type === 'text' && node.children[0].type === 'cdata') {\n    return node.children[0].value;\n  }\n  return '';\n};\n\nconst hasAttrib = (elem, name) => {\n  return elem.attributes[name] !== undefined;\n};\n\nconst removeSubsets = (nodes) => {\n  let idx = nodes.length;\n  let node;\n  let ancestor;\n  let replace;\n  // Check if each node (or one of its ancestors) is already contained in the\n  // array.\n  while (--idx > -1) {\n    node = ancestor = nodes[idx];\n    // Temporarily remove the node under consideration\n    nodes[idx] = null;\n    replace = true;\n    while (ancestor) {\n      if (nodes.includes(ancestor)) {\n        replace = false;\n        nodes.splice(idx, 1);\n        break;\n      }\n      ancestor = getParent(ancestor);\n    }\n    // If the node has been found to be unique, re-insert it.\n    if (replace) {\n      nodes[idx] = node;\n    }\n  }\n  return nodes;\n};\n\nconst findAll = (test, elems) => {\n  const result = [];\n  for (const elem of elems) {\n    if (isTag(elem)) {\n      if (test(elem)) {\n        result.push(elem);\n      }\n      result.push(...findAll(test, getChildren(elem)));\n    }\n  }\n  return result;\n};\n\nconst findOne = (test, elems) => {\n  for (const elem of elems) {\n    if (isTag(elem)) {\n      if (test(elem)) {\n        return elem;\n      }\n      const result = findOne(test, getChildren(elem));\n      if (result) {\n        return result;\n      }\n    }\n  }\n  return null;\n};\n\nconst svgoCssSelectAdapter = {\n  isTag,\n  existsOne,\n  getAttributeValue,\n  getChildren,\n  getName,\n  getParent,\n  getSiblings,\n  getText,\n  hasAttrib,\n  removeSubsets,\n  findAll,\n  findOne,\n};\n\nmodule.exports = svgoCssSelectAdapter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}