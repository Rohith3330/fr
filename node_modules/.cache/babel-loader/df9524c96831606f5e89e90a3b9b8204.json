{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar match_path_sync_1 = require(\"../match-path-sync\");\n\nvar Tests = require(\"./data/match-path-data\");\n\ndescribe(\"match-path-sync\", function () {\n  Tests.tests.forEach(function (t) {\n    return it(t.name, function () {\n      var matchPath = (0, match_path_sync_1.createMatchPath)(t.absoluteBaseUrl, t.paths, t.mainFields, t.addMatchAll);\n      var result = matchPath(t.requestedModule, function (_) {\n        return t.packageJson;\n      }, function (name) {\n        return t.existingFiles.indexOf(name) !== -1;\n      }, t.extensions); // assert.equal(result, t.expectedPath);\n\n      expect(result).toBe(t.expectedPath);\n    });\n  });\n});","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AAEAA,QAAQ,CAAC,iBAAD,EAAoB;EAC1BC,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoB,UAACC,CAAD,EAAE;IACpB,SAAE,CAACA,CAAC,CAACC,IAAH,EAAS;MACT,IAAMC,SAAS,GAAG,uCAChBF,CAAC,CAACG,eADc,EAEhBH,CAAC,CAACI,KAFc,EAGhBJ,CAAC,CAACK,UAHc,EAIhBL,CAAC,CAACM,WAJc,CAAlB;MAMA,IAAMC,MAAM,GAAGL,SAAS,CACtBF,CAAC,CAACQ,eADoB,EAEtB,UAACC,CAAD,EAAU;QAAK,QAAC,CAACC,WAAF;MAAa,CAFN,EAGtB,UAACT,IAAD,EAAa;QAAK,QAAC,CAACU,aAAF,CAAgBC,OAAhB,CAAwBX,IAAxB,MAAkC,CAAC,CAAnC;MAAoC,CAHhC,EAItBD,CAAC,CAACa,UAJoB,CAAxB,CAPS,CAaT;;MACAC,MAAM,CAACP,MAAD,CAAN,CAAeQ,IAAf,CAAoBf,CAAC,CAACgB,YAAtB;IACD,CAfC,CAAF;EAeE,CAhBJ;AAkBD,CAnBO,CAAR","names":["describe","Tests","tests","forEach","t","name","matchPath","absoluteBaseUrl","paths","mainFields","addMatchAll","result","requestedModule","_","packageJson","existingFiles","indexOf","extensions","expect","toBe","expectedPath"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\tsconfig-paths\\src\\__tests__\\match-path-sync.test.ts"],"sourcesContent":["import { createMatchPath } from \"../match-path-sync\";\nimport * as Tests from \"./data/match-path-data\";\n\ndescribe(\"match-path-sync\", () => {\n  Tests.tests.forEach((t) =>\n    it(t.name, () => {\n      const matchPath = createMatchPath(\n        t.absoluteBaseUrl,\n        t.paths,\n        t.mainFields,\n        t.addMatchAll\n      );\n      const result = matchPath(\n        t.requestedModule,\n        (_: string) => t.packageJson,\n        (name: string) => t.existingFiles.indexOf(name) !== -1,\n        t.extensions\n      );\n      // assert.equal(result, t.expectedPath);\n      expect(result).toBe(t.expectedPath);\n    })\n  );\n});\n"]},"metadata":{},"sourceType":"script"}