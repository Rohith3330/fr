{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst error = {\n  message: \"property name must be valid\",\n  params: _ref => {\n    let {\n      params\n    } = _ref;\n    return (0, codegen_1._)`{propertyName: ${params.propertyName}}`;\n  }\n};\nconst def = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      data,\n      it\n    } = cxt;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    const valid = gen.name(\"valid\");\n    gen.forIn(\"key\", data, key => {\n      cxt.setParams({\n        propertyName: key\n      });\n      cxt.subschema({\n        keyword: \"propertyNames\",\n        data: key,\n        dataTypes: [\"string\"],\n        propertyName: key,\n        compositeRule: true\n      }, valid);\n      gen.if((0, codegen_1.not)(valid), () => {\n        cxt.error(true);\n        if (!it.allErrors) gen.break();\n      });\n    });\n    cxt.ok(valid);\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAOA;;AACA;;AAIA,MAAMA,KAAK,GAA2B;EACpCC,OAAO,EAAE,6BAD2B;EAEpCC,MAAM,EAAE;IAAA,IAAC;MAACA;IAAD,CAAD;IAAA,OAAc,gBAAC,kBAAkBA,MAAM,CAACC,YAAY,GAApD;EAAA;AAF4B,CAAtC;AAKA,MAAMC,GAAG,GAA0B;EACjCC,OAAO,EAAE,eADwB;EAEjCC,IAAI,EAAE,QAF2B;EAGjCC,UAAU,EAAE,CAAC,QAAD,EAAW,SAAX,CAHqB;EAIjCP,KAJiC;;EAKjCQ,IAAI,CAACC,GAAD,EAAgB;IAClB,MAAM;MAACC,GAAD;MAAMC,MAAN;MAAcC,IAAd;MAAoBC;IAApB,IAA0BJ,GAAhC;IACA,IAAI,8BAAkBI,EAAlB,EAAsBF,MAAtB,CAAJ,EAAmC;IACnC,MAAMG,KAAK,GAAGJ,GAAG,CAACK,IAAJ,CAAS,OAAT,CAAd;IAEAL,GAAG,CAACM,KAAJ,CAAU,KAAV,EAAiBJ,IAAjB,EAAwBK,GAAD,IAAQ;MAC7BR,GAAG,CAACS,SAAJ,CAAc;QAACf,YAAY,EAAEc;MAAf,CAAd;MACAR,GAAG,CAACU,SAAJ,CACE;QACEd,OAAO,EAAE,eADX;QAEEO,IAAI,EAAEK,GAFR;QAGEG,SAAS,EAAE,CAAC,QAAD,CAHb;QAIEjB,YAAY,EAAEc,GAJhB;QAKEI,aAAa,EAAE;MALjB,CADF,EAQEP,KARF;MAUAJ,GAAG,CAACY,EAAJ,CAAO,mBAAIR,KAAJ,CAAP,EAAmB,MAAK;QACtBL,GAAG,CAACT,KAAJ,CAAU,IAAV;QACA,IAAI,CAACa,EAAE,CAACU,SAAR,EAAmBb,GAAG,CAACc,KAAJ;MACpB,CAHD;IAID,CAhBD;IAkBAf,GAAG,CAACgB,EAAJ,CAAOX,KAAP;EACD;;AA7BgC,CAAnC;AAgCAY,kBAAetB,GAAf","names":["error","message","params","propertyName","def","keyword","type","schemaType","code","cxt","gen","schema","data","it","valid","name","forIn","key","setParams","subschema","dataTypes","compositeRule","if","allErrors","break","ok","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\vocabularies\\applicator\\propertyNames.ts"],"sourcesContent":["import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, not} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nexport type PropertyNamesError = ErrorObject<\"propertyNames\", {propertyName: string}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: \"property name must be valid\",\n  params: ({params}) => _`{propertyName: ${params.propertyName}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, data, it} = cxt\n    if (alwaysValidSchema(it, schema)) return\n    const valid = gen.name(\"valid\")\n\n    gen.forIn(\"key\", data, (key) => {\n      cxt.setParams({propertyName: key})\n      cxt.subschema(\n        {\n          keyword: \"propertyNames\",\n          data: key,\n          dataTypes: [\"string\"],\n          propertyName: key,\n          compositeRule: true,\n        },\n        valid\n      )\n      gen.if(not(valid), () => {\n        cxt.error(true)\n        if (!it.allErrors) gen.break()\n      })\n    })\n\n    cxt.ok(valid)\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}