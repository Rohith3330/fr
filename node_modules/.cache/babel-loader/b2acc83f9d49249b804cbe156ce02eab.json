{"ast":null,"code":"'use strict';\n\nconst hasAllProps = require('./hasAllProps.js');\n\nconst getDecls = require('./getDecls.js');\n\nconst getRules = require('./getRules.js');\n/**\n * @param {import('postcss').Declaration} propA\n * @param {import('postcss').Declaration} propB\n * @return {boolean}\n */\n\n\nfunction isConflictingProp(propA, propB) {\n  if (!propB.prop || propB.important !== propA.important || propA.prop === propB.prop) {\n    return false;\n  }\n\n  const partsA = propA.prop.split('-');\n  const partsB = propB.prop.split('-');\n  /* Be safe: check that the first part matches. So we don't try to\n   * combine e.g. border-color and color.\n   */\n\n  if (partsA[0] !== partsB[0]) {\n    return false;\n  }\n\n  const partsASet = new Set(partsA);\n  return partsB.every(partB => partsASet.has(partB));\n}\n/**\n * @param {import('postcss').Declaration[]} match\n * @param {import('postcss').Declaration[]} nodes\n * @return {boolean}\n */\n\n\nfunction hasConflicts(match, nodes) {\n  const firstNode = Math.min(...match.map(n => nodes.indexOf(n)));\n  const lastNode = Math.max(...match.map(n => nodes.indexOf(n)));\n  const between = nodes.slice(firstNode + 1, lastNode);\n  return match.some(a => between.some(b => isConflictingProp(a, b)));\n}\n/**\n * @param {import('postcss').Rule} rule\n * @param {string[]} properties\n * @param {(rules: import('postcss').Declaration[], last: import('postcss').Declaration, props: import('postcss').Declaration[]) => boolean} callback\n * @return {void}\n */\n\n\nmodule.exports = function mergeRules(rule, properties, callback) {\n  let decls = getDecls(rule, properties);\n\n  while (decls.length) {\n    const last = decls[decls.length - 1];\n    const props = decls.filter(node => node.important === last.important);\n    const rules = getRules(props, properties);\n\n    if (hasAllProps(rules, ...properties) && !hasConflicts(rules,\n    /** @type import('postcss').Declaration[]*/\n    rule.nodes)) {\n      if (callback(rules, last, props)) {\n        decls = decls.filter(node => !rules.includes(node));\n      }\n    }\n\n    decls = decls.filter(node => node !== last);\n  }\n};","map":{"version":3,"names":["hasAllProps","require","getDecls","getRules","isConflictingProp","propA","propB","prop","important","partsA","split","partsB","partsASet","Set","every","partB","has","hasConflicts","match","nodes","firstNode","Math","min","map","n","indexOf","lastNode","max","between","slice","some","a","b","module","exports","mergeRules","rule","properties","callback","decls","length","last","props","filter","node","rules","includes"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-merge-longhand/src/lib/mergeRules.js"],"sourcesContent":["'use strict';\nconst hasAllProps = require('./hasAllProps.js');\nconst getDecls = require('./getDecls.js');\nconst getRules = require('./getRules.js');\n\n/**\n * @param {import('postcss').Declaration} propA\n * @param {import('postcss').Declaration} propB\n * @return {boolean}\n */\nfunction isConflictingProp(propA, propB) {\n  if (!propB.prop || propB.important !== propA.important ||\n      propA.prop === propB.prop) {\n    return false;\n  }\n\n  const partsA = propA.prop.split('-');\n  const partsB = propB.prop.split('-');\n\n  /* Be safe: check that the first part matches. So we don't try to\n   * combine e.g. border-color and color.\n   */\n  if (partsA[0] !== partsB[0]) {\n    return false;\n  }\n\n  const partsASet = new Set(partsA);\n  return partsB.every((partB) => partsASet.has(partB));\n}\n\n/**\n * @param {import('postcss').Declaration[]} match\n * @param {import('postcss').Declaration[]} nodes\n * @return {boolean}\n */\nfunction hasConflicts(match, nodes) {\n  const firstNode = Math.min(...match.map((n) => nodes.indexOf(n)));\n  const lastNode = Math.max(...match.map((n) => nodes.indexOf(n)));\n  const between = nodes.slice(firstNode + 1, lastNode);\n\n  return match.some((a) => between.some((b) => isConflictingProp(a, b)));\n}\n\n/**\n * @param {import('postcss').Rule} rule\n * @param {string[]} properties\n * @param {(rules: import('postcss').Declaration[], last: import('postcss').Declaration, props: import('postcss').Declaration[]) => boolean} callback\n * @return {void}\n */\nmodule.exports = function mergeRules(rule, properties, callback) {\n  let decls = getDecls(rule, properties);\n\n  while (decls.length) {\n    const last = decls[decls.length - 1];\n    const props = decls.filter((node) => node.important === last.important);\n    const rules = getRules(props, properties);\n\n    if (\n      hasAllProps(rules, ...properties) &&\n      !hasConflicts(\n        rules,\n        /** @type import('postcss').Declaration[]*/ (rule.nodes)\n      )\n    ) {\n      if (callback(rules, last, props)) {\n        decls = decls.filter((node) => !rules.includes(node));\n      }\n    }\n\n    decls = decls.filter((node) => node !== last);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}