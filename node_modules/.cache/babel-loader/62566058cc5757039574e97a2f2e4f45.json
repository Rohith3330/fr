{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nexports.default = util.createRule({\n  name: 'prefer-namespace-keyword',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules',\n      recommended: 'error'\n    },\n    fixable: 'code',\n    messages: {\n      useNamespace: \"Use 'namespace' instead of 'module' to declare custom TypeScript modules.\"\n    },\n    schema: []\n  },\n  defaultOptions: [],\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      TSModuleDeclaration(node) {\n        // Do nothing if the name is a string.\n        if (!node.id || node.id.type === utils_1.AST_NODE_TYPES.Literal) {\n          return;\n        } // Get tokens of the declaration header.\n\n\n        const moduleType = sourceCode.getTokenBefore(node.id);\n\n        if (moduleType && moduleType.type === utils_1.AST_TOKEN_TYPES.Identifier && moduleType.value === 'module') {\n          context.report({\n            node,\n            messageId: 'useNamespace',\n\n            fix(fixer) {\n              return fixer.replaceText(moduleType, 'namespace');\n            }\n\n          });\n        }\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEAA,kBAAeC,IAAI,CAACC,UAAL,CAAgB;EAC7BC,IAAI,EAAE,0BADuB;EAE7BC,IAAI,EAAE;IACJC,IAAI,EAAE,YADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EACT,8FAFE;MAGJC,WAAW,EAAE;IAHT,CAFF;IAOJC,OAAO,EAAE,MAPL;IAQJC,QAAQ,EAAE;MACRC,YAAY,EACV;IAFM,CARN;IAYJC,MAAM,EAAE;EAZJ,CAFuB;EAgB7BC,cAAc,EAAE,EAhBa;;EAiB7BC,MAAM,CAACC,OAAD,EAAQ;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IAEA,OAAO;MACLC,mBAAmB,CAACC,IAAD,EAAK;QACtB;QACA,IAAI,CAACA,IAAI,CAACC,EAAN,IAAYD,IAAI,CAACC,EAAL,CAAQf,IAAR,KAAiBgB,uBAAeC,OAAhD,EAAyD;UACvD;QACD,CAJqB,CAKtB;;;QACA,MAAMC,UAAU,GAAGP,UAAU,CAACQ,cAAX,CAA0BL,IAAI,CAACC,EAA/B,CAAnB;;QAEA,IACEG,UAAU,IACVA,UAAU,CAAClB,IAAX,KAAoBgB,wBAAgBI,UADpC,IAEAF,UAAU,CAACG,KAAX,KAAqB,QAHvB,EAIE;UACAX,OAAO,CAACY,MAAR,CAAe;YACbR,IADa;YAEbS,SAAS,EAAE,cAFE;;YAGbC,GAAG,CAACC,KAAD,EAAM;cACP,OAAOA,KAAK,CAACC,WAAN,CAAkBR,UAAlB,EAA8B,WAA9B,CAAP;YACD;;UALY,CAAf;QAOD;MACF;;IAtBI,CAAP;EAwBD;;AA5C4B,CAAhB,CAAf","names":["exports","util","createRule","name","meta","type","docs","description","recommended","fixable","messages","useNamespace","schema","defaultOptions","create","context","sourceCode","getSourceCode","TSModuleDeclaration","node","id","utils_1","Literal","moduleType","getTokenBefore","Identifier","value","report","messageId","fix","fixer","replaceText"],"sources":["../../src/rules/prefer-namespace-keyword.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}