{"ast":null,"code":"/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst rollup = require(\"rollup\");\n\nconst path = require(\"path\");\n\nconst omt = require(\".\");\n\nconst fs = require(\"fs\");\n\nconst chalk = require(\"chalk\");\n\nconst karma = require(\"karma\");\n\nconst myKarmaConfig = require(\"./karma.conf.js\");\n\nasync function fileExists(file) {\n  try {\n    const stat = await fs.promises.stat(file);\n    return stat.isFile();\n  } catch (e) {\n    return false;\n  }\n}\n\nasync function init() {\n  await Promise.all([\"./tests/fixtures/simple-bundle/entry.js\", \"./tests/fixtures/import-meta/entry.js\", \"./tests/fixtures/dynamic-import/entry.js\", \"./tests/fixtures/public-path/entry.js\", \"./tests/fixtures/worker/entry.js\", \"./tests/fixtures/module-worker/entry.js\", \"./tests/fixtures/more-workers/entry.js\", \"./tests/fixtures/amd-function-name/entry.js\", \"./tests/fixtures/single-default/entry.js\", \"./tests/fixtures/import-worker-url/entry.js\", \"./tests/fixtures/import-meta-worker/entry.js\", \"./tests/fixtures/import-worker-url-custom-scheme/entry.js\", \"./tests/fixtures/assets-in-worker/entry.js\", \"./tests/fixtures/url-import-meta-worker/entry.js\"].map(async input => {\n    const pathName = path.dirname(input);\n    const outputOptions = {\n      dir: path.join(pathName, \"build\"),\n      format: \"amd\"\n    };\n    let rollupConfig = {\n      input,\n      strictDeprecations: true,\n      // Copied / adapted from default `onwarn` in Rollup CLI.\n      onwarn: warning => {\n        console.warn(`⚠️   ${chalk.bold(warning.message)}`);\n\n        if (warning.url) {\n          console.warn(chalk.cyan(warning.url));\n        }\n\n        if (warning.loc) {\n          console.warn(`${warning.loc.file} (${warning.loc.line}:${warning.loc.column})`);\n        }\n\n        if (warning.frame) {\n          console.warn(chalk.dim(warning.frame));\n        }\n\n        console.warn(\"\");\n      }\n    };\n    const rollupConfigPath = \"./\" + path.join(pathName, \"rollup.config.js\");\n    const configPath = \"./\" + path.join(pathName, \"config.json\");\n\n    if (await fileExists(rollupConfigPath)) {\n      require(rollupConfigPath)(rollupConfig, outputOptions, omt);\n    } else if (await fileExists(configPath)) {\n      rollupConfig.plugins = [omt(require(configPath))];\n    } else {\n      rollupConfig.plugins = [omt()];\n    }\n\n    const bundle = await rollup.rollup(rollupConfig);\n    await bundle.write(outputOptions);\n  }));\n  const karmaConfig = {\n    port: 9876\n  };\n  myKarmaConfig({\n    set(config) {\n      Object.assign(karmaConfig, config);\n    }\n\n  });\n  const server = new karma.Server(karmaConfig, code => {\n    console.log(`Karma exited with code ${code}`);\n    process.exit(code);\n  });\n  server.start();\n}\n\ninit();","map":{"version":3,"names":["rollup","require","path","omt","fs","chalk","karma","myKarmaConfig","fileExists","file","stat","promises","isFile","e","init","Promise","all","map","input","pathName","dirname","outputOptions","dir","join","format","rollupConfig","strictDeprecations","onwarn","warning","console","warn","bold","message","url","cyan","loc","line","column","frame","dim","rollupConfigPath","configPath","plugins","bundle","write","karmaConfig","port","set","config","Object","assign","server","Server","code","log","process","exit","start"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@surma/rollup-plugin-off-main-thread/run_tests.js"],"sourcesContent":["/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst rollup = require(\"rollup\");\nconst path = require(\"path\");\nconst omt = require(\".\");\nconst fs = require(\"fs\");\nconst chalk = require(\"chalk\");\n\nconst karma = require(\"karma\");\nconst myKarmaConfig = require(\"./karma.conf.js\");\n\nasync function fileExists(file) {\n  try {\n    const stat = await fs.promises.stat(file);\n    return stat.isFile();\n  } catch (e) {\n    return false;\n  }\n}\n\nasync function init() {\n  await Promise.all(\n    [\n      \"./tests/fixtures/simple-bundle/entry.js\",\n      \"./tests/fixtures/import-meta/entry.js\",\n      \"./tests/fixtures/dynamic-import/entry.js\",\n      \"./tests/fixtures/public-path/entry.js\",\n      \"./tests/fixtures/worker/entry.js\",\n      \"./tests/fixtures/module-worker/entry.js\",\n      \"./tests/fixtures/more-workers/entry.js\",\n      \"./tests/fixtures/amd-function-name/entry.js\",\n      \"./tests/fixtures/single-default/entry.js\",\n      \"./tests/fixtures/import-worker-url/entry.js\",\n      \"./tests/fixtures/import-meta-worker/entry.js\",\n      \"./tests/fixtures/import-worker-url-custom-scheme/entry.js\",\n      \"./tests/fixtures/assets-in-worker/entry.js\",\n      \"./tests/fixtures/url-import-meta-worker/entry.js\"\n    ].map(async input => {\n      const pathName = path.dirname(input);\n      const outputOptions = {\n        dir: path.join(pathName, \"build\"),\n        format: \"amd\"\n      };\n      let rollupConfig = {\n        input,\n        strictDeprecations: true,\n        // Copied / adapted from default `onwarn` in Rollup CLI.\n        onwarn: warning => {\n          console.warn(`⚠️   ${chalk.bold(warning.message)}`);\n\n          if (warning.url) {\n            console.warn(chalk.cyan(warning.url));\n          }\n\n          if (warning.loc) {\n            console.warn(\n              `${warning.loc.file} (${warning.loc.line}:${warning.loc.column})`\n            );\n          }\n\n          if (warning.frame) {\n            console.warn(chalk.dim(warning.frame));\n          }\n\n          console.warn(\"\");\n        }\n      };\n      const rollupConfigPath = \"./\" + path.join(pathName, \"rollup.config.js\");\n      const configPath = \"./\" + path.join(pathName, \"config.json\");\n      if (await fileExists(rollupConfigPath)) {\n        require(rollupConfigPath)(rollupConfig, outputOptions, omt);\n      } else if (await fileExists(configPath)) {\n        rollupConfig.plugins = [omt(require(configPath))];\n      } else {\n        rollupConfig.plugins = [omt()];\n      }\n      const bundle = await rollup.rollup(rollupConfig);\n      await bundle.write(outputOptions);\n    })\n  );\n\n  const karmaConfig = { port: 9876 };\n  myKarmaConfig({\n    set(config) {\n      Object.assign(karmaConfig, config);\n    }\n  });\n  const server = new karma.Server(karmaConfig, code => {\n    console.log(`Karma exited with code ${code}`);\n    process.exit(code);\n  });\n  server.start();\n}\ninit();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}