{"ast":null,"code":"import expect from 'expect';\nimport JSXAttributeMock from '../../../../__mocks__/JSXAttributeMock';\nimport getImplicitRoleForInput from '../../../../src/util/implicitRoles/input';\ndescribe('isAbstractRole', () => {\n  it('works for buttons', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'button')])).toBe('button');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'image')])).toBe('button');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'reset')])).toBe('button');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'submit')])).toBe('button');\n  });\n  it('works for checkboxes', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'checkbox')])).toBe('checkbox');\n  });\n  it('works for radios', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'radio')])).toBe('radio');\n  });\n  it('works for ranges', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'range')])).toBe('slider');\n  });\n  it('works for textboxes', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'email')])).toBe('textbox');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'password')])).toBe('textbox');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'search')])).toBe('textbox');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'tel')])).toBe('textbox');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'url')])).toBe('textbox');\n  });\n  it('works for the default case', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', '')])).toBe('textbox');\n  });\n  it('works for the true case', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', true)])).toBe('textbox');\n  });\n});","map":{"version":3,"names":["expect","JSXAttributeMock","getImplicitRoleForInput","describe","it","toBe"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/implicitRoles/input-test.js"],"sourcesContent":["import expect from 'expect';\nimport JSXAttributeMock from '../../../../__mocks__/JSXAttributeMock';\nimport getImplicitRoleForInput from '../../../../src/util/implicitRoles/input';\n\ndescribe('isAbstractRole', () => {\n  it('works for buttons', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'button')])).toBe('button');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'image')])).toBe('button');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'reset')])).toBe('button');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'submit')])).toBe('button');\n  });\n  it('works for checkboxes', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'checkbox')])).toBe('checkbox');\n  });\n  it('works for radios', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'radio')])).toBe('radio');\n  });\n  it('works for ranges', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'range')])).toBe('slider');\n  });\n  it('works for textboxes', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'email')])).toBe('textbox');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'password')])).toBe('textbox');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'search')])).toBe('textbox');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'tel')])).toBe('textbox');\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', 'url')])).toBe('textbox');\n  });\n  it('works for the default case', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', '')])).toBe('textbox');\n  });\n  it('works for the true case', () => {\n    expect(getImplicitRoleForInput([JSXAttributeMock('type', true)])).toBe('textbox');\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}