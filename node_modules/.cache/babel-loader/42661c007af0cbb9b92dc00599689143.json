{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isExpressionStatement = exports.isExpression = exports.isExportSpecifier = exports.isExportDeclaration = exports.isExportAssignment = exports.isEnumMember = exports.isEnumDeclaration = exports.isEntityNameExpression = exports.isEntityName = exports.isEmptyStatement = exports.isElementAccessExpression = exports.isDoStatement = exports.isDeleteExpression = exports.isDefaultClause = exports.isDecorator = exports.isDebuggerStatement = exports.isComputedPropertyName = exports.isContinueStatement = exports.isConstructSignatureDeclaration = exports.isConstructorTypeNode = exports.isConstructorDeclaration = exports.isConditionalTypeNode = exports.isConditionalExpression = exports.isCommaListExpression = exports.isClassLikeDeclaration = exports.isClassExpression = exports.isClassDeclaration = exports.isCatchClause = exports.isCaseOrDefaultClause = exports.isCaseClause = exports.isCaseBlock = exports.isCallSignatureDeclaration = exports.isCallLikeExpression = exports.isCallExpression = exports.isBreakStatement = exports.isBreakOrContinueStatement = exports.isBooleanLiteral = exports.isBlockLike = exports.isBlock = exports.isBindingPattern = exports.isBindingElement = exports.isBinaryExpression = exports.isAwaitExpression = exports.isAssertionExpression = exports.isAsExpression = exports.isArrowFunction = exports.isArrayTypeNode = exports.isArrayLiteralExpression = exports.isArrayBindingPattern = exports.isAccessorDeclaration = void 0;\nexports.isNamespaceImport = exports.isNamespaceDeclaration = exports.isNamedImports = exports.isNamedExports = exports.isModuleDeclaration = exports.isModuleBlock = exports.isMethodSignature = exports.isMethodDeclaration = exports.isMetaProperty = exports.isMappedTypeNode = exports.isLiteralTypeNode = exports.isLiteralExpression = exports.isLabeledStatement = exports.isJsxText = exports.isJsxSpreadAttribute = exports.isJsxSelfClosingElement = exports.isJsxOpeningLikeElement = exports.isJsxOpeningFragment = exports.isJsxOpeningElement = exports.isJsxFragment = exports.isJsxExpression = exports.isJsxElement = exports.isJsxClosingFragment = exports.isJsxClosingElement = exports.isJsxAttributes = exports.isJsxAttributeLike = exports.isJsxAttribute = exports.isJsDoc = exports.isIterationStatement = exports.isIntersectionTypeNode = exports.isInterfaceDeclaration = exports.isInferTypeNode = exports.isIndexSignatureDeclaration = exports.isIndexedAccessTypeNode = exports.isImportSpecifier = exports.isImportEqualsDeclaration = exports.isImportDeclaration = exports.isImportClause = exports.isIfStatement = exports.isIdentifier = exports.isGetAccessorDeclaration = exports.isFunctionTypeNode = exports.isFunctionExpression = exports.isFunctionDeclaration = exports.isForStatement = exports.isForOfStatement = exports.isForInOrOfStatement = exports.isForInStatement = exports.isExternalModuleReference = exports.isExpressionWithTypeArguments = void 0;\nexports.isVariableStatement = exports.isVariableDeclaration = exports.isUnionTypeNode = exports.isTypeQueryNode = exports.isTypeReferenceNode = exports.isTypePredicateNode = exports.isTypeParameterDeclaration = exports.isTypeOperatorNode = exports.isTypeOfExpression = exports.isTypeLiteralNode = exports.isTypeAssertion = exports.isTypeAliasDeclaration = exports.isTupleTypeNode = exports.isTryStatement = exports.isThrowStatement = exports.isTextualLiteral = exports.isTemplateLiteral = exports.isTemplateExpression = exports.isTaggedTemplateExpression = exports.isSyntaxList = exports.isSwitchStatement = exports.isStringLiteral = exports.isSpreadElement = exports.isSpreadAssignment = exports.isSourceFile = exports.isSignatureDeclaration = exports.isShorthandPropertyAssignment = exports.isSetAccessorDeclaration = exports.isReturnStatement = exports.isRegularExpressionLiteral = exports.isQualifiedName = exports.isPropertySignature = exports.isPropertyDeclaration = exports.isPropertyAssignment = exports.isPropertyAccessExpression = exports.isPrefixUnaryExpression = exports.isPostfixUnaryExpression = exports.isParenthesizedTypeNode = exports.isParenthesizedExpression = exports.isParameterDeclaration = exports.isOmittedExpression = exports.isObjectLiteralExpression = exports.isObjectBindingPattern = exports.isNumericOrStringLikeLiteral = exports.isNumericLiteral = exports.isNullLiteral = exports.isNoSubstitutionTemplateLiteral = exports.isNonNullExpression = exports.isNewExpression = exports.isNamespaceExportDeclaration = void 0;\nexports.isWithStatement = exports.isWhileStatement = exports.isVoidExpression = exports.isVariableDeclarationList = void 0;\n\nconst ts = require(\"typescript\");\n\nfunction isAccessorDeclaration(node) {\n  return node.kind === ts.SyntaxKind.GetAccessor || node.kind === ts.SyntaxKind.SetAccessor;\n}\n\nexports.isAccessorDeclaration = isAccessorDeclaration;\n\nfunction isArrayBindingPattern(node) {\n  return node.kind === ts.SyntaxKind.ArrayBindingPattern;\n}\n\nexports.isArrayBindingPattern = isArrayBindingPattern;\n\nfunction isArrayLiteralExpression(node) {\n  return node.kind === ts.SyntaxKind.ArrayLiteralExpression;\n}\n\nexports.isArrayLiteralExpression = isArrayLiteralExpression;\n\nfunction isArrayTypeNode(node) {\n  return node.kind === ts.SyntaxKind.ArrayType;\n}\n\nexports.isArrayTypeNode = isArrayTypeNode;\n\nfunction isArrowFunction(node) {\n  return node.kind === ts.SyntaxKind.ArrowFunction;\n}\n\nexports.isArrowFunction = isArrowFunction;\n\nfunction isAsExpression(node) {\n  return node.kind === ts.SyntaxKind.AsExpression;\n}\n\nexports.isAsExpression = isAsExpression;\n\nfunction isAssertionExpression(node) {\n  return node.kind === ts.SyntaxKind.AsExpression || node.kind === ts.SyntaxKind.TypeAssertionExpression;\n}\n\nexports.isAssertionExpression = isAssertionExpression;\n\nfunction isAwaitExpression(node) {\n  return node.kind === ts.SyntaxKind.AwaitExpression;\n}\n\nexports.isAwaitExpression = isAwaitExpression;\n\nfunction isBinaryExpression(node) {\n  return node.kind === ts.SyntaxKind.BinaryExpression;\n}\n\nexports.isBinaryExpression = isBinaryExpression;\n\nfunction isBindingElement(node) {\n  return node.kind === ts.SyntaxKind.BindingElement;\n}\n\nexports.isBindingElement = isBindingElement;\n\nfunction isBindingPattern(node) {\n  return node.kind === ts.SyntaxKind.ArrayBindingPattern || node.kind === ts.SyntaxKind.ObjectBindingPattern;\n}\n\nexports.isBindingPattern = isBindingPattern;\n\nfunction isBlock(node) {\n  return node.kind === ts.SyntaxKind.Block;\n}\n\nexports.isBlock = isBlock;\n\nfunction isBlockLike(node) {\n  return node.statements !== undefined;\n}\n\nexports.isBlockLike = isBlockLike;\n\nfunction isBooleanLiteral(node) {\n  return node.kind === ts.SyntaxKind.TrueKeyword || node.kind === ts.SyntaxKind.FalseKeyword;\n}\n\nexports.isBooleanLiteral = isBooleanLiteral;\n\nfunction isBreakOrContinueStatement(node) {\n  return node.kind === ts.SyntaxKind.BreakStatement || node.kind === ts.SyntaxKind.ContinueStatement;\n}\n\nexports.isBreakOrContinueStatement = isBreakOrContinueStatement;\n\nfunction isBreakStatement(node) {\n  return node.kind === ts.SyntaxKind.BreakStatement;\n}\n\nexports.isBreakStatement = isBreakStatement;\n\nfunction isCallExpression(node) {\n  return node.kind === ts.SyntaxKind.CallExpression;\n}\n\nexports.isCallExpression = isCallExpression;\n\nfunction isCallLikeExpression(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.CallExpression:\n    case ts.SyntaxKind.Decorator:\n    case ts.SyntaxKind.JsxOpeningElement:\n    case ts.SyntaxKind.JsxSelfClosingElement:\n    case ts.SyntaxKind.NewExpression:\n    case ts.SyntaxKind.TaggedTemplateExpression:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexports.isCallLikeExpression = isCallLikeExpression;\n\nfunction isCallSignatureDeclaration(node) {\n  return node.kind === ts.SyntaxKind.CallSignature;\n}\n\nexports.isCallSignatureDeclaration = isCallSignatureDeclaration;\n\nfunction isCaseBlock(node) {\n  return node.kind === ts.SyntaxKind.CaseBlock;\n}\n\nexports.isCaseBlock = isCaseBlock;\n\nfunction isCaseClause(node) {\n  return node.kind === ts.SyntaxKind.CaseClause;\n}\n\nexports.isCaseClause = isCaseClause;\n\nfunction isCaseOrDefaultClause(node) {\n  return node.kind === ts.SyntaxKind.CaseClause || node.kind === ts.SyntaxKind.DefaultClause;\n}\n\nexports.isCaseOrDefaultClause = isCaseOrDefaultClause;\n\nfunction isCatchClause(node) {\n  return node.kind === ts.SyntaxKind.CatchClause;\n}\n\nexports.isCatchClause = isCatchClause;\n\nfunction isClassDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ClassDeclaration;\n}\n\nexports.isClassDeclaration = isClassDeclaration;\n\nfunction isClassExpression(node) {\n  return node.kind === ts.SyntaxKind.ClassExpression;\n}\n\nexports.isClassExpression = isClassExpression;\n\nfunction isClassLikeDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ClassDeclaration || node.kind === ts.SyntaxKind.ClassExpression;\n}\n\nexports.isClassLikeDeclaration = isClassLikeDeclaration;\n\nfunction isCommaListExpression(node) {\n  return node.kind === ts.SyntaxKind.CommaListExpression;\n}\n\nexports.isCommaListExpression = isCommaListExpression;\n\nfunction isConditionalExpression(node) {\n  return node.kind === ts.SyntaxKind.ConditionalExpression;\n}\n\nexports.isConditionalExpression = isConditionalExpression;\n\nfunction isConditionalTypeNode(node) {\n  return node.kind === ts.SyntaxKind.ConditionalType;\n}\n\nexports.isConditionalTypeNode = isConditionalTypeNode;\n\nfunction isConstructorDeclaration(node) {\n  return node.kind === ts.SyntaxKind.Constructor;\n}\n\nexports.isConstructorDeclaration = isConstructorDeclaration;\n\nfunction isConstructorTypeNode(node) {\n  return node.kind === ts.SyntaxKind.ConstructorType;\n}\n\nexports.isConstructorTypeNode = isConstructorTypeNode;\n\nfunction isConstructSignatureDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ConstructSignature;\n}\n\nexports.isConstructSignatureDeclaration = isConstructSignatureDeclaration;\n\nfunction isContinueStatement(node) {\n  return node.kind === ts.SyntaxKind.ContinueStatement;\n}\n\nexports.isContinueStatement = isContinueStatement;\n\nfunction isComputedPropertyName(node) {\n  return node.kind === ts.SyntaxKind.ComputedPropertyName;\n}\n\nexports.isComputedPropertyName = isComputedPropertyName;\n\nfunction isDebuggerStatement(node) {\n  return node.kind === ts.SyntaxKind.DebuggerStatement;\n}\n\nexports.isDebuggerStatement = isDebuggerStatement;\n\nfunction isDecorator(node) {\n  return node.kind === ts.SyntaxKind.Decorator;\n}\n\nexports.isDecorator = isDecorator;\n\nfunction isDefaultClause(node) {\n  return node.kind === ts.SyntaxKind.DefaultClause;\n}\n\nexports.isDefaultClause = isDefaultClause;\n\nfunction isDeleteExpression(node) {\n  return node.kind === ts.SyntaxKind.DeleteExpression;\n}\n\nexports.isDeleteExpression = isDeleteExpression;\n\nfunction isDoStatement(node) {\n  return node.kind === ts.SyntaxKind.DoStatement;\n}\n\nexports.isDoStatement = isDoStatement;\n\nfunction isElementAccessExpression(node) {\n  return node.kind === ts.SyntaxKind.ElementAccessExpression;\n}\n\nexports.isElementAccessExpression = isElementAccessExpression;\n\nfunction isEmptyStatement(node) {\n  return node.kind === ts.SyntaxKind.EmptyStatement;\n}\n\nexports.isEmptyStatement = isEmptyStatement;\n\nfunction isEntityName(node) {\n  return node.kind === ts.SyntaxKind.Identifier || isQualifiedName(node);\n}\n\nexports.isEntityName = isEntityName;\n\nfunction isEntityNameExpression(node) {\n  return node.kind === ts.SyntaxKind.Identifier || isPropertyAccessExpression(node) && isEntityNameExpression(node.expression);\n}\n\nexports.isEntityNameExpression = isEntityNameExpression;\n\nfunction isEnumDeclaration(node) {\n  return node.kind === ts.SyntaxKind.EnumDeclaration;\n}\n\nexports.isEnumDeclaration = isEnumDeclaration;\n\nfunction isEnumMember(node) {\n  return node.kind === ts.SyntaxKind.EnumMember;\n}\n\nexports.isEnumMember = isEnumMember;\n\nfunction isExportAssignment(node) {\n  return node.kind === ts.SyntaxKind.ExportAssignment;\n}\n\nexports.isExportAssignment = isExportAssignment;\n\nfunction isExportDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ExportDeclaration;\n}\n\nexports.isExportDeclaration = isExportDeclaration;\n\nfunction isExportSpecifier(node) {\n  return node.kind === ts.SyntaxKind.ExportSpecifier;\n}\n\nexports.isExportSpecifier = isExportSpecifier;\n\nfunction isExpression(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.ArrayLiteralExpression:\n    case ts.SyntaxKind.ArrowFunction:\n    case ts.SyntaxKind.AsExpression:\n    case ts.SyntaxKind.AwaitExpression:\n    case ts.SyntaxKind.BinaryExpression:\n    case ts.SyntaxKind.CallExpression:\n    case ts.SyntaxKind.ClassExpression:\n    case ts.SyntaxKind.CommaListExpression:\n    case ts.SyntaxKind.ConditionalExpression:\n    case ts.SyntaxKind.DeleteExpression:\n    case ts.SyntaxKind.ElementAccessExpression:\n    case ts.SyntaxKind.FalseKeyword:\n    case ts.SyntaxKind.FunctionExpression:\n    case ts.SyntaxKind.Identifier:\n    case ts.SyntaxKind.JsxElement:\n    case ts.SyntaxKind.JsxFragment:\n    case ts.SyntaxKind.JsxExpression:\n    case ts.SyntaxKind.JsxOpeningElement:\n    case ts.SyntaxKind.JsxOpeningFragment:\n    case ts.SyntaxKind.JsxSelfClosingElement:\n    case ts.SyntaxKind.MetaProperty:\n    case ts.SyntaxKind.NewExpression:\n    case ts.SyntaxKind.NonNullExpression:\n    case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n    case ts.SyntaxKind.NullKeyword:\n    case ts.SyntaxKind.NumericLiteral:\n    case ts.SyntaxKind.ObjectLiteralExpression:\n    case ts.SyntaxKind.OmittedExpression:\n    case ts.SyntaxKind.ParenthesizedExpression:\n    case ts.SyntaxKind.PostfixUnaryExpression:\n    case ts.SyntaxKind.PrefixUnaryExpression:\n    case ts.SyntaxKind.PropertyAccessExpression:\n    case ts.SyntaxKind.RegularExpressionLiteral:\n    case ts.SyntaxKind.SpreadElement:\n    case ts.SyntaxKind.StringLiteral:\n    case ts.SyntaxKind.SuperKeyword:\n    case ts.SyntaxKind.TaggedTemplateExpression:\n    case ts.SyntaxKind.TemplateExpression:\n    case ts.SyntaxKind.ThisKeyword:\n    case ts.SyntaxKind.TrueKeyword:\n    case ts.SyntaxKind.TypeAssertionExpression:\n    case ts.SyntaxKind.TypeOfExpression:\n    case ts.SyntaxKind.VoidExpression:\n    case ts.SyntaxKind.YieldExpression:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexports.isExpression = isExpression;\n\nfunction isExpressionStatement(node) {\n  return node.kind === ts.SyntaxKind.ExpressionStatement;\n}\n\nexports.isExpressionStatement = isExpressionStatement;\n\nfunction isExpressionWithTypeArguments(node) {\n  return node.kind === ts.SyntaxKind.ExpressionWithTypeArguments;\n}\n\nexports.isExpressionWithTypeArguments = isExpressionWithTypeArguments;\n\nfunction isExternalModuleReference(node) {\n  return node.kind === ts.SyntaxKind.ExternalModuleReference;\n}\n\nexports.isExternalModuleReference = isExternalModuleReference;\n\nfunction isForInStatement(node) {\n  return node.kind === ts.SyntaxKind.ForInStatement;\n}\n\nexports.isForInStatement = isForInStatement;\n\nfunction isForInOrOfStatement(node) {\n  return node.kind === ts.SyntaxKind.ForOfStatement || node.kind === ts.SyntaxKind.ForInStatement;\n}\n\nexports.isForInOrOfStatement = isForInOrOfStatement;\n\nfunction isForOfStatement(node) {\n  return node.kind === ts.SyntaxKind.ForOfStatement;\n}\n\nexports.isForOfStatement = isForOfStatement;\n\nfunction isForStatement(node) {\n  return node.kind === ts.SyntaxKind.ForStatement;\n}\n\nexports.isForStatement = isForStatement;\n\nfunction isFunctionDeclaration(node) {\n  return node.kind === ts.SyntaxKind.FunctionDeclaration;\n}\n\nexports.isFunctionDeclaration = isFunctionDeclaration;\n\nfunction isFunctionExpression(node) {\n  return node.kind === ts.SyntaxKind.FunctionExpression;\n}\n\nexports.isFunctionExpression = isFunctionExpression;\n\nfunction isFunctionTypeNode(node) {\n  return node.kind === ts.SyntaxKind.FunctionType;\n}\n\nexports.isFunctionTypeNode = isFunctionTypeNode;\n\nfunction isGetAccessorDeclaration(node) {\n  return node.kind === ts.SyntaxKind.GetAccessor;\n}\n\nexports.isGetAccessorDeclaration = isGetAccessorDeclaration;\n\nfunction isIdentifier(node) {\n  return node.kind === ts.SyntaxKind.Identifier;\n}\n\nexports.isIdentifier = isIdentifier;\n\nfunction isIfStatement(node) {\n  return node.kind === ts.SyntaxKind.IfStatement;\n}\n\nexports.isIfStatement = isIfStatement;\n\nfunction isImportClause(node) {\n  return node.kind === ts.SyntaxKind.ImportClause;\n}\n\nexports.isImportClause = isImportClause;\n\nfunction isImportDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ImportDeclaration;\n}\n\nexports.isImportDeclaration = isImportDeclaration;\n\nfunction isImportEqualsDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ImportEqualsDeclaration;\n}\n\nexports.isImportEqualsDeclaration = isImportEqualsDeclaration;\n\nfunction isImportSpecifier(node) {\n  return node.kind === ts.SyntaxKind.ImportSpecifier;\n}\n\nexports.isImportSpecifier = isImportSpecifier;\n\nfunction isIndexedAccessTypeNode(node) {\n  return node.kind === ts.SyntaxKind.IndexedAccessType;\n}\n\nexports.isIndexedAccessTypeNode = isIndexedAccessTypeNode;\n\nfunction isIndexSignatureDeclaration(node) {\n  return node.kind === ts.SyntaxKind.IndexSignature;\n}\n\nexports.isIndexSignatureDeclaration = isIndexSignatureDeclaration;\n\nfunction isInferTypeNode(node) {\n  return node.kind === ts.SyntaxKind.InferType;\n}\n\nexports.isInferTypeNode = isInferTypeNode;\n\nfunction isInterfaceDeclaration(node) {\n  return node.kind === ts.SyntaxKind.InterfaceDeclaration;\n}\n\nexports.isInterfaceDeclaration = isInterfaceDeclaration;\n\nfunction isIntersectionTypeNode(node) {\n  return node.kind === ts.SyntaxKind.IntersectionType;\n}\n\nexports.isIntersectionTypeNode = isIntersectionTypeNode;\n\nfunction isIterationStatement(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.ForStatement:\n    case ts.SyntaxKind.ForOfStatement:\n    case ts.SyntaxKind.ForInStatement:\n    case ts.SyntaxKind.WhileStatement:\n    case ts.SyntaxKind.DoStatement:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexports.isIterationStatement = isIterationStatement;\n\nfunction isJsDoc(node) {\n  return node.kind === ts.SyntaxKind.JSDocComment;\n}\n\nexports.isJsDoc = isJsDoc;\n\nfunction isJsxAttribute(node) {\n  return node.kind === ts.SyntaxKind.JsxAttribute;\n}\n\nexports.isJsxAttribute = isJsxAttribute;\n\nfunction isJsxAttributeLike(node) {\n  return node.kind === ts.SyntaxKind.JsxAttribute || node.kind === ts.SyntaxKind.JsxSpreadAttribute;\n}\n\nexports.isJsxAttributeLike = isJsxAttributeLike;\n\nfunction isJsxAttributes(node) {\n  return node.kind === ts.SyntaxKind.JsxAttributes;\n}\n\nexports.isJsxAttributes = isJsxAttributes;\n\nfunction isJsxClosingElement(node) {\n  return node.kind === ts.SyntaxKind.JsxClosingElement;\n}\n\nexports.isJsxClosingElement = isJsxClosingElement;\n\nfunction isJsxClosingFragment(node) {\n  return node.kind === ts.SyntaxKind.JsxClosingFragment;\n}\n\nexports.isJsxClosingFragment = isJsxClosingFragment;\n\nfunction isJsxElement(node) {\n  return node.kind === ts.SyntaxKind.JsxElement;\n}\n\nexports.isJsxElement = isJsxElement;\n\nfunction isJsxExpression(node) {\n  return node.kind === ts.SyntaxKind.JsxExpression;\n}\n\nexports.isJsxExpression = isJsxExpression;\n\nfunction isJsxFragment(node) {\n  return node.kind === ts.SyntaxKind.JsxFragment;\n}\n\nexports.isJsxFragment = isJsxFragment;\n\nfunction isJsxOpeningElement(node) {\n  return node.kind === ts.SyntaxKind.JsxOpeningElement;\n}\n\nexports.isJsxOpeningElement = isJsxOpeningElement;\n\nfunction isJsxOpeningFragment(node) {\n  return node.kind === ts.SyntaxKind.JsxOpeningFragment;\n}\n\nexports.isJsxOpeningFragment = isJsxOpeningFragment;\n\nfunction isJsxOpeningLikeElement(node) {\n  return node.kind === ts.SyntaxKind.JsxOpeningElement || node.kind === ts.SyntaxKind.JsxSelfClosingElement;\n}\n\nexports.isJsxOpeningLikeElement = isJsxOpeningLikeElement;\n\nfunction isJsxSelfClosingElement(node) {\n  return node.kind === ts.SyntaxKind.JsxSelfClosingElement;\n}\n\nexports.isJsxSelfClosingElement = isJsxSelfClosingElement;\n\nfunction isJsxSpreadAttribute(node) {\n  return node.kind === ts.SyntaxKind.JsxSpreadAttribute;\n}\n\nexports.isJsxSpreadAttribute = isJsxSpreadAttribute;\n\nfunction isJsxText(node) {\n  return node.kind === ts.SyntaxKind.JsxText;\n}\n\nexports.isJsxText = isJsxText;\n\nfunction isLabeledStatement(node) {\n  return node.kind === ts.SyntaxKind.LabeledStatement;\n}\n\nexports.isLabeledStatement = isLabeledStatement;\n\nfunction isLiteralExpression(node) {\n  return node.kind >= ts.SyntaxKind.FirstLiteralToken && node.kind <= ts.SyntaxKind.LastLiteralToken;\n}\n\nexports.isLiteralExpression = isLiteralExpression;\n\nfunction isLiteralTypeNode(node) {\n  return node.kind === ts.SyntaxKind.LiteralType;\n}\n\nexports.isLiteralTypeNode = isLiteralTypeNode;\n\nfunction isMappedTypeNode(node) {\n  return node.kind === ts.SyntaxKind.MappedType;\n}\n\nexports.isMappedTypeNode = isMappedTypeNode;\n\nfunction isMetaProperty(node) {\n  return node.kind === ts.SyntaxKind.MetaProperty;\n}\n\nexports.isMetaProperty = isMetaProperty;\n\nfunction isMethodDeclaration(node) {\n  return node.kind === ts.SyntaxKind.MethodDeclaration;\n}\n\nexports.isMethodDeclaration = isMethodDeclaration;\n\nfunction isMethodSignature(node) {\n  return node.kind === ts.SyntaxKind.MethodSignature;\n}\n\nexports.isMethodSignature = isMethodSignature;\n\nfunction isModuleBlock(node) {\n  return node.kind === ts.SyntaxKind.ModuleBlock;\n}\n\nexports.isModuleBlock = isModuleBlock;\n\nfunction isModuleDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ModuleDeclaration;\n}\n\nexports.isModuleDeclaration = isModuleDeclaration;\n\nfunction isNamedExports(node) {\n  return node.kind === ts.SyntaxKind.NamedExports;\n}\n\nexports.isNamedExports = isNamedExports;\n\nfunction isNamedImports(node) {\n  return node.kind === ts.SyntaxKind.NamedImports;\n}\n\nexports.isNamedImports = isNamedImports;\n\nfunction isNamespaceDeclaration(node) {\n  return isModuleDeclaration(node) && node.name.kind === ts.SyntaxKind.Identifier && node.body !== undefined && (node.body.kind === ts.SyntaxKind.ModuleBlock || isNamespaceDeclaration(node.body));\n}\n\nexports.isNamespaceDeclaration = isNamespaceDeclaration;\n\nfunction isNamespaceImport(node) {\n  return node.kind === ts.SyntaxKind.NamespaceImport;\n}\n\nexports.isNamespaceImport = isNamespaceImport;\n\nfunction isNamespaceExportDeclaration(node) {\n  return node.kind === ts.SyntaxKind.NamespaceExportDeclaration;\n}\n\nexports.isNamespaceExportDeclaration = isNamespaceExportDeclaration;\n\nfunction isNewExpression(node) {\n  return node.kind === ts.SyntaxKind.NewExpression;\n}\n\nexports.isNewExpression = isNewExpression;\n\nfunction isNonNullExpression(node) {\n  return node.kind === ts.SyntaxKind.NonNullExpression;\n}\n\nexports.isNonNullExpression = isNonNullExpression;\n\nfunction isNoSubstitutionTemplateLiteral(node) {\n  return node.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral;\n}\n\nexports.isNoSubstitutionTemplateLiteral = isNoSubstitutionTemplateLiteral;\n\nfunction isNullLiteral(node) {\n  return node.kind === ts.SyntaxKind.NullKeyword;\n}\n\nexports.isNullLiteral = isNullLiteral;\n\nfunction isNumericLiteral(node) {\n  return node.kind === ts.SyntaxKind.NumericLiteral;\n}\n\nexports.isNumericLiteral = isNumericLiteral;\n\nfunction isNumericOrStringLikeLiteral(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.StringLiteral:\n    case ts.SyntaxKind.NumericLiteral:\n    case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexports.isNumericOrStringLikeLiteral = isNumericOrStringLikeLiteral;\n\nfunction isObjectBindingPattern(node) {\n  return node.kind === ts.SyntaxKind.ObjectBindingPattern;\n}\n\nexports.isObjectBindingPattern = isObjectBindingPattern;\n\nfunction isObjectLiteralExpression(node) {\n  return node.kind === ts.SyntaxKind.ObjectLiteralExpression;\n}\n\nexports.isObjectLiteralExpression = isObjectLiteralExpression;\n\nfunction isOmittedExpression(node) {\n  return node.kind === ts.SyntaxKind.OmittedExpression;\n}\n\nexports.isOmittedExpression = isOmittedExpression;\n\nfunction isParameterDeclaration(node) {\n  return node.kind === ts.SyntaxKind.Parameter;\n}\n\nexports.isParameterDeclaration = isParameterDeclaration;\n\nfunction isParenthesizedExpression(node) {\n  return node.kind === ts.SyntaxKind.ParenthesizedExpression;\n}\n\nexports.isParenthesizedExpression = isParenthesizedExpression;\n\nfunction isParenthesizedTypeNode(node) {\n  return node.kind === ts.SyntaxKind.ParenthesizedType;\n}\n\nexports.isParenthesizedTypeNode = isParenthesizedTypeNode;\n\nfunction isPostfixUnaryExpression(node) {\n  return node.kind === ts.SyntaxKind.PostfixUnaryExpression;\n}\n\nexports.isPostfixUnaryExpression = isPostfixUnaryExpression;\n\nfunction isPrefixUnaryExpression(node) {\n  return node.kind === ts.SyntaxKind.PrefixUnaryExpression;\n}\n\nexports.isPrefixUnaryExpression = isPrefixUnaryExpression;\n\nfunction isPropertyAccessExpression(node) {\n  return node.kind === ts.SyntaxKind.PropertyAccessExpression;\n}\n\nexports.isPropertyAccessExpression = isPropertyAccessExpression;\n\nfunction isPropertyAssignment(node) {\n  return node.kind === ts.SyntaxKind.PropertyAssignment;\n}\n\nexports.isPropertyAssignment = isPropertyAssignment;\n\nfunction isPropertyDeclaration(node) {\n  return node.kind === ts.SyntaxKind.PropertyDeclaration;\n}\n\nexports.isPropertyDeclaration = isPropertyDeclaration;\n\nfunction isPropertySignature(node) {\n  return node.kind === ts.SyntaxKind.PropertySignature;\n}\n\nexports.isPropertySignature = isPropertySignature;\n\nfunction isQualifiedName(node) {\n  return node.kind === ts.SyntaxKind.QualifiedName;\n}\n\nexports.isQualifiedName = isQualifiedName;\n\nfunction isRegularExpressionLiteral(node) {\n  return node.kind === ts.SyntaxKind.RegularExpressionLiteral;\n}\n\nexports.isRegularExpressionLiteral = isRegularExpressionLiteral;\n\nfunction isReturnStatement(node) {\n  return node.kind === ts.SyntaxKind.ReturnStatement;\n}\n\nexports.isReturnStatement = isReturnStatement;\n\nfunction isSetAccessorDeclaration(node) {\n  return node.kind === ts.SyntaxKind.SetAccessor;\n}\n\nexports.isSetAccessorDeclaration = isSetAccessorDeclaration;\n\nfunction isShorthandPropertyAssignment(node) {\n  return node.kind === ts.SyntaxKind.ShorthandPropertyAssignment;\n}\n\nexports.isShorthandPropertyAssignment = isShorthandPropertyAssignment;\n\nfunction isSignatureDeclaration(node) {\n  return node.parameters !== undefined;\n}\n\nexports.isSignatureDeclaration = isSignatureDeclaration;\n\nfunction isSourceFile(node) {\n  return node.kind === ts.SyntaxKind.SourceFile;\n}\n\nexports.isSourceFile = isSourceFile;\n\nfunction isSpreadAssignment(node) {\n  return node.kind === ts.SyntaxKind.SpreadAssignment;\n}\n\nexports.isSpreadAssignment = isSpreadAssignment;\n\nfunction isSpreadElement(node) {\n  return node.kind === ts.SyntaxKind.SpreadElement;\n}\n\nexports.isSpreadElement = isSpreadElement;\n\nfunction isStringLiteral(node) {\n  return node.kind === ts.SyntaxKind.StringLiteral;\n}\n\nexports.isStringLiteral = isStringLiteral;\n\nfunction isSwitchStatement(node) {\n  return node.kind === ts.SyntaxKind.SwitchStatement;\n}\n\nexports.isSwitchStatement = isSwitchStatement;\n\nfunction isSyntaxList(node) {\n  return node.kind === ts.SyntaxKind.SyntaxList;\n}\n\nexports.isSyntaxList = isSyntaxList;\n\nfunction isTaggedTemplateExpression(node) {\n  return node.kind === ts.SyntaxKind.TaggedTemplateExpression;\n}\n\nexports.isTaggedTemplateExpression = isTaggedTemplateExpression;\n\nfunction isTemplateExpression(node) {\n  return node.kind === ts.SyntaxKind.TemplateExpression;\n}\n\nexports.isTemplateExpression = isTemplateExpression;\n\nfunction isTemplateLiteral(node) {\n  return node.kind === ts.SyntaxKind.TemplateExpression || node.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral;\n}\n\nexports.isTemplateLiteral = isTemplateLiteral;\n\nfunction isTextualLiteral(node) {\n  return node.kind === ts.SyntaxKind.StringLiteral || node.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral;\n}\n\nexports.isTextualLiteral = isTextualLiteral;\n\nfunction isThrowStatement(node) {\n  return node.kind === ts.SyntaxKind.ThrowStatement;\n}\n\nexports.isThrowStatement = isThrowStatement;\n\nfunction isTryStatement(node) {\n  return node.kind === ts.SyntaxKind.TryStatement;\n}\n\nexports.isTryStatement = isTryStatement;\n\nfunction isTupleTypeNode(node) {\n  return node.kind === ts.SyntaxKind.TupleType;\n}\n\nexports.isTupleTypeNode = isTupleTypeNode;\n\nfunction isTypeAliasDeclaration(node) {\n  return node.kind === ts.SyntaxKind.TypeAliasDeclaration;\n}\n\nexports.isTypeAliasDeclaration = isTypeAliasDeclaration;\n\nfunction isTypeAssertion(node) {\n  return node.kind === ts.SyntaxKind.TypeAssertionExpression;\n}\n\nexports.isTypeAssertion = isTypeAssertion;\n\nfunction isTypeLiteralNode(node) {\n  return node.kind === ts.SyntaxKind.TypeLiteral;\n}\n\nexports.isTypeLiteralNode = isTypeLiteralNode;\n\nfunction isTypeOfExpression(node) {\n  return node.kind === ts.SyntaxKind.TypeOfExpression;\n}\n\nexports.isTypeOfExpression = isTypeOfExpression;\n\nfunction isTypeOperatorNode(node) {\n  return node.kind === ts.SyntaxKind.TypeOperator;\n}\n\nexports.isTypeOperatorNode = isTypeOperatorNode;\n\nfunction isTypeParameterDeclaration(node) {\n  return node.kind === ts.SyntaxKind.TypeParameter;\n}\n\nexports.isTypeParameterDeclaration = isTypeParameterDeclaration;\n\nfunction isTypePredicateNode(node) {\n  return node.kind === ts.SyntaxKind.TypePredicate;\n}\n\nexports.isTypePredicateNode = isTypePredicateNode;\n\nfunction isTypeReferenceNode(node) {\n  return node.kind === ts.SyntaxKind.TypeReference;\n}\n\nexports.isTypeReferenceNode = isTypeReferenceNode;\n\nfunction isTypeQueryNode(node) {\n  return node.kind === ts.SyntaxKind.TypeQuery;\n}\n\nexports.isTypeQueryNode = isTypeQueryNode;\n\nfunction isUnionTypeNode(node) {\n  return node.kind === ts.SyntaxKind.UnionType;\n}\n\nexports.isUnionTypeNode = isUnionTypeNode;\n\nfunction isVariableDeclaration(node) {\n  return node.kind === ts.SyntaxKind.VariableDeclaration;\n}\n\nexports.isVariableDeclaration = isVariableDeclaration;\n\nfunction isVariableStatement(node) {\n  return node.kind === ts.SyntaxKind.VariableStatement;\n}\n\nexports.isVariableStatement = isVariableStatement;\n\nfunction isVariableDeclarationList(node) {\n  return node.kind === ts.SyntaxKind.VariableDeclarationList;\n}\n\nexports.isVariableDeclarationList = isVariableDeclarationList;\n\nfunction isVoidExpression(node) {\n  return node.kind === ts.SyntaxKind.VoidExpression;\n}\n\nexports.isVoidExpression = isVoidExpression;\n\nfunction isWhileStatement(node) {\n  return node.kind === ts.SyntaxKind.WhileStatement;\n}\n\nexports.isWhileStatement = isWhileStatement;\n\nfunction isWithStatement(node) {\n  return node.kind === ts.SyntaxKind.WithStatement;\n}\n\nexports.isWithStatement = isWithStatement;","map":{"version":3,"mappings":"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","names":["isAccessorDeclaration","node","kind","ts","SyntaxKind","GetAccessor","SetAccessor","exports","isArrayBindingPattern","ArrayBindingPattern","isArrayLiteralExpression","ArrayLiteralExpression","isArrayTypeNode","ArrayType","isArrowFunction","ArrowFunction","isAsExpression","AsExpression","isAssertionExpression","TypeAssertionExpression","isAwaitExpression","AwaitExpression","isBinaryExpression","BinaryExpression","isBindingElement","BindingElement","isBindingPattern","ObjectBindingPattern","isBlock","Block","isBlockLike","statements","undefined","isBooleanLiteral","TrueKeyword","FalseKeyword","isBreakOrContinueStatement","BreakStatement","ContinueStatement","isBreakStatement","isCallExpression","CallExpression","isCallLikeExpression","Decorator","JsxOpeningElement","JsxSelfClosingElement","NewExpression","TaggedTemplateExpression","isCallSignatureDeclaration","CallSignature","isCaseBlock","CaseBlock","isCaseClause","CaseClause","isCaseOrDefaultClause","DefaultClause","isCatchClause","CatchClause","isClassDeclaration","ClassDeclaration","isClassExpression","ClassExpression","isClassLikeDeclaration","isCommaListExpression","CommaListExpression","isConditionalExpression","ConditionalExpression","isConditionalTypeNode","ConditionalType","isConstructorDeclaration","Constructor","isConstructorTypeNode","ConstructorType","isConstructSignatureDeclaration","ConstructSignature","isContinueStatement","isComputedPropertyName","ComputedPropertyName","isDebuggerStatement","DebuggerStatement","isDecorator","isDefaultClause","isDeleteExpression","DeleteExpression","isDoStatement","DoStatement","isElementAccessExpression","ElementAccessExpression","isEmptyStatement","EmptyStatement","isEntityName","Identifier","isQualifiedName","isEntityNameExpression","isPropertyAccessExpression","expression","isEnumDeclaration","EnumDeclaration","isEnumMember","EnumMember","isExportAssignment","ExportAssignment","isExportDeclaration","ExportDeclaration","isExportSpecifier","ExportSpecifier","isExpression","FunctionExpression","JsxElement","JsxFragment","JsxExpression","JsxOpeningFragment","MetaProperty","NonNullExpression","NoSubstitutionTemplateLiteral","NullKeyword","NumericLiteral","ObjectLiteralExpression","OmittedExpression","ParenthesizedExpression","PostfixUnaryExpression","PrefixUnaryExpression","PropertyAccessExpression","RegularExpressionLiteral","SpreadElement","StringLiteral","SuperKeyword","TemplateExpression","ThisKeyword","TypeOfExpression","VoidExpression","YieldExpression","isExpressionStatement","ExpressionStatement","isExpressionWithTypeArguments","ExpressionWithTypeArguments","isExternalModuleReference","ExternalModuleReference","isForInStatement","ForInStatement","isForInOrOfStatement","ForOfStatement","isForOfStatement","isForStatement","ForStatement","isFunctionDeclaration","FunctionDeclaration","isFunctionExpression","isFunctionTypeNode","FunctionType","isGetAccessorDeclaration","isIdentifier","isIfStatement","IfStatement","isImportClause","ImportClause","isImportDeclaration","ImportDeclaration","isImportEqualsDeclaration","ImportEqualsDeclaration","isImportSpecifier","ImportSpecifier","isIndexedAccessTypeNode","IndexedAccessType","isIndexSignatureDeclaration","IndexSignature","isInferTypeNode","InferType","isInterfaceDeclaration","InterfaceDeclaration","isIntersectionTypeNode","IntersectionType","isIterationStatement","WhileStatement","isJsDoc","JSDocComment","isJsxAttribute","JsxAttribute","isJsxAttributeLike","JsxSpreadAttribute","isJsxAttributes","JsxAttributes","isJsxClosingElement","JsxClosingElement","isJsxClosingFragment","JsxClosingFragment","isJsxElement","isJsxExpression","isJsxFragment","isJsxOpeningElement","isJsxOpeningFragment","isJsxOpeningLikeElement","isJsxSelfClosingElement","isJsxSpreadAttribute","isJsxText","JsxText","isLabeledStatement","LabeledStatement","isLiteralExpression","FirstLiteralToken","LastLiteralToken","isLiteralTypeNode","LiteralType","isMappedTypeNode","MappedType","isMetaProperty","isMethodDeclaration","MethodDeclaration","isMethodSignature","MethodSignature","isModuleBlock","ModuleBlock","isModuleDeclaration","ModuleDeclaration","isNamedExports","NamedExports","isNamedImports","NamedImports","isNamespaceDeclaration","name","body","isNamespaceImport","NamespaceImport","isNamespaceExportDeclaration","NamespaceExportDeclaration","isNewExpression","isNonNullExpression","isNoSubstitutionTemplateLiteral","isNullLiteral","isNumericLiteral","isNumericOrStringLikeLiteral","isObjectBindingPattern","isObjectLiteralExpression","isOmittedExpression","isParameterDeclaration","Parameter","isParenthesizedExpression","isParenthesizedTypeNode","ParenthesizedType","isPostfixUnaryExpression","isPrefixUnaryExpression","isPropertyAssignment","PropertyAssignment","isPropertyDeclaration","PropertyDeclaration","isPropertySignature","PropertySignature","QualifiedName","isRegularExpressionLiteral","isReturnStatement","ReturnStatement","isSetAccessorDeclaration","isShorthandPropertyAssignment","ShorthandPropertyAssignment","isSignatureDeclaration","parameters","isSourceFile","SourceFile","isSpreadAssignment","SpreadAssignment","isSpreadElement","isStringLiteral","isSwitchStatement","SwitchStatement","isSyntaxList","SyntaxList","isTaggedTemplateExpression","isTemplateExpression","isTemplateLiteral","isTextualLiteral","isThrowStatement","ThrowStatement","isTryStatement","TryStatement","isTupleTypeNode","TupleType","isTypeAliasDeclaration","TypeAliasDeclaration","isTypeAssertion","isTypeLiteralNode","TypeLiteral","isTypeOfExpression","isTypeOperatorNode","TypeOperator","isTypeParameterDeclaration","TypeParameter","isTypePredicateNode","TypePredicate","isTypeReferenceNode","TypeReference","isTypeQueryNode","TypeQuery","isUnionTypeNode","UnionType","isVariableDeclaration","VariableDeclaration","isVariableStatement","VariableStatement","isVariableDeclarationList","VariableDeclarationList","isVoidExpression","isWhileStatement","isWithStatement","WithStatement"],"sources":["node.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}