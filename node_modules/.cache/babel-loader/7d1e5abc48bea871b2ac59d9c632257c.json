{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkMetadata = void 0;\n\nconst util_1 = require(\"../../compile/util\");\n\nconst def = {\n  keyword: \"metadata\",\n  schemaType: \"object\",\n\n  code(cxt) {\n    checkMetadata(cxt);\n    const {\n      gen,\n      schema,\n      it\n    } = cxt;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    const valid = gen.name(\"valid\");\n    cxt.subschema({\n      keyword: \"metadata\",\n      jtdMetadata: true\n    }, valid);\n    cxt.ok(valid);\n  }\n\n};\n\nfunction checkMetadata(_ref, metadata) {\n  let {\n    it,\n    keyword\n  } = _ref;\n\n  if (it.jtdMetadata !== metadata) {\n    throw new Error(`JTD: \"${keyword}\" cannot be used in this schema location`);\n  }\n}\n\nexports.checkMetadata = checkMetadata;\nexports.default = def;","map":{"version":3,"mappings":";;;;;;;AAEA;;AAEA,MAAMA,GAAG,GAA0B;EACjCC,OAAO,EAAE,UADwB;EAEjCC,UAAU,EAAE,QAFqB;;EAGjCC,IAAI,CAACC,GAAD,EAAgB;IAClBC,aAAa,CAACD,GAAD,CAAb;IACA,MAAM;MAACE,GAAD;MAAMC,MAAN;MAAcC;IAAd,IAAoBJ,GAA1B;IACA,IAAI,8BAAkBI,EAAlB,EAAsBD,MAAtB,CAAJ,EAAmC;IACnC,MAAME,KAAK,GAAGH,GAAG,CAACI,IAAJ,CAAS,OAAT,CAAd;IACAN,GAAG,CAACO,SAAJ,CAAc;MAACV,OAAO,EAAE,UAAV;MAAsBW,WAAW,EAAE;IAAnC,CAAd,EAAwDH,KAAxD;IACAL,GAAG,CAACS,EAAJ,CAAOJ,KAAP;EACD;;AAVgC,CAAnC;;AAaA,SAAgBJ,aAAhB,OAAyDS,QAAzD,EAA2E;EAAA,IAA7C;IAACN,EAAD;IAAKP;EAAL,CAA6C;;EACzE,IAAIO,EAAE,CAACI,WAAH,KAAmBE,QAAvB,EAAiC;IAC/B,MAAM,IAAIC,KAAJ,CAAU,SAASd,OAAO,0CAA1B,CAAN;EACD;AACF;;AAJDe;AAMAA,kBAAehB,GAAf","names":["def","keyword","schemaType","code","cxt","checkMetadata","gen","schema","it","valid","name","subschema","jtdMetadata","ok","metadata","Error","exports"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\vocabularies\\jtd\\metadata.ts"],"sourcesContent":["import {KeywordCxt} from \"../../ajv\"\nimport type {CodeKeywordDefinition} from \"../../types\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"metadata\",\n  schemaType: \"object\",\n  code(cxt: KeywordCxt) {\n    checkMetadata(cxt)\n    const {gen, schema, it} = cxt\n    if (alwaysValidSchema(it, schema)) return\n    const valid = gen.name(\"valid\")\n    cxt.subschema({keyword: \"metadata\", jtdMetadata: true}, valid)\n    cxt.ok(valid)\n  },\n}\n\nexport function checkMetadata({it, keyword}: KeywordCxt, metadata?: boolean): void {\n  if (it.jtdMetadata !== metadata) {\n    throw new Error(`JTD: \"${keyword}\" cannot be used in this schema location`)\n  }\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}