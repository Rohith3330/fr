{"ast":null,"code":"var makeDom = require(\"../utils\").makeDom;\n\nvar helpers = require(\"../..\");\n\nvar assert = require(\"assert\");\n\ndescribe(\"helpers\", function () {\n  describe(\"removeSubsets\", function () {\n    var removeSubsets = helpers.removeSubsets;\n    var dom = makeDom(\"<div><p><span></span></p><p></p></div>\")[0];\n    it(\"removes identical trees\", function () {\n      var matches = removeSubsets([dom, dom]);\n      assert.equal(matches.length, 1);\n    });\n    it(\"Removes subsets found first\", function () {\n      var matches = removeSubsets([dom, dom.children[0].children[0]]);\n      assert.equal(matches.length, 1);\n    });\n    it(\"Removes subsets found last\", function () {\n      var matches = removeSubsets([dom.children[0], dom]);\n      assert.equal(matches.length, 1);\n    });\n    it(\"Does not remove unique trees\", function () {\n      var matches = removeSubsets([dom.children[0], dom.children[1]]);\n      assert.equal(matches.length, 2);\n    });\n  });\n  describe(\"compareDocumentPosition\", function () {\n    var compareDocumentPosition = helpers.compareDocumentPosition;\n    var markup = \"<div><p><span></span></p><a></a></div>\";\n    var dom = makeDom(markup)[0];\n    var p = dom.children[0];\n    var span = p.children[0];\n    var a = dom.children[1];\n    it(\"reports when the first node occurs before the second indirectly\", function () {\n      assert.equal(compareDocumentPosition(span, a), 2);\n    });\n    it(\"reports when the first node contains the second\", function () {\n      assert.equal(compareDocumentPosition(p, span), 10);\n    });\n    it(\"reports when the first node occurs after the second indirectly\", function () {\n      assert.equal(compareDocumentPosition(a, span), 4);\n    });\n    it(\"reports when the first node is contained by the second\", function () {\n      assert.equal(compareDocumentPosition(span, p), 20);\n    });\n    it(\"reports when the nodes belong to separate documents\", function () {\n      var other = makeDom(markup)[0].children[0].children[0];\n      assert.equal(compareDocumentPosition(span, other), 1);\n    });\n    it(\"reports when the nodes are identical\", function () {\n      assert.equal(compareDocumentPosition(span, span), 0);\n    });\n  });\n  describe(\"uniqueSort\", function () {\n    var uniqueSort = helpers.uniqueSort;\n    var dom, p, span, a;\n    beforeEach(function () {\n      dom = makeDom(\"<div><p><span></span></p><a></a></div>\")[0];\n      p = dom.children[0];\n      span = p.children[0];\n      a = dom.children[1];\n    });\n    it(\"leaves unique elements untouched\", function () {\n      assert.deepEqual(uniqueSort([p, a]), [p, a]);\n    });\n    it(\"removes duplicate elements\", function () {\n      assert.deepEqual(uniqueSort([p, a, p]), [p, a]);\n    });\n    it(\"sorts nodes in document order\", function () {\n      assert.deepEqual(uniqueSort([a, dom, span, p]), [dom, p, span, a]);\n    });\n  });\n});","map":{"version":3,"names":["makeDom","require","helpers","assert","describe","removeSubsets","dom","it","matches","equal","length","children","compareDocumentPosition","markup","p","span","a","other","uniqueSort","beforeEach","deepEqual"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/svgo/node_modules/domutils/test/tests/helpers.js"],"sourcesContent":["var makeDom = require(\"../utils\").makeDom;\nvar helpers = require(\"../..\");\nvar assert = require(\"assert\");\n\ndescribe(\"helpers\", function() {\n\tdescribe(\"removeSubsets\", function() {\n\t\tvar removeSubsets = helpers.removeSubsets;\n\t\tvar dom = makeDom(\"<div><p><span></span></p><p></p></div>\")[0];\n\n\t\tit(\"removes identical trees\", function() {\n\t\t\tvar matches = removeSubsets([dom, dom]);\n\t\t\tassert.equal(matches.length, 1);\n\t\t});\n\n\t\tit(\"Removes subsets found first\", function() {\n\t\t\tvar matches = removeSubsets([dom, dom.children[0].children[0]]);\n\t\t\tassert.equal(matches.length, 1);\n\t\t});\n\n\t\tit(\"Removes subsets found last\", function() {\n\t\t\tvar matches = removeSubsets([dom.children[0], dom]);\n\t\t\tassert.equal(matches.length, 1);\n\t\t});\n\n\t\tit(\"Does not remove unique trees\", function() {\n\t\t\tvar matches = removeSubsets([dom.children[0], dom.children[1]]);\n\t\t\tassert.equal(matches.length, 2);\n\t\t});\n\t});\n\n\tdescribe(\"compareDocumentPosition\", function() {\n\t\tvar compareDocumentPosition = helpers.compareDocumentPosition;\n\t\tvar markup = \"<div><p><span></span></p><a></a></div>\";\n\t\tvar dom = makeDom(markup)[0];\n\t\tvar p = dom.children[0];\n\t\tvar span = p.children[0];\n\t\tvar a = dom.children[1];\n\n\t\tit(\"reports when the first node occurs before the second indirectly\", function() {\n\t\t\tassert.equal(compareDocumentPosition(span, a), 2);\n\t\t});\n\n\t\tit(\"reports when the first node contains the second\", function() {\n\t\t\tassert.equal(compareDocumentPosition(p, span), 10);\n\t\t});\n\n\t\tit(\"reports when the first node occurs after the second indirectly\", function() {\n\t\t\tassert.equal(compareDocumentPosition(a, span), 4);\n\t\t});\n\n\t\tit(\"reports when the first node is contained by the second\", function() {\n\t\t\tassert.equal(compareDocumentPosition(span, p), 20);\n\t\t});\n\n\t\tit(\"reports when the nodes belong to separate documents\", function() {\n\t\t\tvar other = makeDom(markup)[0].children[0].children[0];\n\n\t\t\tassert.equal(compareDocumentPosition(span, other), 1);\n\t\t});\n\n\t\tit(\"reports when the nodes are identical\", function() {\n\t\t\tassert.equal(compareDocumentPosition(span, span), 0);\n\t\t});\n\t});\n\n\tdescribe(\"uniqueSort\", function() {\n\t\tvar uniqueSort = helpers.uniqueSort;\n\t\tvar dom, p, span, a;\n\n\t\tbeforeEach(function() {\n\t\t\tdom = makeDom(\"<div><p><span></span></p><a></a></div>\")[0];\n\t\t\tp = dom.children[0];\n\t\t\tspan = p.children[0];\n\t\t\ta = dom.children[1];\n\t\t});\n\n\t\tit(\"leaves unique elements untouched\", function() {\n\t\t\tassert.deepEqual(uniqueSort([p, a]), [p, a]);\n\t\t});\n\n\t\tit(\"removes duplicate elements\", function() {\n\t\t\tassert.deepEqual(uniqueSort([p, a, p]), [p, a]);\n\t\t});\n\n\t\tit(\"sorts nodes in document order\", function() {\n\t\t\tassert.deepEqual(uniqueSort([a, dom, span, p]), [dom, p, span, a]);\n\t\t});\n\t});\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}