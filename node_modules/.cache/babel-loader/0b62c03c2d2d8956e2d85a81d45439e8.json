{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHighestUnreleased = getHighestUnreleased;\nexports.getLowestImplementedVersion = getLowestImplementedVersion;\nexports.getLowestUnreleased = getLowestUnreleased;\nexports.isUnreleasedVersion = isUnreleasedVersion;\nexports.semverMin = semverMin;\nexports.semverify = semverify;\n\nvar _semver = require(\"semver\");\n\nvar _helperValidatorOption = require(\"@babel/helper-validator-option\");\n\nvar _targets = require(\"./targets\");\n\nconst versionRegExp = /^(\\d+|\\d+.\\d+)$/;\nconst v = new _helperValidatorOption.OptionValidator(\"@babel/helper-compilation-targets\");\n\nfunction semverMin(first, second) {\n  return first && _semver.lt(first, second) ? first : second;\n}\n\nfunction semverify(version) {\n  if (typeof version === \"string\" && _semver.valid(version)) {\n    return version;\n  }\n\n  v.invariant(typeof version === \"number\" || typeof version === \"string\" && versionRegExp.test(version), `'${version}' is not a valid version`);\n  const split = version.toString().split(\".\");\n\n  while (split.length < 3) {\n    split.push(\"0\");\n  }\n\n  return split.join(\".\");\n}\n\nfunction isUnreleasedVersion(version, env) {\n  const unreleasedLabel = _targets.unreleasedLabels[env];\n  return !!unreleasedLabel && unreleasedLabel === version.toString().toLowerCase();\n}\n\nfunction getLowestUnreleased(a, b, env) {\n  const unreleasedLabel = _targets.unreleasedLabels[env];\n\n  if (a === unreleasedLabel) {\n    return b;\n  }\n\n  if (b === unreleasedLabel) {\n    return a;\n  }\n\n  return semverMin(a, b);\n}\n\nfunction getHighestUnreleased(a, b, env) {\n  return getLowestUnreleased(a, b, env) === a ? b : a;\n}\n\nfunction getLowestImplementedVersion(plugin, environment) {\n  const result = plugin[environment];\n\n  if (!result && environment === \"android\") {\n    return plugin.chrome;\n  }\n\n  return result;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;AAKA,MAAMA,aAAa,GAAG,iBAAtB;AAEA,MAAMC,CAAC,GAAG,IAAIC,sCAAJ,qCAAV;;AAEO,SAASC,SAAT,CACLC,KADK,EAELC,MAFK,EAGG;EACR,OAAOD,KAAK,IAAIE,OAAM,CAACC,EAAPD,CAAUF,KAAVE,EAAiBD,MAAjBC,CAATF,GAAoCA,KAApCA,GAA4CC,MAAnD;AACD;;AAIM,SAASG,SAAT,CAAmBC,OAAnB,EAAqD;EAC1D,IAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+BH,OAAM,CAACI,KAAPJ,CAAaG,OAAbH,CAAnC,EAA0D;IACxD,OAAOG,OAAP;EACD;;EAEDR,CAAC,CAACU,SAAFV,CACE,OAAOQ,OAAP,KAAmB,QAAnB,IACG,OAAOA,OAAP,KAAmB,QAAnB,IAA+BT,aAAa,CAACY,IAAdZ,CAAmBS,OAAnBT,CAFpCC,EAGG,IAAGQ,OAAQ,0BAHdR;EAMA,MAAMY,KAAK,GAAGJ,OAAO,CAACK,QAARL,GAAmBI,KAAnBJ,CAAyB,GAAzBA,CAAd;;EACA,OAAOI,KAAK,CAACE,MAANF,GAAe,CAAtB,EAAyB;IACvBA,KAAK,CAACG,IAANH,CAAW,GAAXA;EACD;;EACD,OAAOA,KAAK,CAACI,IAANJ,CAAW,GAAXA,CAAP;AACD;;AAEM,SAASK,mBAAT,CACLT,OADK,EAELU,GAFK,EAGI;EACT,MAAMC,eAAe,GAEnBC,0BAAiBF,GAAjBE,CAFF;EAGA,OACE,CAAC,CAACD,eAAF,IAAqBA,eAAe,KAAKX,OAAO,CAACK,QAARL,GAAmBa,WAAnBb,EAD3C;AAGD;;AAEM,SAASc,mBAAT,CAA6BC,CAA7B,EAAwCC,CAAxC,EAAmDN,GAAnD,EAAwE;EAC7E,MAAMC,eAEO,GAEXC,0BAAiBF,GAAjBE,CAJF;;EAKA,IAAIG,CAAC,KAAKJ,eAAV,EAA2B;IACzB,OAAOK,CAAP;EACD;;EACD,IAAIA,CAAC,KAAKL,eAAV,EAA2B;IACzB,OAAOI,CAAP;EACD;;EACD,OAAOrB,SAAS,CAACqB,CAAD,EAAIC,CAAJ,CAAhB;AACD;;AAEM,SAASC,oBAAT,CACLF,CADK,EAELC,CAFK,EAGLN,GAHK,EAIG;EACR,OAAOI,mBAAmB,CAACC,CAAD,EAAIC,CAAJ,EAAON,GAAP,CAAnBI,KAAmCC,CAAnCD,GAAuCE,CAAvCF,GAA2CC,CAAlD;AACD;;AAEM,SAASG,2BAAT,CACLC,MADK,EAELC,WAFK,EAGG;EACR,MAAMC,MAAM,GAAGF,MAAM,CAACC,WAAD,CAArB;;EAEA,IAAI,CAACC,MAAD,IAAWD,WAAW,KAAK,SAA/B,EAA0C;IACxC,OAAOD,MAAM,CAACG,MAAd;EACD;;EACD,OAAOD,MAAP;AACD","names":["versionRegExp","v","OptionValidator","semverMin","first","second","semver","lt","semverify","version","valid","invariant","test","split","toString","length","push","join","isUnreleasedVersion","env","unreleasedLabel","unreleasedLabels","toLowerCase","getLowestUnreleased","a","b","getHighestUnreleased","getLowestImplementedVersion","plugin","environment","result","chrome"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\helper-compilation-targets\\src\\utils.ts"],"sourcesContent":["import semver from \"semver\";\nimport { OptionValidator } from \"@babel/helper-validator-option\";\nimport { unreleasedLabels } from \"./targets\";\nimport type { Target, Targets } from \"./types\";\n\ndeclare const PACKAGE_JSON: { name: string; version: string };\n\nconst versionRegExp = /^(\\d+|\\d+.\\d+)$/;\n\nconst v = new OptionValidator(PACKAGE_JSON.name);\n\nexport function semverMin(\n  first: string | undefined | null,\n  second: string,\n): string {\n  return first && semver.lt(first, second) ? first : second;\n}\n\n// Convert version to a semver value.\n// 2.5 -> 2.5.0; 1 -> 1.0.0;\nexport function semverify(version: number | string): string {\n  if (typeof version === \"string\" && semver.valid(version)) {\n    return version;\n  }\n\n  v.invariant(\n    typeof version === \"number\" ||\n      (typeof version === \"string\" && versionRegExp.test(version)),\n    `'${version}' is not a valid version`,\n  );\n\n  const split = version.toString().split(\".\");\n  while (split.length < 3) {\n    split.push(\"0\");\n  }\n  return split.join(\".\");\n}\n\nexport function isUnreleasedVersion(\n  version: string | number,\n  env: Target,\n): boolean {\n  const unreleasedLabel =\n    // @ts-expect-error unreleasedLabel will be guarded later\n    unreleasedLabels[env];\n  return (\n    !!unreleasedLabel && unreleasedLabel === version.toString().toLowerCase()\n  );\n}\n\nexport function getLowestUnreleased(a: string, b: string, env: Target): string {\n  const unreleasedLabel:\n    | typeof unreleasedLabels[keyof typeof unreleasedLabels]\n    | undefined =\n    // @ts-expect-error unreleasedLabel is undefined when env is not safari\n    unreleasedLabels[env];\n  if (a === unreleasedLabel) {\n    return b;\n  }\n  if (b === unreleasedLabel) {\n    return a;\n  }\n  return semverMin(a, b);\n}\n\nexport function getHighestUnreleased(\n  a: string,\n  b: string,\n  env: Target,\n): string {\n  return getLowestUnreleased(a, b, env) === a ? b : a;\n}\n\nexport function getLowestImplementedVersion(\n  plugin: Targets,\n  environment: Target,\n): string {\n  const result = plugin[environment];\n  // When Android support data is absent, use Chrome data as fallback\n  if (!result && environment === \"android\") {\n    return plugin.chrome;\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}