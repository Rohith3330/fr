{"ast":null,"code":"'use strict';\n\nconst stylehacks = require('stylehacks');\n\nconst canMerge = require('../canMerge.js');\n\nconst getDecls = require('../getDecls.js');\n\nconst minifyTrbl = require('../minifyTrbl.js');\n\nconst parseTrbl = require('../parseTrbl.js');\n\nconst insertCloned = require('../insertCloned.js');\n\nconst mergeRules = require('../mergeRules.js');\n\nconst mergeValues = require('../mergeValues.js');\n\nconst trbl = require('../trbl.js');\n\nconst isCustomProp = require('../isCustomProp.js');\n\nconst canExplode = require('../canExplode.js');\n/**\n * @param {string} prop\n * @return {{explode: (rule: import('postcss').Rule) => void, merge: (rule: import('postcss').Rule) => void}}\n */\n\n\nmodule.exports = prop => {\n  const properties = trbl.map(direction => `${prop}-${direction}`);\n  /** @type {(rule: import('postcss').Rule) => void} */\n\n  const cleanup = rule => {\n    let decls = getDecls(rule, [prop].concat(properties));\n\n    while (decls.length) {\n      const lastNode = decls[decls.length - 1]; // remove properties of lower precedence\n\n      const lesser = decls.filter(node => !stylehacks.detect(lastNode) && !stylehacks.detect(node) && node !== lastNode && node.important === lastNode.important && lastNode.prop === prop && node.prop !== lastNode.prop);\n\n      for (const node of lesser) {\n        node.remove();\n      }\n\n      decls = decls.filter(node => !lesser.includes(node)); // get duplicate properties\n\n      let duplicates = decls.filter(node => !stylehacks.detect(lastNode) && !stylehacks.detect(node) && node !== lastNode && node.important === lastNode.important && node.prop === lastNode.prop && !(!isCustomProp(node) && isCustomProp(lastNode)));\n\n      for (const node of duplicates) {\n        node.remove();\n      }\n\n      decls = decls.filter(node => node !== lastNode && !duplicates.includes(node));\n    }\n  };\n\n  const processor = {\n    /** @type {(rule: import('postcss').Rule) => void} */\n    explode: rule => {\n      rule.walkDecls(new RegExp('^' + prop + '$', 'i'), decl => {\n        if (!canExplode(decl)) {\n          return;\n        }\n\n        if (stylehacks.detect(decl)) {\n          return;\n        }\n\n        const values = parseTrbl(decl.value);\n        trbl.forEach((direction, index) => {\n          insertCloned(\n          /** @type {import('postcss').Rule} */\n          decl.parent, decl, {\n            prop: properties[index],\n            value: values[index]\n          });\n        });\n        decl.remove();\n      });\n    },\n\n    /** @type {(rule: import('postcss').Rule) => void} */\n    merge: rule => {\n      mergeRules(rule, properties, (rules, lastNode) => {\n        if (canMerge(rules) && !rules.some(stylehacks.detect)) {\n          insertCloned(\n          /** @type {import('postcss').Rule} */\n          lastNode.parent, lastNode, {\n            prop,\n            value: minifyTrbl(mergeValues(...rules))\n          });\n\n          for (const node of rules) {\n            node.remove();\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n      cleanup(rule);\n    }\n  };\n  return processor;\n};","map":{"version":3,"names":["stylehacks","require","canMerge","getDecls","minifyTrbl","parseTrbl","insertCloned","mergeRules","mergeValues","trbl","isCustomProp","canExplode","module","exports","prop","properties","map","direction","cleanup","rule","decls","concat","length","lastNode","lesser","filter","node","detect","important","remove","includes","duplicates","processor","explode","walkDecls","RegExp","decl","values","value","forEach","index","parent","merge","rules","some"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-merge-longhand/src/lib/decl/boxBase.js"],"sourcesContent":["'use strict';\nconst stylehacks = require('stylehacks');\nconst canMerge = require('../canMerge.js');\nconst getDecls = require('../getDecls.js');\nconst minifyTrbl = require('../minifyTrbl.js');\nconst parseTrbl = require('../parseTrbl.js');\nconst insertCloned = require('../insertCloned.js');\nconst mergeRules = require('../mergeRules.js');\nconst mergeValues = require('../mergeValues.js');\nconst trbl = require('../trbl.js');\nconst isCustomProp = require('../isCustomProp.js');\nconst canExplode = require('../canExplode.js');\n\n/**\n * @param {string} prop\n * @return {{explode: (rule: import('postcss').Rule) => void, merge: (rule: import('postcss').Rule) => void}}\n */\nmodule.exports = (prop) => {\n  const properties = trbl.map((direction) => `${prop}-${direction}`);\n  /** @type {(rule: import('postcss').Rule) => void} */\n  const cleanup = (rule) => {\n    let decls = getDecls(rule, [prop].concat(properties));\n\n    while (decls.length) {\n      const lastNode = decls[decls.length - 1];\n\n      // remove properties of lower precedence\n      const lesser = decls.filter(\n        (node) =>\n          !stylehacks.detect(lastNode) &&\n          !stylehacks.detect(node) &&\n          node !== lastNode &&\n          node.important === lastNode.important &&\n          lastNode.prop === prop &&\n          node.prop !== lastNode.prop\n      );\n\n      for (const node of lesser) {\n        node.remove();\n      }\n      decls = decls.filter((node) => !lesser.includes(node));\n\n      // get duplicate properties\n      let duplicates = decls.filter(\n        (node) =>\n          !stylehacks.detect(lastNode) &&\n          !stylehacks.detect(node) &&\n          node !== lastNode &&\n          node.important === lastNode.important &&\n          node.prop === lastNode.prop &&\n          !(!isCustomProp(node) && isCustomProp(lastNode))\n      );\n\n      for (const node of duplicates) {\n        node.remove();\n      }\n      decls = decls.filter(\n        (node) => node !== lastNode && !duplicates.includes(node)\n      );\n    }\n  };\n\n  const processor = {\n    /** @type {(rule: import('postcss').Rule) => void} */\n    explode: (rule) => {\n      rule.walkDecls(new RegExp('^' + prop + '$', 'i'), (decl) => {\n        if (!canExplode(decl)) {\n          return;\n        }\n\n        if (stylehacks.detect(decl)) {\n          return;\n        }\n\n        const values = parseTrbl(decl.value);\n\n        trbl.forEach((direction, index) => {\n          insertCloned(\n            /** @type {import('postcss').Rule} */ (decl.parent),\n            decl,\n            {\n              prop: properties[index],\n              value: values[index],\n            }\n          );\n        });\n\n        decl.remove();\n      });\n    },\n    /** @type {(rule: import('postcss').Rule) => void} */\n    merge: (rule) => {\n      mergeRules(rule, properties, (rules, lastNode) => {\n        if (canMerge(rules) && !rules.some(stylehacks.detect)) {\n          insertCloned(\n            /** @type {import('postcss').Rule} */ (lastNode.parent),\n            lastNode,\n            {\n              prop,\n              value: minifyTrbl(mergeValues(...rules)),\n            }\n          );\n          for (const node of rules) {\n            node.remove();\n          }\n\n          return true;\n        }\n        return false;\n      });\n\n      cleanup(rule);\n    },\n  };\n\n  return processor;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}