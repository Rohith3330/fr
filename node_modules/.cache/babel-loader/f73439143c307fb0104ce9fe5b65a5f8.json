{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utilities = require(\"../utilities\");\n\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst create = context => {\n  const never = (context.options[0] || 'never') === 'never';\n  return {\n    GenericTypeAnnotation(node) {\n      const types = node.typeParameters; // Promise<foo>\n      // ^^^^^^^^^^^^ GenericTypeAnnotation (with typeParameters)\n      //         ^^^  GenericTypeAnnotation (without typeParameters)\n\n      if (!types) {\n        return;\n      }\n\n      const spaceBefore = types.range[0] - node.id.range[1];\n\n      if (never && spaceBefore) {\n        context.report({\n          data: {\n            name: node.id.name\n          },\n          fix: _utilities.spacingFixers.stripSpacesAfter(node.id, spaceBefore),\n          message: 'There must be no space before \"{{name}}\" generic type annotation bracket',\n          node\n        });\n      }\n\n      if (!never && !spaceBefore) {\n        context.report({\n          data: {\n            name: node.id.name\n          },\n          fix: _utilities.spacingFixers.addSpaceAfter(node.id),\n          message: 'There must be a space before \"{{name}}\" generic type annotation bracket',\n          node\n        });\n      }\n\n      if (!never && spaceBefore > 1) {\n        context.report({\n          data: {\n            name: node.id.name\n          },\n          fix: _utilities.spacingFixers.stripSpacesAfter(node.id, spaceBefore - 1),\n          message: 'There must be one space before \"{{name}}\" generic type annotation bracket',\n          node\n        });\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  meta: {\n    fixable: 'code'\n  },\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utilities","require","schema","enum","type","create","context","never","options","GenericTypeAnnotation","node","types","typeParameters","spaceBefore","range","id","report","data","name","fix","spacingFixers","stripSpacesAfter","message","addSpaceAfter","_default","meta","fixable","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/spaceBeforeGenericBracket.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utilities = require(\"../utilities\");\n\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst create = context => {\n  const never = (context.options[0] || 'never') === 'never';\n  return {\n    GenericTypeAnnotation(node) {\n      const types = node.typeParameters; // Promise<foo>\n      // ^^^^^^^^^^^^ GenericTypeAnnotation (with typeParameters)\n      //         ^^^  GenericTypeAnnotation (without typeParameters)\n\n      if (!types) {\n        return;\n      }\n\n      const spaceBefore = types.range[0] - node.id.range[1];\n\n      if (never && spaceBefore) {\n        context.report({\n          data: {\n            name: node.id.name\n          },\n          fix: _utilities.spacingFixers.stripSpacesAfter(node.id, spaceBefore),\n          message: 'There must be no space before \"{{name}}\" generic type annotation bracket',\n          node\n        });\n      }\n\n      if (!never && !spaceBefore) {\n        context.report({\n          data: {\n            name: node.id.name\n          },\n          fix: _utilities.spacingFixers.addSpaceAfter(node.id),\n          message: 'There must be a space before \"{{name}}\" generic type annotation bracket',\n          node\n        });\n      }\n\n      if (!never && spaceBefore > 1) {\n        context.report({\n          data: {\n            name: node.id.name\n          },\n          fix: _utilities.spacingFixers.stripSpacesAfter(node.id, spaceBefore - 1),\n          message: 'There must be one space before \"{{name}}\" generic type annotation bracket',\n          node\n        });\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  meta: {\n    fixable: 'code'\n  },\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AAEA,MAAMC,MAAM,GAAG,CAAC;EACdC,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX,CADQ;EAEdC,IAAI,EAAE;AAFQ,CAAD,CAAf;;AAKA,MAAMC,MAAM,GAAGC,OAAO,IAAI;EACxB,MAAMC,KAAK,GAAG,CAACD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,OAAvB,MAAoC,OAAlD;EACA,OAAO;IACLC,qBAAqB,CAACC,IAAD,EAAO;MAC1B,MAAMC,KAAK,GAAGD,IAAI,CAACE,cAAnB,CAD0B,CACS;MACnC;MACA;;MAEA,IAAI,CAACD,KAAL,EAAY;QACV;MACD;;MAED,MAAME,WAAW,GAAGF,KAAK,CAACG,KAAN,CAAY,CAAZ,IAAiBJ,IAAI,CAACK,EAAL,CAAQD,KAAR,CAAc,CAAd,CAArC;;MAEA,IAAIP,KAAK,IAAIM,WAAb,EAA0B;QACxBP,OAAO,CAACU,MAAR,CAAe;UACbC,IAAI,EAAE;YACJC,IAAI,EAAER,IAAI,CAACK,EAAL,CAAQG;UADV,CADO;UAIbC,GAAG,EAAEnB,UAAU,CAACoB,aAAX,CAAyBC,gBAAzB,CAA0CX,IAAI,CAACK,EAA/C,EAAmDF,WAAnD,CAJQ;UAKbS,OAAO,EAAE,0EALI;UAMbZ;QANa,CAAf;MAQD;;MAED,IAAI,CAACH,KAAD,IAAU,CAACM,WAAf,EAA4B;QAC1BP,OAAO,CAACU,MAAR,CAAe;UACbC,IAAI,EAAE;YACJC,IAAI,EAAER,IAAI,CAACK,EAAL,CAAQG;UADV,CADO;UAIbC,GAAG,EAAEnB,UAAU,CAACoB,aAAX,CAAyBG,aAAzB,CAAuCb,IAAI,CAACK,EAA5C,CAJQ;UAKbO,OAAO,EAAE,yEALI;UAMbZ;QANa,CAAf;MAQD;;MAED,IAAI,CAACH,KAAD,IAAUM,WAAW,GAAG,CAA5B,EAA+B;QAC7BP,OAAO,CAACU,MAAR,CAAe;UACbC,IAAI,EAAE;YACJC,IAAI,EAAER,IAAI,CAACK,EAAL,CAAQG;UADV,CADO;UAIbC,GAAG,EAAEnB,UAAU,CAACoB,aAAX,CAAyBC,gBAAzB,CAA0CX,IAAI,CAACK,EAA/C,EAAmDF,WAAW,GAAG,CAAjE,CAJQ;UAKbS,OAAO,EAAE,2EALI;UAMbZ;QANa,CAAf;MAQD;IACF;;EA5CI,CAAP;AA+CD,CAjDD;;AAmDA,IAAIc,QAAQ,GAAG;EACbnB,MADa;EAEboB,IAAI,EAAE;IACJC,OAAO,EAAE;EADL,CAFO;EAKbxB;AALa,CAAf;AAOAL,OAAO,CAACE,OAAR,GAAkByB,QAAlB;AACAG,MAAM,CAAC9B,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}