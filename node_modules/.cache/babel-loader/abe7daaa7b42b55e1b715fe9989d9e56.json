{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.reactLifecyclesCompat = {});\n})(this, function (exports) {\n  'use strict';\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  function componentWillMount() {\n    // Call this.constructor.gDSFP to support sub-classes.\n    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n\n    if (state !== null && state !== undefined) {\n      this.setState(state);\n    }\n  }\n\n  function componentWillReceiveProps(nextProps) {\n    // Call this.constructor.gDSFP to support sub-classes.\n    // Use the setState() updater to ensure state isn't stale in certain edge cases.\n    function updater(prevState) {\n      var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n      return state !== null && state !== undefined ? state : null;\n    } // Binding \"this\" is important for shallow renderer support.\n\n\n    this.setState(updater.bind(this));\n  }\n\n  function componentWillUpdate(nextProps, nextState) {\n    try {\n      var prevProps = this.props;\n      var prevState = this.state;\n      this.props = nextProps;\n      this.state = nextState;\n      this.__reactInternalSnapshotFlag = true;\n      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);\n    } finally {\n      this.props = prevProps;\n      this.state = prevState;\n    }\n  } // React may warn about cWM/cWRP/cWU methods being deprecated.\n  // Add a flag to suppress these warnings for this special case.\n\n\n  componentWillMount.__suppressDeprecationWarning = true;\n  componentWillReceiveProps.__suppressDeprecationWarning = true;\n  componentWillUpdate.__suppressDeprecationWarning = true;\n\n  function polyfill(Component) {\n    var prototype = Component.prototype;\n\n    if (!prototype || !prototype.isReactComponent) {\n      throw new Error('Can only polyfill class components');\n    }\n\n    if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') {\n      return Component;\n    } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Error if any of these lifecycles are present,\n    // Because they would work differently between older and newer (16.3+) versions of React.\n\n\n    var foundWillMountName = null;\n    var foundWillReceivePropsName = null;\n    var foundWillUpdateName = null;\n\n    if (typeof prototype.componentWillMount === 'function') {\n      foundWillMountName = 'componentWillMount';\n    } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n      foundWillMountName = 'UNSAFE_componentWillMount';\n    }\n\n    if (typeof prototype.componentWillReceiveProps === 'function') {\n      foundWillReceivePropsName = 'componentWillReceiveProps';\n    } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n      foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n    }\n\n    if (typeof prototype.componentWillUpdate === 'function') {\n      foundWillUpdateName = 'componentWillUpdate';\n    } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n      foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n    }\n\n    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n      var componentName = Component.displayName || Component.name;\n      var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n      throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') + '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://fb.me/react-async-component-lifecycle-hooks');\n    } // React <= 16.2 does not support static getDerivedStateFromProps.\n    // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n    // Newer versions of React will ignore these lifecycles if gDSFP exists.\n\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      prototype.componentWillMount = componentWillMount;\n      prototype.componentWillReceiveProps = componentWillReceiveProps;\n    } // React <= 16.2 does not support getSnapshotBeforeUpdate.\n    // As a workaround, use cWU to invoke the new lifecycle.\n    // Newer versions of React will ignore that lifecycle if gSBU exists.\n\n\n    if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n      if (typeof prototype.componentDidUpdate !== 'function') {\n        throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');\n      }\n\n      prototype.componentWillUpdate = componentWillUpdate;\n      var componentDidUpdate = prototype.componentDidUpdate;\n\n      prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {\n        // 16.3+ will not execute our will-update method;\n        // It will pass a snapshot value to did-update though.\n        // Older versions will require our polyfilled will-update value.\n        // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n        // Because for <= 15.x versions this might be a \"prevContext\" object.\n        // We also can't just check \"__reactInternalSnapshot\",\n        // Because get-snapshot might return a falsy value.\n        // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n        var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;\n        componentDidUpdate.call(this, prevProps, prevState, snapshot);\n      };\n    }\n\n    return Component;\n  }\n\n  exports.polyfill = polyfill;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","reactLifecyclesCompat","componentWillMount","state","constructor","getDerivedStateFromProps","props","undefined","setState","componentWillReceiveProps","nextProps","updater","prevState","bind","componentWillUpdate","nextState","prevProps","__reactInternalSnapshotFlag","__reactInternalSnapshot","getSnapshotBeforeUpdate","__suppressDeprecationWarning","polyfill","Component","prototype","isReactComponent","Error","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","componentName","displayName","name","newApiName","componentDidUpdate","componentDidUpdatePolyfill","maybeSnapshot","snapshot","call","Object","defineProperty","value"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/react-lifecycles-compat/react-lifecycles-compat.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.reactLifecyclesCompat = {})));\n}(this, (function (exports) { 'use strict';\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  function componentWillMount() {\n    // Call this.constructor.gDSFP to support sub-classes.\n    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n    if (state !== null && state !== undefined) {\n      this.setState(state);\n    }\n  }\n\n  function componentWillReceiveProps(nextProps) {\n    // Call this.constructor.gDSFP to support sub-classes.\n    // Use the setState() updater to ensure state isn't stale in certain edge cases.\n    function updater(prevState) {\n      var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n      return state !== null && state !== undefined ? state : null;\n    }\n    // Binding \"this\" is important for shallow renderer support.\n    this.setState(updater.bind(this));\n  }\n\n  function componentWillUpdate(nextProps, nextState) {\n    try {\n      var prevProps = this.props;\n      var prevState = this.state;\n      this.props = nextProps;\n      this.state = nextState;\n      this.__reactInternalSnapshotFlag = true;\n      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n        prevProps,\n        prevState\n      );\n    } finally {\n      this.props = prevProps;\n      this.state = prevState;\n    }\n  }\n\n  // React may warn about cWM/cWRP/cWU methods being deprecated.\n  // Add a flag to suppress these warnings for this special case.\n  componentWillMount.__suppressDeprecationWarning = true;\n  componentWillReceiveProps.__suppressDeprecationWarning = true;\n  componentWillUpdate.__suppressDeprecationWarning = true;\n\n  function polyfill(Component) {\n    var prototype = Component.prototype;\n\n    if (!prototype || !prototype.isReactComponent) {\n      throw new Error('Can only polyfill class components');\n    }\n\n    if (\n      typeof Component.getDerivedStateFromProps !== 'function' &&\n      typeof prototype.getSnapshotBeforeUpdate !== 'function'\n    ) {\n      return Component;\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Error if any of these lifecycles are present,\n    // Because they would work differently between older and newer (16.3+) versions of React.\n    var foundWillMountName = null;\n    var foundWillReceivePropsName = null;\n    var foundWillUpdateName = null;\n    if (typeof prototype.componentWillMount === 'function') {\n      foundWillMountName = 'componentWillMount';\n    } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n      foundWillMountName = 'UNSAFE_componentWillMount';\n    }\n    if (typeof prototype.componentWillReceiveProps === 'function') {\n      foundWillReceivePropsName = 'componentWillReceiveProps';\n    } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n      foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n    }\n    if (typeof prototype.componentWillUpdate === 'function') {\n      foundWillUpdateName = 'componentWillUpdate';\n    } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n      foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n    }\n    if (\n      foundWillMountName !== null ||\n      foundWillReceivePropsName !== null ||\n      foundWillUpdateName !== null\n    ) {\n      var componentName = Component.displayName || Component.name;\n      var newApiName =\n        typeof Component.getDerivedStateFromProps === 'function'\n          ? 'getDerivedStateFromProps()'\n          : 'getSnapshotBeforeUpdate()';\n\n      throw Error(\n        'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n          componentName +\n          ' uses ' +\n          newApiName +\n          ' but also contains the following legacy lifecycles:' +\n          (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') +\n          (foundWillReceivePropsName !== null\n            ? '\\n  ' + foundWillReceivePropsName\n            : '') +\n          (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') +\n          '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' +\n          'https://fb.me/react-async-component-lifecycle-hooks'\n      );\n    }\n\n    // React <= 16.2 does not support static getDerivedStateFromProps.\n    // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n    // Newer versions of React will ignore these lifecycles if gDSFP exists.\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      prototype.componentWillMount = componentWillMount;\n      prototype.componentWillReceiveProps = componentWillReceiveProps;\n    }\n\n    // React <= 16.2 does not support getSnapshotBeforeUpdate.\n    // As a workaround, use cWU to invoke the new lifecycle.\n    // Newer versions of React will ignore that lifecycle if gSBU exists.\n    if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n      if (typeof prototype.componentDidUpdate !== 'function') {\n        throw new Error(\n          'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'\n        );\n      }\n\n      prototype.componentWillUpdate = componentWillUpdate;\n\n      var componentDidUpdate = prototype.componentDidUpdate;\n\n      prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n        prevProps,\n        prevState,\n        maybeSnapshot\n      ) {\n        // 16.3+ will not execute our will-update method;\n        // It will pass a snapshot value to did-update though.\n        // Older versions will require our polyfilled will-update value.\n        // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n        // Because for <= 15.x versions this might be a \"prevContext\" object.\n        // We also can't just check \"__reactInternalSnapshot\",\n        // Because get-snapshot might return a falsy value.\n        // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n        var snapshot = this.__reactInternalSnapshotFlag\n          ? this.__reactInternalSnapshot\n          : maybeSnapshot;\n\n        componentDidUpdate.call(this, prevProps, prevState, snapshot);\n      };\n    }\n\n    return Component;\n  }\n\n  exports.polyfill = polyfill;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}