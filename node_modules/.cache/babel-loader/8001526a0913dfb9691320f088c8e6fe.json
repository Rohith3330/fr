{"ast":null,"code":"/**\n * @fileoverview A rule to disallow `this` keywords in contexts where the value of `this` is `undefined`.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines if the given code path is a code path with lexical `this` binding.\n * That is, if `this` within the code path refers to `this` of surrounding code path.\n * @param {CodePath} codePath Code path.\n * @param {ASTNode} node Node that started the code path.\n * @returns {boolean} `true` if it is a code path with lexical `this` binding.\n */\n\n\nfunction isCodePathWithLexicalThis(codePath, node) {\n  return codePath.origin === \"function\" && node.type === \"ArrowFunctionExpression\";\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow use of `this` in contexts where the value of `this` is `undefined`\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-invalid-this\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        capIsConstructor: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedThis: \"Unexpected 'this'.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const capIsConstructor = options.capIsConstructor !== false;\n    const stack = [],\n          sourceCode = context.getSourceCode();\n    /**\n     * Gets the current checking context.\n     *\n     * The return value has a flag that whether or not `this` keyword is valid.\n     * The flag is initialized when got at the first time.\n     * @returns {{valid: boolean}}\n     *   an object which has a flag that whether or not `this` keyword is valid.\n     */\n\n    stack.getCurrent = function () {\n      const current = this[this.length - 1];\n\n      if (!current.init) {\n        current.init = true;\n        current.valid = !astUtils.isDefaultThisBinding(current.node, sourceCode, {\n          capIsConstructor\n        });\n      }\n\n      return current;\n    };\n\n    return {\n      onCodePathStart(codePath, node) {\n        if (isCodePathWithLexicalThis(codePath, node)) {\n          return;\n        }\n\n        if (codePath.origin === \"program\") {\n          const scope = context.getScope();\n          const features = context.parserOptions.ecmaFeatures || {}; // `this` at the top level of scripts always refers to the global object\n\n          stack.push({\n            init: true,\n            node,\n            valid: !(node.sourceType === \"module\" || features.globalReturn && scope.childScopes[0].isStrict)\n          });\n          return;\n        }\n        /*\n         * `init: false` means that `valid` isn't determined yet.\n         * Most functions don't use `this`, and the calculation for `valid`\n         * is relatively costly, so we'll calculate it lazily when the first\n         * `this` within the function is traversed. A special case are non-strict\n         * functions, because `this` refers to the global object and therefore is\n         * always valid, so we can set `init: true` right away.\n         */\n\n\n        stack.push({\n          init: !context.getScope().isStrict,\n          node,\n          valid: true\n        });\n      },\n\n      onCodePathEnd(codePath, node) {\n        if (isCodePathWithLexicalThis(codePath, node)) {\n          return;\n        }\n\n        stack.pop();\n      },\n\n      // Reports if `this` of the current context is invalid.\n      ThisExpression(node) {\n        const current = stack.getCurrent();\n\n        if (current && !current.valid) {\n          context.report({\n            node,\n            messageId: \"unexpectedThis\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","isCodePathWithLexicalThis","codePath","node","origin","type","module","exports","meta","docs","description","recommended","url","schema","properties","capIsConstructor","default","additionalProperties","messages","unexpectedThis","create","context","options","stack","sourceCode","getSourceCode","getCurrent","current","length","init","valid","isDefaultThisBinding","onCodePathStart","scope","getScope","features","parserOptions","ecmaFeatures","push","sourceType","globalReturn","childScopes","isStrict","onCodePathEnd","pop","ThisExpression","report","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-invalid-this.js"],"sourcesContent":["/**\n * @fileoverview A rule to disallow `this` keywords in contexts where the value of `this` is `undefined`.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines if the given code path is a code path with lexical `this` binding.\n * That is, if `this` within the code path refers to `this` of surrounding code path.\n * @param {CodePath} codePath Code path.\n * @param {ASTNode} node Node that started the code path.\n * @returns {boolean} `true` if it is a code path with lexical `this` binding.\n */\nfunction isCodePathWithLexicalThis(codePath, node) {\n    return codePath.origin === \"function\" && node.type === \"ArrowFunctionExpression\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow use of `this` in contexts where the value of `this` is `undefined`\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-invalid-this\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    capIsConstructor: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedThis: \"Unexpected 'this'.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const capIsConstructor = options.capIsConstructor !== false;\n        const stack = [],\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Gets the current checking context.\n         *\n         * The return value has a flag that whether or not `this` keyword is valid.\n         * The flag is initialized when got at the first time.\n         * @returns {{valid: boolean}}\n         *   an object which has a flag that whether or not `this` keyword is valid.\n         */\n        stack.getCurrent = function() {\n            const current = this[this.length - 1];\n\n            if (!current.init) {\n                current.init = true;\n                current.valid = !astUtils.isDefaultThisBinding(\n                    current.node,\n                    sourceCode,\n                    { capIsConstructor }\n                );\n            }\n            return current;\n        };\n\n        return {\n\n            onCodePathStart(codePath, node) {\n                if (isCodePathWithLexicalThis(codePath, node)) {\n                    return;\n                }\n\n                if (codePath.origin === \"program\") {\n                    const scope = context.getScope();\n                    const features = context.parserOptions.ecmaFeatures || {};\n\n                    // `this` at the top level of scripts always refers to the global object\n                    stack.push({\n                        init: true,\n                        node,\n                        valid: !(\n                            node.sourceType === \"module\" ||\n                            (features.globalReturn && scope.childScopes[0].isStrict)\n                        )\n                    });\n\n                    return;\n                }\n\n                /*\n                 * `init: false` means that `valid` isn't determined yet.\n                 * Most functions don't use `this`, and the calculation for `valid`\n                 * is relatively costly, so we'll calculate it lazily when the first\n                 * `this` within the function is traversed. A special case are non-strict\n                 * functions, because `this` refers to the global object and therefore is\n                 * always valid, so we can set `init: true` right away.\n                 */\n                stack.push({\n                    init: !context.getScope().isStrict,\n                    node,\n                    valid: true\n                });\n            },\n\n            onCodePathEnd(codePath, node) {\n                if (isCodePathWithLexicalThis(codePath, node)) {\n                    return;\n                }\n\n                stack.pop();\n            },\n\n            // Reports if `this` of the current context is invalid.\n            ThisExpression(node) {\n                const current = stack.getCurrent();\n\n                if (current && !current.valid) {\n                    context.report({\n                        node,\n                        messageId: \"unexpectedThis\"\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}