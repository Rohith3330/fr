{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.proposalSyntaxPlugins = exports.proposalPlugins = exports.pluginSyntaxMap = void 0;\nconst proposalPlugins = new Set();\nexports.proposalPlugins = proposalPlugins;\nconst proposalSyntaxPlugins = [\"syntax-import-assertions\"];\nexports.proposalSyntaxPlugins = proposalSyntaxPlugins;\nconst pluginSyntaxObject = {\n  \"proposal-async-generator-functions\": \"syntax-async-generators\",\n  \"proposal-class-properties\": \"syntax-class-properties\",\n  \"proposal-class-static-block\": \"syntax-class-static-block\",\n  \"proposal-json-strings\": \"syntax-json-strings\",\n  \"proposal-nullish-coalescing-operator\": \"syntax-nullish-coalescing-operator\",\n  \"proposal-numeric-separator\": \"syntax-numeric-separator\",\n  \"proposal-object-rest-spread\": \"syntax-object-rest-spread\",\n  \"proposal-optional-catch-binding\": \"syntax-optional-catch-binding\",\n  \"proposal-optional-chaining\": \"syntax-optional-chaining\",\n  \"proposal-private-methods\": \"syntax-class-properties\",\n  \"proposal-private-property-in-object\": \"syntax-private-property-in-object\",\n  \"proposal-unicode-property-regex\": null\n};\nconst pluginSyntaxEntries = Object.keys(pluginSyntaxObject).map(function (key) {\n  return [key, pluginSyntaxObject[key]];\n});\nconst pluginSyntaxMap = new Map(pluginSyntaxEntries);\nexports.pluginSyntaxMap = pluginSyntaxMap;","map":{"version":3,"mappings":";;;;;;AAKA,MAAMA,eAAe,GAAG,IAAIC,GAAJ,EAAxB;;AAIA,MAAMC,qBAAqB,GAAG,CAAC,0BAAD,CAA9B;;AAGA,MAAMC,kBAAkB,GAAG;EACzB,sCAAsC,yBADb;EAEzB,6BAA6B,yBAFJ;EAGzB,+BAA+B,2BAHN;EAIzB,yBAAyB,qBAJA;EAKzB,wCAAwC,oCALf;EAMzB,8BAA8B,0BANL;EAOzB,+BAA+B,2BAPN;EAQzB,mCAAmC,+BARV;EASzB,8BAA8B,0BATL;EAWzB,4BAA4B,yBAXH;EAYzB,uCAAuC,mCAZd;EAazB,mCAAmC;AAbV,CAA3B;AAgBA,MAAMC,mBAAmB,GAAGC,MAAM,CAACC,IAAPD,CAAYF,kBAAZE,EAAgCE,GAAhCF,CAE1B,UAAUG,GAAV,EAAe;EACf,OAAO,CACLA,GADK,EAGLL,kBAAkB,CAACK,GAAD,CAHb,CAAP;AAH0B,EAA5B;AAUA,MAAMC,eAAe,GAAG,IAAIC,GAAJ,CAAQN,mBAAR,CAAxB","names":["proposalPlugins","Set","proposalSyntaxPlugins","pluginSyntaxObject","pluginSyntaxEntries","Object","keys","map","key","pluginSyntaxMap","Map"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\preset-env\\src\\shipped-proposals.ts"],"sourcesContent":["// TODO(Babel 8): Remove this file\n/* eslint sort-keys: \"error\" */\n// These mappings represent the transform plugins that have been\n// shipped by browsers, and are enabled by the `shippedProposals` option.\n\nconst proposalPlugins = new Set<string>();\n\n// proposal syntax plugins enabled by the `shippedProposals` option.\n// Unlike proposalPlugins above, they are independent of compiler targets.\nconst proposalSyntaxPlugins = [\"syntax-import-assertions\"] as const;\n\n// use intermediary object to enforce alphabetical key order\nconst pluginSyntaxObject = {\n  \"proposal-async-generator-functions\": \"syntax-async-generators\",\n  \"proposal-class-properties\": \"syntax-class-properties\",\n  \"proposal-class-static-block\": \"syntax-class-static-block\",\n  \"proposal-json-strings\": \"syntax-json-strings\",\n  \"proposal-nullish-coalescing-operator\": \"syntax-nullish-coalescing-operator\",\n  \"proposal-numeric-separator\": \"syntax-numeric-separator\",\n  \"proposal-object-rest-spread\": \"syntax-object-rest-spread\",\n  \"proposal-optional-catch-binding\": \"syntax-optional-catch-binding\",\n  \"proposal-optional-chaining\": \"syntax-optional-chaining\",\n  // note: we don't have syntax-private-methods\n  \"proposal-private-methods\": \"syntax-class-properties\",\n  \"proposal-private-property-in-object\": \"syntax-private-property-in-object\",\n  \"proposal-unicode-property-regex\": null as null,\n} as const;\n\nconst pluginSyntaxEntries = Object.keys(pluginSyntaxObject).map<\n  [string, string | null]\n>(function (key) {\n  return [\n    key,\n    // @ts-expect-error key has been guarded\n    pluginSyntaxObject[key],\n  ];\n});\n\nconst pluginSyntaxMap = new Map(pluginSyntaxEntries);\n\nexport { proposalPlugins, proposalSyntaxPlugins, pluginSyntaxMap };\n"]},"metadata":{},"sourceType":"script"}