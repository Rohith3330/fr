{"ast":null,"code":"let fs = require('fs');\n\nlet path = require('path');\n\nlet proc = require('child_process');\n\nconst PROJECT_DIR = process.cwd();\nprocess.env.PROJECT_DIR = PROJECT_DIR;\nnamespace('doc', function () {\n  task('generate', ['doc:clobber'], function () {\n    var cmd = '../node-jsdoc-toolkit/app/run.js -n -r=100 ' + '-t=../node-jsdoc-toolkit/templates/codeview -d=./doc/ ./lib';\n    jake.logger.log('Generating docs ...');\n    jake.exec([cmd], function () {\n      jake.logger.log('Done.');\n      complete();\n    });\n  }, {\n    async: true\n  });\n  task('clobber', function () {\n    var cmd = 'rm -fr ./doc/*';\n    jake.exec([cmd], function () {\n      jake.logger.log('Clobbered old docs.');\n      complete();\n    });\n  }, {\n    async: true\n  });\n});\ndesc('Generate docs for Jake');\ntask('doc', ['doc:generate']);\nnpmPublishTask('jake', function () {\n  this.packageFiles.include(['Makefile', 'jakefile.js', 'README.md', 'package.json', 'usage.txt', 'lib/**', 'bin/**', 'test/**']);\n  this.packageFiles.exclude(['test/tmp']);\n});\njake.Task['publish:package'].directory = PROJECT_DIR;\nnamespace('test', function () {\n  let integrationTest = task('integration', async function () {\n    let testArgs = [];\n\n    if (process.env.filter) {\n      testArgs.push(process.env.filter);\n    } else {\n      testArgs.push('*.js');\n    }\n\n    let spawned = proc.spawn(`${PROJECT_DIR}/node_modules/.bin/mocha`, testArgs, {\n      stdio: 'inherit'\n    });\n    return new Promise((resolve, reject) => {\n      spawned.on('exit', () => {\n        resolve();\n      });\n    });\n  });\n  integrationTest.directory = `${PROJECT_DIR}/test/integration`;\n  let integrationClobber = task('integrationClobber', function () {\n    proc.execSync('rm -rf package.json pkg tmp_publish');\n  });\n  integrationClobber.directory = `${PROJECT_DIR}/test/integration`;\n  let unitTest = task('unit', async function () {\n    let testArgs = [];\n\n    if (process.env.filter) {\n      testArgs.push(process.env.filter);\n    } else {\n      testArgs.push('*.js');\n    }\n\n    let spawned = proc.spawn(`${PROJECT_DIR}/node_modules/.bin/mocha`, testArgs, {\n      stdio: 'inherit'\n    });\n  });\n  unitTest.directory = `${PROJECT_DIR}/test/unit`;\n});\ndesc('Runs all tests');\ntask('test', ['test:unit', 'test:integration', 'test:integrationClobber']);","map":{"version":3,"names":["fs","require","path","proc","PROJECT_DIR","process","cwd","env","namespace","task","cmd","jake","logger","log","exec","complete","async","desc","npmPublishTask","packageFiles","include","exclude","Task","directory","integrationTest","testArgs","filter","push","spawned","spawn","stdio","Promise","resolve","reject","on","integrationClobber","execSync","unitTest"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jake/jakefile.js"],"sourcesContent":["let fs = require('fs')\nlet path = require('path');\nlet proc = require('child_process');\n\nconst PROJECT_DIR = process.cwd();\nprocess.env.PROJECT_DIR = PROJECT_DIR;\n\nnamespace('doc', function () {\n  task('generate', ['doc:clobber'], function () {\n    var cmd = '../node-jsdoc-toolkit/app/run.js -n -r=100 ' +\n        '-t=../node-jsdoc-toolkit/templates/codeview -d=./doc/ ./lib';\n    jake.logger.log('Generating docs ...');\n    jake.exec([cmd], function () {\n      jake.logger.log('Done.');\n      complete();\n    });\n  }, {async: true});\n\n  task('clobber', function () {\n    var cmd = 'rm -fr ./doc/*';\n    jake.exec([cmd], function () {\n      jake.logger.log('Clobbered old docs.');\n      complete();\n    });\n  }, {async: true});\n\n});\n\ndesc('Generate docs for Jake');\ntask('doc', ['doc:generate']);\n\nnpmPublishTask('jake', function () {\n  this.packageFiles.include([\n    'Makefile',\n    'jakefile.js',\n    'README.md',\n    'package.json',\n    'usage.txt',\n    'lib/**',\n    'bin/**',\n    'test/**'\n    ]);\n  this.packageFiles.exclude([\n    'test/tmp'\n  ]);\n});\n\njake.Task['publish:package'].directory = PROJECT_DIR;\n\nnamespace('test', function () {\n\n  let integrationTest = task('integration', async function () {\n    let testArgs = [];\n    if (process.env.filter) {\n      testArgs.push(process.env.filter);\n    }\n    else {\n      testArgs.push('*.js');\n    }\n    let spawned = proc.spawn(`${PROJECT_DIR}/node_modules/.bin/mocha`, testArgs, {\n      stdio: 'inherit'\n    });\n    return new Promise((resolve, reject) => {\n      spawned.on('exit', () => {\n        resolve();\n      });\n    });\n\n  });\n  integrationTest.directory = `${PROJECT_DIR}/test/integration`;\n\n  let integrationClobber = task('integrationClobber', function () {\n    proc.execSync('rm -rf package.json pkg tmp_publish');\n  });\n  integrationClobber.directory = `${PROJECT_DIR}/test/integration`;\n\n  let unitTest = task('unit', async function () {\n    let testArgs = [];\n    if (process.env.filter) {\n      testArgs.push(process.env.filter);\n    }\n    else {\n      testArgs.push('*.js');\n    }\n    let spawned = proc.spawn(`${PROJECT_DIR}/node_modules/.bin/mocha`, testArgs, {\n      stdio: 'inherit'\n    });\n  });\n  unitTest.directory = `${PROJECT_DIR}/test/unit`;\n\n});\n\ndesc('Runs all tests');\ntask('test', ['test:unit', 'test:integration', 'test:integrationClobber']);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}