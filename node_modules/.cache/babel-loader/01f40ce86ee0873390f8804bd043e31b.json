{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utilities = require(\"../utilities\");\n\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst create = context => {\n  const always = (context.options[0] || 'always') === 'always';\n\n  if (always) {\n    return {\n      ObjectTypeIndexer(node) {\n        const id = (0, _utilities.getParameterName)(node, context);\n        const rawKeyType = context.getSourceCode().getText(node.key);\n\n        if (id === null) {\n          context.report({\n            fix(fixer) {\n              return fixer.replaceText(node.key, 'key: ' + rawKeyType);\n            },\n\n            message: 'All indexers must be declared with key name.',\n            node\n          });\n        }\n      }\n\n    };\n  }\n\n  return {};\n};\n\nvar _default = {\n  create,\n  meta: {\n    fixable: 'code'\n  },\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_utilities","require","schema","enum","type","create","context","always","options","ObjectTypeIndexer","node","id","getParameterName","rawKeyType","getSourceCode","getText","key","report","fix","fixer","replaceText","message","_default","meta","fixable","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/requireIndexerName.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utilities = require(\"../utilities\");\n\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst create = context => {\n  const always = (context.options[0] || 'always') === 'always';\n\n  if (always) {\n    return {\n      ObjectTypeIndexer(node) {\n        const id = (0, _utilities.getParameterName)(node, context);\n        const rawKeyType = context.getSourceCode().getText(node.key);\n\n        if (id === null) {\n          context.report({\n            fix(fixer) {\n              return fixer.replaceText(node.key, 'key: ' + rawKeyType);\n            },\n\n            message: 'All indexers must be declared with key name.',\n            node\n          });\n        }\n      }\n\n    };\n  }\n\n  return {};\n};\n\nvar _default = {\n  create,\n  meta: {\n    fixable: 'code'\n  },\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AAEA,MAAMC,MAAM,GAAG,CAAC;EACdC,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX,CADQ;EAEdC,IAAI,EAAE;AAFQ,CAAD,CAAf;;AAKA,MAAMC,MAAM,GAAGC,OAAO,IAAI;EACxB,MAAMC,MAAM,GAAG,CAACD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,QAAvB,MAAqC,QAApD;;EAEA,IAAID,MAAJ,EAAY;IACV,OAAO;MACLE,iBAAiB,CAACC,IAAD,EAAO;QACtB,MAAMC,EAAE,GAAG,CAAC,GAAGX,UAAU,CAACY,gBAAf,EAAiCF,IAAjC,EAAuCJ,OAAvC,CAAX;QACA,MAAMO,UAAU,GAAGP,OAAO,CAACQ,aAAR,GAAwBC,OAAxB,CAAgCL,IAAI,CAACM,GAArC,CAAnB;;QAEA,IAAIL,EAAE,KAAK,IAAX,EAAiB;UACfL,OAAO,CAACW,MAAR,CAAe;YACbC,GAAG,CAACC,KAAD,EAAQ;cACT,OAAOA,KAAK,CAACC,WAAN,CAAkBV,IAAI,CAACM,GAAvB,EAA4B,UAAUH,UAAtC,CAAP;YACD,CAHY;;YAKbQ,OAAO,EAAE,8CALI;YAMbX;UANa,CAAf;QAQD;MACF;;IAfI,CAAP;EAkBD;;EAED,OAAO,EAAP;AACD,CAzBD;;AA2BA,IAAIY,QAAQ,GAAG;EACbjB,MADa;EAEbkB,IAAI,EAAE;IACJC,OAAO,EAAE;EADL,CAFO;EAKbtB;AALa,CAAf;AAOAL,OAAO,CAACE,OAAR,GAAkBuB,QAAlB;AACAG,MAAM,CAAC5B,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}