{"ast":null,"code":"'use strict';\n\nvar test = require('tape');\n\nvar qs = require('../');\n\nvar utils = require('../lib/utils');\n\nvar iconv = require('iconv-lite');\n\nvar SaferBuffer = require('safer-buffer').Buffer;\n\ntest('parse()', function (t) {\n  t.test('parses a simple string', function (st) {\n    st.deepEqual(qs.parse('0=foo'), {\n      0: 'foo'\n    });\n    st.deepEqual(qs.parse('foo=c++'), {\n      foo: 'c  '\n    });\n    st.deepEqual(qs.parse('a[>=]=23'), {\n      a: {\n        '>=': '23'\n      }\n    });\n    st.deepEqual(qs.parse('a[<=>]==23'), {\n      a: {\n        '<=>': '=23'\n      }\n    });\n    st.deepEqual(qs.parse('a[==]=23'), {\n      a: {\n        '==': '23'\n      }\n    });\n    st.deepEqual(qs.parse('foo', {\n      strictNullHandling: true\n    }), {\n      foo: null\n    });\n    st.deepEqual(qs.parse('foo'), {\n      foo: ''\n    });\n    st.deepEqual(qs.parse('foo='), {\n      foo: ''\n    });\n    st.deepEqual(qs.parse('foo=bar'), {\n      foo: 'bar'\n    });\n    st.deepEqual(qs.parse(' foo = bar = baz '), {\n      ' foo ': ' bar = baz '\n    });\n    st.deepEqual(qs.parse('foo=bar=baz'), {\n      foo: 'bar=baz'\n    });\n    st.deepEqual(qs.parse('foo=bar&bar=baz'), {\n      foo: 'bar',\n      bar: 'baz'\n    });\n    st.deepEqual(qs.parse('foo2=bar2&baz2='), {\n      foo2: 'bar2',\n      baz2: ''\n    });\n    st.deepEqual(qs.parse('foo=bar&baz', {\n      strictNullHandling: true\n    }), {\n      foo: 'bar',\n      baz: null\n    });\n    st.deepEqual(qs.parse('foo=bar&baz'), {\n      foo: 'bar',\n      baz: ''\n    });\n    st.deepEqual(qs.parse('cht=p3&chd=t:60,40&chs=250x100&chl=Hello|World'), {\n      cht: 'p3',\n      chd: 't:60,40',\n      chs: '250x100',\n      chl: 'Hello|World'\n    });\n    st.end();\n  });\n  t.test('arrayFormat: brackets allows only explicit arrays', function (st) {\n    st.deepEqual(qs.parse('a[]=b&a[]=c', {\n      arrayFormat: 'brackets'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      arrayFormat: 'brackets'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b,c', {\n      arrayFormat: 'brackets'\n    }), {\n      a: 'b,c'\n    });\n    st.deepEqual(qs.parse('a=b&a=c', {\n      arrayFormat: 'brackets'\n    }), {\n      a: ['b', 'c']\n    });\n    st.end();\n  });\n  t.test('arrayFormat: indices allows only indexed arrays', function (st) {\n    st.deepEqual(qs.parse('a[]=b&a[]=c', {\n      arrayFormat: 'indices'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      arrayFormat: 'indices'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b,c', {\n      arrayFormat: 'indices'\n    }), {\n      a: 'b,c'\n    });\n    st.deepEqual(qs.parse('a=b&a=c', {\n      arrayFormat: 'indices'\n    }), {\n      a: ['b', 'c']\n    });\n    st.end();\n  });\n  t.test('arrayFormat: comma allows only comma-separated arrays', function (st) {\n    st.deepEqual(qs.parse('a[]=b&a[]=c', {\n      arrayFormat: 'comma'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      arrayFormat: 'comma'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b,c', {\n      arrayFormat: 'comma'\n    }), {\n      a: 'b,c'\n    });\n    st.deepEqual(qs.parse('a=b&a=c', {\n      arrayFormat: 'comma'\n    }), {\n      a: ['b', 'c']\n    });\n    st.end();\n  });\n  t.test('arrayFormat: repeat allows only repeated values', function (st) {\n    st.deepEqual(qs.parse('a[]=b&a[]=c', {\n      arrayFormat: 'repeat'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      arrayFormat: 'repeat'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b,c', {\n      arrayFormat: 'repeat'\n    }), {\n      a: 'b,c'\n    });\n    st.deepEqual(qs.parse('a=b&a=c', {\n      arrayFormat: 'repeat'\n    }), {\n      a: ['b', 'c']\n    });\n    st.end();\n  });\n  t.test('allows enabling dot notation', function (st) {\n    st.deepEqual(qs.parse('a.b=c'), {\n      'a.b': 'c'\n    });\n    st.deepEqual(qs.parse('a.b=c', {\n      allowDots: true\n    }), {\n      a: {\n        b: 'c'\n      }\n    });\n    st.end();\n  });\n  t.deepEqual(qs.parse('a[b]=c'), {\n    a: {\n      b: 'c'\n    }\n  }, 'parses a single nested string');\n  t.deepEqual(qs.parse('a[b][c]=d'), {\n    a: {\n      b: {\n        c: 'd'\n      }\n    }\n  }, 'parses a double nested string');\n  t.deepEqual(qs.parse('a[b][c][d][e][f][g][h]=i'), {\n    a: {\n      b: {\n        c: {\n          d: {\n            e: {\n              f: {\n                '[g][h]': 'i'\n              }\n            }\n          }\n        }\n      }\n    }\n  }, 'defaults to a depth of 5');\n  t.test('only parses one level when depth = 1', function (st) {\n    st.deepEqual(qs.parse('a[b][c]=d', {\n      depth: 1\n    }), {\n      a: {\n        b: {\n          '[c]': 'd'\n        }\n      }\n    });\n    st.deepEqual(qs.parse('a[b][c][d]=e', {\n      depth: 1\n    }), {\n      a: {\n        b: {\n          '[c][d]': 'e'\n        }\n      }\n    });\n    st.end();\n  });\n  t.test('uses original key when depth = 0', function (st) {\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      depth: 0\n    }), {\n      'a[0]': 'b',\n      'a[1]': 'c'\n    });\n    st.deepEqual(qs.parse('a[0][0]=b&a[0][1]=c&a[1]=d&e=2', {\n      depth: 0\n    }), {\n      'a[0][0]': 'b',\n      'a[0][1]': 'c',\n      'a[1]': 'd',\n      e: '2'\n    });\n    st.end();\n  });\n  t.test('uses original key when depth = false', function (st) {\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      depth: false\n    }), {\n      'a[0]': 'b',\n      'a[1]': 'c'\n    });\n    st.deepEqual(qs.parse('a[0][0]=b&a[0][1]=c&a[1]=d&e=2', {\n      depth: false\n    }), {\n      'a[0][0]': 'b',\n      'a[0][1]': 'c',\n      'a[1]': 'd',\n      e: '2'\n    });\n    st.end();\n  });\n  t.deepEqual(qs.parse('a=b&a=c'), {\n    a: ['b', 'c']\n  }, 'parses a simple array');\n  t.test('parses an explicit array', function (st) {\n    st.deepEqual(qs.parse('a[]=b'), {\n      a: ['b']\n    });\n    st.deepEqual(qs.parse('a[]=b&a[]=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[]=b&a[]=c&a[]=d'), {\n      a: ['b', 'c', 'd']\n    });\n    st.end();\n  });\n  t.test('parses a mix of simple and explicit arrays', function (st) {\n    st.deepEqual(qs.parse('a=b&a[]=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[]=b&a=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b&a[0]=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[1]=b&a=c', {\n      arrayLimit: 20\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[]=b&a=c', {\n      arrayLimit: 0\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[]=b&a=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b&a[1]=c', {\n      arrayLimit: 20\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b&a[]=c', {\n      arrayLimit: 0\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b&a[]=c'), {\n      a: ['b', 'c']\n    });\n    st.end();\n  });\n  t.test('parses a nested array', function (st) {\n    st.deepEqual(qs.parse('a[b][]=c&a[b][]=d'), {\n      a: {\n        b: ['c', 'd']\n      }\n    });\n    st.deepEqual(qs.parse('a[>=]=25'), {\n      a: {\n        '>=': '25'\n      }\n    });\n    st.end();\n  });\n  t.test('allows to specify array indices', function (st) {\n    st.deepEqual(qs.parse('a[1]=c&a[0]=b&a[2]=d'), {\n      a: ['b', 'c', 'd']\n    });\n    st.deepEqual(qs.parse('a[1]=c&a[0]=b'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[1]=c', {\n      arrayLimit: 20\n    }), {\n      a: ['c']\n    });\n    st.deepEqual(qs.parse('a[1]=c', {\n      arrayLimit: 0\n    }), {\n      a: {\n        1: 'c'\n      }\n    });\n    st.deepEqual(qs.parse('a[1]=c'), {\n      a: ['c']\n    });\n    st.end();\n  });\n  t.test('limits specific array indices to arrayLimit', function (st) {\n    st.deepEqual(qs.parse('a[20]=a', {\n      arrayLimit: 20\n    }), {\n      a: ['a']\n    });\n    st.deepEqual(qs.parse('a[21]=a', {\n      arrayLimit: 20\n    }), {\n      a: {\n        21: 'a'\n      }\n    });\n    st.end();\n  });\n  t.deepEqual(qs.parse('a[12b]=c'), {\n    a: {\n      '12b': 'c'\n    }\n  }, 'supports keys that begin with a number');\n  t.test('supports encoded = signs', function (st) {\n    st.deepEqual(qs.parse('he%3Dllo=th%3Dere'), {\n      'he=llo': 'th=ere'\n    });\n    st.end();\n  });\n  t.test('is ok with url encoded strings', function (st) {\n    st.deepEqual(qs.parse('a[b%20c]=d'), {\n      a: {\n        'b c': 'd'\n      }\n    });\n    st.deepEqual(qs.parse('a[b]=c%20d'), {\n      a: {\n        b: 'c d'\n      }\n    });\n    st.end();\n  });\n  t.test('allows brackets in the value', function (st) {\n    st.deepEqual(qs.parse('pets=[\"tobi\"]'), {\n      pets: '[\"tobi\"]'\n    });\n    st.deepEqual(qs.parse('operators=[\">=\", \"<=\"]'), {\n      operators: '[\">=\", \"<=\"]'\n    });\n    st.end();\n  });\n  t.test('allows empty values', function (st) {\n    st.deepEqual(qs.parse(''), {});\n    st.deepEqual(qs.parse(null), {});\n    st.deepEqual(qs.parse(undefined), {});\n    st.end();\n  });\n  t.test('transforms arrays to objects', function (st) {\n    st.deepEqual(qs.parse('foo[0]=bar&foo[bad]=baz'), {\n      foo: {\n        0: 'bar',\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo[bad]=baz&foo[0]=bar'), {\n      foo: {\n        bad: 'baz',\n        0: 'bar'\n      }\n    });\n    st.deepEqual(qs.parse('foo[bad]=baz&foo[]=bar'), {\n      foo: {\n        bad: 'baz',\n        0: 'bar'\n      }\n    });\n    st.deepEqual(qs.parse('foo[]=bar&foo[bad]=baz'), {\n      foo: {\n        0: 'bar',\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo[bad]=baz&foo[]=bar&foo[]=foo'), {\n      foo: {\n        bad: 'baz',\n        0: 'bar',\n        1: 'foo'\n      }\n    });\n    st.deepEqual(qs.parse('foo[0][a]=a&foo[0][b]=b&foo[1][a]=aa&foo[1][b]=bb'), {\n      foo: [{\n        a: 'a',\n        b: 'b'\n      }, {\n        a: 'aa',\n        b: 'bb'\n      }]\n    });\n    st.deepEqual(qs.parse('a[]=b&a[t]=u&a[hasOwnProperty]=c', {\n      allowPrototypes: false\n    }), {\n      a: {\n        0: 'b',\n        t: 'u'\n      }\n    });\n    st.deepEqual(qs.parse('a[]=b&a[t]=u&a[hasOwnProperty]=c', {\n      allowPrototypes: true\n    }), {\n      a: {\n        0: 'b',\n        t: 'u',\n        hasOwnProperty: 'c'\n      }\n    });\n    st.deepEqual(qs.parse('a[]=b&a[hasOwnProperty]=c&a[x]=y', {\n      allowPrototypes: false\n    }), {\n      a: {\n        0: 'b',\n        x: 'y'\n      }\n    });\n    st.deepEqual(qs.parse('a[]=b&a[hasOwnProperty]=c&a[x]=y', {\n      allowPrototypes: true\n    }), {\n      a: {\n        0: 'b',\n        hasOwnProperty: 'c',\n        x: 'y'\n      }\n    });\n    st.end();\n  });\n  t.test('transforms arrays to objects (dot notation)', function (st) {\n    st.deepEqual(qs.parse('foo[0].baz=bar&fool.bad=baz', {\n      allowDots: true\n    }), {\n      foo: [{\n        baz: 'bar'\n      }],\n      fool: {\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo[0].baz=bar&fool.bad.boo=baz', {\n      allowDots: true\n    }), {\n      foo: [{\n        baz: 'bar'\n      }],\n      fool: {\n        bad: {\n          boo: 'baz'\n        }\n      }\n    });\n    st.deepEqual(qs.parse('foo[0][0].baz=bar&fool.bad=baz', {\n      allowDots: true\n    }), {\n      foo: [[{\n        baz: 'bar'\n      }]],\n      fool: {\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo[0].baz[0]=15&foo[0].bar=2', {\n      allowDots: true\n    }), {\n      foo: [{\n        baz: ['15'],\n        bar: '2'\n      }]\n    });\n    st.deepEqual(qs.parse('foo[0].baz[0]=15&foo[0].baz[1]=16&foo[0].bar=2', {\n      allowDots: true\n    }), {\n      foo: [{\n        baz: ['15', '16'],\n        bar: '2'\n      }]\n    });\n    st.deepEqual(qs.parse('foo.bad=baz&foo[0]=bar', {\n      allowDots: true\n    }), {\n      foo: {\n        bad: 'baz',\n        0: 'bar'\n      }\n    });\n    st.deepEqual(qs.parse('foo.bad=baz&foo[]=bar', {\n      allowDots: true\n    }), {\n      foo: {\n        bad: 'baz',\n        0: 'bar'\n      }\n    });\n    st.deepEqual(qs.parse('foo[]=bar&foo.bad=baz', {\n      allowDots: true\n    }), {\n      foo: {\n        0: 'bar',\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo.bad=baz&foo[]=bar&foo[]=foo', {\n      allowDots: true\n    }), {\n      foo: {\n        bad: 'baz',\n        0: 'bar',\n        1: 'foo'\n      }\n    });\n    st.deepEqual(qs.parse('foo[0].a=a&foo[0].b=b&foo[1].a=aa&foo[1].b=bb', {\n      allowDots: true\n    }), {\n      foo: [{\n        a: 'a',\n        b: 'b'\n      }, {\n        a: 'aa',\n        b: 'bb'\n      }]\n    });\n    st.end();\n  });\n  t.test('correctly prunes undefined values when converting an array to an object', function (st) {\n    st.deepEqual(qs.parse('a[2]=b&a[99999999]=c'), {\n      a: {\n        2: 'b',\n        99999999: 'c'\n      }\n    });\n    st.end();\n  });\n  t.test('supports malformed uri characters', function (st) {\n    st.deepEqual(qs.parse('{%:%}', {\n      strictNullHandling: true\n    }), {\n      '{%:%}': null\n    });\n    st.deepEqual(qs.parse('{%:%}='), {\n      '{%:%}': ''\n    });\n    st.deepEqual(qs.parse('foo=%:%}'), {\n      foo: '%:%}'\n    });\n    st.end();\n  });\n  t.test('doesn\\'t produce empty keys', function (st) {\n    st.deepEqual(qs.parse('_r=1&'), {\n      _r: '1'\n    });\n    st.end();\n  });\n  t.test('cannot access Object prototype', function (st) {\n    qs.parse('constructor[prototype][bad]=bad');\n    qs.parse('bad[constructor][prototype][bad]=bad');\n    st.equal(typeof Object.prototype.bad, 'undefined');\n    st.end();\n  });\n  t.test('parses arrays of objects', function (st) {\n    st.deepEqual(qs.parse('a[][b]=c'), {\n      a: [{\n        b: 'c'\n      }]\n    });\n    st.deepEqual(qs.parse('a[0][b]=c'), {\n      a: [{\n        b: 'c'\n      }]\n    });\n    st.end();\n  });\n  t.test('allows for empty strings in arrays', function (st) {\n    st.deepEqual(qs.parse('a[]=b&a[]=&a[]=c'), {\n      a: ['b', '', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]&a[2]=c&a[19]=', {\n      strictNullHandling: true,\n      arrayLimit: 20\n    }), {\n      a: ['b', null, 'c', '']\n    }, 'with arrayLimit 20 + array indices: null then empty string works');\n    st.deepEqual(qs.parse('a[]=b&a[]&a[]=c&a[]=', {\n      strictNullHandling: true,\n      arrayLimit: 0\n    }), {\n      a: ['b', null, 'c', '']\n    }, 'with arrayLimit 0 + array brackets: null then empty string works');\n    st.deepEqual(qs.parse('a[0]=b&a[1]=&a[2]=c&a[19]', {\n      strictNullHandling: true,\n      arrayLimit: 20\n    }), {\n      a: ['b', '', 'c', null]\n    }, 'with arrayLimit 20 + array indices: empty string then null works');\n    st.deepEqual(qs.parse('a[]=b&a[]=&a[]=c&a[]', {\n      strictNullHandling: true,\n      arrayLimit: 0\n    }), {\n      a: ['b', '', 'c', null]\n    }, 'with arrayLimit 0 + array brackets: empty string then null works');\n    st.deepEqual(qs.parse('a[]=&a[]=b&a[]=c'), {\n      a: ['', 'b', 'c']\n    }, 'array brackets: empty strings work');\n    st.end();\n  });\n  t.test('compacts sparse arrays', function (st) {\n    st.deepEqual(qs.parse('a[10]=1&a[2]=2', {\n      arrayLimit: 20\n    }), {\n      a: ['2', '1']\n    });\n    st.deepEqual(qs.parse('a[1][b][2][c]=1', {\n      arrayLimit: 20\n    }), {\n      a: [{\n        b: [{\n          c: '1'\n        }]\n      }]\n    });\n    st.deepEqual(qs.parse('a[1][2][3][c]=1', {\n      arrayLimit: 20\n    }), {\n      a: [[[{\n        c: '1'\n      }]]]\n    });\n    st.deepEqual(qs.parse('a[1][2][3][c][1]=1', {\n      arrayLimit: 20\n    }), {\n      a: [[[{\n        c: ['1']\n      }]]]\n    });\n    st.end();\n  });\n  t.test('parses sparse arrays', function (st) {\n    /* eslint no-sparse-arrays: 0 */\n    st.deepEqual(qs.parse('a[4]=1&a[1]=2', {\n      allowSparse: true\n    }), {\n      a: [, '2',,, '1']\n    });\n    st.deepEqual(qs.parse('a[1][b][2][c]=1', {\n      allowSparse: true\n    }), {\n      a: [, {\n        b: [,, {\n          c: '1'\n        }]\n      }]\n    });\n    st.deepEqual(qs.parse('a[1][2][3][c]=1', {\n      allowSparse: true\n    }), {\n      a: [, [,, [,,, {\n        c: '1'\n      }]]]\n    });\n    st.deepEqual(qs.parse('a[1][2][3][c][1]=1', {\n      allowSparse: true\n    }), {\n      a: [, [,, [,,, {\n        c: [, '1']\n      }]]]\n    });\n    st.end();\n  });\n  t.test('parses semi-parsed strings', function (st) {\n    st.deepEqual(qs.parse({\n      'a[b]': 'c'\n    }), {\n      a: {\n        b: 'c'\n      }\n    });\n    st.deepEqual(qs.parse({\n      'a[b]': 'c',\n      'a[d]': 'e'\n    }), {\n      a: {\n        b: 'c',\n        d: 'e'\n      }\n    });\n    st.end();\n  });\n  t.test('parses buffers correctly', function (st) {\n    var b = SaferBuffer.from('test');\n    st.deepEqual(qs.parse({\n      a: b\n    }), {\n      a: b\n    });\n    st.end();\n  });\n  t.test('parses jquery-param strings', function (st) {\n    // readable = 'filter[0][]=int1&filter[0][]==&filter[0][]=77&filter[]=and&filter[2][]=int2&filter[2][]==&filter[2][]=8'\n    var encoded = 'filter%5B0%5D%5B%5D=int1&filter%5B0%5D%5B%5D=%3D&filter%5B0%5D%5B%5D=77&filter%5B%5D=and&filter%5B2%5D%5B%5D=int2&filter%5B2%5D%5B%5D=%3D&filter%5B2%5D%5B%5D=8';\n    var expected = {\n      filter: [['int1', '=', '77'], 'and', ['int2', '=', '8']]\n    };\n    st.deepEqual(qs.parse(encoded), expected);\n    st.end();\n  });\n  t.test('continues parsing when no parent is found', function (st) {\n    st.deepEqual(qs.parse('[]=&a=b'), {\n      0: '',\n      a: 'b'\n    });\n    st.deepEqual(qs.parse('[]&a=b', {\n      strictNullHandling: true\n    }), {\n      0: null,\n      a: 'b'\n    });\n    st.deepEqual(qs.parse('[foo]=bar'), {\n      foo: 'bar'\n    });\n    st.end();\n  });\n  t.test('does not error when parsing a very long array', function (st) {\n    var str = 'a[]=a';\n\n    while (Buffer.byteLength(str) < 128 * 1024) {\n      str = str + '&' + str;\n    }\n\n    st.doesNotThrow(function () {\n      qs.parse(str);\n    });\n    st.end();\n  });\n  t.test('should not throw when a native prototype has an enumerable property', function (st) {\n    Object.prototype.crash = '';\n    Array.prototype.crash = '';\n    st.doesNotThrow(qs.parse.bind(null, 'a=b'));\n    st.deepEqual(qs.parse('a=b'), {\n      a: 'b'\n    });\n    st.doesNotThrow(qs.parse.bind(null, 'a[][b]=c'));\n    st.deepEqual(qs.parse('a[][b]=c'), {\n      a: [{\n        b: 'c'\n      }]\n    });\n    delete Object.prototype.crash;\n    delete Array.prototype.crash;\n    st.end();\n  });\n  t.test('parses a string with an alternative string delimiter', function (st) {\n    st.deepEqual(qs.parse('a=b;c=d', {\n      delimiter: ';'\n    }), {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('parses a string with an alternative RegExp delimiter', function (st) {\n    st.deepEqual(qs.parse('a=b; c=d', {\n      delimiter: /[;,] */\n    }), {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('does not use non-splittable objects as delimiters', function (st) {\n    st.deepEqual(qs.parse('a=b&c=d', {\n      delimiter: true\n    }), {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('allows overriding parameter limit', function (st) {\n    st.deepEqual(qs.parse('a=b&c=d', {\n      parameterLimit: 1\n    }), {\n      a: 'b'\n    });\n    st.end();\n  });\n  t.test('allows setting the parameter limit to Infinity', function (st) {\n    st.deepEqual(qs.parse('a=b&c=d', {\n      parameterLimit: Infinity\n    }), {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('allows overriding array limit', function (st) {\n    st.deepEqual(qs.parse('a[0]=b', {\n      arrayLimit: -1\n    }), {\n      a: {\n        0: 'b'\n      }\n    });\n    st.deepEqual(qs.parse('a[-1]=b', {\n      arrayLimit: -1\n    }), {\n      a: {\n        '-1': 'b'\n      }\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      arrayLimit: 0\n    }), {\n      a: {\n        0: 'b',\n        1: 'c'\n      }\n    });\n    st.end();\n  });\n  t.test('allows disabling array parsing', function (st) {\n    var indices = qs.parse('a[0]=b&a[1]=c', {\n      parseArrays: false\n    });\n    st.deepEqual(indices, {\n      a: {\n        0: 'b',\n        1: 'c'\n      }\n    });\n    st.equal(Array.isArray(indices.a), false, 'parseArrays:false, indices case is not an array');\n    var emptyBrackets = qs.parse('a[]=b', {\n      parseArrays: false\n    });\n    st.deepEqual(emptyBrackets, {\n      a: {\n        0: 'b'\n      }\n    });\n    st.equal(Array.isArray(emptyBrackets.a), false, 'parseArrays:false, empty brackets case is not an array');\n    st.end();\n  });\n  t.test('allows for query string prefix', function (st) {\n    st.deepEqual(qs.parse('?foo=bar', {\n      ignoreQueryPrefix: true\n    }), {\n      foo: 'bar'\n    });\n    st.deepEqual(qs.parse('foo=bar', {\n      ignoreQueryPrefix: true\n    }), {\n      foo: 'bar'\n    });\n    st.deepEqual(qs.parse('?foo=bar', {\n      ignoreQueryPrefix: false\n    }), {\n      '?foo': 'bar'\n    });\n    st.end();\n  });\n  t.test('parses an object', function (st) {\n    var input = {\n      'user[name]': {\n        'pop[bob]': 3\n      },\n      'user[email]': null\n    };\n    var expected = {\n      user: {\n        name: {\n          'pop[bob]': 3\n        },\n        email: null\n      }\n    };\n    var result = qs.parse(input);\n    st.deepEqual(result, expected);\n    st.end();\n  });\n  t.test('parses string with comma as array divider', function (st) {\n    st.deepEqual(qs.parse('foo=bar,tee', {\n      comma: true\n    }), {\n      foo: ['bar', 'tee']\n    });\n    st.deepEqual(qs.parse('foo[bar]=coffee,tee', {\n      comma: true\n    }), {\n      foo: {\n        bar: ['coffee', 'tee']\n      }\n    });\n    st.deepEqual(qs.parse('foo=', {\n      comma: true\n    }), {\n      foo: ''\n    });\n    st.deepEqual(qs.parse('foo', {\n      comma: true\n    }), {\n      foo: ''\n    });\n    st.deepEqual(qs.parse('foo', {\n      comma: true,\n      strictNullHandling: true\n    }), {\n      foo: null\n    });\n    st.end();\n  });\n  t.test('parses values with comma as array divider', function (st) {\n    st.deepEqual(qs.parse({\n      foo: 'bar,tee'\n    }, {\n      comma: false\n    }), {\n      foo: 'bar,tee'\n    });\n    st.deepEqual(qs.parse({\n      foo: 'bar,tee'\n    }, {\n      comma: true\n    }), {\n      foo: ['bar', 'tee']\n    });\n    st.end();\n  });\n  t.test('use number decoder, parses string that has one number with comma option enabled', function (st) {\n    var decoder = function (str, defaultDecoder, charset, type) {\n      if (!isNaN(Number(str))) {\n        return parseFloat(str);\n      }\n\n      return defaultDecoder(str, defaultDecoder, charset, type);\n    };\n\n    st.deepEqual(qs.parse('foo=1', {\n      comma: true,\n      decoder: decoder\n    }), {\n      foo: 1\n    });\n    st.deepEqual(qs.parse('foo=0', {\n      comma: true,\n      decoder: decoder\n    }), {\n      foo: 0\n    });\n    st.end();\n  });\n  t.test('parses brackets holds array of arrays when having two parts of strings with comma as array divider', function (st) {\n    st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=4,5,6', {\n      comma: true\n    }), {\n      foo: [['1', '2', '3'], ['4', '5', '6']]\n    });\n    st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=', {\n      comma: true\n    }), {\n      foo: [['1', '2', '3'], '']\n    });\n    st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=,', {\n      comma: true\n    }), {\n      foo: [['1', '2', '3'], ['', '']]\n    });\n    st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=a', {\n      comma: true\n    }), {\n      foo: [['1', '2', '3'], 'a']\n    });\n    st.end();\n  });\n  t.test('parses comma delimited array while having percent-encoded comma treated as normal text', function (st) {\n    st.deepEqual(qs.parse('foo=a%2Cb', {\n      comma: true\n    }), {\n      foo: 'a,b'\n    });\n    st.deepEqual(qs.parse('foo=a%2C%20b,d', {\n      comma: true\n    }), {\n      foo: ['a, b', 'd']\n    });\n    st.deepEqual(qs.parse('foo=a%2C%20b,c%2C%20d', {\n      comma: true\n    }), {\n      foo: ['a, b', 'c, d']\n    });\n    st.end();\n  });\n  t.test('parses an object in dot notation', function (st) {\n    var input = {\n      'user.name': {\n        'pop[bob]': 3\n      },\n      'user.email.': null\n    };\n    var expected = {\n      user: {\n        name: {\n          'pop[bob]': 3\n        },\n        email: null\n      }\n    };\n    var result = qs.parse(input, {\n      allowDots: true\n    });\n    st.deepEqual(result, expected);\n    st.end();\n  });\n  t.test('parses an object and not child values', function (st) {\n    var input = {\n      'user[name]': {\n        'pop[bob]': {\n          test: 3\n        }\n      },\n      'user[email]': null\n    };\n    var expected = {\n      user: {\n        name: {\n          'pop[bob]': {\n            test: 3\n          }\n        },\n        email: null\n      }\n    };\n    var result = qs.parse(input);\n    st.deepEqual(result, expected);\n    st.end();\n  });\n  t.test('does not blow up when Buffer global is missing', function (st) {\n    var tempBuffer = global.Buffer;\n    delete global.Buffer;\n    var result = qs.parse('a=b&c=d');\n    global.Buffer = tempBuffer;\n    st.deepEqual(result, {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('does not crash when parsing circular references', function (st) {\n    var a = {};\n    a.b = a;\n    var parsed;\n    st.doesNotThrow(function () {\n      parsed = qs.parse({\n        'foo[bar]': 'baz',\n        'foo[baz]': a\n      });\n    });\n    st.equal('foo' in parsed, true, 'parsed has \"foo\" property');\n    st.equal('bar' in parsed.foo, true);\n    st.equal('baz' in parsed.foo, true);\n    st.equal(parsed.foo.bar, 'baz');\n    st.deepEqual(parsed.foo.baz, a);\n    st.end();\n  });\n  t.test('does not crash when parsing deep objects', function (st) {\n    var parsed;\n    var str = 'foo';\n\n    for (var i = 0; i < 5000; i++) {\n      str += '[p]';\n    }\n\n    str += '=bar';\n    st.doesNotThrow(function () {\n      parsed = qs.parse(str, {\n        depth: 5000\n      });\n    });\n    st.equal('foo' in parsed, true, 'parsed has \"foo\" property');\n    var depth = 0;\n    var ref = parsed.foo;\n\n    while (ref = ref.p) {\n      depth += 1;\n    }\n\n    st.equal(depth, 5000, 'parsed is 5000 properties deep');\n    st.end();\n  });\n  t.test('parses null objects correctly', {\n    skip: !Object.create\n  }, function (st) {\n    var a = Object.create(null);\n    a.b = 'c';\n    st.deepEqual(qs.parse(a), {\n      b: 'c'\n    });\n    var result = qs.parse({\n      a: a\n    });\n    st.equal('a' in result, true, 'result has \"a\" property');\n    st.deepEqual(result.a, a);\n    st.end();\n  });\n  t.test('parses dates correctly', function (st) {\n    var now = new Date();\n    st.deepEqual(qs.parse({\n      a: now\n    }), {\n      a: now\n    });\n    st.end();\n  });\n  t.test('parses regular expressions correctly', function (st) {\n    var re = /^test$/;\n    st.deepEqual(qs.parse({\n      a: re\n    }), {\n      a: re\n    });\n    st.end();\n  });\n  t.test('does not allow overwriting prototype properties', function (st) {\n    st.deepEqual(qs.parse('a[hasOwnProperty]=b', {\n      allowPrototypes: false\n    }), {});\n    st.deepEqual(qs.parse('hasOwnProperty=b', {\n      allowPrototypes: false\n    }), {});\n    st.deepEqual(qs.parse('toString', {\n      allowPrototypes: false\n    }), {}, 'bare \"toString\" results in {}');\n    st.end();\n  });\n  t.test('can allow overwriting prototype properties', function (st) {\n    st.deepEqual(qs.parse('a[hasOwnProperty]=b', {\n      allowPrototypes: true\n    }), {\n      a: {\n        hasOwnProperty: 'b'\n      }\n    });\n    st.deepEqual(qs.parse('hasOwnProperty=b', {\n      allowPrototypes: true\n    }), {\n      hasOwnProperty: 'b'\n    });\n    st.deepEqual(qs.parse('toString', {\n      allowPrototypes: true\n    }), {\n      toString: ''\n    }, 'bare \"toString\" results in { toString: \"\" }');\n    st.end();\n  });\n  t.test('params starting with a closing bracket', function (st) {\n    st.deepEqual(qs.parse(']=toString'), {\n      ']': 'toString'\n    });\n    st.deepEqual(qs.parse(']]=toString'), {\n      ']]': 'toString'\n    });\n    st.deepEqual(qs.parse(']hello]=toString'), {\n      ']hello]': 'toString'\n    });\n    st.end();\n  });\n  t.test('params starting with a starting bracket', function (st) {\n    st.deepEqual(qs.parse('[=toString'), {\n      '[': 'toString'\n    });\n    st.deepEqual(qs.parse('[[=toString'), {\n      '[[': 'toString'\n    });\n    st.deepEqual(qs.parse('[hello[=toString'), {\n      '[hello[': 'toString'\n    });\n    st.end();\n  });\n  t.test('add keys to objects', function (st) {\n    st.deepEqual(qs.parse('a[b]=c&a=d'), {\n      a: {\n        b: 'c',\n        d: true\n      }\n    }, 'can add keys to objects');\n    st.deepEqual(qs.parse('a[b]=c&a=toString'), {\n      a: {\n        b: 'c'\n      }\n    }, 'can not overwrite prototype');\n    st.deepEqual(qs.parse('a[b]=c&a=toString', {\n      allowPrototypes: true\n    }), {\n      a: {\n        b: 'c',\n        toString: true\n      }\n    }, 'can overwrite prototype with allowPrototypes true');\n    st.deepEqual(qs.parse('a[b]=c&a=toString', {\n      plainObjects: true\n    }), {\n      __proto__: null,\n      a: {\n        __proto__: null,\n        b: 'c',\n        toString: true\n      }\n    }, 'can overwrite prototype with plainObjects true');\n    st.end();\n  });\n  t.test('dunder proto is ignored', function (st) {\n    var payload = 'categories[__proto__]=login&categories[__proto__]&categories[length]=42';\n    var result = qs.parse(payload, {\n      allowPrototypes: true\n    });\n    st.deepEqual(result, {\n      categories: {\n        length: '42'\n      }\n    }, 'silent [[Prototype]] payload');\n    var plainResult = qs.parse(payload, {\n      allowPrototypes: true,\n      plainObjects: true\n    });\n    st.deepEqual(plainResult, {\n      __proto__: null,\n      categories: {\n        __proto__: null,\n        length: '42'\n      }\n    }, 'silent [[Prototype]] payload: plain objects');\n    var query = qs.parse('categories[__proto__]=cats&categories[__proto__]=dogs&categories[some][json]=toInject', {\n      allowPrototypes: true\n    });\n    st.notOk(Array.isArray(query.categories), 'is not an array');\n    st.notOk(query.categories instanceof Array, 'is not instanceof an array');\n    st.deepEqual(query.categories, {\n      some: {\n        json: 'toInject'\n      }\n    });\n    st.equal(JSON.stringify(query.categories), '{\"some\":{\"json\":\"toInject\"}}', 'stringifies as a non-array');\n    st.deepEqual(qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', {\n      allowPrototypes: true\n    }), {\n      foo: {\n        bar: 'stuffs'\n      }\n    }, 'hidden values');\n    st.deepEqual(qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', {\n      allowPrototypes: true,\n      plainObjects: true\n    }), {\n      __proto__: null,\n      foo: {\n        __proto__: null,\n        bar: 'stuffs'\n      }\n    }, 'hidden values: plain objects');\n    st.end();\n  });\n  t.test('can return null objects', {\n    skip: !Object.create\n  }, function (st) {\n    var expected = Object.create(null);\n    expected.a = Object.create(null);\n    expected.a.b = 'c';\n    expected.a.hasOwnProperty = 'd';\n    st.deepEqual(qs.parse('a[b]=c&a[hasOwnProperty]=d', {\n      plainObjects: true\n    }), expected);\n    st.deepEqual(qs.parse(null, {\n      plainObjects: true\n    }), Object.create(null));\n    var expectedArray = Object.create(null);\n    expectedArray.a = Object.create(null);\n    expectedArray.a[0] = 'b';\n    expectedArray.a.c = 'd';\n    st.deepEqual(qs.parse('a[]=b&a[c]=d', {\n      plainObjects: true\n    }), expectedArray);\n    st.end();\n  });\n  t.test('can parse with custom encoding', function (st) {\n    st.deepEqual(qs.parse('%8c%a7=%91%e5%8d%e3%95%7b', {\n      decoder: function (str) {\n        var reg = /%([0-9A-F]{2})/ig;\n        var result = [];\n        var parts = reg.exec(str);\n\n        while (parts) {\n          result.push(parseInt(parts[1], 16));\n          parts = reg.exec(str);\n        }\n\n        return String(iconv.decode(SaferBuffer.from(result), 'shift_jis'));\n      }\n    }), {\n      県: '大阪府'\n    });\n    st.end();\n  });\n  t.test('receives the default decoder as a second argument', function (st) {\n    st.plan(1);\n    qs.parse('a', {\n      decoder: function (str, defaultDecoder) {\n        st.equal(defaultDecoder, utils.decode);\n      }\n    });\n    st.end();\n  });\n  t.test('throws error with wrong decoder', function (st) {\n    st['throws'](function () {\n      qs.parse({}, {\n        decoder: 'string'\n      });\n    }, new TypeError('Decoder has to be a function.'));\n    st.end();\n  });\n  t.test('does not mutate the options argument', function (st) {\n    var options = {};\n    qs.parse('a[b]=true', options);\n    st.deepEqual(options, {});\n    st.end();\n  });\n  t.test('throws if an invalid charset is specified', function (st) {\n    st['throws'](function () {\n      qs.parse('a=b', {\n        charset: 'foobar'\n      });\n    }, new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined'));\n    st.end();\n  });\n  t.test('parses an iso-8859-1 string if asked to', function (st) {\n    st.deepEqual(qs.parse('%A2=%BD', {\n      charset: 'iso-8859-1'\n    }), {\n      '¢': '½'\n    });\n    st.end();\n  });\n  var urlEncodedCheckmarkInUtf8 = '%E2%9C%93';\n  var urlEncodedOSlashInUtf8 = '%C3%B8';\n  var urlEncodedNumCheckmark = '%26%2310003%3B';\n  var urlEncodedNumSmiley = '%26%239786%3B';\n  t.test('prefers an utf-8 charset specified by the utf8 sentinel to a default charset of iso-8859-1', function (st) {\n    st.deepEqual(qs.parse('utf8=' + urlEncodedCheckmarkInUtf8 + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, {\n      charsetSentinel: true,\n      charset: 'iso-8859-1'\n    }), {\n      ø: 'ø'\n    });\n    st.end();\n  });\n  t.test('prefers an iso-8859-1 charset specified by the utf8 sentinel to a default charset of utf-8', function (st) {\n    st.deepEqual(qs.parse('utf8=' + urlEncodedNumCheckmark + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, {\n      charsetSentinel: true,\n      charset: 'utf-8'\n    }), {\n      'Ã¸': 'Ã¸'\n    });\n    st.end();\n  });\n  t.test('does not require the utf8 sentinel to be defined before the parameters whose decoding it affects', function (st) {\n    st.deepEqual(qs.parse('a=' + urlEncodedOSlashInUtf8 + '&utf8=' + urlEncodedNumCheckmark, {\n      charsetSentinel: true,\n      charset: 'utf-8'\n    }), {\n      a: 'Ã¸'\n    });\n    st.end();\n  });\n  t.test('should ignore an utf8 sentinel with an unknown value', function (st) {\n    st.deepEqual(qs.parse('utf8=foo&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, {\n      charsetSentinel: true,\n      charset: 'utf-8'\n    }), {\n      ø: 'ø'\n    });\n    st.end();\n  });\n  t.test('uses the utf8 sentinel to switch to utf-8 when no default charset is given', function (st) {\n    st.deepEqual(qs.parse('utf8=' + urlEncodedCheckmarkInUtf8 + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, {\n      charsetSentinel: true\n    }), {\n      ø: 'ø'\n    });\n    st.end();\n  });\n  t.test('uses the utf8 sentinel to switch to iso-8859-1 when no default charset is given', function (st) {\n    st.deepEqual(qs.parse('utf8=' + urlEncodedNumCheckmark + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, {\n      charsetSentinel: true\n    }), {\n      'Ã¸': 'Ã¸'\n    });\n    st.end();\n  });\n  t.test('interprets numeric entities in iso-8859-1 when `interpretNumericEntities`', function (st) {\n    st.deepEqual(qs.parse('foo=' + urlEncodedNumSmiley, {\n      charset: 'iso-8859-1',\n      interpretNumericEntities: true\n    }), {\n      foo: '☺'\n    });\n    st.end();\n  });\n  t.test('handles a custom decoder returning `null`, in the `iso-8859-1` charset, when `interpretNumericEntities`', function (st) {\n    st.deepEqual(qs.parse('foo=&bar=' + urlEncodedNumSmiley, {\n      charset: 'iso-8859-1',\n      decoder: function (str, defaultDecoder, charset) {\n        return str ? defaultDecoder(str, defaultDecoder, charset) : null;\n      },\n      interpretNumericEntities: true\n    }), {\n      foo: null,\n      bar: '☺'\n    });\n    st.end();\n  });\n  t.test('does not interpret numeric entities in iso-8859-1 when `interpretNumericEntities` is absent', function (st) {\n    st.deepEqual(qs.parse('foo=' + urlEncodedNumSmiley, {\n      charset: 'iso-8859-1'\n    }), {\n      foo: '&#9786;'\n    });\n    st.end();\n  });\n  t.test('does not interpret numeric entities when the charset is utf-8, even when `interpretNumericEntities`', function (st) {\n    st.deepEqual(qs.parse('foo=' + urlEncodedNumSmiley, {\n      charset: 'utf-8',\n      interpretNumericEntities: true\n    }), {\n      foo: '&#9786;'\n    });\n    st.end();\n  });\n  t.test('does not interpret %uXXXX syntax in iso-8859-1 mode', function (st) {\n    st.deepEqual(qs.parse('%u263A=%u263A', {\n      charset: 'iso-8859-1'\n    }), {\n      '%u263A': '%u263A'\n    });\n    st.end();\n  });\n  t.test('allows for decoding keys and values differently', function (st) {\n    var decoder = function (str, defaultDecoder, charset, type) {\n      if (type === 'key') {\n        return defaultDecoder(str, defaultDecoder, charset, type).toLowerCase();\n      }\n\n      if (type === 'value') {\n        return defaultDecoder(str, defaultDecoder, charset, type).toUpperCase();\n      }\n\n      throw 'this should never happen! type: ' + type;\n    };\n\n    st.deepEqual(qs.parse('KeY=vAlUe', {\n      decoder: decoder\n    }), {\n      key: 'VALUE'\n    });\n    st.end();\n  });\n  t.end();\n});","map":{"version":3,"names":["test","require","qs","utils","iconv","SaferBuffer","Buffer","t","st","deepEqual","parse","foo","a","strictNullHandling","bar","foo2","baz2","baz","cht","chd","chs","chl","end","arrayFormat","allowDots","b","c","d","e","f","depth","arrayLimit","pets","operators","undefined","bad","allowPrototypes","hasOwnProperty","x","fool","boo","_r","equal","Object","prototype","allowSparse","from","encoded","expected","filter","str","byteLength","doesNotThrow","crash","Array","bind","delimiter","parameterLimit","Infinity","indices","parseArrays","isArray","emptyBrackets","ignoreQueryPrefix","input","user","name","email","result","comma","decoder","defaultDecoder","charset","type","isNaN","Number","parseFloat","tempBuffer","global","parsed","i","ref","p","skip","create","now","Date","re","toString","plainObjects","__proto__","payload","categories","length","plainResult","query","notOk","some","json","JSON","stringify","expectedArray","reg","parts","exec","push","parseInt","String","decode","県","plan","TypeError","options","urlEncodedCheckmarkInUtf8","urlEncodedOSlashInUtf8","urlEncodedNumCheckmark","urlEncodedNumSmiley","charsetSentinel","ø","interpretNumericEntities","toLowerCase","toUpperCase","key"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/qs/test/parse.js"],"sourcesContent":["'use strict';\n\nvar test = require('tape');\nvar qs = require('../');\nvar utils = require('../lib/utils');\nvar iconv = require('iconv-lite');\nvar SaferBuffer = require('safer-buffer').Buffer;\n\ntest('parse()', function (t) {\n    t.test('parses a simple string', function (st) {\n        st.deepEqual(qs.parse('0=foo'), { 0: 'foo' });\n        st.deepEqual(qs.parse('foo=c++'), { foo: 'c  ' });\n        st.deepEqual(qs.parse('a[>=]=23'), { a: { '>=': '23' } });\n        st.deepEqual(qs.parse('a[<=>]==23'), { a: { '<=>': '=23' } });\n        st.deepEqual(qs.parse('a[==]=23'), { a: { '==': '23' } });\n        st.deepEqual(qs.parse('foo', { strictNullHandling: true }), { foo: null });\n        st.deepEqual(qs.parse('foo'), { foo: '' });\n        st.deepEqual(qs.parse('foo='), { foo: '' });\n        st.deepEqual(qs.parse('foo=bar'), { foo: 'bar' });\n        st.deepEqual(qs.parse(' foo = bar = baz '), { ' foo ': ' bar = baz ' });\n        st.deepEqual(qs.parse('foo=bar=baz'), { foo: 'bar=baz' });\n        st.deepEqual(qs.parse('foo=bar&bar=baz'), { foo: 'bar', bar: 'baz' });\n        st.deepEqual(qs.parse('foo2=bar2&baz2='), { foo2: 'bar2', baz2: '' });\n        st.deepEqual(qs.parse('foo=bar&baz', { strictNullHandling: true }), { foo: 'bar', baz: null });\n        st.deepEqual(qs.parse('foo=bar&baz'), { foo: 'bar', baz: '' });\n        st.deepEqual(qs.parse('cht=p3&chd=t:60,40&chs=250x100&chl=Hello|World'), {\n            cht: 'p3',\n            chd: 't:60,40',\n            chs: '250x100',\n            chl: 'Hello|World'\n        });\n        st.end();\n    });\n\n    t.test('arrayFormat: brackets allows only explicit arrays', function (st) {\n        st.deepEqual(qs.parse('a[]=b&a[]=c', { arrayFormat: 'brackets' }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayFormat: 'brackets' }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a=b,c', { arrayFormat: 'brackets' }), { a: 'b,c' });\n        st.deepEqual(qs.parse('a=b&a=c', { arrayFormat: 'brackets' }), { a: ['b', 'c'] });\n        st.end();\n    });\n\n    t.test('arrayFormat: indices allows only indexed arrays', function (st) {\n        st.deepEqual(qs.parse('a[]=b&a[]=c', { arrayFormat: 'indices' }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayFormat: 'indices' }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a=b,c', { arrayFormat: 'indices' }), { a: 'b,c' });\n        st.deepEqual(qs.parse('a=b&a=c', { arrayFormat: 'indices' }), { a: ['b', 'c'] });\n        st.end();\n    });\n\n    t.test('arrayFormat: comma allows only comma-separated arrays', function (st) {\n        st.deepEqual(qs.parse('a[]=b&a[]=c', { arrayFormat: 'comma' }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayFormat: 'comma' }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a=b,c', { arrayFormat: 'comma' }), { a: 'b,c' });\n        st.deepEqual(qs.parse('a=b&a=c', { arrayFormat: 'comma' }), { a: ['b', 'c'] });\n        st.end();\n    });\n\n    t.test('arrayFormat: repeat allows only repeated values', function (st) {\n        st.deepEqual(qs.parse('a[]=b&a[]=c', { arrayFormat: 'repeat' }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayFormat: 'repeat' }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a=b,c', { arrayFormat: 'repeat' }), { a: 'b,c' });\n        st.deepEqual(qs.parse('a=b&a=c', { arrayFormat: 'repeat' }), { a: ['b', 'c'] });\n        st.end();\n    });\n\n    t.test('allows enabling dot notation', function (st) {\n        st.deepEqual(qs.parse('a.b=c'), { 'a.b': 'c' });\n        st.deepEqual(qs.parse('a.b=c', { allowDots: true }), { a: { b: 'c' } });\n        st.end();\n    });\n\n    t.deepEqual(qs.parse('a[b]=c'), { a: { b: 'c' } }, 'parses a single nested string');\n    t.deepEqual(qs.parse('a[b][c]=d'), { a: { b: { c: 'd' } } }, 'parses a double nested string');\n    t.deepEqual(\n        qs.parse('a[b][c][d][e][f][g][h]=i'),\n        { a: { b: { c: { d: { e: { f: { '[g][h]': 'i' } } } } } } },\n        'defaults to a depth of 5'\n    );\n\n    t.test('only parses one level when depth = 1', function (st) {\n        st.deepEqual(qs.parse('a[b][c]=d', { depth: 1 }), { a: { b: { '[c]': 'd' } } });\n        st.deepEqual(qs.parse('a[b][c][d]=e', { depth: 1 }), { a: { b: { '[c][d]': 'e' } } });\n        st.end();\n    });\n\n    t.test('uses original key when depth = 0', function (st) {\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { depth: 0 }), { 'a[0]': 'b', 'a[1]': 'c' });\n        st.deepEqual(qs.parse('a[0][0]=b&a[0][1]=c&a[1]=d&e=2', { depth: 0 }), { 'a[0][0]': 'b', 'a[0][1]': 'c', 'a[1]': 'd', e: '2' });\n        st.end();\n    });\n\n    t.test('uses original key when depth = false', function (st) {\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { depth: false }), { 'a[0]': 'b', 'a[1]': 'c' });\n        st.deepEqual(qs.parse('a[0][0]=b&a[0][1]=c&a[1]=d&e=2', { depth: false }), { 'a[0][0]': 'b', 'a[0][1]': 'c', 'a[1]': 'd', e: '2' });\n        st.end();\n    });\n\n    t.deepEqual(qs.parse('a=b&a=c'), { a: ['b', 'c'] }, 'parses a simple array');\n\n    t.test('parses an explicit array', function (st) {\n        st.deepEqual(qs.parse('a[]=b'), { a: ['b'] });\n        st.deepEqual(qs.parse('a[]=b&a[]=c'), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[]=b&a[]=c&a[]=d'), { a: ['b', 'c', 'd'] });\n        st.end();\n    });\n\n    t.test('parses a mix of simple and explicit arrays', function (st) {\n        st.deepEqual(qs.parse('a=b&a[]=c'), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[]=b&a=c'), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[0]=b&a=c'), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a=b&a[0]=c'), { a: ['b', 'c'] });\n\n        st.deepEqual(qs.parse('a[1]=b&a=c', { arrayLimit: 20 }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[]=b&a=c', { arrayLimit: 0 }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[]=b&a=c'), { a: ['b', 'c'] });\n\n        st.deepEqual(qs.parse('a=b&a[1]=c', { arrayLimit: 20 }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a=b&a[]=c', { arrayLimit: 0 }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a=b&a[]=c'), { a: ['b', 'c'] });\n\n        st.end();\n    });\n\n    t.test('parses a nested array', function (st) {\n        st.deepEqual(qs.parse('a[b][]=c&a[b][]=d'), { a: { b: ['c', 'd'] } });\n        st.deepEqual(qs.parse('a[>=]=25'), { a: { '>=': '25' } });\n        st.end();\n    });\n\n    t.test('allows to specify array indices', function (st) {\n        st.deepEqual(qs.parse('a[1]=c&a[0]=b&a[2]=d'), { a: ['b', 'c', 'd'] });\n        st.deepEqual(qs.parse('a[1]=c&a[0]=b'), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[1]=c', { arrayLimit: 20 }), { a: ['c'] });\n        st.deepEqual(qs.parse('a[1]=c', { arrayLimit: 0 }), { a: { 1: 'c' } });\n        st.deepEqual(qs.parse('a[1]=c'), { a: ['c'] });\n        st.end();\n    });\n\n    t.test('limits specific array indices to arrayLimit', function (st) {\n        st.deepEqual(qs.parse('a[20]=a', { arrayLimit: 20 }), { a: ['a'] });\n        st.deepEqual(qs.parse('a[21]=a', { arrayLimit: 20 }), { a: { 21: 'a' } });\n        st.end();\n    });\n\n    t.deepEqual(qs.parse('a[12b]=c'), { a: { '12b': 'c' } }, 'supports keys that begin with a number');\n\n    t.test('supports encoded = signs', function (st) {\n        st.deepEqual(qs.parse('he%3Dllo=th%3Dere'), { 'he=llo': 'th=ere' });\n        st.end();\n    });\n\n    t.test('is ok with url encoded strings', function (st) {\n        st.deepEqual(qs.parse('a[b%20c]=d'), { a: { 'b c': 'd' } });\n        st.deepEqual(qs.parse('a[b]=c%20d'), { a: { b: 'c d' } });\n        st.end();\n    });\n\n    t.test('allows brackets in the value', function (st) {\n        st.deepEqual(qs.parse('pets=[\"tobi\"]'), { pets: '[\"tobi\"]' });\n        st.deepEqual(qs.parse('operators=[\">=\", \"<=\"]'), { operators: '[\">=\", \"<=\"]' });\n        st.end();\n    });\n\n    t.test('allows empty values', function (st) {\n        st.deepEqual(qs.parse(''), {});\n        st.deepEqual(qs.parse(null), {});\n        st.deepEqual(qs.parse(undefined), {});\n        st.end();\n    });\n\n    t.test('transforms arrays to objects', function (st) {\n        st.deepEqual(qs.parse('foo[0]=bar&foo[bad]=baz'), { foo: { 0: 'bar', bad: 'baz' } });\n        st.deepEqual(qs.parse('foo[bad]=baz&foo[0]=bar'), { foo: { bad: 'baz', 0: 'bar' } });\n        st.deepEqual(qs.parse('foo[bad]=baz&foo[]=bar'), { foo: { bad: 'baz', 0: 'bar' } });\n        st.deepEqual(qs.parse('foo[]=bar&foo[bad]=baz'), { foo: { 0: 'bar', bad: 'baz' } });\n        st.deepEqual(qs.parse('foo[bad]=baz&foo[]=bar&foo[]=foo'), { foo: { bad: 'baz', 0: 'bar', 1: 'foo' } });\n        st.deepEqual(qs.parse('foo[0][a]=a&foo[0][b]=b&foo[1][a]=aa&foo[1][b]=bb'), { foo: [{ a: 'a', b: 'b' }, { a: 'aa', b: 'bb' }] });\n\n        st.deepEqual(qs.parse('a[]=b&a[t]=u&a[hasOwnProperty]=c', { allowPrototypes: false }), { a: { 0: 'b', t: 'u' } });\n        st.deepEqual(qs.parse('a[]=b&a[t]=u&a[hasOwnProperty]=c', { allowPrototypes: true }), { a: { 0: 'b', t: 'u', hasOwnProperty: 'c' } });\n        st.deepEqual(qs.parse('a[]=b&a[hasOwnProperty]=c&a[x]=y', { allowPrototypes: false }), { a: { 0: 'b', x: 'y' } });\n        st.deepEqual(qs.parse('a[]=b&a[hasOwnProperty]=c&a[x]=y', { allowPrototypes: true }), { a: { 0: 'b', hasOwnProperty: 'c', x: 'y' } });\n        st.end();\n    });\n\n    t.test('transforms arrays to objects (dot notation)', function (st) {\n        st.deepEqual(qs.parse('foo[0].baz=bar&fool.bad=baz', { allowDots: true }), { foo: [{ baz: 'bar' }], fool: { bad: 'baz' } });\n        st.deepEqual(qs.parse('foo[0].baz=bar&fool.bad.boo=baz', { allowDots: true }), { foo: [{ baz: 'bar' }], fool: { bad: { boo: 'baz' } } });\n        st.deepEqual(qs.parse('foo[0][0].baz=bar&fool.bad=baz', { allowDots: true }), { foo: [[{ baz: 'bar' }]], fool: { bad: 'baz' } });\n        st.deepEqual(qs.parse('foo[0].baz[0]=15&foo[0].bar=2', { allowDots: true }), { foo: [{ baz: ['15'], bar: '2' }] });\n        st.deepEqual(qs.parse('foo[0].baz[0]=15&foo[0].baz[1]=16&foo[0].bar=2', { allowDots: true }), { foo: [{ baz: ['15', '16'], bar: '2' }] });\n        st.deepEqual(qs.parse('foo.bad=baz&foo[0]=bar', { allowDots: true }), { foo: { bad: 'baz', 0: 'bar' } });\n        st.deepEqual(qs.parse('foo.bad=baz&foo[]=bar', { allowDots: true }), { foo: { bad: 'baz', 0: 'bar' } });\n        st.deepEqual(qs.parse('foo[]=bar&foo.bad=baz', { allowDots: true }), { foo: { 0: 'bar', bad: 'baz' } });\n        st.deepEqual(qs.parse('foo.bad=baz&foo[]=bar&foo[]=foo', { allowDots: true }), { foo: { bad: 'baz', 0: 'bar', 1: 'foo' } });\n        st.deepEqual(qs.parse('foo[0].a=a&foo[0].b=b&foo[1].a=aa&foo[1].b=bb', { allowDots: true }), { foo: [{ a: 'a', b: 'b' }, { a: 'aa', b: 'bb' }] });\n        st.end();\n    });\n\n    t.test('correctly prunes undefined values when converting an array to an object', function (st) {\n        st.deepEqual(qs.parse('a[2]=b&a[99999999]=c'), { a: { 2: 'b', 99999999: 'c' } });\n        st.end();\n    });\n\n    t.test('supports malformed uri characters', function (st) {\n        st.deepEqual(qs.parse('{%:%}', { strictNullHandling: true }), { '{%:%}': null });\n        st.deepEqual(qs.parse('{%:%}='), { '{%:%}': '' });\n        st.deepEqual(qs.parse('foo=%:%}'), { foo: '%:%}' });\n        st.end();\n    });\n\n    t.test('doesn\\'t produce empty keys', function (st) {\n        st.deepEqual(qs.parse('_r=1&'), { _r: '1' });\n        st.end();\n    });\n\n    t.test('cannot access Object prototype', function (st) {\n        qs.parse('constructor[prototype][bad]=bad');\n        qs.parse('bad[constructor][prototype][bad]=bad');\n        st.equal(typeof Object.prototype.bad, 'undefined');\n        st.end();\n    });\n\n    t.test('parses arrays of objects', function (st) {\n        st.deepEqual(qs.parse('a[][b]=c'), { a: [{ b: 'c' }] });\n        st.deepEqual(qs.parse('a[0][b]=c'), { a: [{ b: 'c' }] });\n        st.end();\n    });\n\n    t.test('allows for empty strings in arrays', function (st) {\n        st.deepEqual(qs.parse('a[]=b&a[]=&a[]=c'), { a: ['b', '', 'c'] });\n\n        st.deepEqual(\n            qs.parse('a[0]=b&a[1]&a[2]=c&a[19]=', { strictNullHandling: true, arrayLimit: 20 }),\n            { a: ['b', null, 'c', ''] },\n            'with arrayLimit 20 + array indices: null then empty string works'\n        );\n        st.deepEqual(\n            qs.parse('a[]=b&a[]&a[]=c&a[]=', { strictNullHandling: true, arrayLimit: 0 }),\n            { a: ['b', null, 'c', ''] },\n            'with arrayLimit 0 + array brackets: null then empty string works'\n        );\n\n        st.deepEqual(\n            qs.parse('a[0]=b&a[1]=&a[2]=c&a[19]', { strictNullHandling: true, arrayLimit: 20 }),\n            { a: ['b', '', 'c', null] },\n            'with arrayLimit 20 + array indices: empty string then null works'\n        );\n        st.deepEqual(\n            qs.parse('a[]=b&a[]=&a[]=c&a[]', { strictNullHandling: true, arrayLimit: 0 }),\n            { a: ['b', '', 'c', null] },\n            'with arrayLimit 0 + array brackets: empty string then null works'\n        );\n\n        st.deepEqual(\n            qs.parse('a[]=&a[]=b&a[]=c'),\n            { a: ['', 'b', 'c'] },\n            'array brackets: empty strings work'\n        );\n        st.end();\n    });\n\n    t.test('compacts sparse arrays', function (st) {\n        st.deepEqual(qs.parse('a[10]=1&a[2]=2', { arrayLimit: 20 }), { a: ['2', '1'] });\n        st.deepEqual(qs.parse('a[1][b][2][c]=1', { arrayLimit: 20 }), { a: [{ b: [{ c: '1' }] }] });\n        st.deepEqual(qs.parse('a[1][2][3][c]=1', { arrayLimit: 20 }), { a: [[[{ c: '1' }]]] });\n        st.deepEqual(qs.parse('a[1][2][3][c][1]=1', { arrayLimit: 20 }), { a: [[[{ c: ['1'] }]]] });\n        st.end();\n    });\n\n    t.test('parses sparse arrays', function (st) {\n        /* eslint no-sparse-arrays: 0 */\n        st.deepEqual(qs.parse('a[4]=1&a[1]=2', { allowSparse: true }), { a: [, '2', , , '1'] });\n        st.deepEqual(qs.parse('a[1][b][2][c]=1', { allowSparse: true }), { a: [, { b: [, , { c: '1' }] }] });\n        st.deepEqual(qs.parse('a[1][2][3][c]=1', { allowSparse: true }), { a: [, [, , [, , , { c: '1' }]]] });\n        st.deepEqual(qs.parse('a[1][2][3][c][1]=1', { allowSparse: true }), { a: [, [, , [, , , { c: [, '1'] }]]] });\n        st.end();\n    });\n\n    t.test('parses semi-parsed strings', function (st) {\n        st.deepEqual(qs.parse({ 'a[b]': 'c' }), { a: { b: 'c' } });\n        st.deepEqual(qs.parse({ 'a[b]': 'c', 'a[d]': 'e' }), { a: { b: 'c', d: 'e' } });\n        st.end();\n    });\n\n    t.test('parses buffers correctly', function (st) {\n        var b = SaferBuffer.from('test');\n        st.deepEqual(qs.parse({ a: b }), { a: b });\n        st.end();\n    });\n\n    t.test('parses jquery-param strings', function (st) {\n        // readable = 'filter[0][]=int1&filter[0][]==&filter[0][]=77&filter[]=and&filter[2][]=int2&filter[2][]==&filter[2][]=8'\n        var encoded = 'filter%5B0%5D%5B%5D=int1&filter%5B0%5D%5B%5D=%3D&filter%5B0%5D%5B%5D=77&filter%5B%5D=and&filter%5B2%5D%5B%5D=int2&filter%5B2%5D%5B%5D=%3D&filter%5B2%5D%5B%5D=8';\n        var expected = { filter: [['int1', '=', '77'], 'and', ['int2', '=', '8']] };\n        st.deepEqual(qs.parse(encoded), expected);\n        st.end();\n    });\n\n    t.test('continues parsing when no parent is found', function (st) {\n        st.deepEqual(qs.parse('[]=&a=b'), { 0: '', a: 'b' });\n        st.deepEqual(qs.parse('[]&a=b', { strictNullHandling: true }), { 0: null, a: 'b' });\n        st.deepEqual(qs.parse('[foo]=bar'), { foo: 'bar' });\n        st.end();\n    });\n\n    t.test('does not error when parsing a very long array', function (st) {\n        var str = 'a[]=a';\n        while (Buffer.byteLength(str) < 128 * 1024) {\n            str = str + '&' + str;\n        }\n\n        st.doesNotThrow(function () {\n            qs.parse(str);\n        });\n\n        st.end();\n    });\n\n    t.test('should not throw when a native prototype has an enumerable property', function (st) {\n        Object.prototype.crash = '';\n        Array.prototype.crash = '';\n        st.doesNotThrow(qs.parse.bind(null, 'a=b'));\n        st.deepEqual(qs.parse('a=b'), { a: 'b' });\n        st.doesNotThrow(qs.parse.bind(null, 'a[][b]=c'));\n        st.deepEqual(qs.parse('a[][b]=c'), { a: [{ b: 'c' }] });\n        delete Object.prototype.crash;\n        delete Array.prototype.crash;\n        st.end();\n    });\n\n    t.test('parses a string with an alternative string delimiter', function (st) {\n        st.deepEqual(qs.parse('a=b;c=d', { delimiter: ';' }), { a: 'b', c: 'd' });\n        st.end();\n    });\n\n    t.test('parses a string with an alternative RegExp delimiter', function (st) {\n        st.deepEqual(qs.parse('a=b; c=d', { delimiter: /[;,] */ }), { a: 'b', c: 'd' });\n        st.end();\n    });\n\n    t.test('does not use non-splittable objects as delimiters', function (st) {\n        st.deepEqual(qs.parse('a=b&c=d', { delimiter: true }), { a: 'b', c: 'd' });\n        st.end();\n    });\n\n    t.test('allows overriding parameter limit', function (st) {\n        st.deepEqual(qs.parse('a=b&c=d', { parameterLimit: 1 }), { a: 'b' });\n        st.end();\n    });\n\n    t.test('allows setting the parameter limit to Infinity', function (st) {\n        st.deepEqual(qs.parse('a=b&c=d', { parameterLimit: Infinity }), { a: 'b', c: 'd' });\n        st.end();\n    });\n\n    t.test('allows overriding array limit', function (st) {\n        st.deepEqual(qs.parse('a[0]=b', { arrayLimit: -1 }), { a: { 0: 'b' } });\n        st.deepEqual(qs.parse('a[-1]=b', { arrayLimit: -1 }), { a: { '-1': 'b' } });\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayLimit: 0 }), { a: { 0: 'b', 1: 'c' } });\n        st.end();\n    });\n\n    t.test('allows disabling array parsing', function (st) {\n        var indices = qs.parse('a[0]=b&a[1]=c', { parseArrays: false });\n        st.deepEqual(indices, { a: { 0: 'b', 1: 'c' } });\n        st.equal(Array.isArray(indices.a), false, 'parseArrays:false, indices case is not an array');\n\n        var emptyBrackets = qs.parse('a[]=b', { parseArrays: false });\n        st.deepEqual(emptyBrackets, { a: { 0: 'b' } });\n        st.equal(Array.isArray(emptyBrackets.a), false, 'parseArrays:false, empty brackets case is not an array');\n\n        st.end();\n    });\n\n    t.test('allows for query string prefix', function (st) {\n        st.deepEqual(qs.parse('?foo=bar', { ignoreQueryPrefix: true }), { foo: 'bar' });\n        st.deepEqual(qs.parse('foo=bar', { ignoreQueryPrefix: true }), { foo: 'bar' });\n        st.deepEqual(qs.parse('?foo=bar', { ignoreQueryPrefix: false }), { '?foo': 'bar' });\n        st.end();\n    });\n\n    t.test('parses an object', function (st) {\n        var input = {\n            'user[name]': { 'pop[bob]': 3 },\n            'user[email]': null\n        };\n\n        var expected = {\n            user: {\n                name: { 'pop[bob]': 3 },\n                email: null\n            }\n        };\n\n        var result = qs.parse(input);\n\n        st.deepEqual(result, expected);\n        st.end();\n    });\n\n    t.test('parses string with comma as array divider', function (st) {\n        st.deepEqual(qs.parse('foo=bar,tee', { comma: true }), { foo: ['bar', 'tee'] });\n        st.deepEqual(qs.parse('foo[bar]=coffee,tee', { comma: true }), { foo: { bar: ['coffee', 'tee'] } });\n        st.deepEqual(qs.parse('foo=', { comma: true }), { foo: '' });\n        st.deepEqual(qs.parse('foo', { comma: true }), { foo: '' });\n        st.deepEqual(qs.parse('foo', { comma: true, strictNullHandling: true }), { foo: null });\n        st.end();\n    });\n\n    t.test('parses values with comma as array divider', function (st) {\n        st.deepEqual(qs.parse({ foo: 'bar,tee' }, { comma: false }), { foo: 'bar,tee' });\n        st.deepEqual(qs.parse({ foo: 'bar,tee' }, { comma: true }), { foo: ['bar', 'tee'] });\n        st.end();\n    });\n\n    t.test('use number decoder, parses string that has one number with comma option enabled', function (st) {\n        var decoder = function (str, defaultDecoder, charset, type) {\n            if (!isNaN(Number(str))) {\n                return parseFloat(str);\n            }\n            return defaultDecoder(str, defaultDecoder, charset, type);\n        };\n\n        st.deepEqual(qs.parse('foo=1', { comma: true, decoder: decoder }), { foo: 1 });\n        st.deepEqual(qs.parse('foo=0', { comma: true, decoder: decoder }), { foo: 0 });\n\n        st.end();\n    });\n\n    t.test('parses brackets holds array of arrays when having two parts of strings with comma as array divider', function (st) {\n        st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=4,5,6', { comma: true }), { foo: [['1', '2', '3'], ['4', '5', '6']] });\n        st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=', { comma: true }), { foo: [['1', '2', '3'], ''] });\n        st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=,', { comma: true }), { foo: [['1', '2', '3'], ['', '']] });\n        st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=a', { comma: true }), { foo: [['1', '2', '3'], 'a'] });\n\n        st.end();\n    });\n\n    t.test('parses comma delimited array while having percent-encoded comma treated as normal text', function (st) {\n        st.deepEqual(qs.parse('foo=a%2Cb', { comma: true }), { foo: 'a,b' });\n        st.deepEqual(qs.parse('foo=a%2C%20b,d', { comma: true }), { foo: ['a, b', 'd'] });\n        st.deepEqual(qs.parse('foo=a%2C%20b,c%2C%20d', { comma: true }), { foo: ['a, b', 'c, d'] });\n\n        st.end();\n    });\n\n    t.test('parses an object in dot notation', function (st) {\n        var input = {\n            'user.name': { 'pop[bob]': 3 },\n            'user.email.': null\n        };\n\n        var expected = {\n            user: {\n                name: { 'pop[bob]': 3 },\n                email: null\n            }\n        };\n\n        var result = qs.parse(input, { allowDots: true });\n\n        st.deepEqual(result, expected);\n        st.end();\n    });\n\n    t.test('parses an object and not child values', function (st) {\n        var input = {\n            'user[name]': { 'pop[bob]': { test: 3 } },\n            'user[email]': null\n        };\n\n        var expected = {\n            user: {\n                name: { 'pop[bob]': { test: 3 } },\n                email: null\n            }\n        };\n\n        var result = qs.parse(input);\n\n        st.deepEqual(result, expected);\n        st.end();\n    });\n\n    t.test('does not blow up when Buffer global is missing', function (st) {\n        var tempBuffer = global.Buffer;\n        delete global.Buffer;\n        var result = qs.parse('a=b&c=d');\n        global.Buffer = tempBuffer;\n        st.deepEqual(result, { a: 'b', c: 'd' });\n        st.end();\n    });\n\n    t.test('does not crash when parsing circular references', function (st) {\n        var a = {};\n        a.b = a;\n\n        var parsed;\n\n        st.doesNotThrow(function () {\n            parsed = qs.parse({ 'foo[bar]': 'baz', 'foo[baz]': a });\n        });\n\n        st.equal('foo' in parsed, true, 'parsed has \"foo\" property');\n        st.equal('bar' in parsed.foo, true);\n        st.equal('baz' in parsed.foo, true);\n        st.equal(parsed.foo.bar, 'baz');\n        st.deepEqual(parsed.foo.baz, a);\n        st.end();\n    });\n\n    t.test('does not crash when parsing deep objects', function (st) {\n        var parsed;\n        var str = 'foo';\n\n        for (var i = 0; i < 5000; i++) {\n            str += '[p]';\n        }\n\n        str += '=bar';\n\n        st.doesNotThrow(function () {\n            parsed = qs.parse(str, { depth: 5000 });\n        });\n\n        st.equal('foo' in parsed, true, 'parsed has \"foo\" property');\n\n        var depth = 0;\n        var ref = parsed.foo;\n        while ((ref = ref.p)) {\n            depth += 1;\n        }\n\n        st.equal(depth, 5000, 'parsed is 5000 properties deep');\n\n        st.end();\n    });\n\n    t.test('parses null objects correctly', { skip: !Object.create }, function (st) {\n        var a = Object.create(null);\n        a.b = 'c';\n\n        st.deepEqual(qs.parse(a), { b: 'c' });\n        var result = qs.parse({ a: a });\n        st.equal('a' in result, true, 'result has \"a\" property');\n        st.deepEqual(result.a, a);\n        st.end();\n    });\n\n    t.test('parses dates correctly', function (st) {\n        var now = new Date();\n        st.deepEqual(qs.parse({ a: now }), { a: now });\n        st.end();\n    });\n\n    t.test('parses regular expressions correctly', function (st) {\n        var re = /^test$/;\n        st.deepEqual(qs.parse({ a: re }), { a: re });\n        st.end();\n    });\n\n    t.test('does not allow overwriting prototype properties', function (st) {\n        st.deepEqual(qs.parse('a[hasOwnProperty]=b', { allowPrototypes: false }), {});\n        st.deepEqual(qs.parse('hasOwnProperty=b', { allowPrototypes: false }), {});\n\n        st.deepEqual(\n            qs.parse('toString', { allowPrototypes: false }),\n            {},\n            'bare \"toString\" results in {}'\n        );\n\n        st.end();\n    });\n\n    t.test('can allow overwriting prototype properties', function (st) {\n        st.deepEqual(qs.parse('a[hasOwnProperty]=b', { allowPrototypes: true }), { a: { hasOwnProperty: 'b' } });\n        st.deepEqual(qs.parse('hasOwnProperty=b', { allowPrototypes: true }), { hasOwnProperty: 'b' });\n\n        st.deepEqual(\n            qs.parse('toString', { allowPrototypes: true }),\n            { toString: '' },\n            'bare \"toString\" results in { toString: \"\" }'\n        );\n\n        st.end();\n    });\n\n    t.test('params starting with a closing bracket', function (st) {\n        st.deepEqual(qs.parse(']=toString'), { ']': 'toString' });\n        st.deepEqual(qs.parse(']]=toString'), { ']]': 'toString' });\n        st.deepEqual(qs.parse(']hello]=toString'), { ']hello]': 'toString' });\n        st.end();\n    });\n\n    t.test('params starting with a starting bracket', function (st) {\n        st.deepEqual(qs.parse('[=toString'), { '[': 'toString' });\n        st.deepEqual(qs.parse('[[=toString'), { '[[': 'toString' });\n        st.deepEqual(qs.parse('[hello[=toString'), { '[hello[': 'toString' });\n        st.end();\n    });\n\n    t.test('add keys to objects', function (st) {\n        st.deepEqual(\n            qs.parse('a[b]=c&a=d'),\n            { a: { b: 'c', d: true } },\n            'can add keys to objects'\n        );\n\n        st.deepEqual(\n            qs.parse('a[b]=c&a=toString'),\n            { a: { b: 'c' } },\n            'can not overwrite prototype'\n        );\n\n        st.deepEqual(\n            qs.parse('a[b]=c&a=toString', { allowPrototypes: true }),\n            { a: { b: 'c', toString: true } },\n            'can overwrite prototype with allowPrototypes true'\n        );\n\n        st.deepEqual(\n            qs.parse('a[b]=c&a=toString', { plainObjects: true }),\n            { __proto__: null, a: { __proto__: null, b: 'c', toString: true } },\n            'can overwrite prototype with plainObjects true'\n        );\n\n        st.end();\n    });\n\n    t.test('dunder proto is ignored', function (st) {\n        var payload = 'categories[__proto__]=login&categories[__proto__]&categories[length]=42';\n        var result = qs.parse(payload, { allowPrototypes: true });\n\n        st.deepEqual(\n            result,\n            {\n                categories: {\n                    length: '42'\n                }\n            },\n            'silent [[Prototype]] payload'\n        );\n\n        var plainResult = qs.parse(payload, { allowPrototypes: true, plainObjects: true });\n\n        st.deepEqual(\n            plainResult,\n            {\n                __proto__: null,\n                categories: {\n                    __proto__: null,\n                    length: '42'\n                }\n            },\n            'silent [[Prototype]] payload: plain objects'\n        );\n\n        var query = qs.parse('categories[__proto__]=cats&categories[__proto__]=dogs&categories[some][json]=toInject', { allowPrototypes: true });\n\n        st.notOk(Array.isArray(query.categories), 'is not an array');\n        st.notOk(query.categories instanceof Array, 'is not instanceof an array');\n        st.deepEqual(query.categories, { some: { json: 'toInject' } });\n        st.equal(JSON.stringify(query.categories), '{\"some\":{\"json\":\"toInject\"}}', 'stringifies as a non-array');\n\n        st.deepEqual(\n            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true }),\n            {\n                foo: {\n                    bar: 'stuffs'\n                }\n            },\n            'hidden values'\n        );\n\n        st.deepEqual(\n            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true, plainObjects: true }),\n            {\n                __proto__: null,\n                foo: {\n                    __proto__: null,\n                    bar: 'stuffs'\n                }\n            },\n            'hidden values: plain objects'\n        );\n\n        st.end();\n    });\n\n    t.test('can return null objects', { skip: !Object.create }, function (st) {\n        var expected = Object.create(null);\n        expected.a = Object.create(null);\n        expected.a.b = 'c';\n        expected.a.hasOwnProperty = 'd';\n        st.deepEqual(qs.parse('a[b]=c&a[hasOwnProperty]=d', { plainObjects: true }), expected);\n        st.deepEqual(qs.parse(null, { plainObjects: true }), Object.create(null));\n        var expectedArray = Object.create(null);\n        expectedArray.a = Object.create(null);\n        expectedArray.a[0] = 'b';\n        expectedArray.a.c = 'd';\n        st.deepEqual(qs.parse('a[]=b&a[c]=d', { plainObjects: true }), expectedArray);\n        st.end();\n    });\n\n    t.test('can parse with custom encoding', function (st) {\n        st.deepEqual(qs.parse('%8c%a7=%91%e5%8d%e3%95%7b', {\n            decoder: function (str) {\n                var reg = /%([0-9A-F]{2})/ig;\n                var result = [];\n                var parts = reg.exec(str);\n                while (parts) {\n                    result.push(parseInt(parts[1], 16));\n                    parts = reg.exec(str);\n                }\n                return String(iconv.decode(SaferBuffer.from(result), 'shift_jis'));\n            }\n        }), { 県: '大阪府' });\n        st.end();\n    });\n\n    t.test('receives the default decoder as a second argument', function (st) {\n        st.plan(1);\n        qs.parse('a', {\n            decoder: function (str, defaultDecoder) {\n                st.equal(defaultDecoder, utils.decode);\n            }\n        });\n        st.end();\n    });\n\n    t.test('throws error with wrong decoder', function (st) {\n        st['throws'](function () {\n            qs.parse({}, { decoder: 'string' });\n        }, new TypeError('Decoder has to be a function.'));\n        st.end();\n    });\n\n    t.test('does not mutate the options argument', function (st) {\n        var options = {};\n        qs.parse('a[b]=true', options);\n        st.deepEqual(options, {});\n        st.end();\n    });\n\n    t.test('throws if an invalid charset is specified', function (st) {\n        st['throws'](function () {\n            qs.parse('a=b', { charset: 'foobar' });\n        }, new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined'));\n        st.end();\n    });\n\n    t.test('parses an iso-8859-1 string if asked to', function (st) {\n        st.deepEqual(qs.parse('%A2=%BD', { charset: 'iso-8859-1' }), { '¢': '½' });\n        st.end();\n    });\n\n    var urlEncodedCheckmarkInUtf8 = '%E2%9C%93';\n    var urlEncodedOSlashInUtf8 = '%C3%B8';\n    var urlEncodedNumCheckmark = '%26%2310003%3B';\n    var urlEncodedNumSmiley = '%26%239786%3B';\n\n    t.test('prefers an utf-8 charset specified by the utf8 sentinel to a default charset of iso-8859-1', function (st) {\n        st.deepEqual(qs.parse('utf8=' + urlEncodedCheckmarkInUtf8 + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, { charsetSentinel: true, charset: 'iso-8859-1' }), { ø: 'ø' });\n        st.end();\n    });\n\n    t.test('prefers an iso-8859-1 charset specified by the utf8 sentinel to a default charset of utf-8', function (st) {\n        st.deepEqual(qs.parse('utf8=' + urlEncodedNumCheckmark + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, { charsetSentinel: true, charset: 'utf-8' }), { 'Ã¸': 'Ã¸' });\n        st.end();\n    });\n\n    t.test('does not require the utf8 sentinel to be defined before the parameters whose decoding it affects', function (st) {\n        st.deepEqual(qs.parse('a=' + urlEncodedOSlashInUtf8 + '&utf8=' + urlEncodedNumCheckmark, { charsetSentinel: true, charset: 'utf-8' }), { a: 'Ã¸' });\n        st.end();\n    });\n\n    t.test('should ignore an utf8 sentinel with an unknown value', function (st) {\n        st.deepEqual(qs.parse('utf8=foo&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, { charsetSentinel: true, charset: 'utf-8' }), { ø: 'ø' });\n        st.end();\n    });\n\n    t.test('uses the utf8 sentinel to switch to utf-8 when no default charset is given', function (st) {\n        st.deepEqual(qs.parse('utf8=' + urlEncodedCheckmarkInUtf8 + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, { charsetSentinel: true }), { ø: 'ø' });\n        st.end();\n    });\n\n    t.test('uses the utf8 sentinel to switch to iso-8859-1 when no default charset is given', function (st) {\n        st.deepEqual(qs.parse('utf8=' + urlEncodedNumCheckmark + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, { charsetSentinel: true }), { 'Ã¸': 'Ã¸' });\n        st.end();\n    });\n\n    t.test('interprets numeric entities in iso-8859-1 when `interpretNumericEntities`', function (st) {\n        st.deepEqual(qs.parse('foo=' + urlEncodedNumSmiley, { charset: 'iso-8859-1', interpretNumericEntities: true }), { foo: '☺' });\n        st.end();\n    });\n\n    t.test('handles a custom decoder returning `null`, in the `iso-8859-1` charset, when `interpretNumericEntities`', function (st) {\n        st.deepEqual(qs.parse('foo=&bar=' + urlEncodedNumSmiley, {\n            charset: 'iso-8859-1',\n            decoder: function (str, defaultDecoder, charset) {\n                return str ? defaultDecoder(str, defaultDecoder, charset) : null;\n            },\n            interpretNumericEntities: true\n        }), { foo: null, bar: '☺' });\n        st.end();\n    });\n\n    t.test('does not interpret numeric entities in iso-8859-1 when `interpretNumericEntities` is absent', function (st) {\n        st.deepEqual(qs.parse('foo=' + urlEncodedNumSmiley, { charset: 'iso-8859-1' }), { foo: '&#9786;' });\n        st.end();\n    });\n\n    t.test('does not interpret numeric entities when the charset is utf-8, even when `interpretNumericEntities`', function (st) {\n        st.deepEqual(qs.parse('foo=' + urlEncodedNumSmiley, { charset: 'utf-8', interpretNumericEntities: true }), { foo: '&#9786;' });\n        st.end();\n    });\n\n    t.test('does not interpret %uXXXX syntax in iso-8859-1 mode', function (st) {\n        st.deepEqual(qs.parse('%u263A=%u263A', { charset: 'iso-8859-1' }), { '%u263A': '%u263A' });\n        st.end();\n    });\n\n    t.test('allows for decoding keys and values differently', function (st) {\n        var decoder = function (str, defaultDecoder, charset, type) {\n            if (type === 'key') {\n                return defaultDecoder(str, defaultDecoder, charset, type).toLowerCase();\n            }\n            if (type === 'value') {\n                return defaultDecoder(str, defaultDecoder, charset, type).toUpperCase();\n            }\n            throw 'this should never happen! type: ' + type;\n        };\n\n        st.deepEqual(qs.parse('KeY=vAlUe', { decoder: decoder }), { key: 'VALUE' });\n        st.end();\n    });\n\n    t.end();\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}