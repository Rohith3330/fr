{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"nesting\", {\n  enumerable: true,\n  get: () => nesting\n});\n\nconst _postcss = /*#__PURE__*/_interopRequireDefault(require(\"postcss\"));\n\nconst _postcssNested = /*#__PURE__*/_interopRequireDefault(require(\"postcss-nested\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction nesting() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _postcssNested.default;\n  return (root, result) => {\n    root.walkAtRules(\"screen\", rule => {\n      rule.name = \"media\";\n      rule.params = `screen(${rule.params})`;\n    });\n    root.walkAtRules(\"apply\", rule => {\n      rule.before(_postcss.default.decl({\n        prop: \"__apply\",\n        value: rule.params,\n        source: rule.source\n      }));\n      rule.remove();\n    });\n\n    let plugin = (() => {\n      var ref;\n\n      if (typeof opts === \"function\" || typeof opts === \"object\" && (opts === null || opts === void 0 ? void 0 : (ref = opts.hasOwnProperty) === null || ref === void 0 ? void 0 : ref.call(opts, \"postcssPlugin\"))) {\n        return opts;\n      }\n\n      if (typeof opts === \"string\") {\n        return require(opts);\n      }\n\n      if (Object.keys(opts).length <= 0) {\n        return _postcssNested.default;\n      }\n\n      throw new Error(\"tailwindcss/nesting should be loaded with a nesting plugin.\");\n    })();\n\n    (0, _postcss.default)([plugin]).process(root, result.opts).sync();\n    root.walkDecls(\"__apply\", decl => {\n      decl.before(_postcss.default.atRule({\n        name: \"apply\",\n        params: decl.value,\n        source: decl.source\n      }));\n      decl.remove();\n    });\n    /**\n    * Use a private PostCSS API to remove the \"clean\" flag from the entire AST.\n    * This is done because running process() on the AST will set the \"clean\"\n    * flag on all nodes, which we don't want.\n    *\n    * This causes downstream plugins using the visitor API to be skipped.\n    *\n    * This is guarded because the PostCSS API is not public\n    * and may change in future versions of PostCSS.\n    *\n    * See https://github.com/postcss/postcss/issues/1712 for more details\n    *\n    * @param {import('postcss').Node} node\n    */\n\n    function markDirty(node) {\n      if (!(\"markDirty\" in node)) {\n        return;\n      } // Traverse the tree down to the leaf nodes\n\n\n      if (node.nodes) {\n        node.nodes.forEach(n => markDirty(n));\n      } // If it's a leaf node mark it as dirty\n      // We do this here because marking a node as dirty\n      // will walk up the tree and mark all parents as dirty\n      // resulting in a lot of unnecessary work if we did this\n      // for every single node\n\n\n      if (!node.nodes) {\n        node.markDirty();\n      }\n    }\n\n    markDirty(root);\n    return root;\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","nesting","_postcss","_interopRequireDefault","require","_postcssNested","obj","__esModule","default","opts","root","result","walkAtRules","rule","name","params","before","decl","prop","source","remove","plugin","ref","hasOwnProperty","call","keys","length","Error","process","sync","walkDecls","atRule","markDirty","node","nodes","forEach","n"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/lib/postcss-plugins/nesting/plugin.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"nesting\", {\n    enumerable: true,\n    get: ()=>nesting\n});\nconst _postcss = /*#__PURE__*/ _interopRequireDefault(require(\"postcss\"));\nconst _postcssNested = /*#__PURE__*/ _interopRequireDefault(require(\"postcss-nested\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction nesting(opts = _postcssNested.default) {\n    return (root, result)=>{\n        root.walkAtRules(\"screen\", (rule)=>{\n            rule.name = \"media\";\n            rule.params = `screen(${rule.params})`;\n        });\n        root.walkAtRules(\"apply\", (rule)=>{\n            rule.before(_postcss.default.decl({\n                prop: \"__apply\",\n                value: rule.params,\n                source: rule.source\n            }));\n            rule.remove();\n        });\n        let plugin = (()=>{\n            var ref;\n            if (typeof opts === \"function\" || typeof opts === \"object\" && (opts === null || opts === void 0 ? void 0 : (ref = opts.hasOwnProperty) === null || ref === void 0 ? void 0 : ref.call(opts, \"postcssPlugin\"))) {\n                return opts;\n            }\n            if (typeof opts === \"string\") {\n                return require(opts);\n            }\n            if (Object.keys(opts).length <= 0) {\n                return _postcssNested.default;\n            }\n            throw new Error(\"tailwindcss/nesting should be loaded with a nesting plugin.\");\n        })();\n        (0, _postcss.default)([\n            plugin\n        ]).process(root, result.opts).sync();\n        root.walkDecls(\"__apply\", (decl)=>{\n            decl.before(_postcss.default.atRule({\n                name: \"apply\",\n                params: decl.value,\n                source: decl.source\n            }));\n            decl.remove();\n        });\n        /**\n     * Use a private PostCSS API to remove the \"clean\" flag from the entire AST.\n     * This is done because running process() on the AST will set the \"clean\"\n     * flag on all nodes, which we don't want.\n     *\n     * This causes downstream plugins using the visitor API to be skipped.\n     *\n     * This is guarded because the PostCSS API is not public\n     * and may change in future versions of PostCSS.\n     *\n     * See https://github.com/postcss/postcss/issues/1712 for more details\n     *\n     * @param {import('postcss').Node} node\n     */ function markDirty(node) {\n            if (!(\"markDirty\" in node)) {\n                return;\n            }\n            // Traverse the tree down to the leaf nodes\n            if (node.nodes) {\n                node.nodes.forEach((n)=>markDirty(n));\n            }\n            // If it's a leaf node mark it as dirty\n            // We do this here because marking a node as dirty\n            // will walk up the tree and mark all parents as dirty\n            // resulting in a lot of unnecessary work if we did this\n            // for every single node\n            if (!node.nodes) {\n                node.markDirty();\n            }\n        }\n        markDirty(root);\n        return root;\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}