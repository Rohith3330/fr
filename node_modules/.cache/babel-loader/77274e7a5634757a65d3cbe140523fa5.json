{"ast":null,"code":"/**\n * @fileoverview Provide the function that emits deprecation warnings.\n * @author Toru Nagashima <http://github.com/mysticatea>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst path = require(\"path\"); //------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n// Definitions for deprecation warnings.\n\n\nconst deprecationWarningMessages = {\n  ESLINT_LEGACY_ECMAFEATURES: \"The 'ecmaFeatures' config file property is deprecated and has no effect.\"\n};\nconst sourceFileErrorCache = new Set();\n/**\n * Emits a deprecation warning containing a given filepath. A new deprecation warning is emitted\n * for each unique file path, but repeated invocations with the same file path have no effect.\n * No warnings are emitted if the `--no-deprecation` or `--no-warnings` Node runtime flags are active.\n * @param {string} source The name of the configuration source to report the warning for.\n * @param {string} errorCode The warning message to show.\n * @returns {void}\n */\n\nfunction emitDeprecationWarning(source, errorCode) {\n  const cacheKey = JSON.stringify({\n    source,\n    errorCode\n  });\n\n  if (sourceFileErrorCache.has(cacheKey)) {\n    return;\n  }\n\n  sourceFileErrorCache.add(cacheKey);\n  const rel = path.relative(process.cwd(), source);\n  const message = deprecationWarningMessages[errorCode];\n  process.emitWarning(`${message} (found in \"${rel}\")`, \"DeprecationWarning\", errorCode);\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  emitDeprecationWarning\n};","map":{"version":3,"names":["path","require","deprecationWarningMessages","ESLINT_LEGACY_ECMAFEATURES","sourceFileErrorCache","Set","emitDeprecationWarning","source","errorCode","cacheKey","JSON","stringify","has","add","rel","relative","process","cwd","message","emitWarning","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/shared/deprecation-warnings.js"],"sourcesContent":["/**\n * @fileoverview Provide the function that emits deprecation warnings.\n * @author Toru Nagashima <http://github.com/mysticatea>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst path = require(\"path\");\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\n// Definitions for deprecation warnings.\nconst deprecationWarningMessages = {\n    ESLINT_LEGACY_ECMAFEATURES:\n        \"The 'ecmaFeatures' config file property is deprecated and has no effect.\"\n};\n\nconst sourceFileErrorCache = new Set();\n\n/**\n * Emits a deprecation warning containing a given filepath. A new deprecation warning is emitted\n * for each unique file path, but repeated invocations with the same file path have no effect.\n * No warnings are emitted if the `--no-deprecation` or `--no-warnings` Node runtime flags are active.\n * @param {string} source The name of the configuration source to report the warning for.\n * @param {string} errorCode The warning message to show.\n * @returns {void}\n */\nfunction emitDeprecationWarning(source, errorCode) {\n    const cacheKey = JSON.stringify({ source, errorCode });\n\n    if (sourceFileErrorCache.has(cacheKey)) {\n        return;\n    }\n\n    sourceFileErrorCache.add(cacheKey);\n\n    const rel = path.relative(process.cwd(), source);\n    const message = deprecationWarningMessages[errorCode];\n\n    process.emitWarning(\n        `${message} (found in \"${rel}\")`,\n        \"DeprecationWarning\",\n        errorCode\n    );\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    emitDeprecationWarning\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB,C,CAEA;AACA;AACA;AAEA;;;AACA,MAAMC,0BAA0B,GAAG;EAC/BC,0BAA0B,EACtB;AAF2B,CAAnC;AAKA,MAAMC,oBAAoB,GAAG,IAAIC,GAAJ,EAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,sBAAT,CAAgCC,MAAhC,EAAwCC,SAAxC,EAAmD;EAC/C,MAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAe;IAAEJ,MAAF;IAAUC;EAAV,CAAf,CAAjB;;EAEA,IAAIJ,oBAAoB,CAACQ,GAArB,CAAyBH,QAAzB,CAAJ,EAAwC;IACpC;EACH;;EAEDL,oBAAoB,CAACS,GAArB,CAAyBJ,QAAzB;EAEA,MAAMK,GAAG,GAAGd,IAAI,CAACe,QAAL,CAAcC,OAAO,CAACC,GAAR,EAAd,EAA6BV,MAA7B,CAAZ;EACA,MAAMW,OAAO,GAAGhB,0BAA0B,CAACM,SAAD,CAA1C;EAEAQ,OAAO,CAACG,WAAR,CACK,GAAED,OAAQ,eAAcJ,GAAI,IADjC,EAEI,oBAFJ,EAGIN,SAHJ;AAKH,C,CAED;AACA;AACA;;;AAEAY,MAAM,CAACC,OAAP,GAAiB;EACbf;AADa,CAAjB"},"metadata":{},"sourceType":"script"}