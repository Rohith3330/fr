{"ast":null,"code":"import chalk from 'chalk';\nimport ansiEscapes from 'ansi-escapes';\nimport { PatternPrompt, printPatternCaret, printRestoredPatternCaret } from 'jest-watcher';\nimport { escapeStrForRegex } from 'jest-regex-util';\nimport scroll from \"../lib/scroll.js\";\nimport { formatTestNameByPattern, getTerminalWidth, removeTrimmingDots } from \"../lib/utils.js\";\nimport { formatTypeaheadSelection, printMore, printPatternMatches, printStartTyping, printTypeaheadItem } from \"../lib/pattern_mode_helpers.js\";\nexport default class TestNamePatternPrompt extends PatternPrompt {\n  constructor(pipe, prompt) {\n    super(pipe, prompt);\n    this._entityName = 'tests';\n    this._cachedTestResults = [];\n    this._offset = -1;\n  }\n\n  _onChange(pattern, options) {\n    super._onChange(pattern, options);\n\n    this._offset = options.offset;\n\n    this._printTypeahead(pattern, options);\n  }\n\n  _printTypeahead(pattern, options) {\n    const matchedTests = this._getMatchedTests(pattern);\n\n    const total = matchedTests.length;\n    const pipe = this._pipe;\n    const prompt = this._prompt;\n    printPatternCaret(pattern, pipe);\n    pipe.write(ansiEscapes.cursorLeft);\n\n    if (pattern) {\n      printPatternMatches(total, 'test', pipe, ` from ${chalk.yellow('cached')} test suites`);\n      const width = getTerminalWidth(pipe);\n      const {\n        start,\n        end,\n        index\n      } = scroll(total, options);\n      prompt.setPromptLength(total);\n      matchedTests.slice(start, end).map(name => formatTestNameByPattern(name, pattern, width - 4)).map((item, i) => formatTypeaheadSelection(item, i, index, prompt)).forEach(item => printTypeaheadItem(item, pipe));\n\n      if (total > end) {\n        printMore('test', pipe, total - end);\n      }\n    } else {\n      printStartTyping('test name', pipe);\n    }\n\n    printRestoredPatternCaret(pattern, this._currentUsageRows, pipe);\n  }\n\n  _getMatchedTests(pattern) {\n    let regex;\n\n    try {\n      regex = new RegExp(pattern, 'i');\n    } catch (e) {\n      return [];\n    }\n\n    return this._cachedTestResults.reduce((matchedTests, _ref) => {\n      let {\n        testResults\n      } = _ref;\n      return matchedTests.concat(testResults.filter(_ref2 => {\n        let {\n          fullName\n        } = _ref2;\n        return regex.test(fullName);\n      }).map(_ref3 => {\n        let {\n          fullName\n        } = _ref3;\n        return fullName;\n      }));\n    }, []);\n  }\n\n  updateCachedTestResults() {\n    let testResults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this._cachedTestResults = testResults;\n  }\n\n  run(onSuccess, onCancel, options) {\n    super.run(value => {\n      const preparedPattern = escapeStrForRegex(removeTrimmingDots(value));\n      const useExactMatch = this._offset !== -1;\n      onSuccess(useExactMatch ? `^${preparedPattern}$` : preparedPattern);\n    }, onCancel, options);\n  }\n\n}","map":{"version":3,"names":["chalk","ansiEscapes","PatternPrompt","printPatternCaret","printRestoredPatternCaret","escapeStrForRegex","scroll","formatTestNameByPattern","getTerminalWidth","removeTrimmingDots","formatTypeaheadSelection","printMore","printPatternMatches","printStartTyping","printTypeaheadItem","TestNamePatternPrompt","constructor","pipe","prompt","_entityName","_cachedTestResults","_offset","_onChange","pattern","options","offset","_printTypeahead","matchedTests","_getMatchedTests","total","length","_pipe","_prompt","write","cursorLeft","yellow","width","start","end","index","setPromptLength","slice","map","name","item","i","forEach","_currentUsageRows","regex","RegExp","e","reduce","testResults","concat","filter","fullName","test","updateCachedTestResults","run","onSuccess","onCancel","value","preparedPattern","useExactMatch"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jest-watch-typeahead/build/test_name_plugin/prompt.js"],"sourcesContent":["import chalk from 'chalk';\nimport ansiEscapes from 'ansi-escapes';\nimport { PatternPrompt, printPatternCaret, printRestoredPatternCaret } from 'jest-watcher';\nimport { escapeStrForRegex } from 'jest-regex-util';\nimport scroll from \"../lib/scroll.js\";\nimport { formatTestNameByPattern, getTerminalWidth, removeTrimmingDots } from \"../lib/utils.js\";\nimport { formatTypeaheadSelection, printMore, printPatternMatches, printStartTyping, printTypeaheadItem } from \"../lib/pattern_mode_helpers.js\";\nexport default class TestNamePatternPrompt extends PatternPrompt {\n  constructor(pipe, prompt) {\n    super(pipe, prompt);\n    this._entityName = 'tests';\n    this._cachedTestResults = [];\n    this._offset = -1;\n  }\n\n  _onChange(pattern, options) {\n    super._onChange(pattern, options);\n\n    this._offset = options.offset;\n\n    this._printTypeahead(pattern, options);\n  }\n\n  _printTypeahead(pattern, options) {\n    const matchedTests = this._getMatchedTests(pattern);\n\n    const total = matchedTests.length;\n    const pipe = this._pipe;\n    const prompt = this._prompt;\n    printPatternCaret(pattern, pipe);\n    pipe.write(ansiEscapes.cursorLeft);\n\n    if (pattern) {\n      printPatternMatches(total, 'test', pipe, ` from ${chalk.yellow('cached')} test suites`);\n      const width = getTerminalWidth(pipe);\n      const {\n        start,\n        end,\n        index\n      } = scroll(total, options);\n      prompt.setPromptLength(total);\n      matchedTests.slice(start, end).map(name => formatTestNameByPattern(name, pattern, width - 4)).map((item, i) => formatTypeaheadSelection(item, i, index, prompt)).forEach(item => printTypeaheadItem(item, pipe));\n\n      if (total > end) {\n        printMore('test', pipe, total - end);\n      }\n    } else {\n      printStartTyping('test name', pipe);\n    }\n\n    printRestoredPatternCaret(pattern, this._currentUsageRows, pipe);\n  }\n\n  _getMatchedTests(pattern) {\n    let regex;\n\n    try {\n      regex = new RegExp(pattern, 'i');\n    } catch (e) {\n      return [];\n    }\n\n    return this._cachedTestResults.reduce((matchedTests, {\n      testResults\n    }) => {\n      return matchedTests.concat(testResults.filter(({\n        fullName\n      }) => regex.test(fullName)).map(({\n        fullName\n      }) => fullName));\n    }, []);\n  }\n\n  updateCachedTestResults(testResults = []) {\n    this._cachedTestResults = testResults;\n  }\n\n  run(onSuccess, onCancel, options) {\n    super.run(value => {\n      const preparedPattern = escapeStrForRegex(removeTrimmingDots(value));\n      const useExactMatch = this._offset !== -1;\n      onSuccess(useExactMatch ? `^${preparedPattern}$` : preparedPattern);\n    }, onCancel, options);\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}