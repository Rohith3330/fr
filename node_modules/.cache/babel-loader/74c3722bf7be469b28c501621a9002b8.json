{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _hasAccessibleChild = _interopRequireDefault(require(\"../util/hasAccessibleChild\"));\n/**\n * @fileoverview Enforce anchor elements to contain accessible content.\n * @author Lisa Ring & Niklas Holmberg\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\n\nvar errorMessage = 'Anchors must have content and the content must be accessible by a screen reader.';\nvar schema = (0, _schemas.generateObjSchema)({\n  components: _schemas.arraySchema\n});\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md',\n      description: 'Enforce all anchors to contain accessible content.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typeCheck = ['a'].concat(componentOptions);\n        var nodeType = elementType(node); // Only check anchor elements and custom types.\n\n        if (typeCheck.indexOf(nodeType) === -1) {\n          return;\n        }\n\n        if ((0, _hasAccessibleChild[\"default\"])(node.parent, elementType)) {\n          return;\n        }\n\n        context.report({\n          node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_getElementType","_schemas","_hasAccessibleChild","errorMessage","schema","generateObjSchema","components","arraySchema","_default","meta","docs","url","description","create","context","elementType","JSXOpeningElement","node","options","componentOptions","typeCheck","concat","nodeType","indexOf","parent","report","message","module","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/lib/rules/anchor-has-content.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _hasAccessibleChild = _interopRequireDefault(require(\"../util/hasAccessibleChild\"));\n\n/**\n * @fileoverview Enforce anchor elements to contain accessible content.\n * @author Lisa Ring & Niklas Holmberg\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\nvar errorMessage = 'Anchors must have content and the content must be accessible by a screen reader.';\nvar schema = (0, _schemas.generateObjSchema)({\n  components: _schemas.arraySchema\n});\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md',\n      description: 'Enforce all anchors to contain accessible content.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typeCheck = ['a'].concat(componentOptions);\n        var nodeType = elementType(node); // Only check anchor elements and custom types.\n\n        if (typeCheck.indexOf(nodeType) === -1) {\n          return;\n        }\n\n        if ((0, _hasAccessibleChild[\"default\"])(node.parent, elementType)) {\n          return;\n        }\n\n        context.report({\n          node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,eAAe,GAAGN,sBAAsB,CAACC,OAAO,CAAC,wBAAD,CAAR,CAA5C;;AAEA,IAAIM,QAAQ,GAAGN,OAAO,CAAC,iBAAD,CAAtB;;AAEA,IAAIO,mBAAmB,GAAGR,sBAAsB,CAACC,OAAO,CAAC,4BAAD,CAAR,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIQ,YAAY,GAAG,kFAAnB;AACA,IAAIC,MAAM,GAAG,CAAC,GAAGH,QAAQ,CAACI,iBAAb,EAAgC;EAC3CC,UAAU,EAAEL,QAAQ,CAACM;AADsB,CAAhC,CAAb;AAGA,IAAIC,QAAQ,GAAG;EACbC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,GAAG,EAAE,iGADD;MAEJC,WAAW,EAAE;IAFT,CADF;IAKJR,MAAM,EAAE,CAACA,MAAD;EALJ,CADO;EAQbS,MAAM,EAAE,SAASA,MAAT,CAAgBC,OAAhB,EAAyB;IAC/B,IAAIC,WAAW,GAAG,CAAC,GAAGf,eAAe,CAAC,SAAD,CAAnB,EAAgCc,OAAhC,CAAlB;IACA,OAAO;MACLE,iBAAiB,EAAE,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;QAClD,IAAIC,OAAO,GAAGJ,OAAO,CAACI,OAAR,CAAgB,CAAhB,KAAsB,EAApC;QACA,IAAIC,gBAAgB,GAAGD,OAAO,CAACZ,UAAR,IAAsB,EAA7C;QACA,IAAIc,SAAS,GAAG,CAAC,GAAD,EAAMC,MAAN,CAAaF,gBAAb,CAAhB;QACA,IAAIG,QAAQ,GAAGP,WAAW,CAACE,IAAD,CAA1B,CAJkD,CAIhB;;QAElC,IAAIG,SAAS,CAACG,OAAV,CAAkBD,QAAlB,MAAgC,CAAC,CAArC,EAAwC;UACtC;QACD;;QAED,IAAI,CAAC,GAAGpB,mBAAmB,CAAC,SAAD,CAAvB,EAAoCe,IAAI,CAACO,MAAzC,EAAiDT,WAAjD,CAAJ,EAAmE;UACjE;QACD;;QAEDD,OAAO,CAACW,MAAR,CAAe;UACbR,IADa;UAEbS,OAAO,EAAEvB;QAFI,CAAf;MAID;IAnBI,CAAP;EAqBD;AA/BY,CAAf;AAiCAL,OAAO,CAAC,SAAD,CAAP,GAAqBU,QAArB;AACAmB,MAAM,CAAC7B,OAAP,GAAiBA,OAAO,CAAC8B,OAAzB"},"metadata":{},"sourceType":"script"}