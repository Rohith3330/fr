{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst isUrlFunc = /url/i;\nconst isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nconst needParseDeclaration = /(?:url|(?:-webkit-)?image-set)\\(/i;\n\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\n\nfunction getWebpackIgnoreCommentValue(index, nodes, inBetween) {\n  if (index === 0 && typeof inBetween !== \"undefined\") {\n    return inBetween;\n  }\n\n  let prevValueNode = nodes[index - 1];\n\n  if (!prevValueNode) {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n\n  if (prevValueNode.type === \"space\") {\n    if (!nodes[index - 2]) {\n      // eslint-disable-next-line consistent-return\n      return;\n    }\n\n    prevValueNode = nodes[index - 2];\n  }\n\n  if (prevValueNode.type !== \"comment\") {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n\n  const matched = prevValueNode.value.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n  return matched && matched[2] === \"true\";\n}\n\nfunction shouldHandleURL(url, declaration, result, options) {\n  if (url.length === 0) {\n    result.warn(`Unable to find uri in '${declaration.toString()}'`, {\n      node: declaration\n    });\n    return {\n      requestable: false,\n      needResolve: false\n    };\n  }\n\n  return (0, _utils.isURLRequestable)(url, options);\n}\n\nfunction parseDeclaration(declaration, key, result, options) {\n  if (!needParseDeclaration.test(declaration[key])) {\n    return;\n  }\n\n  const parsed = (0, _postcssValueParser.default)(declaration.raws && declaration.raws.value && declaration.raws.value.raw ? declaration.raws.value.raw : declaration[key]);\n  let inBetween;\n\n  if (declaration.raws && declaration.raws.between) {\n    const lastCommentIndex = declaration.raws.between.lastIndexOf(\"/*\");\n    const matched = declaration.raws.between.slice(lastCommentIndex).match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n\n    if (matched) {\n      inBetween = matched[2] === \"true\";\n    }\n  }\n\n  let isIgnoreOnDeclaration = false;\n  const prevNode = declaration.prev();\n\n  if (prevNode && prevNode.type === \"comment\") {\n    const matched = prevNode.text.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n\n    if (matched) {\n      isIgnoreOnDeclaration = matched[2] === \"true\";\n    }\n  }\n\n  let needIgnore;\n  const parsedURLs = [];\n  parsed.walk((valueNode, index, valueNodes) => {\n    if (valueNode.type !== \"function\") {\n      return;\n    }\n\n    if (isUrlFunc.test(valueNode.value)) {\n      needIgnore = getWebpackIgnoreCommentValue(index, valueNodes, inBetween);\n\n      if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n        if (needIgnore) {\n          // eslint-disable-next-line no-undefined\n          needIgnore = undefined;\n        }\n\n        return;\n      }\n\n      const {\n        nodes\n      } = valueNode;\n      const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n      let url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n      url = (0, _utils.normalizeUrl)(url, isStringValue);\n      const {\n        requestable,\n        needResolve\n      } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n      if (!requestable) {\n        // eslint-disable-next-line consistent-return\n        return false;\n      }\n\n      const queryParts = url.split(\"!\");\n      let prefix;\n\n      if (queryParts.length > 1) {\n        url = queryParts.pop();\n        prefix = queryParts.join(\"!\");\n      }\n\n      parsedURLs.push({\n        declaration,\n        parsed,\n        node: getNodeFromUrlFunc(valueNode),\n        prefix,\n        url,\n        needQuotes: false,\n        needResolve\n      }); // eslint-disable-next-line consistent-return\n\n      return false;\n    } else if (isImageSetFunc.test(valueNode.value)) {\n      for (const [innerIndex, nNode] of valueNode.nodes.entries()) {\n        const {\n          type,\n          value\n        } = nNode;\n\n        if (type === \"function\" && isUrlFunc.test(value)) {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            } // eslint-disable-next-line no-continue\n\n\n            continue;\n          }\n\n          const {\n            nodes\n          } = nNode;\n          const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n          let url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n          url = (0, _utils.normalizeUrl)(url, isStringValue);\n          const {\n            requestable,\n            needResolve\n          } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n          if (!requestable) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n\n          const queryParts = url.split(\"!\");\n          let prefix;\n\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: getNodeFromUrlFunc(nNode),\n            prefix,\n            url,\n            needQuotes: false,\n            needResolve\n          });\n        } else if (type === \"string\") {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            } // eslint-disable-next-line no-continue\n\n\n            continue;\n          }\n\n          let url = (0, _utils.normalizeUrl)(value, true);\n          const {\n            requestable,\n            needResolve\n          } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n          if (!requestable) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n\n          const queryParts = url.split(\"!\");\n          let prefix;\n\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: nNode,\n            prefix,\n            url,\n            needQuotes: true,\n            needResolve\n          });\n        }\n      } // Do not traverse inside `image-set`\n      // eslint-disable-next-line consistent-return\n\n\n      return false;\n    }\n  }); // eslint-disable-next-line consistent-return\n\n  return parsedURLs;\n}\n\nconst plugin = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    postcssPlugin: \"postcss-url-parser\",\n\n    prepare(result) {\n      const parsedDeclarations = [];\n      return {\n        Declaration(declaration) {\n          const {\n            isSupportDataURL,\n            isSupportAbsoluteURL\n          } = options;\n          const parsedURL = parseDeclaration(declaration, \"value\", result, {\n            isSupportDataURL,\n            isSupportAbsoluteURL\n          });\n\n          if (!parsedURL) {\n            return;\n          }\n\n          parsedDeclarations.push(...parsedURL);\n        },\n\n        async OnceExit() {\n          if (parsedDeclarations.length === 0) {\n            return;\n          }\n\n          const resolvedDeclarations = await Promise.all(parsedDeclarations.map(async parsedDeclaration => {\n            const {\n              url,\n              needResolve\n            } = parsedDeclaration;\n\n            if (options.filter) {\n              const needKeep = await options.filter(url);\n\n              if (!needKeep) {\n                // eslint-disable-next-line consistent-return\n                return;\n              }\n            }\n\n            if (!needResolve) {\n              // eslint-disable-next-line consistent-return\n              return parsedDeclaration;\n            }\n\n            const splittedUrl = url.split(/(\\?)?#/);\n            const [pathname, query, hashOrQuery] = splittedUrl;\n            let hash = query ? \"?\" : \"\";\n            hash += hashOrQuery ? `#${hashOrQuery}` : \"\";\n            const {\n              resolver,\n              rootContext\n            } = options;\n            const request = (0, _utils.requestify)(pathname, rootContext, Boolean(resolver));\n\n            if (!resolver) {\n              // eslint-disable-next-line consistent-return\n              return { ...parsedDeclaration,\n                url: request,\n                hash\n              };\n            }\n\n            const resolvedURL = await (0, _utils.resolveRequests)(resolver, options.context, [...new Set([request, url])]);\n\n            if (!resolvedURL) {\n              // eslint-disable-next-line consistent-return\n              return;\n            } // eslint-disable-next-line consistent-return\n\n\n            return { ...parsedDeclaration,\n              url: resolvedURL,\n              hash\n            };\n          }));\n          const urlToNameMap = new Map();\n          const urlToReplacementMap = new Map();\n          let hasUrlImportHelper = false;\n\n          for (let index = 0; index <= resolvedDeclarations.length - 1; index++) {\n            const item = resolvedDeclarations[index];\n\n            if (!item) {\n              // eslint-disable-next-line no-continue\n              continue;\n            }\n\n            if (!hasUrlImportHelper) {\n              options.imports.push({\n                type: \"get_url_import\",\n                importName: \"___CSS_LOADER_GET_URL_IMPORT___\",\n                url: options.urlHandler(require.resolve(\"../runtime/getUrl.js\")),\n                index: -1\n              });\n              hasUrlImportHelper = true;\n            }\n\n            const {\n              url,\n              prefix\n            } = item;\n            const newUrl = prefix ? `${prefix}!${url}` : url;\n            let importName = urlToNameMap.get(newUrl);\n\n            if (!importName) {\n              importName = `___CSS_LOADER_URL_IMPORT_${urlToNameMap.size}___`;\n              urlToNameMap.set(newUrl, importName);\n              options.imports.push({\n                type: \"url\",\n                importName,\n                url: options.resolver ? options.urlHandler(newUrl) : JSON.stringify(newUrl),\n                index\n              });\n            }\n\n            const {\n              hash,\n              needQuotes\n            } = item;\n            const replacementKey = JSON.stringify({\n              newUrl,\n              hash,\n              needQuotes\n            });\n            let replacementName = urlToReplacementMap.get(replacementKey);\n\n            if (!replacementName) {\n              replacementName = `___CSS_LOADER_URL_REPLACEMENT_${urlToReplacementMap.size}___`;\n              urlToReplacementMap.set(replacementKey, replacementName);\n              options.replacements.push({\n                replacementName,\n                importName,\n                hash,\n                needQuotes\n              });\n            } // eslint-disable-next-line no-param-reassign\n\n\n            item.node.type = \"word\"; // eslint-disable-next-line no-param-reassign\n\n            item.node.value = replacementName; // eslint-disable-next-line no-param-reassign\n\n            item.declaration.value = item.parsed.toString();\n          }\n        }\n\n      };\n    }\n\n  };\n};\n\nplugin.postcss = true;\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_postcssValueParser","_interopRequireDefault","require","_utils","obj","__esModule","isUrlFunc","isImageSetFunc","needParseDeclaration","getNodeFromUrlFunc","node","nodes","getWebpackIgnoreCommentValue","index","inBetween","prevValueNode","type","matched","match","WEBPACK_IGNORE_COMMENT_REGEXP","shouldHandleURL","url","declaration","result","options","length","warn","toString","requestable","needResolve","isURLRequestable","parseDeclaration","key","test","parsed","raws","raw","between","lastCommentIndex","lastIndexOf","slice","isIgnoreOnDeclaration","prevNode","prev","text","needIgnore","parsedURLs","walk","valueNode","valueNodes","undefined","isStringValue","stringify","normalizeUrl","queryParts","split","prefix","pop","join","push","needQuotes","innerIndex","nNode","entries","plugin","postcssPlugin","prepare","parsedDeclarations","Declaration","isSupportDataURL","isSupportAbsoluteURL","parsedURL","OnceExit","resolvedDeclarations","Promise","all","map","parsedDeclaration","filter","needKeep","splittedUrl","pathname","query","hashOrQuery","hash","resolver","rootContext","request","requestify","Boolean","resolvedURL","resolveRequests","context","Set","urlToNameMap","Map","urlToReplacementMap","hasUrlImportHelper","item","imports","importName","urlHandler","resolve","newUrl","get","size","set","JSON","replacementKey","replacementName","replacements","postcss","_default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/css-loader/dist/plugins/postcss-url-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst isUrlFunc = /url/i;\nconst isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nconst needParseDeclaration = /(?:url|(?:-webkit-)?image-set)\\(/i;\n\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\n\nfunction getWebpackIgnoreCommentValue(index, nodes, inBetween) {\n  if (index === 0 && typeof inBetween !== \"undefined\") {\n    return inBetween;\n  }\n\n  let prevValueNode = nodes[index - 1];\n\n  if (!prevValueNode) {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n\n  if (prevValueNode.type === \"space\") {\n    if (!nodes[index - 2]) {\n      // eslint-disable-next-line consistent-return\n      return;\n    }\n\n    prevValueNode = nodes[index - 2];\n  }\n\n  if (prevValueNode.type !== \"comment\") {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n\n  const matched = prevValueNode.value.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n  return matched && matched[2] === \"true\";\n}\n\nfunction shouldHandleURL(url, declaration, result, options) {\n  if (url.length === 0) {\n    result.warn(`Unable to find uri in '${declaration.toString()}'`, {\n      node: declaration\n    });\n    return {\n      requestable: false,\n      needResolve: false\n    };\n  }\n\n  return (0, _utils.isURLRequestable)(url, options);\n}\n\nfunction parseDeclaration(declaration, key, result, options) {\n  if (!needParseDeclaration.test(declaration[key])) {\n    return;\n  }\n\n  const parsed = (0, _postcssValueParser.default)(declaration.raws && declaration.raws.value && declaration.raws.value.raw ? declaration.raws.value.raw : declaration[key]);\n  let inBetween;\n\n  if (declaration.raws && declaration.raws.between) {\n    const lastCommentIndex = declaration.raws.between.lastIndexOf(\"/*\");\n    const matched = declaration.raws.between.slice(lastCommentIndex).match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n\n    if (matched) {\n      inBetween = matched[2] === \"true\";\n    }\n  }\n\n  let isIgnoreOnDeclaration = false;\n  const prevNode = declaration.prev();\n\n  if (prevNode && prevNode.type === \"comment\") {\n    const matched = prevNode.text.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n\n    if (matched) {\n      isIgnoreOnDeclaration = matched[2] === \"true\";\n    }\n  }\n\n  let needIgnore;\n  const parsedURLs = [];\n  parsed.walk((valueNode, index, valueNodes) => {\n    if (valueNode.type !== \"function\") {\n      return;\n    }\n\n    if (isUrlFunc.test(valueNode.value)) {\n      needIgnore = getWebpackIgnoreCommentValue(index, valueNodes, inBetween);\n\n      if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n        if (needIgnore) {\n          // eslint-disable-next-line no-undefined\n          needIgnore = undefined;\n        }\n\n        return;\n      }\n\n      const {\n        nodes\n      } = valueNode;\n      const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n      let url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n      url = (0, _utils.normalizeUrl)(url, isStringValue);\n      const {\n        requestable,\n        needResolve\n      } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n      if (!requestable) {\n        // eslint-disable-next-line consistent-return\n        return false;\n      }\n\n      const queryParts = url.split(\"!\");\n      let prefix;\n\n      if (queryParts.length > 1) {\n        url = queryParts.pop();\n        prefix = queryParts.join(\"!\");\n      }\n\n      parsedURLs.push({\n        declaration,\n        parsed,\n        node: getNodeFromUrlFunc(valueNode),\n        prefix,\n        url,\n        needQuotes: false,\n        needResolve\n      }); // eslint-disable-next-line consistent-return\n\n      return false;\n    } else if (isImageSetFunc.test(valueNode.value)) {\n      for (const [innerIndex, nNode] of valueNode.nodes.entries()) {\n        const {\n          type,\n          value\n        } = nNode;\n\n        if (type === \"function\" && isUrlFunc.test(value)) {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            } // eslint-disable-next-line no-continue\n\n\n            continue;\n          }\n\n          const {\n            nodes\n          } = nNode;\n          const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n          let url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n          url = (0, _utils.normalizeUrl)(url, isStringValue);\n          const {\n            requestable,\n            needResolve\n          } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n          if (!requestable) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n\n          const queryParts = url.split(\"!\");\n          let prefix;\n\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: getNodeFromUrlFunc(nNode),\n            prefix,\n            url,\n            needQuotes: false,\n            needResolve\n          });\n        } else if (type === \"string\") {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            } // eslint-disable-next-line no-continue\n\n\n            continue;\n          }\n\n          let url = (0, _utils.normalizeUrl)(value, true);\n          const {\n            requestable,\n            needResolve\n          } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n          if (!requestable) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n\n          const queryParts = url.split(\"!\");\n          let prefix;\n\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: nNode,\n            prefix,\n            url,\n            needQuotes: true,\n            needResolve\n          });\n        }\n      } // Do not traverse inside `image-set`\n      // eslint-disable-next-line consistent-return\n\n\n      return false;\n    }\n  }); // eslint-disable-next-line consistent-return\n\n  return parsedURLs;\n}\n\nconst plugin = (options = {}) => {\n  return {\n    postcssPlugin: \"postcss-url-parser\",\n\n    prepare(result) {\n      const parsedDeclarations = [];\n      return {\n        Declaration(declaration) {\n          const {\n            isSupportDataURL,\n            isSupportAbsoluteURL\n          } = options;\n          const parsedURL = parseDeclaration(declaration, \"value\", result, {\n            isSupportDataURL,\n            isSupportAbsoluteURL\n          });\n\n          if (!parsedURL) {\n            return;\n          }\n\n          parsedDeclarations.push(...parsedURL);\n        },\n\n        async OnceExit() {\n          if (parsedDeclarations.length === 0) {\n            return;\n          }\n\n          const resolvedDeclarations = await Promise.all(parsedDeclarations.map(async parsedDeclaration => {\n            const {\n              url,\n              needResolve\n            } = parsedDeclaration;\n\n            if (options.filter) {\n              const needKeep = await options.filter(url);\n\n              if (!needKeep) {\n                // eslint-disable-next-line consistent-return\n                return;\n              }\n            }\n\n            if (!needResolve) {\n              // eslint-disable-next-line consistent-return\n              return parsedDeclaration;\n            }\n\n            const splittedUrl = url.split(/(\\?)?#/);\n            const [pathname, query, hashOrQuery] = splittedUrl;\n            let hash = query ? \"?\" : \"\";\n            hash += hashOrQuery ? `#${hashOrQuery}` : \"\";\n            const {\n              resolver,\n              rootContext\n            } = options;\n            const request = (0, _utils.requestify)(pathname, rootContext, Boolean(resolver));\n\n            if (!resolver) {\n              // eslint-disable-next-line consistent-return\n              return { ...parsedDeclaration,\n                url: request,\n                hash\n              };\n            }\n\n            const resolvedURL = await (0, _utils.resolveRequests)(resolver, options.context, [...new Set([request, url])]);\n\n            if (!resolvedURL) {\n              // eslint-disable-next-line consistent-return\n              return;\n            } // eslint-disable-next-line consistent-return\n\n\n            return { ...parsedDeclaration,\n              url: resolvedURL,\n              hash\n            };\n          }));\n          const urlToNameMap = new Map();\n          const urlToReplacementMap = new Map();\n          let hasUrlImportHelper = false;\n\n          for (let index = 0; index <= resolvedDeclarations.length - 1; index++) {\n            const item = resolvedDeclarations[index];\n\n            if (!item) {\n              // eslint-disable-next-line no-continue\n              continue;\n            }\n\n            if (!hasUrlImportHelper) {\n              options.imports.push({\n                type: \"get_url_import\",\n                importName: \"___CSS_LOADER_GET_URL_IMPORT___\",\n                url: options.urlHandler(require.resolve(\"../runtime/getUrl.js\")),\n                index: -1\n              });\n              hasUrlImportHelper = true;\n            }\n\n            const {\n              url,\n              prefix\n            } = item;\n            const newUrl = prefix ? `${prefix}!${url}` : url;\n            let importName = urlToNameMap.get(newUrl);\n\n            if (!importName) {\n              importName = `___CSS_LOADER_URL_IMPORT_${urlToNameMap.size}___`;\n              urlToNameMap.set(newUrl, importName);\n              options.imports.push({\n                type: \"url\",\n                importName,\n                url: options.resolver ? options.urlHandler(newUrl) : JSON.stringify(newUrl),\n                index\n              });\n            }\n\n            const {\n              hash,\n              needQuotes\n            } = item;\n            const replacementKey = JSON.stringify({\n              newUrl,\n              hash,\n              needQuotes\n            });\n            let replacementName = urlToReplacementMap.get(replacementKey);\n\n            if (!replacementName) {\n              replacementName = `___CSS_LOADER_URL_REPLACEMENT_${urlToReplacementMap.size}___`;\n              urlToReplacementMap.set(replacementKey, replacementName);\n              options.replacements.push({\n                replacementName,\n                importName,\n                hash,\n                needQuotes\n              });\n            } // eslint-disable-next-line no-param-reassign\n\n\n            item.node.type = \"word\"; // eslint-disable-next-line no-param-reassign\n\n            item.node.value = replacementName; // eslint-disable-next-line no-param-reassign\n\n            item.declaration.value = item.parsed.toString();\n          }\n        }\n\n      };\n    }\n\n  };\n};\n\nplugin.postcss = true;\nvar _default = plugin;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}