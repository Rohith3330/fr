{"ast":null,"code":"'use strict';\n/**\n * @param {import('postcss').Rule} rule\n * @param {import('postcss').Declaration} decl\n * @param {Partial<import('postcss').DeclarationProps>=} props\n * @return {import('postcss').Declaration}\n */\n\nmodule.exports = function insertCloned(rule, decl, props) {\n  const newNode = Object.assign(decl.clone(), props);\n  rule.insertAfter(decl, newNode);\n  return newNode;\n};","map":{"version":3,"names":["module","exports","insertCloned","rule","decl","props","newNode","Object","assign","clone","insertAfter"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-merge-longhand/src/lib/insertCloned.js"],"sourcesContent":["'use strict';\n/**\n * @param {import('postcss').Rule} rule\n * @param {import('postcss').Declaration} decl\n * @param {Partial<import('postcss').DeclarationProps>=} props\n * @return {import('postcss').Declaration}\n */\nmodule.exports = function insertCloned(rule, decl, props) {\n  const newNode = Object.assign(decl.clone(), props);\n\n  rule.insertAfter(decl, newNode);\n\n  return newNode;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,KAAlC,EAAyC;EACxD,MAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcJ,IAAI,CAACK,KAAL,EAAd,EAA4BJ,KAA5B,CAAhB;EAEAF,IAAI,CAACO,WAAL,CAAiBN,IAAjB,EAAuBE,OAAvB;EAEA,OAAOA,OAAP;AACD,CAND"},"metadata":{},"sourceType":"script"}