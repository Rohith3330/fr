{"ast":null,"code":"let random = async bytes => crypto.getRandomValues(new Uint8Array(bytes));\n\nlet customAlphabet = function (alphabet) {\n  let defaultSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;\n  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  let step = -~(1.6 * mask * defaultSize / alphabet.length);\n  return async function () {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;\n    let id = '';\n\n    while (true) {\n      let bytes = crypto.getRandomValues(new Uint8Array(step));\n      let i = step;\n\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\n\nlet nanoid = async function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  let id = '';\n  let bytes = crypto.getRandomValues(new Uint8Array(size));\n\n  while (size--) {\n    let byte = bytes[size] & 63;\n\n    if (byte < 36) {\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte < 63) {\n      id += '_';\n    } else {\n      id += '-';\n    }\n  }\n\n  return id;\n};\n\nexport { nanoid, customAlphabet, random };","map":{"version":3,"names":["random","bytes","crypto","getRandomValues","Uint8Array","customAlphabet","alphabet","defaultSize","mask","Math","log","length","LN2","step","size","id","i","nanoid","byte","toString","toUpperCase"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/nanoid/async/index.browser.js"],"sourcesContent":["let random = async bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return async (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = crypto.getRandomValues(new Uint8Array(step))\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet nanoid = async (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, random }\n"],"mappings":"AAAA,IAAIA,MAAM,GAAG,MAAMC,KAAN,IAAeC,MAAM,CAACC,eAAP,CAAuB,IAAIC,UAAJ,CAAeH,KAAf,CAAvB,CAA5B;;AACA,IAAII,cAAc,GAAG,UAACC,QAAD,EAAgC;EAAA,IAArBC,WAAqB,uEAAP,EAAO;EACnD,IAAIC,IAAI,GAAG,CAAC,KAAMC,IAAI,CAACC,GAAL,CAASJ,QAAQ,CAACK,MAAT,GAAkB,CAA3B,IAAgCF,IAAI,CAACG,GAA5C,IAAoD,CAA/D;EACA,IAAIC,IAAI,GAAG,CAAC,EAAG,MAAML,IAAN,GAAaD,WAAd,GAA6BD,QAAQ,CAACK,MAAxC,CAAZ;EACA,OAAO,kBAA8B;IAAA,IAAvBG,IAAuB,uEAAhBP,WAAgB;IACnC,IAAIQ,EAAE,GAAG,EAAT;;IACA,OAAO,IAAP,EAAa;MACX,IAAId,KAAK,GAAGC,MAAM,CAACC,eAAP,CAAuB,IAAIC,UAAJ,CAAeS,IAAf,CAAvB,CAAZ;MACA,IAAIG,CAAC,GAAGH,IAAR;;MACA,OAAOG,CAAC,EAAR,EAAY;QACVD,EAAE,IAAIT,QAAQ,CAACL,KAAK,CAACe,CAAD,CAAL,GAAWR,IAAZ,CAAR,IAA6B,EAAnC;QACA,IAAIO,EAAE,CAACJ,MAAH,KAAcG,IAAlB,EAAwB,OAAOC,EAAP;MACzB;IACF;EACF,CAVD;AAWD,CAdD;;AAeA,IAAIE,MAAM,GAAG,kBAAqB;EAAA,IAAdH,IAAc,uEAAP,EAAO;EAChC,IAAIC,EAAE,GAAG,EAAT;EACA,IAAId,KAAK,GAAGC,MAAM,CAACC,eAAP,CAAuB,IAAIC,UAAJ,CAAeU,IAAf,CAAvB,CAAZ;;EACA,OAAOA,IAAI,EAAX,EAAe;IACb,IAAII,IAAI,GAAGjB,KAAK,CAACa,IAAD,CAAL,GAAc,EAAzB;;IACA,IAAII,IAAI,GAAG,EAAX,EAAe;MACbH,EAAE,IAAIG,IAAI,CAACC,QAAL,CAAc,EAAd,CAAN;IACD,CAFD,MAEO,IAAID,IAAI,GAAG,EAAX,EAAe;MACpBH,EAAE,IAAI,CAACG,IAAI,GAAG,EAAR,EAAYC,QAAZ,CAAqB,EAArB,EAAyBC,WAAzB,EAAN;IACD,CAFM,MAEA,IAAIF,IAAI,GAAG,EAAX,EAAe;MACpBH,EAAE,IAAI,GAAN;IACD,CAFM,MAEA;MACLA,EAAE,IAAI,GAAN;IACD;EACF;;EACD,OAAOA,EAAP;AACD,CAhBD;;AAiBA,SAASE,MAAT,EAAiBZ,cAAjB,EAAiCL,MAAjC"},"metadata":{},"sourceType":"module"}