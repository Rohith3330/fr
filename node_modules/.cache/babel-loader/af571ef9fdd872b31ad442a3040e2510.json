{"ast":null,"code":"let assert = require('assert');\n\nlet exec = require('child_process').execSync;\n\nconst PROJECT_DIR = process.env.PROJECT_DIR;\nconst JAKE_CMD = `${PROJECT_DIR}/bin/cli.js`;\nsuite('concurrent', function () {\n  this.timeout(7000);\n  test(' simple concurrent prerequisites 1', function () {\n    let out = exec(`${JAKE_CMD} -q concurrent:simple1`).toString().trim();\n    assert.equal('Started A\\nStarted B\\nFinished B\\nFinished A', out);\n  });\n  test(' simple concurrent prerequisites 2', function () {\n    let out = exec(`${JAKE_CMD} -q concurrent:simple2`).toString().trim();\n    assert.equal('Started C\\nStarted D\\nFinished C\\nFinished D', out);\n  });\n  test(' sequential concurrent prerequisites', function () {\n    let out = exec(`${JAKE_CMD} -q concurrent:seqconcurrent`).toString().trim();\n    assert.equal('Started A\\nStarted B\\nFinished B\\nFinished A\\nStarted C\\nStarted D\\nFinished C\\nFinished D', out);\n  });\n  test(' concurrent concurrent prerequisites', function () {\n    let out = exec(`${JAKE_CMD} -q concurrent:concurrentconcurrent`).toString().trim();\n    assert.equal('Started A\\nStarted B\\nStarted C\\nStarted D\\nFinished B\\nFinished C\\nFinished A\\nFinished D', out);\n  });\n  test(' concurrent prerequisites with subdependency', function () {\n    let out = exec(`${JAKE_CMD} -q concurrent:subdep`).toString().trim();\n    assert.equal('Started A\\nFinished A\\nStarted Ba\\nFinished Ba', out);\n  });\n  test(' failing in concurrent prerequisites', function () {\n    try {\n      exec(`${JAKE_CMD} -q concurrent:Cfail`);\n    } catch (err) {\n      assert(err.message.indexOf('Command failed') > -1);\n    }\n  });\n});","map":{"version":3,"names":["assert","require","exec","execSync","PROJECT_DIR","process","env","JAKE_CMD","suite","timeout","test","out","toString","trim","equal","err","message","indexOf"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jake/test/integration/concurrent.js"],"sourcesContent":["let assert = require('assert');\nlet exec = require('child_process').execSync;\n\nconst PROJECT_DIR = process.env.PROJECT_DIR;\nconst JAKE_CMD = `${PROJECT_DIR}/bin/cli.js`;\n\nsuite('concurrent', function () {\n\n  this.timeout(7000);\n\n  test(' simple concurrent prerequisites 1', function () {\n    let out = exec(`${JAKE_CMD} -q concurrent:simple1`).toString().trim()\n    assert.equal('Started A\\nStarted B\\nFinished B\\nFinished A', out);\n  });\n\n  test(' simple concurrent prerequisites 2', function () {\n    let out = exec(`${JAKE_CMD} -q concurrent:simple2`).toString().trim()\n    assert.equal('Started C\\nStarted D\\nFinished C\\nFinished D', out);\n  });\n\n  test(' sequential concurrent prerequisites', function () {\n    let out = exec(`${JAKE_CMD} -q concurrent:seqconcurrent`).toString().trim()\n    assert.equal('Started A\\nStarted B\\nFinished B\\nFinished A\\nStarted C\\nStarted D\\nFinished C\\nFinished D', out);\n  });\n\n  test(' concurrent concurrent prerequisites', function () {\n    let out = exec(`${JAKE_CMD} -q concurrent:concurrentconcurrent`).toString().trim()\n    assert.equal('Started A\\nStarted B\\nStarted C\\nStarted D\\nFinished B\\nFinished C\\nFinished A\\nFinished D', out);\n  });\n\n  test(' concurrent prerequisites with subdependency', function () {\n    let out = exec(`${JAKE_CMD} -q concurrent:subdep`).toString().trim()\n    assert.equal('Started A\\nFinished A\\nStarted Ba\\nFinished Ba', out);\n  });\n\n  test(' failing in concurrent prerequisites', function () {\n    try {\n      exec(`${JAKE_CMD} -q concurrent:Cfail`);\n    }\n    catch(err) {\n      assert(err.message.indexOf('Command failed') > -1);\n    }\n  });\n\n});\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBE,QAApC;;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYF,WAAhC;AACA,MAAMG,QAAQ,GAAI,GAAEH,WAAY,aAAhC;AAEAI,KAAK,CAAC,YAAD,EAAe,YAAY;EAE9B,KAAKC,OAAL,CAAa,IAAb;EAEAC,IAAI,CAAC,oCAAD,EAAuC,YAAY;IACrD,IAAIC,GAAG,GAAGT,IAAI,CAAE,GAAEK,QAAS,wBAAb,CAAJ,CAA0CK,QAA1C,GAAqDC,IAArD,EAAV;IACAb,MAAM,CAACc,KAAP,CAAa,8CAAb,EAA6DH,GAA7D;EACD,CAHG,CAAJ;EAKAD,IAAI,CAAC,oCAAD,EAAuC,YAAY;IACrD,IAAIC,GAAG,GAAGT,IAAI,CAAE,GAAEK,QAAS,wBAAb,CAAJ,CAA0CK,QAA1C,GAAqDC,IAArD,EAAV;IACAb,MAAM,CAACc,KAAP,CAAa,8CAAb,EAA6DH,GAA7D;EACD,CAHG,CAAJ;EAKAD,IAAI,CAAC,sCAAD,EAAyC,YAAY;IACvD,IAAIC,GAAG,GAAGT,IAAI,CAAE,GAAEK,QAAS,8BAAb,CAAJ,CAAgDK,QAAhD,GAA2DC,IAA3D,EAAV;IACAb,MAAM,CAACc,KAAP,CAAa,4FAAb,EAA2GH,GAA3G;EACD,CAHG,CAAJ;EAKAD,IAAI,CAAC,sCAAD,EAAyC,YAAY;IACvD,IAAIC,GAAG,GAAGT,IAAI,CAAE,GAAEK,QAAS,qCAAb,CAAJ,CAAuDK,QAAvD,GAAkEC,IAAlE,EAAV;IACAb,MAAM,CAACc,KAAP,CAAa,4FAAb,EAA2GH,GAA3G;EACD,CAHG,CAAJ;EAKAD,IAAI,CAAC,8CAAD,EAAiD,YAAY;IAC/D,IAAIC,GAAG,GAAGT,IAAI,CAAE,GAAEK,QAAS,uBAAb,CAAJ,CAAyCK,QAAzC,GAAoDC,IAApD,EAAV;IACAb,MAAM,CAACc,KAAP,CAAa,gDAAb,EAA+DH,GAA/D;EACD,CAHG,CAAJ;EAKAD,IAAI,CAAC,sCAAD,EAAyC,YAAY;IACvD,IAAI;MACFR,IAAI,CAAE,GAAEK,QAAS,sBAAb,CAAJ;IACD,CAFD,CAGA,OAAMQ,GAAN,EAAW;MACTf,MAAM,CAACe,GAAG,CAACC,OAAJ,CAAYC,OAAZ,CAAoB,gBAApB,IAAwC,CAAC,CAA1C,CAAN;IACD;EACF,CAPG,CAAJ;AASD,CAtCI,CAAL"},"metadata":{},"sourceType":"script"}