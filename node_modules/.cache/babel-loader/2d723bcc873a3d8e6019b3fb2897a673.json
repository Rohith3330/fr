{"ast":null,"code":"import expect from 'expect';\nimport { elementType } from 'jsx-ast-utils';\nimport isAbstractRole from '../../../src/util/isAbstractRole';\nimport { genElementSymbol, genAbstractRoleElements, genNonAbstractRoleElements } from '../../../__mocks__/genInteractives';\ndescribe('isAbstractRole', () => {\n  describe('JSX Components (no tagName)', () => {\n    it('should NOT identify them as abstract role elements', () => {\n      expect(isAbstractRole(undefined, [])).toBe(false);\n    });\n  });\n  describe('elements with an abstract role', () => {\n    genAbstractRoleElements().forEach(_ref => {\n      let {\n        openingElement\n      } = _ref;\n      const {\n        attributes\n      } = openingElement;\n      it(`should identify \\`${genElementSymbol(openingElement)}\\` as an abstract role element`, () => {\n        expect(isAbstractRole(elementType(openingElement), attributes)).toBe(true);\n      });\n    });\n  });\n  describe('elements with a non-abstract role', () => {\n    genNonAbstractRoleElements().forEach(_ref2 => {\n      let {\n        openingElement\n      } = _ref2;\n      const {\n        attributes\n      } = openingElement;\n      it(`should NOT identify \\`${genElementSymbol(openingElement)}\\` as an abstract role element`, () => {\n        expect(isAbstractRole(elementType(openingElement), attributes)).toBe(false);\n      });\n    });\n  });\n});","map":{"version":3,"names":["expect","elementType","isAbstractRole","genElementSymbol","genAbstractRoleElements","genNonAbstractRoleElements","describe","it","undefined","toBe","forEach","openingElement","attributes"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/isAbstractRole-test.js"],"sourcesContent":["import expect from 'expect';\nimport { elementType } from 'jsx-ast-utils';\nimport isAbstractRole from '../../../src/util/isAbstractRole';\nimport {\n  genElementSymbol,\n  genAbstractRoleElements,\n  genNonAbstractRoleElements,\n} from '../../../__mocks__/genInteractives';\n\ndescribe('isAbstractRole', () => {\n  describe('JSX Components (no tagName)', () => {\n    it('should NOT identify them as abstract role elements', () => {\n      expect(isAbstractRole(undefined, []))\n        .toBe(false);\n    });\n  });\n  describe('elements with an abstract role', () => {\n    genAbstractRoleElements().forEach(({ openingElement }) => {\n      const { attributes } = openingElement;\n      it(`should identify \\`${genElementSymbol(openingElement)}\\` as an abstract role element`, () => {\n        expect(isAbstractRole(\n          elementType(openingElement),\n          attributes,\n        )).toBe(true);\n      });\n    });\n  });\n  describe('elements with a non-abstract role', () => {\n    genNonAbstractRoleElements().forEach(({ openingElement }) => {\n      const { attributes } = openingElement;\n      it(`should NOT identify \\`${genElementSymbol(openingElement)}\\` as an abstract role element`, () => {\n        expect(isAbstractRole(\n          elementType(openingElement),\n          attributes,\n        )).toBe(false);\n      });\n    });\n  });\n});\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,SACEC,gBADF,EAEEC,uBAFF,EAGEC,0BAHF,QAIO,oCAJP;AAMAC,QAAQ,CAAC,gBAAD,EAAmB,MAAM;EAC/BA,QAAQ,CAAC,6BAAD,EAAgC,MAAM;IAC5CC,EAAE,CAAC,oDAAD,EAAuD,MAAM;MAC7DP,MAAM,CAACE,cAAc,CAACM,SAAD,EAAY,EAAZ,CAAf,CAAN,CACGC,IADH,CACQ,KADR;IAED,CAHC,CAAF;EAID,CALO,CAAR;EAMAH,QAAQ,CAAC,gCAAD,EAAmC,MAAM;IAC/CF,uBAAuB,GAAGM,OAA1B,CAAkC,QAAwB;MAAA,IAAvB;QAAEC;MAAF,CAAuB;MACxD,MAAM;QAAEC;MAAF,IAAiBD,cAAvB;MACAJ,EAAE,CAAE,qBAAoBJ,gBAAgB,CAACQ,cAAD,CAAiB,gCAAvD,EAAwF,MAAM;QAC9FX,MAAM,CAACE,cAAc,CACnBD,WAAW,CAACU,cAAD,CADQ,EAEnBC,UAFmB,CAAf,CAAN,CAGGH,IAHH,CAGQ,IAHR;MAID,CALC,CAAF;IAMD,CARD;EASD,CAVO,CAAR;EAWAH,QAAQ,CAAC,mCAAD,EAAsC,MAAM;IAClDD,0BAA0B,GAAGK,OAA7B,CAAqC,SAAwB;MAAA,IAAvB;QAAEC;MAAF,CAAuB;MAC3D,MAAM;QAAEC;MAAF,IAAiBD,cAAvB;MACAJ,EAAE,CAAE,yBAAwBJ,gBAAgB,CAACQ,cAAD,CAAiB,gCAA3D,EAA4F,MAAM;QAClGX,MAAM,CAACE,cAAc,CACnBD,WAAW,CAACU,cAAD,CADQ,EAEnBC,UAFmB,CAAf,CAAN,CAGGH,IAHH,CAGQ,KAHR;MAID,CALC,CAAF;IAMD,CARD;EASD,CAVO,CAAR;AAWD,CA7BO,CAAR"},"metadata":{},"sourceType":"module"}