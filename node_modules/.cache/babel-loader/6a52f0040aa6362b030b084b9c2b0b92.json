{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util_1 = require(\"../util\");\n\nexports.default = (0, util_1.createRule)({\n  name: 'comma-spacing',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Enforce consistent spacing before and after commas',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: 'whitespace',\n    schema: [{\n      type: 'object',\n      properties: {\n        before: {\n          type: 'boolean',\n          default: false\n        },\n        after: {\n          type: 'boolean',\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: `There should be no space {{loc}} ','.`,\n      missing: `A space is required {{loc}} ','.`\n    }\n  },\n  defaultOptions: [{\n    before: false,\n    after: true\n  }],\n\n  create(context, _ref) {\n    let [{\n      before: spaceBefore,\n      after: spaceAfter\n    }] = _ref;\n    const sourceCode = context.getSourceCode();\n    const tokensAndComments = sourceCode.tokensAndComments;\n    const ignoredTokens = new Set();\n    /**\n     * Adds null elements of the ArrayExpression or ArrayPattern node to the ignore list\n     * @param node node to evaluate\n     */\n\n    function addNullElementsToIgnoreList(node) {\n      let previousToken = sourceCode.getFirstToken(node);\n\n      for (const element of node.elements) {\n        let token;\n\n        if (element === null) {\n          token = sourceCode.getTokenAfter(previousToken);\n\n          if (token && (0, util_1.isCommaToken)(token)) {\n            ignoredTokens.add(token);\n          }\n        } else {\n          token = sourceCode.getTokenAfter(element);\n        }\n\n        previousToken = token;\n      }\n    }\n    /**\n     * Adds type parameters trailing comma token to the ignore list\n     * @param node node to evaluate\n     */\n\n\n    function addTypeParametersTrailingCommaToIgnoreList(node) {\n      const paramLength = node.params.length;\n\n      if (paramLength) {\n        const param = node.params[paramLength - 1];\n        const afterToken = sourceCode.getTokenAfter(param);\n\n        if (afterToken && (0, util_1.isCommaToken)(afterToken)) {\n          ignoredTokens.add(afterToken);\n        }\n      }\n    }\n    /**\n     * Validates the spacing around a comma token.\n     * @param commaToken The token representing the comma\n     * @param prevToken The last token before the comma\n     * @param nextToken The first token after the comma\n     */\n\n\n    function validateCommaSpacing(commaToken, prevToken, nextToken) {\n      if (prevToken && (0, util_1.isTokenOnSameLine)(prevToken, commaToken) && // eslint-disable-next-line deprecation/deprecation -- TODO - switch once our min ESLint version is 6.7.0\n      spaceBefore !== sourceCode.isSpaceBetweenTokens(prevToken, commaToken)) {\n        context.report({\n          node: commaToken,\n          data: {\n            loc: 'before'\n          },\n          messageId: spaceBefore ? 'missing' : 'unexpected',\n          fix: fixer => spaceBefore ? fixer.insertTextBefore(commaToken, ' ') : fixer.replaceTextRange([prevToken.range[1], commaToken.range[0]], '')\n        });\n      }\n\n      if (nextToken && (0, util_1.isClosingParenToken)(nextToken)) {\n        return;\n      }\n\n      if (!spaceAfter && nextToken && nextToken.type === utils_1.AST_TOKEN_TYPES.Line) {\n        return;\n      }\n\n      if (nextToken && (0, util_1.isTokenOnSameLine)(commaToken, nextToken) && // eslint-disable-next-line deprecation/deprecation -- TODO - switch once our min ESLint version is 6.7.0\n      spaceAfter !== sourceCode.isSpaceBetweenTokens(commaToken, nextToken)) {\n        context.report({\n          node: commaToken,\n          data: {\n            loc: 'after'\n          },\n          messageId: spaceAfter ? 'missing' : 'unexpected',\n          fix: fixer => spaceAfter ? fixer.insertTextAfter(commaToken, ' ') : fixer.replaceTextRange([commaToken.range[1], nextToken.range[0]], '')\n        });\n      }\n    }\n\n    return {\n      TSTypeParameterDeclaration: addTypeParametersTrailingCommaToIgnoreList,\n      ArrayExpression: addNullElementsToIgnoreList,\n      ArrayPattern: addNullElementsToIgnoreList,\n\n      'Program:exit'() {\n        tokensAndComments.forEach((token, i) => {\n          if (!(0, util_1.isCommaToken)(token)) {\n            return;\n          }\n\n          const prevToken = tokensAndComments[i - 1];\n          const nextToken = tokensAndComments[i + 1];\n          validateCommaSpacing(token, (0, util_1.isCommaToken)(prevToken) || ignoredTokens.has(token) ? null : prevToken, nextToken && (0, util_1.isCommaToken)(nextToken) || ignoredTokens.has(token) ? null : nextToken);\n        });\n      }\n\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["exports","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","schema","properties","before","default","after","additionalProperties","messages","unexpected","missing","defaultOptions","create","context","spaceBefore","spaceAfter","sourceCode","getSourceCode","tokensAndComments","ignoredTokens","Set","addNullElementsToIgnoreList","node","previousToken","getFirstToken","element","elements","token","getTokenAfter","add","addTypeParametersTrailingCommaToIgnoreList","paramLength","params","length","param","afterToken","validateCommaSpacing","commaToken","prevToken","nextToken","isSpaceBetweenTokens","report","data","loc","messageId","fix","fixer","insertTextBefore","replaceTextRange","range","utils_1","Line","insertTextAfter","TSTypeParameterDeclaration","ArrayExpression","ArrayPattern","forEach","i","has"],"sources":["../../src/rules/comma-spacing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}