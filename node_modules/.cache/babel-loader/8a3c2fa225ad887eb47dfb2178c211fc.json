{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  var ops = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : tfOps;\n  switch (node.op) {\n    case 'LowerBound':\n      {\n        var sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n        var values = getParamValue('values', node, tensorMap, context);\n        return [ops.lowerBound(sortedSequence, values)];\n      }\n    case 'TopKV2':\n      {\n        var x = getParamValue('x', node, tensorMap, context);\n        var k = getParamValue('k', node, tensorMap, context);\n        var sorted = getParamValue('sorted', node, tensorMap, context);\n        var result = ops.topk(x, k, sorted);\n        return [result.values, result.indices];\n      }\n    case 'UpperBound':\n      {\n        var _sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n        var _values = getParamValue('values', node, tensorMap, context);\n        return [ops.upperBound(_sortedSequence, _values)];\n      }\n    case 'Unique':\n      {\n        var _x = getParamValue('x', node, tensorMap, context);\n        var _result = ops.unique(_x);\n        return [_result.values, _result.indices];\n      }\n    case 'UniqueV2':\n      {\n        var _x2 = getParamValue('x', node, tensorMap, context);\n        var axis = getParamValue('axis', node, tensorMap, context);\n        var _result2 = ops.unique(_x2, axis);\n        return [_result2.values, _result2.indices];\n      }\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'evaluation';","map":null,"metadata":{},"sourceType":"module"}