{"ast":null,"code":"var DESCRIPTORS = require('../internals/descriptors');\n\nvar UNSUPPORTED_DOT_ALL = require('../internals/regexp-unsupported-dot-all');\n\nvar classof = require('../internals/classof-raw');\n\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\n\nvar getInternalState = require('../internals/internal-state').get;\n\nvar RegExpPrototype = RegExp.prototype;\nvar $TypeError = TypeError; // `RegExp.prototype.dotAll` getter\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.dotall\n\nif (DESCRIPTORS && UNSUPPORTED_DOT_ALL) {\n  defineBuiltInAccessor(RegExpPrototype, 'dotAll', {\n    configurable: true,\n    get: function dotAll() {\n      if (this === RegExpPrototype) return undefined; // We can't use InternalStateModule.getterFor because\n      // we don't add metadata for regexps created by a literal.\n\n      if (classof(this) === 'RegExp') {\n        return !!getInternalState(this).dotAll;\n      }\n\n      throw $TypeError('Incompatible receiver, RegExp required');\n    }\n  });\n}","map":{"version":3,"names":["DESCRIPTORS","require","UNSUPPORTED_DOT_ALL","classof","defineBuiltInAccessor","getInternalState","get","RegExpPrototype","RegExp","prototype","$TypeError","TypeError","configurable","dotAll","undefined"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/core-js/modules/es.regexp.dot-all.js"],"sourcesContent":["var DESCRIPTORS = require('../internals/descriptors');\nvar UNSUPPORTED_DOT_ALL = require('../internals/regexp-unsupported-dot-all');\nvar classof = require('../internals/classof-raw');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar getInternalState = require('../internals/internal-state').get;\n\nvar RegExpPrototype = RegExp.prototype;\nvar $TypeError = TypeError;\n\n// `RegExp.prototype.dotAll` getter\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.dotall\nif (DESCRIPTORS && UNSUPPORTED_DOT_ALL) {\n  defineBuiltInAccessor(RegExpPrototype, 'dotAll', {\n    configurable: true,\n    get: function dotAll() {\n      if (this === RegExpPrototype) return undefined;\n      // We can't use InternalStateModule.getterFor because\n      // we don't add metadata for regexps created by a literal.\n      if (classof(this) === 'RegExp') {\n        return !!getInternalState(this).dotAll;\n      }\n      throw $TypeError('Incompatible receiver, RegExp required');\n    }\n  });\n}\n"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,0BAAD,CAAzB;;AACA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,0BAAD,CAArB;;AACA,IAAIG,qBAAqB,GAAGH,OAAO,CAAC,uCAAD,CAAnC;;AACA,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,6BAAD,CAAP,CAAuCK,GAA9D;;AAEA,IAAIC,eAAe,GAAGC,MAAM,CAACC,SAA7B;AACA,IAAIC,UAAU,GAAGC,SAAjB,C,CAEA;AACA;;AACA,IAAIX,WAAW,IAAIE,mBAAnB,EAAwC;EACtCE,qBAAqB,CAACG,eAAD,EAAkB,QAAlB,EAA4B;IAC/CK,YAAY,EAAE,IADiC;IAE/CN,GAAG,EAAE,SAASO,MAAT,GAAkB;MACrB,IAAI,SAASN,eAAb,EAA8B,OAAOO,SAAP,CADT,CAErB;MACA;;MACA,IAAIX,OAAO,CAAC,IAAD,CAAP,KAAkB,QAAtB,EAAgC;QAC9B,OAAO,CAAC,CAACE,gBAAgB,CAAC,IAAD,CAAhB,CAAuBQ,MAAhC;MACD;;MACD,MAAMH,UAAU,CAAC,wCAAD,CAAhB;IACD;EAV8C,CAA5B,CAArB;AAYD"},"metadata":{},"sourceType":"script"}