{"ast":null,"code":"var test = require('tape');\n\nvar v = require('es-value-fixtures');\n\nvar forEach = require('for-each');\n\nvar inspect = require('../');\n\ntest('negative zero', function (t) {\n  t.equal(inspect(0), '0', 'inspect(0) === \"0\"');\n  t.equal(inspect(Object(0)), 'Object(0)', 'inspect(Object(0)) === \"Object(0)\"');\n  t.equal(inspect(-0), '-0', 'inspect(-0) === \"-0\"');\n  t.equal(inspect(Object(-0)), 'Object(-0)', 'inspect(Object(-0)) === \"Object(-0)\"');\n  t.end();\n});\ntest('numericSeparator', function (t) {\n  forEach(v.nonBooleans, function (nonBoolean) {\n    t['throws'](function () {\n      inspect(true, {\n        numericSeparator: nonBoolean\n      });\n    }, TypeError, inspect(nonBoolean) + ' is not a boolean');\n  });\n  t.test('3 digit numbers', function (st) {\n    var failed = false;\n\n    for (var i = -999; i < 1000; i += 1) {\n      var actual = inspect(i);\n      var actualSepNo = inspect(i, {\n        numericSeparator: false\n      });\n      var actualSepYes = inspect(i, {\n        numericSeparator: true\n      });\n      var expected = String(i);\n\n      if (actual !== expected || actualSepNo !== expected || actualSepYes !== expected) {\n        failed = true;\n        t.equal(actual, expected);\n        t.equal(actualSepNo, expected);\n        t.equal(actualSepYes, expected);\n      }\n    }\n\n    st.notOk(failed, 'all 3 digit numbers passed');\n    st.end();\n  });\n  t.equal(inspect(1e3), '1000', '1000');\n  t.equal(inspect(1e3, {\n    numericSeparator: false\n  }), '1000', '1000, numericSeparator false');\n  t.equal(inspect(1e3, {\n    numericSeparator: true\n  }), '1_000', '1000, numericSeparator true');\n  t.equal(inspect(-1e3), '-1000', '-1000');\n  t.equal(inspect(-1e3, {\n    numericSeparator: false\n  }), '-1000', '-1000, numericSeparator false');\n  t.equal(inspect(-1e3, {\n    numericSeparator: true\n  }), '-1_000', '-1000, numericSeparator true');\n  t.equal(inspect(1234.5678, {\n    numericSeparator: true\n  }), '1_234.567_8', 'fractional numbers get separators');\n  t.equal(inspect(1234.56789, {\n    numericSeparator: true\n  }), '1_234.567_89', 'fractional numbers get separators');\n  t.equal(inspect(1234.567891, {\n    numericSeparator: true\n  }), '1_234.567_891', 'fractional numbers get separators');\n  t.end();\n});","map":{"version":3,"names":["test","require","v","forEach","inspect","t","equal","Object","end","nonBooleans","nonBoolean","numericSeparator","TypeError","st","failed","i","actual","actualSepNo","actualSepYes","expected","String","notOk"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/object-inspect/test/number.js"],"sourcesContent":["var test = require('tape');\nvar v = require('es-value-fixtures');\nvar forEach = require('for-each');\n\nvar inspect = require('../');\n\ntest('negative zero', function (t) {\n    t.equal(inspect(0), '0', 'inspect(0) === \"0\"');\n    t.equal(inspect(Object(0)), 'Object(0)', 'inspect(Object(0)) === \"Object(0)\"');\n\n    t.equal(inspect(-0), '-0', 'inspect(-0) === \"-0\"');\n    t.equal(inspect(Object(-0)), 'Object(-0)', 'inspect(Object(-0)) === \"Object(-0)\"');\n\n    t.end();\n});\n\ntest('numericSeparator', function (t) {\n    forEach(v.nonBooleans, function (nonBoolean) {\n        t['throws'](\n            function () { inspect(true, { numericSeparator: nonBoolean }); },\n            TypeError,\n            inspect(nonBoolean) + ' is not a boolean'\n        );\n    });\n\n    t.test('3 digit numbers', function (st) {\n        var failed = false;\n        for (var i = -999; i < 1000; i += 1) {\n            var actual = inspect(i);\n            var actualSepNo = inspect(i, { numericSeparator: false });\n            var actualSepYes = inspect(i, { numericSeparator: true });\n            var expected = String(i);\n            if (actual !== expected || actualSepNo !== expected || actualSepYes !== expected) {\n                failed = true;\n                t.equal(actual, expected);\n                t.equal(actualSepNo, expected);\n                t.equal(actualSepYes, expected);\n            }\n        }\n\n        st.notOk(failed, 'all 3 digit numbers passed');\n\n        st.end();\n    });\n\n    t.equal(inspect(1e3), '1000', '1000');\n    t.equal(inspect(1e3, { numericSeparator: false }), '1000', '1000, numericSeparator false');\n    t.equal(inspect(1e3, { numericSeparator: true }), '1_000', '1000, numericSeparator true');\n    t.equal(inspect(-1e3), '-1000', '-1000');\n    t.equal(inspect(-1e3, { numericSeparator: false }), '-1000', '-1000, numericSeparator false');\n    t.equal(inspect(-1e3, { numericSeparator: true }), '-1_000', '-1000, numericSeparator true');\n\n    t.equal(inspect(1234.5678, { numericSeparator: true }), '1_234.567_8', 'fractional numbers get separators');\n    t.equal(inspect(1234.56789, { numericSeparator: true }), '1_234.567_89', 'fractional numbers get separators');\n    t.equal(inspect(1234.567891, { numericSeparator: true }), '1_234.567_891', 'fractional numbers get separators');\n\n    t.end();\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}