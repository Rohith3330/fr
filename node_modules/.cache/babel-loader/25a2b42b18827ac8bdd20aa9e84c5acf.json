{"ast":null,"code":"/**\n * @fileoverview Rule to flag when using new Function\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst callMethods = new Set([\"apply\", \"bind\", \"call\"]); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow `new` operators with the `Function` object\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-new-func\"\n    },\n    schema: [],\n    messages: {\n      noFunctionConstructor: \"The Function constructor is eval.\"\n    }\n  },\n\n  create(context) {\n    return {\n      \"Program:exit\"() {\n        const globalScope = context.getScope();\n        const variable = globalScope.set.get(\"Function\");\n\n        if (variable && variable.defs.length === 0) {\n          variable.references.forEach(ref => {\n            const node = ref.identifier;\n            const {\n              parent\n            } = node;\n            let evalNode;\n\n            if (parent) {\n              if (node === parent.callee && (parent.type === \"NewExpression\" || parent.type === \"CallExpression\")) {\n                evalNode = parent;\n              } else if (parent.type === \"MemberExpression\" && node === parent.object && callMethods.has(astUtils.getStaticPropertyName(parent))) {\n                const maybeCallee = parent.parent.type === \"ChainExpression\" ? parent.parent : parent;\n\n                if (maybeCallee.parent.type === \"CallExpression\" && maybeCallee.parent.callee === maybeCallee) {\n                  evalNode = maybeCallee.parent;\n                }\n              }\n            }\n\n            if (evalNode) {\n              context.report({\n                node: evalNode,\n                messageId: \"noFunctionConstructor\"\n              });\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","callMethods","Set","module","exports","meta","type","docs","description","recommended","url","schema","messages","noFunctionConstructor","create","context","globalScope","getScope","variable","set","get","defs","length","references","forEach","ref","node","identifier","parent","evalNode","callee","object","has","getStaticPropertyName","maybeCallee","report","messageId"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-new-func.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when using new Function\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst callMethods = new Set([\"apply\", \"bind\", \"call\"]);\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow `new` operators with the `Function` object\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-new-func\"\n        },\n\n        schema: [],\n\n        messages: {\n            noFunctionConstructor: \"The Function constructor is eval.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n            \"Program:exit\"() {\n                const globalScope = context.getScope();\n                const variable = globalScope.set.get(\"Function\");\n\n                if (variable && variable.defs.length === 0) {\n                    variable.references.forEach(ref => {\n                        const node = ref.identifier;\n                        const { parent } = node;\n                        let evalNode;\n\n                        if (parent) {\n                            if (node === parent.callee && (\n                                parent.type === \"NewExpression\" ||\n                                parent.type === \"CallExpression\"\n                            )) {\n                                evalNode = parent;\n                            } else if (\n                                parent.type === \"MemberExpression\" &&\n                                node === parent.object &&\n                                callMethods.has(astUtils.getStaticPropertyName(parent))\n                            ) {\n                                const maybeCallee = parent.parent.type === \"ChainExpression\" ? parent.parent : parent;\n\n                                if (maybeCallee.parent.type === \"CallExpression\" && maybeCallee.parent.callee === maybeCallee) {\n                                    evalNode = maybeCallee.parent;\n                                }\n                            }\n                        }\n\n                        if (evalNode) {\n                            context.report({\n                                node: evalNode,\n                                messageId: \"noFunctionConstructor\"\n                            });\n                        }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB,CAAR,CAApB,C,CAEA;AACA;AACA;;AAEA;;AACAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,qDADX;MAEFC,WAAW,EAAE,KAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAWFC,QAAQ,EAAE;MACNC,qBAAqB,EAAE;IADjB;EAXR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IAEZ,OAAO;MACH,iBAAiB;QACb,MAAMC,WAAW,GAAGD,OAAO,CAACE,QAAR,EAApB;QACA,MAAMC,QAAQ,GAAGF,WAAW,CAACG,GAAZ,CAAgBC,GAAhB,CAAoB,UAApB,CAAjB;;QAEA,IAAIF,QAAQ,IAAIA,QAAQ,CAACG,IAAT,CAAcC,MAAd,KAAyB,CAAzC,EAA4C;UACxCJ,QAAQ,CAACK,UAAT,CAAoBC,OAApB,CAA4BC,GAAG,IAAI;YAC/B,MAAMC,IAAI,GAAGD,GAAG,CAACE,UAAjB;YACA,MAAM;cAAEC;YAAF,IAAaF,IAAnB;YACA,IAAIG,QAAJ;;YAEA,IAAID,MAAJ,EAAY;cACR,IAAIF,IAAI,KAAKE,MAAM,CAACE,MAAhB,KACAF,MAAM,CAACtB,IAAP,KAAgB,eAAhB,IACAsB,MAAM,CAACtB,IAAP,KAAgB,gBAFhB,CAAJ,EAGG;gBACCuB,QAAQ,GAAGD,MAAX;cACH,CALD,MAKO,IACHA,MAAM,CAACtB,IAAP,KAAgB,kBAAhB,IACAoB,IAAI,KAAKE,MAAM,CAACG,MADhB,IAEA9B,WAAW,CAAC+B,GAAZ,CAAgBjC,QAAQ,CAACkC,qBAAT,CAA+BL,MAA/B,CAAhB,CAHG,EAIL;gBACE,MAAMM,WAAW,GAAGN,MAAM,CAACA,MAAP,CAActB,IAAd,KAAuB,iBAAvB,GAA2CsB,MAAM,CAACA,MAAlD,GAA2DA,MAA/E;;gBAEA,IAAIM,WAAW,CAACN,MAAZ,CAAmBtB,IAAnB,KAA4B,gBAA5B,IAAgD4B,WAAW,CAACN,MAAZ,CAAmBE,MAAnB,KAA8BI,WAAlF,EAA+F;kBAC3FL,QAAQ,GAAGK,WAAW,CAACN,MAAvB;gBACH;cACJ;YACJ;;YAED,IAAIC,QAAJ,EAAc;cACVd,OAAO,CAACoB,MAAR,CAAe;gBACXT,IAAI,EAAEG,QADK;gBAEXO,SAAS,EAAE;cAFA,CAAf;YAIH;UACJ,CA9BD;QA+BH;MACJ;;IAtCE,CAAP;EAyCH;;AA5DY,CAAjB"},"metadata":{},"sourceType":"script"}