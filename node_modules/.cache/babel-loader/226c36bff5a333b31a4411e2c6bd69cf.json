{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Use `.only` and `.skip` over `f` and `x`',\n      recommended: 'error'\n    },\n    messages: {\n      usePreferredName: 'Use \"{{ preferredNodeName }}\" instead'\n    },\n    fixable: 'code',\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        const nodeName = (0, _utils.getNodeName)(node.callee);\n        if (!nodeName || !(0, _utils.isDescribeCall)(node) && !(0, _utils.isTestCaseCall)(node)) return;\n        const preferredNodeName = getPreferredNodeName(nodeName);\n        if (!preferredNodeName) return;\n        const funcNode = node.callee.type === _experimentalUtils.AST_NODE_TYPES.TaggedTemplateExpression ? node.callee.tag : node.callee.type === _experimentalUtils.AST_NODE_TYPES.CallExpression ? node.callee.callee : node.callee;\n        context.report({\n          messageId: 'usePreferredName',\n          node: node.callee,\n          data: {\n            preferredNodeName\n          },\n\n          fix(fixer) {\n            return [fixer.replaceText(funcNode, preferredNodeName)];\n          }\n\n        });\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;\n\nfunction getPreferredNodeName(nodeName) {\n  const firstChar = nodeName.charAt(0);\n  const suffix = nodeName.endsWith('.each') ? '.each' : '';\n\n  if (firstChar === 'f') {\n    return `${nodeName.slice(1).replace('.each', '')}.only${suffix}`;\n  }\n\n  if (firstChar === 'x') {\n    return `${nodeName.slice(1).replace('.each', '')}.skip${suffix}`;\n  }\n\n  return null;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","usePreferredName","fixable","schema","type","defaultOptions","create","context","CallExpression","node","nodeName","getNodeName","callee","isDescribeCall","isTestCaseCall","preferredNodeName","getPreferredNodeName","funcNode","AST_NODE_TYPES","TaggedTemplateExpression","tag","report","messageId","data","fix","fixer","replaceText","firstChar","charAt","suffix","endsWith","slice","replace"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-test-prefixes.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Use `.only` and `.skip` over `f` and `x`',\n      recommended: 'error'\n    },\n    messages: {\n      usePreferredName: 'Use \"{{ preferredNodeName }}\" instead'\n    },\n    fixable: 'code',\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        const nodeName = (0, _utils.getNodeName)(node.callee);\n        if (!nodeName || !(0, _utils.isDescribeCall)(node) && !(0, _utils.isTestCaseCall)(node)) return;\n        const preferredNodeName = getPreferredNodeName(nodeName);\n        if (!preferredNodeName) return;\n        const funcNode = node.callee.type === _experimentalUtils.AST_NODE_TYPES.TaggedTemplateExpression ? node.callee.tag : node.callee.type === _experimentalUtils.AST_NODE_TYPES.CallExpression ? node.callee.callee : node.callee;\n        context.report({\n          messageId: 'usePreferredName',\n          node: node.callee,\n          data: {\n            preferredNodeName\n          },\n\n          fix(fixer) {\n            return [fixer.replaceText(funcNode, preferredNodeName)];\n          }\n\n        });\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;\n\nfunction getPreferredNodeName(nodeName) {\n  const firstChar = nodeName.charAt(0);\n  const suffix = nodeName.endsWith('.each') ? '.each' : '';\n\n  if (firstChar === 'f') {\n    return `${nodeName.slice(1).replace('.each', '')}.only${suffix}`;\n  }\n\n  if (firstChar === 'x') {\n    return `${nodeName.slice(1).replace('.each', '')}.skip${suffix}`;\n  }\n\n  return null;\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,uCAAD,CAAhC;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIE,QAAQ,GAAG,CAAC,GAAGD,MAAM,CAACE,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,0CAFT;MAGJC,WAAW,EAAE;IAHT,CADF;IAMJC,QAAQ,EAAE;MACRC,gBAAgB,EAAE;IADV,CANN;IASJC,OAAO,EAAE,MATL;IAUJC,MAAM,EAAE,EAVJ;IAWJC,IAAI,EAAE;EAXF,CAF8B;EAepCC,cAAc,EAAE,EAfoB;;EAiBpCC,MAAM,CAACC,OAAD,EAAU;IACd,OAAO;MACLC,cAAc,CAACC,IAAD,EAAO;QACnB,MAAMC,QAAQ,GAAG,CAAC,GAAGpB,MAAM,CAACqB,WAAX,EAAwBF,IAAI,CAACG,MAA7B,CAAjB;QACA,IAAI,CAACF,QAAD,IAAa,CAAC,CAAC,GAAGpB,MAAM,CAACuB,cAAX,EAA2BJ,IAA3B,CAAD,IAAqC,CAAC,CAAC,GAAGnB,MAAM,CAACwB,cAAX,EAA2BL,IAA3B,CAAvD,EAAyF;QACzF,MAAMM,iBAAiB,GAAGC,oBAAoB,CAACN,QAAD,CAA9C;QACA,IAAI,CAACK,iBAAL,EAAwB;QACxB,MAAME,QAAQ,GAAGR,IAAI,CAACG,MAAL,CAAYR,IAAZ,KAAqBhB,kBAAkB,CAAC8B,cAAnB,CAAkCC,wBAAvD,GAAkFV,IAAI,CAACG,MAAL,CAAYQ,GAA9F,GAAoGX,IAAI,CAACG,MAAL,CAAYR,IAAZ,KAAqBhB,kBAAkB,CAAC8B,cAAnB,CAAkCV,cAAvD,GAAwEC,IAAI,CAACG,MAAL,CAAYA,MAApF,GAA6FH,IAAI,CAACG,MAAvN;QACAL,OAAO,CAACc,MAAR,CAAe;UACbC,SAAS,EAAE,kBADE;UAEbb,IAAI,EAAEA,IAAI,CAACG,MAFE;UAGbW,IAAI,EAAE;YACJR;UADI,CAHO;;UAObS,GAAG,CAACC,KAAD,EAAQ;YACT,OAAO,CAACA,KAAK,CAACC,WAAN,CAAkBT,QAAlB,EAA4BF,iBAA5B,CAAD,CAAP;UACD;;QATY,CAAf;MAYD;;IAnBI,CAAP;EAsBD;;AAxCmC,CAAvB,CAAf;;AA4CA9B,OAAO,CAACE,OAAR,GAAkBI,QAAlB;;AAEA,SAASyB,oBAAT,CAA8BN,QAA9B,EAAwC;EACtC,MAAMiB,SAAS,GAAGjB,QAAQ,CAACkB,MAAT,CAAgB,CAAhB,CAAlB;EACA,MAAMC,MAAM,GAAGnB,QAAQ,CAACoB,QAAT,CAAkB,OAAlB,IAA6B,OAA7B,GAAuC,EAAtD;;EAEA,IAAIH,SAAS,KAAK,GAAlB,EAAuB;IACrB,OAAQ,GAAEjB,QAAQ,CAACqB,KAAT,CAAe,CAAf,EAAkBC,OAAlB,CAA0B,OAA1B,EAAmC,EAAnC,CAAuC,QAAOH,MAAO,EAA/D;EACD;;EAED,IAAIF,SAAS,KAAK,GAAlB,EAAuB;IACrB,OAAQ,GAAEjB,QAAQ,CAACqB,KAAT,CAAe,CAAf,EAAkBC,OAAlB,CAA0B,OAA1B,EAAmC,EAAnC,CAAuC,QAAOH,MAAO,EAA/D;EACD;;EAED,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"script"}