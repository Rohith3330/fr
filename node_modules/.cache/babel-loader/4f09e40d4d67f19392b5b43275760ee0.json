{"ast":null,"code":"/**\n * @fileoverview Enforce PascalCase for user-defined JSX components\n * @author Jake Marsh\n */\n'use strict';\n\nconst elementType = require('jsx-ast-utils/elementType');\n\nconst minimatch = require('minimatch');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst jsxUtil = require('../util/jsx');\n\nconst report = require('../util/report');\n\nfunction testDigit(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 48 && charCode <= 57;\n}\n\nfunction testUpperCase(char) {\n  const upperCase = char.toUpperCase();\n  return char === upperCase && upperCase !== char.toLowerCase();\n}\n\nfunction testLowerCase(char) {\n  const lowerCase = char.toLowerCase();\n  return char === lowerCase && lowerCase !== char.toUpperCase();\n}\n\nfunction testPascalCase(name) {\n  if (!testUpperCase(name.charAt(0))) {\n    return false;\n  }\n\n  const anyNonAlphaNumeric = Array.prototype.some.call(name.slice(1), char => char.toLowerCase() === char.toUpperCase() && !testDigit(char));\n\n  if (anyNonAlphaNumeric) {\n    return false;\n  }\n\n  return Array.prototype.some.call(name.slice(1), char => testLowerCase(char) || testDigit(char));\n}\n\nfunction testAllCaps(name) {\n  const firstChar = name.charAt(0);\n\n  if (!(testUpperCase(firstChar) || testDigit(firstChar))) {\n    return false;\n  }\n\n  for (let i = 1; i < name.length - 1; i += 1) {\n    const char = name.charAt(i);\n\n    if (!(testUpperCase(char) || testDigit(char) || char === '_')) {\n      return false;\n    }\n  }\n\n  const lastChar = name.charAt(name.length - 1);\n\n  if (!(testUpperCase(lastChar) || testDigit(lastChar))) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ignoreCheck(ignore, name) {\n  return ignore.some(entry => name === entry || minimatch(name, entry, {\n    noglobstar: true\n  }));\n} // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  usePascalCase: 'Imported JSX component {{name}} must be in PascalCase',\n  usePascalOrSnakeCase: 'Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce PascalCase for user-defined JSX components',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-pascal-case')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        allowAllCaps: {\n          type: 'boolean'\n        },\n        allowLeadingUnderscore: {\n          type: 'boolean'\n        },\n        allowNamespace: {\n          type: 'boolean'\n        },\n        ignore: {\n          items: [{\n            type: 'string'\n          }],\n          minItems: 0,\n          type: 'array',\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const allowAllCaps = configuration.allowAllCaps || false;\n    const allowLeadingUnderscore = configuration.allowLeadingUnderscore || false;\n    const allowNamespace = configuration.allowNamespace || false;\n    const ignore = configuration.ignore || [];\n    return {\n      JSXOpeningElement(node) {\n        const isCompatTag = jsxUtil.isDOMComponent(node);\n        if (isCompatTag) return undefined;\n        const name = elementType(node);\n        let checkNames = [name];\n        let index = 0;\n\n        if (name.lastIndexOf(':') > -1) {\n          checkNames = name.split(':');\n        } else if (name.lastIndexOf('.') > -1) {\n          checkNames = name.split('.');\n        }\n\n        do {\n          const splitName = checkNames[index];\n          if (splitName.length === 1) return undefined;\n          const isIgnored = ignoreCheck(ignore, splitName);\n          const checkName = allowLeadingUnderscore && splitName.startsWith('_') ? splitName.slice(1) : splitName;\n          const isPascalCase = testPascalCase(checkName);\n          const isAllowedAllCaps = allowAllCaps && testAllCaps(checkName);\n\n          if (!isPascalCase && !isAllowedAllCaps && !isIgnored) {\n            const messageId = allowAllCaps ? 'usePascalOrSnakeCase' : 'usePascalCase';\n            report(context, messages[messageId], messageId, {\n              node,\n              data: {\n                name: splitName\n              }\n            });\n            break;\n          }\n\n          index += 1;\n        } while (index < checkNames.length && !allowNamespace);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["elementType","require","minimatch","docsUrl","jsxUtil","report","testDigit","char","charCode","charCodeAt","testUpperCase","upperCase","toUpperCase","toLowerCase","testLowerCase","lowerCase","testPascalCase","name","charAt","anyNonAlphaNumeric","Array","prototype","some","call","slice","testAllCaps","firstChar","i","length","lastChar","ignoreCheck","ignore","entry","noglobstar","messages","usePascalCase","usePascalOrSnakeCase","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","allowAllCaps","allowLeadingUnderscore","allowNamespace","items","minItems","uniqueItems","additionalProperties","create","context","configuration","options","JSXOpeningElement","node","isCompatTag","isDOMComponent","undefined","checkNames","index","lastIndexOf","split","splitName","isIgnored","checkName","startsWith","isPascalCase","isAllowedAllCaps","messageId","data"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-pascal-case.js"],"sourcesContent":["/**\n * @fileoverview Enforce PascalCase for user-defined JSX components\n * @author Jake Marsh\n */\n\n'use strict';\n\nconst elementType = require('jsx-ast-utils/elementType');\nconst minimatch = require('minimatch');\nconst docsUrl = require('../util/docsUrl');\nconst jsxUtil = require('../util/jsx');\nconst report = require('../util/report');\n\nfunction testDigit(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 48 && charCode <= 57;\n}\n\nfunction testUpperCase(char) {\n  const upperCase = char.toUpperCase();\n  return char === upperCase && upperCase !== char.toLowerCase();\n}\n\nfunction testLowerCase(char) {\n  const lowerCase = char.toLowerCase();\n  return char === lowerCase && lowerCase !== char.toUpperCase();\n}\n\nfunction testPascalCase(name) {\n  if (!testUpperCase(name.charAt(0))) {\n    return false;\n  }\n  const anyNonAlphaNumeric = Array.prototype.some.call(\n    name.slice(1),\n    (char) => char.toLowerCase() === char.toUpperCase() && !testDigit(char)\n  );\n  if (anyNonAlphaNumeric) {\n    return false;\n  }\n  return Array.prototype.some.call(\n    name.slice(1),\n    (char) => testLowerCase(char) || testDigit(char)\n  );\n}\n\nfunction testAllCaps(name) {\n  const firstChar = name.charAt(0);\n  if (!(testUpperCase(firstChar) || testDigit(firstChar))) {\n    return false;\n  }\n  for (let i = 1; i < name.length - 1; i += 1) {\n    const char = name.charAt(i);\n    if (!(testUpperCase(char) || testDigit(char) || char === '_')) {\n      return false;\n    }\n  }\n  const lastChar = name.charAt(name.length - 1);\n  if (!(testUpperCase(lastChar) || testDigit(lastChar))) {\n    return false;\n  }\n  return true;\n}\n\nfunction ignoreCheck(ignore, name) {\n  return ignore.some(\n    (entry) => name === entry || minimatch(name, entry, { noglobstar: true })\n  );\n}\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  usePascalCase: 'Imported JSX component {{name}} must be in PascalCase',\n  usePascalOrSnakeCase: 'Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce PascalCase for user-defined JSX components',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-pascal-case'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        allowAllCaps: {\n          type: 'boolean',\n        },\n        allowLeadingUnderscore: {\n          type: 'boolean',\n        },\n        allowNamespace: {\n          type: 'boolean',\n        },\n        ignore: {\n          items: [\n            {\n              type: 'string',\n            },\n          ],\n          minItems: 0,\n          type: 'array',\n          uniqueItems: true,\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const allowAllCaps = configuration.allowAllCaps || false;\n    const allowLeadingUnderscore = configuration.allowLeadingUnderscore || false;\n    const allowNamespace = configuration.allowNamespace || false;\n    const ignore = configuration.ignore || [];\n\n    return {\n      JSXOpeningElement(node) {\n        const isCompatTag = jsxUtil.isDOMComponent(node);\n        if (isCompatTag) return undefined;\n\n        const name = elementType(node);\n        let checkNames = [name];\n        let index = 0;\n\n        if (name.lastIndexOf(':') > -1) {\n          checkNames = name.split(':');\n        } else if (name.lastIndexOf('.') > -1) {\n          checkNames = name.split('.');\n        }\n\n        do {\n          const splitName = checkNames[index];\n          if (splitName.length === 1) return undefined;\n          const isIgnored = ignoreCheck(ignore, splitName);\n\n          const checkName = allowLeadingUnderscore && splitName.startsWith('_') ? splitName.slice(1) : splitName;\n          const isPascalCase = testPascalCase(checkName);\n          const isAllowedAllCaps = allowAllCaps && testAllCaps(checkName);\n\n          if (!isPascalCase && !isAllowedAllCaps && !isIgnored) {\n            const messageId = allowAllCaps ? 'usePascalOrSnakeCase' : 'usePascalCase';\n            report(context, messages[messageId], messageId, {\n              node,\n              data: {\n                name: splitName,\n              },\n            });\n            break;\n          }\n          index += 1;\n        } while (index < checkNames.length && !allowNamespace);\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}