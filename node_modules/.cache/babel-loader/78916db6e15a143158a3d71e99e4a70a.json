{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Type = require('../Type');\n\nvar NumberAdd = require('./add');\n\nvar NumberUnaryMinus = require('./unaryMinus'); // https://262.ecma-international.org/12.0/#sec-numeric-types-number-subtract\n\n\nmodule.exports = function NumberSubtract(x, y) {\n  if (Type(x) !== 'Number' || Type(y) !== 'Number') {\n    throw new $TypeError('Assertion failed: `x` and `y` arguments must be Numbers');\n  }\n\n  return NumberAdd(x, NumberUnaryMinus(y));\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","Type","NumberAdd","NumberUnaryMinus","module","exports","NumberSubtract","x","y"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2021/Number/subtract.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Type = require('../Type');\n\nvar NumberAdd = require('./add');\nvar NumberUnaryMinus = require('./unaryMinus');\n\n// https://262.ecma-international.org/12.0/#sec-numeric-types-number-subtract\n\nmodule.exports = function NumberSubtract(x, y) {\n\tif (Type(x) !== 'Number' || Type(y) !== 'Number') {\n\t\tthrow new $TypeError('Assertion failed: `x` and `y` arguments must be Numbers');\n\t}\n\treturn NumberAdd(x, NumberUnaryMinus(y));\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,IAAI,GAAGF,OAAO,CAAC,SAAD,CAAlB;;AAEA,IAAIG,SAAS,GAAGH,OAAO,CAAC,OAAD,CAAvB;;AACA,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,cAAD,CAA9B,C,CAEA;;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;EAC9C,IAAIP,IAAI,CAACM,CAAD,CAAJ,KAAY,QAAZ,IAAwBN,IAAI,CAACO,CAAD,CAAJ,KAAY,QAAxC,EAAkD;IACjD,MAAM,IAAIR,UAAJ,CAAe,yDAAf,CAAN;EACA;;EACD,OAAOE,SAAS,CAACK,CAAD,EAAIJ,gBAAgB,CAACK,CAAD,CAApB,CAAhB;AACA,CALD"},"metadata":{},"sourceType":"script"}