{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\n\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('semi');\nexports.default = util.createRule({\n  name: 'semi',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Require or disallow semicolons instead of ASI',\n      // too opinionated to be recommended\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: 'code',\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: baseRule.meta.schema,\n    // TODO: this rule has only had messages since v7.0 - remove this when we remove support for v6\n    messages: (_a = baseRule.meta.messages) !== null && _a !== void 0 ? _a : {\n      missingSemi: 'Missing semicolon.',\n      extraSemi: 'Extra semicolon.'\n    }\n  },\n  defaultOptions: ['always', {\n    omitLastInOneLineBlock: false,\n    beforeStatementContinuationChars: 'any'\n  }],\n\n  create(context) {\n    const rules = baseRule.create(context);\n    const checkForSemicolon = rules.ExpressionStatement;\n    /*\n      The following nodes are handled by the member-delimiter-style rule\n      AST_NODE_TYPES.TSCallSignatureDeclaration,\n      AST_NODE_TYPES.TSConstructSignatureDeclaration,\n      AST_NODE_TYPES.TSIndexSignature,\n      AST_NODE_TYPES.TSMethodSignature,\n      AST_NODE_TYPES.TSPropertySignature,\n    */\n\n    const nodesToCheck = [utils_1.AST_NODE_TYPES.PropertyDefinition, utils_1.AST_NODE_TYPES.TSAbstractPropertyDefinition, utils_1.AST_NODE_TYPES.TSDeclareFunction, utils_1.AST_NODE_TYPES.TSExportAssignment, utils_1.AST_NODE_TYPES.TSImportEqualsDeclaration, utils_1.AST_NODE_TYPES.TSTypeAliasDeclaration, utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression].reduce((acc, node) => {\n      acc[node] = checkForSemicolon;\n      return acc;\n    }, {});\n    return Object.assign(Object.assign(Object.assign({}, rules), nodesToCheck), {\n      ExportDefaultDeclaration(node) {\n        if (node.declaration.type !== utils_1.AST_NODE_TYPES.TSInterfaceDeclaration) {\n          rules.ExportDefaultDeclaration(node);\n        }\n      }\n\n    });\n  }\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AACA;;AAEA,MAAMA,QAAQ,GAAG,2CAAkB,MAAlB,CAAjB;AAKAC,kBAAeC,IAAI,CAACC,UAAL,CAAqC;EAClDC,IAAI,EAAE,MAD4C;EAElDC,IAAI,EAAE;IACJC,IAAI,EAAE,QADF;IAEJC,IAAI,EAAE;MACJC,WAAW,EAAE,+CADT;MAEJ;MACAC,WAAW,EAAE,KAHT;MAIJC,eAAe,EAAE;IAJb,CAFF;IAQJC,OAAO,EAAE,MARL;IASJC,cAAc,EAAEZ,QAAQ,CAACK,IAAT,CAAcO,cAT1B;IAUJC,MAAM,EAAEb,QAAQ,CAACK,IAAT,CAAcQ,MAVlB;IAWJ;IACAC,QAAQ,EAAE,cAAQ,CAACT,IAAT,CAAcS,QAAd,MAAsB,IAAtB,IAAsBC,aAAtB,GAAsBA,EAAtB,GAA0B;MAClCC,WAAW,EAAE,oBADqB;MAElCC,SAAS,EAAE;IAFuB;EAZhC,CAF4C;EAmBlDC,cAAc,EAAE,CACd,QADc,EAEd;IACEC,sBAAsB,EAAE,KAD1B;IAEEC,gCAAgC,EAAE;EAFpC,CAFc,CAnBkC;;EA0BlDC,MAAM,CAACC,OAAD,EAAQ;IACZ,MAAMC,KAAK,GAAGvB,QAAQ,CAACqB,MAAT,CAAgBC,OAAhB,CAAd;IACA,MAAME,iBAAiB,GACrBD,KAAK,CAACE,mBADR;IAGA;;;;;;;;;IAQA,MAAMC,YAAY,GAAG,CACnBC,uBAAeC,kBADI,EAEnBD,uBAAeE,4BAFI,EAGnBF,uBAAeG,iBAHI,EAInBH,uBAAeI,kBAJI,EAKnBJ,uBAAeK,yBALI,EAMnBL,uBAAeM,sBANI,EAOnBN,uBAAeO,6BAPI,EAQnBC,MARmB,CAQW,CAACC,GAAD,EAAMC,IAAN,KAAc;MAC5CD,GAAG,CAACC,IAAD,CAAH,GAAsBb,iBAAtB;MACA,OAAOY,GAAP;IACD,CAXoB,EAWlB,EAXkB,CAArB;IAaA,qDACKb,KADL,GAEKG,YAFL,GAEiB;MACfY,wBAAwB,CAACD,IAAD,EAAK;QAC3B,IAAIA,IAAI,CAACE,WAAL,CAAiBjC,IAAjB,KAA0BqB,uBAAea,sBAA7C,EAAqE;UACnEjB,KAAK,CAACe,wBAAN,CAA+BD,IAA/B;QACD;MACF;;IALc,CAFjB;EASD;;AA7DiD,CAArC,CAAf","names":["baseRule","exports","util","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","hasSuggestions","schema","messages","_a","missingSemi","extraSemi","defaultOptions","omitLastInOneLineBlock","beforeStatementContinuationChars","create","context","rules","checkForSemicolon","ExpressionStatement","nodesToCheck","utils_1","PropertyDefinition","TSAbstractPropertyDefinition","TSDeclareFunction","TSExportAssignment","TSImportEqualsDeclaration","TSTypeAliasDeclaration","TSEmptyBodyFunctionExpression","reduce","acc","node","ExportDefaultDeclaration","declaration","TSInterfaceDeclaration"],"sources":["../../src/rules/semi.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}