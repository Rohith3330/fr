{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _ariaQuery = require(\"aria-query\");\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\nvar _getImplicitRole = _interopRequireDefault(require(\"../util/getImplicitRole\"));\n/**\n * @fileoverview Enforce that elements with explicit or implicit roles defined contain only\n * `aria-*` properties supported by that `role`.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\n\nvar errorMessage = function errorMessage(attr, role, tag, isImplicit) {\n  if (isImplicit) {\n    return \"The attribute \".concat(attr, \" is not supported by the role \").concat(role, \". This role is implicit on the element \").concat(tag, \".\");\n  }\n\n  return \"The attribute \".concat(attr, \" is not supported by the role \").concat(role, \".\");\n};\n\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md',\n      description: 'Enforce that elements with explicit or implicit roles defined contain only `aria-*` properties supported by that `role`.'\n    },\n    schema: [schema]\n  },\n\n  create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement(node) {\n        // If role is not explicitly defined, then try and get its implicit role.\n        var type = elementType(node);\n        var role = (0, _jsxAstUtils.getProp)(node.attributes, 'role');\n        var roleValue = role ? (0, _jsxAstUtils.getLiteralPropValue)(role) : (0, _getImplicitRole[\"default\"])(type, node.attributes);\n        var isImplicit = roleValue && role === undefined; // If there is no explicit or implicit role, then assume that the element\n        // can handle the global set of aria-* properties.\n        // This actually isn't true - should fix in future release.\n\n        if (typeof roleValue !== 'string' || _ariaQuery.roles.get(roleValue) === undefined) {\n          return;\n        } // Make sure it has no aria-* properties defined outside of its property set.\n\n\n        var _roles$get = _ariaQuery.roles.get(roleValue),\n            propKeyValues = _roles$get.props;\n\n        var invalidAriaPropsForRole = (0, _toConsumableArray2[\"default\"])(_ariaQuery.aria.keys()).filter(function (attribute) {\n          return !(attribute in propKeyValues);\n        });\n        node.attributes.filter(function (prop) {\n          return (0, _jsxAstUtils.getPropValue)(prop) != null // Ignore the attribute if its value is null or undefined.\n          && prop.type !== 'JSXSpreadAttribute' // Ignore the attribute if it's a spread.\n          ;\n        }).forEach(function (prop) {\n          var name = (0, _jsxAstUtils.propName)(prop);\n\n          if (invalidAriaPropsForRole.indexOf(name) > -1) {\n            context.report({\n              node,\n              message: errorMessage(name, roleValue, type, isImplicit)\n            });\n          }\n        });\n      }\n\n    };\n  }\n\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_toConsumableArray2","_ariaQuery","_jsxAstUtils","_schemas","_getElementType","_getImplicitRole","errorMessage","attr","role","tag","isImplicit","concat","schema","generateObjSchema","_default","meta","docs","url","description","create","context","elementType","JSXOpeningElement","node","type","getProp","attributes","roleValue","getLiteralPropValue","undefined","roles","get","_roles$get","propKeyValues","props","invalidAriaPropsForRole","aria","keys","filter","attribute","prop","getPropValue","forEach","name","propName","indexOf","report","message","module","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/lib/rules/role-supports-aria-props.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _ariaQuery = require(\"aria-query\");\n\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\n\nvar _schemas = require(\"../util/schemas\");\n\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\n\nvar _getImplicitRole = _interopRequireDefault(require(\"../util/getImplicitRole\"));\n\n/**\n * @fileoverview Enforce that elements with explicit or implicit roles defined contain only\n * `aria-*` properties supported by that `role`.\n * @author Ethan Cohen\n */\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\nvar errorMessage = function errorMessage(attr, role, tag, isImplicit) {\n  if (isImplicit) {\n    return \"The attribute \".concat(attr, \" is not supported by the role \").concat(role, \". This role is implicit on the element \").concat(tag, \".\");\n  }\n\n  return \"The attribute \".concat(attr, \" is not supported by the role \").concat(role, \".\");\n};\n\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md',\n      description: 'Enforce that elements with explicit or implicit roles defined contain only `aria-*` properties supported by that `role`.'\n    },\n    schema: [schema]\n  },\n\n  create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement(node) {\n        // If role is not explicitly defined, then try and get its implicit role.\n        var type = elementType(node);\n        var role = (0, _jsxAstUtils.getProp)(node.attributes, 'role');\n        var roleValue = role ? (0, _jsxAstUtils.getLiteralPropValue)(role) : (0, _getImplicitRole[\"default\"])(type, node.attributes);\n        var isImplicit = roleValue && role === undefined; // If there is no explicit or implicit role, then assume that the element\n        // can handle the global set of aria-* properties.\n        // This actually isn't true - should fix in future release.\n\n        if (typeof roleValue !== 'string' || _ariaQuery.roles.get(roleValue) === undefined) {\n          return;\n        } // Make sure it has no aria-* properties defined outside of its property set.\n\n\n        var _roles$get = _ariaQuery.roles.get(roleValue),\n            propKeyValues = _roles$get.props;\n\n        var invalidAriaPropsForRole = (0, _toConsumableArray2[\"default\"])(_ariaQuery.aria.keys()).filter(function (attribute) {\n          return !(attribute in propKeyValues);\n        });\n        node.attributes.filter(function (prop) {\n          return (0, _jsxAstUtils.getPropValue)(prop) != null // Ignore the attribute if its value is null or undefined.\n          && prop.type !== 'JSXSpreadAttribute' // Ignore the attribute if it's a spread.\n          ;\n        }).forEach(function (prop) {\n          var name = (0, _jsxAstUtils.propName)(prop);\n\n          if (invalidAriaPropsForRole.indexOf(name) > -1) {\n            context.report({\n              node,\n              message: errorMessage(name, roleValue, type, isImplicit)\n            });\n          }\n        });\n      }\n\n    };\n  }\n\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}