{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst isSemicolon = token => {\n  return token.type === 'Punctuator' && token.value === ';';\n};\n\nconst create = context => {\n  const never = (context.options[0] || 'always') === 'never';\n  const sourceCode = context.getSourceCode();\n\n  const report = (node, missing) => {\n    const lastToken = sourceCode.getLastToken(node);\n    let fix;\n    let message;\n    let {\n      loc\n    } = lastToken;\n\n    if (missing) {\n      message = 'Missing semicolon.';\n      loc = loc.end;\n\n      fix = fixer => {\n        return fixer.insertTextAfter(lastToken, ';');\n      };\n    } else {\n      message = 'Extra semicolon.';\n      loc = loc.start;\n\n      fix = fixer => {\n        return fixer.remove(lastToken);\n      };\n    }\n\n    context.report({\n      fix,\n      loc,\n      message,\n      node\n    });\n  };\n\n  const checkForSemicolon = node => {\n    const lastToken = sourceCode.getLastToken(node);\n    const isLastTokenSemicolon = isSemicolon(lastToken);\n\n    if (never && isLastTokenSemicolon) {\n      report(node, false);\n    }\n\n    if (!never && !isLastTokenSemicolon) {\n      report(node, true);\n    }\n  };\n\n  return {\n    OpaqueType: checkForSemicolon,\n    TypeAlias: checkForSemicolon,\n    TypeAnnotation: node => {\n      if (node.parent.type === 'ClassProperty') {\n        checkForSemicolon(node.parent);\n      }\n    }\n  };\n};\n\nvar _default = {\n  create,\n  meta: {\n    fixable: 'code'\n  },\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","schema","enum","type","isSemicolon","token","create","context","never","options","sourceCode","getSourceCode","report","node","missing","lastToken","getLastToken","fix","message","loc","end","fixer","insertTextAfter","start","remove","checkForSemicolon","isLastTokenSemicolon","OpaqueType","TypeAlias","TypeAnnotation","parent","_default","meta","fixable","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/semi.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [{\n  enum: ['always', 'never'],\n  type: 'string'\n}];\n\nconst isSemicolon = token => {\n  return token.type === 'Punctuator' && token.value === ';';\n};\n\nconst create = context => {\n  const never = (context.options[0] || 'always') === 'never';\n  const sourceCode = context.getSourceCode();\n\n  const report = (node, missing) => {\n    const lastToken = sourceCode.getLastToken(node);\n    let fix;\n    let message;\n    let {\n      loc\n    } = lastToken;\n\n    if (missing) {\n      message = 'Missing semicolon.';\n      loc = loc.end;\n\n      fix = fixer => {\n        return fixer.insertTextAfter(lastToken, ';');\n      };\n    } else {\n      message = 'Extra semicolon.';\n      loc = loc.start;\n\n      fix = fixer => {\n        return fixer.remove(lastToken);\n      };\n    }\n\n    context.report({\n      fix,\n      loc,\n      message,\n      node\n    });\n  };\n\n  const checkForSemicolon = node => {\n    const lastToken = sourceCode.getLastToken(node);\n    const isLastTokenSemicolon = isSemicolon(lastToken);\n\n    if (never && isLastTokenSemicolon) {\n      report(node, false);\n    }\n\n    if (!never && !isLastTokenSemicolon) {\n      report(node, true);\n    }\n  };\n\n  return {\n    OpaqueType: checkForSemicolon,\n    TypeAlias: checkForSemicolon,\n    TypeAnnotation: node => {\n      if (node.parent.type === 'ClassProperty') {\n        checkForSemicolon(node.parent);\n      }\n    }\n  };\n};\n\nvar _default = {\n  create,\n  meta: {\n    fixable: 'code'\n  },\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,MAAM,GAAG,CAAC;EACdC,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX,CADQ;EAEdC,IAAI,EAAE;AAFQ,CAAD,CAAf;;AAKA,MAAMC,WAAW,GAAGC,KAAK,IAAI;EAC3B,OAAOA,KAAK,CAACF,IAAN,KAAe,YAAf,IAA+BE,KAAK,CAACN,KAAN,KAAgB,GAAtD;AACD,CAFD;;AAIA,MAAMO,MAAM,GAAGC,OAAO,IAAI;EACxB,MAAMC,KAAK,GAAG,CAACD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,QAAvB,MAAqC,OAAnD;EACA,MAAMC,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;;EAEA,MAAMC,MAAM,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;IAChC,MAAMC,SAAS,GAAGL,UAAU,CAACM,YAAX,CAAwBH,IAAxB,CAAlB;IACA,IAAII,GAAJ;IACA,IAAIC,OAAJ;IACA,IAAI;MACFC;IADE,IAEAJ,SAFJ;;IAIA,IAAID,OAAJ,EAAa;MACXI,OAAO,GAAG,oBAAV;MACAC,GAAG,GAAGA,GAAG,CAACC,GAAV;;MAEAH,GAAG,GAAGI,KAAK,IAAI;QACb,OAAOA,KAAK,CAACC,eAAN,CAAsBP,SAAtB,EAAiC,GAAjC,CAAP;MACD,CAFD;IAGD,CAPD,MAOO;MACLG,OAAO,GAAG,kBAAV;MACAC,GAAG,GAAGA,GAAG,CAACI,KAAV;;MAEAN,GAAG,GAAGI,KAAK,IAAI;QACb,OAAOA,KAAK,CAACG,MAAN,CAAaT,SAAb,CAAP;MACD,CAFD;IAGD;;IAEDR,OAAO,CAACK,MAAR,CAAe;MACbK,GADa;MAEbE,GAFa;MAGbD,OAHa;MAIbL;IAJa,CAAf;EAMD,CA9BD;;EAgCA,MAAMY,iBAAiB,GAAGZ,IAAI,IAAI;IAChC,MAAME,SAAS,GAAGL,UAAU,CAACM,YAAX,CAAwBH,IAAxB,CAAlB;IACA,MAAMa,oBAAoB,GAAGtB,WAAW,CAACW,SAAD,CAAxC;;IAEA,IAAIP,KAAK,IAAIkB,oBAAb,EAAmC;MACjCd,MAAM,CAACC,IAAD,EAAO,KAAP,CAAN;IACD;;IAED,IAAI,CAACL,KAAD,IAAU,CAACkB,oBAAf,EAAqC;MACnCd,MAAM,CAACC,IAAD,EAAO,IAAP,CAAN;IACD;EACF,CAXD;;EAaA,OAAO;IACLc,UAAU,EAAEF,iBADP;IAELG,SAAS,EAAEH,iBAFN;IAGLI,cAAc,EAAEhB,IAAI,IAAI;MACtB,IAAIA,IAAI,CAACiB,MAAL,CAAY3B,IAAZ,KAAqB,eAAzB,EAA0C;QACxCsB,iBAAiB,CAACZ,IAAI,CAACiB,MAAN,CAAjB;MACD;IACF;EAPI,CAAP;AASD,CA1DD;;AA4DA,IAAIC,QAAQ,GAAG;EACbzB,MADa;EAEb0B,IAAI,EAAE;IACJC,OAAO,EAAE;EADL,CAFO;EAKbhC;AALa,CAAf;AAOAH,OAAO,CAACE,OAAR,GAAkB+B,QAAlB;AACAG,MAAM,CAACpC,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}