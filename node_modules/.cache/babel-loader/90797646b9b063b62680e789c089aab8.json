{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Rohith\\\\Pictures\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedTensorToTensor } from '@tensorflow/tfjs-core';\nimport { raggedTensorToTensorImplCPU } from '../kernel_utils/shared';\nexport function raggedTensorToTensor(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var shape = inputs.shape,\n    values = inputs.values,\n    defaultValue = inputs.defaultValue,\n    rowPartitionTensors = inputs.rowPartitionTensors;\n  var rowPartitionTypes = attrs.rowPartitionTypes;\n  var $shape = backend.readSync(shape.dataId);\n  var $values = backend.readSync(values.dataId);\n  var $defaultValue = backend.readSync(defaultValue.dataId);\n  var $rowPartitionValues = rowPartitionTensors.map(function (t) {\n    return backend.readSync(t.dataId);\n  });\n  var rowPartitionValuesShapes = rowPartitionTensors.map(function (t) {\n    return t.shape;\n  });\n  var _raggedTensorToTensor = raggedTensorToTensorImplCPU($shape, shape.shape, $values, values.shape, values.dtype, $defaultValue, defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes),\n    _raggedTensorToTensor2 = _slicedToArray(_raggedTensorToTensor, 2),\n    outputShape = _raggedTensorToTensor2[0],\n    output = _raggedTensorToTensor2[1];\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\nexport var raggedTensorToTensorConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'webgl',\n  kernelFunc: raggedTensorToTensor\n};","map":null,"metadata":{},"sourceType":"module"}