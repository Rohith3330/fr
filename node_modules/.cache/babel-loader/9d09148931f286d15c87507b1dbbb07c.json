{"ast":null,"code":"'use strict';\n\nvar _resolve = require('eslint-module-utils/resolve');\n\nvar _resolve2 = _interopRequireDefault(_resolve);\n\nvar _ModuleCache = require('eslint-module-utils/ModuleCache');\n\nvar _ModuleCache2 = _interopRequireDefault(_ModuleCache);\n\nvar _moduleVisitor = require('eslint-module-utils/moduleVisitor');\n\nvar _moduleVisitor2 = _interopRequireDefault(_moduleVisitor);\n\nvar _docsUrl = require('../docsUrl');\n\nvar _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n/**\n * @fileOverview Ensures that an imported path exists, given resolution rules.\n * @author Ben Mosher\n */\n\n\nmodule.exports = {\n  meta: {\n    type: 'problem',\n    docs: {\n      url: (0, _docsUrl2['default'])('no-unresolved')\n    },\n    schema: [(0, _moduleVisitor.makeOptionsSchema)({\n      caseSensitive: {\n        type: 'boolean',\n        'default': true\n      },\n      caseSensitiveStrict: {\n        type: 'boolean',\n        'default': false\n      }\n    })]\n  },\n  create: function () {\n    function create(context) {\n      var options = context.options[0] || {};\n\n      function checkSourceValue(source, node) {\n        // ignore type-only imports\n        if (node.importKind === 'type') {\n          return;\n        }\n\n        var caseSensitive = !_resolve.CASE_SENSITIVE_FS && options.caseSensitive !== false;\n        var caseSensitiveStrict = !_resolve.CASE_SENSITIVE_FS && options.caseSensitiveStrict;\n        var resolvedPath = (0, _resolve2['default'])(source.value, context);\n\n        if (resolvedPath === undefined) {\n          context.report(source, 'Unable to resolve path to module \\'' + String(source.value) + '\\'.');\n        } else if (caseSensitive || caseSensitiveStrict) {\n          var cacheSettings = _ModuleCache2['default'].getSettings(context.settings);\n\n          if (!(0, _resolve.fileExistsWithCaseSync)(resolvedPath, cacheSettings, caseSensitiveStrict)) {\n            context.report(source, 'Casing of ' + String(source.value) + ' does not match the underlying filesystem.');\n          }\n        }\n      }\n\n      return (0, _moduleVisitor2['default'])(checkSourceValue, options);\n    }\n\n    return create;\n  }()\n};","map":{"version":3,"mappings":";;AAKA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;AARA;;;;;;AAUAA,OAAOC,OAAPD,GAAiB;EACfE,MAAM;IACJC,MAAM,SADF;IAEJC,MAAM;MACJC,KAAK,0BAAQ,eAAR;IADD,CAFF;IAMJC,QAAQ,CACN,sCAAkB;MAChBC,eAAe;QAAEJ,MAAM,SAAR;QAAmB,WAAS;MAA5B,CADC;MAEhBK,qBAAqB;QAAEL,MAAM,SAAR;QAAmB,WAAS;MAA5B;IAFL,CAAlB,CADM;EANJ,CADS;EAefM,MAfe;IAAA,gBAeRC,OAfQ,EAeC;MACd,IAAMC,UAAUD,QAAQC,OAARD,CAAgB,CAAhBA,KAAsB,EAAtC;;MAEA,SAASE,gBAAT,CAA0BC,MAA1B,EAAkCC,IAAlC,EAAwC;QACtC;QACA,IAAIA,KAAKC,UAALD,KAAoB,MAAxB,EAAgC;UAC9B;QACD;;QAED,IAAMP,gBAAgB,CAACS,0BAAD,IAAsBL,QAAQJ,aAARI,KAA0B,KAAtE;QACA,IAAMH,sBAAsB,CAACQ,0BAAD,IAAsBL,QAAQH,mBAA1D;QAEA,IAAMS,eAAe,0BAAQJ,OAAOK,KAAf,EAAsBR,OAAtB,CAArB;;QAEA,IAAIO,iBAAiBE,SAArB,EAAgC;UAC9BT,QAAQU,MAARV,CACEG,MADFH,iDAEuCG,OAAOK,KAF9C;QADF,OAKO,IAAIX,iBAAiBC,mBAArB,EAA0C;UAC/C,IAAMa,gBAAgBC,yBAAYC,WAAZD,CAAwBZ,QAAQc,QAAhCF,CAAtB;;UACA,IAAI,CAAC,qCAAuBL,YAAvB,EAAqCI,aAArC,EAAoDb,mBAApD,CAAL,EAA+E;YAC7EE,QAAQU,MAARV,CACEG,MADFH,wBAEeG,OAAOK,KAFtB;UAID;QACF;MACF;;MAED,OAAO,gCAAcN,gBAAd,EAAgCD,OAAhC,CAAP;IA7Ca;;IAAA;EAAA;AAAA,CAAjBX","names":["module","exports","meta","type","docs","url","schema","caseSensitive","caseSensitiveStrict","create","context","options","checkSourceValue","source","node","importKind","CASE_SENSITIVE_FS","resolvedPath","value","undefined","report","cacheSettings","ModuleCache","getSettings","settings"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\eslint-plugin-import\\src\\rules\\no-unresolved.js"],"sourcesContent":["/**\n * @fileOverview Ensures that an imported path exists, given resolution rules.\n * @author Ben Mosher\n */\n\nimport resolve, { CASE_SENSITIVE_FS, fileExistsWithCaseSync } from 'eslint-module-utils/resolve';\nimport ModuleCache from 'eslint-module-utils/ModuleCache';\nimport moduleVisitor, { makeOptionsSchema } from 'eslint-module-utils/moduleVisitor';\nimport docsUrl from '../docsUrl';\n\nmodule.exports = {\n  meta: {\n    type: 'problem',\n    docs: {\n      url: docsUrl('no-unresolved'),\n    },\n\n    schema: [\n      makeOptionsSchema({\n        caseSensitive: { type: 'boolean', default: true },\n        caseSensitiveStrict: { type: 'boolean', default: false },\n      }),\n    ],\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n\n    function checkSourceValue(source, node) {\n      // ignore type-only imports\n      if (node.importKind === 'type') {\n        return;\n      }\n\n      const caseSensitive = !CASE_SENSITIVE_FS && options.caseSensitive !== false;\n      const caseSensitiveStrict = !CASE_SENSITIVE_FS && options.caseSensitiveStrict;\n\n      const resolvedPath = resolve(source.value, context);\n\n      if (resolvedPath === undefined) {\n        context.report(\n          source,\n          `Unable to resolve path to module '${source.value}'.`,\n        );\n      } else if (caseSensitive || caseSensitiveStrict) {\n        const cacheSettings = ModuleCache.getSettings(context.settings);\n        if (!fileExistsWithCaseSync(resolvedPath, cacheSettings, caseSensitiveStrict)) {\n          context.report(\n            source,\n            `Casing of ${source.value} does not match the underlying filesystem.`,\n          );\n        }\n      }\n    }\n\n    return moduleVisitor(checkSourceValue, options);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}