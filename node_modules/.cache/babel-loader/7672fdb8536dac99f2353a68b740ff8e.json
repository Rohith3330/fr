{"ast":null,"code":"/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\nlet fs = require('fs');\n\nlet path = require('path');\n\nlet exec = require('child_process').execSync;\n\nlet FileList = require('filelist').FileList;\n\nlet PublishTask = function () {\n  let args = Array.prototype.slice.call(arguments).filter(function (item) {\n    return typeof item != 'undefined';\n  });\n  let arg;\n  let opts = {};\n  let definition;\n  let prereqs = [];\n\n  let createDef = function (arg) {\n    return function () {\n      this.packageFiles.include(arg);\n    };\n  };\n\n  this.name = args.shift(); // Old API, just name + list of files\n\n  if (args.length == 1 && (Array.isArray(args[0]) || typeof args[0] == 'string')) {\n    definition = createDef(args.pop());\n  } // Current API, name + [prereqs] + [opts] + definition\n  else {\n    while (arg = args.pop()) {\n      // Definition func\n      if (typeof arg == 'function') {\n        definition = arg;\n      } // Prereqs\n      else if (Array.isArray(arg) || typeof arg == 'string') {\n        prereqs = arg;\n      } // Opts\n      else {\n        opts = arg;\n      }\n    }\n  }\n\n  this.prereqs = prereqs;\n  this.packageFiles = new FileList();\n  this.publishCmd = opts.publishCmd || 'npm publish %filename';\n  this.publishMessage = opts.publishMessage || 'BOOM! Published.';\n  this.gitCmd = opts.gitCmd || 'git';\n  this.versionFiles = opts.versionFiles || ['package.json'];\n  this.scheduleDelay = 5000; // Override utility funcs for testing\n\n  this._ensureRepoClean = function (stdout) {\n    if (stdout.length) {\n      fail(new Error('Git repository is not clean.'));\n    }\n  };\n\n  this._getCurrentBranch = function (stdout) {\n    return String(stdout).trim();\n  };\n\n  if (typeof definition == 'function') {\n    definition.call(this);\n  }\n\n  this.define();\n};\n\nPublishTask.prototype = new function () {\n  let _currentBranch = null;\n\n  let getPackage = function () {\n    let pkg = JSON.parse(fs.readFileSync(path.join(process.cwd(), '/package.json')).toString());\n    return pkg;\n  };\n\n  let getPackageVersionNumber = function () {\n    return getPackage().version;\n  };\n\n  this.define = function () {\n    let self = this;\n    namespace('publish', function () {\n      task('fetchTags', function () {\n        // Make sure local tags are up to date\n        exec(self.gitCmd + ' fetch --tags');\n        console.log('Fetched remote tags.');\n      });\n      task('getCurrentBranch', function () {\n        // Figure out what branch to push to\n        let stdout = exec(self.gitCmd + ' symbolic-ref --short HEAD').toString();\n\n        if (!stdout) {\n          throw new Error('No current Git branch found');\n        }\n\n        _currentBranch = self._getCurrentBranch(stdout);\n        console.log('On branch ' + _currentBranch);\n      });\n      task('ensureClean', function () {\n        // Only bump, push, and tag if the Git repo is clean\n        let stdout = exec(self.gitCmd + ' status --porcelain --untracked-files=no').toString(); // Throw if there's output\n\n        self._ensureRepoClean(stdout);\n      });\n      task('updateVersionFiles', function () {\n        let pkg;\n        let version;\n        let arr;\n        let patch; // Grab the current version-string\n\n        pkg = getPackage();\n        version = pkg.version; // Increment the patch-number for the version\n\n        arr = version.split('.');\n        patch = parseInt(arr.pop(), 10) + 1;\n        arr.push(patch);\n        version = arr.join('.'); // Update package.json or other files with the new version-info\n\n        self.versionFiles.forEach(function (file) {\n          let p = path.join(process.cwd(), file);\n          let data = JSON.parse(fs.readFileSync(p).toString());\n          data.version = version;\n          fs.writeFileSync(p, JSON.stringify(data, true, 2) + '\\n');\n        }); // Return the version string so that listeners for the 'complete' event\n        // for this task can use it (e.g., to update other files before pushing\n        // to Git)\n\n        return version;\n      });\n      task('pushVersion', ['ensureClean', 'updateVersionFiles'], function () {\n        let version = getPackageVersionNumber();\n        let message = 'Version ' + version;\n        let cmds = [self.gitCmd + ' commit -a -m \"' + message + '\"', self.gitCmd + ' push origin ' + _currentBranch, self.gitCmd + ' tag -a v' + version + ' -m \"' + message + '\"', self.gitCmd + ' push --tags'];\n        cmds.forEach(cmd => {\n          exec(cmd);\n        });\n        version = getPackageVersionNumber();\n        console.log('Bumped version number to v' + version + '.');\n      });\n      let defineTask = task('definePackage', function () {\n        let version = getPackageVersionNumber();\n        new jake.PackageTask(self.name, 'v' + version, self.prereqs, function () {\n          // Replace the PackageTask's FileList with the PublishTask's FileList\n          this.packageFiles = self.packageFiles;\n          this.needTarGz = true; // Default to tar.gz\n          // If any of the need<CompressionFormat> or archive opts are set\n          // proxy them to the PackageTask\n\n          for (let p in this) {\n            if (p.indexOf('need') === 0 || p.indexOf('archive') === 0) {\n              if (typeof self[p] != 'undefined') {\n                this[p] = self[p];\n              }\n            }\n          }\n        });\n      });\n      defineTask._internal = true;\n      task('package', function () {\n        let definePack = jake.Task['publish:definePackage'];\n        let pack = jake.Task['package'];\n        let version = getPackageVersionNumber(); // May have already been run\n\n        if (definePack.taskStatus == jake.Task.runStatuses.DONE) {\n          definePack.reenable(true);\n        }\n\n        definePack.execute();\n        definePack.on('complete', function () {\n          pack.invoke();\n          console.log('Created package for ' + self.name + ' v' + version);\n        });\n      });\n      task('publish', function () {\n        return new Promise(resolve => {\n          let version = getPackageVersionNumber();\n          let filename;\n          let cmd;\n          console.log('Publishing ' + self.name + ' v' + version);\n\n          if (typeof self.createPublishCommand == 'function') {\n            cmd = self.createPublishCommand(version);\n          } else {\n            filename = './pkg/' + self.name + '-v' + version + '.tar.gz';\n            cmd = self.publishCmd.replace(/%filename/gi, filename);\n          }\n\n          if (typeof cmd == 'function') {\n            cmd(function (err) {\n              if (err) {\n                throw err;\n              }\n\n              console.log(self.publishMessage);\n              resolve();\n            });\n          } else {\n            // Hackity hack -- NPM publish sometimes returns errror like:\n            // Error sending version data\\nnpm ERR!\n            // Error: forbidden 0.2.4 is modified, should match modified time\n            setTimeout(function () {\n              let stdout = exec(cmd).toString() || '';\n              stdout = stdout.trim();\n\n              if (stdout) {\n                console.log(stdout);\n              }\n\n              console.log(self.publishMessage);\n              resolve();\n            }, self.scheduleDelay);\n          }\n        });\n      });\n      task('cleanup', function () {\n        return new Promise(resolve => {\n          let clobber = jake.Task.clobber;\n          clobber.reenable(true);\n          clobber.on('complete', function () {\n            console.log('Cleaned up package');\n            resolve();\n          });\n          clobber.invoke();\n        });\n      });\n    });\n\n    let prefixNs = function (item) {\n      return 'publish:' + item;\n    }; // Create aliases in the default namespace\n\n\n    desc('Create a new version and release.');\n    task('publish', self.prereqs.concat(['version', 'release'].map(prefixNs)));\n    desc('Release the existing version.');\n    task('publishExisting', self.prereqs.concat(['release'].map(prefixNs)));\n    task('version', ['fetchTags', 'getCurrentBranch', 'pushVersion'].map(prefixNs));\n    task('release', ['package', 'publish', 'cleanup'].map(prefixNs)); // Invoke proactively so there will be a callable 'package' task\n    // which can be used apart from 'publish'\n\n    jake.Task['publish:definePackage'].invoke();\n  };\n}();\njake.PublishTask = PublishTask;\nexports.PublishTask = PublishTask;","map":{"version":3,"names":["fs","require","path","exec","execSync","FileList","PublishTask","args","Array","prototype","slice","call","arguments","filter","item","arg","opts","definition","prereqs","createDef","packageFiles","include","name","shift","length","isArray","pop","publishCmd","publishMessage","gitCmd","versionFiles","scheduleDelay","_ensureRepoClean","stdout","fail","Error","_getCurrentBranch","String","trim","define","_currentBranch","getPackage","pkg","JSON","parse","readFileSync","join","process","cwd","toString","getPackageVersionNumber","version","self","namespace","task","console","log","arr","patch","split","parseInt","push","forEach","file","p","data","writeFileSync","stringify","message","cmds","cmd","defineTask","jake","PackageTask","needTarGz","indexOf","_internal","definePack","Task","pack","taskStatus","runStatuses","DONE","reenable","execute","on","invoke","Promise","resolve","filename","createPublishCommand","replace","err","setTimeout","clobber","prefixNs","desc","concat","map","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jake/lib/publish_task.js"],"sourcesContent":["/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\nlet fs = require('fs');\nlet path = require('path');\nlet exec = require('child_process').execSync;\nlet FileList = require('filelist').FileList;\n\nlet PublishTask = function () {\n  let args = Array.prototype.slice.call(arguments).filter(function (item) {\n    return typeof item != 'undefined';\n  });\n  let arg;\n  let opts = {};\n  let definition;\n  let prereqs = [];\n  let createDef = function (arg) {\n    return function () {\n      this.packageFiles.include(arg);\n    };\n  };\n\n  this.name = args.shift();\n\n  // Old API, just name + list of files\n  if (args.length == 1 && (Array.isArray(args[0]) || typeof args[0] == 'string')) {\n    definition = createDef(args.pop());\n  }\n  // Current API, name + [prereqs] + [opts] + definition\n  else {\n    while ((arg = args.pop())) {\n      // Definition func\n      if (typeof arg == 'function') {\n        definition = arg;\n      }\n      // Prereqs\n      else if (Array.isArray(arg) || typeof arg == 'string') {\n        prereqs = arg;\n      }\n      // Opts\n      else {\n        opts = arg;\n      }\n    }\n  }\n\n  this.prereqs = prereqs;\n  this.packageFiles = new FileList();\n  this.publishCmd = opts.publishCmd || 'npm publish %filename';\n  this.publishMessage = opts.publishMessage || 'BOOM! Published.';\n  this.gitCmd = opts.gitCmd || 'git';\n  this.versionFiles = opts.versionFiles || ['package.json'];\n  this.scheduleDelay = 5000;\n\n  // Override utility funcs for testing\n  this._ensureRepoClean = function (stdout) {\n    if (stdout.length) {\n      fail(new Error('Git repository is not clean.'));\n    }\n  };\n  this._getCurrentBranch = function (stdout) {\n    return String(stdout).trim();\n  };\n\n  if (typeof definition == 'function') {\n    definition.call(this);\n  }\n  this.define();\n};\n\n\nPublishTask.prototype = new (function () {\n\n  let _currentBranch = null;\n\n  let getPackage = function () {\n    let pkg = JSON.parse(fs.readFileSync(path.join(process.cwd(),\n      '/package.json')).toString());\n    return pkg;\n  };\n  let getPackageVersionNumber = function () {\n    return getPackage().version;\n  };\n\n  this.define = function () {\n    let self = this;\n\n    namespace('publish', function () {\n      task('fetchTags', function () {\n        // Make sure local tags are up to date\n        exec(self.gitCmd + ' fetch --tags');\n        console.log('Fetched remote tags.');\n      });\n\n      task('getCurrentBranch', function () {\n        // Figure out what branch to push to\n        let stdout = exec(self.gitCmd + ' symbolic-ref --short HEAD').toString();\n        if (!stdout) {\n          throw new Error('No current Git branch found');\n        }\n        _currentBranch = self._getCurrentBranch(stdout);\n        console.log('On branch ' + _currentBranch);\n      });\n\n      task('ensureClean', function () {\n        // Only bump, push, and tag if the Git repo is clean\n        let stdout = exec(self.gitCmd + ' status --porcelain --untracked-files=no').toString();\n        // Throw if there's output\n        self._ensureRepoClean(stdout);\n      });\n\n      task('updateVersionFiles', function () {\n        let pkg;\n        let version;\n        let arr;\n        let patch;\n\n        // Grab the current version-string\n        pkg = getPackage();\n        version = pkg.version;\n        // Increment the patch-number for the version\n        arr = version.split('.');\n        patch = parseInt(arr.pop(), 10) + 1;\n        arr.push(patch);\n        version = arr.join('.');\n\n        // Update package.json or other files with the new version-info\n        self.versionFiles.forEach(function (file) {\n          let p = path.join(process.cwd(), file);\n          let data = JSON.parse(fs.readFileSync(p).toString());\n          data.version = version;\n          fs.writeFileSync(p, JSON.stringify(data, true, 2) + '\\n');\n        });\n        // Return the version string so that listeners for the 'complete' event\n        // for this task can use it (e.g., to update other files before pushing\n        // to Git)\n        return version;\n      });\n\n      task('pushVersion', ['ensureClean', 'updateVersionFiles'], function () {\n        let version = getPackageVersionNumber();\n        let message = 'Version ' + version;\n        let cmds = [\n          self.gitCmd + ' commit -a -m \"' + message + '\"',\n          self.gitCmd + ' push origin ' + _currentBranch,\n          self.gitCmd + ' tag -a v' + version + ' -m \"' + message + '\"',\n          self.gitCmd + ' push --tags'\n        ];\n        cmds.forEach((cmd) => {\n          exec(cmd);\n        });\n        version = getPackageVersionNumber();\n        console.log('Bumped version number to v' + version + '.');\n      });\n\n      let defineTask = task('definePackage', function () {\n        let version = getPackageVersionNumber();\n        new jake.PackageTask(self.name, 'v' + version, self.prereqs, function () {\n          // Replace the PackageTask's FileList with the PublishTask's FileList\n          this.packageFiles = self.packageFiles;\n          this.needTarGz = true; // Default to tar.gz\n          // If any of the need<CompressionFormat> or archive opts are set\n          // proxy them to the PackageTask\n          for (let p in this) {\n            if (p.indexOf('need') === 0 || p.indexOf('archive') === 0) {\n              if (typeof self[p] != 'undefined') {\n                this[p] = self[p];\n              }\n            }\n          }\n        });\n      });\n      defineTask._internal = true;\n\n      task('package', function () {\n        let definePack = jake.Task['publish:definePackage'];\n        let pack = jake.Task['package'];\n        let version = getPackageVersionNumber();\n\n        // May have already been run\n        if (definePack.taskStatus == jake.Task.runStatuses.DONE) {\n          definePack.reenable(true);\n        }\n        definePack.execute();\n        definePack.on('complete', function () {\n          pack.invoke();\n          console.log('Created package for ' + self.name + ' v' + version);\n        });\n      });\n\n      task('publish', function () {\n        return new Promise((resolve) => {\n          let version = getPackageVersionNumber();\n          let filename;\n          let cmd;\n\n          console.log('Publishing ' + self.name + ' v' + version);\n\n          if (typeof self.createPublishCommand == 'function') {\n            cmd = self.createPublishCommand(version);\n          }\n          else {\n            filename = './pkg/' + self.name + '-v' + version + '.tar.gz';\n            cmd = self.publishCmd.replace(/%filename/gi, filename);\n          }\n\n          if (typeof cmd == 'function') {\n            cmd(function (err) {\n              if (err) {\n                throw err;\n              }\n              console.log(self.publishMessage);\n              resolve();\n            });\n          }\n          else {\n            // Hackity hack -- NPM publish sometimes returns errror like:\n            // Error sending version data\\nnpm ERR!\n            // Error: forbidden 0.2.4 is modified, should match modified time\n            setTimeout(function () {\n              let stdout = exec(cmd).toString() || '';\n              stdout = stdout.trim();\n              if (stdout) {\n                console.log(stdout);\n              }\n              console.log(self.publishMessage);\n              resolve();\n            }, self.scheduleDelay);\n          }\n        });\n      });\n\n      task('cleanup', function () {\n        return new Promise((resolve) => {\n          let clobber = jake.Task.clobber;\n          clobber.reenable(true);\n          clobber.on('complete', function () {\n            console.log('Cleaned up package');\n            resolve();\n          });\n          clobber.invoke();\n        });\n      });\n\n    });\n\n    let prefixNs = function (item) {\n      return 'publish:' + item;\n    };\n\n    // Create aliases in the default namespace\n    desc('Create a new version and release.');\n    task('publish', self.prereqs.concat(['version', 'release']\n      .map(prefixNs)));\n\n    desc('Release the existing version.');\n    task('publishExisting', self.prereqs.concat(['release']\n      .map(prefixNs)));\n\n    task('version', ['fetchTags', 'getCurrentBranch', 'pushVersion']\n      .map(prefixNs));\n\n    task('release', ['package', 'publish', 'cleanup']\n      .map(prefixNs));\n\n    // Invoke proactively so there will be a callable 'package' task\n    // which can be used apart from 'publish'\n    jake.Task['publish:definePackage'].invoke();\n  };\n\n})();\n\njake.PublishTask = PublishTask;\nexports.PublishTask = PublishTask;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}