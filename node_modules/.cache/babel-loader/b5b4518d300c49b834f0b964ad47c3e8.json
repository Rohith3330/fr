{"ast":null,"code":"'use strict';\n\nvar util = require('util'); // Constants\n\n\nvar c = require('../const');\n\nvar $$ = require('../utils');\n\nvar HelpFormatter = require('./formatter.js');\n/**\n * new RawDescriptionHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawDescriptionHelpFormatter, ...})\n *\n * Help message formatter which adds default values to argument help.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\n\nfunction ArgumentDefaultsHelpFormatter(options) {\n  HelpFormatter.call(this, options);\n}\n\nutil.inherits(ArgumentDefaultsHelpFormatter, HelpFormatter);\n\nArgumentDefaultsHelpFormatter.prototype._getHelpString = function (action) {\n  var help = action.help;\n\n  if (action.help.indexOf('%(defaultValue)s') === -1) {\n    if (action.defaultValue !== c.SUPPRESS) {\n      var defaulting_nargs = [c.OPTIONAL, c.ZERO_OR_MORE];\n\n      if (action.isOptional() || defaulting_nargs.indexOf(action.nargs) >= 0) {\n        help += ' (default: %(defaultValue)s)';\n      }\n    }\n  }\n\n  return help;\n};\n\nmodule.exports.ArgumentDefaultsHelpFormatter = ArgumentDefaultsHelpFormatter;\n/**\n * new RawDescriptionHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawDescriptionHelpFormatter, ...})\n *\n * Help message formatter which retains any formatting in descriptions.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nfunction RawDescriptionHelpFormatter(options) {\n  HelpFormatter.call(this, options);\n}\n\nutil.inherits(RawDescriptionHelpFormatter, HelpFormatter);\n\nRawDescriptionHelpFormatter.prototype._fillText = function (text, width, indent) {\n  var lines = text.split('\\n');\n  lines = lines.map(function (line) {\n    return $$.trimEnd(indent + line);\n  });\n  return lines.join('\\n');\n};\n\nmodule.exports.RawDescriptionHelpFormatter = RawDescriptionHelpFormatter;\n/**\n * new RawTextHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawTextHelpFormatter, ...})\n *\n * Help message formatter which retains formatting of all help text.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nfunction RawTextHelpFormatter(options) {\n  RawDescriptionHelpFormatter.call(this, options);\n}\n\nutil.inherits(RawTextHelpFormatter, RawDescriptionHelpFormatter);\n\nRawTextHelpFormatter.prototype._splitLines = function (text) {\n  return text.split('\\n');\n};\n\nmodule.exports.RawTextHelpFormatter = RawTextHelpFormatter;","map":{"version":3,"names":["util","require","c","$$","HelpFormatter","ArgumentDefaultsHelpFormatter","options","call","inherits","prototype","_getHelpString","action","help","indexOf","defaultValue","SUPPRESS","defaulting_nargs","OPTIONAL","ZERO_OR_MORE","isOptional","nargs","module","exports","RawDescriptionHelpFormatter","_fillText","text","width","indent","lines","split","map","line","trimEnd","join","RawTextHelpFormatter","_splitLines"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/argparse/lib/help/added_formatters.js"],"sourcesContent":["'use strict';\n\nvar util    = require('util');\n\n// Constants\nvar c = require('../const');\n\nvar $$ = require('../utils');\nvar HelpFormatter = require('./formatter.js');\n\n/**\n * new RawDescriptionHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawDescriptionHelpFormatter, ...})\n *\n * Help message formatter which adds default values to argument help.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nfunction ArgumentDefaultsHelpFormatter(options) {\n  HelpFormatter.call(this, options);\n}\n\nutil.inherits(ArgumentDefaultsHelpFormatter, HelpFormatter);\n\nArgumentDefaultsHelpFormatter.prototype._getHelpString = function (action) {\n  var help = action.help;\n  if (action.help.indexOf('%(defaultValue)s') === -1) {\n    if (action.defaultValue !== c.SUPPRESS) {\n      var defaulting_nargs = [ c.OPTIONAL, c.ZERO_OR_MORE ];\n      if (action.isOptional() || (defaulting_nargs.indexOf(action.nargs) >= 0)) {\n        help += ' (default: %(defaultValue)s)';\n      }\n    }\n  }\n  return help;\n};\n\nmodule.exports.ArgumentDefaultsHelpFormatter = ArgumentDefaultsHelpFormatter;\n\n/**\n * new RawDescriptionHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawDescriptionHelpFormatter, ...})\n *\n * Help message formatter which retains any formatting in descriptions.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nfunction RawDescriptionHelpFormatter(options) {\n  HelpFormatter.call(this, options);\n}\n\nutil.inherits(RawDescriptionHelpFormatter, HelpFormatter);\n\nRawDescriptionHelpFormatter.prototype._fillText = function (text, width, indent) {\n  var lines = text.split('\\n');\n  lines = lines.map(function (line) {\n    return $$.trimEnd(indent + line);\n  });\n  return lines.join('\\n');\n};\nmodule.exports.RawDescriptionHelpFormatter = RawDescriptionHelpFormatter;\n\n/**\n * new RawTextHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawTextHelpFormatter, ...})\n *\n * Help message formatter which retains formatting of all help text.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nfunction RawTextHelpFormatter(options) {\n  RawDescriptionHelpFormatter.call(this, options);\n}\n\nutil.inherits(RawTextHelpFormatter, RawDescriptionHelpFormatter);\n\nRawTextHelpFormatter.prototype._splitLines = function (text) {\n  return text.split('\\n');\n};\n\nmodule.exports.RawTextHelpFormatter = RawTextHelpFormatter;\n"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAMC,OAAO,CAAC,MAAD,CAArB,C,CAEA;;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,UAAD,CAAf;;AAEA,IAAIE,EAAE,GAAGF,OAAO,CAAC,UAAD,CAAhB;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,gBAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASI,6BAAT,CAAuCC,OAAvC,EAAgD;EAC9CF,aAAa,CAACG,IAAd,CAAmB,IAAnB,EAAyBD,OAAzB;AACD;;AAEDN,IAAI,CAACQ,QAAL,CAAcH,6BAAd,EAA6CD,aAA7C;;AAEAC,6BAA6B,CAACI,SAA9B,CAAwCC,cAAxC,GAAyD,UAAUC,MAAV,EAAkB;EACzE,IAAIC,IAAI,GAAGD,MAAM,CAACC,IAAlB;;EACA,IAAID,MAAM,CAACC,IAAP,CAAYC,OAAZ,CAAoB,kBAApB,MAA4C,CAAC,CAAjD,EAAoD;IAClD,IAAIF,MAAM,CAACG,YAAP,KAAwBZ,CAAC,CAACa,QAA9B,EAAwC;MACtC,IAAIC,gBAAgB,GAAG,CAAEd,CAAC,CAACe,QAAJ,EAAcf,CAAC,CAACgB,YAAhB,CAAvB;;MACA,IAAIP,MAAM,CAACQ,UAAP,MAAwBH,gBAAgB,CAACH,OAAjB,CAAyBF,MAAM,CAACS,KAAhC,KAA0C,CAAtE,EAA0E;QACxER,IAAI,IAAI,8BAAR;MACD;IACF;EACF;;EACD,OAAOA,IAAP;AACD,CAXD;;AAaAS,MAAM,CAACC,OAAP,CAAejB,6BAAf,GAA+CA,6BAA/C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASkB,2BAAT,CAAqCjB,OAArC,EAA8C;EAC5CF,aAAa,CAACG,IAAd,CAAmB,IAAnB,EAAyBD,OAAzB;AACD;;AAEDN,IAAI,CAACQ,QAAL,CAAce,2BAAd,EAA2CnB,aAA3C;;AAEAmB,2BAA2B,CAACd,SAA5B,CAAsCe,SAAtC,GAAkD,UAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+B;EAC/E,IAAIC,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,IAAX,CAAZ;EACAD,KAAK,GAAGA,KAAK,CAACE,GAAN,CAAU,UAAUC,IAAV,EAAgB;IAChC,OAAO5B,EAAE,CAAC6B,OAAH,CAAWL,MAAM,GAAGI,IAApB,CAAP;EACD,CAFO,CAAR;EAGA,OAAOH,KAAK,CAACK,IAAN,CAAW,IAAX,CAAP;AACD,CAND;;AAOAZ,MAAM,CAACC,OAAP,CAAeC,2BAAf,GAA6CA,2BAA7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASW,oBAAT,CAA8B5B,OAA9B,EAAuC;EACrCiB,2BAA2B,CAAChB,IAA5B,CAAiC,IAAjC,EAAuCD,OAAvC;AACD;;AAEDN,IAAI,CAACQ,QAAL,CAAc0B,oBAAd,EAAoCX,2BAApC;;AAEAW,oBAAoB,CAACzB,SAArB,CAA+B0B,WAA/B,GAA6C,UAAUV,IAAV,EAAgB;EAC3D,OAAOA,IAAI,CAACI,KAAL,CAAW,IAAX,CAAP;AACD,CAFD;;AAIAR,MAAM,CAACC,OAAP,CAAeY,oBAAf,GAAsCA,oBAAtC"},"metadata":{},"sourceType":"script"}