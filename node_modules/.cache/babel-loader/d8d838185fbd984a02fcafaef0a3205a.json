{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromTSNonNullExpression;\n\nvar extractValueFromThisExpression = require('./ThisExpression').default;\n\nfunction navigate(obj, prop, value) {\n  if (value.computed) {\n    return value.optional ? obj + '?.[' + prop + ']' : obj + '[' + prop + ']';\n  }\n\n  return value.optional ? obj + '?.' + prop : obj + '.' + prop;\n}\n/**\n * Extractor function for a TSNonNullExpression type value node.\n * A TSNonNullExpression is accessing a TypeScript Non-Null Assertion\n * Operator !\n *\n * @param - value - AST Value object with type `TSNonNullExpression`\n * @returns - The extracted value converted to correct type\n *  and maintaing `obj.property` convention.\n */\n\n\nfunction extractValueFromTSNonNullExpression(value) {\n  // eslint-disable-next-line global-require\n  // const getValue = require('.').default;\n  var errorMessage = 'The prop value with an expression type of TSNonNullExpression could not be resolved. Please file an issue ( https://github.com/jsx-eslint/jsx-ast-utils/issues/new ) to get this fixed immediately.'; // it's just the name\n\n  if (value.type === 'Identifier') {\n    var name = value.name;\n    return name;\n  }\n\n  if (value.type === 'Literal') {\n    return value.value;\n  }\n\n  if (value.type === 'TSAsExpression') {\n    return extractValueFromTSNonNullExpression(value.expression);\n  }\n\n  if (value.type === 'ThisExpression') {\n    return extractValueFromThisExpression();\n  } // does not contains properties & is not parenthesized\n\n\n  if (value.type === 'TSNonNullExpression' && (!value.extra || value.extra.parenthesized === false)) {\n    var expression = value.expression;\n    return extractValueFromTSNonNullExpression(expression) + '!';\n  } // does not contains properties & is parenthesized\n\n\n  if (value.type === 'TSNonNullExpression' && value.extra && value.extra.parenthesized === true) {\n    var _expression = value.expression;\n    return '(' + extractValueFromTSNonNullExpression(_expression) + '!' + ')';\n  }\n\n  if (value.type === 'MemberExpression') {\n    // contains a property & is not parenthesized\n    if (!value.extra || value.extra.parenthesized === false) {\n      return navigate(extractValueFromTSNonNullExpression(value.object), extractValueFromTSNonNullExpression(value.property), value);\n    } // contains a property & is parenthesized\n\n\n    if (value.extra && value.extra.parenthesized === true) {\n      var result = navigate(extractValueFromTSNonNullExpression(value.object), extractValueFromTSNonNullExpression(value.property), value);\n      return '(' + result + ')';\n    }\n  } // try to fail silently, if specs for TSNonNullExpression change\n  // not throw, only log error. Similar to how it was done previously\n\n\n  if (value.expression) {\n    var _expression2 = value.expression;\n\n    while (_expression2) {\n      if (_expression2.type === 'Identifier') {\n        // eslint-disable-next-line no-console\n        console.error(errorMessage);\n        return _expression2.name;\n      }\n\n      var _expression3 = _expression2;\n      _expression2 = _expression3.expression;\n    }\n  } // eslint-disable-next-line no-console\n\n\n  console.error(errorMessage);\n  return '';\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","extractValueFromTSNonNullExpression","extractValueFromThisExpression","require","navigate","obj","prop","computed","optional","errorMessage","type","name","expression","extra","parenthesized","_expression","object","property","result","_expression2","console","error","_expression3"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jsx-ast-utils/lib/values/expressions/TSNonNullExpression.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromTSNonNullExpression;\nvar extractValueFromThisExpression = require('./ThisExpression').default;\n\nfunction navigate(obj, prop, value) {\n  if (value.computed) {\n    return value.optional ? obj + '?.[' + prop + ']' : obj + '[' + prop + ']';\n  }\n  return value.optional ? obj + '?.' + prop : obj + '.' + prop;\n}\n\n/**\n * Extractor function for a TSNonNullExpression type value node.\n * A TSNonNullExpression is accessing a TypeScript Non-Null Assertion\n * Operator !\n *\n * @param - value - AST Value object with type `TSNonNullExpression`\n * @returns - The extracted value converted to correct type\n *  and maintaing `obj.property` convention.\n */\nfunction extractValueFromTSNonNullExpression(value) {\n  // eslint-disable-next-line global-require\n  // const getValue = require('.').default;\n  var errorMessage = 'The prop value with an expression type of TSNonNullExpression could not be resolved. Please file an issue ( https://github.com/jsx-eslint/jsx-ast-utils/issues/new ) to get this fixed immediately.';\n\n  // it's just the name\n  if (value.type === 'Identifier') {\n    var name = value.name;\n\n    return name;\n  }\n\n  if (value.type === 'Literal') {\n    return value.value;\n  }\n\n  if (value.type === 'TSAsExpression') {\n    return extractValueFromTSNonNullExpression(value.expression);\n  }\n\n  if (value.type === 'ThisExpression') {\n    return extractValueFromThisExpression();\n  }\n\n  // does not contains properties & is not parenthesized\n  if (value.type === 'TSNonNullExpression' && (!value.extra || value.extra.parenthesized === false)) {\n    var expression = value.expression;\n\n    return extractValueFromTSNonNullExpression(expression) + '!';\n  }\n\n  // does not contains properties & is parenthesized\n  if (value.type === 'TSNonNullExpression' && value.extra && value.extra.parenthesized === true) {\n    var _expression = value.expression;\n\n    return '(' + extractValueFromTSNonNullExpression(_expression) + '!' + ')';\n  }\n\n  if (value.type === 'MemberExpression') {\n    // contains a property & is not parenthesized\n    if (!value.extra || value.extra.parenthesized === false) {\n      return navigate(extractValueFromTSNonNullExpression(value.object), extractValueFromTSNonNullExpression(value.property), value);\n    }\n\n    // contains a property & is parenthesized\n    if (value.extra && value.extra.parenthesized === true) {\n      var result = navigate(extractValueFromTSNonNullExpression(value.object), extractValueFromTSNonNullExpression(value.property), value);\n      return '(' + result + ')';\n    }\n  }\n\n  // try to fail silently, if specs for TSNonNullExpression change\n  // not throw, only log error. Similar to how it was done previously\n  if (value.expression) {\n    var _expression2 = value.expression;\n\n    while (_expression2) {\n      if (_expression2.type === 'Identifier') {\n        // eslint-disable-next-line no-console\n        console.error(errorMessage);\n        return _expression2.name;\n      }\n      var _expression3 = _expression2;\n      _expression2 = _expression3.expression;\n    }\n  }\n\n  // eslint-disable-next-line no-console\n  console.error(errorMessage);\n  return '';\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,mCAAlB;;AACA,IAAIC,8BAA8B,GAAGC,OAAO,CAAC,kBAAD,CAAP,CAA4BH,OAAjE;;AAEA,SAASI,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6BP,KAA7B,EAAoC;EAClC,IAAIA,KAAK,CAACQ,QAAV,EAAoB;IAClB,OAAOR,KAAK,CAACS,QAAN,GAAiBH,GAAG,GAAG,KAAN,GAAcC,IAAd,GAAqB,GAAtC,GAA4CD,GAAG,GAAG,GAAN,GAAYC,IAAZ,GAAmB,GAAtE;EACD;;EACD,OAAOP,KAAK,CAACS,QAAN,GAAiBH,GAAG,GAAG,IAAN,GAAaC,IAA9B,GAAqCD,GAAG,GAAG,GAAN,GAAYC,IAAxD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASL,mCAAT,CAA6CF,KAA7C,EAAoD;EAClD;EACA;EACA,IAAIU,YAAY,GAAG,qMAAnB,CAHkD,CAKlD;;EACA,IAAIV,KAAK,CAACW,IAAN,KAAe,YAAnB,EAAiC;IAC/B,IAAIC,IAAI,GAAGZ,KAAK,CAACY,IAAjB;IAEA,OAAOA,IAAP;EACD;;EAED,IAAIZ,KAAK,CAACW,IAAN,KAAe,SAAnB,EAA8B;IAC5B,OAAOX,KAAK,CAACA,KAAb;EACD;;EAED,IAAIA,KAAK,CAACW,IAAN,KAAe,gBAAnB,EAAqC;IACnC,OAAOT,mCAAmC,CAACF,KAAK,CAACa,UAAP,CAA1C;EACD;;EAED,IAAIb,KAAK,CAACW,IAAN,KAAe,gBAAnB,EAAqC;IACnC,OAAOR,8BAA8B,EAArC;EACD,CAtBiD,CAwBlD;;;EACA,IAAIH,KAAK,CAACW,IAAN,KAAe,qBAAf,KAAyC,CAACX,KAAK,CAACc,KAAP,IAAgBd,KAAK,CAACc,KAAN,CAAYC,aAAZ,KAA8B,KAAvF,CAAJ,EAAmG;IACjG,IAAIF,UAAU,GAAGb,KAAK,CAACa,UAAvB;IAEA,OAAOX,mCAAmC,CAACW,UAAD,CAAnC,GAAkD,GAAzD;EACD,CA7BiD,CA+BlD;;;EACA,IAAIb,KAAK,CAACW,IAAN,KAAe,qBAAf,IAAwCX,KAAK,CAACc,KAA9C,IAAuDd,KAAK,CAACc,KAAN,CAAYC,aAAZ,KAA8B,IAAzF,EAA+F;IAC7F,IAAIC,WAAW,GAAGhB,KAAK,CAACa,UAAxB;IAEA,OAAO,MAAMX,mCAAmC,CAACc,WAAD,CAAzC,GAAyD,GAAzD,GAA+D,GAAtE;EACD;;EAED,IAAIhB,KAAK,CAACW,IAAN,KAAe,kBAAnB,EAAuC;IACrC;IACA,IAAI,CAACX,KAAK,CAACc,KAAP,IAAgBd,KAAK,CAACc,KAAN,CAAYC,aAAZ,KAA8B,KAAlD,EAAyD;MACvD,OAAOV,QAAQ,CAACH,mCAAmC,CAACF,KAAK,CAACiB,MAAP,CAApC,EAAoDf,mCAAmC,CAACF,KAAK,CAACkB,QAAP,CAAvF,EAAyGlB,KAAzG,CAAf;IACD,CAJoC,CAMrC;;;IACA,IAAIA,KAAK,CAACc,KAAN,IAAed,KAAK,CAACc,KAAN,CAAYC,aAAZ,KAA8B,IAAjD,EAAuD;MACrD,IAAII,MAAM,GAAGd,QAAQ,CAACH,mCAAmC,CAACF,KAAK,CAACiB,MAAP,CAApC,EAAoDf,mCAAmC,CAACF,KAAK,CAACkB,QAAP,CAAvF,EAAyGlB,KAAzG,CAArB;MACA,OAAO,MAAMmB,MAAN,GAAe,GAAtB;IACD;EACF,CAjDiD,CAmDlD;EACA;;;EACA,IAAInB,KAAK,CAACa,UAAV,EAAsB;IACpB,IAAIO,YAAY,GAAGpB,KAAK,CAACa,UAAzB;;IAEA,OAAOO,YAAP,EAAqB;MACnB,IAAIA,YAAY,CAACT,IAAb,KAAsB,YAA1B,EAAwC;QACtC;QACAU,OAAO,CAACC,KAAR,CAAcZ,YAAd;QACA,OAAOU,YAAY,CAACR,IAApB;MACD;;MACD,IAAIW,YAAY,GAAGH,YAAnB;MACAA,YAAY,GAAGG,YAAY,CAACV,UAA5B;IACD;EACF,CAjEiD,CAmElD;;;EACAQ,OAAO,CAACC,KAAR,CAAcZ,YAAd;EACA,OAAO,EAAP;AACD"},"metadata":{},"sourceType":"script"}