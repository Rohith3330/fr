{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Make sure to run node with --expose-gc option!\n// The times are reliable if about 1% relative mean error if you run it:\n// * immediately after restart\n// * with 100% battery charge\n// * not connected to network\n\n/* eslint import/no-extraneous-dependencies: \"off\" */\nconst Benchmark = require('benchmark');\n\nconst diffBaseline = require('diff').diffLines;\n\nconst diffImproved = require('../build/index.js').default;\n\nconst testBaseline = (a, b) => {\n  const benchmark = new Benchmark({\n    fn() {\n      diffBaseline(a, b);\n    },\n\n    name: 'baseline',\n\n    onCycle() {\n      global.gc(); // after run cycle\n    },\n\n    onStart() {\n      global.gc(); // when benchmark starts\n    }\n\n  });\n  benchmark.run({\n    async: false\n  });\n  return benchmark.stats;\n};\n\nconst testImproved = function (a, b) {\n  const benchmark = new Benchmark({\n    fn() {\n      // Split string arguments to make fair comparison with baseline.\n      const aItems = a.split('\\n');\n      const bItems = b.split('\\n');\n\n      const isCommon = (aIndex, bIndex) => aItems[aIndex] === bItems[bIndex]; // This callback obviously does less than baseline `diff` package,\n      // but avoiding double work and memory churn is the goal.\n      // For example, `jest-diff` has had to split strings that `diff` joins.\n\n\n      const foundSubsequence = () => {};\n\n      diffImproved(aItems.length, bItems.length, isCommon, foundSubsequence);\n    },\n\n    name: 'improved',\n\n    onCycle() {\n      global.gc(); // after run cycle\n    },\n\n    onStart() {\n      global.gc(); // when benchmark starts\n    }\n\n  });\n  benchmark.run({\n    async: false\n  });\n  return benchmark.stats;\n};\n\nconst writeHeading2 = () => {\n  console.log('## Benchmark time for `diff-sequences` versus `diff`\\n');\n  console.log('A ratio less than 1.0 means `diff-sequences` is faster.');\n};\n\nconst writeHeading3 = n => {\n  console.log(`\\n### n = ${n}\\n`);\n  console.log('| name | % | ratio | improved | rme | baseline | rme |');\n  console.log('| :--- | ---: | :--- | :--- | ---: | :--- | ---: |');\n};\n\nconst writeRow = (name, percent, statsImproved, statsBaseline) => {\n  const {\n    mean: meanImproved,\n    rme: rmeImproved\n  } = statsImproved;\n  const {\n    mean: meanBaseline,\n    rme: rmeBaseline\n  } = statsBaseline;\n  const ratio = meanImproved / meanBaseline;\n  console.log(`| ${name} | ${percent}% | ${ratio.toFixed(4)} | ${meanImproved.toExponential(4)} | ${rmeImproved.toFixed(2)}% | ${meanBaseline.toExponential(4)} | ${rmeBaseline.toFixed(2)}% |`);\n};\n\nconst testDeleteInsert = (tenths, more, less) => {\n  // For improved `diff-sequences` package, delete is often slower than insert.\n  const statsDeleteImproved = testImproved(more, less);\n  const statsDeleteBaseline = testBaseline(more, less);\n  writeRow('delete', tenths * 10, statsDeleteImproved, statsDeleteBaseline); // For baseline `diff` package, many insertions is serious perf problem.\n  // However, the benchmark package cannot accurately measure for large n.\n\n  const statsInsertBaseline = testBaseline(less, more);\n  const statsInsertImproved = testImproved(less, more);\n  writeRow('insert', tenths * 10, statsInsertImproved, statsInsertBaseline);\n};\n\nconst testChange = (tenths, expected, received) => {\n  const statsImproved = testImproved(expected, received);\n  const statsBaseline = testBaseline(expected, received);\n  writeRow('change', tenths * 10, statsImproved, statsBaseline);\n};\n\nconst getItems = (n, callback) => {\n  const items = [];\n\n  for (let i = 0; i !== n; i += 1) {\n    const item = callback(i);\n\n    if (typeof item === 'string') {\n      items.push(item);\n    }\n  }\n\n  return items.join('\\n');\n}; // Simulate change of property name which is usually not same line.\n// Expected: 0 1 2 3 4 5 6 7 8 9 and so on\n// Received: 1 2 3 4 x0 5 6 7 8 9 and so on\n\n\nconst change2 = i => {\n  const j = i % 10;\n  return j === 4 ? `x${i - 4}` : j < 4 ? `${i + 1}` : `${i}`;\n};\n\nconst testLength = n => {\n  const all = getItems(n, i => `${i}`);\n  writeHeading3(n);\n  [2, 4, 8].forEach(tenth => {\n    testDeleteInsert(tenth, all, getItems(n, i => i % 10 >= tenth && `${i}`));\n  });\n  testChange(1, all, getItems(n, i => i % 10 === 0 ? `x${i}` : `${i}`));\n  testChange(2, all, getItems(n, change2));\n  testChange(5, all, getItems(n, i => i % 2 === 0 ? `x${i}` : `${i}`));\n  testChange(10, all, getItems(n, i => `x${i}`)); // simulate TDD\n};\n\nwriteHeading2();\ntestLength(20);\ntestLength(200);\ntestLength(2000);","map":{"version":3,"names":["Benchmark","require","diffBaseline","diffLines","diffImproved","default","testBaseline","a","b","benchmark","fn","name","onCycle","global","gc","onStart","run","async","stats","testImproved","aItems","split","bItems","isCommon","aIndex","bIndex","foundSubsequence","length","writeHeading2","console","log","writeHeading3","n","writeRow","percent","statsImproved","statsBaseline","mean","meanImproved","rme","rmeImproved","meanBaseline","rmeBaseline","ratio","toFixed","toExponential","testDeleteInsert","tenths","more","less","statsDeleteImproved","statsDeleteBaseline","statsInsertBaseline","statsInsertImproved","testChange","expected","received","getItems","callback","items","i","item","push","join","change2","j","testLength","all","forEach","tenth"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/diff-sequences/perf/index.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// Make sure to run node with --expose-gc option!\n\n// The times are reliable if about 1% relative mean error if you run it:\n\n// * immediately after restart\n// * with 100% battery charge\n// * not connected to network\n\n/* eslint import/no-extraneous-dependencies: \"off\" */\n\nconst Benchmark = require('benchmark');\nconst diffBaseline = require('diff').diffLines;\nconst diffImproved = require('../build/index.js').default;\n\nconst testBaseline = (a, b) => {\n  const benchmark = new Benchmark({\n    fn() {\n      diffBaseline(a, b);\n    },\n    name: 'baseline',\n    onCycle() {\n      global.gc(); // after run cycle\n    },\n    onStart() {\n      global.gc(); // when benchmark starts\n    },\n  });\n\n  benchmark.run({async: false});\n\n  return benchmark.stats;\n};\n\nconst testImproved = function (a, b) {\n  const benchmark = new Benchmark({\n    fn() {\n      // Split string arguments to make fair comparison with baseline.\n      const aItems = a.split('\\n');\n      const bItems = b.split('\\n');\n\n      const isCommon = (aIndex, bIndex) => aItems[aIndex] === bItems[bIndex];\n\n      // This callback obviously does less than baseline `diff` package,\n      // but avoiding double work and memory churn is the goal.\n      // For example, `jest-diff` has had to split strings that `diff` joins.\n      const foundSubsequence = () => {};\n\n      diffImproved(aItems.length, bItems.length, isCommon, foundSubsequence);\n    },\n    name: 'improved',\n    onCycle() {\n      global.gc(); // after run cycle\n    },\n    onStart() {\n      global.gc(); // when benchmark starts\n    },\n  });\n\n  benchmark.run({async: false});\n\n  return benchmark.stats;\n};\n\nconst writeHeading2 = () => {\n  console.log('## Benchmark time for `diff-sequences` versus `diff`\\n');\n  console.log('A ratio less than 1.0 means `diff-sequences` is faster.');\n};\n\nconst writeHeading3 = n => {\n  console.log(`\\n### n = ${n}\\n`);\n  console.log('| name | % | ratio | improved | rme | baseline | rme |');\n  console.log('| :--- | ---: | :--- | :--- | ---: | :--- | ---: |');\n};\n\nconst writeRow = (name, percent, statsImproved, statsBaseline) => {\n  const {mean: meanImproved, rme: rmeImproved} = statsImproved;\n  const {mean: meanBaseline, rme: rmeBaseline} = statsBaseline;\n  const ratio = meanImproved / meanBaseline;\n\n  console.log(\n    `| ${name} | ${percent}% | ${ratio.toFixed(\n      4,\n    )} | ${meanImproved.toExponential(4)} | ${rmeImproved.toFixed(\n      2,\n    )}% | ${meanBaseline.toExponential(4)} | ${rmeBaseline.toFixed(2)}% |`,\n  );\n};\n\nconst testDeleteInsert = (tenths, more, less) => {\n  // For improved `diff-sequences` package, delete is often slower than insert.\n  const statsDeleteImproved = testImproved(more, less);\n  const statsDeleteBaseline = testBaseline(more, less);\n  writeRow('delete', tenths * 10, statsDeleteImproved, statsDeleteBaseline);\n\n  // For baseline `diff` package, many insertions is serious perf problem.\n  // However, the benchmark package cannot accurately measure for large n.\n  const statsInsertBaseline = testBaseline(less, more);\n  const statsInsertImproved = testImproved(less, more);\n  writeRow('insert', tenths * 10, statsInsertImproved, statsInsertBaseline);\n};\n\nconst testChange = (tenths, expected, received) => {\n  const statsImproved = testImproved(expected, received);\n  const statsBaseline = testBaseline(expected, received);\n  writeRow('change', tenths * 10, statsImproved, statsBaseline);\n};\n\nconst getItems = (n, callback) => {\n  const items = [];\n\n  for (let i = 0; i !== n; i += 1) {\n    const item = callback(i);\n    if (typeof item === 'string') {\n      items.push(item);\n    }\n  }\n\n  return items.join('\\n');\n};\n\n// Simulate change of property name which is usually not same line.\n// Expected: 0 1 2 3 4 5 6 7 8 9 and so on\n// Received: 1 2 3 4 x0 5 6 7 8 9 and so on\nconst change2 = i => {\n  const j = i % 10;\n  return j === 4 ? `x${i - 4}` : j < 4 ? `${i + 1}` : `${i}`;\n};\n\nconst testLength = n => {\n  const all = getItems(n, i => `${i}`);\n\n  writeHeading3(n);\n\n  [2, 4, 8].forEach(tenth => {\n    testDeleteInsert(\n      tenth,\n      all,\n      getItems(n, i => i % 10 >= tenth && `${i}`),\n    );\n  });\n  testChange(\n    1,\n    all,\n    getItems(n, i => (i % 10 === 0 ? `x${i}` : `${i}`)),\n  );\n  testChange(2, all, getItems(n, change2));\n  testChange(\n    5,\n    all,\n    getItems(n, i => (i % 2 === 0 ? `x${i}` : `${i}`)),\n  );\n  testChange(\n    10,\n    all,\n    getItems(n, i => `x${i}`),\n  ); // simulate TDD\n};\n\nwriteHeading2();\n\ntestLength(20);\ntestLength(200);\ntestLength(2000);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}