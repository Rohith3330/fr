{"ast":null,"code":"/**\n * @fileoverview jUnit Reporter\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst xmlEscape = require(\"../xml-escape\");\n\nconst path = require(\"path\"); //------------------------------------------------------------------------------\n// Helper Functions\n//------------------------------------------------------------------------------\n\n/**\n * Returns the severity of warning or error\n * @param {Object} message message object to examine\n * @returns {string} severity level\n * @private\n */\n\n\nfunction getMessageType(message) {\n  if (message.fatal || message.severity === 2) {\n    return \"Error\";\n  }\n\n  return \"Warning\";\n}\n/**\n * Returns a full file path without extension\n * @param {string} filePath input file path\n * @returns {string} file path without extension\n * @private\n */\n\n\nfunction pathWithoutExt(filePath) {\n  return path.join(path.dirname(filePath), path.basename(filePath, path.extname(filePath)));\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nmodule.exports = function (results) {\n  let output = \"\";\n  output += \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\";\n  output += \"<testsuites>\\n\";\n  results.forEach(result => {\n    const messages = result.messages;\n    const classname = pathWithoutExt(result.filePath);\n\n    if (messages.length > 0) {\n      output += `<testsuite package=\"org.eslint\" time=\"0\" tests=\"${messages.length}\" errors=\"${messages.length}\" name=\"${result.filePath}\">\\n`;\n      messages.forEach(message => {\n        const type = message.fatal ? \"error\" : \"failure\";\n        output += `<testcase time=\"0\" name=\"org.eslint.${message.ruleId || \"unknown\"}\" classname=\"${classname}\">`;\n        output += `<${type} message=\"${xmlEscape(message.message || \"\")}\">`;\n        output += \"<![CDATA[\";\n        output += `line ${message.line || 0}, col `;\n        output += `${message.column || 0}, ${getMessageType(message)}`;\n        output += ` - ${xmlEscape(message.message || \"\")}`;\n        output += message.ruleId ? ` (${message.ruleId})` : \"\";\n        output += \"]]>\";\n        output += `</${type}>`;\n        output += \"</testcase>\\n\";\n      });\n      output += \"</testsuite>\\n\";\n    } else {\n      output += `<testsuite package=\"org.eslint\" time=\"0\" tests=\"1\" errors=\"0\" name=\"${result.filePath}\">\\n`;\n      output += `<testcase time=\"0\" name=\"${result.filePath}\" classname=\"${classname}\" />\\n`;\n      output += \"</testsuite>\\n\";\n    }\n  });\n  output += \"</testsuites>\\n\";\n  return output;\n};","map":{"version":3,"names":["xmlEscape","require","path","getMessageType","message","fatal","severity","pathWithoutExt","filePath","join","dirname","basename","extname","module","exports","results","output","forEach","result","messages","classname","length","type","ruleId","line","column"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/cli-engine/formatters/junit.js"],"sourcesContent":["/**\n * @fileoverview jUnit Reporter\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst xmlEscape = require(\"../xml-escape\");\nconst path = require(\"path\");\n\n//------------------------------------------------------------------------------\n// Helper Functions\n//------------------------------------------------------------------------------\n\n/**\n * Returns the severity of warning or error\n * @param {Object} message message object to examine\n * @returns {string} severity level\n * @private\n */\nfunction getMessageType(message) {\n    if (message.fatal || message.severity === 2) {\n        return \"Error\";\n    }\n    return \"Warning\";\n\n}\n\n/**\n * Returns a full file path without extension\n * @param {string} filePath input file path\n * @returns {string} file path without extension\n * @private\n */\nfunction pathWithoutExt(filePath) {\n    return path.join(path.dirname(filePath), path.basename(filePath, path.extname(filePath)));\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = function(results) {\n\n    let output = \"\";\n\n    output += \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\";\n    output += \"<testsuites>\\n\";\n\n    results.forEach(result => {\n\n        const messages = result.messages;\n        const classname = pathWithoutExt(result.filePath);\n\n        if (messages.length > 0) {\n            output += `<testsuite package=\"org.eslint\" time=\"0\" tests=\"${messages.length}\" errors=\"${messages.length}\" name=\"${result.filePath}\">\\n`;\n            messages.forEach(message => {\n                const type = message.fatal ? \"error\" : \"failure\";\n\n                output += `<testcase time=\"0\" name=\"org.eslint.${message.ruleId || \"unknown\"}\" classname=\"${classname}\">`;\n                output += `<${type} message=\"${xmlEscape(message.message || \"\")}\">`;\n                output += \"<![CDATA[\";\n                output += `line ${message.line || 0}, col `;\n                output += `${message.column || 0}, ${getMessageType(message)}`;\n                output += ` - ${xmlEscape(message.message || \"\")}`;\n                output += (message.ruleId ? ` (${message.ruleId})` : \"\");\n                output += \"]]>\";\n                output += `</${type}>`;\n                output += \"</testcase>\\n\";\n            });\n            output += \"</testsuite>\\n\";\n        } else {\n            output += `<testsuite package=\"org.eslint\" time=\"0\" tests=\"1\" errors=\"0\" name=\"${result.filePath}\">\\n`;\n            output += `<testcase time=\"0\" name=\"${result.filePath}\" classname=\"${classname}\" />\\n`;\n            output += \"</testsuite>\\n\";\n        }\n\n    });\n\n    output += \"</testsuites>\\n\";\n\n    return output;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,cAAT,CAAwBC,OAAxB,EAAiC;EAC7B,IAAIA,OAAO,CAACC,KAAR,IAAiBD,OAAO,CAACE,QAAR,KAAqB,CAA1C,EAA6C;IACzC,OAAO,OAAP;EACH;;EACD,OAAO,SAAP;AAEH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;EAC9B,OAAON,IAAI,CAACO,IAAL,CAAUP,IAAI,CAACQ,OAAL,CAAaF,QAAb,CAAV,EAAkCN,IAAI,CAACS,QAAL,CAAcH,QAAd,EAAwBN,IAAI,CAACU,OAAL,CAAaJ,QAAb,CAAxB,CAAlC,CAAP;AACH,C,CAED;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;EAE/B,IAAIC,MAAM,GAAG,EAAb;EAEAA,MAAM,IAAI,8CAAV;EACAA,MAAM,IAAI,gBAAV;EAEAD,OAAO,CAACE,OAAR,CAAgBC,MAAM,IAAI;IAEtB,MAAMC,QAAQ,GAAGD,MAAM,CAACC,QAAxB;IACA,MAAMC,SAAS,GAAGb,cAAc,CAACW,MAAM,CAACV,QAAR,CAAhC;;IAEA,IAAIW,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;MACrBL,MAAM,IAAK,mDAAkDG,QAAQ,CAACE,MAAO,aAAYF,QAAQ,CAACE,MAAO,WAAUH,MAAM,CAACV,QAAS,MAAnI;MACAW,QAAQ,CAACF,OAAT,CAAiBb,OAAO,IAAI;QACxB,MAAMkB,IAAI,GAAGlB,OAAO,CAACC,KAAR,GAAgB,OAAhB,GAA0B,SAAvC;QAEAW,MAAM,IAAK,uCAAsCZ,OAAO,CAACmB,MAAR,IAAkB,SAAU,gBAAeH,SAAU,IAAtG;QACAJ,MAAM,IAAK,IAAGM,IAAK,aAAYtB,SAAS,CAACI,OAAO,CAACA,OAAR,IAAmB,EAApB,CAAwB,IAAhE;QACAY,MAAM,IAAI,WAAV;QACAA,MAAM,IAAK,QAAOZ,OAAO,CAACoB,IAAR,IAAgB,CAAE,QAApC;QACAR,MAAM,IAAK,GAAEZ,OAAO,CAACqB,MAAR,IAAkB,CAAE,KAAItB,cAAc,CAACC,OAAD,CAAU,EAA7D;QACAY,MAAM,IAAK,MAAKhB,SAAS,CAACI,OAAO,CAACA,OAAR,IAAmB,EAApB,CAAwB,EAAjD;QACAY,MAAM,IAAKZ,OAAO,CAACmB,MAAR,GAAkB,KAAInB,OAAO,CAACmB,MAAO,GAArC,GAA0C,EAArD;QACAP,MAAM,IAAI,KAAV;QACAA,MAAM,IAAK,KAAIM,IAAK,GAApB;QACAN,MAAM,IAAI,eAAV;MACH,CAbD;MAcAA,MAAM,IAAI,gBAAV;IACH,CAjBD,MAiBO;MACHA,MAAM,IAAK,uEAAsEE,MAAM,CAACV,QAAS,MAAjG;MACAQ,MAAM,IAAK,4BAA2BE,MAAM,CAACV,QAAS,gBAAeY,SAAU,QAA/E;MACAJ,MAAM,IAAI,gBAAV;IACH;EAEJ,CA5BD;EA8BAA,MAAM,IAAI,iBAAV;EAEA,OAAOA,MAAP;AACH,CAxCD"},"metadata":{},"sourceType":"script"}