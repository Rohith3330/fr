{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\n\nvar rawMode = require('../node/Raw').mode;\n\nvar COMMA = TYPE.Comma;\nvar WHITESPACE = TYPE.WhiteSpace; // var( <ident> , <value>? )\n\nmodule.exports = function () {\n  var children = this.createList();\n  this.scanner.skipSC(); // NOTE: Don't check more than a first argument is an ident, rest checks are for lexer\n\n  children.push(this.Identifier());\n  this.scanner.skipSC();\n\n  if (this.scanner.tokenType === COMMA) {\n    children.push(this.Operator());\n    const startIndex = this.scanner.tokenIndex;\n    const value = this.parseCustomProperty ? this.Value(null) : this.Raw(this.scanner.tokenIndex, rawMode.exclamationMarkOrSemicolon, false);\n\n    if (value.type === 'Value' && value.children.isEmpty()) {\n      for (let offset = startIndex - this.scanner.tokenIndex; offset <= 0; offset++) {\n        if (this.scanner.lookupType(offset) === WHITESPACE) {\n          value.children.appendData({\n            type: 'WhiteSpace',\n            loc: null,\n            value: ' '\n          });\n          break;\n        }\n      }\n    }\n\n    children.push(value);\n  }\n\n  return children;\n};","map":{"version":3,"names":["TYPE","require","rawMode","mode","COMMA","Comma","WHITESPACE","WhiteSpace","module","exports","children","createList","scanner","skipSC","push","Identifier","tokenType","Operator","startIndex","tokenIndex","value","parseCustomProperty","Value","Raw","exclamationMarkOrSemicolon","type","isEmpty","offset","lookupType","appendData","loc"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-svgo/node_modules/css-tree/lib/syntax/function/var.js"],"sourcesContent":["var TYPE = require('../../tokenizer').TYPE;\nvar rawMode = require('../node/Raw').mode;\n\nvar COMMA = TYPE.Comma;\nvar WHITESPACE = TYPE.WhiteSpace;\n\n// var( <ident> , <value>? )\nmodule.exports = function() {\n    var children = this.createList();\n\n    this.scanner.skipSC();\n\n    // NOTE: Don't check more than a first argument is an ident, rest checks are for lexer\n    children.push(this.Identifier());\n\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType === COMMA) {\n        children.push(this.Operator());\n\n        const startIndex = this.scanner.tokenIndex;\n        const value = this.parseCustomProperty\n            ? this.Value(null)\n            : this.Raw(this.scanner.tokenIndex, rawMode.exclamationMarkOrSemicolon, false);\n\n        if (value.type === 'Value' && value.children.isEmpty()) {\n            for (let offset = startIndex - this.scanner.tokenIndex; offset <= 0; offset++) {\n                if (this.scanner.lookupType(offset) === WHITESPACE) {\n                    value.children.appendData({\n                        type: 'WhiteSpace',\n                        loc: null,\n                        value: ' '\n                    });\n                    break;\n                }\n            }\n        }\n\n        children.push(value);\n    }\n\n    return children;\n};\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,IAAtC;;AACA,IAAIE,OAAO,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBE,IAArC;;AAEA,IAAIC,KAAK,GAAGJ,IAAI,CAACK,KAAjB;AACA,IAAIC,UAAU,GAAGN,IAAI,CAACO,UAAtB,C,CAEA;;AACAC,MAAM,CAACC,OAAP,GAAiB,YAAW;EACxB,IAAIC,QAAQ,GAAG,KAAKC,UAAL,EAAf;EAEA,KAAKC,OAAL,CAAaC,MAAb,GAHwB,CAKxB;;EACAH,QAAQ,CAACI,IAAT,CAAc,KAAKC,UAAL,EAAd;EAEA,KAAKH,OAAL,CAAaC,MAAb;;EAEA,IAAI,KAAKD,OAAL,CAAaI,SAAb,KAA2BZ,KAA/B,EAAsC;IAClCM,QAAQ,CAACI,IAAT,CAAc,KAAKG,QAAL,EAAd;IAEA,MAAMC,UAAU,GAAG,KAAKN,OAAL,CAAaO,UAAhC;IACA,MAAMC,KAAK,GAAG,KAAKC,mBAAL,GACR,KAAKC,KAAL,CAAW,IAAX,CADQ,GAER,KAAKC,GAAL,CAAS,KAAKX,OAAL,CAAaO,UAAtB,EAAkCjB,OAAO,CAACsB,0BAA1C,EAAsE,KAAtE,CAFN;;IAIA,IAAIJ,KAAK,CAACK,IAAN,KAAe,OAAf,IAA0BL,KAAK,CAACV,QAAN,CAAegB,OAAf,EAA9B,EAAwD;MACpD,KAAK,IAAIC,MAAM,GAAGT,UAAU,GAAG,KAAKN,OAAL,CAAaO,UAA5C,EAAwDQ,MAAM,IAAI,CAAlE,EAAqEA,MAAM,EAA3E,EAA+E;QAC3E,IAAI,KAAKf,OAAL,CAAagB,UAAb,CAAwBD,MAAxB,MAAoCrB,UAAxC,EAAoD;UAChDc,KAAK,CAACV,QAAN,CAAemB,UAAf,CAA0B;YACtBJ,IAAI,EAAE,YADgB;YAEtBK,GAAG,EAAE,IAFiB;YAGtBV,KAAK,EAAE;UAHe,CAA1B;UAKA;QACH;MACJ;IACJ;;IAEDV,QAAQ,CAACI,IAAT,CAAcM,KAAd;EACH;;EAED,OAAOV,QAAP;AACH,CAnCD"},"metadata":{},"sourceType":"script"}