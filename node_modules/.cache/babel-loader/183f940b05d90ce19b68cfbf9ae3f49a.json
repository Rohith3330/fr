{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('../types').PathDataCommand} PathDataCommand\n */\n\n/**\n * Encode plain SVG data string into Data URI string.\n *\n * @type {(str: string, type?: 'base64' | 'enc' | 'unenc') => string}\n */\n\nexports.encodeSVGDatauri = (str, type) => {\n  var prefix = 'data:image/svg+xml';\n\n  if (!type || type === 'base64') {\n    // base64\n    prefix += ';base64,';\n    str = prefix + Buffer.from(str).toString('base64');\n  } else if (type === 'enc') {\n    // URI encoded\n    str = prefix + ',' + encodeURIComponent(str);\n  } else if (type === 'unenc') {\n    // unencoded\n    str = prefix + ',' + str;\n  }\n\n  return str;\n};\n/**\n * Decode SVG Data URI string into plain SVG string.\n *\n * @type {(str: string) => string}\n */\n\n\nexports.decodeSVGDatauri = str => {\n  var regexp = /data:image\\/svg\\+xml(;charset=[^;,]*)?(;base64)?,(.*)/;\n  var match = regexp.exec(str); // plain string\n\n  if (!match) return str;\n  var data = match[3];\n\n  if (match[2]) {\n    // base64\n    str = Buffer.from(data, 'base64').toString('utf8');\n  } else if (data.charAt(0) === '%') {\n    // URI encoded\n    str = decodeURIComponent(data);\n  } else if (data.charAt(0) === '<') {\n    // unencoded\n    str = data;\n  }\n\n  return str;\n};\n/**\n * @typedef {{\n *   noSpaceAfterFlags?: boolean,\n *   leadingZero?: boolean,\n *   negativeExtraSpace?: boolean\n * }} CleanupOutDataParams\n */\n\n/**\n * Convert a row of numbers to an optimized string view.\n *\n * @example\n * [0, -1, .5, .5] → \"0-1 .5.5\"\n *\n * @type {(data: Array<number>, params: CleanupOutDataParams, command?: PathDataCommand) => string}\n */\n\n\nexports.cleanupOutData = (data, params, command) => {\n  let str = '';\n  let delimiter;\n  /**\n   * @type {number}\n   */\n\n  let prev;\n  data.forEach((item, i) => {\n    // space delimiter by default\n    delimiter = ' '; // no extra space in front of first number\n\n    if (i == 0) delimiter = ''; // no extra space after 'arcto' command flags(large-arc and sweep flags)\n    // a20 60 45 0 1 30 20 → a20 60 45 0130 20\n\n    if (params.noSpaceAfterFlags && (command == 'A' || command == 'a')) {\n      var pos = i % 7;\n      if (pos == 4 || pos == 5) delimiter = '';\n    } // remove floating-point numbers leading zeros\n    // 0.5 → .5\n    // -0.5 → -.5\n\n\n    const itemStr = params.leadingZero ? removeLeadingZero(item) : item.toString(); // no extra space in front of negative number or\n    // in front of a floating number if a previous number is floating too\n\n    if (params.negativeExtraSpace && delimiter != '' && (item < 0 || itemStr.charAt(0) === '.' && prev % 1 !== 0)) {\n      delimiter = '';\n    } // save prev item value\n\n\n    prev = item;\n    str += delimiter + itemStr;\n  });\n  return str;\n};\n/**\n * Remove floating-point numbers leading zero.\n *\n * @example\n * 0.5 → .5\n *\n * @example\n * -0.5 → -.5\n *\n * @type {(num: number) => string}\n */\n\n\nconst removeLeadingZero = num => {\n  var strNum = num.toString();\n\n  if (0 < num && num < 1 && strNum.charAt(0) === '0') {\n    strNum = strNum.slice(1);\n  } else if (-1 < num && num < 0 && strNum.charAt(1) === '0') {\n    strNum = strNum.charAt(0) + strNum.slice(2);\n  }\n\n  return strNum;\n};\n\nexports.removeLeadingZero = removeLeadingZero;","map":{"version":3,"names":["exports","encodeSVGDatauri","str","type","prefix","Buffer","from","toString","encodeURIComponent","decodeSVGDatauri","regexp","match","exec","data","charAt","decodeURIComponent","cleanupOutData","params","command","delimiter","prev","forEach","item","i","noSpaceAfterFlags","pos","itemStr","leadingZero","removeLeadingZero","negativeExtraSpace","num","strNum","slice"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-svgo/node_modules/svgo/lib/svgo/tools.js"],"sourcesContent":["'use strict';\n\n/**\n * @typedef {import('../types').PathDataCommand} PathDataCommand\n */\n\n/**\n * Encode plain SVG data string into Data URI string.\n *\n * @type {(str: string, type?: 'base64' | 'enc' | 'unenc') => string}\n */\nexports.encodeSVGDatauri = (str, type) => {\n  var prefix = 'data:image/svg+xml';\n  if (!type || type === 'base64') {\n    // base64\n    prefix += ';base64,';\n    str = prefix + Buffer.from(str).toString('base64');\n  } else if (type === 'enc') {\n    // URI encoded\n    str = prefix + ',' + encodeURIComponent(str);\n  } else if (type === 'unenc') {\n    // unencoded\n    str = prefix + ',' + str;\n  }\n  return str;\n};\n\n/**\n * Decode SVG Data URI string into plain SVG string.\n *\n * @type {(str: string) => string}\n */\nexports.decodeSVGDatauri = (str) => {\n  var regexp = /data:image\\/svg\\+xml(;charset=[^;,]*)?(;base64)?,(.*)/;\n  var match = regexp.exec(str);\n\n  // plain string\n  if (!match) return str;\n\n  var data = match[3];\n\n  if (match[2]) {\n    // base64\n    str = Buffer.from(data, 'base64').toString('utf8');\n  } else if (data.charAt(0) === '%') {\n    // URI encoded\n    str = decodeURIComponent(data);\n  } else if (data.charAt(0) === '<') {\n    // unencoded\n    str = data;\n  }\n  return str;\n};\n\n/**\n * @typedef {{\n *   noSpaceAfterFlags?: boolean,\n *   leadingZero?: boolean,\n *   negativeExtraSpace?: boolean\n * }} CleanupOutDataParams\n */\n\n/**\n * Convert a row of numbers to an optimized string view.\n *\n * @example\n * [0, -1, .5, .5] → \"0-1 .5.5\"\n *\n * @type {(data: Array<number>, params: CleanupOutDataParams, command?: PathDataCommand) => string}\n */\nexports.cleanupOutData = (data, params, command) => {\n  let str = '';\n  let delimiter;\n  /**\n   * @type {number}\n   */\n  let prev;\n\n  data.forEach((item, i) => {\n    // space delimiter by default\n    delimiter = ' ';\n\n    // no extra space in front of first number\n    if (i == 0) delimiter = '';\n\n    // no extra space after 'arcto' command flags(large-arc and sweep flags)\n    // a20 60 45 0 1 30 20 → a20 60 45 0130 20\n    if (params.noSpaceAfterFlags && (command == 'A' || command == 'a')) {\n      var pos = i % 7;\n      if (pos == 4 || pos == 5) delimiter = '';\n    }\n\n    // remove floating-point numbers leading zeros\n    // 0.5 → .5\n    // -0.5 → -.5\n    const itemStr = params.leadingZero\n      ? removeLeadingZero(item)\n      : item.toString();\n\n    // no extra space in front of negative number or\n    // in front of a floating number if a previous number is floating too\n    if (\n      params.negativeExtraSpace &&\n      delimiter != '' &&\n      (item < 0 || (itemStr.charAt(0) === '.' && prev % 1 !== 0))\n    ) {\n      delimiter = '';\n    }\n    // save prev item value\n    prev = item;\n    str += delimiter + itemStr;\n  });\n  return str;\n};\n\n/**\n * Remove floating-point numbers leading zero.\n *\n * @example\n * 0.5 → .5\n *\n * @example\n * -0.5 → -.5\n *\n * @type {(num: number) => string}\n */\nconst removeLeadingZero = (num) => {\n  var strNum = num.toString();\n\n  if (0 < num && num < 1 && strNum.charAt(0) === '0') {\n    strNum = strNum.slice(1);\n  } else if (-1 < num && num < 0 && strNum.charAt(1) === '0') {\n    strNum = strNum.charAt(0) + strNum.slice(2);\n  }\n  return strNum;\n};\nexports.removeLeadingZero = removeLeadingZero;\n"],"mappings":"AAAA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACAA,OAAO,CAACC,gBAAR,GAA2B,CAACC,GAAD,EAAMC,IAAN,KAAe;EACxC,IAAIC,MAAM,GAAG,oBAAb;;EACA,IAAI,CAACD,IAAD,IAASA,IAAI,KAAK,QAAtB,EAAgC;IAC9B;IACAC,MAAM,IAAI,UAAV;IACAF,GAAG,GAAGE,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,QAAjB,CAA0B,QAA1B,CAAf;EACD,CAJD,MAIO,IAAIJ,IAAI,KAAK,KAAb,EAAoB;IACzB;IACAD,GAAG,GAAGE,MAAM,GAAG,GAAT,GAAeI,kBAAkB,CAACN,GAAD,CAAvC;EACD,CAHM,MAGA,IAAIC,IAAI,KAAK,OAAb,EAAsB;IAC3B;IACAD,GAAG,GAAGE,MAAM,GAAG,GAAT,GAAeF,GAArB;EACD;;EACD,OAAOA,GAAP;AACD,CAdD;AAgBA;AACA;AACA;AACA;AACA;;;AACAF,OAAO,CAACS,gBAAR,GAA4BP,GAAD,IAAS;EAClC,IAAIQ,MAAM,GAAG,uDAAb;EACA,IAAIC,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAYV,GAAZ,CAAZ,CAFkC,CAIlC;;EACA,IAAI,CAACS,KAAL,EAAY,OAAOT,GAAP;EAEZ,IAAIW,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAhB;;EAEA,IAAIA,KAAK,CAAC,CAAD,CAAT,EAAc;IACZ;IACAT,GAAG,GAAGG,MAAM,CAACC,IAAP,CAAYO,IAAZ,EAAkB,QAAlB,EAA4BN,QAA5B,CAAqC,MAArC,CAAN;EACD,CAHD,MAGO,IAAIM,IAAI,CAACC,MAAL,CAAY,CAAZ,MAAmB,GAAvB,EAA4B;IACjC;IACAZ,GAAG,GAAGa,kBAAkB,CAACF,IAAD,CAAxB;EACD,CAHM,MAGA,IAAIA,IAAI,CAACC,MAAL,CAAY,CAAZ,MAAmB,GAAvB,EAA4B;IACjC;IACAZ,GAAG,GAAGW,IAAN;EACD;;EACD,OAAOX,GAAP;AACD,CApBD;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,OAAO,CAACgB,cAAR,GAAyB,CAACH,IAAD,EAAOI,MAAP,EAAeC,OAAf,KAA2B;EAClD,IAAIhB,GAAG,GAAG,EAAV;EACA,IAAIiB,SAAJ;EACA;AACF;AACA;;EACE,IAAIC,IAAJ;EAEAP,IAAI,CAACQ,OAAL,CAAa,CAACC,IAAD,EAAOC,CAAP,KAAa;IACxB;IACAJ,SAAS,GAAG,GAAZ,CAFwB,CAIxB;;IACA,IAAII,CAAC,IAAI,CAAT,EAAYJ,SAAS,GAAG,EAAZ,CALY,CAOxB;IACA;;IACA,IAAIF,MAAM,CAACO,iBAAP,KAA6BN,OAAO,IAAI,GAAX,IAAkBA,OAAO,IAAI,GAA1D,CAAJ,EAAoE;MAClE,IAAIO,GAAG,GAAGF,CAAC,GAAG,CAAd;MACA,IAAIE,GAAG,IAAI,CAAP,IAAYA,GAAG,IAAI,CAAvB,EAA0BN,SAAS,GAAG,EAAZ;IAC3B,CAZuB,CAcxB;IACA;IACA;;;IACA,MAAMO,OAAO,GAAGT,MAAM,CAACU,WAAP,GACZC,iBAAiB,CAACN,IAAD,CADL,GAEZA,IAAI,CAACf,QAAL,EAFJ,CAjBwB,CAqBxB;IACA;;IACA,IACEU,MAAM,CAACY,kBAAP,IACAV,SAAS,IAAI,EADb,KAECG,IAAI,GAAG,CAAP,IAAaI,OAAO,CAACZ,MAAR,CAAe,CAAf,MAAsB,GAAtB,IAA6BM,IAAI,GAAG,CAAP,KAAa,CAFxD,CADF,EAIE;MACAD,SAAS,GAAG,EAAZ;IACD,CA7BuB,CA8BxB;;;IACAC,IAAI,GAAGE,IAAP;IACApB,GAAG,IAAIiB,SAAS,GAAGO,OAAnB;EACD,CAjCD;EAkCA,OAAOxB,GAAP;AACD,CA3CD;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM0B,iBAAiB,GAAIE,GAAD,IAAS;EACjC,IAAIC,MAAM,GAAGD,GAAG,CAACvB,QAAJ,EAAb;;EAEA,IAAI,IAAIuB,GAAJ,IAAWA,GAAG,GAAG,CAAjB,IAAsBC,MAAM,CAACjB,MAAP,CAAc,CAAd,MAAqB,GAA/C,EAAoD;IAClDiB,MAAM,GAAGA,MAAM,CAACC,KAAP,CAAa,CAAb,CAAT;EACD,CAFD,MAEO,IAAI,CAAC,CAAD,GAAKF,GAAL,IAAYA,GAAG,GAAG,CAAlB,IAAuBC,MAAM,CAACjB,MAAP,CAAc,CAAd,MAAqB,GAAhD,EAAqD;IAC1DiB,MAAM,GAAGA,MAAM,CAACjB,MAAP,CAAc,CAAd,IAAmBiB,MAAM,CAACC,KAAP,CAAa,CAAb,CAA5B;EACD;;EACD,OAAOD,MAAP;AACD,CATD;;AAUA/B,OAAO,CAAC4B,iBAAR,GAA4BA,iBAA5B"},"metadata":{},"sourceType":"script"}