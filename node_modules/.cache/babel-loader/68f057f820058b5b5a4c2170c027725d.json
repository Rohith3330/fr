{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst testCaseNames = new Set([...Object.keys(_utils.TestCaseName), 'it.only', 'it.concurrent.only', 'it.skip', 'it.concurrent.skip', 'test.only', 'test.concurrent.only', 'test.skip', 'test.concurrent.skip', 'fit.concurrent']);\n\nconst isTestFunctionExpression = node => node.parent !== undefined && node.parent.type === _experimentalUtils.AST_NODE_TYPES.CallExpression && testCaseNames.has((0, _utils.getNodeName)(node.parent.callee));\n\nconst conditionName = {\n  [_experimentalUtils.AST_NODE_TYPES.ConditionalExpression]: 'conditional',\n  [_experimentalUtils.AST_NODE_TYPES.SwitchStatement]: 'switch',\n  [_experimentalUtils.AST_NODE_TYPES.IfStatement]: 'if'\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      description: 'Disallow conditional logic',\n      category: 'Best Practices',\n      recommended: false\n    },\n    messages: {\n      conditionalInTest: 'Test should not contain {{ condition }} statements.'\n    },\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    const stack = [];\n\n    function validate(node) {\n      const lastElementInStack = stack[stack.length - 1];\n\n      if (stack.length === 0 || !lastElementInStack) {\n        return;\n      }\n\n      context.report({\n        data: {\n          condition: conditionName[node.type]\n        },\n        messageId: 'conditionalInTest',\n        node\n      });\n    }\n\n    return {\n      CallExpression(node) {\n        if ((0, _utils.isTestCaseCall)(node)) {\n          stack.push(true);\n\n          if ((0, _utils.getNodeName)(node).endsWith('each')) {\n            stack.push(true);\n          }\n        }\n      },\n\n      FunctionExpression(node) {\n        stack.push(isTestFunctionExpression(node));\n      },\n\n      FunctionDeclaration(node) {\n        const declaredVariables = context.getDeclaredVariables(node);\n        const testCallExpressions = (0, _utils.getTestCallExpressionsFromDeclaredVariables)(declaredVariables);\n        stack.push(testCallExpressions.length > 0);\n      },\n\n      ArrowFunctionExpression(node) {\n        stack.push(isTestFunctionExpression(node));\n      },\n\n      IfStatement: validate,\n      SwitchStatement: validate,\n      ConditionalExpression: validate,\n\n      'CallExpression:exit'() {\n        stack.pop();\n      },\n\n      'FunctionExpression:exit'() {\n        stack.pop();\n      },\n\n      'FunctionDeclaration:exit'() {\n        stack.pop();\n      },\n\n      'ArrowFunctionExpression:exit'() {\n        stack.pop();\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","testCaseNames","Set","keys","TestCaseName","isTestFunctionExpression","node","parent","undefined","type","AST_NODE_TYPES","CallExpression","has","getNodeName","callee","conditionName","ConditionalExpression","SwitchStatement","IfStatement","_default","createRule","name","__filename","meta","docs","description","category","recommended","messages","conditionalInTest","schema","defaultOptions","create","context","stack","validate","lastElementInStack","length","report","data","condition","messageId","isTestCaseCall","push","endsWith","FunctionExpression","FunctionDeclaration","declaredVariables","getDeclaredVariables","testCallExpressions","getTestCallExpressionsFromDeclaredVariables","ArrowFunctionExpression","pop"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-if.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst testCaseNames = new Set([...Object.keys(_utils.TestCaseName), 'it.only', 'it.concurrent.only', 'it.skip', 'it.concurrent.skip', 'test.only', 'test.concurrent.only', 'test.skip', 'test.concurrent.skip', 'fit.concurrent']);\n\nconst isTestFunctionExpression = node => node.parent !== undefined && node.parent.type === _experimentalUtils.AST_NODE_TYPES.CallExpression && testCaseNames.has((0, _utils.getNodeName)(node.parent.callee));\n\nconst conditionName = {\n  [_experimentalUtils.AST_NODE_TYPES.ConditionalExpression]: 'conditional',\n  [_experimentalUtils.AST_NODE_TYPES.SwitchStatement]: 'switch',\n  [_experimentalUtils.AST_NODE_TYPES.IfStatement]: 'if'\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      description: 'Disallow conditional logic',\n      category: 'Best Practices',\n      recommended: false\n    },\n    messages: {\n      conditionalInTest: 'Test should not contain {{ condition }} statements.'\n    },\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    const stack = [];\n\n    function validate(node) {\n      const lastElementInStack = stack[stack.length - 1];\n\n      if (stack.length === 0 || !lastElementInStack) {\n        return;\n      }\n\n      context.report({\n        data: {\n          condition: conditionName[node.type]\n        },\n        messageId: 'conditionalInTest',\n        node\n      });\n    }\n\n    return {\n      CallExpression(node) {\n        if ((0, _utils.isTestCaseCall)(node)) {\n          stack.push(true);\n\n          if ((0, _utils.getNodeName)(node).endsWith('each')) {\n            stack.push(true);\n          }\n        }\n      },\n\n      FunctionExpression(node) {\n        stack.push(isTestFunctionExpression(node));\n      },\n\n      FunctionDeclaration(node) {\n        const declaredVariables = context.getDeclaredVariables(node);\n        const testCallExpressions = (0, _utils.getTestCallExpressionsFromDeclaredVariables)(declaredVariables);\n        stack.push(testCallExpressions.length > 0);\n      },\n\n      ArrowFunctionExpression(node) {\n        stack.push(isTestFunctionExpression(node));\n      },\n\n      IfStatement: validate,\n      SwitchStatement: validate,\n      ConditionalExpression: validate,\n\n      'CallExpression:exit'() {\n        stack.pop();\n      },\n\n      'FunctionExpression:exit'() {\n        stack.pop();\n      },\n\n      'FunctionDeclaration:exit'() {\n        stack.pop();\n      },\n\n      'ArrowFunctionExpression:exit'() {\n        stack.pop();\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,uCAAD,CAAhC;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,MAAME,aAAa,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAGT,MAAM,CAACU,IAAP,CAAYH,MAAM,CAACI,YAAnB,CAAJ,EAAsC,SAAtC,EAAiD,oBAAjD,EAAuE,SAAvE,EAAkF,oBAAlF,EAAwG,WAAxG,EAAqH,sBAArH,EAA6I,WAA7I,EAA0J,sBAA1J,EAAkL,gBAAlL,CAAR,CAAtB;;AAEA,MAAMC,wBAAwB,GAAGC,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgBC,SAAhB,IAA6BF,IAAI,CAACC,MAAL,CAAYE,IAAZ,KAAqBX,kBAAkB,CAACY,cAAnB,CAAkCC,cAApF,IAAsGV,aAAa,CAACW,GAAd,CAAkB,CAAC,GAAGZ,MAAM,CAACa,WAAX,EAAwBP,IAAI,CAACC,MAAL,CAAYO,MAApC,CAAlB,CAA/I;;AAEA,MAAMC,aAAa,GAAG;EACpB,CAACjB,kBAAkB,CAACY,cAAnB,CAAkCM,qBAAnC,GAA2D,aADvC;EAEpB,CAAClB,kBAAkB,CAACY,cAAnB,CAAkCO,eAAnC,GAAqD,QAFjC;EAGpB,CAACnB,kBAAkB,CAACY,cAAnB,CAAkCQ,WAAnC,GAAiD;AAH7B,CAAtB;;AAMA,IAAIC,QAAQ,GAAG,CAAC,GAAGnB,MAAM,CAACoB,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,WAAW,EAAE,4BADT;MAEJC,QAAQ,EAAE,gBAFN;MAGJC,WAAW,EAAE;IAHT,CADF;IAMJC,QAAQ,EAAE;MACRC,iBAAiB,EAAE;IADX,CANN;IASJC,MAAM,EAAE,EATJ;IAUJrB,IAAI,EAAE;EAVF,CAF8B;EAcpCsB,cAAc,EAAE,EAdoB;;EAgBpCC,MAAM,CAACC,OAAD,EAAU;IACd,MAAMC,KAAK,GAAG,EAAd;;IAEA,SAASC,QAAT,CAAkB7B,IAAlB,EAAwB;MACtB,MAAM8B,kBAAkB,GAAGF,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAhC;;MAEA,IAAIH,KAAK,CAACG,MAAN,KAAiB,CAAjB,IAAsB,CAACD,kBAA3B,EAA+C;QAC7C;MACD;;MAEDH,OAAO,CAACK,MAAR,CAAe;QACbC,IAAI,EAAE;UACJC,SAAS,EAAEzB,aAAa,CAACT,IAAI,CAACG,IAAN;QADpB,CADO;QAIbgC,SAAS,EAAE,mBAJE;QAKbnC;MALa,CAAf;IAOD;;IAED,OAAO;MACLK,cAAc,CAACL,IAAD,EAAO;QACnB,IAAI,CAAC,GAAGN,MAAM,CAAC0C,cAAX,EAA2BpC,IAA3B,CAAJ,EAAsC;UACpC4B,KAAK,CAACS,IAAN,CAAW,IAAX;;UAEA,IAAI,CAAC,GAAG3C,MAAM,CAACa,WAAX,EAAwBP,IAAxB,EAA8BsC,QAA9B,CAAuC,MAAvC,CAAJ,EAAoD;YAClDV,KAAK,CAACS,IAAN,CAAW,IAAX;UACD;QACF;MACF,CATI;;MAWLE,kBAAkB,CAACvC,IAAD,EAAO;QACvB4B,KAAK,CAACS,IAAN,CAAWtC,wBAAwB,CAACC,IAAD,CAAnC;MACD,CAbI;;MAeLwC,mBAAmB,CAACxC,IAAD,EAAO;QACxB,MAAMyC,iBAAiB,GAAGd,OAAO,CAACe,oBAAR,CAA6B1C,IAA7B,CAA1B;QACA,MAAM2C,mBAAmB,GAAG,CAAC,GAAGjD,MAAM,CAACkD,2CAAX,EAAwDH,iBAAxD,CAA5B;QACAb,KAAK,CAACS,IAAN,CAAWM,mBAAmB,CAACZ,MAApB,GAA6B,CAAxC;MACD,CAnBI;;MAqBLc,uBAAuB,CAAC7C,IAAD,EAAO;QAC5B4B,KAAK,CAACS,IAAN,CAAWtC,wBAAwB,CAACC,IAAD,CAAnC;MACD,CAvBI;;MAyBLY,WAAW,EAAEiB,QAzBR;MA0BLlB,eAAe,EAAEkB,QA1BZ;MA2BLnB,qBAAqB,EAAEmB,QA3BlB;;MA6BL,wBAAwB;QACtBD,KAAK,CAACkB,GAAN;MACD,CA/BI;;MAiCL,4BAA4B;QAC1BlB,KAAK,CAACkB,GAAN;MACD,CAnCI;;MAqCL,6BAA6B;QAC3BlB,KAAK,CAACkB,GAAN;MACD,CAvCI;;MAyCL,iCAAiC;QAC/BlB,KAAK,CAACkB,GAAN;MACD;;IA3CI,CAAP;EA8CD;;AAjFmC,CAAvB,CAAf;;AAqFAzD,OAAO,CAACE,OAAR,GAAkBsB,QAAlB"},"metadata":{},"sourceType":"script"}