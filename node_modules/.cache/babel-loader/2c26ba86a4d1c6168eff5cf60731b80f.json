{"ast":null,"code":"var assert = require('assert');\n\nvar net = require('net');\n\nvar http = require('http');\n\nvar streamPair = require('stream-pair');\n\nvar thing = require('handle-thing');\n\nvar httpDeceiver = require('../');\n\ndescribe('HTTP Deceiver', function () {\n  var handle;\n  var pair;\n  var socket;\n  var deceiver;\n  beforeEach(function () {\n    pair = streamPair.create();\n    handle = thing.create(pair.other);\n    socket = new net.Socket({\n      handle: handle\n    }); // For v0.8\n\n    socket.readable = true;\n    socket.writable = true;\n    deceiver = httpDeceiver.create(socket);\n  });\n  it('should emit request', function (done) {\n    var server = http.createServer();\n    server.emit('connection', socket);\n    server.on('request', function (req, res) {\n      assert.equal(req.method, 'PUT');\n      assert.equal(req.url, '/hello');\n      assert.deepEqual(req.headers, {\n        a: 'b'\n      });\n      done();\n    });\n    deceiver.emitRequest({\n      method: 'PUT',\n      path: '/hello',\n      headers: {\n        a: 'b'\n      }\n    });\n  });\n  it('should emit response', function (done) {\n    var agent = new http.Agent();\n\n    agent.createConnection = function createConnection() {\n      return socket;\n    };\n\n    var client = http.request({\n      method: 'POST',\n      path: '/ok',\n      agent: agent\n    }, function (res) {\n      assert.equal(res.statusCode, 421);\n      assert.deepEqual(res.headers, {\n        a: 'b'\n      });\n      done();\n    });\n    process.nextTick(function () {\n      deceiver.emitResponse({\n        status: 421,\n        reason: 'F',\n        headers: {\n          a: 'b'\n        }\n      });\n    });\n  });\n  it('should override .execute and .finish', function (done) {\n    var server = http.createServer();\n    server.emit('connection', socket);\n    server.on('request', function (req, res) {\n      assert.equal(req.method, 'PUT');\n      assert.equal(req.url, '/hello');\n      assert.deepEqual(req.headers, {\n        a: 'b'\n      });\n      var actual = '';\n      req.on('data', function (chunk) {\n        actual += chunk;\n      });\n      req.once('end', function () {\n        assert.equal(actual, 'hello world');\n        done();\n      });\n    });\n    deceiver.emitRequest({\n      method: 'PUT',\n      path: '/hello',\n      headers: {\n        a: 'b'\n      }\n    });\n    pair.write('hello');\n    pair.end(' world');\n  });\n  it('should work with reusing parser', function (done) {\n    var server = http.createServer();\n    server.emit('connection', socket);\n\n    function secondRequest() {\n      pair = streamPair.create();\n      handle = thing.create(pair.other);\n      socket = new net.Socket({\n        handle: handle\n      }); // For v0.8\n\n      socket.readable = true;\n      socket.writable = true;\n      server.emit('connection', socket);\n      pair.end('PUT /second HTTP/1.1\\r\\nContent-Length:11\\r\\n\\r\\nhello world');\n    }\n\n    server.on('request', function (req, res) {\n      var actual = '';\n      req.on('data', function (chunk) {\n        actual += chunk;\n      });\n      req.once('end', function () {\n        assert.equal(actual, 'hello world');\n        if (req.url === '/first') secondRequest();else done();\n      });\n    });\n    deceiver.emitRequest({\n      method: 'PUT',\n      path: '/first',\n      headers: {\n        a: 'b'\n      }\n    });\n    pair.write('hello');\n    pair.end(' world');\n  });\n  it('should emit CONNECT request', function (done) {\n    var server = http.createServer();\n    server.emit('connection', socket);\n    server.on('connect', function (req, socket, bodyHead) {\n      assert.equal(req.method, 'CONNECT');\n      assert.equal(req.url, '/hello');\n      done();\n    });\n    deceiver.emitRequest({\n      method: 'CONNECT',\n      path: '/hello',\n      headers: {}\n    });\n  });\n  it('should emit Upgrade request', function (done) {\n    var server = http.createServer();\n    server.emit('connection', socket);\n    server.on('upgrade', function (req, socket, bodyHead) {\n      assert.equal(req.method, 'POST');\n      assert.equal(req.url, '/hello');\n      socket.on('data', function (chunk) {\n        assert.equal(chunk + '', 'hm');\n        done();\n      });\n    });\n    deceiver.emitRequest({\n      method: 'POST',\n      path: '/hello',\n      headers: {\n        'upgrade': 'websocket'\n      }\n    });\n    pair.write('hm');\n  });\n  it('should emit Upgrade response', function (done) {\n    var agent = new http.Agent();\n\n    agent.createConnection = function createConnection() {\n      return socket;\n    };\n\n    var client = http.request({\n      method: 'POST',\n      path: '/ok',\n      headers: {\n        connection: 'upgrade',\n        upgrade: 'websocket'\n      },\n      agent: agent\n    }, function (res) {\n      assert(false);\n    });\n    client.on('upgrade', function (res, socket) {\n      assert.equal(res.statusCode, 421);\n      done();\n    });\n    process.nextTick(function () {\n      deceiver.emitResponse({\n        status: 421,\n        reason: 'F',\n        headers: {\n          upgrade: 'websocket'\n        }\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","net","http","streamPair","thing","httpDeceiver","describe","handle","pair","socket","deceiver","beforeEach","create","other","Socket","readable","writable","it","done","server","createServer","emit","on","req","res","equal","method","url","deepEqual","headers","a","emitRequest","path","agent","Agent","createConnection","client","request","statusCode","process","nextTick","emitResponse","status","reason","actual","chunk","once","write","end","secondRequest","bodyHead","connection","upgrade"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/http-deceiver/test/api-test.js"],"sourcesContent":["var assert = require('assert');\nvar net = require('net');\nvar http = require('http');\nvar streamPair = require('stream-pair');\nvar thing = require('handle-thing');\n\nvar httpDeceiver = require('../');\n\ndescribe('HTTP Deceiver', function() {\n  var handle;\n  var pair;\n  var socket;\n  var deceiver;\n\n  beforeEach(function() {\n    pair = streamPair.create();\n    handle = thing.create(pair.other);\n    socket = new net.Socket({ handle: handle });\n\n    // For v0.8\n    socket.readable = true;\n    socket.writable = true;\n\n    deceiver = httpDeceiver.create(socket);\n  });\n\n  it('should emit request', function(done) {\n    var server = http.createServer();\n    server.emit('connection', socket);\n\n    server.on('request', function(req, res) {\n      assert.equal(req.method, 'PUT');\n      assert.equal(req.url, '/hello');\n      assert.deepEqual(req.headers, { a: 'b' });\n\n      done();\n    });\n\n    deceiver.emitRequest({\n      method: 'PUT',\n      path: '/hello',\n      headers: {\n        a: 'b'\n      }\n    });\n  });\n\n  it('should emit response', function(done) {\n    var agent = new http.Agent();\n    agent.createConnection = function createConnection() {\n      return socket;\n    };\n    var client = http.request({\n      method: 'POST',\n      path: '/ok',\n      agent: agent\n    }, function(res) {\n      assert.equal(res.statusCode, 421);\n      assert.deepEqual(res.headers, { a: 'b' });\n\n      done();\n    });\n\n    process.nextTick(function() {\n      deceiver.emitResponse({\n        status: 421,\n        reason: 'F',\n        headers: {\n          a: 'b'\n        }\n      });\n    });\n  });\n\n  it('should override .execute and .finish', function(done) {\n    var server = http.createServer();\n    server.emit('connection', socket);\n\n    server.on('request', function(req, res) {\n      assert.equal(req.method, 'PUT');\n      assert.equal(req.url, '/hello');\n      assert.deepEqual(req.headers, { a: 'b' });\n\n      var actual = '';\n      req.on('data', function(chunk) {\n        actual += chunk;\n      });\n      req.once('end', function() {\n        assert.equal(actual, 'hello world');\n        done();\n      });\n    });\n\n    deceiver.emitRequest({\n      method: 'PUT',\n      path: '/hello',\n      headers: {\n        a: 'b'\n      }\n    });\n\n    pair.write('hello');\n    pair.end(' world');\n  });\n\n  it('should work with reusing parser', function(done) {\n    var server = http.createServer();\n    server.emit('connection', socket);\n\n    function secondRequest() {\n      pair = streamPair.create();\n      handle = thing.create(pair.other);\n      socket = new net.Socket({ handle: handle });\n\n      // For v0.8\n      socket.readable = true;\n      socket.writable = true;\n\n      server.emit('connection', socket);\n\n      pair.end('PUT /second HTTP/1.1\\r\\nContent-Length:11\\r\\n\\r\\nhello world');\n    }\n\n    server.on('request', function(req, res) {\n      var actual = '';\n      req.on('data', function(chunk) {\n        actual += chunk;\n      });\n      req.once('end', function() {\n        assert.equal(actual, 'hello world');\n\n        if (req.url === '/first')\n          secondRequest();\n        else\n          done();\n      });\n    });\n\n    deceiver.emitRequest({\n      method: 'PUT',\n      path: '/first',\n      headers: {\n        a: 'b'\n      }\n    });\n\n    pair.write('hello');\n    pair.end(' world');\n  });\n\n  it('should emit CONNECT request', function(done) {\n    var server = http.createServer();\n    server.emit('connection', socket);\n\n    server.on('connect', function(req, socket, bodyHead) {\n      assert.equal(req.method, 'CONNECT');\n      assert.equal(req.url, '/hello');\n\n      done();\n    });\n\n    deceiver.emitRequest({\n      method: 'CONNECT',\n      path: '/hello',\n      headers: {\n      }\n    });\n  });\n\n  it('should emit Upgrade request', function(done) {\n    var server = http.createServer();\n    server.emit('connection', socket);\n\n    server.on('upgrade', function(req, socket, bodyHead) {\n      assert.equal(req.method, 'POST');\n      assert.equal(req.url, '/hello');\n\n      socket.on('data', function(chunk) {\n        assert.equal(chunk + '', 'hm');\n        done();\n      });\n    });\n\n    deceiver.emitRequest({\n      method: 'POST',\n      path: '/hello',\n      headers: {\n        'upgrade': 'websocket'\n      }\n    });\n\n    pair.write('hm');\n  });\n\n  it('should emit Upgrade response', function(done) {\n    var agent = new http.Agent();\n    agent.createConnection = function createConnection() {\n      return socket;\n    };\n    var client = http.request({\n      method: 'POST',\n      path: '/ok',\n      headers: {\n        connection: 'upgrade',\n        upgrade: 'websocket'\n      },\n      agent: agent\n    }, function(res) {\n      assert(false);\n    });\n    client.on('upgrade', function(res, socket) {\n      assert.equal(res.statusCode, 421);\n      done();\n    });\n\n    process.nextTick(function() {\n      deceiver.emitResponse({\n        status: 421,\n        reason: 'F',\n        headers: {\n          upgrade: 'websocket'\n        }\n      });\n    });\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}