{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isVariableDeclarator = exports.isTypeAssertion = exports.isTSFunctionType = exports.isTSConstructorType = exports.isSetter = exports.isOptionalCallExpression = exports.isOptionalChainPunctuator = exports.isNotOptionalChainPunctuator = exports.isNotNonNullAssertionPunctuator = exports.isNonNullAssertionPunctuator = exports.isLogicalOrOperator = exports.isLoop = exports.isIdentifier = exports.isFunctionType = exports.isFunctionOrFunctionType = exports.isFunction = exports.isClassOrTypeElement = exports.isConstructor = exports.isAwaitKeyword = exports.isAwaitExpression = void 0;\n\nconst ts_estree_1 = require(\"../ts-estree\");\n\nconst helpers_1 = require(\"./helpers\");\n\nconst isOptionalChainPunctuator = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Punctuator, {\n  value: '?.'\n});\nexports.isOptionalChainPunctuator = isOptionalChainPunctuator;\nconst isNotOptionalChainPunctuator = (0, helpers_1.isNotTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Punctuator, {\n  value: '?.'\n});\nexports.isNotOptionalChainPunctuator = isNotOptionalChainPunctuator;\nconst isNonNullAssertionPunctuator = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Punctuator, {\n  value: '!'\n});\nexports.isNonNullAssertionPunctuator = isNonNullAssertionPunctuator;\nconst isNotNonNullAssertionPunctuator = (0, helpers_1.isNotTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Punctuator, {\n  value: '!'\n});\nexports.isNotNonNullAssertionPunctuator = isNotNonNullAssertionPunctuator;\n/**\n * Returns true if and only if the node represents: foo?.() or foo.bar?.()\n */\n\nconst isOptionalCallExpression = (0, helpers_1.isNodeOfTypeWithConditions)(ts_estree_1.AST_NODE_TYPES.CallExpression, // this flag means the call expression itself is option\n// i.e. it is foo.bar?.() and not foo?.bar()\n{\n  optional: true\n});\nexports.isOptionalCallExpression = isOptionalCallExpression;\n/**\n * Returns true if and only if the node represents logical OR\n */\n\nconst isLogicalOrOperator = (0, helpers_1.isNodeOfTypeWithConditions)(ts_estree_1.AST_NODE_TYPES.LogicalExpression, {\n  operator: '||'\n});\nexports.isLogicalOrOperator = isLogicalOrOperator;\n/**\n * Checks if a node is a type assertion:\n * ```\n * x as foo\n * <foo>x\n * ```\n */\n\nconst isTypeAssertion = (0, helpers_1.isNodeOfTypes)([ts_estree_1.AST_NODE_TYPES.TSAsExpression, ts_estree_1.AST_NODE_TYPES.TSTypeAssertion]);\nexports.isTypeAssertion = isTypeAssertion;\nconst isVariableDeclarator = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.VariableDeclarator);\nexports.isVariableDeclarator = isVariableDeclarator;\nconst functionTypes = [ts_estree_1.AST_NODE_TYPES.ArrowFunctionExpression, ts_estree_1.AST_NODE_TYPES.FunctionDeclaration, ts_estree_1.AST_NODE_TYPES.FunctionExpression];\nconst isFunction = (0, helpers_1.isNodeOfTypes)(functionTypes);\nexports.isFunction = isFunction;\nconst functionTypeTypes = [ts_estree_1.AST_NODE_TYPES.TSCallSignatureDeclaration, ts_estree_1.AST_NODE_TYPES.TSConstructorType, ts_estree_1.AST_NODE_TYPES.TSConstructSignatureDeclaration, ts_estree_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, ts_estree_1.AST_NODE_TYPES.TSFunctionType, ts_estree_1.AST_NODE_TYPES.TSMethodSignature];\nconst isFunctionType = (0, helpers_1.isNodeOfTypes)(functionTypeTypes);\nexports.isFunctionType = isFunctionType;\nconst isFunctionOrFunctionType = (0, helpers_1.isNodeOfTypes)([...functionTypes, ...functionTypeTypes]);\nexports.isFunctionOrFunctionType = isFunctionOrFunctionType;\nconst isTSFunctionType = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.TSFunctionType);\nexports.isTSFunctionType = isTSFunctionType;\nconst isTSConstructorType = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.TSConstructorType);\nexports.isTSConstructorType = isTSConstructorType;\nconst isClassOrTypeElement = (0, helpers_1.isNodeOfTypes)([// ClassElement\nts_estree_1.AST_NODE_TYPES.PropertyDefinition, ts_estree_1.AST_NODE_TYPES.FunctionExpression, ts_estree_1.AST_NODE_TYPES.MethodDefinition, ts_estree_1.AST_NODE_TYPES.TSAbstractPropertyDefinition, ts_estree_1.AST_NODE_TYPES.TSAbstractMethodDefinition, ts_estree_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, ts_estree_1.AST_NODE_TYPES.TSIndexSignature, // TypeElement\nts_estree_1.AST_NODE_TYPES.TSCallSignatureDeclaration, ts_estree_1.AST_NODE_TYPES.TSConstructSignatureDeclaration, // AST_NODE_TYPES.TSIndexSignature,\nts_estree_1.AST_NODE_TYPES.TSMethodSignature, ts_estree_1.AST_NODE_TYPES.TSPropertySignature]);\nexports.isClassOrTypeElement = isClassOrTypeElement;\n/**\n * Checks if a node is a constructor method.\n */\n\nconst isConstructor = (0, helpers_1.isNodeOfTypeWithConditions)(ts_estree_1.AST_NODE_TYPES.MethodDefinition, {\n  kind: 'constructor'\n});\nexports.isConstructor = isConstructor;\n/**\n * Checks if a node is a setter method.\n */\n\nfunction isSetter(node) {\n  return !!node && (node.type === ts_estree_1.AST_NODE_TYPES.MethodDefinition || node.type === ts_estree_1.AST_NODE_TYPES.Property) && node.kind === 'set';\n}\n\nexports.isSetter = isSetter;\nconst isIdentifier = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.Identifier);\nexports.isIdentifier = isIdentifier;\n/**\n * Checks if a node represents an `await â€¦` expression.\n */\n\nconst isAwaitExpression = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.AwaitExpression);\nexports.isAwaitExpression = isAwaitExpression;\n/**\n * Checks if a possible token is the `await` keyword.\n */\n\nconst isAwaitKeyword = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Identifier, {\n  value: 'await'\n});\nexports.isAwaitKeyword = isAwaitKeyword;\nconst isLoop = (0, helpers_1.isNodeOfTypes)([ts_estree_1.AST_NODE_TYPES.DoWhileStatement, ts_estree_1.AST_NODE_TYPES.ForStatement, ts_estree_1.AST_NODE_TYPES.ForInStatement, ts_estree_1.AST_NODE_TYPES.ForOfStatement, ts_estree_1.AST_NODE_TYPES.WhileStatement]);\nexports.isLoop = isLoop;","map":{"version":3,"mappings":"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","names":["isOptionalChainPunctuator","ts_estree_1","Punctuator","value","exports","isNotOptionalChainPunctuator","isNonNullAssertionPunctuator","isNotNonNullAssertionPunctuator","isOptionalCallExpression","CallExpression","optional","isLogicalOrOperator","LogicalExpression","operator","isTypeAssertion","TSAsExpression","TSTypeAssertion","isVariableDeclarator","VariableDeclarator","functionTypes","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression","isFunction","functionTypeTypes","TSCallSignatureDeclaration","TSConstructorType","TSConstructSignatureDeclaration","TSEmptyBodyFunctionExpression","TSFunctionType","TSMethodSignature","isFunctionType","isFunctionOrFunctionType","isTSFunctionType","isTSConstructorType","isClassOrTypeElement","PropertyDefinition","MethodDefinition","TSAbstractPropertyDefinition","TSAbstractMethodDefinition","TSIndexSignature","TSPropertySignature","isConstructor","kind","isSetter","node","type","Property","isIdentifier","Identifier","isAwaitExpression","AwaitExpression","isAwaitKeyword","isLoop","DoWhileStatement","ForStatement","ForInStatement","ForOfStatement","WhileStatement"],"sources":["../../src/ast-utils/predicates.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}