{"ast":null,"code":"// @ts-check\n\n/**\n * CommanderError class\n * @class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @constructor\n   */\n  constructor(exitCode, code, message) {\n    super(message); // properly capture stack trace in Node.js\n\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n\n}\n/**\n * InvalidArgumentError class\n * @class\n */\n\n\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   * @constructor\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message); // properly capture stack trace in Node.js\n\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;","map":{"version":3,"names":["CommanderError","Error","constructor","exitCode","code","message","captureStackTrace","name","nestedError","undefined","InvalidArgumentError","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/commander/lib/error.js"],"sourcesContent":["// @ts-check\n\n/**\n * CommanderError class\n * @class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @constructor\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidArgumentError class\n * @class\n */\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   * @constructor\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA,MAAMA,cAAN,SAA6BC,KAA7B,CAAmC;EACjC;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACC,QAAD,EAAWC,IAAX,EAAiBC,OAAjB,EAA0B;IACnC,MAAMA,OAAN,EADmC,CAEnC;;IACAJ,KAAK,CAACK,iBAAN,CAAwB,IAAxB,EAA8B,KAAKJ,WAAnC;IACA,KAAKK,IAAL,GAAY,KAAKL,WAAL,CAAiBK,IAA7B;IACA,KAAKH,IAAL,GAAYA,IAAZ;IACA,KAAKD,QAAL,GAAgBA,QAAhB;IACA,KAAKK,WAAL,GAAmBC,SAAnB;EACD;;AAhBgC;AAmBnC;AACA;AACA;AACA;;;AACA,MAAMC,oBAAN,SAAmCV,cAAnC,CAAkD;EAChD;AACF;AACA;AACA;AACA;EACEE,WAAW,CAACG,OAAD,EAAU;IACnB,MAAM,CAAN,EAAS,2BAAT,EAAsCA,OAAtC,EADmB,CAEnB;;IACAJ,KAAK,CAACK,iBAAN,CAAwB,IAAxB,EAA8B,KAAKJ,WAAnC;IACA,KAAKK,IAAL,GAAY,KAAKL,WAAL,CAAiBK,IAA7B;EACD;;AAX+C;;AAclDI,OAAO,CAACX,cAAR,GAAyBA,cAAzB;AACAW,OAAO,CAACD,oBAAR,GAA+BA,oBAA/B"},"metadata":{},"sourceType":"script"}