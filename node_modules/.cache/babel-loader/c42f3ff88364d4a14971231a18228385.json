{"ast":null,"code":"'use strict';\n\nconst Q = require('q'),\n      CoaParam = require('./coaparam'),\n      chalk = require('chalk');\n/**\n * Option\n *\n * Named entity. Options may have short and long keys for use from command line.\n *\n * @namespace\n * @class Opt\n * @extends CoaParam\n */\n\n\nmodule.exports = class Opt extends CoaParam {\n  /**\n   * @constructs\n   * @param {COA.Cmd} cmd - parent command\n   */\n  constructor(cmd) {\n    super(cmd);\n    this._short = null;\n    this._long = null;\n    this._flag = false;\n    this._only = false;\n\n    this._cmd._opts.push(this);\n  }\n  /**\n   * Set a short key for option to be used with one hyphen from command line.\n   *\n   * @param {String} short - short name\n   * @returns {COA.Opt} - this instance (for chainability)\n   */\n\n\n  short(short) {\n    this._short = short;\n    this._cmd._optsByKey[`-${short}`] = this;\n    return this;\n  }\n  /**\n   * Set a short key for option to be used with double hyphens from command line.\n   *\n   * @param {String} long - long name\n   * @returns {COA.Opt} - this instance (for chainability)\n   */\n\n\n  long(long) {\n    this._long = long;\n    this._cmd._optsByKey[`--${long}`] = this;\n    return this;\n  }\n  /**\n   * Make an option boolean, i.e. option without value.\n   *\n   * @returns {COA.Opt} - this instance (for chainability)\n   */\n\n\n  flag() {\n    this._flag = true;\n    return this;\n  }\n  /**\n   * Makes an option to act as a command,\n   * i.e. program will exit just after option action.\n   *\n   * @returns {COA.Opt} - this instance (for chainability)\n   */\n\n\n  only() {\n    this._only = true;\n    return this;\n  }\n  /**\n   * Add action for current option command.\n   * This action is performed if the current option\n   * is present in parsed options (with any value).\n   *\n   * @param {Function} act - action function,\n   *         invoked in the context of command instance\n   *         and has the parameters:\n   *                 - {Object} opts - parsed options\n   *                 - {Array} args - parsed arguments\n   *                 - {Object} res - actions result accumulator\n   *         It can return rejected promise by Cmd.reject (in case of error)\n   *         or any other value treated as result.\n   * @returns {COA.Opt} - this instance (for chainability)\n   */\n\n\n  act(act) {\n    // Need function here for arguments\n    const opt = this;\n\n    this._cmd.act(function (opts) {\n      if (!opts.hasOwnProperty(opt._name)) return;\n      const res = act.apply(this, arguments);\n      if (!opt._only) return res;\n      return Q.when(res, out => this.reject({\n        toString: () => out.toString(),\n        exitCode: 0\n      }));\n    });\n\n    return this;\n  }\n\n  _saveVal(opts, val) {\n    this._val && (val = this._val(val));\n    const name = this._name;\n    this._arr ? (opts[name] || (opts[name] = [])).push(val) : opts[name] = val;\n    return val;\n  }\n\n  _parse(argv, opts) {\n    return this._saveVal(opts, this._flag ? true : argv.shift());\n  }\n\n  _checkParsed(opts) {\n    return !opts.hasOwnProperty(this._name);\n  }\n\n  _usage() {\n    const res = [],\n          nameStr = this._name.toUpperCase();\n\n    if (this._short) {\n      res.push('-', chalk.greenBright(this._short));\n      this._flag || res.push(' ' + nameStr);\n      res.push(', ');\n    }\n\n    if (this._long) {\n      res.push('--', chalk.green(this._long));\n      this._flag || res.push('=' + nameStr);\n    }\n\n    res.push(' : ', this._title);\n    this._req && res.push(' ', chalk.redBright('(required)'));\n    return res.join('');\n  }\n\n  _requiredText() {\n    return `Missing required option:\\n  ${this._usage()}`;\n  }\n\n};","map":{"version":3,"names":["Q","require","CoaParam","chalk","module","exports","Opt","constructor","cmd","_short","_long","_flag","_only","_cmd","_opts","push","short","_optsByKey","long","flag","only","act","opt","opts","hasOwnProperty","_name","res","apply","arguments","when","out","reject","toString","exitCode","_saveVal","val","_val","name","_arr","_parse","argv","shift","_checkParsed","_usage","nameStr","toUpperCase","greenBright","green","_title","_req","redBright","join","_requiredText"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/coa/lib/opt.js"],"sourcesContent":["'use strict';\n\nconst\n    Q = require('q'),\n\n    CoaParam = require('./coaparam'),\n    chalk = require('chalk');\n\n/**\n * Option\n *\n * Named entity. Options may have short and long keys for use from command line.\n *\n * @namespace\n * @class Opt\n * @extends CoaParam\n */\nmodule.exports = class Opt extends CoaParam {\n    /**\n     * @constructs\n     * @param {COA.Cmd} cmd - parent command\n     */\n    constructor(cmd) {\n        super(cmd);\n\n        this._short = null;\n        this._long = null;\n        this._flag = false;\n        this._only = false;\n        this._cmd._opts.push(this);\n    }\n\n    /**\n     * Set a short key for option to be used with one hyphen from command line.\n     *\n     * @param {String} short - short name\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n    short(short) {\n        this._short = short;\n        this._cmd._optsByKey[`-${short}`] = this;\n        return this;\n    }\n\n    /**\n     * Set a short key for option to be used with double hyphens from command line.\n     *\n     * @param {String} long - long name\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n    long(long) {\n        this._long = long;\n        this._cmd._optsByKey[`--${long}`] = this;\n        return this;\n    }\n\n    /**\n     * Make an option boolean, i.e. option without value.\n     *\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n    flag() {\n        this._flag = true;\n        return this;\n    }\n\n    /**\n     * Makes an option to act as a command,\n     * i.e. program will exit just after option action.\n     *\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n    only() {\n        this._only = true;\n        return this;\n    }\n\n    /**\n     * Add action for current option command.\n     * This action is performed if the current option\n     * is present in parsed options (with any value).\n     *\n     * @param {Function} act - action function,\n     *         invoked in the context of command instance\n     *         and has the parameters:\n     *                 - {Object} opts - parsed options\n     *                 - {Array} args - parsed arguments\n     *                 - {Object} res - actions result accumulator\n     *         It can return rejected promise by Cmd.reject (in case of error)\n     *         or any other value treated as result.\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n    act(act) {\n        // Need function here for arguments\n        const opt = this;\n        this._cmd.act(function(opts) {\n            if(!opts.hasOwnProperty(opt._name)) return;\n\n            const res = act.apply(this, arguments);\n            if(!opt._only) return res;\n\n            return Q.when(res, out => this.reject({\n                toString : () => out.toString(),\n                exitCode : 0\n            }));\n        });\n\n        return this;\n    }\n\n    _saveVal(opts, val) {\n        this._val && (val = this._val(val));\n\n        const name = this._name;\n        this._arr\n            ? (opts[name] || (opts[name] = [])).push(val)\n            : (opts[name] = val);\n\n        return val;\n    }\n\n    _parse(argv, opts) {\n        return this._saveVal(opts, this._flag ? true : argv.shift());\n    }\n\n    _checkParsed(opts) {\n        return !opts.hasOwnProperty(this._name);\n    }\n\n    _usage() {\n        const res = [],\n            nameStr = this._name.toUpperCase();\n\n        if(this._short) {\n            res.push('-', chalk.greenBright(this._short));\n            this._flag || res.push(' ' + nameStr);\n            res.push(', ');\n        }\n\n        if(this._long) {\n            res.push('--', chalk.green(this._long));\n            this._flag || res.push('=' + nameStr);\n        }\n\n        res.push(' : ', this._title);\n\n        this._req && res.push(' ', chalk.redBright('(required)'));\n\n        return res.join('');\n    }\n\n    _requiredText() {\n        return `Missing required option:\\n  ${this._usage()}`;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}