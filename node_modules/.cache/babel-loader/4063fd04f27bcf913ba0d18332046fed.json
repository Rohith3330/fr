{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst formats_1 = require(\"./formats\");\n\nconst limit_1 = require(\"./limit\");\n\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\n\nconst fullName = new codegen_1.Name(\"fullFormats\");\nconst fastName = new codegen_1.Name(\"fastFormats\");\n\nconst formatsPlugin = function (ajv) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    keywords: true\n  };\n\n  if (Array.isArray(opts)) {\n    addFormats(ajv, opts, formats_1.fullFormats, fullName);\n    return ajv;\n  }\n\n  const [formats, exportName] = opts.mode === \"fast\" ? [formats_1.fastFormats, fastName] : [formats_1.fullFormats, fullName];\n  const list = opts.formats || formats_1.formatNames;\n  addFormats(ajv, list, formats, exportName);\n  if (opts.keywords) limit_1.default(ajv);\n  return ajv;\n};\n\nformatsPlugin.get = function (name) {\n  let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"full\";\n  const formats = mode === \"fast\" ? formats_1.fastFormats : formats_1.fullFormats;\n  const f = formats[name];\n  if (!f) throw new Error(`Unknown format \"${name}\"`);\n  return f;\n};\n\nfunction addFormats(ajv, list, fs, exportName) {\n  var _a;\n\n  var _b;\n\n  (_a = (_b = ajv.opts.code).formats) !== null && _a !== void 0 ? _a : _b.formats = codegen_1._`require(\"ajv-formats/dist/formats\").${exportName}`;\n\n  for (const f of list) ajv.addFormat(f, fs[f]);\n}\n\nmodule.exports = exports = formatsPlugin;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatsPlugin;","map":{"version":3,"mappings":";;;;;;AAAA;;AAQA;;AAGA;;AAgBA,MAAMA,QAAQ,GAAG,IAAIC,cAAJ,CAAS,aAAT,CAAjB;AACA,MAAMC,QAAQ,GAAG,IAAID,cAAJ,CAAS,aAAT,CAAjB;;AAEA,MAAME,aAAa,GAAkB,UACnCC,GADmC,EAG5B;EAAA,IADPC,IACO,uEADsB;IAACC,QAAQ,EAAE;EAAX,CACtB;;EACP,IAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;IACvBI,UAAU,CAACL,GAAD,EAAMC,IAAN,EAAYK,qBAAZ,EAAyBV,QAAzB,CAAV;IACA,OAAOI,GAAP;EACD;;EACD,MAAM,CAACO,OAAD,EAAUC,UAAV,IACJP,IAAI,CAACQ,IAAL,KAAc,MAAd,GAAuB,CAACH,qBAAD,EAAcR,QAAd,CAAvB,GAAiD,CAACQ,qBAAD,EAAcV,QAAd,CADnD;EAEA,MAAMc,IAAI,GAAGT,IAAI,CAACM,OAAL,IAAgBD,qBAA7B;EACAD,UAAU,CAACL,GAAD,EAAMU,IAAN,EAAYH,OAAZ,EAAqBC,UAArB,CAAV;EACA,IAAIP,IAAI,CAACC,QAAT,EAAmBS,gBAAYX,GAAZ;EACnB,OAAOA,GAAP;AACD,CAdD;;AAgBAD,aAAa,CAACa,GAAd,GAAoB,UAACC,IAAD,EAAwD;EAAA,IAArCJ,IAAqC,uEAAlB,MAAkB;EAC1E,MAAMF,OAAO,GAAGE,IAAI,KAAK,MAAT,GAAkBH,qBAAlB,GAAgCA,qBAAhD;EACA,MAAMQ,CAAC,GAAGP,OAAO,CAACM,IAAD,CAAjB;EACA,IAAI,CAACC,CAAL,EAAQ,MAAM,IAAIC,KAAJ,CAAU,mBAAmBF,IAAI,GAAjC,CAAN;EACR,OAAOC,CAAP;AACD,CALD;;AAOA,SAAST,UAAT,CAAoBL,GAApB,EAA8BU,IAA9B,EAAkDM,EAAlD,EAAsER,UAAtE,EAAsF;;;;;EACpF,eAAG,CAACP,IAAJ,CAASgB,IAAT,EAAcV,OAAd,MAAqB,IAArB,IAAqBW,aAArB,GAAqBA,EAArB,GAAqBC,GAAPZ,OAAO,GAAKV,WAAC,uCAAuCW,UAAU,EAA5E;;EACA,KAAK,MAAMM,CAAX,IAAgBJ,IAAhB,EAAsBV,GAAG,CAACoB,SAAJ,CAAcN,CAAd,EAAiBE,EAAE,CAACF,CAAD,CAAnB;AACvB;;AAEDO,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGvB,aAA3B;AACAwB,MAAM,CAACC,cAAP,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C;EAACG,KAAK,EAAE;AAAR,CAA7C;AAEAH,kBAAevB,aAAf","names":["fullName","codegen_1","fastName","formatsPlugin","ajv","opts","keywords","Array","isArray","addFormats","formats_1","formats","exportName","mode","list","limit_1","get","name","f","Error","fs","code","_a","_b","addFormat","module","exports","Object","defineProperty","value"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\ajv-formats\\src\\index.ts"],"sourcesContent":["import {\n  DefinedFormats,\n  FormatMode,\n  FormatName,\n  formatNames,\n  fastFormats,\n  fullFormats,\n} from \"./formats\"\nimport formatLimit from \"./limit\"\nimport type Ajv from \"ajv\"\nimport type {Plugin, Format} from \"ajv\"\nimport {_, Name} from \"ajv/dist/compile/codegen\"\n\nexport {FormatMode, FormatName} from \"./formats\"\nexport {LimitFormatError} from \"./limit\"\nexport interface FormatOptions {\n  mode?: FormatMode\n  formats?: FormatName[]\n  keywords?: boolean\n}\n\nexport type FormatsPluginOptions = FormatName[] | FormatOptions\n\nexport interface FormatsPlugin extends Plugin<FormatsPluginOptions> {\n  get: (format: FormatName, mode?: FormatMode) => Format\n}\n\nconst fullName = new Name(\"fullFormats\")\nconst fastName = new Name(\"fastFormats\")\n\nconst formatsPlugin: FormatsPlugin = (\n  ajv: Ajv,\n  opts: FormatsPluginOptions = {keywords: true}\n): Ajv => {\n  if (Array.isArray(opts)) {\n    addFormats(ajv, opts, fullFormats, fullName)\n    return ajv\n  }\n  const [formats, exportName] =\n    opts.mode === \"fast\" ? [fastFormats, fastName] : [fullFormats, fullName]\n  const list = opts.formats || formatNames\n  addFormats(ajv, list, formats, exportName)\n  if (opts.keywords) formatLimit(ajv)\n  return ajv\n}\n\nformatsPlugin.get = (name: FormatName, mode: FormatMode = \"full\"): Format => {\n  const formats = mode === \"fast\" ? fastFormats : fullFormats\n  const f = formats[name]\n  if (!f) throw new Error(`Unknown format \"${name}\"`)\n  return f\n}\n\nfunction addFormats(ajv: Ajv, list: FormatName[], fs: DefinedFormats, exportName: Name): void {\n  ajv.opts.code.formats ??= _`require(\"ajv-formats/dist/formats\").${exportName}`\n  for (const f of list) ajv.addFormat(f, fs[f])\n}\n\nmodule.exports = exports = formatsPlugin\nObject.defineProperty(exports, \"__esModule\", {value: true})\n\nexport default formatsPlugin\n"]},"metadata":{},"sourceType":"script"}