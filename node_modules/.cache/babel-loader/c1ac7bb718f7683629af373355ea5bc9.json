{"ast":null,"code":"/**\n * @fileoverview Forbid certain props on DOM Nodes\n * @author David Vázquez\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\n\nconst DEFAULTS = []; // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n/**\n * @param {Map<string, object>} forbidMap // { disallowList: null | string[], message: null | string }\n * @param {string} prop\n * @param {string} tagName\n * @returns {boolean}\n */\n\nfunction isForbidden(forbidMap, prop, tagName) {\n  const options = forbidMap.get(prop);\n  return options && (typeof tagName === 'undefined' || !options.disallowList || options.disallowList.indexOf(tagName) !== -1);\n}\n\nconst messages = {\n  propIsForbidden: 'Prop \"{{prop}}\" is forbidden on DOM Nodes'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow certain props on DOM Nodes',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('forbid-dom-props')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        forbid: {\n          type: 'array',\n          items: {\n            oneOf: [{\n              type: 'string'\n            }, {\n              type: 'object',\n              properties: {\n                propName: {\n                  type: 'string'\n                },\n                disallowedFor: {\n                  type: 'array',\n                  uniqueItems: true,\n                  items: {\n                    type: 'string'\n                  }\n                },\n                message: {\n                  type: 'string'\n                }\n              }\n            }],\n            minLength: 1\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const forbid = new Map((configuration.forbid || DEFAULTS).map(value => {\n      const propName = typeof value === 'string' ? value : value.propName;\n      return [propName, {\n        disallowList: typeof value === 'string' ? null : value.disallowedFor || null,\n        message: typeof value === 'string' ? null : value.message\n      }];\n    }));\n    return {\n      JSXAttribute(node) {\n        const tag = node.parent.name.name;\n\n        if (!(tag && typeof tag === 'string' && tag[0] !== tag[0].toUpperCase())) {\n          // This is a Component, not a DOM node, so exit.\n          return;\n        }\n\n        const prop = node.name.name;\n\n        if (!isForbidden(forbid, prop, tag)) {\n          return;\n        }\n\n        const customMessage = forbid.get(prop).message;\n        report(context, customMessage || messages.propIsForbidden, !customMessage && 'propIsForbidden', {\n          node,\n          data: {\n            prop\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","report","DEFAULTS","isForbidden","forbidMap","prop","tagName","options","get","disallowList","indexOf","messages","propIsForbidden","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","forbid","items","oneOf","propName","disallowedFor","uniqueItems","message","minLength","additionalProperties","create","context","configuration","Map","map","value","JSXAttribute","node","tag","parent","name","toUpperCase","customMessage","data"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/forbid-dom-props.js"],"sourcesContent":["/**\n * @fileoverview Forbid certain props on DOM Nodes\n * @author David Vázquez\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\nconst DEFAULTS = [];\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n/**\n * @param {Map<string, object>} forbidMap // { disallowList: null | string[], message: null | string }\n * @param {string} prop\n * @param {string} tagName\n * @returns {boolean}\n */\nfunction isForbidden(forbidMap, prop, tagName) {\n  const options = forbidMap.get(prop);\n  return options && (\n    typeof tagName === 'undefined'\n    || !options.disallowList\n    || options.disallowList.indexOf(tagName) !== -1\n  );\n}\n\nconst messages = {\n  propIsForbidden: 'Prop \"{{prop}}\" is forbidden on DOM Nodes',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow certain props on DOM Nodes',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('forbid-dom-props'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        forbid: {\n          type: 'array',\n          items: {\n            oneOf: [{\n              type: 'string',\n            }, {\n              type: 'object',\n              properties: {\n                propName: {\n                  type: 'string',\n                },\n                disallowedFor: {\n                  type: 'array',\n                  uniqueItems: true,\n                  items: {\n                    type: 'string',\n                  },\n                },\n                message: {\n                  type: 'string',\n                },\n              },\n            }],\n            minLength: 1,\n          },\n          uniqueItems: true,\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const forbid = new Map((configuration.forbid || DEFAULTS).map((value) => {\n      const propName = typeof value === 'string' ? value : value.propName;\n      return [propName, {\n        disallowList: typeof value === 'string' ? null : (value.disallowedFor || null),\n        message: typeof value === 'string' ? null : value.message,\n      }];\n    }));\n\n    return {\n      JSXAttribute(node) {\n        const tag = node.parent.name.name;\n        if (!(tag && typeof tag === 'string' && tag[0] !== tag[0].toUpperCase())) {\n          // This is a Component, not a DOM node, so exit.\n          return;\n        }\n\n        const prop = node.name.name;\n\n        if (!isForbidden(forbid, prop, tag)) {\n          return;\n        }\n\n        const customMessage = forbid.get(prop).message;\n\n        report(context, customMessage || messages.propIsForbidden, !customMessage && 'propIsForbidden', {\n          node,\n          data: {\n            prop,\n          },\n        });\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}