{"ast":null,"code":"/**\n * @fileoverview Disallow tabindex on static and noninteractive elements\n * @author jessebeach\n */\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nimport { RuleTester } from 'eslint';\nimport { configs } from '../../../src/index';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/no-noninteractive-tabindex';\nimport ruleOptionsMapperFactory from '../../__util__/ruleOptionsMapperFactory'; // -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\nconst ruleName = 'no-noninteractive-tabindex';\nconst expectedError = {\n  message: '`tabIndex` should only be declared on interactive elements.',\n  type: 'JSXAttribute'\n};\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Article: 'article',\n      MyButton: 'button'\n    }\n  }\n};\nconst alwaysValid = [{\n  code: '<MyButton tabIndex={0} />'\n}, {\n  code: '<button />'\n}, {\n  code: '<button tabIndex=\"0\" />'\n}, {\n  code: '<button tabIndex={0} />'\n}, {\n  code: '<div />'\n}, {\n  code: '<div tabIndex=\"-1\" />'\n}, {\n  code: '<div role=\"button\" tabIndex=\"0\" />'\n}, {\n  code: '<div role=\"article\" tabIndex=\"-1\" />'\n}, {\n  code: '<article tabIndex=\"-1\" />'\n}, {\n  code: '<Article tabIndex=\"-1\" />',\n  settings: componentsSettings\n}, {\n  code: '<MyButton tabIndex={0} />',\n  settings: componentsSettings\n}];\nconst neverValid = [{\n  code: '<div tabIndex=\"0\" />',\n  errors: [expectedError]\n}, {\n  code: '<div role=\"article\" tabIndex=\"0\" />',\n  errors: [expectedError]\n}, {\n  code: '<article tabIndex=\"0\" />',\n  errors: [expectedError]\n}, {\n  code: '<article tabIndex={0} />',\n  errors: [expectedError]\n}, {\n  code: '<Article tabIndex={0} />',\n  errors: [expectedError],\n  settings: componentsSettings\n}];\nconst recommendedOptions = configs.recommended.rules[`jsx-a11y/${ruleName}`][1] || {};\nruleTester.run(`${ruleName}:recommended`, rule, {\n  valid: [...alwaysValid, {\n    code: '<div role=\"tabpanel\" tabIndex=\"0\" />'\n  }, // Expressions should pass in recommended mode\n  {\n    code: '<div role={ROLE_BUTTON} onClick={() => {}} tabIndex=\"0\" />;'\n  }, // Cases for allowExpressionValues set to true\n  {\n    code: '<div role={BUTTON} onClick={() => {}} tabIndex=\"0\" />;',\n    options: [{\n      allowExpressionValues: true\n    }]\n  }, // Specific case for ternary operator with literals on both side\n  {\n    code: '<div role={isButton ? \"button\" : \"link\"} onClick={() => {}} tabIndex=\"0\" />;',\n    options: [{\n      allowExpressionValues: true\n    }]\n  }, {\n    code: '<div role={isButton ? \"button\" : LINK} onClick={() => {}} tabIndex=\"0\" />;',\n    options: [{\n      allowExpressionValues: true\n    }],\n    errors: [expectedError]\n  }, {\n    code: '<div role={isButton ? BUTTON : LINK} onClick={() => {}} tabIndex=\"0\"/>;',\n    options: [{\n      allowExpressionValues: true\n    }],\n    errors: [expectedError]\n  }].map(ruleOptionsMapperFactory(recommendedOptions)).map(parserOptionsMapper),\n  invalid: [...neverValid].map(ruleOptionsMapperFactory(recommendedOptions)).map(parserOptionsMapper)\n});\nruleTester.run(`${ruleName}:strict`, rule, {\n  valid: [...alwaysValid].map(parserOptionsMapper),\n  invalid: [...neverValid, {\n    code: '<div role=\"tabpanel\" tabIndex=\"0\" />',\n    errors: [expectedError]\n  }, // Expressions should fail in strict mode\n  {\n    code: '<div role={ROLE_BUTTON} onClick={() => {}} tabIndex=\"0\" />;',\n    errors: [expectedError]\n  }, // Cases for allowExpressionValues set to false\n  {\n    code: '<div role={BUTTON} onClick={() => {}} tabIndex=\"0\" />;',\n    options: [{\n      allowExpressionValues: false\n    }],\n    errors: [expectedError]\n  }, // Specific case for ternary operator with literals on both side\n  {\n    code: '<div role={isButton ? \"button\" : \"link\"} onClick={() => {}} tabIndex=\"0\" />;',\n    options: [{\n      allowExpressionValues: false\n    }],\n    errors: [expectedError]\n  }].map(parserOptionsMapper)\n});","map":{"version":3,"names":["RuleTester","configs","parserOptionsMapper","rule","ruleOptionsMapperFactory","ruleTester","ruleName","expectedError","message","type","componentsSettings","components","Article","MyButton","alwaysValid","code","settings","neverValid","errors","recommendedOptions","recommended","rules","run","valid","options","allowExpressionValues","map","invalid"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/no-noninteractive-tabindex-test.js"],"sourcesContent":["/**\n * @fileoverview Disallow tabindex on static and noninteractive elements\n * @author jessebeach\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport { configs } from '../../../src/index';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/no-noninteractive-tabindex';\nimport ruleOptionsMapperFactory from '../../__util__/ruleOptionsMapperFactory';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst ruleName = 'no-noninteractive-tabindex';\n\nconst expectedError = {\n  message: '`tabIndex` should only be declared on interactive elements.',\n  type: 'JSXAttribute',\n};\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Article: 'article',\n      MyButton: 'button',\n    },\n  },\n};\n\nconst alwaysValid = [\n  { code: '<MyButton tabIndex={0} />' },\n  { code: '<button />' },\n  { code: '<button tabIndex=\"0\" />' },\n  { code: '<button tabIndex={0} />' },\n  { code: '<div />' },\n  { code: '<div tabIndex=\"-1\" />' },\n  { code: '<div role=\"button\" tabIndex=\"0\" />' },\n  { code: '<div role=\"article\" tabIndex=\"-1\" />' },\n  { code: '<article tabIndex=\"-1\" />' },\n  { code: '<Article tabIndex=\"-1\" />', settings: componentsSettings },\n  { code: '<MyButton tabIndex={0} />', settings: componentsSettings },\n];\n\nconst neverValid = [\n  { code: '<div tabIndex=\"0\" />', errors: [expectedError] },\n  { code: '<div role=\"article\" tabIndex=\"0\" />', errors: [expectedError] },\n  { code: '<article tabIndex=\"0\" />', errors: [expectedError] },\n  { code: '<article tabIndex={0} />', errors: [expectedError] },\n  { code: '<Article tabIndex={0} />', errors: [expectedError], settings: componentsSettings },\n];\n\nconst recommendedOptions = (\n  configs.recommended.rules[`jsx-a11y/${ruleName}`][1] || {}\n);\n\nruleTester.run(`${ruleName}:recommended`, rule, {\n  valid: [\n    ...alwaysValid,\n    { code: '<div role=\"tabpanel\" tabIndex=\"0\" />' },\n    // Expressions should pass in recommended mode\n    { code: '<div role={ROLE_BUTTON} onClick={() => {}} tabIndex=\"0\" />;' },\n    // Cases for allowExpressionValues set to true\n    {\n      code: '<div role={BUTTON} onClick={() => {}} tabIndex=\"0\" />;',\n      options: [{ allowExpressionValues: true }],\n    },\n    // Specific case for ternary operator with literals on both side\n    {\n      code: '<div role={isButton ? \"button\" : \"link\"} onClick={() => {}} tabIndex=\"0\" />;',\n      options: [{ allowExpressionValues: true }],\n    },\n    {\n      code: '<div role={isButton ? \"button\" : LINK} onClick={() => {}} tabIndex=\"0\" />;',\n      options: [{ allowExpressionValues: true }],\n      errors: [expectedError],\n    },\n    {\n      code: '<div role={isButton ? BUTTON : LINK} onClick={() => {}} tabIndex=\"0\"/>;',\n      options: [{ allowExpressionValues: true }],\n      errors: [expectedError],\n    },\n  ]\n    .map(ruleOptionsMapperFactory(recommendedOptions))\n    .map(parserOptionsMapper),\n  invalid: [\n    ...neverValid,\n  ]\n    .map(ruleOptionsMapperFactory(recommendedOptions))\n    .map(parserOptionsMapper),\n});\n\nruleTester.run(`${ruleName}:strict`, rule, {\n  valid: [\n    ...alwaysValid,\n  ].map(parserOptionsMapper),\n  invalid: [\n    ...neverValid,\n    { code: '<div role=\"tabpanel\" tabIndex=\"0\" />', errors: [expectedError] },\n    // Expressions should fail in strict mode\n    { code: '<div role={ROLE_BUTTON} onClick={() => {}} tabIndex=\"0\" />;', errors: [expectedError] },\n    // Cases for allowExpressionValues set to false\n    {\n      code: '<div role={BUTTON} onClick={() => {}} tabIndex=\"0\" />;',\n      options: [{ allowExpressionValues: false }],\n      errors: [expectedError],\n    },\n    // Specific case for ternary operator with literals on both side\n    {\n      code: '<div role={isButton ? \"button\" : \"link\"} onClick={() => {}} tabIndex=\"0\" />;',\n      options: [{ allowExpressionValues: false }],\n      errors: [expectedError],\n    },\n  ].map(parserOptionsMapper),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}