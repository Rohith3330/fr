{"ast":null,"code":"import { pctEncChar, pctDecChars, unescapeComponent } from \"../uri\";\nimport punycode from \"punycode\";\nimport { merge, subexp, toUpperCase, toArray } from \"../util\";\nconst O = {};\nconst isIRI = true; //RFC 3986\n\nconst UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + (isIRI ? \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" : \"\") + \"]\";\nconst HEXDIG$$ = \"[0-9A-Fa-f]\"; //case-insensitive\n\nconst PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)); //expanded\n//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =\n//const ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\/\\\\=\\\\?\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QTEXT$$ = \"[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F]\";  //(%d1-8 / %d11-12 / %d14-31 / %d127)\n//const QTEXT$$ = merge(\"[\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]\", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext\n//const VCHAR$$ = \"[\\\\x21-\\\\x7E]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QP$ = subexp(\"\\\\\\\\\" + merge(\"[\\\\x00\\\\x0D\\\\x0A]\", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext\n//const FWS$ = subexp(subexp(WSP$$ + \"*\" + \"\\\\x0D\\\\x0A\") + \"?\" + WSP$$ + \"+\");\n//const QUOTED_PAIR$ = subexp(subexp(\"\\\\\\\\\" + subexp(VCHAR$$ + \"|\" + WSP$$)) + \"|\" + OBS_QP$);\n//const QUOTED_STRING$ = subexp('\\\\\"' + subexp(FWS$ + \"?\" + QCONTENT$) + \"*\" + FWS$ + \"?\" + '\\\\\"');\n\nconst ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\nconst QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\nconst VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\nconst DOT_ATOM_TEXT$ = subexp(ATEXT$$ + \"+\" + subexp(\"\\\\.\" + ATEXT$$ + \"+\") + \"*\");\nconst QUOTED_PAIR$ = subexp(\"\\\\\\\\\" + VCHAR$$);\nconst QCONTENT$ = subexp(QTEXT$$ + \"|\" + QUOTED_PAIR$);\nconst QUOTED_STRING$ = subexp('\\\\\"' + QCONTENT$ + \"*\" + '\\\\\"'); //RFC 6068\n\nconst DTEXT_NO_OBS$$ = \"[\\\\x21-\\\\x5A\\\\x5E-\\\\x7E]\"; //%d33-90 / %d94-126\n\nconst SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\nconst QCHAR$ = subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$ + \"|\" + SOME_DELIMS$$);\nconst DOMAIN$ = subexp(DOT_ATOM_TEXT$ + \"|\" + \"\\\\[\" + DTEXT_NO_OBS$$ + \"*\" + \"\\\\]\");\nconst LOCAL_PART$ = subexp(DOT_ATOM_TEXT$ + \"|\" + QUOTED_STRING$);\nconst ADDR_SPEC$ = subexp(LOCAL_PART$ + \"\\\\@\" + DOMAIN$);\nconst TO$ = subexp(ADDR_SPEC$ + subexp(\"\\\\,\" + ADDR_SPEC$) + \"*\");\nconst HFNAME$ = subexp(QCHAR$ + \"*\");\nconst HFVALUE$ = HFNAME$;\nconst HFIELD$ = subexp(HFNAME$ + \"\\\\=\" + HFVALUE$);\nconst HFIELDS2$ = subexp(HFIELD$ + subexp(\"\\\\&\" + HFIELD$) + \"*\");\nconst HFIELDS$ = subexp(\"\\\\?\" + HFIELDS2$);\nconst MAILTO_URI = new RegExp(\"^mailto\\\\:\" + TO$ + \"?\" + HFIELDS$ + \"?$\");\nconst UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\nconst PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\nconst NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", '[\\\\\"]', VCHAR$$), \"g\");\nconst NOT_DOMAIN = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", \"[\\\\[]\", DTEXT_NO_OBS$$, \"[\\\\]]\"), \"g\");\nconst NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\nconst NOT_HFVALUE = NOT_HFNAME;\nconst TO = new RegExp(\"^\" + TO$ + \"$\");\nconst HFIELDS = new RegExp(\"^\" + HFIELDS2$ + \"$\");\n\nfunction decodeUnreserved(str) {\n  const decStr = pctDecChars(str);\n  return !decStr.match(UNRESERVED) ? str : decStr;\n}\n\nconst handler = {\n  scheme: \"mailto\",\n  parse: function (components, options) {\n    const mailtoComponents = components;\n    const to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(\",\") : [];\n    mailtoComponents.path = undefined;\n\n    if (mailtoComponents.query) {\n      let unknownHeaders = false;\n      const headers = {};\n      const hfields = mailtoComponents.query.split(\"&\");\n\n      for (let x = 0, xl = hfields.length; x < xl; ++x) {\n        const hfield = hfields[x].split(\"=\");\n\n        switch (hfield[0]) {\n          case \"to\":\n            const toAddrs = hfield[1].split(\",\");\n\n            for (let x = 0, xl = toAddrs.length; x < xl; ++x) {\n              to.push(toAddrs[x]);\n            }\n\n            break;\n\n          case \"subject\":\n            mailtoComponents.subject = unescapeComponent(hfield[1], options);\n            break;\n\n          case \"body\":\n            mailtoComponents.body = unescapeComponent(hfield[1], options);\n            break;\n\n          default:\n            unknownHeaders = true;\n            headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n            break;\n        }\n      }\n\n      if (unknownHeaders) mailtoComponents.headers = headers;\n    }\n\n    mailtoComponents.query = undefined;\n\n    for (let x = 0, xl = to.length; x < xl; ++x) {\n      const addr = to[x].split(\"@\");\n      addr[0] = unescapeComponent(addr[0]);\n\n      if (!options.unicodeSupport) {\n        //convert Unicode IDN -> ASCII IDN\n        try {\n          addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n        } catch (e) {\n          mailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n        }\n      } else {\n        addr[1] = unescapeComponent(addr[1], options).toLowerCase();\n      }\n\n      to[x] = addr.join(\"@\");\n    }\n\n    return mailtoComponents;\n  },\n  serialize: function (mailtoComponents, options) {\n    const components = mailtoComponents;\n    const to = toArray(mailtoComponents.to);\n\n    if (to) {\n      for (let x = 0, xl = to.length; x < xl; ++x) {\n        const toAddr = String(to[x]);\n        const atIdx = toAddr.lastIndexOf(\"@\");\n        const localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n        let domain = toAddr.slice(atIdx + 1); //convert IDN via punycode\n\n        try {\n          domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);\n        } catch (e) {\n          components.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n        }\n\n        to[x] = localPart + \"@\" + domain;\n      }\n\n      components.path = to.join(\",\");\n    }\n\n    const headers = mailtoComponents.headers = mailtoComponents.headers || {};\n    if (mailtoComponents.subject) headers[\"subject\"] = mailtoComponents.subject;\n    if (mailtoComponents.body) headers[\"body\"] = mailtoComponents.body;\n    const fields = [];\n\n    for (const name in headers) {\n      if (headers[name] !== O[name]) {\n        fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + \"=\" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));\n      }\n    }\n\n    if (fields.length) {\n      components.query = fields.join(\"&\");\n    }\n\n    return components;\n  }\n};\nexport default handler;","map":{"version":3,"mappings":"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","names":["pctEncChar","pctDecChars","unescapeComponent","punycode","merge","subexp","toUpperCase","toArray","O","isIRI","UNRESERVED$$","HEXDIG$$","PCT_ENCODED$","ATEXT$$","QTEXT$$","VCHAR$$","DOT_ATOM_TEXT$","QUOTED_PAIR$","QCONTENT$","QUOTED_STRING$","DTEXT_NO_OBS$$","SOME_DELIMS$$","QCHAR$","DOMAIN$","LOCAL_PART$","ADDR_SPEC$","TO$","HFNAME$","HFVALUE$","HFIELD$","HFIELDS2$","HFIELDS$","MAILTO_URI","RegExp","UNRESERVED","PCT_ENCODED","NOT_LOCAL_PART","NOT_DOMAIN","NOT_HFNAME","NOT_HFVALUE","TO","HFIELDS","str","decStr","match","handler","scheme","parse","components","options","mailtoComponents","to","path","split","undefined","query","unknownHeaders","headers","hfields","x","xl","length","hfield","toAddrs","push","subject","body","addr","unicodeSupport","toASCII","toLowerCase","e","error","join","serialize","toAddr","String","atIdx","lastIndexOf","localPart","slice","replace","decodeUnreserved","domain","iri","toUnicode","fields","name"],"sources":["../../../src/schemes/mailto.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}