{"ast":null,"code":"'use strict';\n\nconst resolve = require('path').resolve;\n\nconst config = require('lilconfig');\n\nconst yaml = require('yaml');\n\nconst loadOptions = require('./options.js');\n\nconst loadPlugins = require('./plugins.js');\n/* istanbul ignore next */\n\n\nconst interopRequireDefault = obj => obj && obj.__esModule ? obj : {\n  default: obj\n};\n/**\n * Process the result from cosmiconfig\n *\n * @param  {Object} ctx Config Context\n * @param  {Object} result Cosmiconfig result\n *\n * @return {Object} PostCSS Config\n */\n\n\nconst processResult = (ctx, result) => {\n  const file = result.filepath || '';\n  let config = interopRequireDefault(result.config).default || {};\n\n  if (typeof config === 'function') {\n    config = config(ctx);\n  } else {\n    config = Object.assign({}, config, ctx);\n  }\n\n  if (!config.plugins) {\n    config.plugins = [];\n  }\n\n  return {\n    plugins: loadPlugins(config, file),\n    options: loadOptions(config, file),\n    file: file\n  };\n};\n/**\n * Builds the Config Context\n *\n * @param  {Object} ctx Config Context\n *\n * @return {Object} Config Context\n */\n\n\nconst createContext = ctx => {\n  /**\n   * @type {Object}\n   *\n   * @prop {String} cwd=process.cwd() Config search start location\n   * @prop {String} env=process.env.NODE_ENV Config Enviroment, will be set to `development` by `postcss-load-config` if `process.env.NODE_ENV` is `undefined`\n   */\n  ctx = Object.assign({\n    cwd: process.cwd(),\n    env: process.env.NODE_ENV\n  }, ctx);\n\n  if (!ctx.env) {\n    process.env.NODE_ENV = 'development';\n  }\n\n  return ctx;\n};\n\nconst addTypeScriptLoader = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let loader = arguments.length > 1 ? arguments[1] : undefined;\n  const moduleName = 'postcss';\n  return { ...options,\n    searchPlaces: [...(options.searchPlaces || []), 'package.json', `.${moduleName}rc`, `.${moduleName}rc.json`, `.${moduleName}rc.yaml`, `.${moduleName}rc.yml`, `.${moduleName}rc.ts`, `.${moduleName}rc.js`, `.${moduleName}rc.cjs`, `${moduleName}.config.ts`, `${moduleName}.config.js`, `${moduleName}.config.cjs`],\n    loaders: { ...options.loaders,\n      '.yaml': (filepath, content) => yaml.parse(content),\n      '.yml': (filepath, content) => yaml.parse(content),\n      '.ts': loader\n    }\n  };\n};\n\nconst withTypeScriptLoader = rcFunc => {\n  return (ctx, path, options) => {\n    return rcFunc(ctx, path, addTypeScriptLoader(options, configFile => {\n      let registerer = {\n        enabled() {}\n\n      };\n\n      try {\n        // Register TypeScript compiler instance\n        registerer = require('ts-node').register();\n        return require(configFile);\n      } catch (err) {\n        if (err.code === 'MODULE_NOT_FOUND') {\n          throw new Error(`'ts-node' is required for the TypeScript configuration files. Make sure it is installed\\nError: ${err.message}`);\n        }\n\n        throw err;\n      } finally {\n        registerer.enabled(false);\n      }\n    }));\n  };\n};\n/**\n * Load Config\n *\n * @method rc\n *\n * @param  {Object} ctx Config Context\n * @param  {String} path Config Path\n * @param  {Object} options Config Options\n *\n * @return {Promise} config PostCSS Config\n */\n\n\nconst rc = withTypeScriptLoader((ctx, path, options) => {\n  /**\n   * @type {Object} The full Config Context\n   */\n  ctx = createContext(ctx);\n  /**\n   * @type {String} `process.cwd()`\n   */\n\n  path = path ? resolve(path) : process.cwd();\n  return config.lilconfig('postcss', options).search(path).then(result => {\n    if (!result) {\n      throw new Error(`No PostCSS Config found in: ${path}`);\n    }\n\n    return processResult(ctx, result);\n  });\n});\nrc.sync = withTypeScriptLoader((ctx, path, options) => {\n  /**\n   * @type {Object} The full Config Context\n   */\n  ctx = createContext(ctx);\n  /**\n   * @type {String} `process.cwd()`\n   */\n\n  path = path ? resolve(path) : process.cwd();\n  const result = config.lilconfigSync('postcss', options).search(path);\n\n  if (!result) {\n    throw new Error(`No PostCSS Config found in: ${path}`);\n  }\n\n  return processResult(ctx, result);\n});\n/**\n * Autoload Config for PostCSS\n *\n * @author Michael Ciniawsky @michael-ciniawsky <michael.ciniawsky@gmail.com>\n * @license MIT\n *\n * @module postcss-load-config\n * @version 2.1.0\n *\n * @requires comsiconfig\n * @requires ./options\n * @requires ./plugins\n */\n\nmodule.exports = rc;","map":{"version":3,"names":["resolve","require","config","yaml","loadOptions","loadPlugins","interopRequireDefault","obj","__esModule","default","processResult","ctx","result","file","filepath","Object","assign","plugins","options","createContext","cwd","process","env","NODE_ENV","addTypeScriptLoader","loader","moduleName","searchPlaces","loaders","content","parse","withTypeScriptLoader","rcFunc","path","configFile","registerer","enabled","register","err","code","Error","message","rc","lilconfig","search","then","sync","lilconfigSync","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-load-config/src/index.js"],"sourcesContent":["'use strict'\n\nconst resolve = require('path').resolve\n\nconst config = require('lilconfig')\nconst yaml = require('yaml')\n\nconst loadOptions = require('./options.js')\nconst loadPlugins = require('./plugins.js')\n\n/* istanbul ignore next */\nconst interopRequireDefault = (obj) => obj && obj.__esModule ? obj : { default: obj }\n\n/**\n * Process the result from cosmiconfig\n *\n * @param  {Object} ctx Config Context\n * @param  {Object} result Cosmiconfig result\n *\n * @return {Object} PostCSS Config\n */\nconst processResult = (ctx, result) => {\n  const file = result.filepath || ''\n  let config = interopRequireDefault(result.config).default || {}\n\n  if (typeof config === 'function') {\n    config = config(ctx)\n  } else {\n    config = Object.assign({}, config, ctx)\n  }\n\n  if (!config.plugins) {\n    config.plugins = []\n  }\n\n  return {\n    plugins: loadPlugins(config, file),\n    options: loadOptions(config, file),\n    file: file\n  }\n}\n\n/**\n * Builds the Config Context\n *\n * @param  {Object} ctx Config Context\n *\n * @return {Object} Config Context\n */\nconst createContext = (ctx) => {\n  /**\n   * @type {Object}\n   *\n   * @prop {String} cwd=process.cwd() Config search start location\n   * @prop {String} env=process.env.NODE_ENV Config Enviroment, will be set to `development` by `postcss-load-config` if `process.env.NODE_ENV` is `undefined`\n   */\n  ctx = Object.assign({\n    cwd: process.cwd(),\n    env: process.env.NODE_ENV\n  }, ctx)\n\n  if (!ctx.env) {\n    process.env.NODE_ENV = 'development'\n  }\n\n  return ctx\n}\n\nconst addTypeScriptLoader = (options = {}, loader) => {\n  const moduleName = 'postcss'\n\n  return {\n    ...options,\n    searchPlaces: [\n      ...(options.searchPlaces || []),\n      'package.json',\n      `.${moduleName}rc`,\n      `.${moduleName}rc.json`,\n      `.${moduleName}rc.yaml`,\n      `.${moduleName}rc.yml`,\n      `.${moduleName}rc.ts`,\n      `.${moduleName}rc.js`,\n      `.${moduleName}rc.cjs`,\n      `${moduleName}.config.ts`,\n      `${moduleName}.config.js`,\n      `${moduleName}.config.cjs`\n    ],\n    loaders: {\n      ...options.loaders,\n      '.yaml': (filepath, content) => yaml.parse(content),\n      '.yml': (filepath, content) => yaml.parse(content),\n      '.ts': loader\n    }\n  }\n}\n\nconst withTypeScriptLoader = (rcFunc) => {\n  return (ctx, path, options) => {\n    return rcFunc(ctx, path, addTypeScriptLoader(options, (configFile) => {\n      let registerer = { enabled () {} }\n\n      try {\n        // Register TypeScript compiler instance\n        registerer = require('ts-node').register()\n\n        return require(configFile)\n      } catch (err) {\n        if (err.code === 'MODULE_NOT_FOUND') {\n          throw new Error(\n            `'ts-node' is required for the TypeScript configuration files. Make sure it is installed\\nError: ${err.message}`\n          )\n        }\n\n        throw err\n      } finally {\n        registerer.enabled(false)\n      }\n    }))\n  }\n}\n\n/**\n * Load Config\n *\n * @method rc\n *\n * @param  {Object} ctx Config Context\n * @param  {String} path Config Path\n * @param  {Object} options Config Options\n *\n * @return {Promise} config PostCSS Config\n */\nconst rc = withTypeScriptLoader((ctx, path, options) => {\n  /**\n   * @type {Object} The full Config Context\n   */\n  ctx = createContext(ctx)\n\n  /**\n   * @type {String} `process.cwd()`\n   */\n  path = path ? resolve(path) : process.cwd()\n\n  return config.lilconfig('postcss', options)\n    .search(path)\n    .then((result) => {\n      if (!result) {\n        throw new Error(`No PostCSS Config found in: ${path}`)\n      }\n\n      return processResult(ctx, result)\n    })\n})\n\nrc.sync = withTypeScriptLoader((ctx, path, options) => {\n  /**\n   * @type {Object} The full Config Context\n   */\n  ctx = createContext(ctx)\n\n  /**\n   * @type {String} `process.cwd()`\n   */\n  path = path ? resolve(path) : process.cwd()\n\n  const result = config.lilconfigSync('postcss', options).search(path)\n\n  if (!result) {\n    throw new Error(`No PostCSS Config found in: ${path}`)\n  }\n\n  return processResult(ctx, result)\n})\n\n/**\n * Autoload Config for PostCSS\n *\n * @author Michael Ciniawsky @michael-ciniawsky <michael.ciniawsky@gmail.com>\n * @license MIT\n *\n * @module postcss-load-config\n * @version 2.1.0\n *\n * @requires comsiconfig\n * @requires ./options\n * @requires ./plugins\n */\nmodule.exports = rc\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}