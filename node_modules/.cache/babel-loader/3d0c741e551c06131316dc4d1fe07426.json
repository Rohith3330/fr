{"ast":null,"code":"'use strict';\n\nexports.name = 'addAttributesToSVGElement';\nexports.type = 'visitor';\nexports.active = false;\nexports.description = 'adds attributes to an outer <svg> element';\nvar ENOCLS = `Error in plugin \"addAttributesToSVGElement\": absent parameters.\nIt should have a list of \"attributes\" or one \"attribute\".\nConfig example:\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attribute: \"mySvg\"\n    }\n  }\n]\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attributes: [\"mySvg\", \"size-big\"]\n    }\n  }\n]\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attributes: [\n        {\n          focusable: false\n        },\n        {\n          'data-image': icon\n        }\n      ]\n    }\n  }\n]\n`;\n/**\n * Add attributes to an outer <svg> element. Example config:\n *\n * @author April Arcus\n *\n * @type {import('../lib/types').Plugin<{\n *   attribute?: string | Record<string, null | string>,\n *   attributes?: Array<string | Record<string, null | string>>\n * }>}\n */\n\nexports.fn = (root, params) => {\n  if (!Array.isArray(params.attributes) && !params.attribute) {\n    console.error(ENOCLS);\n    return null;\n  }\n\n  const attributes = params.attributes || [params.attribute];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const attribute of attributes) {\n            if (typeof attribute === 'string') {\n              if (node.attributes[attribute] == null) {\n                // @ts-ignore disallow explicit nullable attribute value\n                node.attributes[attribute] = undefined;\n              }\n            }\n\n            if (typeof attribute === 'object') {\n              for (const key of Object.keys(attribute)) {\n                if (node.attributes[key] == null) {\n                  // @ts-ignore disallow explicit nullable attribute value\n                  node.attributes[key] = attribute[key];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["exports","name","type","active","description","ENOCLS","fn","root","params","Array","isArray","attributes","attribute","console","error","element","enter","node","parentNode","undefined","key","Object","keys"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-svgo/node_modules/svgo/plugins/addAttributesToSVGElement.js"],"sourcesContent":["'use strict';\n\nexports.name = 'addAttributesToSVGElement';\nexports.type = 'visitor';\nexports.active = false;\nexports.description = 'adds attributes to an outer <svg> element';\n\nvar ENOCLS = `Error in plugin \"addAttributesToSVGElement\": absent parameters.\nIt should have a list of \"attributes\" or one \"attribute\".\nConfig example:\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attribute: \"mySvg\"\n    }\n  }\n]\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attributes: [\"mySvg\", \"size-big\"]\n    }\n  }\n]\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attributes: [\n        {\n          focusable: false\n        },\n        {\n          'data-image': icon\n        }\n      ]\n    }\n  }\n]\n`;\n\n/**\n * Add attributes to an outer <svg> element. Example config:\n *\n * @author April Arcus\n *\n * @type {import('../lib/types').Plugin<{\n *   attribute?: string | Record<string, null | string>,\n *   attributes?: Array<string | Record<string, null | string>>\n * }>}\n */\nexports.fn = (root, params) => {\n  if (!Array.isArray(params.attributes) && !params.attribute) {\n    console.error(ENOCLS);\n    return null;\n  }\n  const attributes = params.attributes || [params.attribute];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const attribute of attributes) {\n            if (typeof attribute === 'string') {\n              if (node.attributes[attribute] == null) {\n                // @ts-ignore disallow explicit nullable attribute value\n                node.attributes[attribute] = undefined;\n              }\n            }\n            if (typeof attribute === 'object') {\n              for (const key of Object.keys(attribute)) {\n                if (node.attributes[key] == null) {\n                  // @ts-ignore disallow explicit nullable attribute value\n                  node.attributes[key] = attribute[key];\n                }\n              }\n            }\n          }\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,IAAR,GAAe,2BAAf;AACAD,OAAO,CAACE,IAAR,GAAe,SAAf;AACAF,OAAO,CAACG,MAAR,GAAiB,KAAjB;AACAH,OAAO,CAACI,WAAR,GAAsB,2CAAtB;AAEA,IAAIC,MAAM,GAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArCA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,OAAO,CAACM,EAAR,GAAa,CAACC,IAAD,EAAOC,MAAP,KAAkB;EAC7B,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,MAAM,CAACG,UAArB,CAAD,IAAqC,CAACH,MAAM,CAACI,SAAjD,EAA4D;IAC1DC,OAAO,CAACC,KAAR,CAAcT,MAAd;IACA,OAAO,IAAP;EACD;;EACD,MAAMM,UAAU,GAAGH,MAAM,CAACG,UAAP,IAAqB,CAACH,MAAM,CAACI,SAAR,CAAxC;EACA,OAAO;IACLG,OAAO,EAAE;MACPC,KAAK,EAAE,CAACC,IAAD,EAAOC,UAAP,KAAsB;QAC3B,IAAID,IAAI,CAAChB,IAAL,KAAc,KAAd,IAAuBiB,UAAU,CAAChB,IAAX,KAAoB,MAA/C,EAAuD;UACrD,KAAK,MAAMU,SAAX,IAAwBD,UAAxB,EAAoC;YAClC,IAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;cACjC,IAAIK,IAAI,CAACN,UAAL,CAAgBC,SAAhB,KAA8B,IAAlC,EAAwC;gBACtC;gBACAK,IAAI,CAACN,UAAL,CAAgBC,SAAhB,IAA6BO,SAA7B;cACD;YACF;;YACD,IAAI,OAAOP,SAAP,KAAqB,QAAzB,EAAmC;cACjC,KAAK,MAAMQ,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYV,SAAZ,CAAlB,EAA0C;gBACxC,IAAIK,IAAI,CAACN,UAAL,CAAgBS,GAAhB,KAAwB,IAA5B,EAAkC;kBAChC;kBACAH,IAAI,CAACN,UAAL,CAAgBS,GAAhB,IAAuBR,SAAS,CAACQ,GAAD,CAAhC;gBACD;cACF;YACF;UACF;QACF;MACF;IApBM;EADJ,CAAP;AAwBD,CA9BD"},"metadata":{},"sourceType":"script"}