{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsArray = require('./IsArray');\n\nvar isByteValue = require('../helpers/isByteValue'); // https://ecma-international.org/ecma-262/12.0/#sec-bytelistequal\n\n\nmodule.exports = function ByteListEqual(xBytes, yBytes) {\n  if (!IsArray(xBytes) || !IsArray(yBytes)) {\n    throw new $TypeError('Assertion failed: `xBytes` and `yBytes` must be sequences of byte values (an integer 0-255, inclusive)');\n  }\n\n  if (xBytes.length !== yBytes.length) {\n    return false;\n  }\n\n  for (var i = 0; i < xBytes.length; i += 1) {\n    var xByte = xBytes[i];\n    var yByte = yBytes[i];\n\n    if (!isByteValue(xByte) || !isByteValue(yByte)) {\n      throw new $TypeError('Assertion failed: `xBytes` and `yBytes` must be sequences of byte values (an integer 0-255, inclusive)');\n    }\n\n    if (xByte !== yByte) {\n      return false;\n    }\n  }\n\n  return true;\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","IsArray","isByteValue","module","exports","ByteListEqual","xBytes","yBytes","length","i","xByte","yByte"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2022/ByteListEqual.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsArray = require('./IsArray');\n\nvar isByteValue = require('../helpers/isByteValue');\n\n// https://ecma-international.org/ecma-262/12.0/#sec-bytelistequal\n\nmodule.exports = function ByteListEqual(xBytes, yBytes) {\n\tif (!IsArray(xBytes) || !IsArray(yBytes)) {\n\t\tthrow new $TypeError('Assertion failed: `xBytes` and `yBytes` must be sequences of byte values (an integer 0-255, inclusive)');\n\t}\n\n\tif (xBytes.length !== yBytes.length) {\n\t\treturn false;\n\t}\n\n\tfor (var i = 0; i < xBytes.length; i += 1) {\n\t\tvar xByte = xBytes[i];\n\t\tvar yByte = yBytes[i];\n\t\tif (!isByteValue(xByte) || !isByteValue(yByte)) {\n\t\t\tthrow new $TypeError('Assertion failed: `xBytes` and `yBytes` must be sequences of byte values (an integer 0-255, inclusive)');\n\t\t}\n\t\tif (xByte !== yByte) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIG,WAAW,GAAGH,OAAO,CAAC,wBAAD,CAAzB,C,CAEA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuC;EACvD,IAAI,CAACN,OAAO,CAACK,MAAD,CAAR,IAAoB,CAACL,OAAO,CAACM,MAAD,CAAhC,EAA0C;IACzC,MAAM,IAAIP,UAAJ,CAAe,wGAAf,CAAN;EACA;;EAED,IAAIM,MAAM,CAACE,MAAP,KAAkBD,MAAM,CAACC,MAA7B,EAAqC;IACpC,OAAO,KAAP;EACA;;EAED,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,MAA3B,EAAmCC,CAAC,IAAI,CAAxC,EAA2C;IAC1C,IAAIC,KAAK,GAAGJ,MAAM,CAACG,CAAD,CAAlB;IACA,IAAIE,KAAK,GAAGJ,MAAM,CAACE,CAAD,CAAlB;;IACA,IAAI,CAACP,WAAW,CAACQ,KAAD,CAAZ,IAAuB,CAACR,WAAW,CAACS,KAAD,CAAvC,EAAgD;MAC/C,MAAM,IAAIX,UAAJ,CAAe,wGAAf,CAAN;IACA;;IACD,IAAIU,KAAK,KAAKC,KAAd,EAAqB;MACpB,OAAO,KAAP;IACA;EACD;;EACD,OAAO,IAAP;AACA,CApBD"},"metadata":{},"sourceType":"script"}