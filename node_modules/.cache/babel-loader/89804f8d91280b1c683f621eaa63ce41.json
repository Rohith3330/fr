{"ast":null,"code":"'use strict';\n\nconst baseEncodeTables = {\n  26: 'abcdefghijklmnopqrstuvwxyz',\n  32: '123456789abcdefghjkmnpqrstuvwxyz',\n  // no 0lio\n  36: '0123456789abcdefghijklmnopqrstuvwxyz',\n  49: 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ',\n  // no lIO\n  52: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  58: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ',\n  // no 0lIO\n  62: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  64: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_'\n};\n\nfunction encodeBufferToBase(buffer, base) {\n  const encodeTable = baseEncodeTables[base];\n\n  if (!encodeTable) {\n    throw new Error('Unknown encoding base' + base);\n  }\n\n  const readLength = buffer.length;\n\n  const Big = require('big.js');\n\n  Big.RM = Big.DP = 0;\n  let b = new Big(0);\n\n  for (let i = readLength - 1; i >= 0; i--) {\n    b = b.times(256).plus(buffer[i]);\n  }\n\n  let output = '';\n\n  while (b.gt(0)) {\n    output = encodeTable[b.mod(base)] + output;\n    b = b.div(base);\n  }\n\n  Big.DP = 20;\n  Big.RM = 1;\n  return output;\n}\n\nlet createMd4 = undefined;\nlet BatchedHash = undefined;\n\nfunction getHashDigest(buffer, hashType, digestType, maxLength) {\n  hashType = hashType || 'md4';\n  maxLength = maxLength || 9999;\n  let hash;\n\n  try {\n    hash = require('crypto').createHash(hashType);\n  } catch (error) {\n    if (error.code === 'ERR_OSSL_EVP_UNSUPPORTED' && hashType === 'md4') {\n      if (createMd4 === undefined) {\n        createMd4 = require('./hash/md4');\n\n        if (BatchedHash === undefined) {\n          BatchedHash = require('./hash/BatchedHash');\n        }\n      }\n\n      hash = new BatchedHash(createMd4());\n    }\n\n    if (!hash) {\n      throw error;\n    }\n  }\n\n  hash.update(buffer);\n\n  if (digestType === 'base26' || digestType === 'base32' || digestType === 'base36' || digestType === 'base49' || digestType === 'base52' || digestType === 'base58' || digestType === 'base62') {\n    return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(0, maxLength);\n  } else {\n    return hash.digest(digestType || 'hex').substr(0, maxLength);\n  }\n}\n\nmodule.exports = getHashDigest;","map":{"version":3,"names":["baseEncodeTables","encodeBufferToBase","buffer","base","encodeTable","Error","readLength","length","Big","require","RM","DP","b","i","times","plus","output","gt","mod","div","createMd4","undefined","BatchedHash","getHashDigest","hashType","digestType","maxLength","hash","createHash","error","code","update","digest","substr","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/loader-utils/lib/getHashDigest.js"],"sourcesContent":["'use strict';\n\nconst baseEncodeTables = {\n  26: 'abcdefghijklmnopqrstuvwxyz',\n  32: '123456789abcdefghjkmnpqrstuvwxyz', // no 0lio\n  36: '0123456789abcdefghijklmnopqrstuvwxyz',\n  49: 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ', // no lIO\n  52: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  58: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ', // no 0lIO\n  62: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  64: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_',\n};\n\nfunction encodeBufferToBase(buffer, base) {\n  const encodeTable = baseEncodeTables[base];\n  if (!encodeTable) {\n    throw new Error('Unknown encoding base' + base);\n  }\n\n  const readLength = buffer.length;\n  const Big = require('big.js');\n\n  Big.RM = Big.DP = 0;\n  let b = new Big(0);\n\n  for (let i = readLength - 1; i >= 0; i--) {\n    b = b.times(256).plus(buffer[i]);\n  }\n\n  let output = '';\n  while (b.gt(0)) {\n    output = encodeTable[b.mod(base)] + output;\n    b = b.div(base);\n  }\n\n  Big.DP = 20;\n  Big.RM = 1;\n\n  return output;\n}\n\nlet createMd4 = undefined;\nlet BatchedHash = undefined;\n\nfunction getHashDigest(buffer, hashType, digestType, maxLength) {\n  hashType = hashType || 'md4';\n  maxLength = maxLength || 9999;\n\n  let hash;\n\n  try {\n    hash = require('crypto').createHash(hashType);\n  } catch (error) {\n    if (error.code === 'ERR_OSSL_EVP_UNSUPPORTED' && hashType === 'md4') {\n      if (createMd4 === undefined) {\n        createMd4 = require('./hash/md4');\n\n        if (BatchedHash === undefined) {\n          BatchedHash = require('./hash/BatchedHash');\n        }\n      }\n\n      hash = new BatchedHash(createMd4());\n    }\n\n    if (!hash) {\n      throw error;\n    }\n  }\n\n  hash.update(buffer);\n\n  if (\n    digestType === 'base26' ||\n    digestType === 'base32' ||\n    digestType === 'base36' ||\n    digestType === 'base49' ||\n    digestType === 'base52' ||\n    digestType === 'base58' ||\n    digestType === 'base62'\n  ) {\n    return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(\n      0,\n      maxLength\n    );\n  } else {\n    return hash.digest(digestType || 'hex').substr(0, maxLength);\n  }\n}\n\nmodule.exports = getHashDigest;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}