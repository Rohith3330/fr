{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path_1 = require(\"path\");\n\nconst memfs_1 = require(\"memfs\");\n/**\n * It's an implementation of FileSystem interface which reads and writes to the in-memory file system.\n *\n * @param realFileSystem\n */\n\n\nfunction createMemFileSystem(realFileSystem) {\n  function exists(path) {\n    return memfs_1.fs.existsSync(realFileSystem.normalizePath(path));\n  }\n\n  function readStats(path) {\n    return exists(path) ? memfs_1.fs.statSync(realFileSystem.normalizePath(path)) : undefined;\n  }\n\n  function readFile(path, encoding) {\n    const stats = readStats(path);\n\n    if (stats && stats.isFile()) {\n      return memfs_1.fs.readFileSync(realFileSystem.normalizePath(path), {\n        encoding: encoding\n      }).toString();\n    }\n  }\n\n  function readDir(path) {\n    const stats = readStats(path);\n\n    if (stats && stats.isDirectory()) {\n      return memfs_1.fs.readdirSync(realFileSystem.normalizePath(path), {\n        withFileTypes: true\n      });\n    }\n\n    return [];\n  }\n\n  function createDir(path) {\n    memfs_1.fs.mkdirSync(realFileSystem.normalizePath(path), {\n      recursive: true\n    });\n  }\n\n  function writeFile(path, data) {\n    if (!exists(path_1.dirname(path))) {\n      createDir(path_1.dirname(path));\n    }\n\n    memfs_1.fs.writeFileSync(realFileSystem.normalizePath(path), data);\n  }\n\n  function deleteFile(path) {\n    if (exists(path)) {\n      memfs_1.fs.unlinkSync(realFileSystem.normalizePath(path));\n    }\n  }\n\n  function updateTimes(path, atime, mtime) {\n    if (exists(path)) {\n      memfs_1.fs.utimesSync(realFileSystem.normalizePath(path), atime, mtime);\n    }\n  }\n\n  return Object.assign(Object.assign({}, realFileSystem), {\n    exists(path) {\n      return exists(realFileSystem.realPath(path));\n    },\n\n    readFile(path, encoding) {\n      return readFile(realFileSystem.realPath(path), encoding);\n    },\n\n    readDir(path) {\n      return readDir(realFileSystem.realPath(path));\n    },\n\n    readStats(path) {\n      return readStats(realFileSystem.realPath(path));\n    },\n\n    writeFile(path, data) {\n      writeFile(realFileSystem.realPath(path), data);\n    },\n\n    deleteFile(path) {\n      deleteFile(realFileSystem.realPath(path));\n    },\n\n    createDir(path) {\n      createDir(realFileSystem.realPath(path));\n    },\n\n    updateTimes(path, atime, mtime) {\n      updateTimes(realFileSystem.realPath(path), atime, mtime);\n    },\n\n    clearCache() {\n      realFileSystem.clearCache();\n    }\n\n  });\n}\n\nexports.createMemFileSystem = createMemFileSystem;","map":{"version":3,"names":["Object","defineProperty","exports","value","path_1","require","memfs_1","createMemFileSystem","realFileSystem","exists","path","fs","existsSync","normalizePath","readStats","statSync","undefined","readFile","encoding","stats","isFile","readFileSync","toString","readDir","isDirectory","readdirSync","withFileTypes","createDir","mkdirSync","recursive","writeFile","data","dirname","writeFileSync","deleteFile","unlinkSync","updateTimes","atime","mtime","utimesSync","assign","realPath","clearCache"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/fork-ts-checker-webpack-plugin/lib/typescript-reporter/file-system/MemFileSystem.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path_1 = require(\"path\");\nconst memfs_1 = require(\"memfs\");\n/**\n * It's an implementation of FileSystem interface which reads and writes to the in-memory file system.\n *\n * @param realFileSystem\n */\nfunction createMemFileSystem(realFileSystem) {\n    function exists(path) {\n        return memfs_1.fs.existsSync(realFileSystem.normalizePath(path));\n    }\n    function readStats(path) {\n        return exists(path) ? memfs_1.fs.statSync(realFileSystem.normalizePath(path)) : undefined;\n    }\n    function readFile(path, encoding) {\n        const stats = readStats(path);\n        if (stats && stats.isFile()) {\n            return memfs_1.fs\n                .readFileSync(realFileSystem.normalizePath(path), { encoding: encoding })\n                .toString();\n        }\n    }\n    function readDir(path) {\n        const stats = readStats(path);\n        if (stats && stats.isDirectory()) {\n            return memfs_1.fs.readdirSync(realFileSystem.normalizePath(path), {\n                withFileTypes: true,\n            });\n        }\n        return [];\n    }\n    function createDir(path) {\n        memfs_1.fs.mkdirSync(realFileSystem.normalizePath(path), { recursive: true });\n    }\n    function writeFile(path, data) {\n        if (!exists(path_1.dirname(path))) {\n            createDir(path_1.dirname(path));\n        }\n        memfs_1.fs.writeFileSync(realFileSystem.normalizePath(path), data);\n    }\n    function deleteFile(path) {\n        if (exists(path)) {\n            memfs_1.fs.unlinkSync(realFileSystem.normalizePath(path));\n        }\n    }\n    function updateTimes(path, atime, mtime) {\n        if (exists(path)) {\n            memfs_1.fs.utimesSync(realFileSystem.normalizePath(path), atime, mtime);\n        }\n    }\n    return Object.assign(Object.assign({}, realFileSystem), { exists(path) {\n            return exists(realFileSystem.realPath(path));\n        },\n        readFile(path, encoding) {\n            return readFile(realFileSystem.realPath(path), encoding);\n        },\n        readDir(path) {\n            return readDir(realFileSystem.realPath(path));\n        },\n        readStats(path) {\n            return readStats(realFileSystem.realPath(path));\n        },\n        writeFile(path, data) {\n            writeFile(realFileSystem.realPath(path), data);\n        },\n        deleteFile(path) {\n            deleteFile(realFileSystem.realPath(path));\n        },\n        createDir(path) {\n            createDir(realFileSystem.realPath(path));\n        },\n        updateTimes(path, atime, mtime) {\n            updateTimes(realFileSystem.realPath(path), atime, mtime);\n        },\n        clearCache() {\n            realFileSystem.clearCache();\n        } });\n}\nexports.createMemFileSystem = createMemFileSystem;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,OAAD,CAAvB;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,mBAAT,CAA6BC,cAA7B,EAA6C;EACzC,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;IAClB,OAAOJ,OAAO,CAACK,EAAR,CAAWC,UAAX,CAAsBJ,cAAc,CAACK,aAAf,CAA6BH,IAA7B,CAAtB,CAAP;EACH;;EACD,SAASI,SAAT,CAAmBJ,IAAnB,EAAyB;IACrB,OAAOD,MAAM,CAACC,IAAD,CAAN,GAAeJ,OAAO,CAACK,EAAR,CAAWI,QAAX,CAAoBP,cAAc,CAACK,aAAf,CAA6BH,IAA7B,CAApB,CAAf,GAAyEM,SAAhF;EACH;;EACD,SAASC,QAAT,CAAkBP,IAAlB,EAAwBQ,QAAxB,EAAkC;IAC9B,MAAMC,KAAK,GAAGL,SAAS,CAACJ,IAAD,CAAvB;;IACA,IAAIS,KAAK,IAAIA,KAAK,CAACC,MAAN,EAAb,EAA6B;MACzB,OAAOd,OAAO,CAACK,EAAR,CACFU,YADE,CACWb,cAAc,CAACK,aAAf,CAA6BH,IAA7B,CADX,EAC+C;QAAEQ,QAAQ,EAAEA;MAAZ,CAD/C,EAEFI,QAFE,EAAP;IAGH;EACJ;;EACD,SAASC,OAAT,CAAiBb,IAAjB,EAAuB;IACnB,MAAMS,KAAK,GAAGL,SAAS,CAACJ,IAAD,CAAvB;;IACA,IAAIS,KAAK,IAAIA,KAAK,CAACK,WAAN,EAAb,EAAkC;MAC9B,OAAOlB,OAAO,CAACK,EAAR,CAAWc,WAAX,CAAuBjB,cAAc,CAACK,aAAf,CAA6BH,IAA7B,CAAvB,EAA2D;QAC9DgB,aAAa,EAAE;MAD+C,CAA3D,CAAP;IAGH;;IACD,OAAO,EAAP;EACH;;EACD,SAASC,SAAT,CAAmBjB,IAAnB,EAAyB;IACrBJ,OAAO,CAACK,EAAR,CAAWiB,SAAX,CAAqBpB,cAAc,CAACK,aAAf,CAA6BH,IAA7B,CAArB,EAAyD;MAAEmB,SAAS,EAAE;IAAb,CAAzD;EACH;;EACD,SAASC,SAAT,CAAmBpB,IAAnB,EAAyBqB,IAAzB,EAA+B;IAC3B,IAAI,CAACtB,MAAM,CAACL,MAAM,CAAC4B,OAAP,CAAetB,IAAf,CAAD,CAAX,EAAmC;MAC/BiB,SAAS,CAACvB,MAAM,CAAC4B,OAAP,CAAetB,IAAf,CAAD,CAAT;IACH;;IACDJ,OAAO,CAACK,EAAR,CAAWsB,aAAX,CAAyBzB,cAAc,CAACK,aAAf,CAA6BH,IAA7B,CAAzB,EAA6DqB,IAA7D;EACH;;EACD,SAASG,UAAT,CAAoBxB,IAApB,EAA0B;IACtB,IAAID,MAAM,CAACC,IAAD,CAAV,EAAkB;MACdJ,OAAO,CAACK,EAAR,CAAWwB,UAAX,CAAsB3B,cAAc,CAACK,aAAf,CAA6BH,IAA7B,CAAtB;IACH;EACJ;;EACD,SAAS0B,WAAT,CAAqB1B,IAArB,EAA2B2B,KAA3B,EAAkCC,KAAlC,EAAyC;IACrC,IAAI7B,MAAM,CAACC,IAAD,CAAV,EAAkB;MACdJ,OAAO,CAACK,EAAR,CAAW4B,UAAX,CAAsB/B,cAAc,CAACK,aAAf,CAA6BH,IAA7B,CAAtB,EAA0D2B,KAA1D,EAAiEC,KAAjE;IACH;EACJ;;EACD,OAAOtC,MAAM,CAACwC,MAAP,CAAcxC,MAAM,CAACwC,MAAP,CAAc,EAAd,EAAkBhC,cAAlB,CAAd,EAAiD;IAAEC,MAAM,CAACC,IAAD,EAAO;MAC/D,OAAOD,MAAM,CAACD,cAAc,CAACiC,QAAf,CAAwB/B,IAAxB,CAAD,CAAb;IACH,CAFmD;;IAGpDO,QAAQ,CAACP,IAAD,EAAOQ,QAAP,EAAiB;MACrB,OAAOD,QAAQ,CAACT,cAAc,CAACiC,QAAf,CAAwB/B,IAAxB,CAAD,EAAgCQ,QAAhC,CAAf;IACH,CALmD;;IAMpDK,OAAO,CAACb,IAAD,EAAO;MACV,OAAOa,OAAO,CAACf,cAAc,CAACiC,QAAf,CAAwB/B,IAAxB,CAAD,CAAd;IACH,CARmD;;IASpDI,SAAS,CAACJ,IAAD,EAAO;MACZ,OAAOI,SAAS,CAACN,cAAc,CAACiC,QAAf,CAAwB/B,IAAxB,CAAD,CAAhB;IACH,CAXmD;;IAYpDoB,SAAS,CAACpB,IAAD,EAAOqB,IAAP,EAAa;MAClBD,SAAS,CAACtB,cAAc,CAACiC,QAAf,CAAwB/B,IAAxB,CAAD,EAAgCqB,IAAhC,CAAT;IACH,CAdmD;;IAepDG,UAAU,CAACxB,IAAD,EAAO;MACbwB,UAAU,CAAC1B,cAAc,CAACiC,QAAf,CAAwB/B,IAAxB,CAAD,CAAV;IACH,CAjBmD;;IAkBpDiB,SAAS,CAACjB,IAAD,EAAO;MACZiB,SAAS,CAACnB,cAAc,CAACiC,QAAf,CAAwB/B,IAAxB,CAAD,CAAT;IACH,CApBmD;;IAqBpD0B,WAAW,CAAC1B,IAAD,EAAO2B,KAAP,EAAcC,KAAd,EAAqB;MAC5BF,WAAW,CAAC5B,cAAc,CAACiC,QAAf,CAAwB/B,IAAxB,CAAD,EAAgC2B,KAAhC,EAAuCC,KAAvC,CAAX;IACH,CAvBmD;;IAwBpDI,UAAU,GAAG;MACTlC,cAAc,CAACkC,UAAf;IACH;;EA1BmD,CAAjD,CAAP;AA2BH;;AACDxC,OAAO,CAACK,mBAAR,GAA8BA,mBAA9B"},"metadata":{},"sourceType":"script"}