{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: () => normalizeTailwindDirectives\n});\n\nconst _log = /*#__PURE__*/_interopRequireDefault(require(\"../util/log\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction normalizeTailwindDirectives(root) {\n  let tailwindDirectives = new Set();\n  let layerDirectives = new Set();\n  let applyDirectives = new Set();\n  root.walkAtRules(atRule => {\n    if (atRule.name === \"apply\") {\n      applyDirectives.add(atRule);\n    }\n\n    if (atRule.name === \"import\") {\n      if (atRule.params === '\"tailwindcss/base\"' || atRule.params === \"'tailwindcss/base'\") {\n        atRule.name = \"tailwind\";\n        atRule.params = \"base\";\n      } else if (atRule.params === '\"tailwindcss/components\"' || atRule.params === \"'tailwindcss/components'\") {\n        atRule.name = \"tailwind\";\n        atRule.params = \"components\";\n      } else if (atRule.params === '\"tailwindcss/utilities\"' || atRule.params === \"'tailwindcss/utilities'\") {\n        atRule.name = \"tailwind\";\n        atRule.params = \"utilities\";\n      } else if (atRule.params === '\"tailwindcss/screens\"' || atRule.params === \"'tailwindcss/screens'\" || atRule.params === '\"tailwindcss/variants\"' || atRule.params === \"'tailwindcss/variants'\") {\n        atRule.name = \"tailwind\";\n        atRule.params = \"variants\";\n      }\n    }\n\n    if (atRule.name === \"tailwind\") {\n      if (atRule.params === \"screens\") {\n        atRule.params = \"variants\";\n      }\n\n      tailwindDirectives.add(atRule.params);\n    }\n\n    if ([\"layer\", \"responsive\", \"variants\"].includes(atRule.name)) {\n      if ([\"responsive\", \"variants\"].includes(atRule.name)) {\n        _log.default.warn(`${atRule.name}-at-rule-deprecated`, [`The \\`@${atRule.name}\\` directive has been deprecated in Tailwind CSS v3.0.`, `Use \\`@layer utilities\\` or \\`@layer components\\` instead.`, \"https://tailwindcss.com/docs/upgrade-guide#replace-variants-with-layer\"]);\n      }\n\n      layerDirectives.add(atRule);\n    }\n  });\n\n  if (!tailwindDirectives.has(\"base\") || !tailwindDirectives.has(\"components\") || !tailwindDirectives.has(\"utilities\")) {\n    for (let rule of layerDirectives) {\n      if (rule.name === \"layer\" && [\"base\", \"components\", \"utilities\"].includes(rule.params)) {\n        if (!tailwindDirectives.has(rule.params)) {\n          throw rule.error(`\\`@layer ${rule.params}\\` is used but no matching \\`@tailwind ${rule.params}\\` directive is present.`);\n        }\n      } else if (rule.name === \"responsive\") {\n        if (!tailwindDirectives.has(\"utilities\")) {\n          throw rule.error(\"`@responsive` is used but `@tailwind utilities` is missing.\");\n        }\n      } else if (rule.name === \"variants\") {\n        if (!tailwindDirectives.has(\"utilities\")) {\n          throw rule.error(\"`@variants` is used but `@tailwind utilities` is missing.\");\n        }\n      }\n    }\n  }\n\n  return {\n    tailwindDirectives,\n    applyDirectives\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","normalizeTailwindDirectives","_log","_interopRequireDefault","require","obj","__esModule","default","root","tailwindDirectives","Set","layerDirectives","applyDirectives","walkAtRules","atRule","name","add","params","includes","warn","has","rule","error"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/lib/lib/normalizeTailwindDirectives.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: ()=>normalizeTailwindDirectives\n});\nconst _log = /*#__PURE__*/ _interopRequireDefault(require(\"../util/log\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction normalizeTailwindDirectives(root) {\n    let tailwindDirectives = new Set();\n    let layerDirectives = new Set();\n    let applyDirectives = new Set();\n    root.walkAtRules((atRule)=>{\n        if (atRule.name === \"apply\") {\n            applyDirectives.add(atRule);\n        }\n        if (atRule.name === \"import\") {\n            if (atRule.params === '\"tailwindcss/base\"' || atRule.params === \"'tailwindcss/base'\") {\n                atRule.name = \"tailwind\";\n                atRule.params = \"base\";\n            } else if (atRule.params === '\"tailwindcss/components\"' || atRule.params === \"'tailwindcss/components'\") {\n                atRule.name = \"tailwind\";\n                atRule.params = \"components\";\n            } else if (atRule.params === '\"tailwindcss/utilities\"' || atRule.params === \"'tailwindcss/utilities'\") {\n                atRule.name = \"tailwind\";\n                atRule.params = \"utilities\";\n            } else if (atRule.params === '\"tailwindcss/screens\"' || atRule.params === \"'tailwindcss/screens'\" || atRule.params === '\"tailwindcss/variants\"' || atRule.params === \"'tailwindcss/variants'\") {\n                atRule.name = \"tailwind\";\n                atRule.params = \"variants\";\n            }\n        }\n        if (atRule.name === \"tailwind\") {\n            if (atRule.params === \"screens\") {\n                atRule.params = \"variants\";\n            }\n            tailwindDirectives.add(atRule.params);\n        }\n        if ([\n            \"layer\",\n            \"responsive\",\n            \"variants\"\n        ].includes(atRule.name)) {\n            if ([\n                \"responsive\",\n                \"variants\"\n            ].includes(atRule.name)) {\n                _log.default.warn(`${atRule.name}-at-rule-deprecated`, [\n                    `The \\`@${atRule.name}\\` directive has been deprecated in Tailwind CSS v3.0.`,\n                    `Use \\`@layer utilities\\` or \\`@layer components\\` instead.`,\n                    \"https://tailwindcss.com/docs/upgrade-guide#replace-variants-with-layer\", \n                ]);\n            }\n            layerDirectives.add(atRule);\n        }\n    });\n    if (!tailwindDirectives.has(\"base\") || !tailwindDirectives.has(\"components\") || !tailwindDirectives.has(\"utilities\")) {\n        for (let rule of layerDirectives){\n            if (rule.name === \"layer\" && [\n                \"base\",\n                \"components\",\n                \"utilities\"\n            ].includes(rule.params)) {\n                if (!tailwindDirectives.has(rule.params)) {\n                    throw rule.error(`\\`@layer ${rule.params}\\` is used but no matching \\`@tailwind ${rule.params}\\` directive is present.`);\n                }\n            } else if (rule.name === \"responsive\") {\n                if (!tailwindDirectives.has(\"utilities\")) {\n                    throw rule.error(\"`@responsive` is used but `@tailwind utilities` is missing.\");\n                }\n            } else if (rule.name === \"variants\") {\n                if (!tailwindDirectives.has(\"utilities\")) {\n                    throw rule.error(\"`@variants` is used but `@tailwind utilities` is missing.\");\n                }\n            }\n        }\n    }\n    return {\n        tailwindDirectives,\n        applyDirectives\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}