{"ast":null,"code":"/**\n * @fileoverview Prevent string definitions for references and prevent referencing this.refs\n * @author Tom Hastjarjanto\n */\n'use strict';\n\nconst componentUtil = require('../util/componentUtil');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  thisRefsDeprecated: 'Using this.refs is deprecated.',\n  stringInRefDeprecated: 'Using string literals in ref attributes is deprecated.'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow using string references',\n      category: 'Best Practices',\n      recommended: true,\n      url: docsUrl('no-string-refs')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        noTemplateLiterals: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const detectTemplateLiterals = context.options[0] ? context.options[0].noTemplateLiterals : false;\n    /**\n     * Checks if we are using refs\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Boolean} True if we are using refs, false if not.\n     */\n\n    function isRefsUsage(node) {\n      return !!((componentUtil.getParentES6Component(context) || componentUtil.getParentES5Component(context)) && node.object.type === 'ThisExpression' && node.property.name === 'refs');\n    }\n    /**\n     * Checks if we are using a ref attribute\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Boolean} True if we are using a ref attribute, false if not.\n     */\n\n\n    function isRefAttribute(node) {\n      return !!(node.type === 'JSXAttribute' && node.name && node.name.name === 'ref');\n    }\n    /**\n     * Checks if a node contains a string value\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Boolean} True if the node contains a string value, false if not.\n     */\n\n\n    function containsStringLiteral(node) {\n      return !!(node.value && node.value.type === 'Literal' && typeof node.value.value === 'string');\n    }\n    /**\n     * Checks if a node contains a string value within a jsx expression\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Boolean} True if the node contains a string value within a jsx expression, false if not.\n     */\n\n\n    function containsStringExpressionContainer(node) {\n      return !!(node.value && node.value.type === 'JSXExpressionContainer' && node.value.expression && (node.value.expression.type === 'Literal' && typeof node.value.expression.value === 'string' || node.value.expression.type === 'TemplateLiteral' && detectTemplateLiterals));\n    }\n\n    return {\n      MemberExpression(node) {\n        if (isRefsUsage(node)) {\n          report(context, messages.thisRefsDeprecated, 'thisRefsDeprecated', {\n            node\n          });\n        }\n      },\n\n      JSXAttribute(node) {\n        if (isRefAttribute(node) && (containsStringLiteral(node) || containsStringExpressionContainer(node))) {\n          report(context, messages.stringInRefDeprecated, 'stringInRefDeprecated', {\n            node\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["componentUtil","require","docsUrl","report","messages","thisRefsDeprecated","stringInRefDeprecated","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","noTemplateLiterals","additionalProperties","create","context","detectTemplateLiterals","options","isRefsUsage","node","getParentES6Component","getParentES5Component","object","property","name","isRefAttribute","containsStringLiteral","value","containsStringExpressionContainer","expression","MemberExpression","JSXAttribute"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/no-string-refs.js"],"sourcesContent":["/**\n * @fileoverview Prevent string definitions for references and prevent referencing this.refs\n * @author Tom Hastjarjanto\n */\n\n'use strict';\n\nconst componentUtil = require('../util/componentUtil');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  thisRefsDeprecated: 'Using this.refs is deprecated.',\n  stringInRefDeprecated: 'Using string literals in ref attributes is deprecated.',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow using string references',\n      category: 'Best Practices',\n      recommended: true,\n      url: docsUrl('no-string-refs'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        noTemplateLiterals: {\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const detectTemplateLiterals = context.options[0] ? context.options[0].noTemplateLiterals : false;\n    /**\n     * Checks if we are using refs\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Boolean} True if we are using refs, false if not.\n     */\n    function isRefsUsage(node) {\n      return !!(\n        (componentUtil.getParentES6Component(context) || componentUtil.getParentES5Component(context))\n        && node.object.type === 'ThisExpression'\n        && node.property.name === 'refs'\n      );\n    }\n\n    /**\n     * Checks if we are using a ref attribute\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Boolean} True if we are using a ref attribute, false if not.\n     */\n    function isRefAttribute(node) {\n      return !!(\n        node.type === 'JSXAttribute'\n        && node.name\n        && node.name.name === 'ref'\n      );\n    }\n\n    /**\n     * Checks if a node contains a string value\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Boolean} True if the node contains a string value, false if not.\n     */\n    function containsStringLiteral(node) {\n      return !!(\n        node.value\n        && node.value.type === 'Literal'\n        && typeof node.value.value === 'string'\n      );\n    }\n\n    /**\n     * Checks if a node contains a string value within a jsx expression\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Boolean} True if the node contains a string value within a jsx expression, false if not.\n     */\n    function containsStringExpressionContainer(node) {\n      return !!(\n        node.value\n        && node.value.type === 'JSXExpressionContainer'\n        && node.value.expression\n        && ((node.value.expression.type === 'Literal' && typeof node.value.expression.value === 'string')\n        || (node.value.expression.type === 'TemplateLiteral' && detectTemplateLiterals))\n      );\n    }\n\n    return {\n      MemberExpression(node) {\n        if (isRefsUsage(node)) {\n          report(context, messages.thisRefsDeprecated, 'thisRefsDeprecated', {\n            node,\n          });\n        }\n      },\n      JSXAttribute(node) {\n        if (\n          isRefAttribute(node)\n          && (containsStringLiteral(node) || containsStringExpressionContainer(node))\n        ) {\n          report(context, messages.stringInRefDeprecated, 'stringInRefDeprecated', {\n            node,\n          });\n        }\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}