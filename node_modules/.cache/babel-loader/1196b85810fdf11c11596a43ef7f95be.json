{"ast":null,"code":"/**\n * @fileoverview Prevent usage of unsafe lifecycle methods\n * @author Sergei Startsev\n */\n'use strict';\n\nconst astUtil = require('../util/ast');\n\nconst componentUtil = require('../util/componentUtil');\n\nconst docsUrl = require('../util/docsUrl');\n\nconst testReactVersion = require('../util/version').testReactVersion;\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  unsafeMethod: '{{method}} is unsafe for use in async rendering. Update the component to use {{newMethod}} instead. {{details}}'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of unsafe lifecycle methods',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-unsafe')\n    },\n    messages,\n    schema: [{\n      type: 'object',\n      properties: {\n        checkAliases: {\n          default: false,\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const config = context.options[0] || {};\n    const checkAliases = config.checkAliases || false;\n    const isApplicable = testReactVersion(context, '>= 16.3.0');\n\n    if (!isApplicable) {\n      return {};\n    }\n\n    const unsafe = {\n      UNSAFE_componentWillMount: {\n        newMethod: 'componentDidMount',\n        details: 'See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html.'\n      },\n      UNSAFE_componentWillReceiveProps: {\n        newMethod: 'getDerivedStateFromProps',\n        details: 'See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html.'\n      },\n      UNSAFE_componentWillUpdate: {\n        newMethod: 'componentDidUpdate',\n        details: 'See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html.'\n      }\n    };\n\n    if (checkAliases) {\n      unsafe.componentWillMount = unsafe.UNSAFE_componentWillMount;\n      unsafe.componentWillReceiveProps = unsafe.UNSAFE_componentWillReceiveProps;\n      unsafe.componentWillUpdate = unsafe.UNSAFE_componentWillUpdate;\n    }\n    /**\n     * Returns a list of unsafe methods\n     * @returns {Array} A list of unsafe methods\n     */\n\n\n    function getUnsafeMethods() {\n      return Object.keys(unsafe);\n    }\n    /**\n     * Checks if a passed method is unsafe\n     * @param {string} method Life cycle method\n     * @returns {boolean} Returns true for unsafe methods, otherwise returns false\n     */\n\n\n    function isUnsafe(method) {\n      const unsafeMethods = getUnsafeMethods();\n      return unsafeMethods.indexOf(method) !== -1;\n    }\n    /**\n     * Reports the error for an unsafe method\n     * @param {ASTNode} node The AST node being checked\n     * @param {string} method Life cycle method\n     */\n\n\n    function checkUnsafe(node, method) {\n      if (!isUnsafe(method)) {\n        return;\n      }\n\n      const meta = unsafe[method];\n      const newMethod = meta.newMethod;\n      const details = meta.details;\n      report(context, messages.unsafeMethod, 'unsafeMethod', {\n        node,\n        data: {\n          method,\n          newMethod,\n          details\n        }\n      });\n    }\n    /**\n     * Returns life cycle methods if available\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Array} The array of methods.\n     */\n\n\n    function getLifeCycleMethods(node) {\n      const properties = astUtil.getComponentProperties(node);\n      return properties.map(property => astUtil.getPropertyName(property));\n    }\n    /**\n     * Checks life cycle methods\n     * @param {ASTNode} node The AST node being checked.\n     */\n\n\n    function checkLifeCycleMethods(node) {\n      if (componentUtil.isES5Component(node, context) || componentUtil.isES6Component(node, context)) {\n        const methods = getLifeCycleMethods(node);\n        methods.forEach(method => checkUnsafe(node, method));\n      }\n    }\n\n    return {\n      ClassDeclaration: checkLifeCycleMethods,\n      ClassExpression: checkLifeCycleMethods,\n      ObjectExpression: checkLifeCycleMethods\n    };\n  }\n\n};","map":{"version":3,"names":["astUtil","require","componentUtil","docsUrl","testReactVersion","report","messages","unsafeMethod","module","exports","meta","docs","description","category","recommended","url","schema","type","properties","checkAliases","default","additionalProperties","create","context","config","options","isApplicable","unsafe","UNSAFE_componentWillMount","newMethod","details","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","componentWillMount","componentWillReceiveProps","componentWillUpdate","getUnsafeMethods","Object","keys","isUnsafe","method","unsafeMethods","indexOf","checkUnsafe","node","data","getLifeCycleMethods","getComponentProperties","map","property","getPropertyName","checkLifeCycleMethods","isES5Component","isES6Component","methods","forEach","ClassDeclaration","ClassExpression","ObjectExpression"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/no-unsafe.js"],"sourcesContent":["/**\n * @fileoverview Prevent usage of unsafe lifecycle methods\n * @author Sergei Startsev\n */\n\n'use strict';\n\nconst astUtil = require('../util/ast');\nconst componentUtil = require('../util/componentUtil');\nconst docsUrl = require('../util/docsUrl');\nconst testReactVersion = require('../util/version').testReactVersion;\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  unsafeMethod: '{{method}} is unsafe for use in async rendering. Update the component to use {{newMethod}} instead. {{details}}',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of unsafe lifecycle methods',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-unsafe'),\n    },\n\n    messages,\n\n    schema: [\n      {\n        type: 'object',\n        properties: {\n          checkAliases: {\n            default: false,\n            type: 'boolean',\n          },\n        },\n        additionalProperties: false,\n      },\n    ],\n  },\n\n  create(context) {\n    const config = context.options[0] || {};\n    const checkAliases = config.checkAliases || false;\n\n    const isApplicable = testReactVersion(context, '>= 16.3.0');\n    if (!isApplicable) {\n      return {};\n    }\n\n    const unsafe = {\n      UNSAFE_componentWillMount: {\n        newMethod: 'componentDidMount',\n        details:\n          'See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html.',\n      },\n      UNSAFE_componentWillReceiveProps: {\n        newMethod: 'getDerivedStateFromProps',\n        details:\n          'See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html.',\n      },\n      UNSAFE_componentWillUpdate: {\n        newMethod: 'componentDidUpdate',\n        details:\n          'See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html.',\n      },\n    };\n    if (checkAliases) {\n      unsafe.componentWillMount = unsafe.UNSAFE_componentWillMount;\n      unsafe.componentWillReceiveProps = unsafe.UNSAFE_componentWillReceiveProps;\n      unsafe.componentWillUpdate = unsafe.UNSAFE_componentWillUpdate;\n    }\n\n    /**\n     * Returns a list of unsafe methods\n     * @returns {Array} A list of unsafe methods\n     */\n    function getUnsafeMethods() {\n      return Object.keys(unsafe);\n    }\n\n    /**\n     * Checks if a passed method is unsafe\n     * @param {string} method Life cycle method\n     * @returns {boolean} Returns true for unsafe methods, otherwise returns false\n     */\n    function isUnsafe(method) {\n      const unsafeMethods = getUnsafeMethods();\n      return unsafeMethods.indexOf(method) !== -1;\n    }\n\n    /**\n     * Reports the error for an unsafe method\n     * @param {ASTNode} node The AST node being checked\n     * @param {string} method Life cycle method\n     */\n    function checkUnsafe(node, method) {\n      if (!isUnsafe(method)) {\n        return;\n      }\n\n      const meta = unsafe[method];\n      const newMethod = meta.newMethod;\n      const details = meta.details;\n\n      report(context, messages.unsafeMethod, 'unsafeMethod', {\n        node,\n        data: {\n          method,\n          newMethod,\n          details,\n        },\n      });\n    }\n\n    /**\n     * Returns life cycle methods if available\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Array} The array of methods.\n     */\n    function getLifeCycleMethods(node) {\n      const properties = astUtil.getComponentProperties(node);\n      return properties.map((property) => astUtil.getPropertyName(property));\n    }\n\n    /**\n     * Checks life cycle methods\n     * @param {ASTNode} node The AST node being checked.\n     */\n    function checkLifeCycleMethods(node) {\n      if (componentUtil.isES5Component(node, context) || componentUtil.isES6Component(node, context)) {\n        const methods = getLifeCycleMethods(node);\n        methods.forEach((method) => checkUnsafe(node, method));\n      }\n    }\n\n    return {\n      ClassDeclaration: checkLifeCycleMethods,\n      ClassExpression: checkLifeCycleMethods,\n      ObjectExpression: checkLifeCycleMethods,\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}