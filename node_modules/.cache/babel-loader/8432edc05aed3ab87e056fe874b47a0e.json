{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar isNaN = require('../../helpers/isNaN');\n\nvar Type = require('../Type'); // https://262.ecma-international.org/11.0/#sec-numeric-types-number-add\n\n\nmodule.exports = function NumberAdd(x, y) {\n  if (Type(x) !== 'Number' || Type(y) !== 'Number') {\n    throw new $TypeError('Assertion failed: `x` and `y` arguments must be Numbers');\n  }\n\n  if (isNaN(x) || isNaN(y) || x === Infinity && y === -Infinity || x === -Infinity && y === Infinity) {\n    return NaN;\n  }\n\n  if (x === Infinity && y === Infinity || x === -Infinity && y === -Infinity) {\n    return x;\n  }\n\n  if (x === Infinity) {\n    return x;\n  }\n\n  if (y === Infinity) {\n    return y;\n  }\n\n  if (x === y && x === 0) {\n    return Infinity / x === -Infinity && Infinity / y === -Infinity ? -0 : +0;\n  }\n\n  if (x === -y || -x === y) {\n    return +0;\n  } // shortcut for the actual spec mechanics\n\n\n  return x + y;\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","isNaN","Type","module","exports","NumberAdd","x","y","Infinity","NaN"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2020/Number/add.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar isNaN = require('../../helpers/isNaN');\n\nvar Type = require('../Type');\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-number-add\n\nmodule.exports = function NumberAdd(x, y) {\n\tif (Type(x) !== 'Number' || Type(y) !== 'Number') {\n\t\tthrow new $TypeError('Assertion failed: `x` and `y` arguments must be Numbers');\n\t}\n\n\tif (isNaN(x) || isNaN(y) || (x === Infinity && y === -Infinity) || (x === -Infinity && y === Infinity)) {\n\t\treturn NaN;\n\t}\n\n\tif ((x === Infinity && y === Infinity) || (x === -Infinity && y === -Infinity)) {\n\t\treturn x;\n\t}\n\n\tif (x === Infinity) {\n\t\treturn x;\n\t}\n\n\tif (y === Infinity) {\n\t\treturn y;\n\t}\n\n\tif (x === y && x === 0) {\n\t\treturn Infinity / x === -Infinity && Infinity / y === -Infinity ? -0 : +0;\n\t}\n\n\tif (x === -y || -x === y) {\n\t\treturn +0;\n\t}\n\n\t// shortcut for the actual spec mechanics\n\treturn x + y;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,KAAK,GAAGF,OAAO,CAAC,qBAAD,CAAnB;;AAEA,IAAIG,IAAI,GAAGH,OAAO,CAAC,SAAD,CAAlB,C,CAEA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;EACzC,IAAIL,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAZ,IAAwBJ,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAxC,EAAkD;IACjD,MAAM,IAAIP,UAAJ,CAAe,yDAAf,CAAN;EACA;;EAED,IAAIC,KAAK,CAACK,CAAD,CAAL,IAAYL,KAAK,CAACM,CAAD,CAAjB,IAAyBD,CAAC,KAAKE,QAAN,IAAkBD,CAAC,KAAK,CAACC,QAAlD,IAAgEF,CAAC,KAAK,CAACE,QAAP,IAAmBD,CAAC,KAAKC,QAA7F,EAAwG;IACvG,OAAOC,GAAP;EACA;;EAED,IAAKH,CAAC,KAAKE,QAAN,IAAkBD,CAAC,KAAKC,QAAzB,IAAuCF,CAAC,KAAK,CAACE,QAAP,IAAmBD,CAAC,KAAK,CAACC,QAArE,EAAgF;IAC/E,OAAOF,CAAP;EACA;;EAED,IAAIA,CAAC,KAAKE,QAAV,EAAoB;IACnB,OAAOF,CAAP;EACA;;EAED,IAAIC,CAAC,KAAKC,QAAV,EAAoB;IACnB,OAAOD,CAAP;EACA;;EAED,IAAID,CAAC,KAAKC,CAAN,IAAWD,CAAC,KAAK,CAArB,EAAwB;IACvB,OAAOE,QAAQ,GAAGF,CAAX,KAAiB,CAACE,QAAlB,IAA8BA,QAAQ,GAAGD,CAAX,KAAiB,CAACC,QAAhD,GAA2D,CAAC,CAA5D,GAAgE,CAAC,CAAxE;EACA;;EAED,IAAIF,CAAC,KAAK,CAACC,CAAP,IAAY,CAACD,CAAD,KAAOC,CAAvB,EAA0B;IACzB,OAAO,CAAC,CAAR;EACA,CA3BwC,CA6BzC;;;EACA,OAAOD,CAAC,GAAGC,CAAX;AACA,CA/BD"},"metadata":{},"sourceType":"script"}