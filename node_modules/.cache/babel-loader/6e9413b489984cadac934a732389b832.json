{"ast":null,"code":"/**\n * @fileoverview Enforce that elements with ARIA roles must\n *  have all required attributes for that role.\n * @author Ethan Cohen\n */\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\nimport { roles } from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/role-has-required-aria-props'; // -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst errorMessage = role => {\n  const requiredProps = Object.keys(roles.get(role).requiredProps);\n  return {\n    message: `Elements with the ARIA role \"${role}\" must have the following attributes defined: ${requiredProps}`,\n    type: 'JSXAttribute'\n  };\n};\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      MyComponent: 'div'\n    }\n  }\n}; // Create basic test cases using all valid role types.\n\nconst basicValidityTests = [...roles.keys()].map(role => {\n  const {\n    requiredProps: requiredPropKeyValues\n  } = roles.get(role);\n  const requiredProps = Object.keys(requiredPropKeyValues);\n  const propChain = requiredProps.join(' ');\n  return {\n    code: `<div role=\"${role.toLowerCase()}\" ${propChain} />`\n  };\n});\nruleTester.run('role-has-required-aria-props', rule, {\n  valid: [{\n    code: '<Bar baz />'\n  }, {\n    code: '<MyComponent role=\"combobox\" />'\n  }, // Variables should pass, as we are only testing literals.\n  {\n    code: '<div />'\n  }, {\n    code: '<div></div>'\n  }, {\n    code: '<div role={role} />'\n  }, {\n    code: '<div role={role || \"button\"} />'\n  }, {\n    code: '<div role={role || \"foobar\"} />'\n  }, {\n    code: '<div role=\"row\" />'\n  }, {\n    code: '<span role=\"checkbox\" aria-checked=\"false\" aria-labelledby=\"foo\" tabindex=\"0\"></span>'\n  }, {\n    code: '<input role=\"checkbox\" aria-checked=\"false\" aria-labelledby=\"foo\" tabindex=\"0\" {...props} type=\"checkbox\" />'\n  }, {\n    code: '<input type=\"checkbox\" role=\"switch\" />'\n  }, {\n    code: '<MyComponent role=\"checkbox\" aria-checked=\"false\" aria-labelledby=\"foo\" tabindex=\"0\" />',\n    settings: componentsSettings\n  }].concat(basicValidityTests).map(parserOptionsMapper),\n  invalid: [// SLIDER\n  {\n    code: '<div role=\"slider\" />',\n    errors: [errorMessage('slider')]\n  }, {\n    code: '<div role=\"slider\" aria-valuemax />',\n    errors: [errorMessage('slider')]\n  }, {\n    code: '<div role=\"slider\" aria-valuemax aria-valuemin />',\n    errors: [errorMessage('slider')]\n  }, // CHECKBOX\n  {\n    code: '<div role=\"checkbox\" />',\n    errors: [errorMessage('checkbox')]\n  }, {\n    code: '<div role=\"checkbox\" checked />',\n    errors: [errorMessage('checkbox')]\n  }, {\n    code: '<div role=\"checkbox\" aria-chcked />',\n    errors: [errorMessage('checkbox')]\n  }, {\n    code: '<span role=\"checkbox\" aria-labelledby=\"foo\" tabindex=\"0\"></span>',\n    errors: [errorMessage('checkbox')]\n  }, // COMBOBOX\n  {\n    code: '<div role=\"combobox\" />',\n    errors: [errorMessage('combobox')]\n  }, {\n    code: '<div role=\"combobox\" expanded />',\n    errors: [errorMessage('combobox')]\n  }, {\n    code: '<div role=\"combobox\" aria-expandd />',\n    errors: [errorMessage('combobox')]\n  }, // SCROLLBAR\n  {\n    code: '<div role=\"scrollbar\" />',\n    errors: [errorMessage('scrollbar')]\n  }, {\n    code: '<div role=\"scrollbar\" aria-valuemax />',\n    errors: [errorMessage('scrollbar')]\n  }, {\n    code: '<div role=\"scrollbar\" aria-valuemax aria-valuemin />',\n    errors: [errorMessage('scrollbar')]\n  }, {\n    code: '<div role=\"scrollbar\" aria-valuemax aria-valuenow />',\n    errors: [errorMessage('scrollbar')]\n  }, {\n    code: '<div role=\"scrollbar\" aria-valuemin aria-valuenow />',\n    errors: [errorMessage('scrollbar')]\n  }, {\n    code: '<div role=\"heading\" />',\n    errors: [errorMessage('heading')]\n  }, {\n    code: '<div role=\"option\" />',\n    errors: [errorMessage('option')]\n  }, // Custom element\n  {\n    code: '<MyComponent role=\"combobox\" />',\n    settings: componentsSettings,\n    errors: [errorMessage('combobox')]\n  }].map(parserOptionsMapper)\n});","map":{"version":3,"names":["roles","RuleTester","parserOptionsMapper","rule","ruleTester","errorMessage","role","requiredProps","Object","keys","get","message","type","componentsSettings","components","MyComponent","basicValidityTests","map","requiredPropKeyValues","propChain","join","code","toLowerCase","run","valid","settings","concat","invalid","errors"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/role-has-required-aria-props-test.js"],"sourcesContent":["/**\n * @fileoverview Enforce that elements with ARIA roles must\n *  have all required attributes for that role.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { roles } from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport rule from '../../../src/rules/role-has-required-aria-props';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst errorMessage = (role) => {\n  const requiredProps = Object.keys(roles.get(role).requiredProps);\n\n  return {\n    message: `Elements with the ARIA role \"${role}\" must have the following attributes defined: ${requiredProps}`,\n    type: 'JSXAttribute',\n  };\n};\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      MyComponent: 'div',\n    },\n  },\n};\n\n// Create basic test cases using all valid role types.\nconst basicValidityTests = [...roles.keys()].map((role) => {\n  const {\n    requiredProps: requiredPropKeyValues,\n  } = roles.get(role);\n  const requiredProps = Object.keys(requiredPropKeyValues);\n  const propChain = requiredProps.join(' ');\n\n  return {\n    code: `<div role=\"${role.toLowerCase()}\" ${propChain} />`,\n  };\n});\n\nruleTester.run('role-has-required-aria-props', rule, {\n  valid: [\n    { code: '<Bar baz />' },\n    { code: '<MyComponent role=\"combobox\" />' },\n    // Variables should pass, as we are only testing literals.\n    { code: '<div />' },\n    { code: '<div></div>' },\n    { code: '<div role={role} />' },\n    { code: '<div role={role || \"button\"} />' },\n    { code: '<div role={role || \"foobar\"} />' },\n    { code: '<div role=\"row\" />' },\n    { code: '<span role=\"checkbox\" aria-checked=\"false\" aria-labelledby=\"foo\" tabindex=\"0\"></span>' },\n    { code: '<input role=\"checkbox\" aria-checked=\"false\" aria-labelledby=\"foo\" tabindex=\"0\" {...props} type=\"checkbox\" />' },\n    { code: '<input type=\"checkbox\" role=\"switch\" />' },\n    { code: '<MyComponent role=\"checkbox\" aria-checked=\"false\" aria-labelledby=\"foo\" tabindex=\"0\" />', settings: componentsSettings },\n  ].concat(basicValidityTests).map(parserOptionsMapper),\n\n  invalid: [\n    // SLIDER\n    { code: '<div role=\"slider\" />', errors: [errorMessage('slider')] },\n    {\n      code: '<div role=\"slider\" aria-valuemax />',\n      errors: [errorMessage('slider')],\n    },\n    {\n      code: '<div role=\"slider\" aria-valuemax aria-valuemin />',\n      errors: [errorMessage('slider')],\n    },\n\n    // CHECKBOX\n    { code: '<div role=\"checkbox\" />', errors: [errorMessage('checkbox')] },\n    { code: '<div role=\"checkbox\" checked />', errors: [errorMessage('checkbox')] },\n    {\n      code: '<div role=\"checkbox\" aria-chcked />',\n      errors: [errorMessage('checkbox')],\n    },\n    {\n      code: '<span role=\"checkbox\" aria-labelledby=\"foo\" tabindex=\"0\"></span>',\n      errors: [errorMessage('checkbox')],\n    },\n\n    // COMBOBOX\n    { code: '<div role=\"combobox\" />', errors: [errorMessage('combobox')] },\n    { code: '<div role=\"combobox\" expanded />', errors: [errorMessage('combobox')] },\n    {\n      code: '<div role=\"combobox\" aria-expandd />',\n      errors: [errorMessage('combobox')],\n    },\n\n    // SCROLLBAR\n    { code: '<div role=\"scrollbar\" />', errors: [errorMessage('scrollbar')] },\n    {\n      code: '<div role=\"scrollbar\" aria-valuemax />',\n      errors: [errorMessage('scrollbar')],\n    },\n    {\n      code: '<div role=\"scrollbar\" aria-valuemax aria-valuemin />',\n      errors: [errorMessage('scrollbar')],\n    },\n    {\n      code: '<div role=\"scrollbar\" aria-valuemax aria-valuenow />',\n      errors: [errorMessage('scrollbar')],\n    },\n    {\n      code: '<div role=\"scrollbar\" aria-valuemin aria-valuenow />',\n      errors: [errorMessage('scrollbar')],\n    },\n    {\n      code: '<div role=\"heading\" />',\n      errors: [errorMessage('heading')],\n    },\n    {\n      code: '<div role=\"option\" />',\n      errors: [errorMessage('option')],\n    },\n    // Custom element\n    { code: '<MyComponent role=\"combobox\" />', settings: componentsSettings, errors: [errorMessage('combobox')] },\n  ].map(parserOptionsMapper),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}