{"ast":null,"code":"import e from \"postcss-value-parser\";\n\nconst s = s => {\n  const r = Object.assign({\n    preserve: !1\n  }, s);\n  return {\n    postcssPlugin: \"postcss-color-hex-alpha\",\n\n    Declaration(s) {\n      if (!/#([0-9A-Fa-f]{4}(?:[0-9A-Fa-f]{4})?)\\b/.test(s.value)) return;\n      const {\n        value: a\n      } = s,\n            n = e(a);\n      n.walk(e => {\n        if (\"function\" === e.type && \"url\" === e.value) return !1;\n        (function (e) {\n          return \"word\" === e.type && /^#([0-9A-Fa-f]{4}(?:[0-9A-Fa-f]{4})?)$/.test(e.value);\n        })(e) && t(e);\n      });\n      const l = n.toString();\n      l !== a && (s.cloneBefore({\n        value: l\n      }), r.preserve || s.remove());\n    }\n\n  };\n};\n\ns.postcss = !0;\n\nconst t = e => {\n  const s = e.value,\n        t = `0x${5 === s.length ? s.slice(1).replace(/[0-9A-f]/g, \"$&$&\") : s.slice(1)}`,\n        [r, a, n, l] = [parseInt(t.slice(2, 4), 16), parseInt(t.slice(4, 6), 16), parseInt(t.slice(6, 8), 16), Math.round(parseInt(t.slice(8, 10), 16) / 255 * 1e5) / 1e5];\n  e.value = `rgba(${r},${a},${n},${l})`;\n};\n\nexport { s as default };","map":{"version":3,"names":["e","s","r","Object","assign","preserve","postcssPlugin","Declaration","test","value","a","n","walk","type","t","l","toString","cloneBefore","remove","postcss","length","slice","replace","parseInt","Math","round","default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-color-hex-alpha/dist/index.mjs"],"sourcesContent":["import e from\"postcss-value-parser\";const s=s=>{const r=Object.assign({preserve:!1},s);return{postcssPlugin:\"postcss-color-hex-alpha\",Declaration(s){if(!/#([0-9A-Fa-f]{4}(?:[0-9A-Fa-f]{4})?)\\b/.test(s.value))return;const{value:a}=s,n=e(a);n.walk((e=>{if(\"function\"===e.type&&\"url\"===e.value)return!1;(function(e){return\"word\"===e.type&&/^#([0-9A-Fa-f]{4}(?:[0-9A-Fa-f]{4})?)$/.test(e.value)})(e)&&t(e)}));const l=n.toString();l!==a&&(s.cloneBefore({value:l}),r.preserve||s.remove())}}};s.postcss=!0;const t=e=>{const s=e.value,t=`0x${5===s.length?s.slice(1).replace(/[0-9A-f]/g,\"$&$&\"):s.slice(1)}`,[r,a,n,l]=[parseInt(t.slice(2,4),16),parseInt(t.slice(4,6),16),parseInt(t.slice(6,8),16),Math.round(parseInt(t.slice(8,10),16)/255*1e5)/1e5];e.value=`rgba(${r},${a},${n},${l})`};export{s as default};\n"],"mappings":"AAAA,OAAOA,CAAP,MAAa,sBAAb;;AAAoC,MAAMC,CAAC,GAACA,CAAC,IAAE;EAAC,MAAMC,CAAC,GAACC,MAAM,CAACC,MAAP,CAAc;IAACC,QAAQ,EAAC,CAAC;EAAX,CAAd,EAA4BJ,CAA5B,CAAR;EAAuC,OAAM;IAACK,aAAa,EAAC,yBAAf;;IAAyCC,WAAW,CAACN,CAAD,EAAG;MAAC,IAAG,CAAC,yCAAyCO,IAAzC,CAA8CP,CAAC,CAACQ,KAAhD,CAAJ,EAA2D;MAAO,MAAK;QAACA,KAAK,EAACC;MAAP,IAAUT,CAAf;MAAA,MAAiBU,CAAC,GAACX,CAAC,CAACU,CAAD,CAApB;MAAwBC,CAAC,CAACC,IAAF,CAAQZ,CAAC,IAAE;QAAC,IAAG,eAAaA,CAAC,CAACa,IAAf,IAAqB,UAAQb,CAAC,CAACS,KAAlC,EAAwC,OAAM,CAAC,CAAP;QAAS,CAAC,UAAST,CAAT,EAAW;UAAC,OAAM,WAASA,CAAC,CAACa,IAAX,IAAiB,yCAAyCL,IAAzC,CAA8CR,CAAC,CAACS,KAAhD,CAAvB;QAA8E,CAA3F,EAA6FT,CAA7F,KAAiGc,CAAC,CAACd,CAAD,CAAlG;MAAsG,CAAnK;MAAsK,MAAMe,CAAC,GAACJ,CAAC,CAACK,QAAF,EAAR;MAAqBD,CAAC,KAAGL,CAAJ,KAAQT,CAAC,CAACgB,WAAF,CAAc;QAACR,KAAK,EAACM;MAAP,CAAd,GAAyBb,CAAC,CAACG,QAAF,IAAYJ,CAAC,CAACiB,MAAF,EAA7C;IAAyD;;EAAtY,CAAN;AAA8Y,CAAjc;;AAAkcjB,CAAC,CAACkB,OAAF,GAAU,CAAC,CAAX;;AAAa,MAAML,CAAC,GAACd,CAAC,IAAE;EAAC,MAAMC,CAAC,GAACD,CAAC,CAACS,KAAV;EAAA,MAAgBK,CAAC,GAAE,KAAI,MAAIb,CAAC,CAACmB,MAAN,GAAanB,CAAC,CAACoB,KAAF,CAAQ,CAAR,EAAWC,OAAX,CAAmB,WAAnB,EAA+B,MAA/B,CAAb,GAAoDrB,CAAC,CAACoB,KAAF,CAAQ,CAAR,CAAW,EAAtF;EAAA,MAAwF,CAACnB,CAAD,EAAGQ,CAAH,EAAKC,CAAL,EAAOI,CAAP,IAAU,CAACQ,QAAQ,CAACT,CAAC,CAACO,KAAF,CAAQ,CAAR,EAAU,CAAV,CAAD,EAAc,EAAd,CAAT,EAA2BE,QAAQ,CAACT,CAAC,CAACO,KAAF,CAAQ,CAAR,EAAU,CAAV,CAAD,EAAc,EAAd,CAAnC,EAAqDE,QAAQ,CAACT,CAAC,CAACO,KAAF,CAAQ,CAAR,EAAU,CAAV,CAAD,EAAc,EAAd,CAA7D,EAA+EG,IAAI,CAACC,KAAL,CAAWF,QAAQ,CAACT,CAAC,CAACO,KAAF,CAAQ,CAAR,EAAU,EAAV,CAAD,EAAe,EAAf,CAAR,GAA2B,GAA3B,GAA+B,GAA1C,IAA+C,GAA9H,CAAlG;EAAqOrB,CAAC,CAACS,KAAF,GAAS,QAAOP,CAAE,IAAGQ,CAAE,IAAGC,CAAE,IAAGI,CAAE,GAAjC;AAAoC,CAArR;;AAAsR,SAAOd,CAAC,IAAIyB,OAAZ"},"metadata":{},"sourceType":"module"}