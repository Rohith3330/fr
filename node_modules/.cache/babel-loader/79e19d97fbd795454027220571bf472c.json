{"ast":null,"code":"/**\n * @fileoverview Rule to disallow unsafe optional chaining\n * @author Yeon JuAn\n */\n\"use strict\";\n\nconst UNSAFE_ARITHMETIC_OPERATORS = new Set([\"+\", \"-\", \"/\", \"*\", \"%\", \"**\"]);\nconst UNSAFE_ASSIGNMENT_OPERATORS = new Set([\"+=\", \"-=\", \"/=\", \"*=\", \"%=\", \"**=\"]);\nconst UNSAFE_RELATIONAL_OPERATORS = new Set([\"in\", \"instanceof\"]);\n/**\n * Checks whether a node is a destructuring pattern or not\n * @param {ASTNode} node node to check\n * @returns {boolean} `true` if a node is a destructuring pattern, otherwise `false`\n */\n\nfunction isDestructuringPattern(node) {\n  return node.type === \"ObjectPattern\" || node.type === \"ArrayPattern\";\n}\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"Disallow use of optional chaining in contexts where the `undefined` value is not allowed\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-unsafe-optional-chaining\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        disallowArithmeticOperators: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    fixable: null,\n    messages: {\n      unsafeOptionalChain: \"Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.\",\n      unsafeArithmetic: \"Unsafe arithmetic operation on optional chaining. It can result in NaN.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const disallowArithmeticOperators = options.disallowArithmeticOperators || false;\n    /**\n     * Reports unsafe usage of optional chaining\n     * @param {ASTNode} node node to report\n     * @returns {void}\n     */\n\n    function reportUnsafeUsage(node) {\n      context.report({\n        messageId: \"unsafeOptionalChain\",\n        node\n      });\n    }\n    /**\n     * Reports unsafe arithmetic operation on optional chaining\n     * @param {ASTNode} node node to report\n     * @returns {void}\n     */\n\n\n    function reportUnsafeArithmetic(node) {\n      context.report({\n        messageId: \"unsafeArithmetic\",\n        node\n      });\n    }\n    /**\n     * Checks and reports if a node can short-circuit with `undefined` by optional chaining.\n     * @param {ASTNode} [node] node to check\n     * @param {Function} reportFunc report function\n     * @returns {void}\n     */\n\n\n    function checkUndefinedShortCircuit(node, reportFunc) {\n      if (!node) {\n        return;\n      }\n\n      switch (node.type) {\n        case \"LogicalExpression\":\n          if (node.operator === \"||\" || node.operator === \"??\") {\n            checkUndefinedShortCircuit(node.right, reportFunc);\n          } else if (node.operator === \"&&\") {\n            checkUndefinedShortCircuit(node.left, reportFunc);\n            checkUndefinedShortCircuit(node.right, reportFunc);\n          }\n\n          break;\n\n        case \"SequenceExpression\":\n          checkUndefinedShortCircuit(node.expressions[node.expressions.length - 1], reportFunc);\n          break;\n\n        case \"ConditionalExpression\":\n          checkUndefinedShortCircuit(node.consequent, reportFunc);\n          checkUndefinedShortCircuit(node.alternate, reportFunc);\n          break;\n\n        case \"AwaitExpression\":\n          checkUndefinedShortCircuit(node.argument, reportFunc);\n          break;\n\n        case \"ChainExpression\":\n          reportFunc(node);\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * Checks unsafe usage of optional chaining\n     * @param {ASTNode} node node to check\n     * @returns {void}\n     */\n\n\n    function checkUnsafeUsage(node) {\n      checkUndefinedShortCircuit(node, reportUnsafeUsage);\n    }\n    /**\n     * Checks unsafe arithmetic operations on optional chaining\n     * @param {ASTNode} node node to check\n     * @returns {void}\n     */\n\n\n    function checkUnsafeArithmetic(node) {\n      checkUndefinedShortCircuit(node, reportUnsafeArithmetic);\n    }\n\n    return {\n      \"AssignmentExpression, AssignmentPattern\"(node) {\n        if (isDestructuringPattern(node.left)) {\n          checkUnsafeUsage(node.right);\n        }\n      },\n\n      \"ClassDeclaration, ClassExpression\"(node) {\n        checkUnsafeUsage(node.superClass);\n      },\n\n      CallExpression(node) {\n        if (!node.optional) {\n          checkUnsafeUsage(node.callee);\n        }\n      },\n\n      NewExpression(node) {\n        checkUnsafeUsage(node.callee);\n      },\n\n      VariableDeclarator(node) {\n        if (isDestructuringPattern(node.id)) {\n          checkUnsafeUsage(node.init);\n        }\n      },\n\n      MemberExpression(node) {\n        if (!node.optional) {\n          checkUnsafeUsage(node.object);\n        }\n      },\n\n      TaggedTemplateExpression(node) {\n        checkUnsafeUsage(node.tag);\n      },\n\n      ForOfStatement(node) {\n        checkUnsafeUsage(node.right);\n      },\n\n      SpreadElement(node) {\n        if (node.parent && node.parent.type !== \"ObjectExpression\") {\n          checkUnsafeUsage(node.argument);\n        }\n      },\n\n      BinaryExpression(node) {\n        if (UNSAFE_RELATIONAL_OPERATORS.has(node.operator)) {\n          checkUnsafeUsage(node.right);\n        }\n\n        if (disallowArithmeticOperators && UNSAFE_ARITHMETIC_OPERATORS.has(node.operator)) {\n          checkUnsafeArithmetic(node.right);\n          checkUnsafeArithmetic(node.left);\n        }\n      },\n\n      WithStatement(node) {\n        checkUnsafeUsage(node.object);\n      },\n\n      UnaryExpression(node) {\n        if (disallowArithmeticOperators && UNSAFE_ARITHMETIC_OPERATORS.has(node.operator)) {\n          checkUnsafeArithmetic(node.argument);\n        }\n      },\n\n      AssignmentExpression(node) {\n        if (disallowArithmeticOperators && UNSAFE_ASSIGNMENT_OPERATORS.has(node.operator)) {\n          checkUnsafeArithmetic(node.right);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["UNSAFE_ARITHMETIC_OPERATORS","Set","UNSAFE_ASSIGNMENT_OPERATORS","UNSAFE_RELATIONAL_OPERATORS","isDestructuringPattern","node","type","module","exports","meta","docs","description","recommended","url","schema","properties","disallowArithmeticOperators","default","additionalProperties","fixable","messages","unsafeOptionalChain","unsafeArithmetic","create","context","options","reportUnsafeUsage","report","messageId","reportUnsafeArithmetic","checkUndefinedShortCircuit","reportFunc","operator","right","left","expressions","length","consequent","alternate","argument","checkUnsafeUsage","checkUnsafeArithmetic","superClass","CallExpression","optional","callee","NewExpression","VariableDeclarator","id","init","MemberExpression","object","TaggedTemplateExpression","tag","ForOfStatement","SpreadElement","parent","BinaryExpression","has","WithStatement","UnaryExpression","AssignmentExpression"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-unsafe-optional-chaining.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow unsafe optional chaining\n * @author Yeon JuAn\n */\n\n\"use strict\";\n\nconst UNSAFE_ARITHMETIC_OPERATORS = new Set([\"+\", \"-\", \"/\", \"*\", \"%\", \"**\"]);\nconst UNSAFE_ASSIGNMENT_OPERATORS = new Set([\"+=\", \"-=\", \"/=\", \"*=\", \"%=\", \"**=\"]);\nconst UNSAFE_RELATIONAL_OPERATORS = new Set([\"in\", \"instanceof\"]);\n\n/**\n * Checks whether a node is a destructuring pattern or not\n * @param {ASTNode} node node to check\n * @returns {boolean} `true` if a node is a destructuring pattern, otherwise `false`\n */\nfunction isDestructuringPattern(node) {\n    return node.type === \"ObjectPattern\" || node.type === \"ArrayPattern\";\n}\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow use of optional chaining in contexts where the `undefined` value is not allowed\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-unsafe-optional-chaining\"\n        },\n        schema: [{\n            type: \"object\",\n            properties: {\n                disallowArithmeticOperators: {\n                    type: \"boolean\",\n                    default: false\n                }\n            },\n            additionalProperties: false\n        }],\n        fixable: null,\n        messages: {\n            unsafeOptionalChain: \"Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.\",\n            unsafeArithmetic: \"Unsafe arithmetic operation on optional chaining. It can result in NaN.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const disallowArithmeticOperators = (options.disallowArithmeticOperators) || false;\n\n        /**\n         * Reports unsafe usage of optional chaining\n         * @param {ASTNode} node node to report\n         * @returns {void}\n         */\n        function reportUnsafeUsage(node) {\n            context.report({\n                messageId: \"unsafeOptionalChain\",\n                node\n            });\n        }\n\n        /**\n         * Reports unsafe arithmetic operation on optional chaining\n         * @param {ASTNode} node node to report\n         * @returns {void}\n         */\n        function reportUnsafeArithmetic(node) {\n            context.report({\n                messageId: \"unsafeArithmetic\",\n                node\n            });\n        }\n\n        /**\n         * Checks and reports if a node can short-circuit with `undefined` by optional chaining.\n         * @param {ASTNode} [node] node to check\n         * @param {Function} reportFunc report function\n         * @returns {void}\n         */\n        function checkUndefinedShortCircuit(node, reportFunc) {\n            if (!node) {\n                return;\n            }\n            switch (node.type) {\n                case \"LogicalExpression\":\n                    if (node.operator === \"||\" || node.operator === \"??\") {\n                        checkUndefinedShortCircuit(node.right, reportFunc);\n                    } else if (node.operator === \"&&\") {\n                        checkUndefinedShortCircuit(node.left, reportFunc);\n                        checkUndefinedShortCircuit(node.right, reportFunc);\n                    }\n                    break;\n                case \"SequenceExpression\":\n                    checkUndefinedShortCircuit(\n                        node.expressions[node.expressions.length - 1],\n                        reportFunc\n                    );\n                    break;\n                case \"ConditionalExpression\":\n                    checkUndefinedShortCircuit(node.consequent, reportFunc);\n                    checkUndefinedShortCircuit(node.alternate, reportFunc);\n                    break;\n                case \"AwaitExpression\":\n                    checkUndefinedShortCircuit(node.argument, reportFunc);\n                    break;\n                case \"ChainExpression\":\n                    reportFunc(node);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        /**\n         * Checks unsafe usage of optional chaining\n         * @param {ASTNode} node node to check\n         * @returns {void}\n         */\n        function checkUnsafeUsage(node) {\n            checkUndefinedShortCircuit(node, reportUnsafeUsage);\n        }\n\n        /**\n         * Checks unsafe arithmetic operations on optional chaining\n         * @param {ASTNode} node node to check\n         * @returns {void}\n         */\n        function checkUnsafeArithmetic(node) {\n            checkUndefinedShortCircuit(node, reportUnsafeArithmetic);\n        }\n\n        return {\n            \"AssignmentExpression, AssignmentPattern\"(node) {\n                if (isDestructuringPattern(node.left)) {\n                    checkUnsafeUsage(node.right);\n                }\n            },\n            \"ClassDeclaration, ClassExpression\"(node) {\n                checkUnsafeUsage(node.superClass);\n            },\n            CallExpression(node) {\n                if (!node.optional) {\n                    checkUnsafeUsage(node.callee);\n                }\n            },\n            NewExpression(node) {\n                checkUnsafeUsage(node.callee);\n            },\n            VariableDeclarator(node) {\n                if (isDestructuringPattern(node.id)) {\n                    checkUnsafeUsage(node.init);\n                }\n            },\n            MemberExpression(node) {\n                if (!node.optional) {\n                    checkUnsafeUsage(node.object);\n                }\n            },\n            TaggedTemplateExpression(node) {\n                checkUnsafeUsage(node.tag);\n            },\n            ForOfStatement(node) {\n                checkUnsafeUsage(node.right);\n            },\n            SpreadElement(node) {\n                if (node.parent && node.parent.type !== \"ObjectExpression\") {\n                    checkUnsafeUsage(node.argument);\n                }\n            },\n            BinaryExpression(node) {\n                if (UNSAFE_RELATIONAL_OPERATORS.has(node.operator)) {\n                    checkUnsafeUsage(node.right);\n                }\n                if (\n                    disallowArithmeticOperators &&\n                    UNSAFE_ARITHMETIC_OPERATORS.has(node.operator)\n                ) {\n                    checkUnsafeArithmetic(node.right);\n                    checkUnsafeArithmetic(node.left);\n                }\n            },\n            WithStatement(node) {\n                checkUnsafeUsage(node.object);\n            },\n            UnaryExpression(node) {\n                if (\n                    disallowArithmeticOperators &&\n                    UNSAFE_ARITHMETIC_OPERATORS.has(node.operator)\n                ) {\n                    checkUnsafeArithmetic(node.argument);\n                }\n            },\n            AssignmentExpression(node) {\n                if (\n                    disallowArithmeticOperators &&\n                    UNSAFE_ASSIGNMENT_OPERATORS.has(node.operator)\n                ) {\n                    checkUnsafeArithmetic(node.right);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}