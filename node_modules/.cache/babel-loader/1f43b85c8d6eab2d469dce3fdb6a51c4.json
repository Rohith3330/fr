{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst {\n  ReportBase\n} = require('istanbul-lib-report');\n\nclass LcovOnlyReport extends ReportBase {\n  constructor(opts) {\n    super();\n    opts = opts || {};\n    this.file = opts.file || 'lcov.info';\n    this.projectRoot = opts.projectRoot || process.cwd();\n    this.contentWriter = null;\n  }\n\n  onStart(root, context) {\n    this.contentWriter = context.writer.writeFile(this.file);\n  }\n\n  onDetail(node) {\n    const fc = node.getFileCoverage();\n    const writer = this.contentWriter;\n    const functions = fc.f;\n    const functionMap = fc.fnMap;\n    const lines = fc.getLineCoverage();\n    const branches = fc.b;\n    const branchMap = fc.branchMap;\n    const summary = node.getCoverageSummary();\n\n    const path = require('path');\n\n    writer.println('TN:');\n    const fileName = path.relative(this.projectRoot, fc.path);\n    writer.println('SF:' + fileName);\n    Object.values(functionMap).forEach(meta => {\n      // Some versions of the instrumenter in the wild populate 'loc'\n      // but not 'decl':\n      const decl = meta.decl || meta.loc;\n      writer.println('FN:' + [decl.start.line, meta.name].join(','));\n    });\n    writer.println('FNF:' + summary.functions.total);\n    writer.println('FNH:' + summary.functions.covered);\n    Object.entries(functionMap).forEach(_ref => {\n      let [key, meta] = _ref;\n      const stats = functions[key];\n      writer.println('FNDA:' + [stats, meta.name].join(','));\n    });\n    Object.entries(lines).forEach(entry => {\n      writer.println('DA:' + entry.join(','));\n    });\n    writer.println('LF:' + summary.lines.total);\n    writer.println('LH:' + summary.lines.covered);\n    Object.entries(branches).forEach(_ref2 => {\n      let [key, branchArray] = _ref2;\n      const meta = branchMap[key];\n\n      if (meta) {\n        const {\n          line\n        } = meta.loc.start;\n        branchArray.forEach((b, i) => {\n          writer.println('BRDA:' + [line, key, i, b].join(','));\n        });\n      } else {\n        console.warn('Missing coverage entries in', fileName, key);\n      }\n    });\n    writer.println('BRF:' + summary.branches.total);\n    writer.println('BRH:' + summary.branches.covered);\n    writer.println('end_of_record');\n  }\n\n  onEnd() {\n    this.contentWriter.close();\n  }\n\n}\n\nmodule.exports = LcovOnlyReport;","map":{"version":3,"names":["ReportBase","require","LcovOnlyReport","constructor","opts","file","projectRoot","process","cwd","contentWriter","onStart","root","context","writer","writeFile","onDetail","node","fc","getFileCoverage","functions","f","functionMap","fnMap","lines","getLineCoverage","branches","b","branchMap","summary","getCoverageSummary","path","println","fileName","relative","Object","values","forEach","meta","decl","loc","start","line","name","join","total","covered","entries","key","stats","entry","branchArray","i","console","warn","onEnd","close","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/istanbul-reports/lib/lcovonly/index.js"],"sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\nconst { ReportBase } = require('istanbul-lib-report');\n\nclass LcovOnlyReport extends ReportBase {\n    constructor(opts) {\n        super();\n        opts = opts || {};\n        this.file = opts.file || 'lcov.info';\n        this.projectRoot = opts.projectRoot || process.cwd();\n        this.contentWriter = null;\n    }\n\n    onStart(root, context) {\n        this.contentWriter = context.writer.writeFile(this.file);\n    }\n\n    onDetail(node) {\n        const fc = node.getFileCoverage();\n        const writer = this.contentWriter;\n        const functions = fc.f;\n        const functionMap = fc.fnMap;\n        const lines = fc.getLineCoverage();\n        const branches = fc.b;\n        const branchMap = fc.branchMap;\n        const summary = node.getCoverageSummary();\n        const path = require('path');\n\n        writer.println('TN:');\n        const fileName = path.relative(this.projectRoot, fc.path);\n        writer.println('SF:' + fileName);\n\n        Object.values(functionMap).forEach(meta => {\n            // Some versions of the instrumenter in the wild populate 'loc'\n            // but not 'decl':\n            const decl = meta.decl || meta.loc;\n            writer.println('FN:' + [decl.start.line, meta.name].join(','));\n        });\n        writer.println('FNF:' + summary.functions.total);\n        writer.println('FNH:' + summary.functions.covered);\n\n        Object.entries(functionMap).forEach(([key, meta]) => {\n            const stats = functions[key];\n            writer.println('FNDA:' + [stats, meta.name].join(','));\n        });\n\n        Object.entries(lines).forEach(entry => {\n            writer.println('DA:' + entry.join(','));\n        });\n        writer.println('LF:' + summary.lines.total);\n        writer.println('LH:' + summary.lines.covered);\n\n        Object.entries(branches).forEach(([key, branchArray]) => {\n            const meta = branchMap[key];\n            if (meta) {\n                const { line } = meta.loc.start;\n                branchArray.forEach((b, i) => {\n                    writer.println('BRDA:' + [line, key, i, b].join(','));\n                });\n            } else {\n                console.warn('Missing coverage entries in', fileName, key);\n            }\n        });\n        writer.println('BRF:' + summary.branches.total);\n        writer.println('BRH:' + summary.branches.covered);\n        writer.println('end_of_record');\n    }\n\n    onEnd() {\n        this.contentWriter.close();\n    }\n}\n\nmodule.exports = LcovOnlyReport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}