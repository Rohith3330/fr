{"ast":null,"code":"\"use strict\";\n\nconst {\n  resolve\n} = require('path');\n\nconst {\n  statSync\n} = require('fs');\n\nconst normalizePath = require('normalize-path');\n/**\n * @template T\n * @param {T} value\n * @return {\n   T extends (null | undefined)\n     ? []\n     : T extends string\n       ? [string]\n       : T extends readonly unknown[]\n         ? T\n         : T extends Iterable<infer T>\n           ? T[]\n           : [T]\n }\n */\n\n/* istanbul ignore next */\n\n\nfunction arrify(value) {\n  // eslint-disable-next-line no-undefined\n  if (value === null || value === undefined) {\n    // @ts-ignore\n    return [];\n  }\n\n  if (Array.isArray(value)) {\n    // @ts-ignore\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    // @ts-ignore\n    return [value];\n  } // @ts-ignore\n\n\n  if (typeof value[Symbol.iterator] === 'function') {\n    // @ts-ignore\n    return [...value];\n  } // @ts-ignore\n\n\n  return [value];\n}\n/**\n * @param {string|string[]} files\n * @param {string} context\n * @returns {string[]}\n */\n\n\nfunction parseFiles(files, context) {\n  return arrify(files).map((\n  /** @type {string} */\n  file) => normalizePath(resolve(context, file)));\n}\n/**\n * @param {string|string[]} patterns\n * @param {string|string[]} extensions\n * @returns {string[]}\n */\n\n\nfunction parseFoldersToGlobs(patterns) {\n  let extensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const extensionsList = arrify(extensions);\n  const [prefix, postfix] = extensionsList.length > 1 ? ['{', '}'] : ['', ''];\n  const extensionsGlob = extensionsList.map((\n  /** @type {string} */\n  extension) => extension.replace(/^\\./u, '')).join(',');\n  return arrify(patterns).map((\n  /** @type {string} */\n  pattern) => {\n    try {\n      // The patterns are absolute because they are prepended with the context.\n      const stats = statSync(pattern);\n      /* istanbul ignore else */\n\n      if (stats.isDirectory()) {\n        return pattern.replace(/[/\\\\]*?$/u, `/**${extensionsGlob ? `/*.${prefix + extensionsGlob + postfix}` : ''}`);\n      }\n    } catch (_) {// Return the pattern as is on error.\n    }\n\n    return pattern;\n  });\n}\n/**\n * @param {string} _ key, but unused\n * @param {any} value\n */\n\n\nconst jsonStringifyReplacerSortKeys = (_, value) => {\n  /**\n   * @param {{ [x: string]: any; }} sorted\n   * @param {string | number} key\n   */\n  const insert = (sorted, key) => {\n    // eslint-disable-next-line no-param-reassign\n    sorted[key] = value[key];\n    return sorted;\n  };\n\n  return value instanceof Object && !(value instanceof Array) ? Object.keys(value).sort().reduce(insert, {}) : value;\n};\n\nmodule.exports = {\n  arrify,\n  parseFiles,\n  parseFoldersToGlobs,\n  jsonStringifyReplacerSortKeys\n};","map":{"version":3,"names":["resolve","require","statSync","normalizePath","arrify","value","undefined","Array","isArray","Symbol","iterator","parseFiles","files","context","map","file","parseFoldersToGlobs","patterns","extensions","extensionsList","prefix","postfix","length","extensionsGlob","extension","replace","join","pattern","stats","isDirectory","_","jsonStringifyReplacerSortKeys","insert","sorted","key","Object","keys","sort","reduce","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-webpack-plugin/dist/utils.js"],"sourcesContent":["\"use strict\";\n\nconst {\n  resolve\n} = require('path');\n\nconst {\n  statSync\n} = require('fs');\n\nconst normalizePath = require('normalize-path');\n/**\n * @template T\n * @param {T} value\n * @return {\n   T extends (null | undefined)\n     ? []\n     : T extends string\n       ? [string]\n       : T extends readonly unknown[]\n         ? T\n         : T extends Iterable<infer T>\n           ? T[]\n           : [T]\n }\n */\n\n/* istanbul ignore next */\n\n\nfunction arrify(value) {\n  // eslint-disable-next-line no-undefined\n  if (value === null || value === undefined) {\n    // @ts-ignore\n    return [];\n  }\n\n  if (Array.isArray(value)) {\n    // @ts-ignore\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    // @ts-ignore\n    return [value];\n  } // @ts-ignore\n\n\n  if (typeof value[Symbol.iterator] === 'function') {\n    // @ts-ignore\n    return [...value];\n  } // @ts-ignore\n\n\n  return [value];\n}\n/**\n * @param {string|string[]} files\n * @param {string} context\n * @returns {string[]}\n */\n\n\nfunction parseFiles(files, context) {\n  return arrify(files).map((\n  /** @type {string} */\n  file) => normalizePath(resolve(context, file)));\n}\n/**\n * @param {string|string[]} patterns\n * @param {string|string[]} extensions\n * @returns {string[]}\n */\n\n\nfunction parseFoldersToGlobs(patterns, extensions = []) {\n  const extensionsList = arrify(extensions);\n  const [prefix, postfix] = extensionsList.length > 1 ? ['{', '}'] : ['', ''];\n  const extensionsGlob = extensionsList.map((\n  /** @type {string} */\n  extension) => extension.replace(/^\\./u, '')).join(',');\n  return arrify(patterns).map((\n  /** @type {string} */\n  pattern) => {\n    try {\n      // The patterns are absolute because they are prepended with the context.\n      const stats = statSync(pattern);\n      /* istanbul ignore else */\n\n      if (stats.isDirectory()) {\n        return pattern.replace(/[/\\\\]*?$/u, `/**${extensionsGlob ? `/*.${prefix + extensionsGlob + postfix}` : ''}`);\n      }\n    } catch (_) {// Return the pattern as is on error.\n    }\n\n    return pattern;\n  });\n}\n/**\n * @param {string} _ key, but unused\n * @param {any} value\n */\n\n\nconst jsonStringifyReplacerSortKeys = (_, value) => {\n  /**\n   * @param {{ [x: string]: any; }} sorted\n   * @param {string | number} key\n   */\n  const insert = (sorted, key) => {\n    // eslint-disable-next-line no-param-reassign\n    sorted[key] = value[key];\n    return sorted;\n  };\n\n  return value instanceof Object && !(value instanceof Array) ? Object.keys(value).sort().reduce(insert, {}) : value;\n};\n\nmodule.exports = {\n  arrify,\n  parseFiles,\n  parseFoldersToGlobs,\n  jsonStringifyReplacerSortKeys\n};"],"mappings":"AAAA;;AAEA,MAAM;EACJA;AADI,IAEFC,OAAO,CAAC,MAAD,CAFX;;AAIA,MAAM;EACJC;AADI,IAEFD,OAAO,CAAC,IAAD,CAFX;;AAIA,MAAME,aAAa,GAAGF,OAAO,CAAC,gBAAD,CAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,SAASG,MAAT,CAAgBC,KAAhB,EAAuB;EACrB;EACA,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;IACzC;IACA,OAAO,EAAP;EACD;;EAED,IAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;IACxB;IACA,OAAOA,KAAP;EACD;;EAED,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B;IACA,OAAO,CAACA,KAAD,CAAP;EACD,CAfoB,CAenB;;;EAGF,IAAI,OAAOA,KAAK,CAACI,MAAM,CAACC,QAAR,CAAZ,KAAkC,UAAtC,EAAkD;IAChD;IACA,OAAO,CAAC,GAAGL,KAAJ,CAAP;EACD,CArBoB,CAqBnB;;;EAGF,OAAO,CAACA,KAAD,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASM,UAAT,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoC;EAClC,OAAOT,MAAM,CAACQ,KAAD,CAAN,CAAcE,GAAd,CAAkB;EACzB;EACAC,IAFyB,KAEhBZ,aAAa,CAACH,OAAO,CAACa,OAAD,EAAUE,IAAV,CAAR,CAFf,CAAP;AAGD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASC,mBAAT,CAA6BC,QAA7B,EAAwD;EAAA,IAAjBC,UAAiB,uEAAJ,EAAI;EACtD,MAAMC,cAAc,GAAGf,MAAM,CAACc,UAAD,CAA7B;EACA,MAAM,CAACE,MAAD,EAASC,OAAT,IAAoBF,cAAc,CAACG,MAAf,GAAwB,CAAxB,GAA4B,CAAC,GAAD,EAAM,GAAN,CAA5B,GAAyC,CAAC,EAAD,EAAK,EAAL,CAAnE;EACA,MAAMC,cAAc,GAAGJ,cAAc,CAACL,GAAf,CAAmB;EAC1C;EACAU,SAF0C,KAE5BA,SAAS,CAACC,OAAV,CAAkB,MAAlB,EAA0B,EAA1B,CAFS,EAEsBC,IAFtB,CAE2B,GAF3B,CAAvB;EAGA,OAAOtB,MAAM,CAACa,QAAD,CAAN,CAAiBH,GAAjB,CAAqB;EAC5B;EACAa,OAF4B,KAEhB;IACV,IAAI;MACF;MACA,MAAMC,KAAK,GAAG1B,QAAQ,CAACyB,OAAD,CAAtB;MACA;;MAEA,IAAIC,KAAK,CAACC,WAAN,EAAJ,EAAyB;QACvB,OAAOF,OAAO,CAACF,OAAR,CAAgB,WAAhB,EAA8B,MAAKF,cAAc,GAAI,MAAKH,MAAM,GAAGG,cAAT,GAA0BF,OAAQ,EAA3C,GAA+C,EAAG,EAAnG,CAAP;MACD;IACF,CARD,CAQE,OAAOS,CAAP,EAAU,CAAC;IACZ;;IAED,OAAOH,OAAP;EACD,CAfM,CAAP;AAgBD;AACD;AACA;AACA;AACA;;;AAGA,MAAMI,6BAA6B,GAAG,CAACD,CAAD,EAAIzB,KAAJ,KAAc;EAClD;AACF;AACA;AACA;EACE,MAAM2B,MAAM,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;IAC9B;IACAD,MAAM,CAACC,GAAD,CAAN,GAAc7B,KAAK,CAAC6B,GAAD,CAAnB;IACA,OAAOD,MAAP;EACD,CAJD;;EAMA,OAAO5B,KAAK,YAAY8B,MAAjB,IAA2B,EAAE9B,KAAK,YAAYE,KAAnB,CAA3B,GAAuD4B,MAAM,CAACC,IAAP,CAAY/B,KAAZ,EAAmBgC,IAAnB,GAA0BC,MAA1B,CAAiCN,MAAjC,EAAyC,EAAzC,CAAvD,GAAsG3B,KAA7G;AACD,CAZD;;AAcAkC,MAAM,CAACC,OAAP,GAAiB;EACfpC,MADe;EAEfO,UAFe;EAGfK,mBAHe;EAIfe;AAJe,CAAjB"},"metadata":{},"sourceType":"script"}