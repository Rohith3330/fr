{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Explorer = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _ExplorerBase = require(\"./ExplorerBase\");\n\nvar _readFile = require(\"./readFile\");\n\nvar _cacheWrapper = require(\"./cacheWrapper\");\n\nvar _getDirectory = require(\"./getDirectory\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _asyncIterator(iterable) {\n  var method;\n\n  if (typeof Symbol !== \"undefined\") {\n    if (Symbol.asyncIterator) {\n      method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      method = iterable[Symbol.iterator];\n      if (method != null) return method.call(iterable);\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n}\n\nclass Explorer extends _ExplorerBase.ExplorerBase {\n  constructor(options) {\n    super(options);\n  }\n\n  async search() {\n    let searchFrom = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();\n    const startDirectory = await (0, _getDirectory.getDirectory)(searchFrom);\n    const result = await this.searchFromDirectory(startDirectory);\n    return result;\n  }\n\n  async searchFromDirectory(dir) {\n    const absoluteDir = _path.default.resolve(process.cwd(), dir);\n\n    const run = async () => {\n      const result = await this.searchDirectory(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectory(nextDir);\n      }\n\n      const transformResult = await this.config.transform(result);\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return (0, _cacheWrapper.cacheWrapper)(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  async searchDirectory(dir) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(this.config.searchPlaces), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const place = _value;\n        const placeResult = await this.loadSearchPlace(dir, place);\n\n        if (this.shouldSearchStopWithResult(placeResult) === true) {\n          return placeResult;\n        }\n      } // config not found\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  async loadSearchPlace(dir, place) {\n    const filepath = _path.default.join(dir, place);\n\n    const fileContents = await (0, _readFile.readFile)(filepath);\n    const result = await this.createCosmiconfigResult(filepath, fileContents);\n    return result;\n  }\n\n  async loadFileContent(filepath, content) {\n    if (content === null) {\n      return null;\n    }\n\n    if (content.trim() === '') {\n      return undefined;\n    }\n\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = await loader(filepath, content);\n    return loaderResult;\n  }\n\n  async createCosmiconfigResult(filepath, content) {\n    const fileContent = await this.loadFileContent(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n    return result;\n  }\n\n  async load(filepath) {\n    this.validateFilePath(filepath);\n\n    const absoluteFilePath = _path.default.resolve(process.cwd(), filepath);\n\n    const runLoad = async () => {\n      const fileContents = await (0, _readFile.readFile)(absoluteFilePath, {\n        throwNotFound: true\n      });\n      const result = await this.createCosmiconfigResult(absoluteFilePath, fileContents);\n      const transformResult = await this.config.transform(result);\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return (0, _cacheWrapper.cacheWrapper)(this.loadCache, absoluteFilePath, runLoad);\n    }\n\n    return runLoad();\n  }\n\n}\n\nexports.Explorer = Explorer;","map":{"version":3,"mappings":"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","names":["Explorer","ExplorerBase","constructor","options","search","searchFrom","process","cwd","startDirectory","result","searchFromDirectory","dir","absoluteDir","path","resolve","run","searchDirectory","nextDir","nextDirectoryToSearch","transformResult","config","transform","searchCache","searchPlaces","place","placeResult","loadSearchPlace","shouldSearchStopWithResult","_didIteratorError","_iteratorError","filepath","join","fileContents","createCosmiconfigResult","loadFileContent","content","trim","undefined","loader","getLoaderEntryForFile","loaderResult","fileContent","loadedContentToCosmiconfigResult","load","validateFilePath","absoluteFilePath","runLoad","throwNotFound","loadCache"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\fork-ts-checker-webpack-plugin\\node_modules\\cosmiconfig\\src\\Explorer.ts"],"sourcesContent":["import path from 'path';\nimport { ExplorerBase } from './ExplorerBase';\nimport { readFile } from './readFile';\nimport { cacheWrapper } from './cacheWrapper';\nimport { getDirectory } from './getDirectory';\nimport { CosmiconfigResult, ExplorerOptions, LoadedFileContent } from './types';\n\nclass Explorer extends ExplorerBase<ExplorerOptions> {\n  public constructor(options: ExplorerOptions) {\n    super(options);\n  }\n\n  public async search(\n    searchFrom: string = process.cwd(),\n  ): Promise<CosmiconfigResult> {\n    const startDirectory = await getDirectory(searchFrom);\n    const result = await this.searchFromDirectory(startDirectory);\n\n    return result;\n  }\n\n  private async searchFromDirectory(dir: string): Promise<CosmiconfigResult> {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = async (): Promise<CosmiconfigResult> => {\n      const result = await this.searchDirectory(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectory(nextDir);\n      }\n\n      const transformResult = await this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return cacheWrapper(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  private async searchDirectory(dir: string): Promise<CosmiconfigResult> {\n    for await (const place of this.config.searchPlaces) {\n      const placeResult = await this.loadSearchPlace(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    }\n\n    // config not found\n    return null;\n  }\n\n  private async loadSearchPlace(\n    dir: string,\n    place: string,\n  ): Promise<CosmiconfigResult> {\n    const filepath = path.join(dir, place);\n    const fileContents = await readFile(filepath);\n\n    const result = await this.createCosmiconfigResult(filepath, fileContents);\n\n    return result;\n  }\n\n  private async loadFileContent(\n    filepath: string,\n    content: string | null,\n  ): Promise<LoadedFileContent> {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = await loader(filepath, content);\n    return loaderResult;\n  }\n\n  private async createCosmiconfigResult(\n    filepath: string,\n    content: string | null,\n  ): Promise<CosmiconfigResult> {\n    const fileContent = await this.loadFileContent(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n\n    return result;\n  }\n\n  public async load(filepath: string): Promise<CosmiconfigResult> {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n\n    const runLoad = async (): Promise<CosmiconfigResult> => {\n      const fileContents = await readFile(absoluteFilePath, {\n        throwNotFound: true,\n      });\n\n      const result = await this.createCosmiconfigResult(\n        absoluteFilePath,\n        fileContents,\n      );\n\n      const transformResult = await this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return cacheWrapper(this.loadCache, absoluteFilePath, runLoad);\n    }\n\n    return runLoad();\n  }\n}\n\nexport { Explorer };\n"]},"metadata":{},"sourceType":"script"}