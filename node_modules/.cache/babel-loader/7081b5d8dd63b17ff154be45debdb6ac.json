{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.once = once;\n\nvar _async = require(\"./async\");\n\nfunction once(fn) {\n  let result;\n  let resultP;\n  return function* () {\n    if (result) return result;\n    if (!(yield* (0, _async.isAsync)())) return result = yield* fn();\n    if (resultP) return yield* (0, _async.waitFor)(resultP);\n    let resolve, reject;\n    resultP = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    try {\n      result = yield* fn();\n      resultP = null;\n      resolve(result);\n      return result;\n    } catch (error) {\n      reject(error);\n      throw error;\n    }\n  };\n}\n\n0 && 0;","map":{"version":3,"mappings":";;;;;;;AAEA;;AAEO,SAASA,IAAT,CAAiBC,EAAjB,EAAyD;EAC9D,IAAIC,MAAJ;EACA,IAAIC,OAAJ;EACA,OAAO,aAAa;IAClB,IAAID,MAAJ,EAAY,OAAOA,MAAP;IACZ,IAAI,EAAE,OAAO,qBAAT,CAAJ,EAAyB,OAAQA,MAAM,GAAG,OAAOD,EAAE,EAA1B;IACzB,IAAIE,OAAJ,EAAa,OAAO,OAAO,oBAAQA,OAAR,CAAd;IAEb,IAAIC,OAAJ,EAAkCC,MAAlC;IACAF,OAAO,GAAG,IAAIG,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;MAClCJ,OAAO,GAAGG,GAAVH;MACAC,MAAM,GAAGG,GAATH;IAFQ,EAAVF;;IAKA,IAAI;MACFD,MAAM,GAAG,OAAOD,EAAE,EAAlBC;MAGAC,OAAO,GAAG,IAAVA;MACAC,OAAO,CAACF,MAAD,CAAPE;MACA,OAAOF,MAAP;IANF,EAOE,OAAOO,KAAP,EAAc;MACdJ,MAAM,CAACI,KAAD,CAANJ;MACA,MAAMI,KAAN;IACD;EArBH;AAuBD","names":["once","fn","result","resultP","resolve","reject","Promise","res","rej","error"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\gensync-utils\\functional.ts"],"sourcesContent":["import type { Handler } from \"gensync\";\n\nimport { isAsync, waitFor } from \"./async\";\n\nexport function once<R>(fn: () => Handler<R>): () => Handler<R> {\n  let result: R;\n  let resultP: Promise<R>;\n  return function* () {\n    if (result) return result;\n    if (!(yield* isAsync())) return (result = yield* fn());\n    if (resultP) return yield* waitFor(resultP);\n\n    let resolve: (result: R) => void, reject: (error: unknown) => void;\n    resultP = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    try {\n      result = yield* fn();\n      // Avoid keeping the promise around\n      // now that we have the result.\n      resultP = null;\n      resolve(result);\n      return result;\n    } catch (error) {\n      reject(error);\n      throw error;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}