{"ast":null,"code":"/**\n * A function that normalizes the various forms that the screens object can be\n * provided in.\n *\n * Input(s):\n *   - ['100px', '200px'] // Raw strings\n *   - { sm: '100px', md: '200px' } // Object with string values\n *   - { sm: { min: '100px' }, md: { max: '100px' } } // Object with object values\n *   - { sm: [{ min: '100px' }, { max: '200px' }] } // Object with object array (multiple values)\n *\n * Output(s):\n *   - [{ name: 'sm', values: [{ min: '100px', max: '200px' }] }] // List of objects, that contains multiple values\n */\nexport function normalizeScreens(screens) {\n  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (Array.isArray(screens)) {\n    return screens.map(screen => {\n      if (root && Array.isArray(screen)) {\n        throw new Error('The tuple syntax is not supported for `screens`.');\n      }\n\n      if (typeof screen === 'string') {\n        return {\n          name: screen.toString(),\n          values: [{\n            min: screen,\n            max: undefined\n          }]\n        };\n      }\n\n      let [name, options] = screen;\n      name = name.toString();\n\n      if (typeof options === 'string') {\n        return {\n          name,\n          values: [{\n            min: options,\n            max: undefined\n          }]\n        };\n      }\n\n      if (Array.isArray(options)) {\n        return {\n          name,\n          values: options.map(option => resolveValue(option))\n        };\n      }\n\n      return {\n        name,\n        values: [resolveValue(options)]\n      };\n    });\n  }\n\n  return normalizeScreens(Object.entries(screens ?? {}), false);\n}\n\nfunction resolveValue() {\n  let {\n    'min-width': _minWidth,\n    min = _minWidth,\n    max,\n    raw\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    min,\n    max,\n    raw\n  };\n}","map":{"version":3,"names":["normalizeScreens","screens","root","Array","isArray","map","screen","Error","name","toString","values","min","max","undefined","options","option","resolveValue","Object","entries","_minWidth","raw"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/src/util/normalizeScreens.js"],"sourcesContent":["/**\n * A function that normalizes the various forms that the screens object can be\n * provided in.\n *\n * Input(s):\n *   - ['100px', '200px'] // Raw strings\n *   - { sm: '100px', md: '200px' } // Object with string values\n *   - { sm: { min: '100px' }, md: { max: '100px' } } // Object with object values\n *   - { sm: [{ min: '100px' }, { max: '200px' }] } // Object with object array (multiple values)\n *\n * Output(s):\n *   - [{ name: 'sm', values: [{ min: '100px', max: '200px' }] }] // List of objects, that contains multiple values\n */\nexport function normalizeScreens(screens, root = true) {\n  if (Array.isArray(screens)) {\n    return screens.map((screen) => {\n      if (root && Array.isArray(screen)) {\n        throw new Error('The tuple syntax is not supported for `screens`.')\n      }\n\n      if (typeof screen === 'string') {\n        return { name: screen.toString(), values: [{ min: screen, max: undefined }] }\n      }\n\n      let [name, options] = screen\n      name = name.toString()\n\n      if (typeof options === 'string') {\n        return { name, values: [{ min: options, max: undefined }] }\n      }\n\n      if (Array.isArray(options)) {\n        return { name, values: options.map((option) => resolveValue(option)) }\n      }\n\n      return { name, values: [resolveValue(options)] }\n    })\n  }\n\n  return normalizeScreens(Object.entries(screens ?? {}), false)\n}\n\nfunction resolveValue({ 'min-width': _minWidth, min = _minWidth, max, raw } = {}) {\n  return { min, max, raw }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,CAA0BC,OAA1B,EAAgD;EAAA,IAAbC,IAAa,uEAAN,IAAM;;EACrD,IAAIC,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;IAC1B,OAAOA,OAAO,CAACI,GAAR,CAAaC,MAAD,IAAY;MAC7B,IAAIJ,IAAI,IAAIC,KAAK,CAACC,OAAN,CAAcE,MAAd,CAAZ,EAAmC;QACjC,MAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;MACD;;MAED,IAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;QAC9B,OAAO;UAAEE,IAAI,EAAEF,MAAM,CAACG,QAAP,EAAR;UAA2BC,MAAM,EAAE,CAAC;YAAEC,GAAG,EAAEL,MAAP;YAAeM,GAAG,EAAEC;UAApB,CAAD;QAAnC,CAAP;MACD;;MAED,IAAI,CAACL,IAAD,EAAOM,OAAP,IAAkBR,MAAtB;MACAE,IAAI,GAAGA,IAAI,CAACC,QAAL,EAAP;;MAEA,IAAI,OAAOK,OAAP,KAAmB,QAAvB,EAAiC;QAC/B,OAAO;UAAEN,IAAF;UAAQE,MAAM,EAAE,CAAC;YAAEC,GAAG,EAAEG,OAAP;YAAgBF,GAAG,EAAEC;UAArB,CAAD;QAAhB,CAAP;MACD;;MAED,IAAIV,KAAK,CAACC,OAAN,CAAcU,OAAd,CAAJ,EAA4B;QAC1B,OAAO;UAAEN,IAAF;UAAQE,MAAM,EAAEI,OAAO,CAACT,GAAR,CAAaU,MAAD,IAAYC,YAAY,CAACD,MAAD,CAApC;QAAhB,CAAP;MACD;;MAED,OAAO;QAAEP,IAAF;QAAQE,MAAM,EAAE,CAACM,YAAY,CAACF,OAAD,CAAb;MAAhB,CAAP;IACD,CArBM,CAAP;EAsBD;;EAED,OAAOd,gBAAgB,CAACiB,MAAM,CAACC,OAAP,CAAejB,OAAO,IAAI,EAA1B,CAAD,EAAgC,KAAhC,CAAvB;AACD;;AAED,SAASe,YAAT,GAAkF;EAAA,IAA5D;IAAE,aAAaG,SAAf;IAA0BR,GAAG,GAAGQ,SAAhC;IAA2CP,GAA3C;IAAgDQ;EAAhD,CAA4D,uEAAJ,EAAI;EAChF,OAAO;IAAET,GAAF;IAAOC,GAAP;IAAYQ;EAAZ,CAAP;AACD"},"metadata":{},"sourceType":"module"}