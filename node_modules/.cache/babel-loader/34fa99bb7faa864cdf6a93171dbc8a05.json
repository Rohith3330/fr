{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst schema = []; // const x = [];\n\nconst isEmptyArrayLiteral = node => {\n  return _lodash.default.get(node, 'init.type') === 'ArrayExpression' && _lodash.default.get(node, 'init.elements.length') === 0;\n}; // const x = new Array(); const y = Array();\n\n\nconst isEmptyArrayInstance = node => {\n  if (_lodash.default.get(node, 'init.type') === 'NewExpression' || _lodash.default.get(node, 'init.type') === 'CallExpression') {\n    return _lodash.default.get(node, 'init.callee.name') === 'Array' && _lodash.default.get(node, 'init.arguments.length') === 0;\n  }\n\n  return false;\n};\n\nconst isAnnotationOfEmptyArrayInit = node => {\n  if (_lodash.default.has(node, 'parent.parent.parent')) {\n    const parent = _lodash.default.get(node, 'parent.parent.parent');\n\n    const isVariableDeclaration = _lodash.default.get(parent, 'type') === 'VariableDeclarator';\n    return isVariableDeclaration && (isEmptyArrayLiteral(parent) || isEmptyArrayInstance(parent));\n  }\n\n  return false;\n};\n\nconst create = context => {\n  return {\n    ArrayTypeAnnotation(node) {\n      if (!isAnnotationOfEmptyArrayInit(node)) {\n        context.report({\n          fix(fixer) {\n            const rawElementType = context.getSourceCode().getText(node.elementType);\n            return fixer.replaceText(node, '$ReadOnlyArray<' + rawElementType + '>');\n          },\n\n          message: 'Use \"$ReadOnlyArray\" instead of array shorthand notation',\n          node\n        });\n      }\n    },\n\n    GenericTypeAnnotation(node) {\n      if (node.id.name === 'Array' && !isAnnotationOfEmptyArrayInit(node)) {\n        context.report({\n          fix(fixer) {\n            return fixer.replaceText(node.id, '$ReadOnlyArray');\n          },\n\n          message: 'Use \"$ReadOnlyArray\" instead of \"Array\"',\n          node\n        });\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  meta: {\n    fixable: 'code'\n  },\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_lodash","_interopRequireDefault","require","obj","__esModule","schema","isEmptyArrayLiteral","node","get","isEmptyArrayInstance","isAnnotationOfEmptyArrayInit","has","parent","isVariableDeclaration","create","context","ArrayTypeAnnotation","report","fix","fixer","rawElementType","getSourceCode","getText","elementType","replaceText","message","GenericTypeAnnotation","id","name","_default","meta","fixable","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/noMutableArray.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst schema = []; // const x = [];\n\nconst isEmptyArrayLiteral = node => {\n  return _lodash.default.get(node, 'init.type') === 'ArrayExpression' && _lodash.default.get(node, 'init.elements.length') === 0;\n}; // const x = new Array(); const y = Array();\n\n\nconst isEmptyArrayInstance = node => {\n  if (_lodash.default.get(node, 'init.type') === 'NewExpression' || _lodash.default.get(node, 'init.type') === 'CallExpression') {\n    return _lodash.default.get(node, 'init.callee.name') === 'Array' && _lodash.default.get(node, 'init.arguments.length') === 0;\n  }\n\n  return false;\n};\n\nconst isAnnotationOfEmptyArrayInit = node => {\n  if (_lodash.default.has(node, 'parent.parent.parent')) {\n    const parent = _lodash.default.get(node, 'parent.parent.parent');\n\n    const isVariableDeclaration = _lodash.default.get(parent, 'type') === 'VariableDeclarator';\n    return isVariableDeclaration && (isEmptyArrayLiteral(parent) || isEmptyArrayInstance(parent));\n  }\n\n  return false;\n};\n\nconst create = context => {\n  return {\n    ArrayTypeAnnotation(node) {\n      if (!isAnnotationOfEmptyArrayInit(node)) {\n        context.report({\n          fix(fixer) {\n            const rawElementType = context.getSourceCode().getText(node.elementType);\n            return fixer.replaceText(node, '$ReadOnlyArray<' + rawElementType + '>');\n          },\n\n          message: 'Use \"$ReadOnlyArray\" instead of array shorthand notation',\n          node\n        });\n      }\n    },\n\n    GenericTypeAnnotation(node) {\n      if (node.id.name === 'Array' && !isAnnotationOfEmptyArrayInit(node)) {\n        context.report({\n          fix(fixer) {\n            return fixer.replaceText(node.id, '$ReadOnlyArray');\n          },\n\n          message: 'Use \"$ReadOnlyArray\" instead of \"Array\"',\n          node\n        });\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  meta: {\n    fixable: 'code'\n  },\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}