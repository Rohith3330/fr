{"ast":null,"code":"#!/usr/bin/env node\n// @flow\n\"use strict\";\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _utilities = require(\"./utilities\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst windows = (array, size) => {\n  const output = [];\n\n  for (let ii = 0; ii < array.length - size + 1; ii++) {\n    output.push(array.slice(ii, ii + size));\n  }\n\n  return output;\n};\n\nconst getDocIndexRules = () => {\n  const content = _fs.default.readFileSync(_path.default.resolve(__dirname, '../../.README/README.md'), 'utf-8');\n\n  const rules = content.split('\\n').map(line => {\n    const match = /^{\"gitdown\": \"include\", \"file\": \"([^\"]+)\"}$/u.exec(line);\n\n    if (match === null) {\n      return null;\n    }\n\n    return match[1].replace('./rules/', '').replace('.md', '');\n  }).filter(rule => {\n    return rule !== null;\n  });\n\n  if (rules.length === 0) {\n    throw new Error('Docs checker is broken - it could not extract rules from docs index file.');\n  }\n\n  return rules;\n};\n\nconst hasCorrectAssertions = (docPath, name) => {\n  const content = _fs.default.readFileSync(docPath, 'utf-8');\n\n  const match = /<!-- assertions ([A-Za-z]+) -->/u.exec(content);\n\n  if (match === null) {\n    return false;\n  }\n\n  return match[1] === name;\n};\n/**\n * Performed checks:\n *  - file `/.README/rules/<rule>.md` exists\n *  - file `/.README/rules/<rule>.md` contains correct assertions placeholder (`<!-- assertions ... -->`)\n *  - rule is included in gitdown directive in `/.README/README.md`\n *  - rules in `/.README/README.md` are alphabetically sorted\n */\n\n\nconst checkDocs = rulesNames => {\n  const docIndexRules = getDocIndexRules();\n  const sorted = windows(docIndexRules, 2).every(chunk => {\n    return chunk[0] < chunk[1];\n  });\n\n  if (!sorted) {\n    throw new Error('Rules are not alphabetically sorted in `.README/README.md` file.');\n  }\n\n  const invalid = rulesNames.filter(names => {\n    const docPath = _path.default.resolve(__dirname, '../../.README/rules', names[1] + '.md');\n\n    const docExists = (0, _utilities.isFile)(docPath);\n    const inIndex = docIndexRules.includes(names[1]);\n    const hasAssertions = docExists ? hasCorrectAssertions(docPath, names[0]) : false;\n    return !(docExists && inIndex && hasAssertions);\n  });\n\n  if (invalid.length > 0) {\n    const invalidList = invalid.map(names => {\n      return names[0];\n    }).join(', ');\n    throw new Error('Docs checker encountered an error in: ' + invalidList + '. ' + 'Make sure that for every rule you created documentation file with assertions placeholder in camelCase ' + 'and included the file path in `.README/README.md` file.');\n  }\n};\n\ncheckDocs((0, _utilities.getRules)());","map":{"version":3,"names":["_fs","_interopRequireDefault","require","_path","_utilities","obj","__esModule","default","windows","array","size","output","ii","length","push","slice","getDocIndexRules","content","readFileSync","resolve","__dirname","rules","split","map","line","match","exec","replace","filter","rule","Error","hasCorrectAssertions","docPath","name","checkDocs","rulesNames","docIndexRules","sorted","every","chunk","invalid","names","docExists","isFile","inIndex","includes","hasAssertions","invalidList","join","getRules"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/bin/checkDocs.js"],"sourcesContent":["#!/usr/bin/env node\n// @flow\n\"use strict\";\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _utilities = require(\"./utilities\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst windows = (array, size) => {\n  const output = [];\n\n  for (let ii = 0; ii < array.length - size + 1; ii++) {\n    output.push(array.slice(ii, ii + size));\n  }\n\n  return output;\n};\n\nconst getDocIndexRules = () => {\n  const content = _fs.default.readFileSync(_path.default.resolve(__dirname, '../../.README/README.md'), 'utf-8');\n\n  const rules = content.split('\\n').map(line => {\n    const match = /^{\"gitdown\": \"include\", \"file\": \"([^\"]+)\"}$/u.exec(line);\n\n    if (match === null) {\n      return null;\n    }\n\n    return match[1].replace('./rules/', '').replace('.md', '');\n  }).filter(rule => {\n    return rule !== null;\n  });\n\n  if (rules.length === 0) {\n    throw new Error('Docs checker is broken - it could not extract rules from docs index file.');\n  }\n\n  return rules;\n};\n\nconst hasCorrectAssertions = (docPath, name) => {\n  const content = _fs.default.readFileSync(docPath, 'utf-8');\n\n  const match = /<!-- assertions ([A-Za-z]+) -->/u.exec(content);\n\n  if (match === null) {\n    return false;\n  }\n\n  return match[1] === name;\n};\n/**\n * Performed checks:\n *  - file `/.README/rules/<rule>.md` exists\n *  - file `/.README/rules/<rule>.md` contains correct assertions placeholder (`<!-- assertions ... -->`)\n *  - rule is included in gitdown directive in `/.README/README.md`\n *  - rules in `/.README/README.md` are alphabetically sorted\n */\n\n\nconst checkDocs = rulesNames => {\n  const docIndexRules = getDocIndexRules();\n  const sorted = windows(docIndexRules, 2).every(chunk => {\n    return chunk[0] < chunk[1];\n  });\n\n  if (!sorted) {\n    throw new Error('Rules are not alphabetically sorted in `.README/README.md` file.');\n  }\n\n  const invalid = rulesNames.filter(names => {\n    const docPath = _path.default.resolve(__dirname, '../../.README/rules', names[1] + '.md');\n\n    const docExists = (0, _utilities.isFile)(docPath);\n    const inIndex = docIndexRules.includes(names[1]);\n    const hasAssertions = docExists ? hasCorrectAssertions(docPath, names[0]) : false;\n    return !(docExists && inIndex && hasAssertions);\n  });\n\n  if (invalid.length > 0) {\n    const invalidList = invalid.map(names => {\n      return names[0];\n    }).join(', ');\n    throw new Error('Docs checker encountered an error in: ' + invalidList + '. ' + 'Make sure that for every rule you created documentation file with assertions placeholder in camelCase ' + 'and included the file path in `.README/README.md` file.');\n  }\n};\n\ncheckDocs((0, _utilities.getRules)());"],"mappings":"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"},"metadata":{},"sourceType":"script"}