{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;\n\nclass _CodeOrName {}\n\nexports._CodeOrName = _CodeOrName;\nexports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;\n\nclass Name extends _CodeOrName {\n  constructor(s) {\n    super();\n    if (!exports.IDENTIFIER.test(s)) throw new Error(\"CodeGen: name must be a valid identifier\");\n    this.str = s;\n  }\n\n  toString() {\n    return this.str;\n  }\n\n  emptyStr() {\n    return false;\n  }\n\n  get names() {\n    return {\n      [this.str]: 1\n    };\n  }\n\n}\n\nexports.Name = Name;\n\nclass _Code extends _CodeOrName {\n  constructor(code) {\n    super();\n    this._items = typeof code === \"string\" ? [code] : code;\n  }\n\n  toString() {\n    return this.str;\n  }\n\n  emptyStr() {\n    if (this._items.length > 1) return false;\n    const item = this._items[0];\n    return item === \"\" || item === '\"\"';\n  }\n\n  get str() {\n    var _a;\n\n    return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s, c) => `${s}${c}`, \"\");\n  }\n\n  get names() {\n    var _a;\n\n    return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c) => {\n      if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1;\n      return names;\n    }, {});\n  }\n\n}\n\nexports._Code = _Code;\nexports.nil = new _Code(\"\");\n\nfunction _(strs) {\n  const code = [strs[0]];\n  let i = 0;\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  while (i < args.length) {\n    addCodeArg(code, args[i]);\n    code.push(strs[++i]);\n  }\n\n  return new _Code(code);\n}\n\nexports._ = _;\nconst plus = new _Code(\"+\");\n\nfunction str(strs) {\n  const expr = [safeStringify(strs[0])];\n  let i = 0;\n\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  while (i < args.length) {\n    expr.push(plus);\n    addCodeArg(expr, args[i]);\n    expr.push(plus, safeStringify(strs[++i]));\n  }\n\n  optimize(expr);\n  return new _Code(expr);\n}\n\nexports.str = str;\n\nfunction addCodeArg(code, arg) {\n  if (arg instanceof _Code) code.push(...arg._items);else if (arg instanceof Name) code.push(arg);else code.push(interpolate(arg));\n}\n\nexports.addCodeArg = addCodeArg;\n\nfunction optimize(expr) {\n  let i = 1;\n\n  while (i < expr.length - 1) {\n    if (expr[i] === plus) {\n      const res = mergeExprItems(expr[i - 1], expr[i + 1]);\n\n      if (res !== undefined) {\n        expr.splice(i - 1, 3, res);\n        continue;\n      }\n\n      expr[i++] = \"+\";\n    }\n\n    i++;\n  }\n}\n\nfunction mergeExprItems(a, b) {\n  if (b === '\"\"') return a;\n  if (a === '\"\"') return b;\n\n  if (typeof a == \"string\") {\n    if (b instanceof Name || a[a.length - 1] !== '\"') return;\n    if (typeof b != \"string\") return `${a.slice(0, -1)}${b}\"`;\n    if (b[0] === '\"') return a.slice(0, -1) + b.slice(1);\n    return;\n  }\n\n  if (typeof b == \"string\" && b[0] === '\"' && !(a instanceof Name)) return `\"${a}${b.slice(1)}`;\n  return;\n}\n\nfunction strConcat(c1, c2) {\n  return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;\n}\n\nexports.strConcat = strConcat; // TODO do not allow arrays here\n\nfunction interpolate(x) {\n  return typeof x == \"number\" || typeof x == \"boolean\" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(\",\") : x);\n}\n\nfunction stringify(x) {\n  return new _Code(safeStringify(x));\n}\n\nexports.stringify = stringify;\n\nfunction safeStringify(x) {\n  return JSON.stringify(x).replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\");\n}\n\nexports.safeStringify = safeStringify;\n\nfunction getProperty(key) {\n  return typeof key == \"string\" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _`[${key}]`;\n}\n\nexports.getProperty = getProperty; //Does best effort to format the name properly\n\nfunction getEsmExportName(key) {\n  if (typeof key == \"string\" && exports.IDENTIFIER.test(key)) {\n    return new _Code(`${key}`);\n  }\n\n  throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);\n}\n\nexports.getEsmExportName = getEsmExportName;\n\nfunction regexpCode(rx) {\n  return new _Code(rx.toString());\n}\n\nexports.regexpCode = regexpCode;","map":{"version":3,"mappings":"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","names":["_CodeOrName","exports","Name","constructor","s","test","Error","str","toString","emptyStr","names","_Code","code","_items","length","item","_str","_a","reduce","c","_names","_","strs","i","args","addCodeArg","push","plus","expr","safeStringify","optimize","arg","interpolate","res","mergeExprItems","undefined","splice","a","b","slice","strConcat","c1","c2","x","Array","isArray","join","stringify","JSON","replace","getProperty","key","getEsmExportName","regexpCode","rx"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\compile\\codegen\\code.ts"],"sourcesContent":["export abstract class _CodeOrName {\n  abstract readonly str: string\n  abstract readonly names: UsedNames\n  abstract toString(): string\n  abstract emptyStr(): boolean\n}\n\nexport const IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i\n\nexport class Name extends _CodeOrName {\n  readonly str: string\n  constructor(s: string) {\n    super()\n    if (!IDENTIFIER.test(s)) throw new Error(\"CodeGen: name must be a valid identifier\")\n    this.str = s\n  }\n\n  toString(): string {\n    return this.str\n  }\n\n  emptyStr(): boolean {\n    return false\n  }\n\n  get names(): UsedNames {\n    return {[this.str]: 1}\n  }\n}\n\nexport class _Code extends _CodeOrName {\n  readonly _items: readonly CodeItem[]\n  private _str?: string\n  private _names?: UsedNames\n\n  constructor(code: string | readonly CodeItem[]) {\n    super()\n    this._items = typeof code === \"string\" ? [code] : code\n  }\n\n  toString(): string {\n    return this.str\n  }\n\n  emptyStr(): boolean {\n    if (this._items.length > 1) return false\n    const item = this._items[0]\n    return item === \"\" || item === '\"\"'\n  }\n\n  get str(): string {\n    return (this._str ??= this._items.reduce((s: string, c: CodeItem) => `${s}${c}`, \"\"))\n  }\n\n  get names(): UsedNames {\n    return (this._names ??= this._items.reduce((names: UsedNames, c) => {\n      if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1\n      return names\n    }, {}))\n  }\n}\n\nexport type CodeItem = Name | string | number | boolean | null\n\nexport type UsedNames = Record<string, number | undefined>\n\nexport type Code = _Code | Name\n\nexport type SafeExpr = Code | number | boolean | null\n\nexport const nil = new _Code(\"\")\n\ntype CodeArg = SafeExpr | string | undefined\n\nexport function _(strs: TemplateStringsArray, ...args: CodeArg[]): _Code {\n  const code: CodeItem[] = [strs[0]]\n  let i = 0\n  while (i < args.length) {\n    addCodeArg(code, args[i])\n    code.push(strs[++i])\n  }\n  return new _Code(code)\n}\n\nconst plus = new _Code(\"+\")\n\nexport function str(strs: TemplateStringsArray, ...args: (CodeArg | string[])[]): _Code {\n  const expr: CodeItem[] = [safeStringify(strs[0])]\n  let i = 0\n  while (i < args.length) {\n    expr.push(plus)\n    addCodeArg(expr, args[i])\n    expr.push(plus, safeStringify(strs[++i]))\n  }\n  optimize(expr)\n  return new _Code(expr)\n}\n\nexport function addCodeArg(code: CodeItem[], arg: CodeArg | string[]): void {\n  if (arg instanceof _Code) code.push(...arg._items)\n  else if (arg instanceof Name) code.push(arg)\n  else code.push(interpolate(arg))\n}\n\nfunction optimize(expr: CodeItem[]): void {\n  let i = 1\n  while (i < expr.length - 1) {\n    if (expr[i] === plus) {\n      const res = mergeExprItems(expr[i - 1], expr[i + 1])\n      if (res !== undefined) {\n        expr.splice(i - 1, 3, res)\n        continue\n      }\n      expr[i++] = \"+\"\n    }\n    i++\n  }\n}\n\nfunction mergeExprItems(a: CodeItem, b: CodeItem): CodeItem | undefined {\n  if (b === '\"\"') return a\n  if (a === '\"\"') return b\n  if (typeof a == \"string\") {\n    if (b instanceof Name || a[a.length - 1] !== '\"') return\n    if (typeof b != \"string\") return `${a.slice(0, -1)}${b}\"`\n    if (b[0] === '\"') return a.slice(0, -1) + b.slice(1)\n    return\n  }\n  if (typeof b == \"string\" && b[0] === '\"' && !(a instanceof Name)) return `\"${a}${b.slice(1)}`\n  return\n}\n\nexport function strConcat(c1: Code, c2: Code): Code {\n  return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`\n}\n\n// TODO do not allow arrays here\nfunction interpolate(x?: string | string[] | number | boolean | null): SafeExpr | string {\n  return typeof x == \"number\" || typeof x == \"boolean\" || x === null\n    ? x\n    : safeStringify(Array.isArray(x) ? x.join(\",\") : x)\n}\n\nexport function stringify(x: unknown): Code {\n  return new _Code(safeStringify(x))\n}\n\nexport function safeStringify(x: unknown): string {\n  return JSON.stringify(x)\n    .replace(/\\u2028/g, \"\\\\u2028\")\n    .replace(/\\u2029/g, \"\\\\u2029\")\n}\n\nexport function getProperty(key: Code | string | number): Code {\n  return typeof key == \"string\" && IDENTIFIER.test(key) ? new _Code(`.${key}`) : _`[${key}]`\n}\n\n//Does best effort to format the name properly\nexport function getEsmExportName(key: Code | string | number): Code {\n  if (typeof key == \"string\" && IDENTIFIER.test(key)) {\n    return new _Code(`${key}`)\n  }\n  throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`)\n}\n\nexport function regexpCode(rx: RegExp): Code {\n  return new _Code(rx.toString())\n}\n"]},"metadata":{},"sourceType":"script"}