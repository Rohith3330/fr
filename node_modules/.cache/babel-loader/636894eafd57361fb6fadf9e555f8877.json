{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar helperPluginUtils = require('@babel/helper-plugin-utils');\n\nfunction shouldTransform(path) {\n  const {\n    node\n  } = path;\n  const functionId = node.id;\n  if (!functionId) return false;\n  const name = functionId.name;\n  const paramNameBinding = path.scope.getOwnBinding(name);\n\n  if (paramNameBinding === undefined) {\n    return false;\n  }\n\n  if (paramNameBinding.kind !== \"param\") {\n    return false;\n  }\n\n  if (paramNameBinding.identifier === paramNameBinding.path.node) {\n    return false;\n  }\n\n  return name;\n}\n\nvar index = helperPluginUtils.declare(api => {\n  api.assertVersion(\"^7.16.0\");\n  return {\n    name: \"plugin-bugfix-safari-id-destructuring-collision-in-function-expression\",\n    visitor: {\n      FunctionExpression(path) {\n        const name = shouldTransform(path);\n\n        if (name) {\n          const {\n            scope\n          } = path;\n          const newParamName = scope.generateUid(name);\n          scope.rename(name, newParamName);\n        }\n      }\n\n    }\n  };\n});\nexports[\"default\"] = index;","map":{"version":3,"mappings":";;;;;;;;AASO,SAASA,eAAT,CACLC,IADK,EAEW;EAChB,MAAM;IAAEC;EAAF,IAAWD,IAAjB;EACA,MAAME,UAAU,GAAGD,IAAI,CAACE,EAAxB;EACA,IAAI,CAACD,UAAL,EAAiB,OAAO,KAAP;EAEjB,MAAME,IAAI,GAAGF,UAAU,CAACE,IAAxB;EAGA,MAAMC,gBAAgB,GAAGL,IAAI,CAACM,KAALN,CAAWO,aAAXP,CAAyBI,IAAzBJ,CAAzB;;EACA,IAAIK,gBAAgB,KAAKG,SAAzB,EAAoC;IAMlC,OAAO,KAAP;EACD;;EACD,IAAIH,gBAAgB,CAACI,IAAjBJ,KAA0B,OAA9B,EAAuC;IAErC,OAAO,KAAP;EACD;;EAED,IAAIA,gBAAgB,CAACK,UAAjBL,KAAgCA,gBAAgB,CAACL,IAAjBK,CAAsBJ,IAA1D,EAAgE;IAG9D,OAAO,KAAP;EACD;;EAED,OAAOG,IAAP;AACD;;ACrCD,YAAeO,0BAAQC,GAAG,IAAI;EAC5BA,GAAG,CAACC,aAAJD,CAAkB,SAAlBA;EAEA,OAAO;IACLR,IAAI,EAAE,wEADD;IAGLU,OAAO,EAAE;MACPC,kBAAkB,CAACf,IAAD,EAAO;QACvB,MAAMI,IAAI,GAAGL,eAAe,CAACC,IAAD,CAA5B;;QACA,IAAII,IAAJ,EAAU;UAER,MAAM;YAAEE;UAAF,IAAYN,IAAlB;UAEA,MAAMgB,YAAY,GAAGV,KAAK,CAACW,WAANX,CAAkBF,IAAlBE,CAArB;UACAA,KAAK,CAACY,MAANZ,CAAaF,IAAbE,EAAmBU,YAAnBV;QACD;MACF;;IAVM;EAHJ,CAAP;AAHoB,CAAPK,CAAf","names":["shouldTransform","path","node","functionId","id","name","paramNameBinding","scope","getOwnBinding","undefined","kind","identifier","declare","api","assertVersion","visitor","FunctionExpression","newParamName","generateUid","rename"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\plugin-bugfix-safari-id-destructuring-collision-in-function-expression\\src\\util.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\plugin-bugfix-safari-id-destructuring-collision-in-function-expression\\src\\index.ts"],"sourcesContent":["import type { FunctionExpression } from \"@babel/types\";\nimport type { NodePath } from \"@babel/traverse\";\n\n/**\n * Check whether a function expression can be affected by\n * https://bugs.webkit.org/show_bug.cgi?id=220517\n * @param path The function expression NodePath\n * @returns the name of function id if it should be transformed, otherwise returns false\n */\nexport function shouldTransform(\n  path: NodePath<FunctionExpression>,\n): string | false {\n  const { node } = path;\n  const functionId = node.id;\n  if (!functionId) return false;\n\n  const name = functionId.name;\n  // On collision, `getOwnBinding` returns the param binding\n  // with the id binding be registered as constant violation\n  const paramNameBinding = path.scope.getOwnBinding(name);\n  if (paramNameBinding === undefined) {\n    // Case 1: the function id is injected by babel-helper-name-function, which\n    // assigns `NOT_LOCAL_BINDING` to the `functionId` and thus not registering id\n    // in scope tracking\n    // Case 2: the function id is injected by a third party plugin which does not update the\n    // scope info\n    return false;\n  }\n  if (paramNameBinding.kind !== \"param\") {\n    // the function id does not reproduce in params\n    return false;\n  }\n\n  if (paramNameBinding.identifier === paramNameBinding.path.node) {\n    // the param binding is a simple parameter\n    // e.g. (function a(a) {})\n    return false;\n  }\n\n  return name;\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport { shouldTransform } from \"./util\";\n\nexport default declare(api => {\n  api.assertVersion(\"^7.16.0\");\n\n  return {\n    name: \"plugin-bugfix-safari-id-destructuring-collision-in-function-expression\",\n\n    visitor: {\n      FunctionExpression(path) {\n        const name = shouldTransform(path);\n        if (name) {\n          // Now we have (function a([a]) {})\n          const { scope } = path;\n          // invariant: path.node.id is always an Identifier here\n          const newParamName = scope.generateUid(name);\n          scope.rename(name, newParamName);\n        }\n      },\n    },\n  };\n});\n"]},"metadata":{},"sourceType":"script"}