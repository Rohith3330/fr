{"ast":null,"code":"/**\n * @fileoverview Disallow multiple spaces between inline JSX props\n * @author Adrian Moennich\n */\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\n\nconst report = require('../util/report'); // ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n\nconst messages = {\n  noLineGap: 'Expected no line gap between “{{prop1}}” and “{{prop2}}”',\n  onlyOneSpace: 'Expected only one space between “{{prop1}}” and “{{prop2}}”'\n};\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow multiple spaces between inline JSX props',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-props-no-multi-spaces')\n    },\n    fixable: 'code',\n    messages,\n    schema: []\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n\n    function getPropName(propNode) {\n      switch (propNode.type) {\n        case 'JSXSpreadAttribute':\n          return context.getSourceCode().getText(propNode.argument);\n\n        case 'JSXIdentifier':\n          return propNode.name;\n\n        case 'JSXMemberExpression':\n          return `${getPropName(propNode.object)}.${propNode.property.name}`;\n\n        default:\n          return propNode.name ? propNode.name.name : `${context.getSourceCode().getText(propNode.object)}.${propNode.property.name}`;\n        // needed for typescript-eslint parser\n      }\n    } // First and second must be adjacent nodes\n\n\n    function hasEmptyLines(first, second) {\n      const comments = sourceCode.getCommentsBefore ? sourceCode.getCommentsBefore(second) : [];\n      const nodes = [].concat(first, comments, second);\n\n      for (let i = 1; i < nodes.length; i += 1) {\n        const prev = nodes[i - 1];\n        const curr = nodes[i];\n\n        if (curr.loc.start.line - prev.loc.end.line >= 2) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function checkSpacing(prev, node) {\n      if (hasEmptyLines(prev, node)) {\n        report(context, messages.noLineGap, 'noLineGap', {\n          node,\n          data: {\n            prop1: getPropName(prev),\n            prop2: getPropName(node)\n          }\n        });\n      }\n\n      if (prev.loc.end.line !== node.loc.end.line) {\n        return;\n      }\n\n      const between = context.getSourceCode().text.slice(prev.range[1], node.range[0]);\n\n      if (between !== ' ') {\n        report(context, messages.onlyOneSpace, 'onlyOneSpace', {\n          node,\n          data: {\n            prop1: getPropName(prev),\n            prop2: getPropName(node)\n          },\n\n          fix(fixer) {\n            return fixer.replaceTextRange([prev.range[1], node.range[0]], ' ');\n          }\n\n        });\n      }\n    }\n\n    function containsGenericType(node) {\n      const containsTypeParams = typeof node.typeParameters !== 'undefined';\n      return containsTypeParams && node.typeParameters.type === 'TSTypeParameterInstantiation';\n    }\n\n    function getGenericNode(node) {\n      const name = node.name;\n\n      if (containsGenericType(node)) {\n        const type = node.typeParameters;\n        return Object.assign({}, node, {\n          range: [name.range[0], type.range[1]]\n        });\n      }\n\n      return name;\n    }\n\n    return {\n      JSXOpeningElement(node) {\n        node.attributes.reduce((prev, prop) => {\n          checkSpacing(prev, prop);\n          return prop;\n        }, getGenericNode(node));\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["docsUrl","require","report","messages","noLineGap","onlyOneSpace","module","exports","meta","docs","description","category","recommended","url","fixable","schema","create","context","sourceCode","getSourceCode","getPropName","propNode","type","getText","argument","name","object","property","hasEmptyLines","first","second","comments","getCommentsBefore","nodes","concat","i","length","prev","curr","loc","start","line","end","checkSpacing","node","data","prop1","prop2","between","text","slice","range","fix","fixer","replaceTextRange","containsGenericType","containsTypeParams","typeParameters","getGenericNode","Object","assign","JSXOpeningElement","attributes","reduce","prop"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-react/lib/rules/jsx-props-no-multi-spaces.js"],"sourcesContent":["/**\n * @fileoverview Disallow multiple spaces between inline JSX props\n * @author Adrian Moennich\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noLineGap: 'Expected no line gap between “{{prop1}}” and “{{prop2}}”',\n  onlyOneSpace: 'Expected only one space between “{{prop1}}” and “{{prop2}}”',\n};\n\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow multiple spaces between inline JSX props',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-props-no-multi-spaces'),\n    },\n    fixable: 'code',\n\n    messages,\n\n    schema: [],\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n\n    function getPropName(propNode) {\n      switch (propNode.type) {\n        case 'JSXSpreadAttribute':\n          return context.getSourceCode().getText(propNode.argument);\n        case 'JSXIdentifier':\n          return propNode.name;\n        case 'JSXMemberExpression':\n          return `${getPropName(propNode.object)}.${propNode.property.name}`;\n        default:\n          return propNode.name\n            ? propNode.name.name\n            : `${context.getSourceCode().getText(propNode.object)}.${propNode.property.name}`; // needed for typescript-eslint parser\n      }\n    }\n\n    // First and second must be adjacent nodes\n    function hasEmptyLines(first, second) {\n      const comments = sourceCode.getCommentsBefore ? sourceCode.getCommentsBefore(second) : [];\n      const nodes = [].concat(first, comments, second);\n\n      for (let i = 1; i < nodes.length; i += 1) {\n        const prev = nodes[i - 1];\n        const curr = nodes[i];\n        if (curr.loc.start.line - prev.loc.end.line >= 2) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function checkSpacing(prev, node) {\n      if (hasEmptyLines(prev, node)) {\n        report(context, messages.noLineGap, 'noLineGap', {\n          node,\n          data: {\n            prop1: getPropName(prev),\n            prop2: getPropName(node),\n          },\n        });\n      }\n\n      if (prev.loc.end.line !== node.loc.end.line) {\n        return;\n      }\n\n      const between = context.getSourceCode().text.slice(prev.range[1], node.range[0]);\n\n      if (between !== ' ') {\n        report(context, messages.onlyOneSpace, 'onlyOneSpace', {\n          node,\n          data: {\n            prop1: getPropName(prev),\n            prop2: getPropName(node),\n          },\n          fix(fixer) {\n            return fixer.replaceTextRange([prev.range[1], node.range[0]], ' ');\n          },\n        });\n      }\n    }\n\n    function containsGenericType(node) {\n      const containsTypeParams = typeof node.typeParameters !== 'undefined';\n      return containsTypeParams && node.typeParameters.type === 'TSTypeParameterInstantiation';\n    }\n\n    function getGenericNode(node) {\n      const name = node.name;\n      if (containsGenericType(node)) {\n        const type = node.typeParameters;\n\n        return Object.assign(\n          {},\n          node,\n          {\n            range: [\n              name.range[0],\n              type.range[1],\n            ],\n          }\n        );\n      }\n\n      return name;\n    }\n\n    return {\n      JSXOpeningElement(node) {\n        node.attributes.reduce((prev, prop) => {\n          checkSpacing(prev, prop);\n          return prop;\n        }, getGenericNode(node));\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}