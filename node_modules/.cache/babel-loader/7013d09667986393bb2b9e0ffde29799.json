{"ast":null,"code":"const maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance) return Math.max(a.length, b.length); // distance between prefix substrings of a and b\n\n  const d = []; // pure deletions turn a into empty string\n\n  for (let i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  } // pure insertions turn empty string into b\n\n\n  for (let j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  } // fill matrix\n\n\n  for (let j = 1; j <= b.length; j++) {\n    for (let i = 1; i <= a.length; i++) {\n      let cost = 1;\n\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n\n      d[i][j] = Math.min(d[i - 1][j] + 1, // deletion\n      d[i][j - 1] + 1, // insertion\n      d[i - 1][j - 1] + cost // substitution\n      ); // transposition\n\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return ''; // remove possible duplicates\n\n  candidates = Array.from(new Set(candidates));\n  const searchingOptions = word.startsWith('--');\n\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map(candidate => candidate.slice(2));\n  }\n\n  let similar = [];\n  let bestDistance = maxDistance;\n  const minSimilarity = 0.4;\n  candidates.forEach(candidate => {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    const distance = editDistance(word, candidate);\n    const length = Math.max(word.length, candidate.length);\n    const similarity = (length - distance) / length;\n\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n  similar.sort((a, b) => a.localeCompare(b));\n\n  if (searchingOptions) {\n    similar = similar.map(candidate => `--${candidate}`);\n  }\n\n  if (similar.length > 1) {\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n  }\n\n  if (similar.length === 1) {\n    return `\\n(Did you mean ${similar[0]}?)`;\n  }\n\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;","map":{"version":3,"names":["maxDistance","editDistance","a","b","Math","abs","length","max","d","i","j","cost","min","suggestSimilar","word","candidates","Array","from","Set","searchingOptions","startsWith","slice","map","candidate","similar","bestDistance","minSimilarity","forEach","distance","similarity","push","sort","localeCompare","join","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/commander/lib/suggestSimilar.js"],"sourcesContent":["const maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance) return Math.max(a.length, b.length);\n\n  // distance between prefix substrings of a and b\n  const d = [];\n\n  // pure deletions turn a into empty string\n  for (let i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  }\n  // pure insertions turn empty string into b\n  for (let j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  }\n\n  // fill matrix\n  for (let j = 1; j <= b.length; j++) {\n    for (let i = 1; i <= a.length; i++) {\n      let cost = 1;\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost // substitution\n      );\n      // transposition\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return '';\n  // remove possible duplicates\n  candidates = Array.from(new Set(candidates));\n\n  const searchingOptions = word.startsWith('--');\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map(candidate => candidate.slice(2));\n  }\n\n  let similar = [];\n  let bestDistance = maxDistance;\n  const minSimilarity = 0.4;\n  candidates.forEach((candidate) => {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    const distance = editDistance(word, candidate);\n    const length = Math.max(word.length, candidate.length);\n    const similarity = (length - distance) / length;\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n\n  similar.sort((a, b) => a.localeCompare(b));\n  if (searchingOptions) {\n    similar = similar.map(candidate => `--${candidate}`);\n  }\n\n  if (similar.length > 1) {\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n  }\n  if (similar.length === 1) {\n    return `\\n(Did you mean ${similar[0]}?)`;\n  }\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}