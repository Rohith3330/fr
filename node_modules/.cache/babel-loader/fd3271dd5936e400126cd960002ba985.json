{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\n\nconst moduleRequire = require('eslint-module-utils/module-require').default;\n\nconst hashObject = require('eslint-module-utils/hash').hashObject;\n\nconst cache = new Map(); // must match ESLint default options or we'll miss the cache every time\n\nconst parserOptions = {\n  loc: true,\n  range: true,\n  raw: true,\n  tokens: true,\n  comment: true,\n  attachComment: true\n};\n\nexports.parse = function parse(content, options) {\n  options = Object.assign({}, options, parserOptions);\n\n  if (!options.filePath) {\n    throw new Error('no file path provided!');\n  }\n\n  const keyHash = crypto.createHash('sha256');\n  keyHash.update(content);\n  hashObject(options, keyHash);\n  const key = keyHash.digest('hex');\n  let ast = cache.get(key);\n  if (ast != null) return ast;\n  const realParser = moduleRequire(options.parser);\n  ast = realParser.parse(content, options);\n  cache.set(key, ast);\n  return ast;\n};","map":{"version":3,"names":["crypto","require","moduleRequire","default","hashObject","cache","Map","parserOptions","loc","range","raw","tokens","comment","attachComment","exports","parse","content","options","Object","assign","filePath","Error","keyHash","createHash","update","key","digest","ast","get","realParser","parser","set"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-import/memo-parser/index.js"],"sourcesContent":["'use strict';\n\nconst crypto = require('crypto');\nconst moduleRequire = require('eslint-module-utils/module-require').default;\nconst hashObject = require('eslint-module-utils/hash').hashObject;\n\nconst cache = new Map();\n\n// must match ESLint default options or we'll miss the cache every time\nconst parserOptions = {\n  loc: true,\n  range: true,\n  raw: true,\n  tokens: true,\n  comment: true,\n  attachComment: true,\n};\n\nexports.parse = function parse(content, options) {\n  options = Object.assign({}, options, parserOptions);\n\n  if (!options.filePath) {\n    throw new Error('no file path provided!');\n  }\n\n  const keyHash = crypto.createHash('sha256');\n  keyHash.update(content);\n  hashObject(options, keyHash);\n\n  const key = keyHash.digest('hex');\n\n  let ast = cache.get(key);\n  if (ast != null) return ast;\n\n  const realParser = moduleRequire(options.parser);\n\n  ast = realParser.parse(content, options);\n  cache.set(key, ast);\n\n  return ast;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,oCAAD,CAAP,CAA8CE,OAApE;;AACA,MAAMC,UAAU,GAAGH,OAAO,CAAC,0BAAD,CAAP,CAAoCG,UAAvD;;AAEA,MAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd,C,CAEA;;AACA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,IADe;EAEpBC,KAAK,EAAE,IAFa;EAGpBC,GAAG,EAAE,IAHe;EAIpBC,MAAM,EAAE,IAJY;EAKpBC,OAAO,EAAE,IALW;EAMpBC,aAAa,EAAE;AANK,CAAtB;;AASAC,OAAO,CAACC,KAAR,GAAgB,SAASA,KAAT,CAAeC,OAAf,EAAwBC,OAAxB,EAAiC;EAC/CA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,OAAlB,EAA2BV,aAA3B,CAAV;;EAEA,IAAI,CAACU,OAAO,CAACG,QAAb,EAAuB;IACrB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;EACD;;EAED,MAAMC,OAAO,GAAGtB,MAAM,CAACuB,UAAP,CAAkB,QAAlB,CAAhB;EACAD,OAAO,CAACE,MAAR,CAAeR,OAAf;EACAZ,UAAU,CAACa,OAAD,EAAUK,OAAV,CAAV;EAEA,MAAMG,GAAG,GAAGH,OAAO,CAACI,MAAR,CAAe,KAAf,CAAZ;EAEA,IAAIC,GAAG,GAAGtB,KAAK,CAACuB,GAAN,CAAUH,GAAV,CAAV;EACA,IAAIE,GAAG,IAAI,IAAX,EAAiB,OAAOA,GAAP;EAEjB,MAAME,UAAU,GAAG3B,aAAa,CAACe,OAAO,CAACa,MAAT,CAAhC;EAEAH,GAAG,GAAGE,UAAU,CAACd,KAAX,CAAiBC,OAAjB,EAA0BC,OAA1B,CAAN;EACAZ,KAAK,CAAC0B,GAAN,CAAUN,GAAV,EAAeE,GAAf;EAEA,OAAOA,GAAP;AACD,CAtBD"},"metadata":{},"sourceType":"script"}