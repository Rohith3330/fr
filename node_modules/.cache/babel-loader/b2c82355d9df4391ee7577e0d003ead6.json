{"ast":null,"code":"'use strict';\n\nconst selectorParser = require('postcss-selector-parser');\n/**\n * @param {string} selectors\n * @param {selectorParser.SyncProcessor<void>} callback\n * @return {string}\n */\n\n\nfunction parseSelectors(selectors, callback) {\n  return selectorParser(callback).processSync(selectors);\n}\n/**\n * @param {import('postcss').Rule} rule\n * @return {string}\n */\n\n\nfunction unique(rule) {\n  const selector = [...new Set(rule.selectors)];\n  selector.sort();\n  return selector.join();\n}\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\n\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-unique-selectors',\n\n    OnceExit(css) {\n      css.walkRules(nodes => {\n        /** @type {string[]} */\n        let comments = [];\n        /** @type {selectorParser.SyncProcessor<void>} */\n\n        const removeAndSaveComments = selNode => {\n          selNode.walk(sel => {\n            if (sel.type === 'comment') {\n              comments.push(sel.value);\n              sel.remove();\n              return;\n            } else {\n              return;\n            }\n          });\n        };\n\n        if (nodes.raws.selector && nodes.raws.selector.raw) {\n          parseSelectors(nodes.raws.selector.raw, removeAndSaveComments);\n          nodes.raws.selector.raw = unique(nodes);\n        }\n\n        nodes.selector = parseSelectors(nodes.selector, removeAndSaveComments);\n        nodes.selector = unique(nodes);\n        nodes.selectors = nodes.selectors.concat(comments);\n      });\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"names":["selectorParser","require","parseSelectors","selectors","callback","processSync","unique","rule","selector","Set","sort","join","pluginCreator","postcssPlugin","OnceExit","css","walkRules","nodes","comments","removeAndSaveComments","selNode","walk","sel","type","push","value","remove","raws","raw","concat","postcss","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/postcss-unique-selectors/src/index.js"],"sourcesContent":["'use strict';\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {string} selectors\n * @param {selectorParser.SyncProcessor<void>} callback\n * @return {string}\n */\nfunction parseSelectors(selectors, callback) {\n  return selectorParser(callback).processSync(selectors);\n}\n\n/**\n * @param {import('postcss').Rule} rule\n * @return {string}\n */\nfunction unique(rule) {\n  const selector = [...new Set(rule.selectors)];\n  selector.sort();\n  return selector.join();\n}\n\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-unique-selectors',\n    OnceExit(css) {\n      css.walkRules((nodes) => {\n        /** @type {string[]} */\n        let comments = [];\n        /** @type {selectorParser.SyncProcessor<void>} */\n        const removeAndSaveComments = (selNode) => {\n          selNode.walk((sel) => {\n            if (sel.type === 'comment') {\n              comments.push(sel.value);\n              sel.remove();\n              return;\n            } else {\n              return;\n            }\n          });\n        };\n        if (nodes.raws.selector && nodes.raws.selector.raw) {\n          parseSelectors(nodes.raws.selector.raw, removeAndSaveComments);\n          nodes.raws.selector.raw = unique(nodes);\n        }\n        nodes.selector = parseSelectors(nodes.selector, removeAndSaveComments);\n        nodes.selector = unique(nodes);\n        nodes.selectors = nodes.selectors.concat(comments);\n      });\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"],"mappings":"AAAA;;AACA,MAAMA,cAAc,GAAGC,OAAO,CAAC,yBAAD,CAA9B;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,QAAnC,EAA6C;EAC3C,OAAOJ,cAAc,CAACI,QAAD,CAAd,CAAyBC,WAAzB,CAAqCF,SAArC,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASG,MAAT,CAAgBC,IAAhB,EAAsB;EACpB,MAAMC,QAAQ,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQF,IAAI,CAACJ,SAAb,CAAJ,CAAjB;EACAK,QAAQ,CAACE,IAAT;EACA,OAAOF,QAAQ,CAACG,IAAT,EAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASC,aAAT,GAAyB;EACvB,OAAO;IACLC,aAAa,EAAE,0BADV;;IAELC,QAAQ,CAACC,GAAD,EAAM;MACZA,GAAG,CAACC,SAAJ,CAAeC,KAAD,IAAW;QACvB;QACA,IAAIC,QAAQ,GAAG,EAAf;QACA;;QACA,MAAMC,qBAAqB,GAAIC,OAAD,IAAa;UACzCA,OAAO,CAACC,IAAR,CAAcC,GAAD,IAAS;YACpB,IAAIA,GAAG,CAACC,IAAJ,KAAa,SAAjB,EAA4B;cAC1BL,QAAQ,CAACM,IAAT,CAAcF,GAAG,CAACG,KAAlB;cACAH,GAAG,CAACI,MAAJ;cACA;YACD,CAJD,MAIO;cACL;YACD;UACF,CARD;QASD,CAVD;;QAWA,IAAIT,KAAK,CAACU,IAAN,CAAWnB,QAAX,IAAuBS,KAAK,CAACU,IAAN,CAAWnB,QAAX,CAAoBoB,GAA/C,EAAoD;UAClD1B,cAAc,CAACe,KAAK,CAACU,IAAN,CAAWnB,QAAX,CAAoBoB,GAArB,EAA0BT,qBAA1B,CAAd;UACAF,KAAK,CAACU,IAAN,CAAWnB,QAAX,CAAoBoB,GAApB,GAA0BtB,MAAM,CAACW,KAAD,CAAhC;QACD;;QACDA,KAAK,CAACT,QAAN,GAAiBN,cAAc,CAACe,KAAK,CAACT,QAAP,EAAiBW,qBAAjB,CAA/B;QACAF,KAAK,CAACT,QAAN,GAAiBF,MAAM,CAACW,KAAD,CAAvB;QACAA,KAAK,CAACd,SAAN,GAAkBc,KAAK,CAACd,SAAN,CAAgB0B,MAAhB,CAAuBX,QAAvB,CAAlB;MACD,CAtBD;IAuBD;;EA1BI,CAAP;AA4BD;;AAEDN,aAAa,CAACkB,OAAd,GAAwB,IAAxB;AACAC,MAAM,CAACC,OAAP,GAAiBpB,aAAjB"},"metadata":{},"sourceType":"script"}