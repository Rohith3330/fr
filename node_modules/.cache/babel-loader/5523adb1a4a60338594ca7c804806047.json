{"ast":null,"code":"/**\n * @fileoverview Enforces empty lines around comments.\n * @author Jamund Ferguson\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Return an array with with any line numbers that are empty.\n * @param {Array} lines An array of each line of the file.\n * @returns {Array} An array of line numbers.\n */\n\n\nfunction getEmptyLineNums(lines) {\n  const emptyLines = lines.map((line, i) => ({\n    code: line.trim(),\n    num: i + 1\n  })).filter(line => !line.code).map(line => line.num);\n  return emptyLines;\n}\n/**\n * Return an array with with any line numbers that contain comments.\n * @param {Array} comments An array of comment tokens.\n * @returns {Array} An array of line numbers.\n */\n\n\nfunction getCommentLineNums(comments) {\n  const lines = [];\n  comments.forEach(token => {\n    const start = token.loc.start.line;\n    const end = token.loc.end.line;\n    lines.push(start, end);\n  });\n  return lines;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"Require empty lines around comments\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/lines-around-comment\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        beforeBlockComment: {\n          type: \"boolean\",\n          default: true\n        },\n        afterBlockComment: {\n          type: \"boolean\",\n          default: false\n        },\n        beforeLineComment: {\n          type: \"boolean\",\n          default: false\n        },\n        afterLineComment: {\n          type: \"boolean\",\n          default: false\n        },\n        allowBlockStart: {\n          type: \"boolean\",\n          default: false\n        },\n        allowBlockEnd: {\n          type: \"boolean\",\n          default: false\n        },\n        allowClassStart: {\n          type: \"boolean\"\n        },\n        allowClassEnd: {\n          type: \"boolean\"\n        },\n        allowObjectStart: {\n          type: \"boolean\"\n        },\n        allowObjectEnd: {\n          type: \"boolean\"\n        },\n        allowArrayStart: {\n          type: \"boolean\"\n        },\n        allowArrayEnd: {\n          type: \"boolean\"\n        },\n        ignorePattern: {\n          type: \"string\"\n        },\n        applyDefaultIgnorePatterns: {\n          type: \"boolean\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      after: \"Expected line after comment.\",\n      before: \"Expected line before comment.\"\n    }\n  },\n\n  create(context) {\n    const options = Object.assign({}, context.options[0]);\n    const ignorePattern = options.ignorePattern;\n    const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\n    const customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\n    const applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns !== false;\n    options.beforeBlockComment = typeof options.beforeBlockComment !== \"undefined\" ? options.beforeBlockComment : true;\n    const sourceCode = context.getSourceCode();\n    const lines = sourceCode.lines,\n          numLines = lines.length + 1,\n          comments = sourceCode.getAllComments(),\n          commentLines = getCommentLineNums(comments),\n          emptyLines = getEmptyLineNums(lines),\n          commentAndEmptyLines = new Set(commentLines.concat(emptyLines));\n    /**\n     * Returns whether or not comments are on lines starting with or ending with code\n     * @param {token} token The comment token to check.\n     * @returns {boolean} True if the comment is not alone.\n     */\n\n    function codeAroundComment(token) {\n      let currentToken = token;\n\n      do {\n        currentToken = sourceCode.getTokenBefore(currentToken, {\n          includeComments: true\n        });\n      } while (currentToken && astUtils.isCommentToken(currentToken));\n\n      if (currentToken && astUtils.isTokenOnSameLine(currentToken, token)) {\n        return true;\n      }\n\n      currentToken = token;\n\n      do {\n        currentToken = sourceCode.getTokenAfter(currentToken, {\n          includeComments: true\n        });\n      } while (currentToken && astUtils.isCommentToken(currentToken));\n\n      if (currentToken && astUtils.isTokenOnSameLine(token, currentToken)) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Returns whether or not comments are inside a node type or not.\n     * @param {ASTNode} parent The Comment parent node.\n     * @param {string} nodeType The parent type to check against.\n     * @returns {boolean} True if the comment is inside nodeType.\n     */\n\n\n    function isParentNodeType(parent, nodeType) {\n      return parent.type === nodeType || parent.body && parent.body.type === nodeType || parent.consequent && parent.consequent.type === nodeType;\n    }\n    /**\n     * Returns the parent node that contains the given token.\n     * @param {token} token The token to check.\n     * @returns {ASTNode|null} The parent node that contains the given token.\n     */\n\n\n    function getParentNodeOfToken(token) {\n      const node = sourceCode.getNodeByRangeIndex(token.range[0]);\n      /*\n       * For the purpose of this rule, the comment token is in a `StaticBlock` node only\n       * if it's inside the braces of that `StaticBlock` node.\n       *\n       * Example where this function returns `null`:\n       *\n       *   static\n       *   // comment\n       *   {\n       *   }\n       *\n       * Example where this function returns `StaticBlock` node:\n       *\n       *   static\n       *   {\n       *   // comment\n       *   }\n       *\n       */\n\n      if (node && node.type === \"StaticBlock\") {\n        const openingBrace = sourceCode.getFirstToken(node, {\n          skip: 1\n        }); // skip the `static` token\n\n        return token.range[0] >= openingBrace.range[0] ? node : null;\n      }\n\n      return node;\n    }\n    /**\n     * Returns whether or not comments are at the parent start or not.\n     * @param {token} token The Comment token.\n     * @param {string} nodeType The parent type to check against.\n     * @returns {boolean} True if the comment is at parent start.\n     */\n\n\n    function isCommentAtParentStart(token, nodeType) {\n      const parent = getParentNodeOfToken(token);\n\n      if (parent && isParentNodeType(parent, nodeType)) {\n        let parentStartNodeOrToken = parent;\n\n        if (parent.type === \"StaticBlock\") {\n          parentStartNodeOrToken = sourceCode.getFirstToken(parent, {\n            skip: 1\n          }); // opening brace of the static block\n        } else if (parent.type === \"SwitchStatement\") {\n          parentStartNodeOrToken = sourceCode.getTokenAfter(parent.discriminant, {\n            filter: astUtils.isOpeningBraceToken\n          }); // opening brace of the switch statement\n        }\n\n        return token.loc.start.line - parentStartNodeOrToken.loc.start.line === 1;\n      }\n\n      return false;\n    }\n    /**\n     * Returns whether or not comments are at the parent end or not.\n     * @param {token} token The Comment token.\n     * @param {string} nodeType The parent type to check against.\n     * @returns {boolean} True if the comment is at parent end.\n     */\n\n\n    function isCommentAtParentEnd(token, nodeType) {\n      const parent = getParentNodeOfToken(token);\n      return !!parent && isParentNodeType(parent, nodeType) && parent.loc.end.line - token.loc.end.line === 1;\n    }\n    /**\n     * Returns whether or not comments are at the block start or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at block start.\n     */\n\n\n    function isCommentAtBlockStart(token) {\n      return isCommentAtParentStart(token, \"ClassBody\") || isCommentAtParentStart(token, \"BlockStatement\") || isCommentAtParentStart(token, \"StaticBlock\") || isCommentAtParentStart(token, \"SwitchCase\") || isCommentAtParentStart(token, \"SwitchStatement\");\n    }\n    /**\n     * Returns whether or not comments are at the block end or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at block end.\n     */\n\n\n    function isCommentAtBlockEnd(token) {\n      return isCommentAtParentEnd(token, \"ClassBody\") || isCommentAtParentEnd(token, \"BlockStatement\") || isCommentAtParentEnd(token, \"StaticBlock\") || isCommentAtParentEnd(token, \"SwitchCase\") || isCommentAtParentEnd(token, \"SwitchStatement\");\n    }\n    /**\n     * Returns whether or not comments are at the class start or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at class start.\n     */\n\n\n    function isCommentAtClassStart(token) {\n      return isCommentAtParentStart(token, \"ClassBody\");\n    }\n    /**\n     * Returns whether or not comments are at the class end or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at class end.\n     */\n\n\n    function isCommentAtClassEnd(token) {\n      return isCommentAtParentEnd(token, \"ClassBody\");\n    }\n    /**\n     * Returns whether or not comments are at the object start or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at object start.\n     */\n\n\n    function isCommentAtObjectStart(token) {\n      return isCommentAtParentStart(token, \"ObjectExpression\") || isCommentAtParentStart(token, \"ObjectPattern\");\n    }\n    /**\n     * Returns whether or not comments are at the object end or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at object end.\n     */\n\n\n    function isCommentAtObjectEnd(token) {\n      return isCommentAtParentEnd(token, \"ObjectExpression\") || isCommentAtParentEnd(token, \"ObjectPattern\");\n    }\n    /**\n     * Returns whether or not comments are at the array start or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at array start.\n     */\n\n\n    function isCommentAtArrayStart(token) {\n      return isCommentAtParentStart(token, \"ArrayExpression\") || isCommentAtParentStart(token, \"ArrayPattern\");\n    }\n    /**\n     * Returns whether or not comments are at the array end or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at array end.\n     */\n\n\n    function isCommentAtArrayEnd(token) {\n      return isCommentAtParentEnd(token, \"ArrayExpression\") || isCommentAtParentEnd(token, \"ArrayPattern\");\n    }\n    /**\n     * Checks if a comment token has lines around it (ignores inline comments)\n     * @param {token} token The Comment token.\n     * @param {Object} opts Options to determine the newline.\n     * @param {boolean} opts.after Should have a newline after this line.\n     * @param {boolean} opts.before Should have a newline before this line.\n     * @returns {void}\n     */\n\n\n    function checkForEmptyLine(token, opts) {\n      if (applyDefaultIgnorePatterns && defaultIgnoreRegExp.test(token.value)) {\n        return;\n      }\n\n      if (ignorePattern && customIgnoreRegExp.test(token.value)) {\n        return;\n      }\n\n      let after = opts.after,\n          before = opts.before;\n      const prevLineNum = token.loc.start.line - 1,\n            nextLineNum = token.loc.end.line + 1,\n            commentIsNotAlone = codeAroundComment(token);\n      const blockStartAllowed = options.allowBlockStart && isCommentAtBlockStart(token) && !(options.allowClassStart === false && isCommentAtClassStart(token)),\n            blockEndAllowed = options.allowBlockEnd && isCommentAtBlockEnd(token) && !(options.allowClassEnd === false && isCommentAtClassEnd(token)),\n            classStartAllowed = options.allowClassStart && isCommentAtClassStart(token),\n            classEndAllowed = options.allowClassEnd && isCommentAtClassEnd(token),\n            objectStartAllowed = options.allowObjectStart && isCommentAtObjectStart(token),\n            objectEndAllowed = options.allowObjectEnd && isCommentAtObjectEnd(token),\n            arrayStartAllowed = options.allowArrayStart && isCommentAtArrayStart(token),\n            arrayEndAllowed = options.allowArrayEnd && isCommentAtArrayEnd(token);\n      const exceptionStartAllowed = blockStartAllowed || classStartAllowed || objectStartAllowed || arrayStartAllowed;\n      const exceptionEndAllowed = blockEndAllowed || classEndAllowed || objectEndAllowed || arrayEndAllowed; // ignore top of the file and bottom of the file\n\n      if (prevLineNum < 1) {\n        before = false;\n      }\n\n      if (nextLineNum >= numLines) {\n        after = false;\n      } // we ignore all inline comments\n\n\n      if (commentIsNotAlone) {\n        return;\n      }\n\n      const previousTokenOrComment = sourceCode.getTokenBefore(token, {\n        includeComments: true\n      });\n      const nextTokenOrComment = sourceCode.getTokenAfter(token, {\n        includeComments: true\n      }); // check for newline before\n\n      if (!exceptionStartAllowed && before && !commentAndEmptyLines.has(prevLineNum) && !(astUtils.isCommentToken(previousTokenOrComment) && astUtils.isTokenOnSameLine(previousTokenOrComment, token))) {\n        const lineStart = token.range[0] - token.loc.start.column;\n        const range = [lineStart, lineStart];\n        context.report({\n          node: token,\n          messageId: \"before\",\n\n          fix(fixer) {\n            return fixer.insertTextBeforeRange(range, \"\\n\");\n          }\n\n        });\n      } // check for newline after\n\n\n      if (!exceptionEndAllowed && after && !commentAndEmptyLines.has(nextLineNum) && !(astUtils.isCommentToken(nextTokenOrComment) && astUtils.isTokenOnSameLine(token, nextTokenOrComment))) {\n        context.report({\n          node: token,\n          messageId: \"after\",\n\n          fix(fixer) {\n            return fixer.insertTextAfter(token, \"\\n\");\n          }\n\n        });\n      }\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      Program() {\n        comments.forEach(token => {\n          if (token.type === \"Line\") {\n            if (options.beforeLineComment || options.afterLineComment) {\n              checkForEmptyLine(token, {\n                after: options.afterLineComment,\n                before: options.beforeLineComment\n              });\n            }\n          } else if (token.type === \"Block\") {\n            if (options.beforeBlockComment || options.afterBlockComment) {\n              checkForEmptyLine(token, {\n                after: options.afterBlockComment,\n                before: options.beforeBlockComment\n              });\n            }\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","getEmptyLineNums","lines","emptyLines","map","line","i","code","trim","num","filter","getCommentLineNums","comments","forEach","token","start","loc","end","push","module","exports","meta","type","docs","description","recommended","url","fixable","schema","properties","beforeBlockComment","default","afterBlockComment","beforeLineComment","afterLineComment","allowBlockStart","allowBlockEnd","allowClassStart","allowClassEnd","allowObjectStart","allowObjectEnd","allowArrayStart","allowArrayEnd","ignorePattern","applyDefaultIgnorePatterns","additionalProperties","messages","after","before","create","context","options","Object","assign","defaultIgnoreRegExp","COMMENTS_IGNORE_PATTERN","customIgnoreRegExp","RegExp","sourceCode","getSourceCode","numLines","length","getAllComments","commentLines","commentAndEmptyLines","Set","concat","codeAroundComment","currentToken","getTokenBefore","includeComments","isCommentToken","isTokenOnSameLine","getTokenAfter","isParentNodeType","parent","nodeType","body","consequent","getParentNodeOfToken","node","getNodeByRangeIndex","range","openingBrace","getFirstToken","skip","isCommentAtParentStart","parentStartNodeOrToken","discriminant","isOpeningBraceToken","isCommentAtParentEnd","isCommentAtBlockStart","isCommentAtBlockEnd","isCommentAtClassStart","isCommentAtClassEnd","isCommentAtObjectStart","isCommentAtObjectEnd","isCommentAtArrayStart","isCommentAtArrayEnd","checkForEmptyLine","opts","test","value","prevLineNum","nextLineNum","commentIsNotAlone","blockStartAllowed","blockEndAllowed","classStartAllowed","classEndAllowed","objectStartAllowed","objectEndAllowed","arrayStartAllowed","arrayEndAllowed","exceptionStartAllowed","exceptionEndAllowed","previousTokenOrComment","nextTokenOrComment","has","lineStart","column","report","messageId","fix","fixer","insertTextBeforeRange","insertTextAfter","Program"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/lines-around-comment.js"],"sourcesContent":["/**\n * @fileoverview Enforces empty lines around comments.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Return an array with with any line numbers that are empty.\n * @param {Array} lines An array of each line of the file.\n * @returns {Array} An array of line numbers.\n */\nfunction getEmptyLineNums(lines) {\n    const emptyLines = lines.map((line, i) => ({\n        code: line.trim(),\n        num: i + 1\n    })).filter(line => !line.code).map(line => line.num);\n\n    return emptyLines;\n}\n\n/**\n * Return an array with with any line numbers that contain comments.\n * @param {Array} comments An array of comment tokens.\n * @returns {Array} An array of line numbers.\n */\nfunction getCommentLineNums(comments) {\n    const lines = [];\n\n    comments.forEach(token => {\n        const start = token.loc.start.line;\n        const end = token.loc.end.line;\n\n        lines.push(start, end);\n    });\n    return lines;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"Require empty lines around comments\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/lines-around-comment\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    beforeBlockComment: {\n                        type: \"boolean\",\n                        default: true\n                    },\n                    afterBlockComment: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    beforeLineComment: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    afterLineComment: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowBlockStart: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowBlockEnd: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowClassStart: {\n                        type: \"boolean\"\n                    },\n                    allowClassEnd: {\n                        type: \"boolean\"\n                    },\n                    allowObjectStart: {\n                        type: \"boolean\"\n                    },\n                    allowObjectEnd: {\n                        type: \"boolean\"\n                    },\n                    allowArrayStart: {\n                        type: \"boolean\"\n                    },\n                    allowArrayEnd: {\n                        type: \"boolean\"\n                    },\n                    ignorePattern: {\n                        type: \"string\"\n                    },\n                    applyDefaultIgnorePatterns: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            after: \"Expected line after comment.\",\n            before: \"Expected line before comment.\"\n        }\n    },\n\n    create(context) {\n\n        const options = Object.assign({}, context.options[0]);\n        const ignorePattern = options.ignorePattern;\n        const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\n        const customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\n        const applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns !== false;\n\n        options.beforeBlockComment = typeof options.beforeBlockComment !== \"undefined\" ? options.beforeBlockComment : true;\n\n        const sourceCode = context.getSourceCode();\n\n        const lines = sourceCode.lines,\n            numLines = lines.length + 1,\n            comments = sourceCode.getAllComments(),\n            commentLines = getCommentLineNums(comments),\n            emptyLines = getEmptyLineNums(lines),\n            commentAndEmptyLines = new Set(commentLines.concat(emptyLines));\n\n        /**\n         * Returns whether or not comments are on lines starting with or ending with code\n         * @param {token} token The comment token to check.\n         * @returns {boolean} True if the comment is not alone.\n         */\n        function codeAroundComment(token) {\n            let currentToken = token;\n\n            do {\n                currentToken = sourceCode.getTokenBefore(currentToken, { includeComments: true });\n            } while (currentToken && astUtils.isCommentToken(currentToken));\n\n            if (currentToken && astUtils.isTokenOnSameLine(currentToken, token)) {\n                return true;\n            }\n\n            currentToken = token;\n            do {\n                currentToken = sourceCode.getTokenAfter(currentToken, { includeComments: true });\n            } while (currentToken && astUtils.isCommentToken(currentToken));\n\n            if (currentToken && astUtils.isTokenOnSameLine(token, currentToken)) {\n                return true;\n            }\n\n            return false;\n        }\n\n        /**\n         * Returns whether or not comments are inside a node type or not.\n         * @param {ASTNode} parent The Comment parent node.\n         * @param {string} nodeType The parent type to check against.\n         * @returns {boolean} True if the comment is inside nodeType.\n         */\n        function isParentNodeType(parent, nodeType) {\n            return parent.type === nodeType ||\n                (parent.body && parent.body.type === nodeType) ||\n                (parent.consequent && parent.consequent.type === nodeType);\n        }\n\n        /**\n         * Returns the parent node that contains the given token.\n         * @param {token} token The token to check.\n         * @returns {ASTNode|null} The parent node that contains the given token.\n         */\n        function getParentNodeOfToken(token) {\n            const node = sourceCode.getNodeByRangeIndex(token.range[0]);\n\n            /*\n             * For the purpose of this rule, the comment token is in a `StaticBlock` node only\n             * if it's inside the braces of that `StaticBlock` node.\n             *\n             * Example where this function returns `null`:\n             *\n             *   static\n             *   // comment\n             *   {\n             *   }\n             *\n             * Example where this function returns `StaticBlock` node:\n             *\n             *   static\n             *   {\n             *   // comment\n             *   }\n             *\n             */\n            if (node && node.type === \"StaticBlock\") {\n                const openingBrace = sourceCode.getFirstToken(node, { skip: 1 }); // skip the `static` token\n\n                return token.range[0] >= openingBrace.range[0]\n                    ? node\n                    : null;\n            }\n\n            return node;\n        }\n\n        /**\n         * Returns whether or not comments are at the parent start or not.\n         * @param {token} token The Comment token.\n         * @param {string} nodeType The parent type to check against.\n         * @returns {boolean} True if the comment is at parent start.\n         */\n        function isCommentAtParentStart(token, nodeType) {\n            const parent = getParentNodeOfToken(token);\n\n            if (parent && isParentNodeType(parent, nodeType)) {\n                let parentStartNodeOrToken = parent;\n\n                if (parent.type === \"StaticBlock\") {\n                    parentStartNodeOrToken = sourceCode.getFirstToken(parent, { skip: 1 }); // opening brace of the static block\n                } else if (parent.type === \"SwitchStatement\") {\n                    parentStartNodeOrToken = sourceCode.getTokenAfter(parent.discriminant, {\n                        filter: astUtils.isOpeningBraceToken\n                    }); // opening brace of the switch statement\n                }\n\n                return token.loc.start.line - parentStartNodeOrToken.loc.start.line === 1;\n            }\n\n            return false;\n        }\n\n        /**\n         * Returns whether or not comments are at the parent end or not.\n         * @param {token} token The Comment token.\n         * @param {string} nodeType The parent type to check against.\n         * @returns {boolean} True if the comment is at parent end.\n         */\n        function isCommentAtParentEnd(token, nodeType) {\n            const parent = getParentNodeOfToken(token);\n\n            return !!parent && isParentNodeType(parent, nodeType) &&\n                    parent.loc.end.line - token.loc.end.line === 1;\n        }\n\n        /**\n         * Returns whether or not comments are at the block start or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at block start.\n         */\n        function isCommentAtBlockStart(token) {\n            return (\n                isCommentAtParentStart(token, \"ClassBody\") ||\n                isCommentAtParentStart(token, \"BlockStatement\") ||\n                isCommentAtParentStart(token, \"StaticBlock\") ||\n                isCommentAtParentStart(token, \"SwitchCase\") ||\n                isCommentAtParentStart(token, \"SwitchStatement\")\n            );\n        }\n\n        /**\n         * Returns whether or not comments are at the block end or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at block end.\n         */\n        function isCommentAtBlockEnd(token) {\n            return (\n                isCommentAtParentEnd(token, \"ClassBody\") ||\n                isCommentAtParentEnd(token, \"BlockStatement\") ||\n                isCommentAtParentEnd(token, \"StaticBlock\") ||\n                isCommentAtParentEnd(token, \"SwitchCase\") ||\n                isCommentAtParentEnd(token, \"SwitchStatement\")\n            );\n        }\n\n        /**\n         * Returns whether or not comments are at the class start or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at class start.\n         */\n        function isCommentAtClassStart(token) {\n            return isCommentAtParentStart(token, \"ClassBody\");\n        }\n\n        /**\n         * Returns whether or not comments are at the class end or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at class end.\n         */\n        function isCommentAtClassEnd(token) {\n            return isCommentAtParentEnd(token, \"ClassBody\");\n        }\n\n        /**\n         * Returns whether or not comments are at the object start or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at object start.\n         */\n        function isCommentAtObjectStart(token) {\n            return isCommentAtParentStart(token, \"ObjectExpression\") || isCommentAtParentStart(token, \"ObjectPattern\");\n        }\n\n        /**\n         * Returns whether or not comments are at the object end or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at object end.\n         */\n        function isCommentAtObjectEnd(token) {\n            return isCommentAtParentEnd(token, \"ObjectExpression\") || isCommentAtParentEnd(token, \"ObjectPattern\");\n        }\n\n        /**\n         * Returns whether or not comments are at the array start or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at array start.\n         */\n        function isCommentAtArrayStart(token) {\n            return isCommentAtParentStart(token, \"ArrayExpression\") || isCommentAtParentStart(token, \"ArrayPattern\");\n        }\n\n        /**\n         * Returns whether or not comments are at the array end or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at array end.\n         */\n        function isCommentAtArrayEnd(token) {\n            return isCommentAtParentEnd(token, \"ArrayExpression\") || isCommentAtParentEnd(token, \"ArrayPattern\");\n        }\n\n        /**\n         * Checks if a comment token has lines around it (ignores inline comments)\n         * @param {token} token The Comment token.\n         * @param {Object} opts Options to determine the newline.\n         * @param {boolean} opts.after Should have a newline after this line.\n         * @param {boolean} opts.before Should have a newline before this line.\n         * @returns {void}\n         */\n        function checkForEmptyLine(token, opts) {\n            if (applyDefaultIgnorePatterns && defaultIgnoreRegExp.test(token.value)) {\n                return;\n            }\n\n            if (ignorePattern && customIgnoreRegExp.test(token.value)) {\n                return;\n            }\n\n            let after = opts.after,\n                before = opts.before;\n\n            const prevLineNum = token.loc.start.line - 1,\n                nextLineNum = token.loc.end.line + 1,\n                commentIsNotAlone = codeAroundComment(token);\n\n            const blockStartAllowed = options.allowBlockStart &&\n                    isCommentAtBlockStart(token) &&\n                    !(options.allowClassStart === false &&\n                    isCommentAtClassStart(token)),\n                blockEndAllowed = options.allowBlockEnd && isCommentAtBlockEnd(token) && !(options.allowClassEnd === false && isCommentAtClassEnd(token)),\n                classStartAllowed = options.allowClassStart && isCommentAtClassStart(token),\n                classEndAllowed = options.allowClassEnd && isCommentAtClassEnd(token),\n                objectStartAllowed = options.allowObjectStart && isCommentAtObjectStart(token),\n                objectEndAllowed = options.allowObjectEnd && isCommentAtObjectEnd(token),\n                arrayStartAllowed = options.allowArrayStart && isCommentAtArrayStart(token),\n                arrayEndAllowed = options.allowArrayEnd && isCommentAtArrayEnd(token);\n\n            const exceptionStartAllowed = blockStartAllowed || classStartAllowed || objectStartAllowed || arrayStartAllowed;\n            const exceptionEndAllowed = blockEndAllowed || classEndAllowed || objectEndAllowed || arrayEndAllowed;\n\n            // ignore top of the file and bottom of the file\n            if (prevLineNum < 1) {\n                before = false;\n            }\n            if (nextLineNum >= numLines) {\n                after = false;\n            }\n\n            // we ignore all inline comments\n            if (commentIsNotAlone) {\n                return;\n            }\n\n            const previousTokenOrComment = sourceCode.getTokenBefore(token, { includeComments: true });\n            const nextTokenOrComment = sourceCode.getTokenAfter(token, { includeComments: true });\n\n            // check for newline before\n            if (!exceptionStartAllowed && before && !commentAndEmptyLines.has(prevLineNum) &&\n                    !(astUtils.isCommentToken(previousTokenOrComment) && astUtils.isTokenOnSameLine(previousTokenOrComment, token))) {\n                const lineStart = token.range[0] - token.loc.start.column;\n                const range = [lineStart, lineStart];\n\n                context.report({\n                    node: token,\n                    messageId: \"before\",\n                    fix(fixer) {\n                        return fixer.insertTextBeforeRange(range, \"\\n\");\n                    }\n                });\n            }\n\n            // check for newline after\n            if (!exceptionEndAllowed && after && !commentAndEmptyLines.has(nextLineNum) &&\n                    !(astUtils.isCommentToken(nextTokenOrComment) && astUtils.isTokenOnSameLine(token, nextTokenOrComment))) {\n                context.report({\n                    node: token,\n                    messageId: \"after\",\n                    fix(fixer) {\n                        return fixer.insertTextAfter(token, \"\\n\");\n                    }\n                });\n            }\n\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Program() {\n                comments.forEach(token => {\n                    if (token.type === \"Line\") {\n                        if (options.beforeLineComment || options.afterLineComment) {\n                            checkForEmptyLine(token, {\n                                after: options.afterLineComment,\n                                before: options.beforeLineComment\n                            });\n                        }\n                    } else if (token.type === \"Block\") {\n                        if (options.beforeBlockComment || options.afterBlockComment) {\n                            checkForEmptyLine(token, {\n                                after: options.afterBlockComment,\n                                before: options.beforeBlockComment\n                            });\n                        }\n                    }\n                });\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}