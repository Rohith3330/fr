{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [];\n\nconst create = context => {\n  let globalScope; // do nearly the same thing that eslint does for config globals\n  // https://github.com/eslint/eslint/blob/v2.0.0/lib/eslint.js#L118-L194\n\n  const makeDefined = ident => {\n    let ii; // start from the right since we're going to remove items from the array\n\n    for (ii = globalScope.through.length - 1; ii >= 0; ii--) {\n      const ref = globalScope.through[ii];\n\n      if (ref.identifier.name === ident.name) {\n        // use \"__defineGeneric\" since we don't have a reference to \"escope.Variable\"\n        globalScope.__defineGeneric(ident.name, globalScope.set, globalScope.variables);\n\n        const variable = globalScope.set.get(ident.name);\n        variable.writeable = false; // \"through\" contains all references whose definition cannot be found\n        // so we need to update references and remove the ones that were added\n\n        globalScope.through.splice(ii, 1);\n        ref.resolved = variable;\n        variable.references.push(ref);\n      }\n    }\n  };\n\n  return {\n    ClassImplements(node) {\n      makeDefined(node.id);\n    },\n\n    DeclareInterface(node) {\n      makeDefined(node.id);\n    },\n\n    DeclareTypeAlias(node) {\n      makeDefined(node.id);\n    },\n\n    GenericTypeAnnotation(node) {\n      if (node.id.type === 'Identifier') {\n        makeDefined(node.id);\n      } else if (node.id.type === 'QualifiedTypeIdentifier') {\n        let qid;\n        qid = node.id;\n\n        do {\n          qid = qid.qualification;\n        } while (qid.qualification);\n\n        makeDefined(qid);\n      }\n    },\n\n    // Can be removed once https://github.com/babel/babel-eslint/pull/696 is published\n    OpaqueType(node) {\n      if (node.id.type === 'Identifier') {\n        makeDefined(node.id);\n      }\n    },\n\n    Program() {\n      globalScope = context.getScope();\n    },\n\n    TypeParameterDeclaration(node) {\n      for (const param of node.params) {\n        makeDefined(param);\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","schema","create","context","globalScope","makeDefined","ident","ii","through","length","ref","identifier","name","__defineGeneric","set","variables","variable","get","writeable","splice","resolved","references","push","ClassImplements","node","id","DeclareInterface","DeclareTypeAlias","GenericTypeAnnotation","type","qid","qualification","OpaqueType","Program","getScope","TypeParameterDeclaration","param","params","_default","module"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-flowtype/dist/rules/defineFlowType.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst schema = [];\n\nconst create = context => {\n  let globalScope; // do nearly the same thing that eslint does for config globals\n  // https://github.com/eslint/eslint/blob/v2.0.0/lib/eslint.js#L118-L194\n\n  const makeDefined = ident => {\n    let ii; // start from the right since we're going to remove items from the array\n\n    for (ii = globalScope.through.length - 1; ii >= 0; ii--) {\n      const ref = globalScope.through[ii];\n\n      if (ref.identifier.name === ident.name) {\n        // use \"__defineGeneric\" since we don't have a reference to \"escope.Variable\"\n        globalScope.__defineGeneric(ident.name, globalScope.set, globalScope.variables);\n\n        const variable = globalScope.set.get(ident.name);\n        variable.writeable = false; // \"through\" contains all references whose definition cannot be found\n        // so we need to update references and remove the ones that were added\n\n        globalScope.through.splice(ii, 1);\n        ref.resolved = variable;\n        variable.references.push(ref);\n      }\n    }\n  };\n\n  return {\n    ClassImplements(node) {\n      makeDefined(node.id);\n    },\n\n    DeclareInterface(node) {\n      makeDefined(node.id);\n    },\n\n    DeclareTypeAlias(node) {\n      makeDefined(node.id);\n    },\n\n    GenericTypeAnnotation(node) {\n      if (node.id.type === 'Identifier') {\n        makeDefined(node.id);\n      } else if (node.id.type === 'QualifiedTypeIdentifier') {\n        let qid;\n        qid = node.id;\n\n        do {\n          qid = qid.qualification;\n        } while (qid.qualification);\n\n        makeDefined(qid);\n      }\n    },\n\n    // Can be removed once https://github.com/babel/babel-eslint/pull/696 is published\n    OpaqueType(node) {\n      if (node.id.type === 'Identifier') {\n        makeDefined(node.id);\n      }\n    },\n\n    Program() {\n      globalScope = context.getScope();\n    },\n\n    TypeParameterDeclaration(node) {\n      for (const param of node.params) {\n        makeDefined(param);\n      }\n    }\n\n  };\n};\n\nvar _default = {\n  create,\n  schema\n};\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}