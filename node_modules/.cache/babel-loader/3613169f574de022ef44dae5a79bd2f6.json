{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst elementToComponent = {\n  svg: 'Svg',\n  circle: 'Circle',\n  clipPath: 'ClipPath',\n  ellipse: 'Ellipse',\n  g: 'G',\n  linearGradient: 'LinearGradient',\n  radialGradient: 'RadialGradient',\n  line: 'Line',\n  path: 'Path',\n  pattern: 'Pattern',\n  polygon: 'Polygon',\n  polyline: 'Polyline',\n  rect: 'Rect',\n  symbol: 'Symbol',\n  text: 'Text',\n  textPath: 'TextPath',\n  tspan: 'TSpan',\n  use: 'Use',\n  defs: 'Defs',\n  stop: 'Stop',\n  mask: 'Mask',\n  image: 'Image',\n  foreignObject: 'ForeignObject'\n};\n\nconst expoPrefix = (component, expo) => {\n  // Prefix with 'Svg.' in the case we're transforming for Expo\n  if (!expo) {\n    return component;\n  }\n\n  return (component !== 'Svg' ? 'Svg.' : '') + component;\n};\n\nconst plugin = (_ref, _ref2) => {\n  let {\n    types: t\n  } = _ref;\n  let {\n    expo\n  } = _ref2;\n\n  function replaceElement(path, state) {\n    const {\n      name\n    } = path.node.openingElement.name; // Replace element by react-native-svg components\n\n    const component = elementToComponent[name];\n\n    if (component) {\n      const prefixedComponent = expoPrefix(component, expo);\n      const openingElementName = path.get('openingElement.name');\n      openingElementName.replaceWith(t.jsxIdentifier(prefixedComponent));\n\n      if (path.has('closingElement')) {\n        const closingElementName = path.get('closingElement.name');\n        closingElementName.replaceWith(t.jsxIdentifier(prefixedComponent));\n      }\n\n      state.replacedComponents.add(prefixedComponent);\n      return;\n    } // Remove element if not supported\n\n\n    state.unsupportedComponents.add(name);\n    path.remove();\n  }\n\n  const svgElementVisitor = {\n    JSXElement(path, state) {\n      if (!path.get('openingElement.name').isJSXIdentifier({\n        name: 'svg'\n      })) {\n        return;\n      }\n\n      replaceElement(path, state);\n      path.traverse(jsxElementVisitor, state);\n    }\n\n  };\n  const jsxElementVisitor = {\n    JSXElement(path, state) {\n      replaceElement(path, state);\n    }\n\n  };\n  const importDeclarationVisitor = {\n    ImportDeclaration(path, state) {\n      if (path.get('source').isStringLiteral({\n        value: 'react-native-svg'\n      })) {\n        state.replacedComponents.forEach(component => {\n          if (path.get('specifiers').some(specifier => specifier.get('local').isIdentifier({\n            name: component\n          }))) {\n            return;\n          }\n\n          path.pushContainer('specifiers', t.importSpecifier(t.identifier(component), t.identifier(component)));\n        });\n      } else if (path.get('source').isStringLiteral({\n        value: 'expo'\n      })) {\n        path.pushContainer('specifiers', t.importSpecifier(t.identifier('Svg'), t.identifier('Svg')));\n      } else {\n        return;\n      }\n\n      if (state.unsupportedComponents.size && !path.has('trailingComments')) {\n        const componentList = [...state.unsupportedComponents].join(', ');\n        path.addComment('trailing', ` SVGR has dropped some elements not supported by react-native-svg: ${componentList} `);\n      }\n    }\n\n  };\n  return {\n    visitor: {\n      Program(path, state) {\n        state.replacedComponents = new Set();\n        state.unsupportedComponents = new Set();\n        path.traverse(svgElementVisitor, state);\n        path.traverse(importDeclarationVisitor, state);\n      }\n\n    }\n  };\n};\n\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"names":["exports","__esModule","default","elementToComponent","svg","circle","clipPath","ellipse","g","linearGradient","radialGradient","line","path","pattern","polygon","polyline","rect","symbol","text","textPath","tspan","use","defs","stop","mask","image","foreignObject","expoPrefix","component","expo","plugin","types","t","replaceElement","state","name","node","openingElement","prefixedComponent","openingElementName","get","replaceWith","jsxIdentifier","has","closingElementName","replacedComponents","add","unsupportedComponents","remove","svgElementVisitor","JSXElement","isJSXIdentifier","traverse","jsxElementVisitor","importDeclarationVisitor","ImportDeclaration","isStringLiteral","value","forEach","some","specifier","isIdentifier","pushContainer","importSpecifier","identifier","size","componentList","join","addComment","visitor","Program","Set","_default"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/@svgr/babel-plugin-transform-react-native-svg/lib/index.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst elementToComponent = {\n  svg: 'Svg',\n  circle: 'Circle',\n  clipPath: 'ClipPath',\n  ellipse: 'Ellipse',\n  g: 'G',\n  linearGradient: 'LinearGradient',\n  radialGradient: 'RadialGradient',\n  line: 'Line',\n  path: 'Path',\n  pattern: 'Pattern',\n  polygon: 'Polygon',\n  polyline: 'Polyline',\n  rect: 'Rect',\n  symbol: 'Symbol',\n  text: 'Text',\n  textPath: 'TextPath',\n  tspan: 'TSpan',\n  use: 'Use',\n  defs: 'Defs',\n  stop: 'Stop',\n  mask: 'Mask',\n  image: 'Image',\n  foreignObject: 'ForeignObject'\n};\n\nconst expoPrefix = (component, expo) => {\n  // Prefix with 'Svg.' in the case we're transforming for Expo\n  if (!expo) {\n    return component;\n  }\n\n  return (component !== 'Svg' ? 'Svg.' : '') + component;\n};\n\nconst plugin = ({\n  types: t\n}, {\n  expo\n}) => {\n  function replaceElement(path, state) {\n    const {\n      name\n    } = path.node.openingElement.name; // Replace element by react-native-svg components\n\n    const component = elementToComponent[name];\n\n    if (component) {\n      const prefixedComponent = expoPrefix(component, expo);\n      const openingElementName = path.get('openingElement.name');\n      openingElementName.replaceWith(t.jsxIdentifier(prefixedComponent));\n\n      if (path.has('closingElement')) {\n        const closingElementName = path.get('closingElement.name');\n        closingElementName.replaceWith(t.jsxIdentifier(prefixedComponent));\n      }\n\n      state.replacedComponents.add(prefixedComponent);\n      return;\n    } // Remove element if not supported\n\n\n    state.unsupportedComponents.add(name);\n    path.remove();\n  }\n\n  const svgElementVisitor = {\n    JSXElement(path, state) {\n      if (!path.get('openingElement.name').isJSXIdentifier({\n        name: 'svg'\n      })) {\n        return;\n      }\n\n      replaceElement(path, state);\n      path.traverse(jsxElementVisitor, state);\n    }\n\n  };\n  const jsxElementVisitor = {\n    JSXElement(path, state) {\n      replaceElement(path, state);\n    }\n\n  };\n  const importDeclarationVisitor = {\n    ImportDeclaration(path, state) {\n      if (path.get('source').isStringLiteral({\n        value: 'react-native-svg'\n      })) {\n        state.replacedComponents.forEach(component => {\n          if (path.get('specifiers').some(specifier => specifier.get('local').isIdentifier({\n            name: component\n          }))) {\n            return;\n          }\n\n          path.pushContainer('specifiers', t.importSpecifier(t.identifier(component), t.identifier(component)));\n        });\n      } else if (path.get('source').isStringLiteral({\n        value: 'expo'\n      })) {\n        path.pushContainer('specifiers', t.importSpecifier(t.identifier('Svg'), t.identifier('Svg')));\n      } else {\n        return;\n      }\n\n      if (state.unsupportedComponents.size && !path.has('trailingComments')) {\n        const componentList = [...state.unsupportedComponents].join(', ');\n        path.addComment('trailing', ` SVGR has dropped some elements not supported by react-native-svg: ${componentList} `);\n      }\n    }\n\n  };\n  return {\n    visitor: {\n      Program(path, state) {\n        state.replacedComponents = new Set();\n        state.unsupportedComponents = new Set();\n        path.traverse(svgElementVisitor, state);\n        path.traverse(importDeclarationVisitor, state);\n      }\n\n    }\n  };\n};\n\nvar _default = plugin;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}