{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/Rohith/mern/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(parser);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parser;\n\nfunction _parser() {\n  var data = require(\"@babel/parser\");\n\n  _parser = function _parser() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _codeFrame() {\n  var data = require(\"@babel/code-frame\");\n\n  _codeFrame = function _codeFrame() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _missingPluginHelper = require(\"./util/missing-plugin-helper\");\n\nfunction parser(pluginPasses, _ref, code) {\n  var parserOpts, _ref$highlightCode, highlightCode, _ref$filename, filename, results, _iterator, _step, plugins, _iterator2, _step2, plugin, parserOverride, ast, loc, missingPlugin, codeFrame;\n\n  return _regeneratorRuntime().wrap(function parser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          parserOpts = _ref.parserOpts, _ref$highlightCode = _ref.highlightCode, highlightCode = _ref$highlightCode === void 0 ? true : _ref$highlightCode, _ref$filename = _ref.filename, filename = _ref$filename === void 0 ? \"unknown\" : _ref$filename;\n          _context.prev = 1;\n          results = [];\n          _iterator = _createForOfIteratorHelper(pluginPasses);\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              plugins = _step.value;\n              _iterator2 = _createForOfIteratorHelper(plugins);\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  plugin = _step2.value;\n                  parserOverride = plugin.parserOverride;\n\n                  if (parserOverride) {\n                    ast = parserOverride(code, parserOpts, _parser().parse);\n                    if (ast !== undefined) results.push(ast);\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          if (!(results.length === 0)) {\n            _context.next = 9;\n            break;\n          }\n\n          return _context.abrupt(\"return\", (0, _parser().parse)(code, parserOpts));\n\n        case 9:\n          if (!(results.length === 1)) {\n            _context.next = 14;\n            break;\n          }\n\n          return _context.delegateYield([], \"t0\", 11);\n\n        case 11:\n          if (!(typeof results[0].then === \"function\")) {\n            _context.next = 13;\n            break;\n          }\n\n          throw new Error(\"You appear to be using an async parser plugin, \" + \"which your current version of Babel does not support. \" + \"If you're using a published plugin, you may need to upgrade \" + \"your @babel/core version.\");\n\n        case 13:\n          return _context.abrupt(\"return\", results[0]);\n\n        case 14:\n          throw new Error(\"More than one plugin attempted to override parsing.\");\n\n        case 17:\n          _context.prev = 17;\n          _context.t1 = _context[\"catch\"](1);\n\n          if (_context.t1.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n            _context.t1.message += \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" + \"or sourceType:unambiguous in your Babel config for this file.\";\n          }\n\n          loc = _context.t1.loc, missingPlugin = _context.t1.missingPlugin;\n\n          if (loc) {\n            codeFrame = (0, _codeFrame().codeFrameColumns)(code, {\n              start: {\n                line: loc.line,\n                column: loc.column + 1\n              }\n            }, {\n              highlightCode: highlightCode\n            });\n\n            if (missingPlugin) {\n              _context.t1.message = \"\".concat(filename, \": \") + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame);\n            } else {\n              _context.t1.message = \"\".concat(filename, \": \").concat(_context.t1.message, \"\\n\\n\") + codeFrame;\n            }\n\n            _context.t1.code = \"BABEL_PARSE_ERROR\";\n          }\n\n          throw _context.t1;\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 17]]);\n}\n\n0 && 0;","map":{"version":3,"mappings":";;;;;;sDAQyBA,M;;;;;;;AAPzB;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AACA;;AAKe,SAAUF,MAAV,CACbG,YADa,QAGbC,IAHa;EAAA;;EAAA;IAAA;MAAA;QAAA;UAEXC,UAFW,QAEXA,UAFW,4BAECC,aAFD,EAECA,aAFD,mCAEiB,IAFjB,4CAEuBC,QAFvB,EAEuBA,QAFvB,8BAEkC,SAFlC;UAAA;UAMLC,OANK,GAMK,EANL;UAAA,uCAOWL,YAPX;;UAAA;YAOX,oDAAoC;cAAzBM,OAAyB;cAAA,wCACbA,OADa;;cAAA;gBAClC,uDAA8B;kBAAnBC,MAAmB;kBACpBC,cADoB,GACDD,MADC,CACpBC,cADoB;;kBAE5B,IAAIA,cAAJ,EAAoB;oBACZC,GADY,GACND,cAAc,CAACP,IAAD,EAAOC,UAAP,EAAmBQ,eAAnB,CADR;oBAGlB,IAAID,GAAG,KAAKE,SAAZ,EAAuBN,OAAO,CAACO,IAARP,CAAaI,GAAbJ;kBACxB;gBACF;cARiC;gBAAA;cAAA;gBAAA;cAAA;YASnC;UAhBU;YAAA;UAAA;YAAA;UAAA;;UAAA,MAkBPA,OAAO,CAACQ,MAARR,KAAmB,CAlBZ;YAAA;YAAA;UAAA;;UAAA,iCAmBF,qBAAMJ,IAAN,EAAYC,UAAZ,CAnBE;;QAAA;UAAA,MAoBAG,OAAO,CAACQ,MAARR,KAAmB,CApBnB;YAAA;YAAA;UAAA;;UAsBT,8BAAO,EAAP;;QAtBS;UAAA,MAuBL,OAAOA,OAAO,CAAC,CAAD,CAAPA,CAAWS,IAAlB,KAA2B,UAvBtB;YAAA;YAAA;UAAA;;UAAA,MAwBD,IAAIC,KAAJ,CACH,2MADG,CAxBC;;QAAA;UAAA,iCA+BFV,OAAO,CAAC,CAAD,CA/BL;;QAAA;UAAA,MAkCL,IAAIU,KAAJ,CAAU,qDAAV,CAlCK;;QAAA;UAAA;UAAA;;UAoCX,IAAIC,YAAIf,IAAJe,KAAa,yCAAjB,EAA4D;YAC1DA,YAAIC,OAAJD,IACE,0EACA,+DAFFA;UAID;;UAEOE,GA3CG,eA2CHA,GA3CG,EA2CEC,aA3CF,eA2CEA,aA3CF;;UA4CX,IAAID,GAAJ,EAAS;YACDE,SADC,GACW,mCAChBnB,IADgB,EAEhB;cACEoB,KAAK,EAAE;gBACLC,IAAI,EAAEJ,GAAG,CAACI,IADL;gBAELC,MAAM,EAAEL,GAAG,CAACK,MAAJL,GAAa;cAFhB;YADT,CAFgB,EAQhB;cACEf;YADF,CARgB,CADX;;YAaP,IAAIgB,aAAJ,EAAmB;cACjBH,YAAIC,OAAJD,GACG,UAAEZ,QAAF,UACD,kCAA6Be,aAAa,CAAC,CAAD,CAA1C,EAA+CD,GAA/C,EAAoDE,SAApD,CAFFJ;YADF,OAIO;cACLA,YAAIC,OAAJD,GAAe,UAAEZ,QAAF,eAAeY,YAAIC,OAAnB,YAAmCG,SAAlDJ;YACD;;YACDA,YAAIf,IAAJe,GAAW,mBAAXA;UACD;;UAjEU;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","names":["parser","_parser","_codeFrame","pluginPasses","code","parserOpts","highlightCode","filename","results","plugins","plugin","parserOverride","ast","parse","undefined","push","length","then","Error","err","message","loc","missingPlugin","codeFrame","start","line","column"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\@babel\\core\\src\\parser\\index.ts"],"sourcesContent":["import type { Handler } from \"gensync\";\nimport { parse } from \"@babel/parser\";\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport generateMissingPluginMessage from \"./util/missing-plugin-helper\";\nimport type { PluginPasses } from \"../config\";\n\nexport type ParseResult = ReturnType<typeof parse>;\n\nexport default function* parser(\n  pluginPasses: PluginPasses,\n  { parserOpts, highlightCode = true, filename = \"unknown\" }: any,\n  code: string,\n): Handler<ParseResult> {\n  try {\n    const results = [];\n    for (const plugins of pluginPasses) {\n      for (const plugin of plugins) {\n        const { parserOverride } = plugin;\n        if (parserOverride) {\n          const ast = parserOverride(code, parserOpts, parse);\n\n          if (ast !== undefined) results.push(ast);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      return parse(code, parserOpts);\n    } else if (results.length === 1) {\n      // @ts-expect-error - If we want to allow async parsers\n      yield* [];\n      if (typeof results[0].then === \"function\") {\n        throw new Error(\n          `You appear to be using an async parser plugin, ` +\n            `which your current version of Babel does not support. ` +\n            `If you're using a published plugin, you may need to upgrade ` +\n            `your @babel/core version.`,\n        );\n      }\n      return results[0];\n    }\n    // TODO: Add an error code\n    throw new Error(\"More than one plugin attempted to override parsing.\");\n  } catch (err) {\n    if (err.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n      err.message +=\n        \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" +\n        \"or sourceType:unambiguous in your Babel config for this file.\";\n      // err.code will be changed to BABEL_PARSE_ERROR later.\n    }\n\n    const { loc, missingPlugin } = err;\n    if (loc) {\n      const codeFrame = codeFrameColumns(\n        code,\n        {\n          start: {\n            line: loc.line,\n            column: loc.column + 1,\n          },\n        },\n        {\n          highlightCode,\n        },\n      );\n      if (missingPlugin) {\n        err.message =\n          `${filename}: ` +\n          generateMissingPluginMessage(missingPlugin[0], loc, codeFrame);\n      } else {\n        err.message = `${filename}: ${err.message}\\n\\n` + codeFrame;\n      }\n      err.code = \"BABEL_PARSE_ERROR\";\n    }\n    throw err;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}