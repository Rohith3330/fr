{"ast":null,"code":"/**\n * @fileoverview Rule to flag when using constructor for wrapper objects\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"Disallow `new` operators with the `String`, `Number`, and `Boolean` objects\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-new-wrappers\"\n    },\n    schema: [],\n    messages: {\n      noConstructor: \"Do not use {{fn}} as a constructor.\"\n    }\n  },\n\n  create(context) {\n    return {\n      NewExpression(node) {\n        const wrapperObjects = [\"String\", \"Number\", \"Boolean\"];\n\n        if (wrapperObjects.includes(node.callee.name)) {\n          context.report({\n            node,\n            messageId: \"noConstructor\",\n            data: {\n              fn: node.callee.name\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","recommended","url","schema","messages","noConstructor","create","context","NewExpression","node","wrapperObjects","includes","callee","name","report","messageId","data","fn"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/lib/rules/no-new-wrappers.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when using constructor for wrapper objects\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow `new` operators with the `String`, `Number`, and `Boolean` objects\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-new-wrappers\"\n        },\n\n        schema: [],\n\n        messages: {\n            noConstructor: \"Do not use {{fn}} as a constructor.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            NewExpression(node) {\n                const wrapperObjects = [\"String\", \"Number\", \"Boolean\"];\n\n                if (wrapperObjects.includes(node.callee.name)) {\n                    context.report({\n                        node,\n                        messageId: \"noConstructor\",\n                        data: { fn: node.callee.name }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,6EADX;MAEFC,WAAW,EAAE,KAFX;MAGFC,GAAG,EAAE;IAHH,CAHJ;IASFC,MAAM,EAAE,EATN;IAWFC,QAAQ,EAAE;MACNC,aAAa,EAAE;IADT;EAXR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IAEZ,OAAO;MAEHC,aAAa,CAACC,IAAD,EAAO;QAChB,MAAMC,cAAc,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CAAvB;;QAEA,IAAIA,cAAc,CAACC,QAAf,CAAwBF,IAAI,CAACG,MAAL,CAAYC,IAApC,CAAJ,EAA+C;UAC3CN,OAAO,CAACO,MAAR,CAAe;YACXL,IADW;YAEXM,SAAS,EAAE,eAFA;YAGXC,IAAI,EAAE;cAAEC,EAAE,EAAER,IAAI,CAACG,MAAL,CAAYC;YAAlB;UAHK,CAAf;QAKH;MACJ;;IAZE,CAAP;EAeH;;AAlCY,CAAjB"},"metadata":{},"sourceType":"script"}