{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;\n\nconst utils = require(\"../utils\");\n\nfunction generate(patterns, settings) {\n  const positivePatterns = getPositivePatterns(patterns);\n  const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);\n  const staticPatterns = positivePatterns.filter(pattern => utils.pattern.isStaticPattern(pattern, settings));\n  const dynamicPatterns = positivePatterns.filter(pattern => utils.pattern.isDynamicPattern(pattern, settings));\n  const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns,\n  /* dynamic */\n  false);\n  const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns,\n  /* dynamic */\n  true);\n  return staticTasks.concat(dynamicTasks);\n}\n\nexports.generate = generate;\n/**\r\n * Returns tasks grouped by basic pattern directories.\r\n *\r\n * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.\r\n * This is necessary because directory traversal starts at the base directory and goes deeper.\r\n */\n\nfunction convertPatternsToTasks(positive, negative, dynamic) {\n  const tasks = [];\n  const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);\n  const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);\n  const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);\n  const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);\n  tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));\n  /*\r\n   * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory\r\n   * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.\r\n   */\n\n  if ('.' in insideCurrentDirectoryGroup) {\n    tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));\n  } else {\n    tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));\n  }\n\n  return tasks;\n}\n\nexports.convertPatternsToTasks = convertPatternsToTasks;\n\nfunction getPositivePatterns(patterns) {\n  return utils.pattern.getPositivePatterns(patterns);\n}\n\nexports.getPositivePatterns = getPositivePatterns;\n\nfunction getNegativePatternsAsPositive(patterns, ignore) {\n  const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);\n  const positive = negative.map(utils.pattern.convertToPositivePattern);\n  return positive;\n}\n\nexports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;\n\nfunction groupPatternsByBaseDirectory(patterns) {\n  const group = {};\n  return patterns.reduce((collection, pattern) => {\n    const base = utils.pattern.getBaseDirectory(pattern);\n\n    if (base in collection) {\n      collection[base].push(pattern);\n    } else {\n      collection[base] = [pattern];\n    }\n\n    return collection;\n  }, group);\n}\n\nexports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;\n\nfunction convertPatternGroupsToTasks(positive, negative, dynamic) {\n  return Object.keys(positive).map(base => {\n    return convertPatternGroupToTask(base, positive[base], negative, dynamic);\n  });\n}\n\nexports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;\n\nfunction convertPatternGroupToTask(base, positive, negative, dynamic) {\n  return {\n    dynamic,\n    positive,\n    negative,\n    base,\n    patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))\n  };\n}\n\nexports.convertPatternGroupToTask = convertPatternGroupToTask;","map":{"version":3,"names":["Object","defineProperty","exports","value","convertPatternGroupToTask","convertPatternGroupsToTasks","groupPatternsByBaseDirectory","getNegativePatternsAsPositive","getPositivePatterns","convertPatternsToTasks","generate","utils","require","patterns","settings","positivePatterns","negativePatterns","ignore","staticPatterns","filter","pattern","isStaticPattern","dynamicPatterns","isDynamicPattern","staticTasks","dynamicTasks","concat","positive","negative","dynamic","tasks","patternsOutsideCurrentDirectory","getPatternsOutsideCurrentDirectory","patternsInsideCurrentDirectory","getPatternsInsideCurrentDirectory","outsideCurrentDirectoryGroup","insideCurrentDirectoryGroup","push","getNegativePatterns","map","convertToPositivePattern","group","reduce","collection","base","getBaseDirectory","keys","convertToNegativePattern"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/fast-glob/out/managers/tasks.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;\r\nconst utils = require(\"../utils\");\r\nfunction generate(patterns, settings) {\r\n    const positivePatterns = getPositivePatterns(patterns);\r\n    const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);\r\n    const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));\r\n    const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));\r\n    const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, /* dynamic */ false);\r\n    const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, /* dynamic */ true);\r\n    return staticTasks.concat(dynamicTasks);\r\n}\r\nexports.generate = generate;\r\n/**\r\n * Returns tasks grouped by basic pattern directories.\r\n *\r\n * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.\r\n * This is necessary because directory traversal starts at the base directory and goes deeper.\r\n */\r\nfunction convertPatternsToTasks(positive, negative, dynamic) {\r\n    const tasks = [];\r\n    const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);\r\n    const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);\r\n    const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);\r\n    const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);\r\n    tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));\r\n    /*\r\n     * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory\r\n     * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.\r\n     */\r\n    if ('.' in insideCurrentDirectoryGroup) {\r\n        tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));\r\n    }\r\n    else {\r\n        tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));\r\n    }\r\n    return tasks;\r\n}\r\nexports.convertPatternsToTasks = convertPatternsToTasks;\r\nfunction getPositivePatterns(patterns) {\r\n    return utils.pattern.getPositivePatterns(patterns);\r\n}\r\nexports.getPositivePatterns = getPositivePatterns;\r\nfunction getNegativePatternsAsPositive(patterns, ignore) {\r\n    const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);\r\n    const positive = negative.map(utils.pattern.convertToPositivePattern);\r\n    return positive;\r\n}\r\nexports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;\r\nfunction groupPatternsByBaseDirectory(patterns) {\r\n    const group = {};\r\n    return patterns.reduce((collection, pattern) => {\r\n        const base = utils.pattern.getBaseDirectory(pattern);\r\n        if (base in collection) {\r\n            collection[base].push(pattern);\r\n        }\r\n        else {\r\n            collection[base] = [pattern];\r\n        }\r\n        return collection;\r\n    }, group);\r\n}\r\nexports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;\r\nfunction convertPatternGroupsToTasks(positive, negative, dynamic) {\r\n    return Object.keys(positive).map((base) => {\r\n        return convertPatternGroupToTask(base, positive[base], negative, dynamic);\r\n    });\r\n}\r\nexports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;\r\nfunction convertPatternGroupToTask(base, positive, negative, dynamic) {\r\n    return {\r\n        dynamic,\r\n        positive,\r\n        negative,\r\n        base,\r\n        patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))\r\n    };\r\n}\r\nexports.convertPatternGroupToTask = convertPatternGroupToTask;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}