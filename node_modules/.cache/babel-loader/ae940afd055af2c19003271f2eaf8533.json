{"ast":null,"code":"/*!\n * strip-comments <https://github.com/jonschlinkert/strip-comments>\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n'use strict';\n\nconst compile = require('./lib/compile');\n\nconst parse = require('./lib/parse');\n/**\n * Strip all code comments from the given `input`, including protected\n * comments that start with `!`, unless disabled by setting `options.keepProtected`\n * to true.\n *\n * ```js\n * const str = strip('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\n * console.log(str);\n * // => 'const foo = \"bar\";'\n * ```\n * @name  strip\n * @param  {String} `input` string from which to strip comments\n * @param  {Object} `options` optional options, passed to [extract-comments][extract-comments]\n * @option {Boolean} [options] `line` if `false` strip only block comments, default `true`\n * @option {Boolean} [options] `block` if `false` strip only line comments, default `true`\n * @option {Boolean} [options] `keepProtected` Keep ignored comments (e.g. `/*!` and `//!`)\n * @option {Boolean} [options] `preserveNewlines` Preserve newlines after comments are stripped\n * @return {String} modified input\n * @api public\n */\n\n\nconst strip = module.exports = (input, options) => {\n  const opts = { ...options,\n    block: true,\n    line: true\n  };\n  return compile(parse(input, opts), opts);\n};\n/**\n * Strip only block comments.\n *\n * ```js\n * const strip = require('..');\n * const str = strip.block('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\n * console.log(str);\n * // => 'const foo = \"bar\";// this is a comment'\n * ```\n * @name  .block\n * @param  {String} `input` string from which to strip comments\n * @param  {Object} `options` pass `opts.keepProtected: true` to keep ignored comments (e.g. `/*!`)\n * @return {String} modified string\n * @api public\n */\n\n\nstrip.block = (input, options) => {\n  const opts = { ...options,\n    block: true\n  };\n  return compile(parse(input, opts), opts);\n};\n/**\n * Strip only line comments.\n *\n * ```js\n * const str = strip.line('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\n * console.log(str);\n * // => 'const foo = \"bar\";\\n/* me too *\\/'\n * ```\n * @name  .line\n * @param  {String} `input` string from which to strip comments\n * @param  {Object} `options` pass `opts.keepProtected: true` to keep ignored comments (e.g. `//!`)\n * @return {String} modified string\n * @api public\n */\n\n\nstrip.line = (input, options) => {\n  const opts = { ...options,\n    line: true\n  };\n  return compile(parse(input, opts), opts);\n};\n/**\n * Strip the first comment from the given `input`. Or, if `opts.keepProtected` is true,\n * the first non-protected comment will be stripped.\n *\n * ```js\n * const output = strip.first(input, { keepProtected: true });\n * console.log(output);\n * // => '//! first comment\\nfoo; '\n * ```\n * @name .first\n * @param {String} `input`\n * @param {Object} `options` pass `opts.keepProtected: true` to keep comments with `!`\n * @return {String}\n * @api public\n */\n\n\nstrip.first = (input, options) => {\n  const opts = { ...options,\n    block: true,\n    line: true,\n    first: true\n  };\n  return compile(parse(input, opts), opts);\n};\n/**\n * Parses a string and returns a basic CST (Concrete Syntax Tree).\n *\n * ```js\n * const strip = require('..');\n * const str = strip.block('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\n * console.log(str);\n * // => 'const foo = \"bar\";// this is a comment'\n * ```\n * @name  .block\n * @param  {String} `input` string from which to strip comments\n * @param  {Object} `options` pass `opts.keepProtected: true` to keep ignored comments (e.g. `/*!`)\n * @return {String} modified string\n * @api public\n */\n\n\nstrip.parse = parse;","map":{"version":3,"names":["compile","require","parse","strip","module","exports","input","options","opts","block","line","first"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/strip-comments/index.js"],"sourcesContent":["/*!\n * strip-comments <https://github.com/jonschlinkert/strip-comments>\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nconst compile = require('./lib/compile');\nconst parse = require('./lib/parse');\n\n/**\n * Strip all code comments from the given `input`, including protected\n * comments that start with `!`, unless disabled by setting `options.keepProtected`\n * to true.\n *\n * ```js\n * const str = strip('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\n * console.log(str);\n * // => 'const foo = \"bar\";'\n * ```\n * @name  strip\n * @param  {String} `input` string from which to strip comments\n * @param  {Object} `options` optional options, passed to [extract-comments][extract-comments]\n * @option {Boolean} [options] `line` if `false` strip only block comments, default `true`\n * @option {Boolean} [options] `block` if `false` strip only line comments, default `true`\n * @option {Boolean} [options] `keepProtected` Keep ignored comments (e.g. `/*!` and `//!`)\n * @option {Boolean} [options] `preserveNewlines` Preserve newlines after comments are stripped\n * @return {String} modified input\n * @api public\n */\n\nconst strip = module.exports = (input, options) => {\n  const opts = { ...options, block: true, line: true };\n  return compile(parse(input, opts), opts);\n};\n\n/**\n * Strip only block comments.\n *\n * ```js\n * const strip = require('..');\n * const str = strip.block('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\n * console.log(str);\n * // => 'const foo = \"bar\";// this is a comment'\n * ```\n * @name  .block\n * @param  {String} `input` string from which to strip comments\n * @param  {Object} `options` pass `opts.keepProtected: true` to keep ignored comments (e.g. `/*!`)\n * @return {String} modified string\n * @api public\n */\n\nstrip.block = (input, options) => {\n  const opts = { ...options, block: true };\n  return compile(parse(input, opts), opts);\n};\n\n/**\n * Strip only line comments.\n *\n * ```js\n * const str = strip.line('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\n * console.log(str);\n * // => 'const foo = \"bar\";\\n/* me too *\\/'\n * ```\n * @name  .line\n * @param  {String} `input` string from which to strip comments\n * @param  {Object} `options` pass `opts.keepProtected: true` to keep ignored comments (e.g. `//!`)\n * @return {String} modified string\n * @api public\n */\n\nstrip.line = (input, options) => {\n  const opts = { ...options, line: true };\n  return compile(parse(input, opts), opts);\n};\n\n/**\n * Strip the first comment from the given `input`. Or, if `opts.keepProtected` is true,\n * the first non-protected comment will be stripped.\n *\n * ```js\n * const output = strip.first(input, { keepProtected: true });\n * console.log(output);\n * // => '//! first comment\\nfoo; '\n * ```\n * @name .first\n * @param {String} `input`\n * @param {Object} `options` pass `opts.keepProtected: true` to keep comments with `!`\n * @return {String}\n * @api public\n */\n\nstrip.first = (input, options) => {\n  const opts = { ...options, block: true, line: true, first: true };\n  return compile(parse(input, opts), opts);\n};\n\n/**\n * Parses a string and returns a basic CST (Concrete Syntax Tree).\n *\n * ```js\n * const strip = require('..');\n * const str = strip.block('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\n * console.log(str);\n * // => 'const foo = \"bar\";// this is a comment'\n * ```\n * @name  .block\n * @param  {String} `input` string from which to strip comments\n * @param  {Object} `options` pass `opts.keepProtected: true` to keep ignored comments (e.g. `/*!`)\n * @return {String} modified string\n * @api public\n */\n\nstrip.parse = parse;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAME,KAAK,GAAGC,MAAM,CAACC,OAAP,GAAiB,CAACC,KAAD,EAAQC,OAAR,KAAoB;EACjD,MAAMC,IAAI,GAAG,EAAE,GAAGD,OAAL;IAAcE,KAAK,EAAE,IAArB;IAA2BC,IAAI,EAAE;EAAjC,CAAb;EACA,OAAOV,OAAO,CAACE,KAAK,CAACI,KAAD,EAAQE,IAAR,CAAN,EAAqBA,IAArB,CAAd;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAL,KAAK,CAACM,KAAN,GAAc,CAACH,KAAD,EAAQC,OAAR,KAAoB;EAChC,MAAMC,IAAI,GAAG,EAAE,GAAGD,OAAL;IAAcE,KAAK,EAAE;EAArB,CAAb;EACA,OAAOT,OAAO,CAACE,KAAK,CAACI,KAAD,EAAQE,IAAR,CAAN,EAAqBA,IAArB,CAAd;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAL,KAAK,CAACO,IAAN,GAAa,CAACJ,KAAD,EAAQC,OAAR,KAAoB;EAC/B,MAAMC,IAAI,GAAG,EAAE,GAAGD,OAAL;IAAcG,IAAI,EAAE;EAApB,CAAb;EACA,OAAOV,OAAO,CAACE,KAAK,CAACI,KAAD,EAAQE,IAAR,CAAN,EAAqBA,IAArB,CAAd;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAL,KAAK,CAACQ,KAAN,GAAc,CAACL,KAAD,EAAQC,OAAR,KAAoB;EAChC,MAAMC,IAAI,GAAG,EAAE,GAAGD,OAAL;IAAcE,KAAK,EAAE,IAArB;IAA2BC,IAAI,EAAE,IAAjC;IAAuCC,KAAK,EAAE;EAA9C,CAAb;EACA,OAAOX,OAAO,CAACE,KAAK,CAACI,KAAD,EAAQE,IAAR,CAAN,EAAqBA,IAArB,CAAd;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAL,KAAK,CAACD,KAAN,GAAcA,KAAd"},"metadata":{},"sourceType":"script"}