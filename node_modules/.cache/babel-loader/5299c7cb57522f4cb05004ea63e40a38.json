{"ast":null,"code":"/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nvar path = require('path'),\n    loaderUtils = require('loader-utils');\n/**\n * Create a value processing function for a given file path.\n *\n * @param {function(Object):string} join The inner join function\n * @param {string} root The loader options.root value where given\n * @param {string} directory The directory of the file webpack is currently processing\n * @return {function} value processing function\n */\n\n\nfunction valueProcessor(_ref) {\n  let {\n    join,\n    root,\n    directory\n  } = _ref;\n  var URL_STATEMENT_REGEX = /(url\\s*\\(\\s*)(?:(['\"])((?:(?!\\2).)*)(\\2)|([^'\"](?:(?!\\)).)*[^'\"]))(\\s*\\))/g,\n      QUERY_REGEX = /([?#])/g;\n  /**\n   * Process the given CSS declaration value.\n   *\n   * @param {string} value A declaration value that may or may not contain a url() statement\n   * @param {function(number):Object} getPathsAtChar Given an offset in the declaration value get a\n   *  list of possible absolute path strings\n   */\n\n  return function transformValue(value, getPathsAtChar) {\n    // allow multiple url() values in the declaration\n    //  split by url statements and process the content\n    //  additional capture groups are needed to match quotations correctly\n    //  escaped quotations are not considered\n    return value.split(URL_STATEMENT_REGEX).map(initialise).map(eachSplitOrGroup).join('');\n    /**\n     * Ensure all capture group tokens are a valid string.\n     *\n     * @param {string|void} token A capture group or uncaptured token\n     * @returns {string}\n     */\n\n    function initialise(token) {\n      return typeof token === 'string' ? token : '';\n    }\n    /**\n     * An Array reduce function that accumulates string length.\n     */\n\n\n    function accumulateLength(accumulator, element) {\n      return accumulator + element.length;\n    }\n    /**\n     * Encode the content portion of <code>url()</code> statements.\n     * There are 6 capture groups in the split making every 7th unmatched.\n     *\n     * @param {string} element A single split item\n     * @param {number} i The index of the item in the split\n     * @param {Array} arr The array of split values\n     * @returns {string} Every 3 or 5 items is an encoded url everything else is as is\n     */\n\n\n    function eachSplitOrGroup(element, i, arr) {\n      // the content of the url() statement is either in group 3 or group 5\n      var mod = i % 7; // only one of the capture groups 3 or 5 will match the other will be falsey\n\n      if (element && (mod === 3 || mod === 5)) {\n        // calculate the offset of the match from the front of the string\n        var position = arr.slice(0, i - mod + 1).reduce(accumulateLength, 0); // detect quoted url and unescape backslashes\n\n        var before = arr[i - 1],\n            after = arr[i + 1],\n            isQuoted = before === after && (before === '\\'' || before === '\"'),\n            unescaped = isQuoted ? element.replace(/\\\\{2}/g, '\\\\') : element; // split into uri and query/hash and then determine if the uri is some type of file\n\n        var split = unescaped.split(QUERY_REGEX),\n            uri = split[0],\n            query = split.slice(1).join(''),\n            isRelative = testIsRelative(uri),\n            isAbsolute = testIsAbsolute(uri); // file like URIs are processed but not all URIs are files\n\n        if (isRelative || isAbsolute) {\n          var bases = getPathsAtChar(position),\n              // construct iterator as late as possible in case sourcemap invalid\n          absolute = join({\n            uri,\n            query,\n            isAbsolute,\n            bases\n          });\n\n          if (typeof absolute === 'string') {\n            var relative = path.relative(directory, absolute).replace(/\\\\/g, '/'); // #6 - backslashes are not legal in URI\n\n            return loaderUtils.urlToRequest(relative + query);\n          }\n        }\n      } // everything else, including parentheses and quotation (where present) and media statements\n\n\n      return element;\n    }\n  };\n  /**\n   * The loaderUtils.isUrlRequest() doesn't support windows absolute paths on principle. We do not subscribe to that\n   * dogma so we add path.isAbsolute() check to allow them.\n   *\n   * We also eliminate module relative (~) paths.\n   *\n   * @param {string|undefined} uri A uri string possibly empty or undefined\n   * @return {boolean} True for relative uri\n   */\n\n  function testIsRelative(uri) {\n    return !!uri && loaderUtils.isUrlRequest(uri, false) && !path.isAbsolute(uri) && uri.indexOf('~') !== 0;\n  }\n  /**\n   * The loaderUtils.isUrlRequest() doesn't support windows absolute paths on principle. We do not subscribe to that\n   * dogma so we add path.isAbsolute() check to allow them.\n   *\n   * @param {string|undefined} uri A uri string possibly empty or undefined\n   * @return {boolean} True for absolute uri\n   */\n\n\n  function testIsAbsolute(uri) {\n    return !!uri && typeof root === 'string' && loaderUtils.isUrlRequest(uri, root) && (/^\\//.test(uri) || path.isAbsolute(uri));\n  }\n}\n\nmodule.exports = valueProcessor;","map":{"version":3,"names":["path","require","loaderUtils","valueProcessor","join","root","directory","URL_STATEMENT_REGEX","QUERY_REGEX","transformValue","value","getPathsAtChar","split","map","initialise","eachSplitOrGroup","token","accumulateLength","accumulator","element","length","i","arr","mod","position","slice","reduce","before","after","isQuoted","unescaped","replace","uri","query","isRelative","testIsRelative","isAbsolute","testIsAbsolute","bases","absolute","relative","urlToRequest","isUrlRequest","indexOf","test","module","exports"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/resolve-url-loader/lib/value-processor.js"],"sourcesContent":["/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nvar path        = require('path'),\n    loaderUtils = require('loader-utils');\n\n/**\n * Create a value processing function for a given file path.\n *\n * @param {function(Object):string} join The inner join function\n * @param {string} root The loader options.root value where given\n * @param {string} directory The directory of the file webpack is currently processing\n * @return {function} value processing function\n */\nfunction valueProcessor({ join, root, directory }) {\n  var URL_STATEMENT_REGEX = /(url\\s*\\(\\s*)(?:(['\"])((?:(?!\\2).)*)(\\2)|([^'\"](?:(?!\\)).)*[^'\"]))(\\s*\\))/g,\n      QUERY_REGEX         = /([?#])/g;\n\n  /**\n   * Process the given CSS declaration value.\n   *\n   * @param {string} value A declaration value that may or may not contain a url() statement\n   * @param {function(number):Object} getPathsAtChar Given an offset in the declaration value get a\n   *  list of possible absolute path strings\n   */\n  return function transformValue(value, getPathsAtChar) {\n\n    // allow multiple url() values in the declaration\n    //  split by url statements and process the content\n    //  additional capture groups are needed to match quotations correctly\n    //  escaped quotations are not considered\n    return value\n      .split(URL_STATEMENT_REGEX)\n      .map(initialise)\n      .map(eachSplitOrGroup)\n      .join('');\n\n    /**\n     * Ensure all capture group tokens are a valid string.\n     *\n     * @param {string|void} token A capture group or uncaptured token\n     * @returns {string}\n     */\n    function initialise(token) {\n      return typeof token === 'string' ? token : '';\n    }\n\n    /**\n     * An Array reduce function that accumulates string length.\n     */\n    function accumulateLength(accumulator, element) {\n      return accumulator + element.length;\n    }\n\n    /**\n     * Encode the content portion of <code>url()</code> statements.\n     * There are 6 capture groups in the split making every 7th unmatched.\n     *\n     * @param {string} element A single split item\n     * @param {number} i The index of the item in the split\n     * @param {Array} arr The array of split values\n     * @returns {string} Every 3 or 5 items is an encoded url everything else is as is\n     */\n    function eachSplitOrGroup(element, i, arr) {\n\n      // the content of the url() statement is either in group 3 or group 5\n      var mod = i % 7;\n\n      // only one of the capture groups 3 or 5 will match the other will be falsey\n      if (element && ((mod === 3) || (mod === 5))) {\n\n        // calculate the offset of the match from the front of the string\n        var position = arr.slice(0, i - mod + 1).reduce(accumulateLength, 0);\n\n        // detect quoted url and unescape backslashes\n        var before    = arr[i - 1],\n            after     = arr[i + 1],\n            isQuoted  = (before === after) && ((before === '\\'') || (before === '\"')),\n            unescaped = isQuoted ? element.replace(/\\\\{2}/g, '\\\\') : element;\n\n        // split into uri and query/hash and then determine if the uri is some type of file\n        var split      = unescaped.split(QUERY_REGEX),\n            uri        = split[0],\n            query      = split.slice(1).join(''),\n            isRelative = testIsRelative(uri),\n            isAbsolute = testIsAbsolute(uri);\n\n        // file like URIs are processed but not all URIs are files\n        if (isRelative || isAbsolute) {\n          var bases    = getPathsAtChar(position), // construct iterator as late as possible in case sourcemap invalid\n              absolute = join({ uri, query, isAbsolute, bases });\n\n          if (typeof absolute === 'string') {\n            var relative = path.relative(directory, absolute)\n              .replace(/\\\\/g, '/'); // #6 - backslashes are not legal in URI\n\n            return loaderUtils.urlToRequest(relative + query);\n          }\n        }\n      }\n\n      // everything else, including parentheses and quotation (where present) and media statements\n      return element;\n    }\n  };\n\n  /**\n   * The loaderUtils.isUrlRequest() doesn't support windows absolute paths on principle. We do not subscribe to that\n   * dogma so we add path.isAbsolute() check to allow them.\n   *\n   * We also eliminate module relative (~) paths.\n   *\n   * @param {string|undefined} uri A uri string possibly empty or undefined\n   * @return {boolean} True for relative uri\n   */\n  function testIsRelative(uri) {\n    return !!uri && loaderUtils.isUrlRequest(uri, false) && !path.isAbsolute(uri) && (uri.indexOf('~') !== 0);\n  }\n\n  /**\n   * The loaderUtils.isUrlRequest() doesn't support windows absolute paths on principle. We do not subscribe to that\n   * dogma so we add path.isAbsolute() check to allow them.\n   *\n   * @param {string|undefined} uri A uri string possibly empty or undefined\n   * @return {boolean} True for absolute uri\n   */\n  function testIsAbsolute(uri) {\n    return !!uri && (typeof root === 'string') && loaderUtils.isUrlRequest(uri, root) &&\n      (/^\\//.test(uri) || path.isAbsolute(uri));\n  }\n}\n\nmodule.exports = valueProcessor;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}