{"ast":null,"code":"// Limited implementation of python % string operator, supports only %s and %r for now\n// (other formats are not used here, but may appear in custom templates)\n'use strict';\n\nconst {\n  inspect\n} = require('util');\n\nmodule.exports = function sub(pattern) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  let regex = /%(?:(%)|(-)?(\\*)?(?:\\((\\w+)\\))?([A-Za-z]))/g;\n  let result = pattern.replace(regex, function (_, is_literal, is_left_align, is_padded, name, format) {\n    if (is_literal) return '%';\n    let padded_count = 0;\n\n    if (is_padded) {\n      if (values.length === 0) throw new TypeError('not enough arguments for format string');\n      padded_count = values.shift();\n      if (!Number.isInteger(padded_count)) throw new TypeError('* wants int');\n    }\n\n    let str;\n\n    if (name !== undefined) {\n      let dict = values[0];\n      if (typeof dict !== 'object' || dict === null) throw new TypeError('format requires a mapping');\n      if (!(name in dict)) throw new TypeError(`no such key: '${name}'`);\n      str = dict[name];\n    } else {\n      if (values.length === 0) throw new TypeError('not enough arguments for format string');\n      str = values.shift();\n    }\n\n    switch (format) {\n      case 's':\n        str = String(str);\n        break;\n\n      case 'r':\n        str = inspect(str);\n        break;\n\n      case 'd':\n      case 'i':\n        if (typeof str !== 'number') {\n          throw new TypeError(`%${format} format: a number is required, not ${typeof str}`);\n        }\n\n        str = String(str.toFixed(0));\n        break;\n\n      default:\n        throw new TypeError(`unsupported format character '${format}'`);\n    }\n\n    if (padded_count > 0) {\n      return is_left_align ? str.padEnd(padded_count) : str.padStart(padded_count);\n    } else {\n      return str;\n    }\n  });\n\n  if (values.length) {\n    if (values.length === 1 && typeof values[0] === 'object' && values[0] !== null) {// mapping\n    } else {\n      throw new TypeError('not all arguments converted during string formatting');\n    }\n  }\n\n  return result;\n};","map":{"version":3,"names":["inspect","require","module","exports","sub","pattern","values","regex","result","replace","_","is_literal","is_left_align","is_padded","name","format","padded_count","length","TypeError","shift","Number","isInteger","str","undefined","dict","String","toFixed","padEnd","padStart"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint/node_modules/argparse/lib/sub.js"],"sourcesContent":["// Limited implementation of python % string operator, supports only %s and %r for now\n// (other formats are not used here, but may appear in custom templates)\n\n'use strict'\n\nconst { inspect } = require('util')\n\n\nmodule.exports = function sub(pattern, ...values) {\n    let regex = /%(?:(%)|(-)?(\\*)?(?:\\((\\w+)\\))?([A-Za-z]))/g\n\n    let result = pattern.replace(regex, function (_, is_literal, is_left_align, is_padded, name, format) {\n        if (is_literal) return '%'\n\n        let padded_count = 0\n        if (is_padded) {\n            if (values.length === 0) throw new TypeError('not enough arguments for format string')\n            padded_count = values.shift()\n            if (!Number.isInteger(padded_count)) throw new TypeError('* wants int')\n        }\n\n        let str\n        if (name !== undefined) {\n            let dict = values[0]\n            if (typeof dict !== 'object' || dict === null) throw new TypeError('format requires a mapping')\n            if (!(name in dict)) throw new TypeError(`no such key: '${name}'`)\n            str = dict[name]\n        } else {\n            if (values.length === 0) throw new TypeError('not enough arguments for format string')\n            str = values.shift()\n        }\n\n        switch (format) {\n            case 's':\n                str = String(str)\n                break\n            case 'r':\n                str = inspect(str)\n                break\n            case 'd':\n            case 'i':\n                if (typeof str !== 'number') {\n                    throw new TypeError(`%${format} format: a number is required, not ${typeof str}`)\n                }\n                str = String(str.toFixed(0))\n                break\n            default:\n                throw new TypeError(`unsupported format character '${format}'`)\n        }\n\n        if (padded_count > 0) {\n            return is_left_align ? str.padEnd(padded_count) : str.padStart(padded_count)\n        } else {\n            return str\n        }\n    })\n\n    if (values.length) {\n        if (values.length === 1 && typeof values[0] === 'object' && values[0] !== null) {\n            // mapping\n        } else {\n            throw new TypeError('not all arguments converted during string formatting')\n        }\n    }\n\n    return result\n}\n"],"mappings":"AAAA;AACA;AAEA;;AAEA,MAAM;EAAEA;AAAF,IAAcC,OAAO,CAAC,MAAD,CAA3B;;AAGAC,MAAM,CAACC,OAAP,GAAiB,SAASC,GAAT,CAAaC,OAAb,EAAiC;EAAA,kCAARC,MAAQ;IAARA,MAAQ;EAAA;;EAC9C,IAAIC,KAAK,GAAG,6CAAZ;EAEA,IAAIC,MAAM,GAAGH,OAAO,CAACI,OAAR,CAAgBF,KAAhB,EAAuB,UAAUG,CAAV,EAAaC,UAAb,EAAyBC,aAAzB,EAAwCC,SAAxC,EAAmDC,IAAnD,EAAyDC,MAAzD,EAAiE;IACjG,IAAIJ,UAAJ,EAAgB,OAAO,GAAP;IAEhB,IAAIK,YAAY,GAAG,CAAnB;;IACA,IAAIH,SAAJ,EAAe;MACX,IAAIP,MAAM,CAACW,MAAP,KAAkB,CAAtB,EAAyB,MAAM,IAAIC,SAAJ,CAAc,wCAAd,CAAN;MACzBF,YAAY,GAAGV,MAAM,CAACa,KAAP,EAAf;MACA,IAAI,CAACC,MAAM,CAACC,SAAP,CAAiBL,YAAjB,CAAL,EAAqC,MAAM,IAAIE,SAAJ,CAAc,aAAd,CAAN;IACxC;;IAED,IAAII,GAAJ;;IACA,IAAIR,IAAI,KAAKS,SAAb,EAAwB;MACpB,IAAIC,IAAI,GAAGlB,MAAM,CAAC,CAAD,CAAjB;MACA,IAAI,OAAOkB,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C,MAAM,IAAIN,SAAJ,CAAc,2BAAd,CAAN;MAC/C,IAAI,EAAEJ,IAAI,IAAIU,IAAV,CAAJ,EAAqB,MAAM,IAAIN,SAAJ,CAAe,iBAAgBJ,IAAK,GAApC,CAAN;MACrBQ,GAAG,GAAGE,IAAI,CAACV,IAAD,CAAV;IACH,CALD,MAKO;MACH,IAAIR,MAAM,CAACW,MAAP,KAAkB,CAAtB,EAAyB,MAAM,IAAIC,SAAJ,CAAc,wCAAd,CAAN;MACzBI,GAAG,GAAGhB,MAAM,CAACa,KAAP,EAAN;IACH;;IAED,QAAQJ,MAAR;MACI,KAAK,GAAL;QACIO,GAAG,GAAGG,MAAM,CAACH,GAAD,CAAZ;QACA;;MACJ,KAAK,GAAL;QACIA,GAAG,GAAGtB,OAAO,CAACsB,GAAD,CAAb;QACA;;MACJ,KAAK,GAAL;MACA,KAAK,GAAL;QACI,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;UACzB,MAAM,IAAIJ,SAAJ,CAAe,IAAGH,MAAO,sCAAqC,OAAOO,GAAI,EAAzE,CAAN;QACH;;QACDA,GAAG,GAAGG,MAAM,CAACH,GAAG,CAACI,OAAJ,CAAY,CAAZ,CAAD,CAAZ;QACA;;MACJ;QACI,MAAM,IAAIR,SAAJ,CAAe,iCAAgCH,MAAO,GAAtD,CAAN;IAfR;;IAkBA,IAAIC,YAAY,GAAG,CAAnB,EAAsB;MAClB,OAAOJ,aAAa,GAAGU,GAAG,CAACK,MAAJ,CAAWX,YAAX,CAAH,GAA8BM,GAAG,CAACM,QAAJ,CAAaZ,YAAb,CAAlD;IACH,CAFD,MAEO;MACH,OAAOM,GAAP;IACH;EACJ,CA5CY,CAAb;;EA8CA,IAAIhB,MAAM,CAACW,MAAX,EAAmB;IACf,IAAIX,MAAM,CAACW,MAAP,KAAkB,CAAlB,IAAuB,OAAOX,MAAM,CAAC,CAAD,CAAb,KAAqB,QAA5C,IAAwDA,MAAM,CAAC,CAAD,CAAN,KAAc,IAA1E,EAAgF,CAC5E;IACH,CAFD,MAEO;MACH,MAAM,IAAIY,SAAJ,CAAc,sDAAd,CAAN;IACH;EACJ;;EAED,OAAOV,MAAP;AACH,CA1DD"},"metadata":{},"sourceType":"script"}