{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n\n_export(exports, {\n  elementSelectorParser: () => elementSelectorParser,\n  default: () => resolveDefaultsAtRules\n});\n\nconst _postcss = /*#__PURE__*/_interopRequireDefault(require(\"postcss\"));\n\nconst _postcssSelectorParser = /*#__PURE__*/_interopRequireDefault(require(\"postcss-selector-parser\"));\n\nconst _featureFlags = require(\"../featureFlags\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nlet getNode = {\n  id(node) {\n    return _postcssSelectorParser.default.attribute({\n      attribute: \"id\",\n      operator: \"=\",\n      value: node.value,\n      quoteMark: '\"'\n    });\n  }\n\n};\n\nfunction minimumImpactSelector(nodes) {\n  let rest = nodes.filter(node => {\n    // Keep non-pseudo nodes\n    if (node.type !== \"pseudo\") return true; // Keep pseudo nodes that have subnodes\n    // E.g.: `:not()` contains subnodes inside the parentheses\n\n    if (node.nodes.length > 0) return true; // Keep pseudo `elements`\n    // This implicitly means that we ignore pseudo `classes`\n\n    return node.value.startsWith(\"::\") || [\":before\", \":after\", \":first-line\", \":first-letter\"].includes(node.value);\n  }).reverse();\n  let searchFor = new Set([\"tag\", \"class\", \"id\", \"attribute\"]);\n  let splitPointIdx = rest.findIndex(n => searchFor.has(n.type));\n  if (splitPointIdx === -1) return rest.reverse().join(\"\").trim();\n  let node = rest[splitPointIdx];\n  let bestNode = getNode[node.type] ? getNode[node.type](node) : node;\n  rest = rest.slice(0, splitPointIdx);\n  let combinatorIdx = rest.findIndex(n => n.type === \"combinator\" && n.value === \">\");\n\n  if (combinatorIdx !== -1) {\n    rest.splice(0, combinatorIdx);\n    rest.unshift(_postcssSelectorParser.default.universal());\n  }\n\n  return [bestNode, ...rest.reverse()].join(\"\").trim();\n}\n\nlet elementSelectorParser = (0, _postcssSelectorParser.default)(selectors => {\n  return selectors.map(s => {\n    let nodes = s.split(n => n.type === \"combinator\" && n.value === \" \").pop();\n    return minimumImpactSelector(nodes);\n  });\n});\nlet cache = new Map();\n\nfunction extractElementSelector(selector) {\n  if (!cache.has(selector)) {\n    cache.set(selector, elementSelectorParser.transformSync(selector));\n  }\n\n  return cache.get(selector);\n}\n\nfunction resolveDefaultsAtRules(_ref) {\n  let {\n    tailwindConfig\n  } = _ref;\n  return root => {\n    let variableNodeMap = new Map();\n    /** @type {Set<import('postcss').AtRule>} */\n\n    let universals = new Set();\n    root.walkAtRules(\"defaults\", rule => {\n      if (rule.nodes && rule.nodes.length > 0) {\n        universals.add(rule);\n        return;\n      }\n\n      let variable = rule.params;\n\n      if (!variableNodeMap.has(variable)) {\n        variableNodeMap.set(variable, new Set());\n      }\n\n      variableNodeMap.get(variable).add(rule.parent);\n      rule.remove();\n    });\n\n    if ((0, _featureFlags.flagEnabled)(tailwindConfig, \"optimizeUniversalDefaults\")) {\n      for (let universal of universals) {\n        /** @type {Map<string, Set<string>>} */\n        let selectorGroups = new Map();\n        var ref;\n        let rules = (ref = variableNodeMap.get(universal.params)) !== null && ref !== void 0 ? ref : [];\n\n        for (let rule of rules) {\n          for (let selector of extractElementSelector(rule.selector)) {\n            // If selector contains a vendor prefix after a pseudo element or class,\n            // we consider them separately because merging the declarations into\n            // a single rule will cause browsers that do not understand the\n            // vendor prefix to throw out the whole rule\n            let selectorGroupName = selector.includes(\":-\") || selector.includes(\"::-\") ? selector : \"__DEFAULT__\";\n            var ref1;\n            let selectors = (ref1 = selectorGroups.get(selectorGroupName)) !== null && ref1 !== void 0 ? ref1 : new Set();\n            selectorGroups.set(selectorGroupName, selectors);\n            selectors.add(selector);\n          }\n        }\n\n        if ((0, _featureFlags.flagEnabled)(tailwindConfig, \"optimizeUniversalDefaults\")) {\n          if (selectorGroups.size === 0) {\n            universal.remove();\n            continue;\n          }\n\n          for (let [, selectors1] of selectorGroups) {\n            let universalRule = _postcss.default.rule({\n              source: universal.source\n            });\n\n            universalRule.selectors = [...selectors1];\n            universalRule.append(universal.nodes.map(node => node.clone()));\n            universal.before(universalRule);\n          }\n        }\n\n        universal.remove();\n      }\n    } else if (universals.size) {\n      let universalRule1 = _postcss.default.rule({\n        selectors: [\"*\", \"::before\", \"::after\"]\n      });\n\n      for (let universal1 of universals) {\n        universalRule1.append(universal1.nodes);\n\n        if (!universalRule1.parent) {\n          universal1.before(universalRule1);\n        }\n\n        if (!universalRule1.source) {\n          universalRule1.source = universal1.source;\n        }\n\n        universal1.remove();\n      }\n\n      let backdropRule = universalRule1.clone({\n        selectors: [\"::backdrop\"]\n      });\n      universalRule1.after(backdropRule);\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_export","target","all","name","enumerable","get","elementSelectorParser","default","resolveDefaultsAtRules","_postcss","_interopRequireDefault","require","_postcssSelectorParser","_featureFlags","obj","__esModule","getNode","id","node","attribute","operator","quoteMark","minimumImpactSelector","nodes","rest","filter","type","length","startsWith","includes","reverse","searchFor","Set","splitPointIdx","findIndex","n","has","join","trim","bestNode","slice","combinatorIdx","splice","unshift","universal","selectors","map","s","split","pop","cache","Map","extractElementSelector","selector","set","transformSync","tailwindConfig","root","variableNodeMap","universals","walkAtRules","rule","add","variable","params","parent","remove","flagEnabled","selectorGroups","ref","rules","selectorGroupName","ref1","size","selectors1","universalRule","source","append","clone","before","universalRule1","universal1","backdropRule","after"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/tailwindcss/lib/lib/resolveDefaultsAtRules.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    elementSelectorParser: ()=>elementSelectorParser,\n    default: ()=>resolveDefaultsAtRules\n});\nconst _postcss = /*#__PURE__*/ _interopRequireDefault(require(\"postcss\"));\nconst _postcssSelectorParser = /*#__PURE__*/ _interopRequireDefault(require(\"postcss-selector-parser\"));\nconst _featureFlags = require(\"../featureFlags\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nlet getNode = {\n    id (node) {\n        return _postcssSelectorParser.default.attribute({\n            attribute: \"id\",\n            operator: \"=\",\n            value: node.value,\n            quoteMark: '\"'\n        });\n    }\n};\nfunction minimumImpactSelector(nodes) {\n    let rest = nodes.filter((node)=>{\n        // Keep non-pseudo nodes\n        if (node.type !== \"pseudo\") return true;\n        // Keep pseudo nodes that have subnodes\n        // E.g.: `:not()` contains subnodes inside the parentheses\n        if (node.nodes.length > 0) return true;\n        // Keep pseudo `elements`\n        // This implicitly means that we ignore pseudo `classes`\n        return node.value.startsWith(\"::\") || [\n            \":before\",\n            \":after\",\n            \":first-line\",\n            \":first-letter\"\n        ].includes(node.value);\n    }).reverse();\n    let searchFor = new Set([\n        \"tag\",\n        \"class\",\n        \"id\",\n        \"attribute\"\n    ]);\n    let splitPointIdx = rest.findIndex((n)=>searchFor.has(n.type));\n    if (splitPointIdx === -1) return rest.reverse().join(\"\").trim();\n    let node = rest[splitPointIdx];\n    let bestNode = getNode[node.type] ? getNode[node.type](node) : node;\n    rest = rest.slice(0, splitPointIdx);\n    let combinatorIdx = rest.findIndex((n)=>n.type === \"combinator\" && n.value === \">\");\n    if (combinatorIdx !== -1) {\n        rest.splice(0, combinatorIdx);\n        rest.unshift(_postcssSelectorParser.default.universal());\n    }\n    return [\n        bestNode,\n        ...rest.reverse()\n    ].join(\"\").trim();\n}\nlet elementSelectorParser = (0, _postcssSelectorParser.default)((selectors)=>{\n    return selectors.map((s)=>{\n        let nodes = s.split((n)=>n.type === \"combinator\" && n.value === \" \").pop();\n        return minimumImpactSelector(nodes);\n    });\n});\nlet cache = new Map();\nfunction extractElementSelector(selector) {\n    if (!cache.has(selector)) {\n        cache.set(selector, elementSelectorParser.transformSync(selector));\n    }\n    return cache.get(selector);\n}\nfunction resolveDefaultsAtRules({ tailwindConfig  }) {\n    return (root)=>{\n        let variableNodeMap = new Map();\n        /** @type {Set<import('postcss').AtRule>} */ let universals = new Set();\n        root.walkAtRules(\"defaults\", (rule)=>{\n            if (rule.nodes && rule.nodes.length > 0) {\n                universals.add(rule);\n                return;\n            }\n            let variable = rule.params;\n            if (!variableNodeMap.has(variable)) {\n                variableNodeMap.set(variable, new Set());\n            }\n            variableNodeMap.get(variable).add(rule.parent);\n            rule.remove();\n        });\n        if ((0, _featureFlags.flagEnabled)(tailwindConfig, \"optimizeUniversalDefaults\")) {\n            for (let universal of universals){\n                /** @type {Map<string, Set<string>>} */ let selectorGroups = new Map();\n                var ref;\n                let rules = (ref = variableNodeMap.get(universal.params)) !== null && ref !== void 0 ? ref : [];\n                for (let rule of rules){\n                    for (let selector of extractElementSelector(rule.selector)){\n                        // If selector contains a vendor prefix after a pseudo element or class,\n                        // we consider them separately because merging the declarations into\n                        // a single rule will cause browsers that do not understand the\n                        // vendor prefix to throw out the whole rule\n                        let selectorGroupName = selector.includes(\":-\") || selector.includes(\"::-\") ? selector : \"__DEFAULT__\";\n                        var ref1;\n                        let selectors = (ref1 = selectorGroups.get(selectorGroupName)) !== null && ref1 !== void 0 ? ref1 : new Set();\n                        selectorGroups.set(selectorGroupName, selectors);\n                        selectors.add(selector);\n                    }\n                }\n                if ((0, _featureFlags.flagEnabled)(tailwindConfig, \"optimizeUniversalDefaults\")) {\n                    if (selectorGroups.size === 0) {\n                        universal.remove();\n                        continue;\n                    }\n                    for (let [, selectors1] of selectorGroups){\n                        let universalRule = _postcss.default.rule({\n                            source: universal.source\n                        });\n                        universalRule.selectors = [\n                            ...selectors1\n                        ];\n                        universalRule.append(universal.nodes.map((node)=>node.clone()));\n                        universal.before(universalRule);\n                    }\n                }\n                universal.remove();\n            }\n        } else if (universals.size) {\n            let universalRule1 = _postcss.default.rule({\n                selectors: [\n                    \"*\",\n                    \"::before\",\n                    \"::after\"\n                ]\n            });\n            for (let universal1 of universals){\n                universalRule1.append(universal1.nodes);\n                if (!universalRule1.parent) {\n                    universal1.before(universalRule1);\n                }\n                if (!universalRule1.source) {\n                    universalRule1.source = universal1.source;\n                }\n                universal1.remove();\n            }\n            let backdropRule = universalRule1.clone({\n                selectors: [\n                    \"::backdrop\"\n                ]\n            });\n            universalRule1.after(backdropRule);\n        }\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}