{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _PatternVisitor_rootPattern, _PatternVisitor_callback, _PatternVisitor_assignments, _PatternVisitor_restElements;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PatternVisitor = void 0;\n\nconst types_1 = require(\"@typescript-eslint/types\");\n\nconst VisitorBase_1 = require(\"./VisitorBase\");\n\nclass PatternVisitor extends VisitorBase_1.VisitorBase {\n  constructor(options, rootPattern, callback) {\n    super(options);\n\n    _PatternVisitor_rootPattern.set(this, void 0);\n\n    _PatternVisitor_callback.set(this, void 0);\n\n    _PatternVisitor_assignments.set(this, []);\n\n    this.rightHandNodes = [];\n\n    _PatternVisitor_restElements.set(this, []);\n\n    __classPrivateFieldSet(this, _PatternVisitor_rootPattern, rootPattern, \"f\");\n\n    __classPrivateFieldSet(this, _PatternVisitor_callback, callback, \"f\");\n  }\n\n  static isPattern(node) {\n    const nodeType = node.type;\n    return nodeType === types_1.AST_NODE_TYPES.Identifier || nodeType === types_1.AST_NODE_TYPES.ObjectPattern || nodeType === types_1.AST_NODE_TYPES.ArrayPattern || nodeType === types_1.AST_NODE_TYPES.SpreadElement || nodeType === types_1.AST_NODE_TYPES.RestElement || nodeType === types_1.AST_NODE_TYPES.AssignmentPattern;\n  }\n\n  ArrayExpression(node) {\n    node.elements.forEach(this.visit, this);\n  }\n\n  ArrayPattern(pattern) {\n    for (const element of pattern.elements) {\n      this.visit(element);\n    }\n  }\n\n  AssignmentExpression(node) {\n    __classPrivateFieldGet(this, _PatternVisitor_assignments, \"f\").push(node);\n\n    this.visit(node.left);\n    this.rightHandNodes.push(node.right);\n\n    __classPrivateFieldGet(this, _PatternVisitor_assignments, \"f\").pop();\n  }\n\n  AssignmentPattern(pattern) {\n    __classPrivateFieldGet(this, _PatternVisitor_assignments, \"f\").push(pattern);\n\n    this.visit(pattern.left);\n    this.rightHandNodes.push(pattern.right);\n\n    __classPrivateFieldGet(this, _PatternVisitor_assignments, \"f\").pop();\n  }\n\n  CallExpression(node) {\n    // arguments are right hand nodes.\n    node.arguments.forEach(a => {\n      this.rightHandNodes.push(a);\n    });\n    this.visit(node.callee);\n  }\n\n  Decorator() {// don't visit any decorators when exploring a pattern\n  }\n\n  Identifier(pattern) {\n    var _a;\n\n    const lastRestElement = (_a = __classPrivateFieldGet(this, _PatternVisitor_restElements, \"f\")[__classPrivateFieldGet(this, _PatternVisitor_restElements, \"f\").length - 1]) !== null && _a !== void 0 ? _a : null;\n\n    __classPrivateFieldGet(this, _PatternVisitor_callback, \"f\").call(this, pattern, {\n      topLevel: pattern === __classPrivateFieldGet(this, _PatternVisitor_rootPattern, \"f\"),\n      rest: lastRestElement !== null && lastRestElement !== undefined && lastRestElement.argument === pattern,\n      assignments: __classPrivateFieldGet(this, _PatternVisitor_assignments, \"f\")\n    });\n  }\n\n  MemberExpression(node) {\n    // Computed property's key is a right hand node.\n    if (node.computed) {\n      this.rightHandNodes.push(node.property);\n    } // the object is only read, write to its property.\n\n\n    this.rightHandNodes.push(node.object);\n  }\n\n  Property(property) {\n    // Computed property's key is a right hand node.\n    if (property.computed) {\n      this.rightHandNodes.push(property.key);\n    } // If it's shorthand, its key is same as its value.\n    // If it's shorthand and has its default value, its key is same as its value.left (the value is AssignmentPattern).\n    // If it's not shorthand, the name of new variable is its value's.\n\n\n    this.visit(property.value);\n  }\n\n  RestElement(pattern) {\n    __classPrivateFieldGet(this, _PatternVisitor_restElements, \"f\").push(pattern);\n\n    this.visit(pattern.argument);\n\n    __classPrivateFieldGet(this, _PatternVisitor_restElements, \"f\").pop();\n  }\n\n  SpreadElement(node) {\n    this.visit(node.argument);\n  }\n\n  TSTypeAnnotation() {// we don't want to visit types\n  }\n\n}\n\nexports.PatternVisitor = PatternVisitor;\n_PatternVisitor_rootPattern = new WeakMap(), _PatternVisitor_callback = new WeakMap(), _PatternVisitor_assignments = new WeakMap(), _PatternVisitor_restElements = new WeakMap();","map":{"version":3,"mappings":"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","names":["PatternVisitor","VisitorBase_1","constructor","options","rootPattern","callback","_PatternVisitor_rootPattern","_PatternVisitor_callback","_PatternVisitor_assignments","_PatternVisitor_restElements","__classPrivateFieldSet","isPattern","node","nodeType","type","types_1","Identifier","ObjectPattern","ArrayPattern","SpreadElement","RestElement","AssignmentPattern","ArrayExpression","elements","forEach","visit","pattern","element","AssignmentExpression","__classPrivateFieldGet","push","left","rightHandNodes","right","pop","CallExpression","arguments","a","callee","Decorator","lastRestElement","length","_a","call","topLevel","rest","undefined","argument","assignments","MemberExpression","computed","property","object","Property","key","value","TSTypeAnnotation","exports"],"sources":["../../src/referencer/PatternVisitor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}