{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.immer = {}));\n})(this, function (exports) {\n  'use strict';\n\n  var _ref; // Should be no imports here!\n  // Some things that should be evaluated before all else...\n  // We only want to know if non-polyfilled symbols are available\n\n\n  var hasSymbol = typeof Symbol !== \"undefined\" && typeof /*#__PURE__*/Symbol(\"x\") === \"symbol\";\n  var hasMap = typeof Map !== \"undefined\";\n  var hasSet = typeof Set !== \"undefined\";\n  var hasProxies = typeof Proxy !== \"undefined\" && typeof Proxy.revocable !== \"undefined\" && typeof Reflect !== \"undefined\";\n  /**\r\n   * The sentinel value returned by producers to replace the draft with undefined.\r\n   */\n\n  var NOTHING = hasSymbol ? /*#__PURE__*/Symbol.for(\"immer-nothing\") : (_ref = {}, _ref[\"immer-nothing\"] = true, _ref);\n  /**\r\n   * To let Immer treat your class instances as plain immutable objects\r\n   * (albeit with a custom prototype), you must define either an instance property\r\n   * or a static property on each of your custom classes.\r\n   *\r\n   * Otherwise, your class instance will never be drafted, which means it won't be\r\n   * safe to mutate in a produce callback.\r\n   */\n\n  var DRAFTABLE = hasSymbol ? /*#__PURE__*/Symbol.for(\"immer-draftable\") : \"__$immer_draftable\";\n  var DRAFT_STATE = hasSymbol ? /*#__PURE__*/Symbol.for(\"immer-state\") : \"__$immer_state\"; // Even a polyfilled Symbol might provide Symbol.iterator\n\n  var iteratorSymbol = typeof Symbol != \"undefined\" && Symbol.iterator || \"@@iterator\";\n  var errors = {\n    0: \"Illegal state\",\n    1: \"Immer drafts cannot have computed properties\",\n    2: \"This object has been frozen and should not be mutated\",\n    3: function _(data) {\n      return \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + data;\n    },\n    4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n    5: \"Immer forbids circular references\",\n    6: \"The first or second argument to `produce` must be a function\",\n    7: \"The third argument to `produce` must be a function or undefined\",\n    8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n    9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n    10: \"The given draft is already finalized\",\n    11: \"Object.defineProperty() cannot be used on an Immer draft\",\n    12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n    13: \"Immer only supports deleting array indices\",\n    14: \"Immer only supports setting array indices and the 'length' property\",\n    15: function _(path) {\n      return \"Cannot apply patch, path doesn't resolve: \" + path;\n    },\n    16: 'Sets cannot have \"replace\" patches.',\n    17: function _(op) {\n      return \"Unsupported patch operation: \" + op;\n    },\n    18: function _(plugin) {\n      return \"The plugin for '\" + plugin + \"' has not been loaded into Immer. To enable the plugin, import and call `enable\" + plugin + \"()` when initializing your application.\";\n    },\n    20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n    21: function _(thing) {\n      return \"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '\" + thing + \"'\";\n    },\n    22: function _(thing) {\n      return \"'current' expects a draft, got: \" + thing;\n    },\n    23: function _(thing) {\n      return \"'original' expects a draft, got: \" + thing;\n    },\n    24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n  };\n\n  function die(error) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    {\n      var e = errors[error];\n      var msg = !e ? \"unknown error nr: \" + error : typeof e === \"function\" ? e.apply(null, args) : e;\n      throw new Error(\"[Immer] \" + msg);\n    }\n  }\n  /** Returns true if the given value is an Immer draft */\n\n  /*#__PURE__*/\n\n\n  function isDraft(value) {\n    return !!value && !!value[DRAFT_STATE];\n  }\n  /** Returns true if the given value can be drafted by Immer */\n\n  /*#__PURE__*/\n\n\n  function isDraftable(value) {\n    if (!value) return false;\n    return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE] || isMap(value) || isSet(value);\n  }\n\n  var objectCtorString = /*#__PURE__*/Object.prototype.constructor.toString();\n  /*#__PURE__*/\n\n  function isPlainObject(value) {\n    if (!value || typeof value !== \"object\") return false;\n    var proto = Object.getPrototypeOf(value);\n\n    if (proto === null) {\n      return true;\n    }\n\n    var Ctor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n    if (Ctor === Object) return true;\n    return typeof Ctor == \"function\" && Function.toString.call(Ctor) === objectCtorString;\n  }\n\n  function original(value) {\n    if (!isDraft(value)) die(23, value);\n    return value[DRAFT_STATE].base_;\n  }\n  /*#__PURE__*/\n\n\n  var ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function (obj) {\n    return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n  } :\n  /* istanbul ignore next */\n  Object.getOwnPropertyNames;\n\n  var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {\n    // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n    var res = {};\n    ownKeys(target).forEach(function (key) {\n      res[key] = Object.getOwnPropertyDescriptor(target, key);\n    });\n    return res;\n  };\n\n  function each(obj, iter, enumerableOnly) {\n    if (enumerableOnly === void 0) {\n      enumerableOnly = false;\n    }\n\n    if (getArchtype(obj) === 0\n    /* Object */\n    ) {\n      (enumerableOnly ? Object.keys : ownKeys)(obj).forEach(function (key) {\n        if (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj);\n      });\n    } else {\n      obj.forEach(function (entry, index) {\n        return iter(index, entry, obj);\n      });\n    }\n  }\n  /*#__PURE__*/\n\n\n  function getArchtype(thing) {\n    /* istanbul ignore next */\n    var state = thing[DRAFT_STATE];\n    return state ? state.type_ > 3 ? state.type_ - 4 // cause Object and Array map back from 4 and 5\n    : state.type_ // others are the same\n    : Array.isArray(thing) ? 1\n    /* Array */\n    : isMap(thing) ? 2\n    /* Map */\n    : isSet(thing) ? 3\n    /* Set */\n    : 0\n    /* Object */\n    ;\n  }\n  /*#__PURE__*/\n\n\n  function has(thing, prop) {\n    return getArchtype(thing) === 2\n    /* Map */\n    ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);\n  }\n  /*#__PURE__*/\n\n\n  function get(thing, prop) {\n    // @ts-ignore\n    return getArchtype(thing) === 2\n    /* Map */\n    ? thing.get(prop) : thing[prop];\n  }\n  /*#__PURE__*/\n\n\n  function set(thing, propOrOldValue, value) {\n    var t = getArchtype(thing);\n    if (t === 2\n    /* Map */\n    ) thing.set(propOrOldValue, value);else if (t === 3\n    /* Set */\n    ) {\n      thing.delete(propOrOldValue);\n      thing.add(value);\n    } else thing[propOrOldValue] = value;\n  }\n  /*#__PURE__*/\n\n\n  function is(x, y) {\n    // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (x === y) {\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      return x !== x && y !== y;\n    }\n  }\n  /*#__PURE__*/\n\n\n  function isMap(target) {\n    return hasMap && target instanceof Map;\n  }\n  /*#__PURE__*/\n\n\n  function isSet(target) {\n    return hasSet && target instanceof Set;\n  }\n  /*#__PURE__*/\n\n\n  function latest(state) {\n    return state.copy_ || state.base_;\n  }\n  /*#__PURE__*/\n\n\n  function shallowCopy(base) {\n    if (Array.isArray(base)) return Array.prototype.slice.call(base);\n    var descriptors = getOwnPropertyDescriptors(base);\n    delete descriptors[DRAFT_STATE];\n    var keys = ownKeys(descriptors);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var desc = descriptors[key];\n\n      if (desc.writable === false) {\n        desc.writable = true;\n        desc.configurable = true;\n      } // like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n      // with libraries that trap values, like mobx or vue\n      // unlike object.assign, non-enumerables will be copied as well\n\n\n      if (desc.get || desc.set) descriptors[key] = {\n        configurable: true,\n        writable: true,\n        enumerable: desc.enumerable,\n        value: base[key]\n      };\n    }\n\n    return Object.create(Object.getPrototypeOf(base), descriptors);\n  }\n\n  function freeze(obj, deep) {\n    if (deep === void 0) {\n      deep = false;\n    }\n\n    if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj;\n\n    if (getArchtype(obj) > 1\n    /* Map or Set */\n    ) {\n      obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;\n    }\n\n    Object.freeze(obj);\n    if (deep) each(obj, function (key, value) {\n      return freeze(value, true);\n    }, true);\n    return obj;\n  }\n\n  function dontMutateFrozenCollections() {\n    die(2);\n  }\n\n  function isFrozen(obj) {\n    if (obj == null || typeof obj !== \"object\") return true; // See #600, IE dies on non-objects in Object.isFrozen\n\n    return Object.isFrozen(obj);\n  }\n  /** Plugin utilities */\n\n\n  var plugins = {};\n\n  function getPlugin(pluginKey) {\n    var plugin = plugins[pluginKey];\n\n    if (!plugin) {\n      die(18, pluginKey);\n    } // @ts-ignore\n\n\n    return plugin;\n  }\n\n  function loadPlugin(pluginKey, implementation) {\n    if (!plugins[pluginKey]) plugins[pluginKey] = implementation;\n  }\n\n  var currentScope;\n\n  function getCurrentScope() {\n    if (!currentScope) die(0);\n    return currentScope;\n  }\n\n  function createScope(parent_, immer_) {\n    return {\n      drafts_: [],\n      parent_: parent_,\n      immer_: immer_,\n      // Whenever the modified draft contains a draft from another scope, we\n      // need to prevent auto-freezing so the unowned draft can be finalized.\n      canAutoFreeze_: true,\n      unfinalizedDrafts_: 0\n    };\n  }\n\n  function usePatchesInScope(scope, patchListener) {\n    if (patchListener) {\n      getPlugin(\"Patches\"); // assert we have the plugin\n\n      scope.patches_ = [];\n      scope.inversePatches_ = [];\n      scope.patchListener_ = patchListener;\n    }\n  }\n\n  function revokeScope(scope) {\n    leaveScope(scope);\n    scope.drafts_.forEach(revokeDraft); // @ts-ignore\n\n    scope.drafts_ = null;\n  }\n\n  function leaveScope(scope) {\n    if (scope === currentScope) {\n      currentScope = scope.parent_;\n    }\n  }\n\n  function enterScope(immer) {\n    return currentScope = createScope(currentScope, immer);\n  }\n\n  function revokeDraft(draft) {\n    var state = draft[DRAFT_STATE];\n    if (state.type_ === 0\n    /* ProxyObject */\n    || state.type_ === 1\n    /* ProxyArray */\n    ) state.revoke_();else state.revoked_ = true;\n  }\n\n  function processResult(result, scope) {\n    scope.unfinalizedDrafts_ = scope.drafts_.length;\n    var baseDraft = scope.drafts_[0];\n    var isReplaced = result !== undefined && result !== baseDraft;\n    if (!scope.immer_.useProxies_) getPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced);\n\n    if (isReplaced) {\n      if (baseDraft[DRAFT_STATE].modified_) {\n        revokeScope(scope);\n        die(4);\n      }\n\n      if (isDraftable(result)) {\n        // Finalize the result in case it contains (or is) a subset of the draft.\n        result = finalize(scope, result);\n        if (!scope.parent_) maybeFreeze(scope, result);\n      }\n\n      if (scope.patches_) {\n        getPlugin(\"Patches\").generateReplacementPatches_(baseDraft[DRAFT_STATE].base_, result, scope.patches_, scope.inversePatches_);\n      }\n    } else {\n      // Finalize the base draft.\n      result = finalize(scope, baseDraft, []);\n    }\n\n    revokeScope(scope);\n\n    if (scope.patches_) {\n      scope.patchListener_(scope.patches_, scope.inversePatches_);\n    }\n\n    return result !== NOTHING ? result : undefined;\n  }\n\n  function finalize(rootScope, value, path) {\n    // Don't recurse in tho recursive data structures\n    if (isFrozen(value)) return value;\n    var state = value[DRAFT_STATE]; // A plain object, might need freezing, might contain drafts\n\n    if (!state) {\n      each(value, function (key, childValue) {\n        return finalizeProperty(rootScope, state, value, key, childValue, path);\n      }, true // See #590, don't recurse into non-enumerable of non drafted objects\n      );\n      return value;\n    } // Never finalize drafts owned by another scope.\n\n\n    if (state.scope_ !== rootScope) return value; // Unmodified draft, return the (frozen) original\n\n    if (!state.modified_) {\n      maybeFreeze(rootScope, state.base_, true);\n      return state.base_;\n    } // Not finalized yet, let's do that now\n\n\n    if (!state.finalized_) {\n      state.finalized_ = true;\n      state.scope_.unfinalizedDrafts_--;\n      var result = // For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n      state.type_ === 4\n      /* ES5Object */\n      || state.type_ === 5\n      /* ES5Array */\n      ? state.copy_ = shallowCopy(state.draft_) : state.copy_; // Finalize all children of the copy\n      // For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n      // Although the original test case doesn't seem valid anyway, so if this in the way we can turn the next line\n      // back to each(result, ....)\n\n      each(state.type_ === 3\n      /* Set */\n      ? new Set(result) : result, function (key, childValue) {\n        return finalizeProperty(rootScope, state, result, key, childValue, path);\n      }); // everything inside is frozen, we can freeze here\n\n      maybeFreeze(rootScope, result, false); // first time finalizing, let's create those patches\n\n      if (path && rootScope.patches_) {\n        getPlugin(\"Patches\").generatePatches_(state, path, rootScope.patches_, rootScope.inversePatches_);\n      }\n    }\n\n    return state.copy_;\n  }\n\n  function finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath) {\n    if (childValue === targetObject) die(5);\n\n    if (isDraft(childValue)) {\n      var path = rootPath && parentState && parentState.type_ !== 3\n      /* Set */\n      && // Set objects are atomic since they have no keys.\n      !has(parentState.assigned_, prop) // Skip deep patches for assigned keys.\n      ? rootPath.concat(prop) : undefined; // Drafts owned by `scope` are finalized here.\n\n      var res = finalize(rootScope, childValue, path);\n      set(targetObject, prop, res); // Drafts from another scope must prevented to be frozen\n      // if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\n      if (isDraft(res)) {\n        rootScope.canAutoFreeze_ = false;\n      } else return;\n    } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\n\n    if (isDraftable(childValue) && !isFrozen(childValue)) {\n      if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n        // optimization: if an object is not a draft, and we don't have to\n        // deepfreeze everything, and we are sure that no drafts are left in the remaining object\n        // cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n        // This benefits especially adding large data tree's without further processing.\n        // See add-data.js perf test\n        return;\n      }\n\n      finalize(rootScope, childValue); // immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\n      if (!parentState || !parentState.scope_.parent_) maybeFreeze(rootScope, childValue);\n    }\n  }\n\n  function maybeFreeze(scope, value, deep) {\n    if (deep === void 0) {\n      deep = false;\n    }\n\n    if (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n      freeze(value, deep);\n    }\n  }\n  /**\r\n   * Returns a new draft of the `base` object.\r\n   *\r\n   * The second argument is the parent draft-state (used internally).\r\n   */\n\n\n  function createProxyProxy(base, parent) {\n    var isArray = Array.isArray(base);\n    var state = {\n      type_: isArray ? 1\n      /* ProxyArray */\n      : 0\n      /* ProxyObject */\n      ,\n      // Track which produce call this is associated with.\n      scope_: parent ? parent.scope_ : getCurrentScope(),\n      // True for both shallow and deep changes.\n      modified_: false,\n      // Used during finalization.\n      finalized_: false,\n      // Track which properties have been assigned (true) or deleted (false).\n      assigned_: {},\n      // The parent draft state.\n      parent_: parent,\n      // The base state.\n      base_: base,\n      // The base proxy.\n      draft_: null,\n      // The base copy with any updated values.\n      copy_: null,\n      // Called by the `produce` function.\n      revoke_: null,\n      isManual_: false\n    }; // the traps must target something, a bit like the 'real' base.\n    // but also, we need to be able to determine from the target what the relevant state is\n    // (to avoid creating traps per instance to capture the state in closure,\n    // and to avoid creating weird hidden properties as well)\n    // So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n    // Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\n    var target = state;\n    var traps = objectTraps;\n\n    if (isArray) {\n      target = [state];\n      traps = arrayTraps;\n    }\n\n    var _Proxy$revocable = Proxy.revocable(target, traps),\n        revoke = _Proxy$revocable.revoke,\n        proxy = _Proxy$revocable.proxy;\n\n    state.draft_ = proxy;\n    state.revoke_ = revoke;\n    return proxy;\n  }\n  /**\r\n   * Object drafts\r\n   */\n\n\n  var objectTraps = {\n    get: function get(state, prop) {\n      if (prop === DRAFT_STATE) return state;\n      var source = latest(state);\n\n      if (!has(source, prop)) {\n        // non-existing or non-own property...\n        return readPropFromProto(state, source, prop);\n      }\n\n      var value = source[prop];\n\n      if (state.finalized_ || !isDraftable(value)) {\n        return value;\n      } // Check for existing draft in modified state.\n      // Assigned values are never drafted. This catches any drafts we created, too.\n\n\n      if (value === peek(state.base_, prop)) {\n        prepareCopy(state);\n        return state.copy_[prop] = createProxy(state.scope_.immer_, value, state);\n      }\n\n      return value;\n    },\n    has: function has(state, prop) {\n      return prop in latest(state);\n    },\n    ownKeys: function ownKeys(state) {\n      return Reflect.ownKeys(latest(state));\n    },\n    set: function set(state, prop\n    /* strictly not, but helps TS */\n    , value) {\n      var desc = getDescriptorFromProto(latest(state), prop);\n\n      if (desc === null || desc === void 0 ? void 0 : desc.set) {\n        // special case: if this write is captured by a setter, we have\n        // to trigger it with the correct context\n        desc.set.call(state.draft_, value);\n        return true;\n      }\n\n      if (!state.modified_) {\n        // the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n        // from setting an existing property with value undefined to undefined (which is not a change)\n        var current = peek(latest(state), prop); // special case, if we assigning the original value to a draft, we can ignore the assignment\n\n        var currentState = current === null || current === void 0 ? void 0 : current[DRAFT_STATE];\n\n        if (currentState && currentState.base_ === value) {\n          state.copy_[prop] = value;\n          state.assigned_[prop] = false;\n          return true;\n        }\n\n        if (is(value, current) && (value !== undefined || has(state.base_, prop))) return true;\n        prepareCopy(state);\n        markChanged(state);\n      }\n\n      if (state.copy_[prop] === value && // special case: NaN\n      typeof value !== \"number\" && ( // special case: handle new props with value 'undefined'\n      value !== undefined || prop in state.copy_)) return true; // @ts-ignore\n\n      state.copy_[prop] = value;\n      state.assigned_[prop] = true;\n      return true;\n    },\n    deleteProperty: function deleteProperty(state, prop) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (peek(state.base_, prop) !== undefined || prop in state.base_) {\n        state.assigned_[prop] = false;\n        prepareCopy(state);\n        markChanged(state);\n      } else {\n        // if an originally not assigned property was deleted\n        delete state.assigned_[prop];\n      } // @ts-ignore\n\n\n      if (state.copy_) delete state.copy_[prop];\n      return true;\n    },\n    // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n    // the same guarantee in ES5 mode.\n    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(state, prop) {\n      var owner = latest(state);\n      var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n      if (!desc) return desc;\n      return {\n        writable: true,\n        configurable: state.type_ !== 1\n        /* ProxyArray */\n        || prop !== \"length\",\n        enumerable: desc.enumerable,\n        value: owner[prop]\n      };\n    },\n    defineProperty: function defineProperty() {\n      die(11);\n    },\n    getPrototypeOf: function getPrototypeOf(state) {\n      return Object.getPrototypeOf(state.base_);\n    },\n    setPrototypeOf: function setPrototypeOf() {\n      die(12);\n    }\n  };\n  /**\r\n   * Array drafts\r\n   */\n\n  var arrayTraps = {};\n  each(objectTraps, function (key, fn) {\n    // @ts-ignore\n    arrayTraps[key] = function () {\n      arguments[0] = arguments[0][0];\n      return fn.apply(this, arguments);\n    };\n  });\n\n  arrayTraps.deleteProperty = function (state, prop) {\n    if (isNaN(parseInt(prop))) die(13); // @ts-ignore\n\n    return arrayTraps.set.call(this, state, prop, undefined);\n  };\n\n  arrayTraps.set = function (state, prop, value) {\n    if (prop !== \"length\" && isNaN(parseInt(prop))) die(14);\n    return objectTraps.set.call(this, state[0], prop, value, state[0]);\n  }; // Access a property without creating an Immer draft.\n\n\n  function peek(draft, prop) {\n    var state = draft[DRAFT_STATE];\n    var source = state ? latest(state) : draft;\n    return source[prop];\n  }\n\n  function readPropFromProto(state, source, prop) {\n    var _desc$get;\n\n    var desc = getDescriptorFromProto(source, prop);\n    return desc ? \"value\" in desc ? desc.value : // This is a very special case, if the prop is a getter defined by the\n    // prototype, we should invoke it with the draft as context!\n    (_desc$get = desc.get) === null || _desc$get === void 0 ? void 0 : _desc$get.call(state.draft_) : undefined;\n  }\n\n  function getDescriptorFromProto(source, prop) {\n    // 'in' checks proto!\n    if (!(prop in source)) return undefined;\n    var proto = Object.getPrototypeOf(source);\n\n    while (proto) {\n      var desc = Object.getOwnPropertyDescriptor(proto, prop);\n      if (desc) return desc;\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    return undefined;\n  }\n\n  function markChanged(state) {\n    if (!state.modified_) {\n      state.modified_ = true;\n\n      if (state.parent_) {\n        markChanged(state.parent_);\n      }\n    }\n  }\n\n  function prepareCopy(state) {\n    if (!state.copy_) {\n      state.copy_ = shallowCopy(state.base_);\n    }\n  }\n\n  var Immer = /*#__PURE__*/function () {\n    function Immer(config) {\n      var _this = this;\n\n      this.useProxies_ = hasProxies;\n      this.autoFreeze_ = true;\n      /**\r\n       * The `produce` function takes a value and a \"recipe function\" (whose\r\n       * return value often depends on the base state). The recipe function is\r\n       * free to mutate its first argument however it wants. All mutations are\r\n       * only ever applied to a __copy__ of the base state.\r\n       *\r\n       * Pass only a function to create a \"curried producer\" which relieves you\r\n       * from passing the recipe function every time.\r\n       *\r\n       * Only plain objects and arrays are made mutable. All other objects are\r\n       * considered uncopyable.\r\n       *\r\n       * Note: This function is __bound__ to its `Immer` instance.\r\n       *\r\n       * @param {any} base - the initial state\r\n       * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\r\n       * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n       * @returns {any} a new state, or the initial state if nothing was modified\r\n       */\n\n      this.produce = function (base, recipe, patchListener) {\n        // curried invocation\n        if (typeof base === \"function\" && typeof recipe !== \"function\") {\n          var defaultBase = recipe;\n          recipe = base;\n          var self = _this;\n          return function curriedProduce(base) {\n            var _this2 = this;\n\n            if (base === void 0) {\n              base = defaultBase;\n            }\n\n            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n              args[_key - 1] = arguments[_key];\n            }\n\n            return self.produce(base, function (draft) {\n              var _recipe;\n\n              return (_recipe = recipe).call.apply(_recipe, [_this2, draft].concat(args));\n            }); // prettier-ignore\n          };\n        }\n\n        if (typeof recipe !== \"function\") die(6);\n        if (patchListener !== undefined && typeof patchListener !== \"function\") die(7);\n        var result; // Only plain objects, arrays, and \"immerable classes\" are drafted.\n\n        if (isDraftable(base)) {\n          var scope = enterScope(_this);\n          var proxy = createProxy(_this, base, undefined);\n          var hasError = true;\n\n          try {\n            result = recipe(proxy);\n            hasError = false;\n          } finally {\n            // finally instead of catch + rethrow better preserves original stack\n            if (hasError) revokeScope(scope);else leaveScope(scope);\n          }\n\n          if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n            return result.then(function (result) {\n              usePatchesInScope(scope, patchListener);\n              return processResult(result, scope);\n            }, function (error) {\n              revokeScope(scope);\n              throw error;\n            });\n          }\n\n          usePatchesInScope(scope, patchListener);\n          return processResult(result, scope);\n        } else if (!base || typeof base !== \"object\") {\n          result = recipe(base);\n          if (result === undefined) result = base;\n          if (result === NOTHING) result = undefined;\n          if (_this.autoFreeze_) freeze(result, true);\n\n          if (patchListener) {\n            var p = [];\n            var ip = [];\n            getPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip);\n            patchListener(p, ip);\n          }\n\n          return result;\n        } else die(21, base);\n      };\n\n      this.produceWithPatches = function (arg1, arg2, arg3) {\n        if (typeof arg1 === \"function\") {\n          return function (state) {\n            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n              args[_key2 - 1] = arguments[_key2];\n            }\n\n            return _this.produceWithPatches(state, function (draft) {\n              return arg1.apply(void 0, [draft].concat(args));\n            });\n          };\n        }\n\n        var patches, inversePatches;\n\n        var result = _this.produce(arg1, arg2, function (p, ip) {\n          patches = p;\n          inversePatches = ip;\n        });\n\n        if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n          return result.then(function (nextState) {\n            return [nextState, patches, inversePatches];\n          });\n        }\n\n        return [result, patches, inversePatches];\n      };\n\n      if (typeof (config === null || config === void 0 ? void 0 : config.useProxies) === \"boolean\") this.setUseProxies(config.useProxies);\n      if (typeof (config === null || config === void 0 ? void 0 : config.autoFreeze) === \"boolean\") this.setAutoFreeze(config.autoFreeze);\n    }\n\n    var _proto = Immer.prototype;\n\n    _proto.createDraft = function createDraft(base) {\n      if (!isDraftable(base)) die(8);\n      if (isDraft(base)) base = current(base);\n      var scope = enterScope(this);\n      var proxy = createProxy(this, base, undefined);\n      proxy[DRAFT_STATE].isManual_ = true;\n      leaveScope(scope);\n      return proxy;\n    };\n\n    _proto.finishDraft = function finishDraft(draft, patchListener) {\n      var state = draft && draft[DRAFT_STATE];\n      {\n        if (!state || !state.isManual_) die(9);\n        if (state.finalized_) die(10);\n      }\n      var scope = state.scope_;\n      usePatchesInScope(scope, patchListener);\n      return processResult(undefined, scope);\n    }\n    /**\r\n     * Pass true to automatically freeze all copies created by Immer.\r\n     *\r\n     * By default, auto-freezing is enabled.\r\n     */\n    ;\n\n    _proto.setAutoFreeze = function setAutoFreeze(value) {\n      this.autoFreeze_ = value;\n    }\n    /**\r\n     * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n     * always faster than using ES5 proxies.\r\n     *\r\n     * By default, feature detection is used, so calling this is rarely necessary.\r\n     */\n    ;\n\n    _proto.setUseProxies = function setUseProxies(value) {\n      if (value && !hasProxies) {\n        die(20);\n      }\n\n      this.useProxies_ = value;\n    };\n\n    _proto.applyPatches = function applyPatches(base, patches) {\n      // If a patch replaces the entire state, take that replacement as base\n      // before applying patches\n      var i;\n\n      for (i = patches.length - 1; i >= 0; i--) {\n        var patch = patches[i];\n\n        if (patch.path.length === 0 && patch.op === \"replace\") {\n          base = patch.value;\n          break;\n        }\n      } // If there was a patch that replaced the entire state, start from the\n      // patch after that.\n\n\n      if (i > -1) {\n        patches = patches.slice(i + 1);\n      }\n\n      var applyPatchesImpl = getPlugin(\"Patches\").applyPatches_;\n\n      if (isDraft(base)) {\n        // N.B: never hits if some patch a replacement, patches are never drafts\n        return applyPatchesImpl(base, patches);\n      } // Otherwise, produce a copy of the base state.\n\n\n      return this.produce(base, function (draft) {\n        return applyPatchesImpl(draft, patches);\n      });\n    };\n\n    return Immer;\n  }();\n\n  function createProxy(immer, value, parent) {\n    // precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n    var draft = isMap(value) ? getPlugin(\"MapSet\").proxyMap_(value, parent) : isSet(value) ? getPlugin(\"MapSet\").proxySet_(value, parent) : immer.useProxies_ ? createProxyProxy(value, parent) : getPlugin(\"ES5\").createES5Proxy_(value, parent);\n    var scope = parent ? parent.scope_ : getCurrentScope();\n    scope.drafts_.push(draft);\n    return draft;\n  }\n\n  function current(value) {\n    if (!isDraft(value)) die(22, value);\n    return currentImpl(value);\n  }\n\n  function currentImpl(value) {\n    if (!isDraftable(value)) return value;\n    var state = value[DRAFT_STATE];\n    var copy;\n    var archType = getArchtype(value);\n\n    if (state) {\n      if (!state.modified_ && (state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state))) return state.base_; // Optimization: avoid generating new drafts during copying\n\n      state.finalized_ = true;\n      copy = copyHelper(value, archType);\n      state.finalized_ = false;\n    } else {\n      copy = copyHelper(value, archType);\n    }\n\n    each(copy, function (key, childValue) {\n      if (state && get(state.base_, key) === childValue) return; // no need to copy or search in something that didn't change\n\n      set(copy, key, currentImpl(childValue));\n    }); // In the future, we might consider freezing here, based on the current settings\n\n    return archType === 3\n    /* Set */\n    ? new Set(copy) : copy;\n  }\n\n  function copyHelper(value, archType) {\n    // creates a shallow copy, even if it is a map or set\n    switch (archType) {\n      case 2\n      /* Map */\n      :\n        return new Map(value);\n\n      case 3\n      /* Set */\n      :\n        // Set will be cloned as array temporarily, so that we can replace individual items\n        return Array.from(value);\n    }\n\n    return shallowCopy(value);\n  }\n\n  function enableES5() {\n    function willFinalizeES5_(scope, result, isReplaced) {\n      if (!isReplaced) {\n        if (scope.patches_) {\n          markChangesRecursively(scope.drafts_[0]);\n        } // This is faster when we don't care about which attributes changed.\n\n\n        markChangesSweep(scope.drafts_);\n      } // When a child draft is returned, look for changes.\n      else if (isDraft(result) && result[DRAFT_STATE].scope_ === scope) {\n        markChangesSweep(scope.drafts_);\n      }\n    }\n\n    function createES5Draft(isArray, base) {\n      if (isArray) {\n        var draft = new Array(base.length);\n\n        for (var i = 0; i < base.length; i++) {\n          Object.defineProperty(draft, \"\" + i, proxyProperty(i, true));\n        }\n\n        return draft;\n      } else {\n        var _descriptors = getOwnPropertyDescriptors(base);\n\n        delete _descriptors[DRAFT_STATE];\n        var keys = ownKeys(_descriptors);\n\n        for (var _i = 0; _i < keys.length; _i++) {\n          var key = keys[_i];\n          _descriptors[key] = proxyProperty(key, isArray || !!_descriptors[key].enumerable);\n        }\n\n        return Object.create(Object.getPrototypeOf(base), _descriptors);\n      }\n    }\n\n    function createES5Proxy_(base, parent) {\n      var isArray = Array.isArray(base);\n      var draft = createES5Draft(isArray, base);\n      var state = {\n        type_: isArray ? 5\n        /* ES5Array */\n        : 4\n        /* ES5Object */\n        ,\n        scope_: parent ? parent.scope_ : getCurrentScope(),\n        modified_: false,\n        finalized_: false,\n        assigned_: {},\n        parent_: parent,\n        // base is the object we are drafting\n        base_: base,\n        // draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n        draft_: draft,\n        copy_: null,\n        revoked_: false,\n        isManual_: false\n      };\n      Object.defineProperty(draft, DRAFT_STATE, {\n        value: state,\n        // enumerable: false <- the default\n        writable: true\n      });\n      return draft;\n    } // property descriptors are recycled to make sure we don't create a get and set closure per property,\n    // but share them all instead\n\n\n    var descriptors = {};\n\n    function proxyProperty(prop, enumerable) {\n      var desc = descriptors[prop];\n\n      if (desc) {\n        desc.enumerable = enumerable;\n      } else {\n        descriptors[prop] = desc = {\n          configurable: true,\n          enumerable: enumerable,\n          get: function get() {\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state); // @ts-ignore\n\n            return objectTraps.get(state, prop);\n          },\n          set: function set(value) {\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state); // @ts-ignore\n\n            objectTraps.set(state, prop, value);\n          }\n        };\n      }\n\n      return desc;\n    } // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\n\n    function markChangesSweep(drafts) {\n      // The natural order of drafts in the `scope` array is based on when they\n      // were accessed. By processing drafts in reverse natural order, we have a\n      // better chance of processing leaf nodes first. When a leaf node is known to\n      // have changed, we can avoid any traversal of its ancestor nodes.\n      for (var i = drafts.length - 1; i >= 0; i--) {\n        var state = drafts[i][DRAFT_STATE];\n\n        if (!state.modified_) {\n          switch (state.type_) {\n            case 5\n            /* ES5Array */\n            :\n              if (hasArrayChanges(state)) markChanged(state);\n              break;\n\n            case 4\n            /* ES5Object */\n            :\n              if (hasObjectChanges(state)) markChanged(state);\n              break;\n          }\n        }\n      }\n    }\n\n    function markChangesRecursively(object) {\n      if (!object || typeof object !== \"object\") return;\n      var state = object[DRAFT_STATE];\n      if (!state) return;\n      var base_ = state.base_,\n          draft_ = state.draft_,\n          assigned_ = state.assigned_,\n          type_ = state.type_;\n\n      if (type_ === 4\n      /* ES5Object */\n      ) {\n        // Look for added keys.\n        // probably there is a faster way to detect changes, as sweep + recurse seems to do some\n        // unnecessary work.\n        // also: probably we can store the information we detect here, to speed up tree finalization!\n        each(draft_, function (key) {\n          if (key === DRAFT_STATE) return; // The `undefined` check is a fast path for pre-existing keys.\n\n          if (base_[key] === undefined && !has(base_, key)) {\n            assigned_[key] = true;\n            markChanged(state);\n          } else if (!assigned_[key]) {\n            // Only untouched properties trigger recursion.\n            markChangesRecursively(draft_[key]);\n          }\n        }); // Look for removed keys.\n\n        each(base_, function (key) {\n          // The `undefined` check is a fast path for pre-existing keys.\n          if (draft_[key] === undefined && !has(draft_, key)) {\n            assigned_[key] = false;\n            markChanged(state);\n          }\n        });\n      } else if (type_ === 5\n      /* ES5Array */\n      ) {\n        if (hasArrayChanges(state)) {\n          markChanged(state);\n          assigned_.length = true;\n        }\n\n        if (draft_.length < base_.length) {\n          for (var i = draft_.length; i < base_.length; i++) {\n            assigned_[i] = false;\n          }\n        } else {\n          for (var _i2 = base_.length; _i2 < draft_.length; _i2++) {\n            assigned_[_i2] = true;\n          }\n        } // Minimum count is enough, the other parts has been processed.\n\n\n        var min = Math.min(draft_.length, base_.length);\n\n        for (var _i3 = 0; _i3 < min; _i3++) {\n          // Only untouched indices trigger recursion.\n          if (!draft_.hasOwnProperty(_i3)) {\n            assigned_[_i3] = true;\n          }\n\n          if (assigned_[_i3] === undefined) markChangesRecursively(draft_[_i3]);\n        }\n      }\n    }\n\n    function hasObjectChanges(state) {\n      var base_ = state.base_,\n          draft_ = state.draft_; // Search for added keys and changed keys. Start at the back, because\n      // non-numeric keys are ordered by time of definition on the object.\n\n      var keys = ownKeys(draft_);\n\n      for (var i = keys.length - 1; i >= 0; i--) {\n        var key = keys[i];\n        if (key === DRAFT_STATE) continue;\n        var baseValue = base_[key]; // The `undefined` check is a fast path for pre-existing keys.\n\n        if (baseValue === undefined && !has(base_, key)) {\n          return true;\n        } // Once a base key is deleted, future changes go undetected, because its\n        // descriptor is erased. This branch detects any missed changes.\n        else {\n          var value = draft_[key];\n\n          var _state = value && value[DRAFT_STATE];\n\n          if (_state ? _state.base_ !== baseValue : !is(value, baseValue)) {\n            return true;\n          }\n        }\n      } // At this point, no keys were added or changed.\n      // Compare key count to determine if keys were deleted.\n\n\n      var baseIsDraft = !!base_[DRAFT_STATE];\n      return keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1); // + 1 to correct for DRAFT_STATE\n    }\n\n    function hasArrayChanges(state) {\n      var draft_ = state.draft_;\n      if (draft_.length !== state.base_.length) return true; // See #116\n      // If we first shorten the length, our array interceptors will be removed.\n      // If after that new items are added, result in the same original length,\n      // those last items will have no intercepting property.\n      // So if there is no own descriptor on the last position, we know that items were removed and added\n      // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n      // the last one\n      // last descriptor can be not a trap, if the array was extended\n\n      var descriptor = Object.getOwnPropertyDescriptor(draft_, draft_.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\n      if (descriptor && !descriptor.get) return true; // if we miss a property, it has been deleted, so array probobaly changed\n\n      for (var i = 0; i < draft_.length; i++) {\n        if (!draft_.hasOwnProperty(i)) return true;\n      } // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\n\n      return false;\n    }\n\n    function hasChanges_(state) {\n      return state.type_ === 4\n      /* ES5Object */\n      ? hasObjectChanges(state) : hasArrayChanges(state);\n    }\n\n    function assertUnrevoked(state\n    /*ES5State | MapState | SetState*/\n    ) {\n      if (state.revoked_) die(3, JSON.stringify(latest(state)));\n    }\n\n    loadPlugin(\"ES5\", {\n      createES5Proxy_: createES5Proxy_,\n      willFinalizeES5_: willFinalizeES5_,\n      hasChanges_: hasChanges_\n    });\n  }\n\n  function enablePatches() {\n    var REPLACE = \"replace\";\n    var ADD = \"add\";\n    var REMOVE = \"remove\";\n\n    function generatePatches_(state, basePath, patches, inversePatches) {\n      switch (state.type_) {\n        case 0\n        /* ProxyObject */\n        :\n        case 4\n        /* ES5Object */\n        :\n        case 2\n        /* Map */\n        :\n          return generatePatchesFromAssigned(state, basePath, patches, inversePatches);\n\n        case 5\n        /* ES5Array */\n        :\n        case 1\n        /* ProxyArray */\n        :\n          return generateArrayPatches(state, basePath, patches, inversePatches);\n\n        case 3\n        /* Set */\n        :\n          return generateSetPatches(state, basePath, patches, inversePatches);\n      }\n    }\n\n    function generateArrayPatches(state, basePath, patches, inversePatches) {\n      var base_ = state.base_,\n          assigned_ = state.assigned_;\n      var copy_ = state.copy_; // Reduce complexity by ensuring `base` is never longer.\n\n      if (copy_.length < base_.length) {\n        var _ref = [copy_, base_];\n        base_ = _ref[0];\n        copy_ = _ref[1];\n        var _ref2 = [inversePatches, patches];\n        patches = _ref2[0];\n        inversePatches = _ref2[1];\n      } // Process replaced indices.\n\n\n      for (var i = 0; i < base_.length; i++) {\n        if (assigned_[i] && copy_[i] !== base_[i]) {\n          var path = basePath.concat([i]);\n          patches.push({\n            op: REPLACE,\n            path: path,\n            // Need to maybe clone it, as it can in fact be the original value\n            // due to the base/copy inversion at the start of this function\n            value: clonePatchValueIfNeeded(copy_[i])\n          });\n          inversePatches.push({\n            op: REPLACE,\n            path: path,\n            value: clonePatchValueIfNeeded(base_[i])\n          });\n        }\n      } // Process added indices.\n\n\n      for (var _i = base_.length; _i < copy_.length; _i++) {\n        var _path = basePath.concat([_i]);\n\n        patches.push({\n          op: ADD,\n          path: _path,\n          // Need to maybe clone it, as it can in fact be the original value\n          // due to the base/copy inversion at the start of this function\n          value: clonePatchValueIfNeeded(copy_[_i])\n        });\n      }\n\n      if (base_.length < copy_.length) {\n        inversePatches.push({\n          op: REPLACE,\n          path: basePath.concat([\"length\"]),\n          value: base_.length\n        });\n      }\n    } // This is used for both Map objects and normal objects.\n\n\n    function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {\n      var base_ = state.base_,\n          copy_ = state.copy_;\n      each(state.assigned_, function (key, assignedValue) {\n        var origValue = get(base_, key);\n        var value = get(copy_, key);\n        var op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD;\n        if (origValue === value && op === REPLACE) return;\n        var path = basePath.concat(key);\n        patches.push(op === REMOVE ? {\n          op: op,\n          path: path\n        } : {\n          op: op,\n          path: path,\n          value: value\n        });\n        inversePatches.push(op === ADD ? {\n          op: REMOVE,\n          path: path\n        } : op === REMOVE ? {\n          op: ADD,\n          path: path,\n          value: clonePatchValueIfNeeded(origValue)\n        } : {\n          op: REPLACE,\n          path: path,\n          value: clonePatchValueIfNeeded(origValue)\n        });\n      });\n    }\n\n    function generateSetPatches(state, basePath, patches, inversePatches) {\n      var base_ = state.base_,\n          copy_ = state.copy_;\n      var i = 0;\n      base_.forEach(function (value) {\n        if (!copy_.has(value)) {\n          var path = basePath.concat([i]);\n          patches.push({\n            op: REMOVE,\n            path: path,\n            value: value\n          });\n          inversePatches.unshift({\n            op: ADD,\n            path: path,\n            value: value\n          });\n        }\n\n        i++;\n      });\n      i = 0;\n      copy_.forEach(function (value) {\n        if (!base_.has(value)) {\n          var path = basePath.concat([i]);\n          patches.push({\n            op: ADD,\n            path: path,\n            value: value\n          });\n          inversePatches.unshift({\n            op: REMOVE,\n            path: path,\n            value: value\n          });\n        }\n\n        i++;\n      });\n    }\n\n    function generateReplacementPatches_(baseValue, replacement, patches, inversePatches) {\n      patches.push({\n        op: REPLACE,\n        path: [],\n        value: replacement === NOTHING ? undefined : replacement\n      });\n      inversePatches.push({\n        op: REPLACE,\n        path: [],\n        value: baseValue\n      });\n    }\n\n    function applyPatches_(draft, patches) {\n      patches.forEach(function (patch) {\n        var path = patch.path,\n            op = patch.op;\n        var base = draft;\n\n        for (var i = 0; i < path.length - 1; i++) {\n          var parentType = getArchtype(base);\n          var p = \"\" + path[i]; // See #738, avoid prototype pollution\n\n          if ((parentType === 0\n          /* Object */\n          || parentType === 1\n          /* Array */\n          ) && (p === \"__proto__\" || p === \"constructor\")) die(24);\n          if (typeof base === \"function\" && p === \"prototype\") die(24);\n          base = get(base, p);\n          if (typeof base !== \"object\") die(15, path.join(\"/\"));\n        }\n\n        var type = getArchtype(base);\n        var value = deepClonePatchValue(patch.value); // used to clone patch to ensure original patch is not modified, see #411\n\n        var key = path[path.length - 1];\n\n        switch (op) {\n          case REPLACE:\n            switch (type) {\n              case 2\n              /* Map */\n              :\n                return base.set(key, value);\n\n              /* istanbul ignore next */\n\n              case 3\n              /* Set */\n              :\n                die(16);\n\n              default:\n                // if value is an object, then it's assigned by reference\n                // in the following add or remove ops, the value field inside the patch will also be modifyed\n                // so we use value from the cloned patch\n                // @ts-ignore\n                return base[key] = value;\n            }\n\n          case ADD:\n            switch (type) {\n              case 1\n              /* Array */\n              :\n                return key === \"-\" ? base.push(value) : base.splice(key, 0, value);\n\n              case 2\n              /* Map */\n              :\n                return base.set(key, value);\n\n              case 3\n              /* Set */\n              :\n                return base.add(value);\n\n              default:\n                return base[key] = value;\n            }\n\n          case REMOVE:\n            switch (type) {\n              case 1\n              /* Array */\n              :\n                return base.splice(key, 1);\n\n              case 2\n              /* Map */\n              :\n                return base.delete(key);\n\n              case 3\n              /* Set */\n              :\n                return base.delete(patch.value);\n\n              default:\n                return delete base[key];\n            }\n\n          default:\n            die(17, op);\n        }\n      });\n      return draft;\n    }\n\n    function deepClonePatchValue(obj) {\n      if (!isDraftable(obj)) return obj;\n      if (Array.isArray(obj)) return obj.map(deepClonePatchValue);\n      if (isMap(obj)) return new Map(Array.from(obj.entries()).map(function (_ref3) {\n        var k = _ref3[0],\n            v = _ref3[1];\n        return [k, deepClonePatchValue(v)];\n      }));\n      if (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue));\n      var cloned = Object.create(Object.getPrototypeOf(obj));\n\n      for (var key in obj) {\n        cloned[key] = deepClonePatchValue(obj[key]);\n      }\n\n      if (has(obj, DRAFTABLE)) cloned[DRAFTABLE] = obj[DRAFTABLE];\n      return cloned;\n    }\n\n    function clonePatchValueIfNeeded(obj) {\n      if (isDraft(obj)) {\n        return deepClonePatchValue(obj);\n      } else return obj;\n    }\n\n    loadPlugin(\"Patches\", {\n      applyPatches_: applyPatches_,\n      generatePatches_: generatePatches_,\n      generateReplacementPatches_: generateReplacementPatches_\n    });\n  } // types only!\n\n\n  function enableMapSet() {\n    /* istanbul ignore next */\n    var _extendStatics = function extendStatics(d, b) {\n      _extendStatics = Object.setPrototypeOf || {\n        __proto__: []\n      } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n      } || function (d, b) {\n        for (var p in b) {\n          if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n      };\n\n      return _extendStatics(d, b);\n    }; // Ugly hack to resolve #502 and inherit built in Map / Set\n\n\n    function __extends(d, b) {\n      _extendStatics(d, b);\n\n      function __() {\n        this.constructor = d;\n      }\n\n      d.prototype = ( // @ts-ignore\n      __.prototype = b.prototype, new __());\n    }\n\n    var DraftMap = function (_super) {\n      __extends(DraftMap, _super); // Create class manually, cause #502\n\n\n      function DraftMap(target, parent) {\n        this[DRAFT_STATE] = {\n          type_: 2\n          /* Map */\n          ,\n          parent_: parent,\n          scope_: parent ? parent.scope_ : getCurrentScope(),\n          modified_: false,\n          finalized_: false,\n          copy_: undefined,\n          assigned_: undefined,\n          base_: target,\n          draft_: this,\n          isManual_: false,\n          revoked_: false\n        };\n        return this;\n      }\n\n      var p = DraftMap.prototype;\n      Object.defineProperty(p, \"size\", {\n        get: function get() {\n          return latest(this[DRAFT_STATE]).size;\n        } // enumerable: false,\n        // configurable: true\n\n      });\n\n      p.has = function (key) {\n        return latest(this[DRAFT_STATE]).has(key);\n      };\n\n      p.set = function (key, value) {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n\n        if (!latest(state).has(key) || latest(state).get(key) !== value) {\n          prepareMapCopy(state);\n          markChanged(state);\n          state.assigned_.set(key, true);\n          state.copy_.set(key, value);\n          state.assigned_.set(key, true);\n        }\n\n        return this;\n      };\n\n      p.delete = function (key) {\n        if (!this.has(key)) {\n          return false;\n        }\n\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n        prepareMapCopy(state);\n        markChanged(state);\n\n        if (state.base_.has(key)) {\n          state.assigned_.set(key, false);\n        } else {\n          state.assigned_.delete(key);\n        }\n\n        state.copy_.delete(key);\n        return true;\n      };\n\n      p.clear = function () {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n\n        if (latest(state).size) {\n          prepareMapCopy(state);\n          markChanged(state);\n          state.assigned_ = new Map();\n          each(state.base_, function (key) {\n            state.assigned_.set(key, false);\n          });\n          state.copy_.clear();\n        }\n      };\n\n      p.forEach = function (cb, thisArg) {\n        var _this = this;\n\n        var state = this[DRAFT_STATE];\n        latest(state).forEach(function (_value, key, _map) {\n          cb.call(thisArg, _this.get(key), key, _this);\n        });\n      };\n\n      p.get = function (key) {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n        var value = latest(state).get(key);\n\n        if (state.finalized_ || !isDraftable(value)) {\n          return value;\n        }\n\n        if (value !== state.base_.get(key)) {\n          return value; // either already drafted or reassigned\n        } // despite what it looks, this creates a draft only once, see above condition\n\n\n        var draft = createProxy(state.scope_.immer_, value, state);\n        prepareMapCopy(state);\n        state.copy_.set(key, draft);\n        return draft;\n      };\n\n      p.keys = function () {\n        return latest(this[DRAFT_STATE]).keys();\n      };\n\n      p.values = function () {\n        var _this2 = this,\n            _ref;\n\n        var iterator = this.keys();\n        return _ref = {}, _ref[iteratorSymbol] = function () {\n          return _this2.values();\n        }, _ref.next = function next() {\n          var r = iterator.next();\n          /* istanbul ignore next */\n\n          if (r.done) return r;\n\n          var value = _this2.get(r.value);\n\n          return {\n            done: false,\n            value: value\n          };\n        }, _ref;\n      };\n\n      p.entries = function () {\n        var _this3 = this,\n            _ref2;\n\n        var iterator = this.keys();\n        return _ref2 = {}, _ref2[iteratorSymbol] = function () {\n          return _this3.entries();\n        }, _ref2.next = function next() {\n          var r = iterator.next();\n          /* istanbul ignore next */\n\n          if (r.done) return r;\n\n          var value = _this3.get(r.value);\n\n          return {\n            done: false,\n            value: [r.value, value]\n          };\n        }, _ref2;\n      };\n\n      p[iteratorSymbol] = function () {\n        return this.entries();\n      };\n\n      return DraftMap;\n    }(Map);\n\n    function proxyMap_(target, parent) {\n      // @ts-ignore\n      return new DraftMap(target, parent);\n    }\n\n    function prepareMapCopy(state) {\n      if (!state.copy_) {\n        state.assigned_ = new Map();\n        state.copy_ = new Map(state.base_);\n      }\n    }\n\n    var DraftSet = function (_super) {\n      __extends(DraftSet, _super); // Create class manually, cause #502\n\n\n      function DraftSet(target, parent) {\n        this[DRAFT_STATE] = {\n          type_: 3\n          /* Set */\n          ,\n          parent_: parent,\n          scope_: parent ? parent.scope_ : getCurrentScope(),\n          modified_: false,\n          finalized_: false,\n          copy_: undefined,\n          base_: target,\n          draft_: this,\n          drafts_: new Map(),\n          revoked_: false,\n          isManual_: false\n        };\n        return this;\n      }\n\n      var p = DraftSet.prototype;\n      Object.defineProperty(p, \"size\", {\n        get: function get() {\n          return latest(this[DRAFT_STATE]).size;\n        } // enumerable: true,\n\n      });\n\n      p.has = function (value) {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state); // bit of trickery here, to be able to recognize both the value, and the draft of its value\n\n        if (!state.copy_) {\n          return state.base_.has(value);\n        }\n\n        if (state.copy_.has(value)) return true;\n        if (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value))) return true;\n        return false;\n      };\n\n      p.add = function (value) {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n\n        if (!this.has(value)) {\n          prepareSetCopy(state);\n          markChanged(state);\n          state.copy_.add(value);\n        }\n\n        return this;\n      };\n\n      p.delete = function (value) {\n        if (!this.has(value)) {\n          return false;\n        }\n\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n        prepareSetCopy(state);\n        markChanged(state);\n        return state.copy_.delete(value) || (state.drafts_.has(value) ? state.copy_.delete(state.drafts_.get(value)) :\n        /* istanbul ignore next */\n        false);\n      };\n\n      p.clear = function () {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n\n        if (latest(state).size) {\n          prepareSetCopy(state);\n          markChanged(state);\n          state.copy_.clear();\n        }\n      };\n\n      p.values = function () {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n        prepareSetCopy(state);\n        return state.copy_.values();\n      };\n\n      p.entries = function entries() {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n        prepareSetCopy(state);\n        return state.copy_.entries();\n      };\n\n      p.keys = function () {\n        return this.values();\n      };\n\n      p[iteratorSymbol] = function () {\n        return this.values();\n      };\n\n      p.forEach = function forEach(cb, thisArg) {\n        var iterator = this.values();\n        var result = iterator.next();\n\n        while (!result.done) {\n          cb.call(thisArg, result.value, result.value, this);\n          result = iterator.next();\n        }\n      };\n\n      return DraftSet;\n    }(Set);\n\n    function proxySet_(target, parent) {\n      // @ts-ignore\n      return new DraftSet(target, parent);\n    }\n\n    function prepareSetCopy(state) {\n      if (!state.copy_) {\n        // create drafts for all entries to preserve insertion order\n        state.copy_ = new Set();\n        state.base_.forEach(function (value) {\n          if (isDraftable(value)) {\n            var draft = createProxy(state.scope_.immer_, value, state);\n            state.drafts_.set(value, draft);\n            state.copy_.add(draft);\n          } else {\n            state.copy_.add(value);\n          }\n        });\n      }\n    }\n\n    function assertUnrevoked(state\n    /*ES5State | MapState | SetState*/\n    ) {\n      if (state.revoked_) die(3, JSON.stringify(latest(state)));\n    }\n\n    loadPlugin(\"MapSet\", {\n      proxyMap_: proxyMap_,\n      proxySet_: proxySet_\n    });\n  }\n\n  function enableAllPlugins() {\n    enableES5();\n    enableMapSet();\n    enablePatches();\n  }\n\n  var immer = /*#__PURE__*/new Immer();\n  /**\r\n   * The `produce` function takes a value and a \"recipe function\" (whose\r\n   * return value often depends on the base state). The recipe function is\r\n   * free to mutate its first argument however it wants. All mutations are\r\n   * only ever applied to a __copy__ of the base state.\r\n   *\r\n   * Pass only a function to create a \"curried producer\" which relieves you\r\n   * from passing the recipe function every time.\r\n   *\r\n   * Only plain objects and arrays are made mutable. All other objects are\r\n   * considered uncopyable.\r\n   *\r\n   * Note: This function is __bound__ to its `Immer` instance.\r\n   *\r\n   * @param {any} base - the initial state\r\n   * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\r\n   * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n   * @returns {any} a new state, or the initial state if nothing was modified\r\n   */\n\n  var produce = immer.produce;\n  /**\r\n   * Like `produce`, but `produceWithPatches` always returns a tuple\r\n   * [nextState, patches, inversePatches] (instead of just the next state)\r\n   */\n\n  var produceWithPatches = /*#__PURE__*/immer.produceWithPatches.bind(immer);\n  /**\r\n   * Pass true to automatically freeze all copies created by Immer.\r\n   *\r\n   * Always freeze by default, even in production mode\r\n   */\n\n  var setAutoFreeze = /*#__PURE__*/immer.setAutoFreeze.bind(immer);\n  /**\r\n   * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n   * always faster than using ES5 proxies.\r\n   *\r\n   * By default, feature detection is used, so calling this is rarely necessary.\r\n   */\n\n  var setUseProxies = /*#__PURE__*/immer.setUseProxies.bind(immer);\n  /**\r\n   * Apply an array of Immer patches to the first argument.\r\n   *\r\n   * This function is a producer, which means copy-on-write is in effect.\r\n   */\n\n  var applyPatches = /*#__PURE__*/immer.applyPatches.bind(immer);\n  /**\r\n   * Create an Immer draft from the given base state, which may be a draft itself.\r\n   * The draft can be modified until you finalize it with the `finishDraft` function.\r\n   */\n\n  var createDraft = /*#__PURE__*/immer.createDraft.bind(immer);\n  /**\r\n   * Finalize an Immer draft from a `createDraft` call, returning the base state\r\n   * (if no changes were made) or a modified copy. The draft must *not* be\r\n   * mutated afterwards.\r\n   *\r\n   * Pass a function as the 2nd argument to generate Immer patches based on the\r\n   * changes that were made.\r\n   */\n\n  var finishDraft = /*#__PURE__*/immer.finishDraft.bind(immer);\n  /**\r\n   * This function is actually a no-op, but can be used to cast an immutable type\r\n   * to an draft type and make TypeScript happy\r\n   *\r\n   * @param value\r\n   */\n\n  function castDraft(value) {\n    return value;\n  }\n  /**\r\n   * This function is actually a no-op, but can be used to cast a mutable type\r\n   * to an immutable type and make TypeScript happy\r\n   * @param value\r\n   */\n\n\n  function castImmutable(value) {\n    return value;\n  }\n\n  exports.Immer = Immer;\n  exports.applyPatches = applyPatches;\n  exports.castDraft = castDraft;\n  exports.castImmutable = castImmutable;\n  exports.createDraft = createDraft;\n  exports.current = current;\n  exports.default = produce;\n  exports.enableAllPlugins = enableAllPlugins;\n  exports.enableES5 = enableES5;\n  exports.enableMapSet = enableMapSet;\n  exports.enablePatches = enablePatches;\n  exports.finishDraft = finishDraft;\n  exports.freeze = freeze;\n  exports.immerable = DRAFTABLE;\n  exports.isDraft = isDraft;\n  exports.isDraftable = isDraftable;\n  exports.nothing = NOTHING;\n  exports.original = original;\n  exports.produce = produce;\n  exports.produceWithPatches = produceWithPatches;\n  exports.setAutoFreeze = setAutoFreeze;\n  exports.setUseProxies = setUseProxies;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":"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","names":["hasSymbol","Symbol","hasMap","Map","hasSet","Set","hasProxies","Proxy","revocable","Reflect","NOTHING","for","DRAFTABLE","DRAFT_STATE","iteratorSymbol","iterator","errors","data","path","op","plugin","thing","die","error","args","e","msg","apply","Error","isDraft","value","isDraftable","isPlainObject","Array","isArray","constructor","isMap","isSet","objectCtorString","Object","prototype","toString","proto","getPrototypeOf","Ctor","hasOwnProperty","call","Function","original","base_","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","obj","concat","getOwnPropertyDescriptors","target","res","forEach","key","getOwnPropertyDescriptor","each","iter","enumerableOnly","getArchtype","keys","entry","index","state","type_","has","prop","get","set","propOrOldValue","t","delete","add","is","x","y","latest","copy_","shallowCopy","base","slice","descriptors","i","length","desc","writable","configurable","enumerable","create","freeze","deep","isFrozen","clear","dontMutateFrozenCollections","plugins","getPlugin","pluginKey","loadPlugin","implementation","currentScope","getCurrentScope","createScope","parent_","immer_","drafts_","canAutoFreeze_","unfinalizedDrafts_","usePatchesInScope","scope","patchListener","patches_","inversePatches_","patchListener_","revokeScope","leaveScope","revokeDraft","enterScope","immer","draft","revoke_","revoked_","processResult","result","baseDraft","isReplaced","undefined","useProxies_","willFinalizeES5_","modified_","finalize","maybeFreeze","generateReplacementPatches_","rootScope","childValue","finalizeProperty","scope_","finalized_","draft_","generatePatches_","parentState","targetObject","rootPath","assigned_","autoFreeze_","createProxyProxy","parent","isManual_","traps","objectTraps","arrayTraps","revoke","proxy","source","readPropFromProto","peek","prepareCopy","createProxy","getDescriptorFromProto","current","currentState","markChanged","deleteProperty","owner","defineProperty","setPrototypeOf","fn","arguments","isNaN","parseInt","_desc$get","Immer","config","recipe","defaultBase","self","_this","curriedProduce","produce","_this2","hasError","Promise","then","p","ip","arg1","arg2","arg3","produceWithPatches","patches","inversePatches","nextState","useProxies","setUseProxies","autoFreeze","setAutoFreeze","_proto","createDraft","finishDraft","applyPatches","patch","applyPatchesImpl","applyPatches_","proxyMap_","proxySet_","createES5Proxy_","push","currentImpl","copy","archType","hasChanges_","copyHelper","from","enableES5","markChangesRecursively","markChangesSweep","createES5Draft","proxyProperty","assertUnrevoked","drafts","hasArrayChanges","hasObjectChanges","object","min","Math","baseValue","baseIsDraft","descriptor","JSON","stringify","enablePatches","REPLACE","ADD","REMOVE","basePath","generatePatchesFromAssigned","generateArrayPatches","generateSetPatches","clonePatchValueIfNeeded","assignedValue","origValue","unshift","replacement","parentType","join","type","deepClonePatchValue","splice","map","entries","k","v","cloned","immerable","enableMapSet","extendStatics","d","b","__proto__","__extends","__","DraftMap","_super","size","prepareMapCopy","cb","thisArg","_value","_map","values","next","r","done","_this3","DraftSet","prepareSetCopy","enableAllPlugins","bind","castDraft","castImmutable"],"sources":["C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\utils\\env.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\utils\\errors.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\utils\\common.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\utils\\plugins.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\core\\scope.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\core\\finalize.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\core\\proxy.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\core\\immerClass.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\core\\current.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\plugins\\es5.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\plugins\\patches.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\plugins\\mapset.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\plugins\\all.ts","C:\\Users\\Rohith\\mern\\frontend\\node_modules\\immer\\src\\immer.ts"],"sourcesContent":["// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n","const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtype,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === Archtype.Object) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): Archtype {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? Archtype.Array\n\t\t: isMap(thing)\n\t\t? Archtype.Map\n\t\t: isSet(thing)\n\t\t? Archtype.Set\n\t\t: Archtype.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === Archtype.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === Archtype.Map) thing.set(propOrOldValue, value)\n\telse if (t === Archtype.Set) {\n\t\tthing.delete(propOrOldValue)\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: ProxyType.ES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: ProxyType.ES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ProxyType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ProxyType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyType,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyType.ProxyObject ||\n\t\tstate.type_ === ProxyType.ProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumerable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyType.ES5Object || state.type_ === ProxyType.ES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// Although the original test case doesn't seem valid anyway, so if this in the way we can turn the next line\n\t\t// back to each(result, ....)\n\t\teach(\n\t\t\tstate.type_ === ProxyType.Set ? new Set(result) : result,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\tif (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyType\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyType.ProxyArray : (ProxyType.ProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\tstate.copy_![prop] === value &&\n\t\t\t// special case: NaN\n\t\t\ttypeof value !== \"number\" &&\n\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t(value !== undefined || prop in state.copy_)\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyType.ProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (\n\t\targ1: any,\n\t\targ2?: any,\n\t\targ3?: any\n\t): any => {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => arg1(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(arg1, arg2, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\n\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\treturn result.then(nextState => [nextState, patches!, inversePatches!])\n\t\t}\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtype,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === Archtype.Set ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase Archtype.Map:\n\t\t\treturn new Map(value)\n\t\tcase Archtype.Set:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n","import {\n\tImmerState,\n\tDrafted,\n\tES5ArrayState,\n\tES5ObjectState,\n\teach,\n\thas,\n\tisDraft,\n\tlatest,\n\tDRAFT_STATE,\n\tis,\n\tloadPlugin,\n\tImmerScope,\n\tProxyType,\n\tgetCurrentScope,\n\tdie,\n\tmarkChanged,\n\tobjectTraps,\n\townKeys,\n\tgetOwnPropertyDescriptors\n} from \"../internal\"\n\ntype ES5State = ES5ArrayState | ES5ObjectState\n\nexport function enableES5() {\n\tfunction willFinalizeES5_(\n\t\tscope: ImmerScope,\n\t\tresult: any,\n\t\tisReplaced: boolean\n\t) {\n\t\tif (!isReplaced) {\n\t\t\tif (scope.patches_) {\n\t\t\t\tmarkChangesRecursively(scope.drafts_![0])\n\t\t\t}\n\t\t\t// This is faster when we don't care about which attributes changed.\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t\t// When a child draft is returned, look for changes.\n\t\telse if (\n\t\t\tisDraft(result) &&\n\t\t\t(result[DRAFT_STATE] as ES5State).scope_ === scope\n\t\t) {\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t}\n\n\tfunction createES5Draft(isArray: boolean, base: any) {\n\t\tif (isArray) {\n\t\t\tconst draft = new Array(base.length)\n\t\t\tfor (let i = 0; i < base.length; i++)\n\t\t\t\tObject.defineProperty(draft, \"\" + i, proxyProperty(i, true))\n\t\t\treturn draft\n\t\t} else {\n\t\t\tconst descriptors = getOwnPropertyDescriptors(base)\n\t\t\tdelete descriptors[DRAFT_STATE as any]\n\t\t\tconst keys = ownKeys(descriptors)\n\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\tconst key: any = keys[i]\n\t\t\t\tdescriptors[key] = proxyProperty(\n\t\t\t\t\tkey,\n\t\t\t\t\tisArray || !!descriptors[key].enumerable\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n\t\t}\n\t}\n\n\tfunction createES5Proxy_<T>(\n\t\tbase: T,\n\t\tparent?: ImmerState\n\t): Drafted<T, ES5ObjectState | ES5ArrayState> {\n\t\tconst isArray = Array.isArray(base)\n\t\tconst draft = createES5Draft(isArray, base)\n\n\t\tconst state: ES5ObjectState | ES5ArrayState = {\n\t\t\ttype_: isArray ? ProxyType.ES5Array : (ProxyType.ES5Object as any),\n\t\t\tscope_: parent ? parent.scope_ : getCurrentScope(),\n\t\t\tmodified_: false,\n\t\t\tfinalized_: false,\n\t\t\tassigned_: {},\n\t\t\tparent_: parent,\n\t\t\t// base is the object we are drafting\n\t\t\tbase_: base,\n\t\t\t// draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n\t\t\tdraft_: draft,\n\t\t\tcopy_: null,\n\t\t\trevoked_: false,\n\t\t\tisManual_: false\n\t\t}\n\n\t\tObject.defineProperty(draft, DRAFT_STATE, {\n\t\t\tvalue: state,\n\t\t\t// enumerable: false <- the default\n\t\t\twritable: true\n\t\t})\n\t\treturn draft\n\t}\n\n\t// property descriptors are recycled to make sure we don't create a get and set closure per property,\n\t// but share them all instead\n\tconst descriptors: {[prop: string]: PropertyDescriptor} = {}\n\n\tfunction proxyProperty(\n\t\tprop: string | number,\n\t\tenumerable: boolean\n\t): PropertyDescriptor {\n\t\tlet desc = descriptors[prop]\n\t\tif (desc) {\n\t\t\tdesc.enumerable = enumerable\n\t\t} else {\n\t\t\tdescriptors[prop] = desc = {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable,\n\t\t\t\tget(this: any) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn objectTraps.get(state, prop)\n\t\t\t\t},\n\t\t\t\tset(this: any, value) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tobjectTraps.set(state, prop, value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn desc\n\t}\n\n\t// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\tfunction markChangesSweep(drafts: Drafted<any, ImmerState>[]) {\n\t\t// The natural order of drafts in the `scope` array is based on when they\n\t\t// were accessed. By processing drafts in reverse natural order, we have a\n\t\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t\t// have changed, we can avoid any traversal of its ancestor nodes.\n\t\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\t\tconst state: ES5State = drafts[i][DRAFT_STATE]\n\t\t\tif (!state.modified_) {\n\t\t\t\tswitch (state.type_) {\n\t\t\t\t\tcase ProxyType.ES5Array:\n\t\t\t\t\t\tif (hasArrayChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase ProxyType.ES5Object:\n\t\t\t\t\t\tif (hasObjectChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction markChangesRecursively(object: any) {\n\t\tif (!object || typeof object !== \"object\") return\n\t\tconst state: ES5State | undefined = object[DRAFT_STATE]\n\t\tif (!state) return\n\t\tconst {base_, draft_, assigned_, type_} = state\n\t\tif (type_ === ProxyType.ES5Object) {\n\t\t\t// Look for added keys.\n\t\t\t// probably there is a faster way to detect changes, as sweep + recurse seems to do some\n\t\t\t// unnecessary work.\n\t\t\t// also: probably we can store the information we detect here, to speed up tree finalization!\n\t\t\teach(draft_, key => {\n\t\t\t\tif ((key as any) === DRAFT_STATE) return\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif ((base_ as any)[key] === undefined && !has(base_, key)) {\n\t\t\t\t\tassigned_[key] = true\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t} else if (!assigned_[key]) {\n\t\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\t\tmarkChangesRecursively(draft_[key])\n\t\t\t\t}\n\t\t\t})\n\t\t\t// Look for removed keys.\n\t\t\teach(base_, key => {\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif (draft_[key] === undefined && !has(draft_, key)) {\n\t\t\t\t\tassigned_[key] = false\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (type_ === ProxyType.ES5Array) {\n\t\t\tif (hasArrayChanges(state as ES5ArrayState)) {\n\t\t\t\tmarkChanged(state)\n\t\t\t\tassigned_.length = true\n\t\t\t}\n\n\t\t\tif (draft_.length < base_.length) {\n\t\t\t\tfor (let i = draft_.length; i < base_.length; i++) assigned_[i] = false\n\t\t\t} else {\n\t\t\t\tfor (let i = base_.length; i < draft_.length; i++) assigned_[i] = true\n\t\t\t}\n\n\t\t\t// Minimum count is enough, the other parts has been processed.\n\t\t\tconst min = Math.min(draft_.length, base_.length)\n\n\t\t\tfor (let i = 0; i < min; i++) {\n\t\t\t\t// Only untouched indices trigger recursion.\n\t\t\t\tif (!draft_.hasOwnProperty(i)) {\n\t\t\t\t\tassigned_[i] = true\n\t\t\t\t}\n\t\t\t\tif (assigned_[i] === undefined) markChangesRecursively(draft_[i])\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction hasObjectChanges(state: ES5ObjectState) {\n\t\tconst {base_, draft_} = state\n\n\t\t// Search for added keys and changed keys. Start at the back, because\n\t\t// non-numeric keys are ordered by time of definition on the object.\n\t\tconst keys = ownKeys(draft_)\n\t\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\t\tconst key: any = keys[i]\n\t\t\tif (key === DRAFT_STATE) continue\n\t\t\tconst baseValue = base_[key]\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (baseValue === undefined && !has(base_, key)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t\t// descriptor is erased. This branch detects any missed changes.\n\t\t\telse {\n\t\t\t\tconst value = draft_[key]\n\t\t\t\tconst state: ImmerState = value && value[DRAFT_STATE]\n\t\t\t\tif (state ? state.base_ !== baseValue : !is(value, baseValue)) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// At this point, no keys were added or changed.\n\t\t// Compare key count to determine if keys were deleted.\n\t\tconst baseIsDraft = !!base_[DRAFT_STATE as any]\n\t\treturn keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1) // + 1 to correct for DRAFT_STATE\n\t}\n\n\tfunction hasArrayChanges(state: ES5ArrayState) {\n\t\tconst {draft_} = state\n\t\tif (draft_.length !== state.base_.length) return true\n\t\t// See #116\n\t\t// If we first shorten the length, our array interceptors will be removed.\n\t\t// If after that new items are added, result in the same original length,\n\t\t// those last items will have no intercepting property.\n\t\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t\t// the last one\n\t\t// last descriptor can be not a trap, if the array was extended\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(\n\t\t\tdraft_,\n\t\t\tdraft_.length - 1\n\t\t)\n\t\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\t\tif (descriptor && !descriptor.get) return true\n\t\t// if we miss a property, it has been deleted, so array probobaly changed\n\t\tfor (let i = 0; i < draft_.length; i++) {\n\t\t\tif (!draft_.hasOwnProperty(i)) return true\n\t\t}\n\t\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\t\treturn false\n\t}\n\n\tfunction hasChanges_(state: ES5State) {\n\t\treturn state.type_ === ProxyType.ES5Object\n\t\t\t? hasObjectChanges(state)\n\t\t\t: hasArrayChanges(state)\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"ES5\", {\n\t\tcreateES5Proxy_,\n\t\twillFinalizeES5_,\n\t\thasChanges_\n\t})\n}\n","import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tES5ArrayState,\n\tProxyArrayState,\n\tMapState,\n\tES5ObjectState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tProxyType,\n\tArchtype,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ProxyType.ProxyObject:\n\t\t\tcase ProxyType.ES5Object:\n\t\t\tcase ProxyType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ProxyType.ES5Array:\n\t\t\tcase ProxyType.ProxyArray:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ProxyType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ES5ArrayState | ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tif (base_.length < copy_.length) {\n\t\t\tinversePatches.push({\n\t\t\t\top: REPLACE,\n\t\t\t\tpath: basePath.concat([\"length\"]),\n\t\t\t\tvalue: base_.length\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ES5ObjectState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tconst p = \"\" + path[i]\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === Archtype.Object || parentType === Archtype.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(24)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\") die(24)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(15, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\tdie(16)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(17, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n","// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\titeratorSymbol,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tProxyType,\n\tdie,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\t/* istanbul ignore next */\n\tvar extendStatics = function(d: any, b: any): any {\n\t\textendStatics =\n\t\t\tObject.setPrototypeOf ||\n\t\t\t({__proto__: []} instanceof Array &&\n\t\t\t\tfunction(d, b) {\n\t\t\t\t\td.__proto__ = b\n\t\t\t\t}) ||\n\t\t\tfunction(d, b) {\n\t\t\t\tfor (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]\n\t\t\t}\n\t\treturn extendStatics(d, b)\n\t}\n\n\t// Ugly hack to resolve #502 and inherit built in Map / Set\n\tfunction __extends(d: any, b: any): any {\n\t\textendStatics(d, b)\n\t\tfunction __(this: any): any {\n\t\t\tthis.constructor = d\n\t\t}\n\t\td.prototype =\n\t\t\t// @ts-ignore\n\t\t\t((__.prototype = b.prototype), new __())\n\t}\n\n\tconst DraftMap = (function(_super) {\n\t\t__extends(DraftMap, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftMap(this: any, target: AnyMap, parent?: ImmerState): any {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyType.Map,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t} as MapState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftMap.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: false,\n\t\t\t// configurable: true\n\t\t})\n\n\t\tp.has = function(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tp.set = function(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tif (state.base_.has(key)) {\n\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t} else {\n\t\t\t\tstate.assigned_!.delete(key)\n\t\t\t}\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.forEach = function(\n\t\t\tcb: (value: any, key: any, self: any) => void,\n\t\t\tthisArg?: any\n\t\t) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tp.get = function(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp.entries = function(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.entries()\n\t\t}\n\n\t\treturn DraftMap\n\t})(Map)\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tconst DraftSet = (function(_super) {\n\t\t__extends(DraftSet, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftSet(this: any, target: AnySet, parent?: ImmerState) {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyType.Set,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t} as SetState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftSet.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: true,\n\t\t})\n\n\t\tp.has = function(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tp.add = function(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tp.entries = function entries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp.forEach = function forEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\n\t\treturn DraftSet\n\t})(Set)\n\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n","import {enableES5} from \"./es5\"\nimport {enableMapSet} from \"./mapset\"\nimport {enablePatches} from \"./patches\"\n\nexport function enableAllPlugins() {\n\tenableES5()\n\tenableMapSet()\n\tenablePatches()\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n"]},"metadata":{},"sourceType":"script"}