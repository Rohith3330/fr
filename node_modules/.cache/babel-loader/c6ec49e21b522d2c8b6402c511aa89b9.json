{"ast":null,"code":"\"use strict\";\n/**\n * Note this file is rather type-unsafe in its current state.\n * This is due to some really funky type conversions between different node types.\n * This is done intentionally based on the internal implementation of the base indent rule.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment  */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@typescript-eslint/utils\");\n\nconst util = __importStar(require(\"../util\"));\n\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\n\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('indent');\nconst KNOWN_NODES = new Set([// Class properties aren't yet supported by eslint...\nutils_1.AST_NODE_TYPES.PropertyDefinition, // ts keywords\nutils_1.AST_NODE_TYPES.TSAbstractKeyword, utils_1.AST_NODE_TYPES.TSAnyKeyword, utils_1.AST_NODE_TYPES.TSBooleanKeyword, utils_1.AST_NODE_TYPES.TSNeverKeyword, utils_1.AST_NODE_TYPES.TSNumberKeyword, utils_1.AST_NODE_TYPES.TSStringKeyword, utils_1.AST_NODE_TYPES.TSSymbolKeyword, utils_1.AST_NODE_TYPES.TSUndefinedKeyword, utils_1.AST_NODE_TYPES.TSUnknownKeyword, utils_1.AST_NODE_TYPES.TSVoidKeyword, utils_1.AST_NODE_TYPES.TSNullKeyword, // ts specific nodes we want to support\nutils_1.AST_NODE_TYPES.TSAbstractPropertyDefinition, utils_1.AST_NODE_TYPES.TSAbstractMethodDefinition, utils_1.AST_NODE_TYPES.TSArrayType, utils_1.AST_NODE_TYPES.TSAsExpression, utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration, utils_1.AST_NODE_TYPES.TSConditionalType, utils_1.AST_NODE_TYPES.TSConstructorType, utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration, utils_1.AST_NODE_TYPES.TSDeclareFunction, utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, utils_1.AST_NODE_TYPES.TSEnumDeclaration, utils_1.AST_NODE_TYPES.TSEnumMember, utils_1.AST_NODE_TYPES.TSExportAssignment, utils_1.AST_NODE_TYPES.TSExternalModuleReference, utils_1.AST_NODE_TYPES.TSFunctionType, utils_1.AST_NODE_TYPES.TSImportType, utils_1.AST_NODE_TYPES.TSIndexedAccessType, utils_1.AST_NODE_TYPES.TSIndexSignature, utils_1.AST_NODE_TYPES.TSInferType, utils_1.AST_NODE_TYPES.TSInterfaceBody, utils_1.AST_NODE_TYPES.TSInterfaceDeclaration, utils_1.AST_NODE_TYPES.TSInterfaceHeritage, utils_1.AST_NODE_TYPES.TSIntersectionType, utils_1.AST_NODE_TYPES.TSImportEqualsDeclaration, utils_1.AST_NODE_TYPES.TSLiteralType, utils_1.AST_NODE_TYPES.TSMappedType, utils_1.AST_NODE_TYPES.TSMethodSignature, 'TSMinusToken', utils_1.AST_NODE_TYPES.TSModuleBlock, utils_1.AST_NODE_TYPES.TSModuleDeclaration, utils_1.AST_NODE_TYPES.TSNonNullExpression, utils_1.AST_NODE_TYPES.TSParameterProperty, 'TSPlusToken', utils_1.AST_NODE_TYPES.TSPropertySignature, utils_1.AST_NODE_TYPES.TSQualifiedName, 'TSQuestionToken', utils_1.AST_NODE_TYPES.TSRestType, utils_1.AST_NODE_TYPES.TSThisType, utils_1.AST_NODE_TYPES.TSTupleType, utils_1.AST_NODE_TYPES.TSTypeAnnotation, utils_1.AST_NODE_TYPES.TSTypeLiteral, utils_1.AST_NODE_TYPES.TSTypeOperator, utils_1.AST_NODE_TYPES.TSTypeParameter, utils_1.AST_NODE_TYPES.TSTypeParameterDeclaration, utils_1.AST_NODE_TYPES.TSTypeParameterInstantiation, utils_1.AST_NODE_TYPES.TSTypeReference, utils_1.AST_NODE_TYPES.TSUnionType, utils_1.AST_NODE_TYPES.Decorator]);\nexports.default = util.createRule({\n  name: 'indent',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Enforce consistent indentation',\n      // too opinionated to be recommended\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: 'whitespace',\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: baseRule.meta.schema,\n    messages: baseRule.meta.messages\n  },\n  defaultOptions: [// typescript docs and playground use 4 space indent\n  4, {\n    // typescript docs indent the case from the switch\n    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html#example-4\n    SwitchCase: 1,\n    flatTernaryExpressions: false,\n    ignoredNodes: []\n  }],\n\n  create(context, optionsWithDefaults) {\n    // because we extend the base rule, have to update opts on the context\n    // the context defines options as readonly though...\n    const contextWithDefaults = Object.create(context, {\n      options: {\n        writable: false,\n        configurable: false,\n        value: optionsWithDefaults\n      }\n    });\n    const rules = baseRule.create(contextWithDefaults);\n    /**\n     * Converts from a TSPropertySignature to a Property\n     * @param node a TSPropertySignature node\n     * @param [type] the type to give the new node\n     * @returns a Property node\n     */\n\n    function TSPropertySignatureToProperty(node) {\n      let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : utils_1.AST_NODE_TYPES.Property;\n      const base = {\n        // indent doesn't actually use these\n        key: null,\n        value: null,\n        // Property flags\n        computed: false,\n        method: false,\n        kind: 'init',\n        // this will stop eslint from interrogating the type literal\n        shorthand: true,\n        // location data\n        parent: node.parent,\n        range: node.range,\n        loc: node.loc\n      };\n\n      if (type === utils_1.AST_NODE_TYPES.Property) {\n        return Object.assign({\n          type\n        }, base);\n      } else {\n        return Object.assign({\n          type,\n          static: false,\n          readonly: false,\n          declare: false\n        }, base);\n      }\n    }\n\n    return Object.assign({}, rules, {\n      // overwrite the base rule here so we can use our KNOWN_NODES list instead\n      '*:exit'(node) {\n        // For nodes we care about, skip the default handling, because it just marks the node as ignored...\n        if (!KNOWN_NODES.has(node.type)) {\n          rules['*:exit'](node);\n        }\n      },\n\n      VariableDeclaration(node) {\n        // https://github.com/typescript-eslint/typescript-eslint/issues/441\n        if (node.declarations.length === 0) {\n          return;\n        }\n\n        return rules.VariableDeclaration(node);\n      },\n\n      TSAsExpression(node) {\n        // transform it to a BinaryExpression\n        return rules['BinaryExpression, LogicalExpression']({\n          type: utils_1.AST_NODE_TYPES.BinaryExpression,\n          operator: 'as',\n          left: node.expression,\n          // the first typeAnnotation includes the as token\n          right: node.typeAnnotation,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n\n      TSConditionalType(node) {\n        // transform it to a ConditionalExpression\n        return rules.ConditionalExpression({\n          type: utils_1.AST_NODE_TYPES.ConditionalExpression,\n          test: {\n            type: utils_1.AST_NODE_TYPES.BinaryExpression,\n            operator: 'extends',\n            left: node.checkType,\n            right: node.extendsType,\n            // location data\n            range: [node.checkType.range[0], node.extendsType.range[1]],\n            loc: {\n              start: node.checkType.loc.start,\n              end: node.extendsType.loc.end\n            }\n          },\n          consequent: node.trueType,\n          alternate: node.falseType,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n\n      'TSEnumDeclaration, TSTypeLiteral'(node) {\n        // transform it to an ObjectExpression\n        return rules['ObjectExpression, ObjectPattern']({\n          type: utils_1.AST_NODE_TYPES.ObjectExpression,\n          properties: node.members.map(member => TSPropertySignatureToProperty(member)),\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n\n      TSImportEqualsDeclaration(node) {\n        // transform it to an VariableDeclaration\n        // use VariableDeclaration instead of ImportDeclaration because it's essentially the same thing\n        const {\n          id,\n          moduleReference\n        } = node;\n        return rules.VariableDeclaration({\n          type: utils_1.AST_NODE_TYPES.VariableDeclaration,\n          kind: 'const',\n          declarations: [{\n            type: utils_1.AST_NODE_TYPES.VariableDeclarator,\n            range: [id.range[0], moduleReference.range[1]],\n            loc: {\n              start: id.loc.start,\n              end: moduleReference.loc.end\n            },\n            id: id,\n            init: {\n              type: utils_1.AST_NODE_TYPES.CallExpression,\n              callee: {\n                type: utils_1.AST_NODE_TYPES.Identifier,\n                name: 'require',\n                range: [moduleReference.range[0], moduleReference.range[0] + 'require'.length],\n                loc: {\n                  start: moduleReference.loc.start,\n                  end: {\n                    line: moduleReference.loc.end.line,\n                    column: moduleReference.loc.start.line + 'require'.length\n                  }\n                }\n              },\n              arguments: 'expression' in moduleReference ? [moduleReference.expression] : [],\n              // location data\n              range: moduleReference.range,\n              loc: moduleReference.loc\n            }\n          }],\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n\n      TSIndexedAccessType(node) {\n        // convert to a MemberExpression\n        return rules['MemberExpression, JSXMemberExpression, MetaProperty']({\n          type: utils_1.AST_NODE_TYPES.MemberExpression,\n          object: node.objectType,\n          property: node.indexType,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc,\n          optional: false,\n          computed: true\n        });\n      },\n\n      TSInterfaceBody(node) {\n        // transform it to an ClassBody\n        return rules['BlockStatement, ClassBody']({\n          type: utils_1.AST_NODE_TYPES.ClassBody,\n          body: node.body.map(p => TSPropertySignatureToProperty(p, utils_1.AST_NODE_TYPES.PropertyDefinition)),\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n\n      'TSInterfaceDeclaration[extends.length > 0]'(node) {\n        // transform it to a ClassDeclaration\n        return rules['ClassDeclaration[superClass], ClassExpression[superClass]']({\n          type: utils_1.AST_NODE_TYPES.ClassDeclaration,\n          body: node.body,\n          id: null,\n          // TODO: This is invalid, there can be more than one extends in interface\n          superClass: node.extends[0].expression,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n\n      TSMappedType(node) {\n        const sourceCode = context.getSourceCode();\n        const squareBracketStart = sourceCode.getTokenBefore(node.typeParameter); // transform it to an ObjectExpression\n\n        return rules['ObjectExpression, ObjectPattern']({\n          type: utils_1.AST_NODE_TYPES.ObjectExpression,\n          properties: [{\n            type: utils_1.AST_NODE_TYPES.Property,\n            key: node.typeParameter,\n            value: node.typeAnnotation,\n            // location data\n            range: [squareBracketStart.range[0], node.typeAnnotation ? node.typeAnnotation.range[1] : squareBracketStart.range[0]],\n            loc: {\n              start: squareBracketStart.loc.start,\n              end: node.typeAnnotation ? node.typeAnnotation.loc.end : squareBracketStart.loc.end\n            },\n            kind: 'init',\n            computed: false,\n            method: false,\n            shorthand: false\n          }],\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n\n      TSModuleBlock(node) {\n        // transform it to a BlockStatement\n        return rules['BlockStatement, ClassBody']({\n          type: utils_1.AST_NODE_TYPES.BlockStatement,\n          body: node.body,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n\n      TSQualifiedName(node) {\n        return rules['MemberExpression, JSXMemberExpression, MetaProperty']({\n          type: utils_1.AST_NODE_TYPES.MemberExpression,\n          object: node.left,\n          property: node.right,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc,\n          optional: false,\n          computed: false\n        });\n      },\n\n      TSTupleType(node) {\n        // transform it to an ArrayExpression\n        return rules['ArrayExpression, ArrayPattern']({\n          type: utils_1.AST_NODE_TYPES.ArrayExpression,\n          elements: node.elementTypes,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n\n      TSTypeParameterDeclaration(node) {\n        if (!node.params.length) {\n          return;\n        }\n\n        const [name, ...attributes] = node.params; // JSX is about the closest we can get because the angle brackets\n        // it's not perfect but it works!\n\n        return rules.JSXOpeningElement({\n          type: utils_1.AST_NODE_TYPES.JSXOpeningElement,\n          selfClosing: false,\n          name: name,\n          attributes: attributes,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      }\n\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["baseRule","KNOWN_NODES","Set","utils_1","PropertyDefinition","TSAbstractKeyword","TSAnyKeyword","TSBooleanKeyword","TSNeverKeyword","TSNumberKeyword","TSStringKeyword","TSSymbolKeyword","TSUndefinedKeyword","TSUnknownKeyword","TSVoidKeyword","TSNullKeyword","TSAbstractPropertyDefinition","TSAbstractMethodDefinition","TSArrayType","TSAsExpression","TSCallSignatureDeclaration","TSConditionalType","TSConstructorType","TSConstructSignatureDeclaration","TSDeclareFunction","TSEmptyBodyFunctionExpression","TSEnumDeclaration","TSEnumMember","TSExportAssignment","TSExternalModuleReference","TSFunctionType","TSImportType","TSIndexedAccessType","TSIndexSignature","TSInferType","TSInterfaceBody","TSInterfaceDeclaration","TSInterfaceHeritage","TSIntersectionType","TSImportEqualsDeclaration","TSLiteralType","TSMappedType","TSMethodSignature","TSModuleBlock","TSModuleDeclaration","TSNonNullExpression","TSParameterProperty","TSPropertySignature","TSQualifiedName","TSRestType","TSThisType","TSTupleType","TSTypeAnnotation","TSTypeLiteral","TSTypeOperator","TSTypeParameter","TSTypeParameterDeclaration","TSTypeParameterInstantiation","TSTypeReference","TSUnionType","Decorator","exports","util","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","hasSuggestions","schema","messages","defaultOptions","SwitchCase","flatTernaryExpressions","ignoredNodes","create","context","optionsWithDefaults","contextWithDefaults","Object","options","writable","configurable","value","rules","TSPropertySignatureToProperty","node","Property","base","key","computed","method","kind","shorthand","parent","range","loc","static","readonly","declare","assign","has","VariableDeclaration","declarations","length","BinaryExpression","operator","left","expression","right","typeAnnotation","ConditionalExpression","test","checkType","extendsType","start","end","consequent","trueType","alternate","falseType","ObjectExpression","properties","members","map","member","id","moduleReference","VariableDeclarator","init","CallExpression","callee","Identifier","line","column","arguments","MemberExpression","object","objectType","property","indexType","optional","ClassBody","body","p","ClassDeclaration","superClass","extends","sourceCode","getSourceCode","squareBracketStart","getTokenBefore","typeParameter","BlockStatement","ArrayExpression","elements","elementTypes","params","attributes","JSXOpeningElement","selfClosing"],"sources":["../../src/rules/indent.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}