{"ast":null,"code":"import { getRandomBytesAsync } from 'expo-random';\nimport { urlAlphabet } from '../url-alphabet/index.js';\nlet random = getRandomBytesAsync;\n\nlet customAlphabet = function (alphabet) {\n  let defaultSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;\n  let mask = (2 << 31 - Math.clz32(alphabet.length - 1 | 1)) - 1;\n  let step = Math.ceil(1.6 * mask * defaultSize / alphabet.length);\n\n  let tick = function (id) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultSize;\n    return random(step).then(bytes => {\n      let i = step;\n\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || '';\n        if (id.length === size) return id;\n      }\n\n      return tick(id, size);\n    });\n  };\n\n  return size => tick('', size);\n};\n\nlet nanoid = function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  return random(size).then(bytes => {\n    let id = '';\n\n    while (size--) {\n      id += urlAlphabet[bytes[size] & 63];\n    }\n\n    return id;\n  });\n};\n\nexport { nanoid, customAlphabet, random };","map":{"version":3,"names":["getRandomBytesAsync","urlAlphabet","random","customAlphabet","alphabet","defaultSize","mask","Math","clz32","length","step","ceil","tick","id","size","then","bytes","i","nanoid"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/nanoid/async/index.native.js"],"sourcesContent":["import { getRandomBytesAsync } from 'expo-random'\nimport { urlAlphabet } from '../url-alphabet/index.js'\nlet random = getRandomBytesAsync\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  let tick = (id, size = defaultSize) =>\n    random(step).then(bytes => {\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n      return tick(id, size)\n    })\n  return size => tick('', size)\n}\nlet nanoid = (size = 21) =>\n  random(size).then(bytes => {\n    let id = ''\n    while (size--) {\n      id += urlAlphabet[bytes[size] & 63]\n    }\n    return id\n  })\nexport { nanoid, customAlphabet, random }\n"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,aAApC;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,IAAIC,MAAM,GAAGF,mBAAb;;AACA,IAAIG,cAAc,GAAG,UAACC,QAAD,EAAgC;EAAA,IAArBC,WAAqB,uEAAP,EAAO;EACnD,IAAIC,IAAI,GAAG,CAAC,KAAM,KAAKC,IAAI,CAACC,KAAL,CAAYJ,QAAQ,CAACK,MAAT,GAAkB,CAAnB,GAAwB,CAAnC,CAAZ,IAAsD,CAAjE;EACA,IAAIC,IAAI,GAAGH,IAAI,CAACI,IAAL,CAAW,MAAML,IAAN,GAAaD,WAAd,GAA6BD,QAAQ,CAACK,MAAhD,CAAX;;EACA,IAAIG,IAAI,GAAG,UAACC,EAAD;IAAA,IAAKC,IAAL,uEAAYT,WAAZ;IAAA,OACTH,MAAM,CAACQ,IAAD,CAAN,CAAaK,IAAb,CAAkBC,KAAK,IAAI;MACzB,IAAIC,CAAC,GAAGP,IAAR;;MACA,OAAOO,CAAC,EAAR,EAAY;QACVJ,EAAE,IAAIT,QAAQ,CAACY,KAAK,CAACC,CAAD,CAAL,GAAWX,IAAZ,CAAR,IAA6B,EAAnC;QACA,IAAIO,EAAE,CAACJ,MAAH,KAAcK,IAAlB,EAAwB,OAAOD,EAAP;MACzB;;MACD,OAAOD,IAAI,CAACC,EAAD,EAAKC,IAAL,CAAX;IACD,CAPD,CADS;EAAA,CAAX;;EASA,OAAOA,IAAI,IAAIF,IAAI,CAAC,EAAD,EAAKE,IAAL,CAAnB;AACD,CAbD;;AAcA,IAAII,MAAM,GAAG;EAAA,IAACJ,IAAD,uEAAQ,EAAR;EAAA,OACXZ,MAAM,CAACY,IAAD,CAAN,CAAaC,IAAb,CAAkBC,KAAK,IAAI;IACzB,IAAIH,EAAE,GAAG,EAAT;;IACA,OAAOC,IAAI,EAAX,EAAe;MACbD,EAAE,IAAIZ,WAAW,CAACe,KAAK,CAACF,IAAD,CAAL,GAAc,EAAf,CAAjB;IACD;;IACD,OAAOD,EAAP;EACD,CAND,CADW;AAAA,CAAb;;AAQA,SAASK,MAAT,EAAiBf,cAAjB,EAAiCD,MAAjC"},"metadata":{},"sourceType":"module"}