{"ast":null,"code":"let assert = require('assert');\n\nlet h = require('./helpers');\n\nlet exec = require('child_process').execSync;\n\nconst PROJECT_DIR = process.env.PROJECT_DIR;\nconst JAKE_CMD = `${PROJECT_DIR}/bin/cli.js`;\nsuite('taskBase', function () {\n  this.timeout(7000);\n  test('default task', function () {\n    let out;\n    out = exec(`${JAKE_CMD} -q`).toString().trim();\n    assert.equal(out, 'default task');\n    out = exec(`${JAKE_CMD} -q default`).toString().trim();\n    assert.equal(out, 'default task');\n  });\n  test('task with no action', function () {\n    let out = exec(`${JAKE_CMD} -q noAction`).toString().trim();\n    assert.equal(out, 'default task');\n  });\n  test('a task with no action and no prereqs', function () {\n    exec(`${JAKE_CMD} noActionNoPrereqs`);\n  });\n  test('a task that exists at the top-level, and not in the specified namespace, should error', function () {\n    let res = require('child_process').spawnSync(`${JAKE_CMD}`, ['asdfasdfasdf:zerbofrangazoomy']);\n\n    let err = res.stderr.toString();\n    assert.ok(err.indexOf('Unknown task' > -1));\n  });\n  test('passing args to a task', function () {\n    let out = exec(`${JAKE_CMD} -q argsEnvVars[foo,bar]`).toString().trim();\n    let parsed = h.parse(out);\n    let args = parsed.args;\n    assert.equal(args[0], 'foo');\n    assert.equal(args[1], 'bar');\n  });\n  test('a task with environment vars', function () {\n    let out = exec(`${JAKE_CMD} -q argsEnvVars foo=bar baz=qux`).toString().trim();\n    let parsed = h.parse(out);\n    let env = parsed.env;\n    assert.equal(env.foo, 'bar');\n    assert.equal(env.baz, 'qux');\n  });\n  test('passing args and using environment vars', function () {\n    let out = exec(`${JAKE_CMD} -q argsEnvVars[foo,bar] foo=bar baz=qux`).toString().trim();\n    let parsed = h.parse(out);\n    let args = parsed.args;\n    let env = parsed.env;\n    assert.equal(args[0], 'foo');\n    assert.equal(args[1], 'bar');\n    assert.equal(env.foo, 'bar');\n    assert.equal(env.baz, 'qux');\n  });\n  test('a simple prereq', function () {\n    let out = exec(`${JAKE_CMD} -q foo:baz`).toString().trim();\n    assert.equal(out, 'foo:bar task\\nfoo:baz task');\n  });\n  test('a duplicate prereq only runs once', function () {\n    let out = exec(`${JAKE_CMD} -q foo:asdf`).toString().trim();\n    assert.equal(out, 'foo:bar task\\nfoo:baz task\\nfoo:asdf task');\n  });\n  test('a prereq with command-line args', function () {\n    let out = exec(`${JAKE_CMD} -q foo:qux`).toString().trim();\n    assert.equal(out, 'foo:bar[asdf,qwer] task\\nfoo:qux task');\n  });\n  test('a prereq with args via invoke', function () {\n    let out = exec(`${JAKE_CMD} -q foo:frang[zxcv,uiop]`).toString().trim();\n    assert.equal(out, 'foo:bar[zxcv,uiop] task\\nfoo:frang task');\n  });\n  test('a prereq with args via execute', function () {\n    let out = exec(`${JAKE_CMD} -q foo:zerb[zxcv,uiop]`).toString().trim();\n    assert.equal(out, 'foo:bar[zxcv,uiop] task\\nfoo:zerb task');\n  });\n  test('repeating the task via execute', function () {\n    let out = exec(`${JAKE_CMD} -q foo:voom`).toString().trim();\n    assert.equal(out, 'foo:bar task\\nfoo:bar task\\ncomplete\\ncomplete');\n  });\n  test('prereq execution-order', function () {\n    let out = exec(`${JAKE_CMD} -q hoge:fuga`).toString().trim();\n    assert.equal(out, 'hoge:hoge task\\nhoge:piyo task\\nhoge:fuga task');\n  });\n  test('basic async task', function () {\n    let out = exec(`${JAKE_CMD} -q bar:bar`).toString().trim();\n    assert.equal(out, 'bar:foo task\\nbar:bar task');\n  });\n  test('promise async task', function () {\n    let out = exec(`${JAKE_CMD} -q bar:dependOnpromise`).toString().trim();\n    assert.equal(out, 'bar:promise task\\nbar:dependOnpromise task saw value 123654');\n  });\n  test('failing promise async task', function () {\n    try {\n      exec(`${JAKE_CMD} -q bar:brokenPromise`);\n    } catch (e) {\n      assert(e.message.indexOf('Command failed') > -1);\n    }\n  });\n  test('that current-prereq index gets reset', function () {\n    let out = exec(`${JAKE_CMD} -q hoge:kira`).toString().trim();\n    assert.equal(out, 'hoge:hoge task\\nhoge:piyo task\\nhoge:fuga task\\n' + 'hoge:charan task\\nhoge:gero task\\nhoge:kira task');\n  });\n  test('modifying a task by adding prereq during execution', function () {\n    let out = exec(`${JAKE_CMD} -q voom`).toString().trim();\n    assert.equal(out, 2);\n  });\n  test('listening for task error-event', function () {\n    try {\n      exec(`${JAKE_CMD} -q vronk:groo`).toString().trim();\n    } catch (e) {\n      assert(e.message.indexOf('OMFGZONG') > -1);\n    }\n  });\n  test('listening for jake error-event', function () {\n    let out = exec(`${JAKE_CMD} -q throwy`).toString().trim();\n    assert(out.indexOf('Emitted\\nError: I am bad') > -1);\n  });\n  test('listening for jake unhandledRejection-event', function () {\n    let out = exec(`${JAKE_CMD} -q promiseRejecter`).toString().trim();\n    assert.equal(out, '<promise rejected on purpose>');\n  });\n  test('large number of same prereqs', function () {\n    let out = exec(`${JAKE_CMD} -q large:same`).toString().trim();\n    assert.equal(out, 'large:leaf\\nlarge:same');\n  });\n  test('large number of different prereqs', function () {\n    let out = exec(`${JAKE_CMD} -q large:different`).toString().trim();\n    assert.equal(out, 'leaf-12\\nleaf-123\\nlarge:different');\n  });\n  test('large number of different prereqs', function () {\n    let out = exec(`${JAKE_CMD} -q usingRequire:test`).toString().trim();\n    assert.equal(out, 'howdy test');\n  });\n  test('modifying a namespace by adding a new task', function () {\n    let out = exec(`${JAKE_CMD} -q one:two`).toString().trim();\n    assert.equal('one:one\\none:two', out);\n  });\n});","map":{"version":3,"names":["assert","require","h","exec","execSync","PROJECT_DIR","process","env","JAKE_CMD","suite","timeout","test","out","toString","trim","equal","res","spawnSync","err","stderr","ok","indexOf","parsed","parse","args","foo","baz","e","message"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/jake/test/integration/task_base.js"],"sourcesContent":["let assert = require('assert');\nlet h = require('./helpers');\nlet exec = require('child_process').execSync;\n\nconst PROJECT_DIR = process.env.PROJECT_DIR;\nconst JAKE_CMD = `${PROJECT_DIR}/bin/cli.js`;\n\nsuite('taskBase', function () {\n\n  this.timeout(7000);\n\n  test('default task', function () {\n    let out;\n    out = exec(`${JAKE_CMD} -q`).toString().trim();\n    assert.equal(out, 'default task');\n    out = exec(`${JAKE_CMD} -q default`).toString().trim();\n    assert.equal(out, 'default task');\n  });\n\n  test('task with no action', function () {\n    let out = exec(`${JAKE_CMD} -q noAction`).toString().trim();\n    assert.equal(out, 'default task');\n  });\n\n  test('a task with no action and no prereqs', function () {\n    exec(`${JAKE_CMD} noActionNoPrereqs`);\n  });\n\n  test('a task that exists at the top-level, and not in the specified namespace, should error', function () {\n    let res = require('child_process').spawnSync(`${JAKE_CMD}`,\n      ['asdfasdfasdf:zerbofrangazoomy']);\n    let err = res.stderr.toString();\n    assert.ok(err.indexOf('Unknown task' > -1));\n  });\n\n  test('passing args to a task', function () {\n    let out = exec(`${JAKE_CMD} -q argsEnvVars[foo,bar]`).toString().trim();\n    let parsed = h.parse(out);\n    let args = parsed.args;\n    assert.equal(args[0], 'foo');\n    assert.equal(args[1], 'bar');\n  });\n\n  test('a task with environment vars', function () {\n    let out = exec(`${JAKE_CMD} -q argsEnvVars foo=bar baz=qux`).toString().trim();\n    let parsed = h.parse(out);\n    let env = parsed.env;\n    assert.equal(env.foo, 'bar');\n    assert.equal(env.baz, 'qux');\n  });\n\n  test('passing args and using environment vars', function () {\n    let out = exec(`${JAKE_CMD} -q argsEnvVars[foo,bar] foo=bar baz=qux`).toString().trim();\n    let parsed = h.parse(out);\n    let args = parsed.args;\n    let env = parsed.env;\n    assert.equal(args[0], 'foo');\n    assert.equal(args[1], 'bar');\n    assert.equal(env.foo, 'bar');\n    assert.equal(env.baz, 'qux');\n  });\n\n  test('a simple prereq', function () {\n    let out = exec(`${JAKE_CMD} -q foo:baz`).toString().trim();\n    assert.equal(out, 'foo:bar task\\nfoo:baz task');\n  });\n\n  test('a duplicate prereq only runs once', function () {\n    let out = exec(`${JAKE_CMD} -q foo:asdf`).toString().trim();\n    assert.equal(out, 'foo:bar task\\nfoo:baz task\\nfoo:asdf task');\n  });\n\n  test('a prereq with command-line args', function () {\n    let out = exec(`${JAKE_CMD} -q foo:qux`).toString().trim();\n    assert.equal(out, 'foo:bar[asdf,qwer] task\\nfoo:qux task');\n  });\n\n  test('a prereq with args via invoke', function () {\n    let out = exec(`${JAKE_CMD} -q foo:frang[zxcv,uiop]`).toString().trim();\n    assert.equal(out, 'foo:bar[zxcv,uiop] task\\nfoo:frang task');\n  });\n\n  test('a prereq with args via execute', function () {\n    let out = exec(`${JAKE_CMD} -q foo:zerb[zxcv,uiop]`).toString().trim();\n    assert.equal(out, 'foo:bar[zxcv,uiop] task\\nfoo:zerb task');\n  });\n\n  test('repeating the task via execute', function () {\n    let out = exec(`${JAKE_CMD} -q foo:voom`).toString().trim();\n    assert.equal(out, 'foo:bar task\\nfoo:bar task\\ncomplete\\ncomplete');\n  });\n\n  test('prereq execution-order', function () {\n    let out = exec(`${JAKE_CMD} -q hoge:fuga`).toString().trim();\n    assert.equal(out, 'hoge:hoge task\\nhoge:piyo task\\nhoge:fuga task');\n  });\n\n  test('basic async task', function () {\n    let out = exec(`${JAKE_CMD} -q bar:bar`).toString().trim();\n    assert.equal(out, 'bar:foo task\\nbar:bar task');\n  });\n\n  test('promise async task', function () {\n    let out = exec(`${JAKE_CMD} -q bar:dependOnpromise`).toString().trim();\n    assert.equal(out, 'bar:promise task\\nbar:dependOnpromise task saw value 123654');\n  });\n\n  test('failing promise async task', function () {\n    try {\n      exec(`${JAKE_CMD} -q bar:brokenPromise`);\n    }\n    catch(e) {\n      assert(e.message.indexOf('Command failed') > -1);\n    }\n  });\n\n  test('that current-prereq index gets reset', function () {\n    let out = exec(`${JAKE_CMD} -q hoge:kira`).toString().trim();\n    assert.equal(out, 'hoge:hoge task\\nhoge:piyo task\\nhoge:fuga task\\n' +\n        'hoge:charan task\\nhoge:gero task\\nhoge:kira task');\n  });\n\n  test('modifying a task by adding prereq during execution', function () {\n    let out = exec(`${JAKE_CMD} -q voom`).toString().trim();\n    assert.equal(out, 2);\n  });\n\n  test('listening for task error-event', function () {\n    try {\n      exec(`${JAKE_CMD} -q vronk:groo`).toString().trim();\n    }\n    catch(e) {\n      assert(e.message.indexOf('OMFGZONG') > -1);\n    }\n  });\n\n  test('listening for jake error-event', function () {\n    let out = exec(`${JAKE_CMD} -q throwy`).toString().trim();\n    assert(out.indexOf('Emitted\\nError: I am bad') > -1);\n  });\n\n  test('listening for jake unhandledRejection-event', function () {\n    let out = exec(`${JAKE_CMD} -q promiseRejecter`).toString().trim();\n    assert.equal(out, '<promise rejected on purpose>');\n  });\n\n  test('large number of same prereqs', function () {\n    let out = exec(`${JAKE_CMD} -q large:same`).toString().trim();\n    assert.equal(out, 'large:leaf\\nlarge:same');\n  });\n\n  test('large number of different prereqs', function () {\n    let out = exec(`${JAKE_CMD} -q large:different`).toString().trim();\n    assert.equal(out, 'leaf-12\\nleaf-123\\nlarge:different');\n  });\n\n  test('large number of different prereqs', function () {\n    let out = exec(`${JAKE_CMD} -q usingRequire:test`).toString().trim();\n    assert.equal(out, 'howdy test');\n  });\n\n  test('modifying a namespace by adding a new task', function () {\n    let out = exec(`${JAKE_CMD} -q one:two`).toString().trim();\n    assert.equal('one:one\\none:two', out);\n  });\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}