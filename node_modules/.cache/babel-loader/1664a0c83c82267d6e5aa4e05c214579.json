{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\n\nvar regexTester = require('../helpers/regexTester');\n\nvar every = require('../helpers/every');\n\nvar $charAt = callBound('String.prototype.charAt');\nvar $strSlice = callBound('String.prototype.slice');\nvar $indexOf = callBound('String.prototype.indexOf');\nvar $parseInt = parseInt;\nvar isDigit = regexTester(/^[0-9]$/);\n\nvar inspect = require('object-inspect');\n\nvar Get = require('./Get');\n\nvar IsArray = require('./IsArray');\n\nvar IsInteger = require('./IsInteger');\n\nvar ToObject = require('./ToObject');\n\nvar ToString = require('./ToString');\n\nvar Type = require('./Type');\n\nvar canDistinguishSparseFromUndefined = (0 in [undefined]); // IE 6 - 8 have a bug where this returns false\n\nvar isStringOrHole = function (capture, index, arr) {\n  return Type(capture) === 'String' || (canDistinguishSparseFromUndefined ? !(index in arr) : Type(capture) === 'Undefined');\n}; // http://262.ecma-international.org/9.0/#sec-getsubstitution\n// eslint-disable-next-line max-statements, max-params, max-lines-per-function\n\n\nmodule.exports = function GetSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n  if (Type(matched) !== 'String') {\n    throw new $TypeError('Assertion failed: `matched` must be a String');\n  }\n\n  var matchLength = matched.length;\n\n  if (Type(str) !== 'String') {\n    throw new $TypeError('Assertion failed: `str` must be a String');\n  }\n\n  var stringLength = str.length;\n\n  if (!IsInteger(position) || position < 0 || position > stringLength) {\n    throw new $TypeError('Assertion failed: `position` must be a nonnegative integer, and less than or equal to the length of `string`, got ' + inspect(position));\n  }\n\n  if (!IsArray(captures) || !every(captures, isStringOrHole)) {\n    throw new $TypeError('Assertion failed: `captures` must be a List of Strings, got ' + inspect(captures));\n  }\n\n  if (Type(replacement) !== 'String') {\n    throw new $TypeError('Assertion failed: `replacement` must be a String');\n  }\n\n  var tailPos = position + matchLength;\n  var m = captures.length;\n\n  if (Type(namedCaptures) !== 'Undefined') {\n    namedCaptures = ToObject(namedCaptures); // eslint-disable-line no-param-reassign\n  }\n\n  var result = '';\n\n  for (var i = 0; i < replacement.length; i += 1) {\n    // if this is a $, and it's not the end of the replacement\n    var current = $charAt(replacement, i);\n    var isLast = i + 1 >= replacement.length;\n    var nextIsLast = i + 2 >= replacement.length;\n\n    if (current === '$' && !isLast) {\n      var next = $charAt(replacement, i + 1);\n\n      if (next === '$') {\n        result += '$';\n        i += 1;\n      } else if (next === '&') {\n        result += matched;\n        i += 1;\n      } else if (next === '`') {\n        result += position === 0 ? '' : $strSlice(str, 0, position - 1);\n        i += 1;\n      } else if (next === \"'\") {\n        result += tailPos >= stringLength ? '' : $strSlice(str, tailPos);\n        i += 1;\n      } else {\n        var nextNext = nextIsLast ? null : $charAt(replacement, i + 2);\n\n        if (isDigit(next) && next !== '0' && (nextIsLast || !isDigit(nextNext))) {\n          // $1 through $9, and not followed by a digit\n          var n = $parseInt(next, 10); // if (n > m, impl-defined)\n\n          result += n <= m && Type(captures[n - 1]) === 'Undefined' ? '' : captures[n - 1];\n          i += 1;\n        } else if (isDigit(next) && (nextIsLast || isDigit(nextNext))) {\n          // $00 through $99\n          var nn = next + nextNext;\n          var nnI = $parseInt(nn, 10) - 1; // if nn === '00' or nn > m, impl-defined\n\n          result += nn <= m && Type(captures[nnI]) === 'Undefined' ? '' : captures[nnI];\n          i += 2;\n        } else if (next === '<') {\n          // eslint-disable-next-line max-depth\n          if (Type(namedCaptures) === 'Undefined') {\n            result += '$<';\n            i += 2;\n          } else {\n            var endIndex = $indexOf(replacement, '>', i); // eslint-disable-next-line max-depth\n\n            if (endIndex > -1) {\n              var groupName = $strSlice(replacement, i + '$<'.length, endIndex);\n              var capture = Get(namedCaptures, groupName); // eslint-disable-next-line max-depth\n\n              if (Type(capture) !== 'Undefined') {\n                result += ToString(capture);\n              }\n\n              i += ('<' + groupName + '>').length;\n            }\n          }\n        } else {\n          result += '$';\n        }\n      }\n    } else {\n      // the final $, or else not a $\n      result += $charAt(replacement, i);\n    }\n  }\n\n  return result;\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","callBound","regexTester","every","$charAt","$strSlice","$indexOf","$parseInt","parseInt","isDigit","inspect","Get","IsArray","IsInteger","ToObject","ToString","Type","canDistinguishSparseFromUndefined","undefined","isStringOrHole","capture","index","arr","module","exports","GetSubstitution","matched","str","position","captures","namedCaptures","replacement","matchLength","length","stringLength","tailPos","m","result","i","current","isLast","nextIsLast","next","nextNext","n","nn","nnI","endIndex","groupName"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/es-abstract/2020/GetSubstitution.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\nvar regexTester = require('../helpers/regexTester');\nvar every = require('../helpers/every');\n\nvar $charAt = callBound('String.prototype.charAt');\nvar $strSlice = callBound('String.prototype.slice');\nvar $indexOf = callBound('String.prototype.indexOf');\nvar $parseInt = parseInt;\n\nvar isDigit = regexTester(/^[0-9]$/);\n\nvar inspect = require('object-inspect');\n\nvar Get = require('./Get');\nvar IsArray = require('./IsArray');\nvar IsInteger = require('./IsInteger');\nvar ToObject = require('./ToObject');\nvar ToString = require('./ToString');\nvar Type = require('./Type');\n\nvar canDistinguishSparseFromUndefined = 0 in [undefined]; // IE 6 - 8 have a bug where this returns false\n\nvar isStringOrHole = function (capture, index, arr) {\n\treturn Type(capture) === 'String' || (canDistinguishSparseFromUndefined ? !(index in arr) : Type(capture) === 'Undefined');\n};\n\n// http://262.ecma-international.org/9.0/#sec-getsubstitution\n\n// eslint-disable-next-line max-statements, max-params, max-lines-per-function\nmodule.exports = function GetSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n\tif (Type(matched) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `matched` must be a String');\n\t}\n\tvar matchLength = matched.length;\n\n\tif (Type(str) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `str` must be a String');\n\t}\n\tvar stringLength = str.length;\n\n\tif (!IsInteger(position) || position < 0 || position > stringLength) {\n\t\tthrow new $TypeError('Assertion failed: `position` must be a nonnegative integer, and less than or equal to the length of `string`, got ' + inspect(position));\n\t}\n\n\tif (!IsArray(captures) || !every(captures, isStringOrHole)) {\n\t\tthrow new $TypeError('Assertion failed: `captures` must be a List of Strings, got ' + inspect(captures));\n\t}\n\n\tif (Type(replacement) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `replacement` must be a String');\n\t}\n\n\tvar tailPos = position + matchLength;\n\tvar m = captures.length;\n\tif (Type(namedCaptures) !== 'Undefined') {\n\t\tnamedCaptures = ToObject(namedCaptures); // eslint-disable-line no-param-reassign\n\t}\n\n\tvar result = '';\n\tfor (var i = 0; i < replacement.length; i += 1) {\n\t\t// if this is a $, and it's not the end of the replacement\n\t\tvar current = $charAt(replacement, i);\n\t\tvar isLast = (i + 1) >= replacement.length;\n\t\tvar nextIsLast = (i + 2) >= replacement.length;\n\t\tif (current === '$' && !isLast) {\n\t\t\tvar next = $charAt(replacement, i + 1);\n\t\t\tif (next === '$') {\n\t\t\t\tresult += '$';\n\t\t\t\ti += 1;\n\t\t\t} else if (next === '&') {\n\t\t\t\tresult += matched;\n\t\t\t\ti += 1;\n\t\t\t} else if (next === '`') {\n\t\t\t\tresult += position === 0 ? '' : $strSlice(str, 0, position - 1);\n\t\t\t\ti += 1;\n\t\t\t} else if (next === \"'\") {\n\t\t\t\tresult += tailPos >= stringLength ? '' : $strSlice(str, tailPos);\n\t\t\t\ti += 1;\n\t\t\t} else {\n\t\t\t\tvar nextNext = nextIsLast ? null : $charAt(replacement, i + 2);\n\t\t\t\tif (isDigit(next) && next !== '0' && (nextIsLast || !isDigit(nextNext))) {\n\t\t\t\t\t// $1 through $9, and not followed by a digit\n\t\t\t\t\tvar n = $parseInt(next, 10);\n\t\t\t\t\t// if (n > m, impl-defined)\n\t\t\t\t\tresult += n <= m && Type(captures[n - 1]) === 'Undefined' ? '' : captures[n - 1];\n\t\t\t\t\ti += 1;\n\t\t\t\t} else if (isDigit(next) && (nextIsLast || isDigit(nextNext))) {\n\t\t\t\t\t// $00 through $99\n\t\t\t\t\tvar nn = next + nextNext;\n\t\t\t\t\tvar nnI = $parseInt(nn, 10) - 1;\n\t\t\t\t\t// if nn === '00' or nn > m, impl-defined\n\t\t\t\t\tresult += nn <= m && Type(captures[nnI]) === 'Undefined' ? '' : captures[nnI];\n\t\t\t\t\ti += 2;\n\t\t\t\t} else if (next === '<') {\n\t\t\t\t\t// eslint-disable-next-line max-depth\n\t\t\t\t\tif (Type(namedCaptures) === 'Undefined') {\n\t\t\t\t\t\tresult += '$<';\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar endIndex = $indexOf(replacement, '>', i);\n\t\t\t\t\t\t// eslint-disable-next-line max-depth\n\t\t\t\t\t\tif (endIndex > -1) {\n\t\t\t\t\t\t\tvar groupName = $strSlice(replacement, i + '$<'.length, endIndex);\n\t\t\t\t\t\t\tvar capture = Get(namedCaptures, groupName);\n\t\t\t\t\t\t\t// eslint-disable-next-line max-depth\n\t\t\t\t\t\t\tif (Type(capture) !== 'Undefined') {\n\t\t\t\t\t\t\t\tresult += ToString(capture);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti += ('<' + groupName + '>').length;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult += '$';\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// the final $, or else not a $\n\t\t\tresult += $charAt(replacement, i);\n\t\t}\n\t}\n\treturn result;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,wBAAD,CAAzB;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,kBAAD,CAAnB;;AAEA,IAAIK,OAAO,GAAGH,SAAS,CAAC,yBAAD,CAAvB;AACA,IAAII,SAAS,GAAGJ,SAAS,CAAC,wBAAD,CAAzB;AACA,IAAIK,QAAQ,GAAGL,SAAS,CAAC,0BAAD,CAAxB;AACA,IAAIM,SAAS,GAAGC,QAAhB;AAEA,IAAIC,OAAO,GAAGP,WAAW,CAAC,SAAD,CAAzB;;AAEA,IAAIQ,OAAO,GAAGX,OAAO,CAAC,gBAAD,CAArB;;AAEA,IAAIY,GAAG,GAAGZ,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIa,OAAO,GAAGb,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIc,SAAS,GAAGd,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIe,QAAQ,GAAGf,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIgB,QAAQ,GAAGhB,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIiB,IAAI,GAAGjB,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIkB,iCAAiC,IAAG,KAAK,CAACC,SAAD,CAAR,CAArC,C,CAA0D;;AAE1D,IAAIC,cAAc,GAAG,UAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,GAA1B,EAA+B;EACnD,OAAON,IAAI,CAACI,OAAD,CAAJ,KAAkB,QAAlB,KAA+BH,iCAAiC,GAAG,EAAEI,KAAK,IAAIC,GAAX,CAAH,GAAqBN,IAAI,CAACI,OAAD,CAAJ,KAAkB,WAAvG,CAAP;AACA,CAFD,C,CAIA;AAEA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,GAAlC,EAAuCC,QAAvC,EAAiDC,QAAjD,EAA2DC,aAA3D,EAA0EC,WAA1E,EAAuF;EACvG,IAAIf,IAAI,CAACU,OAAD,CAAJ,KAAkB,QAAtB,EAAgC;IAC/B,MAAM,IAAI1B,UAAJ,CAAe,8CAAf,CAAN;EACA;;EACD,IAAIgC,WAAW,GAAGN,OAAO,CAACO,MAA1B;;EAEA,IAAIjB,IAAI,CAACW,GAAD,CAAJ,KAAc,QAAlB,EAA4B;IAC3B,MAAM,IAAI3B,UAAJ,CAAe,0CAAf,CAAN;EACA;;EACD,IAAIkC,YAAY,GAAGP,GAAG,CAACM,MAAvB;;EAEA,IAAI,CAACpB,SAAS,CAACe,QAAD,CAAV,IAAwBA,QAAQ,GAAG,CAAnC,IAAwCA,QAAQ,GAAGM,YAAvD,EAAqE;IACpE,MAAM,IAAIlC,UAAJ,CAAe,uHAAuHU,OAAO,CAACkB,QAAD,CAA7I,CAAN;EACA;;EAED,IAAI,CAAChB,OAAO,CAACiB,QAAD,CAAR,IAAsB,CAAC1B,KAAK,CAAC0B,QAAD,EAAWV,cAAX,CAAhC,EAA4D;IAC3D,MAAM,IAAInB,UAAJ,CAAe,iEAAiEU,OAAO,CAACmB,QAAD,CAAvF,CAAN;EACA;;EAED,IAAIb,IAAI,CAACe,WAAD,CAAJ,KAAsB,QAA1B,EAAoC;IACnC,MAAM,IAAI/B,UAAJ,CAAe,kDAAf,CAAN;EACA;;EAED,IAAImC,OAAO,GAAGP,QAAQ,GAAGI,WAAzB;EACA,IAAII,CAAC,GAAGP,QAAQ,CAACI,MAAjB;;EACA,IAAIjB,IAAI,CAACc,aAAD,CAAJ,KAAwB,WAA5B,EAAyC;IACxCA,aAAa,GAAGhB,QAAQ,CAACgB,aAAD,CAAxB,CADwC,CACC;EACzC;;EAED,IAAIO,MAAM,GAAG,EAAb;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,WAAW,CAACE,MAAhC,EAAwCK,CAAC,IAAI,CAA7C,EAAgD;IAC/C;IACA,IAAIC,OAAO,GAAGnC,OAAO,CAAC2B,WAAD,EAAcO,CAAd,CAArB;IACA,IAAIE,MAAM,GAAIF,CAAC,GAAG,CAAL,IAAWP,WAAW,CAACE,MAApC;IACA,IAAIQ,UAAU,GAAIH,CAAC,GAAG,CAAL,IAAWP,WAAW,CAACE,MAAxC;;IACA,IAAIM,OAAO,KAAK,GAAZ,IAAmB,CAACC,MAAxB,EAAgC;MAC/B,IAAIE,IAAI,GAAGtC,OAAO,CAAC2B,WAAD,EAAcO,CAAC,GAAG,CAAlB,CAAlB;;MACA,IAAII,IAAI,KAAK,GAAb,EAAkB;QACjBL,MAAM,IAAI,GAAV;QACAC,CAAC,IAAI,CAAL;MACA,CAHD,MAGO,IAAII,IAAI,KAAK,GAAb,EAAkB;QACxBL,MAAM,IAAIX,OAAV;QACAY,CAAC,IAAI,CAAL;MACA,CAHM,MAGA,IAAII,IAAI,KAAK,GAAb,EAAkB;QACxBL,MAAM,IAAIT,QAAQ,KAAK,CAAb,GAAiB,EAAjB,GAAsBvB,SAAS,CAACsB,GAAD,EAAM,CAAN,EAASC,QAAQ,GAAG,CAApB,CAAzC;QACAU,CAAC,IAAI,CAAL;MACA,CAHM,MAGA,IAAII,IAAI,KAAK,GAAb,EAAkB;QACxBL,MAAM,IAAIF,OAAO,IAAID,YAAX,GAA0B,EAA1B,GAA+B7B,SAAS,CAACsB,GAAD,EAAMQ,OAAN,CAAlD;QACAG,CAAC,IAAI,CAAL;MACA,CAHM,MAGA;QACN,IAAIK,QAAQ,GAAGF,UAAU,GAAG,IAAH,GAAUrC,OAAO,CAAC2B,WAAD,EAAcO,CAAC,GAAG,CAAlB,CAA1C;;QACA,IAAI7B,OAAO,CAACiC,IAAD,CAAP,IAAiBA,IAAI,KAAK,GAA1B,KAAkCD,UAAU,IAAI,CAAChC,OAAO,CAACkC,QAAD,CAAxD,CAAJ,EAAyE;UACxE;UACA,IAAIC,CAAC,GAAGrC,SAAS,CAACmC,IAAD,EAAO,EAAP,CAAjB,CAFwE,CAGxE;;UACAL,MAAM,IAAIO,CAAC,IAAIR,CAAL,IAAUpB,IAAI,CAACa,QAAQ,CAACe,CAAC,GAAG,CAAL,CAAT,CAAJ,KAA0B,WAApC,GAAkD,EAAlD,GAAuDf,QAAQ,CAACe,CAAC,GAAG,CAAL,CAAzE;UACAN,CAAC,IAAI,CAAL;QACA,CAND,MAMO,IAAI7B,OAAO,CAACiC,IAAD,CAAP,KAAkBD,UAAU,IAAIhC,OAAO,CAACkC,QAAD,CAAvC,CAAJ,EAAwD;UAC9D;UACA,IAAIE,EAAE,GAAGH,IAAI,GAAGC,QAAhB;UACA,IAAIG,GAAG,GAAGvC,SAAS,CAACsC,EAAD,EAAK,EAAL,CAAT,GAAoB,CAA9B,CAH8D,CAI9D;;UACAR,MAAM,IAAIQ,EAAE,IAAIT,CAAN,IAAWpB,IAAI,CAACa,QAAQ,CAACiB,GAAD,CAAT,CAAJ,KAAwB,WAAnC,GAAiD,EAAjD,GAAsDjB,QAAQ,CAACiB,GAAD,CAAxE;UACAR,CAAC,IAAI,CAAL;QACA,CAPM,MAOA,IAAII,IAAI,KAAK,GAAb,EAAkB;UACxB;UACA,IAAI1B,IAAI,CAACc,aAAD,CAAJ,KAAwB,WAA5B,EAAyC;YACxCO,MAAM,IAAI,IAAV;YACAC,CAAC,IAAI,CAAL;UACA,CAHD,MAGO;YACN,IAAIS,QAAQ,GAAGzC,QAAQ,CAACyB,WAAD,EAAc,GAAd,EAAmBO,CAAnB,CAAvB,CADM,CAEN;;YACA,IAAIS,QAAQ,GAAG,CAAC,CAAhB,EAAmB;cAClB,IAAIC,SAAS,GAAG3C,SAAS,CAAC0B,WAAD,EAAcO,CAAC,GAAG,KAAKL,MAAvB,EAA+Bc,QAA/B,CAAzB;cACA,IAAI3B,OAAO,GAAGT,GAAG,CAACmB,aAAD,EAAgBkB,SAAhB,CAAjB,CAFkB,CAGlB;;cACA,IAAIhC,IAAI,CAACI,OAAD,CAAJ,KAAkB,WAAtB,EAAmC;gBAClCiB,MAAM,IAAItB,QAAQ,CAACK,OAAD,CAAlB;cACA;;cACDkB,CAAC,IAAI,CAAC,MAAMU,SAAN,GAAkB,GAAnB,EAAwBf,MAA7B;YACA;UACD;QACD,CAlBM,MAkBA;UACNI,MAAM,IAAI,GAAV;QACA;MACD;IACD,CAnDD,MAmDO;MACN;MACAA,MAAM,IAAIjC,OAAO,CAAC2B,WAAD,EAAcO,CAAd,CAAjB;IACA;EACD;;EACD,OAAOD,MAAP;AACA,CA5FD"},"metadata":{},"sourceType":"script"}