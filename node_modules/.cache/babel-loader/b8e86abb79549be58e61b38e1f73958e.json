{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst getBody = args => {\n  const [, secondArg] = args;\n\n  if (secondArg && (0, _utils.isFunction)(secondArg) && secondArg.body.type === _experimentalUtils.AST_NODE_TYPES.BlockStatement) {\n    return secondArg.body.body;\n  }\n\n  return [];\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow explicitly returning from tests',\n      recommended: false\n    },\n    messages: {\n      noReturnValue: 'Jest tests should not return a value.'\n    },\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isTestCaseCall)(node)) return;\n        const body = getBody(node.arguments);\n        const returnStmt = body.find(t => t.type === _experimentalUtils.AST_NODE_TYPES.ReturnStatement);\n        if (!returnStmt) return;\n        context.report({\n          messageId: 'noReturnValue',\n          node: returnStmt\n        });\n      },\n\n      FunctionDeclaration(node) {\n        const declaredVariables = context.getDeclaredVariables(node);\n        const testCallExpressions = (0, _utils.getTestCallExpressionsFromDeclaredVariables)(declaredVariables);\n        if (testCallExpressions.length === 0) return;\n        const returnStmt = node.body.body.find(t => t.type === _experimentalUtils.AST_NODE_TYPES.ReturnStatement);\n        if (!returnStmt) return;\n        context.report({\n          messageId: 'noReturnValue',\n          node: returnStmt\n        });\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_experimentalUtils","require","_utils","getBody","args","secondArg","isFunction","body","type","AST_NODE_TYPES","BlockStatement","_default","createRule","name","__filename","meta","docs","category","description","recommended","messages","noReturnValue","schema","defaultOptions","create","context","CallExpression","node","isTestCaseCall","arguments","returnStmt","find","t","ReturnStatement","report","messageId","FunctionDeclaration","declaredVariables","getDeclaredVariables","testCallExpressions","getTestCallExpressionsFromDeclaredVariables","length"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/eslint-plugin-jest/lib/rules/no-test-return-statement.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _experimentalUtils = require(\"@typescript-eslint/experimental-utils\");\n\nvar _utils = require(\"./utils\");\n\nconst getBody = args => {\n  const [, secondArg] = args;\n\n  if (secondArg && (0, _utils.isFunction)(secondArg) && secondArg.body.type === _experimentalUtils.AST_NODE_TYPES.BlockStatement) {\n    return secondArg.body.body;\n  }\n\n  return [];\n};\n\nvar _default = (0, _utils.createRule)({\n  name: __filename,\n  meta: {\n    docs: {\n      category: 'Best Practices',\n      description: 'Disallow explicitly returning from tests',\n      recommended: false\n    },\n    messages: {\n      noReturnValue: 'Jest tests should not return a value.'\n    },\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        if (!(0, _utils.isTestCaseCall)(node)) return;\n        const body = getBody(node.arguments);\n        const returnStmt = body.find(t => t.type === _experimentalUtils.AST_NODE_TYPES.ReturnStatement);\n        if (!returnStmt) return;\n        context.report({\n          messageId: 'noReturnValue',\n          node: returnStmt\n        });\n      },\n\n      FunctionDeclaration(node) {\n        const declaredVariables = context.getDeclaredVariables(node);\n        const testCallExpressions = (0, _utils.getTestCallExpressionsFromDeclaredVariables)(declaredVariables);\n        if (testCallExpressions.length === 0) return;\n        const returnStmt = node.body.body.find(t => t.type === _experimentalUtils.AST_NODE_TYPES.ReturnStatement);\n        if (!returnStmt) return;\n        context.report({\n          messageId: 'noReturnValue',\n          node: returnStmt\n        });\n      }\n\n    };\n  }\n\n});\n\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,uCAAD,CAAhC;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,MAAME,OAAO,GAAGC,IAAI,IAAI;EACtB,MAAM,GAAGC,SAAH,IAAgBD,IAAtB;;EAEA,IAAIC,SAAS,IAAI,CAAC,GAAGH,MAAM,CAACI,UAAX,EAAuBD,SAAvB,CAAb,IAAkDA,SAAS,CAACE,IAAV,CAAeC,IAAf,KAAwBR,kBAAkB,CAACS,cAAnB,CAAkCC,cAAhH,EAAgI;IAC9H,OAAOL,SAAS,CAACE,IAAV,CAAeA,IAAtB;EACD;;EAED,OAAO,EAAP;AACD,CARD;;AAUA,IAAII,QAAQ,GAAG,CAAC,GAAGT,MAAM,CAACU,UAAX,EAAuB;EACpCC,IAAI,EAAEC,UAD8B;EAEpCC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJC,QAAQ,EAAE,gBADN;MAEJC,WAAW,EAAE,0CAFT;MAGJC,WAAW,EAAE;IAHT,CADF;IAMJC,QAAQ,EAAE;MACRC,aAAa,EAAE;IADP,CANN;IASJC,MAAM,EAAE,EATJ;IAUJd,IAAI,EAAE;EAVF,CAF8B;EAcpCe,cAAc,EAAE,EAdoB;;EAgBpCC,MAAM,CAACC,OAAD,EAAU;IACd,OAAO;MACLC,cAAc,CAACC,IAAD,EAAO;QACnB,IAAI,CAAC,CAAC,GAAGzB,MAAM,CAAC0B,cAAX,EAA2BD,IAA3B,CAAL,EAAuC;QACvC,MAAMpB,IAAI,GAAGJ,OAAO,CAACwB,IAAI,CAACE,SAAN,CAApB;QACA,MAAMC,UAAU,GAAGvB,IAAI,CAACwB,IAAL,CAAUC,CAAC,IAAIA,CAAC,CAACxB,IAAF,KAAWR,kBAAkB,CAACS,cAAnB,CAAkCwB,eAA5D,CAAnB;QACA,IAAI,CAACH,UAAL,EAAiB;QACjBL,OAAO,CAACS,MAAR,CAAe;UACbC,SAAS,EAAE,eADE;UAEbR,IAAI,EAAEG;QAFO,CAAf;MAID,CAVI;;MAYLM,mBAAmB,CAACT,IAAD,EAAO;QACxB,MAAMU,iBAAiB,GAAGZ,OAAO,CAACa,oBAAR,CAA6BX,IAA7B,CAA1B;QACA,MAAMY,mBAAmB,GAAG,CAAC,GAAGrC,MAAM,CAACsC,2CAAX,EAAwDH,iBAAxD,CAA5B;QACA,IAAIE,mBAAmB,CAACE,MAApB,KAA+B,CAAnC,EAAsC;QACtC,MAAMX,UAAU,GAAGH,IAAI,CAACpB,IAAL,CAAUA,IAAV,CAAewB,IAAf,CAAoBC,CAAC,IAAIA,CAAC,CAACxB,IAAF,KAAWR,kBAAkB,CAACS,cAAnB,CAAkCwB,eAAtE,CAAnB;QACA,IAAI,CAACH,UAAL,EAAiB;QACjBL,OAAO,CAACS,MAAR,CAAe;UACbC,SAAS,EAAE,eADE;UAEbR,IAAI,EAAEG;QAFO,CAAf;MAID;;IAtBI,CAAP;EAyBD;;AA1CmC,CAAvB,CAAf;;AA8CAjC,OAAO,CAACE,OAAR,GAAkBY,QAAlB"},"metadata":{},"sourceType":"script"}