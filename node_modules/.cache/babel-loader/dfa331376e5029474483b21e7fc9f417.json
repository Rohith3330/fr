{"ast":null,"code":"module.exports = sortByProcedure;\n/*\n\tsort the parts of the passed selector,\n\tas there is potential for optimization\n\t(some types of selectors are faster than others)\n*/\n\nvar procedure = require(\"./procedure.json\");\n\nvar attributes = {\n  __proto__: null,\n  exists: 10,\n  equals: 8,\n  not: 7,\n  start: 6,\n  end: 6,\n  any: 5,\n  hyphen: 4,\n  element: 4\n};\n\nfunction sortByProcedure(arr) {\n  var procs = arr.map(getProcedure);\n\n  for (var i = 1; i < arr.length; i++) {\n    var procNew = procs[i];\n    if (procNew < 0) continue;\n\n    for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {\n      var token = arr[j + 1];\n      arr[j + 1] = arr[j];\n      arr[j] = token;\n      procs[j + 1] = procs[j];\n      procs[j] = procNew;\n    }\n  }\n}\n\nfunction getProcedure(token) {\n  var proc = procedure[token.type];\n\n  if (proc === procedure.attribute) {\n    proc = attributes[token.action];\n\n    if (proc === attributes.equals && token.name === \"id\") {\n      //prefer ID selectors (eg. #ID)\n      proc = 9;\n    }\n\n    if (token.ignoreCase) {\n      //ignoreCase adds some overhead, prefer \"normal\" token\n      //this is a binary operation, to ensure it's still an int\n      proc >>= 1;\n    }\n  } else if (proc === procedure.pseudo) {\n    if (!token.data) {\n      proc = 3;\n    } else if (token.name === \"has\" || token.name === \"contains\") {\n      proc = 0; //expensive in any case\n    } else if (token.name === \"matches\" || token.name === \"not\") {\n      proc = 0;\n\n      for (var i = 0; i < token.data.length; i++) {\n        //TODO better handling of complex selectors\n        if (token.data[i].length !== 1) continue;\n        var cur = getProcedure(token.data[i][0]); //avoid executing :has or :contains\n\n        if (cur === 0) {\n          proc = 0;\n          break;\n        }\n\n        if (cur > proc) proc = cur;\n      }\n\n      if (token.data.length > 1 && proc > 0) proc -= 1;\n    } else {\n      proc = 1;\n    }\n  }\n\n  return proc;\n}","map":{"version":3,"names":["module","exports","sortByProcedure","procedure","require","attributes","__proto__","exists","equals","not","start","end","any","hyphen","element","arr","procs","map","getProcedure","i","length","procNew","j","token","proc","type","attribute","action","name","ignoreCase","pseudo","data","cur"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/svgo/node_modules/css-select/lib/sort.js"],"sourcesContent":["module.exports = sortByProcedure;\n\n/*\n\tsort the parts of the passed selector,\n\tas there is potential for optimization\n\t(some types of selectors are faster than others)\n*/\n\nvar procedure = require(\"./procedure.json\");\n\nvar attributes = {\n    __proto__: null,\n    exists: 10,\n    equals: 8,\n    not: 7,\n    start: 6,\n    end: 6,\n    any: 5,\n    hyphen: 4,\n    element: 4\n};\n\nfunction sortByProcedure(arr) {\n    var procs = arr.map(getProcedure);\n    for (var i = 1; i < arr.length; i++) {\n        var procNew = procs[i];\n\n        if (procNew < 0) continue;\n\n        for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {\n            var token = arr[j + 1];\n            arr[j + 1] = arr[j];\n            arr[j] = token;\n            procs[j + 1] = procs[j];\n            procs[j] = procNew;\n        }\n    }\n}\n\nfunction getProcedure(token) {\n    var proc = procedure[token.type];\n\n    if (proc === procedure.attribute) {\n        proc = attributes[token.action];\n\n        if (proc === attributes.equals && token.name === \"id\") {\n            //prefer ID selectors (eg. #ID)\n            proc = 9;\n        }\n\n        if (token.ignoreCase) {\n            //ignoreCase adds some overhead, prefer \"normal\" token\n            //this is a binary operation, to ensure it's still an int\n            proc >>= 1;\n        }\n    } else if (proc === procedure.pseudo) {\n        if (!token.data) {\n            proc = 3;\n        } else if (token.name === \"has\" || token.name === \"contains\") {\n            proc = 0; //expensive in any case\n        } else if (token.name === \"matches\" || token.name === \"not\") {\n            proc = 0;\n            for (var i = 0; i < token.data.length; i++) {\n                //TODO better handling of complex selectors\n                if (token.data[i].length !== 1) continue;\n                var cur = getProcedure(token.data[i][0]);\n                //avoid executing :has or :contains\n                if (cur === 0) {\n                    proc = 0;\n                    break;\n                }\n                if (cur > proc) proc = cur;\n            }\n            if (token.data.length > 1 && proc > 0) proc -= 1;\n        } else {\n            proc = 1;\n        }\n    }\n    return proc;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}