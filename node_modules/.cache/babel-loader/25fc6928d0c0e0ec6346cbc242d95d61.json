{"ast":null,"code":"'use strict';\n\nconst parser = require('postcss-selector-parser');\n\nconst exists = require('../exists');\n\nconst isMixin = require('../isMixin');\n\nconst BasePlugin = require('../plugin');\n\nconst {\n  IE_5_5,\n  IE_6,\n  IE_7\n} = require('../dictionary/browsers');\n\nconst {\n  SELECTOR\n} = require('../dictionary/identifiers');\n\nconst {\n  RULE\n} = require('../dictionary/postcss');\n\nconst {\n  BODY,\n  HTML\n} = require('../dictionary/tags');\n\nmodule.exports = class HtmlCombinatorCommentBody extends BasePlugin {\n  /** @param {import('postcss').Result} result */\n  constructor(result) {\n    super([IE_5_5, IE_6, IE_7], [RULE], result);\n  }\n  /**\n   * @param {import('postcss').Rule} rule\n   * @return {void}\n   */\n\n\n  detect(rule) {\n    if (isMixin(rule)) {\n      return;\n    }\n\n    if (rule.raws.selector && rule.raws.selector.raw) {\n      parser(this.analyse(rule)).processSync(rule.raws.selector.raw);\n    }\n  }\n  /** @param {import('postcss').Rule} rule\n   *  @return {parser.SyncProcessor<void>}\n   */\n\n\n  analyse(rule) {\n    return selectors => {\n      selectors.each(selector => {\n        if (exists(selector, 0, HTML) && (exists(selector, 1, '>') || exists(selector, 1, '~')) && selector.at(2) && selector.at(2).type === 'comment' && exists(selector, 3, ' ') && exists(selector, 4, BODY) && exists(selector, 5, ' ') && selector.at(6)) {\n          this.push(rule, {\n            identifier: SELECTOR,\n            hack: selector.toString()\n          });\n        }\n      });\n    };\n  }\n\n};","map":{"version":3,"names":["parser","require","exists","isMixin","BasePlugin","IE_5_5","IE_6","IE_7","SELECTOR","RULE","BODY","HTML","module","exports","HtmlCombinatorCommentBody","constructor","result","detect","rule","raws","selector","raw","analyse","processSync","selectors","each","at","type","push","identifier","hack","toString"],"sources":["C:/Users/Rohith/mern/frontend/node_modules/stylehacks/src/plugins/htmlCombinatorCommentBody.js"],"sourcesContent":["'use strict';\nconst parser = require('postcss-selector-parser');\nconst exists = require('../exists');\nconst isMixin = require('../isMixin');\nconst BasePlugin = require('../plugin');\nconst { IE_5_5, IE_6, IE_7 } = require('../dictionary/browsers');\nconst { SELECTOR } = require('../dictionary/identifiers');\nconst { RULE } = require('../dictionary/postcss');\nconst { BODY, HTML } = require('../dictionary/tags');\n\nmodule.exports = class HtmlCombinatorCommentBody extends BasePlugin {\n  /** @param {import('postcss').Result} result */\n  constructor(result) {\n    super([IE_5_5, IE_6, IE_7], [RULE], result);\n  }\n\n  /**\n   * @param {import('postcss').Rule} rule\n   * @return {void}\n   */\n  detect(rule) {\n    if (isMixin(rule)) {\n      return;\n    }\n    if (rule.raws.selector && rule.raws.selector.raw) {\n      parser(this.analyse(rule)).processSync(rule.raws.selector.raw);\n    }\n  }\n\n  /** @param {import('postcss').Rule} rule\n   *  @return {parser.SyncProcessor<void>}\n   */\n  analyse(rule) {\n    return (selectors) => {\n      selectors.each((selector) => {\n        if (\n          exists(selector, 0, HTML) &&\n          (exists(selector, 1, '>') || exists(selector, 1, '~')) &&\n          selector.at(2) &&\n          selector.at(2).type === 'comment' &&\n          exists(selector, 3, ' ') &&\n          exists(selector, 4, BODY) &&\n          exists(selector, 5, ' ') &&\n          selector.at(6)\n        ) {\n          this.push(rule, {\n            identifier: SELECTOR,\n            hack: selector.toString(),\n          });\n        }\n      });\n    };\n  }\n};\n"],"mappings":"AAAA;;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,yBAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,WAAD,CAA1B;;AACA,MAAM;EAAEI,MAAF;EAAUC,IAAV;EAAgBC;AAAhB,IAAyBN,OAAO,CAAC,wBAAD,CAAtC;;AACA,MAAM;EAAEO;AAAF,IAAeP,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAM;EAAEQ;AAAF,IAAWR,OAAO,CAAC,uBAAD,CAAxB;;AACA,MAAM;EAAES,IAAF;EAAQC;AAAR,IAAiBV,OAAO,CAAC,oBAAD,CAA9B;;AAEAW,MAAM,CAACC,OAAP,GAAiB,MAAMC,yBAAN,SAAwCV,UAAxC,CAAmD;EAClE;EACAW,WAAW,CAACC,MAAD,EAAS;IAClB,MAAM,CAACX,MAAD,EAASC,IAAT,EAAeC,IAAf,CAAN,EAA4B,CAACE,IAAD,CAA5B,EAAoCO,MAApC;EACD;EAED;AACF;AACA;AACA;;;EACEC,MAAM,CAACC,IAAD,EAAO;IACX,IAAIf,OAAO,CAACe,IAAD,CAAX,EAAmB;MACjB;IACD;;IACD,IAAIA,IAAI,CAACC,IAAL,CAAUC,QAAV,IAAsBF,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmBC,GAA7C,EAAkD;MAChDrB,MAAM,CAAC,KAAKsB,OAAL,CAAaJ,IAAb,CAAD,CAAN,CAA2BK,WAA3B,CAAuCL,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmBC,GAA1D;IACD;EACF;EAED;AACF;AACA;;;EACEC,OAAO,CAACJ,IAAD,EAAO;IACZ,OAAQM,SAAD,IAAe;MACpBA,SAAS,CAACC,IAAV,CAAgBL,QAAD,IAAc;QAC3B,IACElB,MAAM,CAACkB,QAAD,EAAW,CAAX,EAAcT,IAAd,CAAN,KACCT,MAAM,CAACkB,QAAD,EAAW,CAAX,EAAc,GAAd,CAAN,IAA4BlB,MAAM,CAACkB,QAAD,EAAW,CAAX,EAAc,GAAd,CADnC,KAEAA,QAAQ,CAACM,EAAT,CAAY,CAAZ,CAFA,IAGAN,QAAQ,CAACM,EAAT,CAAY,CAAZ,EAAeC,IAAf,KAAwB,SAHxB,IAIAzB,MAAM,CAACkB,QAAD,EAAW,CAAX,EAAc,GAAd,CAJN,IAKAlB,MAAM,CAACkB,QAAD,EAAW,CAAX,EAAcV,IAAd,CALN,IAMAR,MAAM,CAACkB,QAAD,EAAW,CAAX,EAAc,GAAd,CANN,IAOAA,QAAQ,CAACM,EAAT,CAAY,CAAZ,CARF,EASE;UACA,KAAKE,IAAL,CAAUV,IAAV,EAAgB;YACdW,UAAU,EAAErB,QADE;YAEdsB,IAAI,EAAEV,QAAQ,CAACW,QAAT;UAFQ,CAAhB;QAID;MACF,CAhBD;IAiBD,CAlBD;EAmBD;;AA1CiE,CAApE"},"metadata":{},"sourceType":"script"}